
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20034698 	.word	0x20034698
    c004:	00018db9 	.word	0x00018db9
    c008:	0002ffa5 	.word	0x0002ffa5
    c00c:	00018de9 	.word	0x00018de9
    c010:	00018de9 	.word	0x00018de9
    c014:	00018de9 	.word	0x00018de9
    c018:	00018de9 	.word	0x00018de9
    c01c:	00018de9 	.word	0x00018de9
	...
    c02c:	00018ba5 	.word	0x00018ba5
    c030:	00018de9 	.word	0x00018de9
    c034:	00000000 	.word	0x00000000
    c038:	00018af5 	.word	0x00018af5
    c03c:	00018291 	.word	0x00018291

0000c040 <_irq_vector_table>:
    c040:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c050:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c060:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c070:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c080:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c090:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c0a0:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c0b0:	0001cd3d 0003297b 00018d79 00018d79     =...{)..y...y...
    c0c0:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c0d0:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c0e0:	00018d79 00018d79 00032999 00018d79     y...y....)..y...
    c0f0:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c100:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c110:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c120:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c130:	00018d79 00018d79 00018d79 00018d79     y...y...y...y...
    c140:	00018d79                                y...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0002c060 00000001 0000c000 0000c000     `...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <bsec_codegen_sensor_control>:
    c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c244:	ed2d 8b02 	vpush	{d8}
    c248:	b087      	sub	sp, #28
    c24a:	2100      	movs	r1, #0
    c24c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c24e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c250:	6121      	str	r1, [r4, #16]
    c252:	e9c4 1102 	strd	r1, r1, [r4, #8]
    c256:	7521      	strb	r1, [r4, #20]
    c258:	461f      	mov	r7, r3
    c25a:	7031      	strb	r1, [r6, #0]
    c25c:	f500 793c 	add.w	r9, r0, #752	; 0x2f0
    c260:	4616      	mov	r6, r2
    c262:	4605      	mov	r5, r0
    c264:	e9cd 6702 	strd	r6, r7, [sp, #8]
    c268:	f8b0 840e 	ldrh.w	r8, [r0, #1038]	; 0x40e
    c26c:	f001 ffe0 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    c270:	e9d9 2300 	ldrd	r2, r3, [r9]
    c274:	ea52 0103 	orrs.w	r1, r2, r3
    c278:	d02d      	beq.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c27a:	1ab6      	subs	r6, r6, r2
    c27c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; c590 <bsec_codegen_sensor_control+0x350>
    c280:	ed9f 0bc5 	vldr	d0, [pc, #788]	; c598 <bsec_codegen_sensor_control+0x358>
    c284:	eb67 0703 	sbc.w	r7, r7, r3
    c288:	f8b5 a40c 	ldrh.w	sl, [r5, #1036]	; 0x40c
    c28c:	f006 fcb0 	bl	12bf0 <pow>
    c290:	f000 fd0e 	bl	ccb0 <bsec_rt_roundd>
    c294:	ec51 0b10 	vmov	r0, r1, d0
    c298:	f005 feb2 	bl	12000 <__aeabi_d2lz>
    c29c:	fba0 230a 	umull	r2, r3, r0, sl
    c2a0:	fb01 330a 	mla	r3, r1, sl, r3
    c2a4:	ea4f 1a12 	mov.w	sl, r2, lsr #4
    c2a8:	1b90      	subs	r0, r2, r6
    c2aa:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
    c2ae:	eb63 0107 	sbc.w	r1, r3, r7
    c2b2:	ea4f 1b23 	mov.w	fp, r3, asr #4
    c2b6:	4582      	cmp	sl, r0
    c2b8:	eb7b 0101 	sbcs.w	r1, fp, r1
    c2bc:	f2c0 8144 	blt.w	c548 <bsec_codegen_sensor_control+0x308>
    c2c0:	1ab0      	subs	r0, r6, r2
    c2c2:	eb67 0103 	sbc.w	r1, r7, r3
    c2c6:	460b      	mov	r3, r1
    c2c8:	4582      	cmp	sl, r0
    c2ca:	eb7b 0303 	sbcs.w	r3, fp, r3
    c2ce:	da02      	bge.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c2d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c2d2:	2364      	movs	r3, #100	; 0x64
    c2d4:	7013      	strb	r3, [r2, #0]
    c2d6:	2300      	movs	r3, #0
    c2d8:	f10d 0b16 	add.w	fp, sp, #22
    c2dc:	e9c4 3300 	strd	r3, r3, [r4]
    c2e0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    c2e4:	6123      	str	r3, [r4, #16]
    c2e6:	7523      	strb	r3, [r4, #20]
    c2e8:	4622      	mov	r2, r4
    c2ea:	f10d 0315 	add.w	r3, sp, #21
    c2ee:	f8cd b000 	str.w	fp, [sp]
    c2f2:	2101      	movs	r1, #1
    c2f4:	4628      	mov	r0, r5
    c2f6:	f001 ffa1 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c2fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c2fe:	f8bd a016 	ldrh.w	sl, [sp, #22]
    c302:	b12b      	cbz	r3, c310 <bsec_codegen_sensor_control+0xd0>
    c304:	f895 3459 	ldrb.w	r3, [r5, #1113]	; 0x459
    c308:	7463      	strb	r3, [r4, #17]
    c30a:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c30e:	74a3      	strb	r3, [r4, #18]
    c310:	f10d 0315 	add.w	r3, sp, #21
    c314:	4622      	mov	r2, r4
    c316:	f8cd b000 	str.w	fp, [sp]
    c31a:	2102      	movs	r1, #2
    c31c:	4628      	mov	r0, r5
    c31e:	f001 ff8d 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c322:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c326:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c32a:	4592      	cmp	sl, r2
    c32c:	bf28      	it	cs
    c32e:	4692      	movcs	sl, r2
    c330:	b12b      	cbz	r3, c33e <bsec_codegen_sensor_control+0xfe>
    c332:	f895 3458 	ldrb.w	r3, [r5, #1112]	; 0x458
    c336:	74e3      	strb	r3, [r4, #19]
    c338:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c33c:	74a3      	strb	r3, [r4, #18]
    c33e:	f10d 0315 	add.w	r3, sp, #21
    c342:	4622      	mov	r2, r4
    c344:	f8cd b000 	str.w	fp, [sp]
    c348:	2103      	movs	r1, #3
    c34a:	4628      	mov	r0, r5
    c34c:	f001 ff76 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c350:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c354:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c358:	4592      	cmp	sl, r2
    c35a:	bf28      	it	cs
    c35c:	4692      	movcs	sl, r2
    c35e:	b113      	cbz	r3, c366 <bsec_codegen_sensor_control+0x126>
    c360:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c364:	74a3      	strb	r3, [r4, #18]
    c366:	f10d 0315 	add.w	r3, sp, #21
    c36a:	4622      	mov	r2, r4
    c36c:	f8cd b000 	str.w	fp, [sp]
    c370:	2104      	movs	r1, #4
    c372:	4628      	mov	r0, r5
    c374:	f001 ff62 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c378:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c37c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c380:	459a      	cmp	sl, r3
    c382:	bf28      	it	cs
    c384:	469a      	movcs	sl, r3
    c386:	45c2      	cmp	sl, r8
    c388:	bf28      	it	cs
    c38a:	46c2      	movcs	sl, r8
    c38c:	2a00      	cmp	r2, #0
    c38e:	d16d      	bne.n	c46c <bsec_codegen_sensor_control+0x22c>
    c390:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c394:	f8b5 3454 	ldrh.w	r3, [r5, #1108]	; 0x454
    c398:	fbb3 f2fa 	udiv	r2, r3, sl
    c39c:	fb0a 3212 	mls	r2, sl, r2, r3
    c3a0:	ebaa 0a02 	sub.w	sl, sl, r2
    c3a4:	fa1f fa8a 	uxth.w	sl, sl
    c3a8:	f8b5 1410 	ldrh.w	r1, [r5, #1040]	; 0x410
    c3ac:	f8ad 1016 	strh.w	r1, [sp, #22]
    c3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c3b4:	4453      	add	r3, sl
    c3b6:	b29b      	uxth	r3, r3
    c3b8:	fbb3 f2f1 	udiv	r2, r3, r1
    c3bc:	fb01 3312 	mls	r3, r1, r2, r3
    c3c0:	e9c9 6700 	strd	r6, r7, [r9]
    c3c4:	ed9f 1b72 	vldr	d1, [pc, #456]	; c590 <bsec_codegen_sensor_control+0x350>
    c3c8:	f8a5 3454 	strh.w	r3, [r5, #1108]	; 0x454
    c3cc:	f8a5 a40c 	strh.w	sl, [r5, #1036]	; 0x40c
    c3d0:	ed9f 0b71 	vldr	d0, [pc, #452]	; c598 <bsec_codegen_sensor_control+0x358>
    c3d4:	f006 fc0c 	bl	12bf0 <pow>
    c3d8:	f000 fc6a 	bl	ccb0 <bsec_rt_roundd>
    c3dc:	ec51 0b10 	vmov	r0, r1, d0
    c3e0:	f005 fe0e 	bl	12000 <__aeabi_d2lz>
    c3e4:	e9d8 8900 	ldrd	r8, r9, [r8]
    c3e8:	fba0 230a 	umull	r2, r3, r0, sl
    c3ec:	fb01 330a 	mla	r3, r1, sl, r3
    c3f0:	18b6      	adds	r6, r6, r2
    c3f2:	415f      	adcs	r7, r3
    c3f4:	f04f 0a00 	mov.w	sl, #0
    c3f8:	ebb6 0008 	subs.w	r0, r6, r8
    c3fc:	e9c4 6700 	strd	r6, r7, [r4]
    c400:	eb67 0109 	sbc.w	r1, r7, r9
    c404:	f885 a45b 	strb.w	sl, [r5, #1115]	; 0x45b
    c408:	f005 fdbc 	bl	11f84 <__aeabi_l2f>
    c40c:	eddf 8a64 	vldr	s17, [pc, #400]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c410:	ed9f 8a64 	vldr	s16, [pc, #400]	; c5a4 <bsec_codegen_sensor_control+0x364>
    c414:	ee07 0a90 	vmov	s15, r0
    c418:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c41c:	eef4 7ac8 	vcmpe.f32	s15, s16
    c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c424:	d47b      	bmi.n	c51e <bsec_codegen_sensor_control+0x2de>
    c426:	ed9f 7a60 	vldr	s14, [pc, #384]	; c5a8 <bsec_codegen_sensor_control+0x368>
    c42a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c432:	dc74      	bgt.n	c51e <bsec_codegen_sensor_control+0x2de>
    c434:	f505 7340 	add.w	r3, r5, #768	; 0x300
    c438:	e9d3 3400 	ldrd	r3, r4, [r3]
    c43c:	1af0      	subs	r0, r6, r3
    c43e:	eb67 0104 	sbc.w	r1, r7, r4
    c442:	f005 fd9f 	bl	11f84 <__aeabi_l2f>
    c446:	ee07 0a90 	vmov	s15, r0
    c44a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c44e:	eef4 7ac8 	vcmpe.f32	s15, s16
    c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c456:	bf46      	itte	mi
    c458:	2366      	movmi	r3, #102	; 0x66
    c45a:	f885 345c 	strbmi.w	r3, [r5, #1116]	; 0x45c
    c45e:	f885 a45c 	strbpl.w	sl, [r5, #1116]	; 0x45c
    c462:	b007      	add	sp, #28
    c464:	ecbd 8b02 	vpop	{d8}
    c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c46c:	2301      	movs	r3, #1
    c46e:	7423      	strb	r3, [r4, #16]
    c470:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
    c474:	4a4d      	ldr	r2, [pc, #308]	; (c5ac <bsec_codegen_sensor_control+0x36c>)
    c476:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    c47a:	7d52      	ldrb	r2, [r2, #21]
    c47c:	f8b3 1420 	ldrh.w	r1, [r3, #1056]	; 0x420
    c480:	81a1      	strh	r1, [r4, #12]
    c482:	f895 1458 	ldrb.w	r1, [r5, #1112]	; 0x458
    c486:	74e1      	strb	r1, [r4, #19]
    c488:	f895 1457 	ldrb.w	r1, [r5, #1111]	; 0x457
    c48c:	74a1      	strb	r1, [r4, #18]
    c48e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    c492:	edd2 7a89 	vldr	s15, [r2, #548]	; 0x224
    c496:	eef5 7a40 	vcmp.f32	s15, #0.0
    c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c49e:	d10c      	bne.n	c4ba <bsec_codegen_sensor_control+0x27a>
    c4a0:	f895 245b 	ldrb.w	r2, [r5, #1115]	; 0x45b
    c4a4:	b94a      	cbnz	r2, c4ba <bsec_codegen_sensor_control+0x27a>
    c4a6:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
    c4aa:	81e3      	strh	r3, [r4, #14]
    c4ac:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c4b4:	e9c8 2300 	strd	r2, r3, [r8]
    c4b8:	e76c      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c4ba:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4be:	f505 7b40 	add.w	fp, r5, #768	; 0x300
    c4c2:	e9d8 6700 	ldrd	r6, r7, [r8]
    c4c6:	e9db 2300 	ldrd	r2, r3, [fp]
    c4ca:	4296      	cmp	r6, r2
    c4cc:	eb77 0103 	sbcs.w	r1, r7, r3
    c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4d4:	bfbc      	itt	lt
    c4d6:	4616      	movlt	r6, r2
    c4d8:	461f      	movlt	r7, r3
    c4da:	1b80      	subs	r0, r0, r6
    c4dc:	eb61 0107 	sbc.w	r1, r1, r7
    c4e0:	f005 fd50 	bl	11f84 <__aeabi_l2f>
    c4e4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c4e8:	ee07 0a90 	vmov	s15, r0
    c4ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
    c4f0:	f002 f884 	bl	e5fc <bsec_Bsec_getModHeatingDuration>
    c4f4:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c4f8:	81e0      	strh	r0, [r4, #14]
    c4fa:	b9c3      	cbnz	r3, c52e <bsec_codegen_sensor_control+0x2ee>
    c4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c500:	2116      	movs	r1, #22
    c502:	4628      	mov	r0, r5
    c504:	ed9f 0a2a 	vldr	s0, [pc, #168]	; c5b0 <bsec_codegen_sensor_control+0x370>
    c508:	f003 f98a 	bl	f820 <bsec_ChannelHub_setInput>
    c50c:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c510:	2b00      	cmp	r3, #0
    c512:	d0cd      	beq.n	c4b0 <bsec_codegen_sensor_control+0x270>
    c514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c518:	e9cb 2300 	strd	r2, r3, [fp]
    c51c:	e73a      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c51e:	2365      	movs	r3, #101	; 0x65
    c520:	f885 345c 	strb.w	r3, [r5, #1116]	; 0x45c
    c524:	b007      	add	sp, #28
    c526:	ecbd 8b02 	vpop	{d8}
    c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c532:	2116      	movs	r1, #22
    c534:	4628      	mov	r0, r5
    c536:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    c53a:	f003 f971 	bl	f820 <bsec_ChannelHub_setInput>
    c53e:	68a3      	ldr	r3, [r4, #8]
    c540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    c544:	60a3      	str	r3, [r4, #8]
    c546:	e7e1      	b.n	c50c <bsec_codegen_sensor_control+0x2cc>
    c548:	ed9f 1b11 	vldr	d1, [pc, #68]	; c590 <bsec_codegen_sensor_control+0x350>
    c54c:	ed9f 0b12 	vldr	d0, [pc, #72]	; c598 <bsec_codegen_sensor_control+0x358>
    c550:	e9d9 ab00 	ldrd	sl, fp, [r9]
    c554:	f8b5 840c 	ldrh.w	r8, [r5, #1036]	; 0x40c
    c558:	f006 fb4a 	bl	12bf0 <pow>
    c55c:	f000 fba8 	bl	ccb0 <bsec_rt_roundd>
    c560:	ec51 0b10 	vmov	r0, r1, d0
    c564:	f005 fd4c 	bl	12000 <__aeabi_d2lz>
    c568:	fba0 2308 	umull	r2, r3, r0, r8
    c56c:	eb1a 0602 	adds.w	r6, sl, r2
    c570:	fb01 3308 	mla	r3, r1, r8, r3
    c574:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c576:	eb4b 0703 	adc.w	r7, fp, r3
    c57a:	2364      	movs	r3, #100	; 0x64
    c57c:	e9c4 6700 	strd	r6, r7, [r4]
    c580:	7013      	strb	r3, [r2, #0]
    c582:	b007      	add	sp, #28
    c584:	ecbd 8b02 	vpop	{d8}
    c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c58c:	f3af 8000 	nop.w
    c590:	00000000 	.word	0x00000000
    c594:	401c0000 	.word	0x401c0000
    c598:	00000000 	.word	0x00000000
    c59c:	40240000 	.word	0x40240000
    c5a0:	4e6e6b28 	.word	0x4e6e6b28
    c5a4:	42700000 	.word	0x42700000
    c5a8:	43700000 	.word	0x43700000
    c5ac:	00035190 	.word	0x00035190
	...

0000c5b8 <bsec_codegen_update_subscription>:
    c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5bc:	ed2d 8b04 	vpush	{d8-d9}
    c5c0:	b08d      	sub	sp, #52	; 0x34
    c5c2:	e9dd 9a1a 	ldrd	r9, sl, [sp, #104]	; 0x68
    c5c6:	2500      	movs	r5, #0
    c5c8:	4616      	mov	r6, r2
    c5ca:	4604      	mov	r4, r0
    c5cc:	460f      	mov	r7, r1
    c5ce:	f889 5000 	strb.w	r5, [r9]
    c5d2:	f200 412a 	addw	r1, r0, #1066	; 0x42a
    c5d6:	221c      	movs	r2, #28
    c5d8:	a805      	add	r0, sp, #20
    c5da:	469b      	mov	fp, r3
    c5dc:	f027 f8f0 	bl	337c0 <memcpy>
    c5e0:	2e00      	cmp	r6, #0
    c5e2:	f000 8097 	beq.w	c714 <bsec_codegen_update_subscription+0x15c>
    c5e6:	793b      	ldrb	r3, [r7, #4]
    c5e8:	3b01      	subs	r3, #1
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	2a01      	cmp	r2, #1
    c5ee:	f240 8106 	bls.w	c7fe <bsec_codegen_update_subscription+0x246>
    c5f2:	9501      	str	r5, [sp, #4]
    c5f4:	ed9f 8abe 	vldr	s16, [pc, #760]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c5f8:	ed9f 9abe 	vldr	s18, [pc, #760]	; c8f4 <bsec_codegen_update_subscription+0x33c>
    c5fc:	eddf 8abe 	vldr	s17, [pc, #760]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c600:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    c604:	2501      	movs	r5, #1
    c606:	e016      	b.n	c636 <bsec_codegen_update_subscription+0x7e>
    c608:	4abc      	ldr	r2, [pc, #752]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c60a:	411a      	asrs	r2, r3
    c60c:	07d1      	lsls	r1, r2, #31
    c60e:	d515      	bpl.n	c63c <bsec_codegen_update_subscription+0x84>
    c610:	2201      	movs	r2, #1
    c612:	fa02 f303 	lsl.w	r3, r2, r3
    c616:	9a01      	ldr	r2, [sp, #4]
    c618:	4213      	tst	r3, r2
    c61a:	f000 80b4 	beq.w	c786 <bsec_codegen_update_subscription+0x1ce>
    c61e:	23f3      	movs	r3, #243	; 0xf3
    c620:	f889 3000 	strb.w	r3, [r9]
    c624:	3501      	adds	r5, #1
    c626:	b2ed      	uxtb	r5, r5
    c628:	42ae      	cmp	r6, r5
    c62a:	d30e      	bcc.n	c64a <bsec_codegen_update_subscription+0x92>
    c62c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
    c630:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c634:	3b01      	subs	r3, #1
    c636:	b2db      	uxtb	r3, r3
    c638:	2b14      	cmp	r3, #20
    c63a:	d9e5      	bls.n	c608 <bsec_codegen_update_subscription+0x50>
    c63c:	3501      	adds	r5, #1
    c63e:	b2ed      	uxtb	r5, r5
    c640:	230a      	movs	r3, #10
    c642:	42ae      	cmp	r6, r5
    c644:	f889 3000 	strb.w	r3, [r9]
    c648:	d2f0      	bcs.n	c62c <bsec_codegen_update_subscription+0x74>
    c64a:	f999 3000 	ldrsb.w	r3, [r9]
    c64e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
    c652:	2b00      	cmp	r3, #0
    c654:	da61      	bge.n	c71a <bsec_codegen_update_subscription+0x162>
    c656:	f89b 3000 	ldrb.w	r3, [fp]
    c65a:	2b07      	cmp	r3, #7
    c65c:	f240 8087 	bls.w	c76e <bsec_codegen_update_subscription+0x1b6>
    c660:	2300      	movs	r3, #0
    c662:	f8df 92a4 	ldr.w	r9, [pc, #676]	; c908 <bsec_codegen_update_subscription+0x350>
    c666:	ed9f 6aa2 	vldr	s12, [pc, #648]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c66a:	49a4      	ldr	r1, [pc, #656]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c66c:	4ea4      	ldr	r6, [pc, #656]	; (c900 <bsec_codegen_update_subscription+0x348>)
    c66e:	f8df e294 	ldr.w	lr, [pc, #660]	; c904 <bsec_codegen_update_subscription+0x34c>
    c672:	eddf 5aa1 	vldr	s11, [pc, #644]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c676:	469c      	mov	ip, r3
    c678:	e002      	b.n	c680 <bsec_codegen_update_subscription+0xc8>
    c67a:	2f18      	cmp	r7, #24
    c67c:	463b      	mov	r3, r7
    c67e:	d07b      	beq.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c680:	fa49 f203 	asr.w	r2, r9, r3
    c684:	1c5f      	adds	r7, r3, #1
    c686:	07d0      	lsls	r0, r2, #31
    c688:	fa5f f887 	uxtb.w	r8, r7
    c68c:	d5f5      	bpl.n	c67a <bsec_codegen_update_subscription+0xc2>
    c68e:	f10c 0c01 	add.w	ip, ip, #1
    c692:	fa5f fc8c 	uxtb.w	ip, ip
    c696:	f10c 5000 	add.w	r0, ip, #536870912	; 0x20000000
    c69a:	3801      	subs	r0, #1
    c69c:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    c6a0:	2501      	movs	r5, #1
    c6a2:	f880 8004 	strb.w	r8, [r0, #4]
    c6a6:	409d      	lsls	r5, r3
    c6a8:	ed80 6a00 	vstr	s12, [r0]
    c6ac:	2300      	movs	r3, #0
    c6ae:	f64f 78ff 	movw	r8, #65535	; 0xffff
    c6b2:	e00c      	b.n	c6ce <bsec_codegen_update_subscription+0x116>
    c6b4:	4542      	cmp	r2, r8
    c6b6:	d007      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6b8:	ee07 2a90 	vmov	s15, r2
    c6bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c6c0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    c6c4:	ed80 7a00 	vstr	s14, [r0]
    c6c8:	3301      	adds	r3, #1
    c6ca:	2b15      	cmp	r3, #21
    c6cc:	d0d5      	beq.n	c67a <bsec_codegen_update_subscription+0xc2>
    c6ce:	fa41 f203 	asr.w	r2, r1, r3
    c6d2:	07d2      	lsls	r2, r2, #31
    c6d4:	d5f8      	bpl.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6d6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    c6da:	4215      	tst	r5, r2
    c6dc:	d0f4      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6de:	f813 200e 	ldrb.w	r2, [r3, lr]
    c6e2:	ed90 7a00 	vldr	s14, [r0]
    c6e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    c6ea:	eeb4 7a46 	vcmp.f32	s14, s12
    c6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6f2:	f8b2 2428 	ldrh.w	r2, [r2, #1064]	; 0x428
    c6f6:	d0dd      	beq.n	c6b4 <bsec_codegen_update_subscription+0xfc>
    c6f8:	ee07 2a90 	vmov	s15, r2
    c6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c700:	eec5 6aa7 	vdiv.f32	s13, s11, s15
    c704:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c70c:	bf48      	it	mi
    c70e:	edc0 6a00 	vstrmi	s13, [r0]
    c712:	e7d9      	b.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c714:	230c      	movs	r3, #12
    c716:	f889 3000 	strb.w	r3, [r9]
    c71a:	a905      	add	r1, sp, #20
    c71c:	4620      	mov	r0, r4
    c71e:	f001 fdb9 	bl	e294 <bsec_Bsec_checkSamplIntvlCompatibilty>
    c722:	2800      	cmp	r0, #0
    c724:	d168      	bne.n	c7f8 <bsec_codegen_update_subscription+0x240>
    c726:	f999 0000 	ldrsb.w	r0, [r9]
    c72a:	2800      	cmp	r0, #0
    c72c:	db93      	blt.n	c656 <bsec_codegen_update_subscription+0x9e>
    c72e:	4e73      	ldr	r6, [pc, #460]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c730:	4f74      	ldr	r7, [pc, #464]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c732:	2300      	movs	r3, #0
    c734:	fa46 f203 	asr.w	r2, r6, r3
    c738:	1c5d      	adds	r5, r3, #1
    c73a:	07d2      	lsls	r2, r2, #31
    c73c:	b2e9      	uxtb	r1, r5
    c73e:	d50e      	bpl.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c740:	5ddb      	ldrb	r3, [r3, r7]
    c742:	aa0c      	add	r2, sp, #48	; 0x30
    c744:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    c748:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c74c:	f832 2c1e 	ldrh.w	r2, [r2, #-30]
    c750:	f8b3 3428 	ldrh.w	r3, [r3, #1064]	; 0x428
    c754:	4293      	cmp	r3, r2
    c756:	4620      	mov	r0, r4
    c758:	d001      	beq.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c75a:	f001 ffd7 	bl	e70c <bsec_Bsec_requestOutput>
    c75e:	2d15      	cmp	r5, #21
    c760:	462b      	mov	r3, r5
    c762:	d1e7      	bne.n	c734 <bsec_codegen_update_subscription+0x17c>
    c764:	f89b 3000 	ldrb.w	r3, [fp]
    c768:	2b07      	cmp	r3, #7
    c76a:	f63f af79 	bhi.w	c660 <bsec_codegen_update_subscription+0xa8>
    c76e:	23f1      	movs	r3, #241	; 0xf1
    c770:	f889 3000 	strb.w	r3, [r9]
    c774:	f04f 0c00 	mov.w	ip, #0
    c778:	f88b c000 	strb.w	ip, [fp]
    c77c:	b00d      	add	sp, #52	; 0x34
    c77e:	ecbd 8b04 	vpop	{d8-d9}
    c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c786:	f105 5200 	add.w	r2, r5, #536870912	; 0x20000000
    c78a:	3a01      	subs	r2, #1
    c78c:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
    c790:	ed98 0a00 	vldr	s0, [r8]
    c794:	9a01      	ldr	r2, [sp, #4]
    c796:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c79a:	431a      	orrs	r2, r3
    c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7a0:	9201      	str	r2, [sp, #4]
    c7a2:	d143      	bne.n	c82c <bsec_codegen_update_subscription+0x274>
    c7a4:	23f6      	movs	r3, #246	; 0xf6
    c7a6:	f889 3000 	strb.w	r3, [r9]
    c7aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7b2:	dd04      	ble.n	c7be <bsec_codegen_update_subscription+0x206>
    c7b4:	eeb4 0ac8 	vcmpe.f32	s0, s16
    c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7bc:	d454      	bmi.n	c868 <bsec_codegen_update_subscription+0x2b0>
    c7be:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7c6:	bf14      	ite	ne
    c7c8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    c7cc:	2300      	moveq	r3, #0
    c7ce:	b29b      	uxth	r3, r3
    c7d0:	9302      	str	r3, [sp, #8]
    c7d2:	f999 3000 	ldrsb.w	r3, [r9]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	f47f af24 	bne.w	c624 <bsec_codegen_update_subscription+0x6c>
    c7dc:	4a49      	ldr	r2, [pc, #292]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c7de:	f898 3004 	ldrb.w	r3, [r8, #4]
    c7e2:	4413      	add	r3, r2
    c7e4:	aa0c      	add	r2, sp, #48	; 0x30
    c7e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c7ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    c7ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    c7f2:	f823 2c1e 	strh.w	r2, [r3, #-30]
    c7f6:	e715      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c7f8:	f889 0000 	strb.w	r0, [r9]
    c7fc:	e795      	b.n	c72a <bsec_codegen_update_subscription+0x172>
    c7fe:	edd7 7a00 	vldr	s15, [r7]
    c802:	eef5 7a40 	vcmp.f32	s15, #0.0
    c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c80a:	f47f aef2 	bne.w	c5f2 <bsec_codegen_update_subscription+0x3a>
    c80e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    c812:	f247 5330 	movw	r3, #30000	; 0x7530
    c816:	429a      	cmp	r2, r3
    c818:	d01d      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c81a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c81e:	429a      	cmp	r2, r3
    c820:	d019      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c822:	230b      	movs	r3, #11
    c824:	46ac      	mov	ip, r5
    c826:	f889 3000 	strb.w	r3, [r9]
    c82a:	e7a5      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c82c:	eeb4 0a48 	vcmp.f32	s0, s16
    c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c834:	d0c3      	beq.n	c7be <bsec_codegen_update_subscription+0x206>
    c836:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    c83a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c842:	dc04      	bgt.n	c84e <bsec_codegen_update_subscription+0x296>
    c844:	eeb4 0ac9 	vcmpe.f32	s0, s18
    c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c84c:	d5ad      	bpl.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c84e:	23f2      	movs	r3, #242	; 0xf2
    c850:	f889 3000 	strb.w	r3, [r9]
    c854:	e7a9      	b.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c856:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
    c85a:	2b00      	cmp	r3, #0
    c85c:	d188      	bne.n	c770 <bsec_codegen_update_subscription+0x1b8>
    c85e:	2201      	movs	r2, #1
    c860:	469c      	mov	ip, r3
    c862:	f884 245b 	strb.w	r2, [r4, #1115]	; 0x45b
    c866:	e787      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c868:	ee88 0a80 	vdiv.f32	s0, s17, s0
    c86c:	f01e fa48 	bl	2ad00 <roundf>
    c870:	f04f 0a00 	mov.w	sl, #0
    c874:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c878:	ee10 3a10 	vmov	r3, s0
    c87c:	b29b      	uxth	r3, r3
    c87e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    c882:	4a20      	ldr	r2, [pc, #128]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c884:	f898 3004 	ldrb.w	r3, [r8, #4]
    c888:	4413      	add	r3, r2
    c88a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c88e:	4453      	add	r3, sl
    c890:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
    c894:	f10a 0a0e 	add.w	sl, sl, #14
    c898:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
    c89c:	4628      	mov	r0, r5
    c89e:	f000 fb8b 	bl	cfb8 <__aeabi_ui2d>
    c8a2:	a311      	add	r3, pc, #68	; (adr r3, c8e8 <bsec_codegen_update_subscription+0x330>)
    c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8a8:	f000 fc00 	bl	d0ac <__aeabi_dmul>
    c8ac:	ec41 0b10 	vmov	d0, r0, r1
    c8b0:	f000 f9fe 	bl	ccb0 <bsec_rt_roundd>
    c8b4:	ec51 0b10 	vmov	r0, r1, d0
    c8b8:	f005 fa74 	bl	11da4 <__aeabi_d2uiz>
    c8bc:	b280      	uxth	r0, r0
    c8be:	1a2b      	subs	r3, r5, r0
    c8c0:	9a02      	ldr	r2, [sp, #8]
    c8c2:	b29b      	uxth	r3, r3
    c8c4:	4405      	add	r5, r0
    c8c6:	4293      	cmp	r3, r2
    c8c8:	b2ad      	uxth	r5, r5
    c8ca:	d803      	bhi.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8cc:	4295      	cmp	r5, r2
    c8ce:	d301      	bcc.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8d0:	9d03      	ldr	r5, [sp, #12]
    c8d2:	e77e      	b.n	c7d2 <bsec_codegen_update_subscription+0x21a>
    c8d4:	f1ba 0f54 	cmp.w	sl, #84	; 0x54
    c8d8:	d1d3      	bne.n	c882 <bsec_codegen_update_subscription+0x2ca>
    c8da:	23f4      	movs	r3, #244	; 0xf4
    c8dc:	9d03      	ldr	r5, [sp, #12]
    c8de:	f889 3000 	strb.w	r3, [r9]
    c8e2:	e69f      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c8e4:	f3af 8000 	nop.w
    c8e8:	47ae147b 	.word	0x47ae147b
    c8ec:	3f847ae1 	.word	0x3f847ae1
    c8f0:	477fff00 	.word	0x477fff00
    c8f4:	3ada740e 	.word	0x3ada740e
    c8f8:	42c80000 	.word	0x42c80000
    c8fc:	001279ef 	.word	0x001279ef
    c900:	00035124 	.word	0x00035124
    c904:	00035178 	.word	0x00035178
    c908:	00e0200f 	.word	0x00e0200f
    c90c:	00000000 	.word	0x00000000

0000c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>:
    c910:	4916      	ldr	r1, [pc, #88]	; (c96c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x5c>)
    c912:	6041      	str	r1, [r0, #4]
    c914:	b430      	push	{r4, r5}
    c916:	2109      	movs	r1, #9
    c918:	4d15      	ldr	r5, [pc, #84]	; (c970 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x60>)
    c91a:	4c16      	ldr	r4, [pc, #88]	; (c974 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x64>)
    c91c:	7001      	strb	r1, [r0, #0]
    c91e:	4916      	ldr	r1, [pc, #88]	; (c978 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x68>)
    c920:	4a16      	ldr	r2, [pc, #88]	; (c97c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x6c>)
    c922:	6181      	str	r1, [r0, #24]
    c924:	62c5      	str	r5, [r0, #44]	; 0x2c
    c926:	4916      	ldr	r1, [pc, #88]	; (c980 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x70>)
    c928:	4d16      	ldr	r5, [pc, #88]	; (c984 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x74>)
    c92a:	6404      	str	r4, [r0, #64]	; 0x40
    c92c:	4c16      	ldr	r4, [pc, #88]	; (c988 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x78>)
    c92e:	6102      	str	r2, [r0, #16]
    c930:	6241      	str	r1, [r0, #36]	; 0x24
    c932:	4a16      	ldr	r2, [pc, #88]	; (c98c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x7c>)
    c934:	4916      	ldr	r1, [pc, #88]	; (c990 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x80>)
    c936:	6385      	str	r5, [r0, #56]	; 0x38
    c938:	64c4      	str	r4, [r0, #76]	; 0x4c
    c93a:	4d16      	ldr	r5, [pc, #88]	; (c994 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x84>)
    c93c:	4c16      	ldr	r4, [pc, #88]	; (c998 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x88>)
    c93e:	6142      	str	r2, [r0, #20]
    c940:	6281      	str	r1, [r0, #40]	; 0x28
    c942:	2200      	movs	r2, #0
    c944:	4915      	ldr	r1, [pc, #84]	; (c99c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x8c>)
    c946:	63c5      	str	r5, [r0, #60]	; 0x3c
    c948:	6504      	str	r4, [r0, #80]	; 0x50
    c94a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c94e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c952:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
    c956:	6601      	str	r1, [r0, #96]	; 0x60
    c958:	6082      	str	r2, [r0, #8]
    c95a:	61c2      	str	r2, [r0, #28]
    c95c:	6302      	str	r2, [r0, #48]	; 0x30
    c95e:	6442      	str	r2, [r0, #68]	; 0x44
    c960:	60c2      	str	r2, [r0, #12]
    c962:	6202      	str	r2, [r0, #32]
    c964:	6342      	str	r2, [r0, #52]	; 0x34
    c966:	6482      	str	r2, [r0, #72]	; 0x48
    c968:	bc30      	pop	{r4, r5}
    c96a:	4770      	bx	lr
    c96c:	3d96f007 	.word	0x3d96f007
    c970:	c04c3fe6 	.word	0xc04c3fe6
    c974:	408350b1 	.word	0x408350b1
    c978:	40a00000 	.word	0x40a00000
    c97c:	3de17c1c 	.word	0x3de17c1c
    c980:	3e0ccccd 	.word	0x3e0ccccd
    c984:	bf3ced91 	.word	0xbf3ced91
    c988:	3ee3fe5d 	.word	0x3ee3fe5d
    c98c:	3fd78034 	.word	0x3fd78034
    c990:	3e27d567 	.word	0x3e27d567
    c994:	3f403afb 	.word	0x3f403afb
    c998:	bf853c36 	.word	0xbf853c36
    c99c:	40400000 	.word	0x40400000

0000c9a0 <bsec_SensorHeatCompensator_configure>:
    c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9a4:	b086      	sub	sp, #24
    c9a6:	ab04      	add	r3, sp, #16
    c9a8:	ae05      	add	r6, sp, #20
    c9aa:	4605      	mov	r5, r0
    c9ac:	7800      	ldrb	r0, [r0, #0]
    c9ae:	9300      	str	r3, [sp, #0]
    c9b0:	9601      	str	r6, [sp, #4]
    c9b2:	f10d 030f 	add.w	r3, sp, #15
    c9b6:	460f      	mov	r7, r1
    c9b8:	f005 f83a 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    c9bc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9c0:	b9f8      	cbnz	r0, ca02 <bsec_SensorHeatCompensator_configure+0x62>
    c9c2:	2401      	movs	r4, #1
    c9c4:	f105 0a40 	add.w	sl, r5, #64	; 0x40
    c9c8:	f105 092c 	add.w	r9, r5, #44	; 0x2c
    c9cc:	f105 0818 	add.w	r8, r5, #24
    c9d0:	1ea3      	subs	r3, r4, #2
    c9d2:	2b03      	cmp	r3, #3
    c9d4:	d803      	bhi.n	c9de <bsec_SensorHeatCompensator_configure+0x3e>
    c9d6:	e8df f003 	tbb	[pc, r3]
    c9da:	1d23      	.short	0x1d23
    c9dc:	0c17      	.short	0x0c17
    c9de:	1d2a      	adds	r2, r5, #4
    c9e0:	4631      	mov	r1, r6
    c9e2:	4638      	mov	r0, r7
    c9e4:	f003 fb8e 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    c9e8:	2c05      	cmp	r4, #5
    c9ea:	d01f      	beq.n	ca2c <bsec_SensorHeatCompensator_configure+0x8c>
    c9ec:	3401      	adds	r4, #1
    c9ee:	b2e4      	uxtb	r4, r4
    c9f0:	e7ee      	b.n	c9d0 <bsec_SensorHeatCompensator_configure+0x30>
    c9f2:	4638      	mov	r0, r7
    c9f4:	4631      	mov	r1, r6
    c9f6:	f003 f8e7 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
    c9fa:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9fe:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
    ca02:	b006      	add	sp, #24
    ca04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca08:	4652      	mov	r2, sl
    ca0a:	4631      	mov	r1, r6
    ca0c:	4638      	mov	r0, r7
    ca0e:	f003 fb79 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca12:	e7eb      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca14:	464a      	mov	r2, r9
    ca16:	4631      	mov	r1, r6
    ca18:	4638      	mov	r0, r7
    ca1a:	f003 fb73 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca1e:	e7e5      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca20:	4642      	mov	r2, r8
    ca22:	4631      	mov	r1, r6
    ca24:	4638      	mov	r0, r7
    ca26:	f003 fb6d 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca2a:	e7df      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca2c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    ca30:	e7e7      	b.n	ca02 <bsec_SensorHeatCompensator_configure+0x62>
    ca32:	bf00      	nop

0000ca34 <bsec_SensorHeatCompensator_doStep>:
    ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca38:	ed2d 8b04 	vpush	{d8-d9}
    ca3c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    ca40:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
    ca44:	4606      	mov	r6, r0
    ca46:	eeb0 8a40 	vmov.f32	s16, s0
    ca4a:	4614      	mov	r4, r2
    ca4c:	461d      	mov	r5, r3
    ca4e:	eef0 8a60 	vmov.f32	s17, s1
    ca52:	d06a      	beq.n	cb2a <bsec_SensorHeatCompensator_doStep+0xf6>
    ca54:	d846      	bhi.n	cae4 <bsec_SensorHeatCompensator_doStep+0xb0>
    ca56:	2964      	cmp	r1, #100	; 0x64
    ca58:	d065      	beq.n	cb26 <bsec_SensorHeatCompensator_doStep+0xf2>
    ca5a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    ca5e:	d14b      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca60:	2704      	movs	r7, #4
    ca62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ca66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ca6a:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca6e:	f005 f8a7 	bl	11bc0 <bsec_isequal>
    ca72:	2800      	cmp	r0, #0
    ca74:	d140      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca76:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca7e:	1a12      	subs	r2, r2, r0
    ca80:	eb63 0301 	sbc.w	r3, r3, r1
    ca84:	4610      	mov	r0, r2
    ca86:	4619      	mov	r1, r3
    ca88:	f000 fae2 	bl	d050 <__aeabi_l2d>
    ca8c:	a329      	add	r3, pc, #164	; (adr r3, cb34 <bsec_SensorHeatCompensator_doStep+0x100>)
    ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca92:	f000 fc35 	bl	d300 <__aeabi_ddiv>
    ca96:	4680      	mov	r8, r0
    ca98:	4689      	mov	r9, r1
    ca9a:	f000 fdc9 	bl	d630 <__aeabi_d2f>
    ca9e:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    caa2:	ee07 0a90 	vmov	s15, r0
    caa6:	edd7 9a00 	vldr	s19, [r7]
    caaa:	ed97 7a05 	vldr	s14, [r7, #20]
    caae:	ed97 9a0a 	vldr	s18, [r7, #40]	; 0x28
    cab2:	ee67 9aa9 	vmul.f32	s19, s15, s19
    cab6:	4642      	mov	r2, r8
    cab8:	464b      	mov	r3, r9
    caba:	4640      	mov	r0, r8
    cabc:	4649      	mov	r1, r9
    cabe:	ee27 9a89 	vmul.f32	s18, s15, s18
    cac2:	ee79 9a87 	vadd.f32	s19, s19, s14
    cac6:	f000 faf1 	bl	d0ac <__aeabi_dmul>
    caca:	f000 fdb1 	bl	d630 <__aeabi_d2f>
    cace:	ee07 0a90 	vmov	s15, r0
    cad2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    cad6:	ee79 7a27 	vadd.f32	s15, s18, s15
    cada:	ee77 7a87 	vadd.f32	s15, s15, s14
    cade:	ee89 9aa7 	vdiv.f32	s18, s19, s15
    cae2:	e00b      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
    cae4:	f241 7370 	movw	r3, #6000	; 0x1770
    cae8:	4299      	cmp	r1, r3
    caea:	d01a      	beq.n	cb22 <bsec_SensorHeatCompensator_doStep+0xee>
    caec:	f247 5330 	movw	r3, #30000	; 0x7530
    caf0:	4299      	cmp	r1, r3
    caf2:	d101      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    caf4:	2701      	movs	r7, #1
    caf6:	e7b4      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    caf8:	ed9f 9a0d 	vldr	s18, [pc, #52]	; cb30 <bsec_SensorHeatCompensator_doStep+0xfc>
    cafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    cb04:	4620      	mov	r0, r4
    cb06:	4629      	mov	r1, r5
    cb08:	f005 f85a 	bl	11bc0 <bsec_isequal>
    cb0c:	b908      	cbnz	r0, cb12 <bsec_SensorHeatCompensator_doStep+0xde>
    cb0e:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
    cb12:	ee38 0a49 	vsub.f32	s0, s16, s18
    cb16:	ee30 0a68 	vsub.f32	s0, s0, s17
    cb1a:	ecbd 8b04 	vpop	{d8-d9}
    cb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb22:	2702      	movs	r7, #2
    cb24:	e79d      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb26:	2705      	movs	r7, #5
    cb28:	e79b      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb2a:	ed90 9a18 	vldr	s18, [r0, #96]	; 0x60
    cb2e:	e7e5      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
	...
    cb38:	41cdcd65 	.word	0x41cdcd65

0000cb3c <bsec_SensorHeatCompensator_getConfiguration>:
    cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb40:	b085      	sub	sp, #20
    cb42:	ac04      	add	r4, sp, #16
    cb44:	2505      	movs	r5, #5
    cb46:	f804 5d09 	strb.w	r5, [r4, #-9]!
    cb4a:	4606      	mov	r6, r0
    cb4c:	4617      	mov	r7, r2
    cb4e:	7800      	ldrb	r0, [r0, #0]
    cb50:	4622      	mov	r2, r4
    cb52:	460d      	mov	r5, r1
    cb54:	f004 ff9a 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cb58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb5c:	9003      	str	r0, [sp, #12]
    cb5e:	b1d2      	cbz	r2, cb96 <bsec_SensorHeatCompensator_getConfiguration+0x5a>
    cb60:	2401      	movs	r4, #1
    cb62:	f106 0940 	add.w	r9, r6, #64	; 0x40
    cb66:	f106 082c 	add.w	r8, r6, #44	; 0x2c
    cb6a:	1e63      	subs	r3, r4, #1
    cb6c:	2b04      	cmp	r3, #4
    cb6e:	d80d      	bhi.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cb70:	e8df f003 	tbb	[pc, r3]
    cb74:	2c35223e 	.word	0x2c35223e
    cb78:	03          	.byte	0x03
    cb79:	00          	.byte	0x00
    cb7a:	aa03      	add	r2, sp, #12
    cb7c:	4639      	mov	r1, r7
    cb7e:	4628      	mov	r0, r5
    cb80:	ed96 0a18 	vldr	s0, [r6, #96]	; 0x60
    cb84:	f003 f83a 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
    cb88:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb8c:	3401      	adds	r4, #1
    cb8e:	b2e4      	uxtb	r4, r4
    cb90:	42a2      	cmp	r2, r4
    cb92:	d2ea      	bcs.n	cb6a <bsec_SensorHeatCompensator_getConfiguration+0x2e>
    cb94:	9803      	ldr	r0, [sp, #12]
    cb96:	a904      	add	r1, sp, #16
    cb98:	2202      	movs	r2, #2
    cb9a:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cb9e:	a802      	add	r0, sp, #8
    cba0:	f026 fe0e 	bl	337c0 <memcpy>
    cba4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cba8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    cbac:	9803      	ldr	r0, [sp, #12]
    cbae:	702a      	strb	r2, [r5, #0]
    cbb0:	706b      	strb	r3, [r5, #1]
    cbb2:	b005      	add	sp, #20
    cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbb8:	463a      	mov	r2, r7
    cbba:	ab03      	add	r3, sp, #12
    cbbc:	4629      	mov	r1, r5
    cbbe:	f106 0018 	add.w	r0, r6, #24
    cbc2:	f003 fa11 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbca:	e7df      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbcc:	463a      	mov	r2, r7
    cbce:	ab03      	add	r3, sp, #12
    cbd0:	4629      	mov	r1, r5
    cbd2:	4648      	mov	r0, r9
    cbd4:	f003 fa08 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbdc:	e7d6      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbde:	463a      	mov	r2, r7
    cbe0:	ab03      	add	r3, sp, #12
    cbe2:	4629      	mov	r1, r5
    cbe4:	4640      	mov	r0, r8
    cbe6:	f003 f9ff 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbee:	e7cd      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbf0:	463a      	mov	r2, r7
    cbf2:	ab03      	add	r3, sp, #12
    cbf4:	4629      	mov	r1, r5
    cbf6:	1d30      	adds	r0, r6, #4
    cbf8:	f003 f9f6 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbfc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cc00:	e7c4      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cc02:	bf00      	nop

0000cc04 <bsec_SensorHeatCompensator_getState>:
    cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc08:	b086      	sub	sp, #24
    cc0a:	ad06      	add	r5, sp, #24
    cc0c:	2401      	movs	r4, #1
    cc0e:	f805 4d09 	strb.w	r4, [r5, #-9]!
    cc12:	4607      	mov	r7, r0
    cc14:	4690      	mov	r8, r2
    cc16:	7800      	ldrb	r0, [r0, #0]
    cc18:	462a      	mov	r2, r5
    cc1a:	460e      	mov	r6, r1
    cc1c:	f004 ff36 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cc20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc24:	9005      	str	r0, [sp, #20]
    cc26:	b1ab      	cbz	r3, cc54 <bsec_SensorHeatCompensator_getState+0x50>
    cc28:	ad05      	add	r5, sp, #20
    cc2a:	e003      	b.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc2c:	3401      	adds	r4, #1
    cc2e:	b2e4      	uxtb	r4, r4
    cc30:	42a3      	cmp	r3, r4
    cc32:	d30e      	bcc.n	cc52 <bsec_SensorHeatCompensator_getState+0x4e>
    cc34:	2c01      	cmp	r4, #1
    cc36:	d1f9      	bne.n	cc2c <bsec_SensorHeatCompensator_getState+0x28>
    cc38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
    cc3c:	4643      	mov	r3, r8
    cc3e:	9500      	str	r5, [sp, #0]
    cc40:	4632      	mov	r2, r6
    cc42:	f003 f84d 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
    cc46:	3401      	adds	r4, #1
    cc48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc4c:	b2e4      	uxtb	r4, r4
    cc4e:	42a3      	cmp	r3, r4
    cc50:	d2f0      	bcs.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc52:	9805      	ldr	r0, [sp, #20]
    cc54:	a906      	add	r1, sp, #24
    cc56:	2202      	movs	r2, #2
    cc58:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cc5c:	a804      	add	r0, sp, #16
    cc5e:	f026 fdaf 	bl	337c0 <memcpy>
    cc62:	f89d 2010 	ldrb.w	r2, [sp, #16]
    cc66:	f89d 3011 	ldrb.w	r3, [sp, #17]
    cc6a:	9805      	ldr	r0, [sp, #20]
    cc6c:	7032      	strb	r2, [r6, #0]
    cc6e:	7073      	strb	r3, [r6, #1]
    cc70:	b006      	add	sp, #24
    cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc76:	bf00      	nop

0000cc78 <bsec_SensorHeatCompensator_setState>:
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	b086      	sub	sp, #24
    cc7c:	ab04      	add	r3, sp, #16
    cc7e:	ad05      	add	r5, sp, #20
    cc80:	4604      	mov	r4, r0
    cc82:	7800      	ldrb	r0, [r0, #0]
    cc84:	9300      	str	r3, [sp, #0]
    cc86:	9501      	str	r5, [sp, #4]
    cc88:	f10d 030f 	add.w	r3, sp, #15
    cc8c:	460e      	mov	r6, r1
    cc8e:	f004 fecf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    cc92:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cc96:	b938      	cbnz	r0, cca8 <bsec_SensorHeatCompensator_setState+0x30>
    cc98:	4629      	mov	r1, r5
    cc9a:	4630      	mov	r0, r6
    cc9c:	f003 f804 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
    cca0:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    cca4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cca8:	b006      	add	sp, #24
    ccaa:	bd70      	pop	{r4, r5, r6, pc}
    ccac:	0000      	movs	r0, r0
	...

0000ccb0 <bsec_rt_roundd>:
    ccb0:	b538      	push	{r3, r4, r5, lr}
    ccb2:	ec55 4b10 	vmov	r4, r5, d0
    ccb6:	f01d ffb5 	bl	2ac24 <fabs>
    ccba:	2200      	movs	r2, #0
    ccbc:	4b1a      	ldr	r3, [pc, #104]	; (cd28 <bsec_rt_roundd+0x78>)
    ccbe:	ec51 0b10 	vmov	r0, r1, d0
    ccc2:	f000 fc65 	bl	d590 <__aeabi_dcmplt>
    ccc6:	b180      	cbz	r0, ccea <bsec_rt_roundd+0x3a>
    ccc8:	2200      	movs	r2, #0
    ccca:	4b18      	ldr	r3, [pc, #96]	; (cd2c <bsec_rt_roundd+0x7c>)
    cccc:	4620      	mov	r0, r4
    ccce:	4629      	mov	r1, r5
    ccd0:	f000 fc72 	bl	d5b8 <__aeabi_dcmpge>
    ccd4:	b960      	cbnz	r0, ccf0 <bsec_rt_roundd+0x40>
    ccd6:	2200      	movs	r2, #0
    ccd8:	4b15      	ldr	r3, [pc, #84]	; (cd30 <bsec_rt_roundd+0x80>)
    ccda:	4620      	mov	r0, r4
    ccdc:	4629      	mov	r1, r5
    ccde:	f000 fc75 	bl	d5cc <__aeabi_dcmpgt>
    cce2:	b188      	cbz	r0, cd08 <bsec_rt_roundd+0x58>
    cce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; cd20 <bsec_rt_roundd+0x70>
    cce8:	bd38      	pop	{r3, r4, r5, pc}
    ccea:	ec45 4b10 	vmov	d0, r4, r5
    ccee:	bd38      	pop	{r3, r4, r5, pc}
    ccf0:	4620      	mov	r0, r4
    ccf2:	4629      	mov	r1, r5
    ccf4:	4b0d      	ldr	r3, [pc, #52]	; (cd2c <bsec_rt_roundd+0x7c>)
    ccf6:	2200      	movs	r2, #0
    ccf8:	f000 f822 	bl	cd40 <__adddf3>
    ccfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd00:	ec41 0b10 	vmov	d0, r0, r1
    cd04:	f005 bef0 	b.w	12ae8 <floor>
    cd08:	4620      	mov	r0, r4
    cd0a:	4629      	mov	r1, r5
    cd0c:	4b07      	ldr	r3, [pc, #28]	; (cd2c <bsec_rt_roundd+0x7c>)
    cd0e:	2200      	movs	r2, #0
    cd10:	f000 f814 	bl	cd3c <__aeabi_dsub>
    cd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd18:	ec41 0b10 	vmov	d0, r0, r1
    cd1c:	f005 be64 	b.w	129e8 <ceil>
	...
    cd28:	43300000 	.word	0x43300000
    cd2c:	3fe00000 	.word	0x3fe00000
    cd30:	bfe00000 	.word	0xbfe00000

0000cd34 <__aeabi_drsub>:
    cd34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cd38:	e002      	b.n	cd40 <__adddf3>
    cd3a:	bf00      	nop

0000cd3c <__aeabi_dsub>:
    cd3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cd40 <__adddf3>:
    cd40:	b530      	push	{r4, r5, lr}
    cd42:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cd46:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cd4a:	ea94 0f05 	teq	r4, r5
    cd4e:	bf08      	it	eq
    cd50:	ea90 0f02 	teqeq	r0, r2
    cd54:	bf1f      	itttt	ne
    cd56:	ea54 0c00 	orrsne.w	ip, r4, r0
    cd5a:	ea55 0c02 	orrsne.w	ip, r5, r2
    cd5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cd62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cd66:	f000 80e2 	beq.w	cf2e <__adddf3+0x1ee>
    cd6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cd6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cd72:	bfb8      	it	lt
    cd74:	426d      	neglt	r5, r5
    cd76:	dd0c      	ble.n	cd92 <__adddf3+0x52>
    cd78:	442c      	add	r4, r5
    cd7a:	ea80 0202 	eor.w	r2, r0, r2
    cd7e:	ea81 0303 	eor.w	r3, r1, r3
    cd82:	ea82 0000 	eor.w	r0, r2, r0
    cd86:	ea83 0101 	eor.w	r1, r3, r1
    cd8a:	ea80 0202 	eor.w	r2, r0, r2
    cd8e:	ea81 0303 	eor.w	r3, r1, r3
    cd92:	2d36      	cmp	r5, #54	; 0x36
    cd94:	bf88      	it	hi
    cd96:	bd30      	pophi	{r4, r5, pc}
    cd98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cd9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cda0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    cda4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    cda8:	d002      	beq.n	cdb0 <__adddf3+0x70>
    cdaa:	4240      	negs	r0, r0
    cdac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cdb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cdb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    cdbc:	d002      	beq.n	cdc4 <__adddf3+0x84>
    cdbe:	4252      	negs	r2, r2
    cdc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cdc4:	ea94 0f05 	teq	r4, r5
    cdc8:	f000 80a7 	beq.w	cf1a <__adddf3+0x1da>
    cdcc:	f1a4 0401 	sub.w	r4, r4, #1
    cdd0:	f1d5 0e20 	rsbs	lr, r5, #32
    cdd4:	db0d      	blt.n	cdf2 <__adddf3+0xb2>
    cdd6:	fa02 fc0e 	lsl.w	ip, r2, lr
    cdda:	fa22 f205 	lsr.w	r2, r2, r5
    cdde:	1880      	adds	r0, r0, r2
    cde0:	f141 0100 	adc.w	r1, r1, #0
    cde4:	fa03 f20e 	lsl.w	r2, r3, lr
    cde8:	1880      	adds	r0, r0, r2
    cdea:	fa43 f305 	asr.w	r3, r3, r5
    cdee:	4159      	adcs	r1, r3
    cdf0:	e00e      	b.n	ce10 <__adddf3+0xd0>
    cdf2:	f1a5 0520 	sub.w	r5, r5, #32
    cdf6:	f10e 0e20 	add.w	lr, lr, #32
    cdfa:	2a01      	cmp	r2, #1
    cdfc:	fa03 fc0e 	lsl.w	ip, r3, lr
    ce00:	bf28      	it	cs
    ce02:	f04c 0c02 	orrcs.w	ip, ip, #2
    ce06:	fa43 f305 	asr.w	r3, r3, r5
    ce0a:	18c0      	adds	r0, r0, r3
    ce0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ce10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ce14:	d507      	bpl.n	ce26 <__adddf3+0xe6>
    ce16:	f04f 0e00 	mov.w	lr, #0
    ce1a:	f1dc 0c00 	rsbs	ip, ip, #0
    ce1e:	eb7e 0000 	sbcs.w	r0, lr, r0
    ce22:	eb6e 0101 	sbc.w	r1, lr, r1
    ce26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ce2a:	d31b      	bcc.n	ce64 <__adddf3+0x124>
    ce2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ce30:	d30c      	bcc.n	ce4c <__adddf3+0x10c>
    ce32:	0849      	lsrs	r1, r1, #1
    ce34:	ea5f 0030 	movs.w	r0, r0, rrx
    ce38:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ce3c:	f104 0401 	add.w	r4, r4, #1
    ce40:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ce44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ce48:	f080 809a 	bcs.w	cf80 <__adddf3+0x240>
    ce4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ce50:	bf08      	it	eq
    ce52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ce56:	f150 0000 	adcs.w	r0, r0, #0
    ce5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ce5e:	ea41 0105 	orr.w	r1, r1, r5
    ce62:	bd30      	pop	{r4, r5, pc}
    ce64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ce68:	4140      	adcs	r0, r0
    ce6a:	eb41 0101 	adc.w	r1, r1, r1
    ce6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce72:	f1a4 0401 	sub.w	r4, r4, #1
    ce76:	d1e9      	bne.n	ce4c <__adddf3+0x10c>
    ce78:	f091 0f00 	teq	r1, #0
    ce7c:	bf04      	itt	eq
    ce7e:	4601      	moveq	r1, r0
    ce80:	2000      	moveq	r0, #0
    ce82:	fab1 f381 	clz	r3, r1
    ce86:	bf08      	it	eq
    ce88:	3320      	addeq	r3, #32
    ce8a:	f1a3 030b 	sub.w	r3, r3, #11
    ce8e:	f1b3 0220 	subs.w	r2, r3, #32
    ce92:	da0c      	bge.n	ceae <__adddf3+0x16e>
    ce94:	320c      	adds	r2, #12
    ce96:	dd08      	ble.n	ceaa <__adddf3+0x16a>
    ce98:	f102 0c14 	add.w	ip, r2, #20
    ce9c:	f1c2 020c 	rsb	r2, r2, #12
    cea0:	fa01 f00c 	lsl.w	r0, r1, ip
    cea4:	fa21 f102 	lsr.w	r1, r1, r2
    cea8:	e00c      	b.n	cec4 <__adddf3+0x184>
    ceaa:	f102 0214 	add.w	r2, r2, #20
    ceae:	bfd8      	it	le
    ceb0:	f1c2 0c20 	rsble	ip, r2, #32
    ceb4:	fa01 f102 	lsl.w	r1, r1, r2
    ceb8:	fa20 fc0c 	lsr.w	ip, r0, ip
    cebc:	bfdc      	itt	le
    cebe:	ea41 010c 	orrle.w	r1, r1, ip
    cec2:	4090      	lslle	r0, r2
    cec4:	1ae4      	subs	r4, r4, r3
    cec6:	bfa2      	ittt	ge
    cec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cecc:	4329      	orrge	r1, r5
    cece:	bd30      	popge	{r4, r5, pc}
    ced0:	ea6f 0404 	mvn.w	r4, r4
    ced4:	3c1f      	subs	r4, #31
    ced6:	da1c      	bge.n	cf12 <__adddf3+0x1d2>
    ced8:	340c      	adds	r4, #12
    ceda:	dc0e      	bgt.n	cefa <__adddf3+0x1ba>
    cedc:	f104 0414 	add.w	r4, r4, #20
    cee0:	f1c4 0220 	rsb	r2, r4, #32
    cee4:	fa20 f004 	lsr.w	r0, r0, r4
    cee8:	fa01 f302 	lsl.w	r3, r1, r2
    ceec:	ea40 0003 	orr.w	r0, r0, r3
    cef0:	fa21 f304 	lsr.w	r3, r1, r4
    cef4:	ea45 0103 	orr.w	r1, r5, r3
    cef8:	bd30      	pop	{r4, r5, pc}
    cefa:	f1c4 040c 	rsb	r4, r4, #12
    cefe:	f1c4 0220 	rsb	r2, r4, #32
    cf02:	fa20 f002 	lsr.w	r0, r0, r2
    cf06:	fa01 f304 	lsl.w	r3, r1, r4
    cf0a:	ea40 0003 	orr.w	r0, r0, r3
    cf0e:	4629      	mov	r1, r5
    cf10:	bd30      	pop	{r4, r5, pc}
    cf12:	fa21 f004 	lsr.w	r0, r1, r4
    cf16:	4629      	mov	r1, r5
    cf18:	bd30      	pop	{r4, r5, pc}
    cf1a:	f094 0f00 	teq	r4, #0
    cf1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cf22:	bf06      	itte	eq
    cf24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cf28:	3401      	addeq	r4, #1
    cf2a:	3d01      	subne	r5, #1
    cf2c:	e74e      	b.n	cdcc <__adddf3+0x8c>
    cf2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf32:	bf18      	it	ne
    cf34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cf38:	d029      	beq.n	cf8e <__adddf3+0x24e>
    cf3a:	ea94 0f05 	teq	r4, r5
    cf3e:	bf08      	it	eq
    cf40:	ea90 0f02 	teqeq	r0, r2
    cf44:	d005      	beq.n	cf52 <__adddf3+0x212>
    cf46:	ea54 0c00 	orrs.w	ip, r4, r0
    cf4a:	bf04      	itt	eq
    cf4c:	4619      	moveq	r1, r3
    cf4e:	4610      	moveq	r0, r2
    cf50:	bd30      	pop	{r4, r5, pc}
    cf52:	ea91 0f03 	teq	r1, r3
    cf56:	bf1e      	ittt	ne
    cf58:	2100      	movne	r1, #0
    cf5a:	2000      	movne	r0, #0
    cf5c:	bd30      	popne	{r4, r5, pc}
    cf5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cf62:	d105      	bne.n	cf70 <__adddf3+0x230>
    cf64:	0040      	lsls	r0, r0, #1
    cf66:	4149      	adcs	r1, r1
    cf68:	bf28      	it	cs
    cf6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cf6e:	bd30      	pop	{r4, r5, pc}
    cf70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cf74:	bf3c      	itt	cc
    cf76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    cf7a:	bd30      	popcc	{r4, r5, pc}
    cf7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cf80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cf84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cf88:	f04f 0000 	mov.w	r0, #0
    cf8c:	bd30      	pop	{r4, r5, pc}
    cf8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf92:	bf1a      	itte	ne
    cf94:	4619      	movne	r1, r3
    cf96:	4610      	movne	r0, r2
    cf98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cf9c:	bf1c      	itt	ne
    cf9e:	460b      	movne	r3, r1
    cfa0:	4602      	movne	r2, r0
    cfa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cfa6:	bf06      	itte	eq
    cfa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cfac:	ea91 0f03 	teqeq	r1, r3
    cfb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cfb4:	bd30      	pop	{r4, r5, pc}
    cfb6:	bf00      	nop

0000cfb8 <__aeabi_ui2d>:
    cfb8:	f090 0f00 	teq	r0, #0
    cfbc:	bf04      	itt	eq
    cfbe:	2100      	moveq	r1, #0
    cfc0:	4770      	bxeq	lr
    cfc2:	b530      	push	{r4, r5, lr}
    cfc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfcc:	f04f 0500 	mov.w	r5, #0
    cfd0:	f04f 0100 	mov.w	r1, #0
    cfd4:	e750      	b.n	ce78 <__adddf3+0x138>
    cfd6:	bf00      	nop

0000cfd8 <__aeabi_i2d>:
    cfd8:	f090 0f00 	teq	r0, #0
    cfdc:	bf04      	itt	eq
    cfde:	2100      	moveq	r1, #0
    cfe0:	4770      	bxeq	lr
    cfe2:	b530      	push	{r4, r5, lr}
    cfe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cff0:	bf48      	it	mi
    cff2:	4240      	negmi	r0, r0
    cff4:	f04f 0100 	mov.w	r1, #0
    cff8:	e73e      	b.n	ce78 <__adddf3+0x138>
    cffa:	bf00      	nop

0000cffc <__aeabi_f2d>:
    cffc:	0042      	lsls	r2, r0, #1
    cffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d002:	ea4f 0131 	mov.w	r1, r1, rrx
    d006:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d00a:	bf1f      	itttt	ne
    d00c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d018:	4770      	bxne	lr
    d01a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    d01e:	bf08      	it	eq
    d020:	4770      	bxeq	lr
    d022:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    d026:	bf04      	itt	eq
    d028:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    d02c:	4770      	bxeq	lr
    d02e:	b530      	push	{r4, r5, lr}
    d030:	f44f 7460 	mov.w	r4, #896	; 0x380
    d034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d03c:	e71c      	b.n	ce78 <__adddf3+0x138>
    d03e:	bf00      	nop

0000d040 <__aeabi_ul2d>:
    d040:	ea50 0201 	orrs.w	r2, r0, r1
    d044:	bf08      	it	eq
    d046:	4770      	bxeq	lr
    d048:	b530      	push	{r4, r5, lr}
    d04a:	f04f 0500 	mov.w	r5, #0
    d04e:	e00a      	b.n	d066 <__aeabi_l2d+0x16>

0000d050 <__aeabi_l2d>:
    d050:	ea50 0201 	orrs.w	r2, r0, r1
    d054:	bf08      	it	eq
    d056:	4770      	bxeq	lr
    d058:	b530      	push	{r4, r5, lr}
    d05a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d05e:	d502      	bpl.n	d066 <__aeabi_l2d+0x16>
    d060:	4240      	negs	r0, r0
    d062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d066:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d06a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d06e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d072:	f43f aed8 	beq.w	ce26 <__adddf3+0xe6>
    d076:	f04f 0203 	mov.w	r2, #3
    d07a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d07e:	bf18      	it	ne
    d080:	3203      	addne	r2, #3
    d082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d086:	bf18      	it	ne
    d088:	3203      	addne	r2, #3
    d08a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d08e:	f1c2 0320 	rsb	r3, r2, #32
    d092:	fa00 fc03 	lsl.w	ip, r0, r3
    d096:	fa20 f002 	lsr.w	r0, r0, r2
    d09a:	fa01 fe03 	lsl.w	lr, r1, r3
    d09e:	ea40 000e 	orr.w	r0, r0, lr
    d0a2:	fa21 f102 	lsr.w	r1, r1, r2
    d0a6:	4414      	add	r4, r2
    d0a8:	e6bd      	b.n	ce26 <__adddf3+0xe6>
    d0aa:	bf00      	nop

0000d0ac <__aeabi_dmul>:
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d0b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d0b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d0ba:	bf1d      	ittte	ne
    d0bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d0c0:	ea94 0f0c 	teqne	r4, ip
    d0c4:	ea95 0f0c 	teqne	r5, ip
    d0c8:	f000 f8de 	bleq	d288 <__aeabi_dmul+0x1dc>
    d0cc:	442c      	add	r4, r5
    d0ce:	ea81 0603 	eor.w	r6, r1, r3
    d0d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d0d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d0da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d0de:	bf18      	it	ne
    d0e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d0e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d0ec:	d038      	beq.n	d160 <__aeabi_dmul+0xb4>
    d0ee:	fba0 ce02 	umull	ip, lr, r0, r2
    d0f2:	f04f 0500 	mov.w	r5, #0
    d0f6:	fbe1 e502 	umlal	lr, r5, r1, r2
    d0fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d0fe:	fbe0 e503 	umlal	lr, r5, r0, r3
    d102:	f04f 0600 	mov.w	r6, #0
    d106:	fbe1 5603 	umlal	r5, r6, r1, r3
    d10a:	f09c 0f00 	teq	ip, #0
    d10e:	bf18      	it	ne
    d110:	f04e 0e01 	orrne.w	lr, lr, #1
    d114:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d118:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d11c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d120:	d204      	bcs.n	d12c <__aeabi_dmul+0x80>
    d122:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d126:	416d      	adcs	r5, r5
    d128:	eb46 0606 	adc.w	r6, r6, r6
    d12c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d130:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d134:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d138:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d13c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d140:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d144:	bf88      	it	hi
    d146:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d14a:	d81e      	bhi.n	d18a <__aeabi_dmul+0xde>
    d14c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d150:	bf08      	it	eq
    d152:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d156:	f150 0000 	adcs.w	r0, r0, #0
    d15a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    d160:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d164:	ea46 0101 	orr.w	r1, r6, r1
    d168:	ea40 0002 	orr.w	r0, r0, r2
    d16c:	ea81 0103 	eor.w	r1, r1, r3
    d170:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d174:	bfc2      	ittt	gt
    d176:	ebd4 050c 	rsbsgt	r5, r4, ip
    d17a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d17e:	bd70      	popgt	{r4, r5, r6, pc}
    d180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d184:	f04f 0e00 	mov.w	lr, #0
    d188:	3c01      	subs	r4, #1
    d18a:	f300 80ab 	bgt.w	d2e4 <__aeabi_dmul+0x238>
    d18e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d192:	bfde      	ittt	le
    d194:	2000      	movle	r0, #0
    d196:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d19a:	bd70      	pople	{r4, r5, r6, pc}
    d19c:	f1c4 0400 	rsb	r4, r4, #0
    d1a0:	3c20      	subs	r4, #32
    d1a2:	da35      	bge.n	d210 <__aeabi_dmul+0x164>
    d1a4:	340c      	adds	r4, #12
    d1a6:	dc1b      	bgt.n	d1e0 <__aeabi_dmul+0x134>
    d1a8:	f104 0414 	add.w	r4, r4, #20
    d1ac:	f1c4 0520 	rsb	r5, r4, #32
    d1b0:	fa00 f305 	lsl.w	r3, r0, r5
    d1b4:	fa20 f004 	lsr.w	r0, r0, r4
    d1b8:	fa01 f205 	lsl.w	r2, r1, r5
    d1bc:	ea40 0002 	orr.w	r0, r0, r2
    d1c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d1c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d1c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d1cc:	fa21 f604 	lsr.w	r6, r1, r4
    d1d0:	eb42 0106 	adc.w	r1, r2, r6
    d1d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d1d8:	bf08      	it	eq
    d1da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d1de:	bd70      	pop	{r4, r5, r6, pc}
    d1e0:	f1c4 040c 	rsb	r4, r4, #12
    d1e4:	f1c4 0520 	rsb	r5, r4, #32
    d1e8:	fa00 f304 	lsl.w	r3, r0, r4
    d1ec:	fa20 f005 	lsr.w	r0, r0, r5
    d1f0:	fa01 f204 	lsl.w	r2, r1, r4
    d1f4:	ea40 0002 	orr.w	r0, r0, r2
    d1f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d1fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d200:	f141 0100 	adc.w	r1, r1, #0
    d204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d208:	bf08      	it	eq
    d20a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d20e:	bd70      	pop	{r4, r5, r6, pc}
    d210:	f1c4 0520 	rsb	r5, r4, #32
    d214:	fa00 f205 	lsl.w	r2, r0, r5
    d218:	ea4e 0e02 	orr.w	lr, lr, r2
    d21c:	fa20 f304 	lsr.w	r3, r0, r4
    d220:	fa01 f205 	lsl.w	r2, r1, r5
    d224:	ea43 0302 	orr.w	r3, r3, r2
    d228:	fa21 f004 	lsr.w	r0, r1, r4
    d22c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d230:	fa21 f204 	lsr.w	r2, r1, r4
    d234:	ea20 0002 	bic.w	r0, r0, r2
    d238:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d23c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d240:	bf08      	it	eq
    d242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d246:	bd70      	pop	{r4, r5, r6, pc}
    d248:	f094 0f00 	teq	r4, #0
    d24c:	d10f      	bne.n	d26e <__aeabi_dmul+0x1c2>
    d24e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d252:	0040      	lsls	r0, r0, #1
    d254:	eb41 0101 	adc.w	r1, r1, r1
    d258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d25c:	bf08      	it	eq
    d25e:	3c01      	subeq	r4, #1
    d260:	d0f7      	beq.n	d252 <__aeabi_dmul+0x1a6>
    d262:	ea41 0106 	orr.w	r1, r1, r6
    d266:	f095 0f00 	teq	r5, #0
    d26a:	bf18      	it	ne
    d26c:	4770      	bxne	lr
    d26e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d272:	0052      	lsls	r2, r2, #1
    d274:	eb43 0303 	adc.w	r3, r3, r3
    d278:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d27c:	bf08      	it	eq
    d27e:	3d01      	subeq	r5, #1
    d280:	d0f7      	beq.n	d272 <__aeabi_dmul+0x1c6>
    d282:	ea43 0306 	orr.w	r3, r3, r6
    d286:	4770      	bx	lr
    d288:	ea94 0f0c 	teq	r4, ip
    d28c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d290:	bf18      	it	ne
    d292:	ea95 0f0c 	teqne	r5, ip
    d296:	d00c      	beq.n	d2b2 <__aeabi_dmul+0x206>
    d298:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d29c:	bf18      	it	ne
    d29e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2a2:	d1d1      	bne.n	d248 <__aeabi_dmul+0x19c>
    d2a4:	ea81 0103 	eor.w	r1, r1, r3
    d2a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2ac:	f04f 0000 	mov.w	r0, #0
    d2b0:	bd70      	pop	{r4, r5, r6, pc}
    d2b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d2b6:	bf06      	itte	eq
    d2b8:	4610      	moveq	r0, r2
    d2ba:	4619      	moveq	r1, r3
    d2bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2c0:	d019      	beq.n	d2f6 <__aeabi_dmul+0x24a>
    d2c2:	ea94 0f0c 	teq	r4, ip
    d2c6:	d102      	bne.n	d2ce <__aeabi_dmul+0x222>
    d2c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d2cc:	d113      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2ce:	ea95 0f0c 	teq	r5, ip
    d2d2:	d105      	bne.n	d2e0 <__aeabi_dmul+0x234>
    d2d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d2d8:	bf1c      	itt	ne
    d2da:	4610      	movne	r0, r2
    d2dc:	4619      	movne	r1, r3
    d2de:	d10a      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2e0:	ea81 0103 	eor.w	r1, r1, r3
    d2e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2f0:	f04f 0000 	mov.w	r0, #0
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
    d2f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d2fe:	bd70      	pop	{r4, r5, r6, pc}

0000d300 <__aeabi_ddiv>:
    d300:	b570      	push	{r4, r5, r6, lr}
    d302:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d30a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d30e:	bf1d      	ittte	ne
    d310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d314:	ea94 0f0c 	teqne	r4, ip
    d318:	ea95 0f0c 	teqne	r5, ip
    d31c:	f000 f8a7 	bleq	d46e <__aeabi_ddiv+0x16e>
    d320:	eba4 0405 	sub.w	r4, r4, r5
    d324:	ea81 0e03 	eor.w	lr, r1, r3
    d328:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d32c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d330:	f000 8088 	beq.w	d444 <__aeabi_ddiv+0x144>
    d334:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d338:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d33c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d340:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d344:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d348:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d34c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d350:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d354:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d358:	429d      	cmp	r5, r3
    d35a:	bf08      	it	eq
    d35c:	4296      	cmpeq	r6, r2
    d35e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d362:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d366:	d202      	bcs.n	d36e <__aeabi_ddiv+0x6e>
    d368:	085b      	lsrs	r3, r3, #1
    d36a:	ea4f 0232 	mov.w	r2, r2, rrx
    d36e:	1ab6      	subs	r6, r6, r2
    d370:	eb65 0503 	sbc.w	r5, r5, r3
    d374:	085b      	lsrs	r3, r3, #1
    d376:	ea4f 0232 	mov.w	r2, r2, rrx
    d37a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d37e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d382:	ebb6 0e02 	subs.w	lr, r6, r2
    d386:	eb75 0e03 	sbcs.w	lr, r5, r3
    d38a:	bf22      	ittt	cs
    d38c:	1ab6      	subcs	r6, r6, r2
    d38e:	4675      	movcs	r5, lr
    d390:	ea40 000c 	orrcs.w	r0, r0, ip
    d394:	085b      	lsrs	r3, r3, #1
    d396:	ea4f 0232 	mov.w	r2, r2, rrx
    d39a:	ebb6 0e02 	subs.w	lr, r6, r2
    d39e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3a2:	bf22      	ittt	cs
    d3a4:	1ab6      	subcs	r6, r6, r2
    d3a6:	4675      	movcs	r5, lr
    d3a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d3ac:	085b      	lsrs	r3, r3, #1
    d3ae:	ea4f 0232 	mov.w	r2, r2, rrx
    d3b2:	ebb6 0e02 	subs.w	lr, r6, r2
    d3b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3ba:	bf22      	ittt	cs
    d3bc:	1ab6      	subcs	r6, r6, r2
    d3be:	4675      	movcs	r5, lr
    d3c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d3c4:	085b      	lsrs	r3, r3, #1
    d3c6:	ea4f 0232 	mov.w	r2, r2, rrx
    d3ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3d2:	bf22      	ittt	cs
    d3d4:	1ab6      	subcs	r6, r6, r2
    d3d6:	4675      	movcs	r5, lr
    d3d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d3dc:	ea55 0e06 	orrs.w	lr, r5, r6
    d3e0:	d018      	beq.n	d414 <__aeabi_ddiv+0x114>
    d3e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d3e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d3ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d3ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d3f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d3f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d3fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d3fe:	d1c0      	bne.n	d382 <__aeabi_ddiv+0x82>
    d400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d404:	d10b      	bne.n	d41e <__aeabi_ddiv+0x11e>
    d406:	ea41 0100 	orr.w	r1, r1, r0
    d40a:	f04f 0000 	mov.w	r0, #0
    d40e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d412:	e7b6      	b.n	d382 <__aeabi_ddiv+0x82>
    d414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d418:	bf04      	itt	eq
    d41a:	4301      	orreq	r1, r0
    d41c:	2000      	moveq	r0, #0
    d41e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d422:	bf88      	it	hi
    d424:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d428:	f63f aeaf 	bhi.w	d18a <__aeabi_dmul+0xde>
    d42c:	ebb5 0c03 	subs.w	ip, r5, r3
    d430:	bf04      	itt	eq
    d432:	ebb6 0c02 	subseq.w	ip, r6, r2
    d436:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d43a:	f150 0000 	adcs.w	r0, r0, #0
    d43e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d442:	bd70      	pop	{r4, r5, r6, pc}
    d444:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d448:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d44c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d450:	bfc2      	ittt	gt
    d452:	ebd4 050c 	rsbsgt	r5, r4, ip
    d456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d45a:	bd70      	popgt	{r4, r5, r6, pc}
    d45c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d460:	f04f 0e00 	mov.w	lr, #0
    d464:	3c01      	subs	r4, #1
    d466:	e690      	b.n	d18a <__aeabi_dmul+0xde>
    d468:	ea45 0e06 	orr.w	lr, r5, r6
    d46c:	e68d      	b.n	d18a <__aeabi_dmul+0xde>
    d46e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d472:	ea94 0f0c 	teq	r4, ip
    d476:	bf08      	it	eq
    d478:	ea95 0f0c 	teqeq	r5, ip
    d47c:	f43f af3b 	beq.w	d2f6 <__aeabi_dmul+0x24a>
    d480:	ea94 0f0c 	teq	r4, ip
    d484:	d10a      	bne.n	d49c <__aeabi_ddiv+0x19c>
    d486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d48a:	f47f af34 	bne.w	d2f6 <__aeabi_dmul+0x24a>
    d48e:	ea95 0f0c 	teq	r5, ip
    d492:	f47f af25 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d496:	4610      	mov	r0, r2
    d498:	4619      	mov	r1, r3
    d49a:	e72c      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d49c:	ea95 0f0c 	teq	r5, ip
    d4a0:	d106      	bne.n	d4b0 <__aeabi_ddiv+0x1b0>
    d4a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d4a6:	f43f aefd 	beq.w	d2a4 <__aeabi_dmul+0x1f8>
    d4aa:	4610      	mov	r0, r2
    d4ac:	4619      	mov	r1, r3
    d4ae:	e722      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d4b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d4b4:	bf18      	it	ne
    d4b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d4ba:	f47f aec5 	bne.w	d248 <__aeabi_dmul+0x19c>
    d4be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d4c2:	f47f af0d 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d4c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d4ca:	f47f aeeb 	bne.w	d2a4 <__aeabi_dmul+0x1f8>
    d4ce:	e712      	b.n	d2f6 <__aeabi_dmul+0x24a>

0000d4d0 <__gedf2>:
    d4d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d4d4:	e006      	b.n	d4e4 <__cmpdf2+0x4>
    d4d6:	bf00      	nop

0000d4d8 <__ledf2>:
    d4d8:	f04f 0c01 	mov.w	ip, #1
    d4dc:	e002      	b.n	d4e4 <__cmpdf2+0x4>
    d4de:	bf00      	nop

0000d4e0 <__cmpdf2>:
    d4e0:	f04f 0c01 	mov.w	ip, #1
    d4e4:	f84d cd04 	str.w	ip, [sp, #-4]!
    d4e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d4ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d4f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d4f4:	bf18      	it	ne
    d4f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    d4fa:	d01b      	beq.n	d534 <__cmpdf2+0x54>
    d4fc:	b001      	add	sp, #4
    d4fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    d502:	bf0c      	ite	eq
    d504:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    d508:	ea91 0f03 	teqne	r1, r3
    d50c:	bf02      	ittt	eq
    d50e:	ea90 0f02 	teqeq	r0, r2
    d512:	2000      	moveq	r0, #0
    d514:	4770      	bxeq	lr
    d516:	f110 0f00 	cmn.w	r0, #0
    d51a:	ea91 0f03 	teq	r1, r3
    d51e:	bf58      	it	pl
    d520:	4299      	cmppl	r1, r3
    d522:	bf08      	it	eq
    d524:	4290      	cmpeq	r0, r2
    d526:	bf2c      	ite	cs
    d528:	17d8      	asrcs	r0, r3, #31
    d52a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d52e:	f040 0001 	orr.w	r0, r0, #1
    d532:	4770      	bx	lr
    d534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d53c:	d102      	bne.n	d544 <__cmpdf2+0x64>
    d53e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d542:	d107      	bne.n	d554 <__cmpdf2+0x74>
    d544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d54c:	d1d6      	bne.n	d4fc <__cmpdf2+0x1c>
    d54e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d552:	d0d3      	beq.n	d4fc <__cmpdf2+0x1c>
    d554:	f85d 0b04 	ldr.w	r0, [sp], #4
    d558:	4770      	bx	lr
    d55a:	bf00      	nop

0000d55c <__aeabi_cdrcmple>:
    d55c:	4684      	mov	ip, r0
    d55e:	4610      	mov	r0, r2
    d560:	4662      	mov	r2, ip
    d562:	468c      	mov	ip, r1
    d564:	4619      	mov	r1, r3
    d566:	4663      	mov	r3, ip
    d568:	e000      	b.n	d56c <__aeabi_cdcmpeq>
    d56a:	bf00      	nop

0000d56c <__aeabi_cdcmpeq>:
    d56c:	b501      	push	{r0, lr}
    d56e:	f7ff ffb7 	bl	d4e0 <__cmpdf2>
    d572:	2800      	cmp	r0, #0
    d574:	bf48      	it	mi
    d576:	f110 0f00 	cmnmi.w	r0, #0
    d57a:	bd01      	pop	{r0, pc}

0000d57c <__aeabi_dcmpeq>:
    d57c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d580:	f7ff fff4 	bl	d56c <__aeabi_cdcmpeq>
    d584:	bf0c      	ite	eq
    d586:	2001      	moveq	r0, #1
    d588:	2000      	movne	r0, #0
    d58a:	f85d fb08 	ldr.w	pc, [sp], #8
    d58e:	bf00      	nop

0000d590 <__aeabi_dcmplt>:
    d590:	f84d ed08 	str.w	lr, [sp, #-8]!
    d594:	f7ff ffea 	bl	d56c <__aeabi_cdcmpeq>
    d598:	bf34      	ite	cc
    d59a:	2001      	movcc	r0, #1
    d59c:	2000      	movcs	r0, #0
    d59e:	f85d fb08 	ldr.w	pc, [sp], #8
    d5a2:	bf00      	nop

0000d5a4 <__aeabi_dcmple>:
    d5a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5a8:	f7ff ffe0 	bl	d56c <__aeabi_cdcmpeq>
    d5ac:	bf94      	ite	ls
    d5ae:	2001      	movls	r0, #1
    d5b0:	2000      	movhi	r0, #0
    d5b2:	f85d fb08 	ldr.w	pc, [sp], #8
    d5b6:	bf00      	nop

0000d5b8 <__aeabi_dcmpge>:
    d5b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5bc:	f7ff ffce 	bl	d55c <__aeabi_cdrcmple>
    d5c0:	bf94      	ite	ls
    d5c2:	2001      	movls	r0, #1
    d5c4:	2000      	movhi	r0, #0
    d5c6:	f85d fb08 	ldr.w	pc, [sp], #8
    d5ca:	bf00      	nop

0000d5cc <__aeabi_dcmpgt>:
    d5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5d0:	f7ff ffc4 	bl	d55c <__aeabi_cdrcmple>
    d5d4:	bf34      	ite	cc
    d5d6:	2001      	movcc	r0, #1
    d5d8:	2000      	movcs	r0, #0
    d5da:	f85d fb08 	ldr.w	pc, [sp], #8
    d5de:	bf00      	nop

0000d5e0 <__aeabi_d2iz>:
    d5e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d5e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d5e8:	d215      	bcs.n	d616 <__aeabi_d2iz+0x36>
    d5ea:	d511      	bpl.n	d610 <__aeabi_d2iz+0x30>
    d5ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d5f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d5f4:	d912      	bls.n	d61c <__aeabi_d2iz+0x3c>
    d5f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d5fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d5fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d606:	fa23 f002 	lsr.w	r0, r3, r2
    d60a:	bf18      	it	ne
    d60c:	4240      	negne	r0, r0
    d60e:	4770      	bx	lr
    d610:	f04f 0000 	mov.w	r0, #0
    d614:	4770      	bx	lr
    d616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d61a:	d105      	bne.n	d628 <__aeabi_d2iz+0x48>
    d61c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d620:	bf08      	it	eq
    d622:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d626:	4770      	bx	lr
    d628:	f04f 0000 	mov.w	r0, #0
    d62c:	4770      	bx	lr
    d62e:	bf00      	nop

0000d630 <__aeabi_d2f>:
    d630:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    d638:	bf24      	itt	cs
    d63a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    d63e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    d642:	d90d      	bls.n	d660 <__aeabi_d2f+0x30>
    d644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d64c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    d650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    d658:	bf08      	it	eq
    d65a:	f020 0001 	biceq.w	r0, r0, #1
    d65e:	4770      	bx	lr
    d660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    d664:	d121      	bne.n	d6aa <__aeabi_d2f+0x7a>
    d666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    d66a:	bfbc      	itt	lt
    d66c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    d670:	4770      	bxlt	lr
    d672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d676:	ea4f 5252 	mov.w	r2, r2, lsr #21
    d67a:	f1c2 0218 	rsb	r2, r2, #24
    d67e:	f1c2 0c20 	rsb	ip, r2, #32
    d682:	fa10 f30c 	lsls.w	r3, r0, ip
    d686:	fa20 f002 	lsr.w	r0, r0, r2
    d68a:	bf18      	it	ne
    d68c:	f040 0001 	orrne.w	r0, r0, #1
    d690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    d698:	fa03 fc0c 	lsl.w	ip, r3, ip
    d69c:	ea40 000c 	orr.w	r0, r0, ip
    d6a0:	fa23 f302 	lsr.w	r3, r3, r2
    d6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d6a8:	e7cc      	b.n	d644 <__aeabi_d2f+0x14>
    d6aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    d6ae:	d107      	bne.n	d6c0 <__aeabi_d2f+0x90>
    d6b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    d6b4:	bf1e      	ittt	ne
    d6b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    d6ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    d6be:	4770      	bxne	lr
    d6c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    d6c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d6c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d6cc:	4770      	bx	lr
    d6ce:	bf00      	nop

0000d6d0 <__aeabi_ldivmod>:
    d6d0:	b97b      	cbnz	r3, d6f2 <__aeabi_ldivmod+0x22>
    d6d2:	b972      	cbnz	r2, d6f2 <__aeabi_ldivmod+0x22>
    d6d4:	2900      	cmp	r1, #0
    d6d6:	bfbe      	ittt	lt
    d6d8:	2000      	movlt	r0, #0
    d6da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    d6de:	e006      	blt.n	d6ee <__aeabi_ldivmod+0x1e>
    d6e0:	bf08      	it	eq
    d6e2:	2800      	cmpeq	r0, #0
    d6e4:	bf1c      	itt	ne
    d6e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    d6ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d6ee:	f000 b9bb 	b.w	da68 <__aeabi_idiv0>
    d6f2:	f1ad 0c08 	sub.w	ip, sp, #8
    d6f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d6fa:	2900      	cmp	r1, #0
    d6fc:	db09      	blt.n	d712 <__aeabi_ldivmod+0x42>
    d6fe:	2b00      	cmp	r3, #0
    d700:	db1a      	blt.n	d738 <__aeabi_ldivmod+0x68>
    d702:	f000 f84d 	bl	d7a0 <__udivmoddi4>
    d706:	f8dd e004 	ldr.w	lr, [sp, #4]
    d70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d70e:	b004      	add	sp, #16
    d710:	4770      	bx	lr
    d712:	4240      	negs	r0, r0
    d714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d718:	2b00      	cmp	r3, #0
    d71a:	db1b      	blt.n	d754 <__aeabi_ldivmod+0x84>
    d71c:	f000 f840 	bl	d7a0 <__udivmoddi4>
    d720:	f8dd e004 	ldr.w	lr, [sp, #4]
    d724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d728:	b004      	add	sp, #16
    d72a:	4240      	negs	r0, r0
    d72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d730:	4252      	negs	r2, r2
    d732:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d736:	4770      	bx	lr
    d738:	4252      	negs	r2, r2
    d73a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d73e:	f000 f82f 	bl	d7a0 <__udivmoddi4>
    d742:	f8dd e004 	ldr.w	lr, [sp, #4]
    d746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d74a:	b004      	add	sp, #16
    d74c:	4240      	negs	r0, r0
    d74e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d752:	4770      	bx	lr
    d754:	4252      	negs	r2, r2
    d756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d75a:	f000 f821 	bl	d7a0 <__udivmoddi4>
    d75e:	f8dd e004 	ldr.w	lr, [sp, #4]
    d762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d766:	b004      	add	sp, #16
    d768:	4252      	negs	r2, r2
    d76a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d76e:	4770      	bx	lr

0000d770 <__aeabi_uldivmod>:
    d770:	b953      	cbnz	r3, d788 <__aeabi_uldivmod+0x18>
    d772:	b94a      	cbnz	r2, d788 <__aeabi_uldivmod+0x18>
    d774:	2900      	cmp	r1, #0
    d776:	bf08      	it	eq
    d778:	2800      	cmpeq	r0, #0
    d77a:	bf1c      	itt	ne
    d77c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    d780:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d784:	f000 b970 	b.w	da68 <__aeabi_idiv0>
    d788:	f1ad 0c08 	sub.w	ip, sp, #8
    d78c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d790:	f000 f806 	bl	d7a0 <__udivmoddi4>
    d794:	f8dd e004 	ldr.w	lr, [sp, #4]
    d798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d79c:	b004      	add	sp, #16
    d79e:	4770      	bx	lr

0000d7a0 <__udivmoddi4>:
    d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7a6:	4604      	mov	r4, r0
    d7a8:	4689      	mov	r9, r1
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	f040 8083 	bne.w	d8b6 <__udivmoddi4+0x116>
    d7b0:	428a      	cmp	r2, r1
    d7b2:	4615      	mov	r5, r2
    d7b4:	d945      	bls.n	d842 <__udivmoddi4+0xa2>
    d7b6:	fab2 f282 	clz	r2, r2
    d7ba:	b14a      	cbz	r2, d7d0 <__udivmoddi4+0x30>
    d7bc:	f1c2 0720 	rsb	r7, r2, #32
    d7c0:	fa01 f302 	lsl.w	r3, r1, r2
    d7c4:	4095      	lsls	r5, r2
    d7c6:	4094      	lsls	r4, r2
    d7c8:	fa20 f707 	lsr.w	r7, r0, r7
    d7cc:	ea47 0903 	orr.w	r9, r7, r3
    d7d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d7d4:	0c23      	lsrs	r3, r4, #16
    d7d6:	fa1f f885 	uxth.w	r8, r5
    d7da:	fbb9 fcfe 	udiv	ip, r9, lr
    d7de:	fb0e 991c 	mls	r9, lr, ip, r9
    d7e2:	fb0c f108 	mul.w	r1, ip, r8
    d7e6:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    d7ea:	4299      	cmp	r1, r3
    d7ec:	d90a      	bls.n	d804 <__udivmoddi4+0x64>
    d7ee:	18eb      	adds	r3, r5, r3
    d7f0:	bf2c      	ite	cs
    d7f2:	2001      	movcs	r0, #1
    d7f4:	2000      	movcc	r0, #0
    d7f6:	4299      	cmp	r1, r3
    d7f8:	d902      	bls.n	d800 <__udivmoddi4+0x60>
    d7fa:	2800      	cmp	r0, #0
    d7fc:	f000 811d 	beq.w	da3a <__udivmoddi4+0x29a>
    d800:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d804:	1a59      	subs	r1, r3, r1
    d806:	b2a3      	uxth	r3, r4
    d808:	fbb1 f0fe 	udiv	r0, r1, lr
    d80c:	fb0e 1110 	mls	r1, lr, r0, r1
    d810:	fb00 f808 	mul.w	r8, r0, r8
    d814:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d818:	45a0      	cmp	r8, r4
    d81a:	d905      	bls.n	d828 <__udivmoddi4+0x88>
    d81c:	192c      	adds	r4, r5, r4
    d81e:	d202      	bcs.n	d826 <__udivmoddi4+0x86>
    d820:	45a0      	cmp	r8, r4
    d822:	f200 810e 	bhi.w	da42 <__udivmoddi4+0x2a2>
    d826:	3801      	subs	r0, #1
    d828:	eba4 0408 	sub.w	r4, r4, r8
    d82c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d830:	2700      	movs	r7, #0
    d832:	b11e      	cbz	r6, d83c <__udivmoddi4+0x9c>
    d834:	40d4      	lsrs	r4, r2
    d836:	2300      	movs	r3, #0
    d838:	e9c6 4300 	strd	r4, r3, [r6]
    d83c:	4639      	mov	r1, r7
    d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d842:	2a00      	cmp	r2, #0
    d844:	d051      	beq.n	d8ea <__udivmoddi4+0x14a>
    d846:	fab2 f282 	clz	r2, r2
    d84a:	2a00      	cmp	r2, #0
    d84c:	f040 80af 	bne.w	d9ae <__udivmoddi4+0x20e>
    d850:	1b49      	subs	r1, r1, r5
    d852:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d856:	fa1f f885 	uxth.w	r8, r5
    d85a:	2701      	movs	r7, #1
    d85c:	0c23      	lsrs	r3, r4, #16
    d85e:	fbb1 fcfe 	udiv	ip, r1, lr
    d862:	fb0e 111c 	mls	r1, lr, ip, r1
    d866:	fb08 f00c 	mul.w	r0, r8, ip
    d86a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d86e:	4298      	cmp	r0, r3
    d870:	d90a      	bls.n	d888 <__udivmoddi4+0xe8>
    d872:	18eb      	adds	r3, r5, r3
    d874:	bf2c      	ite	cs
    d876:	2101      	movcs	r1, #1
    d878:	2100      	movcc	r1, #0
    d87a:	4298      	cmp	r0, r3
    d87c:	d902      	bls.n	d884 <__udivmoddi4+0xe4>
    d87e:	2900      	cmp	r1, #0
    d880:	f000 80d7 	beq.w	da32 <__udivmoddi4+0x292>
    d884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d888:	1a19      	subs	r1, r3, r0
    d88a:	b2a3      	uxth	r3, r4
    d88c:	fbb1 f0fe 	udiv	r0, r1, lr
    d890:	fb0e 1110 	mls	r1, lr, r0, r1
    d894:	fb08 f800 	mul.w	r8, r8, r0
    d898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d89c:	45a0      	cmp	r8, r4
    d89e:	d905      	bls.n	d8ac <__udivmoddi4+0x10c>
    d8a0:	192c      	adds	r4, r5, r4
    d8a2:	d202      	bcs.n	d8aa <__udivmoddi4+0x10a>
    d8a4:	45a0      	cmp	r8, r4
    d8a6:	f200 80c1 	bhi.w	da2c <__udivmoddi4+0x28c>
    d8aa:	3801      	subs	r0, #1
    d8ac:	eba4 0408 	sub.w	r4, r4, r8
    d8b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d8b4:	e7bd      	b.n	d832 <__udivmoddi4+0x92>
    d8b6:	428b      	cmp	r3, r1
    d8b8:	d908      	bls.n	d8cc <__udivmoddi4+0x12c>
    d8ba:	2e00      	cmp	r6, #0
    d8bc:	d074      	beq.n	d9a8 <__udivmoddi4+0x208>
    d8be:	2700      	movs	r7, #0
    d8c0:	e9c6 0100 	strd	r0, r1, [r6]
    d8c4:	4638      	mov	r0, r7
    d8c6:	4639      	mov	r1, r7
    d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8cc:	fab3 f783 	clz	r7, r3
    d8d0:	b967      	cbnz	r7, d8ec <__udivmoddi4+0x14c>
    d8d2:	428b      	cmp	r3, r1
    d8d4:	f0c0 80a4 	bcc.w	da20 <__udivmoddi4+0x280>
    d8d8:	4282      	cmp	r2, r0
    d8da:	f240 80a1 	bls.w	da20 <__udivmoddi4+0x280>
    d8de:	4638      	mov	r0, r7
    d8e0:	2e00      	cmp	r6, #0
    d8e2:	d0ab      	beq.n	d83c <__udivmoddi4+0x9c>
    d8e4:	e9c6 4900 	strd	r4, r9, [r6]
    d8e8:	e7a8      	b.n	d83c <__udivmoddi4+0x9c>
    d8ea:	deff      	udf	#255	; 0xff
    d8ec:	f1c7 0520 	rsb	r5, r7, #32
    d8f0:	40bb      	lsls	r3, r7
    d8f2:	fa02 fc07 	lsl.w	ip, r2, r7
    d8f6:	fa01 f407 	lsl.w	r4, r1, r7
    d8fa:	40ea      	lsrs	r2, r5
    d8fc:	fa20 f805 	lsr.w	r8, r0, r5
    d900:	40e9      	lsrs	r1, r5
    d902:	fa00 fe07 	lsl.w	lr, r0, r7
    d906:	431a      	orrs	r2, r3
    d908:	ea48 0404 	orr.w	r4, r8, r4
    d90c:	ea4f 4812 	mov.w	r8, r2, lsr #16
    d910:	0c20      	lsrs	r0, r4, #16
    d912:	fa1f f982 	uxth.w	r9, r2
    d916:	fbb1 faf8 	udiv	sl, r1, r8
    d91a:	fb08 111a 	mls	r1, r8, sl, r1
    d91e:	fb0a fb09 	mul.w	fp, sl, r9
    d922:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    d926:	458b      	cmp	fp, r1
    d928:	d90a      	bls.n	d940 <__udivmoddi4+0x1a0>
    d92a:	1851      	adds	r1, r2, r1
    d92c:	bf2c      	ite	cs
    d92e:	2301      	movcs	r3, #1
    d930:	2300      	movcc	r3, #0
    d932:	458b      	cmp	fp, r1
    d934:	d902      	bls.n	d93c <__udivmoddi4+0x19c>
    d936:	2b00      	cmp	r3, #0
    d938:	f000 8088 	beq.w	da4c <__udivmoddi4+0x2ac>
    d93c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d940:	eba1 010b 	sub.w	r1, r1, fp
    d944:	b2a4      	uxth	r4, r4
    d946:	fbb1 f0f8 	udiv	r0, r1, r8
    d94a:	fb08 1110 	mls	r1, r8, r0, r1
    d94e:	fb00 f909 	mul.w	r9, r0, r9
    d952:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    d956:	4589      	cmp	r9, r1
    d958:	d904      	bls.n	d964 <__udivmoddi4+0x1c4>
    d95a:	1851      	adds	r1, r2, r1
    d95c:	d201      	bcs.n	d962 <__udivmoddi4+0x1c2>
    d95e:	4589      	cmp	r9, r1
    d960:	d87b      	bhi.n	da5a <__udivmoddi4+0x2ba>
    d962:	3801      	subs	r0, #1
    d964:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    d968:	eba1 0109 	sub.w	r1, r1, r9
    d96c:	fba0 890c 	umull	r8, r9, r0, ip
    d970:	4549      	cmp	r1, r9
    d972:	4644      	mov	r4, r8
    d974:	464b      	mov	r3, r9
    d976:	d302      	bcc.n	d97e <__udivmoddi4+0x1de>
    d978:	d106      	bne.n	d988 <__udivmoddi4+0x1e8>
    d97a:	45c6      	cmp	lr, r8
    d97c:	d204      	bcs.n	d988 <__udivmoddi4+0x1e8>
    d97e:	3801      	subs	r0, #1
    d980:	ebb8 040c 	subs.w	r4, r8, ip
    d984:	eb69 0302 	sbc.w	r3, r9, r2
    d988:	2e00      	cmp	r6, #0
    d98a:	d05d      	beq.n	da48 <__udivmoddi4+0x2a8>
    d98c:	ebbe 0204 	subs.w	r2, lr, r4
    d990:	eb61 0103 	sbc.w	r1, r1, r3
    d994:	fa01 f505 	lsl.w	r5, r1, r5
    d998:	fa22 f307 	lsr.w	r3, r2, r7
    d99c:	40f9      	lsrs	r1, r7
    d99e:	2700      	movs	r7, #0
    d9a0:	431d      	orrs	r5, r3
    d9a2:	e9c6 5100 	strd	r5, r1, [r6]
    d9a6:	e749      	b.n	d83c <__udivmoddi4+0x9c>
    d9a8:	4637      	mov	r7, r6
    d9aa:	4630      	mov	r0, r6
    d9ac:	e746      	b.n	d83c <__udivmoddi4+0x9c>
    d9ae:	f1c2 0020 	rsb	r0, r2, #32
    d9b2:	4095      	lsls	r5, r2
    d9b4:	fa01 f702 	lsl.w	r7, r1, r2
    d9b8:	fa21 f300 	lsr.w	r3, r1, r0
    d9bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d9c0:	fa24 f100 	lsr.w	r1, r4, r0
    d9c4:	fa1f f885 	uxth.w	r8, r5
    d9c8:	4094      	lsls	r4, r2
    d9ca:	4339      	orrs	r1, r7
    d9cc:	fbb3 f0fe 	udiv	r0, r3, lr
    d9d0:	0c0f      	lsrs	r7, r1, #16
    d9d2:	fb0e 3310 	mls	r3, lr, r0, r3
    d9d6:	fb00 fc08 	mul.w	ip, r0, r8
    d9da:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    d9de:	459c      	cmp	ip, r3
    d9e0:	d907      	bls.n	d9f2 <__udivmoddi4+0x252>
    d9e2:	18eb      	adds	r3, r5, r3
    d9e4:	bf2c      	ite	cs
    d9e6:	2701      	movcs	r7, #1
    d9e8:	2700      	movcc	r7, #0
    d9ea:	459c      	cmp	ip, r3
    d9ec:	d900      	bls.n	d9f0 <__udivmoddi4+0x250>
    d9ee:	b38f      	cbz	r7, da54 <__udivmoddi4+0x2b4>
    d9f0:	3801      	subs	r0, #1
    d9f2:	eba3 030c 	sub.w	r3, r3, ip
    d9f6:	b289      	uxth	r1, r1
    d9f8:	fbb3 f7fe 	udiv	r7, r3, lr
    d9fc:	fb0e 3317 	mls	r3, lr, r7, r3
    da00:	fb07 fc08 	mul.w	ip, r7, r8
    da04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    da08:	458c      	cmp	ip, r1
    da0a:	d904      	bls.n	da16 <__udivmoddi4+0x276>
    da0c:	1869      	adds	r1, r5, r1
    da0e:	d201      	bcs.n	da14 <__udivmoddi4+0x274>
    da10:	458c      	cmp	ip, r1
    da12:	d825      	bhi.n	da60 <__udivmoddi4+0x2c0>
    da14:	3f01      	subs	r7, #1
    da16:	eba1 010c 	sub.w	r1, r1, ip
    da1a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    da1e:	e71d      	b.n	d85c <__udivmoddi4+0xbc>
    da20:	1a84      	subs	r4, r0, r2
    da22:	eb61 0303 	sbc.w	r3, r1, r3
    da26:	2001      	movs	r0, #1
    da28:	4699      	mov	r9, r3
    da2a:	e759      	b.n	d8e0 <__udivmoddi4+0x140>
    da2c:	3802      	subs	r0, #2
    da2e:	442c      	add	r4, r5
    da30:	e73c      	b.n	d8ac <__udivmoddi4+0x10c>
    da32:	f1ac 0c02 	sub.w	ip, ip, #2
    da36:	442b      	add	r3, r5
    da38:	e726      	b.n	d888 <__udivmoddi4+0xe8>
    da3a:	f1ac 0c02 	sub.w	ip, ip, #2
    da3e:	442b      	add	r3, r5
    da40:	e6e0      	b.n	d804 <__udivmoddi4+0x64>
    da42:	3802      	subs	r0, #2
    da44:	442c      	add	r4, r5
    da46:	e6ef      	b.n	d828 <__udivmoddi4+0x88>
    da48:	4637      	mov	r7, r6
    da4a:	e6f7      	b.n	d83c <__udivmoddi4+0x9c>
    da4c:	f1aa 0a02 	sub.w	sl, sl, #2
    da50:	4411      	add	r1, r2
    da52:	e775      	b.n	d940 <__udivmoddi4+0x1a0>
    da54:	3802      	subs	r0, #2
    da56:	442b      	add	r3, r5
    da58:	e7cb      	b.n	d9f2 <__udivmoddi4+0x252>
    da5a:	3802      	subs	r0, #2
    da5c:	4411      	add	r1, r2
    da5e:	e781      	b.n	d964 <__udivmoddi4+0x1c4>
    da60:	3f02      	subs	r7, #2
    da62:	4429      	add	r1, r5
    da64:	e7d7      	b.n	da16 <__udivmoddi4+0x276>
    da66:	bf00      	nop

0000da68 <__aeabi_idiv0>:
    da68:	4770      	bx	lr
    da6a:	bf00      	nop

0000da6c <bsec_get_version>:
    da6c:	b508      	push	{r3, lr}
    da6e:	4601      	mov	r1, r0
    da70:	4802      	ldr	r0, [pc, #8]	; (da7c <bsec_get_version+0x10>)
    da72:	f000 fa7b 	bl	df6c <bsec_codegen_get_version>
    da76:	2000      	movs	r0, #0
    da78:	bd08      	pop	{r3, pc}
    da7a:	bf00      	nop
    da7c:	200208d0 	.word	0x200208d0

0000da80 <bsec_init>:
    da80:	b508      	push	{r3, lr}
    da82:	4802      	ldr	r0, [pc, #8]	; (da8c <bsec_init+0xc>)
    da84:	f000 fa7a 	bl	df7c <bsec_codegen_init>
    da88:	2000      	movs	r0, #0
    da8a:	bd08      	pop	{r3, pc}
    da8c:	200208d0 	.word	0x200208d0

0000da90 <bsec_reset_output>:
    da90:	4601      	mov	r1, r0
    da92:	4801      	ldr	r0, [pc, #4]	; (da98 <bsec_reset_output+0x8>)
    da94:	f000 ba74 	b.w	df80 <bsec_codegen_reset_output>
    da98:	200208d0 	.word	0x200208d0

0000da9c <bsec_update_subscription>:
    da9c:	b510      	push	{r4, lr}
    da9e:	b084      	sub	sp, #16
    daa0:	f10d 040f 	add.w	r4, sp, #15
    daa4:	e9cd 4200 	strd	r4, r2, [sp]
    daa8:	460a      	mov	r2, r1
    daaa:	4601      	mov	r1, r0
    daac:	4803      	ldr	r0, [pc, #12]	; (dabc <bsec_update_subscription+0x20>)
    daae:	f7fe fd83 	bl	c5b8 <bsec_codegen_update_subscription>
    dab2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dab6:	b004      	add	sp, #16
    dab8:	bd10      	pop	{r4, pc}
    daba:	bf00      	nop
    dabc:	200208d0 	.word	0x200208d0

0000dac0 <bsec_do_steps>:
    dac0:	b510      	push	{r4, lr}
    dac2:	b084      	sub	sp, #16
    dac4:	f10d 040f 	add.w	r4, sp, #15
    dac8:	e9cd 4200 	strd	r4, r2, [sp]
    dacc:	460a      	mov	r2, r1
    dace:	4601      	mov	r1, r0
    dad0:	4803      	ldr	r0, [pc, #12]	; (dae0 <bsec_do_steps+0x20>)
    dad2:	f000 f869 	bl	dba8 <bsec_codegen_do_steps>
    dad6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dada:	b004      	add	sp, #16
    dadc:	bd10      	pop	{r4, pc}
    dade:	bf00      	nop
    dae0:	200208d0 	.word	0x200208d0

0000dae4 <bsec_set_configuration>:
    dae4:	b500      	push	{lr}
    dae6:	b083      	sub	sp, #12
    dae8:	9300      	str	r3, [sp, #0]
    daea:	4613      	mov	r3, r2
    daec:	460a      	mov	r2, r1
    daee:	4601      	mov	r1, r0
    daf0:	4802      	ldr	r0, [pc, #8]	; (dafc <bsec_set_configuration+0x18>)
    daf2:	f000 fa5f 	bl	dfb4 <bsec_codegen_set_configuration>
    daf6:	b003      	add	sp, #12
    daf8:	f85d fb04 	ldr.w	pc, [sp], #4
    dafc:	200208d0 	.word	0x200208d0

0000db00 <bsec_set_state>:
    db00:	b500      	push	{lr}
    db02:	b083      	sub	sp, #12
    db04:	9300      	str	r3, [sp, #0]
    db06:	4613      	mov	r3, r2
    db08:	460a      	mov	r2, r1
    db0a:	4601      	mov	r1, r0
    db0c:	4802      	ldr	r0, [pc, #8]	; (db18 <bsec_set_state+0x18>)
    db0e:	f000 fa9f 	bl	e050 <bsec_codegen_set_state>
    db12:	b003      	add	sp, #12
    db14:	f85d fb04 	ldr.w	pc, [sp], #4
    db18:	200208d0 	.word	0x200208d0

0000db1c <bsec_get_configuration>:
    db1c:	b570      	push	{r4, r5, r6, lr}
    db1e:	b086      	sub	sp, #24
    db20:	f10d 0413 	add.w	r4, sp, #19
    db24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db26:	9300      	str	r3, [sp, #0]
    db28:	ad05      	add	r5, sp, #20
    db2a:	4613      	mov	r3, r2
    db2c:	9402      	str	r4, [sp, #8]
    db2e:	460a      	mov	r2, r1
    db30:	9601      	str	r6, [sp, #4]
    db32:	4601      	mov	r1, r0
    db34:	9503      	str	r5, [sp, #12]
    db36:	4805      	ldr	r0, [pc, #20]	; (db4c <bsec_get_configuration+0x30>)
    db38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db3a:	f000 f95d 	bl	ddf8 <bsec_codegen_get_configuration>
    db3e:	9b05      	ldr	r3, [sp, #20]
    db40:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db44:	6023      	str	r3, [r4, #0]
    db46:	b006      	add	sp, #24
    db48:	bd70      	pop	{r4, r5, r6, pc}
    db4a:	bf00      	nop
    db4c:	200208d0 	.word	0x200208d0

0000db50 <bsec_get_state>:
    db50:	b570      	push	{r4, r5, r6, lr}
    db52:	b086      	sub	sp, #24
    db54:	f10d 0413 	add.w	r4, sp, #19
    db58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db5a:	9300      	str	r3, [sp, #0]
    db5c:	ad05      	add	r5, sp, #20
    db5e:	4613      	mov	r3, r2
    db60:	9402      	str	r4, [sp, #8]
    db62:	460a      	mov	r2, r1
    db64:	9601      	str	r6, [sp, #4]
    db66:	4601      	mov	r1, r0
    db68:	9503      	str	r5, [sp, #12]
    db6a:	4805      	ldr	r0, [pc, #20]	; (db80 <bsec_get_state+0x30>)
    db6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db6e:	f000 f9a1 	bl	deb4 <bsec_codegen_get_state>
    db72:	9b05      	ldr	r3, [sp, #20]
    db74:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db78:	6023      	str	r3, [r4, #0]
    db7a:	b006      	add	sp, #24
    db7c:	bd70      	pop	{r4, r5, r6, pc}
    db7e:	bf00      	nop
    db80:	200208d0 	.word	0x200208d0

0000db84 <bsec_sensor_control>:
    db84:	b500      	push	{lr}
    db86:	b085      	sub	sp, #20
    db88:	f10d 030f 	add.w	r3, sp, #15
    db8c:	e9cd 3200 	strd	r3, r2, [sp]
    db90:	4602      	mov	r2, r0
    db92:	460b      	mov	r3, r1
    db94:	4803      	ldr	r0, [pc, #12]	; (dba4 <bsec_sensor_control+0x20>)
    db96:	f7fe fb53 	bl	c240 <bsec_codegen_sensor_control>
    db9a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    db9e:	b005      	add	sp, #20
    dba0:	f85d fb04 	ldr.w	pc, [sp], #4
    dba4:	200208d0 	.word	0x200208d0

0000dba8 <bsec_codegen_do_steps>:
    dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbac:	b089      	sub	sp, #36	; 0x24
    dbae:	461e      	mov	r6, r3
    dbb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dbb2:	f04f 0c00 	mov.w	ip, #0
    dbb6:	f883 c000 	strb.w	ip, [r3]
    dbba:	7835      	ldrb	r5, [r6, #0]
    dbbc:	4604      	mov	r4, r0
    dbbe:	460b      	mov	r3, r1
    dbc0:	b1dd      	cbz	r5, dbfa <bsec_codegen_do_steps+0x52>
    dbc2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    dbc6:	f04f 0800 	mov.w	r8, #0
    dbca:	2701      	movs	r7, #1
    dbcc:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
    dbd0:	2000      	movs	r0, #0
    dbd2:	2100      	movs	r1, #0
    dbd4:	eb07 050e 	add.w	r5, r7, lr
    dbd8:	eb09 1505 	add.w	r5, r9, r5, lsl #4
    dbdc:	e9c5 0100 	strd	r0, r1, [r5]
    dbe0:	f885 c00d 	strb.w	ip, [r5, #13]
    dbe4:	f8c5 8008 	str.w	r8, [r5, #8]
    dbe8:	f885 c00c 	strb.w	ip, [r5, #12]
    dbec:	f885 c00e 	strb.w	ip, [r5, #14]
    dbf0:	3701      	adds	r7, #1
    dbf2:	7835      	ldrb	r5, [r6, #0]
    dbf4:	b2ff      	uxtb	r7, r7
    dbf6:	42bd      	cmp	r5, r7
    dbf8:	d2ec      	bcs.n	dbd4 <bsec_codegen_do_steps+0x2c>
    dbfa:	2a00      	cmp	r2, #0
    dbfc:	d075      	beq.n	dcea <bsec_codegen_do_steps+0x142>
    dbfe:	7b59      	ldrb	r1, [r3, #13]
    dc00:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    dc04:	fa5f f58a 	uxtb.w	r5, sl
    dc08:	2d17      	cmp	r5, #23
    dc0a:	f200 809f 	bhi.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc0e:	4f76      	ldr	r7, [pc, #472]	; (dde8 <bsec_codegen_do_steps+0x240>)
    dc10:	fa47 f005 	asr.w	r0, r7, r5
    dc14:	07c0      	lsls	r0, r0, #31
    dc16:	f140 8099 	bpl.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc1a:	f04f 0a01 	mov.w	sl, #1
    dc1e:	4650      	mov	r0, sl
    dc20:	46bc      	mov	ip, r7
    dc22:	fa0a fa05 	lsl.w	sl, sl, r5
    dc26:	4686      	mov	lr, r0
    dc28:	4689      	mov	r9, r1
    dc2a:	461d      	mov	r5, r3
    dc2c:	2700      	movs	r7, #0
    dc2e:	9103      	str	r1, [sp, #12]
    dc30:	e013      	b.n	dc5a <bsec_codegen_do_steps+0xb2>
    dc32:	f895 900d 	ldrb.w	r9, [r5, #13]
    dc36:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
    dc3a:	fa5f f888 	uxtb.w	r8, r8
    dc3e:	f1b8 0f17 	cmp.w	r8, #23
    dc42:	fa4c fb08 	asr.w	fp, ip, r8
    dc46:	fa0e fa08 	lsl.w	sl, lr, r8
    dc4a:	d87f      	bhi.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc4c:	f01b 0f01 	tst.w	fp, #1
    dc50:	d07c      	beq.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc52:	ea1a 0f07 	tst.w	sl, r7
    dc56:	f040 80b6 	bne.w	ddc6 <bsec_codegen_do_steps+0x21e>
    dc5a:	4964      	ldr	r1, [pc, #400]	; (ddec <bsec_codegen_do_steps+0x244>)
    dc5c:	edd5 7a02 	vldr	s15, [r5, #8]
    dc60:	4489      	add	r9, r1
    dc62:	3001      	adds	r0, #1
    dc64:	f819 8c01 	ldrb.w	r8, [r9, #-1]
    dc68:	eb04 0b88 	add.w	fp, r4, r8, lsl #2
    dc6c:	ed9b 7ac1 	vldr	s14, [fp, #772]	; 0x304
    dc70:	b2c0      	uxtb	r0, r0
    dc72:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc76:	f108 092e 	add.w	r9, r8, #46	; 0x2e
    dc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc7e:	f100 5880 	add.w	r8, r0, #268435456	; 0x10000000
    dc82:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    dc86:	ea47 070a 	orr.w	r7, r7, sl
    dc8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    dc8e:	f100 8094 	bmi.w	ddba <bsec_codegen_do_steps+0x212>
    dc92:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
    dc96:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc9e:	f300 808c 	bgt.w	ddba <bsec_codegen_do_steps+0x212>
    dca2:	e9d5 ab00 	ldrd	sl, fp, [r5]
    dca6:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    dcaa:	e9d9 8900 	ldrd	r8, r9, [r9]
    dcae:	45cb      	cmp	fp, r9
    dcb0:	bf08      	it	eq
    dcb2:	45c2      	cmpeq	sl, r8
    dcb4:	d104      	bne.n	dcc0 <bsec_codegen_do_steps+0x118>
    dcb6:	9912      	ldr	r1, [sp, #72]	; 0x48
    dcb8:	f04f 0804 	mov.w	r8, #4
    dcbc:	f881 8000 	strb.w	r8, [r1]
    dcc0:	4282      	cmp	r2, r0
    dcc2:	d2b6      	bcs.n	dc32 <bsec_codegen_do_steps+0x8a>
    dcc4:	3a01      	subs	r2, #1
    dcc6:	b2d2      	uxtb	r2, r2
    dcc8:	f103 0710 	add.w	r7, r3, #16
    dccc:	9903      	ldr	r1, [sp, #12]
    dcce:	461d      	mov	r5, r3
    dcd0:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    dcd4:	e000      	b.n	dcd8 <bsec_codegen_do_steps+0x130>
    dcd6:	7b69      	ldrb	r1, [r5, #13]
    dcd8:	ed95 0a02 	vldr	s0, [r5, #8]
    dcdc:	e8f5 2304 	ldrd	r2, r3, [r5], #16
    dce0:	4620      	mov	r0, r4
    dce2:	f001 fd9d 	bl	f820 <bsec_ChannelHub_setInput>
    dce6:	42bd      	cmp	r5, r7
    dce8:	d1f5      	bne.n	dcd6 <bsec_codegen_do_steps+0x12e>
    dcea:	4620      	mov	r0, r4
    dcec:	f001 f8a2 	bl	ee34 <bsec_ChannelHub_do>
    dcf0:	f896 9000 	ldrb.w	r9, [r6]
    dcf4:	f1b9 0f00 	cmp.w	r9, #0
    dcf8:	d06b      	beq.n	ddd2 <bsec_codegen_do_steps+0x22a>
    dcfa:	2300      	movs	r3, #0
    dcfc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ddf0 <bsec_codegen_do_steps+0x248>
    dd00:	f8df b0f0 	ldr.w	fp, [pc, #240]	; ddf4 <bsec_codegen_do_steps+0x24c>
    dd04:	4699      	mov	r9, r3
    dd06:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd0a:	fa48 f203 	asr.w	r2, r8, r3
    dd0e:	1c5d      	adds	r5, r3, #1
    dd10:	07d2      	lsls	r2, r2, #31
    dd12:	b2ef      	uxtb	r7, r5
    dd14:	d50c      	bpl.n	dd30 <bsec_codegen_do_steps+0x188>
    dd16:	f813 300b 	ldrb.w	r3, [r3, fp]
    dd1a:	f203 135b 	addw	r3, r3, #347	; 0x15b
    dd1e:	4639      	mov	r1, r7
    dd20:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    dd24:	4553      	cmp	r3, sl
    dd26:	4620      	mov	r0, r4
    dd28:	d002      	beq.n	dd30 <bsec_codegen_do_steps+0x188>
    dd2a:	f001 fc9d 	bl	f668 <bsec_ChannelHub_isOutputValid>
    dd2e:	b9b8      	cbnz	r0, dd60 <bsec_codegen_do_steps+0x1b8>
    dd30:	2d15      	cmp	r5, #21
    dd32:	462b      	mov	r3, r5
    dd34:	d1e9      	bne.n	dd0a <bsec_codegen_do_steps+0x162>
    dd36:	2300      	movs	r3, #0
    dd38:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd3c:	4620      	mov	r0, r4
    dd3e:	f000 fa77 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd42:	f886 9000 	strb.w	r9, [r6]
    dd46:	b009      	add	sp, #36	; 0x24
    dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd4e:	23ff      	movs	r3, #255	; 0xff
    dd50:	7013      	strb	r3, [r2, #0]
    dd52:	f04f 0900 	mov.w	r9, #0
    dd56:	f886 9000 	strb.w	r9, [r6]
    dd5a:	b009      	add	sp, #36	; 0x24
    dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd60:	f10d 0313 	add.w	r3, sp, #19
    dd64:	9300      	str	r3, [sp, #0]
    dd66:	aa05      	add	r2, sp, #20
    dd68:	ab06      	add	r3, sp, #24
    dd6a:	4639      	mov	r1, r7
    dd6c:	4620      	mov	r0, r4
    dd6e:	f001 fc57 	bl	f620 <bsec_ChannelHub_getOutput>
    dd72:	7833      	ldrb	r3, [r6, #0]
    dd74:	454b      	cmp	r3, r9
    dd76:	f109 0201 	add.w	r2, r9, #1
    dd7a:	d809      	bhi.n	dd90 <bsec_codegen_do_steps+0x1e8>
    dd7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd7e:	2303      	movs	r3, #3
    dd80:	7013      	strb	r3, [r2, #0]
    dd82:	2300      	movs	r3, #0
    dd84:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd88:	4620      	mov	r0, r4
    dd8a:	f000 fa51 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd8e:	e7d8      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dd90:	fa5f f982 	uxtb.w	r9, r2
    dd94:	9813      	ldr	r0, [sp, #76]	; 0x4c
    dd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dd9a:	f109 5180 	add.w	r1, r9, #268435456	; 0x10000000
    dd9e:	3901      	subs	r1, #1
    dda0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    dda4:	e9c1 2300 	strd	r2, r3, [r1]
    dda8:	9805      	ldr	r0, [sp, #20]
    ddaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ddae:	734f      	strb	r7, [r1, #13]
    ddb0:	2201      	movs	r2, #1
    ddb2:	6088      	str	r0, [r1, #8]
    ddb4:	730a      	strb	r2, [r1, #12]
    ddb6:	738b      	strb	r3, [r1, #14]
    ddb8:	e7ba      	b.n	dd30 <bsec_codegen_do_steps+0x188>
    ddba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddbc:	23fe      	movs	r3, #254	; 0xfe
    ddbe:	7013      	strb	r3, [r2, #0]
    ddc0:	f04f 0900 	mov.w	r9, #0
    ddc4:	e7c7      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddc8:	23fa      	movs	r3, #250	; 0xfa
    ddca:	7013      	strb	r3, [r2, #0]
    ddcc:	f04f 0900 	mov.w	r9, #0
    ddd0:	e7c1      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddd4:	2302      	movs	r3, #2
    ddd6:	7013      	strb	r3, [r2, #0]
    ddd8:	2300      	movs	r3, #0
    ddda:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    ddde:	4620      	mov	r0, r4
    dde0:	f000 fa26 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dde4:	e7ad      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dde6:	bf00      	nop
    dde8:	00e0200f 	.word	0x00e0200f
    ddec:	00035190 	.word	0x00035190
    ddf0:	001279ef 	.word	0x001279ef
    ddf4:	00035178 	.word	0x00035178

0000ddf8 <bsec_codegen_get_configuration>:
    ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddfc:	b085      	sub	sp, #20
    ddfe:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    de02:	24df      	movs	r4, #223	; 0xdf
    de04:	702c      	strb	r4, [r5, #0]
    de06:	2600      	movs	r6, #0
    de08:	2410      	movs	r4, #16
    de0a:	2b17      	cmp	r3, #23
    de0c:	603e      	str	r6, [r7, #0]
    de0e:	9403      	str	r4, [sp, #12]
    de10:	d928      	bls.n	de64 <bsec_codegen_get_configuration+0x6c>
    de12:	bb39      	cbnz	r1, de64 <bsec_codegen_get_configuration+0x6c>
    de14:	461e      	mov	r6, r3
    de16:	4691      	mov	r9, r2
    de18:	4680      	mov	r8, r0
    de1a:	460b      	mov	r3, r1
    de1c:	7029      	strb	r1, [r5, #0]
    de1e:	468b      	mov	fp, r1
    de20:	f240 3a17 	movw	sl, #791	; 0x317
    de24:	e002      	b.n	de2c <bsec_codegen_get_configuration+0x34>
    de26:	2c0a      	cmp	r4, #10
    de28:	4623      	mov	r3, r4
    de2a:	d01e      	beq.n	de6a <bsec_codegen_get_configuration+0x72>
    de2c:	1c5c      	adds	r4, r3, #1
    de2e:	fa4a f303 	asr.w	r3, sl, r3
    de32:	07db      	lsls	r3, r3, #31
    de34:	b2e1      	uxtb	r1, r4
    de36:	d5f6      	bpl.n	de26 <bsec_codegen_get_configuration+0x2e>
    de38:	f8cd b000 	str.w	fp, [sp]
    de3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    de40:	4640      	mov	r0, r8
    de42:	f001 fb15 	bl	f470 <bsec_ChannelHub_getChannelConfiguration>
    de46:	2800      	cmp	r0, #0
    de48:	d0ed      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de4c:	9301      	str	r3, [sp, #4]
    de4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de50:	9300      	str	r3, [sp, #0]
    de52:	aa03      	add	r2, sp, #12
    de54:	4603      	mov	r3, r0
    de56:	4631      	mov	r1, r6
    de58:	4648      	mov	r0, r9
    de5a:	f000 f9c5 	bl	e1e8 <bsec_Bsec_append>
    de5e:	7028      	strb	r0, [r5, #0]
    de60:	2800      	cmp	r0, #0
    de62:	d0e0      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de64:	b005      	add	sp, #20
    de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de6a:	f995 3000 	ldrsb.w	r3, [r5]
    de6e:	2b00      	cmp	r3, #0
    de70:	d1f8      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de72:	4640      	mov	r0, r8
    de74:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    de78:	f000 fb44 	bl	e504 <bsec_Bsec_getHyperConfiguration>
    de7c:	b968      	cbnz	r0, de9a <bsec_codegen_get_configuration+0xa2>
    de7e:	f995 4000 	ldrsb.w	r4, [r5]
    de82:	2c00      	cmp	r4, #0
    de84:	d1ee      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de86:	9b03      	ldr	r3, [sp, #12]
    de88:	603b      	str	r3, [r7, #0]
    de8a:	4648      	mov	r0, r9
    de8c:	4639      	mov	r1, r7
    de8e:	f000 fae3 	bl	e458 <bsec_Bsec_frameSerializedData>
    de92:	702c      	strb	r4, [r5, #0]
    de94:	b005      	add	sp, #20
    de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de9c:	9301      	str	r3, [sp, #4]
    de9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dea0:	9300      	str	r3, [sp, #0]
    dea2:	4631      	mov	r1, r6
    dea4:	4603      	mov	r3, r0
    dea6:	aa03      	add	r2, sp, #12
    dea8:	4648      	mov	r0, r9
    deaa:	f000 f99d 	bl	e1e8 <bsec_Bsec_append>
    deae:	4604      	mov	r4, r0
    deb0:	7028      	strb	r0, [r5, #0]
    deb2:	e7e6      	b.n	de82 <bsec_codegen_get_configuration+0x8a>

0000deb4 <bsec_codegen_get_state>:
    deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    deb8:	b085      	sub	sp, #20
    deba:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    debe:	24df      	movs	r4, #223	; 0xdf
    dec0:	702c      	strb	r4, [r5, #0]
    dec2:	2600      	movs	r6, #0
    dec4:	2410      	movs	r4, #16
    dec6:	2b18      	cmp	r3, #24
    dec8:	603e      	str	r6, [r7, #0]
    deca:	9403      	str	r4, [sp, #12]
    decc:	d928      	bls.n	df20 <bsec_codegen_get_state+0x6c>
    dece:	bb39      	cbnz	r1, df20 <bsec_codegen_get_state+0x6c>
    ded0:	461e      	mov	r6, r3
    ded2:	4691      	mov	r9, r2
    ded4:	4680      	mov	r8, r0
    ded6:	460b      	mov	r3, r1
    ded8:	7029      	strb	r1, [r5, #0]
    deda:	468b      	mov	fp, r1
    dedc:	f240 3a17 	movw	sl, #791	; 0x317
    dee0:	e002      	b.n	dee8 <bsec_codegen_get_state+0x34>
    dee2:	2c0a      	cmp	r4, #10
    dee4:	4623      	mov	r3, r4
    dee6:	d01e      	beq.n	df26 <bsec_codegen_get_state+0x72>
    dee8:	1c5c      	adds	r4, r3, #1
    deea:	fa4a f303 	asr.w	r3, sl, r3
    deee:	07db      	lsls	r3, r3, #31
    def0:	b2e1      	uxtb	r1, r4
    def2:	d5f6      	bpl.n	dee2 <bsec_codegen_get_state+0x2e>
    def4:	f8cd b000 	str.w	fp, [sp]
    def8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    defc:	4640      	mov	r0, r8
    defe:	f001 fb23 	bl	f548 <bsec_ChannelHub_getChannelState>
    df02:	2800      	cmp	r0, #0
    df04:	d0ed      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df08:	9301      	str	r3, [sp, #4]
    df0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df0c:	9300      	str	r3, [sp, #0]
    df0e:	aa03      	add	r2, sp, #12
    df10:	4603      	mov	r3, r0
    df12:	4631      	mov	r1, r6
    df14:	4648      	mov	r0, r9
    df16:	f000 f967 	bl	e1e8 <bsec_Bsec_append>
    df1a:	7028      	strb	r0, [r5, #0]
    df1c:	2800      	cmp	r0, #0
    df1e:	d0e0      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df20:	b005      	add	sp, #20
    df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df26:	f995 3000 	ldrsb.w	r3, [r5]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d1f8      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df2e:	f000 fb63 	bl	e5f8 <bsec_Bsec_getHyperState>
    df32:	b968      	cbnz	r0, df50 <bsec_codegen_get_state+0x9c>
    df34:	f995 4000 	ldrsb.w	r4, [r5]
    df38:	2c00      	cmp	r4, #0
    df3a:	d1f1      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df3c:	9b03      	ldr	r3, [sp, #12]
    df3e:	603b      	str	r3, [r7, #0]
    df40:	4648      	mov	r0, r9
    df42:	4639      	mov	r1, r7
    df44:	f000 fa88 	bl	e458 <bsec_Bsec_frameSerializedData>
    df48:	702c      	strb	r4, [r5, #0]
    df4a:	b005      	add	sp, #20
    df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df52:	9301      	str	r3, [sp, #4]
    df54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df56:	9300      	str	r3, [sp, #0]
    df58:	4631      	mov	r1, r6
    df5a:	4603      	mov	r3, r0
    df5c:	aa03      	add	r2, sp, #12
    df5e:	4648      	mov	r0, r9
    df60:	f000 f942 	bl	e1e8 <bsec_Bsec_append>
    df64:	4604      	mov	r4, r0
    df66:	7028      	strb	r0, [r5, #0]
    df68:	e7e6      	b.n	df38 <bsec_codegen_get_state+0x84>
    df6a:	bf00      	nop

0000df6c <bsec_codegen_get_version>:
    df6c:	2304      	movs	r3, #4
    df6e:	2001      	movs	r0, #1
    df70:	2207      	movs	r2, #7
    df72:	7008      	strb	r0, [r1, #0]
    df74:	708a      	strb	r2, [r1, #2]
    df76:	704b      	strb	r3, [r1, #1]
    df78:	70cb      	strb	r3, [r1, #3]
    df7a:	4770      	bx	lr

0000df7c <bsec_codegen_init>:
    df7c:	f000 b8b8 	b.w	e0f0 <bsec_constructor_bsec>

0000df80 <bsec_codegen_reset_output>:
    df80:	3901      	subs	r1, #1
    df82:	2903      	cmp	r1, #3
    df84:	d901      	bls.n	df8a <bsec_codegen_reset_output+0xa>
    df86:	2000      	movs	r0, #0
    df88:	4770      	bx	lr
    df8a:	b510      	push	{r4, lr}
    df8c:	4604      	mov	r4, r0
    df8e:	3068      	adds	r0, #104	; 0x68
    df90:	f002 fd90 	bl	10ab4 <bsec_GasHumidityBaselineTracker_setState>
    df94:	4620      	mov	r0, r4
    df96:	2101      	movs	r1, #1
    df98:	f001 fce6 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    df9c:	4b04      	ldr	r3, [pc, #16]	; (dfb0 <bsec_codegen_reset_output+0x30>)
    df9e:	6623      	str	r3, [r4, #96]	; 0x60
    dfa0:	4620      	mov	r0, r4
    dfa2:	6663      	str	r3, [r4, #100]	; 0x64
    dfa4:	2102      	movs	r1, #2
    dfa6:	f001 fcdf 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    dfaa:	2000      	movs	r0, #0
    dfac:	bd10      	pop	{r4, pc}
    dfae:	bf00      	nop
    dfb0:	41c80000 	.word	0x41c80000

0000dfb4 <bsec_codegen_set_configuration>:
    dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfb8:	b089      	sub	sp, #36	; 0x24
    dfba:	4688      	mov	r8, r1
    dfbc:	4616      	mov	r6, r2
    dfbe:	f10d 0a16 	add.w	sl, sp, #22
    dfc2:	f10d 0918 	add.w	r9, sp, #24
    dfc6:	4607      	mov	r7, r0
    dfc8:	461c      	mov	r4, r3
    dfca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dfcc:	f8cd 9000 	str.w	r9, [sp]
    dfd0:	4653      	mov	r3, sl
    dfd2:	4631      	mov	r1, r6
    dfd4:	4640      	mov	r0, r8
    dfd6:	f000 fd03 	bl	e9e0 <bsec_Bsec_validateSerialization>
    dfda:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    dfde:	bb1b      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    dfe0:	3e08      	subs	r6, #8
    dfe2:	f10d 0b1c 	add.w	fp, sp, #28
    dfe6:	9d06      	ldr	r5, [sp, #24]
    dfe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dfea:	42b5      	cmp	r5, r6
    dfec:	4622      	mov	r2, r4
    dfee:	4649      	mov	r1, r9
    dff0:	4640      	mov	r0, r8
    dff2:	d227      	bcs.n	e044 <bsec_codegen_set_configuration+0x90>
    dff4:	f10d 0517 	add.w	r5, sp, #23
    dff8:	f8cd b008 	str.w	fp, [sp, #8]
    dffc:	e9cd a500 	strd	sl, r5, [sp]
    e000:	f000 fb44 	bl	e68c <bsec_Bsec_parse>
    e004:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e008:	4621      	mov	r1, r4
    e00a:	4638      	mov	r0, r7
    e00c:	b963      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    e00e:	f89d 5017 	ldrb.w	r5, [sp, #23]
    e012:	9b07      	ldr	r3, [sp, #28]
    e014:	2dfe      	cmp	r5, #254	; 0xfe
    e016:	461a      	mov	r2, r3
    e018:	d10a      	bne.n	e030 <bsec_codegen_set_configuration+0x7c>
    e01a:	f000 fd5f 	bl	eadc <bsec_b_Bsec_setHyperConfiguration>
    e01e:	4603      	mov	r3, r0
    e020:	f88d 0016 	strb.w	r0, [sp, #22]
    e024:	2b00      	cmp	r3, #0
    e026:	d0de      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e028:	4618      	mov	r0, r3
    e02a:	b009      	add	sp, #36	; 0x24
    e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e030:	4629      	mov	r1, r5
    e032:	4622      	mov	r2, r4
    e034:	f000 fec8 	bl	edc8 <bsec_ChannelHub_configureChannel>
    e038:	4603      	mov	r3, r0
    e03a:	f88d 0016 	strb.w	r0, [sp, #22]
    e03e:	2b00      	cmp	r3, #0
    e040:	d0d1      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e042:	e7f1      	b.n	e028 <bsec_codegen_set_configuration+0x74>
    e044:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e048:	4618      	mov	r0, r3
    e04a:	b009      	add	sp, #36	; 0x24
    e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e050 <bsec_codegen_set_state>:
    e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e054:	b08b      	sub	sp, #44	; 0x2c
    e056:	460f      	mov	r7, r1
    e058:	4616      	mov	r6, r2
    e05a:	f10d 091e 	add.w	r9, sp, #30
    e05e:	f10d 0820 	add.w	r8, sp, #32
    e062:	4682      	mov	sl, r0
    e064:	461c      	mov	r4, r3
    e066:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e068:	f8cd 8000 	str.w	r8, [sp]
    e06c:	464b      	mov	r3, r9
    e06e:	4631      	mov	r1, r6
    e070:	4638      	mov	r0, r7
    e072:	f000 fcb5 	bl	e9e0 <bsec_Bsec_validateSerialization>
    e076:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e07a:	bb23      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e07c:	f10d 031f 	add.w	r3, sp, #31
    e080:	3e08      	subs	r6, #8
    e082:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    e086:	9305      	str	r3, [sp, #20]
    e088:	9d08      	ldr	r5, [sp, #32]
    e08a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e08c:	42b5      	cmp	r5, r6
    e08e:	4622      	mov	r2, r4
    e090:	4641      	mov	r1, r8
    e092:	4638      	mov	r0, r7
    e094:	d226      	bcs.n	e0e4 <bsec_codegen_set_state+0x94>
    e096:	9d05      	ldr	r5, [sp, #20]
    e098:	f8cd b008 	str.w	fp, [sp, #8]
    e09c:	e9cd 9500 	strd	r9, r5, [sp]
    e0a0:	f000 faf4 	bl	e68c <bsec_Bsec_parse>
    e0a4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0a8:	4620      	mov	r0, r4
    e0aa:	b963      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e0ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0b2:	2afe      	cmp	r2, #254	; 0xfe
    e0b4:	4619      	mov	r1, r3
    e0b6:	d10a      	bne.n	e0ce <bsec_codegen_set_state+0x7e>
    e0b8:	f000 fdc4 	bl	ec44 <bsec_b_Bsec_setHyperState>
    e0bc:	4603      	mov	r3, r0
    e0be:	f88d 001e 	strb.w	r0, [sp, #30]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d0e0      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0c6:	4618      	mov	r0, r3
    e0c8:	b00b      	add	sp, #44	; 0x2c
    e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0ce:	4611      	mov	r1, r2
    e0d0:	4650      	mov	r0, sl
    e0d2:	4622      	mov	r2, r4
    e0d4:	f001 fb6e 	bl	f7b4 <bsec_ChannelHub_setChannelState>
    e0d8:	4603      	mov	r3, r0
    e0da:	f88d 001e 	strb.w	r0, [sp, #30]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d0d2      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0e2:	e7f0      	b.n	e0c6 <bsec_codegen_set_state+0x76>
    e0e4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0e8:	4618      	mov	r0, r3
    e0ea:	b00b      	add	sp, #44	; 0x2c
    e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e0f0 <bsec_constructor_bsec>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4604      	mov	r4, r0
    e0f4:	f000 fdfc 	bl	ecf0 <bsec_ChannelHub_ChannelHub>
    e0f8:	4620      	mov	r0, r4
    e0fa:	f000 fc41 	bl	e980 <bsec_Bsec_setHyperState>
    e0fe:	4620      	mov	r0, r4
    e100:	f000 fb1e 	bl	e740 <bsec_Bsec_setHyperConfiguration>
    e104:	4620      	mov	r0, r4
    e106:	bd10      	pop	{r4, pc}

0000e108 <bsec_Bsec_applyUpdateSubscription.part.0>:
    e108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e10c:	4606      	mov	r6, r0
    e10e:	4f32      	ldr	r7, [pc, #200]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e110:	4d32      	ldr	r5, [pc, #200]	; (e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>)
    e112:	f001 fb23 	bl	f75c <bsec_ChannelHub_resetSamplIntvls>
    e116:	2300      	movs	r3, #0
    e118:	e002      	b.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e11a:	2c15      	cmp	r4, #21
    e11c:	4623      	mov	r3, r4
    e11e:	d010      	beq.n	e142 <bsec_Bsec_applyUpdateSubscription.part.0+0x3a>
    e120:	fa47 f203 	asr.w	r2, r7, r3
    e124:	1c5c      	adds	r4, r3, #1
    e126:	07d0      	lsls	r0, r2, #31
    e128:	b2e1      	uxtb	r1, r4
    e12a:	d5f6      	bpl.n	e11a <bsec_Bsec_applyUpdateSubscription.part.0+0x12>
    e12c:	5d5b      	ldrb	r3, [r3, r5]
    e12e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e132:	4630      	mov	r0, r6
    e134:	f8b3 2428 	ldrh.w	r2, [r3, #1064]	; 0x428
    e138:	f001 fbca 	bl	f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>
    e13c:	2c15      	cmp	r4, #21
    e13e:	4623      	mov	r3, r4
    e140:	d1ee      	bne.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e142:	4630      	mov	r0, r6
    e144:	f001 fa98 	bl	f678 <bsec_ChannelHub_recalculateDownsampling>
    e148:	4f23      	ldr	r7, [pc, #140]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e14a:	f8df 8090 	ldr.w	r8, [pc, #144]	; e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>
    e14e:	f8df 9094 	ldr.w	r9, [pc, #148]	; e1e4 <bsec_Bsec_applyUpdateSubscription.part.0+0xdc>
    e152:	2500      	movs	r5, #0
    e154:	e002      	b.n	e15c <bsec_Bsec_applyUpdateSubscription.part.0+0x54>
    e156:	3501      	adds	r5, #1
    e158:	2d15      	cmp	r5, #21
    e15a:	d01b      	beq.n	e194 <bsec_Bsec_applyUpdateSubscription.part.0+0x8c>
    e15c:	fa47 f305 	asr.w	r3, r7, r5
    e160:	07da      	lsls	r2, r3, #31
    e162:	d5f8      	bpl.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e164:	f815 3008 	ldrb.w	r3, [r5, r8]
    e168:	4433      	add	r3, r6
    e16a:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
    e16e:	2b00      	cmp	r3, #0
    e170:	d0f1      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e172:	f939 a015 	ldrsh.w	sl, [r9, r5, lsl #1]
    e176:	2300      	movs	r3, #0
    e178:	e002      	b.n	e180 <bsec_Bsec_applyUpdateSubscription.part.0+0x78>
    e17a:	2c0a      	cmp	r4, #10
    e17c:	4623      	mov	r3, r4
    e17e:	d0ea      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e180:	1c5c      	adds	r4, r3, #1
    e182:	fa4a f303 	asr.w	r3, sl, r3
    e186:	07db      	lsls	r3, r3, #31
    e188:	b2e1      	uxtb	r1, r4
    e18a:	d5f6      	bpl.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e18c:	4630      	mov	r0, r6
    e18e:	f001 fb67 	bl	f860 <bsec_ChannelHub_updateChannelInterfaceDependency>
    e192:	e7f2      	b.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e194:	2400      	movs	r4, #0
    e196:	4621      	mov	r1, r4
    e198:	f886 445a 	strb.w	r4, [r6, #1114]	; 0x45a
    e19c:	220e      	movs	r2, #14
    e19e:	f206 4046 	addw	r0, r6, #1094	; 0x446
    e1a2:	f025 fb47 	bl	33834 <memset>
    e1a6:	4b0e      	ldr	r3, [pc, #56]	; (e1e0 <bsec_Bsec_applyUpdateSubscription.part.0+0xd8>)
    e1a8:	f886 4456 	strb.w	r4, [r6, #1110]	; 0x456
    e1ac:	78db      	ldrb	r3, [r3, #3]
    e1ae:	f203 1353 	addw	r3, r3, #339	; 0x153
    e1b2:	4621      	mov	r1, r4
    e1b4:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
    e1b8:	f206 4312 	addw	r3, r6, #1042	; 0x412
    e1bc:	f833 2b02 	ldrh.w	r2, [r3], #2
    e1c0:	4290      	cmp	r0, r2
    e1c2:	f101 0101 	add.w	r1, r1, #1
    e1c6:	d003      	beq.n	e1d0 <bsec_Bsec_applyUpdateSubscription.part.0+0xc8>
    e1c8:	2904      	cmp	r1, #4
    e1ca:	d1f7      	bne.n	e1bc <bsec_Bsec_applyUpdateSubscription.part.0+0xb4>
    e1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d0:	f886 1456 	strb.w	r1, [r6, #1110]	; 0x456
    e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d8:	001279ef 	.word	0x001279ef
    e1dc:	00035178 	.word	0x00035178
    e1e0:	00035190 	.word	0x00035190
    e1e4:	000350f8 	.word	0x000350f8

0000e1e8 <bsec_Bsec_append>:
    e1e8:	b4f0      	push	{r4, r5, r6, r7}
    e1ea:	6816      	ldr	r6, [r2, #0]
    e1ec:	18f4      	adds	r4, r6, r3
    e1ee:	428c      	cmp	r4, r1
    e1f0:	d818      	bhi.n	e224 <bsec_Bsec_append+0x3c>
    e1f2:	9905      	ldr	r1, [sp, #20]
    e1f4:	428b      	cmp	r3, r1
    e1f6:	d818      	bhi.n	e22a <bsec_Bsec_append+0x42>
    e1f8:	b183      	cbz	r3, e21c <bsec_Bsec_append+0x34>
    e1fa:	9904      	ldr	r1, [sp, #16]
    e1fc:	1c5f      	adds	r7, r3, #1
    e1fe:	1e4d      	subs	r5, r1, #1
    e200:	2101      	movs	r1, #1
    e202:	e000      	b.n	e206 <bsec_Bsec_append+0x1e>
    e204:	6816      	ldr	r6, [r2, #0]
    e206:	1844      	adds	r4, r0, r1
    e208:	4434      	add	r4, r6
    e20a:	3101      	adds	r1, #1
    e20c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    e210:	f804 6c01 	strb.w	r6, [r4, #-1]
    e214:	428f      	cmp	r7, r1
    e216:	d1f5      	bne.n	e204 <bsec_Bsec_append+0x1c>
    e218:	6814      	ldr	r4, [r2, #0]
    e21a:	441c      	add	r4, r3
    e21c:	6014      	str	r4, [r2, #0]
    e21e:	2000      	movs	r0, #0
    e220:	bcf0      	pop	{r4, r5, r6, r7}
    e222:	4770      	bx	lr
    e224:	f06f 0028 	mvn.w	r0, #40	; 0x28
    e228:	e7fa      	b.n	e220 <bsec_Bsec_append+0x38>
    e22a:	f06f 0025 	mvn.w	r0, #37	; 0x25
    e22e:	e7f7      	b.n	e220 <bsec_Bsec_append+0x38>

0000e230 <bsec_Bsec_applyUpdateSubscription>:
    e230:	f890 345a 	ldrb.w	r3, [r0, #1114]	; 0x45a
    e234:	b903      	cbnz	r3, e238 <bsec_Bsec_applyUpdateSubscription+0x8>
    e236:	4770      	bx	lr
    e238:	e766      	b.n	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e23a:	bf00      	nop

0000e23c <bsec_Bsec_checkIfSensorRequired>:
    e23c:	b470      	push	{r4, r5, r6}
    e23e:	3901      	subs	r1, #1
    e240:	4c13      	ldr	r4, [pc, #76]	; (e290 <bsec_Bsec_checkIfSensorRequired+0x54>)
    e242:	9d03      	ldr	r5, [sp, #12]
    e244:	5c64      	ldrb	r4, [r4, r1]
    e246:	f204 1453 	addw	r4, r4, #339	; 0x153
    e24a:	2600      	movs	r6, #0
    e24c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    e250:	701e      	strb	r6, [r3, #0]
    e252:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e256:	42b4      	cmp	r4, r6
    e258:	802c      	strh	r4, [r5, #0]
    e25a:	d010      	beq.n	e27e <bsec_Bsec_checkIfSensorRequired+0x42>
    e25c:	f8b0 6454 	ldrh.w	r6, [r0, #1108]	; 0x454
    e260:	fbb6 f5f4 	udiv	r5, r6, r4
    e264:	fb04 6415 	mls	r4, r4, r5, r6
    e268:	b2a4      	uxth	r4, r4
    e26a:	b954      	cbnz	r4, e282 <bsec_Bsec_checkIfSensorRequired+0x46>
    e26c:	2401      	movs	r4, #1
    e26e:	6890      	ldr	r0, [r2, #8]
    e270:	701c      	strb	r4, [r3, #0]
    e272:	b2c9      	uxtb	r1, r1
    e274:	fa04 f101 	lsl.w	r1, r4, r1
    e278:	4301      	orrs	r1, r0
    e27a:	7514      	strb	r4, [r2, #20]
    e27c:	6091      	str	r1, [r2, #8]
    e27e:	bc70      	pop	{r4, r5, r6}
    e280:	4770      	bx	lr
    e282:	f890 045b 	ldrb.w	r0, [r0, #1115]	; 0x45b
    e286:	2800      	cmp	r0, #0
    e288:	d1f0      	bne.n	e26c <bsec_Bsec_checkIfSensorRequired+0x30>
    e28a:	bc70      	pop	{r4, r5, r6}
    e28c:	4770      	bx	lr
    e28e:	bf00      	nop
    e290:	00035190 	.word	0x00035190

0000e294 <bsec_Bsec_checkSamplIntvlCompatibilty>:
    e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e298:	4c6a      	ldr	r4, [pc, #424]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e29a:	4e6b      	ldr	r6, [pc, #428]	; (e448 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b4>)
    e29c:	2300      	movs	r3, #0
    e29e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e2a2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e2a6:	fa44 f203 	asr.w	r2, r4, r3
    e2aa:	07d2      	lsls	r2, r2, #31
    e2ac:	f140 80b0 	bpl.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2b0:	5cf2      	ldrb	r2, [r6, r3]
    e2b2:	442a      	add	r2, r5
    e2b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2b8:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
    e2bc:	f000 80a8 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c0:	42ba      	cmp	r2, r7
    e2c2:	f000 80a5 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c6:	f8b0 c40e 	ldrh.w	ip, [r0, #1038]	; 0x40e
    e2ca:	4d5e      	ldr	r5, [pc, #376]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e2cc:	4664      	mov	r4, ip
    e2ce:	2300      	movs	r3, #0
    e2d0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e2d4:	fa45 f203 	asr.w	r2, r5, r3
    e2d8:	07d2      	lsls	r2, r2, #31
    e2da:	d506      	bpl.n	e2ea <bsec_Bsec_checkSamplIntvlCompatibilty+0x56>
    e2dc:	5cf2      	ldrb	r2, [r6, r3]
    e2de:	443a      	add	r2, r7
    e2e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2e4:	4294      	cmp	r4, r2
    e2e6:	bf28      	it	cs
    e2e8:	4614      	movcs	r4, r2
    e2ea:	3301      	adds	r3, #1
    e2ec:	2b15      	cmp	r3, #21
    e2ee:	d1f1      	bne.n	e2d4 <bsec_Bsec_checkSamplIntvlCompatibilty+0x40>
    e2f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e2f4:	4294      	cmp	r4, r2
    e2f6:	d01f      	beq.n	e338 <bsec_Bsec_checkSamplIntvlCompatibilty+0xa4>
    e2f8:	fbbc f3f4 	udiv	r3, ip, r4
    e2fc:	fb04 c313 	mls	r3, r4, r3, ip
    e300:	b29b      	uxth	r3, r3
    e302:	2b00      	cmp	r3, #0
    e304:	f040 809b 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e308:	4f4e      	ldr	r7, [pc, #312]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e30a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    e30e:	fa47 f503 	asr.w	r5, r7, r3
    e312:	07ed      	lsls	r5, r5, #31
    e314:	d50d      	bpl.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e316:	5cf5      	ldrb	r5, [r6, r3]
    e318:	4465      	add	r5, ip
    e31a:	f831 e015 	ldrh.w	lr, [r1, r5, lsl #1]
    e31e:	4596      	cmp	lr, r2
    e320:	d007      	beq.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e322:	fbbe f5f4 	udiv	r5, lr, r4
    e326:	fb04 e515 	mls	r5, r4, r5, lr
    e32a:	b2ad      	uxth	r5, r5
    e32c:	2d00      	cmp	r5, #0
    e32e:	f040 8086 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e332:	3301      	adds	r3, #1
    e334:	2b15      	cmp	r3, #21
    e336:	d1ea      	bne.n	e30e <bsec_Bsec_checkSamplIntvlCompatibilty+0x7a>
    e338:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e33c:	4a43      	ldr	r2, [pc, #268]	; (e44c <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b8>)
    e33e:	4f41      	ldr	r7, [pc, #260]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e340:	46ae      	mov	lr, r5
    e342:	2300      	movs	r3, #0
    e344:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    e348:	f852 4b04 	ldr.w	r4, [r2], #4
    e34c:	0724      	lsls	r4, r4, #28
    e34e:	fa47 fc03 	asr.w	ip, r7, r3
    e352:	d502      	bpl.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e354:	f01c 0f01 	tst.w	ip, #1
    e358:	d15f      	bne.n	e41a <bsec_Bsec_checkSamplIntvlCompatibilty+0x186>
    e35a:	3301      	adds	r3, #1
    e35c:	2b15      	cmp	r3, #21
    e35e:	d1f3      	bne.n	e348 <bsec_Bsec_checkSamplIntvlCompatibilty+0xb4>
    e360:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e364:	429d      	cmp	r5, r3
    e366:	d066      	beq.n	e436 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a2>
    e368:	f200 4212 	addw	r2, r0, #1042	; 0x412
    e36c:	2300      	movs	r3, #0
    e36e:	e002      	b.n	e376 <bsec_Bsec_checkSamplIntvlCompatibilty+0xe2>
    e370:	3301      	adds	r3, #1
    e372:	2b04      	cmp	r3, #4
    e374:	d009      	beq.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e376:	f832 4b02 	ldrh.w	r4, [r2], #2
    e37a:	42ac      	cmp	r4, r5
    e37c:	d1f8      	bne.n	e370 <bsec_Bsec_checkSamplIntvlCompatibilty+0xdc>
    e37e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e382:	f8b3 341a 	ldrh.w	r3, [r3, #1050]	; 0x41a
    e386:	3304      	adds	r3, #4
    e388:	b29b      	uxth	r3, r3
    e38a:	4d2e      	ldr	r5, [pc, #184]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e38c:	ed9f 6a30 	vldr	s12, [pc, #192]	; e450 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1bc>
    e390:	eddf 6a30 	vldr	s13, [pc, #192]	; e454 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1c0>
    e394:	2400      	movs	r4, #0
    e396:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e39a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    e39e:	fa45 f204 	asr.w	r2, r5, r4
    e3a2:	07d2      	lsls	r2, r2, #31
    e3a4:	d52e      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3a6:	f890 e457 	ldrb.w	lr, [r0, #1111]	; 0x457
    e3aa:	f890 8459 	ldrb.w	r8, [r0, #1113]	; 0x459
    e3ae:	f890 2458 	ldrb.w	r2, [r0, #1112]	; 0x458
    e3b2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    e3b6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    e3ba:	fa5f fe8e 	uxtb.w	lr, lr
    e3be:	fa5f f888 	uxtb.w	r8, r8
    e3c2:	0052      	lsls	r2, r2, #1
    e3c4:	44c6      	add	lr, r8
    e3c6:	b2d2      	uxtb	r2, r2
    e3c8:	4472      	add	r2, lr
    e3ca:	441a      	add	r2, r3
    e3cc:	b292      	uxth	r2, r2
    e3ce:	ee07 2a90 	vmov	s15, r2
    e3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    e3d6:	5d32      	ldrb	r2, [r6, r4]
    e3d8:	ee67 7a86 	vmul.f32	s15, s15, s12
    e3dc:	443a      	add	r2, r7
    e3de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    e3e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e3e6:	ee07 2a90 	vmov	s15, r2
    e3ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e3ee:	eef4 7ac7 	vcmpe.f32	s15, s14
    e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3f6:	d505      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3f8:	4562      	cmp	r2, ip
    e3fa:	d003      	beq.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3fc:	f06f 0011 	mvn.w	r0, #17
    e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e404:	3401      	adds	r4, #1
    e406:	2c15      	cmp	r4, #21
    e408:	d1c9      	bne.n	e39e <bsec_Bsec_checkSamplIntvlCompatibilty+0x10a>
    e40a:	2000      	movs	r0, #0
    e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e410:	3301      	adds	r3, #1
    e412:	2b15      	cmp	r3, #21
    e414:	f47f af47 	bne.w	e2a6 <bsec_Bsec_checkSamplIntvlCompatibilty+0x12>
    e418:	e7f7      	b.n	e40a <bsec_Bsec_checkSamplIntvlCompatibilty+0x176>
    e41a:	5cf4      	ldrb	r4, [r6, r3]
    e41c:	4444      	add	r4, r8
    e41e:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
    e422:	4574      	cmp	r4, lr
    e424:	d099      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e426:	4575      	cmp	r5, lr
    e428:	d007      	beq.n	e43a <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a6>
    e42a:	42ac      	cmp	r4, r5
    e42c:	d095      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e42e:	f06f 0010 	mvn.w	r0, #16
    e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e436:	2304      	movs	r3, #4
    e438:	e7a7      	b.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e43a:	4625      	mov	r5, r4
    e43c:	e78d      	b.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e43e:	f06f 000f 	mvn.w	r0, #15
    e442:	e7e3      	b.n	e40c <bsec_Bsec_checkSamplIntvlCompatibilty+0x178>
    e444:	001279ef 	.word	0x001279ef
    e448:	00035178 	.word	0x00035178
    e44c:	00035124 	.word	0x00035124
    e450:	42c80000 	.word	0x42c80000
    e454:	447a0000 	.word	0x447a0000

0000e458 <bsec_Bsec_frameSerializedData>:
    e458:	b570      	push	{r4, r5, r6, lr}
    e45a:	b088      	sub	sp, #32
    e45c:	ae08      	add	r6, sp, #32
    e45e:	4b28      	ldr	r3, [pc, #160]	; (e500 <bsec_Bsec_frameSerializedData+0xa8>)
    e460:	f846 3d18 	str.w	r3, [r6, #-24]!
    e464:	4604      	mov	r4, r0
    e466:	2204      	movs	r2, #4
    e468:	460d      	mov	r5, r1
    e46a:	a803      	add	r0, sp, #12
    e46c:	4631      	mov	r1, r6
    e46e:	f025 f9a7 	bl	337c0 <memcpy>
    e472:	aa03      	add	r2, sp, #12
    e474:	1e63      	subs	r3, r4, #1
    e476:	1ce0      	adds	r0, r4, #3
    e478:	f812 1b01 	ldrb.w	r1, [r2], #1
    e47c:	f803 1f01 	strb.w	r1, [r3, #1]!
    e480:	4283      	cmp	r3, r0
    e482:	d1f9      	bne.n	e478 <bsec_Bsec_frameSerializedData+0x20>
    e484:	2300      	movs	r3, #0
    e486:	a908      	add	r1, sp, #32
    e488:	223d      	movs	r2, #61	; 0x3d
    e48a:	e961 2304 	strd	r2, r3, [r1, #-16]!
    e48e:	a806      	add	r0, sp, #24
    e490:	2208      	movs	r2, #8
    e492:	f025 f995 	bl	337c0 <memcpy>
    e496:	a906      	add	r1, sp, #24
    e498:	2208      	movs	r2, #8
    e49a:	1d20      	adds	r0, r4, #4
    e49c:	f025 f990 	bl	337c0 <memcpy>
    e4a0:	682b      	ldr	r3, [r5, #0]
    e4a2:	4631      	mov	r1, r6
    e4a4:	3b10      	subs	r3, #16
    e4a6:	a803      	add	r0, sp, #12
    e4a8:	2204      	movs	r2, #4
    e4aa:	9302      	str	r3, [sp, #8]
    e4ac:	f025 f988 	bl	337c0 <memcpy>
    e4b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    e4b4:	f89d 100d 	ldrb.w	r1, [sp, #13]
    e4b8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    e4bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4c0:	7320      	strb	r0, [r4, #12]
    e4c2:	73a2      	strb	r2, [r4, #14]
    e4c4:	73e3      	strb	r3, [r4, #15]
    e4c6:	7361      	strb	r1, [r4, #13]
    e4c8:	6829      	ldr	r1, [r5, #0]
    e4ca:	aa01      	add	r2, sp, #4
    e4cc:	4620      	mov	r0, r4
    e4ce:	f003 fb59 	bl	11b84 <bsec_crcCcitt2>
    e4d2:	682b      	ldr	r3, [r5, #0]
    e4d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e4d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    e4dc:	4423      	add	r3, r4
    e4de:	2200      	movs	r2, #0
    e4e0:	7118      	strb	r0, [r3, #4]
    e4e2:	682b      	ldr	r3, [r5, #0]
    e4e4:	4423      	add	r3, r4
    e4e6:	7159      	strb	r1, [r3, #5]
    e4e8:	682b      	ldr	r3, [r5, #0]
    e4ea:	4423      	add	r3, r4
    e4ec:	719a      	strb	r2, [r3, #6]
    e4ee:	682b      	ldr	r3, [r5, #0]
    e4f0:	441c      	add	r4, r3
    e4f2:	71e2      	strb	r2, [r4, #7]
    e4f4:	682b      	ldr	r3, [r5, #0]
    e4f6:	3308      	adds	r3, #8
    e4f8:	602b      	str	r3, [r5, #0]
    e4fa:	b008      	add	sp, #32
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    e4fe:	bf00      	nop
    e500:	01040704 	.word	0x01040704

0000e504 <bsec_Bsec_getHyperConfiguration>:
    e504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e508:	b085      	sub	sp, #20
    e50a:	ac04      	add	r4, sp, #16
    e50c:	2507      	movs	r5, #7
    e50e:	f804 5d09 	strb.w	r5, [r4, #-9]!
    e512:	4606      	mov	r6, r0
    e514:	4617      	mov	r7, r2
    e516:	20fe      	movs	r0, #254	; 0xfe
    e518:	4622      	mov	r2, r4
    e51a:	460d      	mov	r5, r1
    e51c:	f003 fab6 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    e520:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e524:	9003      	str	r0, [sp, #12]
    e526:	b1da      	cbz	r2, e560 <bsec_Bsec_getHyperConfiguration+0x5c>
    e528:	2401      	movs	r4, #1
    e52a:	f506 797c 	add.w	r9, r6, #1008	; 0x3f0
    e52e:	f506 7852 	add.w	r8, r6, #840	; 0x348
    e532:	1e63      	subs	r3, r4, #1
    e534:	2b06      	cmp	r3, #6
    e536:	d80e      	bhi.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e538:	e8df f003 	tbb	[pc, r3]
    e53c:	4953353f 	.word	0x4953353f
    e540:	232c      	.short	0x232c
    e542:	04          	.byte	0x04
    e543:	00          	.byte	0x00
    e544:	463a      	mov	r2, r7
    e546:	ab03      	add	r3, sp, #12
    e548:	4629      	mov	r1, r5
    e54a:	f8b6 040e 	ldrh.w	r0, [r6, #1038]	; 0x40e
    e54e:	f001 fadd 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
    e552:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e556:	3401      	adds	r4, #1
    e558:	b2e4      	uxtb	r4, r4
    e55a:	42a2      	cmp	r2, r4
    e55c:	d2e9      	bcs.n	e532 <bsec_Bsec_getHyperConfiguration+0x2e>
    e55e:	9803      	ldr	r0, [sp, #12]
    e560:	a904      	add	r1, sp, #16
    e562:	2202      	movs	r2, #2
    e564:	f821 0d06 	strh.w	r0, [r1, #-6]!
    e568:	a802      	add	r0, sp, #8
    e56a:	f025 f929 	bl	337c0 <memcpy>
    e56e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e572:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e576:	9803      	ldr	r0, [sp, #12]
    e578:	702a      	strb	r2, [r5, #0]
    e57a:	706b      	strb	r3, [r5, #1]
    e57c:	b005      	add	sp, #20
    e57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e582:	463a      	mov	r2, r7
    e584:	ab03      	add	r3, sp, #12
    e586:	4629      	mov	r1, r5
    e588:	4648      	mov	r0, r9
    e58a:	f001 fdd5 	bl	10138 <bsec_q_Entity_serializeAndAdd>
    e58e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e592:	e7e0      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e594:	463a      	mov	r2, r7
    e596:	ab03      	add	r3, sp, #12
    e598:	4629      	mov	r1, r5
    e59a:	4640      	mov	r0, r8
    e59c:	f001 fd8a 	bl	100b4 <bsec_p_Entity_serializeAndAdd>
    e5a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5a4:	e7d7      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5a6:	463a      	mov	r2, r7
    e5a8:	ab03      	add	r3, sp, #12
    e5aa:	4629      	mov	r1, r5
    e5ac:	f896 0458 	ldrb.w	r0, [r6, #1112]	; 0x458
    e5b0:	f001 fb5c 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5b8:	e7cd      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ba:	463a      	mov	r2, r7
    e5bc:	ab03      	add	r3, sp, #12
    e5be:	4629      	mov	r1, r5
    e5c0:	f896 0457 	ldrb.w	r0, [r6, #1111]	; 0x457
    e5c4:	f001 fb52 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5cc:	e7c3      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ce:	463a      	mov	r2, r7
    e5d0:	ab03      	add	r3, sp, #12
    e5d2:	4629      	mov	r1, r5
    e5d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
    e5d8:	f001 fd42 	bl	10060 <bsec_o_Entity_serializeAndAdd>
    e5dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5e0:	e7b9      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5e2:	463a      	mov	r2, r7
    e5e4:	ab03      	add	r3, sp, #12
    e5e6:	4629      	mov	r1, r5
    e5e8:	f896 0459 	ldrb.w	r0, [r6, #1113]	; 0x459
    e5ec:	f001 fb3e 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5f4:	e7af      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5f6:	bf00      	nop

0000e5f8 <bsec_Bsec_getHyperState>:
    e5f8:	2000      	movs	r0, #0
    e5fa:	4770      	bx	lr

0000e5fc <bsec_Bsec_getModHeatingDuration>:
    e5fc:	b508      	push	{r3, lr}
    e5fe:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
    e602:	ed2d 8b02 	vpush	{d8}
    e606:	eef0 8a40 	vmov.f32	s17, s0
    e60a:	f01c fc71 	bl	2aef0 <powf>
    e60e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
    e612:	eeb0 8a40 	vmov.f32	s16, s0
    e616:	eeb0 0a68 	vmov.f32	s0, s17
    e61a:	f01c fc69 	bl	2aef0 <powf>
    e61e:	ed9f 5a15 	vldr	s10, [pc, #84]	; e674 <bsec_Bsec_getModHeatingDuration+0x78>
    e622:	eddf 7a15 	vldr	s15, [pc, #84]	; e678 <bsec_Bsec_getModHeatingDuration+0x7c>
    e626:	eddf 5a15 	vldr	s11, [pc, #84]	; e67c <bsec_Bsec_getModHeatingDuration+0x80>
    e62a:	ed9f 6a15 	vldr	s12, [pc, #84]	; e680 <bsec_Bsec_getModHeatingDuration+0x84>
    e62e:	eddf 6a15 	vldr	s13, [pc, #84]	; e684 <bsec_Bsec_getModHeatingDuration+0x88>
    e632:	ed9f 7a15 	vldr	s14, [pc, #84]	; e688 <bsec_Bsec_getModHeatingDuration+0x8c>
    e636:	ee60 7a27 	vmul.f32	s15, s0, s15
    e63a:	ee28 8a05 	vmul.f32	s16, s16, s10
    e63e:	ee28 0aa8 	vmul.f32	s0, s17, s17
    e642:	ee38 8a27 	vadd.f32	s16, s16, s15
    e646:	ee20 0a25 	vmul.f32	s0, s0, s11
    e64a:	ee68 8a86 	vmul.f32	s17, s17, s12
    e64e:	ee38 0a00 	vadd.f32	s0, s16, s0
    e652:	ee30 0a28 	vadd.f32	s0, s0, s17
    e656:	ee30 0a26 	vadd.f32	s0, s0, s13
    e65a:	ee20 0a07 	vmul.f32	s0, s0, s14
    e65e:	f01c fb4f 	bl	2ad00 <roundf>
    e662:	ecbd 8b02 	vpop	{d8}
    e666:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    e66a:	ee10 3a10 	vmov	r3, s0
    e66e:	b298      	uxth	r0, r3
    e670:	bd08      	pop	{r3, pc}
    e672:	bf00      	nop
    e674:	b0078259 	.word	0xb0078259
    e678:	34c2e0df 	.word	0x34c2e0df
    e67c:	b8d96737 	.word	0xb8d96737
    e680:	3c868e5a 	.word	0x3c868e5a
    e684:	3ee4926a 	.word	0x3ee4926a
    e688:	447a0000 	.word	0x447a0000

0000e68c <bsec_Bsec_parse>:
    e68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e690:	b082      	sub	sp, #8
    e692:	e9dd 790a 	ldrd	r7, r9, [sp, #40]	; 0x28
    e696:	460c      	mov	r4, r1
    e698:	2100      	movs	r1, #0
    e69a:	7039      	strb	r1, [r7, #0]
    e69c:	f889 1000 	strb.w	r1, [r9]
    e6a0:	6821      	ldr	r1, [r4, #0]
    e6a2:	4605      	mov	r5, r0
    e6a4:	4408      	add	r0, r1
    e6a6:	4690      	mov	r8, r2
    e6a8:	7842      	ldrb	r2, [r0, #1]
    e6aa:	f815 c001 	ldrb.w	ip, [r5, r1]
    e6ae:	f88d 2005 	strb.w	r2, [sp, #5]
    e6b2:	a901      	add	r1, sp, #4
    e6b4:	2202      	movs	r2, #2
    e6b6:	f10d 0006 	add.w	r0, sp, #6
    e6ba:	469a      	mov	sl, r3
    e6bc:	f88d c004 	strb.w	ip, [sp, #4]
    e6c0:	f025 f87e 	bl	337c0 <memcpy>
    e6c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    e6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6ca:	4550      	cmp	r0, sl
    e6cc:	6018      	str	r0, [r3, #0]
    e6ce:	d818      	bhi.n	e702 <bsec_Bsec_parse+0x76>
    e6d0:	b168      	cbz	r0, e6ee <bsec_Bsec_parse+0x62>
    e6d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    e6d6:	1c47      	adds	r7, r0, #1
    e6d8:	2301      	movs	r3, #1
    e6da:	6826      	ldr	r6, [r4, #0]
    e6dc:	18ea      	adds	r2, r5, r3
    e6de:	4432      	add	r2, r6
    e6e0:	3301      	adds	r3, #1
    e6e2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    e6e6:	f801 2f01 	strb.w	r2, [r1, #1]!
    e6ea:	429f      	cmp	r7, r3
    e6ec:	d1f5      	bne.n	e6da <bsec_Bsec_parse+0x4e>
    e6ee:	f898 3002 	ldrb.w	r3, [r8, #2]
    e6f2:	f889 3000 	strb.w	r3, [r9]
    e6f6:	6823      	ldr	r3, [r4, #0]
    e6f8:	4403      	add	r3, r0
    e6fa:	6023      	str	r3, [r4, #0]
    e6fc:	b002      	add	sp, #8
    e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e702:	23e0      	movs	r3, #224	; 0xe0
    e704:	703b      	strb	r3, [r7, #0]
    e706:	b002      	add	sp, #8
    e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e70c <bsec_Bsec_requestOutput>:
    e70c:	4b0b      	ldr	r3, [pc, #44]	; (e73c <bsec_Bsec_requestOutput+0x30>)
    e70e:	4419      	add	r1, r3
    e710:	b410      	push	{r4}
    e712:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    e716:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    e71a:	f8b1 4428 	ldrh.w	r4, [r1, #1064]	; 0x428
    e71e:	4294      	cmp	r4, r2
    e720:	d004      	beq.n	e72c <bsec_Bsec_requestOutput+0x20>
    e722:	3b01      	subs	r3, #1
    e724:	4403      	add	r3, r0
    e726:	2401      	movs	r4, #1
    e728:	f883 4446 	strb.w	r4, [r3, #1094]	; 0x446
    e72c:	2301      	movs	r3, #1
    e72e:	f8a1 2428 	strh.w	r2, [r1, #1064]	; 0x428
    e732:	f85d 4b04 	ldr.w	r4, [sp], #4
    e736:	f880 345a 	strb.w	r3, [r0, #1114]	; 0x45a
    e73a:	4770      	bx	lr
    e73c:	00035178 	.word	0x00035178

0000e740 <bsec_Bsec_setHyperConfiguration>:
    e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e744:	2305      	movs	r3, #5
    e746:	4606      	mov	r6, r0
    e748:	2102      	movs	r1, #2
    e74a:	2201      	movs	r2, #1
    e74c:	f880 1457 	strb.w	r1, [r0, #1111]	; 0x457
    e750:	f880 2458 	strb.w	r2, [r0, #1112]	; 0x458
    e754:	f880 3459 	strb.w	r3, [r0, #1113]	; 0x459
    e758:	2218      	movs	r2, #24
    e75a:	f200 4012 	addw	r0, r0, #1042	; 0x412
    e75e:	4975      	ldr	r1, [pc, #468]	; (e934 <bsec_Bsec_setHyperConfiguration+0x1f4>)
    e760:	f206 3546 	addw	r5, r6, #838	; 0x346
    e764:	f025 f82c 	bl	337c0 <memcpy>
    e768:	462c      	mov	r4, r5
    e76a:	f206 32ee 	addw	r2, r6, #1006	; 0x3ee
    e76e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e772:	f824 3f02 	strh.w	r3, [r4, #2]!
    e776:	42a2      	cmp	r2, r4
    e778:	d1fb      	bne.n	e772 <bsec_Bsec_setHyperConfiguration+0x32>
    e77a:	f240 51dc 	movw	r1, #1500	; 0x5dc
    e77e:	4b6e      	ldr	r3, [pc, #440]	; (e938 <bsec_Bsec_setHyperConfiguration+0x1f8>)
    e780:	f8df c1e4 	ldr.w	ip, [pc, #484]	; e968 <bsec_Bsec_setHyperConfiguration+0x228>
    e784:	4f6d      	ldr	r7, [pc, #436]	; (e93c <bsec_Bsec_setHyperConfiguration+0x1fc>)
    e786:	486e      	ldr	r0, [pc, #440]	; (e940 <bsec_Bsec_setHyperConfiguration+0x200>)
    e788:	f8df e1e0 	ldr.w	lr, [pc, #480]	; e96c <bsec_Bsec_setHyperConfiguration+0x22c>
    e78c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; e970 <bsec_Bsec_setHyperConfiguration+0x230>
    e790:	4a6c      	ldr	r2, [pc, #432]	; (e944 <bsec_Bsec_setHyperConfiguration+0x204>)
    e792:	f8a6 13e0 	strh.w	r1, [r6, #992]	; 0x3e0
    e796:	f04f 1164 	mov.w	r1, #6553700	; 0x640064
    e79a:	f8c6 e3dc 	str.w	lr, [r6, #988]	; 0x3dc
    e79e:	f8c6 c360 	str.w	ip, [r6, #864]	; 0x360
    e7a2:	f8c6 c36c 	str.w	ip, [r6, #876]	; 0x36c
    e7a6:	f8c6 c348 	str.w	ip, [r6, #840]	; 0x348
    e7aa:	f8c6 c34c 	str.w	ip, [r6, #844]	; 0x34c
    e7ae:	f8c6 c358 	str.w	ip, [r6, #856]	; 0x358
    e7b2:	f8c6 33b8 	str.w	r3, [r6, #952]	; 0x3b8
    e7b6:	f8c6 33bc 	str.w	r3, [r6, #956]	; 0x3bc
    e7ba:	f8c6 33c0 	str.w	r3, [r6, #960]	; 0x3c0
    e7be:	f8c6 33c4 	str.w	r3, [r6, #964]	; 0x3c4
    e7c2:	f8c6 33c8 	str.w	r3, [r6, #968]	; 0x3c8
    e7c6:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    e7ca:	f8c6 1364 	str.w	r1, [r6, #868]	; 0x364
    e7ce:	f8c6 1368 	str.w	r1, [r6, #872]	; 0x368
    e7d2:	f8c6 1374 	str.w	r1, [r6, #884]	; 0x374
    e7d6:	f8c6 137c 	str.w	r1, [r6, #892]	; 0x37c
    e7da:	f8c6 1350 	str.w	r1, [r6, #848]	; 0x350
    e7de:	f8c6 8370 	str.w	r8, [r6, #880]	; 0x370
    e7e2:	f8c6 7380 	str.w	r7, [r6, #896]	; 0x380
    e7e6:	f8c6 7384 	str.w	r7, [r6, #900]	; 0x384
    e7ea:	f8c6 7388 	str.w	r7, [r6, #904]	; 0x388
    e7ee:	f8c6 738c 	str.w	r7, [r6, #908]	; 0x38c
    e7f2:	f8c6 7390 	str.w	r7, [r6, #912]	; 0x390
    e7f6:	f8c6 7398 	str.w	r7, [r6, #920]	; 0x398
    e7fa:	f8c6 039c 	str.w	r0, [r6, #924]	; 0x39c
    e7fe:	f8c6 03a0 	str.w	r0, [r6, #928]	; 0x3a0
    e802:	f8c6 03a4 	str.w	r0, [r6, #932]	; 0x3a4
    e806:	f8c6 03a8 	str.w	r0, [r6, #936]	; 0x3a8
    e80a:	f8c6 03ac 	str.w	r0, [r6, #940]	; 0x3ac
    e80e:	f8c6 03b4 	str.w	r0, [r6, #948]	; 0x3b4
    e812:	f8c6 2354 	str.w	r2, [r6, #852]	; 0x354
    e816:	f8c6 135c 	str.w	r1, [r6, #860]	; 0x35c
    e81a:	2240      	movs	r2, #64	; 0x40
    e81c:	494a      	ldr	r1, [pc, #296]	; (e948 <bsec_Bsec_setHyperConfiguration+0x208>)
    e81e:	f8c6 e3e8 	str.w	lr, [r6, #1000]	; 0x3e8
    e822:	f8c6 c378 	str.w	ip, [r6, #888]	; 0x378
    e826:	f8c6 7394 	str.w	r7, [r6, #916]	; 0x394
    e82a:	f8c6 03b0 	str.w	r0, [r6, #944]	; 0x3b0
    e82e:	f8c6 33cc 	str.w	r3, [r6, #972]	; 0x3cc
    e832:	f506 7042 	add.w	r0, r6, #776	; 0x308
    e836:	f024 ffc3 	bl	337c0 <memcpy>
    e83a:	4a44      	ldr	r2, [pc, #272]	; (e94c <bsec_Bsec_setHyperConfiguration+0x20c>)
    e83c:	4944      	ldr	r1, [pc, #272]	; (e950 <bsec_Bsec_setHyperConfiguration+0x210>)
    e83e:	f8df 8134 	ldr.w	r8, [pc, #308]	; e974 <bsec_Bsec_setHyperConfiguration+0x234>
    e842:	f8df e134 	ldr.w	lr, [pc, #308]	; e978 <bsec_Bsec_setHyperConfiguration+0x238>
    e846:	f8df c134 	ldr.w	ip, [pc, #308]	; e97c <bsec_Bsec_setHyperConfiguration+0x23c>
    e84a:	4f42      	ldr	r7, [pc, #264]	; (e954 <bsec_Bsec_setHyperConfiguration+0x214>)
    e84c:	4842      	ldr	r0, [pc, #264]	; (e958 <bsec_Bsec_setHyperConfiguration+0x218>)
    e84e:	f8c6 2310 	str.w	r2, [r6, #784]	; 0x310
    e852:	2300      	movs	r3, #0
    e854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e858:	f8c6 330c 	str.w	r3, [r6, #780]	; 0x30c
    e85c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    e860:	f8c6 331c 	str.w	r3, [r6, #796]	; 0x31c
    e864:	f8c6 3320 	str.w	r3, [r6, #800]	; 0x320
    e868:	f8c6 3324 	str.w	r3, [r6, #804]	; 0x324
    e86c:	f8c6 233c 	str.w	r2, [r6, #828]	; 0x33c
    e870:	f8c6 2340 	str.w	r2, [r6, #832]	; 0x340
    e874:	f8c6 1344 	str.w	r1, [r6, #836]	; 0x344
    e878:	f8c6 8314 	str.w	r8, [r6, #788]	; 0x314
    e87c:	f8c6 e330 	str.w	lr, [r6, #816]	; 0x330
    e880:	f8c6 c32c 	str.w	ip, [r6, #812]	; 0x32c
    e884:	f8c6 7328 	str.w	r7, [r6, #808]	; 0x328
    e888:	f8c6 0334 	str.w	r0, [r6, #820]	; 0x334
    e88c:	4623      	mov	r3, r4
    e88e:	f206 410a 	addw	r1, r6, #1034	; 0x40a
    e892:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e896:	f823 2f02 	strh.w	r2, [r3, #2]!
    e89a:	4299      	cmp	r1, r3
    e89c:	d1fb      	bne.n	e896 <bsec_Bsec_setHyperConfiguration+0x156>
    e89e:	f247 5230 	movw	r2, #30000	; 0x7530
    e8a2:	2300      	movs	r3, #0
    e8a4:	f8a6 240e 	strh.w	r2, [r6, #1038]	; 0x40e
    e8a8:	f8a6 3410 	strh.w	r3, [r6, #1040]	; 0x410
    e8ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8b0:	f835 3f02 	ldrh.w	r3, [r5, #2]!
    e8b4:	428b      	cmp	r3, r1
    e8b6:	d005      	beq.n	e8c4 <bsec_Bsec_setHyperConfiguration+0x184>
    e8b8:	f8b6 2410 	ldrh.w	r2, [r6, #1040]	; 0x410
    e8bc:	429a      	cmp	r2, r3
    e8be:	bf38      	it	cc
    e8c0:	f8a6 3410 	strhcc.w	r3, [r6, #1040]	; 0x410
    e8c4:	42a5      	cmp	r5, r4
    e8c6:	d1f3      	bne.n	e8b0 <bsec_Bsec_setHyperConfiguration+0x170>
    e8c8:	4824      	ldr	r0, [pc, #144]	; (e95c <bsec_Bsec_setHyperConfiguration+0x21c>)
    e8ca:	4c25      	ldr	r4, [pc, #148]	; (e960 <bsec_Bsec_setHyperConfiguration+0x220>)
    e8cc:	4f25      	ldr	r7, [pc, #148]	; (e964 <bsec_Bsec_setHyperConfiguration+0x224>)
    e8ce:	2300      	movs	r3, #0
    e8d0:	2501      	movs	r5, #1
    e8d2:	fa40 f203 	asr.w	r2, r0, r3
    e8d6:	07d2      	lsls	r2, r2, #31
    e8d8:	d516      	bpl.n	e908 <bsec_Bsec_setHyperConfiguration+0x1c8>
    e8da:	5dd9      	ldrb	r1, [r3, r7]
    e8dc:	5d1a      	ldrb	r2, [r3, r4]
    e8de:	4421      	add	r1, r4
    e8e0:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    e8e4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    e8e8:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
    e8ec:	eb06 0241 	add.w	r2, r6, r1, lsl #1
    e8f0:	3901      	subs	r1, #1
    e8f2:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    e8f6:	45e6      	cmp	lr, ip
    e8f8:	bf1c      	itt	ne
    e8fa:	1989      	addne	r1, r1, r6
    e8fc:	f881 5446 	strbne.w	r5, [r1, #1094]	; 0x446
    e900:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    e904:	f886 545a 	strb.w	r5, [r6, #1114]	; 0x45a
    e908:	3301      	adds	r3, #1
    e90a:	2b15      	cmp	r3, #21
    e90c:	d1e1      	bne.n	e8d2 <bsec_Bsec_setHyperConfiguration+0x192>
    e90e:	f206 4345 	addw	r3, r6, #1093	; 0x445
    e912:	f206 4153 	addw	r1, r6, #1107	; 0x453
    e916:	2201      	movs	r2, #1
    e918:	f803 2f01 	strb.w	r2, [r3, #1]!
    e91c:	428b      	cmp	r3, r1
    e91e:	d1fb      	bne.n	e918 <bsec_Bsec_setHyperConfiguration+0x1d8>
    e920:	f896 345a 	ldrb.w	r3, [r6, #1114]	; 0x45a
    e924:	b90b      	cbnz	r3, e92a <bsec_Bsec_setHyperConfiguration+0x1ea>
    e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e92a:	4630      	mov	r0, r6
    e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e930:	f7ff bbea 	b.w	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e934:	000350b4 	.word	0x000350b4
    e938:	17701770 	.word	0x17701770
    e93c:	012c012c 	.word	0x012c012c
    e940:	07080708 	.word	0x07080708
    e944:	75300064 	.word	0x75300064
    e948:	00035074 	.word	0x00035074
    e94c:	c2820000 	.word	0xc2820000
    e950:	41100000 	.word	0x41100000
    e954:	49f42400 	.word	0x49f42400
    e958:	4b496a80 	.word	0x4b496a80
    e95c:	001279ef 	.word	0x001279ef
    e960:	00035178 	.word	0x00035178
    e964:	0003505c 	.word	0x0003505c
    e968:	75307530 	.word	0x75307530
    e96c:	05dc05dc 	.word	0x05dc05dc
    e970:	00647530 	.word	0x00647530
    e974:	432a0000 	.word	0x432a0000
    e978:	42fa0000 	.word	0x42fa0000
    e97c:	42c80000 	.word	0x42c80000

0000e980 <bsec_Bsec_setHyperState>:
    e980:	b470      	push	{r4, r5, r6}
    e982:	2200      	movs	r2, #0
    e984:	2300      	movs	r3, #0
    e986:	f500 743c 	add.w	r4, r0, #752	; 0x2f0
    e98a:	2100      	movs	r1, #0
    e98c:	f880 1456 	strb.w	r1, [r0, #1110]	; 0x456
    e990:	f8a0 1454 	strh.w	r1, [r0, #1108]	; 0x454
    e994:	f500 7540 	add.w	r5, r0, #768	; 0x300
    e998:	e9c4 2300 	strd	r2, r3, [r4]
    e99c:	f500 763e 	add.w	r6, r0, #760	; 0x2f8
    e9a0:	f247 5430 	movw	r4, #30000	; 0x7530
    e9a4:	e9c6 2300 	strd	r2, r3, [r6]
    e9a8:	e9c5 2300 	strd	r2, r3, [r5]
    e9ac:	f8a0 440c 	strh.w	r4, [r0, #1036]	; 0x40c
    e9b0:	f500 6385 	add.w	r3, r0, #1064	; 0x428
    e9b4:	f200 4245 	addw	r2, r0, #1093	; 0x445
    e9b8:	f200 4544 	addw	r5, r0, #1092	; 0x444
    e9bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    e9c0:	f823 4f02 	strh.w	r4, [r3, #2]!
    e9c4:	42ab      	cmp	r3, r5
    e9c6:	f802 1f01 	strb.w	r1, [r2, #1]!
    e9ca:	d1f9      	bne.n	e9c0 <bsec_Bsec_setHyperState+0x40>
    e9cc:	2366      	movs	r3, #102	; 0x66
    e9ce:	f880 145a 	strb.w	r1, [r0, #1114]	; 0x45a
    e9d2:	f880 145b 	strb.w	r1, [r0, #1115]	; 0x45b
    e9d6:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
    e9da:	bc70      	pop	{r4, r5, r6}
    e9dc:	4770      	bx	lr
    e9de:	bf00      	nop

0000e9e0 <bsec_Bsec_validateSerialization>:
    e9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9e2:	b089      	sub	sp, #36	; 0x24
    e9e4:	2400      	movs	r4, #0
    e9e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    e9e8:	2917      	cmp	r1, #23
    e9ea:	602c      	str	r4, [r5, #0]
    e9ec:	d920      	bls.n	ea30 <bsec_Bsec_validateSerialization+0x50>
    e9ee:	4291      	cmp	r1, r2
    e9f0:	d81a      	bhi.n	ea28 <bsec_Bsec_validateSerialization+0x48>
    e9f2:	ac03      	add	r4, sp, #12
    e9f4:	1e42      	subs	r2, r0, #1
    e9f6:	1cc7      	adds	r7, r0, #3
    e9f8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
    e9fc:	f804 6b01 	strb.w	r6, [r4], #1
    ea00:	42ba      	cmp	r2, r7
    ea02:	d1f9      	bne.n	e9f8 <bsec_Bsec_validateSerialization+0x18>
    ea04:	2204      	movs	r2, #4
    ea06:	4604      	mov	r4, r0
    ea08:	460f      	mov	r7, r1
    ea0a:	a802      	add	r0, sp, #8
    ea0c:	a903      	add	r1, sp, #12
    ea0e:	461e      	mov	r6, r3
    ea10:	f024 fed6 	bl	337c0 <memcpy>
    ea14:	9b02      	ldr	r3, [sp, #8]
    ea16:	4a30      	ldr	r2, [pc, #192]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea18:	4293      	cmp	r3, r2
    ea1a:	d00d      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea1c:	3301      	adds	r3, #1
    ea1e:	d00b      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea20:	23de      	movs	r3, #222	; 0xde
    ea22:	7033      	strb	r3, [r6, #0]
    ea24:	b009      	add	sp, #36	; 0x24
    ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea28:	22da      	movs	r2, #218	; 0xda
    ea2a:	701a      	strb	r2, [r3, #0]
    ea2c:	b009      	add	sp, #36	; 0x24
    ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea30:	22db      	movs	r2, #219	; 0xdb
    ea32:	701a      	strb	r2, [r3, #0]
    ea34:	b009      	add	sp, #36	; 0x24
    ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea38:	2208      	movs	r2, #8
    ea3a:	1d21      	adds	r1, r4, #4
    ea3c:	a806      	add	r0, sp, #24
    ea3e:	f024 febf 	bl	337c0 <memcpy>
    ea42:	2208      	movs	r2, #8
    ea44:	a906      	add	r1, sp, #24
    ea46:	a804      	add	r0, sp, #16
    ea48:	f024 feba 	bl	337c0 <memcpy>
    ea4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea50:	2b00      	cmp	r3, #0
    ea52:	bf08      	it	eq
    ea54:	2a3d      	cmpeq	r2, #61	; 0x3d
    ea56:	d007      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea58:	2b00      	cmp	r3, #0
    ea5a:	bf08      	it	eq
    ea5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ea60:	d002      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea62:	23dd      	movs	r3, #221	; 0xdd
    ea64:	7033      	strb	r3, [r6, #0]
    ea66:	e7e1      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea68:	7b22      	ldrb	r2, [r4, #12]
    ea6a:	7b63      	ldrb	r3, [r4, #13]
    ea6c:	f88d 200c 	strb.w	r2, [sp, #12]
    ea70:	7ba2      	ldrb	r2, [r4, #14]
    ea72:	f88d 300d 	strb.w	r3, [sp, #13]
    ea76:	f88d 200e 	strb.w	r2, [sp, #14]
    ea7a:	7be3      	ldrb	r3, [r4, #15]
    ea7c:	f88d 300f 	strb.w	r3, [sp, #15]
    ea80:	a903      	add	r1, sp, #12
    ea82:	a802      	add	r0, sp, #8
    ea84:	2204      	movs	r2, #4
    ea86:	f024 fe9b 	bl	337c0 <memcpy>
    ea8a:	9d02      	ldr	r5, [sp, #8]
    ea8c:	f105 0318 	add.w	r3, r5, #24
    ea90:	42bb      	cmp	r3, r7
    ea92:	d002      	beq.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea94:	23d8      	movs	r3, #216	; 0xd8
    ea96:	7033      	strb	r3, [r6, #0]
    ea98:	e7c8      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea9a:	aa01      	add	r2, sp, #4
    ea9c:	4620      	mov	r0, r4
    ea9e:	f105 0110 	add.w	r1, r5, #16
    eaa2:	f003 f86f 	bl	11b84 <bsec_crcCcitt2>
    eaa6:	1960      	adds	r0, r4, r5
    eaa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    eaac:	7d03      	ldrb	r3, [r0, #20]
    eaae:	429a      	cmp	r2, r3
    eab0:	d002      	beq.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    eab2:	23dc      	movs	r3, #220	; 0xdc
    eab4:	7033      	strb	r3, [r6, #0]
    eab6:	e7b9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    eab8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    eabc:	7d43      	ldrb	r3, [r0, #21]
    eabe:	429a      	cmp	r2, r3
    eac0:	d1f7      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac2:	7d83      	ldrb	r3, [r0, #22]
    eac4:	2b00      	cmp	r3, #0
    eac6:	d1f4      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac8:	7dc3      	ldrb	r3, [r0, #23]
    eaca:	2b00      	cmp	r3, #0
    eacc:	d1f1      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eace:	990e      	ldr	r1, [sp, #56]	; 0x38
    ead0:	2210      	movs	r2, #16
    ead2:	600a      	str	r2, [r1, #0]
    ead4:	7033      	strb	r3, [r6, #0]
    ead6:	e7a9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ead8:	01040704 	.word	0x01040704

0000eadc <bsec_b_Bsec_setHyperConfiguration>:
    eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eae0:	b0bc      	sub	sp, #240	; 0xf0
    eae2:	ab03      	add	r3, sp, #12
    eae4:	ae04      	add	r6, sp, #16
    eae6:	e9cd 3600 	strd	r3, r6, [sp]
    eaea:	4604      	mov	r4, r0
    eaec:	f10d 030b 	add.w	r3, sp, #11
    eaf0:	20fe      	movs	r0, #254	; 0xfe
    eaf2:	460f      	mov	r7, r1
    eaf4:	f002 ff9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    eaf8:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    eafc:	2800      	cmp	r0, #0
    eafe:	d166      	bne.n	ebce <bsec_b_Bsec_setHyperConfiguration+0xf2>
    eb00:	2502      	movs	r5, #2
    eb02:	f504 787c 	add.w	r8, r4, #1008	; 0x3f0
    eb06:	1e6b      	subs	r3, r5, #1
    eb08:	b2db      	uxtb	r3, r3
    eb0a:	3b02      	subs	r3, #2
    eb0c:	2b05      	cmp	r3, #5
    eb0e:	d804      	bhi.n	eb1a <bsec_b_Bsec_setHyperConfiguration+0x3e>
    eb10:	e8df f003 	tbb	[pc, r3]
    eb14:	6b77838a 	.word	0x6b77838a
    eb18:	0e60      	.short	0x0e60
    eb1a:	4631      	mov	r1, r6
    eb1c:	4638      	mov	r0, r7
    eb1e:	f001 f891 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    eb22:	2d08      	cmp	r5, #8
    eb24:	f884 0457 	strb.w	r0, [r4, #1111]	; 0x457
    eb28:	d008      	beq.n	eb3c <bsec_b_Bsec_setHyperConfiguration+0x60>
    eb2a:	3501      	adds	r5, #1
    eb2c:	b2ed      	uxtb	r5, r5
    eb2e:	e7ea      	b.n	eb06 <bsec_b_Bsec_setHyperConfiguration+0x2a>
    eb30:	4631      	mov	r1, r6
    eb32:	4638      	mov	r0, r7
    eb34:	f000 ffd2 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
    eb38:	f8a4 040e 	strh.w	r0, [r4, #1038]	; 0x40e
    eb3c:	2300      	movs	r3, #0
    eb3e:	f8a4 3410 	strh.w	r3, [r4, #1040]	; 0x410
    eb42:	f204 35ee 	addw	r5, r4, #1006	; 0x3ee
    eb46:	f204 3346 	addw	r3, r4, #838	; 0x346
    eb4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    eb4e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    eb52:	4282      	cmp	r2, r0
    eb54:	d005      	beq.n	eb62 <bsec_b_Bsec_setHyperConfiguration+0x86>
    eb56:	f8b4 1410 	ldrh.w	r1, [r4, #1040]	; 0x410
    eb5a:	4291      	cmp	r1, r2
    eb5c:	bf38      	it	cc
    eb5e:	f8a4 2410 	strhcc.w	r2, [r4, #1040]	; 0x410
    eb62:	42ab      	cmp	r3, r5
    eb64:	d1f3      	bne.n	eb4e <bsec_b_Bsec_setHyperConfiguration+0x72>
    eb66:	4834      	ldr	r0, [pc, #208]	; (ec38 <bsec_b_Bsec_setHyperConfiguration+0x15c>)
    eb68:	4d34      	ldr	r5, [pc, #208]	; (ec3c <bsec_b_Bsec_setHyperConfiguration+0x160>)
    eb6a:	4f35      	ldr	r7, [pc, #212]	; (ec40 <bsec_b_Bsec_setHyperConfiguration+0x164>)
    eb6c:	2300      	movs	r3, #0
    eb6e:	2601      	movs	r6, #1
    eb70:	fa40 f203 	asr.w	r2, r0, r3
    eb74:	07d2      	lsls	r2, r2, #31
    eb76:	d516      	bpl.n	eba6 <bsec_b_Bsec_setHyperConfiguration+0xca>
    eb78:	5dd9      	ldrb	r1, [r3, r7]
    eb7a:	5d5a      	ldrb	r2, [r3, r5]
    eb7c:	4429      	add	r1, r5
    eb7e:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    eb82:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    eb86:	f834 c012 	ldrh.w	ip, [r4, r2, lsl #1]
    eb8a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    eb8e:	3901      	subs	r1, #1
    eb90:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    eb94:	45e6      	cmp	lr, ip
    eb96:	bf1c      	itt	ne
    eb98:	1909      	addne	r1, r1, r4
    eb9a:	f881 6446 	strbne.w	r6, [r1, #1094]	; 0x446
    eb9e:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    eba2:	f884 645a 	strb.w	r6, [r4, #1114]	; 0x45a
    eba6:	3301      	adds	r3, #1
    eba8:	2b15      	cmp	r3, #21
    ebaa:	d1e1      	bne.n	eb70 <bsec_b_Bsec_setHyperConfiguration+0x94>
    ebac:	f204 4345 	addw	r3, r4, #1093	; 0x445
    ebb0:	f204 4153 	addw	r1, r4, #1107	; 0x453
    ebb4:	2201      	movs	r2, #1
    ebb6:	f803 2f01 	strb.w	r2, [r3, #1]!
    ebba:	428b      	cmp	r3, r1
    ebbc:	d1fb      	bne.n	ebb6 <bsec_b_Bsec_setHyperConfiguration+0xda>
    ebbe:	f894 345a 	ldrb.w	r3, [r4, #1114]	; 0x45a
    ebc2:	b113      	cbz	r3, ebca <bsec_b_Bsec_setHyperConfiguration+0xee>
    ebc4:	4620      	mov	r0, r4
    ebc6:	f7ff fa9f 	bl	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    ebca:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    ebce:	b03c      	add	sp, #240	; 0xf0
    ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd4:	aa0b      	add	r2, sp, #44	; 0x2c
    ebd6:	4631      	mov	r1, r6
    ebd8:	4638      	mov	r0, r7
    ebda:	f001 f93d 	bl	fe58 <bsec_k_Entity_parseAndDeserialize>
    ebde:	221c      	movs	r2, #28
    ebe0:	a90b      	add	r1, sp, #44	; 0x2c
    ebe2:	4640      	mov	r0, r8
    ebe4:	f024 fdec 	bl	337c0 <memcpy>
    ebe8:	e79f      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ebea:	aa12      	add	r2, sp, #72	; 0x48
    ebec:	4631      	mov	r1, r6
    ebee:	4638      	mov	r0, r7
    ebf0:	f001 f8f0 	bl	fdd4 <bsec_j_Entity_parseAndDeserialize>
    ebf4:	a912      	add	r1, sp, #72	; 0x48
    ebf6:	22a8      	movs	r2, #168	; 0xa8
    ebf8:	f504 7052 	add.w	r0, r4, #840	; 0x348
    ebfc:	f024 fde0 	bl	337c0 <memcpy>
    ec00:	e793      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec02:	aa05      	add	r2, sp, #20
    ec04:	4631      	mov	r1, r6
    ec06:	4638      	mov	r0, r7
    ec08:	f001 f8a2 	bl	fd50 <bsec_i_Entity_parseAndDeserialize>
    ec0c:	a905      	add	r1, sp, #20
    ec0e:	2218      	movs	r2, #24
    ec10:	f204 4012 	addw	r0, r4, #1042	; 0x412
    ec14:	f024 fdd4 	bl	337c0 <memcpy>
    ec18:	e787      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec1a:	4631      	mov	r1, r6
    ec1c:	4638      	mov	r0, r7
    ec1e:	f001 f811 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec22:	f884 0459 	strb.w	r0, [r4, #1113]	; 0x459
    ec26:	e780      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec28:	4631      	mov	r1, r6
    ec2a:	4638      	mov	r0, r7
    ec2c:	f001 f80a 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec30:	f884 0458 	strb.w	r0, [r4, #1112]	; 0x458
    ec34:	e779      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec36:	bf00      	nop
    ec38:	001279ef 	.word	0x001279ef
    ec3c:	00035178 	.word	0x00035178
    ec40:	0003505c 	.word	0x0003505c

0000ec44 <bsec_b_Bsec_setHyperState>:
    ec44:	2903      	cmp	r1, #3
    ec46:	d916      	bls.n	ec76 <bsec_b_Bsec_setHyperState+0x32>
    ec48:	b510      	push	{r4, lr}
    ec4a:	b082      	sub	sp, #8
    ec4c:	7802      	ldrb	r2, [r0, #0]
    ec4e:	7843      	ldrb	r3, [r0, #1]
    ec50:	f88d 2004 	strb.w	r2, [sp, #4]
    ec54:	4604      	mov	r4, r0
    ec56:	2202      	movs	r2, #2
    ec58:	a901      	add	r1, sp, #4
    ec5a:	f10d 0006 	add.w	r0, sp, #6
    ec5e:	f88d 3005 	strb.w	r3, [sp, #5]
    ec62:	f024 fdad 	bl	337c0 <memcpy>
    ec66:	78a3      	ldrb	r3, [r4, #2]
    ec68:	2bfe      	cmp	r3, #254	; 0xfe
    ec6a:	bf0c      	ite	eq
    ec6c:	2000      	moveq	r0, #0
    ec6e:	f06f 0063 	mvnne.w	r0, #99	; 0x63
    ec72:	b002      	add	sp, #8
    ec74:	bd10      	pop	{r4, pc}
    ec76:	f06f 0067 	mvn.w	r0, #103	; 0x67
    ec7a:	4770      	bx	lr

0000ec7c <bsec_ChannelHub_isChannelReady.part.0>:
    ec7c:	3901      	subs	r1, #1
    ec7e:	4b19      	ldr	r3, [pc, #100]	; (ece4 <bsec_ChannelHub_isChannelReady.part.0+0x68>)
    ec80:	5c5b      	ldrb	r3, [r3, r1]
    ec82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ec86:	b470      	push	{r4, r5, r6}
    ec88:	f8b3 429a 	ldrh.w	r4, [r3, #666]	; 0x29a
    ec8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec90:	4294      	cmp	r4, r2
    ec92:	d006      	beq.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ec94:	4a14      	ldr	r2, [pc, #80]	; (ece8 <bsec_ChannelHub_isChannelReady.part.0+0x6c>)
    ec96:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
    ec9a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
    ec9e:	43a2      	bics	r2, r4
    eca0:	d002      	beq.n	eca8 <bsec_ChannelHub_isChannelReady.part.0+0x2c>
    eca2:	2000      	movs	r0, #0
    eca4:	bc70      	pop	{r4, r5, r6}
    eca6:	4770      	bx	lr
    eca8:	4a10      	ldr	r2, [pc, #64]	; (ecec <bsec_ChannelHub_isChannelReady.part.0+0x70>)
    ecaa:	f8d0 5280 	ldr.w	r5, [r0, #640]	; 0x280
    ecae:	5652      	ldrsb	r2, [r2, r1]
    ecb0:	43aa      	bics	r2, r5
    ecb2:	d1f6      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecb4:	f8b3 52de 	ldrh.w	r5, [r3, #734]	; 0x2de
    ecb8:	f8b3 62d2 	ldrh.w	r6, [r3, #722]	; 0x2d2
    ecbc:	1c6a      	adds	r2, r5, #1
    ecbe:	b295      	uxth	r5, r2
    ecc0:	fbb5 f2f6 	udiv	r2, r5, r6
    ecc4:	fb06 5212 	mls	r2, r6, r2, r5
    ecc8:	b292      	uxth	r2, r2
    ecca:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
    ecce:	2a00      	cmp	r2, #0
    ecd0:	d1e7      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecd2:	2201      	movs	r2, #1
    ecd4:	fa02 f301 	lsl.w	r3, r2, r1
    ecd8:	4323      	orrs	r3, r4
    ecda:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ecde:	4610      	mov	r0, r2
    ece0:	e7e0      	b.n	eca4 <bsec_ChannelHub_isChannelReady.part.0+0x28>
    ece2:	bf00      	nop
    ece4:	000350ec 	.word	0x000350ec
    ece8:	000350cc 	.word	0x000350cc
    ecec:	000350e0 	.word	0x000350e0

0000ecf0 <bsec_ChannelHub_ChannelHub>:
    ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	f001 fff6 	bl	10ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>
    ecf8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    ecfc:	f002 fcbc 	bl	11678 <bsec_SensorStatusTracker_SensorStatusTracker>
    ed00:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ed04:	f002 fa02 	bl	1110c <bsec_IaqEstimator_IaqEstimator>
    ed08:	f104 0068 	add.w	r0, r4, #104	; 0x68
    ed0c:	f001 faaa 	bl	10264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>
    ed10:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    ed14:	f7fd fdfc 	bl	c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>
    ed18:	210a      	movs	r1, #10
    ed1a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    ed1e:	f002 f8b9 	bl	10e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>
    ed22:	2600      	movs	r6, #0
    ed24:	f504 730a 	add.w	r3, r4, #552	; 0x228
    ed28:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    ed2c:	f504 7512 	add.w	r5, r4, #584	; 0x248
    ed30:	2000      	movs	r0, #0
    ed32:	2100      	movs	r1, #0
    ed34:	f843 6b04 	str.w	r6, [r3], #4
    ed38:	42ab      	cmp	r3, r5
    ed3a:	e8e2 0102 	strd	r0, r1, [r2], #8
    ed3e:	d1f9      	bne.n	ed34 <bsec_ChannelHub_ChannelHub+0x44>
    ed40:	2000      	movs	r0, #0
    ed42:	f04f 0c00 	mov.w	ip, #0
    ed46:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    ed4a:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    ed4e:	f204 2283 	addw	r2, r4, #643	; 0x283
    ed52:	f504 7520 	add.w	r5, r4, #640	; 0x280
    ed56:	2600      	movs	r6, #0
    ed58:	2700      	movs	r7, #0
    ed5a:	f843 cb04 	str.w	ip, [r3], #4
    ed5e:	42ab      	cmp	r3, r5
    ed60:	e9e1 6702 	strd	r6, r7, [r1, #8]!
    ed64:	f802 0f01 	strb.w	r0, [r2, #1]!
    ed68:	d1f7      	bne.n	ed5a <bsec_ChannelHub_ChannelHub+0x6a>
    ed6a:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
    ed6e:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
    ed72:	f504 7327 	add.w	r3, r4, #668	; 0x29c
    ed76:	f504 752a 	add.w	r5, r4, #680	; 0x2a8
    ed7a:	2001      	movs	r0, #1
    ed7c:	2100      	movs	r1, #0
    ed7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed82:	8718      	strh	r0, [r3, #56]	; 0x38
    ed84:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    ed88:	f823 2b02 	strh.w	r2, [r3], #2
    ed8c:	429d      	cmp	r5, r3
    ed8e:	d1f8      	bne.n	ed82 <bsec_ChannelHub_ChannelHub+0x92>
    ed90:	f8a4 22a8 	strh.w	r2, [r4, #680]	; 0x2a8
    ed94:	f8a4 22aa 	strh.w	r2, [r4, #682]	; 0x2aa
    ed98:	f8a4 22ac 	strh.w	r2, [r4, #684]	; 0x2ac
    ed9c:	f8a4 22ae 	strh.w	r2, [r4, #686]	; 0x2ae
    eda0:	f8a4 22b0 	strh.w	r2, [r4, #688]	; 0x2b0
    eda4:	f8a4 22b2 	strh.w	r2, [r4, #690]	; 0x2b2
    eda8:	f8a4 22b4 	strh.w	r2, [r4, #692]	; 0x2b4
    edac:	f8a4 22b6 	strh.w	r2, [r4, #694]	; 0x2b6
    edb0:	f204 23b6 	addw	r3, r4, #694	; 0x2b6
    edb4:	f204 21d2 	addw	r1, r4, #722	; 0x2d2
    edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    edbc:	f823 2f02 	strh.w	r2, [r3, #2]!
    edc0:	428b      	cmp	r3, r1
    edc2:	d1fb      	bne.n	edbc <bsec_ChannelHub_ChannelHub+0xcc>
    edc4:	4620      	mov	r0, r4
    edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000edc8 <bsec_ChannelHub_configureChannel>:
    edc8:	b410      	push	{r4}
    edca:	1e4c      	subs	r4, r1, #1
    edcc:	4611      	mov	r1, r2
    edce:	2c09      	cmp	r4, #9
    edd0:	d82b      	bhi.n	ee2a <bsec_ChannelHub_configureChannel+0x62>
    edd2:	e8df f004 	tbb	[pc, r4]
    edd6:	110b      	.short	0x110b
    edd8:	2a232a17 	.word	0x2a232a17
    eddc:	1c052a2a 	.word	0x1c052a2a
    ede0:	461a      	mov	r2, r3
    ede2:	30c8      	adds	r0, #200	; 0xc8
    ede4:	f85d 4b04 	ldr.w	r4, [sp], #4
    ede8:	f7fd bdda 	b.w	c9a0 <bsec_SensorHeatCompensator_configure>
    edec:	461a      	mov	r2, r3
    edee:	3068      	adds	r0, #104	; 0x68
    edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    edf4:	f001 ba72 	b.w	102dc <bsec_GasHumidityBaselineTracker_configure>
    edf8:	461a      	mov	r2, r3
    edfa:	302c      	adds	r0, #44	; 0x2c
    edfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee00:	f002 bbda 	b.w	115b8 <bsec_b_IaqEstimator_configure>
    ee04:	461a      	mov	r2, r3
    ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee0a:	f001 bf77 	b.w	10cfc <bsec_GasHumidityPreProcessor_configure>
    ee0e:	461a      	mov	r2, r3
    ee10:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    ee14:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee18:	f002 b848 	b.w	10eac <bsec_HumidityTemperatureCorrector_configure>
    ee1c:	461a      	mov	r2, r3
    ee1e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    ee22:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee26:	f002 bde1 	b.w	119ec <bsec_b_SensorStatusTracker_configure>
    ee2a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    ee2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee32:	4770      	bx	lr

0000ee34 <bsec_ChannelHub_do>:
    ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee38:	ed2d 8b02 	vpush	{d8}
    ee3c:	2300      	movs	r3, #0
    ee3e:	b09b      	sub	sp, #108	; 0x6c
    ee40:	ed9f 8aae 	vldr	s16, [pc, #696]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ee44:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ee48:	2105      	movs	r1, #5
    ee4a:	4604      	mov	r4, r0
    ee4c:	f88d 3012 	strb.w	r3, [sp, #18]
    ee50:	f88d 3013 	strb.w	r3, [sp, #19]
    ee54:	ed8d 8a05 	vstr	s16, [sp, #20]
    ee58:	ed8d 8a06 	vstr	s16, [sp, #24]
    ee5c:	ed8d 8a07 	vstr	s16, [sp, #28]
    ee60:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
    ee64:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
    ee68:	ed8d 8a16 	vstr	s16, [sp, #88]	; 0x58
    ee6c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
    ee70:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
    ee74:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
    ee78:	ed8d 8a08 	vstr	s16, [sp, #32]
    ee7c:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
    ee80:	f7ff fefc 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ee84:	2800      	cmp	r0, #0
    ee86:	f000 8090 	beq.w	efaa <bsec_ChannelHub_do+0x176>
    ee8a:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ee8e:	eef4 7a48 	vcmp.f32	s15, s16
    ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee96:	f000 8135 	beq.w	f104 <bsec_ChannelHub_do+0x2d0>
    ee9a:	2103      	movs	r1, #3
    ee9c:	4620      	mov	r0, r4
    ee9e:	4d98      	ldr	r5, [pc, #608]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    eea0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    eea4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    eea8:	f7ff fee8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeac:	2800      	cmp	r0, #0
    eeae:	f040 8088 	bne.w	efc2 <bsec_ChannelHub_do+0x18e>
    eeb2:	2101      	movs	r1, #1
    eeb4:	4620      	mov	r0, r4
    eeb6:	f7ff fee1 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeba:	b138      	cbz	r0, eecc <bsec_ChannelHub_do+0x98>
    eebc:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eec0:	eef5 7a40 	vcmp.f32	s15, #0.0
    eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eec8:	f000 8179 	beq.w	f1be <bsec_ChannelHub_do+0x38a>
    eecc:	2102      	movs	r1, #2
    eece:	4620      	mov	r0, r4
    eed0:	f7ff fed4 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eed4:	b138      	cbz	r0, eee6 <bsec_ChannelHub_do+0xb2>
    eed6:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eeda:	eef5 7a40 	vcmp.f32	s15, #0.0
    eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eee2:	f000 81ab 	beq.w	f23c <bsec_ChannelHub_do+0x408>
    eee6:	2109      	movs	r1, #9
    eee8:	4620      	mov	r0, r4
    eeea:	f7ff fec7 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeee:	b138      	cbz	r0, ef00 <bsec_ChannelHub_do+0xcc>
    eef0:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eef4:	eef5 7a40 	vcmp.f32	s15, #0.0
    eef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eefc:	f000 8250 	beq.w	f3a0 <bsec_ChannelHub_do+0x56c>
    ef00:	ed9f 8a7e 	vldr	s16, [pc, #504]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ef04:	210a      	movs	r1, #10
    ef06:	4620      	mov	r0, r4
    ef08:	f7ff feb8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ef0c:	b138      	cbz	r0, ef1e <bsec_ChannelHub_do+0xea>
    ef0e:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ef12:	eef5 7a40 	vcmp.f32	s15, #0.0
    ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef1a:	f000 8274 	beq.w	f406 <bsec_ChannelHub_do+0x5d2>
    ef1e:	796b      	ldrb	r3, [r5, #5]
    ef20:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef24:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef28:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef2c:	4291      	cmp	r1, r2
    ef2e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef32:	d004      	beq.n	ef3e <bsec_ChannelHub_do+0x10a>
    ef34:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef38:	0757      	lsls	r7, r2, #29
    ef3a:	f100 80bd 	bmi.w	f0b8 <bsec_ChannelHub_do+0x284>
    ef3e:	79ab      	ldrb	r3, [r5, #6]
    ef40:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef44:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef48:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef4c:	4291      	cmp	r1, r2
    ef4e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef52:	d004      	beq.n	ef5e <bsec_ChannelHub_do+0x12a>
    ef54:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef58:	07d0      	lsls	r0, r2, #31
    ef5a:	f100 808b 	bmi.w	f074 <bsec_ChannelHub_do+0x240>
    ef5e:	79eb      	ldrb	r3, [r5, #7]
    ef60:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef64:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef68:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef6c:	4291      	cmp	r1, r2
    ef6e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef72:	d003      	beq.n	ef7c <bsec_ChannelHub_do+0x148>
    ef74:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef78:	0791      	lsls	r1, r2, #30
    ef7a:	d459      	bmi.n	f030 <bsec_ChannelHub_do+0x1fc>
    ef7c:	7a2b      	ldrb	r3, [r5, #8]
    ef7e:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef86:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef8a:	4291      	cmp	r1, r2
    ef8c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    ef90:	d003      	beq.n	ef9a <bsec_ChannelHub_do+0x166>
    ef92:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef96:	0712      	lsls	r2, r2, #28
    ef98:	d428      	bmi.n	efec <bsec_ChannelHub_do+0x1b8>
    ef9a:	2300      	movs	r3, #0
    ef9c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    efa0:	b01b      	add	sp, #108	; 0x6c
    efa2:	ecbd 8b02 	vpop	{d8}
    efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efaa:	4d55      	ldr	r5, [pc, #340]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    efac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    efb0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    efb4:	2103      	movs	r1, #3
    efb6:	4620      	mov	r0, r4
    efb8:	f7ff fe60 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    efbc:	2800      	cmp	r0, #0
    efbe:	f43f af78 	beq.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efc2:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    efc6:	eef5 7a40 	vcmp.f32	s15, #0.0
    efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efce:	f47f af70 	bne.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efd2:	ab07      	add	r3, sp, #28
    efd4:	aa06      	add	r2, sp, #24
    efd6:	a905      	add	r1, sp, #20
    efd8:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    efdc:	edd4 0a8c 	vldr	s1, [r4, #560]	; 0x230
    efe0:	ed94 0a8d 	vldr	s0, [r4, #564]	; 0x234
    efe4:	4620      	mov	r0, r4
    efe6:	f001 fea3 	bl	10d30 <bsec_GasHumidityPreProcessor_doStep>
    efea:	e762      	b.n	eeb2 <bsec_ChannelHub_do+0x7e>
    efec:	f504 72c8 	add.w	r2, r4, #400	; 0x190
    eff0:	e9d2 0100 	ldrd	r0, r1, [r2]
    eff4:	f103 0236 	add.w	r2, r3, #54	; 0x36
    eff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    effc:	f8d4 6234 	ldr.w	r6, [r4, #564]	; 0x234
    f000:	f8c3 6244 	str.w	r6, [r3, #580]	; 0x244
    f004:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f008:	ed9f 0a3c 	vldr	s0, [pc, #240]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f00c:	e9c2 0100 	strd	r0, r1, [r2]
    f010:	f01b fe76 	bl	2ad00 <roundf>
    f014:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f018:	4425      	add	r5, r4
    f01a:	ee17 3a90 	vmov	r3, s15
    f01e:	f885 3284 	strb.w	r3, [r5, #644]	; 0x284
    f022:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f02a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f02e:	e7b4      	b.n	ef9a <bsec_ChannelHub_do+0x166>
    f030:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    f034:	e9d2 0100 	ldrd	r0, r1, [r2]
    f038:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f03c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f040:	f8d4 722c 	ldr.w	r7, [r4, #556]	; 0x22c
    f044:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f048:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f04c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f050:	e9c2 0100 	strd	r0, r1, [r2]
    f054:	f01b fe54 	bl	2ad00 <roundf>
    f058:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f05c:	4426      	add	r6, r4
    f05e:	ee17 3a90 	vmov	r3, s15
    f062:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f066:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f06e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f072:	e783      	b.n	ef7c <bsec_ChannelHub_do+0x148>
    f074:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    f078:	e9d2 0100 	ldrd	r0, r1, [r2]
    f07c:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f084:	f8d4 7228 	ldr.w	r7, [r4, #552]	; 0x228
    f088:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f08c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f090:	ed9f 0a1a 	vldr	s0, [pc, #104]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f094:	e9c2 0100 	strd	r0, r1, [r2]
    f098:	f01b fe32 	bl	2ad00 <roundf>
    f09c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0a0:	4426      	add	r6, r4
    f0a2:	ee17 3a90 	vmov	r3, s15
    f0a6:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0aa:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0b2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0b6:	e752      	b.n	ef5e <bsec_ChannelHub_do+0x12a>
    f0b8:	f504 72c4 	add.w	r2, r4, #392	; 0x188
    f0bc:	e9d2 0100 	ldrd	r0, r1, [r2]
    f0c0:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f0c8:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
    f0cc:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f0d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f0d4:	ed9f 0a09 	vldr	s0, [pc, #36]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f0d8:	e9c2 0100 	strd	r0, r1, [r2]
    f0dc:	f01b fe10 	bl	2ad00 <roundf>
    f0e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0e4:	4426      	add	r6, r4
    f0e6:	ee17 3a90 	vmov	r3, s15
    f0ea:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0ee:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0f2:	f043 0320 	orr.w	r3, r3, #32
    f0f6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0fa:	e720      	b.n	ef3e <bsec_ChannelHub_do+0x10a>
    f0fc:	00000000 	.word	0x00000000
    f100:	00035178 	.word	0x00035178
    f104:	f504 73c8 	add.w	r3, r4, #400	; 0x190
    f108:	e9d3 6700 	ldrd	r6, r7, [r3]
    f10c:	f10d 0112 	add.w	r1, sp, #18
    f110:	ab09      	add	r3, sp, #36	; 0x24
    f112:	f10d 0013 	add.w	r0, sp, #19
    f116:	e9cd 1000 	strd	r1, r0, [sp]
    f11a:	9302      	str	r3, [sp, #8]
    f11c:	f504 7098 	add.w	r0, r4, #304	; 0x130
    f120:	4632      	mov	r2, r6
    f122:	463b      	mov	r3, r7
    f124:	f002 fac4 	bl	116b0 <bsec_SensorStatusTracker_doStep>
    f128:	4dcf      	ldr	r5, [pc, #828]	; (f468 <bsec_ChannelHub_do+0x634>)
    f12a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    f12e:	7aeb      	ldrb	r3, [r5, #11]
    f130:	ee07 2a90 	vmov	s15, r2
    f134:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f138:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f13c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f140:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f144:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f148:	eeb0 0a48 	vmov.f32	s0, s16
    f14c:	e9c2 6700 	strd	r6, r7, [r2]
    f150:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f154:	f01b fdd4 	bl	2ad00 <roundf>
    f158:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f15c:	44a0      	add	r8, r4
    f15e:	ee17 2a90 	vmov	r2, s15
    f162:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f166:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f16a:	7b2b      	ldrb	r3, [r5, #12]
    f16c:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f170:	ee07 2a90 	vmov	s15, r2
    f174:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f178:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f17c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f180:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f184:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    f188:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f18c:	eeb0 0a48 	vmov.f32	s0, s16
    f190:	edc0 7a91 	vstr	s15, [r0, #580]	; 0x244
    f194:	e9c2 6700 	strd	r6, r7, [r2]
    f198:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f19c:	f01b fdb0 	bl	2ad00 <roundf>
    f1a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f1a4:	eb04 0308 	add.w	r3, r4, r8
    f1a8:	ee17 2a90 	vmov	r2, s15
    f1ac:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f1b0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f1b8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f1bc:	e6fa      	b.n	efb4 <bsec_ChannelHub_do+0x180>
    f1be:	edd4 7a8f 	vldr	s15, [r4, #572]	; 0x23c
    f1c2:	edd4 1a90 	vldr	s3, [r4, #576]	; 0x240
    f1c6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f1ca:	f89d 1012 	ldrb.w	r1, [sp, #18]
    f1ce:	ed9d 1a07 	vldr	s2, [sp, #28]
    f1d2:	eddd 0a06 	vldr	s1, [sp, #24]
    f1d6:	ed9d 0a05 	vldr	s0, [sp, #20]
    f1da:	eef5 7a40 	vcmp.f32	s15, #0.0
    f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1e2:	f10d 0c20 	add.w	ip, sp, #32
    f1e6:	a814      	add	r0, sp, #80	; 0x50
    f1e8:	bf14      	ite	ne
    f1ea:	2301      	movne	r3, #1
    f1ec:	2300      	moveq	r3, #0
    f1ee:	e9cd 0c00 	strd	r0, ip, [sp]
    f1f2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    f1f6:	f001 f8cd 	bl	10394 <bsec_GasHumidityBaselineTracker_doStep>
    f1fa:	7c6b      	ldrb	r3, [r5, #17]
    f1fc:	9808      	ldr	r0, [sp, #32]
    f1fe:	ed9f 0a9b 	vldr	s0, [pc, #620]	; f46c <bsec_ChannelHub_do+0x638>
    f202:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f206:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f20a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f20e:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f212:	e9c2 6700 	strd	r6, r7, [r2]
    f216:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f21a:	f01b fd71 	bl	2ad00 <roundf>
    f21e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f222:	eb04 0308 	add.w	r3, r4, r8
    f226:	ee17 2a90 	vmov	r2, s15
    f22a:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f22e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f236:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f23a:	e647      	b.n	eecc <bsec_ChannelHub_do+0x98>
    f23c:	a912      	add	r1, sp, #72	; 0x48
    f23e:	aa10      	add	r2, sp, #64	; 0x40
    f240:	ab0e      	add	r3, sp, #56	; 0x38
    f242:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
    f246:	ed9d 0a08 	vldr	s0, [sp, #32]
    f24a:	9300      	str	r3, [sp, #0]
    f24c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    f250:	ab0c      	add	r3, sp, #48	; 0x30
    f252:	aa0a      	add	r2, sp, #40	; 0x28
    f254:	a914      	add	r1, sp, #80	; 0x50
    f256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f25a:	f001 ff87 	bl	1116c <bsec_IaqEstimator_doStep>
    f25e:	782b      	ldrb	r3, [r5, #0]
    f260:	980a      	ldr	r0, [sp, #40]	; 0x28
    f262:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
    f266:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f26a:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f26e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f272:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f276:	e9c2 6700 	strd	r6, r7, [r2]
    f27a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f27e:	f01b fd3f 	bl	2ad00 <roundf>
    f282:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f286:	44a0      	add	r8, r4
    f288:	ee17 2a90 	vmov	r2, s15
    f28c:	786b      	ldrb	r3, [r5, #1]
    f28e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f292:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f296:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    f29a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
    f29e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2a2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2a6:	f041 0101 	orr.w	r1, r1, #1
    f2aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ae:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2b2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2b6:	e9c2 6700 	strd	r6, r7, [r2]
    f2ba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2be:	f01b fd1f 	bl	2ad00 <roundf>
    f2c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f2c6:	44a0      	add	r8, r4
    f2c8:	ee17 2a90 	vmov	r2, s15
    f2cc:	78ab      	ldrb	r3, [r5, #2]
    f2ce:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f2d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f2d6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    f2da:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
    f2de:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2e2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2e6:	f041 0102 	orr.w	r1, r1, #2
    f2ea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ee:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2f2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2f6:	e9c2 6700 	strd	r6, r7, [r2]
    f2fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2fe:	f01b fcff 	bl	2ad00 <roundf>
    f302:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f306:	44a0      	add	r8, r4
    f308:	ee17 2a90 	vmov	r2, s15
    f30c:	78eb      	ldrb	r3, [r5, #3]
    f30e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f312:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f316:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f31a:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
    f31e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f322:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f326:	f041 0104 	orr.w	r1, r1, #4
    f32a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f32e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f332:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f336:	e9c2 6700 	strd	r6, r7, [r2]
    f33a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f33e:	f01b fcdf 	bl	2ad00 <roundf>
    f342:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f346:	44a0      	add	r8, r4
    f348:	ee17 2a90 	vmov	r2, s15
    f34c:	7d2b      	ldrb	r3, [r5, #20]
    f34e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f352:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f356:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    f35a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    f35e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f362:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f366:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f36a:	f041 0108 	orr.w	r1, r1, #8
    f36e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f372:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f376:	e9c2 6700 	strd	r6, r7, [r2]
    f37a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f37e:	f01b fcbf 	bl	2ad00 <roundf>
    f382:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f386:	eb04 0308 	add.w	r3, r4, r8
    f38a:	ee17 2a90 	vmov	r2, s15
    f38e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f392:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f39a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f39e:	e5a2      	b.n	eee6 <bsec_ChannelHub_do+0xb2>
    f3a0:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
    f3a8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    f3ac:	edd4 0a8e 	vldr	s1, [r4, #568]	; 0x238
    f3b0:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f3b4:	9302      	str	r3, [sp, #8]
    f3b6:	4632      	mov	r2, r6
    f3b8:	463b      	mov	r3, r7
    f3ba:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f3be:	e9cd 8900 	strd	r8, r9, [sp]
    f3c2:	f7fd fb37 	bl	ca34 <bsec_SensorHeatCompensator_doStep>
    f3c6:	7b6b      	ldrb	r3, [r5, #13]
    f3c8:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f3cc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f3d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f3d4:	eeb0 8a40 	vmov.f32	s16, s0
    f3d8:	ed81 8a91 	vstr	s16, [r1, #580]	; 0x244
    f3dc:	ed9f 0a23 	vldr	s0, [pc, #140]	; f46c <bsec_ChannelHub_do+0x638>
    f3e0:	e9c2 8900 	strd	r8, r9, [r2]
    f3e4:	1e5e      	subs	r6, r3, #1
    f3e6:	f01b fc8b 	bl	2ad00 <roundf>
    f3ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f3ee:	19a3      	adds	r3, r4, r6
    f3f0:	ee17 2a90 	vmov	r2, s15
    f3f4:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f3f8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f3fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f400:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f404:	e57e      	b.n	ef04 <bsec_ChannelHub_do+0xd0>
    f406:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f40a:	eef0 0a48 	vmov.f32	s1, s16
    f40e:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    f412:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f416:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    f41a:	e9d3 6700 	ldrd	r6, r7, [r3]
    f41e:	f001 fd5f 	bl	10ee0 <bsec_HumidityTemperatureCorrector_doStep>
    f422:	7bab      	ldrb	r3, [r5, #14]
    f424:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f428:	eef0 7a40 	vmov.f32	s15, s0
    f42c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f430:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f434:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f438:	ed9f 0a0c 	vldr	s0, [pc, #48]	; f46c <bsec_ChannelHub_do+0x638>
    f43c:	edcd 7a05 	vstr	s15, [sp, #20]
    f440:	e9c2 6700 	strd	r6, r7, [r2]
    f444:	1e5e      	subs	r6, r3, #1
    f446:	f01b fc5b 	bl	2ad00 <roundf>
    f44a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f44e:	19a3      	adds	r3, r4, r6
    f450:	ee17 2a90 	vmov	r2, s15
    f454:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f458:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f45c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f460:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f464:	e55b      	b.n	ef1e <bsec_ChannelHub_do+0xea>
    f466:	bf00      	nop
    f468:	00035178 	.word	0x00035178
    f46c:	00000000 	.word	0x00000000

0000f470 <bsec_ChannelHub_getChannelConfiguration>:
    f470:	b5f0      	push	{r4, r5, r6, r7, lr}
    f472:	b085      	sub	sp, #20
    f474:	2400      	movs	r4, #0
    f476:	3901      	subs	r1, #1
    f478:	461f      	mov	r7, r3
    f47a:	4606      	mov	r6, r0
    f47c:	4615      	mov	r5, r2
    f47e:	9403      	str	r4, [sp, #12]
    f480:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f484:	2909      	cmp	r1, #9
    f486:	d85c      	bhi.n	f542 <bsec_ChannelHub_getChannelConfiguration+0xd2>
    f488:	e8df f001 	tbb	[pc, r1]
    f48c:	5b1a130c 	.word	0x5b1a130c
    f490:	5b5b5b53 	.word	0x5b5b5b53
    f494:	4b05      	.short	0x4b05
    f496:	463a      	mov	r2, r7
    f498:	4629      	mov	r1, r5
    f49a:	30c8      	adds	r0, #200	; 0xc8
    f49c:	f7fd fb4e 	bl	cb3c <bsec_SensorHeatCompensator_getConfiguration>
    f4a0:	b005      	add	sp, #20
    f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4a4:	463a      	mov	r2, r7
    f4a6:	4629      	mov	r1, r5
    f4a8:	3068      	adds	r0, #104	; 0x68
    f4aa:	f001 f9bf 	bl	1082c <bsec_GasHumidityBaselineTracker_getConfiguration>
    f4ae:	b005      	add	sp, #20
    f4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4b2:	463a      	mov	r2, r7
    f4b4:	4629      	mov	r1, r5
    f4b6:	302c      	adds	r0, #44	; 0x2c
    f4b8:	f001 ff3e 	bl	11338 <bsec_IaqEstimator_getConfiguration>
    f4bc:	b005      	add	sp, #20
    f4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4c0:	aa04      	add	r2, sp, #16
    f4c2:	2401      	movs	r4, #1
    f4c4:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f4c8:	4629      	mov	r1, r5
    f4ca:	7800      	ldrb	r0, [r0, #0]
    f4cc:	f002 fade 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4d4:	9003      	str	r0, [sp, #12]
    f4d6:	b1a3      	cbz	r3, f502 <bsec_ChannelHub_getChannelConfiguration+0x92>
    f4d8:	3620      	adds	r6, #32
    f4da:	e003      	b.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f4dc:	3401      	adds	r4, #1
    f4de:	b2e4      	uxtb	r4, r4
    f4e0:	42a3      	cmp	r3, r4
    f4e2:	d30d      	bcc.n	f500 <bsec_ChannelHub_getChannelConfiguration+0x90>
    f4e4:	2c01      	cmp	r4, #1
    f4e6:	d1f9      	bne.n	f4dc <bsec_ChannelHub_getChannelConfiguration+0x6c>
    f4e8:	ab03      	add	r3, sp, #12
    f4ea:	463a      	mov	r2, r7
    f4ec:	4629      	mov	r1, r5
    f4ee:	4630      	mov	r0, r6
    f4f0:	f000 fa8e 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f4f4:	3401      	adds	r4, #1
    f4f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4fa:	b2e4      	uxtb	r4, r4
    f4fc:	42a3      	cmp	r3, r4
    f4fe:	d2f1      	bcs.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f500:	9803      	ldr	r0, [sp, #12]
    f502:	a904      	add	r1, sp, #16
    f504:	2202      	movs	r2, #2
    f506:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f50a:	a802      	add	r0, sp, #8
    f50c:	f024 f958 	bl	337c0 <memcpy>
    f510:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f514:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f518:	9803      	ldr	r0, [sp, #12]
    f51a:	702a      	strb	r2, [r5, #0]
    f51c:	706b      	strb	r3, [r5, #1]
    f51e:	b005      	add	sp, #20
    f520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f522:	463a      	mov	r2, r7
    f524:	4629      	mov	r1, r5
    f526:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f52a:	f001 fd23 	bl	10f74 <bsec_HumidityTemperatureCorrector_getConfiguration>
    f52e:	b005      	add	sp, #20
    f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f532:	463a      	mov	r2, r7
    f534:	4629      	mov	r1, r5
    f536:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f53a:	f002 f93f 	bl	117bc <bsec_SensorStatusTracker_getConfiguration>
    f53e:	b005      	add	sp, #20
    f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f542:	2000      	movs	r0, #0
    f544:	e7ac      	b.n	f4a0 <bsec_ChannelHub_getChannelConfiguration+0x30>
    f546:	bf00      	nop

0000f548 <bsec_ChannelHub_getChannelState>:
    f548:	b5f0      	push	{r4, r5, r6, r7, lr}
    f54a:	b085      	sub	sp, #20
    f54c:	2400      	movs	r4, #0
    f54e:	3901      	subs	r1, #1
    f550:	461f      	mov	r7, r3
    f552:	4606      	mov	r6, r0
    f554:	4615      	mov	r5, r2
    f556:	9403      	str	r4, [sp, #12]
    f558:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f55c:	2909      	cmp	r1, #9
    f55e:	d85c      	bhi.n	f61a <bsec_ChannelHub_getChannelState+0xd2>
    f560:	e8df f001 	tbb	[pc, r1]
    f564:	5b1a130c 	.word	0x5b1a130c
    f568:	5b5b5b53 	.word	0x5b5b5b53
    f56c:	4b05      	.short	0x4b05
    f56e:	463a      	mov	r2, r7
    f570:	4629      	mov	r1, r5
    f572:	30c8      	adds	r0, #200	; 0xc8
    f574:	f7fd fb46 	bl	cc04 <bsec_SensorHeatCompensator_getState>
    f578:	b005      	add	sp, #20
    f57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f57c:	463a      	mov	r2, r7
    f57e:	4629      	mov	r1, r5
    f580:	3068      	adds	r0, #104	; 0x68
    f582:	f001 f9cd 	bl	10920 <bsec_GasHumidityBaselineTracker_getState>
    f586:	b005      	add	sp, #20
    f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58a:	463a      	mov	r2, r7
    f58c:	4629      	mov	r1, r5
    f58e:	302c      	adds	r0, #44	; 0x2c
    f590:	f001 ff50 	bl	11434 <bsec_IaqEstimator_getState>
    f594:	b005      	add	sp, #20
    f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f598:	aa04      	add	r2, sp, #16
    f59a:	2401      	movs	r4, #1
    f59c:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f5a0:	4629      	mov	r1, r5
    f5a2:	7800      	ldrb	r0, [r0, #0]
    f5a4:	f002 fa72 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5ac:	9003      	str	r0, [sp, #12]
    f5ae:	b1a3      	cbz	r3, f5da <bsec_ChannelHub_getChannelState+0x92>
    f5b0:	3610      	adds	r6, #16
    f5b2:	e003      	b.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5b4:	3401      	adds	r4, #1
    f5b6:	b2e4      	uxtb	r4, r4
    f5b8:	42a3      	cmp	r3, r4
    f5ba:	d30d      	bcc.n	f5d8 <bsec_ChannelHub_getChannelState+0x90>
    f5bc:	2c01      	cmp	r4, #1
    f5be:	d1f9      	bne.n	f5b4 <bsec_ChannelHub_getChannelState+0x6c>
    f5c0:	ab03      	add	r3, sp, #12
    f5c2:	463a      	mov	r2, r7
    f5c4:	4629      	mov	r1, r5
    f5c6:	4630      	mov	r0, r6
    f5c8:	f000 fa22 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f5cc:	3401      	adds	r4, #1
    f5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5d2:	b2e4      	uxtb	r4, r4
    f5d4:	42a3      	cmp	r3, r4
    f5d6:	d2f1      	bcs.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5d8:	9803      	ldr	r0, [sp, #12]
    f5da:	a904      	add	r1, sp, #16
    f5dc:	2202      	movs	r2, #2
    f5de:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f5e2:	a802      	add	r0, sp, #8
    f5e4:	f024 f8ec 	bl	337c0 <memcpy>
    f5e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f5ec:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f5f0:	9803      	ldr	r0, [sp, #12]
    f5f2:	702a      	strb	r2, [r5, #0]
    f5f4:	706b      	strb	r3, [r5, #1]
    f5f6:	b005      	add	sp, #20
    f5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5fa:	463a      	mov	r2, r7
    f5fc:	4629      	mov	r1, r5
    f5fe:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f602:	f001 fced 	bl	10fe0 <bsec_HumidityTemperatureCorrector_getState>
    f606:	b005      	add	sp, #20
    f608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f60a:	463a      	mov	r2, r7
    f60c:	4629      	mov	r1, r5
    f60e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f612:	f002 f915 	bl	11840 <bsec_SensorStatusTracker_getState>
    f616:	b005      	add	sp, #20
    f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f61a:	2000      	movs	r0, #0
    f61c:	e7ac      	b.n	f578 <bsec_ChannelHub_getChannelState+0x30>
    f61e:	bf00      	nop

0000f620 <bsec_ChannelHub_getOutput>:
    f620:	b4f0      	push	{r4, r5, r6, r7}
    f622:	3901      	subs	r1, #1
    f624:	4c0f      	ldr	r4, [pc, #60]	; (f664 <bsec_ChannelHub_getOutput+0x44>)
    f626:	9d04      	ldr	r5, [sp, #16]
    f628:	5c64      	ldrb	r4, [r4, r1]
    f62a:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    f62e:	f104 0636 	add.w	r6, r4, #54	; 0x36
    f632:	f8d7 7244 	ldr.w	r7, [r7, #580]	; 0x244
    f636:	6017      	str	r7, [r2, #0]
    f638:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    f63c:	e9d6 6700 	ldrd	r6, r7, [r6]
    f640:	e9c3 6700 	strd	r6, r7, [r3]
    f644:	4404      	add	r4, r0
    f646:	2201      	movs	r2, #1
    f648:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
    f64c:	702b      	strb	r3, [r5, #0]
    f64e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
    f652:	fa02 f101 	lsl.w	r1, r2, r1
    f656:	ea23 0301 	bic.w	r3, r3, r1
    f65a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
    f65e:	bcf0      	pop	{r4, r5, r6, r7}
    f660:	4770      	bx	lr
    f662:	bf00      	nop
    f664:	00035178 	.word	0x00035178

0000f668 <bsec_ChannelHub_isOutputValid>:
    f668:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
    f66c:	3901      	subs	r1, #1
    f66e:	b2c9      	uxtb	r1, r1
    f670:	4108      	asrs	r0, r1
    f672:	f000 0001 	and.w	r0, r0, #1
    f676:	4770      	bx	lr

0000f678 <bsec_ChannelHub_recalculateDownsampling>:
    f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f67c:	4932      	ldr	r1, [pc, #200]	; (f748 <bsec_ChannelHub_recalculateDownsampling+0xd0>)
    f67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; f754 <bsec_ChannelHub_recalculateDownsampling+0xdc>
    f682:	4a32      	ldr	r2, [pc, #200]	; (f74c <bsec_ChannelHub_recalculateDownsampling+0xd4>)
    f684:	f8df 90d0 	ldr.w	r9, [pc, #208]	; f758 <bsec_ChannelHub_recalculateDownsampling+0xe0>
    f688:	2500      	movs	r5, #0
    f68a:	f240 3717 	movw	r7, #791	; 0x317
    f68e:	f64f 7cff 	movw	ip, #65535	; 0xffff
    f692:	fa47 f305 	asr.w	r3, r7, r5
    f696:	07de      	lsls	r6, r3, #31
    f698:	d54e      	bpl.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f69a:	4b2d      	ldr	r3, [pc, #180]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f69c:	f813 e005 	ldrb.w	lr, [r3, r5]
    f6a0:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
    f6a4:	f8be 829a 	ldrh.w	r8, [lr, #666]	; 0x29a
    f6a8:	45e0      	cmp	r8, ip
    f6aa:	d045      	beq.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f6ac:	2300      	movs	r3, #0
    f6ae:	461e      	mov	r6, r3
    f6b0:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    f6b4:	fa47 f403 	asr.w	r4, r7, r3
    f6b8:	07e4      	lsls	r4, r4, #31
    f6ba:	d50f      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6bc:	f93b 400a 	ldrsh.w	r4, [fp, sl]
    f6c0:	411c      	asrs	r4, r3
    f6c2:	07e4      	lsls	r4, r4, #31
    f6c4:	d50a      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6c6:	4c22      	ldr	r4, [pc, #136]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f6c8:	5ce4      	ldrb	r4, [r4, r3]
    f6ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f6ce:	f8b4 429a 	ldrh.w	r4, [r4, #666]	; 0x29a
    f6d2:	4564      	cmp	r4, ip
    f6d4:	d002      	beq.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6d6:	42a6      	cmp	r6, r4
    f6d8:	bf38      	it	cc
    f6da:	4626      	movcc	r6, r4
    f6dc:	3301      	adds	r3, #1
    f6de:	2b0a      	cmp	r3, #10
    f6e0:	d1e8      	bne.n	f6b4 <bsec_ChannelHub_recalculateDownsampling+0x3c>
    f6e2:	2300      	movs	r3, #0
    f6e4:	fa42 f403 	asr.w	r4, r2, r3
    f6e8:	07e4      	lsls	r4, r4, #31
    f6ea:	d50f      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6ec:	f991 4000 	ldrsb.w	r4, [r1]
    f6f0:	411c      	asrs	r4, r3
    f6f2:	07e4      	lsls	r4, r4, #31
    f6f4:	d50a      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6f6:	f813 4009 	ldrb.w	r4, [r3, r9]
    f6fa:	f204 1453 	addw	r4, r4, #339	; 0x153
    f6fe:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    f702:	4564      	cmp	r4, ip
    f704:	d002      	beq.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f706:	42a6      	cmp	r6, r4
    f708:	bf38      	it	cc
    f70a:	4626      	movcc	r6, r4
    f70c:	3301      	adds	r3, #1
    f70e:	2b18      	cmp	r3, #24
    f710:	d1e8      	bne.n	f6e4 <bsec_ChannelHub_recalculateDownsampling+0x6c>
    f712:	b18e      	cbz	r6, f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f714:	fbb8 f4f6 	udiv	r4, r8, r6
    f718:	fb06 8814 	mls	r8, r6, r4, r8
    f71c:	fa1f f388 	uxth.w	r3, r8
    f720:	b2a4      	uxth	r4, r4
    f722:	b13b      	cbz	r3, f734 <bsec_ChannelHub_recalculateDownsampling+0xbc>
    f724:	f006 0801 	and.w	r8, r6, #1
    f728:	eb08 0656 	add.w	r6, r8, r6, lsr #1
    f72c:	42b3      	cmp	r3, r6
    f72e:	bfa4      	itt	ge
    f730:	3401      	addge	r4, #1
    f732:	b2a4      	uxthge	r4, r4
    f734:	f8ae 42d2 	strh.w	r4, [lr, #722]	; 0x2d2
    f738:	3501      	adds	r5, #1
    f73a:	2d0a      	cmp	r5, #10
    f73c:	f101 0101 	add.w	r1, r1, #1
    f740:	d1a7      	bne.n	f692 <bsec_ChannelHub_recalculateDownsampling+0x1a>
    f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f746:	bf00      	nop
    f748:	000350e0 	.word	0x000350e0
    f74c:	00e0200f 	.word	0x00e0200f
    f750:	000350ec 	.word	0x000350ec
    f754:	000350cc 	.word	0x000350cc
    f758:	00035190 	.word	0x00035190

0000f75c <bsec_ChannelHub_resetSamplIntvls>:
    f75c:	b430      	push	{r4, r5}
    f75e:	f500 7327 	add.w	r3, r0, #668	; 0x29c
    f762:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
    f766:	2401      	movs	r4, #1
    f768:	2100      	movs	r1, #0
    f76a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f76e:	871c      	strh	r4, [r3, #56]	; 0x38
    f770:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    f774:	f823 2b02 	strh.w	r2, [r3], #2
    f778:	429d      	cmp	r5, r3
    f77a:	d1f8      	bne.n	f76e <bsec_ChannelHub_resetSamplIntvls+0x12>
    f77c:	f8a0 22a8 	strh.w	r2, [r0, #680]	; 0x2a8
    f780:	f8a0 22aa 	strh.w	r2, [r0, #682]	; 0x2aa
    f784:	f8a0 22ac 	strh.w	r2, [r0, #684]	; 0x2ac
    f788:	f8a0 22ae 	strh.w	r2, [r0, #686]	; 0x2ae
    f78c:	f8a0 22b0 	strh.w	r2, [r0, #688]	; 0x2b0
    f790:	f8a0 22b2 	strh.w	r2, [r0, #690]	; 0x2b2
    f794:	f8a0 22b4 	strh.w	r2, [r0, #692]	; 0x2b4
    f798:	f8a0 22b6 	strh.w	r2, [r0, #694]	; 0x2b6
    f79c:	f200 23b6 	addw	r3, r0, #694	; 0x2b6
    f7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7a4:	f200 20d2 	addw	r0, r0, #722	; 0x2d2
    f7a8:	f823 2f02 	strh.w	r2, [r3, #2]!
    f7ac:	4283      	cmp	r3, r0
    f7ae:	d1fb      	bne.n	f7a8 <bsec_ChannelHub_resetSamplIntvls+0x4c>
    f7b0:	bc30      	pop	{r4, r5}
    f7b2:	4770      	bx	lr

0000f7b4 <bsec_ChannelHub_setChannelState>:
    f7b4:	b410      	push	{r4}
    f7b6:	1e4c      	subs	r4, r1, #1
    f7b8:	4611      	mov	r1, r2
    f7ba:	2c09      	cmp	r4, #9
    f7bc:	d82b      	bhi.n	f816 <bsec_ChannelHub_setChannelState+0x62>
    f7be:	e8df f004 	tbb	[pc, r4]
    f7c2:	110b      	.short	0x110b
    f7c4:	2a232a17 	.word	0x2a232a17
    f7c8:	1c052a2a 	.word	0x1c052a2a
    f7cc:	461a      	mov	r2, r3
    f7ce:	30c8      	adds	r0, #200	; 0xc8
    f7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7d4:	f7fd ba50 	b.w	cc78 <bsec_SensorHeatCompensator_setState>
    f7d8:	461a      	mov	r2, r3
    f7da:	3068      	adds	r0, #104	; 0x68
    f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7e0:	f001 ba0c 	b.w	10bfc <bsec_b_GasHumidityBaselineTracker_setState>
    f7e4:	461a      	mov	r2, r3
    f7e6:	302c      	adds	r0, #44	; 0x2c
    f7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7ec:	f001 be64 	b.w	114b8 <bsec_IaqEstimator_setState>
    f7f0:	461a      	mov	r2, r3
    f7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7f6:	f001 baff 	b.w	10df8 <bsec_GasHumidityPreProcessor_setState>
    f7fa:	461a      	mov	r2, r3
    f7fc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f800:	f85d 4b04 	ldr.w	r4, [sp], #4
    f804:	f001 bc22 	b.w	1104c <bsec_HumidityTemperatureCorrector_setState>
    f808:	461a      	mov	r2, r3
    f80a:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f80e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f812:	f002 b877 	b.w	11904 <bsec_SensorStatusTracker_setState>
    f816:	f06f 0063 	mvn.w	r0, #99	; 0x63
    f81a:	f85d 4b04 	ldr.w	r4, [sp], #4
    f81e:	4770      	bx	lr

0000f820 <bsec_ChannelHub_setInput>:
    f820:	b4f0      	push	{r4, r5, r6, r7}
    f822:	3901      	subs	r1, #1
    f824:	4c0d      	ldr	r4, [pc, #52]	; (f85c <bsec_ChannelHub_setInput+0x3c>)
    f826:	5c65      	ldrb	r5, [r4, r1]
    f828:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
    f82c:	f504 74b8 	add.w	r4, r4, #368	; 0x170
    f830:	e9d4 6700 	ldrd	r6, r7, [r4]
    f834:	429f      	cmp	r7, r3
    f836:	bf08      	it	eq
    f838:	4296      	cmpeq	r6, r2
    f83a:	d00d      	beq.n	f858 <bsec_ChannelHub_setInput+0x38>
    f83c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    f840:	ed85 0a89 	vstr	s0, [r5, #548]	; 0x224
    f844:	e9c4 2300 	strd	r2, r3, [r4]
    f848:	2201      	movs	r2, #1
    f84a:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
    f84e:	fa02 f101 	lsl.w	r1, r2, r1
    f852:	430b      	orrs	r3, r1
    f854:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
    f858:	bcf0      	pop	{r4, r5, r6, r7}
    f85a:	4770      	bx	lr
    f85c:	00035190 	.word	0x00035190

0000f860 <bsec_ChannelHub_updateChannelInterfaceDependency>:
    f860:	1e4b      	subs	r3, r1, #1
    f862:	b2da      	uxtb	r2, r3
    f864:	2a09      	cmp	r2, #9
    f866:	d900      	bls.n	f86a <bsec_ChannelHub_updateChannelInterfaceDependency+0xa>
    f868:	4770      	bx	lr
    f86a:	4a18      	ldr	r2, [pc, #96]	; (f8cc <bsec_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f86c:	4411      	add	r1, r2
    f86e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f872:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f876:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f87a:	2b09      	cmp	r3, #9
    f87c:	d8f4      	bhi.n	f868 <bsec_ChannelHub_updateChannelInterfaceDependency+0x8>
    f87e:	a201      	add	r2, pc, #4	; (adr r2, f884 <bsec_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f884:	0000f8b5 	.word	0x0000f8b5
    f888:	0000f8bb 	.word	0x0000f8bb
    f88c:	0000f8c1 	.word	0x0000f8c1
    f890:	0000f869 	.word	0x0000f869
    f894:	0000f8ad 	.word	0x0000f8ad
    f898:	0000f869 	.word	0x0000f869
    f89c:	0000f869 	.word	0x0000f869
    f8a0:	0000f869 	.word	0x0000f869
    f8a4:	0000f869 	.word	0x0000f869
    f8a8:	0000f8c5 	.word	0x0000f8c5
    f8ac:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f8b0:	f002 b866 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f8b4:	3068      	adds	r0, #104	; 0x68
    f8b6:	f001 b915 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f8ba:	302c      	adds	r0, #44	; 0x2c
    f8bc:	f001 be1c 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f8c0:	f001 baba 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f8c4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f8c8:	f001 bbda 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f8cc:	000350ec 	.word	0x000350ec

0000f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>:
    f8d0:	3901      	subs	r1, #1
    f8d2:	4b1f      	ldr	r3, [pc, #124]	; (f950 <bsec_ChannelHub_updateOutputSamplIntvl+0x80>)
    f8d4:	5c5b      	ldrb	r3, [r3, r1]
    f8d6:	f203 135b 	addw	r3, r3, #347	; 0x15b
    f8da:	b4f0      	push	{r4, r5, r6, r7}
    f8dc:	4e1d      	ldr	r6, [pc, #116]	; (f954 <bsec_ChannelHub_updateOutputSamplIntvl+0x84>)
    f8de:	4f1e      	ldr	r7, [pc, #120]	; (f958 <bsec_ChannelHub_updateOutputSamplIntvl+0x88>)
    f8e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    f8e4:	f240 3517 	movw	r5, #791	; 0x317
    f8e8:	2300      	movs	r3, #0
    f8ea:	fa45 f403 	asr.w	r4, r5, r3
    f8ee:	07e4      	lsls	r4, r4, #31
    f8f0:	d50d      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8f2:	f936 4011 	ldrsh.w	r4, [r6, r1, lsl #1]
    f8f6:	411c      	asrs	r4, r3
    f8f8:	07e4      	lsls	r4, r4, #31
    f8fa:	d508      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8fc:	5cfc      	ldrb	r4, [r7, r3]
    f8fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f902:	f8b4 c29a 	ldrh.w	ip, [r4, #666]	; 0x29a
    f906:	4594      	cmp	ip, r2
    f908:	bf88      	it	hi
    f90a:	f8a4 229a 	strhhi.w	r2, [r4, #666]	; 0x29a
    f90e:	3301      	adds	r3, #1
    f910:	2b0a      	cmp	r3, #10
    f912:	d1ea      	bne.n	f8ea <bsec_ChannelHub_updateOutputSamplIntvl+0x1a>
    f914:	4d11      	ldr	r5, [pc, #68]	; (f95c <bsec_ChannelHub_updateOutputSamplIntvl+0x8c>)
    f916:	4e12      	ldr	r6, [pc, #72]	; (f960 <bsec_ChannelHub_updateOutputSamplIntvl+0x90>)
    f918:	f8df c048 	ldr.w	ip, [pc, #72]	; f964 <bsec_ChannelHub_updateOutputSamplIntvl+0x94>
    f91c:	2300      	movs	r3, #0
    f91e:	fa45 f403 	asr.w	r4, r5, r3
    f922:	07e7      	lsls	r7, r4, #31
    f924:	d50e      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f926:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
    f92a:	411c      	asrs	r4, r3
    f92c:	07e4      	lsls	r4, r4, #31
    f92e:	d509      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f930:	f81c 4003 	ldrb.w	r4, [ip, r3]
    f934:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f938:	f8b4 72a6 	ldrh.w	r7, [r4, #678]	; 0x2a6
    f93c:	4297      	cmp	r7, r2
    f93e:	bf88      	it	hi
    f940:	f8a4 22a6 	strhhi.w	r2, [r4, #678]	; 0x2a6
    f944:	3301      	adds	r3, #1
    f946:	2b18      	cmp	r3, #24
    f948:	d1e9      	bne.n	f91e <bsec_ChannelHub_updateOutputSamplIntvl+0x4e>
    f94a:	bcf0      	pop	{r4, r5, r6, r7}
    f94c:	4770      	bx	lr
    f94e:	bf00      	nop
    f950:	00035178 	.word	0x00035178
    f954:	000350f8 	.word	0x000350f8
    f958:	000350ec 	.word	0x000350ec
    f95c:	00e0200f 	.word	0x00e0200f
    f960:	00035124 	.word	0x00035124
    f964:	00035190 	.word	0x00035190

0000f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>:
    f968:	1e4b      	subs	r3, r1, #1
    f96a:	b2da      	uxtb	r2, r3
    f96c:	2a09      	cmp	r2, #9
    f96e:	d900      	bls.n	f972 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0xa>
    f970:	4770      	bx	lr
    f972:	4a18      	ldr	r2, [pc, #96]	; (f9d4 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f974:	4411      	add	r1, r2
    f976:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f97a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f97e:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f982:	2b09      	cmp	r3, #9
    f984:	d8f4      	bhi.n	f970 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x8>
    f986:	a201      	add	r2, pc, #4	; (adr r2, f98c <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f98c:	0000f9bd 	.word	0x0000f9bd
    f990:	0000f9c3 	.word	0x0000f9c3
    f994:	0000f9c9 	.word	0x0000f9c9
    f998:	0000f971 	.word	0x0000f971
    f99c:	0000f9b5 	.word	0x0000f9b5
    f9a0:	0000f971 	.word	0x0000f971
    f9a4:	0000f971 	.word	0x0000f971
    f9a8:	0000f971 	.word	0x0000f971
    f9ac:	0000f971 	.word	0x0000f971
    f9b0:	0000f9cd 	.word	0x0000f9cd
    f9b4:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f9b8:	f001 bfe2 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f9bc:	3068      	adds	r0, #104	; 0x68
    f9be:	f001 b891 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f9c2:	302c      	adds	r0, #44	; 0x2c
    f9c4:	f001 bd98 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f9c8:	f001 ba36 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f9cc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f9d0:	f001 bb56 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f9d4:	000350ec 	.word	0x000350ec

0000f9d8 <bsec_Entity_parseAndDeserialize>:
    f9d8:	b570      	push	{r4, r5, r6, lr}
    f9da:	460e      	mov	r6, r1
    f9dc:	6809      	ldr	r1, [r1, #0]
    f9de:	4603      	mov	r3, r0
    f9e0:	f100 050b 	add.w	r5, r0, #11
    f9e4:	b084      	sub	sp, #16
    f9e6:	1e48      	subs	r0, r1, #1
    f9e8:	440d      	add	r5, r1
    f9ea:	4403      	add	r3, r0
    f9ec:	a901      	add	r1, sp, #4
    f9ee:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    f9f2:	f801 4b01 	strb.w	r4, [r1], #1
    f9f6:	42ab      	cmp	r3, r5
    f9f8:	d1f9      	bne.n	f9ee <bsec_Entity_parseAndDeserialize+0x16>
    f9fa:	a901      	add	r1, sp, #4
    f9fc:	4610      	mov	r0, r2
    f9fe:	220c      	movs	r2, #12
    fa00:	f023 fede 	bl	337c0 <memcpy>
    fa04:	6833      	ldr	r3, [r6, #0]
    fa06:	330c      	adds	r3, #12
    fa08:	6033      	str	r3, [r6, #0]
    fa0a:	b004      	add	sp, #16
    fa0c:	bd70      	pop	{r4, r5, r6, pc}
    fa0e:	bf00      	nop

0000fa10 <bsec_Entity_serializeAndAdd>:
    fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa14:	681c      	ldr	r4, [r3, #0]
    fa16:	340c      	adds	r4, #12
    fa18:	4294      	cmp	r4, r2
    fa1a:	b084      	sub	sp, #16
    fa1c:	d904      	bls.n	fa28 <bsec_Entity_serializeAndAdd+0x18>
    fa1e:	3201      	adds	r2, #1
    fa20:	601a      	str	r2, [r3, #0]
    fa22:	b004      	add	sp, #16
    fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa28:	220c      	movs	r2, #12
    fa2a:	4688      	mov	r8, r1
    fa2c:	4601      	mov	r1, r0
    fa2e:	a801      	add	r0, sp, #4
    fa30:	461f      	mov	r7, r3
    fa32:	f023 fec5 	bl	337c0 <memcpy>
    fa36:	a801      	add	r0, sp, #4
    fa38:	2200      	movs	r2, #0
    fa3a:	eb08 0502 	add.w	r5, r8, r2
    fa3e:	683c      	ldr	r4, [r7, #0]
    fa40:	f810 6b01 	ldrb.w	r6, [r0], #1
    fa44:	552e      	strb	r6, [r5, r4]
    fa46:	3201      	adds	r2, #1
    fa48:	2a0c      	cmp	r2, #12
    fa4a:	d1f6      	bne.n	fa3a <bsec_Entity_serializeAndAdd+0x2a>
    fa4c:	683b      	ldr	r3, [r7, #0]
    fa4e:	330c      	adds	r3, #12
    fa50:	603b      	str	r3, [r7, #0]
    fa52:	b004      	add	sp, #16
    fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa58 <bsec_b_Entity_parseAndDeserialize>:
    fa58:	b530      	push	{r4, r5, lr}
    fa5a:	460d      	mov	r5, r1
    fa5c:	6809      	ldr	r1, [r1, #0]
    fa5e:	b083      	sub	sp, #12
    fa60:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fa64:	4408      	add	r0, r1
    fa66:	f10d 0407 	add.w	r4, sp, #7
    fa6a:	f810 1b01 	ldrb.w	r1, [r0], #1
    fa6e:	f803 1f01 	strb.w	r1, [r3, #1]!
    fa72:	42a3      	cmp	r3, r4
    fa74:	d1f9      	bne.n	fa6a <bsec_b_Entity_parseAndDeserialize+0x12>
    fa76:	4610      	mov	r0, r2
    fa78:	4669      	mov	r1, sp
    fa7a:	2208      	movs	r2, #8
    fa7c:	f023 fea0 	bl	337c0 <memcpy>
    fa80:	682b      	ldr	r3, [r5, #0]
    fa82:	3308      	adds	r3, #8
    fa84:	602b      	str	r3, [r5, #0]
    fa86:	b003      	add	sp, #12
    fa88:	bd30      	pop	{r4, r5, pc}
    fa8a:	bf00      	nop

0000fa8c <bsec_b_Entity_serializeAndAdd>:
    fa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa8e:	681d      	ldr	r5, [r3, #0]
    fa90:	3508      	adds	r5, #8
    fa92:	4295      	cmp	r5, r2
    fa94:	b085      	sub	sp, #20
    fa96:	d903      	bls.n	faa0 <bsec_b_Entity_serializeAndAdd+0x14>
    fa98:	3201      	adds	r2, #1
    fa9a:	601a      	str	r2, [r3, #0]
    fa9c:	b005      	add	sp, #20
    fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faa0:	2208      	movs	r2, #8
    faa2:	460f      	mov	r7, r1
    faa4:	4601      	mov	r1, r0
    faa6:	4668      	mov	r0, sp
    faa8:	461c      	mov	r4, r3
    faaa:	f023 fe89 	bl	337c0 <memcpy>
    faae:	2208      	movs	r2, #8
    fab0:	eb0d 0002 	add.w	r0, sp, r2
    fab4:	4669      	mov	r1, sp
    fab6:	f023 fe83 	bl	337c0 <memcpy>
    faba:	f10d 0307 	add.w	r3, sp, #7
    fabe:	2200      	movs	r2, #0
    fac0:	18bd      	adds	r5, r7, r2
    fac2:	6820      	ldr	r0, [r4, #0]
    fac4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    fac8:	542e      	strb	r6, [r5, r0]
    faca:	3201      	adds	r2, #1
    facc:	2a08      	cmp	r2, #8
    face:	d1f7      	bne.n	fac0 <bsec_b_Entity_serializeAndAdd+0x34>
    fad0:	6823      	ldr	r3, [r4, #0]
    fad2:	3308      	adds	r3, #8
    fad4:	6023      	str	r3, [r4, #0]
    fad6:	b005      	add	sp, #20
    fad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fada:	bf00      	nop

0000fadc <bsec_c_Entity_parseAndDeserialize>:
    fadc:	b510      	push	{r4, lr}
    fade:	680b      	ldr	r3, [r1, #0]
    fae0:	18c2      	adds	r2, r0, r3
    fae2:	b082      	sub	sp, #8
    fae4:	460c      	mov	r4, r1
    fae6:	7852      	ldrb	r2, [r2, #1]
    fae8:	5cc3      	ldrb	r3, [r0, r3]
    faea:	f88d 2005 	strb.w	r2, [sp, #5]
    faee:	a901      	add	r1, sp, #4
    faf0:	2202      	movs	r2, #2
    faf2:	f10d 0006 	add.w	r0, sp, #6
    faf6:	f88d 3004 	strb.w	r3, [sp, #4]
    fafa:	f023 fe61 	bl	337c0 <memcpy>
    fafe:	6823      	ldr	r3, [r4, #0]
    fb00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    fb04:	3302      	adds	r3, #2
    fb06:	6023      	str	r3, [r4, #0]
    fb08:	b002      	add	sp, #8
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <bsec_c_Entity_serializeAndAdd>:
    fb0c:	b530      	push	{r4, r5, lr}
    fb0e:	681c      	ldr	r4, [r3, #0]
    fb10:	b085      	sub	sp, #20
    fb12:	3402      	adds	r4, #2
    fb14:	4294      	cmp	r4, r2
    fb16:	f8ad 0006 	strh.w	r0, [sp, #6]
    fb1a:	d903      	bls.n	fb24 <bsec_c_Entity_serializeAndAdd+0x18>
    fb1c:	3201      	adds	r2, #1
    fb1e:	601a      	str	r2, [r3, #0]
    fb20:	b005      	add	sp, #20
    fb22:	bd30      	pop	{r4, r5, pc}
    fb24:	461c      	mov	r4, r3
    fb26:	460d      	mov	r5, r1
    fb28:	2202      	movs	r2, #2
    fb2a:	f10d 0106 	add.w	r1, sp, #6
    fb2e:	a803      	add	r0, sp, #12
    fb30:	f023 fe46 	bl	337c0 <memcpy>
    fb34:	6823      	ldr	r3, [r4, #0]
    fb36:	f89d 200c 	ldrb.w	r2, [sp, #12]
    fb3a:	54ea      	strb	r2, [r5, r3]
    fb3c:	6821      	ldr	r1, [r4, #0]
    fb3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    fb42:	4429      	add	r1, r5
    fb44:	704b      	strb	r3, [r1, #1]
    fb46:	6823      	ldr	r3, [r4, #0]
    fb48:	3302      	adds	r3, #2
    fb4a:	6023      	str	r3, [r4, #0]
    fb4c:	b005      	add	sp, #20
    fb4e:	bd30      	pop	{r4, r5, pc}

0000fb50 <bsec_d_Entity_parseAndDeserialize>:
    fb50:	b530      	push	{r4, r5, lr}
    fb52:	460c      	mov	r4, r1
    fb54:	b083      	sub	sp, #12
    fb56:	6823      	ldr	r3, [r4, #0]
    fb58:	18c5      	adds	r5, r0, r3
    fb5a:	4601      	mov	r1, r0
    fb5c:	4610      	mov	r0, r2
    fb5e:	786a      	ldrb	r2, [r5, #1]
    fb60:	5ccb      	ldrb	r3, [r1, r3]
    fb62:	f88d 2005 	strb.w	r2, [sp, #5]
    fb66:	a901      	add	r1, sp, #4
    fb68:	2202      	movs	r2, #2
    fb6a:	f88d 3004 	strb.w	r3, [sp, #4]
    fb6e:	f023 fe27 	bl	337c0 <memcpy>
    fb72:	6823      	ldr	r3, [r4, #0]
    fb74:	3302      	adds	r3, #2
    fb76:	6023      	str	r3, [r4, #0]
    fb78:	b003      	add	sp, #12
    fb7a:	bd30      	pop	{r4, r5, pc}

0000fb7c <bsec_d_Entity_serializeAndAdd>:
    fb7c:	b530      	push	{r4, r5, lr}
    fb7e:	681c      	ldr	r4, [r3, #0]
    fb80:	3402      	adds	r4, #2
    fb82:	4294      	cmp	r4, r2
    fb84:	b083      	sub	sp, #12
    fb86:	d81a      	bhi.n	fbbe <bsec_d_Entity_serializeAndAdd+0x42>
    fb88:	461c      	mov	r4, r3
    fb8a:	7802      	ldrb	r2, [r0, #0]
    fb8c:	7843      	ldrb	r3, [r0, #1]
    fb8e:	f88d 2004 	strb.w	r2, [sp, #4]
    fb92:	460d      	mov	r5, r1
    fb94:	2202      	movs	r2, #2
    fb96:	a901      	add	r1, sp, #4
    fb98:	4668      	mov	r0, sp
    fb9a:	f88d 3005 	strb.w	r3, [sp, #5]
    fb9e:	f023 fe0f 	bl	337c0 <memcpy>
    fba2:	6823      	ldr	r3, [r4, #0]
    fba4:	f89d 2000 	ldrb.w	r2, [sp]
    fba8:	54ea      	strb	r2, [r5, r3]
    fbaa:	6821      	ldr	r1, [r4, #0]
    fbac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fbb0:	440d      	add	r5, r1
    fbb2:	706b      	strb	r3, [r5, #1]
    fbb4:	6823      	ldr	r3, [r4, #0]
    fbb6:	3302      	adds	r3, #2
    fbb8:	6023      	str	r3, [r4, #0]
    fbba:	b003      	add	sp, #12
    fbbc:	bd30      	pop	{r4, r5, pc}
    fbbe:	3201      	adds	r2, #1
    fbc0:	601a      	str	r2, [r3, #0]
    fbc2:	b003      	add	sp, #12
    fbc4:	bd30      	pop	{r4, r5, pc}
    fbc6:	bf00      	nop

0000fbc8 <bsec_e_Entity_parseAndDeserialize>:
    fbc8:	b510      	push	{r4, lr}
    fbca:	680b      	ldr	r3, [r1, #0]
    fbcc:	b082      	sub	sp, #8
    fbce:	460c      	mov	r4, r1
    fbd0:	1d01      	adds	r1, r0, #4
    fbd2:	4419      	add	r1, r3
    fbd4:	4418      	add	r0, r3
    fbd6:	ab01      	add	r3, sp, #4
    fbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
    fbdc:	f803 2b01 	strb.w	r2, [r3], #1
    fbe0:	4288      	cmp	r0, r1
    fbe2:	d1f9      	bne.n	fbd8 <bsec_e_Entity_parseAndDeserialize+0x10>
    fbe4:	a901      	add	r1, sp, #4
    fbe6:	2204      	movs	r2, #4
    fbe8:	4668      	mov	r0, sp
    fbea:	f023 fde9 	bl	337c0 <memcpy>
    fbee:	6823      	ldr	r3, [r4, #0]
    fbf0:	ed9d 0a00 	vldr	s0, [sp]
    fbf4:	3304      	adds	r3, #4
    fbf6:	6023      	str	r3, [r4, #0]
    fbf8:	b002      	add	sp, #8
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <bsec_e_Entity_serializeAndAdd>:
    fbfc:	b570      	push	{r4, r5, r6, lr}
    fbfe:	6813      	ldr	r3, [r2, #0]
    fc00:	3304      	adds	r3, #4
    fc02:	b084      	sub	sp, #16
    fc04:	428b      	cmp	r3, r1
    fc06:	ed8d 0a01 	vstr	s0, [sp, #4]
    fc0a:	d903      	bls.n	fc14 <bsec_e_Entity_serializeAndAdd+0x18>
    fc0c:	3101      	adds	r1, #1
    fc0e:	6011      	str	r1, [r2, #0]
    fc10:	b004      	add	sp, #16
    fc12:	bd70      	pop	{r4, r5, r6, pc}
    fc14:	4614      	mov	r4, r2
    fc16:	2204      	movs	r2, #4
    fc18:	eb0d 0102 	add.w	r1, sp, r2
    fc1c:	4605      	mov	r5, r0
    fc1e:	a803      	add	r0, sp, #12
    fc20:	f023 fdce 	bl	337c0 <memcpy>
    fc24:	aa03      	add	r2, sp, #12
    fc26:	2300      	movs	r3, #0
    fc28:	18e8      	adds	r0, r5, r3
    fc2a:	6821      	ldr	r1, [r4, #0]
    fc2c:	f812 6b01 	ldrb.w	r6, [r2], #1
    fc30:	5446      	strb	r6, [r0, r1]
    fc32:	3301      	adds	r3, #1
    fc34:	2b04      	cmp	r3, #4
    fc36:	d1f7      	bne.n	fc28 <bsec_e_Entity_serializeAndAdd+0x2c>
    fc38:	6823      	ldr	r3, [r4, #0]
    fc3a:	3304      	adds	r3, #4
    fc3c:	6023      	str	r3, [r4, #0]
    fc3e:	b004      	add	sp, #16
    fc40:	bd70      	pop	{r4, r5, r6, pc}
    fc42:	bf00      	nop

0000fc44 <bsec_f_Entity_parseAndDeserialize>:
    fc44:	b510      	push	{r4, lr}
    fc46:	460c      	mov	r4, r1
    fc48:	b082      	sub	sp, #8
    fc4a:	6823      	ldr	r3, [r4, #0]
    fc4c:	a902      	add	r1, sp, #8
    fc4e:	5cc3      	ldrb	r3, [r0, r3]
    fc50:	f801 3d01 	strb.w	r3, [r1, #-1]!
    fc54:	2201      	movs	r2, #1
    fc56:	f10d 0006 	add.w	r0, sp, #6
    fc5a:	f023 fdb1 	bl	337c0 <memcpy>
    fc5e:	6823      	ldr	r3, [r4, #0]
    fc60:	f89d 0006 	ldrb.w	r0, [sp, #6]
    fc64:	3301      	adds	r3, #1
    fc66:	6023      	str	r3, [r4, #0]
    fc68:	b002      	add	sp, #8
    fc6a:	bd10      	pop	{r4, pc}

0000fc6c <bsec_f_Entity_serializeAndAdd>:
    fc6c:	b530      	push	{r4, r5, lr}
    fc6e:	681c      	ldr	r4, [r3, #0]
    fc70:	b085      	sub	sp, #20
    fc72:	3401      	adds	r4, #1
    fc74:	4294      	cmp	r4, r2
    fc76:	f88d 0007 	strb.w	r0, [sp, #7]
    fc7a:	d903      	bls.n	fc84 <bsec_f_Entity_serializeAndAdd+0x18>
    fc7c:	3201      	adds	r2, #1
    fc7e:	601a      	str	r2, [r3, #0]
    fc80:	b005      	add	sp, #20
    fc82:	bd30      	pop	{r4, r5, pc}
    fc84:	461c      	mov	r4, r3
    fc86:	460d      	mov	r5, r1
    fc88:	2201      	movs	r2, #1
    fc8a:	f10d 0107 	add.w	r1, sp, #7
    fc8e:	f10d 000f 	add.w	r0, sp, #15
    fc92:	f023 fd95 	bl	337c0 <memcpy>
    fc96:	6823      	ldr	r3, [r4, #0]
    fc98:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fc9c:	54ea      	strb	r2, [r5, r3]
    fc9e:	6823      	ldr	r3, [r4, #0]
    fca0:	3301      	adds	r3, #1
    fca2:	6023      	str	r3, [r4, #0]
    fca4:	b005      	add	sp, #20
    fca6:	bd30      	pop	{r4, r5, pc}

0000fca8 <bsec_g_Entity_parseAndDeserialize>:
    fca8:	b510      	push	{r4, lr}
    fcaa:	680a      	ldr	r2, [r1, #0]
    fcac:	b084      	sub	sp, #16
    fcae:	460c      	mov	r4, r1
    fcb0:	f10d 0307 	add.w	r3, sp, #7
    fcb4:	f10d 010f 	add.w	r1, sp, #15
    fcb8:	4410      	add	r0, r2
    fcba:	f810 2b01 	ldrb.w	r2, [r0], #1
    fcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
    fcc2:	428b      	cmp	r3, r1
    fcc4:	d1f9      	bne.n	fcba <bsec_g_Entity_parseAndDeserialize+0x12>
    fcc6:	2208      	movs	r2, #8
    fcc8:	eb0d 0102 	add.w	r1, sp, r2
    fccc:	4668      	mov	r0, sp
    fcce:	f023 fd77 	bl	337c0 <memcpy>
    fcd2:	6823      	ldr	r3, [r4, #0]
    fcd4:	e9dd 0100 	ldrd	r0, r1, [sp]
    fcd8:	3308      	adds	r3, #8
    fcda:	6023      	str	r3, [r4, #0]
    fcdc:	b004      	add	sp, #16
    fcde:	bd10      	pop	{r4, pc}

0000fce0 <bsec_g_Entity_serializeAndAdd>:
    fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fce2:	b085      	sub	sp, #20
    fce4:	e9cd 0100 	strd	r0, r1, [sp]
    fce8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fcea:	6825      	ldr	r5, [r4, #0]
    fcec:	3508      	adds	r5, #8
    fcee:	429d      	cmp	r5, r3
    fcf0:	d903      	bls.n	fcfa <bsec_g_Entity_serializeAndAdd+0x1a>
    fcf2:	3301      	adds	r3, #1
    fcf4:	6023      	str	r3, [r4, #0]
    fcf6:	b005      	add	sp, #20
    fcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcfa:	4617      	mov	r7, r2
    fcfc:	2208      	movs	r2, #8
    fcfe:	4669      	mov	r1, sp
    fd00:	eb0d 0002 	add.w	r0, sp, r2
    fd04:	f023 fd5c 	bl	337c0 <memcpy>
    fd08:	f10d 0107 	add.w	r1, sp, #7
    fd0c:	2300      	movs	r3, #0
    fd0e:	18fd      	adds	r5, r7, r3
    fd10:	6820      	ldr	r0, [r4, #0]
    fd12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    fd16:	542e      	strb	r6, [r5, r0]
    fd18:	3301      	adds	r3, #1
    fd1a:	2b08      	cmp	r3, #8
    fd1c:	d1f7      	bne.n	fd0e <bsec_g_Entity_serializeAndAdd+0x2e>
    fd1e:	6823      	ldr	r3, [r4, #0]
    fd20:	3308      	adds	r3, #8
    fd22:	6023      	str	r3, [r4, #0]
    fd24:	b005      	add	sp, #20
    fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fd28 <bsec_h_Entity_parseAndDeserialize>:
    fd28:	680b      	ldr	r3, [r1, #0]
    fd2a:	5cc0      	ldrb	r0, [r0, r3]
    fd2c:	3301      	adds	r3, #1
    fd2e:	3000      	adds	r0, #0
    fd30:	600b      	str	r3, [r1, #0]
    fd32:	bf18      	it	ne
    fd34:	2001      	movne	r0, #1
    fd36:	4770      	bx	lr

0000fd38 <bsec_h_Entity_serializeAndAdd>:
    fd38:	b430      	push	{r4, r5}
    fd3a:	681c      	ldr	r4, [r3, #0]
    fd3c:	1c65      	adds	r5, r4, #1
    fd3e:	4295      	cmp	r5, r2
    fd40:	bf9c      	itt	ls
    fd42:	5508      	strbls	r0, [r1, r4]
    fd44:	681a      	ldrls	r2, [r3, #0]
    fd46:	3201      	adds	r2, #1
    fd48:	601a      	str	r2, [r3, #0]
    fd4a:	bc30      	pop	{r4, r5}
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop

0000fd50 <bsec_i_Entity_parseAndDeserialize>:
    fd50:	b530      	push	{r4, r5, lr}
    fd52:	680b      	ldr	r3, [r1, #0]
    fd54:	b087      	sub	sp, #28
    fd56:	3b01      	subs	r3, #1
    fd58:	4418      	add	r0, r3
    fd5a:	460d      	mov	r5, r1
    fd5c:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fd60:	f10d 0417 	add.w	r4, sp, #23
    fd64:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fd68:	f803 1f01 	strb.w	r1, [r3, #1]!
    fd6c:	42a3      	cmp	r3, r4
    fd6e:	d1f9      	bne.n	fd64 <bsec_i_Entity_parseAndDeserialize+0x14>
    fd70:	4610      	mov	r0, r2
    fd72:	4669      	mov	r1, sp
    fd74:	2218      	movs	r2, #24
    fd76:	f023 fd23 	bl	337c0 <memcpy>
    fd7a:	682b      	ldr	r3, [r5, #0]
    fd7c:	3318      	adds	r3, #24
    fd7e:	602b      	str	r3, [r5, #0]
    fd80:	b007      	add	sp, #28
    fd82:	bd30      	pop	{r4, r5, pc}

0000fd84 <bsec_i_Entity_serializeAndAdd>:
    fd84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd86:	681c      	ldr	r4, [r3, #0]
    fd88:	3410      	adds	r4, #16
    fd8a:	4294      	cmp	r4, r2
    fd8c:	b089      	sub	sp, #36	; 0x24
    fd8e:	d903      	bls.n	fd98 <bsec_i_Entity_serializeAndAdd+0x14>
    fd90:	3201      	adds	r2, #1
    fd92:	601a      	str	r2, [r3, #0]
    fd94:	b009      	add	sp, #36	; 0x24
    fd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd98:	2210      	movs	r2, #16
    fd9a:	eb0d 0702 	add.w	r7, sp, r2
    fd9e:	460e      	mov	r6, r1
    fda0:	4601      	mov	r1, r0
    fda2:	4668      	mov	r0, sp
    fda4:	461d      	mov	r5, r3
    fda6:	f023 fd0b 	bl	337c0 <memcpy>
    fdaa:	2210      	movs	r2, #16
    fdac:	4669      	mov	r1, sp
    fdae:	4638      	mov	r0, r7
    fdb0:	f023 fd06 	bl	337c0 <memcpy>
    fdb4:	ab08      	add	r3, sp, #32
    fdb6:	463a      	mov	r2, r7
    fdb8:	682c      	ldr	r4, [r5, #0]
    fdba:	1bd0      	subs	r0, r2, r7
    fdbc:	4420      	add	r0, r4
    fdbe:	f812 4b01 	ldrb.w	r4, [r2], #1
    fdc2:	5434      	strb	r4, [r6, r0]
    fdc4:	429a      	cmp	r2, r3
    fdc6:	d1f7      	bne.n	fdb8 <bsec_i_Entity_serializeAndAdd+0x34>
    fdc8:	682b      	ldr	r3, [r5, #0]
    fdca:	3310      	adds	r3, #16
    fdcc:	602b      	str	r3, [r5, #0]
    fdce:	b009      	add	sp, #36	; 0x24
    fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdd2:	bf00      	nop

0000fdd4 <bsec_j_Entity_parseAndDeserialize>:
    fdd4:	b530      	push	{r4, r5, lr}
    fdd6:	680b      	ldr	r3, [r1, #0]
    fdd8:	b0ab      	sub	sp, #172	; 0xac
    fdda:	3b01      	subs	r3, #1
    fddc:	4418      	add	r0, r3
    fdde:	460d      	mov	r5, r1
    fde0:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fde4:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
    fde8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fdec:	f803 1f01 	strb.w	r1, [r3, #1]!
    fdf0:	42a3      	cmp	r3, r4
    fdf2:	d1f9      	bne.n	fde8 <bsec_j_Entity_parseAndDeserialize+0x14>
    fdf4:	4610      	mov	r0, r2
    fdf6:	4669      	mov	r1, sp
    fdf8:	22a8      	movs	r2, #168	; 0xa8
    fdfa:	f023 fce1 	bl	337c0 <memcpy>
    fdfe:	682b      	ldr	r3, [r5, #0]
    fe00:	33a8      	adds	r3, #168	; 0xa8
    fe02:	602b      	str	r3, [r5, #0]
    fe04:	b02b      	add	sp, #172	; 0xac
    fe06:	bd30      	pop	{r4, r5, pc}

0000fe08 <bsec_j_Entity_serializeAndAdd>:
    fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0a:	681d      	ldr	r5, [r3, #0]
    fe0c:	3504      	adds	r5, #4
    fe0e:	4295      	cmp	r5, r2
    fe10:	b083      	sub	sp, #12
    fe12:	d81d      	bhi.n	fe50 <bsec_j_Entity_serializeAndAdd+0x48>
    fe14:	4602      	mov	r2, r0
    fe16:	460f      	mov	r7, r1
    fe18:	461c      	mov	r4, r3
    fe1a:	8811      	ldrh	r1, [r2, #0]
    fe1c:	8853      	ldrh	r3, [r2, #2]
    fe1e:	f8ad 1004 	strh.w	r1, [sp, #4]
    fe22:	2204      	movs	r2, #4
    fe24:	eb0d 0102 	add.w	r1, sp, r2
    fe28:	4668      	mov	r0, sp
    fe2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe2e:	f023 fcc7 	bl	337c0 <memcpy>
    fe32:	466b      	mov	r3, sp
    fe34:	2200      	movs	r2, #0
    fe36:	18bd      	adds	r5, r7, r2
    fe38:	6820      	ldr	r0, [r4, #0]
    fe3a:	f813 6b01 	ldrb.w	r6, [r3], #1
    fe3e:	542e      	strb	r6, [r5, r0]
    fe40:	3201      	adds	r2, #1
    fe42:	2a04      	cmp	r2, #4
    fe44:	d1f7      	bne.n	fe36 <bsec_j_Entity_serializeAndAdd+0x2e>
    fe46:	6823      	ldr	r3, [r4, #0]
    fe48:	3304      	adds	r3, #4
    fe4a:	6023      	str	r3, [r4, #0]
    fe4c:	b003      	add	sp, #12
    fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe50:	3201      	adds	r2, #1
    fe52:	601a      	str	r2, [r3, #0]
    fe54:	b003      	add	sp, #12
    fe56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe58 <bsec_k_Entity_parseAndDeserialize>:
    fe58:	b530      	push	{r4, r5, lr}
    fe5a:	680b      	ldr	r3, [r1, #0]
    fe5c:	b089      	sub	sp, #36	; 0x24
    fe5e:	3b01      	subs	r3, #1
    fe60:	4418      	add	r0, r3
    fe62:	460d      	mov	r5, r1
    fe64:	f10d 0303 	add.w	r3, sp, #3
    fe68:	f10d 041f 	add.w	r4, sp, #31
    fe6c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fe70:	f803 1f01 	strb.w	r1, [r3, #1]!
    fe74:	42a3      	cmp	r3, r4
    fe76:	d1f9      	bne.n	fe6c <bsec_k_Entity_parseAndDeserialize+0x14>
    fe78:	4610      	mov	r0, r2
    fe7a:	a901      	add	r1, sp, #4
    fe7c:	221c      	movs	r2, #28
    fe7e:	f023 fc9f 	bl	337c0 <memcpy>
    fe82:	682b      	ldr	r3, [r5, #0]
    fe84:	331c      	adds	r3, #28
    fe86:	602b      	str	r3, [r5, #0]
    fe88:	b009      	add	sp, #36	; 0x24
    fe8a:	bd30      	pop	{r4, r5, pc}

0000fe8c <bsec_k_Entity_serializeAndAdd>:
    fe8c:	b530      	push	{r4, r5, lr}
    fe8e:	681c      	ldr	r4, [r3, #0]
    fe90:	3402      	adds	r4, #2
    fe92:	4294      	cmp	r4, r2
    fe94:	b083      	sub	sp, #12
    fe96:	d81a      	bhi.n	fece <bsec_k_Entity_serializeAndAdd+0x42>
    fe98:	461c      	mov	r4, r3
    fe9a:	7802      	ldrb	r2, [r0, #0]
    fe9c:	7843      	ldrb	r3, [r0, #1]
    fe9e:	f88d 2004 	strb.w	r2, [sp, #4]
    fea2:	460d      	mov	r5, r1
    fea4:	2202      	movs	r2, #2
    fea6:	a901      	add	r1, sp, #4
    fea8:	4668      	mov	r0, sp
    feaa:	f88d 3005 	strb.w	r3, [sp, #5]
    feae:	f023 fc87 	bl	337c0 <memcpy>
    feb2:	6823      	ldr	r3, [r4, #0]
    feb4:	f89d 2000 	ldrb.w	r2, [sp]
    feb8:	54ea      	strb	r2, [r5, r3]
    feba:	6821      	ldr	r1, [r4, #0]
    febc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fec0:	440d      	add	r5, r1
    fec2:	706b      	strb	r3, [r5, #1]
    fec4:	6823      	ldr	r3, [r4, #0]
    fec6:	3302      	adds	r3, #2
    fec8:	6023      	str	r3, [r4, #0]
    feca:	b003      	add	sp, #12
    fecc:	bd30      	pop	{r4, r5, pc}
    fece:	3201      	adds	r2, #1
    fed0:	601a      	str	r2, [r3, #0]
    fed2:	b003      	add	sp, #12
    fed4:	bd30      	pop	{r4, r5, pc}
    fed6:	bf00      	nop

0000fed8 <bsec_l_Entity_parseAndDeserialize>:
    fed8:	b530      	push	{r4, r5, lr}
    feda:	680b      	ldr	r3, [r1, #0]
    fedc:	b085      	sub	sp, #20
    fede:	3b01      	subs	r3, #1
    fee0:	4418      	add	r0, r3
    fee2:	460d      	mov	r5, r1
    fee4:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fee8:	f10d 040f 	add.w	r4, sp, #15
    feec:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fef0:	f803 1f01 	strb.w	r1, [r3, #1]!
    fef4:	42a3      	cmp	r3, r4
    fef6:	d1f9      	bne.n	feec <bsec_l_Entity_parseAndDeserialize+0x14>
    fef8:	4610      	mov	r0, r2
    fefa:	4669      	mov	r1, sp
    fefc:	2210      	movs	r2, #16
    fefe:	f023 fc5f 	bl	337c0 <memcpy>
    ff02:	682b      	ldr	r3, [r5, #0]
    ff04:	3310      	adds	r3, #16
    ff06:	602b      	str	r3, [r5, #0]
    ff08:	b005      	add	sp, #20
    ff0a:	bd30      	pop	{r4, r5, pc}

0000ff0c <bsec_l_Entity_serializeAndAdd>:
    ff0c:	b530      	push	{r4, r5, lr}
    ff0e:	681c      	ldr	r4, [r3, #0]
    ff10:	b085      	sub	sp, #20
    ff12:	3401      	adds	r4, #1
    ff14:	4294      	cmp	r4, r2
    ff16:	f88d 0007 	strb.w	r0, [sp, #7]
    ff1a:	d903      	bls.n	ff24 <bsec_l_Entity_serializeAndAdd+0x18>
    ff1c:	3201      	adds	r2, #1
    ff1e:	601a      	str	r2, [r3, #0]
    ff20:	b005      	add	sp, #20
    ff22:	bd30      	pop	{r4, r5, pc}
    ff24:	461c      	mov	r4, r3
    ff26:	460d      	mov	r5, r1
    ff28:	2201      	movs	r2, #1
    ff2a:	f10d 0107 	add.w	r1, sp, #7
    ff2e:	f10d 000f 	add.w	r0, sp, #15
    ff32:	f023 fc45 	bl	337c0 <memcpy>
    ff36:	6823      	ldr	r3, [r4, #0]
    ff38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ff3c:	54ea      	strb	r2, [r5, r3]
    ff3e:	6823      	ldr	r3, [r4, #0]
    ff40:	3301      	adds	r3, #1
    ff42:	6023      	str	r3, [r4, #0]
    ff44:	b005      	add	sp, #20
    ff46:	bd30      	pop	{r4, r5, pc}

0000ff48 <bsec_m_Entity_parseAndDeserialize>:
    ff48:	b570      	push	{r4, r5, r6, lr}
    ff4a:	460e      	mov	r6, r1
    ff4c:	6809      	ldr	r1, [r1, #0]
    ff4e:	b082      	sub	sp, #8
    ff50:	1d05      	adds	r5, r0, #4
    ff52:	1843      	adds	r3, r0, r1
    ff54:	440d      	add	r5, r1
    ff56:	a901      	add	r1, sp, #4
    ff58:	f813 4b01 	ldrb.w	r4, [r3], #1
    ff5c:	f801 4b01 	strb.w	r4, [r1], #1
    ff60:	42ab      	cmp	r3, r5
    ff62:	d1f9      	bne.n	ff58 <bsec_m_Entity_parseAndDeserialize+0x10>
    ff64:	a901      	add	r1, sp, #4
    ff66:	4610      	mov	r0, r2
    ff68:	2204      	movs	r2, #4
    ff6a:	f023 fc29 	bl	337c0 <memcpy>
    ff6e:	6833      	ldr	r3, [r6, #0]
    ff70:	3304      	adds	r3, #4
    ff72:	6033      	str	r3, [r6, #0]
    ff74:	b002      	add	sp, #8
    ff76:	bd70      	pop	{r4, r5, r6, pc}

0000ff78 <bsec_m_Entity_serializeAndAdd>:
    ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff7a:	681d      	ldr	r5, [r3, #0]
    ff7c:	3508      	adds	r5, #8
    ff7e:	4295      	cmp	r5, r2
    ff80:	b083      	sub	sp, #12
    ff82:	d903      	bls.n	ff8c <bsec_m_Entity_serializeAndAdd+0x14>
    ff84:	3201      	adds	r2, #1
    ff86:	601a      	str	r2, [r3, #0]
    ff88:	b003      	add	sp, #12
    ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff8c:	2208      	movs	r2, #8
    ff8e:	460f      	mov	r7, r1
    ff90:	4601      	mov	r1, r0
    ff92:	4668      	mov	r0, sp
    ff94:	461c      	mov	r4, r3
    ff96:	f023 fc13 	bl	337c0 <memcpy>
    ff9a:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    ff9e:	2200      	movs	r2, #0
    ffa0:	18bd      	adds	r5, r7, r2
    ffa2:	6820      	ldr	r0, [r4, #0]
    ffa4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    ffa8:	542e      	strb	r6, [r5, r0]
    ffaa:	3201      	adds	r2, #1
    ffac:	2a08      	cmp	r2, #8
    ffae:	d1f7      	bne.n	ffa0 <bsec_m_Entity_serializeAndAdd+0x28>
    ffb0:	6823      	ldr	r3, [r4, #0]
    ffb2:	3308      	adds	r3, #8
    ffb4:	6023      	str	r3, [r4, #0]
    ffb6:	b003      	add	sp, #12
    ffb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffba:	bf00      	nop

0000ffbc <bsec_n_Entity_parseAndDeserialize>:
    ffbc:	b530      	push	{r4, r5, lr}
    ffbe:	460c      	mov	r4, r1
    ffc0:	b083      	sub	sp, #12
    ffc2:	6823      	ldr	r3, [r4, #0]
    ffc4:	18c5      	adds	r5, r0, r3
    ffc6:	4601      	mov	r1, r0
    ffc8:	4610      	mov	r0, r2
    ffca:	786a      	ldrb	r2, [r5, #1]
    ffcc:	5ccb      	ldrb	r3, [r1, r3]
    ffce:	f88d 2005 	strb.w	r2, [sp, #5]
    ffd2:	a901      	add	r1, sp, #4
    ffd4:	2202      	movs	r2, #2
    ffd6:	f88d 3004 	strb.w	r3, [sp, #4]
    ffda:	f023 fbf1 	bl	337c0 <memcpy>
    ffde:	6823      	ldr	r3, [r4, #0]
    ffe0:	3302      	adds	r3, #2
    ffe2:	6023      	str	r3, [r4, #0]
    ffe4:	b003      	add	sp, #12
    ffe6:	bd30      	pop	{r4, r5, pc}

0000ffe8 <bsec_n_Entity_serializeAndAdd>:
    ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffea:	681c      	ldr	r4, [r3, #0]
    ffec:	3414      	adds	r4, #20
    ffee:	4294      	cmp	r4, r2
    fff0:	b08b      	sub	sp, #44	; 0x2c
    fff2:	d903      	bls.n	fffc <bsec_n_Entity_serializeAndAdd+0x14>
    fff4:	3201      	adds	r2, #1
    fff6:	601a      	str	r2, [r3, #0]
    fff8:	b00b      	add	sp, #44	; 0x2c
    fffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fffc:	2214      	movs	r2, #20
    fffe:	eb0d 0702 	add.w	r7, sp, r2
   10002:	460e      	mov	r6, r1
   10004:	4601      	mov	r1, r0
   10006:	4668      	mov	r0, sp
   10008:	461d      	mov	r5, r3
   1000a:	f023 fbd9 	bl	337c0 <memcpy>
   1000e:	2214      	movs	r2, #20
   10010:	4669      	mov	r1, sp
   10012:	4638      	mov	r0, r7
   10014:	f023 fbd4 	bl	337c0 <memcpy>
   10018:	ab0a      	add	r3, sp, #40	; 0x28
   1001a:	463a      	mov	r2, r7
   1001c:	682c      	ldr	r4, [r5, #0]
   1001e:	1bd0      	subs	r0, r2, r7
   10020:	4420      	add	r0, r4
   10022:	f812 4b01 	ldrb.w	r4, [r2], #1
   10026:	5434      	strb	r4, [r6, r0]
   10028:	429a      	cmp	r2, r3
   1002a:	d1f7      	bne.n	1001c <bsec_n_Entity_serializeAndAdd+0x34>
   1002c:	682b      	ldr	r3, [r5, #0]
   1002e:	3314      	adds	r3, #20
   10030:	602b      	str	r3, [r5, #0]
   10032:	b00b      	add	sp, #44	; 0x2c
   10034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10036:	bf00      	nop

00010038 <bsec_o_Entity_parseAndDeserialize>:
   10038:	b510      	push	{r4, lr}
   1003a:	460c      	mov	r4, r1
   1003c:	b082      	sub	sp, #8
   1003e:	6823      	ldr	r3, [r4, #0]
   10040:	a902      	add	r1, sp, #8
   10042:	5cc3      	ldrb	r3, [r0, r3]
   10044:	f801 3d01 	strb.w	r3, [r1, #-1]!
   10048:	2201      	movs	r2, #1
   1004a:	f10d 0006 	add.w	r0, sp, #6
   1004e:	f023 fbb7 	bl	337c0 <memcpy>
   10052:	6823      	ldr	r3, [r4, #0]
   10054:	f99d 0006 	ldrsb.w	r0, [sp, #6]
   10058:	3301      	adds	r3, #1
   1005a:	6023      	str	r3, [r4, #0]
   1005c:	b002      	add	sp, #8
   1005e:	bd10      	pop	{r4, pc}

00010060 <bsec_o_Entity_serializeAndAdd>:
   10060:	b5f0      	push	{r4, r5, r6, r7, lr}
   10062:	681c      	ldr	r4, [r3, #0]
   10064:	3418      	adds	r4, #24
   10066:	4294      	cmp	r4, r2
   10068:	b08d      	sub	sp, #52	; 0x34
   1006a:	d903      	bls.n	10074 <bsec_o_Entity_serializeAndAdd+0x14>
   1006c:	3201      	adds	r2, #1
   1006e:	601a      	str	r2, [r3, #0]
   10070:	b00d      	add	sp, #52	; 0x34
   10072:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10074:	2218      	movs	r2, #24
   10076:	eb0d 0702 	add.w	r7, sp, r2
   1007a:	460e      	mov	r6, r1
   1007c:	4601      	mov	r1, r0
   1007e:	4668      	mov	r0, sp
   10080:	461d      	mov	r5, r3
   10082:	f023 fb9d 	bl	337c0 <memcpy>
   10086:	2218      	movs	r2, #24
   10088:	4669      	mov	r1, sp
   1008a:	4638      	mov	r0, r7
   1008c:	f023 fb98 	bl	337c0 <memcpy>
   10090:	ab0c      	add	r3, sp, #48	; 0x30
   10092:	463a      	mov	r2, r7
   10094:	682c      	ldr	r4, [r5, #0]
   10096:	1bd0      	subs	r0, r2, r7
   10098:	4420      	add	r0, r4
   1009a:	f812 4b01 	ldrb.w	r4, [r2], #1
   1009e:	5434      	strb	r4, [r6, r0]
   100a0:	429a      	cmp	r2, r3
   100a2:	d1f7      	bne.n	10094 <bsec_o_Entity_serializeAndAdd+0x34>
   100a4:	682b      	ldr	r3, [r5, #0]
   100a6:	3318      	adds	r3, #24
   100a8:	602b      	str	r3, [r5, #0]
   100aa:	b00d      	add	sp, #52	; 0x34
   100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ae:	bf00      	nop

000100b0 <bsec_p_Entity_parseAndDeserialize>:
   100b0:	f7ff bcd2 	b.w	fa58 <bsec_b_Entity_parseAndDeserialize>

000100b4 <bsec_p_Entity_serializeAndAdd>:
   100b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b6:	681c      	ldr	r4, [r3, #0]
   100b8:	34a8      	adds	r4, #168	; 0xa8
   100ba:	4294      	cmp	r4, r2
   100bc:	b0d5      	sub	sp, #340	; 0x154
   100be:	d903      	bls.n	100c8 <bsec_p_Entity_serializeAndAdd+0x14>
   100c0:	3201      	adds	r2, #1
   100c2:	601a      	str	r2, [r3, #0]
   100c4:	b055      	add	sp, #340	; 0x154
   100c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100c8:	22a8      	movs	r2, #168	; 0xa8
   100ca:	eb0d 0702 	add.w	r7, sp, r2
   100ce:	460e      	mov	r6, r1
   100d0:	4601      	mov	r1, r0
   100d2:	4668      	mov	r0, sp
   100d4:	461d      	mov	r5, r3
   100d6:	f023 fb73 	bl	337c0 <memcpy>
   100da:	22a8      	movs	r2, #168	; 0xa8
   100dc:	4669      	mov	r1, sp
   100de:	4638      	mov	r0, r7
   100e0:	f023 fb6e 	bl	337c0 <memcpy>
   100e4:	ab54      	add	r3, sp, #336	; 0x150
   100e6:	463a      	mov	r2, r7
   100e8:	682c      	ldr	r4, [r5, #0]
   100ea:	1bd0      	subs	r0, r2, r7
   100ec:	4420      	add	r0, r4
   100ee:	f812 4b01 	ldrb.w	r4, [r2], #1
   100f2:	5434      	strb	r4, [r6, r0]
   100f4:	429a      	cmp	r2, r3
   100f6:	d1f7      	bne.n	100e8 <bsec_p_Entity_serializeAndAdd+0x34>
   100f8:	682b      	ldr	r3, [r5, #0]
   100fa:	33a8      	adds	r3, #168	; 0xa8
   100fc:	602b      	str	r3, [r5, #0]
   100fe:	b055      	add	sp, #340	; 0x154
   10100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10102:	bf00      	nop

00010104 <bsec_q_Entity_parseAndDeserialize>:
   10104:	b530      	push	{r4, r5, lr}
   10106:	680b      	ldr	r3, [r1, #0]
   10108:	b087      	sub	sp, #28
   1010a:	3b01      	subs	r3, #1
   1010c:	4418      	add	r0, r3
   1010e:	460d      	mov	r5, r1
   10110:	f10d 0303 	add.w	r3, sp, #3
   10114:	f10d 0417 	add.w	r4, sp, #23
   10118:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   1011c:	f803 1f01 	strb.w	r1, [r3, #1]!
   10120:	42a3      	cmp	r3, r4
   10122:	d1f9      	bne.n	10118 <bsec_q_Entity_parseAndDeserialize+0x14>
   10124:	4610      	mov	r0, r2
   10126:	a901      	add	r1, sp, #4
   10128:	2214      	movs	r2, #20
   1012a:	f023 fb49 	bl	337c0 <memcpy>
   1012e:	682b      	ldr	r3, [r5, #0]
   10130:	3314      	adds	r3, #20
   10132:	602b      	str	r3, [r5, #0]
   10134:	b007      	add	sp, #28
   10136:	bd30      	pop	{r4, r5, pc}

00010138 <bsec_q_Entity_serializeAndAdd>:
   10138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1013a:	681c      	ldr	r4, [r3, #0]
   1013c:	341c      	adds	r4, #28
   1013e:	4294      	cmp	r4, r2
   10140:	b089      	sub	sp, #36	; 0x24
   10142:	d903      	bls.n	1014c <bsec_q_Entity_serializeAndAdd+0x14>
   10144:	3201      	adds	r2, #1
   10146:	601a      	str	r2, [r3, #0]
   10148:	b009      	add	sp, #36	; 0x24
   1014a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1014c:	af01      	add	r7, sp, #4
   1014e:	221c      	movs	r2, #28
   10150:	460e      	mov	r6, r1
   10152:	4601      	mov	r1, r0
   10154:	4638      	mov	r0, r7
   10156:	461d      	mov	r5, r3
   10158:	f023 fb32 	bl	337c0 <memcpy>
   1015c:	ab08      	add	r3, sp, #32
   1015e:	463a      	mov	r2, r7
   10160:	682c      	ldr	r4, [r5, #0]
   10162:	1bd0      	subs	r0, r2, r7
   10164:	4420      	add	r0, r4
   10166:	f812 4b01 	ldrb.w	r4, [r2], #1
   1016a:	5434      	strb	r4, [r6, r0]
   1016c:	429a      	cmp	r2, r3
   1016e:	d1f7      	bne.n	10160 <bsec_q_Entity_serializeAndAdd+0x28>
   10170:	682b      	ldr	r3, [r5, #0]
   10172:	331c      	adds	r3, #28
   10174:	602b      	str	r3, [r5, #0]
   10176:	b009      	add	sp, #36	; 0x24
   10178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1017a:	bf00      	nop

0001017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>:
   1017c:	b538      	push	{r3, r4, r5, lr}
   1017e:	460c      	mov	r4, r1
   10180:	ed2d 8b02 	vpush	{d8}
   10184:	1e59      	subs	r1, r3, #1
   10186:	edd4 7a00 	vldr	s15, [r4]
   1018a:	4615      	mov	r5, r2
   1018c:	bbea      	cbnz	r2, 1020a <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x8e>
   1018e:	ed90 7a01 	vldr	s14, [r0, #4]
   10192:	ed9f 8a31 	vldr	s16, [pc, #196]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   10196:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1019a:	edd3 6a03 	vldr	s13, [r3, #12]
   1019e:	ee27 8a08 	vmul.f32	s16, s14, s16
   101a2:	ee38 8a26 	vadd.f32	s16, s16, s13
   101a6:	8843      	ldrh	r3, [r0, #2]
   101a8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 1025c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe0>
   101ac:	ee06 3a90 	vmov	s13, r3
   101b0:	ee70 8a67 	vsub.f32	s17, s0, s15
   101b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   101b8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101c0:	ee86 6aa5 	vdiv.f32	s12, s13, s11
   101c4:	dd34      	ble.n	10230 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xb4>
   101c6:	eddf 5a26 	vldr	s11, [pc, #152]	; 10260 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe4>
   101ca:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
   101ce:	ee27 7a25 	vmul.f32	s14, s14, s11
   101d2:	ee87 0a26 	vdiv.f32	s0, s14, s13
   101d6:	ee20 0a06 	vmul.f32	s0, s0, s12
   101da:	eef4 8ac0 	vcmpe.f32	s17, s0
   101de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101e2:	bfd8      	it	le
   101e4:	eeb0 0a68 	vmovle.f32	s0, s17
   101e8:	ee30 0a27 	vadd.f32	s0, s0, s15
   101ec:	eeb4 0a48 	vcmp.f32	s0, s16
   101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101f4:	bf48      	it	mi
   101f6:	eeb0 0a48 	vmovmi.f32	s0, s16
   101fa:	b10d      	cbz	r5, 10200 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x84>
   101fc:	eeb1 0a40 	vneg.f32	s0, s0
   10200:	ecbd 8b02 	vpop	{d8}
   10204:	ed84 0a00 	vstr	s0, [r4]
   10208:	bd38      	pop	{r3, r4, r5, pc}
   1020a:	eef1 7a67 	vneg.f32	s15, s15
   1020e:	edc4 7a00 	vstr	s15, [r4]
   10212:	ed90 7a01 	vldr	s14, [r0, #4]
   10216:	ed9f 8a10 	vldr	s16, [pc, #64]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   1021a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1021e:	ee27 8a08 	vmul.f32	s16, s14, s16
   10222:	edd3 6a01 	vldr	s13, [r3, #4]
   10226:	eeb1 0a40 	vneg.f32	s0, s0
   1022a:	ee38 8a66 	vsub.f32	s16, s16, s13
   1022e:	e7ba      	b.n	101a6 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x2a>
   10230:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   10234:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
   10238:	eeb1 0a46 	vneg.f32	s0, s12
   1023c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10240:	f01a fdac 	bl	2ad9c <expf>
   10244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10248:	ee37 0ac0 	vsub.f32	s0, s15, s0
   1024c:	edd4 7a00 	vldr	s15, [r4]
   10250:	ee20 0a28 	vmul.f32	s0, s0, s17
   10254:	e7c8      	b.n	101e8 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x6c>
   10256:	bf00      	nop
   10258:	3dc678c1 	.word	0x3dc678c1
   1025c:	42c80000 	.word	0x42c80000
   10260:	3ecbbecb 	.word	0x3ecbbecb

00010264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>:
   10264:	b430      	push	{r4, r5}
   10266:	4917      	ldr	r1, [pc, #92]	; (102c4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x60>)
   10268:	4d17      	ldr	r5, [pc, #92]	; (102c8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x64>)
   1026a:	62c1      	str	r1, [r0, #44]	; 0x2c
   1026c:	2401      	movs	r4, #1
   1026e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10272:	7004      	strb	r4, [r0, #0]
   10274:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
   10278:	8041      	strh	r1, [r0, #2]
   1027a:	6344      	str	r4, [r0, #52]	; 0x34
   1027c:	4913      	ldr	r1, [pc, #76]	; (102cc <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x68>)
   1027e:	4c14      	ldr	r4, [pc, #80]	; (102d0 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x6c>)
   10280:	63c5      	str	r5, [r0, #60]	; 0x3c
   10282:	4d14      	ldr	r5, [pc, #80]	; (102d4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x70>)
   10284:	6401      	str	r1, [r0, #64]	; 0x40
   10286:	2200      	movs	r2, #0
   10288:	2100      	movs	r1, #0
   1028a:	6444      	str	r4, [r0, #68]	; 0x44
   1028c:	6485      	str	r5, [r0, #72]	; 0x48
   1028e:	2402      	movs	r4, #2
   10290:	4d11      	ldr	r5, [pc, #68]	; (102d8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x74>)
   10292:	7704      	strb	r4, [r0, #28]
   10294:	7744      	strb	r4, [r0, #29]
   10296:	f880 404c 	strb.w	r4, [r0, #76]	; 0x4c
   1029a:	6305      	str	r5, [r0, #48]	; 0x30
   1029c:	6385      	str	r5, [r0, #56]	; 0x38
   1029e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
   102a2:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
   102a6:	8301      	strh	r1, [r0, #24]
   102a8:	8341      	strh	r1, [r0, #26]
   102aa:	e9c0 1108 	strd	r1, r1, [r0, #32]
   102ae:	6281      	str	r1, [r0, #40]	; 0x28
   102b0:	6542      	str	r2, [r0, #84]	; 0x54
   102b2:	6582      	str	r2, [r0, #88]	; 0x58
   102b4:	6082      	str	r2, [r0, #8]
   102b6:	6102      	str	r2, [r0, #16]
   102b8:	60c2      	str	r2, [r0, #12]
   102ba:	6142      	str	r2, [r0, #20]
   102bc:	6042      	str	r2, [r0, #4]
   102be:	bc30      	pop	{r4, r5}
   102c0:	4770      	bx	lr
   102c2:	bf00      	nop
   102c4:	3f004189 	.word	0x3f004189
   102c8:	640055d8 	.word	0x640055d8
   102cc:	44e10000 	.word	0x44e10000
   102d0:	47a8c000 	.word	0x47a8c000
   102d4:	4c773140 	.word	0x4c773140
   102d8:	3ecccccd 	.word	0x3ecccccd

000102dc <bsec_GasHumidityBaselineTracker_configure>:
   102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e0:	b087      	sub	sp, #28
   102e2:	ab04      	add	r3, sp, #16
   102e4:	ae05      	add	r6, sp, #20
   102e6:	4605      	mov	r5, r0
   102e8:	7800      	ldrb	r0, [r0, #0]
   102ea:	9300      	str	r3, [sp, #0]
   102ec:	9601      	str	r6, [sp, #4]
   102ee:	f10d 030f 	add.w	r3, sp, #15
   102f2:	460f      	mov	r7, r1
   102f4:	f001 fb9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   102f8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   102fc:	bb30      	cbnz	r0, 1034c <bsec_GasHumidityBaselineTracker_configure+0x70>
   102fe:	4604      	mov	r4, r0
   10300:	f105 0a3e 	add.w	sl, r5, #62	; 0x3e
   10304:	f105 093c 	add.w	r9, r5, #60	; 0x3c
   10308:	f105 084e 	add.w	r8, r5, #78	; 0x4e
   1030c:	fa5f fb84 	uxtb.w	fp, r4
   10310:	f10b 0301 	add.w	r3, fp, #1
   10314:	b2db      	uxtb	r3, r3
   10316:	3b02      	subs	r3, #2
   10318:	2b05      	cmp	r3, #5
   1031a:	d804      	bhi.n	10326 <bsec_GasHumidityBaselineTracker_configure+0x4a>
   1031c:	e8df f003 	tbb	[pc, r3]
   10320:	1f252b32 	.word	0x1f252b32
   10324:	0e19      	.short	0x0e19
   10326:	f105 0244 	add.w	r2, r5, #68	; 0x44
   1032a:	4631      	mov	r1, r6
   1032c:	4638      	mov	r0, r7
   1032e:	f7ff fb93 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10332:	f1bb 0f06 	cmp.w	fp, #6
   10336:	d007      	beq.n	10348 <bsec_GasHumidityBaselineTracker_configure+0x6c>
   10338:	3401      	adds	r4, #1
   1033a:	e7e7      	b.n	1030c <bsec_GasHumidityBaselineTracker_configure+0x30>
   1033c:	f105 0254 	add.w	r2, r5, #84	; 0x54
   10340:	4631      	mov	r1, r6
   10342:	4638      	mov	r0, r7
   10344:	f7ff fb88 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10348:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1034c:	b007      	add	sp, #28
   1034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10352:	4652      	mov	r2, sl
   10354:	4631      	mov	r1, r6
   10356:	4638      	mov	r0, r7
   10358:	f7ff fbfa 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   1035c:	e7ec      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1035e:	464a      	mov	r2, r9
   10360:	4631      	mov	r1, r6
   10362:	4638      	mov	r0, r7
   10364:	f7ff fe2a 	bl	ffbc <bsec_n_Entity_parseAndDeserialize>
   10368:	e7e6      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1036a:	4642      	mov	r2, r8
   1036c:	4631      	mov	r1, r6
   1036e:	4638      	mov	r0, r7
   10370:	f7ff fdea 	bl	ff48 <bsec_m_Entity_parseAndDeserialize>
   10374:	e7e0      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10376:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   1037a:	4631      	mov	r1, r6
   1037c:	4638      	mov	r0, r7
   1037e:	f7ff fdab 	bl	fed8 <bsec_l_Entity_parseAndDeserialize>
   10382:	e7d9      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10384:	4631      	mov	r1, r6
   10386:	4638      	mov	r0, r7
   10388:	f7ff fc1e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1038c:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
   10390:	e7d2      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10392:	bf00      	nop

00010394 <bsec_GasHumidityBaselineTracker_doStep>:
   10394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10398:	ed9f 7adc 	vldr	s14, [pc, #880]	; 1070c <bsec_GasHumidityBaselineTracker_doStep+0x378>
   1039c:	eddf 7adc 	vldr	s15, [pc, #880]	; 10710 <bsec_GasHumidityBaselineTracker_doStep+0x37c>
   103a0:	eddf 6adc 	vldr	s13, [pc, #880]	; 10714 <bsec_GasHumidityBaselineTracker_doStep+0x380>
   103a4:	ed2d 8b0a 	vpush	{d8-d12}
   103a8:	ee20 7a87 	vmul.f32	s14, s1, s14
   103ac:	ee70 7aa7 	vadd.f32	s15, s1, s15
   103b0:	edd0 8a01 	vldr	s17, [r0, #4]
   103b4:	b089      	sub	sp, #36	; 0x24
   103b6:	eeb0 aa40 	vmov.f32	s20, s0
   103ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
   103be:	461d      	mov	r5, r3
   103c0:	4604      	mov	r4, r0
   103c2:	468a      	mov	sl, r1
   103c4:	4693      	mov	fp, r2
   103c6:	e9dd 761c 	ldrd	r7, r6, [sp, #112]	; 0x70
   103ca:	eeb0 8a60 	vmov.f32	s16, s1
   103ce:	eeb0 9a41 	vmov.f32	s18, s2
   103d2:	eef0 9a61 	vmov.f32	s19, s3
   103d6:	ee68 8aa6 	vmul.f32	s17, s17, s13
   103da:	f01a fcdf 	bl	2ad9c <expf>
   103de:	ed9f 6ace 	vldr	s12, [pc, #824]	; 10718 <bsec_GasHumidityBaselineTracker_doStep+0x384>
   103e2:	eddf 7ace 	vldr	s15, [pc, #824]	; 1071c <bsec_GasHumidityBaselineTracker_doStep+0x388>
   103e6:	ed9f 7ace 	vldr	s14, [pc, #824]	; 10720 <bsec_GasHumidityBaselineTracker_doStep+0x38c>
   103ea:	ed9f 5ace 	vldr	s10, [pc, #824]	; 10724 <bsec_GasHumidityBaselineTracker_doStep+0x390>
   103ee:	eddf 5ace 	vldr	s11, [pc, #824]	; 10728 <bsec_GasHumidityBaselineTracker_doStep+0x394>
   103f2:	ee29 6a06 	vmul.f32	s12, s18, s12
   103f6:	ee38 7a07 	vadd.f32	s14, s16, s14
   103fa:	eec6 6a27 	vdiv.f32	s13, s12, s15
   103fe:	ee26 0a80 	vmul.f32	s0, s13, s0
   10402:	eec0 7a07 	vdiv.f32	s15, s0, s14
   10406:	ee67 7a85 	vmul.f32	s15, s15, s10
   1040a:	eef4 7ae5 	vcmpe.f32	s15, s11
   1040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10412:	bfdc      	itt	le
   10414:	f10d 0820 	addle.w	r8, sp, #32
   10418:	ee15 3a90 	vmovle	r3, s11
   1041c:	edcd 7a06 	vstr	s15, [sp, #24]
   10420:	bfd4      	ite	le
   10422:	f848 3d08 	strle.w	r3, [r8, #-8]!
   10426:	f10d 0818 	addgt.w	r8, sp, #24
   1042a:	4640      	mov	r0, r8
   1042c:	f001 fbd8 	bl	11be0 <bsec_log10>
   10430:	8863      	ldrh	r3, [r4, #2]
   10432:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10436:	f000 8142 	beq.w	106be <bsec_GasHumidityBaselineTracker_doStep+0x32a>
   1043a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   1043e:	f000 813b 	beq.w	106b8 <bsec_GasHumidityBaselineTracker_doStep+0x324>
   10442:	2b64      	cmp	r3, #100	; 0x64
   10444:	f000 809f 	beq.w	10586 <bsec_GasHumidityBaselineTracker_doStep+0x1f2>
   10448:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
   1044c:	eddd 7a06 	vldr	s15, [sp, #24]
   10450:	ee20 0a27 	vmul.f32	s0, s0, s15
   10454:	ee30 0a0a 	vadd.f32	s0, s0, s20
   10458:	ed86 0a00 	vstr	s0, [r6]
   1045c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10460:	ee07 3a90 	vmov	s15, r3
   10464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10468:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10470:	d836      	bhi.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10472:	f994 303c 	ldrsb.w	r3, [r4, #60]	; 0x3c
   10476:	ee07 3a90 	vmov	s15, r3
   1047a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1047e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   10482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10486:	f2c0 8081 	blt.w	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   1048a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1048e:	ee07 3a90 	vmov	s15, r3
   10492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10496:	eeb4 9ae7 	vcmpe.f32	s18, s15
   1049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1049e:	d875      	bhi.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   104a4:	ee07 3a90 	vmov	s15, r3
   104a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   104ac:	eeb4 9ae7 	vcmpe.f32	s18, s15
   104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104b4:	db6a      	blt.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104b6:	f1bb 0f00 	cmp.w	fp, #0
   104ba:	d011      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   104bc:	b995      	cbnz	r5, 104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   104be:	eef5 9a40 	vcmp.f32	s19, #0.0
   104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104c6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
   104c8:	f040 8189 	bne.w	107de <bsec_GasHumidityBaselineTracker_doStep+0x44a>
   104cc:	2d00      	cmp	r5, #0
   104ce:	f000 813d 	beq.w	1074c <bsec_GasHumidityBaselineTracker_doStep+0x3b8>
   104d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   104d4:	1aed      	subs	r5, r5, r3
   104d6:	f104 0308 	add.w	r3, r4, #8
   104da:	8525      	strh	r5, [r4, #40]	; 0x28
   104dc:	9301      	str	r3, [sp, #4]
   104de:	e05d      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   104e0:	2d00      	cmp	r5, #0
   104e2:	d058      	beq.n	10596 <bsec_GasHumidityBaselineTracker_doStep+0x202>
   104e4:	edd4 7a02 	vldr	s15, [r4, #8]
   104e8:	eef5 7a40 	vcmp.f32	s15, #0.0
   104ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104f0:	bf18      	it	ne
   104f2:	edcd 7a02 	vstrne	s15, [sp, #8]
   104f6:	edd4 7a04 	vldr	s15, [r4, #16]
   104fa:	bf04      	itt	eq
   104fc:	6833      	ldreq	r3, [r6, #0]
   104fe:	9302      	streq	r3, [sp, #8]
   10500:	eef5 7a40 	vcmp.f32	s15, #0.0
   10504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10508:	bf08      	it	eq
   1050a:	eddd 7a02 	vldreq	s15, [sp, #8]
   1050e:	6a23      	ldr	r3, [r4, #32]
   10510:	9306      	str	r3, [sp, #24]
   10512:	bf08      	it	eq
   10514:	ee77 7ae8 	vsubeq.f32	s15, s15, s17
   10518:	2208      	movs	r2, #8
   1051a:	edcd 7a04 	vstr	s15, [sp, #16]
   1051e:	edd4 7a03 	vldr	s15, [r4, #12]
   10522:	eef5 7a40 	vcmp.f32	s15, #0.0
   10526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1052a:	bf18      	it	ne
   1052c:	edcd 7a03 	vstrne	s15, [sp, #12]
   10530:	edd4 7a05 	vldr	s15, [r4, #20]
   10534:	bf04      	itt	eq
   10536:	6833      	ldreq	r3, [r6, #0]
   10538:	9303      	streq	r3, [sp, #12]
   1053a:	eef5 7a40 	vcmp.f32	s15, #0.0
   1053e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10542:	bf08      	it	eq
   10544:	eddd 7a03 	vldreq	s15, [sp, #12]
   10548:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1054a:	bf14      	ite	ne
   1054c:	edcd 7a05 	vstrne	s15, [sp, #20]
   10550:	ee77 8ae8 	vsubeq.f32	s17, s15, s17
   10554:	eb0d 0102 	add.w	r1, sp, r2
   10558:	4638      	mov	r0, r7
   1055a:	bf08      	it	eq
   1055c:	edcd 8a05 	vstreq	s17, [sp, #20]
   10560:	9307      	str	r3, [sp, #28]
   10562:	f023 f92d 	bl	337c0 <memcpy>
   10566:	2208      	movs	r2, #8
   10568:	a904      	add	r1, sp, #16
   1056a:	18b8      	adds	r0, r7, r2
   1056c:	f023 f928 	bl	337c0 <memcpy>
   10570:	4641      	mov	r1, r8
   10572:	f107 0010 	add.w	r0, r7, #16
   10576:	2208      	movs	r2, #8
   10578:	f023 f922 	bl	337c0 <memcpy>
   1057c:	b009      	add	sp, #36	; 0x24
   1057e:	ecbd 8b0a 	vpop	{d8-d12}
   10582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10586:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
   1058a:	e75f      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   1058c:	f1bb 0f00 	cmp.w	fp, #0
   10590:	d0a6      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10592:	2d00      	cmp	r5, #0
   10594:	d1a6      	bne.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   10596:	f104 0308 	add.w	r3, r4, #8
   1059a:	9301      	str	r3, [sp, #4]
   1059c:	9d01      	ldr	r5, [sp, #4]
   1059e:	eddf 9a63 	vldr	s19, [pc, #396]	; 1072c <bsec_GasHumidityBaselineTracker_doStep+0x398>
   105a2:	ed9f ba63 	vldr	s22, [pc, #396]	; 10730 <bsec_GasHumidityBaselineTracker_doStep+0x39c>
   105a6:	eddf aa63 	vldr	s21, [pc, #396]	; 10734 <bsec_GasHumidityBaselineTracker_doStep+0x3a0>
   105aa:	ed9f aa63 	vldr	s20, [pc, #396]	; 10738 <bsec_GasHumidityBaselineTracker_doStep+0x3a4>
   105ae:	971c      	str	r7, [sp, #112]	; 0x70
   105b0:	f104 091c 	add.w	r9, r4, #28
   105b4:	f104 0310 	add.w	r3, r4, #16
   105b8:	464f      	mov	r7, r9
   105ba:	9301      	str	r3, [sp, #4]
   105bc:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
   105c0:	46a9      	mov	r9, r5
   105c2:	ed99 7a00 	vldr	s14, [r9]
   105c6:	edd9 7a02 	vldr	s15, [r9, #8]
   105ca:	eeb4 7ac0 	vcmpe.f32	s14, s0
   105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105d2:	f240 8088 	bls.w	106e6 <bsec_GasHumidityBaselineTracker_doStep+0x352>
   105d6:	eef4 7ac0 	vcmpe.f32	s15, s0
   105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105de:	bfac      	ite	ge
   105e0:	2501      	movge	r5, #1
   105e2:	2500      	movlt	r5, #0
   105e4:	ee37 9a40 	vsub.f32	s18, s14, s0
   105e8:	ee30 8a67 	vsub.f32	s16, s0, s15
   105ec:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   105f8:	bf48      	it	mi
   105fa:	eeb0 9a69 	vmovmi.f32	s18, s19
   105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10602:	eef5 7a40 	vcmp.f32	s15, #0.0
   10606:	bf48      	it	mi
   10608:	eeb0 8a69 	vmovmi.f32	s16, s19
   1060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10610:	d16d      	bne.n	106ee <bsec_GasHumidityBaselineTracker_doStep+0x35a>
   10612:	eeb0 ca68 	vmov.f32	s24, s17
   10616:	eef0 0a48 	vmov.f32	s1, s16
   1061a:	eeb0 0a49 	vmov.f32	s0, s18
   1061e:	f01a fb35 	bl	2ac8c <fminf>
   10622:	ee30 0a00 	vadd.f32	s0, s0, s0
   10626:	eec0 7a0c 	vdiv.f32	s15, s0, s24
   1062a:	eef4 7a6b 	vcmp.f32	s15, s23
   1062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10632:	bfc8      	it	gt
   10634:	eef0 7a6b 	vmovgt.f32	s15, s23
   10638:	f1ba 0f00 	cmp.w	sl, #0
   1063c:	d042      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   1063e:	f1bb 0f00 	cmp.w	fp, #0
   10642:	d03f      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   10644:	edd9 6a06 	vldr	s13, [r9, #24]
   10648:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   1064c:	eef4 6a47 	vcmp.f32	s13, s14
   10650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10654:	d172      	bne.n	1073c <bsec_GasHumidityBaselineTracker_doStep+0x3a8>
   10656:	ee7b 7ae7 	vsub.f32	s15, s23, s15
   1065a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
   1065e:	ee67 7aa7 	vmul.f32	s15, s15, s15
   10662:	ee67 7a87 	vmul.f32	s15, s15, s14
   10666:	ee67 7aaa 	vmul.f32	s15, s15, s21
   1066a:	ee77 7a8a 	vadd.f32	s15, s15, s20
   1066e:	eef0 6a68 	vmov.f32	s13, s17
   10672:	ee48 6aa7 	vmla.f32	s13, s17, s15
   10676:	ed99 7a02 	vldr	s14, [r9, #8]
   1067a:	edd9 7a00 	vldr	s15, [r9]
   1067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10682:	eef4 6ae7 	vcmpe.f32	s13, s15
   10686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1068a:	dc39      	bgt.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   1068c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10694:	d034      	beq.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   10696:	2d00      	cmp	r5, #0
   10698:	d153      	bne.n	10742 <bsec_GasHumidityBaselineTracker_doStep+0x3ae>
   1069a:	7839      	ldrb	r1, [r7, #0]
   1069c:	29ff      	cmp	r1, #255	; 0xff
   1069e:	f000 80c2 	beq.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106a2:	3101      	adds	r1, #1
   106a4:	b2c9      	uxtb	r1, r1
   106a6:	7039      	strb	r1, [r7, #0]
   106a8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   106ac:	4288      	cmp	r0, r1
   106ae:	f240 80ba 	bls.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   106b6:	e00a      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   106b8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
   106bc:	e6c6      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106be:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   106c2:	e6c3      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106c4:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   106c8:	7039      	strb	r1, [r7, #0]
   106ca:	eef0 7a69 	vmov.f32	s15, s19
   106ce:	9b01      	ldr	r3, [sp, #4]
   106d0:	edc9 7a06 	vstr	s15, [r9, #24]
   106d4:	f109 0904 	add.w	r9, r9, #4
   106d8:	454b      	cmp	r3, r9
   106da:	f107 0701 	add.w	r7, r7, #1
   106de:	d004      	beq.n	106ea <bsec_GasHumidityBaselineTracker_doStep+0x356>
   106e0:	ed96 0a00 	vldr	s0, [r6]
   106e4:	e76d      	b.n	105c2 <bsec_GasHumidityBaselineTracker_doStep+0x22e>
   106e6:	2501      	movs	r5, #1
   106e8:	e77c      	b.n	105e4 <bsec_GasHumidityBaselineTracker_doStep+0x250>
   106ea:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   106ec:	e6fa      	b.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   106ee:	ee37 0a67 	vsub.f32	s0, s14, s15
   106f2:	eef0 0a68 	vmov.f32	s1, s17
   106f6:	f01a faab 	bl	2ac50 <fmaxf>
   106fa:	eeb0 ca40 	vmov.f32	s24, s0
   106fe:	e78a      	b.n	10616 <bsec_GasHumidityBaselineTracker_doStep+0x282>
   10700:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   10704:	7039      	strb	r1, [r7, #0]
   10706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1070a:	e7e0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1070c:	418cf5c3 	.word	0x418cf5c3
   10710:	43731eb8 	.word	0x43731eb8
   10714:	3dc678c1 	.word	0x3dc678c1
   10718:	40c39581 	.word	0x40c39581
   1071c:	42c80000 	.word	0x42c80000
   10720:	43889333 	.word	0x43889333
   10724:	4358b333 	.word	0x4358b333
   10728:	3c23d70a 	.word	0x3c23d70a
   1072c:	00000000 	.word	0x00000000
   10730:	3e99999a 	.word	0x3e99999a
   10734:	3e4ccccd 	.word	0x3e4ccccd
   10738:	3dcccccd 	.word	0x3dcccccd
   1073c:	eef0 7a4b 	vmov.f32	s15, s22
   10740:	e795      	b.n	1066e <bsec_GasHumidityBaselineTracker_doStep+0x2da>
   10742:	2100      	movs	r1, #0
   10744:	7039      	strb	r1, [r7, #0]
   10746:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1074a:	e7c0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1074c:	f104 0308 	add.w	r3, r4, #8
   10750:	9301      	str	r3, [sp, #4]
   10752:	461d      	mov	r5, r3
   10754:	f04f 0901 	mov.w	r9, #1
   10758:	edd5 7a00 	vldr	s15, [r5]
   1075c:	eef5 7a40 	vcmp.f32	s15, #0.0
   10760:	edd5 7a02 	vldr	s15, [r5, #8]
   10764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10768:	bf08      	it	eq
   1076a:	ed85 0a00 	vstreq	s0, [r5]
   1076e:	eef5 7a40 	vcmp.f32	s15, #0.0
   10772:	bf08      	it	eq
   10774:	ed96 0a00 	vldreq	s0, [r6]
   10778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1077c:	464b      	mov	r3, r9
   1077e:	4629      	mov	r1, r5
   10780:	f04f 0200 	mov.w	r2, #0
   10784:	4620      	mov	r0, r4
   10786:	d10c      	bne.n	107a2 <bsec_GasHumidityBaselineTracker_doStep+0x40e>
   10788:	edd5 7a00 	vldr	s15, [r5]
   1078c:	ee77 7ae8 	vsub.f32	s15, s15, s17
   10790:	eef4 7ac0 	vcmpe.f32	s15, s0
   10794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10798:	bfc4      	itt	gt
   1079a:	ed85 0a02 	vstrgt	s0, [r5, #8]
   1079e:	ed96 0a00 	vldrgt	s0, [r6]
   107a2:	f7ff fceb 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107a6:	edd5 7a02 	vldr	s15, [r5, #8]
   107aa:	eef5 7a40 	vcmp.f32	s15, #0.0
   107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   107b2:	d10a      	bne.n	107ca <bsec_GasHumidityBaselineTracker_doStep+0x436>
   107b4:	f1b9 0f02 	cmp.w	r9, #2
   107b8:	f105 0504 	add.w	r5, r5, #4
   107bc:	ed96 0a00 	vldr	s0, [r6]
   107c0:	f43f aeec 	beq.w	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   107c4:	f04f 0902 	mov.w	r9, #2
   107c8:	e7c6      	b.n	10758 <bsec_GasHumidityBaselineTracker_doStep+0x3c4>
   107ca:	464b      	mov	r3, r9
   107cc:	2201      	movs	r2, #1
   107ce:	f105 0108 	add.w	r1, r5, #8
   107d2:	ed96 0a00 	vldr	s0, [r6]
   107d6:	4620      	mov	r0, r4
   107d8:	f7ff fcd0 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107dc:	e7ea      	b.n	107b4 <bsec_GasHumidityBaselineTracker_doStep+0x420>
   107de:	eefd 7ae9 	vcvt.s32.f32	s15, s19
   107e2:	f104 0208 	add.w	r2, r4, #8
   107e6:	ee17 3a90 	vmov	r3, s15
   107ea:	9201      	str	r2, [sp, #4]
   107ec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   107f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   107f4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
   107f8:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
   107fc:	1aab      	subs	r3, r5, r2
   107fe:	b29b      	uxth	r3, r3
   10800:	ee07 3a90 	vmov	s15, r3
   10804:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   10808:	f01a fac8 	bl	2ad9c <expf>
   1080c:	ee88 0a00 	vdiv.f32	s0, s16, s0
   10810:	f01a fa76 	bl	2ad00 <roundf>
   10814:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10818:	ed96 0a00 	vldr	s0, [r6]
   1081c:	ee17 3a90 	vmov	r3, s15
   10820:	1aed      	subs	r5, r5, r3
   10822:	8525      	strh	r5, [r4, #40]	; 0x28
   10824:	e6ba      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   10826:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   1082a:	e750      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>

0001082c <bsec_GasHumidityBaselineTracker_getConfiguration>:
   1082c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10830:	b085      	sub	sp, #20
   10832:	ac04      	add	r4, sp, #16
   10834:	2507      	movs	r5, #7
   10836:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1083a:	4606      	mov	r6, r0
   1083c:	4617      	mov	r7, r2
   1083e:	7800      	ldrb	r0, [r0, #0]
   10840:	4622      	mov	r2, r4
   10842:	460d      	mov	r5, r1
   10844:	f001 f922 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10848:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1084c:	9003      	str	r0, [sp, #12]
   1084e:	b1d2      	cbz	r2, 10886 <bsec_GasHumidityBaselineTracker_getConfiguration+0x5a>
   10850:	2401      	movs	r4, #1
   10852:	f106 0954 	add.w	r9, r6, #84	; 0x54
   10856:	f106 083e 	add.w	r8, r6, #62	; 0x3e
   1085a:	1e63      	subs	r3, r4, #1
   1085c:	2b06      	cmp	r3, #6
   1085e:	d80d      	bhi.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   10860:	e8df f003 	tbb	[pc, r3]
   10864:	4953353f 	.word	0x4953353f
   10868:	222b      	.short	0x222b
   1086a:	04          	.byte	0x04
   1086b:	00          	.byte	0x00
   1086c:	463a      	mov	r2, r7
   1086e:	ab03      	add	r3, sp, #12
   10870:	4629      	mov	r1, r5
   10872:	4648      	mov	r0, r9
   10874:	f7ff f90a 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10878:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1087c:	3401      	adds	r4, #1
   1087e:	b2e4      	uxtb	r4, r4
   10880:	42a2      	cmp	r2, r4
   10882:	d2ea      	bcs.n	1085a <bsec_GasHumidityBaselineTracker_getConfiguration+0x2e>
   10884:	9803      	ldr	r0, [sp, #12]
   10886:	a904      	add	r1, sp, #16
   10888:	2202      	movs	r2, #2
   1088a:	f821 0d06 	strh.w	r0, [r1, #-6]!
   1088e:	a802      	add	r0, sp, #8
   10890:	f022 ff96 	bl	337c0 <memcpy>
   10894:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10898:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1089c:	9803      	ldr	r0, [sp, #12]
   1089e:	702a      	strb	r2, [r5, #0]
   108a0:	706b      	strb	r3, [r5, #1]
   108a2:	b005      	add	sp, #20
   108a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   108a8:	463a      	mov	r2, r7
   108aa:	ab03      	add	r3, sp, #12
   108ac:	4629      	mov	r1, r5
   108ae:	4640      	mov	r0, r8
   108b0:	f7ff f964 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   108b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108b8:	e7e0      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ba:	463a      	mov	r2, r7
   108bc:	ab03      	add	r3, sp, #12
   108be:	4629      	mov	r1, r5
   108c0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   108c4:	f7ff fae2 	bl	fe8c <bsec_k_Entity_serializeAndAdd>
   108c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108cc:	e7d6      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ce:	aa03      	add	r2, sp, #12
   108d0:	4639      	mov	r1, r7
   108d2:	4628      	mov	r0, r5
   108d4:	ed96 0a10 	vldr	s0, [r6, #64]	; 0x40
   108d8:	f7ff f990 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   108dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108e0:	e7cc      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108e2:	463a      	mov	r2, r7
   108e4:	ab03      	add	r3, sp, #12
   108e6:	4629      	mov	r1, r5
   108e8:	f106 0044 	add.w	r0, r6, #68	; 0x44
   108ec:	f7ff f8ce 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   108f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108f4:	e7c2      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108f6:	463a      	mov	r2, r7
   108f8:	ab03      	add	r3, sp, #12
   108fa:	4629      	mov	r1, r5
   108fc:	f106 004e 	add.w	r0, r6, #78	; 0x4e
   10900:	f7ff fa82 	bl	fe08 <bsec_j_Entity_serializeAndAdd>
   10904:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10908:	e7b8      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1090a:	463a      	mov	r2, r7
   1090c:	ab03      	add	r3, sp, #12
   1090e:	4629      	mov	r1, r5
   10910:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   10914:	f7ff fa36 	bl	fd84 <bsec_i_Entity_serializeAndAdd>
   10918:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1091c:	e7ae      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1091e:	bf00      	nop

00010920 <bsec_GasHumidityBaselineTracker_getState>:
   10920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10924:	b085      	sub	sp, #20
   10926:	ac04      	add	r4, sp, #16
   10928:	250b      	movs	r5, #11
   1092a:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1092e:	4606      	mov	r6, r0
   10930:	4617      	mov	r7, r2
   10932:	7800      	ldrb	r0, [r0, #0]
   10934:	4622      	mov	r2, r4
   10936:	460d      	mov	r5, r1
   10938:	f001 f8a8 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1093c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10940:	9003      	str	r0, [sp, #12]
   10942:	b1ea      	cbz	r2, 10980 <bsec_GasHumidityBaselineTracker_getState+0x60>
   10944:	2401      	movs	r4, #1
   10946:	f106 0920 	add.w	r9, r6, #32
   1094a:	f106 081c 	add.w	r8, r6, #28
   1094e:	1e63      	subs	r3, r4, #1
   10950:	2b0a      	cmp	r3, #10
   10952:	d810      	bhi.n	10976 <bsec_GasHumidityBaselineTracker_getState+0x56>
   10954:	e8df f003 	tbb	[pc, r3]
   10958:	7482909f 	.word	0x7482909f
   1095c:	404d5a67 	.word	0x404d5a67
   10960:	2533      	.short	0x2533
   10962:	06          	.byte	0x06
   10963:	00          	.byte	0x00
   10964:	463a      	mov	r2, r7
   10966:	ab03      	add	r3, sp, #12
   10968:	4629      	mov	r1, r5
   1096a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
   1096e:	f7ff f97d 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   10972:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10976:	3401      	adds	r4, #1
   10978:	b2e4      	uxtb	r4, r4
   1097a:	42a2      	cmp	r2, r4
   1097c:	d2e7      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   1097e:	9803      	ldr	r0, [sp, #12]
   10980:	a904      	add	r1, sp, #16
   10982:	2202      	movs	r2, #2
   10984:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10988:	a802      	add	r0, sp, #8
   1098a:	f022 ff19 	bl	337c0 <memcpy>
   1098e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10992:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10996:	9803      	ldr	r0, [sp, #12]
   10998:	702a      	strb	r2, [r5, #0]
   1099a:	706b      	strb	r3, [r5, #1]
   1099c:	b005      	add	sp, #20
   1099e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109a2:	aa03      	add	r2, sp, #12
   109a4:	4639      	mov	r1, r7
   109a6:	4628      	mov	r0, r5
   109a8:	ed96 0a01 	vldr	s0, [r6, #4]
   109ac:	f7ff f926 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   109b0:	3401      	adds	r4, #1
   109b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109b6:	b2e4      	uxtb	r4, r4
   109b8:	42a2      	cmp	r2, r4
   109ba:	d2c8      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109bc:	e7df      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109be:	463a      	mov	r2, r7
   109c0:	ab03      	add	r3, sp, #12
   109c2:	4629      	mov	r1, r5
   109c4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   109c6:	f7ff f8a1 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109ca:	3401      	adds	r4, #1
   109cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109d0:	b2e4      	uxtb	r4, r4
   109d2:	42a2      	cmp	r2, r4
   109d4:	d2bb      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109d6:	e7d2      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109d8:	463a      	mov	r2, r7
   109da:	ab03      	add	r3, sp, #12
   109dc:	4629      	mov	r1, r5
   109de:	8d30      	ldrh	r0, [r6, #40]	; 0x28
   109e0:	f7ff f894 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109e4:	3401      	adds	r4, #1
   109e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109ea:	b2e4      	uxtb	r4, r4
   109ec:	42a2      	cmp	r2, r4
   109ee:	d2ae      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109f0:	e7c5      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109f2:	463a      	mov	r2, r7
   109f4:	ab03      	add	r3, sp, #12
   109f6:	4629      	mov	r1, r5
   109f8:	4648      	mov	r0, r9
   109fa:	f7ff f847 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   109fe:	3401      	adds	r4, #1
   10a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a04:	b2e4      	uxtb	r4, r4
   10a06:	42a2      	cmp	r2, r4
   10a08:	d2a1      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a0a:	e7b8      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a0c:	463a      	mov	r2, r7
   10a0e:	ab03      	add	r3, sp, #12
   10a10:	4629      	mov	r1, r5
   10a12:	4640      	mov	r0, r8
   10a14:	f7ff f8b2 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   10a18:	3401      	adds	r4, #1
   10a1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a1e:	b2e4      	uxtb	r4, r4
   10a20:	42a2      	cmp	r2, r4
   10a22:	d294      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a24:	e7ab      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a26:	463a      	mov	r2, r7
   10a28:	ab03      	add	r3, sp, #12
   10a2a:	4629      	mov	r1, r5
   10a2c:	8870      	ldrh	r0, [r6, #2]
   10a2e:	f7ff f86d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a32:	3401      	adds	r4, #1
   10a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a38:	b2e4      	uxtb	r4, r4
   10a3a:	42a2      	cmp	r2, r4
   10a3c:	d287      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a3e:	e79e      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a40:	463a      	mov	r2, r7
   10a42:	ab03      	add	r3, sp, #12
   10a44:	4629      	mov	r1, r5
   10a46:	8b70      	ldrh	r0, [r6, #26]
   10a48:	f7ff f860 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a4c:	3401      	adds	r4, #1
   10a4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a52:	b2e4      	uxtb	r4, r4
   10a54:	42a2      	cmp	r2, r4
   10a56:	f4bf af7a 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a5a:	e790      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a5c:	463a      	mov	r2, r7
   10a5e:	ab03      	add	r3, sp, #12
   10a60:	4629      	mov	r1, r5
   10a62:	8b30      	ldrh	r0, [r6, #24]
   10a64:	f7ff f852 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a68:	3401      	adds	r4, #1
   10a6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a6e:	b2e4      	uxtb	r4, r4
   10a70:	42a2      	cmp	r2, r4
   10a72:	f4bf af6c 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a76:	e782      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a78:	463a      	mov	r2, r7
   10a7a:	ab03      	add	r3, sp, #12
   10a7c:	4629      	mov	r1, r5
   10a7e:	f106 0010 	add.w	r0, r6, #16
   10a82:	f7ff f803 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10a86:	3401      	adds	r4, #1
   10a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a8c:	b2e4      	uxtb	r4, r4
   10a8e:	42a2      	cmp	r2, r4
   10a90:	f4bf af5d 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a94:	e773      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a96:	463a      	mov	r2, r7
   10a98:	ab03      	add	r3, sp, #12
   10a9a:	4629      	mov	r1, r5
   10a9c:	f106 0008 	add.w	r0, r6, #8
   10aa0:	f7fe fff4 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10aa4:	3401      	adds	r4, #1
   10aa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10aaa:	b2e4      	uxtb	r4, r4
   10aac:	42a2      	cmp	r2, r4
   10aae:	f4bf af4e 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10ab2:	e764      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>

00010ab4 <bsec_GasHumidityBaselineTracker_setState>:
   10ab4:	2300      	movs	r3, #0
   10ab6:	2200      	movs	r2, #0
   10ab8:	2102      	movs	r1, #2
   10aba:	b410      	push	{r4}
   10abc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   10ac0:	8044      	strh	r4, [r0, #2]
   10ac2:	8302      	strh	r2, [r0, #24]
   10ac4:	8342      	strh	r2, [r0, #26]
   10ac6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   10aca:	6282      	str	r2, [r0, #40]	; 0x28
   10acc:	6083      	str	r3, [r0, #8]
   10ace:	6103      	str	r3, [r0, #16]
   10ad0:	60c3      	str	r3, [r0, #12]
   10ad2:	6143      	str	r3, [r0, #20]
   10ad4:	6043      	str	r3, [r0, #4]
   10ad6:	7701      	strb	r1, [r0, #28]
   10ad8:	7741      	strb	r1, [r0, #29]
   10ada:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
   10ade:	f85d 4b04 	ldr.w	r4, [sp], #4
   10ae2:	4770      	bx	lr

00010ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>:
   10ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10ae8:	4299      	cmp	r1, r3
   10aea:	d04f      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10aec:	8843      	ldrh	r3, [r0, #2]
   10aee:	428b      	cmp	r3, r1
   10af0:	d04c      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10af2:	b570      	push	{r4, r5, r6, lr}
   10af4:	4b3b      	ldr	r3, [pc, #236]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10af6:	4605      	mov	r5, r0
   10af8:	fba3 2301 	umull	r2, r3, r3, r1
   10afc:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   10b00:	b082      	sub	sp, #8
   10b02:	460c      	mov	r4, r1
   10b04:	8069      	strh	r1, [r5, #2]
   10b06:	ea4f 1353 	mov.w	r3, r3, lsr #5
   10b0a:	d067      	beq.n	10bdc <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xf8>
   10b0c:	d93f      	bls.n	10b8e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xaa>
   10b0e:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   10b12:	d03e      	beq.n	10b92 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xae>
   10b14:	f247 5230 	movw	r2, #30000	; 0x7530
   10b18:	4291      	cmp	r1, r2
   10b1a:	d150      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b1c:	4a32      	ldr	r2, [pc, #200]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10b1e:	9201      	str	r2, [sp, #4]
   10b20:	ae01      	add	r6, sp, #4
   10b22:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b24:	4630      	mov	r0, r6
   10b26:	f001 f85b 	bl	11be0 <bsec_log10>
   10b2a:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b2e:	f01a f883 	bl	2ac38 <fabsf>
   10b32:	eddf 7a2e 	vldr	s15, [pc, #184]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10b36:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10b3a:	ed85 0a01 	vstr	s0, [r5, #4]
   10b3e:	f247 5230 	movw	r2, #30000	; 0x7530
   10b42:	fbb2 f3f4 	udiv	r3, r2, r4
   10b46:	fb04 2213 	mls	r2, r4, r3, r2
   10b4a:	b292      	uxth	r2, r2
   10b4c:	b29b      	uxth	r3, r3
   10b4e:	b132      	cbz	r2, 10b5e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x7a>
   10b50:	f004 0101 	and.w	r1, r4, #1
   10b54:	eb01 0454 	add.w	r4, r1, r4, lsr #1
   10b58:	42a2      	cmp	r2, r4
   10b5a:	bfa8      	it	ge
   10b5c:	3301      	addge	r3, #1
   10b5e:	ee07 3a90 	vmov	s15, r3
   10b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10b66:	4630      	mov	r0, r6
   10b68:	edcd 7a01 	vstr	s15, [sp, #4]
   10b6c:	f001 f84c 	bl	11c08 <bsec_b_sqrt>
   10b70:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b74:	ee30 0a00 	vadd.f32	s0, s0, s0
   10b78:	f01a f866 	bl	2ac48 <floorf>
   10b7c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10b80:	ee17 3a90 	vmov	r3, s15
   10b84:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
   10b88:	b002      	add	sp, #8
   10b8a:	bd70      	pop	{r4, r5, r6, pc}
   10b8c:	4770      	bx	lr
   10b8e:	2964      	cmp	r1, #100	; 0x64
   10b90:	d115      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b92:	4a17      	ldr	r2, [pc, #92]	; (10bf0 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x10c>)
   10b94:	9201      	str	r2, [sp, #4]
   10b96:	ae01      	add	r6, sp, #4
   10b98:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b9a:	4630      	mov	r0, r6
   10b9c:	f001 f820 	bl	11be0 <bsec_log10>
   10ba0:	ed9d 0a01 	vldr	s0, [sp, #4]
   10ba4:	f01a f848 	bl	2ac38 <fabsf>
   10ba8:	eddf 7a10 	vldr	s15, [pc, #64]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10bac:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10bb0:	ed85 0a01 	vstr	s0, [r5, #4]
   10bb4:	2c00      	cmp	r4, #0
   10bb6:	d1c2      	bne.n	10b3e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x5a>
   10bb8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 10bf4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x110>
   10bbc:	e7d3      	b.n	10b66 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x82>
   10bbe:	4a09      	ldr	r2, [pc, #36]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10bc0:	4909      	ldr	r1, [pc, #36]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10bc2:	9101      	str	r1, [sp, #4]
   10bc4:	fba2 0204 	umull	r0, r2, r2, r4
   10bc8:	0952      	lsrs	r2, r2, #5
   10bca:	2064      	movs	r0, #100	; 0x64
   10bcc:	fb00 4212 	mls	r2, r0, r2, r4
   10bd0:	b292      	uxth	r2, r2
   10bd2:	2a31      	cmp	r2, #49	; 0x31
   10bd4:	bf84      	itt	hi
   10bd6:	3301      	addhi	r3, #1
   10bd8:	b29b      	uxthhi	r3, r3
   10bda:	e7dc      	b.n	10b96 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xb2>
   10bdc:	4a06      	ldr	r2, [pc, #24]	; (10bf8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x114>)
   10bde:	9201      	str	r2, [sp, #4]
   10be0:	e79e      	b.n	10b20 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x3c>
   10be2:	bf00      	nop
   10be4:	51eb851f 	.word	0x51eb851f
   10be8:	3f464c30 	.word	0x3f464c30
   10bec:	3e632c50 	.word	0x3e632c50
   10bf0:	3f19999a 	.word	0x3f19999a
   10bf4:	477fff00 	.word	0x477fff00
   10bf8:	3f23d70a 	.word	0x3f23d70a

00010bfc <bsec_b_GasHumidityBaselineTracker_setState>:
   10bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c00:	b086      	sub	sp, #24
   10c02:	ab04      	add	r3, sp, #16
   10c04:	ae05      	add	r6, sp, #20
   10c06:	4605      	mov	r5, r0
   10c08:	7800      	ldrb	r0, [r0, #0]
   10c0a:	9300      	str	r3, [sp, #0]
   10c0c:	9601      	str	r6, [sp, #4]
   10c0e:	f10d 030f 	add.w	r3, sp, #15
   10c12:	460f      	mov	r7, r1
   10c14:	f000 ff0c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10c18:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c1c:	bb1b      	cbnz	r3, 10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10c1e:	2401      	movs	r4, #1
   10c20:	f105 0a20 	add.w	sl, r5, #32
   10c24:	f105 091c 	add.w	r9, r5, #28
   10c28:	f105 0810 	add.w	r8, r5, #16
   10c2c:	1ea3      	subs	r3, r4, #2
   10c2e:	2b09      	cmp	r3, #9
   10c30:	d806      	bhi.n	10c40 <bsec_b_GasHumidityBaselineTracker_setState+0x44>
   10c32:	e8df f003 	tbb	[pc, r3]
   10c36:	474d      	.short	0x474d
   10c38:	2f353b41 	.word	0x2f353b41
   10c3c:	101c2329 	.word	0x101c2329
   10c40:	f105 0208 	add.w	r2, r5, #8
   10c44:	4631      	mov	r1, r6
   10c46:	4638      	mov	r0, r7
   10c48:	f7fe ff06 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c4c:	2c0b      	cmp	r4, #11
   10c4e:	d045      	beq.n	10cdc <bsec_b_GasHumidityBaselineTracker_setState+0xe0>
   10c50:	3401      	adds	r4, #1
   10c52:	b2e4      	uxtb	r4, r4
   10c54:	e7ea      	b.n	10c2c <bsec_b_GasHumidityBaselineTracker_setState+0x30>
   10c56:	4631      	mov	r1, r6
   10c58:	4638      	mov	r0, r7
   10c5a:	f7fe fff3 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   10c5e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c62:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
   10c66:	4618      	mov	r0, r3
   10c68:	b006      	add	sp, #24
   10c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c6e:	4631      	mov	r1, r6
   10c70:	4638      	mov	r0, r7
   10c72:	f7fe ffa9 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   10c76:	ed85 0a01 	vstr	s0, [r5, #4]
   10c7a:	e7e9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c7c:	4631      	mov	r1, r6
   10c7e:	4638      	mov	r0, r7
   10c80:	f7fe ff2c 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c84:	8568      	strh	r0, [r5, #42]	; 0x2a
   10c86:	e7e3      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c88:	4631      	mov	r1, r6
   10c8a:	4638      	mov	r0, r7
   10c8c:	f7fe ff26 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c90:	8528      	strh	r0, [r5, #40]	; 0x28
   10c92:	e7dd      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c94:	4652      	mov	r2, sl
   10c96:	4631      	mov	r1, r6
   10c98:	4638      	mov	r0, r7
   10c9a:	f7fe fedd 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c9e:	e7d7      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10ca0:	464a      	mov	r2, r9
   10ca2:	4631      	mov	r1, r6
   10ca4:	4638      	mov	r0, r7
   10ca6:	f7fe ff53 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   10caa:	e7d1      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cac:	4631      	mov	r1, r6
   10cae:	4638      	mov	r0, r7
   10cb0:	f7fe ff14 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cb4:	8068      	strh	r0, [r5, #2]
   10cb6:	e7cb      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cb8:	4631      	mov	r1, r6
   10cba:	4638      	mov	r0, r7
   10cbc:	f7fe ff0e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cc0:	8368      	strh	r0, [r5, #26]
   10cc2:	e7c5      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cc4:	4631      	mov	r1, r6
   10cc6:	4638      	mov	r0, r7
   10cc8:	f7fe ff08 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10ccc:	8328      	strh	r0, [r5, #24]
   10cce:	e7bf      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cd0:	4642      	mov	r2, r8
   10cd2:	4631      	mov	r1, r6
   10cd4:	4638      	mov	r0, r7
   10cd6:	f7fe febf 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10cda:	e7b9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cdc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10ce0:	e7c1      	b.n	10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10ce2:	bf00      	nop

00010ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>:
   10ce4:	b510      	push	{r4, lr}
   10ce6:	2303      	movs	r3, #3
   10ce8:	4604      	mov	r4, r0
   10cea:	f800 3b04 	strb.w	r3, [r0], #4
   10cee:	f001 f80b 	bl	11d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>
   10cf2:	4620      	mov	r0, r4
   10cf4:	f000 ff94 	bl	11c20 <bsec_Channel_reset>
   10cf8:	4620      	mov	r0, r4
   10cfa:	bd10      	pop	{r4, pc}

00010cfc <bsec_GasHumidityPreProcessor_configure>:
   10cfc:	b570      	push	{r4, r5, r6, lr}
   10cfe:	b086      	sub	sp, #24
   10d00:	ab04      	add	r3, sp, #16
   10d02:	ac05      	add	r4, sp, #20
   10d04:	4605      	mov	r5, r0
   10d06:	7800      	ldrb	r0, [r0, #0]
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	9401      	str	r4, [sp, #4]
   10d0c:	f10d 030f 	add.w	r3, sp, #15
   10d10:	460e      	mov	r6, r1
   10d12:	f000 fe8d 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10d16:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d1a:	b938      	cbnz	r0, 10d2c <bsec_GasHumidityPreProcessor_configure+0x30>
   10d1c:	4630      	mov	r0, r6
   10d1e:	f105 0220 	add.w	r2, r5, #32
   10d22:	4621      	mov	r1, r4
   10d24:	f7fe fe58 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10d28:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d2c:	b006      	add	sp, #24
   10d2e:	bd70      	pop	{r4, r5, r6, pc}

00010d30 <bsec_GasHumidityPreProcessor_doStep>:
   10d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d34:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   10d38:	ed90 7a04 	vldr	s14, [r0, #16]
   10d3c:	ed2d 8b04 	vpush	{d8-d9}
   10d40:	eeb4 0a67 	vcmp.f32	s0, s15
   10d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d48:	eeb0 8a40 	vmov.f32	s16, s0
   10d4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10d50:	bf98      	it	ls
   10d52:	eeb0 8a67 	vmovls.f32	s16, s15
   10d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d5a:	b088      	sub	sp, #32
   10d5c:	4604      	mov	r4, r0
   10d5e:	eeb0 9a60 	vmov.f32	s18, s1
   10d62:	eef0 8a41 	vmov.f32	s17, s2
   10d66:	460f      	mov	r7, r1
   10d68:	4616      	mov	r6, r2
   10d6a:	461d      	mov	r5, r3
   10d6c:	d033      	beq.n	10dd6 <bsec_GasHumidityPreProcessor_doStep+0xa6>
   10d6e:	f10d 0804 	add.w	r8, sp, #4
   10d72:	4640      	mov	r0, r8
   10d74:	ed8d 8a01 	vstr	s16, [sp, #4]
   10d78:	f000 ff32 	bl	11be0 <bsec_log10>
   10d7c:	eddd 7a01 	vldr	s15, [sp, #4]
   10d80:	ed8d 9a03 	vstr	s18, [sp, #12]
   10d84:	1d20      	adds	r0, r4, #4
   10d86:	edcd 8a04 	vstr	s17, [sp, #16]
   10d8a:	edcd 7a02 	vstr	s15, [sp, #8]
   10d8e:	ab05      	add	r3, sp, #20
   10d90:	3410      	adds	r4, #16
   10d92:	a903      	add	r1, sp, #12
   10d94:	ed90 7a03 	vldr	s14, [r0, #12]
   10d98:	edd0 6a00 	vldr	s13, [r0]
   10d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10da0:	3004      	adds	r0, #4
   10da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   10da6:	42a0      	cmp	r0, r4
   10da8:	ee77 7a87 	vadd.f32	s15, s15, s14
   10dac:	ece3 7a01 	vstmia	r3!, {s15}
   10db0:	d002      	beq.n	10db8 <bsec_GasHumidityPreProcessor_doStep+0x88>
   10db2:	ecf1 7a01 	vldmia	r1!, {s15}
   10db6:	e7ed      	b.n	10d94 <bsec_GasHumidityPreProcessor_doStep+0x64>
   10db8:	a905      	add	r1, sp, #20
   10dba:	220c      	movs	r2, #12
   10dbc:	f022 fd00 	bl	337c0 <memcpy>
   10dc0:	9905      	ldr	r1, [sp, #20]
   10dc2:	9a06      	ldr	r2, [sp, #24]
   10dc4:	9b07      	ldr	r3, [sp, #28]
   10dc6:	6039      	str	r1, [r7, #0]
   10dc8:	6032      	str	r2, [r6, #0]
   10dca:	602b      	str	r3, [r5, #0]
   10dcc:	b008      	add	sp, #32
   10dce:	ecbd 8b04 	vpop	{d8-d9}
   10dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dd6:	ee18 3a10 	vmov	r3, s16
   10dda:	f10d 0820 	add.w	r8, sp, #32
   10dde:	f848 3d1c 	str.w	r3, [r8, #-28]!
   10de2:	4640      	mov	r0, r8
   10de4:	f000 fefc 	bl	11be0 <bsec_log10>
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	ed84 9a05 	vstr	s18, [r4, #20]
   10dee:	edc4 8a06 	vstr	s17, [r4, #24]
   10df2:	6123      	str	r3, [r4, #16]
   10df4:	e7bd      	b.n	10d72 <bsec_GasHumidityPreProcessor_doStep+0x42>
   10df6:	bf00      	nop

00010df8 <bsec_GasHumidityPreProcessor_setState>:
   10df8:	b570      	push	{r4, r5, r6, lr}
   10dfa:	b088      	sub	sp, #32
   10dfc:	ab03      	add	r3, sp, #12
   10dfe:	ad04      	add	r5, sp, #16
   10e00:	4604      	mov	r4, r0
   10e02:	7800      	ldrb	r0, [r0, #0]
   10e04:	9300      	str	r3, [sp, #0]
   10e06:	9501      	str	r5, [sp, #4]
   10e08:	f10d 030b 	add.w	r3, sp, #11
   10e0c:	460e      	mov	r6, r1
   10e0e:	f000 fe0f 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10e12:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e16:	b960      	cbnz	r0, 10e32 <bsec_GasHumidityPreProcessor_setState+0x3a>
   10e18:	4629      	mov	r1, r5
   10e1a:	4630      	mov	r0, r6
   10e1c:	aa05      	add	r2, sp, #20
   10e1e:	f7fe fddb 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10e22:	a905      	add	r1, sp, #20
   10e24:	f104 0010 	add.w	r0, r4, #16
   10e28:	220c      	movs	r2, #12
   10e2a:	f022 fcc9 	bl	337c0 <memcpy>
   10e2e:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e32:	b008      	add	sp, #32
   10e34:	bd70      	pop	{r4, r5, r6, pc}
   10e36:	bf00      	nop

00010e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>:
   10e38:	ee07 1a90 	vmov	s15, r1
   10e3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 10e90 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x58>
   10e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10e44:	b500      	push	{lr}
   10e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
   10e4a:	b085      	sub	sp, #20
   10e4c:	f100 0320 	add.w	r3, r0, #32
   10e50:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   10e54:	aa01      	add	r2, sp, #4
   10e56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   10e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
   10e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10e62:	ecb3 6a01 	vldmia	r3!, {s12}
   10e66:	eec6 7a26 	vdiv.f32	s15, s12, s13
   10e6a:	eef4 7a47 	vcmp.f32	s15, s14
   10e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e72:	bfc8      	it	gt
   10e74:	eef0 7a47 	vmovgt.f32	s15, s14
   10e78:	428b      	cmp	r3, r1
   10e7a:	ece2 7a01 	vstmia	r2!, {s15}
   10e7e:	d1f0      	bne.n	10e62 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x2a>
   10e80:	a901      	add	r1, sp, #4
   10e82:	3004      	adds	r0, #4
   10e84:	f000 fef0 	bl	11c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>
   10e88:	b005      	add	sp, #20
   10e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e8e:	bf00      	nop
   10e90:	42c80000 	.word	0x42c80000

00010e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>:
   10e94:	b510      	push	{r4, lr}
   10e96:	4604      	mov	r4, r0
   10e98:	f800 1b04 	strb.w	r1, [r0], #4
   10e9c:	f000 ff44 	bl	11d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>
   10ea0:	4620      	mov	r0, r4
   10ea2:	f000 fed7 	bl	11c54 <bsec_b_Channel_reset>
   10ea6:	4620      	mov	r0, r4
   10ea8:	bd10      	pop	{r4, pc}
   10eaa:	bf00      	nop

00010eac <bsec_HumidityTemperatureCorrector_configure>:
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	b086      	sub	sp, #24
   10eb0:	ab04      	add	r3, sp, #16
   10eb2:	ac05      	add	r4, sp, #20
   10eb4:	4605      	mov	r5, r0
   10eb6:	7800      	ldrb	r0, [r0, #0]
   10eb8:	9300      	str	r3, [sp, #0]
   10eba:	9401      	str	r4, [sp, #4]
   10ebc:	f10d 030f 	add.w	r3, sp, #15
   10ec0:	460e      	mov	r6, r1
   10ec2:	f000 fdb5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10ec6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10eca:	b938      	cbnz	r0, 10edc <bsec_HumidityTemperatureCorrector_configure+0x30>
   10ecc:	4630      	mov	r0, r6
   10ece:	f105 0210 	add.w	r2, r5, #16
   10ed2:	4621      	mov	r1, r4
   10ed4:	f7ff f8ec 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   10ed8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10edc:	b006      	add	sp, #24
   10ede:	bd70      	pop	{r4, r5, r6, pc}

00010ee0 <bsec_HumidityTemperatureCorrector_doStep>:
   10ee0:	b508      	push	{r3, lr}
   10ee2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   10ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eea:	ed2d 8b04 	vpush	{d8-d9}
   10eee:	4603      	mov	r3, r0
   10ef0:	eeb0 9a60 	vmov.f32	s18, s1
   10ef4:	d937      	bls.n	10f66 <bsec_HumidityTemperatureCorrector_doStep+0x86>
   10ef6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10efa:	eeb4 1a67 	vcmp.f32	s2, s15
   10efe:	eef0 8a41 	vmov.f32	s17, s2
   10f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f06:	bfc8      	it	gt
   10f08:	eef0 8a67 	vmovgt.f32	s17, s15
   10f0c:	edd3 7a02 	vldr	s15, [r3, #8]
   10f10:	eef5 7a40 	vcmp.f32	s15, #0.0
   10f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f18:	bf08      	it	eq
   10f1a:	eef0 7a40 	vmoveq.f32	s15, s0
   10f1e:	ee30 8a67 	vsub.f32	s16, s0, s15
   10f22:	ed93 0a01 	vldr	s0, [r3, #4]
   10f26:	ee28 8a00 	vmul.f32	s16, s16, s0
   10f2a:	f103 0010 	add.w	r0, r3, #16
   10f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
   10f32:	eeb0 0a68 	vmov.f32	s0, s17
   10f36:	ed83 8a02 	vstr	s16, [r3, #8]
   10f3a:	f000 fe5b 	bl	11bf4 <bsec_polyval>
   10f3e:	eef0 0a49 	vmov.f32	s1, s18
   10f42:	ee30 1a28 	vadd.f32	s2, s0, s17
   10f46:	eeb0 0a48 	vmov.f32	s0, s16
   10f4a:	f000 fdaf 	bl	11aac <bsec_convertHumidity>
   10f4e:	ecbd 8b04 	vpop	{d8-d9}
   10f52:	eddf 7a06 	vldr	s15, [pc, #24]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10f56:	eeb4 0a67 	vcmp.f32	s0, s15
   10f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f5e:	bfc8      	it	gt
   10f60:	eeb0 0a67 	vmovgt.f32	s0, s15
   10f64:	bd08      	pop	{r3, pc}
   10f66:	eddf 8a02 	vldr	s17, [pc, #8]	; 10f70 <bsec_HumidityTemperatureCorrector_doStep+0x90>
   10f6a:	e7cf      	b.n	10f0c <bsec_HumidityTemperatureCorrector_doStep+0x2c>
   10f6c:	42c80000 	.word	0x42c80000
   10f70:	38d1b717 	.word	0x38d1b717

00010f74 <bsec_HumidityTemperatureCorrector_getConfiguration>:
   10f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f76:	b085      	sub	sp, #20
   10f78:	ae04      	add	r6, sp, #16
   10f7a:	2401      	movs	r4, #1
   10f7c:	f806 4d09 	strb.w	r4, [r6, #-9]!
   10f80:	4605      	mov	r5, r0
   10f82:	4617      	mov	r7, r2
   10f84:	7800      	ldrb	r0, [r0, #0]
   10f86:	4632      	mov	r2, r6
   10f88:	460e      	mov	r6, r1
   10f8a:	f000 fd7f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f92:	9003      	str	r0, [sp, #12]
   10f94:	b1a3      	cbz	r3, 10fc0 <bsec_HumidityTemperatureCorrector_getConfiguration+0x4c>
   10f96:	3510      	adds	r5, #16
   10f98:	e003      	b.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10f9a:	3401      	adds	r4, #1
   10f9c:	b2e4      	uxtb	r4, r4
   10f9e:	42a3      	cmp	r3, r4
   10fa0:	d30d      	bcc.n	10fbe <bsec_HumidityTemperatureCorrector_getConfiguration+0x4a>
   10fa2:	2c01      	cmp	r4, #1
   10fa4:	d1f9      	bne.n	10f9a <bsec_HumidityTemperatureCorrector_getConfiguration+0x26>
   10fa6:	ab03      	add	r3, sp, #12
   10fa8:	463a      	mov	r2, r7
   10faa:	4631      	mov	r1, r6
   10fac:	4628      	mov	r0, r5
   10fae:	f7fe ffe3 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   10fb2:	3401      	adds	r4, #1
   10fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fb8:	b2e4      	uxtb	r4, r4
   10fba:	42a3      	cmp	r3, r4
   10fbc:	d2f1      	bcs.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10fbe:	9803      	ldr	r0, [sp, #12]
   10fc0:	a904      	add	r1, sp, #16
   10fc2:	2202      	movs	r2, #2
   10fc4:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10fc8:	a802      	add	r0, sp, #8
   10fca:	f022 fbf9 	bl	337c0 <memcpy>
   10fce:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10fd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10fd6:	9803      	ldr	r0, [sp, #12]
   10fd8:	7032      	strb	r2, [r6, #0]
   10fda:	7073      	strb	r3, [r6, #1]
   10fdc:	b005      	add	sp, #20
   10fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe0 <bsec_HumidityTemperatureCorrector_getState>:
   10fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fe2:	b085      	sub	sp, #20
   10fe4:	ad04      	add	r5, sp, #16
   10fe6:	2401      	movs	r4, #1
   10fe8:	f805 4d09 	strb.w	r4, [r5, #-9]!
   10fec:	4606      	mov	r6, r0
   10fee:	4617      	mov	r7, r2
   10ff0:	7800      	ldrb	r0, [r0, #0]
   10ff2:	462a      	mov	r2, r5
   10ff4:	460d      	mov	r5, r1
   10ff6:	f000 fd49 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ffe:	9003      	str	r0, [sp, #12]
   11000:	b923      	cbnz	r3, 1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   11002:	e013      	b.n	1102c <bsec_HumidityTemperatureCorrector_getState+0x4c>
   11004:	3401      	adds	r4, #1
   11006:	b2e4      	uxtb	r4, r4
   11008:	42a3      	cmp	r3, r4
   1100a:	d30e      	bcc.n	1102a <bsec_HumidityTemperatureCorrector_getState+0x4a>
   1100c:	2c01      	cmp	r4, #1
   1100e:	d1f9      	bne.n	11004 <bsec_HumidityTemperatureCorrector_getState+0x24>
   11010:	aa03      	add	r2, sp, #12
   11012:	4639      	mov	r1, r7
   11014:	4628      	mov	r0, r5
   11016:	ed96 0a02 	vldr	s0, [r6, #8]
   1101a:	f7fe fdef 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1101e:	3401      	adds	r4, #1
   11020:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11024:	b2e4      	uxtb	r4, r4
   11026:	42a3      	cmp	r3, r4
   11028:	d2f0      	bcs.n	1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   1102a:	9803      	ldr	r0, [sp, #12]
   1102c:	a904      	add	r1, sp, #16
   1102e:	2202      	movs	r2, #2
   11030:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11034:	a802      	add	r0, sp, #8
   11036:	f022 fbc3 	bl	337c0 <memcpy>
   1103a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1103e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11042:	9803      	ldr	r0, [sp, #12]
   11044:	702a      	strb	r2, [r5, #0]
   11046:	706b      	strb	r3, [r5, #1]
   11048:	b005      	add	sp, #20
   1104a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001104c <bsec_HumidityTemperatureCorrector_setState>:
   1104c:	b570      	push	{r4, r5, r6, lr}
   1104e:	b086      	sub	sp, #24
   11050:	ab04      	add	r3, sp, #16
   11052:	ad05      	add	r5, sp, #20
   11054:	4604      	mov	r4, r0
   11056:	7800      	ldrb	r0, [r0, #0]
   11058:	9300      	str	r3, [sp, #0]
   1105a:	9501      	str	r5, [sp, #4]
   1105c:	f10d 030f 	add.w	r3, sp, #15
   11060:	460e      	mov	r6, r1
   11062:	f000 fce5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11066:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1106a:	b938      	cbnz	r0, 1107c <bsec_HumidityTemperatureCorrector_setState+0x30>
   1106c:	4630      	mov	r0, r6
   1106e:	4629      	mov	r1, r5
   11070:	f7fe fdaa 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11074:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11078:	ed84 0a02 	vstr	s0, [r4, #8]
   1107c:	b006      	add	sp, #24
   1107e:	bd70      	pop	{r4, r5, r6, pc}

00011080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>:
   11080:	ee07 1a90 	vmov	s15, r1
   11084:	eddf 6a1e 	vldr	s13, [pc, #120]	; 11100 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x80>
   11088:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 11104 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x84>
   1108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   11090:	b510      	push	{r4, lr}
   11092:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11096:	4604      	mov	r4, r0
   11098:	ed2d 8b02 	vpush	{d8}
   1109c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   110a0:	ee67 7a87 	vmul.f32	s15, s15, s14
   110a4:	b082      	sub	sp, #8
   110a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   110aa:	ee80 0a27 	vdiv.f32	s0, s0, s15
   110ae:	f019 fded 	bl	2ac8c <fminf>
   110b2:	eef0 8a40 	vmov.f32	s17, s0
   110b6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 11108 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x88>
   110ba:	ee28 0a80 	vmul.f32	s0, s17, s0
   110be:	f019 fe23 	bl	2ad08 <sinf>
   110c2:	ee20 8a00 	vmul.f32	s16, s0, s0
   110c6:	a802      	add	r0, sp, #8
   110c8:	ee68 7a08 	vmul.f32	s15, s16, s16
   110cc:	ee77 7a88 	vadd.f32	s15, s15, s16
   110d0:	ed60 7a01 	vstmdb	r0!, {s15}
   110d4:	f000 fd98 	bl	11c08 <bsec_b_sqrt>
   110d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   110dc:	eef4 8a67 	vcmp.f32	s17, s15
   110e0:	ed9d 0a01 	vldr	s0, [sp, #4]
   110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110e8:	bf1c      	itt	ne
   110ea:	ee70 7a48 	vsubne.f32	s15, s0, s16
   110ee:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   110f2:	edc4 7a01 	vstr	s15, [r4, #4]
   110f6:	b002      	add	sp, #8
   110f8:	ecbd 8b02 	vpop	{d8}
   110fc:	bd10      	pop	{r4, pc}
   110fe:	bf00      	nop
   11100:	42c80000 	.word	0x42c80000
   11104:	3c50d499 	.word	0x3c50d499
   11108:	3fc90fdb 	.word	0x3fc90fdb

0001110c <bsec_IaqEstimator_IaqEstimator>:
   1110c:	b430      	push	{r4, r5}
   1110e:	4913      	ldr	r1, [pc, #76]	; (1115c <bsec_IaqEstimator_IaqEstimator+0x50>)
   11110:	6301      	str	r1, [r0, #48]	; 0x30
   11112:	2502      	movs	r5, #2
   11114:	2400      	movs	r4, #0
   11116:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1111a:	7005      	strb	r5, [r0, #0]
   1111c:	7104      	strb	r4, [r0, #4]
   1111e:	25e1      	movs	r5, #225	; 0xe1
   11120:	2419      	movs	r4, #25
   11122:	8041      	strh	r1, [r0, #2]
   11124:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   11128:	80c5      	strh	r5, [r0, #6]
   1112a:	7204      	strb	r4, [r0, #8]
   1112c:	4d0c      	ldr	r5, [pc, #48]	; (11160 <bsec_IaqEstimator_IaqEstimator+0x54>)
   1112e:	6101      	str	r1, [r0, #16]
   11130:	f44f 74c8 	mov.w	r4, #400	; 0x190
   11134:	490b      	ldr	r1, [pc, #44]	; (11164 <bsec_IaqEstimator_IaqEstimator+0x58>)
   11136:	6145      	str	r5, [r0, #20]
   11138:	2200      	movs	r2, #0
   1113a:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
   1113e:	8304      	strh	r4, [r0, #24]
   11140:	61c1      	str	r1, [r0, #28]
   11142:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11146:	4908      	ldr	r1, [pc, #32]	; (11168 <bsec_IaqEstimator_IaqEstimator+0x5c>)
   11148:	6205      	str	r5, [r0, #32]
   1114a:	8484      	strh	r4, [r0, #36]	; 0x24
   1114c:	60c2      	str	r2, [r0, #12]
   1114e:	6282      	str	r2, [r0, #40]	; 0x28
   11150:	62c2      	str	r2, [r0, #44]	; 0x2c
   11152:	6341      	str	r1, [r0, #52]	; 0x34
   11154:	6381      	str	r1, [r0, #56]	; 0x38
   11156:	bc30      	pop	{r4, r5}
   11158:	4770      	bx	lr
   1115a:	bf00      	nop
   1115c:	428551ec 	.word	0x428551ec
   11160:	41200000 	.word	0x41200000
   11164:	41700000 	.word	0x41700000
   11168:	41c80000 	.word	0x41c80000

0001116c <bsec_IaqEstimator_doStep>:
   1116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11170:	ed91 7a00 	vldr	s14, [r1]
   11174:	edd1 6a02 	vldr	s13, [r1, #8]
   11178:	ed91 5a03 	vldr	s10, [r1, #12]
   1117c:	edd1 7a01 	vldr	s15, [r1, #4]
   11180:	ed2d 8b06 	vpush	{d8-d10}
   11184:	ee37 9a40 	vsub.f32	s18, s14, s0
   11188:	ee37 7a66 	vsub.f32	s14, s14, s13
   1118c:	460d      	mov	r5, r1
   1118e:	eec9 5a07 	vdiv.f32	s11, s18, s14
   11192:	88c1      	ldrh	r1, [r0, #6]
   11194:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11196:	469a      	mov	sl, r3
   11198:	8843      	ldrh	r3, [r0, #2]
   1119a:	4604      	mov	r4, r0
   1119c:	4691      	mov	r9, r2
   1119e:	e9dd 870e 	ldrd	r8, r7, [sp, #56]	; 0x38
   111a2:	ee06 1a10 	vmov	s12, r1
   111a6:	7a01      	ldrb	r1, [r0, #8]
   111a8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   111ac:	ee06 1a90 	vmov	s13, r1
   111b0:	ee25 6a86 	vmul.f32	s12, s11, s12
   111b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
   111b8:	ee09 3a90 	vmov	s19, r3
   111bc:	7903      	ldrb	r3, [r0, #4]
   111be:	eeb0 aa60 	vmov.f32	s20, s1
   111c2:	ee76 0a26 	vadd.f32	s1, s12, s13
   111c6:	ee06 3a90 	vmov	s13, r3
   111ca:	ee37 7ac0 	vsub.f32	s14, s15, s0
   111ce:	ee77 7ac5 	vsub.f32	s15, s15, s10
   111d2:	eeb8 0a66 	vcvt.f32.u32	s0, s13
   111d6:	eec7 8a27 	vdiv.f32	s17, s14, s15
   111da:	f019 fd39 	bl	2ac50 <fmaxf>
   111de:	eef8 9a69 	vcvt.f32.u32	s19, s19
   111e2:	eef0 0a40 	vmov.f32	s1, s0
   111e6:	eeb0 0a69 	vmov.f32	s0, s19
   111ea:	f019 fd4f 	bl	2ac8c <fminf>
   111ee:	7a23      	ldrb	r3, [r4, #8]
   111f0:	edd4 7a03 	vldr	s15, [r4, #12]
   111f4:	ee00 3a90 	vmov	s1, r3
   111f8:	7923      	ldrb	r3, [r4, #4]
   111fa:	ee29 9a27 	vmul.f32	s18, s18, s15
   111fe:	eef0 9a40 	vmov.f32	s19, s0
   11202:	eef8 0a60 	vcvt.f32.u32	s1, s1
   11206:	ee00 3a10 	vmov	s0, r3
   1120a:	ee79 0a20 	vadd.f32	s1, s18, s1
   1120e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   11212:	f019 fd1d 	bl	2ac50 <fmaxf>
   11216:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1121a:	eeb4 aae7 	vcmpe.f32	s20, s15
   1121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11222:	eeb0 8a40 	vmov.f32	s16, s0
   11226:	d45f      	bmi.n	112e8 <bsec_IaqEstimator_doStep+0x17c>
   11228:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
   1122c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   11230:	edc9 9a00 	vstr	s19, [r9]
   11234:	692b      	ldr	r3, [r5, #16]
   11236:	8b22      	ldrh	r2, [r4, #24]
   11238:	f8c9 3004 	str.w	r3, [r9, #4]
   1123c:	ed8a 8a00 	vstr	s16, [sl]
   11240:	692b      	ldr	r3, [r5, #16]
   11242:	f8ca 3004 	str.w	r3, [sl, #4]
   11246:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
   1124a:	ee00 2a10 	vmov	s0, r2
   1124e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11256:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   1125a:	db40      	blt.n	112de <bsec_IaqEstimator_doStep+0x172>
   1125c:	edd4 0a04 	vldr	s1, [r4, #16]
   11260:	ee68 0a20 	vmul.f32	s1, s16, s1
   11264:	ee70 0a80 	vadd.f32	s1, s1, s0
   11268:	f019 fcf2 	bl	2ac50 <fmaxf>
   1126c:	ed88 0a00 	vstr	s0, [r8]
   11270:	692a      	ldr	r2, [r5, #16]
   11272:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11274:	f8c8 2004 	str.w	r2, [r8, #4]
   11278:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   1127c:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
   11280:	ee28 8a27 	vmul.f32	s16, s16, s15
   11284:	ee07 3a90 	vmov	s15, r3
   11288:	ee78 0a20 	vadd.f32	s1, s16, s1
   1128c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   11290:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   11294:	f019 fe2c 	bl	2aef0 <powf>
   11298:	eef0 0a40 	vmov.f32	s1, s0
   1129c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 11330 <bsec_IaqEstimator_doStep+0x1c4>
   112a0:	f019 fcd6 	bl	2ac50 <fmaxf>
   112a4:	eef0 0a40 	vmov.f32	s1, s0
   112a8:	eeb0 0a48 	vmov.f32	s0, s16
   112ac:	f019 fcee 	bl	2ac8c <fminf>
   112b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 11334 <bsec_IaqEstimator_doStep+0x1c8>
   112b4:	ed87 0a00 	vstr	s0, [r7]
   112b8:	ee28 7aa7 	vmul.f32	s14, s17, s15
   112bc:	ecbd 8b06 	vpop	{d8-d10}
   112c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112c8:	692b      	ldr	r3, [r5, #16]
   112ca:	607b      	str	r3, [r7, #4]
   112cc:	bfd8      	it	le
   112ce:	eef0 7a47 	vmovle.f32	s15, s14
   112d2:	edc6 7a00 	vstr	s15, [r6]
   112d6:	696b      	ldr	r3, [r5, #20]
   112d8:	6073      	str	r3, [r6, #4]
   112da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112de:	edd4 0a05 	vldr	s1, [r4, #20]
   112e2:	ee68 0a20 	vmul.f32	s1, s16, s1
   112e6:	e7bf      	b.n	11268 <bsec_IaqEstimator_doStep+0xfc>
   112e8:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   112ec:	eeb4 7ae9 	vcmpe.f32	s14, s19
   112f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112f4:	ee2a aa0a 	vmul.f32	s20, s20, s20
   112f8:	d507      	bpl.n	1130a <bsec_IaqEstimator_doStep+0x19e>
   112fa:	ee77 7aca 	vsub.f32	s15, s15, s20
   112fe:	ee69 9a8a 	vmul.f32	s19, s19, s20
   11302:	ee67 7a87 	vmul.f32	s15, s15, s14
   11306:	ee77 9aa9 	vadd.f32	s19, s15, s19
   1130a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   1130e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11316:	d58b      	bpl.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   11318:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1131c:	ee70 0aca 	vsub.f32	s1, s1, s20
   11320:	ee28 8a0a 	vmul.f32	s16, s16, s20
   11324:	ee60 0aa7 	vmul.f32	s1, s1, s15
   11328:	ee30 8a88 	vadd.f32	s16, s1, s16
   1132c:	e780      	b.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   1132e:	bf00      	nop
   11330:	3dcccccd 	.word	0x3dcccccd
   11334:	42c80000 	.word	0x42c80000

00011338 <bsec_IaqEstimator_getConfiguration>:
   11338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1133c:	b084      	sub	sp, #16
   1133e:	ac04      	add	r4, sp, #16
   11340:	2508      	movs	r5, #8
   11342:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11346:	4606      	mov	r6, r0
   11348:	4617      	mov	r7, r2
   1134a:	7800      	ldrb	r0, [r0, #0]
   1134c:	4622      	mov	r2, r4
   1134e:	460d      	mov	r5, r1
   11350:	f000 fb9c 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   11354:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11358:	9003      	str	r0, [sp, #12]
   1135a:	b1ca      	cbz	r2, 11390 <bsec_IaqEstimator_getConfiguration+0x58>
   1135c:	2401      	movs	r4, #1
   1135e:	f106 0810 	add.w	r8, r6, #16
   11362:	1e63      	subs	r3, r4, #1
   11364:	2b07      	cmp	r3, #7
   11366:	d80e      	bhi.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11368:	e8df f003 	tbb	[pc, r3]
   1136c:	515a3f48 	.word	0x515a3f48
   11370:	04232d36 	.word	0x04232d36
   11374:	aa03      	add	r2, sp, #12
   11376:	4639      	mov	r1, r7
   11378:	4628      	mov	r0, r5
   1137a:	ed96 0a08 	vldr	s0, [r6, #32]
   1137e:	f7fe fc3d 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11382:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11386:	3401      	adds	r4, #1
   11388:	b2e4      	uxtb	r4, r4
   1138a:	42a2      	cmp	r2, r4
   1138c:	d2e9      	bcs.n	11362 <bsec_IaqEstimator_getConfiguration+0x2a>
   1138e:	9803      	ldr	r0, [sp, #12]
   11390:	a904      	add	r1, sp, #16
   11392:	2202      	movs	r2, #2
   11394:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11398:	a802      	add	r0, sp, #8
   1139a:	f022 fa11 	bl	337c0 <memcpy>
   1139e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   113a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   113a6:	9803      	ldr	r0, [sp, #12]
   113a8:	702a      	strb	r2, [r5, #0]
   113aa:	706b      	strb	r3, [r5, #1]
   113ac:	b004      	add	sp, #16
   113ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113b2:	aa03      	add	r2, sp, #12
   113b4:	4639      	mov	r1, r7
   113b6:	4628      	mov	r0, r5
   113b8:	ed96 0a07 	vldr	s0, [r6, #28]
   113bc:	f7fe fc1e 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   113c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113c4:	e7df      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113c6:	463a      	mov	r2, r7
   113c8:	ab03      	add	r3, sp, #12
   113ca:	4629      	mov	r1, r5
   113cc:	8b30      	ldrh	r0, [r6, #24]
   113ce:	f7fe fb9d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113d6:	e7d6      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113d8:	463a      	mov	r2, r7
   113da:	ab03      	add	r3, sp, #12
   113dc:	4629      	mov	r1, r5
   113de:	4640      	mov	r0, r8
   113e0:	f7fe fdca 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   113e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113e8:	e7cd      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113ea:	463a      	mov	r2, r7
   113ec:	ab03      	add	r3, sp, #12
   113ee:	4629      	mov	r1, r5
   113f0:	8870      	ldrh	r0, [r6, #2]
   113f2:	f7fe fb8b 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113fa:	e7c4      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113fc:	463a      	mov	r2, r7
   113fe:	ab03      	add	r3, sp, #12
   11400:	4629      	mov	r1, r5
   11402:	7930      	ldrb	r0, [r6, #4]
   11404:	f7fe fc32 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   11408:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1140c:	e7bb      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   1140e:	463a      	mov	r2, r7
   11410:	ab03      	add	r3, sp, #12
   11412:	4629      	mov	r1, r5
   11414:	7a30      	ldrb	r0, [r6, #8]
   11416:	f7fe fc29 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   1141a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1141e:	e7b2      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11420:	463a      	mov	r2, r7
   11422:	ab03      	add	r3, sp, #12
   11424:	4629      	mov	r1, r5
   11426:	88f0      	ldrh	r0, [r6, #6]
   11428:	f7fe fb70 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   1142c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11430:	e7a9      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11432:	bf00      	nop

00011434 <bsec_IaqEstimator_getState>:
   11434:	b5f0      	push	{r4, r5, r6, r7, lr}
   11436:	b085      	sub	sp, #20
   11438:	ac04      	add	r4, sp, #16
   1143a:	2502      	movs	r5, #2
   1143c:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11440:	4606      	mov	r6, r0
   11442:	4617      	mov	r7, r2
   11444:	7800      	ldrb	r0, [r0, #0]
   11446:	4622      	mov	r2, r4
   11448:	460d      	mov	r5, r1
   1144a:	f000 fb1f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1144e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11452:	9003      	str	r0, [sp, #12]
   11454:	b303      	cbz	r3, 11498 <bsec_IaqEstimator_getState+0x64>
   11456:	2401      	movs	r4, #1
   11458:	e00e      	b.n	11478 <bsec_IaqEstimator_getState+0x44>
   1145a:	2c02      	cmp	r4, #2
   1145c:	d108      	bne.n	11470 <bsec_IaqEstimator_getState+0x3c>
   1145e:	aa03      	add	r2, sp, #12
   11460:	4639      	mov	r1, r7
   11462:	4628      	mov	r0, r5
   11464:	ed96 0a0e 	vldr	s0, [r6, #56]	; 0x38
   11468:	f7fe fbc8 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1146c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11470:	3401      	adds	r4, #1
   11472:	b2e4      	uxtb	r4, r4
   11474:	42a3      	cmp	r3, r4
   11476:	d30e      	bcc.n	11496 <bsec_IaqEstimator_getState+0x62>
   11478:	2c01      	cmp	r4, #1
   1147a:	d1ee      	bne.n	1145a <bsec_IaqEstimator_getState+0x26>
   1147c:	aa03      	add	r2, sp, #12
   1147e:	4639      	mov	r1, r7
   11480:	4628      	mov	r0, r5
   11482:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
   11486:	f7fe fbb9 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1148a:	3401      	adds	r4, #1
   1148c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11490:	b2e4      	uxtb	r4, r4
   11492:	42a3      	cmp	r3, r4
   11494:	d2f0      	bcs.n	11478 <bsec_IaqEstimator_getState+0x44>
   11496:	9803      	ldr	r0, [sp, #12]
   11498:	a904      	add	r1, sp, #16
   1149a:	2202      	movs	r2, #2
   1149c:	f821 0d06 	strh.w	r0, [r1, #-6]!
   114a0:	a802      	add	r0, sp, #8
   114a2:	f022 f98d 	bl	337c0 <memcpy>
   114a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   114aa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   114ae:	9803      	ldr	r0, [sp, #12]
   114b0:	702a      	strb	r2, [r5, #0]
   114b2:	706b      	strb	r3, [r5, #1]
   114b4:	b005      	add	sp, #20
   114b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000114b8 <bsec_IaqEstimator_setState>:
   114b8:	b570      	push	{r4, r5, r6, lr}
   114ba:	b086      	sub	sp, #24
   114bc:	ab04      	add	r3, sp, #16
   114be:	ad05      	add	r5, sp, #20
   114c0:	4604      	mov	r4, r0
   114c2:	7800      	ldrb	r0, [r0, #0]
   114c4:	9300      	str	r3, [sp, #0]
   114c6:	9501      	str	r5, [sp, #4]
   114c8:	f10d 030f 	add.w	r3, sp, #15
   114cc:	460e      	mov	r6, r1
   114ce:	f000 faaf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   114d2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114d6:	b968      	cbnz	r0, 114f4 <bsec_IaqEstimator_setState+0x3c>
   114d8:	4629      	mov	r1, r5
   114da:	4630      	mov	r0, r6
   114dc:	f7fe fb74 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114e0:	4630      	mov	r0, r6
   114e2:	4629      	mov	r1, r5
   114e4:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
   114e8:	f7fe fb6e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114ec:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114f0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   114f4:	b006      	add	sp, #24
   114f6:	bd70      	pop	{r4, r5, r6, pc}

000114f8 <bsec_IaqEstimator_updateInterfaceDependency>:
   114f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114fc:	4299      	cmp	r1, r3
   114fe:	d04e      	beq.n	1159e <bsec_IaqEstimator_updateInterfaceDependency+0xa6>
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
   11502:	ed2d 8b02 	vpush	{d8}
   11506:	88c3      	ldrh	r3, [r0, #6]
   11508:	7a05      	ldrb	r5, [r0, #8]
   1150a:	69c6      	ldr	r6, [r0, #28]
   1150c:	6a07      	ldr	r7, [r0, #32]
   1150e:	442b      	add	r3, r5
   11510:	ee07 3a90 	vmov	s15, r3
   11514:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11518:	b083      	sub	sp, #12
   1151a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   1151e:	d042      	beq.n	115a6 <bsec_IaqEstimator_updateInterfaceDependency+0xae>
   11520:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   11524:	d03c      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   11526:	2964      	cmp	r1, #100	; 0x64
   11528:	d03a      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   1152a:	4b20      	ldr	r3, [pc, #128]	; (115ac <bsec_IaqEstimator_updateInterfaceDependency+0xb4>)
   1152c:	9300      	str	r3, [sp, #0]
   1152e:	4604      	mov	r4, r0
   11530:	4668      	mov	r0, sp
   11532:	f000 fb55 	bl	11be0 <bsec_log10>
   11536:	ee07 5a90 	vmov	s15, r5
   1153a:	ed9d 0a00 	vldr	s0, [sp]
   1153e:	eef8 8a67 	vcvt.f32.u32	s17, s15
   11542:	f019 fb79 	bl	2ac38 <fabsf>
   11546:	ee78 8a68 	vsub.f32	s17, s16, s17
   1154a:	ad02      	add	r5, sp, #8
   1154c:	ee88 0a80 	vdiv.f32	s0, s17, s0
   11550:	f845 6d04 	str.w	r6, [r5, #-4]!
   11554:	4628      	mov	r0, r5
   11556:	ed84 0a03 	vstr	s0, [r4, #12]
   1155a:	f000 fb41 	bl	11be0 <bsec_log10>
   1155e:	4668      	mov	r0, sp
   11560:	9700      	str	r7, [sp, #0]
   11562:	f000 fb3d 	bl	11be0 <bsec_log10>
   11566:	eddd 7a01 	vldr	s15, [sp, #4]
   1156a:	ed9d 7a00 	vldr	s14, [sp]
   1156e:	9601      	str	r6, [sp, #4]
   11570:	ee77 7ac7 	vsub.f32	s15, s15, s14
   11574:	4628      	mov	r0, r5
   11576:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   1157a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
   1157e:	f000 fb2f 	bl	11be0 <bsec_log10>
   11582:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   11586:	eddd 7a01 	vldr	s15, [sp, #4]
   1158a:	ee28 8a07 	vmul.f32	s16, s16, s14
   1158e:	ee37 8ac8 	vsub.f32	s16, s15, s16
   11592:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
   11596:	b003      	add	sp, #12
   11598:	ecbd 8b02 	vpop	{d8}
   1159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1159e:	4770      	bx	lr
   115a0:	4b03      	ldr	r3, [pc, #12]	; (115b0 <bsec_IaqEstimator_updateInterfaceDependency+0xb8>)
   115a2:	9300      	str	r3, [sp, #0]
   115a4:	e7c3      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115a6:	4b03      	ldr	r3, [pc, #12]	; (115b4 <bsec_IaqEstimator_updateInterfaceDependency+0xbc>)
   115a8:	9300      	str	r3, [sp, #0]
   115aa:	e7c0      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115ac:	3f464c30 	.word	0x3f464c30
   115b0:	3f19999a 	.word	0x3f19999a
   115b4:	3f23d70a 	.word	0x3f23d70a

000115b8 <bsec_b_IaqEstimator_configure>:
   115b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115bc:	b087      	sub	sp, #28
   115be:	ab04      	add	r3, sp, #16
   115c0:	ae05      	add	r6, sp, #20
   115c2:	4605      	mov	r5, r0
   115c4:	7800      	ldrb	r0, [r0, #0]
   115c6:	9300      	str	r3, [sp, #0]
   115c8:	9601      	str	r6, [sp, #4]
   115ca:	f10d 030f 	add.w	r3, sp, #15
   115ce:	460f      	mov	r7, r1
   115d0:	f000 fa2e 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   115d4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   115d8:	bb10      	cbnz	r0, 11620 <bsec_b_IaqEstimator_configure+0x68>
   115da:	4604      	mov	r4, r0
   115dc:	f105 0810 	add.w	r8, r5, #16
   115e0:	fa5f f984 	uxtb.w	r9, r4
   115e4:	f109 0301 	add.w	r3, r9, #1
   115e8:	b2db      	uxtb	r3, r3
   115ea:	3b02      	subs	r3, #2
   115ec:	2b06      	cmp	r3, #6
   115ee:	d805      	bhi.n	115fc <bsec_b_IaqEstimator_configure+0x44>
   115f0:	e8df f003 	tbb	[pc, r3]
   115f4:	262c3238 	.word	0x262c3238
   115f8:	1920      	.short	0x1920
   115fa:	0e          	.byte	0x0e
   115fb:	00          	.byte	0x00
   115fc:	4631      	mov	r1, r6
   115fe:	4638      	mov	r0, r7
   11600:	f7fe fb20 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11604:	f1b9 0f07 	cmp.w	r9, #7
   11608:	7128      	strb	r0, [r5, #4]
   1160a:	d031      	beq.n	11670 <bsec_b_IaqEstimator_configure+0xb8>
   1160c:	3401      	adds	r4, #1
   1160e:	e7e7      	b.n	115e0 <bsec_b_IaqEstimator_configure+0x28>
   11610:	4638      	mov	r0, r7
   11612:	4631      	mov	r1, r6
   11614:	f7fe fad8 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11618:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1161c:	ed85 0a08 	vstr	s0, [r5, #32]
   11620:	b007      	add	sp, #28
   11622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11626:	4631      	mov	r1, r6
   11628:	4638      	mov	r0, r7
   1162a:	f7fe facd 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1162e:	ed85 0a07 	vstr	s0, [r5, #28]
   11632:	e7eb      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11634:	4631      	mov	r1, r6
   11636:	4638      	mov	r0, r7
   11638:	f7fe fa50 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1163c:	8328      	strh	r0, [r5, #24]
   1163e:	e7e5      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11640:	4642      	mov	r2, r8
   11642:	4631      	mov	r1, r6
   11644:	4638      	mov	r0, r7
   11646:	f7fe fd33 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   1164a:	e7df      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   1164c:	4631      	mov	r1, r6
   1164e:	4638      	mov	r0, r7
   11650:	f7fe faf8 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11654:	7228      	strb	r0, [r5, #8]
   11656:	e7d9      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11658:	4631      	mov	r1, r6
   1165a:	4638      	mov	r0, r7
   1165c:	f7fe fa3e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   11660:	80e8      	strh	r0, [r5, #6]
   11662:	e7d3      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11664:	4631      	mov	r1, r6
   11666:	4638      	mov	r0, r7
   11668:	f7fe fa38 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1166c:	8068      	strh	r0, [r5, #2]
   1166e:	e7cd      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11670:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11674:	e7d4      	b.n	11620 <bsec_b_IaqEstimator_configure+0x68>
   11676:	bf00      	nop

00011678 <bsec_SensorStatusTracker_SensorStatusTracker>:
   11678:	b430      	push	{r4, r5}
   1167a:	490c      	ldr	r1, [pc, #48]	; (116ac <bsec_SensorStatusTracker_SensorStatusTracker+0x34>)
   1167c:	61c1      	str	r1, [r0, #28]
   1167e:	2505      	movs	r5, #5
   11680:	2401      	movs	r4, #1
   11682:	2200      	movs	r2, #0
   11684:	2100      	movs	r1, #0
   11686:	7005      	strb	r5, [r0, #0]
   11688:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   1168c:	2500      	movs	r5, #0
   1168e:	2400      	movs	r4, #0
   11690:	e9c0 4508 	strd	r4, r5, [r0, #32]
   11694:	e9c0 4502 	strd	r4, r5, [r0, #8]
   11698:	6182      	str	r2, [r0, #24]
   1169a:	6142      	str	r2, [r0, #20]
   1169c:	6102      	str	r2, [r0, #16]
   1169e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
   116a2:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   116a6:	bc30      	pop	{r4, r5}
   116a8:	4770      	bx	lr
   116aa:	bf00      	nop
   116ac:	538bb2c9 	.word	0x538bb2c9

000116b0 <bsec_SensorStatusTracker_doStep>:
   116b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   116b4:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
   116b8:	4680      	mov	r8, r0
   116ba:	e9d0 0108 	ldrd	r0, r1, [r0, #32]
   116be:	4692      	mov	sl, r2
   116c0:	1b92      	subs	r2, r2, r6
   116c2:	469b      	mov	fp, r3
   116c4:	eb63 0307 	sbc.w	r3, r3, r7
   116c8:	4290      	cmp	r0, r2
   116ca:	eb71 0303 	sbcs.w	r3, r1, r3
   116ce:	9d08      	ldr	r5, [sp, #32]
   116d0:	db03      	blt.n	116da <bsec_SensorStatusTracker_doStep+0x2a>
   116d2:	45b2      	cmp	sl, r6
   116d4:	eb7b 0307 	sbcs.w	r3, fp, r7
   116d8:	da65      	bge.n	117a6 <bsec_SensorStatusTracker_doStep+0xf6>
   116da:	2300      	movs	r3, #0
   116dc:	2200      	movs	r2, #0
   116de:	f8c8 2010 	str.w	r2, [r8, #16]
   116e2:	f888 302a 	strb.w	r3, [r8, #42]	; 0x2a
   116e6:	461c      	mov	r4, r3
   116e8:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   116ec:	f898 6029 	ldrb.w	r6, [r8, #41]	; 0x29
   116f0:	b9d6      	cbnz	r6, 11728 <bsec_SensorStatusTracker_doStep+0x78>
   116f2:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
   116f6:	ebba 0002 	subs.w	r0, sl, r2
   116fa:	eb6b 0103 	sbc.w	r1, fp, r3
   116fe:	f000 fc41 	bl	11f84 <__aeabi_l2f>
   11702:	edd8 7a05 	vldr	s15, [r8, #20]
   11706:	ed98 7a06 	vldr	s14, [r8, #24]
   1170a:	ee06 0a90 	vmov	s13, r0
   1170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
   11712:	eef4 7ac7 	vcmpe.f32	s15, s14
   11716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1171a:	bfa8      	it	ge
   1171c:	2601      	movge	r6, #1
   1171e:	edc8 7a05 	vstr	s15, [r8, #20]
   11722:	bfa8      	it	ge
   11724:	f888 6029 	strbge.w	r6, [r8, #41]	; 0x29
   11728:	b9d4      	cbnz	r4, 11760 <bsec_SensorStatusTracker_doStep+0xb0>
   1172a:	e9d8 3402 	ldrd	r3, r4, [r8, #8]
   1172e:	ebba 0003 	subs.w	r0, sl, r3
   11732:	eb6b 0104 	sbc.w	r1, fp, r4
   11736:	f000 fc25 	bl	11f84 <__aeabi_l2f>
   1173a:	edd8 7a04 	vldr	s15, [r8, #16]
   1173e:	ed98 7a07 	vldr	s14, [r8, #28]
   11742:	ee06 0a90 	vmov	s13, r0
   11746:	ee76 7aa7 	vadd.f32	s15, s13, s15
   1174a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11752:	bfa8      	it	ge
   11754:	2301      	movge	r3, #1
   11756:	edc8 7a04 	vstr	s15, [r8, #16]
   1175a:	bfa8      	it	ge
   1175c:	f888 302a 	strbge.w	r3, [r8, #42]	; 0x2a
   11760:	f1ba 0f01 	cmp.w	sl, #1
   11764:	f17b 0300 	sbcs.w	r3, fp, #0
   11768:	db23      	blt.n	117b2 <bsec_SensorStatusTracker_doStep+0x102>
   1176a:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   1176e:	702e      	strb	r6, [r5, #0]
   11770:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
   11774:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11776:	7013      	strb	r3, [r2, #0]
   11778:	b933      	cbnz	r3, 11788 <bsec_SensorStatusTracker_doStep+0xd8>
   1177a:	edd8 7a07 	vldr	s15, [r8, #28]
   1177e:	eef5 7a40 	vcmp.f32	s15, #0.0
   11782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11786:	d105      	bne.n	11794 <bsec_SensorStatusTracker_doStep+0xe4>
   11788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1178a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1178e:	6013      	str	r3, [r2, #0]
   11790:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   11794:	edd8 6a04 	vldr	s13, [r8, #16]
   11798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1179a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1179e:	ed83 7a00 	vstr	s14, [r3]
   117a2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   117a6:	ea56 0307 	orrs.w	r3, r6, r7
   117aa:	f898 402a 	ldrb.w	r4, [r8, #42]	; 0x2a
   117ae:	d19d      	bne.n	116ec <bsec_SensorStatusTracker_doStep+0x3c>
   117b0:	e79a      	b.n	116e8 <bsec_SensorStatusTracker_doStep+0x38>
   117b2:	2201      	movs	r2, #1
   117b4:	2300      	movs	r3, #0
   117b6:	e9c8 2302 	strd	r2, r3, [r8, #8]
   117ba:	e7d8      	b.n	1176e <bsec_SensorStatusTracker_doStep+0xbe>

000117bc <bsec_SensorStatusTracker_getConfiguration>:
   117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117be:	b085      	sub	sp, #20
   117c0:	ac04      	add	r4, sp, #16
   117c2:	2502      	movs	r5, #2
   117c4:	f804 5d09 	strb.w	r5, [r4, #-9]!
   117c8:	4606      	mov	r6, r0
   117ca:	4617      	mov	r7, r2
   117cc:	7800      	ldrb	r0, [r0, #0]
   117ce:	4622      	mov	r2, r4
   117d0:	460d      	mov	r5, r1
   117d2:	f000 f95b 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   117d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117da:	9003      	str	r0, [sp, #12]
   117dc:	b303      	cbz	r3, 11820 <bsec_SensorStatusTracker_getConfiguration+0x64>
   117de:	2401      	movs	r4, #1
   117e0:	e00e      	b.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   117e2:	2c02      	cmp	r4, #2
   117e4:	d108      	bne.n	117f8 <bsec_SensorStatusTracker_getConfiguration+0x3c>
   117e6:	ab03      	add	r3, sp, #12
   117e8:	463a      	mov	r2, r7
   117ea:	4629      	mov	r1, r5
   117ec:	f996 0028 	ldrsb.w	r0, [r6, #40]	; 0x28
   117f0:	f7fe fb8c 	bl	ff0c <bsec_l_Entity_serializeAndAdd>
   117f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117f8:	3401      	adds	r4, #1
   117fa:	b2e4      	uxtb	r4, r4
   117fc:	42a3      	cmp	r3, r4
   117fe:	d30e      	bcc.n	1181e <bsec_SensorStatusTracker_getConfiguration+0x62>
   11800:	2c01      	cmp	r4, #1
   11802:	d1ee      	bne.n	117e2 <bsec_SensorStatusTracker_getConfiguration+0x26>
   11804:	aa03      	add	r2, sp, #12
   11806:	4639      	mov	r1, r7
   11808:	4628      	mov	r0, r5
   1180a:	ed96 0a06 	vldr	s0, [r6, #24]
   1180e:	f7fe f9f5 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11812:	3401      	adds	r4, #1
   11814:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11818:	b2e4      	uxtb	r4, r4
   1181a:	42a3      	cmp	r3, r4
   1181c:	d2f0      	bcs.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   1181e:	9803      	ldr	r0, [sp, #12]
   11820:	a904      	add	r1, sp, #16
   11822:	2202      	movs	r2, #2
   11824:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11828:	a802      	add	r0, sp, #8
   1182a:	f021 ffc9 	bl	337c0 <memcpy>
   1182e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11832:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11836:	9803      	ldr	r0, [sp, #12]
   11838:	702a      	strb	r2, [r5, #0]
   1183a:	706b      	strb	r3, [r5, #1]
   1183c:	b005      	add	sp, #20
   1183e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011840 <bsec_SensorStatusTracker_getState>:
   11840:	b5f0      	push	{r4, r5, r6, r7, lr}
   11842:	b087      	sub	sp, #28
   11844:	ac06      	add	r4, sp, #24
   11846:	2505      	movs	r5, #5
   11848:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1184c:	4606      	mov	r6, r0
   1184e:	4617      	mov	r7, r2
   11850:	7800      	ldrb	r0, [r0, #0]
   11852:	4622      	mov	r2, r4
   11854:	460d      	mov	r5, r1
   11856:	f000 f919 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1185a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1185e:	9005      	str	r0, [sp, #20]
   11860:	b1b2      	cbz	r2, 11890 <bsec_SensorStatusTracker_getState+0x50>
   11862:	2401      	movs	r4, #1
   11864:	1e63      	subs	r3, r4, #1
   11866:	2b04      	cmp	r3, #4
   11868:	d80d      	bhi.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   1186a:	e8df f003 	tbb	[pc, r3]
   1186e:	213f      	.short	0x213f
   11870:	2b35      	.short	0x2b35
   11872:	03          	.byte	0x03
   11873:	00          	.byte	0x00
   11874:	463a      	mov	r2, r7
   11876:	ab05      	add	r3, sp, #20
   11878:	4629      	mov	r1, r5
   1187a:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
   1187e:	f7fe fa5b 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   11882:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11886:	3401      	adds	r4, #1
   11888:	b2e4      	uxtb	r4, r4
   1188a:	42a2      	cmp	r2, r4
   1188c:	d2ea      	bcs.n	11864 <bsec_SensorStatusTracker_getState+0x24>
   1188e:	9805      	ldr	r0, [sp, #20]
   11890:	a906      	add	r1, sp, #24
   11892:	2202      	movs	r2, #2
   11894:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11898:	a804      	add	r0, sp, #16
   1189a:	f021 ff91 	bl	337c0 <memcpy>
   1189e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   118a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   118a6:	9805      	ldr	r0, [sp, #20]
   118a8:	702a      	strb	r2, [r5, #0]
   118aa:	706b      	strb	r3, [r5, #1]
   118ac:	b007      	add	sp, #28
   118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118b0:	aa05      	add	r2, sp, #20
   118b2:	4639      	mov	r1, r7
   118b4:	4628      	mov	r0, r5
   118b6:	ed96 0a05 	vldr	s0, [r6, #20]
   118ba:	f7fe f99f 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118c2:	e7e0      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118c4:	463a      	mov	r2, r7
   118c6:	ab05      	add	r3, sp, #20
   118c8:	4629      	mov	r1, r5
   118ca:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
   118ce:	f7fe fa33 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   118d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118d6:	e7d6      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118d8:	aa05      	add	r2, sp, #20
   118da:	4639      	mov	r1, r7
   118dc:	4628      	mov	r0, r5
   118de:	ed96 0a04 	vldr	s0, [r6, #16]
   118e2:	f7fe f98b 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118ea:	e7cc      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118ec:	ab05      	add	r3, sp, #20
   118ee:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   118f2:	462a      	mov	r2, r5
   118f4:	9300      	str	r3, [sp, #0]
   118f6:	463b      	mov	r3, r7
   118f8:	f7fe f9f2 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
   118fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11900:	e7c1      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   11902:	bf00      	nop

00011904 <bsec_SensorStatusTracker_setState>:
   11904:	b5f0      	push	{r4, r5, r6, r7, lr}
   11906:	b087      	sub	sp, #28
   11908:	ab04      	add	r3, sp, #16
   1190a:	ae05      	add	r6, sp, #20
   1190c:	4605      	mov	r5, r0
   1190e:	7800      	ldrb	r0, [r0, #0]
   11910:	9300      	str	r3, [sp, #0]
   11912:	9601      	str	r6, [sp, #4]
   11914:	f10d 030f 	add.w	r3, sp, #15
   11918:	460f      	mov	r7, r1
   1191a:	f000 f889 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   1191e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11922:	b9c3      	cbnz	r3, 11956 <bsec_SensorStatusTracker_setState+0x52>
   11924:	2401      	movs	r4, #1
   11926:	1ea3      	subs	r3, r4, #2
   11928:	4631      	mov	r1, r6
   1192a:	4638      	mov	r0, r7
   1192c:	2b03      	cmp	r3, #3
   1192e:	d803      	bhi.n	11938 <bsec_SensorStatusTracker_setState+0x34>
   11930:	e8df f003 	tbb	[pc, r3]
   11934:	0b14191e 	.word	0x0b14191e
   11938:	f7fe f9b6 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
   1193c:	2c05      	cmp	r4, #5
   1193e:	e9c5 0102 	strd	r0, r1, [r5, #8]
   11942:	d01a      	beq.n	1197a <bsec_SensorStatusTracker_setState+0x76>
   11944:	3401      	adds	r4, #1
   11946:	b2e4      	uxtb	r4, r4
   11948:	e7ed      	b.n	11926 <bsec_SensorStatusTracker_setState+0x22>
   1194a:	f7fe f9ed 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   1194e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11952:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
   11956:	4618      	mov	r0, r3
   11958:	b007      	add	sp, #28
   1195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1195c:	f7fe f9e4 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   11960:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   11964:	e7ee      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11966:	f7fe f92f 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1196a:	ed85 0a04 	vstr	s0, [r5, #16]
   1196e:	e7e9      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11970:	f7fe f92a 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11974:	ed85 0a05 	vstr	s0, [r5, #20]
   11978:	e7e4      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   1197a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1197e:	e7ea      	b.n	11956 <bsec_SensorStatusTracker_setState+0x52>

00011980 <bsec_SensorStatusTracker_updateInterfaceDependency>:
   11980:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11984:	4299      	cmp	r1, r3
   11986:	d018      	beq.n	119ba <bsec_SensorStatusTracker_updateInterfaceDependency+0x3a>
   11988:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
   1198c:	4b13      	ldr	r3, [pc, #76]	; (119dc <bsec_SensorStatusTracker_updateInterfaceDependency+0x5c>)
   1198e:	fb01 f202 	mul.w	r2, r1, r2
   11992:	eb02 0252 	add.w	r2, r2, r2, lsr #1
   11996:	fba2 2303 	umull	r2, r3, r2, r3
   1199a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1199e:	e9c0 2308 	strd	r2, r3, [r0, #32]
   119a2:	d007      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119a4:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   119a8:	d014      	beq.n	119d4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x54>
   119aa:	2964      	cmp	r1, #100	; 0x64
   119ac:	d002      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119ae:	4b0c      	ldr	r3, [pc, #48]	; (119e0 <bsec_SensorStatusTracker_updateInterfaceDependency+0x60>)
   119b0:	61c3      	str	r3, [r0, #28]
   119b2:	4770      	bx	lr
   119b4:	4b0b      	ldr	r3, [pc, #44]	; (119e4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x64>)
   119b6:	61c3      	str	r3, [r0, #28]
   119b8:	4770      	bx	lr
   119ba:	b410      	push	{r4}
   119bc:	2100      	movs	r1, #0
   119be:	2400      	movs	r4, #0
   119c0:	2200      	movs	r2, #0
   119c2:	2300      	movs	r3, #0
   119c4:	6104      	str	r4, [r0, #16]
   119c6:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   119ca:	e9c0 2302 	strd	r2, r3, [r0, #8]
   119ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   119d2:	4770      	bx	lr
   119d4:	4b04      	ldr	r3, [pc, #16]	; (119e8 <bsec_SensorStatusTracker_updateInterfaceDependency+0x68>)
   119d6:	61c3      	str	r3, [r0, #28]
   119d8:	4770      	bx	lr
   119da:	bf00      	nop
   119dc:	00989680 	.word	0x00989680
   119e0:	538bb2c9 	.word	0x538bb2c9
   119e4:	528bb2c9 	.word	0x528bb2c9
   119e8:	515f8476 	.word	0x515f8476

000119ec <bsec_b_SensorStatusTracker_configure>:
   119ec:	b570      	push	{r4, r5, r6, lr}
   119ee:	b086      	sub	sp, #24
   119f0:	ab04      	add	r3, sp, #16
   119f2:	ad05      	add	r5, sp, #20
   119f4:	4604      	mov	r4, r0
   119f6:	7800      	ldrb	r0, [r0, #0]
   119f8:	9300      	str	r3, [sp, #0]
   119fa:	9501      	str	r5, [sp, #4]
   119fc:	f10d 030f 	add.w	r3, sp, #15
   11a00:	460e      	mov	r6, r1
   11a02:	f000 f815 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11a06:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a0a:	b96b      	cbnz	r3, 11a28 <bsec_b_SensorStatusTracker_configure+0x3c>
   11a0c:	4629      	mov	r1, r5
   11a0e:	4630      	mov	r0, r6
   11a10:	f7fe f8da 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11a14:	4629      	mov	r1, r5
   11a16:	ed84 0a06 	vstr	s0, [r4, #24]
   11a1a:	4630      	mov	r0, r6
   11a1c:	f7fe fb0c 	bl	10038 <bsec_o_Entity_parseAndDeserialize>
   11a20:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a24:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   11a28:	4618      	mov	r0, r3
   11a2a:	b006      	add	sp, #24
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	bf00      	nop

00011a30 <bsec_Serialization_checkSerializationHeader>:
   11a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a34:	b082      	sub	sp, #8
   11a36:	e9dd 8608 	ldrd	r8, r6, [sp, #32]
   11a3a:	2400      	movs	r4, #0
   11a3c:	2a03      	cmp	r2, #3
   11a3e:	6034      	str	r4, [r6, #0]
   11a40:	701c      	strb	r4, [r3, #0]
   11a42:	f8c8 4000 	str.w	r4, [r8]
   11a46:	d91c      	bls.n	11a82 <bsec_Serialization_checkSerializationHeader+0x52>
   11a48:	461c      	mov	r4, r3
   11a4a:	2304      	movs	r3, #4
   11a4c:	6033      	str	r3, [r6, #0]
   11a4e:	780a      	ldrb	r2, [r1, #0]
   11a50:	784b      	ldrb	r3, [r1, #1]
   11a52:	f88d 2004 	strb.w	r2, [sp, #4]
   11a56:	460d      	mov	r5, r1
   11a58:	4607      	mov	r7, r0
   11a5a:	2202      	movs	r2, #2
   11a5c:	a901      	add	r1, sp, #4
   11a5e:	f10d 0006 	add.w	r0, sp, #6
   11a62:	f88d 3005 	strb.w	r3, [sp, #5]
   11a66:	f021 feab 	bl	337c0 <memcpy>
   11a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a6e:	f8c8 3000 	str.w	r3, [r8]
   11a72:	78ab      	ldrb	r3, [r5, #2]
   11a74:	42bb      	cmp	r3, r7
   11a76:	bf1c      	itt	ne
   11a78:	239c      	movne	r3, #156	; 0x9c
   11a7a:	7023      	strbne	r3, [r4, #0]
   11a7c:	b002      	add	sp, #8
   11a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a82:	2298      	movs	r2, #152	; 0x98
   11a84:	701a      	strb	r2, [r3, #0]
   11a86:	b002      	add	sp, #8
   11a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a8c <bsec_Serialization_prepareSerializationHeader>:
   11a8c:	b410      	push	{r4}
   11a8e:	7814      	ldrb	r4, [r2, #0]
   11a90:	b10c      	cbz	r4, 11a96 <bsec_Serialization_prepareSerializationHeader+0xa>
   11a92:	429c      	cmp	r4, r3
   11a94:	d204      	bcs.n	11aa0 <bsec_Serialization_prepareSerializationHeader+0x14>
   11a96:	2000      	movs	r0, #0
   11a98:	7010      	strb	r0, [r2, #0]
   11a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a9e:	4770      	bx	lr
   11aa0:	7088      	strb	r0, [r1, #2]
   11aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11aa6:	2004      	movs	r0, #4
   11aa8:	4770      	bx	lr
   11aaa:	bf00      	nop

00011aac <bsec_convertHumidity>:
   11aac:	b500      	push	{lr}
   11aae:	ed2d 8b02 	vpush	{d8}
   11ab2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   11ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11aba:	b083      	sub	sp, #12
   11abc:	eef0 8a40 	vmov.f32	s17, s0
   11ac0:	eeb0 8a60 	vmov.f32	s16, s1
   11ac4:	d452      	bmi.n	11b6c <bsec_convertHumidity+0xc0>
   11ac6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 11b74 <bsec_convertHumidity+0xc8>
   11aca:	eeb4 1ac7 	vcmpe.f32	s2, s14
   11ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ad2:	dc41      	bgt.n	11b58 <bsec_convertHumidity+0xac>
   11ad4:	eec1 7a07 	vdiv.f32	s15, s2, s14
   11ad8:	a802      	add	r0, sp, #8
   11ada:	ed60 7a01 	vstmdb	r0!, {s15}
   11ade:	f000 f875 	bl	11bcc <bsec_log>
   11ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 11b78 <bsec_convertHumidity+0xcc>
   11ae6:	eddf 7a25 	vldr	s15, [pc, #148]	; 11b7c <bsec_convertHumidity+0xd0>
   11aea:	eddd 5a01 	vldr	s11, [sp, #4]
   11aee:	ee28 5a87 	vmul.f32	s10, s17, s14
   11af2:	ee78 8aa7 	vadd.f32	s17, s17, s15
   11af6:	ee28 6a07 	vmul.f32	s12, s16, s14
   11afa:	eec5 6a28 	vdiv.f32	s13, s10, s17
   11afe:	ee38 8a27 	vadd.f32	s16, s16, s15
   11b02:	ee76 6aa5 	vadd.f32	s13, s13, s11
   11b06:	eec6 5a08 	vdiv.f32	s11, s12, s16
   11b0a:	ee26 5aa7 	vmul.f32	s10, s13, s15
   11b0e:	ee77 6a66 	vsub.f32	s13, s14, s13
   11b12:	ee85 6a26 	vdiv.f32	s12, s10, s13
   11b16:	ee76 7a27 	vadd.f32	s15, s12, s15
   11b1a:	ee26 7a07 	vmul.f32	s14, s12, s14
   11b1e:	ed8d 6a01 	vstr	s12, [sp, #4]
   11b22:	ee87 0a27 	vdiv.f32	s0, s14, s15
   11b26:	ee30 0a65 	vsub.f32	s0, s0, s11
   11b2a:	f019 f937 	bl	2ad9c <expf>
   11b2e:	eddf 7a11 	vldr	s15, [pc, #68]	; 11b74 <bsec_convertHumidity+0xc8>
   11b32:	ee20 0a27 	vmul.f32	s0, s0, s15
   11b36:	eeb4 0ae7 	vcmpe.f32	s0, s15
   11b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b3e:	dc0e      	bgt.n	11b5e <bsec_convertHumidity+0xb2>
   11b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   11b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b48:	dc01      	bgt.n	11b4e <bsec_convertHumidity+0xa2>
   11b4a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 11b80 <bsec_convertHumidity+0xd4>
   11b4e:	b003      	add	sp, #12
   11b50:	ecbd 8b02 	vpop	{d8}
   11b54:	f85d fb04 	ldr.w	pc, [sp], #4
   11b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11b5c:	e7bc      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b5e:	eeb0 0a67 	vmov.f32	s0, s15
   11b62:	b003      	add	sp, #12
   11b64:	ecbd 8b02 	vpop	{d8}
   11b68:	f85d fb04 	ldr.w	pc, [sp], #4
   11b6c:	eddf 7a04 	vldr	s15, [pc, #16]	; 11b80 <bsec_convertHumidity+0xd4>
   11b70:	e7b2      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b72:	bf00      	nop
   11b74:	42c80000 	.word	0x42c80000
   11b78:	418cf5c3 	.word	0x418cf5c3
   11b7c:	43731eb8 	.word	0x43731eb8
   11b80:	00000000 	.word	0x00000000

00011b84 <bsec_crcCcitt2>:
   11b84:	b1b9      	cbz	r1, 11bb6 <bsec_crcCcitt2+0x32>
   11b86:	b430      	push	{r4, r5}
   11b88:	3801      	subs	r0, #1
   11b8a:	4d0c      	ldr	r5, [pc, #48]	; (11bbc <bsec_crcCcitt2+0x38>)
   11b8c:	4401      	add	r1, r0
   11b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b92:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   11b96:	4063      	eors	r3, r4
   11b98:	b2dc      	uxtb	r4, r3
   11b9a:	4281      	cmp	r1, r0
   11b9c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
   11ba0:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
   11ba4:	d1f5      	bne.n	11b92 <bsec_crcCcitt2+0xe>
   11ba6:	43db      	mvns	r3, r3
   11ba8:	b29b      	uxth	r3, r3
   11baa:	b2d8      	uxtb	r0, r3
   11bac:	0a19      	lsrs	r1, r3, #8
   11bae:	7010      	strb	r0, [r2, #0]
   11bb0:	7051      	strb	r1, [r2, #1]
   11bb2:	bc30      	pop	{r4, r5}
   11bb4:	4770      	bx	lr
   11bb6:	7011      	strb	r1, [r2, #0]
   11bb8:	7051      	strb	r1, [r2, #1]
   11bba:	4770      	bx	lr
   11bbc:	000351a8 	.word	0x000351a8

00011bc0 <bsec_isequal>:
   11bc0:	4299      	cmp	r1, r3
   11bc2:	bf06      	itte	eq
   11bc4:	4290      	cmpeq	r0, r2
   11bc6:	2001      	moveq	r0, #1
   11bc8:	2000      	movne	r0, #0
   11bca:	4770      	bx	lr

00011bcc <bsec_log>:
   11bcc:	b510      	push	{r4, lr}
   11bce:	ed90 0a00 	vldr	s0, [r0]
   11bd2:	4604      	mov	r4, r0
   11bd4:	f019 f920 	bl	2ae18 <logf>
   11bd8:	ed84 0a00 	vstr	s0, [r4]
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	bf00      	nop

00011be0 <bsec_log10>:
   11be0:	b510      	push	{r4, lr}
   11be2:	ed90 0a00 	vldr	s0, [r0]
   11be6:	4604      	mov	r4, r0
   11be8:	f019 f94c 	bl	2ae84 <log10f>
   11bec:	ed84 0a00 	vstr	s0, [r4]
   11bf0:	bd10      	pop	{r4, pc}
   11bf2:	bf00      	nop

00011bf4 <bsec_polyval>:
   11bf4:	edd0 7a00 	vldr	s15, [r0]
   11bf8:	ed90 7a01 	vldr	s14, [r0, #4]
   11bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
   11c00:	ee30 0a07 	vadd.f32	s0, s0, s14
   11c04:	4770      	bx	lr
   11c06:	bf00      	nop

00011c08 <bsec_b_sqrt>:
   11c08:	b510      	push	{r4, lr}
   11c0a:	ed90 0a00 	vldr	s0, [r0]
   11c0e:	4604      	mov	r4, r0
   11c10:	f019 fa0e 	bl	2b030 <sqrtf>
   11c14:	ed84 0a00 	vstr	s0, [r4]
   11c18:	bd10      	pop	{r4, pc}
   11c1a:	bf00      	nop

00011c1c <bsec_sqrt>:
   11c1c:	f000 b890 	b.w	11d40 <bsec_applyScalarFunctionInPlace>

00011c20 <bsec_Channel_reset>:
   11c20:	7f01      	ldrb	r1, [r0, #28]
   11c22:	4b0a      	ldr	r3, [pc, #40]	; (11c4c <bsec_Channel_reset+0x2c>)
   11c24:	4a0a      	ldr	r2, [pc, #40]	; (11c50 <bsec_Channel_reset+0x30>)
   11c26:	6202      	str	r2, [r0, #32]
   11c28:	6243      	str	r3, [r0, #36]	; 0x24
   11c2a:	6283      	str	r3, [r0, #40]	; 0x28
   11c2c:	b161      	cbz	r1, 11c48 <bsec_Channel_reset+0x28>
   11c2e:	b410      	push	{r4}
   11c30:	2301      	movs	r3, #1
   11c32:	2400      	movs	r4, #0
   11c34:	3301      	adds	r3, #1
   11c36:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	4299      	cmp	r1, r3
   11c3e:	6094      	str	r4, [r2, #8]
   11c40:	d2f8      	bcs.n	11c34 <bsec_Channel_reset+0x14>
   11c42:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c46:	4770      	bx	lr
   11c48:	4770      	bx	lr
   11c4a:	bf00      	nop
   11c4c:	3b23d70a 	.word	0x3b23d70a
   11c50:	3ca3d70a 	.word	0x3ca3d70a

00011c54 <bsec_b_Channel_reset>:
   11c54:	7b03      	ldrb	r3, [r0, #12]
   11c56:	2200      	movs	r2, #0
   11c58:	6102      	str	r2, [r0, #16]
   11c5a:	6142      	str	r2, [r0, #20]
   11c5c:	b11b      	cbz	r3, 11c66 <bsec_b_Channel_reset+0x12>
   11c5e:	2b01      	cmp	r3, #1
   11c60:	d8fd      	bhi.n	11c5e <bsec_b_Channel_reset+0xa>
   11c62:	2300      	movs	r3, #0
   11c64:	6083      	str	r3, [r0, #8]
   11c66:	4770      	bx	lr

00011c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>:
   11c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c6a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 11d04 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x9c>
   11c6e:	edd1 6a00 	vldr	s13, [r1]
   11c72:	ed91 7a01 	vldr	s14, [r1, #4]
   11c76:	edd1 7a02 	vldr	s15, [r1, #8]
   11c7a:	b087      	sub	sp, #28
   11c7c:	ee66 6a86 	vmul.f32	s13, s13, s12
   11c80:	ee27 7a06 	vmul.f32	s14, s14, s12
   11c84:	ee67 7a86 	vmul.f32	s15, s15, s12
   11c88:	4606      	mov	r6, r0
   11c8a:	466f      	mov	r7, sp
   11c8c:	4668      	mov	r0, sp
   11c8e:	ad03      	add	r5, sp, #12
   11c90:	460c      	mov	r4, r1
   11c92:	edcd 6a00 	vstr	s13, [sp]
   11c96:	ed8d 7a01 	vstr	s14, [sp, #4]
   11c9a:	edcd 7a02 	vstr	s15, [sp, #8]
   11c9e:	f000 f85d 	bl	11d5c <bsec_sin>
   11ca2:	463b      	mov	r3, r7
   11ca4:	462a      	mov	r2, r5
   11ca6:	edd3 7a00 	vldr	s15, [r3]
   11caa:	ee67 7aa7 	vmul.f32	s15, s15, s15
   11cae:	ee27 7aa7 	vmul.f32	s14, s15, s15
   11cb2:	ece3 7a01 	vstmia	r3!, {s15}
   11cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
   11cba:	42ab      	cmp	r3, r5
   11cbc:	ece2 7a01 	vstmia	r2!, {s15}
   11cc0:	d1f1      	bne.n	11ca6 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x3e>
   11cc2:	4628      	mov	r0, r5
   11cc4:	f7ff ffaa 	bl	11c1c <bsec_sqrt>
   11cc8:	4621      	mov	r1, r4
   11cca:	4630      	mov	r0, r6
   11ccc:	f104 030c 	add.w	r3, r4, #12
   11cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11cd4:	ecb1 7a01 	vldmia	r1!, {s14}
   11cd8:	ecf5 7a01 	vldmia	r5!, {s15}
   11cdc:	ecf7 6a01 	vldmia	r7!, {s13}
   11ce0:	eeb4 7a46 	vcmp.f32	s14, s12
   11ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ce8:	bf16      	itet	ne
   11cea:	ee77 7ae6 	vsubne.f32	s15, s15, s13
   11cee:	eef7 7a00 	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   11cf2:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   11cf6:	428b      	cmp	r3, r1
   11cf8:	ece0 7a01 	vstmia	r0!, {s15}
   11cfc:	d1ea      	bne.n	11cd4 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x6c>
   11cfe:	b007      	add	sp, #28
   11d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d02:	bf00      	nop
   11d04:	3fc90fdb 	.word	0x3fc90fdb

00011d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d08:	2200      	movs	r2, #0
   11d0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d0e:	b410      	push	{r4}
   11d10:	2403      	movs	r4, #3
   11d12:	7604      	strb	r4, [r0, #24]
   11d14:	6001      	str	r1, [r0, #0]
   11d16:	6041      	str	r1, [r0, #4]
   11d18:	6081      	str	r1, [r0, #8]
   11d1a:	60c2      	str	r2, [r0, #12]
   11d1c:	6102      	str	r2, [r0, #16]
   11d1e:	6142      	str	r2, [r0, #20]
   11d20:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d24:	4770      	bx	lr
   11d26:	bf00      	nop

00011d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d28:	b410      	push	{r4}
   11d2a:	2401      	movs	r4, #1
   11d2c:	2200      	movs	r2, #0
   11d2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d32:	7204      	strb	r4, [r0, #8]
   11d34:	6001      	str	r1, [r0, #0]
   11d36:	6042      	str	r2, [r0, #4]
   11d38:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d3c:	4770      	bx	lr
   11d3e:	bf00      	nop

00011d40 <bsec_applyScalarFunctionInPlace>:
   11d40:	b538      	push	{r3, r4, r5, lr}
   11d42:	4604      	mov	r4, r0
   11d44:	f100 050c 	add.w	r5, r0, #12
   11d48:	ed94 0a00 	vldr	s0, [r4]
   11d4c:	f019 f970 	bl	2b030 <sqrtf>
   11d50:	eca4 0a01 	vstmia	r4!, {s0}
   11d54:	42ac      	cmp	r4, r5
   11d56:	d1f7      	bne.n	11d48 <bsec_applyScalarFunctionInPlace+0x8>
   11d58:	bd38      	pop	{r3, r4, r5, pc}
   11d5a:	bf00      	nop

00011d5c <bsec_sin>:
   11d5c:	b538      	push	{r3, r4, r5, lr}
   11d5e:	4604      	mov	r4, r0
   11d60:	f100 050c 	add.w	r5, r0, #12
   11d64:	ed94 0a00 	vldr	s0, [r4]
   11d68:	f018 ffce 	bl	2ad08 <sinf>
   11d6c:	eca4 0a01 	vstmia	r4!, {s0}
   11d70:	42ac      	cmp	r4, r5
   11d72:	d1f7      	bne.n	11d64 <bsec_sin+0x8>
   11d74:	bd38      	pop	{r3, r4, r5, pc}
   11d76:	bf00      	nop

00011d78 <__aeabi_dcmpun>:
   11d78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d80:	d102      	bne.n	11d88 <__aeabi_dcmpun+0x10>
   11d82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11d86:	d10a      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d90:	d102      	bne.n	11d98 <__aeabi_dcmpun+0x20>
   11d92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11d96:	d102      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d98:	f04f 0000 	mov.w	r0, #0
   11d9c:	4770      	bx	lr
   11d9e:	f04f 0001 	mov.w	r0, #1
   11da2:	4770      	bx	lr

00011da4 <__aeabi_d2uiz>:
   11da4:	004a      	lsls	r2, r1, #1
   11da6:	d211      	bcs.n	11dcc <__aeabi_d2uiz+0x28>
   11da8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11dac:	d211      	bcs.n	11dd2 <__aeabi_d2uiz+0x2e>
   11dae:	d50d      	bpl.n	11dcc <__aeabi_d2uiz+0x28>
   11db0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11db4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11db8:	d40e      	bmi.n	11dd8 <__aeabi_d2uiz+0x34>
   11dba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11dc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11dc6:	fa23 f002 	lsr.w	r0, r3, r2
   11dca:	4770      	bx	lr
   11dcc:	f04f 0000 	mov.w	r0, #0
   11dd0:	4770      	bx	lr
   11dd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11dd6:	d102      	bne.n	11dde <__aeabi_d2uiz+0x3a>
   11dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11ddc:	4770      	bx	lr
   11dde:	f04f 0000 	mov.w	r0, #0
   11de2:	4770      	bx	lr

00011de4 <__aeabi_frsub>:
   11de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   11de8:	e002      	b.n	11df0 <__addsf3>
   11dea:	bf00      	nop

00011dec <__aeabi_fsub>:
   11dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00011df0 <__addsf3>:
   11df0:	0042      	lsls	r2, r0, #1
   11df2:	bf1f      	itttt	ne
   11df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   11df8:	ea92 0f03 	teqne	r2, r3
   11dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   11e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11e04:	d06a      	beq.n	11edc <__addsf3+0xec>
   11e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   11e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   11e0e:	bfc1      	itttt	gt
   11e10:	18d2      	addgt	r2, r2, r3
   11e12:	4041      	eorgt	r1, r0
   11e14:	4048      	eorgt	r0, r1
   11e16:	4041      	eorgt	r1, r0
   11e18:	bfb8      	it	lt
   11e1a:	425b      	neglt	r3, r3
   11e1c:	2b19      	cmp	r3, #25
   11e1e:	bf88      	it	hi
   11e20:	4770      	bxhi	lr
   11e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11e2e:	bf18      	it	ne
   11e30:	4240      	negne	r0, r0
   11e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   11e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   11e3e:	bf18      	it	ne
   11e40:	4249      	negne	r1, r1
   11e42:	ea92 0f03 	teq	r2, r3
   11e46:	d03f      	beq.n	11ec8 <__addsf3+0xd8>
   11e48:	f1a2 0201 	sub.w	r2, r2, #1
   11e4c:	fa41 fc03 	asr.w	ip, r1, r3
   11e50:	eb10 000c 	adds.w	r0, r0, ip
   11e54:	f1c3 0320 	rsb	r3, r3, #32
   11e58:	fa01 f103 	lsl.w	r1, r1, r3
   11e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11e60:	d502      	bpl.n	11e68 <__addsf3+0x78>
   11e62:	4249      	negs	r1, r1
   11e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   11e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11e6c:	d313      	bcc.n	11e96 <__addsf3+0xa6>
   11e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   11e72:	d306      	bcc.n	11e82 <__addsf3+0x92>
   11e74:	0840      	lsrs	r0, r0, #1
   11e76:	ea4f 0131 	mov.w	r1, r1, rrx
   11e7a:	f102 0201 	add.w	r2, r2, #1
   11e7e:	2afe      	cmp	r2, #254	; 0xfe
   11e80:	d251      	bcs.n	11f26 <__addsf3+0x136>
   11e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   11e8a:	bf08      	it	eq
   11e8c:	f020 0001 	biceq.w	r0, r0, #1
   11e90:	ea40 0003 	orr.w	r0, r0, r3
   11e94:	4770      	bx	lr
   11e96:	0049      	lsls	r1, r1, #1
   11e98:	eb40 0000 	adc.w	r0, r0, r0
   11e9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11ea0:	f1a2 0201 	sub.w	r2, r2, #1
   11ea4:	d1ed      	bne.n	11e82 <__addsf3+0x92>
   11ea6:	fab0 fc80 	clz	ip, r0
   11eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   11eae:	ebb2 020c 	subs.w	r2, r2, ip
   11eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   11eb6:	bfaa      	itet	ge
   11eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   11ebc:	4252      	neglt	r2, r2
   11ebe:	4318      	orrge	r0, r3
   11ec0:	bfbc      	itt	lt
   11ec2:	40d0      	lsrlt	r0, r2
   11ec4:	4318      	orrlt	r0, r3
   11ec6:	4770      	bx	lr
   11ec8:	f092 0f00 	teq	r2, #0
   11ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   11ed0:	bf06      	itte	eq
   11ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   11ed6:	3201      	addeq	r2, #1
   11ed8:	3b01      	subne	r3, #1
   11eda:	e7b5      	b.n	11e48 <__addsf3+0x58>
   11edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   11ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   11ee4:	bf18      	it	ne
   11ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11eea:	d021      	beq.n	11f30 <__addsf3+0x140>
   11eec:	ea92 0f03 	teq	r2, r3
   11ef0:	d004      	beq.n	11efc <__addsf3+0x10c>
   11ef2:	f092 0f00 	teq	r2, #0
   11ef6:	bf08      	it	eq
   11ef8:	4608      	moveq	r0, r1
   11efa:	4770      	bx	lr
   11efc:	ea90 0f01 	teq	r0, r1
   11f00:	bf1c      	itt	ne
   11f02:	2000      	movne	r0, #0
   11f04:	4770      	bxne	lr
   11f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   11f0a:	d104      	bne.n	11f16 <__addsf3+0x126>
   11f0c:	0040      	lsls	r0, r0, #1
   11f0e:	bf28      	it	cs
   11f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   11f14:	4770      	bx	lr
   11f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   11f1a:	bf3c      	itt	cc
   11f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   11f20:	4770      	bxcc	lr
   11f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11f2e:	4770      	bx	lr
   11f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11f34:	bf16      	itet	ne
   11f36:	4608      	movne	r0, r1
   11f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11f3c:	4601      	movne	r1, r0
   11f3e:	0242      	lsls	r2, r0, #9
   11f40:	bf06      	itte	eq
   11f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11f46:	ea90 0f01 	teqeq	r0, r1
   11f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   11f4e:	4770      	bx	lr

00011f50 <__aeabi_ui2f>:
   11f50:	f04f 0300 	mov.w	r3, #0
   11f54:	e004      	b.n	11f60 <__aeabi_i2f+0x8>
   11f56:	bf00      	nop

00011f58 <__aeabi_i2f>:
   11f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11f5c:	bf48      	it	mi
   11f5e:	4240      	negmi	r0, r0
   11f60:	ea5f 0c00 	movs.w	ip, r0
   11f64:	bf08      	it	eq
   11f66:	4770      	bxeq	lr
   11f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11f6c:	4601      	mov	r1, r0
   11f6e:	f04f 0000 	mov.w	r0, #0
   11f72:	e01c      	b.n	11fae <__aeabi_l2f+0x2a>

00011f74 <__aeabi_ul2f>:
   11f74:	ea50 0201 	orrs.w	r2, r0, r1
   11f78:	bf08      	it	eq
   11f7a:	4770      	bxeq	lr
   11f7c:	f04f 0300 	mov.w	r3, #0
   11f80:	e00a      	b.n	11f98 <__aeabi_l2f+0x14>
   11f82:	bf00      	nop

00011f84 <__aeabi_l2f>:
   11f84:	ea50 0201 	orrs.w	r2, r0, r1
   11f88:	bf08      	it	eq
   11f8a:	4770      	bxeq	lr
   11f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   11f90:	d502      	bpl.n	11f98 <__aeabi_l2f+0x14>
   11f92:	4240      	negs	r0, r0
   11f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11f98:	ea5f 0c01 	movs.w	ip, r1
   11f9c:	bf02      	ittt	eq
   11f9e:	4684      	moveq	ip, r0
   11fa0:	4601      	moveq	r1, r0
   11fa2:	2000      	moveq	r0, #0
   11fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   11fa8:	bf08      	it	eq
   11faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   11fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   11fb2:	fabc f28c 	clz	r2, ip
   11fb6:	3a08      	subs	r2, #8
   11fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   11fbc:	db10      	blt.n	11fe0 <__aeabi_l2f+0x5c>
   11fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   11fc2:	4463      	add	r3, ip
   11fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   11fc8:	f1c2 0220 	rsb	r2, r2, #32
   11fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11fd0:	fa20 f202 	lsr.w	r2, r0, r2
   11fd4:	eb43 0002 	adc.w	r0, r3, r2
   11fd8:	bf08      	it	eq
   11fda:	f020 0001 	biceq.w	r0, r0, #1
   11fde:	4770      	bx	lr
   11fe0:	f102 0220 	add.w	r2, r2, #32
   11fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   11fe8:	f1c2 0220 	rsb	r2, r2, #32
   11fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   11ff0:	fa21 f202 	lsr.w	r2, r1, r2
   11ff4:	eb43 0002 	adc.w	r0, r3, r2
   11ff8:	bf08      	it	eq
   11ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   11ffe:	4770      	bx	lr

00012000 <__aeabi_d2lz>:
   12000:	b538      	push	{r3, r4, r5, lr}
   12002:	2200      	movs	r2, #0
   12004:	2300      	movs	r3, #0
   12006:	4604      	mov	r4, r0
   12008:	460d      	mov	r5, r1
   1200a:	f7fb fac1 	bl	d590 <__aeabi_dcmplt>
   1200e:	b928      	cbnz	r0, 1201c <__aeabi_d2lz+0x1c>
   12010:	4620      	mov	r0, r4
   12012:	4629      	mov	r1, r5
   12014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12018:	f000 b80a 	b.w	12030 <__aeabi_d2ulz>
   1201c:	4620      	mov	r0, r4
   1201e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   12022:	f000 f805 	bl	12030 <__aeabi_d2ulz>
   12026:	4240      	negs	r0, r0
   12028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1202c:	bd38      	pop	{r3, r4, r5, pc}
   1202e:	bf00      	nop

00012030 <__aeabi_d2ulz>:
   12030:	b5d0      	push	{r4, r6, r7, lr}
   12032:	2200      	movs	r2, #0
   12034:	4b0b      	ldr	r3, [pc, #44]	; (12064 <__aeabi_d2ulz+0x34>)
   12036:	4606      	mov	r6, r0
   12038:	460f      	mov	r7, r1
   1203a:	f7fb f837 	bl	d0ac <__aeabi_dmul>
   1203e:	f7ff feb1 	bl	11da4 <__aeabi_d2uiz>
   12042:	4604      	mov	r4, r0
   12044:	f7fa ffb8 	bl	cfb8 <__aeabi_ui2d>
   12048:	2200      	movs	r2, #0
   1204a:	4b07      	ldr	r3, [pc, #28]	; (12068 <__aeabi_d2ulz+0x38>)
   1204c:	f7fb f82e 	bl	d0ac <__aeabi_dmul>
   12050:	4602      	mov	r2, r0
   12052:	460b      	mov	r3, r1
   12054:	4630      	mov	r0, r6
   12056:	4639      	mov	r1, r7
   12058:	f7fa fe70 	bl	cd3c <__aeabi_dsub>
   1205c:	f7ff fea2 	bl	11da4 <__aeabi_d2uiz>
   12060:	4621      	mov	r1, r4
   12062:	bdd0      	pop	{r4, r6, r7, pc}
   12064:	3df00000 	.word	0x3df00000
   12068:	41f00000 	.word	0x41f00000

0001206c <strcmp>:
   1206c:	f810 2b01 	ldrb.w	r2, [r0], #1
   12070:	f811 3b01 	ldrb.w	r3, [r1], #1
   12074:	2a01      	cmp	r2, #1
   12076:	bf28      	it	cs
   12078:	429a      	cmpcs	r2, r3
   1207a:	d0f7      	beq.n	1206c <strcmp>
   1207c:	1ad0      	subs	r0, r2, r3
   1207e:	4770      	bx	lr

00012080 <strlen>:
   12080:	4603      	mov	r3, r0
   12082:	f813 2b01 	ldrb.w	r2, [r3], #1
   12086:	2a00      	cmp	r2, #0
   12088:	d1fb      	bne.n	12082 <strlen+0x2>
   1208a:	1a18      	subs	r0, r3, r0
   1208c:	3801      	subs	r0, #1
   1208e:	4770      	bx	lr

00012090 <app_gc_iot>:
}


/**@brief Main Processing Thread */
void app_gc_iot(void)
{
   12090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	ed2d 8b02 	vpush	{d8}
    struct m_info_t info;

    struct k_mbox_msg env_d_recv_msg;

    /* Block until time avail */
    while (!got_ntp) 
   12098:	4cb3      	ldr	r4, [pc, #716]	; (12368 <app_gc_iot+0x2d8>)
{
   1209a:	b0e5      	sub	sp, #404	; 0x194
    while (!got_ntp) 
   1209c:	7823      	ldrb	r3, [r4, #0]
   1209e:	2b00      	cmp	r3, #0
   120a0:	f000 8151 	beq.w	12346 <app_gc_iot+0x2b6>
            jQualCal = cJSON_CreateString("no");
        } else {
           jQualCal = cJSON_CreateString("yes"); 
        }
        
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   120a4:	ed9f 8bac 	vldr	d8, [pc, #688]	; 12358 <app_gc_iot+0x2c8>
        env_d_recv_msg.size = sizeof(pac_data);
   120a8:	2340      	movs	r3, #64	; 0x40
   120aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   120ae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
        env_d_recv_msg.rx_source_thread = K_ANY; //TODO: Get producer thread id
   120b2:	2300      	movs	r3, #0
        k_mbox_get(&env_d_mailbox, &env_d_recv_msg, &pac_data, K_FOREVER);
   120b4:	aa1e      	add	r2, sp, #120	; 0x78
   120b6:	a913      	add	r1, sp, #76	; 0x4c
        env_d_recv_msg.rx_source_thread = K_ANY; //TODO: Get producer thread id
   120b8:	931a      	str	r3, [sp, #104]	; 0x68
        k_mbox_get(&env_d_mailbox, &env_d_recv_msg, &pac_data, K_FOREVER);
   120ba:	48ac      	ldr	r0, [pc, #688]	; (1236c <app_gc_iot+0x2dc>)
   120bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120c0:	f015 fb74 	bl	277ac <k_mbox_get>
        get_modem_info(&info);
   120c4:	a82e      	add	r0, sp, #184	; 0xb8
   120c6:	f01b fbb0 	bl	2d82a <get_modem_info>
        cJSON * envSensObj = cJSON_CreateObject();
   120ca:	f01b fc9c 	bl	2da06 <cJSON_CreateObject>
   120ce:	4604      	mov	r4, r0
        jTempMax = cJSON_CreateNumber((s32_t)pac_data.ag_temp.max);
   120d0:	981e      	ldr	r0, [sp, #120]	; 0x78
   120d2:	f7fa ff81 	bl	cfd8 <__aeabi_i2d>
   120d6:	ec41 0b10 	vmov	d0, r0, r1
   120da:	f01b fc71 	bl	2d9c0 <cJSON_CreateNumber>
   120de:	4683      	mov	fp, r0
        jTempMin = cJSON_CreateNumber((s32_t)pac_data.ag_temp.min);
   120e0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   120e2:	f7fa ff79 	bl	cfd8 <__aeabi_i2d>
   120e6:	ec41 0b10 	vmov	d0, r0, r1
   120ea:	f01b fc69 	bl	2d9c0 <cJSON_CreateNumber>
   120ee:	9001      	str	r0, [sp, #4]
        jTempAvg = cJSON_CreateNumber((s32_t)pac_data.ag_temp.avg);
   120f0:	9820      	ldr	r0, [sp, #128]	; 0x80
   120f2:	f7fa ff71 	bl	cfd8 <__aeabi_i2d>
   120f6:	ec41 0b10 	vmov	d0, r0, r1
   120fa:	f01b fc61 	bl	2d9c0 <cJSON_CreateNumber>
   120fe:	9002      	str	r0, [sp, #8]
        jHumiMax = cJSON_CreateNumber((s32_t)pac_data.ag_humi.max);
   12100:	9822      	ldr	r0, [sp, #136]	; 0x88
   12102:	f7fa ff69 	bl	cfd8 <__aeabi_i2d>
   12106:	ec41 0b10 	vmov	d0, r0, r1
   1210a:	f01b fc59 	bl	2d9c0 <cJSON_CreateNumber>
   1210e:	4682      	mov	sl, r0
        jHumiMin = cJSON_CreateNumber((s32_t)pac_data.ag_humi.min);
   12110:	9823      	ldr	r0, [sp, #140]	; 0x8c
   12112:	f7fa ff61 	bl	cfd8 <__aeabi_i2d>
   12116:	ec41 0b10 	vmov	d0, r0, r1
   1211a:	f01b fc51 	bl	2d9c0 <cJSON_CreateNumber>
   1211e:	9003      	str	r0, [sp, #12]
        jHumiAvg = cJSON_CreateNumber((s32_t)pac_data.ag_humi.avg);
   12120:	9824      	ldr	r0, [sp, #144]	; 0x90
   12122:	f7fa ff59 	bl	cfd8 <__aeabi_i2d>
   12126:	ec41 0b10 	vmov	d0, r0, r1
   1212a:	f01b fc49 	bl	2d9c0 <cJSON_CreateNumber>
   1212e:	9004      	str	r0, [sp, #16]
        jPresMax = cJSON_CreateNumber((s32_t)pac_data.ag_pres.max);
   12130:	9826      	ldr	r0, [sp, #152]	; 0x98
   12132:	f7fa ff51 	bl	cfd8 <__aeabi_i2d>
   12136:	ec41 0b10 	vmov	d0, r0, r1
   1213a:	f01b fc41 	bl	2d9c0 <cJSON_CreateNumber>
   1213e:	4681      	mov	r9, r0
        jPresMin = cJSON_CreateNumber((s32_t)pac_data.ag_pres.min);
   12140:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12142:	f7fa ff49 	bl	cfd8 <__aeabi_i2d>
   12146:	ec41 0b10 	vmov	d0, r0, r1
   1214a:	f01b fc39 	bl	2d9c0 <cJSON_CreateNumber>
   1214e:	9005      	str	r0, [sp, #20]
        jPresAvg = cJSON_CreateNumber((s32_t)pac_data.ag_pres.avg);
   12150:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12152:	f7fa ff41 	bl	cfd8 <__aeabi_i2d>
   12156:	ec41 0b10 	vmov	d0, r0, r1
   1215a:	f01b fc31 	bl	2d9c0 <cJSON_CreateNumber>
   1215e:	9006      	str	r0, [sp, #24]
        jQualMax = cJSON_CreateNumber((s32_t)pac_data.ag_qual.max);
   12160:	982a      	ldr	r0, [sp, #168]	; 0xa8
   12162:	f7fa ff39 	bl	cfd8 <__aeabi_i2d>
   12166:	ec41 0b10 	vmov	d0, r0, r1
   1216a:	f01b fc29 	bl	2d9c0 <cJSON_CreateNumber>
   1216e:	4680      	mov	r8, r0
        jQualMin = cJSON_CreateNumber((s32_t)pac_data.ag_qual.min);
   12170:	982b      	ldr	r0, [sp, #172]	; 0xac
   12172:	f7fa ff31 	bl	cfd8 <__aeabi_i2d>
   12176:	ec41 0b10 	vmov	d0, r0, r1
   1217a:	f01b fc21 	bl	2d9c0 <cJSON_CreateNumber>
   1217e:	9007      	str	r0, [sp, #28]
        jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   12180:	982c      	ldr	r0, [sp, #176]	; 0xb0
   12182:	f7fa ff29 	bl	cfd8 <__aeabi_i2d>
   12186:	ec41 0b10 	vmov	d0, r0, r1
   1218a:	f01b fc19 	bl	2d9c0 <cJSON_CreateNumber>
        if (pac_data.ag_qual.avg == EXCLUDE) {
   1218e:	f240 33e7 	movw	r3, #999	; 0x3e7
   12192:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
        jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   12194:	9008      	str	r0, [sp, #32]
        if (pac_data.ag_qual.avg == EXCLUDE) {
   12196:	429a      	cmp	r2, r3
            jQualCal = cJSON_CreateString("no");
   12198:	bf0c      	ite	eq
   1219a:	4875      	ldreq	r0, [pc, #468]	; (12370 <app_gc_iot+0x2e0>)
           jQualCal = cJSON_CreateString("yes"); 
   1219c:	4875      	ldrne	r0, [pc, #468]	; (12374 <app_gc_iot+0x2e4>)
   1219e:	f01b fc24 	bl	2d9ea <cJSON_CreateString>
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121a2:	eeb0 0a48 	vmov.f32	s0, s16
   121a6:	eef0 0a68 	vmov.f32	s1, s17
           jQualCal = cJSON_CreateString("yes"); 
   121aa:	4605      	mov	r5, r0
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121ac:	f01b fc08 	bl	2d9c0 <cJSON_CreateNumber>
        jSampFrq = cJSON_CreateNumber(SAMP_FREQ);
   121b0:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 12360 <app_gc_iot+0x2d0>
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121b4:	9009      	str	r0, [sp, #36]	; 0x24
        jSampFrq = cJSON_CreateNumber(SAMP_FREQ);
   121b6:	f01b fc03 	bl	2d9c0 <cJSON_CreateNumber>
   121ba:	900a      	str	r0, [sp, #40]	; 0x28

        jQualCnt = cJSON_CreateNumber((s32_t)pac_data.ag_qual.cnt);
   121bc:	982d      	ldr	r0, [sp, #180]	; 0xb4
   121be:	f7fa ff0b 	bl	cfd8 <__aeabi_i2d>
   121c2:	ec41 0b10 	vmov	d0, r0, r1
   121c6:	f01b fbfb 	bl	2d9c0 <cJSON_CreateNumber>
   121ca:	900b      	str	r0, [sp, #44]	; 0x2c
        
        jCid = cJSON_CreateString((const char*)info.cid);
   121cc:	a82e      	add	r0, sp, #184	; 0xb8
   121ce:	f01b fc0c 	bl	2d9ea <cJSON_CreateString>
   121d2:	900c      	str	r0, [sp, #48]	; 0x30
        jTac = cJSON_CreateString((const char*)info.tac);
   121d4:	f10d 00d6 	add.w	r0, sp, #214	; 0xd6
   121d8:	f01b fc07 	bl	2d9ea <cJSON_CreateString>
   121dc:	900d      	str	r0, [sp, #52]	; 0x34
        jRssi = cJSON_CreateString((const char*)info.rssi);
   121de:	a83d      	add	r0, sp, #244	; 0xf4
   121e0:	f01b fc03 	bl	2d9ea <cJSON_CreateString>
   121e4:	900e      	str	r0, [sp, #56]	; 0x38
        jApn = cJSON_CreateString((const char*)info.apn);
   121e6:	f50d 7089 	add.w	r0, sp, #274	; 0x112
   121ea:	f01b fbfe 	bl	2d9ea <cJSON_CreateString>
   121ee:	900f      	str	r0, [sp, #60]	; 0x3c
        jFwv = cJSON_CreateString((const char*)info.fwv);
   121f0:	f50d 70a7 	add.w	r0, sp, #334	; 0x14e
   121f4:	f01b fbf9 	bl	2d9ea <cJSON_CreateString>
   121f8:	9010      	str	r0, [sp, #64]	; 0x40
        jVltg = cJSON_CreateNumber((u16_t)info.vltg);
   121fa:	f8bd 018a 	ldrh.w	r0, [sp, #394]	; 0x18a
   121fe:	f7fa fedb 	bl	cfb8 <__aeabi_ui2d>
   12202:	ec41 0b10 	vmov	d0, r0, r1
   12206:	f01b fbdb 	bl	2d9c0 <cJSON_CreateNumber>
   1220a:	9011      	str	r0, [sp, #68]	; 0x44
        jTemp = cJSON_CreateNumber((u16_t)info.temp);
   1220c:	f8bd 018c 	ldrh.w	r0, [sp, #396]	; 0x18c
   12210:	f7fa fed2 	bl	cfb8 <__aeabi_ui2d>
   12214:	ec41 0b10 	vmov	d0, r0, r1
   12218:	f01b fbd2 	bl	2d9c0 <cJSON_CreateNumber>
   1221c:	4607      	mov	r7, r0

        jDvFwv = cJSON_CreateString((const char*)device_fw_ver);
   1221e:	4856      	ldr	r0, [pc, #344]	; (12378 <app_gc_iot+0x2e8>)
   12220:	f01b fbe3 	bl	2d9ea <cJSON_CreateString>
   12224:	4606      	mov	r6, r0

        /* Add cJSON items to object */
        cJSON_AddItemToObject(envSensObj, jTempMaxString, jTempMax);
   12226:	465a      	mov	r2, fp
   12228:	4954      	ldr	r1, [pc, #336]	; (1237c <app_gc_iot+0x2ec>)
   1222a:	4620      	mov	r0, r4
   1222c:	f003 fbb6 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMaxString, jHumiMax);
   12230:	4652      	mov	r2, sl
   12232:	4953      	ldr	r1, [pc, #332]	; (12380 <app_gc_iot+0x2f0>)
   12234:	4620      	mov	r0, r4
   12236:	f003 fbb1 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMaxString, jPresMax);
   1223a:	464a      	mov	r2, r9
   1223c:	4951      	ldr	r1, [pc, #324]	; (12384 <app_gc_iot+0x2f4>)
   1223e:	4620      	mov	r0, r4
   12240:	f003 fbac 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMaxString, jQualMax);
   12244:	4642      	mov	r2, r8
   12246:	4950      	ldr	r1, [pc, #320]	; (12388 <app_gc_iot+0x2f8>)
   12248:	4620      	mov	r0, r4
   1224a:	f003 fba7 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempMinString, jTempMin);
   1224e:	9a01      	ldr	r2, [sp, #4]
   12250:	494e      	ldr	r1, [pc, #312]	; (1238c <app_gc_iot+0x2fc>)
   12252:	4620      	mov	r0, r4
   12254:	f003 fba2 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMinString, jHumiMin);
   12258:	9a03      	ldr	r2, [sp, #12]
   1225a:	494d      	ldr	r1, [pc, #308]	; (12390 <app_gc_iot+0x300>)
   1225c:	4620      	mov	r0, r4
   1225e:	f003 fb9d 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMinString, jPresMin);
   12262:	9a05      	ldr	r2, [sp, #20]
   12264:	494b      	ldr	r1, [pc, #300]	; (12394 <app_gc_iot+0x304>)
   12266:	4620      	mov	r0, r4
   12268:	f003 fb98 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMinString, jQualMin);
   1226c:	9a07      	ldr	r2, [sp, #28]
   1226e:	494a      	ldr	r1, [pc, #296]	; (12398 <app_gc_iot+0x308>)
   12270:	4620      	mov	r0, r4
   12272:	f003 fb93 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempAvgString, jTempAvg);
   12276:	9a02      	ldr	r2, [sp, #8]
   12278:	4948      	ldr	r1, [pc, #288]	; (1239c <app_gc_iot+0x30c>)
   1227a:	4620      	mov	r0, r4
   1227c:	f003 fb8e 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiAvgString, jHumiAvg);
   12280:	9a04      	ldr	r2, [sp, #16]
   12282:	4947      	ldr	r1, [pc, #284]	; (123a0 <app_gc_iot+0x310>)
   12284:	4620      	mov	r0, r4
   12286:	f003 fb89 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresAvgString, jPresAvg);
   1228a:	9a06      	ldr	r2, [sp, #24]
   1228c:	4945      	ldr	r1, [pc, #276]	; (123a4 <app_gc_iot+0x314>)
   1228e:	4620      	mov	r0, r4
   12290:	f003 fb84 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualAvgString, jQualAvg);
   12294:	9a08      	ldr	r2, [sp, #32]
   12296:	4944      	ldr	r1, [pc, #272]	; (123a8 <app_gc_iot+0x318>)
   12298:	4620      	mov	r0, r4
   1229a:	f003 fb7f 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jSampSzString, jSampSz);
   1229e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   122a0:	4942      	ldr	r1, [pc, #264]	; (123ac <app_gc_iot+0x31c>)
   122a2:	4620      	mov	r0, r4
   122a4:	f003 fb7a 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jSampFrqString, jSampFrq);
   122a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   122aa:	4941      	ldr	r1, [pc, #260]	; (123b0 <app_gc_iot+0x320>)
   122ac:	4620      	mov	r0, r4
   122ae:	f003 fb75 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jCidString, jCid);
   122b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   122b4:	493f      	ldr	r1, [pc, #252]	; (123b4 <app_gc_iot+0x324>)
   122b6:	4620      	mov	r0, r4
   122b8:	f003 fb70 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTacString, jTac);
   122bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   122be:	493e      	ldr	r1, [pc, #248]	; (123b8 <app_gc_iot+0x328>)
   122c0:	4620      	mov	r0, r4
   122c2:	f003 fb6b 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jRssiString, jRssi);
   122c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   122c8:	493c      	ldr	r1, [pc, #240]	; (123bc <app_gc_iot+0x32c>)
   122ca:	4620      	mov	r0, r4
   122cc:	f003 fb66 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jApnString, jApn);
   122d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   122d2:	493b      	ldr	r1, [pc, #236]	; (123c0 <app_gc_iot+0x330>)
   122d4:	4620      	mov	r0, r4
   122d6:	f003 fb61 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jFwvString, jFwv);
   122da:	9a10      	ldr	r2, [sp, #64]	; 0x40
   122dc:	4939      	ldr	r1, [pc, #228]	; (123c4 <app_gc_iot+0x334>)
   122de:	4620      	mov	r0, r4
   122e0:	f003 fb5c 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jVltgString, jVltg);
   122e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   122e6:	4938      	ldr	r1, [pc, #224]	; (123c8 <app_gc_iot+0x338>)
   122e8:	461a      	mov	r2, r3
   122ea:	4620      	mov	r0, r4
   122ec:	f003 fb56 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTempString, jTemp);
   122f0:	463a      	mov	r2, r7
   122f2:	4936      	ldr	r1, [pc, #216]	; (123cc <app_gc_iot+0x33c>)
   122f4:	4620      	mov	r0, r4
   122f6:	f003 fb51 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jQualCntString, jQualCnt);
   122fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   122fc:	4934      	ldr	r1, [pc, #208]	; (123d0 <app_gc_iot+0x340>)
   122fe:	4620      	mov	r0, r4
   12300:	f003 fb4c 	bl	1599c <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualCalString, jQualCal);
   12304:	462a      	mov	r2, r5
   12306:	4933      	ldr	r1, [pc, #204]	; (123d4 <app_gc_iot+0x344>)
   12308:	4620      	mov	r0, r4
   1230a:	f003 fb47 	bl	1599c <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jDevFwvString, jDvFwv);
   1230e:	4632      	mov	r2, r6
   12310:	4931      	ldr	r1, [pc, #196]	; (123d8 <app_gc_iot+0x348>)
   12312:	4620      	mov	r0, r4
   12314:	f003 fb42 	bl	1599c <cJSON_AddItemToObject>

        /* Create JSON string from object */
        JSONEnvString = cJSON_Print(envSensObj);
   12318:	4620      	mov	r0, r4
   1231a:	f01b fb40 	bl	2d99e <cJSON_Print>
            LOG_DBG("Failed to print envSensObj\n");
        }

        /* Send JSON data */
        LOG_INF("Sending JSON data\n");
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   1231e:	4605      	mov	r5, r0
   12320:	b1b0      	cbz	r0, 12350 <app_gc_iot+0x2c0>
   12322:	f7ff fead 	bl	12080 <strlen>
   12326:	4601      	mov	r1, r0
   12328:	2200      	movs	r2, #0
   1232a:	4628      	mov	r0, r5
   1232c:	f002 fb18 	bl	14960 <gcloud_publish>
        if (pub_success != 0) {
            LOG_INF("JSON data Publish failed\n");
        }

        /* Cleanup JSON obj - release memory */
        cJSON_Delete(envSensObj);
   12330:	4620      	mov	r0, r4
   12332:	f003 fadb 	bl	158ec <cJSON_Delete>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&timeout, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   12336:	f644 6020 	movw	r0, #20000	; 0x4e20
   1233a:	f017 fa15 	bl	29768 <z_impl_k_sleep>

        /* Reboot */
        LOG_INF("Rebooting in [%d] seconds\n", REBOOT_TIMEOUT/1000);
        k_sleep(K_MSEC(REBOOT_TIMEOUT));
        LOG_INF("Rebooting\n");
        sys_reboot(0);
   1233e:	2000      	movs	r0, #0
   12340:	f005 fdc0 	bl	17ec4 <sys_reboot>
    while(true) {
   12344:	e6b0      	b.n	120a8 <app_gc_iot+0x18>
   12346:	f242 7010 	movw	r0, #10000	; 0x2710
   1234a:	f017 fa0d 	bl	29768 <z_impl_k_sleep>
   1234e:	e6a5      	b.n	1209c <app_gc_iot+0xc>
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   12350:	4601      	mov	r1, r0
   12352:	e7e9      	b.n	12328 <app_gc_iot+0x298>
   12354:	f3af 8000 	nop.w
   12358:	00000000 	.word	0x00000000
   1235c:	406e0000 	.word	0x406e0000
   12360:	00000000 	.word	0x00000000
   12364:	40408000 	.word	0x40408000
   12368:	20027466 	.word	0x20027466
   1236c:	20020f7c 	.word	0x20020f7c
   12370:	00036f6a 	.word	0x00036f6a
   12374:	00035844 	.word	0x00035844
   12378:	00035848 	.word	0x00035848
   1237c:	00035861 	.word	0x00035861
   12380:	00035869 	.word	0x00035869
   12384:	00035871 	.word	0x00035871
   12388:	00035879 	.word	0x00035879
   1238c:	00035881 	.word	0x00035881
   12390:	00035889 	.word	0x00035889
   12394:	00035891 	.word	0x00035891
   12398:	00035899 	.word	0x00035899
   1239c:	000358a1 	.word	0x000358a1
   123a0:	000358a9 	.word	0x000358a9
   123a4:	000358b1 	.word	0x000358b1
   123a8:	000358b9 	.word	0x000358b9
   123ac:	000358c1 	.word	0x000358c1
   123b0:	000358ca 	.word	0x000358ca
   123b4:	00036ddb 	.word	0x00036ddb
   123b8:	000358d4 	.word	0x000358d4
   123bc:	000358d8 	.word	0x000358d8
   123c0:	000358dd 	.word	0x000358dd
   123c4:	000358e1 	.word	0x000358e1
   123c8:	000358e6 	.word	0x000358e6
   123cc:	000358eb 	.word	0x000358eb
   123d0:	000358f1 	.word	0x000358f1
   123d4:	000358f9 	.word	0x000358f9
   123d8:	00035904 	.word	0x00035904
   123dc:	00000000 	.word	0x00000000

000123e0 <print_number>:
	return p->offset + strlens(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item, printbuffer *p)
{
   123e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = 0;
	double d = item->valuedouble;
   123e2:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
{
   123e6:	4605      	mov	r5, r0
   123e8:	460c      	mov	r4, r1
	if (d == 0) {
   123ea:	2200      	movs	r2, #0
   123ec:	2300      	movs	r3, #0
   123ee:	4630      	mov	r0, r6
   123f0:	4639      	mov	r1, r7
   123f2:	f7fb f8c3 	bl	d57c <__aeabi_dcmpeq>
   123f6:	b180      	cbz	r0, 1241a <print_number+0x3a>
		if (p)
   123f8:	b154      	cbz	r4, 12410 <print_number+0x30>
			str = ensure(p, 2);
   123fa:	2102      	movs	r1, #2
   123fc:	4620      	mov	r0, r4
   123fe:	f002 fe1d 	bl	1503c <ensure>
		else
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   12402:	4604      	mov	r4, r0
		if (str)
   12404:	b110      	cbz	r0, 1240c <print_number+0x2c>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   12406:	4952      	ldr	r1, [pc, #328]	; (12550 <print_number+0x170>)
   12408:	f021 fb3f 	bl	33a8a <strcpy>
			else
				sprintf(str, "%f", d);
		}
	}
	return str;
}
   1240c:	4620      	mov	r0, r4
   1240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   12410:	4b50      	ldr	r3, [pc, #320]	; (12554 <print_number+0x174>)
   12412:	2002      	movs	r0, #2
   12414:	681b      	ldr	r3, [r3, #0]
   12416:	4798      	blx	r3
   12418:	e7f3      	b.n	12402 <print_number+0x22>
	} else if (fabs(((double)item->valueint) - d) <= DBL_EPSILON &&
   1241a:	6968      	ldr	r0, [r5, #20]
   1241c:	f7fa fddc 	bl	cfd8 <__aeabi_i2d>
   12420:	4632      	mov	r2, r6
   12422:	463b      	mov	r3, r7
   12424:	f7fa fc8a 	bl	cd3c <__aeabi_dsub>
   12428:	ec41 0b10 	vmov	d0, r0, r1
   1242c:	f018 fbfa 	bl	2ac24 <fabs>
   12430:	2200      	movs	r2, #0
   12432:	4b49      	ldr	r3, [pc, #292]	; (12558 <print_number+0x178>)
   12434:	ec51 0b10 	vmov	r0, r1, d0
   12438:	f7fb f8b4 	bl	d5a4 <__aeabi_dcmple>
   1243c:	b300      	cbz	r0, 12480 <print_number+0xa0>
   1243e:	a33c      	add	r3, pc, #240	; (adr r3, 12530 <print_number+0x150>)
   12440:	e9d3 2300 	ldrd	r2, r3, [r3]
   12444:	4630      	mov	r0, r6
   12446:	4639      	mov	r1, r7
   12448:	f7fb f8ac 	bl	d5a4 <__aeabi_dcmple>
   1244c:	b1c0      	cbz	r0, 12480 <print_number+0xa0>
		   d <= INT_MAX && d >= INT_MIN) {
   1244e:	2200      	movs	r2, #0
   12450:	4b42      	ldr	r3, [pc, #264]	; (1255c <print_number+0x17c>)
   12452:	4630      	mov	r0, r6
   12454:	4639      	mov	r1, r7
   12456:	f7fb f8af 	bl	d5b8 <__aeabi_dcmpge>
   1245a:	b188      	cbz	r0, 12480 <print_number+0xa0>
		if (p)
   1245c:	b15c      	cbz	r4, 12476 <print_number+0x96>
			str = ensure(p, 21);
   1245e:	2115      	movs	r1, #21
   12460:	4620      	mov	r0, r4
   12462:	f002 fdeb 	bl	1503c <ensure>
			str = (char *)cJSON_malloc(
   12466:	4604      	mov	r4, r0
		if (str)
   12468:	2800      	cmp	r0, #0
   1246a:	d0cf      	beq.n	1240c <print_number+0x2c>
			sprintf(str, "%d", item->valueint);
   1246c:	696a      	ldr	r2, [r5, #20]
   1246e:	493c      	ldr	r1, [pc, #240]	; (12560 <print_number+0x180>)
   12470:	f01a fee2 	bl	2d238 <siprintf>
   12474:	e7ca      	b.n	1240c <print_number+0x2c>
			str = (char *)cJSON_malloc(
   12476:	4b37      	ldr	r3, [pc, #220]	; (12554 <print_number+0x174>)
   12478:	2015      	movs	r0, #21
   1247a:	681b      	ldr	r3, [r3, #0]
   1247c:	4798      	blx	r3
   1247e:	e7f2      	b.n	12466 <print_number+0x86>
		if (p)
   12480:	b374      	cbz	r4, 124e0 <print_number+0x100>
			str = ensure(p, 64);
   12482:	2140      	movs	r1, #64	; 0x40
   12484:	4620      	mov	r0, r4
   12486:	f002 fdd9 	bl	1503c <ensure>
			str = (char *)cJSON_malloc(
   1248a:	4604      	mov	r4, r0
		if (str) {
   1248c:	2800      	cmp	r0, #0
   1248e:	d0bd      	beq.n	1240c <print_number+0x2c>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   12490:	ec47 6b10 	vmov	d0, r6, r7
   12494:	f000 fb28 	bl	12ae8 <floor>
   12498:	4632      	mov	r2, r6
   1249a:	463b      	mov	r3, r7
   1249c:	ec51 0b10 	vmov	r0, r1, d0
   124a0:	f7fa fc4c 	bl	cd3c <__aeabi_dsub>
   124a4:	ec41 0b10 	vmov	d0, r0, r1
   124a8:	f018 fbbc 	bl	2ac24 <fabs>
   124ac:	2200      	movs	r2, #0
   124ae:	4b2a      	ldr	r3, [pc, #168]	; (12558 <print_number+0x178>)
   124b0:	ec51 0b10 	vmov	r0, r1, d0
   124b4:	f7fb f876 	bl	d5a4 <__aeabi_dcmple>
   124b8:	b1b8      	cbz	r0, 124ea <print_number+0x10a>
			    fabs(d) < 1.0e60)
   124ba:	ec47 6b10 	vmov	d0, r6, r7
   124be:	f018 fbb1 	bl	2ac24 <fabs>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   124c2:	a31d      	add	r3, pc, #116	; (adr r3, 12538 <print_number+0x158>)
   124c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   124c8:	ec51 0b10 	vmov	r0, r1, d0
   124cc:	f7fb f860 	bl	d590 <__aeabi_dcmplt>
   124d0:	b158      	cbz	r0, 124ea <print_number+0x10a>
				sprintf(str, "%.0f", d);
   124d2:	4632      	mov	r2, r6
   124d4:	463b      	mov	r3, r7
   124d6:	4923      	ldr	r1, [pc, #140]	; (12564 <print_number+0x184>)
				sprintf(str, "%f", d);
   124d8:	4620      	mov	r0, r4
   124da:	f01a fead 	bl	2d238 <siprintf>
	return str;
   124de:	e795      	b.n	1240c <print_number+0x2c>
			str = (char *)cJSON_malloc(
   124e0:	4b1c      	ldr	r3, [pc, #112]	; (12554 <print_number+0x174>)
   124e2:	2040      	movs	r0, #64	; 0x40
   124e4:	681b      	ldr	r3, [r3, #0]
   124e6:	4798      	blx	r3
   124e8:	e7cf      	b.n	1248a <print_number+0xaa>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   124ea:	ec47 6b10 	vmov	d0, r6, r7
   124ee:	f018 fb99 	bl	2ac24 <fabs>
   124f2:	a313      	add	r3, pc, #76	; (adr r3, 12540 <print_number+0x160>)
   124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   124f8:	ec51 0b10 	vmov	r0, r1, d0
   124fc:	f7fb f848 	bl	d590 <__aeabi_dcmplt>
   12500:	b118      	cbz	r0, 1250a <print_number+0x12a>
				sprintf(str, "%e", d);
   12502:	4632      	mov	r2, r6
   12504:	463b      	mov	r3, r7
   12506:	4918      	ldr	r1, [pc, #96]	; (12568 <print_number+0x188>)
   12508:	e7e6      	b.n	124d8 <print_number+0xf8>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   1250a:	ec47 6b10 	vmov	d0, r6, r7
   1250e:	f018 fb89 	bl	2ac24 <fabs>
   12512:	a30d      	add	r3, pc, #52	; (adr r3, 12548 <print_number+0x168>)
   12514:	e9d3 2300 	ldrd	r2, r3, [r3]
   12518:	ec51 0b10 	vmov	r0, r1, d0
   1251c:	f7fb f856 	bl	d5cc <__aeabi_dcmpgt>
   12520:	2800      	cmp	r0, #0
   12522:	d1ee      	bne.n	12502 <print_number+0x122>
				sprintf(str, "%f", d);
   12524:	4632      	mov	r2, r6
   12526:	463b      	mov	r3, r7
   12528:	4910      	ldr	r1, [pc, #64]	; (1256c <print_number+0x18c>)
   1252a:	e7d5      	b.n	124d8 <print_number+0xf8>
   1252c:	f3af 8000 	nop.w
   12530:	ffc00000 	.word	0xffc00000
   12534:	41dfffff 	.word	0x41dfffff
   12538:	e4c2f344 	.word	0xe4c2f344
   1253c:	4c63e9e4 	.word	0x4c63e9e4
   12540:	a0b5ed8d 	.word	0xa0b5ed8d
   12544:	3eb0c6f7 	.word	0x3eb0c6f7
   12548:	00000000 	.word	0x00000000
   1254c:	41cdcd65 	.word	0x41cdcd65
   12550:	00037308 	.word	0x00037308
   12554:	20020080 	.word	0x20020080
   12558:	3cb00000 	.word	0x3cb00000
   1255c:	c1e00000 	.word	0xc1e00000
   12560:	00036eb8 	.word	0x00036eb8
   12564:	00035c8c 	.word	0x00035c8c
   12568:	00035c91 	.word	0x00035c91
   1256c:	00035c94 	.word	0x00035c94

00012570 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, u32_t timeout, struct sntp_time *time)
{
   12570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12574:	4605      	mov	r5, r0
   12576:	b09b      	sub	sp, #108	; 0x6c
   12578:	460f      	mov	r7, r1
   1257a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1257c:	2100      	movs	r1, #0
   1257e:	2230      	movs	r2, #48	; 0x30
   12580:	a802      	add	r0, sp, #8
   12582:	f021 f957 	bl	33834 <memset>
	int ret = 0;

	if (!ctx || !time) {
   12586:	2d00      	cmp	r5, #0
   12588:	f000 8087 	beq.w	1269a <sntp_query+0x12a>
   1258c:	2e00      	cmp	r6, #0
   1258e:	f000 8084 	beq.w	1269a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   12592:	231b      	movs	r3, #27
   12594:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   12598:	f021 f844 	bl	33624 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1259c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   125a0:	2400      	movs	r4, #0
   125a2:	fba0 8903 	umull	r8, r9, r0, r3
   125a6:	fb03 9901 	mla	r9, r3, r1, r9
   125aa:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   125ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   125b2:	2300      	movs	r3, #0
   125b4:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   125b8:	4621      	mov	r1, r4
   125ba:	f7fb f8d9 	bl	d770 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   125be:	4a3c      	ldr	r2, [pc, #240]	; (126b0 <sntp_query+0x140>)
   125c0:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   125c2:	0a13      	lsrs	r3, r2, #8
   125c4:	0211      	lsls	r1, r2, #8
   125c6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   125ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   125ce:	430b      	orrs	r3, r1
   125d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   125d4:	f043 0383 	orr.w	r3, r3, #131	; 0x83
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   125d8:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   125da:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (u8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   125dc:	68e8      	ldr	r0, [r5, #12]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   125de:	2230      	movs	r2, #48	; 0x30
   125e0:	e9cd 4400 	strd	r4, r4, [sp]
   125e4:	4623      	mov	r3, r4
   125e6:	a902      	add	r1, sp, #8
   125e8:	f01c f9f6 	bl	2e9d8 <z_impl_zsock_sendto>
	if (ret < 0) {
   125ec:	2800      	cmp	r0, #0
   125ee:	db0f      	blt.n	12610 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   125f0:	4621      	mov	r1, r4
   125f2:	2230      	movs	r2, #48	; 0x30
   125f4:	a80e      	add	r0, sp, #56	; 0x38
   125f6:	f021 f91d 	bl	33834 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   125fa:	68a9      	ldr	r1, [r5, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   125fc:	463a      	mov	r2, r7
   125fe:	4628      	mov	r0, r5
   12600:	f005 f9f2 	bl	179e8 <z_impl_zsock_poll>
	if (status < 0) {
   12604:	42a0      	cmp	r0, r4
   12606:	da06      	bge.n	12616 <sntp_query+0xa6>
		return -errno;
   12608:	f01d fd09 	bl	3001e <__errno>
   1260c:	6800      	ldr	r0, [r0, #0]
   1260e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   12610:	b01b      	add	sp, #108	; 0x6c
   12612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   12616:	d037      	beq.n	12688 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (u8_t *)&buf, sizeof(buf), 0);
   12618:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1261a:	2230      	movs	r2, #48	; 0x30
   1261c:	e9cd 4400 	strd	r4, r4, [sp]
   12620:	4623      	mov	r3, r4
   12622:	a90e      	add	r1, sp, #56	; 0x38
   12624:	f01c fa2a 	bl	2ea7c <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   12628:	2800      	cmp	r0, #0
   1262a:	dbed      	blt.n	12608 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1262c:	2830      	cmp	r0, #48	; 0x30
   1262e:	d12e      	bne.n	1268e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   12630:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12632:	692a      	ldr	r2, [r5, #16]
   12634:	ba1b      	rev	r3, r3
   12636:	429a      	cmp	r2, r3
   12638:	d002      	beq.n	12640 <sntp_query+0xd0>
		return -EINVAL;
   1263a:	f06f 0015 	mvn.w	r0, #21
   1263e:	e7e7      	b.n	12610 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   12640:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12644:	f003 0307 	and.w	r3, r3, #7
   12648:	2b04      	cmp	r3, #4
   1264a:	d1f6      	bne.n	1263a <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1264c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12650:	b303      	cbz	r3, 12694 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   12652:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12654:	9a19      	ldr	r2, [sp, #100]	; 0x64
   12656:	ba1b      	rev	r3, r3
   12658:	ba12      	rev	r2, r2
   1265a:	ea53 0102 	orrs.w	r1, r3, r2
   1265e:	d0ec      	beq.n	1263a <sntp_query+0xca>
	if (ts & 0x80000000) {
   12660:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   12662:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   12664:	da0c      	bge.n	12680 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   12666:	4a13      	ldr	r2, [pc, #76]	; (126b4 <sntp_query+0x144>)
   12668:	4293      	cmp	r3, r2
   1266a:	d9e6      	bls.n	1263a <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1266c:	a10c      	add	r1, pc, #48	; (adr r1, 126a0 <sntp_query+0x130>)
   1266e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   12672:	18c4      	adds	r4, r0, r3
   12674:	f141 0500 	adc.w	r5, r1, #0
   12678:	e9c6 4500 	strd	r4, r5, [r6]
	return 0;
   1267c:	2000      	movs	r0, #0
   1267e:	e7c7      	b.n	12610 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   12680:	a109      	add	r1, pc, #36	; (adr r1, 126a8 <sntp_query+0x138>)
   12682:	e9d1 0100 	ldrd	r0, r1, [r1]
   12686:	e7f4      	b.n	12672 <sntp_query+0x102>
		return -ETIMEDOUT;
   12688:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1268c:	e7c0      	b.n	12610 <sntp_query+0xa0>
		return -EMSGSIZE;
   1268e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   12692:	e7bd      	b.n	12610 <sntp_query+0xa0>
		return -EBUSY;
   12694:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   12698:	e7ba      	b.n	12610 <sntp_query+0xa0>
		return -EFAULT;
   1269a:	f06f 000d 	mvn.w	r0, #13
   1269e:	e7b7      	b.n	12610 <sntp_query+0xa0>
   126a0:	7c558180 	.word	0x7c558180
   126a4:	ffffffff 	.word	0xffffffff
   126a8:	7c558180 	.word	0x7c558180
   126ac:	00000000 	.word	0x00000000
   126b0:	83aa7e80 	.word	0x83aa7e80
   126b4:	83aa7e7f 	.word	0x83aa7e7f

000126b8 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   126b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   126ba:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   126be:	460e      	mov	r6, r1
{
   126c0:	b08d      	sub	sp, #52	; 0x34
	if (response == NULL) {
   126c2:	2900      	cmp	r1, #0
   126c4:	f000 80b0 	beq.w	12828 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   126c8:	2400      	movs	r4, #0
   126ca:	4d9e      	ldr	r5, [pc, #632]	; (12944 <at_handler+0x28c>)
		if (strncmp(at_notifs[i], notif,
   126cc:	f855 7b04 	ldr.w	r7, [r5], #4
   126d0:	4638      	mov	r0, r7
   126d2:	f7ff fcd5 	bl	12080 <strlen>
   126d6:	4631      	mov	r1, r6
   126d8:	4602      	mov	r2, r0
   126da:	4638      	mov	r0, r7
   126dc:	f021 f9dd 	bl	33a9a <strncmp>
   126e0:	2800      	cmp	r0, #0
   126e2:	f040 809d 	bne.w	12820 <at_handler+0x168>
			*type = i;
   126e6:	b2e4      	uxtb	r4, r4
	/* Only proceed with parsing if notification is relevant */
	if (!is_relevant_notif(response, &notif_type)) {
		return;
	}

	switch (notif_type) {
   126e8:	2c01      	cmp	r4, #1
   126ea:	f000 80a1 	beq.w	12830 <at_handler+0x178>
   126ee:	2c02      	cmp	r4, #2
   126f0:	f000 80c9 	beq.w	12886 <at_handler+0x1ce>
	size_t len = sizeof(str_buf) - 1;
   126f4:	2709      	movs	r7, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   126f6:	210a      	movs	r1, #10
   126f8:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   126fa:	9702      	str	r7, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   126fc:	f020 fca4 	bl	33048 <at_params_list_init>
	if (err) {
   12700:	4605      	mov	r5, r0
   12702:	2800      	cmp	r0, #0
   12704:	f040 8090 	bne.w	12828 <at_handler+0x170>
	err = at_parser_params_from_str(notification,
   12708:	4601      	mov	r1, r0
   1270a:	aa07      	add	r2, sp, #28
   1270c:	4630      	mov	r0, r6
   1270e:	f020 fc98 	bl	33042 <at_parser_params_from_str>
	if (err) {
   12712:	4604      	mov	r4, r0
   12714:	2800      	cmp	r0, #0
   12716:	d135      	bne.n	12784 <at_handler+0xcc>
	err = at_params_int_get(&resp_list,
   12718:	aa01      	add	r2, sp, #4
   1271a:	2101      	movs	r1, #1
   1271c:	a807      	add	r0, sp, #28
   1271e:	f020 fd54 	bl	331ca <at_params_int_get>
	if (err) {
   12722:	4604      	mov	r4, r0
   12724:	bb70      	cbnz	r0, 12784 <at_handler+0xcc>
	err = at_params_string_get(&resp_list,
   12726:	ab02      	add	r3, sp, #8
   12728:	aa09      	add	r2, sp, #36	; 0x24
   1272a:	2102      	movs	r1, #2
   1272c:	a807      	add	r0, sp, #28
	*reg_status = status;
   1272e:	f89d 5004 	ldrb.w	r5, [sp, #4]
	err = at_params_string_get(&resp_list,
   12732:	f020 fd61 	bl	331f8 <at_params_string_get>
	if (err) {
   12736:	4604      	mov	r4, r0
   12738:	bb20      	cbnz	r0, 12784 <at_handler+0xcc>
	str_buf[len] = '\0';
   1273a:	9b02      	ldr	r3, [sp, #8]
   1273c:	aa0c      	add	r2, sp, #48	; 0x30
   1273e:	4413      	add	r3, r2
   12740:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->tac = strtoul(str_buf, NULL, 16);
   12744:	4601      	mov	r1, r0
   12746:	2210      	movs	r2, #16
   12748:	a809      	add	r0, sp, #36	; 0x24
   1274a:	f01a fe8b 	bl	2d464 <strtoul>
	err = at_params_string_get(&resp_list,
   1274e:	ab02      	add	r3, sp, #8
	cell->tac = strtoul(str_buf, NULL, 16);
   12750:	9004      	str	r0, [sp, #16]
	err = at_params_string_get(&resp_list,
   12752:	aa09      	add	r2, sp, #36	; 0x24
   12754:	2103      	movs	r1, #3
   12756:	a807      	add	r0, sp, #28
	len = sizeof(str_buf) - 1;
   12758:	9702      	str	r7, [sp, #8]
	err = at_params_string_get(&resp_list,
   1275a:	f020 fd4d 	bl	331f8 <at_params_string_get>
	if (err) {
   1275e:	4604      	mov	r4, r0
   12760:	b980      	cbnz	r0, 12784 <at_handler+0xcc>
	str_buf[len] = '\0';
   12762:	9b02      	ldr	r3, [sp, #8]
   12764:	aa0c      	add	r2, sp, #48	; 0x30
   12766:	4413      	add	r3, r2
   12768:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->id = strtoul(str_buf, NULL, 16);
   1276c:	4601      	mov	r1, r0
   1276e:	2210      	movs	r2, #16
   12770:	a809      	add	r0, sp, #36	; 0x24
   12772:	f01a fe77 	bl	2d464 <strtoul>
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   12776:	aa05      	add	r2, sp, #20
	cell->id = strtoul(str_buf, NULL, 16);
   12778:	9003      	str	r0, [sp, #12]
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1277a:	2101      	movs	r1, #1
   1277c:	a807      	add	r0, sp, #28
   1277e:	f00b fbaf 	bl	1dee0 <parse_psm_cfg>
   12782:	4604      	mov	r4, r0
	at_params_list_free(&resp_list);
   12784:	a807      	add	r0, sp, #28
   12786:	f020 fc72 	bl	3306e <at_params_list_free>
		struct lte_lc_psm_cfg psm_cfg;

		LOG_DBG("+CEREG notification: %s", log_strdup(response));

		err = parse_cereg(response, &reg_status, &cell, &psm_cfg);
		if (err) {
   1278a:	2c00      	cmp	r4, #0
   1278c:	d14c      	bne.n	12828 <at_handler+0x170>
			LOG_ERR("Failed to parse notification (error %d): %s",
				err, log_strdup(response));
			return;
		}

		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1278e:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   12792:	2b01      	cmp	r3, #1
   12794:	d102      	bne.n	1279c <at_handler+0xe4>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12796:	486c      	ldr	r0, [pc, #432]	; (12948 <at_handler+0x290>)
   12798:	f017 f828 	bl	297ec <z_impl_k_sem_give>
		    (reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) {
			k_sem_give(&link);
		}

		if (!evt_handler) {
   1279c:	4c6b      	ldr	r4, [pc, #428]	; (1294c <at_handler+0x294>)
   1279e:	6823      	ldr	r3, [r4, #0]
   127a0:	2b00      	cmp	r3, #0
   127a2:	d041      	beq.n	12828 <at_handler+0x170>
			return;
		}

		/* Network registration status event */
		if (reg_status != prev_reg_status) {
   127a4:	4a6a      	ldr	r2, [pc, #424]	; (12950 <at_handler+0x298>)
   127a6:	7811      	ldrb	r1, [r2, #0]
   127a8:	42a9      	cmp	r1, r5
   127aa:	d007      	beq.n	127bc <at_handler+0x104>
			prev_reg_status = reg_status;
   127ac:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   127ae:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   127b0:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   127b4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			evt_handler(&evt);
   127b8:	a809      	add	r0, sp, #36	; 0x24
   127ba:	4798      	blx	r3
		}

		/* Cell update event */
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   127bc:	4e65      	ldr	r6, [pc, #404]	; (12954 <at_handler+0x29c>)
   127be:	ad03      	add	r5, sp, #12
   127c0:	2208      	movs	r2, #8
   127c2:	4631      	mov	r1, r6
   127c4:	4628      	mov	r0, r5
   127c6:	f020 ffed 	bl	337a4 <memcmp>
   127ca:	b160      	cbz	r0, 127e6 <at_handler+0x12e>
			evt.type = LTE_LC_EVT_CELL_UPDATE;

			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   127cc:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   127d0:	2304      	movs	r3, #4
   127d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   127d6:	ab0c      	add	r3, sp, #48	; 0x30
   127d8:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   127dc:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   127e0:	6823      	ldr	r3, [r4, #0]
   127e2:	a809      	add	r0, sp, #36	; 0x24
   127e4:	4798      	blx	r3
		}

		/* PSM configuration update event */
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   127e6:	4e5c      	ldr	r6, [pc, #368]	; (12958 <at_handler+0x2a0>)
   127e8:	ad05      	add	r5, sp, #20
   127ea:	2208      	movs	r2, #8
   127ec:	4631      	mov	r1, r6
   127ee:	4628      	mov	r0, r5
   127f0:	f020 ffd8 	bl	337a4 <memcmp>
   127f4:	b160      	cbz	r0, 12810 <at_handler+0x158>
			   sizeof(struct lte_lc_psm_cfg))) {
			evt.type = LTE_LC_EVT_PSM_UPDATE;

			memcpy(&prev_psm_cfg, &psm_cfg,
   127f6:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   127fa:	2301      	movs	r3, #1
   127fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			       sizeof(struct lte_lc_psm_cfg));
			memcpy(&evt.psm_cfg, &psm_cfg,
   12800:	ab0c      	add	r3, sp, #48	; 0x30
   12802:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_psm_cfg, &psm_cfg,
   12806:	e886 0003 	stmia.w	r6, {r0, r1}
			       sizeof(struct lte_lc_psm_cfg));
			evt_handler(&evt);
   1280a:	6823      	ldr	r3, [r4, #0]
   1280c:	a809      	add	r0, sp, #36	; 0x24
   1280e:	4798      	blx	r3
	bool notify = false;
   12810:	2300      	movs	r3, #0
	default:
		LOG_ERR("Unrecognized notification type: %d", notif_type);
		break;
	}

	if (evt_handler && notify) {
   12812:	4a4e      	ldr	r2, [pc, #312]	; (1294c <at_handler+0x294>)
   12814:	6812      	ldr	r2, [r2, #0]
   12816:	b13a      	cbz	r2, 12828 <at_handler+0x170>
   12818:	b133      	cbz	r3, 12828 <at_handler+0x170>
		evt_handler(&evt);
   1281a:	a809      	add	r0, sp, #36	; 0x24
   1281c:	4790      	blx	r2
   1281e:	e003      	b.n	12828 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   12820:	3401      	adds	r4, #1
   12822:	2c03      	cmp	r4, #3
   12824:	f47f af52 	bne.w	126cc <at_handler+0x14>
	}
}
   12828:	b00d      	add	sp, #52	; 0x34
   1282a:	ecbd 8b02 	vpop	{d8}
   1282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   12830:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   12834:	2104      	movs	r1, #4
   12836:	a807      	add	r0, sp, #28
   12838:	f020 fc06 	bl	33048 <at_params_list_init>
	if (err) {
   1283c:	4601      	mov	r1, r0
   1283e:	2800      	cmp	r0, #0
   12840:	d1f2      	bne.n	12828 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   12842:	aa07      	add	r2, sp, #28
   12844:	4630      	mov	r0, r6
   12846:	f020 fbfc 	bl	33042 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1284a:	4605      	mov	r5, r0
   1284c:	b950      	cbnz	r0, 12864 <at_handler+0x1ac>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1284e:	aa05      	add	r2, sp, #20
   12850:	4621      	mov	r1, r4
   12852:	a807      	add	r0, sp, #28
   12854:	f020 fcb9 	bl	331ca <at_params_int_get>
	if (err) {
   12858:	4605      	mov	r5, r0
   1285a:	b918      	cbnz	r0, 12864 <at_handler+0x1ac>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
   1285c:	9b05      	ldr	r3, [sp, #20]
   1285e:	b95b      	cbnz	r3, 12878 <at_handler+0x1c0>
		*mode = LTE_LC_RRC_MODE_IDLE;
   12860:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   12864:	a807      	add	r0, sp, #28
   12866:	f020 fc02 	bl	3306e <at_params_list_free>
		if (err) {
   1286a:	2d00      	cmp	r5, #0
   1286c:	d1dc      	bne.n	12828 <at_handler+0x170>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   1286e:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12870:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   12874:	2301      	movs	r3, #1
		break;
   12876:	e7cc      	b.n	12812 <at_handler+0x15a>
	} else if (temp_mode == 1) {
   12878:	2b01      	cmp	r3, #1
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1287a:	bf0c      	ite	eq
   1287c:	f88d 3028 	strbeq.w	r3, [sp, #40]	; 0x28
		err = -EINVAL;
   12880:	f06f 0515 	mvnne.w	r5, #21
   12884:	e7ee      	b.n	12864 <at_handler+0x1ac>
{
	int err;
	u8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   12886:	2304      	movs	r3, #4
	struct at_param_list resp_list = {0};
   12888:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = lte_lc_system_mode_get(&sys_mode);
   1288c:	a809      	add	r0, sp, #36	; 0x24
	size_t len = sizeof(tmp_buf) - 1;
   1288e:	9303      	str	r3, [sp, #12]
	err = lte_lc_system_mode_get(&sys_mode);
   12890:	f00b fc58 	bl	1e144 <lte_lc_system_mode_get>
	if (err) {
   12894:	2800      	cmp	r0, #0
   12896:	d1c7      	bne.n	12828 <at_handler+0x170>
	switch (sys_mode) {
   12898:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1289c:	3b01      	subs	r3, #1
   1289e:	2b04      	cmp	r3, #4
   128a0:	d8c2      	bhi.n	12828 <at_handler+0x170>
   128a2:	a201      	add	r2, pc, #4	; (adr r2, 128a8 <at_handler+0x1f0>)
   128a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   128a8:	0001290b 	.word	0x0001290b
   128ac:	000128bd 	.word	0x000128bd
   128b0:	00012829 	.word	0x00012829
   128b4:	0001290b 	.word	0x0001290b
   128b8:	000128bd 	.word	0x000128bd
		*ptw_multiplier = 2.56;
   128bc:	ed9f 8a27 	vldr	s16, [pc, #156]	; 1295c <at_handler+0x2a4>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   128c0:	2105      	movs	r1, #5
   128c2:	a807      	add	r0, sp, #28
   128c4:	f020 fbc0 	bl	33048 <at_params_list_init>
	if (err) {
   128c8:	4601      	mov	r1, r0
   128ca:	2800      	cmp	r0, #0
   128cc:	d1ac      	bne.n	12828 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   128ce:	aa07      	add	r2, sp, #28
   128d0:	4630      	mov	r0, r6
   128d2:	f020 fbb6 	bl	33042 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   128d6:	4604      	mov	r4, r0
   128d8:	bb58      	cbnz	r0, 12932 <at_handler+0x27a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   128da:	ab03      	add	r3, sp, #12
   128dc:	aa05      	add	r2, sp, #20
   128de:	2103      	movs	r1, #3
   128e0:	a807      	add	r0, sp, #28
   128e2:	f020 fc89 	bl	331f8 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   128e6:	4604      	mov	r4, r0
   128e8:	bb18      	cbnz	r0, 12932 <at_handler+0x27a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   128ea:	9b03      	ldr	r3, [sp, #12]
   128ec:	aa0c      	add	r2, sp, #48	; 0x30
   128ee:	4413      	add	r3, r2
   128f0:	f803 0c1c 	strb.w	r0, [r3, #-28]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   128f4:	4601      	mov	r1, r0
   128f6:	2202      	movs	r2, #2
   128f8:	a805      	add	r0, sp, #20
   128fa:	f01a fdb3 	bl	2d464 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   128fe:	b2c5      	uxtb	r5, r0
   12900:	2d0f      	cmp	r5, #15
   12902:	d905      	bls.n	12910 <at_handler+0x258>
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
	if (idx > 15) {
		LOG_ERR("Invalid PTW lookup index: %d", idx);
		err = -EINVAL;
   12904:	f06f 0415 	mvn.w	r4, #21
   12908:	e013      	b.n	12932 <at_handler+0x27a>
		*ptw_multiplier = 1.28;
   1290a:	ed9f 8a15 	vldr	s16, [pc, #84]	; 12960 <at_handler+0x2a8>
   1290e:	e7d7      	b.n	128c0 <at_handler+0x208>
	err = lte_lc_system_mode_get(&sys_mode);
   12910:	a802      	add	r0, sp, #8
   12912:	f00b fc17 	bl	1e144 <lte_lc_system_mode_get>
	if (err) {
   12916:	4604      	mov	r4, r0
   12918:	b958      	cbnz	r0, 12932 <at_handler+0x27a>
	switch (sys_mode) {
   1291a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1291e:	3b01      	subs	r3, #1
   12920:	2b04      	cmp	r3, #4
   12922:	d804      	bhi.n	1292e <at_handler+0x276>
   12924:	e8df f003 	tbb	[pc, r3]
   12928:	1e034e1e 	.word	0x1e034e1e
   1292c:	4e          	.byte	0x4e
   1292d:	00          	.byte	0x00
		return -ENOTCONN;
   1292e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   12932:	a807      	add	r0, sp, #28
   12934:	f020 fb9b 	bl	3306e <at_params_list_free>
		if (err) {
   12938:	2c00      	cmp	r4, #0
   1293a:	f47f af75 	bne.w	12828 <at_handler+0x170>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1293e:	2302      	movs	r3, #2
   12940:	e796      	b.n	12870 <at_handler+0x1b8>
   12942:	bf00      	nop
   12944:	00034b74 	.word	0x00034b74
   12948:	20022214 	.word	0x20022214
   1294c:	20022210 	.word	0x20022210
   12950:	20027e7f 	.word	0x20027e7f
   12954:	2002222c 	.word	0x2002222c
   12958:	20022234 	.word	0x20022234
   1295c:	4023d70a 	.word	0x4023d70a
   12960:	3fa3d70a 	.word	0x3fa3d70a
		multiplier = edrx_lookup_ltem[idx];
   12964:	4b1c      	ldr	r3, [pc, #112]	; (129d8 <at_handler+0x320>)
		multiplier = edrx_lookup_nbiot[idx];
   12966:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1296a:	b368      	cbz	r0, 129c8 <at_handler+0x310>
   1296c:	f7fa fb34 	bl	cfd8 <__aeabi_i2d>
   12970:	a317      	add	r3, pc, #92	; (adr r3, 129d0 <at_handler+0x318>)
   12972:	e9d3 2300 	ldrd	r2, r3, [r3]
   12976:	f7fa fb99 	bl	d0ac <__aeabi_dmul>
   1297a:	f7fa fe59 	bl	d630 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1297e:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12980:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   12982:	ab03      	add	r3, sp, #12
   12984:	aa05      	add	r2, sp, #20
   12986:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   12988:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1298a:	f020 fc35 	bl	331f8 <at_params_string_get>
	if (err) {
   1298e:	4604      	mov	r4, r0
   12990:	2800      	cmp	r0, #0
   12992:	d1ce      	bne.n	12932 <at_handler+0x27a>
	tmp_buf[len] = '\0';
   12994:	9b03      	ldr	r3, [sp, #12]
   12996:	aa0c      	add	r2, sp, #48	; 0x30
   12998:	4413      	add	r3, r2
   1299a:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1299e:	4601      	mov	r1, r0
   129a0:	2202      	movs	r2, #2
   129a2:	a805      	add	r0, sp, #20
   129a4:	f01a fd5e 	bl	2d464 <strtoul>
	if (idx > 15) {
   129a8:	b2c3      	uxtb	r3, r0
   129aa:	2b0f      	cmp	r3, #15
   129ac:	d8aa      	bhi.n	12904 <at_handler+0x24c>
	idx += 1;
   129ae:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   129b0:	b2c0      	uxtb	r0, r0
   129b2:	ee07 0a90 	vmov	s15, r0
   129b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   129ba:	ee67 7a88 	vmul.f32	s15, s15, s16
   129be:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   129c2:	e7b6      	b.n	12932 <at_handler+0x27a>
		multiplier = edrx_lookup_nbiot[idx];
   129c4:	4b05      	ldr	r3, [pc, #20]	; (129dc <at_handler+0x324>)
   129c6:	e7ce      	b.n	12966 <at_handler+0x2ae>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   129c8:	4805      	ldr	r0, [pc, #20]	; (129e0 <at_handler+0x328>)
   129ca:	e7d8      	b.n	1297e <at_handler+0x2c6>
   129cc:	f3af 8000 	nop.w
   129d0:	47ae147b 	.word	0x47ae147b
   129d4:	40247ae1 	.word	0x40247ae1
   129d8:	00035804 	.word	0x00035804
   129dc:	00035824 	.word	0x00035824
   129e0:	40a3d70a 	.word	0x40a3d70a
   129e4:	00000000 	.word	0x00000000

000129e8 <ceil>:
   129e8:	ec51 0b10 	vmov	r0, r1, d0
   129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
   129f2:	460c      	mov	r4, r1
   129f4:	ee10 6a10 	vmov	r6, s0
   129f8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   129fc:	2d13      	cmp	r5, #19
   129fe:	dc32      	bgt.n	12a66 <ceil+0x7e>
   12a00:	2d00      	cmp	r5, #0
   12a02:	db1e      	blt.n	12a42 <ceil+0x5a>
   12a04:	4f36      	ldr	r7, [pc, #216]	; (12ae0 <ceil+0xf8>)
   12a06:	412f      	asrs	r7, r5
   12a08:	ea07 0301 	and.w	r3, r7, r1
   12a0c:	4303      	orrs	r3, r0
   12a0e:	d02f      	beq.n	12a70 <ceil+0x88>
   12a10:	a331      	add	r3, pc, #196	; (adr r3, 12ad8 <ceil+0xf0>)
   12a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a16:	f7fa f993 	bl	cd40 <__adddf3>
   12a1a:	2200      	movs	r2, #0
   12a1c:	2300      	movs	r3, #0
   12a1e:	f7fa fdd5 	bl	d5cc <__aeabi_dcmpgt>
   12a22:	b148      	cbz	r0, 12a38 <ceil+0x50>
   12a24:	2c00      	cmp	r4, #0
   12a26:	dd04      	ble.n	12a32 <ceil+0x4a>
   12a28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12a2c:	fa43 f505 	asr.w	r5, r3, r5
   12a30:	442c      	add	r4, r5
   12a32:	ea24 0407 	bic.w	r4, r4, r7
   12a36:	2600      	movs	r6, #0
   12a38:	4623      	mov	r3, r4
   12a3a:	4632      	mov	r2, r6
   12a3c:	ec43 2b10 	vmov	d0, r2, r3
   12a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a42:	a325      	add	r3, pc, #148	; (adr r3, 12ad8 <ceil+0xf0>)
   12a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a48:	f7fa f97a 	bl	cd40 <__adddf3>
   12a4c:	2200      	movs	r2, #0
   12a4e:	2300      	movs	r3, #0
   12a50:	f7fa fdbc 	bl	d5cc <__aeabi_dcmpgt>
   12a54:	2800      	cmp	r0, #0
   12a56:	d0ef      	beq.n	12a38 <ceil+0x50>
   12a58:	2c00      	cmp	r4, #0
   12a5a:	db39      	blt.n	12ad0 <ceil+0xe8>
   12a5c:	4326      	orrs	r6, r4
   12a5e:	d033      	beq.n	12ac8 <ceil+0xe0>
   12a60:	2600      	movs	r6, #0
   12a62:	4c20      	ldr	r4, [pc, #128]	; (12ae4 <ceil+0xfc>)
   12a64:	e7e8      	b.n	12a38 <ceil+0x50>
   12a66:	2d33      	cmp	r5, #51	; 0x33
   12a68:	dd05      	ble.n	12a76 <ceil+0x8e>
   12a6a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12a6e:	d023      	beq.n	12ab8 <ceil+0xd0>
   12a70:	ec41 0b10 	vmov	d0, r0, r1
   12a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   12a7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12a7e:	40df      	lsrs	r7, r3
   12a80:	4207      	tst	r7, r0
   12a82:	d0f5      	beq.n	12a70 <ceil+0x88>
   12a84:	a314      	add	r3, pc, #80	; (adr r3, 12ad8 <ceil+0xf0>)
   12a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a8a:	f7fa f959 	bl	cd40 <__adddf3>
   12a8e:	2200      	movs	r2, #0
   12a90:	2300      	movs	r3, #0
   12a92:	f7fa fd9b 	bl	d5cc <__aeabi_dcmpgt>
   12a96:	2800      	cmp	r0, #0
   12a98:	d0ce      	beq.n	12a38 <ceil+0x50>
   12a9a:	2c00      	cmp	r4, #0
   12a9c:	dd09      	ble.n	12ab2 <ceil+0xca>
   12a9e:	2d14      	cmp	r5, #20
   12aa0:	d014      	beq.n	12acc <ceil+0xe4>
   12aa2:	2301      	movs	r3, #1
   12aa4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   12aa8:	fa03 f505 	lsl.w	r5, r3, r5
   12aac:	19ae      	adds	r6, r5, r6
   12aae:	bf28      	it	cs
   12ab0:	18e4      	addcs	r4, r4, r3
   12ab2:	ea26 0607 	bic.w	r6, r6, r7
   12ab6:	e7bf      	b.n	12a38 <ceil+0x50>
   12ab8:	ee10 2a10 	vmov	r2, s0
   12abc:	460b      	mov	r3, r1
   12abe:	f7fa f93f 	bl	cd40 <__adddf3>
   12ac2:	ec41 0b10 	vmov	d0, r0, r1
   12ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ac8:	4634      	mov	r4, r6
   12aca:	e7b5      	b.n	12a38 <ceil+0x50>
   12acc:	3401      	adds	r4, #1
   12ace:	e7f0      	b.n	12ab2 <ceil+0xca>
   12ad0:	2600      	movs	r6, #0
   12ad2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   12ad6:	e7af      	b.n	12a38 <ceil+0x50>
   12ad8:	8800759c 	.word	0x8800759c
   12adc:	7e37e43c 	.word	0x7e37e43c
   12ae0:	000fffff 	.word	0x000fffff
   12ae4:	3ff00000 	.word	0x3ff00000

00012ae8 <floor>:
   12ae8:	ec51 0b10 	vmov	r0, r1, d0
   12aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12aee:	f3c1 530a 	ubfx	r3, r1, #20, #11
   12af2:	460c      	mov	r4, r1
   12af4:	ee10 6a10 	vmov	r6, s0
   12af8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   12afc:	2d13      	cmp	r5, #19
   12afe:	dc30      	bgt.n	12b62 <floor+0x7a>
   12b00:	2d00      	cmp	r5, #0
   12b02:	db1e      	blt.n	12b42 <floor+0x5a>
   12b04:	4f38      	ldr	r7, [pc, #224]	; (12be8 <floor+0x100>)
   12b06:	412f      	asrs	r7, r5
   12b08:	ea07 0301 	and.w	r3, r7, r1
   12b0c:	4303      	orrs	r3, r0
   12b0e:	d02d      	beq.n	12b6c <floor+0x84>
   12b10:	a333      	add	r3, pc, #204	; (adr r3, 12be0 <floor+0xf8>)
   12b12:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b16:	f7fa f913 	bl	cd40 <__adddf3>
   12b1a:	2200      	movs	r2, #0
   12b1c:	2300      	movs	r3, #0
   12b1e:	f7fa fd55 	bl	d5cc <__aeabi_dcmpgt>
   12b22:	b148      	cbz	r0, 12b38 <floor+0x50>
   12b24:	2c00      	cmp	r4, #0
   12b26:	da04      	bge.n	12b32 <floor+0x4a>
   12b28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12b2c:	fa43 f505 	asr.w	r5, r3, r5
   12b30:	442c      	add	r4, r5
   12b32:	ea24 0407 	bic.w	r4, r4, r7
   12b36:	2600      	movs	r6, #0
   12b38:	4623      	mov	r3, r4
   12b3a:	4632      	mov	r2, r6
   12b3c:	ec43 2b10 	vmov	d0, r2, r3
   12b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b42:	a327      	add	r3, pc, #156	; (adr r3, 12be0 <floor+0xf8>)
   12b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b48:	f7fa f8fa 	bl	cd40 <__adddf3>
   12b4c:	2200      	movs	r2, #0
   12b4e:	2300      	movs	r3, #0
   12b50:	f7fa fd3c 	bl	d5cc <__aeabi_dcmpgt>
   12b54:	2800      	cmp	r0, #0
   12b56:	d0ef      	beq.n	12b38 <floor+0x50>
   12b58:	2c00      	cmp	r4, #0
   12b5a:	db29      	blt.n	12bb0 <floor+0xc8>
   12b5c:	2600      	movs	r6, #0
   12b5e:	4634      	mov	r4, r6
   12b60:	e7ea      	b.n	12b38 <floor+0x50>
   12b62:	2d33      	cmp	r5, #51	; 0x33
   12b64:	dd05      	ble.n	12b72 <floor+0x8a>
   12b66:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12b6a:	d019      	beq.n	12ba0 <floor+0xb8>
   12b6c:	ec41 0b10 	vmov	d0, r0, r1
   12b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b72:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   12b76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12b7a:	40df      	lsrs	r7, r3
   12b7c:	4207      	tst	r7, r0
   12b7e:	d0f5      	beq.n	12b6c <floor+0x84>
   12b80:	a317      	add	r3, pc, #92	; (adr r3, 12be0 <floor+0xf8>)
   12b82:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b86:	f7fa f8db 	bl	cd40 <__adddf3>
   12b8a:	2200      	movs	r2, #0
   12b8c:	2300      	movs	r3, #0
   12b8e:	f7fa fd1d 	bl	d5cc <__aeabi_dcmpgt>
   12b92:	2800      	cmp	r0, #0
   12b94:	d0d0      	beq.n	12b38 <floor+0x50>
   12b96:	2c00      	cmp	r4, #0
   12b98:	db13      	blt.n	12bc2 <floor+0xda>
   12b9a:	ea26 0607 	bic.w	r6, r6, r7
   12b9e:	e7cb      	b.n	12b38 <floor+0x50>
   12ba0:	ee10 2a10 	vmov	r2, s0
   12ba4:	460b      	mov	r3, r1
   12ba6:	f7fa f8cb 	bl	cd40 <__adddf3>
   12baa:	ec41 0b10 	vmov	d0, r0, r1
   12bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   12bb4:	4a0d      	ldr	r2, [pc, #52]	; (12bec <floor+0x104>)
   12bb6:	4333      	orrs	r3, r6
   12bb8:	2600      	movs	r6, #0
   12bba:	42b3      	cmp	r3, r6
   12bbc:	bf18      	it	ne
   12bbe:	4614      	movne	r4, r2
   12bc0:	e7ba      	b.n	12b38 <floor+0x50>
   12bc2:	2d14      	cmp	r5, #20
   12bc4:	d008      	beq.n	12bd8 <floor+0xf0>
   12bc6:	2301      	movs	r3, #1
   12bc8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   12bcc:	fa03 f505 	lsl.w	r5, r3, r5
   12bd0:	19ae      	adds	r6, r5, r6
   12bd2:	bf28      	it	cs
   12bd4:	18e4      	addcs	r4, r4, r3
   12bd6:	e7e0      	b.n	12b9a <floor+0xb2>
   12bd8:	3401      	adds	r4, #1
   12bda:	e7de      	b.n	12b9a <floor+0xb2>
   12bdc:	f3af 8000 	nop.w
   12be0:	8800759c 	.word	0x8800759c
   12be4:	7e37e43c 	.word	0x7e37e43c
   12be8:	000fffff 	.word	0x000fffff
   12bec:	bff00000 	.word	0xbff00000

00012bf0 <pow>:
   12bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bf2:	ed2d 8b02 	vpush	{d8}
   12bf6:	ec57 6b10 	vmov	r6, r7, d0
   12bfa:	ec55 4b11 	vmov	r4, r5, d1
   12bfe:	f000 f8c7 	bl	12d90 <__ieee754_pow>
   12c02:	4b61      	ldr	r3, [pc, #388]	; (12d88 <pow+0x198>)
   12c04:	eeb0 8a40 	vmov.f32	s16, s0
   12c08:	eef0 8a60 	vmov.f32	s17, s1
   12c0c:	f993 3000 	ldrsb.w	r3, [r3]
   12c10:	3301      	adds	r3, #1
   12c12:	d02a      	beq.n	12c6a <pow+0x7a>
   12c14:	4622      	mov	r2, r4
   12c16:	462b      	mov	r3, r5
   12c18:	4620      	mov	r0, r4
   12c1a:	4629      	mov	r1, r5
   12c1c:	f7ff f8ac 	bl	11d78 <__aeabi_dcmpun>
   12c20:	bb18      	cbnz	r0, 12c6a <pow+0x7a>
   12c22:	4632      	mov	r2, r6
   12c24:	463b      	mov	r3, r7
   12c26:	4630      	mov	r0, r6
   12c28:	4639      	mov	r1, r7
   12c2a:	f7ff f8a5 	bl	11d78 <__aeabi_dcmpun>
   12c2e:	2800      	cmp	r0, #0
   12c30:	d144      	bne.n	12cbc <pow+0xcc>
   12c32:	2200      	movs	r2, #0
   12c34:	2300      	movs	r3, #0
   12c36:	4630      	mov	r0, r6
   12c38:	4639      	mov	r1, r7
   12c3a:	f7fa fc9f 	bl	d57c <__aeabi_dcmpeq>
   12c3e:	b1d8      	cbz	r0, 12c78 <pow+0x88>
   12c40:	2200      	movs	r2, #0
   12c42:	2300      	movs	r3, #0
   12c44:	4620      	mov	r0, r4
   12c46:	4629      	mov	r1, r5
   12c48:	f7fa fc98 	bl	d57c <__aeabi_dcmpeq>
   12c4c:	2800      	cmp	r0, #0
   12c4e:	d13d      	bne.n	12ccc <pow+0xdc>
   12c50:	ec45 4b10 	vmov	d0, r4, r5
   12c54:	f019 fd82 	bl	2c75c <finite>
   12c58:	b138      	cbz	r0, 12c6a <pow+0x7a>
   12c5a:	4620      	mov	r0, r4
   12c5c:	4629      	mov	r1, r5
   12c5e:	2200      	movs	r2, #0
   12c60:	2300      	movs	r3, #0
   12c62:	f7fa fc95 	bl	d590 <__aeabi_dcmplt>
   12c66:	2800      	cmp	r0, #0
   12c68:	d15b      	bne.n	12d22 <pow+0x132>
   12c6a:	eeb0 0a48 	vmov.f32	s0, s16
   12c6e:	eef0 0a68 	vmov.f32	s1, s17
   12c72:	ecbd 8b02 	vpop	{d8}
   12c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c78:	eeb0 0a48 	vmov.f32	s0, s16
   12c7c:	eef0 0a68 	vmov.f32	s1, s17
   12c80:	f019 fd6c 	bl	2c75c <finite>
   12c84:	b358      	cbz	r0, 12cde <pow+0xee>
   12c86:	2200      	movs	r2, #0
   12c88:	2300      	movs	r3, #0
   12c8a:	ec51 0b18 	vmov	r0, r1, d8
   12c8e:	f7fa fc75 	bl	d57c <__aeabi_dcmpeq>
   12c92:	2800      	cmp	r0, #0
   12c94:	d0e9      	beq.n	12c6a <pow+0x7a>
   12c96:	ec47 6b10 	vmov	d0, r6, r7
   12c9a:	f019 fd5f 	bl	2c75c <finite>
   12c9e:	2800      	cmp	r0, #0
   12ca0:	d0e3      	beq.n	12c6a <pow+0x7a>
   12ca2:	ec45 4b10 	vmov	d0, r4, r5
   12ca6:	f019 fd59 	bl	2c75c <finite>
   12caa:	2800      	cmp	r0, #0
   12cac:	d0dd      	beq.n	12c6a <pow+0x7a>
   12cae:	f01d f9b6 	bl	3001e <__errno>
   12cb2:	2322      	movs	r3, #34	; 0x22
   12cb4:	ed9f 8b2c 	vldr	d8, [pc, #176]	; 12d68 <pow+0x178>
   12cb8:	6003      	str	r3, [r0, #0]
   12cba:	e7d6      	b.n	12c6a <pow+0x7a>
   12cbc:	4620      	mov	r0, r4
   12cbe:	4629      	mov	r1, r5
   12cc0:	2200      	movs	r2, #0
   12cc2:	2300      	movs	r3, #0
   12cc4:	f7fa fc5a 	bl	d57c <__aeabi_dcmpeq>
   12cc8:	2800      	cmp	r0, #0
   12cca:	d0ce      	beq.n	12c6a <pow+0x7a>
   12ccc:	ed9f 8b28 	vldr	d8, [pc, #160]	; 12d70 <pow+0x180>
   12cd0:	eeb0 0a48 	vmov.f32	s0, s16
   12cd4:	eef0 0a68 	vmov.f32	s1, s17
   12cd8:	ecbd 8b02 	vpop	{d8}
   12cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cde:	ec47 6b10 	vmov	d0, r6, r7
   12ce2:	f019 fd3b 	bl	2c75c <finite>
   12ce6:	2800      	cmp	r0, #0
   12ce8:	d0cd      	beq.n	12c86 <pow+0x96>
   12cea:	ec45 4b10 	vmov	d0, r4, r5
   12cee:	f019 fd35 	bl	2c75c <finite>
   12cf2:	2800      	cmp	r0, #0
   12cf4:	d0c7      	beq.n	12c86 <pow+0x96>
   12cf6:	ee18 0a10 	vmov	r0, s16
   12cfa:	ec53 2b18 	vmov	r2, r3, d8
   12cfe:	4619      	mov	r1, r3
   12d00:	f7ff f83a 	bl	11d78 <__aeabi_dcmpun>
   12d04:	bb18      	cbnz	r0, 12d4e <pow+0x15e>
   12d06:	f01d f98a 	bl	3001e <__errno>
   12d0a:	2322      	movs	r3, #34	; 0x22
   12d0c:	2200      	movs	r2, #0
   12d0e:	4639      	mov	r1, r7
   12d10:	6003      	str	r3, [r0, #0]
   12d12:	2300      	movs	r3, #0
   12d14:	4630      	mov	r0, r6
   12d16:	f7fa fc3b 	bl	d590 <__aeabi_dcmplt>
   12d1a:	b948      	cbnz	r0, 12d30 <pow+0x140>
   12d1c:	ed9f 8b16 	vldr	d8, [pc, #88]	; 12d78 <pow+0x188>
   12d20:	e7a3      	b.n	12c6a <pow+0x7a>
   12d22:	f01d f97c 	bl	3001e <__errno>
   12d26:	2321      	movs	r3, #33	; 0x21
   12d28:	ed9f 8b15 	vldr	d8, [pc, #84]	; 12d80 <pow+0x190>
   12d2c:	6003      	str	r3, [r0, #0]
   12d2e:	e79c      	b.n	12c6a <pow+0x7a>
   12d30:	ec45 4b10 	vmov	d0, r4, r5
   12d34:	f019 fd1c 	bl	2c770 <rint>
   12d38:	4622      	mov	r2, r4
   12d3a:	462b      	mov	r3, r5
   12d3c:	ec51 0b10 	vmov	r0, r1, d0
   12d40:	f7fa fc1c 	bl	d57c <__aeabi_dcmpeq>
   12d44:	2800      	cmp	r0, #0
   12d46:	d1e9      	bne.n	12d1c <pow+0x12c>
   12d48:	ed9f 8b0d 	vldr	d8, [pc, #52]	; 12d80 <pow+0x190>
   12d4c:	e78d      	b.n	12c6a <pow+0x7a>
   12d4e:	f01d f966 	bl	3001e <__errno>
   12d52:	2121      	movs	r1, #33	; 0x21
   12d54:	2200      	movs	r2, #0
   12d56:	2300      	movs	r3, #0
   12d58:	6001      	str	r1, [r0, #0]
   12d5a:	4610      	mov	r0, r2
   12d5c:	4619      	mov	r1, r3
   12d5e:	f7fa facf 	bl	d300 <__aeabi_ddiv>
   12d62:	ec41 0b18 	vmov	d8, r0, r1
   12d66:	e780      	b.n	12c6a <pow+0x7a>
	...
   12d74:	3ff00000 	.word	0x3ff00000
   12d78:	00000000 	.word	0x00000000
   12d7c:	7ff00000 	.word	0x7ff00000
   12d80:	00000000 	.word	0x00000000
   12d84:	fff00000 	.word	0xfff00000
   12d88:	2002041a 	.word	0x2002041a
   12d8c:	00000000 	.word	0x00000000

00012d90 <__ieee754_pow>:
   12d90:	ec51 0b11 	vmov	r0, r1, d1
   12d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d98:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   12d9c:	b093      	sub	sp, #76	; 0x4c
   12d9e:	ea58 0400 	orrs.w	r4, r8, r0
   12da2:	d020      	beq.n	12de6 <__ieee754_pow+0x56>
   12da4:	4c5c      	ldr	r4, [pc, #368]	; (12f18 <__ieee754_pow+0x188>)
   12da6:	ee10 aa10 	vmov	sl, s0
   12daa:	ec53 2b10 	vmov	r2, r3, d0
   12dae:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   12db2:	461f      	mov	r7, r3
   12db4:	42a6      	cmp	r6, r4
   12db6:	dc11      	bgt.n	12ddc <__ieee754_pow+0x4c>
   12db8:	4689      	mov	r9, r1
   12dba:	ee11 ca10 	vmov	ip, s2
   12dbe:	d106      	bne.n	12dce <__ieee754_pow+0x3e>
   12dc0:	b12a      	cbz	r2, 12dce <__ieee754_pow+0x3e>
   12dc2:	4856      	ldr	r0, [pc, #344]	; (12f1c <__ieee754_pow+0x18c>)
   12dc4:	b013      	add	sp, #76	; 0x4c
   12dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dca:	f000 bd61 	b.w	13890 <nan>
   12dce:	4c52      	ldr	r4, [pc, #328]	; (12f18 <__ieee754_pow+0x188>)
   12dd0:	45a0      	cmp	r8, r4
   12dd2:	dc03      	bgt.n	12ddc <__ieee754_pow+0x4c>
   12dd4:	d10e      	bne.n	12df4 <__ieee754_pow+0x64>
   12dd6:	f1bc 0f00 	cmp.w	ip, #0
   12dda:	d00b      	beq.n	12df4 <__ieee754_pow+0x64>
   12ddc:	4b50      	ldr	r3, [pc, #320]	; (12f20 <__ieee754_pow+0x190>)
   12dde:	4433      	add	r3, r6
   12de0:	ea53 030a 	orrs.w	r3, r3, sl
   12de4:	d1ed      	bne.n	12dc2 <__ieee754_pow+0x32>
   12de6:	2000      	movs	r0, #0
   12de8:	494e      	ldr	r1, [pc, #312]	; (12f24 <__ieee754_pow+0x194>)
   12dea:	ec41 0b10 	vmov	d0, r0, r1
   12dee:	b013      	add	sp, #76	; 0x4c
   12df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df4:	2f00      	cmp	r7, #0
   12df6:	4614      	mov	r4, r2
   12df8:	461d      	mov	r5, r3
   12dfa:	e9cd 0100 	strd	r0, r1, [sp]
   12dfe:	db44      	blt.n	12e8a <__ieee754_pow+0xfa>
   12e00:	f04f 0b00 	mov.w	fp, #0
   12e04:	f1bc 0f00 	cmp.w	ip, #0
   12e08:	d10f      	bne.n	12e2a <__ieee754_pow+0x9a>
   12e0a:	4b43      	ldr	r3, [pc, #268]	; (12f18 <__ieee754_pow+0x188>)
   12e0c:	4598      	cmp	r8, r3
   12e0e:	d057      	beq.n	12ec0 <__ieee754_pow+0x130>
   12e10:	4b44      	ldr	r3, [pc, #272]	; (12f24 <__ieee754_pow+0x194>)
   12e12:	4598      	cmp	r8, r3
   12e14:	d067      	beq.n	12ee6 <__ieee754_pow+0x156>
   12e16:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   12e1a:	f000 84a9 	beq.w	13770 <__ieee754_pow+0x9e0>
   12e1e:	4b42      	ldr	r3, [pc, #264]	; (12f28 <__ieee754_pow+0x198>)
   12e20:	4599      	cmp	r9, r3
   12e22:	d102      	bne.n	12e2a <__ieee754_pow+0x9a>
   12e24:	2f00      	cmp	r7, #0
   12e26:	f280 84f1 	bge.w	1380c <__ieee754_pow+0xa7c>
   12e2a:	ec45 4b10 	vmov	d0, r4, r5
   12e2e:	f017 fef9 	bl	2ac24 <fabs>
   12e32:	ec51 0b10 	vmov	r0, r1, d0
   12e36:	f1ba 0f00 	cmp.w	sl, #0
   12e3a:	d108      	bne.n	12e4e <__ieee754_pow+0xbe>
   12e3c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   12e40:	4a38      	ldr	r2, [pc, #224]	; (12f24 <__ieee754_pow+0x194>)
   12e42:	4293      	cmp	r3, r2
   12e44:	f000 8395 	beq.w	13572 <__ieee754_pow+0x7e2>
   12e48:	2e00      	cmp	r6, #0
   12e4a:	f000 8392 	beq.w	13572 <__ieee754_pow+0x7e2>
   12e4e:	0ffb      	lsrs	r3, r7, #31
   12e50:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   12e54:	ea5b 030a 	orrs.w	r3, fp, sl
   12e58:	d04c      	beq.n	12ef4 <__ieee754_pow+0x164>
   12e5a:	4b34      	ldr	r3, [pc, #208]	; (12f2c <__ieee754_pow+0x19c>)
   12e5c:	4598      	cmp	r8, r3
   12e5e:	dd6b      	ble.n	12f38 <__ieee754_pow+0x1a8>
   12e60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   12e64:	4598      	cmp	r8, r3
   12e66:	f340 8411 	ble.w	1368c <__ieee754_pow+0x8fc>
   12e6a:	4b31      	ldr	r3, [pc, #196]	; (12f30 <__ieee754_pow+0x1a0>)
   12e6c:	429e      	cmp	r6, r3
   12e6e:	f340 8395 	ble.w	1359c <__ieee754_pow+0x80c>
   12e72:	f1b9 0f00 	cmp.w	r9, #0
   12e76:	f340 8395 	ble.w	135a4 <__ieee754_pow+0x814>
   12e7a:	a325      	add	r3, pc, #148	; (adr r3, 12f10 <__ieee754_pow+0x180>)
   12e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e80:	4610      	mov	r0, r2
   12e82:	4619      	mov	r1, r3
   12e84:	f7fa f912 	bl	d0ac <__aeabi_dmul>
   12e88:	e7af      	b.n	12dea <__ieee754_pow+0x5a>
   12e8a:	4b2a      	ldr	r3, [pc, #168]	; (12f34 <__ieee754_pow+0x1a4>)
   12e8c:	4598      	cmp	r8, r3
   12e8e:	dc27      	bgt.n	12ee0 <__ieee754_pow+0x150>
   12e90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   12e94:	4598      	cmp	r8, r3
   12e96:	ddb3      	ble.n	12e00 <__ieee754_pow+0x70>
   12e98:	ea4f 5328 	mov.w	r3, r8, asr #20
   12e9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   12ea0:	2b14      	cmp	r3, #20
   12ea2:	f340 846d 	ble.w	13780 <__ieee754_pow+0x9f0>
   12ea6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   12eaa:	fa2c f203 	lsr.w	r2, ip, r3
   12eae:	fa02 f303 	lsl.w	r3, r2, r3
   12eb2:	4563      	cmp	r3, ip
   12eb4:	d1a4      	bne.n	12e00 <__ieee754_pow+0x70>
   12eb6:	f002 0201 	and.w	r2, r2, #1
   12eba:	f1c2 0b02 	rsb	fp, r2, #2
   12ebe:	e7a1      	b.n	12e04 <__ieee754_pow+0x74>
   12ec0:	4b17      	ldr	r3, [pc, #92]	; (12f20 <__ieee754_pow+0x190>)
   12ec2:	4433      	add	r3, r6
   12ec4:	ea53 030a 	orrs.w	r3, r3, sl
   12ec8:	d08d      	beq.n	12de6 <__ieee754_pow+0x56>
   12eca:	4b19      	ldr	r3, [pc, #100]	; (12f30 <__ieee754_pow+0x1a0>)
   12ecc:	429e      	cmp	r6, r3
   12ece:	f340 8394 	ble.w	135fa <__ieee754_pow+0x86a>
   12ed2:	f1b9 0f00 	cmp.w	r9, #0
   12ed6:	f2c0 8365 	blt.w	135a4 <__ieee754_pow+0x814>
   12eda:	e9dd 0100 	ldrd	r0, r1, [sp]
   12ede:	e784      	b.n	12dea <__ieee754_pow+0x5a>
   12ee0:	f04f 0b02 	mov.w	fp, #2
   12ee4:	e78e      	b.n	12e04 <__ieee754_pow+0x74>
   12ee6:	f1b9 0f00 	cmp.w	r9, #0
   12eea:	f2c0 8439 	blt.w	13760 <__ieee754_pow+0x9d0>
   12eee:	4620      	mov	r0, r4
   12ef0:	4629      	mov	r1, r5
   12ef2:	e77a      	b.n	12dea <__ieee754_pow+0x5a>
   12ef4:	4622      	mov	r2, r4
   12ef6:	462b      	mov	r3, r5
   12ef8:	4610      	mov	r0, r2
   12efa:	4619      	mov	r1, r3
   12efc:	f7f9 ff1e 	bl	cd3c <__aeabi_dsub>
   12f00:	4602      	mov	r2, r0
   12f02:	460b      	mov	r3, r1
   12f04:	f7fa f9fc 	bl	d300 <__aeabi_ddiv>
   12f08:	e76f      	b.n	12dea <__ieee754_pow+0x5a>
   12f0a:	bf00      	nop
   12f0c:	f3af 8000 	nop.w
   12f10:	8800759c 	.word	0x8800759c
   12f14:	7e37e43c 	.word	0x7e37e43c
   12f18:	7ff00000 	.word	0x7ff00000
   12f1c:	00034e3c 	.word	0x00034e3c
   12f20:	c0100000 	.word	0xc0100000
   12f24:	3ff00000 	.word	0x3ff00000
   12f28:	3fe00000 	.word	0x3fe00000
   12f2c:	41e00000 	.word	0x41e00000
   12f30:	3fefffff 	.word	0x3fefffff
   12f34:	433fffff 	.word	0x433fffff
   12f38:	4bd3      	ldr	r3, [pc, #844]	; (13288 <__ieee754_pow+0x4f8>)
   12f3a:	403b      	ands	r3, r7
   12f3c:	2b00      	cmp	r3, #0
   12f3e:	f040 840c 	bne.w	1375a <__ieee754_pow+0x9ca>
   12f42:	2200      	movs	r2, #0
   12f44:	4bd1      	ldr	r3, [pc, #836]	; (1328c <__ieee754_pow+0x4fc>)
   12f46:	f7fa f8b1 	bl	d0ac <__aeabi_dmul>
   12f4a:	f06f 0534 	mvn.w	r5, #52	; 0x34
   12f4e:	460e      	mov	r6, r1
   12f50:	1533      	asrs	r3, r6, #20
   12f52:	4acf      	ldr	r2, [pc, #828]	; (13290 <__ieee754_pow+0x500>)
   12f54:	f3c6 0613 	ubfx	r6, r6, #0, #20
   12f58:	4cce      	ldr	r4, [pc, #824]	; (13294 <__ieee754_pow+0x504>)
   12f5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   12f5e:	4296      	cmp	r6, r2
   12f60:	ea44 0406 	orr.w	r4, r4, r6
   12f64:	441d      	add	r5, r3
   12f66:	950b      	str	r5, [sp, #44]	; 0x2c
   12f68:	f340 83eb 	ble.w	13742 <__ieee754_pow+0x9b2>
   12f6c:	4bca      	ldr	r3, [pc, #808]	; (13298 <__ieee754_pow+0x508>)
   12f6e:	429e      	cmp	r6, r3
   12f70:	f340 842b 	ble.w	137ca <__ieee754_pow+0xa3a>
   12f74:	3501      	adds	r5, #1
   12f76:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   12f7a:	ed9f 7bad 	vldr	d7, [pc, #692]	; 13230 <__ieee754_pow+0x4a0>
   12f7e:	950b      	str	r5, [sp, #44]	; 0x2c
   12f80:	2500      	movs	r5, #0
   12f82:	ed8d 7b08 	vstr	d7, [sp, #32]
   12f86:	ed9f 7bac 	vldr	d7, [pc, #688]	; 13238 <__ieee754_pow+0x4a8>
   12f8a:	ed8d 7b06 	vstr	d7, [sp, #24]
   12f8e:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 13230 <__ieee754_pow+0x4a0>
   12f92:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   12f96:	4680      	mov	r8, r0
   12f98:	46a1      	mov	r9, r4
   12f9a:	4621      	mov	r1, r4
   12f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12fa0:	f7f9 fecc 	bl	cd3c <__aeabi_dsub>
   12fa4:	4606      	mov	r6, r0
   12fa6:	460f      	mov	r7, r1
   12fa8:	4640      	mov	r0, r8
   12faa:	4621      	mov	r1, r4
   12fac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12fb0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
   12fb4:	f7f9 fec4 	bl	cd40 <__adddf3>
   12fb8:	4602      	mov	r2, r0
   12fba:	460b      	mov	r3, r1
   12fbc:	2000      	movs	r0, #0
   12fbe:	49b5      	ldr	r1, [pc, #724]	; (13294 <__ieee754_pow+0x504>)
   12fc0:	f7fa f99e 	bl	d300 <__aeabi_ddiv>
   12fc4:	460a      	mov	r2, r1
   12fc6:	4601      	mov	r1, r0
   12fc8:	4613      	mov	r3, r2
   12fca:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
   12fce:	4602      	mov	r2, r0
   12fd0:	4639      	mov	r1, r7
   12fd2:	4630      	mov	r0, r6
   12fd4:	f7fa f86a 	bl	d0ac <__aeabi_dmul>
   12fd8:	4680      	mov	r8, r0
   12fda:	1063      	asrs	r3, r4, #1
   12fdc:	4689      	mov	r9, r1
   12fde:	2400      	movs	r4, #0
   12fe0:	2000      	movs	r0, #0
   12fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   12fe6:	4602      	mov	r2, r0
   12fe8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   12fec:	e9cd 8902 	strd	r8, r9, [sp, #8]
   12ff0:	9402      	str	r4, [sp, #8]
   12ff2:	1959      	adds	r1, r3, r5
   12ff4:	4604      	mov	r4, r0
   12ff6:	460d      	mov	r5, r1
   12ff8:	460b      	mov	r3, r1
   12ffa:	e9cd 8904 	strd	r8, r9, [sp, #16]
   12ffe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   13002:	4640      	mov	r0, r8
   13004:	4649      	mov	r1, r9
   13006:	f7fa f851 	bl	d0ac <__aeabi_dmul>
   1300a:	4602      	mov	r2, r0
   1300c:	460b      	mov	r3, r1
   1300e:	4630      	mov	r0, r6
   13010:	4639      	mov	r1, r7
   13012:	f7f9 fe93 	bl	cd3c <__aeabi_dsub>
   13016:	4606      	mov	r6, r0
   13018:	460f      	mov	r7, r1
   1301a:	4620      	mov	r0, r4
   1301c:	4629      	mov	r1, r5
   1301e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13022:	f7f9 fe8b 	bl	cd3c <__aeabi_dsub>
   13026:	4602      	mov	r2, r0
   13028:	460b      	mov	r3, r1
   1302a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1302e:	f7f9 fe85 	bl	cd3c <__aeabi_dsub>
   13032:	4642      	mov	r2, r8
   13034:	464b      	mov	r3, r9
   13036:	f7fa f839 	bl	d0ac <__aeabi_dmul>
   1303a:	4602      	mov	r2, r0
   1303c:	460b      	mov	r3, r1
   1303e:	4630      	mov	r0, r6
   13040:	4639      	mov	r1, r7
   13042:	f7f9 fe7b 	bl	cd3c <__aeabi_dsub>
   13046:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1304a:	f7fa f82f 	bl	d0ac <__aeabi_dmul>
   1304e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   13052:	e9cd 0106 	strd	r0, r1, [sp, #24]
   13056:	4622      	mov	r2, r4
   13058:	462b      	mov	r3, r5
   1305a:	4620      	mov	r0, r4
   1305c:	4629      	mov	r1, r5
   1305e:	f7fa f825 	bl	d0ac <__aeabi_dmul>
   13062:	4604      	mov	r4, r0
   13064:	460d      	mov	r5, r1
   13066:	a376      	add	r3, pc, #472	; (adr r3, 13240 <__ieee754_pow+0x4b0>)
   13068:	e9d3 2300 	ldrd	r2, r3, [r3]
   1306c:	f7fa f81e 	bl	d0ac <__aeabi_dmul>
   13070:	a375      	add	r3, pc, #468	; (adr r3, 13248 <__ieee754_pow+0x4b8>)
   13072:	e9d3 2300 	ldrd	r2, r3, [r3]
   13076:	f7f9 fe63 	bl	cd40 <__adddf3>
   1307a:	4622      	mov	r2, r4
   1307c:	462b      	mov	r3, r5
   1307e:	f7fa f815 	bl	d0ac <__aeabi_dmul>
   13082:	a373      	add	r3, pc, #460	; (adr r3, 13250 <__ieee754_pow+0x4c0>)
   13084:	e9d3 2300 	ldrd	r2, r3, [r3]
   13088:	f7f9 fe5a 	bl	cd40 <__adddf3>
   1308c:	4622      	mov	r2, r4
   1308e:	462b      	mov	r3, r5
   13090:	f7fa f80c 	bl	d0ac <__aeabi_dmul>
   13094:	a370      	add	r3, pc, #448	; (adr r3, 13258 <__ieee754_pow+0x4c8>)
   13096:	e9d3 2300 	ldrd	r2, r3, [r3]
   1309a:	f7f9 fe51 	bl	cd40 <__adddf3>
   1309e:	4622      	mov	r2, r4
   130a0:	462b      	mov	r3, r5
   130a2:	f7fa f803 	bl	d0ac <__aeabi_dmul>
   130a6:	a36e      	add	r3, pc, #440	; (adr r3, 13260 <__ieee754_pow+0x4d0>)
   130a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   130ac:	f7f9 fe48 	bl	cd40 <__adddf3>
   130b0:	4622      	mov	r2, r4
   130b2:	462b      	mov	r3, r5
   130b4:	f7f9 fffa 	bl	d0ac <__aeabi_dmul>
   130b8:	a36b      	add	r3, pc, #428	; (adr r3, 13268 <__ieee754_pow+0x4d8>)
   130ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   130be:	f7f9 fe3f 	bl	cd40 <__adddf3>
   130c2:	4606      	mov	r6, r0
   130c4:	460f      	mov	r7, r1
   130c6:	4622      	mov	r2, r4
   130c8:	462b      	mov	r3, r5
   130ca:	4620      	mov	r0, r4
   130cc:	4629      	mov	r1, r5
   130ce:	f7f9 ffed 	bl	d0ac <__aeabi_dmul>
   130d2:	4602      	mov	r2, r0
   130d4:	460b      	mov	r3, r1
   130d6:	4630      	mov	r0, r6
   130d8:	4639      	mov	r1, r7
   130da:	f7f9 ffe7 	bl	d0ac <__aeabi_dmul>
   130de:	4642      	mov	r2, r8
   130e0:	4604      	mov	r4, r0
   130e2:	460d      	mov	r5, r1
   130e4:	464b      	mov	r3, r9
   130e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   130ea:	f7f9 fe29 	bl	cd40 <__adddf3>
   130ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   130f2:	f7f9 ffdb 	bl	d0ac <__aeabi_dmul>
   130f6:	4622      	mov	r2, r4
   130f8:	462b      	mov	r3, r5
   130fa:	f7f9 fe21 	bl	cd40 <__adddf3>
   130fe:	4642      	mov	r2, r8
   13100:	4604      	mov	r4, r0
   13102:	460d      	mov	r5, r1
   13104:	464b      	mov	r3, r9
   13106:	4640      	mov	r0, r8
   13108:	4649      	mov	r1, r9
   1310a:	f7f9 ffcf 	bl	d0ac <__aeabi_dmul>
   1310e:	2200      	movs	r2, #0
   13110:	4b62      	ldr	r3, [pc, #392]	; (1329c <__ieee754_pow+0x50c>)
   13112:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   13116:	f7f9 fe13 	bl	cd40 <__adddf3>
   1311a:	4622      	mov	r2, r4
   1311c:	462b      	mov	r3, r5
   1311e:	f7f9 fe0f 	bl	cd40 <__adddf3>
   13122:	9802      	ldr	r0, [sp, #8]
   13124:	460f      	mov	r7, r1
   13126:	4649      	mov	r1, r9
   13128:	4606      	mov	r6, r0
   1312a:	4640      	mov	r0, r8
   1312c:	463b      	mov	r3, r7
   1312e:	4632      	mov	r2, r6
   13130:	f7f9 ffbc 	bl	d0ac <__aeabi_dmul>
   13134:	2200      	movs	r2, #0
   13136:	4680      	mov	r8, r0
   13138:	4689      	mov	r9, r1
   1313a:	4b58      	ldr	r3, [pc, #352]	; (1329c <__ieee754_pow+0x50c>)
   1313c:	4630      	mov	r0, r6
   1313e:	4639      	mov	r1, r7
   13140:	f7f9 fdfc 	bl	cd3c <__aeabi_dsub>
   13144:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   13148:	f7f9 fdf8 	bl	cd3c <__aeabi_dsub>
   1314c:	4602      	mov	r2, r0
   1314e:	460b      	mov	r3, r1
   13150:	4620      	mov	r0, r4
   13152:	4629      	mov	r1, r5
   13154:	f7f9 fdf2 	bl	cd3c <__aeabi_dsub>
   13158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1315c:	f7f9 ffa6 	bl	d0ac <__aeabi_dmul>
   13160:	4604      	mov	r4, r0
   13162:	460d      	mov	r5, r1
   13164:	4632      	mov	r2, r6
   13166:	463b      	mov	r3, r7
   13168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1316c:	f7f9 ff9e 	bl	d0ac <__aeabi_dmul>
   13170:	4602      	mov	r2, r0
   13172:	460b      	mov	r3, r1
   13174:	4620      	mov	r0, r4
   13176:	4629      	mov	r1, r5
   13178:	f7f9 fde2 	bl	cd40 <__adddf3>
   1317c:	4604      	mov	r4, r0
   1317e:	460d      	mov	r5, r1
   13180:	4602      	mov	r2, r0
   13182:	460b      	mov	r3, r1
   13184:	4640      	mov	r0, r8
   13186:	4649      	mov	r1, r9
   13188:	f7f9 fdda 	bl	cd40 <__adddf3>
   1318c:	9802      	ldr	r0, [sp, #8]
   1318e:	460f      	mov	r7, r1
   13190:	4606      	mov	r6, r0
   13192:	a337      	add	r3, pc, #220	; (adr r3, 13270 <__ieee754_pow+0x4e0>)
   13194:	e9d3 2300 	ldrd	r2, r3, [r3]
   13198:	f7f9 ff88 	bl	d0ac <__aeabi_dmul>
   1319c:	4642      	mov	r2, r8
   1319e:	464b      	mov	r3, r9
   131a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   131a4:	4630      	mov	r0, r6
   131a6:	4639      	mov	r1, r7
   131a8:	f7f9 fdc8 	bl	cd3c <__aeabi_dsub>
   131ac:	4602      	mov	r2, r0
   131ae:	460b      	mov	r3, r1
   131b0:	4620      	mov	r0, r4
   131b2:	4629      	mov	r1, r5
   131b4:	f7f9 fdc2 	bl	cd3c <__aeabi_dsub>
   131b8:	a32f      	add	r3, pc, #188	; (adr r3, 13278 <__ieee754_pow+0x4e8>)
   131ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   131be:	f7f9 ff75 	bl	d0ac <__aeabi_dmul>
   131c2:	4604      	mov	r4, r0
   131c4:	460d      	mov	r5, r1
   131c6:	4630      	mov	r0, r6
   131c8:	4639      	mov	r1, r7
   131ca:	a32d      	add	r3, pc, #180	; (adr r3, 13280 <__ieee754_pow+0x4f0>)
   131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   131d0:	f7f9 ff6c 	bl	d0ac <__aeabi_dmul>
   131d4:	4602      	mov	r2, r0
   131d6:	460b      	mov	r3, r1
   131d8:	4620      	mov	r0, r4
   131da:	4629      	mov	r1, r5
   131dc:	f7f9 fdb0 	bl	cd40 <__adddf3>
   131e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   131e4:	f7f9 fdac 	bl	cd40 <__adddf3>
   131e8:	4606      	mov	r6, r0
   131ea:	460f      	mov	r7, r1
   131ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   131ee:	f7f9 fef3 	bl	cfd8 <__aeabi_i2d>
   131f2:	4632      	mov	r2, r6
   131f4:	4680      	mov	r8, r0
   131f6:	4689      	mov	r9, r1
   131f8:	463b      	mov	r3, r7
   131fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   131fe:	f7f9 fd9f 	bl	cd40 <__adddf3>
   13202:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   13206:	f7f9 fd9b 	bl	cd40 <__adddf3>
   1320a:	4642      	mov	r2, r8
   1320c:	464b      	mov	r3, r9
   1320e:	f7f9 fd97 	bl	cd40 <__adddf3>
   13212:	9802      	ldr	r0, [sp, #8]
   13214:	4642      	mov	r2, r8
   13216:	464b      	mov	r3, r9
   13218:	4604      	mov	r4, r0
   1321a:	460d      	mov	r5, r1
   1321c:	f7f9 fd8e 	bl	cd3c <__aeabi_dsub>
   13220:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   13224:	f7f9 fd8a 	bl	cd3c <__aeabi_dsub>
   13228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1322c:	e038      	b.n	132a0 <__ieee754_pow+0x510>
   1322e:	bf00      	nop
	...
   1323c:	3ff00000 	.word	0x3ff00000
   13240:	4a454eef 	.word	0x4a454eef
   13244:	3fca7e28 	.word	0x3fca7e28
   13248:	93c9db65 	.word	0x93c9db65
   1324c:	3fcd864a 	.word	0x3fcd864a
   13250:	a91d4101 	.word	0xa91d4101
   13254:	3fd17460 	.word	0x3fd17460
   13258:	518f264d 	.word	0x518f264d
   1325c:	3fd55555 	.word	0x3fd55555
   13260:	db6fabff 	.word	0xdb6fabff
   13264:	3fdb6db6 	.word	0x3fdb6db6
   13268:	33333303 	.word	0x33333303
   1326c:	3fe33333 	.word	0x3fe33333
   13270:	e0000000 	.word	0xe0000000
   13274:	3feec709 	.word	0x3feec709
   13278:	dc3a03fd 	.word	0xdc3a03fd
   1327c:	3feec709 	.word	0x3feec709
   13280:	145b01f5 	.word	0x145b01f5
   13284:	be3e2fe0 	.word	0xbe3e2fe0
   13288:	7ff00000 	.word	0x7ff00000
   1328c:	43400000 	.word	0x43400000
   13290:	0003988e 	.word	0x0003988e
   13294:	3ff00000 	.word	0x3ff00000
   13298:	000bb679 	.word	0x000bb679
   1329c:	40080000 	.word	0x40080000
   132a0:	f7f9 fd4c 	bl	cd3c <__aeabi_dsub>
   132a4:	460b      	mov	r3, r1
   132a6:	4602      	mov	r2, r0
   132a8:	4639      	mov	r1, r7
   132aa:	4630      	mov	r0, r6
   132ac:	f7f9 fd46 	bl	cd3c <__aeabi_dsub>
   132b0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   132b4:	ea53 030a 	orrs.w	r3, r3, sl
   132b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   132bc:	f040 8175 	bne.w	135aa <__ieee754_pow+0x81a>
   132c0:	ed9f 7bd3 	vldr	d7, [pc, #844]	; 13610 <__ieee754_pow+0x880>
   132c4:	ed8d 7b04 	vstr	d7, [sp, #16]
   132c8:	e9dd ab00 	ldrd	sl, fp, [sp]
   132cc:	4652      	mov	r2, sl
   132ce:	465b      	mov	r3, fp
   132d0:	4650      	mov	r0, sl
   132d2:	4659      	mov	r1, fp
   132d4:	e9cd 2300 	strd	r2, r3, [sp]
   132d8:	2300      	movs	r3, #0
   132da:	9300      	str	r3, [sp, #0]
   132dc:	e9dd 6700 	ldrd	r6, r7, [sp]
   132e0:	4632      	mov	r2, r6
   132e2:	463b      	mov	r3, r7
   132e4:	f7f9 fd2a 	bl	cd3c <__aeabi_dsub>
   132e8:	4622      	mov	r2, r4
   132ea:	462b      	mov	r3, r5
   132ec:	f7f9 fede 	bl	d0ac <__aeabi_dmul>
   132f0:	4680      	mov	r8, r0
   132f2:	4689      	mov	r9, r1
   132f4:	4652      	mov	r2, sl
   132f6:	465b      	mov	r3, fp
   132f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   132fc:	f7f9 fed6 	bl	d0ac <__aeabi_dmul>
   13300:	4602      	mov	r2, r0
   13302:	460b      	mov	r3, r1
   13304:	4640      	mov	r0, r8
   13306:	4649      	mov	r1, r9
   13308:	f7f9 fd1a 	bl	cd40 <__adddf3>
   1330c:	468b      	mov	fp, r1
   1330e:	4682      	mov	sl, r0
   13310:	4632      	mov	r2, r6
   13312:	463b      	mov	r3, r7
   13314:	4620      	mov	r0, r4
   13316:	4629      	mov	r1, r5
   13318:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1331c:	f7f9 fec6 	bl	d0ac <__aeabi_dmul>
   13320:	460b      	mov	r3, r1
   13322:	4602      	mov	r2, r0
   13324:	4680      	mov	r8, r0
   13326:	4689      	mov	r9, r1
   13328:	4650      	mov	r0, sl
   1332a:	4659      	mov	r1, fp
   1332c:	f7f9 fd08 	bl	cd40 <__adddf3>
   13330:	4bcf      	ldr	r3, [pc, #828]	; (13670 <__ieee754_pow+0x8e0>)
   13332:	4604      	mov	r4, r0
   13334:	460d      	mov	r5, r1
   13336:	4299      	cmp	r1, r3
   13338:	468b      	mov	fp, r1
   1333a:	f340 813b 	ble.w	135b4 <__ieee754_pow+0x824>
   1333e:	4bcd      	ldr	r3, [pc, #820]	; (13674 <__ieee754_pow+0x8e4>)
   13340:	440b      	add	r3, r1
   13342:	4303      	orrs	r3, r0
   13344:	f040 8233 	bne.w	137ae <__ieee754_pow+0xa1e>
   13348:	a3b3      	add	r3, pc, #716	; (adr r3, 13618 <__ieee754_pow+0x888>)
   1334a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1334e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13352:	f7f9 fcf5 	bl	cd40 <__adddf3>
   13356:	4606      	mov	r6, r0
   13358:	460f      	mov	r7, r1
   1335a:	4642      	mov	r2, r8
   1335c:	464b      	mov	r3, r9
   1335e:	4620      	mov	r0, r4
   13360:	4629      	mov	r1, r5
   13362:	f7f9 fceb 	bl	cd3c <__aeabi_dsub>
   13366:	4602      	mov	r2, r0
   13368:	460b      	mov	r3, r1
   1336a:	4630      	mov	r0, r6
   1336c:	4639      	mov	r1, r7
   1336e:	f7fa f92d 	bl	d5cc <__aeabi_dcmpgt>
   13372:	2800      	cmp	r0, #0
   13374:	f040 821b 	bne.w	137ae <__ieee754_pow+0xa1e>
   13378:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1337c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   13380:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   13384:	4cbc      	ldr	r4, [pc, #752]	; (13678 <__ieee754_pow+0x8e8>)
   13386:	f1bb 0f00 	cmp.w	fp, #0
   1338a:	fa42 f303 	asr.w	r3, r2, r3
   1338e:	f04f 0000 	mov.w	r0, #0
   13392:	445b      	add	r3, fp
   13394:	f3c3 520a 	ubfx	r2, r3, #20, #11
   13398:	f3c3 0a13 	ubfx	sl, r3, #0, #20
   1339c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   133a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
   133a4:	fa44 f402 	asr.w	r4, r4, r2
   133a8:	f1c2 0214 	rsb	r2, r2, #20
   133ac:	ea23 0104 	bic.w	r1, r3, r4
   133b0:	fa4a fa02 	asr.w	sl, sl, r2
   133b4:	4602      	mov	r2, r0
   133b6:	4640      	mov	r0, r8
   133b8:	460b      	mov	r3, r1
   133ba:	bfb8      	it	lt
   133bc:	f1ca 0a00 	rsblt	sl, sl, #0
   133c0:	4649      	mov	r1, r9
   133c2:	f7f9 fcbb 	bl	cd3c <__aeabi_dsub>
   133c6:	4602      	mov	r2, r0
   133c8:	460b      	mov	r3, r1
   133ca:	4680      	mov	r8, r0
   133cc:	4689      	mov	r9, r1
   133ce:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
   133d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   133d6:	f7f9 fcb3 	bl	cd40 <__adddf3>
   133da:	460d      	mov	r5, r1
   133dc:	2400      	movs	r4, #0
   133de:	4629      	mov	r1, r5
   133e0:	a38f      	add	r3, pc, #572	; (adr r3, 13620 <__ieee754_pow+0x890>)
   133e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   133e6:	4620      	mov	r0, r4
   133e8:	f7f9 fe60 	bl	d0ac <__aeabi_dmul>
   133ec:	4642      	mov	r2, r8
   133ee:	4606      	mov	r6, r0
   133f0:	460f      	mov	r7, r1
   133f2:	464b      	mov	r3, r9
   133f4:	4620      	mov	r0, r4
   133f6:	4629      	mov	r1, r5
   133f8:	f7f9 fca0 	bl	cd3c <__aeabi_dsub>
   133fc:	4602      	mov	r2, r0
   133fe:	460b      	mov	r3, r1
   13400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13404:	f7f9 fc9a 	bl	cd3c <__aeabi_dsub>
   13408:	a387      	add	r3, pc, #540	; (adr r3, 13628 <__ieee754_pow+0x898>)
   1340a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1340e:	f7f9 fe4d 	bl	d0ac <__aeabi_dmul>
   13412:	4680      	mov	r8, r0
   13414:	4689      	mov	r9, r1
   13416:	4620      	mov	r0, r4
   13418:	4629      	mov	r1, r5
   1341a:	a385      	add	r3, pc, #532	; (adr r3, 13630 <__ieee754_pow+0x8a0>)
   1341c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13420:	f7f9 fe44 	bl	d0ac <__aeabi_dmul>
   13424:	4602      	mov	r2, r0
   13426:	460b      	mov	r3, r1
   13428:	4640      	mov	r0, r8
   1342a:	4649      	mov	r1, r9
   1342c:	f7f9 fc88 	bl	cd40 <__adddf3>
   13430:	4604      	mov	r4, r0
   13432:	460d      	mov	r5, r1
   13434:	4602      	mov	r2, r0
   13436:	460b      	mov	r3, r1
   13438:	4630      	mov	r0, r6
   1343a:	4639      	mov	r1, r7
   1343c:	f7f9 fc80 	bl	cd40 <__adddf3>
   13440:	4632      	mov	r2, r6
   13442:	4680      	mov	r8, r0
   13444:	4689      	mov	r9, r1
   13446:	463b      	mov	r3, r7
   13448:	f7f9 fc78 	bl	cd3c <__aeabi_dsub>
   1344c:	4602      	mov	r2, r0
   1344e:	460b      	mov	r3, r1
   13450:	4620      	mov	r0, r4
   13452:	4629      	mov	r1, r5
   13454:	f7f9 fc72 	bl	cd3c <__aeabi_dsub>
   13458:	4642      	mov	r2, r8
   1345a:	4606      	mov	r6, r0
   1345c:	460f      	mov	r7, r1
   1345e:	464b      	mov	r3, r9
   13460:	4640      	mov	r0, r8
   13462:	4649      	mov	r1, r9
   13464:	f7f9 fe22 	bl	d0ac <__aeabi_dmul>
   13468:	4604      	mov	r4, r0
   1346a:	460d      	mov	r5, r1
   1346c:	a372      	add	r3, pc, #456	; (adr r3, 13638 <__ieee754_pow+0x8a8>)
   1346e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13472:	f7f9 fe1b 	bl	d0ac <__aeabi_dmul>
   13476:	a372      	add	r3, pc, #456	; (adr r3, 13640 <__ieee754_pow+0x8b0>)
   13478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1347c:	f7f9 fc5e 	bl	cd3c <__aeabi_dsub>
   13480:	4622      	mov	r2, r4
   13482:	462b      	mov	r3, r5
   13484:	f7f9 fe12 	bl	d0ac <__aeabi_dmul>
   13488:	a36f      	add	r3, pc, #444	; (adr r3, 13648 <__ieee754_pow+0x8b8>)
   1348a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1348e:	f7f9 fc57 	bl	cd40 <__adddf3>
   13492:	4622      	mov	r2, r4
   13494:	462b      	mov	r3, r5
   13496:	f7f9 fe09 	bl	d0ac <__aeabi_dmul>
   1349a:	a36d      	add	r3, pc, #436	; (adr r3, 13650 <__ieee754_pow+0x8c0>)
   1349c:	e9d3 2300 	ldrd	r2, r3, [r3]
   134a0:	f7f9 fc4c 	bl	cd3c <__aeabi_dsub>
   134a4:	4622      	mov	r2, r4
   134a6:	462b      	mov	r3, r5
   134a8:	f7f9 fe00 	bl	d0ac <__aeabi_dmul>
   134ac:	a36a      	add	r3, pc, #424	; (adr r3, 13658 <__ieee754_pow+0x8c8>)
   134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   134b2:	f7f9 fc45 	bl	cd40 <__adddf3>
   134b6:	4622      	mov	r2, r4
   134b8:	462b      	mov	r3, r5
   134ba:	f7f9 fdf7 	bl	d0ac <__aeabi_dmul>
   134be:	4602      	mov	r2, r0
   134c0:	460b      	mov	r3, r1
   134c2:	4640      	mov	r0, r8
   134c4:	4649      	mov	r1, r9
   134c6:	f7f9 fc39 	bl	cd3c <__aeabi_dsub>
   134ca:	4604      	mov	r4, r0
   134cc:	460d      	mov	r5, r1
   134ce:	4602      	mov	r2, r0
   134d0:	460b      	mov	r3, r1
   134d2:	4640      	mov	r0, r8
   134d4:	4649      	mov	r1, r9
   134d6:	f7f9 fde9 	bl	d0ac <__aeabi_dmul>
   134da:	2200      	movs	r2, #0
   134dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   134e0:	e9cd 0100 	strd	r0, r1, [sp]
   134e4:	4620      	mov	r0, r4
   134e6:	4629      	mov	r1, r5
   134e8:	f7f9 fc28 	bl	cd3c <__aeabi_dsub>
   134ec:	4602      	mov	r2, r0
   134ee:	460b      	mov	r3, r1
   134f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   134f4:	f7f9 ff04 	bl	d300 <__aeabi_ddiv>
   134f8:	4632      	mov	r2, r6
   134fa:	4604      	mov	r4, r0
   134fc:	460d      	mov	r5, r1
   134fe:	463b      	mov	r3, r7
   13500:	4640      	mov	r0, r8
   13502:	4649      	mov	r1, r9
   13504:	f7f9 fdd2 	bl	d0ac <__aeabi_dmul>
   13508:	4632      	mov	r2, r6
   1350a:	463b      	mov	r3, r7
   1350c:	f7f9 fc18 	bl	cd40 <__adddf3>
   13510:	4602      	mov	r2, r0
   13512:	460b      	mov	r3, r1
   13514:	4620      	mov	r0, r4
   13516:	4629      	mov	r1, r5
   13518:	f7f9 fc10 	bl	cd3c <__aeabi_dsub>
   1351c:	4642      	mov	r2, r8
   1351e:	464b      	mov	r3, r9
   13520:	f7f9 fc0c 	bl	cd3c <__aeabi_dsub>
   13524:	4602      	mov	r2, r0
   13526:	460b      	mov	r3, r1
   13528:	2000      	movs	r0, #0
   1352a:	4954      	ldr	r1, [pc, #336]	; (1367c <__ieee754_pow+0x8ec>)
   1352c:	f7f9 fc06 	bl	cd3c <__aeabi_dsub>
   13530:	448b      	add	fp, r1
   13532:	4602      	mov	r2, r0
   13534:	460b      	mov	r3, r1
   13536:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   1353a:	f2c0 815f 	blt.w	137fc <__ieee754_pow+0xa6c>
   1353e:	4659      	mov	r1, fp
   13540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13544:	f7f9 fdb2 	bl	d0ac <__aeabi_dmul>
   13548:	e44f      	b.n	12dea <__ieee754_pow+0x5a>
   1354a:	ec45 4b10 	vmov	d0, r4, r5
   1354e:	f017 fb69 	bl	2ac24 <fabs>
   13552:	ec51 0b10 	vmov	r0, r1, d0
   13556:	f1ba 0f00 	cmp.w	sl, #0
   1355a:	f47f accb 	bne.w	12ef4 <__ieee754_pow+0x164>
   1355e:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   13562:	4a46      	ldr	r2, [pc, #280]	; (1367c <__ieee754_pow+0x8ec>)
   13564:	4293      	cmp	r3, r2
   13566:	d002      	beq.n	1356e <__ieee754_pow+0x7de>
   13568:	2e00      	cmp	r6, #0
   1356a:	f47f acc3 	bne.w	12ef4 <__ieee754_pow+0x164>
   1356e:	f04f 0b00 	mov.w	fp, #0
   13572:	f1b9 0f00 	cmp.w	r9, #0
   13576:	da05      	bge.n	13584 <__ieee754_pow+0x7f4>
   13578:	4602      	mov	r2, r0
   1357a:	460b      	mov	r3, r1
   1357c:	2000      	movs	r0, #0
   1357e:	493f      	ldr	r1, [pc, #252]	; (1367c <__ieee754_pow+0x8ec>)
   13580:	f7f9 febe 	bl	d300 <__aeabi_ddiv>
   13584:	2f00      	cmp	r7, #0
   13586:	f6bf ac30 	bge.w	12dea <__ieee754_pow+0x5a>
   1358a:	4b3d      	ldr	r3, [pc, #244]	; (13680 <__ieee754_pow+0x8f0>)
   1358c:	4433      	add	r3, r6
   1358e:	ea53 030b 	orrs.w	r3, r3, fp
   13592:	f040 812a 	bne.w	137ea <__ieee754_pow+0xa5a>
   13596:	4602      	mov	r2, r0
   13598:	460b      	mov	r3, r1
   1359a:	e4ad      	b.n	12ef8 <__ieee754_pow+0x168>
   1359c:	f1b9 0f00 	cmp.w	r9, #0
   135a0:	f6ff ac6b 	blt.w	12e7a <__ieee754_pow+0xea>
   135a4:	2000      	movs	r0, #0
   135a6:	2100      	movs	r1, #0
   135a8:	e41f      	b.n	12dea <__ieee754_pow+0x5a>
   135aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 13660 <__ieee754_pow+0x8d0>
   135ae:	ed8d 7b04 	vstr	d7, [sp, #16]
   135b2:	e689      	b.n	132c8 <__ieee754_pow+0x538>
   135b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   135b8:	4e32      	ldr	r6, [pc, #200]	; (13684 <__ieee754_pow+0x8f4>)
   135ba:	42b3      	cmp	r3, r6
   135bc:	f340 80ef 	ble.w	1379e <__ieee754_pow+0xa0e>
   135c0:	4b31      	ldr	r3, [pc, #196]	; (13688 <__ieee754_pow+0x8f8>)
   135c2:	440b      	add	r3, r1
   135c4:	4303      	orrs	r3, r0
   135c6:	d10a      	bne.n	135de <__ieee754_pow+0x84e>
   135c8:	4642      	mov	r2, r8
   135ca:	464b      	mov	r3, r9
   135cc:	f7f9 fbb6 	bl	cd3c <__aeabi_dsub>
   135d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   135d4:	f7f9 fff0 	bl	d5b8 <__aeabi_dcmpge>
   135d8:	2800      	cmp	r0, #0
   135da:	f43f aecd 	beq.w	13378 <__ieee754_pow+0x5e8>
   135de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   135e2:	a321      	add	r3, pc, #132	; (adr r3, 13668 <__ieee754_pow+0x8d8>)
   135e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   135e8:	f7f9 fd60 	bl	d0ac <__aeabi_dmul>
   135ec:	a31e      	add	r3, pc, #120	; (adr r3, 13668 <__ieee754_pow+0x8d8>)
   135ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   135f2:	f7f9 fd5b 	bl	d0ac <__aeabi_dmul>
   135f6:	f7ff bbf8 	b.w	12dea <__ieee754_pow+0x5a>
   135fa:	f1b9 0f00 	cmp.w	r9, #0
   135fe:	dad1      	bge.n	135a4 <__ieee754_pow+0x814>
   13600:	e9dd 3400 	ldrd	r3, r4, [sp]
   13604:	4618      	mov	r0, r3
   13606:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1360a:	f7ff bbee 	b.w	12dea <__ieee754_pow+0x5a>
   1360e:	bf00      	nop
   13610:	00000000 	.word	0x00000000
   13614:	bff00000 	.word	0xbff00000
   13618:	652b82fe 	.word	0x652b82fe
   1361c:	3c971547 	.word	0x3c971547
   13620:	00000000 	.word	0x00000000
   13624:	3fe62e43 	.word	0x3fe62e43
   13628:	fefa39ef 	.word	0xfefa39ef
   1362c:	3fe62e42 	.word	0x3fe62e42
   13630:	0ca86c39 	.word	0x0ca86c39
   13634:	be205c61 	.word	0xbe205c61
   13638:	72bea4d0 	.word	0x72bea4d0
   1363c:	3e663769 	.word	0x3e663769
   13640:	c5d26bf1 	.word	0xc5d26bf1
   13644:	3ebbbd41 	.word	0x3ebbbd41
   13648:	af25de2c 	.word	0xaf25de2c
   1364c:	3f11566a 	.word	0x3f11566a
   13650:	16bebd93 	.word	0x16bebd93
   13654:	3f66c16c 	.word	0x3f66c16c
   13658:	5555553e 	.word	0x5555553e
   1365c:	3fc55555 	.word	0x3fc55555
   13660:	00000000 	.word	0x00000000
   13664:	3ff00000 	.word	0x3ff00000
   13668:	c2f8f359 	.word	0xc2f8f359
   1366c:	01a56e1f 	.word	0x01a56e1f
   13670:	408fffff 	.word	0x408fffff
   13674:	bf700000 	.word	0xbf700000
   13678:	000fffff 	.word	0x000fffff
   1367c:	3ff00000 	.word	0x3ff00000
   13680:	c0100000 	.word	0xc0100000
   13684:	4090cbff 	.word	0x4090cbff
   13688:	3f6f3400 	.word	0x3f6f3400
   1368c:	4b7c      	ldr	r3, [pc, #496]	; (13880 <__ieee754_pow+0xaf0>)
   1368e:	429e      	cmp	r6, r3
   13690:	dd84      	ble.n	1359c <__ieee754_pow+0x80c>
   13692:	4b7c      	ldr	r3, [pc, #496]	; (13884 <__ieee754_pow+0xaf4>)
   13694:	429e      	cmp	r6, r3
   13696:	f73f abec 	bgt.w	12e72 <__ieee754_pow+0xe2>
   1369a:	2200      	movs	r2, #0
   1369c:	4b79      	ldr	r3, [pc, #484]	; (13884 <__ieee754_pow+0xaf4>)
   1369e:	f7f9 fb4d 	bl	cd3c <__aeabi_dsub>
   136a2:	4604      	mov	r4, r0
   136a4:	460d      	mov	r5, r1
   136a6:	a362      	add	r3, pc, #392	; (adr r3, 13830 <__ieee754_pow+0xaa0>)
   136a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   136ac:	f7f9 fcfe 	bl	d0ac <__aeabi_dmul>
   136b0:	4680      	mov	r8, r0
   136b2:	4689      	mov	r9, r1
   136b4:	4620      	mov	r0, r4
   136b6:	4629      	mov	r1, r5
   136b8:	a35f      	add	r3, pc, #380	; (adr r3, 13838 <__ieee754_pow+0xaa8>)
   136ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   136be:	f7f9 fcf5 	bl	d0ac <__aeabi_dmul>
   136c2:	2200      	movs	r2, #0
   136c4:	4b70      	ldr	r3, [pc, #448]	; (13888 <__ieee754_pow+0xaf8>)
   136c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   136ca:	4620      	mov	r0, r4
   136cc:	4629      	mov	r1, r5
   136ce:	f7f9 fced 	bl	d0ac <__aeabi_dmul>
   136d2:	4602      	mov	r2, r0
   136d4:	460b      	mov	r3, r1
   136d6:	a15a      	add	r1, pc, #360	; (adr r1, 13840 <__ieee754_pow+0xab0>)
   136d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   136dc:	f7f9 fb2e 	bl	cd3c <__aeabi_dsub>
   136e0:	4622      	mov	r2, r4
   136e2:	462b      	mov	r3, r5
   136e4:	f7f9 fce2 	bl	d0ac <__aeabi_dmul>
   136e8:	4602      	mov	r2, r0
   136ea:	460b      	mov	r3, r1
   136ec:	2000      	movs	r0, #0
   136ee:	4967      	ldr	r1, [pc, #412]	; (1388c <__ieee754_pow+0xafc>)
   136f0:	f7f9 fb24 	bl	cd3c <__aeabi_dsub>
   136f4:	4606      	mov	r6, r0
   136f6:	460f      	mov	r7, r1
   136f8:	4622      	mov	r2, r4
   136fa:	462b      	mov	r3, r5
   136fc:	4620      	mov	r0, r4
   136fe:	4629      	mov	r1, r5
   13700:	f7f9 fcd4 	bl	d0ac <__aeabi_dmul>
   13704:	4602      	mov	r2, r0
   13706:	460b      	mov	r3, r1
   13708:	4630      	mov	r0, r6
   1370a:	4639      	mov	r1, r7
   1370c:	f7f9 fcce 	bl	d0ac <__aeabi_dmul>
   13710:	a34d      	add	r3, pc, #308	; (adr r3, 13848 <__ieee754_pow+0xab8>)
   13712:	e9d3 2300 	ldrd	r2, r3, [r3]
   13716:	f7f9 fcc9 	bl	d0ac <__aeabi_dmul>
   1371a:	4602      	mov	r2, r0
   1371c:	460b      	mov	r3, r1
   1371e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13722:	f7f9 fb0b 	bl	cd3c <__aeabi_dsub>
   13726:	4602      	mov	r2, r0
   13728:	460b      	mov	r3, r1
   1372a:	4606      	mov	r6, r0
   1372c:	460f      	mov	r7, r1
   1372e:	4640      	mov	r0, r8
   13730:	4649      	mov	r1, r9
   13732:	f7f9 fb05 	bl	cd40 <__adddf3>
   13736:	2000      	movs	r0, #0
   13738:	460d      	mov	r5, r1
   1373a:	4642      	mov	r2, r8
   1373c:	4604      	mov	r4, r0
   1373e:	464b      	mov	r3, r9
   13740:	e5ae      	b.n	132a0 <__ieee754_pow+0x510>
   13742:	ed9f 7b43 	vldr	d7, [pc, #268]	; 13850 <__ieee754_pow+0xac0>
   13746:	2500      	movs	r5, #0
   13748:	ed8d 7b08 	vstr	d7, [sp, #32]
   1374c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13750:	ed9f 7b41 	vldr	d7, [pc, #260]	; 13858 <__ieee754_pow+0xac8>
   13754:	ed8d 7b06 	vstr	d7, [sp, #24]
   13758:	e41d      	b.n	12f96 <__ieee754_pow+0x206>
   1375a:	2500      	movs	r5, #0
   1375c:	f7ff bbf8 	b.w	12f50 <__ieee754_pow+0x1c0>
   13760:	4622      	mov	r2, r4
   13762:	462b      	mov	r3, r5
   13764:	2000      	movs	r0, #0
   13766:	4947      	ldr	r1, [pc, #284]	; (13884 <__ieee754_pow+0xaf4>)
   13768:	f7f9 fdca 	bl	d300 <__aeabi_ddiv>
   1376c:	f7ff bb3d 	b.w	12dea <__ieee754_pow+0x5a>
   13770:	4622      	mov	r2, r4
   13772:	462b      	mov	r3, r5
   13774:	4620      	mov	r0, r4
   13776:	4629      	mov	r1, r5
   13778:	f7f9 fc98 	bl	d0ac <__aeabi_dmul>
   1377c:	f7ff bb35 	b.w	12dea <__ieee754_pow+0x5a>
   13780:	f1bc 0f00 	cmp.w	ip, #0
   13784:	f47f aee1 	bne.w	1354a <__ieee754_pow+0x7ba>
   13788:	f1c3 0314 	rsb	r3, r3, #20
   1378c:	fa48 f203 	asr.w	r2, r8, r3
   13790:	fa02 f303 	lsl.w	r3, r2, r3
   13794:	4543      	cmp	r3, r8
   13796:	d040      	beq.n	1381a <__ieee754_pow+0xa8a>
   13798:	46e3      	mov	fp, ip
   1379a:	f7ff bb39 	b.w	12e10 <__ieee754_pow+0x80>
   1379e:	4a3b      	ldr	r2, [pc, #236]	; (1388c <__ieee754_pow+0xafc>)
   137a0:	4293      	cmp	r3, r2
   137a2:	dc40      	bgt.n	13826 <__ieee754_pow+0xa96>
   137a4:	e9dd 2300 	ldrd	r2, r3, [sp]
   137a8:	4693      	mov	fp, r2
   137aa:	4692      	mov	sl, r2
   137ac:	e616      	b.n	133dc <__ieee754_pow+0x64c>
   137ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   137b2:	a32b      	add	r3, pc, #172	; (adr r3, 13860 <__ieee754_pow+0xad0>)
   137b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   137b8:	f7f9 fc78 	bl	d0ac <__aeabi_dmul>
   137bc:	a328      	add	r3, pc, #160	; (adr r3, 13860 <__ieee754_pow+0xad0>)
   137be:	e9d3 2300 	ldrd	r2, r3, [r3]
   137c2:	f7f9 fc73 	bl	d0ac <__aeabi_dmul>
   137c6:	f7ff bb10 	b.w	12dea <__ieee754_pow+0x5a>
   137ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 13868 <__ieee754_pow+0xad8>
   137ce:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   137d2:	ed8d 7b08 	vstr	d7, [sp, #32]
   137d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13870 <__ieee754_pow+0xae0>
   137da:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   137de:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13878 <__ieee754_pow+0xae8>
   137e2:	ed8d 7b06 	vstr	d7, [sp, #24]
   137e6:	f7ff bbd6 	b.w	12f96 <__ieee754_pow+0x206>
   137ea:	f1bb 0f01 	cmp.w	fp, #1
   137ee:	f47f aafc 	bne.w	12dea <__ieee754_pow+0x5a>
   137f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   137f6:	4619      	mov	r1, r3
   137f8:	f7ff baf7 	b.w	12dea <__ieee754_pow+0x5a>
   137fc:	4650      	mov	r0, sl
   137fe:	ec43 2b10 	vmov	d0, r2, r3
   13802:	f000 f84d 	bl	138a0 <scalbn>
   13806:	ec51 0b10 	vmov	r0, r1, d0
   1380a:	e699      	b.n	13540 <__ieee754_pow+0x7b0>
   1380c:	ec45 4b10 	vmov	d0, r4, r5
   13810:	b013      	add	sp, #76	; 0x4c
   13812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13816:	f017 bc33 	b.w	2b080 <__ieee754_sqrt>
   1381a:	f002 0201 	and.w	r2, r2, #1
   1381e:	f1c2 0b02 	rsb	fp, r2, #2
   13822:	f7ff baf5 	b.w	12e10 <__ieee754_pow+0x80>
   13826:	151b      	asrs	r3, r3, #20
   13828:	e5a8      	b.n	1337c <__ieee754_pow+0x5ec>
   1382a:	bf00      	nop
   1382c:	f3af 8000 	nop.w
   13830:	60000000 	.word	0x60000000
   13834:	3ff71547 	.word	0x3ff71547
   13838:	f85ddf44 	.word	0xf85ddf44
   1383c:	3e54ae0b 	.word	0x3e54ae0b
   13840:	55555555 	.word	0x55555555
   13844:	3fd55555 	.word	0x3fd55555
   13848:	652b82fe 	.word	0x652b82fe
   1384c:	3ff71547 	.word	0x3ff71547
	...
   1385c:	3ff00000 	.word	0x3ff00000
   13860:	8800759c 	.word	0x8800759c
   13864:	7e37e43c 	.word	0x7e37e43c
   13868:	40000000 	.word	0x40000000
   1386c:	3fe2b803 	.word	0x3fe2b803
   13870:	43cfd006 	.word	0x43cfd006
   13874:	3e4cfdeb 	.word	0x3e4cfdeb
   13878:	00000000 	.word	0x00000000
   1387c:	3ff80000 	.word	0x3ff80000
   13880:	3feffffe 	.word	0x3feffffe
   13884:	3ff00000 	.word	0x3ff00000
   13888:	3fd00000 	.word	0x3fd00000
   1388c:	3fe00000 	.word	0x3fe00000

00013890 <nan>:
   13890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 13898 <nan+0x8>
   13894:	4770      	bx	lr
   13896:	bf00      	nop
   13898:	00000000 	.word	0x00000000
   1389c:	7ff80000 	.word	0x7ff80000

000138a0 <scalbn>:
   138a0:	b538      	push	{r3, r4, r5, lr}
   138a2:	ec53 2b10 	vmov	r2, r3, d0
   138a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   138aa:	461c      	mov	r4, r3
   138ac:	4605      	mov	r5, r0
   138ae:	bb81      	cbnz	r1, 13912 <scalbn+0x72>
   138b0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   138b4:	ee10 1a10 	vmov	r1, s0
   138b8:	4321      	orrs	r1, r4
   138ba:	d029      	beq.n	13910 <scalbn+0x70>
   138bc:	4c3c      	ldr	r4, [pc, #240]	; (139b0 <scalbn+0x110>)
   138be:	4619      	mov	r1, r3
   138c0:	2200      	movs	r2, #0
   138c2:	4b3c      	ldr	r3, [pc, #240]	; (139b4 <scalbn+0x114>)
   138c4:	ee10 0a10 	vmov	r0, s0
   138c8:	f7f9 fbf0 	bl	d0ac <__aeabi_dmul>
   138cc:	42a5      	cmp	r5, r4
   138ce:	4602      	mov	r2, r0
   138d0:	460b      	mov	r3, r1
   138d2:	db16      	blt.n	13902 <scalbn+0x62>
   138d4:	460c      	mov	r4, r1
   138d6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   138da:	3936      	subs	r1, #54	; 0x36
   138dc:	4429      	add	r1, r5
   138de:	f240 70fe 	movw	r0, #2046	; 0x7fe
   138e2:	4281      	cmp	r1, r0
   138e4:	dc21      	bgt.n	1392a <scalbn+0x8a>
   138e6:	2900      	cmp	r1, #0
   138e8:	dc45      	bgt.n	13976 <scalbn+0xd6>
   138ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
   138ee:	da34      	bge.n	1395a <scalbn+0xba>
   138f0:	f24c 3150 	movw	r1, #50000	; 0xc350
   138f4:	428d      	cmp	r5, r1
   138f6:	dc18      	bgt.n	1392a <scalbn+0x8a>
   138f8:	2b00      	cmp	r3, #0
   138fa:	a125      	add	r1, pc, #148	; (adr r1, 13990 <scalbn+0xf0>)
   138fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   13900:	db40      	blt.n	13984 <scalbn+0xe4>
   13902:	a323      	add	r3, pc, #140	; (adr r3, 13990 <scalbn+0xf0>)
   13904:	e9d3 2300 	ldrd	r2, r3, [r3]
   13908:	f7f9 fbd0 	bl	d0ac <__aeabi_dmul>
   1390c:	ec41 0b10 	vmov	d0, r0, r1
   13910:	bd38      	pop	{r3, r4, r5, pc}
   13912:	f240 70ff 	movw	r0, #2047	; 0x7ff
   13916:	4281      	cmp	r1, r0
   13918:	d1e0      	bne.n	138dc <scalbn+0x3c>
   1391a:	ee10 0a10 	vmov	r0, s0
   1391e:	4619      	mov	r1, r3
   13920:	f7f9 fa0e 	bl	cd40 <__adddf3>
   13924:	ec41 0b10 	vmov	d0, r0, r1
   13928:	bd38      	pop	{r3, r4, r5, pc}
   1392a:	2b00      	cmp	r3, #0
   1392c:	a11a      	add	r1, pc, #104	; (adr r1, 13998 <scalbn+0xf8>)
   1392e:	e9d1 0100 	ldrd	r0, r1, [r1]
   13932:	db07      	blt.n	13944 <scalbn+0xa4>
   13934:	a318      	add	r3, pc, #96	; (adr r3, 13998 <scalbn+0xf8>)
   13936:	e9d3 2300 	ldrd	r2, r3, [r3]
   1393a:	f7f9 fbb7 	bl	d0ac <__aeabi_dmul>
   1393e:	ec41 0b10 	vmov	d0, r0, r1
   13942:	bd38      	pop	{r3, r4, r5, pc}
   13944:	a116      	add	r1, pc, #88	; (adr r1, 139a0 <scalbn+0x100>)
   13946:	e9d1 0100 	ldrd	r0, r1, [r1]
   1394a:	a313      	add	r3, pc, #76	; (adr r3, 13998 <scalbn+0xf8>)
   1394c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13950:	f7f9 fbac 	bl	d0ac <__aeabi_dmul>
   13954:	ec41 0b10 	vmov	d0, r0, r1
   13958:	e7f3      	b.n	13942 <scalbn+0xa2>
   1395a:	4817      	ldr	r0, [pc, #92]	; (139b8 <scalbn+0x118>)
   1395c:	3136      	adds	r1, #54	; 0x36
   1395e:	4020      	ands	r0, r4
   13960:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   13964:	4610      	mov	r0, r2
   13966:	2200      	movs	r2, #0
   13968:	4619      	mov	r1, r3
   1396a:	4b14      	ldr	r3, [pc, #80]	; (139bc <scalbn+0x11c>)
   1396c:	f7f9 fb9e 	bl	d0ac <__aeabi_dmul>
   13970:	ec41 0b10 	vmov	d0, r0, r1
   13974:	bd38      	pop	{r3, r4, r5, pc}
   13976:	4810      	ldr	r0, [pc, #64]	; (139b8 <scalbn+0x118>)
   13978:	4020      	ands	r0, r4
   1397a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1397e:	ec43 2b10 	vmov	d0, r2, r3
   13982:	bd38      	pop	{r3, r4, r5, pc}
   13984:	a108      	add	r1, pc, #32	; (adr r1, 139a8 <scalbn+0x108>)
   13986:	e9d1 0100 	ldrd	r0, r1, [r1]
   1398a:	e7ba      	b.n	13902 <scalbn+0x62>
   1398c:	f3af 8000 	nop.w
   13990:	c2f8f359 	.word	0xc2f8f359
   13994:	01a56e1f 	.word	0x01a56e1f
   13998:	8800759c 	.word	0x8800759c
   1399c:	7e37e43c 	.word	0x7e37e43c
   139a0:	8800759c 	.word	0x8800759c
   139a4:	fe37e43c 	.word	0xfe37e43c
   139a8:	c2f8f359 	.word	0xc2f8f359
   139ac:	81a56e1f 	.word	0x81a56e1f
   139b0:	ffff3cb0 	.word	0xffff3cb0
   139b4:	43500000 	.word	0x43500000
   139b8:	800fffff 	.word	0x800fffff
   139bc:	3c900000 	.word	0x3c900000

000139c0 <_dtoa_r>:
   139c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c4:	6a47      	ldr	r7, [r0, #36]	; 0x24
   139c6:	b099      	sub	sp, #100	; 0x64
   139c8:	4683      	mov	fp, r0
   139ca:	9108      	str	r1, [sp, #32]
   139cc:	920d      	str	r2, [sp, #52]	; 0x34
   139ce:	9314      	str	r3, [sp, #80]	; 0x50
   139d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
   139d2:	ec55 4b10 	vmov	r4, r5, d0
   139d6:	e9cd 4500 	strd	r4, r5, [sp]
   139da:	b947      	cbnz	r7, 139ee <_dtoa_r+0x2e>
   139dc:	2010      	movs	r0, #16
   139de:	f018 fff1 	bl	2c9c4 <malloc>
   139e2:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   139e6:	6007      	str	r7, [r0, #0]
   139e8:	60c7      	str	r7, [r0, #12]
   139ea:	e9c0 7701 	strd	r7, r7, [r0, #4]
   139ee:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   139f2:	6819      	ldr	r1, [r3, #0]
   139f4:	b159      	cbz	r1, 13a0e <_dtoa_r+0x4e>
   139f6:	685a      	ldr	r2, [r3, #4]
   139f8:	2301      	movs	r3, #1
   139fa:	4658      	mov	r0, fp
   139fc:	4093      	lsls	r3, r2
   139fe:	604a      	str	r2, [r1, #4]
   13a00:	608b      	str	r3, [r1, #8]
   13a02:	f020 f937 	bl	33c74 <_Bfree>
   13a06:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13a0a:	2200      	movs	r2, #0
   13a0c:	601a      	str	r2, [r3, #0]
   13a0e:	1e2b      	subs	r3, r5, #0
   13a10:	bfb7      	itett	lt
   13a12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   13a16:	2300      	movge	r3, #0
   13a18:	2201      	movlt	r2, #1
   13a1a:	9301      	strlt	r3, [sp, #4]
   13a1c:	bfa8      	it	ge
   13a1e:	6033      	strge	r3, [r6, #0]
   13a20:	9c01      	ldr	r4, [sp, #4]
   13a22:	4bb1      	ldr	r3, [pc, #708]	; (13ce8 <_dtoa_r+0x328>)
   13a24:	bfb8      	it	lt
   13a26:	6032      	strlt	r2, [r6, #0]
   13a28:	43a3      	bics	r3, r4
   13a2a:	d11a      	bne.n	13a62 <_dtoa_r+0xa2>
   13a2c:	f242 730f 	movw	r3, #9999	; 0x270f
   13a30:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a32:	6013      	str	r3, [r2, #0]
   13a34:	f3c4 0313 	ubfx	r3, r4, #0, #20
   13a38:	9a00      	ldr	r2, [sp, #0]
   13a3a:	4313      	orrs	r3, r2
   13a3c:	f000 8547 	beq.w	144ce <_dtoa_r+0xb0e>
   13a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13a42:	b953      	cbnz	r3, 13a5a <_dtoa_r+0x9a>
   13a44:	4ba9      	ldr	r3, [pc, #676]	; (13cec <_dtoa_r+0x32c>)
   13a46:	e023      	b.n	13a90 <_dtoa_r+0xd0>
   13a48:	4ba9      	ldr	r3, [pc, #676]	; (13cf0 <_dtoa_r+0x330>)
   13a4a:	9303      	str	r3, [sp, #12]
   13a4c:	3308      	adds	r3, #8
   13a4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13a50:	6013      	str	r3, [r2, #0]
   13a52:	9803      	ldr	r0, [sp, #12]
   13a54:	b019      	add	sp, #100	; 0x64
   13a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5a:	4ba4      	ldr	r3, [pc, #656]	; (13cec <_dtoa_r+0x32c>)
   13a5c:	9303      	str	r3, [sp, #12]
   13a5e:	3303      	adds	r3, #3
   13a60:	e7f5      	b.n	13a4e <_dtoa_r+0x8e>
   13a62:	ed9d 7b00 	vldr	d7, [sp]
   13a66:	2200      	movs	r2, #0
   13a68:	2300      	movs	r3, #0
   13a6a:	ec51 0b17 	vmov	r0, r1, d7
   13a6e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   13a72:	f7f9 fd83 	bl	d57c <__aeabi_dcmpeq>
   13a76:	4607      	mov	r7, r0
   13a78:	b160      	cbz	r0, 13a94 <_dtoa_r+0xd4>
   13a7a:	2301      	movs	r3, #1
   13a7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a7e:	6013      	str	r3, [r2, #0]
   13a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13a82:	2b00      	cmp	r3, #0
   13a84:	f000 8520 	beq.w	144c8 <_dtoa_r+0xb08>
   13a88:	4b9a      	ldr	r3, [pc, #616]	; (13cf4 <_dtoa_r+0x334>)
   13a8a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13a8c:	6013      	str	r3, [r2, #0]
   13a8e:	3b01      	subs	r3, #1
   13a90:	9303      	str	r3, [sp, #12]
   13a92:	e7de      	b.n	13a52 <_dtoa_r+0x92>
   13a94:	f3c4 560a 	ubfx	r6, r4, #20, #11
   13a98:	aa16      	add	r2, sp, #88	; 0x58
   13a9a:	a917      	add	r1, sp, #92	; 0x5c
   13a9c:	4658      	mov	r0, fp
   13a9e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   13aa2:	f020 faf0 	bl	34086 <__d2b>
   13aa6:	4680      	mov	r8, r0
   13aa8:	2e00      	cmp	r6, #0
   13aaa:	d07d      	beq.n	13ba8 <_dtoa_r+0x1e8>
   13aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13aae:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   13ab2:	9715      	str	r7, [sp, #84]	; 0x54
   13ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   13ab8:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   13abc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   13ac0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   13ac4:	2200      	movs	r2, #0
   13ac6:	4b8c      	ldr	r3, [pc, #560]	; (13cf8 <_dtoa_r+0x338>)
   13ac8:	4620      	mov	r0, r4
   13aca:	4629      	mov	r1, r5
   13acc:	f7f9 f936 	bl	cd3c <__aeabi_dsub>
   13ad0:	a37f      	add	r3, pc, #508	; (adr r3, 13cd0 <_dtoa_r+0x310>)
   13ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ad6:	f7f9 fae9 	bl	d0ac <__aeabi_dmul>
   13ada:	a37f      	add	r3, pc, #508	; (adr r3, 13cd8 <_dtoa_r+0x318>)
   13adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ae0:	f7f9 f92e 	bl	cd40 <__adddf3>
   13ae4:	4604      	mov	r4, r0
   13ae6:	460d      	mov	r5, r1
   13ae8:	4630      	mov	r0, r6
   13aea:	f7f9 fa75 	bl	cfd8 <__aeabi_i2d>
   13aee:	a37c      	add	r3, pc, #496	; (adr r3, 13ce0 <_dtoa_r+0x320>)
   13af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13af4:	f7f9 fada 	bl	d0ac <__aeabi_dmul>
   13af8:	4602      	mov	r2, r0
   13afa:	460b      	mov	r3, r1
   13afc:	4620      	mov	r0, r4
   13afe:	4629      	mov	r1, r5
   13b00:	f7f9 f91e 	bl	cd40 <__adddf3>
   13b04:	4604      	mov	r4, r0
   13b06:	460d      	mov	r5, r1
   13b08:	f7f9 fd6a 	bl	d5e0 <__aeabi_d2iz>
   13b0c:	2200      	movs	r2, #0
   13b0e:	4682      	mov	sl, r0
   13b10:	2300      	movs	r3, #0
   13b12:	4620      	mov	r0, r4
   13b14:	4629      	mov	r1, r5
   13b16:	f7f9 fd3b 	bl	d590 <__aeabi_dcmplt>
   13b1a:	b148      	cbz	r0, 13b30 <_dtoa_r+0x170>
   13b1c:	4650      	mov	r0, sl
   13b1e:	f7f9 fa5b 	bl	cfd8 <__aeabi_i2d>
   13b22:	4622      	mov	r2, r4
   13b24:	462b      	mov	r3, r5
   13b26:	f7f9 fd29 	bl	d57c <__aeabi_dcmpeq>
   13b2a:	b908      	cbnz	r0, 13b30 <_dtoa_r+0x170>
   13b2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   13b30:	f1ba 0f16 	cmp.w	sl, #22
   13b34:	d857      	bhi.n	13be6 <_dtoa_r+0x226>
   13b36:	4b71      	ldr	r3, [pc, #452]	; (13cfc <_dtoa_r+0x33c>)
   13b38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   13b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b44:	f7f9 fd24 	bl	d590 <__aeabi_dcmplt>
   13b48:	2800      	cmp	r0, #0
   13b4a:	d04e      	beq.n	13bea <_dtoa_r+0x22a>
   13b4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   13b50:	2300      	movs	r3, #0
   13b52:	9311      	str	r3, [sp, #68]	; 0x44
   13b54:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b56:	1b9e      	subs	r6, r3, r6
   13b58:	1e73      	subs	r3, r6, #1
   13b5a:	9307      	str	r3, [sp, #28]
   13b5c:	bf49      	itett	mi
   13b5e:	f1c6 0301 	rsbmi	r3, r6, #1
   13b62:	2300      	movpl	r3, #0
   13b64:	9306      	strmi	r3, [sp, #24]
   13b66:	2300      	movmi	r3, #0
   13b68:	bf54      	ite	pl
   13b6a:	9306      	strpl	r3, [sp, #24]
   13b6c:	9307      	strmi	r3, [sp, #28]
   13b6e:	f1ba 0f00 	cmp.w	sl, #0
   13b72:	db3c      	blt.n	13bee <_dtoa_r+0x22e>
   13b74:	9b07      	ldr	r3, [sp, #28]
   13b76:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   13b7a:	4453      	add	r3, sl
   13b7c:	9307      	str	r3, [sp, #28]
   13b7e:	2300      	movs	r3, #0
   13b80:	9309      	str	r3, [sp, #36]	; 0x24
   13b82:	9b08      	ldr	r3, [sp, #32]
   13b84:	2b09      	cmp	r3, #9
   13b86:	f200 808d 	bhi.w	13ca4 <_dtoa_r+0x2e4>
   13b8a:	2b05      	cmp	r3, #5
   13b8c:	bfc5      	ittet	gt
   13b8e:	3b04      	subgt	r3, #4
   13b90:	2400      	movgt	r4, #0
   13b92:	2401      	movle	r4, #1
   13b94:	9308      	strgt	r3, [sp, #32]
   13b96:	9b08      	ldr	r3, [sp, #32]
   13b98:	3b02      	subs	r3, #2
   13b9a:	2b03      	cmp	r3, #3
   13b9c:	f200 808d 	bhi.w	13cba <_dtoa_r+0x2fa>
   13ba0:	e8df f003 	tbb	[pc, r3]
   13ba4:	7e3a3c2f 	.word	0x7e3a3c2f
   13ba8:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   13bac:	441e      	add	r6, r3
   13bae:	f206 4032 	addw	r0, r6, #1074	; 0x432
   13bb2:	2820      	cmp	r0, #32
   13bb4:	dd11      	ble.n	13bda <_dtoa_r+0x21a>
   13bb6:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   13bba:	9b00      	ldr	r3, [sp, #0]
   13bbc:	4084      	lsls	r4, r0
   13bbe:	f206 4012 	addw	r0, r6, #1042	; 0x412
   13bc2:	fa23 f000 	lsr.w	r0, r3, r0
   13bc6:	4320      	orrs	r0, r4
   13bc8:	f7f9 f9f6 	bl	cfb8 <__aeabi_ui2d>
   13bcc:	2301      	movs	r3, #1
   13bce:	4604      	mov	r4, r0
   13bd0:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   13bd4:	3e01      	subs	r6, #1
   13bd6:	9315      	str	r3, [sp, #84]	; 0x54
   13bd8:	e774      	b.n	13ac4 <_dtoa_r+0x104>
   13bda:	f1c0 0020 	rsb	r0, r0, #32
   13bde:	9b00      	ldr	r3, [sp, #0]
   13be0:	fa03 f000 	lsl.w	r0, r3, r0
   13be4:	e7f0      	b.n	13bc8 <_dtoa_r+0x208>
   13be6:	2301      	movs	r3, #1
   13be8:	e7b3      	b.n	13b52 <_dtoa_r+0x192>
   13bea:	9011      	str	r0, [sp, #68]	; 0x44
   13bec:	e7b2      	b.n	13b54 <_dtoa_r+0x194>
   13bee:	9b06      	ldr	r3, [sp, #24]
   13bf0:	eba3 030a 	sub.w	r3, r3, sl
   13bf4:	9306      	str	r3, [sp, #24]
   13bf6:	f1ca 0300 	rsb	r3, sl, #0
   13bfa:	9309      	str	r3, [sp, #36]	; 0x24
   13bfc:	2300      	movs	r3, #0
   13bfe:	9310      	str	r3, [sp, #64]	; 0x40
   13c00:	e7bf      	b.n	13b82 <_dtoa_r+0x1c2>
   13c02:	2300      	movs	r3, #0
   13c04:	930c      	str	r3, [sp, #48]	; 0x30
   13c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c08:	2b00      	cmp	r3, #0
   13c0a:	dc59      	bgt.n	13cc0 <_dtoa_r+0x300>
   13c0c:	2301      	movs	r3, #1
   13c0e:	4699      	mov	r9, r3
   13c10:	461a      	mov	r2, r3
   13c12:	9304      	str	r3, [sp, #16]
   13c14:	920d      	str	r2, [sp, #52]	; 0x34
   13c16:	e00c      	b.n	13c32 <_dtoa_r+0x272>
   13c18:	2301      	movs	r3, #1
   13c1a:	e7f3      	b.n	13c04 <_dtoa_r+0x244>
   13c1c:	2300      	movs	r3, #0
   13c1e:	930c      	str	r3, [sp, #48]	; 0x30
   13c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c22:	4453      	add	r3, sl
   13c24:	f103 0901 	add.w	r9, r3, #1
   13c28:	9304      	str	r3, [sp, #16]
   13c2a:	464b      	mov	r3, r9
   13c2c:	2b01      	cmp	r3, #1
   13c2e:	bfb8      	it	lt
   13c30:	2301      	movlt	r3, #1
   13c32:	2200      	movs	r2, #0
   13c34:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   13c38:	606a      	str	r2, [r5, #4]
   13c3a:	2204      	movs	r2, #4
   13c3c:	f102 0014 	add.w	r0, r2, #20
   13c40:	6869      	ldr	r1, [r5, #4]
   13c42:	4298      	cmp	r0, r3
   13c44:	d940      	bls.n	13cc8 <_dtoa_r+0x308>
   13c46:	4658      	mov	r0, fp
   13c48:	f01f ffe0 	bl	33c0c <_Balloc>
   13c4c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13c50:	6028      	str	r0, [r5, #0]
   13c52:	f1b9 0f0e 	cmp.w	r9, #14
   13c56:	681b      	ldr	r3, [r3, #0]
   13c58:	9303      	str	r3, [sp, #12]
   13c5a:	f200 80d4 	bhi.w	13e06 <_dtoa_r+0x446>
   13c5e:	2c00      	cmp	r4, #0
   13c60:	f000 80d1 	beq.w	13e06 <_dtoa_r+0x446>
   13c64:	f1ba 0f00 	cmp.w	sl, #0
   13c68:	dd66      	ble.n	13d38 <_dtoa_r+0x378>
   13c6a:	4a24      	ldr	r2, [pc, #144]	; (13cfc <_dtoa_r+0x33c>)
   13c6c:	f00a 030f 	and.w	r3, sl, #15
   13c70:	ea4f 142a 	mov.w	r4, sl, asr #4
   13c74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13c78:	06e2      	lsls	r2, r4, #27
   13c7a:	ed93 7b00 	vldr	d7, [r3]
   13c7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   13c82:	d557      	bpl.n	13d34 <_dtoa_r+0x374>
   13c84:	4b1e      	ldr	r3, [pc, #120]	; (13d00 <_dtoa_r+0x340>)
   13c86:	f004 040f 	and.w	r4, r4, #15
   13c8a:	2603      	movs	r6, #3
   13c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   13c90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13c94:	f7f9 fb34 	bl	d300 <__aeabi_ddiv>
   13c98:	e9cd 0100 	strd	r0, r1, [sp]
   13c9c:	4d18      	ldr	r5, [pc, #96]	; (13d00 <_dtoa_r+0x340>)
   13c9e:	e03e      	b.n	13d1e <_dtoa_r+0x35e>
   13ca0:	2301      	movs	r3, #1
   13ca2:	e7bc      	b.n	13c1e <_dtoa_r+0x25e>
   13ca4:	2401      	movs	r4, #1
   13ca6:	2300      	movs	r3, #0
   13ca8:	940c      	str	r4, [sp, #48]	; 0x30
   13caa:	9308      	str	r3, [sp, #32]
   13cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cb0:	2200      	movs	r2, #0
   13cb2:	9304      	str	r3, [sp, #16]
   13cb4:	4699      	mov	r9, r3
   13cb6:	2312      	movs	r3, #18
   13cb8:	e7ac      	b.n	13c14 <_dtoa_r+0x254>
   13cba:	2301      	movs	r3, #1
   13cbc:	930c      	str	r3, [sp, #48]	; 0x30
   13cbe:	e7f5      	b.n	13cac <_dtoa_r+0x2ec>
   13cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13cc2:	9304      	str	r3, [sp, #16]
   13cc4:	4699      	mov	r9, r3
   13cc6:	e7b4      	b.n	13c32 <_dtoa_r+0x272>
   13cc8:	3101      	adds	r1, #1
   13cca:	0052      	lsls	r2, r2, #1
   13ccc:	6069      	str	r1, [r5, #4]
   13cce:	e7b5      	b.n	13c3c <_dtoa_r+0x27c>
   13cd0:	636f4361 	.word	0x636f4361
   13cd4:	3fd287a7 	.word	0x3fd287a7
   13cd8:	8b60c8b3 	.word	0x8b60c8b3
   13cdc:	3fc68a28 	.word	0x3fc68a28
   13ce0:	509f79fb 	.word	0x509f79fb
   13ce4:	3fd34413 	.word	0x3fd34413
   13ce8:	7ff00000 	.word	0x7ff00000
   13cec:	00037882 	.word	0x00037882
   13cf0:	00037879 	.word	0x00037879
   13cf4:	00037309 	.word	0x00037309
   13cf8:	3ff80000 	.word	0x3ff80000
   13cfc:	000346a0 	.word	0x000346a0
   13d00:	00034678 	.word	0x00034678
   13d04:	07e3      	lsls	r3, r4, #31
   13d06:	d508      	bpl.n	13d1a <_dtoa_r+0x35a>
   13d08:	3601      	adds	r6, #1
   13d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13d0e:	e9d5 2300 	ldrd	r2, r3, [r5]
   13d12:	f7f9 f9cb 	bl	d0ac <__aeabi_dmul>
   13d16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   13d1a:	1064      	asrs	r4, r4, #1
   13d1c:	3508      	adds	r5, #8
   13d1e:	2c00      	cmp	r4, #0
   13d20:	d1f0      	bne.n	13d04 <_dtoa_r+0x344>
   13d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   13d26:	e9dd 0100 	ldrd	r0, r1, [sp]
   13d2a:	f7f9 fae9 	bl	d300 <__aeabi_ddiv>
   13d2e:	e9cd 0100 	strd	r0, r1, [sp]
   13d32:	e01a      	b.n	13d6a <_dtoa_r+0x3aa>
   13d34:	2602      	movs	r6, #2
   13d36:	e7b1      	b.n	13c9c <_dtoa_r+0x2dc>
   13d38:	f000 809f 	beq.w	13e7a <_dtoa_r+0x4ba>
   13d3c:	f1ca 0400 	rsb	r4, sl, #0
   13d40:	4b9e      	ldr	r3, [pc, #632]	; (13fbc <_dtoa_r+0x5fc>)
   13d42:	4d9f      	ldr	r5, [pc, #636]	; (13fc0 <_dtoa_r+0x600>)
   13d44:	2602      	movs	r6, #2
   13d46:	f004 020f 	and.w	r2, r4, #15
   13d4a:	1124      	asrs	r4, r4, #4
   13d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   13d50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13d54:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d58:	f7f9 f9a8 	bl	d0ac <__aeabi_dmul>
   13d5c:	2300      	movs	r3, #0
   13d5e:	e9cd 0100 	strd	r0, r1, [sp]
   13d62:	2c00      	cmp	r4, #0
   13d64:	d17e      	bne.n	13e64 <_dtoa_r+0x4a4>
   13d66:	2b00      	cmp	r3, #0
   13d68:	d1e1      	bne.n	13d2e <_dtoa_r+0x36e>
   13d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13d6c:	2b00      	cmp	r3, #0
   13d6e:	f000 8086 	beq.w	13e7e <_dtoa_r+0x4be>
   13d72:	2200      	movs	r2, #0
   13d74:	4b93      	ldr	r3, [pc, #588]	; (13fc4 <_dtoa_r+0x604>)
   13d76:	e9dd 4500 	ldrd	r4, r5, [sp]
   13d7a:	4620      	mov	r0, r4
   13d7c:	4629      	mov	r1, r5
   13d7e:	f7f9 fc07 	bl	d590 <__aeabi_dcmplt>
   13d82:	2800      	cmp	r0, #0
   13d84:	d07b      	beq.n	13e7e <_dtoa_r+0x4be>
   13d86:	f1b9 0f00 	cmp.w	r9, #0
   13d8a:	d078      	beq.n	13e7e <_dtoa_r+0x4be>
   13d8c:	9b04      	ldr	r3, [sp, #16]
   13d8e:	2b00      	cmp	r3, #0
   13d90:	dd35      	ble.n	13dfe <_dtoa_r+0x43e>
   13d92:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   13d96:	4620      	mov	r0, r4
   13d98:	2200      	movs	r2, #0
   13d9a:	4629      	mov	r1, r5
   13d9c:	930a      	str	r3, [sp, #40]	; 0x28
   13d9e:	3601      	adds	r6, #1
   13da0:	4b89      	ldr	r3, [pc, #548]	; (13fc8 <_dtoa_r+0x608>)
   13da2:	f7f9 f983 	bl	d0ac <__aeabi_dmul>
   13da6:	9c04      	ldr	r4, [sp, #16]
   13da8:	e9cd 0100 	strd	r0, r1, [sp]
   13dac:	4630      	mov	r0, r6
   13dae:	f7f9 f913 	bl	cfd8 <__aeabi_i2d>
   13db2:	e9dd 2300 	ldrd	r2, r3, [sp]
   13db6:	f7f9 f979 	bl	d0ac <__aeabi_dmul>
   13dba:	2200      	movs	r2, #0
   13dbc:	4b83      	ldr	r3, [pc, #524]	; (13fcc <_dtoa_r+0x60c>)
   13dbe:	f7f8 ffbf 	bl	cd40 <__adddf3>
   13dc2:	4606      	mov	r6, r0
   13dc4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   13dc8:	2c00      	cmp	r4, #0
   13dca:	d15c      	bne.n	13e86 <_dtoa_r+0x4c6>
   13dcc:	2200      	movs	r2, #0
   13dce:	4b80      	ldr	r3, [pc, #512]	; (13fd0 <_dtoa_r+0x610>)
   13dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
   13dd4:	f7f8 ffb2 	bl	cd3c <__aeabi_dsub>
   13dd8:	4632      	mov	r2, r6
   13dda:	463b      	mov	r3, r7
   13ddc:	e9cd 0100 	strd	r0, r1, [sp]
   13de0:	f7f9 fbf4 	bl	d5cc <__aeabi_dcmpgt>
   13de4:	2800      	cmp	r0, #0
   13de6:	f040 8289 	bne.w	142fc <_dtoa_r+0x93c>
   13dea:	4632      	mov	r2, r6
   13dec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   13df0:	e9dd 0100 	ldrd	r0, r1, [sp]
   13df4:	f7f9 fbcc 	bl	d590 <__aeabi_dcmplt>
   13df8:	2800      	cmp	r0, #0
   13dfa:	f040 827d 	bne.w	142f8 <_dtoa_r+0x938>
   13dfe:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13e02:	e9cd 3400 	strd	r3, r4, [sp]
   13e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13e08:	2b00      	cmp	r3, #0
   13e0a:	f2c0 814c 	blt.w	140a6 <_dtoa_r+0x6e6>
   13e0e:	f1ba 0f0e 	cmp.w	sl, #14
   13e12:	f300 8148 	bgt.w	140a6 <_dtoa_r+0x6e6>
   13e16:	4b69      	ldr	r3, [pc, #420]	; (13fbc <_dtoa_r+0x5fc>)
   13e18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   13e1c:	ed93 7b00 	vldr	d7, [r3]
   13e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e22:	2b00      	cmp	r3, #0
   13e24:	ed8d 7b04 	vstr	d7, [sp, #16]
   13e28:	f280 80d6 	bge.w	13fd8 <_dtoa_r+0x618>
   13e2c:	f1b9 0f00 	cmp.w	r9, #0
   13e30:	f300 80d2 	bgt.w	13fd8 <_dtoa_r+0x618>
   13e34:	f040 825f 	bne.w	142f6 <_dtoa_r+0x936>
   13e38:	2200      	movs	r2, #0
   13e3a:	4b65      	ldr	r3, [pc, #404]	; (13fd0 <_dtoa_r+0x610>)
   13e3c:	464c      	mov	r4, r9
   13e3e:	464e      	mov	r6, r9
   13e40:	ec51 0b17 	vmov	r0, r1, d7
   13e44:	f7f9 f932 	bl	d0ac <__aeabi_dmul>
   13e48:	e9dd 2300 	ldrd	r2, r3, [sp]
   13e4c:	f7f9 fbb4 	bl	d5b8 <__aeabi_dcmpge>
   13e50:	2800      	cmp	r0, #0
   13e52:	f040 8238 	bne.w	142c6 <_dtoa_r+0x906>
   13e56:	9d03      	ldr	r5, [sp, #12]
   13e58:	2331      	movs	r3, #49	; 0x31
   13e5a:	f10a 0a01 	add.w	sl, sl, #1
   13e5e:	f805 3b01 	strb.w	r3, [r5], #1
   13e62:	e234      	b.n	142ce <_dtoa_r+0x90e>
   13e64:	07e7      	lsls	r7, r4, #31
   13e66:	d505      	bpl.n	13e74 <_dtoa_r+0x4b4>
   13e68:	3601      	adds	r6, #1
   13e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
   13e6e:	f7f9 f91d 	bl	d0ac <__aeabi_dmul>
   13e72:	2301      	movs	r3, #1
   13e74:	1064      	asrs	r4, r4, #1
   13e76:	3508      	adds	r5, #8
   13e78:	e773      	b.n	13d62 <_dtoa_r+0x3a2>
   13e7a:	2602      	movs	r6, #2
   13e7c:	e775      	b.n	13d6a <_dtoa_r+0x3aa>
   13e7e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   13e82:	464c      	mov	r4, r9
   13e84:	e792      	b.n	13dac <_dtoa_r+0x3ec>
   13e86:	4b4d      	ldr	r3, [pc, #308]	; (13fbc <_dtoa_r+0x5fc>)
   13e88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13e8c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   13e90:	9b03      	ldr	r3, [sp, #12]
   13e92:	441c      	add	r4, r3
   13e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13e96:	2b00      	cmp	r3, #0
   13e98:	d046      	beq.n	13f28 <_dtoa_r+0x568>
   13e9a:	4602      	mov	r2, r0
   13e9c:	460b      	mov	r3, r1
   13e9e:	2000      	movs	r0, #0
   13ea0:	494c      	ldr	r1, [pc, #304]	; (13fd4 <_dtoa_r+0x614>)
   13ea2:	f7f9 fa2d 	bl	d300 <__aeabi_ddiv>
   13ea6:	4632      	mov	r2, r6
   13ea8:	463b      	mov	r3, r7
   13eaa:	f7f8 ff47 	bl	cd3c <__aeabi_dsub>
   13eae:	9d03      	ldr	r5, [sp, #12]
   13eb0:	4606      	mov	r6, r0
   13eb2:	460f      	mov	r7, r1
   13eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
   13eb8:	f7f9 fb92 	bl	d5e0 <__aeabi_d2iz>
   13ebc:	9012      	str	r0, [sp, #72]	; 0x48
   13ebe:	f7f9 f88b 	bl	cfd8 <__aeabi_i2d>
   13ec2:	4602      	mov	r2, r0
   13ec4:	460b      	mov	r3, r1
   13ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
   13eca:	f7f8 ff37 	bl	cd3c <__aeabi_dsub>
   13ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ed0:	4632      	mov	r2, r6
   13ed2:	3330      	adds	r3, #48	; 0x30
   13ed4:	f805 3b01 	strb.w	r3, [r5], #1
   13ed8:	463b      	mov	r3, r7
   13eda:	e9cd 0100 	strd	r0, r1, [sp]
   13ede:	f7f9 fb57 	bl	d590 <__aeabi_dcmplt>
   13ee2:	2800      	cmp	r0, #0
   13ee4:	d15f      	bne.n	13fa6 <_dtoa_r+0x5e6>
   13ee6:	2000      	movs	r0, #0
   13ee8:	4936      	ldr	r1, [pc, #216]	; (13fc4 <_dtoa_r+0x604>)
   13eea:	e9dd 2300 	ldrd	r2, r3, [sp]
   13eee:	f7f8 ff25 	bl	cd3c <__aeabi_dsub>
   13ef2:	4632      	mov	r2, r6
   13ef4:	463b      	mov	r3, r7
   13ef6:	f7f9 fb4b 	bl	d590 <__aeabi_dcmplt>
   13efa:	2800      	cmp	r0, #0
   13efc:	f040 80b2 	bne.w	14064 <_dtoa_r+0x6a4>
   13f00:	42a5      	cmp	r5, r4
   13f02:	f43f af7c 	beq.w	13dfe <_dtoa_r+0x43e>
   13f06:	2200      	movs	r2, #0
   13f08:	4b2f      	ldr	r3, [pc, #188]	; (13fc8 <_dtoa_r+0x608>)
   13f0a:	4630      	mov	r0, r6
   13f0c:	4639      	mov	r1, r7
   13f0e:	f7f9 f8cd 	bl	d0ac <__aeabi_dmul>
   13f12:	2200      	movs	r2, #0
   13f14:	4606      	mov	r6, r0
   13f16:	460f      	mov	r7, r1
   13f18:	4b2b      	ldr	r3, [pc, #172]	; (13fc8 <_dtoa_r+0x608>)
   13f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f1e:	f7f9 f8c5 	bl	d0ac <__aeabi_dmul>
   13f22:	e9cd 0100 	strd	r0, r1, [sp]
   13f26:	e7c5      	b.n	13eb4 <_dtoa_r+0x4f4>
   13f28:	4632      	mov	r2, r6
   13f2a:	463b      	mov	r3, r7
   13f2c:	f7f9 f8be 	bl	d0ac <__aeabi_dmul>
   13f30:	4625      	mov	r5, r4
   13f32:	9e03      	ldr	r6, [sp, #12]
   13f34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   13f38:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f3c:	f7f9 fb50 	bl	d5e0 <__aeabi_d2iz>
   13f40:	4607      	mov	r7, r0
   13f42:	f7f9 f849 	bl	cfd8 <__aeabi_i2d>
   13f46:	4602      	mov	r2, r0
   13f48:	3730      	adds	r7, #48	; 0x30
   13f4a:	460b      	mov	r3, r1
   13f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f50:	f7f8 fef4 	bl	cd3c <__aeabi_dsub>
   13f54:	f806 7b01 	strb.w	r7, [r6], #1
   13f58:	42a6      	cmp	r6, r4
   13f5a:	f04f 0200 	mov.w	r2, #0
   13f5e:	e9cd 0100 	strd	r0, r1, [sp]
   13f62:	d125      	bne.n	13fb0 <_dtoa_r+0x5f0>
   13f64:	4b1b      	ldr	r3, [pc, #108]	; (13fd4 <_dtoa_r+0x614>)
   13f66:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   13f6a:	f7f8 fee9 	bl	cd40 <__adddf3>
   13f6e:	4602      	mov	r2, r0
   13f70:	460b      	mov	r3, r1
   13f72:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f76:	f7f9 fb29 	bl	d5cc <__aeabi_dcmpgt>
   13f7a:	2800      	cmp	r0, #0
   13f7c:	d172      	bne.n	14064 <_dtoa_r+0x6a4>
   13f7e:	2000      	movs	r0, #0
   13f80:	4914      	ldr	r1, [pc, #80]	; (13fd4 <_dtoa_r+0x614>)
   13f82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   13f86:	f7f8 fed9 	bl	cd3c <__aeabi_dsub>
   13f8a:	4602      	mov	r2, r0
   13f8c:	460b      	mov	r3, r1
   13f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f92:	f7f9 fafd 	bl	d590 <__aeabi_dcmplt>
   13f96:	2800      	cmp	r0, #0
   13f98:	f43f af31 	beq.w	13dfe <_dtoa_r+0x43e>
   13f9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13fa0:	1e6a      	subs	r2, r5, #1
   13fa2:	2b30      	cmp	r3, #48	; 0x30
   13fa4:	d002      	beq.n	13fac <_dtoa_r+0x5ec>
   13fa6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   13faa:	e049      	b.n	14040 <_dtoa_r+0x680>
   13fac:	4615      	mov	r5, r2
   13fae:	e7f5      	b.n	13f9c <_dtoa_r+0x5dc>
   13fb0:	4b05      	ldr	r3, [pc, #20]	; (13fc8 <_dtoa_r+0x608>)
   13fb2:	f7f9 f87b 	bl	d0ac <__aeabi_dmul>
   13fb6:	e9cd 0100 	strd	r0, r1, [sp]
   13fba:	e7bd      	b.n	13f38 <_dtoa_r+0x578>
   13fbc:	000346a0 	.word	0x000346a0
   13fc0:	00034678 	.word	0x00034678
   13fc4:	3ff00000 	.word	0x3ff00000
   13fc8:	40240000 	.word	0x40240000
   13fcc:	401c0000 	.word	0x401c0000
   13fd0:	40140000 	.word	0x40140000
   13fd4:	3fe00000 	.word	0x3fe00000
   13fd8:	e9dd 6700 	ldrd	r6, r7, [sp]
   13fdc:	9d03      	ldr	r5, [sp, #12]
   13fde:	4630      	mov	r0, r6
   13fe0:	4639      	mov	r1, r7
   13fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13fe6:	f7f9 f98b 	bl	d300 <__aeabi_ddiv>
   13fea:	f7f9 faf9 	bl	d5e0 <__aeabi_d2iz>
   13fee:	4604      	mov	r4, r0
   13ff0:	f7f8 fff2 	bl	cfd8 <__aeabi_i2d>
   13ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13ff8:	f7f9 f858 	bl	d0ac <__aeabi_dmul>
   13ffc:	4602      	mov	r2, r0
   13ffe:	4630      	mov	r0, r6
   14000:	f104 0630 	add.w	r6, r4, #48	; 0x30
   14004:	460b      	mov	r3, r1
   14006:	4639      	mov	r1, r7
   14008:	f7f8 fe98 	bl	cd3c <__aeabi_dsub>
   1400c:	f805 6b01 	strb.w	r6, [r5], #1
   14010:	9e03      	ldr	r6, [sp, #12]
   14012:	4602      	mov	r2, r0
   14014:	460b      	mov	r3, r1
   14016:	1bae      	subs	r6, r5, r6
   14018:	45b1      	cmp	r9, r6
   1401a:	d137      	bne.n	1408c <_dtoa_r+0x6cc>
   1401c:	f7f8 fe90 	bl	cd40 <__adddf3>
   14020:	4606      	mov	r6, r0
   14022:	460f      	mov	r7, r1
   14024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14028:	f7f9 fad0 	bl	d5cc <__aeabi_dcmpgt>
   1402c:	b9c0      	cbnz	r0, 14060 <_dtoa_r+0x6a0>
   1402e:	4630      	mov	r0, r6
   14030:	4639      	mov	r1, r7
   14032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14036:	f7f9 faa1 	bl	d57c <__aeabi_dcmpeq>
   1403a:	b108      	cbz	r0, 14040 <_dtoa_r+0x680>
   1403c:	07e1      	lsls	r1, r4, #31
   1403e:	d40f      	bmi.n	14060 <_dtoa_r+0x6a0>
   14040:	4641      	mov	r1, r8
   14042:	4658      	mov	r0, fp
   14044:	f01f fe16 	bl	33c74 <_Bfree>
   14048:	2300      	movs	r3, #0
   1404a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1404c:	702b      	strb	r3, [r5, #0]
   1404e:	f10a 0301 	add.w	r3, sl, #1
   14052:	6013      	str	r3, [r2, #0]
   14054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14056:	2b00      	cmp	r3, #0
   14058:	f43f acfb 	beq.w	13a52 <_dtoa_r+0x92>
   1405c:	601d      	str	r5, [r3, #0]
   1405e:	e4f8      	b.n	13a52 <_dtoa_r+0x92>
   14060:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   14064:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   14068:	1e6b      	subs	r3, r5, #1
   1406a:	2a39      	cmp	r2, #57	; 0x39
   1406c:	d108      	bne.n	14080 <_dtoa_r+0x6c0>
   1406e:	9a03      	ldr	r2, [sp, #12]
   14070:	429a      	cmp	r2, r3
   14072:	d109      	bne.n	14088 <_dtoa_r+0x6c8>
   14074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14076:	9903      	ldr	r1, [sp, #12]
   14078:	3201      	adds	r2, #1
   1407a:	920a      	str	r2, [sp, #40]	; 0x28
   1407c:	2230      	movs	r2, #48	; 0x30
   1407e:	700a      	strb	r2, [r1, #0]
   14080:	781a      	ldrb	r2, [r3, #0]
   14082:	3201      	adds	r2, #1
   14084:	701a      	strb	r2, [r3, #0]
   14086:	e78e      	b.n	13fa6 <_dtoa_r+0x5e6>
   14088:	461d      	mov	r5, r3
   1408a:	e7eb      	b.n	14064 <_dtoa_r+0x6a4>
   1408c:	2200      	movs	r2, #0
   1408e:	4b9d      	ldr	r3, [pc, #628]	; (14304 <_dtoa_r+0x944>)
   14090:	f7f9 f80c 	bl	d0ac <__aeabi_dmul>
   14094:	2200      	movs	r2, #0
   14096:	2300      	movs	r3, #0
   14098:	4606      	mov	r6, r0
   1409a:	460f      	mov	r7, r1
   1409c:	f7f9 fa6e 	bl	d57c <__aeabi_dcmpeq>
   140a0:	2800      	cmp	r0, #0
   140a2:	d09c      	beq.n	13fde <_dtoa_r+0x61e>
   140a4:	e7cc      	b.n	14040 <_dtoa_r+0x680>
   140a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   140a8:	2a00      	cmp	r2, #0
   140aa:	f000 80cb 	beq.w	14244 <_dtoa_r+0x884>
   140ae:	9a08      	ldr	r2, [sp, #32]
   140b0:	2a01      	cmp	r2, #1
   140b2:	f300 80ae 	bgt.w	14212 <_dtoa_r+0x852>
   140b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   140b8:	2a00      	cmp	r2, #0
   140ba:	f000 80a6 	beq.w	1420a <_dtoa_r+0x84a>
   140be:	f203 4333 	addw	r3, r3, #1075	; 0x433
   140c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   140c4:	9d06      	ldr	r5, [sp, #24]
   140c6:	9a06      	ldr	r2, [sp, #24]
   140c8:	2101      	movs	r1, #1
   140ca:	4658      	mov	r0, fp
   140cc:	441a      	add	r2, r3
   140ce:	9206      	str	r2, [sp, #24]
   140d0:	9a07      	ldr	r2, [sp, #28]
   140d2:	441a      	add	r2, r3
   140d4:	9207      	str	r2, [sp, #28]
   140d6:	f01f fe71 	bl	33dbc <__i2b>
   140da:	4606      	mov	r6, r0
   140dc:	2d00      	cmp	r5, #0
   140de:	dd0c      	ble.n	140fa <_dtoa_r+0x73a>
   140e0:	9b07      	ldr	r3, [sp, #28]
   140e2:	2b00      	cmp	r3, #0
   140e4:	dd09      	ble.n	140fa <_dtoa_r+0x73a>
   140e6:	42ab      	cmp	r3, r5
   140e8:	9a06      	ldr	r2, [sp, #24]
   140ea:	bfa8      	it	ge
   140ec:	462b      	movge	r3, r5
   140ee:	1ad2      	subs	r2, r2, r3
   140f0:	1aed      	subs	r5, r5, r3
   140f2:	9206      	str	r2, [sp, #24]
   140f4:	9a07      	ldr	r2, [sp, #28]
   140f6:	1ad3      	subs	r3, r2, r3
   140f8:	9307      	str	r3, [sp, #28]
   140fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   140fc:	b1f3      	cbz	r3, 1413c <_dtoa_r+0x77c>
   140fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14100:	2b00      	cmp	r3, #0
   14102:	f000 80a3 	beq.w	1424c <_dtoa_r+0x88c>
   14106:	2c00      	cmp	r4, #0
   14108:	dd10      	ble.n	1412c <_dtoa_r+0x76c>
   1410a:	4631      	mov	r1, r6
   1410c:	4622      	mov	r2, r4
   1410e:	4658      	mov	r0, fp
   14110:	f019 f9e6 	bl	2d4e0 <__pow5mult>
   14114:	4642      	mov	r2, r8
   14116:	4601      	mov	r1, r0
   14118:	4606      	mov	r6, r0
   1411a:	4658      	mov	r0, fp
   1411c:	f01f fe57 	bl	33dce <__multiply>
   14120:	4607      	mov	r7, r0
   14122:	4641      	mov	r1, r8
   14124:	4658      	mov	r0, fp
   14126:	46b8      	mov	r8, r7
   14128:	f01f fda4 	bl	33c74 <_Bfree>
   1412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1412e:	1b1a      	subs	r2, r3, r4
   14130:	d004      	beq.n	1413c <_dtoa_r+0x77c>
   14132:	4641      	mov	r1, r8
   14134:	4658      	mov	r0, fp
   14136:	f019 f9d3 	bl	2d4e0 <__pow5mult>
   1413a:	4680      	mov	r8, r0
   1413c:	2101      	movs	r1, #1
   1413e:	4658      	mov	r0, fp
   14140:	f01f fe3c 	bl	33dbc <__i2b>
   14144:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14146:	4604      	mov	r4, r0
   14148:	2b00      	cmp	r3, #0
   1414a:	f340 8081 	ble.w	14250 <_dtoa_r+0x890>
   1414e:	461a      	mov	r2, r3
   14150:	4601      	mov	r1, r0
   14152:	4658      	mov	r0, fp
   14154:	f019 f9c4 	bl	2d4e0 <__pow5mult>
   14158:	9b08      	ldr	r3, [sp, #32]
   1415a:	4604      	mov	r4, r0
   1415c:	2b01      	cmp	r3, #1
   1415e:	dd7a      	ble.n	14256 <_dtoa_r+0x896>
   14160:	2700      	movs	r7, #0
   14162:	6923      	ldr	r3, [r4, #16]
   14164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   14168:	6918      	ldr	r0, [r3, #16]
   1416a:	f01f fdd7 	bl	33d1c <__hi0bits>
   1416e:	f1c0 0020 	rsb	r0, r0, #32
   14172:	9b07      	ldr	r3, [sp, #28]
   14174:	4418      	add	r0, r3
   14176:	f010 001f 	ands.w	r0, r0, #31
   1417a:	f000 808b 	beq.w	14294 <_dtoa_r+0x8d4>
   1417e:	f1c0 0320 	rsb	r3, r0, #32
   14182:	2b04      	cmp	r3, #4
   14184:	f340 8084 	ble.w	14290 <_dtoa_r+0x8d0>
   14188:	f1c0 001c 	rsb	r0, r0, #28
   1418c:	9b06      	ldr	r3, [sp, #24]
   1418e:	4405      	add	r5, r0
   14190:	4403      	add	r3, r0
   14192:	9306      	str	r3, [sp, #24]
   14194:	9b07      	ldr	r3, [sp, #28]
   14196:	4403      	add	r3, r0
   14198:	9307      	str	r3, [sp, #28]
   1419a:	9b06      	ldr	r3, [sp, #24]
   1419c:	2b00      	cmp	r3, #0
   1419e:	dd05      	ble.n	141ac <_dtoa_r+0x7ec>
   141a0:	4641      	mov	r1, r8
   141a2:	461a      	mov	r2, r3
   141a4:	4658      	mov	r0, fp
   141a6:	f01f fea1 	bl	33eec <__lshift>
   141aa:	4680      	mov	r8, r0
   141ac:	9b07      	ldr	r3, [sp, #28]
   141ae:	2b00      	cmp	r3, #0
   141b0:	dd05      	ble.n	141be <_dtoa_r+0x7fe>
   141b2:	4621      	mov	r1, r4
   141b4:	461a      	mov	r2, r3
   141b6:	4658      	mov	r0, fp
   141b8:	f01f fe98 	bl	33eec <__lshift>
   141bc:	4604      	mov	r4, r0
   141be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   141c0:	2b00      	cmp	r3, #0
   141c2:	d069      	beq.n	14298 <_dtoa_r+0x8d8>
   141c4:	4621      	mov	r1, r4
   141c6:	4640      	mov	r0, r8
   141c8:	f01f fee3 	bl	33f92 <__mcmp>
   141cc:	2800      	cmp	r0, #0
   141ce:	da63      	bge.n	14298 <_dtoa_r+0x8d8>
   141d0:	2300      	movs	r3, #0
   141d2:	4641      	mov	r1, r8
   141d4:	220a      	movs	r2, #10
   141d6:	4658      	mov	r0, fp
   141d8:	f01f fd63 	bl	33ca2 <__multadd>
   141dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   141de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   141e2:	4680      	mov	r8, r0
   141e4:	2b00      	cmp	r3, #0
   141e6:	f000 8179 	beq.w	144dc <_dtoa_r+0xb1c>
   141ea:	2300      	movs	r3, #0
   141ec:	4631      	mov	r1, r6
   141ee:	220a      	movs	r2, #10
   141f0:	4658      	mov	r0, fp
   141f2:	f01f fd56 	bl	33ca2 <__multadd>
   141f6:	9b04      	ldr	r3, [sp, #16]
   141f8:	4606      	mov	r6, r0
   141fa:	2b00      	cmp	r3, #0
   141fc:	f300 808a 	bgt.w	14314 <_dtoa_r+0x954>
   14200:	9b08      	ldr	r3, [sp, #32]
   14202:	2b02      	cmp	r3, #2
   14204:	f340 8086 	ble.w	14314 <_dtoa_r+0x954>
   14208:	e04e      	b.n	142a8 <_dtoa_r+0x8e8>
   1420a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1420c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   14210:	e757      	b.n	140c2 <_dtoa_r+0x702>
   14212:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14214:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   14218:	42a3      	cmp	r3, r4
   1421a:	bfb7      	itett	lt
   1421c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1421e:	1b1c      	subge	r4, r3, r4
   14220:	9409      	strlt	r4, [sp, #36]	; 0x24
   14222:	1ae2      	sublt	r2, r4, r3
   14224:	bfbf      	itttt	lt
   14226:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   14228:	2400      	movlt	r4, #0
   1422a:	189b      	addlt	r3, r3, r2
   1422c:	9310      	strlt	r3, [sp, #64]	; 0x40
   1422e:	f1b9 0f00 	cmp.w	r9, #0
   14232:	bfb3      	iteet	lt
   14234:	9b06      	ldrlt	r3, [sp, #24]
   14236:	464b      	movge	r3, r9
   14238:	9d06      	ldrge	r5, [sp, #24]
   1423a:	eba3 0509 	sublt.w	r5, r3, r9
   1423e:	bfb8      	it	lt
   14240:	2300      	movlt	r3, #0
   14242:	e740      	b.n	140c6 <_dtoa_r+0x706>
   14244:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14246:	9d06      	ldr	r5, [sp, #24]
   14248:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1424a:	e747      	b.n	140dc <_dtoa_r+0x71c>
   1424c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1424e:	e770      	b.n	14132 <_dtoa_r+0x772>
   14250:	9b08      	ldr	r3, [sp, #32]
   14252:	2b01      	cmp	r3, #1
   14254:	dc18      	bgt.n	14288 <_dtoa_r+0x8c8>
   14256:	9b00      	ldr	r3, [sp, #0]
   14258:	b9b3      	cbnz	r3, 14288 <_dtoa_r+0x8c8>
   1425a:	9b01      	ldr	r3, [sp, #4]
   1425c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   14260:	b9a3      	cbnz	r3, 1428c <_dtoa_r+0x8cc>
   14262:	9b01      	ldr	r3, [sp, #4]
   14264:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   14268:	0d3f      	lsrs	r7, r7, #20
   1426a:	053f      	lsls	r7, r7, #20
   1426c:	b137      	cbz	r7, 1427c <_dtoa_r+0x8bc>
   1426e:	9b06      	ldr	r3, [sp, #24]
   14270:	2701      	movs	r7, #1
   14272:	3301      	adds	r3, #1
   14274:	9306      	str	r3, [sp, #24]
   14276:	9b07      	ldr	r3, [sp, #28]
   14278:	3301      	adds	r3, #1
   1427a:	9307      	str	r3, [sp, #28]
   1427c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1427e:	2b00      	cmp	r3, #0
   14280:	f47f af6f 	bne.w	14162 <_dtoa_r+0x7a2>
   14284:	2001      	movs	r0, #1
   14286:	e774      	b.n	14172 <_dtoa_r+0x7b2>
   14288:	2700      	movs	r7, #0
   1428a:	e7f7      	b.n	1427c <_dtoa_r+0x8bc>
   1428c:	9f00      	ldr	r7, [sp, #0]
   1428e:	e7f5      	b.n	1427c <_dtoa_r+0x8bc>
   14290:	d083      	beq.n	1419a <_dtoa_r+0x7da>
   14292:	4618      	mov	r0, r3
   14294:	301c      	adds	r0, #28
   14296:	e779      	b.n	1418c <_dtoa_r+0x7cc>
   14298:	f1b9 0f00 	cmp.w	r9, #0
   1429c:	dc34      	bgt.n	14308 <_dtoa_r+0x948>
   1429e:	9b08      	ldr	r3, [sp, #32]
   142a0:	2b02      	cmp	r3, #2
   142a2:	dd31      	ble.n	14308 <_dtoa_r+0x948>
   142a4:	f8cd 9010 	str.w	r9, [sp, #16]
   142a8:	9b04      	ldr	r3, [sp, #16]
   142aa:	b963      	cbnz	r3, 142c6 <_dtoa_r+0x906>
   142ac:	4621      	mov	r1, r4
   142ae:	2205      	movs	r2, #5
   142b0:	4658      	mov	r0, fp
   142b2:	f01f fcf6 	bl	33ca2 <__multadd>
   142b6:	4601      	mov	r1, r0
   142b8:	4604      	mov	r4, r0
   142ba:	4640      	mov	r0, r8
   142bc:	f01f fe69 	bl	33f92 <__mcmp>
   142c0:	2800      	cmp	r0, #0
   142c2:	f73f adc8 	bgt.w	13e56 <_dtoa_r+0x496>
   142c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   142c8:	9d03      	ldr	r5, [sp, #12]
   142ca:	ea6f 0a03 	mvn.w	sl, r3
   142ce:	2700      	movs	r7, #0
   142d0:	4621      	mov	r1, r4
   142d2:	4658      	mov	r0, fp
   142d4:	f01f fcce 	bl	33c74 <_Bfree>
   142d8:	2e00      	cmp	r6, #0
   142da:	f43f aeb1 	beq.w	14040 <_dtoa_r+0x680>
   142de:	b12f      	cbz	r7, 142ec <_dtoa_r+0x92c>
   142e0:	42b7      	cmp	r7, r6
   142e2:	d003      	beq.n	142ec <_dtoa_r+0x92c>
   142e4:	4639      	mov	r1, r7
   142e6:	4658      	mov	r0, fp
   142e8:	f01f fcc4 	bl	33c74 <_Bfree>
   142ec:	4631      	mov	r1, r6
   142ee:	4658      	mov	r0, fp
   142f0:	f01f fcc0 	bl	33c74 <_Bfree>
   142f4:	e6a4      	b.n	14040 <_dtoa_r+0x680>
   142f6:	2400      	movs	r4, #0
   142f8:	4626      	mov	r6, r4
   142fa:	e7e4      	b.n	142c6 <_dtoa_r+0x906>
   142fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   14300:	4626      	mov	r6, r4
   14302:	e5a8      	b.n	13e56 <_dtoa_r+0x496>
   14304:	40240000 	.word	0x40240000
   14308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1430a:	f8cd 9010 	str.w	r9, [sp, #16]
   1430e:	2b00      	cmp	r3, #0
   14310:	f000 80eb 	beq.w	144ea <_dtoa_r+0xb2a>
   14314:	2d00      	cmp	r5, #0
   14316:	dd05      	ble.n	14324 <_dtoa_r+0x964>
   14318:	4631      	mov	r1, r6
   1431a:	462a      	mov	r2, r5
   1431c:	4658      	mov	r0, fp
   1431e:	f01f fde5 	bl	33eec <__lshift>
   14322:	4606      	mov	r6, r0
   14324:	2f00      	cmp	r7, #0
   14326:	d056      	beq.n	143d6 <_dtoa_r+0xa16>
   14328:	6871      	ldr	r1, [r6, #4]
   1432a:	4658      	mov	r0, fp
   1432c:	f01f fc6e 	bl	33c0c <_Balloc>
   14330:	6932      	ldr	r2, [r6, #16]
   14332:	4605      	mov	r5, r0
   14334:	f106 010c 	add.w	r1, r6, #12
   14338:	3202      	adds	r2, #2
   1433a:	300c      	adds	r0, #12
   1433c:	0092      	lsls	r2, r2, #2
   1433e:	f01f fa3f 	bl	337c0 <memcpy>
   14342:	2201      	movs	r2, #1
   14344:	4629      	mov	r1, r5
   14346:	4658      	mov	r0, fp
   14348:	f01f fdd0 	bl	33eec <__lshift>
   1434c:	9b03      	ldr	r3, [sp, #12]
   1434e:	4637      	mov	r7, r6
   14350:	4606      	mov	r6, r0
   14352:	f103 0901 	add.w	r9, r3, #1
   14356:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   1435a:	4413      	add	r3, r2
   1435c:	9309      	str	r3, [sp, #36]	; 0x24
   1435e:	9b00      	ldr	r3, [sp, #0]
   14360:	f003 0301 	and.w	r3, r3, #1
   14364:	9307      	str	r3, [sp, #28]
   14366:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1436a:	4621      	mov	r1, r4
   1436c:	4640      	mov	r0, r8
   1436e:	9300      	str	r3, [sp, #0]
   14370:	f01f fbbc 	bl	33aec <quorem>
   14374:	4603      	mov	r3, r0
   14376:	9004      	str	r0, [sp, #16]
   14378:	4639      	mov	r1, r7
   1437a:	4640      	mov	r0, r8
   1437c:	3330      	adds	r3, #48	; 0x30
   1437e:	930a      	str	r3, [sp, #40]	; 0x28
   14380:	f01f fe07 	bl	33f92 <__mcmp>
   14384:	4632      	mov	r2, r6
   14386:	9006      	str	r0, [sp, #24]
   14388:	4621      	mov	r1, r4
   1438a:	4658      	mov	r0, fp
   1438c:	f01f fe1b 	bl	33fc6 <__mdiff>
   14390:	68c2      	ldr	r2, [r0, #12]
   14392:	4605      	mov	r5, r0
   14394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14396:	bb02      	cbnz	r2, 143da <_dtoa_r+0xa1a>
   14398:	4601      	mov	r1, r0
   1439a:	4640      	mov	r0, r8
   1439c:	f01f fdf9 	bl	33f92 <__mcmp>
   143a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143a2:	4602      	mov	r2, r0
   143a4:	4629      	mov	r1, r5
   143a6:	4658      	mov	r0, fp
   143a8:	920c      	str	r2, [sp, #48]	; 0x30
   143aa:	464d      	mov	r5, r9
   143ac:	930a      	str	r3, [sp, #40]	; 0x28
   143ae:	f01f fc61 	bl	33c74 <_Bfree>
   143b2:	9b08      	ldr	r3, [sp, #32]
   143b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   143b6:	ea43 0102 	orr.w	r1, r3, r2
   143ba:	9b07      	ldr	r3, [sp, #28]
   143bc:	430b      	orrs	r3, r1
   143be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143c0:	d10d      	bne.n	143de <_dtoa_r+0xa1e>
   143c2:	2b39      	cmp	r3, #57	; 0x39
   143c4:	d027      	beq.n	14416 <_dtoa_r+0xa56>
   143c6:	9a06      	ldr	r2, [sp, #24]
   143c8:	2a00      	cmp	r2, #0
   143ca:	dd01      	ble.n	143d0 <_dtoa_r+0xa10>
   143cc:	9b04      	ldr	r3, [sp, #16]
   143ce:	3331      	adds	r3, #49	; 0x31
   143d0:	9a00      	ldr	r2, [sp, #0]
   143d2:	7013      	strb	r3, [r2, #0]
   143d4:	e77c      	b.n	142d0 <_dtoa_r+0x910>
   143d6:	4630      	mov	r0, r6
   143d8:	e7b8      	b.n	1434c <_dtoa_r+0x98c>
   143da:	2201      	movs	r2, #1
   143dc:	e7e2      	b.n	143a4 <_dtoa_r+0x9e4>
   143de:	9906      	ldr	r1, [sp, #24]
   143e0:	2900      	cmp	r1, #0
   143e2:	db04      	blt.n	143ee <_dtoa_r+0xa2e>
   143e4:	9808      	ldr	r0, [sp, #32]
   143e6:	4301      	orrs	r1, r0
   143e8:	9807      	ldr	r0, [sp, #28]
   143ea:	4301      	orrs	r1, r0
   143ec:	d11d      	bne.n	1442a <_dtoa_r+0xa6a>
   143ee:	2a00      	cmp	r2, #0
   143f0:	ddee      	ble.n	143d0 <_dtoa_r+0xa10>
   143f2:	4641      	mov	r1, r8
   143f4:	2201      	movs	r2, #1
   143f6:	4658      	mov	r0, fp
   143f8:	9306      	str	r3, [sp, #24]
   143fa:	f01f fd77 	bl	33eec <__lshift>
   143fe:	4621      	mov	r1, r4
   14400:	4680      	mov	r8, r0
   14402:	f01f fdc6 	bl	33f92 <__mcmp>
   14406:	2800      	cmp	r0, #0
   14408:	9b06      	ldr	r3, [sp, #24]
   1440a:	dc02      	bgt.n	14412 <_dtoa_r+0xa52>
   1440c:	d1e0      	bne.n	143d0 <_dtoa_r+0xa10>
   1440e:	07da      	lsls	r2, r3, #31
   14410:	d5de      	bpl.n	143d0 <_dtoa_r+0xa10>
   14412:	2b39      	cmp	r3, #57	; 0x39
   14414:	d1da      	bne.n	143cc <_dtoa_r+0xa0c>
   14416:	2339      	movs	r3, #57	; 0x39
   14418:	9a00      	ldr	r2, [sp, #0]
   1441a:	7013      	strb	r3, [r2, #0]
   1441c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   14420:	1e6a      	subs	r2, r5, #1
   14422:	2b39      	cmp	r3, #57	; 0x39
   14424:	d046      	beq.n	144b4 <_dtoa_r+0xaf4>
   14426:	3301      	adds	r3, #1
   14428:	e7d3      	b.n	143d2 <_dtoa_r+0xa12>
   1442a:	2a00      	cmp	r2, #0
   1442c:	dd03      	ble.n	14436 <_dtoa_r+0xa76>
   1442e:	2b39      	cmp	r3, #57	; 0x39
   14430:	d0f1      	beq.n	14416 <_dtoa_r+0xa56>
   14432:	3301      	adds	r3, #1
   14434:	e7cc      	b.n	143d0 <_dtoa_r+0xa10>
   14436:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14438:	f809 3c01 	strb.w	r3, [r9, #-1]
   1443c:	4591      	cmp	r9, r2
   1443e:	d021      	beq.n	14484 <_dtoa_r+0xac4>
   14440:	4641      	mov	r1, r8
   14442:	2300      	movs	r3, #0
   14444:	220a      	movs	r2, #10
   14446:	4658      	mov	r0, fp
   14448:	f01f fc2b 	bl	33ca2 <__multadd>
   1444c:	42b7      	cmp	r7, r6
   1444e:	4680      	mov	r8, r0
   14450:	f04f 0300 	mov.w	r3, #0
   14454:	f04f 020a 	mov.w	r2, #10
   14458:	4639      	mov	r1, r7
   1445a:	4658      	mov	r0, fp
   1445c:	d106      	bne.n	1446c <_dtoa_r+0xaac>
   1445e:	f01f fc20 	bl	33ca2 <__multadd>
   14462:	4607      	mov	r7, r0
   14464:	4606      	mov	r6, r0
   14466:	f109 0901 	add.w	r9, r9, #1
   1446a:	e77c      	b.n	14366 <_dtoa_r+0x9a6>
   1446c:	f01f fc19 	bl	33ca2 <__multadd>
   14470:	4631      	mov	r1, r6
   14472:	4607      	mov	r7, r0
   14474:	2300      	movs	r3, #0
   14476:	220a      	movs	r2, #10
   14478:	4658      	mov	r0, fp
   1447a:	f01f fc12 	bl	33ca2 <__multadd>
   1447e:	4606      	mov	r6, r0
   14480:	e7f1      	b.n	14466 <_dtoa_r+0xaa6>
   14482:	2700      	movs	r7, #0
   14484:	4641      	mov	r1, r8
   14486:	2201      	movs	r2, #1
   14488:	4658      	mov	r0, fp
   1448a:	9300      	str	r3, [sp, #0]
   1448c:	f01f fd2e 	bl	33eec <__lshift>
   14490:	4621      	mov	r1, r4
   14492:	4680      	mov	r8, r0
   14494:	f01f fd7d 	bl	33f92 <__mcmp>
   14498:	2800      	cmp	r0, #0
   1449a:	dcbf      	bgt.n	1441c <_dtoa_r+0xa5c>
   1449c:	d102      	bne.n	144a4 <_dtoa_r+0xae4>
   1449e:	9b00      	ldr	r3, [sp, #0]
   144a0:	07db      	lsls	r3, r3, #31
   144a2:	d4bb      	bmi.n	1441c <_dtoa_r+0xa5c>
   144a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   144a8:	1e6a      	subs	r2, r5, #1
   144aa:	2b30      	cmp	r3, #48	; 0x30
   144ac:	f47f af10 	bne.w	142d0 <_dtoa_r+0x910>
   144b0:	4615      	mov	r5, r2
   144b2:	e7f7      	b.n	144a4 <_dtoa_r+0xae4>
   144b4:	9b03      	ldr	r3, [sp, #12]
   144b6:	4293      	cmp	r3, r2
   144b8:	d104      	bne.n	144c4 <_dtoa_r+0xb04>
   144ba:	f10a 0a01 	add.w	sl, sl, #1
   144be:	2331      	movs	r3, #49	; 0x31
   144c0:	9a03      	ldr	r2, [sp, #12]
   144c2:	e786      	b.n	143d2 <_dtoa_r+0xa12>
   144c4:	4615      	mov	r5, r2
   144c6:	e7a9      	b.n	1441c <_dtoa_r+0xa5c>
   144c8:	4b13      	ldr	r3, [pc, #76]	; (14518 <_dtoa_r+0xb58>)
   144ca:	f7ff bae1 	b.w	13a90 <_dtoa_r+0xd0>
   144ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   144d0:	2b00      	cmp	r3, #0
   144d2:	f47f aab9 	bne.w	13a48 <_dtoa_r+0x88>
   144d6:	4b11      	ldr	r3, [pc, #68]	; (1451c <_dtoa_r+0xb5c>)
   144d8:	f7ff bada 	b.w	13a90 <_dtoa_r+0xd0>
   144dc:	9b04      	ldr	r3, [sp, #16]
   144de:	2b00      	cmp	r3, #0
   144e0:	dc03      	bgt.n	144ea <_dtoa_r+0xb2a>
   144e2:	9b08      	ldr	r3, [sp, #32]
   144e4:	2b02      	cmp	r3, #2
   144e6:	f73f aedf 	bgt.w	142a8 <_dtoa_r+0x8e8>
   144ea:	9d03      	ldr	r5, [sp, #12]
   144ec:	4621      	mov	r1, r4
   144ee:	4640      	mov	r0, r8
   144f0:	f01f fafc 	bl	33aec <quorem>
   144f4:	9a03      	ldr	r2, [sp, #12]
   144f6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   144fa:	9904      	ldr	r1, [sp, #16]
   144fc:	f805 3b01 	strb.w	r3, [r5], #1
   14500:	1aaa      	subs	r2, r5, r2
   14502:	4291      	cmp	r1, r2
   14504:	ddbd      	ble.n	14482 <_dtoa_r+0xac2>
   14506:	4641      	mov	r1, r8
   14508:	2300      	movs	r3, #0
   1450a:	220a      	movs	r2, #10
   1450c:	4658      	mov	r0, fp
   1450e:	f01f fbc8 	bl	33ca2 <__multadd>
   14512:	4680      	mov	r8, r0
   14514:	e7ea      	b.n	144ec <_dtoa_r+0xb2c>
   14516:	bf00      	nop
   14518:	00037308 	.word	0x00037308
   1451c:	00037879 	.word	0x00037879

00014520 <env_data_ready>:
{
   14520:	b500      	push	{lr}
   14522:	b09f      	sub	sp, #124	; 0x7c
    if (! env_sensors_get_temperature(&temp)) {
   14524:	a806      	add	r0, sp, #24
   14526:	f001 fc87 	bl	15e38 <env_sensors_get_temperature>
   1452a:	b920      	cbnz	r0, 14536 <env_data_ready+0x16>
        (env_data.t) = (s32_t)temp.value;
   1452c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   14530:	f7f9 f856 	bl	d5e0 <__aeabi_d2iz>
   14534:	9001      	str	r0, [sp, #4]
    if (! env_sensors_get_humidity(&humi)) {
   14536:	a80c      	add	r0, sp, #48	; 0x30
   14538:	f001 fcd6 	bl	15ee8 <env_sensors_get_humidity>
   1453c:	b920      	cbnz	r0, 14548 <env_data_ready+0x28>
        (env_data.h) = (s32_t)humi.value;
   1453e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   14542:	f7f9 f84d 	bl	d5e0 <__aeabi_d2iz>
   14546:	9002      	str	r0, [sp, #8]
    if (! env_sensors_get_pressure(&pres)) {
   14548:	a812      	add	r0, sp, #72	; 0x48
   1454a:	f001 fd25 	bl	15f98 <env_sensors_get_pressure>
   1454e:	b920      	cbnz	r0, 1455a <env_data_ready+0x3a>
        (env_data.p) = (s32_t)pres.value;
   14550:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   14554:	f7f9 f844 	bl	d5e0 <__aeabi_d2iz>
   14558:	9003      	str	r0, [sp, #12]
    if (! env_sensors_get_air_quality(&qual)) {
   1455a:	a818      	add	r0, sp, #96	; 0x60
   1455c:	f001 fd74 	bl	16048 <env_sensors_get_air_quality>
   14560:	b940      	cbnz	r0, 14574 <env_data_ready+0x54>
        (env_data.q) = (s32_t)qual.value;
   14562:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   14566:	f7f9 f83b 	bl	d5e0 <__aeabi_d2iz>
        (env_data.a) = (u8_t)qual.accuracy;
   1456a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
        (env_data.q) = (s32_t)qual.value;
   1456e:	9004      	str	r0, [sp, #16]
        (env_data.a) = (u8_t)qual.accuracy;
   14570:	f88d 3014 	strb.w	r3, [sp, #20]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   14574:	2200      	movs	r2, #0
   14576:	a901      	add	r1, sp, #4
   14578:	4802      	ldr	r0, [pc, #8]	; (14584 <env_data_ready+0x64>)
   1457a:	f013 fac9 	bl	27b10 <z_impl_k_msgq_put>
}
   1457e:	b01f      	add	sp, #124	; 0x7c
   14580:	f85d fb04 	ldr.w	pc, [sp], #4
   14584:	20020f90 	.word	0x20020f90

00014588 <ntp_poll>:
{
   14588:	b507      	push	{r0, r1, r2, lr}
    while (date_time_now(&date_time_stamp) != 0)
   1458a:	4668      	mov	r0, sp
   1458c:	f01e fea2 	bl	332d4 <date_time_now>
   14590:	b928      	cbnz	r0, 1459e <ntp_poll+0x16>
    got_ntp = true;
   14592:	2201      	movs	r2, #1
   14594:	4b04      	ldr	r3, [pc, #16]	; (145a8 <ntp_poll+0x20>)
   14596:	701a      	strb	r2, [r3, #0]
}
   14598:	b003      	add	sp, #12
   1459a:	f85d fb04 	ldr.w	pc, [sp], #4
	return z_impl_k_sleep(timeout);
   1459e:	f242 7010 	movw	r0, #10000	; 0x2710
   145a2:	f015 f8e1 	bl	29768 <z_impl_k_sleep>
   145a6:	e7f0      	b.n	1458a <ntp_poll+0x2>
   145a8:	20027466 	.word	0x20027466

000145ac <process_env_data>:
{
   145ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    u32_t run_count = 0;
   145b0:	2600      	movs	r6, #0
    bool thread_started = false;
   145b2:	46b2      	mov	sl, r6
                    sys_reboot(0); //TODO: Handle error
   145b4:	46b3      	mov	fp, r6
{
   145b6:	f6ad 7d84 	subw	sp, sp, #3972	; 0xf84
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   145ba:	2400      	movs	r4, #0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   145bc:	4d46      	ldr	r5, [pc, #280]	; (146d8 <process_env_data+0x12c>)
            tempArray[i] = (s32_t)d_temp.t;
   145be:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   145c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145c6:	4669      	mov	r1, sp
   145c8:	4628      	mov	r0, r5
   145ca:	f013 fb3b 	bl	27c44 <z_impl_k_msgq_get>
   145ce:	9b00      	ldr	r3, [sp, #0]
            humiArray[i] = (s32_t)d_temp.h;
   145d0:	f50d 6888 	add.w	r8, sp, #1088	; 0x440
            tempArray[i] = (s32_t)d_temp.t;
   145d4:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
            humiArray[i] = (s32_t)d_temp.h;
   145d8:	9b01      	ldr	r3, [sp, #4]
            presArray[i] = (s32_t)d_temp.p;
   145da:	f50d 6700 	add.w	r7, sp, #2048	; 0x800
            humiArray[i] = (s32_t)d_temp.h;
   145de:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
            presArray[i] = (s32_t)d_temp.p;
   145e2:	9b02      	ldr	r3, [sp, #8]
   145e4:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
            if (d_temp.a != IAQ_STABILISING) {
   145e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d06e      	beq.n	146ce <process_env_data+0x122>
                qualArray[i] = (s32_t)d_temp.q; // fill array with valid readings
   145f0:	9b03      	ldr	r3, [sp, #12]
            run_count +=1;
   145f2:	3601      	adds	r6, #1
   145f4:	f50d 623c 	add.w	r2, sp, #3008	; 0xbc0
            if ((run_count == (THREAD_INDEX)) && (!thread_started))
   145f8:	2eee      	cmp	r6, #238	; 0xee
   145fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
   145fe:	d113      	bne.n	14628 <process_env_data+0x7c>
   14600:	f1ba 0f00 	cmp.w	sl, #0
   14604:	d110      	bne.n	14628 <process_env_data+0x7c>
                err = gcloud_provision();
   14606:	f000 f97d 	bl	14904 <gcloud_provision>
                if (err) {
   1460a:	b110      	cbz	r0, 14612 <process_env_data+0x66>
                    sys_reboot(0); //TODO: Handle error
   1460c:	4650      	mov	r0, sl
   1460e:	f003 fc59 	bl	17ec4 <sys_reboot>
                err = gcloud_connect(received_config_handler);
   14612:	4832      	ldr	r0, [pc, #200]	; (146dc <process_env_data+0x130>)
   14614:	f000 f98e 	bl	14934 <gcloud_connect>
                if (err) {
   14618:	2800      	cmp	r0, #0
   1461a:	d05b      	beq.n	146d4 <process_env_data+0x128>
                    sys_reboot(0); //TODO: Handle error
   1461c:	2000      	movs	r0, #0
   1461e:	f003 fc51 	bl	17ec4 <sys_reboot>
                run_count = 0;
   14622:	2600      	movs	r6, #0
                thread_started = true;
   14624:	f04f 0a01 	mov.w	sl, #1
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   14628:	3401      	adds	r4, #1
   1462a:	2cf0      	cmp	r4, #240	; 0xf0
   1462c:	d1c9      	bne.n	145c2 <process_env_data+0x16>
        pac_data.ag_temp.avg = calculate_avg_val(tempArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   1462e:	4621      	mov	r1, r4
   14630:	ab1f      	add	r3, sp, #124	; 0x7c
   14632:	2200      	movs	r2, #0
   14634:	4648      	mov	r0, r9
   14636:	f019 f8bb 	bl	2d7b0 <calculate_avg_val>
   1463a:	ad10      	add	r5, sp, #64	; 0x40
   1463c:	60a8      	str	r0, [r5, #8]
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   1463e:	ab1f      	add	r3, sp, #124	; 0x7c
   14640:	2200      	movs	r2, #0
   14642:	4640      	mov	r0, r8
   14644:	f019 f8b4 	bl	2d7b0 <calculate_avg_val>
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   14648:	ab1f      	add	r3, sp, #124	; 0x7c
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   1464a:	61a8      	str	r0, [r5, #24]
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   1464c:	2200      	movs	r2, #0
   1464e:	4638      	mov	r0, r7
   14650:	f019 f8ae 	bl	2d7b0 <calculate_avg_val>
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true, &pac_data.ag_qual.cnt);
   14654:	ab1f      	add	r3, sp, #124	; 0x7c
   14656:	2201      	movs	r2, #1
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false, &pac_data.ag_qual.cnt);
   14658:	62a8      	str	r0, [r5, #40]	; 0x28
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true, &pac_data.ag_qual.cnt);
   1465a:	f50d 603c 	add.w	r0, sp, #3008	; 0xbc0
   1465e:	f019 f8a7 	bl	2d7b0 <calculate_avg_val>
   14662:	63a8      	str	r0, [r5, #56]	; 0x38
        pac_data.ag_temp.min = calculate_min_val(tempArray, DATA_ARRAY_SIZE);
   14664:	4648      	mov	r0, r9
   14666:	f019 f8be 	bl	2d7e6 <calculate_min_val>
   1466a:	6068      	str	r0, [r5, #4]
        pac_data.ag_humi.min = calculate_min_val(humiArray, DATA_ARRAY_SIZE);
   1466c:	4640      	mov	r0, r8
   1466e:	f019 f8ba 	bl	2d7e6 <calculate_min_val>
   14672:	6168      	str	r0, [r5, #20]
        pac_data.ag_pres.min = calculate_min_val(presArray, DATA_ARRAY_SIZE);
   14674:	4638      	mov	r0, r7
   14676:	f019 f8b6 	bl	2d7e6 <calculate_min_val>
   1467a:	6268      	str	r0, [r5, #36]	; 0x24
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE);
   1467c:	f50d 603c 	add.w	r0, sp, #3008	; 0xbc0
   14680:	f019 f8b1 	bl	2d7e6 <calculate_min_val>
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14684:	2200      	movs	r2, #0
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE);
   14686:	6368      	str	r0, [r5, #52]	; 0x34
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14688:	4648      	mov	r0, r9
   1468a:	f019 f8ba 	bl	2d802 <calculate_max_val>
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   1468e:	2200      	movs	r2, #0
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14690:	6028      	str	r0, [r5, #0]
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14692:	4640      	mov	r0, r8
   14694:	f019 f8b5 	bl	2d802 <calculate_max_val>
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14698:	2200      	movs	r2, #0
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   1469a:	6128      	str	r0, [r5, #16]
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   1469c:	4638      	mov	r0, r7
   1469e:	f019 f8b0 	bl	2d802 <calculate_max_val>
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   146a2:	2201      	movs	r2, #1
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   146a4:	6228      	str	r0, [r5, #32]
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   146a6:	f50d 603c 	add.w	r0, sp, #3008	; 0xbc0
   146aa:	f019 f8aa 	bl	2d802 <calculate_max_val>
        send_env_msg.info = buffer_bytes_used;
   146ae:	2340      	movs	r3, #64	; 0x40
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   146b0:	6328      	str	r0, [r5, #48]	; 0x30
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   146b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146b6:	a905      	add	r1, sp, #20
   146b8:	4809      	ldr	r0, [pc, #36]	; (146e0 <process_env_data+0x134>)
        send_env_msg.size = buffer_bytes_used;
   146ba:	e9cd 3306 	strd	r3, r3, [sp, #24]
        send_env_msg.tx_data = &pac_data;
   146be:	9508      	str	r5, [sp, #32]
        send_env_msg.tx_block.data = NULL;
   146c0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
        send_env_msg.tx_target_thread = K_ANY;
   146c4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   146c8:	f013 f868 	bl	2779c <k_mbox_put>
        if (send_env_msg.size < buffer_bytes_used) {
   146cc:	e775      	b.n	145ba <process_env_data+0xe>
               qualArray[i] = EXCLUDE;  // fill array with magic number
   146ce:	f240 33e7 	movw	r3, #999	; 0x3e7
   146d2:	e78e      	b.n	145f2 <process_env_data+0x46>
                run_count = 0;
   146d4:	4606      	mov	r6, r0
   146d6:	e7a5      	b.n	14624 <process_env_data+0x78>
   146d8:	20020f90 	.word	0x20020f90
   146dc:	0002d7a1 	.word	0x0002d7a1
   146e0:	20020f7c 	.word	0x20020f7c

000146e4 <init_env_sensor>:
{
   146e4:	b510      	push	{r4, lr}
	k_work_q_start(&env_sens_q, env_sens_stack_area,
   146e6:	4c07      	ldr	r4, [pc, #28]	; (14704 <init_env_sensor+0x20>)
   146e8:	4907      	ldr	r1, [pc, #28]	; (14708 <init_env_sensor+0x24>)
   146ea:	4620      	mov	r0, r4
   146ec:	2307      	movs	r3, #7
   146ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   146f2:	f015 fb1b 	bl	29d2c <k_work_q_start>
    err = env_sensors_init_and_start(&env_sens_q, env_data_ready);
   146f6:	4620      	mov	r0, r4
}
   146f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = env_sensors_init_and_start(&env_sens_q, env_data_ready);
   146fc:	4903      	ldr	r1, [pc, #12]	; (1470c <init_env_sensor+0x28>)
   146fe:	f001 bcfb 	b.w	160f8 <env_sensors_init_and_start>
   14702:	bf00      	nop
   14704:	20021124 	.word	0x20021124
   14708:	2002b008 	.word	0x2002b008
   1470c:	00014521 	.word	0x00014521

00014710 <main>:
}


/**@brief Thread initialisation */
void main(void)
{
   14710:	b530      	push	{r4, r5, lr}
    LOG_INF("Google Cloud env sensor app started");

	k_work_q_start(&app_work_q, wdt_stack_area,
   14712:	2307      	movs	r3, #7
{
   14714:	b087      	sub	sp, #28
	k_work_q_start(&app_work_q, wdt_stack_area,
   14716:	f44f 7200 	mov.w	r2, #512	; 0x200
   1471a:	4933      	ldr	r1, [pc, #204]	; (147e8 <main+0xd8>)
   1471c:	4833      	ldr	r0, [pc, #204]	; (147ec <main+0xdc>)
   1471e:	f015 fb05 	bl	29d2c <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(wdt_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&app_work_q);
   14722:	4832      	ldr	r0, [pc, #200]	; (147ec <main+0xdc>)
   14724:	f002 fb20 	bl	16d68 <watchdog_init_and_start>
        lte_lc_psm_req(true);
   14728:	2001      	movs	r0, #1
   1472a:	f009 fc4f 	bl	1dfcc <lte_lc_psm_req>
        err = lte_lc_init_and_connect();
   1472e:	f01e fdb5 	bl	3329c <lte_lc_init_and_connect>
        __ASSERT(err == 0, "LTE link could not be established. Rebooting\n");
   14732:	b160      	cbz	r0, 1474e <main+0x3e>
   14734:	492e      	ldr	r1, [pc, #184]	; (147f0 <main+0xe0>)
   14736:	23e3      	movs	r3, #227	; 0xe3
   14738:	4a2e      	ldr	r2, [pc, #184]	; (147f4 <main+0xe4>)
   1473a:	482f      	ldr	r0, [pc, #188]	; (147f8 <main+0xe8>)
   1473c:	f019 fd3e 	bl	2e1bc <printk>
   14740:	482e      	ldr	r0, [pc, #184]	; (147fc <main+0xec>)
   14742:	f019 fd3b 	bl	2e1bc <printk>
   14746:	21e3      	movs	r1, #227	; 0xe3
   14748:	482a      	ldr	r0, [pc, #168]	; (147f4 <main+0xe4>)
   1474a:	f01a f838 	bl	2e7be <assert_post_action>

	LOG_INF("Initializing modem\n");
    modem_configure();

    LOG_INF("Initializing modem info\n");
    modem_info_init();
   1474e:	f009 fea7 	bl	1e4a0 <modem_info_init>

    LOG_INF("Initializing environmental sensor\n");
    init_env_sensor();
   14752:	f7ff ffc7 	bl	146e4 <init_env_sensor>

    LOG_INF("Initializing bsec data message queue\n");
    k_msgq_init(&env_msg_q, env_msgq_buffer, sizeof(env_d), 10);
   14756:	230a      	movs	r3, #10
   14758:	2214      	movs	r2, #20
   1475a:	4929      	ldr	r1, [pc, #164]	; (14800 <main+0xf0>)
   1475c:	4829      	ldr	r0, [pc, #164]	; (14804 <main+0xf4>)
   1475e:	f01e fe67 	bl	33430 <k_msgq_init>

    LOG_INF("Initializing aggregated data mailbox\n");
    k_mbox_init(&env_d_mailbox);
   14762:	4829      	ldr	r0, [pc, #164]	; (14808 <main+0xf8>)
   14764:	f01e fe18 	bl	33398 <k_mbox_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14768:	2400      	movs	r4, #0
   1476a:	2507      	movs	r5, #7
   1476c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   14770:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14774:	e9cd 4400 	strd	r4, r4, [sp]
   14778:	4b24      	ldr	r3, [pc, #144]	; (1480c <main+0xfc>)
   1477a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1477e:	4924      	ldr	r1, [pc, #144]	; (14810 <main+0x100>)
   14780:	4824      	ldr	r0, [pc, #144]	; (14814 <main+0x104>)
   14782:	f015 f9cf 	bl	29b24 <z_impl_k_thread_create>

    /* Initialise data aggregation thread */
    d_ag_tid = k_thread_create(&data_ag_thread, data_ag_stack_area, K_THREAD_STACK_SIZEOF(data_ag_stack_area),
   14786:	4b24      	ldr	r3, [pc, #144]	; (14818 <main+0x108>)
   14788:	6018      	str	r0, [r3, #0]
   1478a:	4b24      	ldr	r3, [pc, #144]	; (1481c <main+0x10c>)
   1478c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   14790:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14794:	e9cd 4400 	strd	r4, r4, [sp]
   14798:	f44f 7200 	mov.w	r2, #512	; 0x200
   1479c:	4920      	ldr	r1, [pc, #128]	; (14820 <main+0x110>)
   1479e:	4821      	ldr	r0, [pc, #132]	; (14824 <main+0x114>)
   147a0:	f015 f9c0 	bl	29b24 <z_impl_k_thread_create>
        (k_thread_entry_t)process_env_data, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise time pool poll thread */
    ntp_tid = k_thread_create(&ntp_thread, ntp_stack_area, K_THREAD_STACK_SIZEOF(ntp_stack_area),
   147a4:	4b20      	ldr	r3, [pc, #128]	; (14828 <main+0x118>)
   147a6:	6018      	str	r0, [r3, #0]
   147a8:	4b20      	ldr	r3, [pc, #128]	; (1482c <main+0x11c>)
   147aa:	e9cd 4404 	strd	r4, r4, [sp, #16]
   147ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
   147b2:	e9cd 4400 	strd	r4, r4, [sp]
   147b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   147ba:	491d      	ldr	r1, [pc, #116]	; (14830 <main+0x120>)
   147bc:	481d      	ldr	r0, [pc, #116]	; (14834 <main+0x124>)
   147be:	f015 f9b1 	bl	29b24 <z_impl_k_thread_create>
        (k_thread_entry_t)ntp_poll, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise Google Cloud thread */
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   147c2:	4b1d      	ldr	r3, [pc, #116]	; (14838 <main+0x128>)
   147c4:	6018      	str	r0, [r3, #0]
   147c6:	4b1d      	ldr	r3, [pc, #116]	; (1483c <main+0x12c>)
   147c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   147cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
   147d0:	e9cd 4400 	strd	r4, r4, [sp]
   147d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   147d8:	4919      	ldr	r1, [pc, #100]	; (14840 <main+0x130>)
   147da:	481a      	ldr	r0, [pc, #104]	; (14844 <main+0x134>)
   147dc:	f015 f9a2 	bl	29b24 <z_impl_k_thread_create>
        (k_thread_entry_t)gcloud_thread, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise App thread */
    app_tid = k_thread_create(&app_thread, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area),
   147e0:	4b19      	ldr	r3, [pc, #100]	; (14848 <main+0x138>)
   147e2:	6018      	str	r0, [r3, #0]
        (k_thread_entry_t)app_gc_iot, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);
   147e4:	b007      	add	sp, #28
   147e6:	bd30      	pop	{r4, r5, pc}
   147e8:	20030208 	.word	0x20030208
   147ec:	20020dec 	.word	0x20020dec
   147f0:	00035917 	.word	0x00035917
   147f4:	00035909 	.word	0x00035909
   147f8:	00035920 	.word	0x00035920
   147fc:	0003593d 	.word	0x0003593d
   14800:	20020fbc 	.word	0x20020fbc
   14804:	20020f90 	.word	0x20020f90
   14808:	20020f7c 	.word	0x20020f7c
   1480c:	000145ad 	.word	0x000145ad
   14810:	2002d008 	.word	0x2002d008
   14814:	20020ec4 	.word	0x20020ec4
   14818:	20020ec0 	.word	0x20020ec0
   1481c:	00014589 	.word	0x00014589
   14820:	20030008 	.word	0x20030008
   14824:	200212b4 	.word	0x200212b4
   14828:	2002136c 	.word	0x2002136c
   1482c:	00014aad 	.word	0x00014aad
   14830:	2002f008 	.word	0x2002f008
   14834:	200211f8 	.word	0x200211f8
   14838:	200212b0 	.word	0x200212b0
   1483c:	00012091 	.word	0x00012091
   14840:	20029008 	.word	0x20029008
   14844:	20020d30 	.word	0x20020d30
   14848:	20020de8 	.word	0x20020de8

0001484c <reconnect_timer_handler>:
        LOG_ERR("k_msgq_put (input_timeout) failed: [%d] %s", err, strerror(-err));
        // TODO: Find a way to report this error to the application.
    }
}

void reconnect_timer_handler(struct k_timer *timer_id) {
   1484c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct gcloud_event cmd = {
   1484e:	2218      	movs	r2, #24
   14850:	2100      	movs	r1, #0
   14852:	4668      	mov	r0, sp
   14854:	f01e ffee 	bl	33834 <memset>
   14858:	2305      	movs	r3, #5
   1485a:	f88d 3000 	strb.w	r3, [sp]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1485e:	2200      	movs	r2, #0
   14860:	4669      	mov	r1, sp
   14862:	4803      	ldr	r0, [pc, #12]	; (14870 <reconnect_timer_handler+0x24>)
   14864:	f013 f954 	bl	27b10 <z_impl_k_msgq_put>

    if (err) {
        LOG_ERR("k_msgq_put (reconnect_timeout) failed: [%d] %s", err, strerror(err));
        // TODO: Find a way to report this error to the application.
    }
}
   14868:	b007      	add	sp, #28
   1486a:	f85d fb04 	ldr.w	pc, [sp], #4
   1486e:	bf00      	nop
   14870:	20020660 	.word	0x20020660

00014874 <make_jwt.constprop.0>:
static int make_jwt(char *buffer, size_t buffer_size) {
   14874:	b500      	push	{lr}
   14876:	b089      	sub	sp, #36	; 0x24
    err = jwt_init_builder(&jb, buffer, buffer_size);
   14878:	f44f 7280 	mov.w	r2, #256	; 0x100
   1487c:	4913      	ldr	r1, [pc, #76]	; (148cc <make_jwt.constprop.0+0x58>)
   1487e:	a803      	add	r0, sp, #12
   14880:	f007 ff2e 	bl	1c6e0 <jwt_init_builder>
    if (err != 0) {
   14884:	b9f8      	cbnz	r0, 148c6 <make_jwt.constprop.0+0x52>
    date_time_now(&ntp);
   14886:	4668      	mov	r0, sp
   14888:	f01e fd24 	bl	332d4 <date_time_now>
    s64_t unixtime = (ntp/1000);    //TODO: Is unix time valid as jwt timestamp?
   1488c:	e9dd 0100 	ldrd	r0, r1, [sp]
   14890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14894:	2300      	movs	r3, #0
   14896:	f7f8 ff1b 	bl	d6d0 <__aeabi_ldivmod>
    err = jwt_add_payload(&jb, expiry_time, issue_time, CONFIG_GCLOUD_PROJECT_NAME);
   1489a:	f500 4128 	add.w	r1, r0, #43008	; 0xa800
   1489e:	4602      	mov	r2, r0
   148a0:	4b0b      	ldr	r3, [pc, #44]	; (148d0 <make_jwt.constprop.0+0x5c>)
   148a2:	31c0      	adds	r1, #192	; 0xc0
   148a4:	a803      	add	r0, sp, #12
   148a6:	f007 fead 	bl	1c604 <jwt_add_payload>
    if (err != 0) {
   148aa:	b960      	cbnz	r0, 148c6 <make_jwt.constprop.0+0x52>
    err = jwt_sign(&jb, zepfull_private_der, zepfull_private_der_len);
   148ac:	4b09      	ldr	r3, [pc, #36]	; (148d4 <make_jwt.constprop.0+0x60>)
   148ae:	490a      	ldr	r1, [pc, #40]	; (148d8 <make_jwt.constprop.0+0x64>)
   148b0:	681a      	ldr	r2, [r3, #0]
   148b2:	a803      	add	r0, sp, #12
   148b4:	f007 fec2 	bl	1c63c <jwt_sign>
    if (err != 0) {
   148b8:	b928      	cbnz	r0, 148c6 <make_jwt.constprop.0+0x52>
    if (jb.overflowed != 0) {
   148ba:	f89d 3018 	ldrb.w	r3, [sp, #24]
   148be:	2b00      	cmp	r3, #0
        return -ENOMEM;
   148c0:	bf18      	it	ne
   148c2:	f06f 000b 	mvnne.w	r0, #11
}
   148c6:	b009      	add	sp, #36	; 0x24
   148c8:	f85d fb04 	ldr.w	pc, [sp], #4
   148cc:	20027469 	.word	0x20027469
   148d0:	00035c3a 	.word	0x00035c3a
   148d4:	20020084 	.word	0x20020084
   148d8:	2002031c 	.word	0x2002031c

000148dc <input_timer_handler>:
void input_timer_handler(struct k_timer *timer_id) {
   148dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct gcloud_event cmd = {
   148de:	2218      	movs	r2, #24
   148e0:	2100      	movs	r1, #0
   148e2:	4668      	mov	r0, sp
   148e4:	f01e ffa6 	bl	33834 <memset>
   148e8:	2301      	movs	r3, #1
   148ea:	f88d 3000 	strb.w	r3, [sp]
   148ee:	2200      	movs	r2, #0
   148f0:	4669      	mov	r1, sp
   148f2:	4803      	ldr	r0, [pc, #12]	; (14900 <input_timer_handler+0x24>)
   148f4:	f013 f90c 	bl	27b10 <z_impl_k_msgq_put>
}
   148f8:	b007      	add	sp, #28
   148fa:	f85d fb04 	ldr.w	pc, [sp], #4
   148fe:	bf00      	nop
   14900:	20020660 	.word	0x20020660

00014904 <gcloud_provision>:
int gcloud_provision(void) {
   14904:	b510      	push	{r4, lr}
   14906:	2400      	movs	r4, #0
        err = modem_key_mgmt_delete(sec_tag, type);
   14908:	b2e1      	uxtb	r1, r4
   1490a:	4808      	ldr	r0, [pc, #32]	; (1492c <gcloud_provision+0x28>)
   1490c:	3401      	adds	r4, #1
   1490e:	f009 fe73 	bl	1e5f8 <modem_key_mgmt_delete>
    for (enum modem_key_mgnt_cred_type type = 0; type < 5; type++) {
   14912:	2c05      	cmp	r4, #5
   14914:	d1f8      	bne.n	14908 <gcloud_provision+0x4>
    err = modem_key_mgmt_write(
   14916:	4806      	ldr	r0, [pc, #24]	; (14930 <gcloud_provision+0x2c>)
   14918:	f7fd fbb2 	bl	12080 <strlen>
}
   1491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = modem_key_mgmt_write(
   14920:	4603      	mov	r3, r0
   14922:	4a03      	ldr	r2, [pc, #12]	; (14930 <gcloud_provision+0x2c>)
   14924:	2100      	movs	r1, #0
   14926:	4801      	ldr	r0, [pc, #4]	; (1492c <gcloud_provision+0x28>)
   14928:	f009 be2e 	b.w	1e588 <modem_key_mgmt_write>
   1492c:	01010000 	.word	0x01010000
   14930:	0003596d 	.word	0x0003596d

00014934 <gcloud_connect>:
int gcloud_connect(received_config_handler_t received_config_cb) {
   14934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    received_config_handler = received_config_cb;
   14936:	4b08      	ldr	r3, [pc, #32]	; (14958 <gcloud_connect+0x24>)
    struct gcloud_event msg = {
   14938:	2218      	movs	r2, #24
    received_config_handler = received_config_cb;
   1493a:	6018      	str	r0, [r3, #0]
    struct gcloud_event msg = {
   1493c:	2100      	movs	r1, #0
   1493e:	4668      	mov	r0, sp
   14940:	f01e ff78 	bl	33834 <memset>
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   14944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14948:	4669      	mov	r1, sp
   1494a:	4804      	ldr	r0, [pc, #16]	; (1495c <gcloud_connect+0x28>)
   1494c:	f018 ffa7 	bl	2d89e <k_msgq_put_atomic>
}
   14950:	b007      	add	sp, #28
   14952:	f85d fb04 	ldr.w	pc, [sp], #4
   14956:	bf00      	nop
   14958:	200213f0 	.word	0x200213f0
   1495c:	20020660 	.word	0x20020660

00014960 <gcloud_publish>:
{
   14960:	b570      	push	{r4, r5, r6, lr}
    if (!connected) {
   14962:	4b0f      	ldr	r3, [pc, #60]	; (149a0 <gcloud_publish+0x40>)
{
   14964:	b086      	sub	sp, #24
    if (!connected) {
   14966:	781b      	ldrb	r3, [r3, #0]
{
   14968:	4605      	mov	r5, r0
   1496a:	460c      	mov	r4, r1
   1496c:	4616      	mov	r6, r2
    if (!connected) {
   1496e:	b19b      	cbz	r3, 14998 <gcloud_publish+0x38>
    struct gcloud_event cmd = {
   14970:	2304      	movs	r3, #4
   14972:	480c      	ldr	r0, [pc, #48]	; (149a4 <gcloud_publish+0x44>)
   14974:	f88d 3000 	strb.w	r3, [sp]
   14978:	9001      	str	r0, [sp, #4]
                    .size = strlen(GCLOUD_TOPIC)
   1497a:	f7fd fb81 	bl	12080 <strlen>
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   1497e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    struct gcloud_event cmd = {
   14982:	9002      	str	r0, [sp, #8]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   14984:	4669      	mov	r1, sp
   14986:	4808      	ldr	r0, [pc, #32]	; (149a8 <gcloud_publish+0x48>)
    struct gcloud_event cmd = {
   14988:	f88d 600c 	strb.w	r6, [sp, #12]
   1498c:	e9cd 5404 	strd	r5, r4, [sp, #16]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   14990:	f018 ff85 	bl	2d89e <k_msgq_put_atomic>
}
   14994:	b006      	add	sp, #24
   14996:	bd70      	pop	{r4, r5, r6, pc}
        return -ENOTCONN;
   14998:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1499c:	e7fa      	b.n	14994 <gcloud_publish+0x34>
   1499e:	bf00      	nop
   149a0:	20027467 	.word	0x20027467
   149a4:	00035ba3 	.word	0x00035ba3
   149a8:	20020660 	.word	0x20020660

000149ac <mqtt_event_handler>:

static void mqtt_event_handler(struct mqtt_client *client,
                const struct mqtt_evt *evt)
{
   149ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;
    LOG_INF("MQTT event: %d", evt->type);

    switch (evt->type) {
   149ae:	780b      	ldrb	r3, [r1, #0]
{
   149b0:	b089      	sub	sp, #36	; 0x24
   149b2:	460c      	mov	r4, r1
    switch (evt->type) {
   149b4:	2b04      	cmp	r3, #4
   149b6:	d809      	bhi.n	149cc <mqtt_event_handler+0x20>
   149b8:	e8df f003 	tbb	[pc, r3]
   149bc:	08234a03 	.word	0x08234a03
   149c0:	5f          	.byte	0x5f
   149c1:	00          	.byte	0x00
        /* Response to connack request */
        case MQTT_EVT_CONNACK:
            LOG_DBG("Got CONNACK");
            if (evt->result != 0) {
   149c2:	69cc      	ldr	r4, [r1, #28]
   149c4:	b124      	cbz	r4, 149d0 <mqtt_event_handler+0x24>
                LOG_ERR("MQTT connect failed: [%d] %s", err, strerror(err));
                sys_reboot(0); //TODO: Handle error
   149c6:	2000      	movs	r0, #0
   149c8:	f003 fa7c 	bl	17ec4 <sys_reboot>
        
        default:
            LOG_ERR("Unknown mqtt event type");
            break;
    }
}
   149cc:	b009      	add	sp, #36	; 0x24
   149ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            connected = true;
   149d0:	2201      	movs	r2, #1
   149d2:	4b2f      	ldr	r3, [pc, #188]	; (14a90 <mqtt_event_handler+0xe4>)
   149d4:	701a      	strb	r2, [r3, #0]
            connecting = false;
   149d6:	4b2f      	ldr	r3, [pc, #188]	; (14a94 <mqtt_event_handler+0xe8>)
   149d8:	701c      	strb	r4, [r3, #0]
	z_impl_k_timer_start(timer, duration, period);
   149da:	4a2f      	ldr	r2, [pc, #188]	; (14a98 <mqtt_event_handler+0xec>)
   149dc:	482f      	ldr	r0, [pc, #188]	; (14a9c <mqtt_event_handler+0xf0>)
   149de:	4611      	mov	r1, r2
   149e0:	f015 fdfe 	bl	2a5e0 <z_impl_k_timer_start>
            struct gcloud_event cmd = {
   149e4:	4621      	mov	r1, r4
   149e6:	2218      	movs	r2, #24
   149e8:	4668      	mov	r0, sp
   149ea:	f01e ff23 	bl	33834 <memset>
   149ee:	2307      	movs	r3, #7
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   149f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   149f4:	4669      	mov	r1, sp
   149f6:	482a      	ldr	r0, [pc, #168]	; (14aa0 <mqtt_event_handler+0xf4>)
            struct gcloud_event cmd = {
   149f8:	f88d 3000 	strb.w	r3, [sp]
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   149fc:	f018 ff4f 	bl	2d89e <k_msgq_put_atomic>
            if (err) {
   14a00:	e7e4      	b.n	149cc <mqtt_event_handler+0x20>
            if (evt->param.publish.message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   14a02:	7b0b      	ldrb	r3, [r1, #12]
   14a04:	2b01      	cmp	r3, #1
   14a06:	d105      	bne.n	14a14 <mqtt_event_handler+0x68>
                const struct mqtt_puback_param ack = {
   14a08:	8b0b      	ldrh	r3, [r1, #24]
                mqtt_publish_qos1_ack(client, &ack);
   14a0a:	4669      	mov	r1, sp
                const struct mqtt_puback_param ack = {
   14a0c:	f8ad 3000 	strh.w	r3, [sp]
                mqtt_publish_qos1_ack(client, &ack);
   14a10:	f01d fd29 	bl	32466 <mqtt_publish_qos1_ack>
            if(evt->param.publish.message.payload.len <= 2) {
   14a14:	6967      	ldr	r7, [r4, #20]
   14a16:	2f02      	cmp	r7, #2
   14a18:	d9d8      	bls.n	149cc <mqtt_event_handler+0x20>
            struct mqtt_evt event = *evt;
   14a1a:	466d      	mov	r5, sp
   14a1c:	4626      	mov	r6, r4
   14a1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   14a26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            char * str = calloc(evt->param.publish.message.payload.len, sizeof(char) + 1);
   14a2a:	2102      	movs	r1, #2
   14a2c:	4638      	mov	r0, r7
   14a2e:	f017 ffc1 	bl	2c9b4 <calloc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14a32:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   14a36:	4605      	mov	r5, r0
   14a38:	f01e fec2 	bl	337c0 <memcpy>
            if (received_config_handler != NULL) {
   14a3c:	4b19      	ldr	r3, [pc, #100]	; (14aa4 <mqtt_event_handler+0xf8>)
            event.param.publish.message.payload.data = str;
   14a3e:	9504      	str	r5, [sp, #16]
            if (received_config_handler != NULL) {
   14a40:	681b      	ldr	r3, [r3, #0]
   14a42:	b10b      	cbz	r3, 14a48 <mqtt_event_handler+0x9c>
                received_config_handler(&event.param.publish.message);
   14a44:	a801      	add	r0, sp, #4
   14a46:	4798      	blx	r3
            free(str);
   14a48:	4628      	mov	r0, r5
   14a4a:	f017 ffc3 	bl	2c9d4 <free>
            break;
   14a4e:	e7bd      	b.n	149cc <mqtt_event_handler+0x20>
	z_impl_k_timer_stop(timer);
   14a50:	4815      	ldr	r0, [pc, #84]	; (14aa8 <mqtt_event_handler+0xfc>)
   14a52:	f01e fe1b 	bl	3368c <z_impl_k_timer_stop>
   14a56:	4811      	ldr	r0, [pc, #68]	; (14a9c <mqtt_event_handler+0xf0>)
   14a58:	f01e fe18 	bl	3368c <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
   14a5c:	4810      	ldr	r0, [pc, #64]	; (14aa0 <mqtt_event_handler+0xf4>)
   14a5e:	f013 f997 	bl	27d90 <z_impl_k_msgq_purge>
            if (connected || connecting) {
   14a62:	4b0b      	ldr	r3, [pc, #44]	; (14a90 <mqtt_event_handler+0xe4>)
   14a64:	781b      	ldrb	r3, [r3, #0]
   14a66:	b91b      	cbnz	r3, 14a70 <mqtt_event_handler+0xc4>
   14a68:	4b0a      	ldr	r3, [pc, #40]	; (14a94 <mqtt_event_handler+0xe8>)
   14a6a:	781b      	ldrb	r3, [r3, #0]
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d0ad      	beq.n	149cc <mqtt_event_handler+0x20>
                err = gcloud_connect(received_config_handler);
   14a70:	4b0c      	ldr	r3, [pc, #48]	; (14aa4 <mqtt_event_handler+0xf8>)
   14a72:	6818      	ldr	r0, [r3, #0]
   14a74:	f7ff ff5e 	bl	14934 <gcloud_connect>
                if (err) {
   14a78:	e7a8      	b.n	149cc <mqtt_event_handler+0x20>
            if (evt->result != 0) {
   14a7a:	69cb      	ldr	r3, [r1, #28]
   14a7c:	2b00      	cmp	r3, #0
   14a7e:	d1a5      	bne.n	149cc <mqtt_event_handler+0x20>
            const struct mqtt_pubrel_param rel_param = {
   14a80:	888b      	ldrh	r3, [r1, #4]
            err = mqtt_publish_qos2_release(client, &rel_param);
   14a82:	4669      	mov	r1, sp
            const struct mqtt_pubrel_param rel_param = {
   14a84:	f8ad 3000 	strh.w	r3, [sp]
            err = mqtt_publish_qos2_release(client, &rel_param);
   14a88:	f01d fd14 	bl	324b4 <mqtt_publish_qos2_release>
}
   14a8c:	e79e      	b.n	149cc <mqtt_event_handler+0x20>
   14a8e:	bf00      	nop
   14a90:	20027467 	.word	0x20027467
   14a94:	20027468 	.word	0x20027468
   14a98:	02932e00 	.word	0x02932e00
   14a9c:	200204e8 	.word	0x200204e8
   14aa0:	20020660 	.word	0x20020660
   14aa4:	200213f0 	.word	0x200213f0
   14aa8:	200204bc 	.word	0x200204bc

00014aac <gcloud_thread>:

extern void gcloud_thread(void *unused1, void *unused2, void *unused3) 
{
   14aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool sent_flag = false;

    struct gcloud_event event;
    struct mqtt_publish_param msg;

    k_timer_init(&input_timer, input_timer_handler, NULL);
   14ab0:	2200      	movs	r2, #0
{
   14ab2:	b09e      	sub	sp, #120	; 0x78
    k_timer_init(&input_timer, input_timer_handler, NULL);
   14ab4:	4961      	ldr	r1, [pc, #388]	; (14c3c <gcloud_thread+0x190>)
   14ab6:	4862      	ldr	r0, [pc, #392]	; (14c40 <gcloud_thread+0x194>)
   14ab8:	f01e fddc 	bl	33674 <k_timer_init>
    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   14abc:	2200      	movs	r2, #0
   14abe:	4961      	ldr	r1, [pc, #388]	; (14c44 <gcloud_thread+0x198>)
   14ac0:	4861      	ldr	r0, [pc, #388]	; (14c48 <gcloud_thread+0x19c>)
   14ac2:	f01e fdd7 	bl	33674 <k_timer_init>

    while (true) {
        LOG_INF("Google Cloud Thread Running\n");

        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   14ac6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 14c80 <gcloud_thread+0x1d4>
                }

            };
            break;
            case SUBSCRIBE:
            if (connected) {
   14aca:	4e60      	ldr	r6, [pc, #384]	; (14c4c <gcloud_thread+0x1a0>)
    const struct mqtt_subscription_list subscriptions = {
   14acc:	4f60      	ldr	r7, [pc, #384]	; (14c50 <gcloud_thread+0x1a4>)
        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   14ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ad2:	a902      	add	r1, sp, #8
   14ad4:	4640      	mov	r0, r8
   14ad6:	f018 fed2 	bl	2d87e <k_msgq_get_atomic>
        switch (event.type) {
   14ada:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14ade:	2b07      	cmp	r3, #7
   14ae0:	d8f5      	bhi.n	14ace <gcloud_thread+0x22>
   14ae2:	e8df f003 	tbb	[pc, r3]
   14ae6:	6204      	.short	0x6204
   14ae8:	856d6d66 	.word	0x856d6d66
   14aec:	9c85      	.short	0x9c85
    struct addrinfo hints = {
   14aee:	2401      	movs	r4, #1
   14af0:	2240      	movs	r2, #64	; 0x40
   14af2:	2100      	movs	r1, #0
   14af4:	a80e      	add	r0, sp, #56	; 0x38
   14af6:	f01e fe9d 	bl	33834 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   14afa:	ab01      	add	r3, sp, #4
   14afc:	aa0e      	add	r2, sp, #56	; 0x38
   14afe:	2100      	movs	r1, #0
   14b00:	4854      	ldr	r0, [pc, #336]	; (14c54 <gcloud_thread+0x1a8>)
   14b02:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   14b06:	f019 fe98 	bl	2e83a <zsock_getaddrinfo>
    if (err) {
   14b0a:	b970      	cbnz	r0, 14b2a <gcloud_thread+0x7e>
    addr = result;
   14b0c:	9801      	ldr	r0, [sp, #4]
    while (addr != NULL) {
   14b0e:	b150      	cbz	r0, 14b26 <gcloud_thread+0x7a>
        if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   14b10:	6943      	ldr	r3, [r0, #20]
   14b12:	2b08      	cmp	r3, #8
   14b14:	d107      	bne.n	14b26 <gcloud_thread+0x7a>
                ->sin_addr.s_addr;
   14b16:	6983      	ldr	r3, [r0, #24]
   14b18:	685a      	ldr	r2, [r3, #4]
            broker4->sin_addr.s_addr =
   14b1a:	4b4f      	ldr	r3, [pc, #316]	; (14c58 <gcloud_thread+0x1ac>)
   14b1c:	605a      	str	r2, [r3, #4]
            broker4->sin_port = htons(BROKER_PORT);
   14b1e:	f24b 3222 	movw	r2, #45858	; 0xb322
            broker4->sin_family = AF_INET;
   14b22:	801c      	strh	r4, [r3, #0]
            broker4->sin_port = htons(BROKER_PORT);
   14b24:	805a      	strh	r2, [r3, #2]
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   14b26:	f019 fe8a 	bl	2e83e <zsock_freeaddrinfo>
    mqtt_client_init(&client);
   14b2a:	4c4c      	ldr	r4, [pc, #304]	; (14c5c <gcloud_thread+0x1b0>)
                make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   14b2c:	f7ff fea2 	bl	14874 <make_jwt.constprop.0>
    mqtt_client_init(&client);
   14b30:	4620      	mov	r0, r4
   14b32:	f01d fbf6 	bl	32322 <mqtt_client_init>
    int err = make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   14b36:	f7ff fe9d 	bl	14874 <make_jwt.constprop.0>
    if (err != 0) {
   14b3a:	bb48      	cbnz	r0, 14b90 <gcloud_thread+0xe4>
    jwt_token.size = strlen(jwt_buffer);
   14b3c:	4848      	ldr	r0, [pc, #288]	; (14c60 <gcloud_thread+0x1b4>)
   14b3e:	f7fd fa9f 	bl	12080 <strlen>
   14b42:	4d48      	ldr	r5, [pc, #288]	; (14c64 <gcloud_thread+0x1b8>)
    client.broker = &mqtt_broker;
   14b44:	4b44      	ldr	r3, [pc, #272]	; (14c58 <gcloud_thread+0x1ac>)
    jwt_token.size = strlen(jwt_buffer);
   14b46:	6068      	str	r0, [r5, #4]
    client.broker = &mqtt_broker;
   14b48:	6523      	str	r3, [r4, #80]	; 0x50
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   14b4a:	4847      	ldr	r0, [pc, #284]	; (14c68 <gcloud_thread+0x1bc>)
    client.evt_cb = mqtt_event_handler;
   14b4c:	4b47      	ldr	r3, [pc, #284]	; (14c6c <gcloud_thread+0x1c0>)
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   14b4e:	64a0      	str	r0, [r4, #72]	; 0x48
    client.evt_cb = mqtt_event_handler;
   14b50:	6663      	str	r3, [r4, #100]	; 0x64
    client.client_id.size = strlen(GCLOUD_ID);
   14b52:	f7fd fa95 	bl	12080 <strlen>
	client.user_name = &username;
   14b56:	4b46      	ldr	r3, [pc, #280]	; (14c70 <gcloud_thread+0x1c4>)
    client.client_id.size = strlen(GCLOUD_ID);
   14b58:	64e0      	str	r0, [r4, #76]	; 0x4c
	client.user_name = &username;
   14b5a:	6563      	str	r3, [r4, #84]	; 0x54
    client.protocol_version = MQTT_VERSION_3_1_1;
   14b5c:	2304      	movs	r3, #4
   14b5e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   14b62:	4b44      	ldr	r3, [pc, #272]	; (14c74 <gcloud_thread+0x1c8>)
	client.password = &jwt_token;
   14b64:	65a5      	str	r5, [r4, #88]	; 0x58
	client.rx_buf = rx_buffer;
   14b66:	66a3      	str	r3, [r4, #104]	; 0x68
    client.rx_buf_size = 512;
   14b68:	f44f 7300 	mov.w	r3, #512	; 0x200
   14b6c:	66e3      	str	r3, [r4, #108]	; 0x6c
	client.tx_buf = tx_buffer;
   14b6e:	4b42      	ldr	r3, [pc, #264]	; (14c78 <gcloud_thread+0x1cc>)
   14b70:	6723      	str	r3, [r4, #112]	; 0x70
    client.tx_buf_size = 1024;
   14b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14b76:	6763      	str	r3, [r4, #116]	; 0x74
	client.transport.type = MQTT_TRANSPORT_SECURE;
   14b78:	2301      	movs	r3, #1
   14b7a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    client.clean_session = 1;
   14b7e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   14b82:	f043 0302 	orr.w	r3, r3, #2
   14b86:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    client.keepalive = 120;
   14b8a:	2378      	movs	r3, #120	; 0x78
   14b8c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	z_impl_k_timer_start(timer, duration, period);
   14b90:	f242 7210 	movw	r2, #10000	; 0x2710
   14b94:	482a      	ldr	r0, [pc, #168]	; (14c40 <gcloud_thread+0x194>)
   14b96:	4611      	mov	r1, r2
   14b98:	f015 fd22 	bl	2a5e0 <z_impl_k_timer_start>
                connecting = true;
   14b9c:	2201      	movs	r2, #1
   14b9e:	4b37      	ldr	r3, [pc, #220]	; (14c7c <gcloud_thread+0x1d0>)
                err = mqtt_connect(&client);
   14ba0:	482e      	ldr	r0, [pc, #184]	; (14c5c <gcloud_thread+0x1b0>)
                connecting = true;
   14ba2:	701a      	strb	r2, [r3, #0]
                err = mqtt_connect(&client);
   14ba4:	f01d fbd6 	bl	32354 <mqtt_connect>
                if (err) {
   14ba8:	e791      	b.n	14ace <gcloud_thread+0x22>
                err = mqtt_input(&client);
   14baa:	482c      	ldr	r0, [pc, #176]	; (14c5c <gcloud_thread+0x1b0>)
   14bac:	f01d fd4b 	bl	32646 <mqtt_input>
                if (err) {
   14bb0:	e78d      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bb2:	7833      	ldrb	r3, [r6, #0]
   14bb4:	2b00      	cmp	r3, #0
   14bb6:	d08a      	beq.n	14ace <gcloud_thread+0x22>
                err = mqtt_live(&client);
   14bb8:	4828      	ldr	r0, [pc, #160]	; (14c5c <gcloud_thread+0x1b0>)
   14bba:	f01d fd1d 	bl	325f8 <mqtt_live>
                if (err) {
   14bbe:	e786      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bc0:	7833      	ldrb	r3, [r6, #0]
   14bc2:	2b00      	cmp	r3, #0
   14bc4:	d083      	beq.n	14ace <gcloud_thread+0x22>
                msg.message = event.param.publish;
   14bc6:	ac08      	add	r4, sp, #32
   14bc8:	ad03      	add	r5, sp, #12
   14bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14bce:	682b      	ldr	r3, [r5, #0]
   14bd0:	6023      	str	r3, [r4, #0]
                msg.message_id = sys_rand32_get();
   14bd2:	f007 fcd7 	bl	1c584 <sys_rand32_get>
                msg.dup_flag = 0;
   14bd6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
                msg.message_id = sys_rand32_get();
   14bda:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                msg.dup_flag = 0;
   14bde:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   14be2:	a908      	add	r1, sp, #32
   14be4:	481d      	ldr	r0, [pc, #116]	; (14c5c <gcloud_thread+0x1b0>)
                msg.dup_flag = 0;
   14be6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
                err = mqtt_publish(&client, &msg);
   14bea:	f01d fbf7 	bl	323dc <mqtt_publish>
                LOG_ERR("Unknown event type received");
                // TODO: Find a way to report this error to the application.
        }
        /* If a message has been sent */
        if (sent_flag == true) {
           sent_flag = false;
   14bee:	e76e      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bf0:	7833      	ldrb	r3, [r6, #0]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	f43f af6b 	beq.w	14ace <gcloud_thread+0x22>
	z_impl_k_timer_stop(timer);
   14bf8:	4813      	ldr	r0, [pc, #76]	; (14c48 <gcloud_thread+0x19c>)
   14bfa:	f01e fd47 	bl	3368c <z_impl_k_timer_stop>
                err = mqtt_disconnect(&client);
   14bfe:	4817      	ldr	r0, [pc, #92]	; (14c5c <gcloud_thread+0x1b0>)
   14c00:	f01d fc7f 	bl	32502 <mqtt_disconnect>
	z_impl_k_msgq_purge(msgq);
   14c04:	4640      	mov	r0, r8
   14c06:	f013 f8c3 	bl	27d90 <z_impl_k_msgq_purge>
                connected = false;
   14c0a:	2200      	movs	r2, #0
                if (event.type == DISCONNECT) {
   14c0c:	f89d 3008 	ldrb.w	r3, [sp, #8]
                connected = false;
   14c10:	7032      	strb	r2, [r6, #0]
                if (event.type == DISCONNECT) {
   14c12:	2b06      	cmp	r3, #6
                    connecting = true;
   14c14:	bf18      	it	ne
   14c16:	2201      	movne	r2, #1
   14c18:	4b18      	ldr	r3, [pc, #96]	; (14c7c <gcloud_thread+0x1d0>)
   14c1a:	701a      	strb	r2, [r3, #0]
   14c1c:	e757      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14c1e:	7833      	ldrb	r3, [r6, #0]
   14c20:	2b00      	cmp	r3, #0
   14c22:	f43f af54 	beq.w	14ace <gcloud_thread+0x22>
    const struct mqtt_subscription_list subscriptions = {
   14c26:	e897 0003 	ldmia.w	r7, {r0, r1}
   14c2a:	ab0e      	add	r3, sp, #56	; 0x38
   14c2c:	e883 0003 	stmia.w	r3, {r0, r1}
    return mqtt_subscribe(&client, &subscriptions);
   14c30:	4619      	mov	r1, r3
   14c32:	480a      	ldr	r0, [pc, #40]	; (14c5c <gcloud_thread+0x1b0>)
   14c34:	f01d fc8e 	bl	32554 <mqtt_subscribe>
   14c38:	e749      	b.n	14ace <gcloud_thread+0x22>
   14c3a:	bf00      	nop
   14c3c:	000148dd 	.word	0x000148dd
   14c40:	200204bc 	.word	0x200204bc
   14c44:	0001484d 	.word	0x0001484d
   14c48:	200204e8 	.word	0x200204e8
   14c4c:	20027467 	.word	0x20027467
   14c50:	00034580 	.word	0x00034580
   14c54:	00035bc1 	.word	0x00035bc1
   14c58:	20027454 	.word	0x20027454
   14c5c:	20021370 	.word	0x20021370
   14c60:	20027469 	.word	0x20027469
   14c64:	2002006c 	.word	0x2002006c
   14c68:	00035bd5 	.word	0x00035bd5
   14c6c:	000149ad 	.word	0x000149ad
   14c70:	20020074 	.word	0x20020074
   14c74:	20027569 	.word	0x20027569
   14c78:	20027969 	.word	0x20027969
   14c7c:	20027468 	.word	0x20027468
   14c80:	20020660 	.word	0x20020660

00014c84 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = {0x00, 0x00, 0xC0, 0xE0,
					       0xF0, 0xF8, 0xFC};
static const char *parse_string(cJSON *item, const char *str)
{
   14c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const char *ptr = str + 1;
	char *ptr2;
	char *out;
	int len = 0;
	unsigned uc, uc2;
	if (*str != '\"') {
   14c88:	780b      	ldrb	r3, [r1, #0]
{
   14c8a:	4606      	mov	r6, r0
	if (*str != '\"') {
   14c8c:	2b22      	cmp	r3, #34	; 0x22
   14c8e:	d12b      	bne.n	14ce8 <parse_string+0x64>
	const char *ptr = str + 1;
   14c90:	f101 0901 	add.w	r9, r1, #1
   14c94:	464b      	mov	r3, r9
   14c96:	2400      	movs	r4, #0
		ep = str;
		return 0;
	} /* not a string! */

	while (*ptr != '\"' && *ptr && ++len)
   14c98:	781a      	ldrb	r2, [r3, #0]
   14c9a:	4620      	mov	r0, r4
   14c9c:	2a22      	cmp	r2, #34	; 0x22
   14c9e:	d003      	beq.n	14ca8 <parse_string+0x24>
   14ca0:	b112      	cbz	r2, 14ca8 <parse_string+0x24>
   14ca2:	1c60      	adds	r0, r4, #1
   14ca4:	d126      	bne.n	14cf4 <parse_string+0x70>
   14ca6:	2000      	movs	r0, #0
		if (*ptr++ == '\\')
			ptr++; /* Skip escaped quotes. */

	out = (char *)cJSON_malloc(
   14ca8:	4b5b      	ldr	r3, [pc, #364]	; (14e18 <parse_string+0x194>)
   14caa:	3001      	adds	r0, #1
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	4798      	blx	r3
		len +
		1); /* This is how long we need for the string, roughly. */
	if (!out)
   14cb0:	4607      	mov	r7, r0
   14cb2:	b1e0      	cbz	r0, 14cee <parse_string+0x6a>
   14cb4:	4604      	mov	r4, r0
				break;
			case 'f':
				*ptr2++ = '\f';
				break;
			case 'n':
				*ptr2++ = '\n';
   14cb6:	f04f 0a0a 	mov.w	sl, #10
				break;
			case 'r':
				*ptr2++ = '\r';
				break;
			case 't':
				*ptr2++ = '\t';
   14cba:	f04f 0809 	mov.w	r8, #9
				*ptr2++ = '\r';
   14cbe:	f04f 0b0d 	mov.w	fp, #13
	while (*ptr != '\"' && *ptr) {
   14cc2:	f899 3000 	ldrb.w	r3, [r9]
   14cc6:	2b22      	cmp	r3, #34	; 0x22
   14cc8:	d000      	beq.n	14ccc <parse_string+0x48>
   14cca:	b9cb      	cbnz	r3, 14d00 <parse_string+0x7c>
				break;
			}
			ptr++;
		}
	}
	*ptr2 = 0;
   14ccc:	2300      	movs	r3, #0
   14cce:	7023      	strb	r3, [r4, #0]
	if (*ptr == '\"')
   14cd0:	f899 3000 	ldrb.w	r3, [r9]
		ptr++;
	item->valuestring = out;
   14cd4:	6137      	str	r7, [r6, #16]
	if (*ptr == '\"')
   14cd6:	2b22      	cmp	r3, #34	; 0x22
	item->type = cJSON_String;
   14cd8:	f04f 0304 	mov.w	r3, #4
		ptr++;
   14cdc:	bf08      	it	eq
   14cde:	f109 0901 	addeq.w	r9, r9, #1
	item->type = cJSON_String;
   14ce2:	60f3      	str	r3, [r6, #12]
	return ptr;
   14ce4:	464f      	mov	r7, r9
   14ce6:	e002      	b.n	14cee <parse_string+0x6a>
		return 0;
   14ce8:	2700      	movs	r7, #0
		ep = str;
   14cea:	4b4c      	ldr	r3, [pc, #304]	; (14e1c <parse_string+0x198>)
   14cec:	6019      	str	r1, [r3, #0]
}
   14cee:	4638      	mov	r0, r7
   14cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (*ptr++ == '\\')
   14cf4:	2a5c      	cmp	r2, #92	; 0x5c
   14cf6:	bf14      	ite	ne
   14cf8:	3301      	addne	r3, #1
			ptr++; /* Skip escaped quotes. */
   14cfa:	3302      	addeq	r3, #2
   14cfc:	3401      	adds	r4, #1
   14cfe:	e7cb      	b.n	14c98 <parse_string+0x14>
		if (*ptr != '\\')
   14d00:	2b5c      	cmp	r3, #92	; 0x5c
   14d02:	f109 0c01 	add.w	ip, r9, #1
   14d06:	d003      	beq.n	14d10 <parse_string+0x8c>
			*ptr2++ = *ptr++;
   14d08:	f804 3b01 	strb.w	r3, [r4], #1
   14d0c:	46e1      	mov	r9, ip
   14d0e:	e7d8      	b.n	14cc2 <parse_string+0x3e>
			switch (*ptr) {
   14d10:	f899 3001 	ldrb.w	r3, [r9, #1]
   14d14:	2b6e      	cmp	r3, #110	; 0x6e
   14d16:	d01a      	beq.n	14d4e <parse_string+0xca>
   14d18:	d808      	bhi.n	14d2c <parse_string+0xa8>
   14d1a:	2b62      	cmp	r3, #98	; 0x62
   14d1c:	f104 0101 	add.w	r1, r4, #1
   14d20:	d00d      	beq.n	14d3e <parse_string+0xba>
   14d22:	2b66      	cmp	r3, #102	; 0x66
   14d24:	d011      	beq.n	14d4a <parse_string+0xc6>
				*ptr2++ = *ptr;
   14d26:	f804 3b01 	strb.w	r3, [r4], #1
				break;
   14d2a:	e00b      	b.n	14d44 <parse_string+0xc0>
			switch (*ptr) {
   14d2c:	2b74      	cmp	r3, #116	; 0x74
   14d2e:	d011      	beq.n	14d54 <parse_string+0xd0>
   14d30:	2b75      	cmp	r3, #117	; 0x75
   14d32:	d012      	beq.n	14d5a <parse_string+0xd6>
   14d34:	2b72      	cmp	r3, #114	; 0x72
   14d36:	d1f6      	bne.n	14d26 <parse_string+0xa2>
				*ptr2++ = '\r';
   14d38:	f804 bb01 	strb.w	fp, [r4], #1
				break;
   14d3c:	e002      	b.n	14d44 <parse_string+0xc0>
				*ptr2++ = '\b';
   14d3e:	2308      	movs	r3, #8
				*ptr2++ = '\f';
   14d40:	7023      	strb	r3, [r4, #0]
   14d42:	460c      	mov	r4, r1
			ptr++;
   14d44:	f10c 0c01 	add.w	ip, ip, #1
   14d48:	e7e0      	b.n	14d0c <parse_string+0x88>
				*ptr2++ = '\f';
   14d4a:	230c      	movs	r3, #12
   14d4c:	e7f8      	b.n	14d40 <parse_string+0xbc>
				*ptr2++ = '\n';
   14d4e:	f804 ab01 	strb.w	sl, [r4], #1
				break;
   14d52:	e7f7      	b.n	14d44 <parse_string+0xc0>
				*ptr2++ = '\t';
   14d54:	f804 8b01 	strb.w	r8, [r4], #1
				break;
   14d58:	e7f4      	b.n	14d44 <parse_string+0xc0>
				uc = parse_hex4(ptr + 1);
   14d5a:	f109 0002 	add.w	r0, r9, #2
   14d5e:	f018 fdae 	bl	2d8be <parse_hex4>
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   14d62:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   14d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
				uc = parse_hex4(ptr + 1);
   14d6a:	4605      	mov	r5, r0
				ptr += 4; /* get the unicode char. */
   14d6c:	f109 0c05 	add.w	ip, r9, #5
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   14d70:	d3e8      	bcc.n	14d44 <parse_string+0xc0>
   14d72:	2800      	cmp	r0, #0
   14d74:	d0e6      	beq.n	14d44 <parse_string+0xc0>
				if (uc >= 0xD800 &&
   14d76:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   14d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14d7e:	d223      	bcs.n	14dc8 <parse_string+0x144>
					if (ptr[1] != '\\' || ptr[2] != 'u')
   14d80:	f899 3006 	ldrb.w	r3, [r9, #6]
   14d84:	2b5c      	cmp	r3, #92	; 0x5c
   14d86:	d1dd      	bne.n	14d44 <parse_string+0xc0>
   14d88:	f899 3007 	ldrb.w	r3, [r9, #7]
   14d8c:	2b75      	cmp	r3, #117	; 0x75
   14d8e:	d1d9      	bne.n	14d44 <parse_string+0xc0>
					uc2 = parse_hex4(ptr + 3);
   14d90:	f109 0008 	add.w	r0, r9, #8
   14d94:	f018 fd93 	bl	2d8be <parse_hex4>
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   14d98:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   14d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					ptr += 6;
   14da0:	f109 0c0b 	add.w	ip, r9, #11
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   14da4:	d2ce      	bcs.n	14d44 <parse_string+0xc0>
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   14da6:	4b1e      	ldr	r3, [pc, #120]	; (14e20 <parse_string+0x19c>)
							(uc2 & 0x3FF));
   14da8:	f3c0 0009 	ubfx	r0, r0, #0, #10
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   14dac:	ea03 2585 	and.w	r5, r3, r5, lsl #10
   14db0:	4305      	orrs	r5, r0
   14db2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14db6:	f005 033f 	and.w	r3, r5, #63	; 0x3f
   14dba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14dbe:	70e3      	strb	r3, [r4, #3]
   14dc0:	1ce0      	adds	r0, r4, #3
					uc >>= 6;
   14dc2:	09ad      	lsrs	r5, r5, #6
				len = 4;
   14dc4:	2304      	movs	r3, #4
   14dc6:	e013      	b.n	14df0 <parse_string+0x16c>
				if (uc < 0x80)
   14dc8:	287f      	cmp	r0, #127	; 0x7f
   14dca:	d809      	bhi.n	14de0 <parse_string+0x15c>
					len = 1;
   14dcc:	2301      	movs	r3, #1
				ptr2 += len;
   14dce:	3401      	adds	r4, #1
					*--ptr2 = (uc | firstByteMark[len]);
   14dd0:	4a14      	ldr	r2, [pc, #80]	; (14e24 <parse_string+0x1a0>)
   14dd2:	5cd1      	ldrb	r1, [r2, r3]
				ptr2 += len;
   14dd4:	3b01      	subs	r3, #1
					*--ptr2 = (uc | firstByteMark[len]);
   14dd6:	430d      	orrs	r5, r1
   14dd8:	f804 5c01 	strb.w	r5, [r4, #-1]
				ptr2 += len;
   14ddc:	441c      	add	r4, r3
				break;
   14dde:	e7b1      	b.n	14d44 <parse_string+0xc0>
				else if (uc < 0x800)
   14de0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14de4:	d30d      	bcc.n	14e02 <parse_string+0x17e>
				else if (uc < 0x10000)
   14de6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14dea:	d2e4      	bcs.n	14db6 <parse_string+0x132>
					len = 3;
   14dec:	2303      	movs	r3, #3
				ptr2 += len;
   14dee:	1ce0      	adds	r0, r4, #3
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14df0:	f005 043f 	and.w	r4, r5, #63	; 0x3f
   14df4:	f064 047f 	orn	r4, r4, #127	; 0x7f
   14df8:	1e41      	subs	r1, r0, #1
   14dfa:	f800 4c01 	strb.w	r4, [r0, #-1]
					uc >>= 6;
   14dfe:	09ad      	lsrs	r5, r5, #6
   14e00:	e001      	b.n	14e06 <parse_string+0x182>
					len = 2;
   14e02:	2302      	movs	r3, #2
				ptr2 += len;
   14e04:	1ca1      	adds	r1, r4, #2
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14e06:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   14e0a:	f060 007f 	orn	r0, r0, #127	; 0x7f
   14e0e:	1e4c      	subs	r4, r1, #1
   14e10:	f801 0c01 	strb.w	r0, [r1, #-1]
					uc >>= 6;
   14e14:	09ad      	lsrs	r5, r5, #6
   14e16:	e7db      	b.n	14dd0 <parse_string+0x14c>
   14e18:	20020080 	.word	0x20020080
   14e1c:	200213f4 	.word	0x200213f4
   14e20:	000ffc00 	.word	0x000ffc00
   14e24:	00035c72 	.word	0x00035c72

00014e28 <cJSON_New_Item>:
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   14e28:	4b06      	ldr	r3, [pc, #24]	; (14e44 <cJSON_New_Item+0x1c>)
{
   14e2a:	b510      	push	{r4, lr}
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   14e2c:	681b      	ldr	r3, [r3, #0]
   14e2e:	2028      	movs	r0, #40	; 0x28
   14e30:	4798      	blx	r3
	if (node)
   14e32:	4604      	mov	r4, r0
   14e34:	b118      	cbz	r0, 14e3e <cJSON_New_Item+0x16>
__ssp_bos_icheck3(memset, void *, int)
   14e36:	2228      	movs	r2, #40	; 0x28
   14e38:	2100      	movs	r1, #0
   14e3a:	f01e fcfb 	bl	33834 <memset>
}
   14e3e:	4620      	mov	r0, r4
   14e40:	bd10      	pop	{r4, pc}
   14e42:	bf00      	nop
   14e44:	20020080 	.word	0x20020080

00014e48 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value)
{
   14e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e4a:	4605      	mov	r5, r0
	if (!value)
   14e4c:	460c      	mov	r4, r1
   14e4e:	b909      	cbnz	r1, 14e54 <parse_value+0xc>
	if (*value == '{') {
		return parse_object(item, value);
	}

	ep = value;
	return 0; /* failure. */
   14e50:	2400      	movs	r4, #0
   14e52:	e011      	b.n	14e78 <parse_value+0x30>
	if (!strncmp(value, "null", 4)) {
   14e54:	2204      	movs	r2, #4
   14e56:	4975      	ldr	r1, [pc, #468]	; (1502c <parse_value+0x1e4>)
   14e58:	4620      	mov	r0, r4
   14e5a:	f01e fe1e 	bl	33a9a <strncmp>
   14e5e:	b918      	cbnz	r0, 14e68 <parse_value+0x20>
		item->type = cJSON_NULL;
   14e60:	2302      	movs	r3, #2
   14e62:	60eb      	str	r3, [r5, #12]
		return value + 4;
   14e64:	3404      	adds	r4, #4
   14e66:	e007      	b.n	14e78 <parse_value+0x30>
	if (!strncmp(value, "false", 5)) {
   14e68:	2205      	movs	r2, #5
   14e6a:	4971      	ldr	r1, [pc, #452]	; (15030 <parse_value+0x1e8>)
   14e6c:	4620      	mov	r0, r4
   14e6e:	f01e fe14 	bl	33a9a <strncmp>
   14e72:	b918      	cbnz	r0, 14e7c <parse_value+0x34>
		item->type = cJSON_False;
   14e74:	60e8      	str	r0, [r5, #12]
		return value + 5;
   14e76:	3405      	adds	r4, #5
}
   14e78:	4620      	mov	r0, r4
   14e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!strncmp(value, "true", 4)) {
   14e7c:	2204      	movs	r2, #4
   14e7e:	496d      	ldr	r1, [pc, #436]	; (15034 <parse_value+0x1ec>)
   14e80:	4620      	mov	r0, r4
   14e82:	f01e fe0a 	bl	33a9a <strncmp>
   14e86:	b918      	cbnz	r0, 14e90 <parse_value+0x48>
		item->type = cJSON_True;
   14e88:	2301      	movs	r3, #1
   14e8a:	60eb      	str	r3, [r5, #12]
		item->valueint = 1;
   14e8c:	616b      	str	r3, [r5, #20]
   14e8e:	e7e9      	b.n	14e64 <parse_value+0x1c>
	if (*value == '\"') {
   14e90:	7823      	ldrb	r3, [r4, #0]
   14e92:	2b22      	cmp	r3, #34	; 0x22
   14e94:	d105      	bne.n	14ea2 <parse_value+0x5a>
		return parse_string(item, value);
   14e96:	4621      	mov	r1, r4
   14e98:	4628      	mov	r0, r5
}
   14e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return parse_string(item, value);
   14e9e:	f7ff bef1 	b.w	14c84 <parse_string>
	if (*value == '-' || (*value >= '0' && *value <= '9')) {
   14ea2:	2b2d      	cmp	r3, #45	; 0x2d
   14ea4:	d005      	beq.n	14eb2 <parse_value+0x6a>
   14ea6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14eaa:	2a09      	cmp	r2, #9
   14eac:	d81d      	bhi.n	14eea <parse_value+0xa2>
	int n = 0, sign = 1;
   14eae:	2201      	movs	r2, #1
   14eb0:	e002      	b.n	14eb8 <parse_value+0x70>
		sign = -1, num++; /* Has sign? */
   14eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14eb6:	3401      	adds	r4, #1
	if (*num == '0')
   14eb8:	7823      	ldrb	r3, [r4, #0]
   14eba:	2b30      	cmp	r3, #48	; 0x30
		num++; /* is zero */
   14ebc:	bf08      	it	eq
   14ebe:	3401      	addeq	r4, #1
	if (*num >= '1' && *num <= '9')
   14ec0:	7823      	ldrb	r3, [r4, #0]
   14ec2:	3b31      	subs	r3, #49	; 0x31
   14ec4:	2b08      	cmp	r3, #8
	int n = 0, sign = 1;
   14ec6:	f04f 0300 	mov.w	r3, #0
	if (*num >= '1' && *num <= '9')
   14eca:	d809      	bhi.n	14ee0 <parse_value+0x98>
			n = (n * 10) + (*num++ - '0');
   14ecc:	200a      	movs	r0, #10
   14ece:	4343      	muls	r3, r0
   14ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
   14ed4:	3b30      	subs	r3, #48	; 0x30
   14ed6:	440b      	add	r3, r1
		while (*num >= '0' && *num <= '9'); /* Number? */
   14ed8:	7821      	ldrb	r1, [r4, #0]
   14eda:	3930      	subs	r1, #48	; 0x30
   14edc:	2909      	cmp	r1, #9
   14ede:	d9f6      	bls.n	14ece <parse_value+0x86>
	n = sign * n;
   14ee0:	4353      	muls	r3, r2
	item->valueint = (int)n;
   14ee2:	616b      	str	r3, [r5, #20]
	item->type = cJSON_Number;
   14ee4:	2303      	movs	r3, #3
   14ee6:	60eb      	str	r3, [r5, #12]
	return num;
   14ee8:	e7c6      	b.n	14e78 <parse_value+0x30>
	if (*value == '[') {
   14eea:	2b5b      	cmp	r3, #91	; 0x5b
   14eec:	d136      	bne.n	14f5c <parse_value+0x114>
	if (*value != '[') {
		ep = value;
		return 0;
	} /* not an array! */

	item->type = cJSON_Array;
   14eee:	2305      	movs	r3, #5
	value = skip(value + 1);
   14ef0:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Array;
   14ef2:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   14ef4:	f018 fd39 	bl	2d96a <skip>
	if (*value == ']')
   14ef8:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   14efa:	4604      	mov	r4, r0
	if (*value == ']')
   14efc:	2b5d      	cmp	r3, #93	; 0x5d
   14efe:	d101      	bne.n	14f04 <parse_value+0xbc>
	} /* not an object! */

	item->type = cJSON_Object;
	value = skip(value + 1);
	if (*value == '}')
		return value + 1; /* empty array. */
   14f00:	3401      	adds	r4, #1
   14f02:	e7b9      	b.n	14e78 <parse_value+0x30>
	item->child = child = cJSON_New_Item();
   14f04:	f7ff ff90 	bl	14e28 <cJSON_New_Item>
   14f08:	4606      	mov	r6, r0
   14f0a:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   14f0c:	2800      	cmp	r0, #0
   14f0e:	d09f      	beq.n	14e50 <parse_value+0x8>
	value = skip(parse_value(
   14f10:	4620      	mov	r0, r4
   14f12:	f018 fd2a 	bl	2d96a <skip>
   14f16:	4601      	mov	r1, r0
   14f18:	4630      	mov	r0, r6
   14f1a:	f7ff ff95 	bl	14e48 <parse_value>
   14f1e:	f018 fd24 	bl	2d96a <skip>
		if (!value)
   14f22:	4604      	mov	r4, r0
   14f24:	2800      	cmp	r0, #0
   14f26:	d093      	beq.n	14e50 <parse_value+0x8>
	while (*value == ',') {
   14f28:	7803      	ldrb	r3, [r0, #0]
   14f2a:	2b2c      	cmp	r3, #44	; 0x2c
   14f2c:	d004      	beq.n	14f38 <parse_value+0xf0>
	if (*value == ']')
   14f2e:	2b5d      	cmp	r3, #93	; 0x5d
   14f30:	d0e6      	beq.n	14f00 <parse_value+0xb8>
	ep = value;
   14f32:	4b41      	ldr	r3, [pc, #260]	; (15038 <parse_value+0x1f0>)
   14f34:	601c      	str	r4, [r3, #0]
   14f36:	e78b      	b.n	14e50 <parse_value+0x8>
		new_item = cJSON_New_Item();
   14f38:	f7ff ff76 	bl	14e28 <cJSON_New_Item>
		if (!new_item)
   14f3c:	4605      	mov	r5, r0
   14f3e:	2800      	cmp	r0, #0
   14f40:	d086      	beq.n	14e50 <parse_value+0x8>
		child->next = new_item;
   14f42:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   14f44:	6046      	str	r6, [r0, #4]
		value = skip(parse_value(child, skip(value + 1)));
   14f46:	1c60      	adds	r0, r4, #1
   14f48:	f018 fd0f 	bl	2d96a <skip>
   14f4c:	4601      	mov	r1, r0
   14f4e:	4628      	mov	r0, r5
   14f50:	f7ff ff7a 	bl	14e48 <parse_value>
   14f54:	f018 fd09 	bl	2d96a <skip>
		if (!value)
   14f58:	462e      	mov	r6, r5
   14f5a:	e7e2      	b.n	14f22 <parse_value+0xda>
	if (*value == '{') {
   14f5c:	2b7b      	cmp	r3, #123	; 0x7b
   14f5e:	d1e8      	bne.n	14f32 <parse_value+0xea>
	item->type = cJSON_Object;
   14f60:	2306      	movs	r3, #6
	value = skip(value + 1);
   14f62:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Object;
   14f64:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   14f66:	f018 fd00 	bl	2d96a <skip>
	if (*value == '}')
   14f6a:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   14f6c:	4604      	mov	r4, r0
	if (*value == '}')
   14f6e:	2b7d      	cmp	r3, #125	; 0x7d
   14f70:	d0c6      	beq.n	14f00 <parse_value+0xb8>

	item->child = child = cJSON_New_Item();
   14f72:	f7ff ff59 	bl	14e28 <cJSON_New_Item>
   14f76:	4606      	mov	r6, r0
   14f78:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   14f7a:	2800      	cmp	r0, #0
   14f7c:	f43f af68 	beq.w	14e50 <parse_value+0x8>
		return 0;
	value = skip(parse_string(child, skip(value)));
   14f80:	4620      	mov	r0, r4
   14f82:	f018 fcf2 	bl	2d96a <skip>
   14f86:	4601      	mov	r1, r0
   14f88:	4630      	mov	r0, r6
   14f8a:	f7ff fe7b 	bl	14c84 <parse_string>
   14f8e:	f018 fcec 	bl	2d96a <skip>
	if (!value)
   14f92:	2800      	cmp	r0, #0
   14f94:	f43f af5c 	beq.w	14e50 <parse_value+0x8>
		return 0;
	child->string = child->valuestring;
	child->valuestring = 0;
   14f98:	2400      	movs	r4, #0
	child->string = child->valuestring;
   14f9a:	6933      	ldr	r3, [r6, #16]
	child->valuestring = 0;
   14f9c:	6134      	str	r4, [r6, #16]
	child->string = child->valuestring;
   14f9e:	6233      	str	r3, [r6, #32]
	if (*value != ':') {
   14fa0:	7803      	ldrb	r3, [r0, #0]
   14fa2:	2b3a      	cmp	r3, #58	; 0x3a
   14fa4:	d002      	beq.n	14fac <parse_value+0x164>
		ep = value;
   14fa6:	4b24      	ldr	r3, [pc, #144]	; (15038 <parse_value+0x1f0>)
   14fa8:	6018      	str	r0, [r3, #0]
		return 0;
   14faa:	e765      	b.n	14e78 <parse_value+0x30>
	} /* fail! */
	value = skip(parse_value(
   14fac:	3001      	adds	r0, #1
   14fae:	f018 fcdc 	bl	2d96a <skip>
   14fb2:	4601      	mov	r1, r0
   14fb4:	4630      	mov	r0, r6
   14fb6:	f7ff ff47 	bl	14e48 <parse_value>
   14fba:	f018 fcd6 	bl	2d96a <skip>
			return 0;
		} /* fail! */
		value = skip(parse_value(
			child, skip(value +
				    1))); /* skip any spacing, get the value. */
		if (!value)
   14fbe:	4607      	mov	r7, r0
   14fc0:	2800      	cmp	r0, #0
   14fc2:	f43f af45 	beq.w	14e50 <parse_value+0x8>
	while (*value == ',') {
   14fc6:	7803      	ldrb	r3, [r0, #0]
   14fc8:	2b2c      	cmp	r3, #44	; 0x2c
   14fca:	d003      	beq.n	14fd4 <parse_value+0x18c>
			return 0;
	}

	if (*value == '}')
   14fcc:	2b7d      	cmp	r3, #125	; 0x7d
   14fce:	d129      	bne.n	15024 <parse_value+0x1dc>
		return value + 1; /* end of array */
   14fd0:	1c44      	adds	r4, r0, #1
   14fd2:	e751      	b.n	14e78 <parse_value+0x30>
		new_item = cJSON_New_Item();
   14fd4:	f7ff ff28 	bl	14e28 <cJSON_New_Item>
		if (!(new_item))
   14fd8:	4605      	mov	r5, r0
   14fda:	2800      	cmp	r0, #0
   14fdc:	f43f af38 	beq.w	14e50 <parse_value+0x8>
		child->next = new_item;
   14fe0:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   14fe2:	6046      	str	r6, [r0, #4]
		value = skip(parse_string(child, skip(value + 1)));
   14fe4:	1c78      	adds	r0, r7, #1
   14fe6:	f018 fcc0 	bl	2d96a <skip>
   14fea:	4601      	mov	r1, r0
   14fec:	4628      	mov	r0, r5
   14fee:	f7ff fe49 	bl	14c84 <parse_string>
   14ff2:	f018 fcba 	bl	2d96a <skip>
		if (!value)
   14ff6:	2800      	cmp	r0, #0
   14ff8:	f43f af2a 	beq.w	14e50 <parse_value+0x8>
		child->string = child->valuestring;
   14ffc:	692b      	ldr	r3, [r5, #16]
		child->valuestring = 0;
   14ffe:	612c      	str	r4, [r5, #16]
		child->string = child->valuestring;
   15000:	622b      	str	r3, [r5, #32]
		if (*value != ':') {
   15002:	7803      	ldrb	r3, [r0, #0]
   15004:	2b3a      	cmp	r3, #58	; 0x3a
   15006:	d002      	beq.n	1500e <parse_value+0x1c6>
			ep = value;
   15008:	4b0b      	ldr	r3, [pc, #44]	; (15038 <parse_value+0x1f0>)
   1500a:	6018      	str	r0, [r3, #0]
			return 0;
   1500c:	e720      	b.n	14e50 <parse_value+0x8>
		value = skip(parse_value(
   1500e:	3001      	adds	r0, #1
   15010:	f018 fcab 	bl	2d96a <skip>
   15014:	4601      	mov	r1, r0
   15016:	4628      	mov	r0, r5
   15018:	f7ff ff16 	bl	14e48 <parse_value>
   1501c:	f018 fca5 	bl	2d96a <skip>
		if (!value)
   15020:	462e      	mov	r6, r5
   15022:	e7cc      	b.n	14fbe <parse_value+0x176>
	ep = value;
   15024:	4b04      	ldr	r3, [pc, #16]	; (15038 <parse_value+0x1f0>)
   15026:	6018      	str	r0, [r3, #0]
	return 0; /* malformed. */
   15028:	e712      	b.n	14e50 <parse_value+0x8>
   1502a:	bf00      	nop
   1502c:	00035c79 	.word	0x00035c79
   15030:	00035c7e 	.word	0x00035c7e
   15034:	00035c84 	.word	0x00035c84
   15038:	200213f4 	.word	0x200213f4

0001503c <ensure>:
{
   1503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!p || !p->buffer)
   1503e:	4605      	mov	r5, r0
   15040:	b368      	cbz	r0, 1509e <ensure+0x62>
   15042:	6806      	ldr	r6, [r0, #0]
   15044:	b1f6      	cbz	r6, 15084 <ensure+0x48>
	needed += p->offset;
   15046:	6883      	ldr	r3, [r0, #8]
	if (needed <= p->length)
   15048:	6842      	ldr	r2, [r0, #4]
	needed += p->offset;
   1504a:	185c      	adds	r4, r3, r1
	if (needed <= p->length)
   1504c:	42a2      	cmp	r2, r4
   1504e:	db01      	blt.n	15054 <ensure+0x18>
	return newbuffer + p->offset;
   15050:	441e      	add	r6, r3
   15052:	e017      	b.n	15084 <ensure+0x48>
	--x;
   15054:	3c01      	subs	r4, #1
	x |= x >> 1;
   15056:	ea44 0464 	orr.w	r4, r4, r4, asr #1
	x |= x >> 2;
   1505a:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
	x |= x >> 4;
   1505e:	ea44 1424 	orr.w	r4, r4, r4, asr #4
	x |= x >> 8;
   15062:	ea44 2424 	orr.w	r4, r4, r4, asr #8
	x |= x >> 16;
   15066:	ea44 4424 	orr.w	r4, r4, r4, asr #16
	newbuffer = (char *)cJSON_malloc(newsize);
   1506a:	4b0e      	ldr	r3, [pc, #56]	; (150a4 <ensure+0x68>)
	return x + 1;
   1506c:	3401      	adds	r4, #1
	newbuffer = (char *)cJSON_malloc(newsize);
   1506e:	681b      	ldr	r3, [r3, #0]
   15070:	4620      	mov	r0, r4
   15072:	4798      	blx	r3
	if (!newbuffer) {
   15074:	4f0c      	ldr	r7, [pc, #48]	; (150a8 <ensure+0x6c>)
   15076:	4606      	mov	r6, r0
   15078:	b930      	cbnz	r0, 15088 <ensure+0x4c>
		cJSON_free(p->buffer);
   1507a:	683b      	ldr	r3, [r7, #0]
   1507c:	6828      	ldr	r0, [r5, #0]
   1507e:	4798      	blx	r3
		p->length = 0, p->buffer = 0;
   15080:	e9c5 6600 	strd	r6, r6, [r5]
}
   15084:	4630      	mov	r0, r6
   15086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15088:	e9d5 1200 	ldrd	r1, r2, [r5]
   1508c:	f01e fb98 	bl	337c0 <memcpy>
	cJSON_free(p->buffer);
   15090:	683b      	ldr	r3, [r7, #0]
   15092:	6828      	ldr	r0, [r5, #0]
   15094:	4798      	blx	r3
	p->buffer = newbuffer;
   15096:	e9c5 6400 	strd	r6, r4, [r5]
	return newbuffer + p->offset;
   1509a:	68ab      	ldr	r3, [r5, #8]
   1509c:	e7d8      	b.n	15050 <ensure+0x14>
		return 0;
   1509e:	4606      	mov	r6, r0
   150a0:	e7f0      	b.n	15084 <ensure+0x48>
   150a2:	bf00      	nop
   150a4:	20020080 	.word	0x20020080
   150a8:	2002007c 	.word	0x2002007c

000150ac <cJSON_strdup>:
{
   150ac:	b570      	push	{r4, r5, r6, lr}
	len = strlens(str) + 1;
   150ae:	4606      	mov	r6, r0
   150b0:	b170      	cbz	r0, 150d0 <cJSON_strdup+0x24>
   150b2:	f7fc ffe5 	bl	12080 <strlen>
   150b6:	1c44      	adds	r4, r0, #1
	copy = (char *)cJSON_malloc(len);
   150b8:	4b06      	ldr	r3, [pc, #24]	; (150d4 <cJSON_strdup+0x28>)
   150ba:	4620      	mov	r0, r4
   150bc:	681b      	ldr	r3, [r3, #0]
   150be:	4798      	blx	r3
	if (!copy)
   150c0:	4605      	mov	r5, r0
   150c2:	b118      	cbz	r0, 150cc <cJSON_strdup+0x20>
   150c4:	4622      	mov	r2, r4
   150c6:	4631      	mov	r1, r6
   150c8:	f01e fb7a 	bl	337c0 <memcpy>
}
   150cc:	4628      	mov	r0, r5
   150ce:	bd70      	pop	{r4, r5, r6, pc}
	len = strlens(str) + 1;
   150d0:	2401      	movs	r4, #1
   150d2:	e7f1      	b.n	150b8 <cJSON_strdup+0xc>
   150d4:	20020080 	.word	0x20020080

000150d8 <print_string_ptr>:
{
   150d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = 0, flag = 0;
   150dc:	2200      	movs	r2, #0
{
   150de:	460d      	mov	r5, r1
   150e0:	4606      	mov	r6, r0
   150e2:	4601      	mov	r1, r0
   150e4:	460b      	mov	r3, r1
	for (ptr = str; *ptr; ptr++)
   150e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   150ea:	b9c4      	cbnz	r4, 1511e <print_string_ptr+0x46>
	if (!flag) {
   150ec:	bb4a      	cbnz	r2, 15142 <print_string_ptr+0x6a>
		len = ptr - str;
   150ee:	1b9c      	subs	r4, r3, r6
		if (p)
   150f0:	1ce1      	adds	r1, r4, #3
   150f2:	b30d      	cbz	r5, 15138 <print_string_ptr+0x60>
			out = ensure(p, len + 3);
   150f4:	4628      	mov	r0, r5
   150f6:	f7ff ffa1 	bl	1503c <ensure>
			out = (char *)cJSON_malloc(len + 3);
   150fa:	4605      	mov	r5, r0
		if (!out)
   150fc:	b160      	cbz	r0, 15118 <print_string_ptr+0x40>
		*ptr2++ = '\"';
   150fe:	4603      	mov	r3, r0
   15100:	2722      	movs	r7, #34	; 0x22
   15102:	f803 7b01 	strb.w	r7, [r3], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15106:	4618      	mov	r0, r3
   15108:	4631      	mov	r1, r6
   1510a:	f01e fcbe 	bl	33a8a <strcpy>
   1510e:	4603      	mov	r3, r0
		ptr2[len + 1] = 0;
   15110:	2200      	movs	r2, #0
   15112:	4423      	add	r3, r4
		ptr2[len] = '\"';
   15114:	5507      	strb	r7, [r0, r4]
		ptr2[len + 1] = 0;
   15116:	705a      	strb	r2, [r3, #1]
}
   15118:	4628      	mov	r0, r5
   1511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				: 0;
   1511e:	1e63      	subs	r3, r4, #1
   15120:	2b1e      	cmp	r3, #30
   15122:	d907      	bls.n	15134 <print_string_ptr+0x5c>
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   15124:	2c22      	cmp	r4, #34	; 0x22
   15126:	d005      	beq.n	15134 <print_string_ptr+0x5c>
				: 0;
   15128:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
   1512c:	425c      	negs	r4, r3
   1512e:	415c      	adcs	r4, r3
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   15130:	4322      	orrs	r2, r4
   15132:	e7d7      	b.n	150e4 <print_string_ptr+0xc>
				: 0;
   15134:	2401      	movs	r4, #1
   15136:	e7fb      	b.n	15130 <print_string_ptr+0x58>
			out = (char *)cJSON_malloc(len + 3);
   15138:	4b41      	ldr	r3, [pc, #260]	; (15240 <print_string_ptr+0x168>)
   1513a:	4608      	mov	r0, r1
   1513c:	681b      	ldr	r3, [r3, #0]
   1513e:	4798      	blx	r3
   15140:	e7db      	b.n	150fa <print_string_ptr+0x22>
	if (!str) {
   15142:	b986      	cbnz	r6, 15166 <print_string_ptr+0x8e>
		if (p)
   15144:	b155      	cbz	r5, 1515c <print_string_ptr+0x84>
			out = ensure(p, 3);
   15146:	2103      	movs	r1, #3
   15148:	4628      	mov	r0, r5
   1514a:	f7ff ff77 	bl	1503c <ensure>
			out = (char *)cJSON_malloc(3);
   1514e:	4605      	mov	r5, r0
		if (!out)
   15150:	2800      	cmp	r0, #0
   15152:	d0e1      	beq.n	15118 <print_string_ptr+0x40>
   15154:	493b      	ldr	r1, [pc, #236]	; (15244 <print_string_ptr+0x16c>)
   15156:	f01e fc98 	bl	33a8a <strcpy>
		return out;
   1515a:	e7dd      	b.n	15118 <print_string_ptr+0x40>
			out = (char *)cJSON_malloc(3);
   1515c:	4b38      	ldr	r3, [pc, #224]	; (15240 <print_string_ptr+0x168>)
   1515e:	2003      	movs	r0, #3
   15160:	681b      	ldr	r3, [r3, #0]
   15162:	4798      	blx	r3
   15164:	e7f3      	b.n	1514e <print_string_ptr+0x76>
	while ((token) && ++len) {
   15166:	46b1      	mov	r9, r6
	token = *ptr;
   15168:	f896 8000 	ldrb.w	r8, [r6]
		if (strchr("\"\\\b\f\n\r\t", token))
   1516c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 15248 <print_string_ptr+0x170>
	while ((token) && ++len) {
   15170:	f1b8 0f00 	cmp.w	r8, #0
   15174:	d002      	beq.n	1517c <print_string_ptr+0xa4>
   15176:	1c67      	adds	r7, r4, #1
   15178:	d119      	bne.n	151ae <print_string_ptr+0xd6>
   1517a:	463c      	mov	r4, r7
	if (p)
   1517c:	1ce1      	adds	r1, r4, #3
   1517e:	b32d      	cbz	r5, 151cc <print_string_ptr+0xf4>
		out = ensure(p, len + 3);
   15180:	4628      	mov	r0, r5
   15182:	f7ff ff5b 	bl	1503c <ensure>
		out = (char *)cJSON_malloc(len + 3);
   15186:	4605      	mov	r5, r0
	if (!out)
   15188:	2800      	cmp	r0, #0
   1518a:	d0c5      	beq.n	15118 <print_string_ptr+0x40>
	*ptr2++ = '\"';
   1518c:	4604      	mov	r4, r0
   1518e:	2322      	movs	r3, #34	; 0x22
			*ptr2++ = '\\';
   15190:	275c      	movs	r7, #92	; 0x5c
				*ptr2++ = 'f';
   15192:	f04f 0866 	mov.w	r8, #102	; 0x66
				sprintf(ptr2, "u%04x", token);
   15196:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1524c <print_string_ptr+0x174>
	*ptr2++ = '\"';
   1519a:	f804 3b01 	strb.w	r3, [r4], #1
	while (*ptr) {
   1519e:	3e01      	subs	r6, #1
   151a0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   151a4:	b9bb      	cbnz	r3, 151d6 <print_string_ptr+0xfe>
	*ptr2++ = '\"';
   151a6:	2222      	movs	r2, #34	; 0x22
	*ptr2++ = 0;
   151a8:	7063      	strb	r3, [r4, #1]
	*ptr2++ = '\"';
   151aa:	7022      	strb	r2, [r4, #0]
	return out;
   151ac:	e7b4      	b.n	15118 <print_string_ptr+0x40>
		if (strchr("\"\\\b\f\n\r\t", token))
   151ae:	4641      	mov	r1, r8
   151b0:	4650      	mov	r0, sl
   151b2:	f01e fc5d 	bl	33a70 <strchr>
   151b6:	b120      	cbz	r0, 151c2 <print_string_ptr+0xea>
			len++;
   151b8:	1ca7      	adds	r7, r4, #2
		token = *ptr;
   151ba:	f819 8f01 	ldrb.w	r8, [r9, #1]!
   151be:	463c      	mov	r4, r7
   151c0:	e7d6      	b.n	15170 <print_string_ptr+0x98>
		else if (token < 32)
   151c2:	f1b8 0f1f 	cmp.w	r8, #31
			len += 5;
   151c6:	bf98      	it	ls
   151c8:	1da7      	addls	r7, r4, #6
   151ca:	e7f6      	b.n	151ba <print_string_ptr+0xe2>
		out = (char *)cJSON_malloc(len + 3);
   151cc:	4b1c      	ldr	r3, [pc, #112]	; (15240 <print_string_ptr+0x168>)
   151ce:	4608      	mov	r0, r1
   151d0:	681b      	ldr	r3, [r3, #0]
   151d2:	4798      	blx	r3
   151d4:	e7d7      	b.n	15186 <print_string_ptr+0xae>
		if ((unsigned char)*ptr > 31 && *ptr != '\"' && *ptr != '\\')
   151d6:	2b1f      	cmp	r3, #31
   151d8:	f104 0001 	add.w	r0, r4, #1
   151dc:	d906      	bls.n	151ec <print_string_ptr+0x114>
   151de:	2b22      	cmp	r3, #34	; 0x22
   151e0:	d004      	beq.n	151ec <print_string_ptr+0x114>
   151e2:	2b5c      	cmp	r3, #92	; 0x5c
   151e4:	d002      	beq.n	151ec <print_string_ptr+0x114>
			*ptr2++ = *ptr++;
   151e6:	7023      	strb	r3, [r4, #0]
   151e8:	4604      	mov	r4, r0
   151ea:	e7d9      	b.n	151a0 <print_string_ptr+0xc8>
			*ptr2++ = '\\';
   151ec:	7027      	strb	r7, [r4, #0]
			switch (token = *ptr++) {
   151ee:	7832      	ldrb	r2, [r6, #0]
   151f0:	2a0c      	cmp	r2, #12
   151f2:	d016      	beq.n	15222 <print_string_ptr+0x14a>
   151f4:	d809      	bhi.n	1520a <print_string_ptr+0x132>
   151f6:	2a09      	cmp	r2, #9
   151f8:	d01a      	beq.n	15230 <print_string_ptr+0x158>
   151fa:	2a0a      	cmp	r2, #10
   151fc:	d015      	beq.n	1522a <print_string_ptr+0x152>
   151fe:	2a08      	cmp	r2, #8
   15200:	d119      	bne.n	15236 <print_string_ptr+0x15e>
				*ptr2++ = 'b';
   15202:	2362      	movs	r3, #98	; 0x62
   15204:	1ca0      	adds	r0, r4, #2
				*ptr2++ = 't';
   15206:	7063      	strb	r3, [r4, #1]
				break;
   15208:	e7ee      	b.n	151e8 <print_string_ptr+0x110>
			switch (token = *ptr++) {
   1520a:	2a22      	cmp	r2, #34	; 0x22
   1520c:	d006      	beq.n	1521c <print_string_ptr+0x144>
   1520e:	2a5c      	cmp	r2, #92	; 0x5c
   15210:	d004      	beq.n	1521c <print_string_ptr+0x144>
   15212:	2a0d      	cmp	r2, #13
   15214:	d10f      	bne.n	15236 <print_string_ptr+0x15e>
				*ptr2++ = 'r';
   15216:	1ca0      	adds	r0, r4, #2
   15218:	2372      	movs	r3, #114	; 0x72
   1521a:	e7f4      	b.n	15206 <print_string_ptr+0x12e>
				*ptr2++ = '\"';
   1521c:	1ca0      	adds	r0, r4, #2
   1521e:	7062      	strb	r2, [r4, #1]
				break;
   15220:	e7e2      	b.n	151e8 <print_string_ptr+0x110>
				*ptr2++ = 'f';
   15222:	1ca0      	adds	r0, r4, #2
   15224:	f884 8001 	strb.w	r8, [r4, #1]
				break;
   15228:	e7de      	b.n	151e8 <print_string_ptr+0x110>
				*ptr2++ = 'n';
   1522a:	1ca0      	adds	r0, r4, #2
   1522c:	236e      	movs	r3, #110	; 0x6e
   1522e:	e7ea      	b.n	15206 <print_string_ptr+0x12e>
				*ptr2++ = 't';
   15230:	1ca0      	adds	r0, r4, #2
   15232:	2374      	movs	r3, #116	; 0x74
   15234:	e7e7      	b.n	15206 <print_string_ptr+0x12e>
				sprintf(ptr2, "u%04x", token);
   15236:	4649      	mov	r1, r9
   15238:	f017 fffe 	bl	2d238 <siprintf>
				ptr2 += 5;
   1523c:	1da0      	adds	r0, r4, #6
				break; /* escape and print */
   1523e:	e7d3      	b.n	151e8 <print_string_ptr+0x110>
   15240:	20020080 	.word	0x20020080
   15244:	00035c97 	.word	0x00035c97
   15248:	00035c9a 	.word	0x00035c9a
   1524c:	00035ca2 	.word	0x00035ca2

00015250 <print_array.isra.4>:
static char *print_array(cJSON *item, int depth, int fmt, printbuffer *p)
   15250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15254:	4607      	mov	r7, r0
   15256:	468a      	mov	sl, r1
   15258:	4616      	mov	r6, r2
   1525a:	461c      	mov	r4, r3
	int numentries = 0, i = 0, fail = 0;
   1525c:	2500      	movs	r5, #0
	cJSON *child = item->child;
   1525e:	f8d0 9000 	ldr.w	r9, [r0]
	while (child)
   15262:	f1b9 0f00 	cmp.w	r9, #0
   15266:	d10e      	bne.n	15286 <print_array.isra.4+0x36>
	if (!numentries) {
   15268:	b9b5      	cbnz	r5, 15298 <print_array.isra.4+0x48>
		if (p)
   1526a:	b184      	cbz	r4, 1528e <print_array.isra.4+0x3e>
			out = ensure(p, 3);
   1526c:	2103      	movs	r1, #3
   1526e:	4620      	mov	r0, r4
   15270:	f7ff fee4 	bl	1503c <ensure>
			out = (char *)cJSON_malloc(3);
   15274:	4681      	mov	r9, r0
		if (out)
   15276:	b110      	cbz	r0, 1527e <print_array.isra.4+0x2e>
   15278:	4971      	ldr	r1, [pc, #452]	; (15440 <print_array.isra.4+0x1f0>)
   1527a:	f01e fc06 	bl	33a8a <strcpy>
}
   1527e:	4648      	mov	r0, r9
   15280:	b003      	add	sp, #12
   15282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		numentries++, child = child->next;
   15286:	3501      	adds	r5, #1
   15288:	f8d9 9000 	ldr.w	r9, [r9]
   1528c:	e7e9      	b.n	15262 <print_array.isra.4+0x12>
			out = (char *)cJSON_malloc(3);
   1528e:	4b6d      	ldr	r3, [pc, #436]	; (15444 <print_array.isra.4+0x1f4>)
   15290:	2003      	movs	r0, #3
   15292:	681b      	ldr	r3, [r3, #0]
   15294:	4798      	blx	r3
   15296:	e7ed      	b.n	15274 <print_array.isra.4+0x24>
	if (p) {
   15298:	2c00      	cmp	r4, #0
   1529a:	d048      	beq.n	1532e <print_array.isra.4+0xde>
		i = p->offset;
   1529c:	68a3      	ldr	r3, [r4, #8]
		ptr = ensure(p, 1);
   1529e:	2101      	movs	r1, #1
   152a0:	4620      	mov	r0, r4
		i = p->offset;
   152a2:	9300      	str	r3, [sp, #0]
		ptr = ensure(p, 1);
   152a4:	f7ff feca 	bl	1503c <ensure>
		if (!ptr)
   152a8:	2800      	cmp	r0, #0
   152aa:	d0e8      	beq.n	1527e <print_array.isra.4+0x2e>
		*ptr = '[';
   152ac:	235b      	movs	r3, #91	; 0x5b
   152ae:	2e00      	cmp	r6, #0
   152b0:	7003      	strb	r3, [r0, #0]
		child = item->child;
   152b2:	683d      	ldr	r5, [r7, #0]
   152b4:	bf14      	ite	ne
   152b6:	2702      	movne	r7, #2
   152b8:	2701      	moveq	r7, #1
				*ptr++ = ',';
   152ba:	f04f 082c 	mov.w	r8, #44	; 0x2c
				*ptr = 0;
   152be:	46cb      	mov	fp, r9
		p->offset++;
   152c0:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth + 1, fmt, p);
   152c2:	f10a 0a01 	add.w	sl, sl, #1
		p->offset++;
   152c6:	3301      	adds	r3, #1
   152c8:	60a3      	str	r3, [r4, #8]
				ptr = ensure(p, len + 1);
   152ca:	1c7b      	adds	r3, r7, #1
   152cc:	9301      	str	r3, [sp, #4]
		while (child && !fail) {
   152ce:	b96d      	cbnz	r5, 152ec <print_array.isra.4+0x9c>
		ptr = ensure(p, 2);
   152d0:	2102      	movs	r1, #2
   152d2:	4620      	mov	r0, r4
   152d4:	f7ff feb2 	bl	1503c <ensure>
		if (!ptr)
   152d8:	2800      	cmp	r0, #0
   152da:	d0d0      	beq.n	1527e <print_array.isra.4+0x2e>
		*ptr++ = ']';
   152dc:	235d      	movs	r3, #93	; 0x5d
		*ptr = 0;
   152de:	7045      	strb	r5, [r0, #1]
		*ptr++ = ']';
   152e0:	7003      	strb	r3, [r0, #0]
		out = (p->buffer) + i;
   152e2:	6823      	ldr	r3, [r4, #0]
   152e4:	9a00      	ldr	r2, [sp, #0]
   152e6:	441a      	add	r2, r3
   152e8:	4691      	mov	r9, r2
   152ea:	e7c8      	b.n	1527e <print_array.isra.4+0x2e>
			print_value(child, depth + 1, fmt, p);
   152ec:	4623      	mov	r3, r4
   152ee:	4632      	mov	r2, r6
   152f0:	4651      	mov	r1, sl
   152f2:	4628      	mov	r0, r5
   152f4:	f000 f8aa 	bl	1544c <print_value>
			p->offset = update(p);
   152f8:	4620      	mov	r0, r4
   152fa:	f018 fb3f 	bl	2d97c <update>
			if (child->next) {
   152fe:	682b      	ldr	r3, [r5, #0]
			p->offset = update(p);
   15300:	60a0      	str	r0, [r4, #8]
			if (child->next) {
   15302:	b173      	cbz	r3, 15322 <print_array.isra.4+0xd2>
				ptr = ensure(p, len + 1);
   15304:	9901      	ldr	r1, [sp, #4]
   15306:	4620      	mov	r0, r4
   15308:	f7ff fe98 	bl	1503c <ensure>
				if (!ptr)
   1530c:	2800      	cmp	r0, #0
   1530e:	d0b6      	beq.n	1527e <print_array.isra.4+0x2e>
				*ptr++ = ',';
   15310:	f880 8000 	strb.w	r8, [r0]
				if (fmt)
   15314:	b93e      	cbnz	r6, 15326 <print_array.isra.4+0xd6>
				*ptr++ = ',';
   15316:	1c43      	adds	r3, r0, #1
				*ptr = 0;
   15318:	f883 b000 	strb.w	fp, [r3]
				p->offset += len;
   1531c:	68a3      	ldr	r3, [r4, #8]
   1531e:	443b      	add	r3, r7
   15320:	60a3      	str	r3, [r4, #8]
			child = child->next;
   15322:	682d      	ldr	r5, [r5, #0]
   15324:	e7d3      	b.n	152ce <print_array.isra.4+0x7e>
					*ptr++ = ' ';
   15326:	2220      	movs	r2, #32
   15328:	1c83      	adds	r3, r0, #2
   1532a:	7042      	strb	r2, [r0, #1]
   1532c:	e7f4      	b.n	15318 <print_array.isra.4+0xc8>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   1532e:	4b45      	ldr	r3, [pc, #276]	; (15444 <print_array.isra.4+0x1f4>)
   15330:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   15334:	681a      	ldr	r2, [r3, #0]
   15336:	4658      	mov	r0, fp
   15338:	4790      	blx	r2
		if (!entries)
   1533a:	4b42      	ldr	r3, [pc, #264]	; (15444 <print_array.isra.4+0x1f4>)
   1533c:	4680      	mov	r8, r0
   1533e:	9301      	str	r3, [sp, #4]
   15340:	2800      	cmp	r0, #0
   15342:	d09c      	beq.n	1527e <print_array.isra.4+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   15344:	465a      	mov	r2, fp
	int len = 5;
   15346:	f04f 0b05 	mov.w	fp, #5
   1534a:	4621      	mov	r1, r4
   1534c:	f01e fa72 	bl	33834 <memset>
		child = item->child;
   15350:	f8d7 9000 	ldr.w	r9, [r7]
		while (child && !fail) {
   15354:	f1a8 0704 	sub.w	r7, r8, #4
		child = item->child;
   15358:	9700      	str	r7, [sp, #0]
			ret = print_value(child, depth + 1, fmt, 0);
   1535a:	f10a 0a01 	add.w	sl, sl, #1
		while (child && !fail) {
   1535e:	f1b9 0f00 	cmp.w	r9, #0
   15362:	d01b      	beq.n	1539c <print_array.isra.4+0x14c>
   15364:	b114      	cbz	r4, 1536c <print_array.isra.4+0x11c>
	int len = 5;
   15366:	2400      	movs	r4, #0
   15368:	4e37      	ldr	r6, [pc, #220]	; (15448 <print_array.isra.4+0x1f8>)
   1536a:	e03b      	b.n	153e4 <print_array.isra.4+0x194>
			ret = print_value(child, depth + 1, fmt, 0);
   1536c:	4632      	mov	r2, r6
   1536e:	4623      	mov	r3, r4
   15370:	4651      	mov	r1, sl
   15372:	4648      	mov	r0, r9
   15374:	f000 f86a 	bl	1544c <print_value>
			entries[i++] = ret;
   15378:	9a00      	ldr	r2, [sp, #0]
   1537a:	f842 0f04 	str.w	r0, [r2, #4]!
   1537e:	9200      	str	r2, [sp, #0]
			if (ret)
   15380:	b150      	cbz	r0, 15398 <print_array.isra.4+0x148>
				len += strlens(ret) + 2 + (fmt ? 1 : 0);
   15382:	f7fc fe7d 	bl	12080 <strlen>
   15386:	1c33      	adds	r3, r6, #0
   15388:	bf18      	it	ne
   1538a:	2301      	movne	r3, #1
   1538c:	3302      	adds	r3, #2
   1538e:	449b      	add	fp, r3
   15390:	4483      	add	fp, r0
			child = child->next;
   15392:	f8d9 9000 	ldr.w	r9, [r9]
   15396:	e7e2      	b.n	1535e <print_array.isra.4+0x10e>
				fail = 1;
   15398:	2401      	movs	r4, #1
   1539a:	e7fa      	b.n	15392 <print_array.isra.4+0x142>
		if (!fail)
   1539c:	2c00      	cmp	r4, #0
   1539e:	d1e2      	bne.n	15366 <print_array.isra.4+0x116>
			out = (char *)cJSON_malloc(len);
   153a0:	9b01      	ldr	r3, [sp, #4]
   153a2:	4658      	mov	r0, fp
   153a4:	681b      	ldr	r3, [r3, #0]
   153a6:	4798      	blx	r3
		if (!out)
   153a8:	4681      	mov	r9, r0
   153aa:	2800      	cmp	r0, #0
   153ac:	d0db      	beq.n	15366 <print_array.isra.4+0x116>
		*out = '[';
   153ae:	235b      	movs	r3, #91	; 0x5b
   153b0:	4682      	mov	sl, r0
   153b2:	f8df b094 	ldr.w	fp, [pc, #148]	; 15448 <print_array.isra.4+0x1f8>
   153b6:	f80a 3b01 	strb.w	r3, [sl], #1
			if (i != numentries - 1) {
   153ba:	1e6b      	subs	r3, r5, #1
		*ptr = 0;
   153bc:	7044      	strb	r4, [r0, #1]
			if (i != numentries - 1) {
   153be:	9300      	str	r3, [sp, #0]
		for (i = 0; i < numentries; i++) {
   153c0:	42a5      	cmp	r5, r4
   153c2:	dc17      	bgt.n	153f4 <print_array.isra.4+0x1a4>
		cJSON_free(entries);
   153c4:	f8db 3000 	ldr.w	r3, [fp]
   153c8:	4640      	mov	r0, r8
   153ca:	4798      	blx	r3
		*ptr++ = ']';
   153cc:	235d      	movs	r3, #93	; 0x5d
   153ce:	f88a 3000 	strb.w	r3, [sl]
		*ptr++ = 0;
   153d2:	2300      	movs	r3, #0
   153d4:	f88a 3001 	strb.w	r3, [sl, #1]
   153d8:	e751      	b.n	1527e <print_array.isra.4+0x2e>
				if (entries[i])
   153da:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   153de:	b100      	cbz	r0, 153e2 <print_array.isra.4+0x192>
					cJSON_free(entries[i]);
   153e0:	4798      	blx	r3
			for (i = 0; i < numentries; i++)
   153e2:	3401      	adds	r4, #1
   153e4:	42a5      	cmp	r5, r4
   153e6:	6833      	ldr	r3, [r6, #0]
   153e8:	dcf7      	bgt.n	153da <print_array.isra.4+0x18a>
			cJSON_free(entries);
   153ea:	4640      	mov	r0, r8
   153ec:	4798      	blx	r3
			return 0;
   153ee:	f04f 0900 	mov.w	r9, #0
   153f2:	e744      	b.n	1527e <print_array.isra.4+0x2e>
			tmplen = strlens(entries[i]);
   153f4:	6878      	ldr	r0, [r7, #4]
   153f6:	b108      	cbz	r0, 153fc <print_array.isra.4+0x1ac>
   153f8:	f7fc fe42 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   153fc:	4602      	mov	r2, r0
   153fe:	9001      	str	r0, [sp, #4]
   15400:	6879      	ldr	r1, [r7, #4]
   15402:	4650      	mov	r0, sl
   15404:	f01e f9dc 	bl	337c0 <memcpy>
			ptr += tmplen;
   15408:	9b01      	ldr	r3, [sp, #4]
   1540a:	449a      	add	sl, r3
			if (i != numentries - 1) {
   1540c:	9b00      	ldr	r3, [sp, #0]
   1540e:	429c      	cmp	r4, r3
   15410:	d009      	beq.n	15426 <print_array.isra.4+0x1d6>
				*ptr++ = ',';
   15412:	232c      	movs	r3, #44	; 0x2c
   15414:	f88a 3000 	strb.w	r3, [sl]
				if (fmt)
   15418:	b966      	cbnz	r6, 15434 <print_array.isra.4+0x1e4>
				*ptr++ = ',';
   1541a:	f10a 0a01 	add.w	sl, sl, #1
				*ptr = 0;
   1541e:	f04f 0300 	mov.w	r3, #0
   15422:	f88a 3000 	strb.w	r3, [sl]
			cJSON_free(entries[i]);
   15426:	f8db 3000 	ldr.w	r3, [fp]
   1542a:	f857 0f04 	ldr.w	r0, [r7, #4]!
   1542e:	4798      	blx	r3
		for (i = 0; i < numentries; i++) {
   15430:	3401      	adds	r4, #1
   15432:	e7c5      	b.n	153c0 <print_array.isra.4+0x170>
					*ptr++ = ' ';
   15434:	2320      	movs	r3, #32
   15436:	f10a 0a02 	add.w	sl, sl, #2
   1543a:	f80a 3c01 	strb.w	r3, [sl, #-1]
   1543e:	e7ee      	b.n	1541e <print_array.isra.4+0x1ce>
   15440:	00035c89 	.word	0x00035c89
   15444:	20020080 	.word	0x20020080
   15448:	2002007c 	.word	0x2002007c

0001544c <print_value>:
{
   1544c:	b510      	push	{r4, lr}
	if (!item)
   1544e:	4604      	mov	r4, r0
   15450:	b190      	cbz	r0, 15478 <print_value+0x2c>
	if (p) {
   15452:	7b00      	ldrb	r0, [r0, #12]
   15454:	b383      	cbz	r3, 154b8 <print_value+0x6c>
		switch ((item->type) & 255) {
   15456:	2806      	cmp	r0, #6
   15458:	d851      	bhi.n	154fe <print_value+0xb2>
   1545a:	e8df f000 	tbb	[pc, r0]
   1545e:	180f      	.short	0x180f
   15460:	43272104 	.word	0x43272104
   15464:	4a          	.byte	0x4a
   15465:	00          	.byte	0x00
			out = ensure(p, 5);
   15466:	2105      	movs	r1, #5
   15468:	4618      	mov	r0, r3
   1546a:	f7ff fde7 	bl	1503c <ensure>
			if (out)
   1546e:	4604      	mov	r4, r0
   15470:	b110      	cbz	r0, 15478 <print_value+0x2c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15472:	4924      	ldr	r1, [pc, #144]	; (15504 <print_value+0xb8>)
   15474:	f01e fb09 	bl	33a8a <strcpy>
}
   15478:	4620      	mov	r0, r4
   1547a:	bd10      	pop	{r4, pc}
			out = ensure(p, 6);
   1547c:	2106      	movs	r1, #6
   1547e:	4618      	mov	r0, r3
   15480:	f7ff fddc 	bl	1503c <ensure>
			if (out)
   15484:	4604      	mov	r4, r0
   15486:	2800      	cmp	r0, #0
   15488:	d0f6      	beq.n	15478 <print_value+0x2c>
   1548a:	491f      	ldr	r1, [pc, #124]	; (15508 <print_value+0xbc>)
   1548c:	e7f2      	b.n	15474 <print_value+0x28>
			out = ensure(p, 5);
   1548e:	2105      	movs	r1, #5
   15490:	4618      	mov	r0, r3
   15492:	f7ff fdd3 	bl	1503c <ensure>
			if (out)
   15496:	4604      	mov	r4, r0
   15498:	2800      	cmp	r0, #0
   1549a:	d0ed      	beq.n	15478 <print_value+0x2c>
   1549c:	491b      	ldr	r1, [pc, #108]	; (1550c <print_value+0xc0>)
   1549e:	e7e9      	b.n	15474 <print_value+0x28>
			out = print_number(item, p);
   154a0:	4619      	mov	r1, r3
			out = print_number(item, 0);
   154a2:	4620      	mov	r0, r4
}
   154a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_number(item, 0);
   154a8:	f7fc bf9a 	b.w	123e0 <print_number>
	return print_string_ptr(item->valuestring, p);
   154ac:	4619      	mov	r1, r3
   154ae:	6920      	ldr	r0, [r4, #16]
}
   154b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return print_string_ptr(item->valuestring, p);
   154b4:	f7ff be10 	b.w	150d8 <print_string_ptr>
		switch ((item->type) & 255) {
   154b8:	2806      	cmp	r0, #6
   154ba:	d820      	bhi.n	154fe <print_value+0xb2>
   154bc:	e8df f000 	tbb	[pc, r0]
   154c0:	0d040b09 	.word	0x0d040b09
   154c4:	110f      	.short	0x110f
   154c6:	18          	.byte	0x18
   154c7:	00          	.byte	0x00
			out = cJSON_strdup("null");
   154c8:	480e      	ldr	r0, [pc, #56]	; (15504 <print_value+0xb8>)
}
   154ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = cJSON_strdup("false");
   154ce:	f7ff bded 	b.w	150ac <cJSON_strdup>
   154d2:	480d      	ldr	r0, [pc, #52]	; (15508 <print_value+0xbc>)
   154d4:	e7f9      	b.n	154ca <print_value+0x7e>
			out = cJSON_strdup("true");
   154d6:	480d      	ldr	r0, [pc, #52]	; (1550c <print_value+0xc0>)
   154d8:	e7f7      	b.n	154ca <print_value+0x7e>
			out = print_number(item, 0);
   154da:	2100      	movs	r1, #0
   154dc:	e7e1      	b.n	154a2 <print_value+0x56>
	return print_string_ptr(item->valuestring, p);
   154de:	2100      	movs	r1, #0
   154e0:	e7e5      	b.n	154ae <print_value+0x62>
			out = print_array(item, depth, fmt, 0);
   154e2:	2300      	movs	r3, #0
   154e4:	f104 0008 	add.w	r0, r4, #8
}
   154e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_array(item, depth, fmt, 0);
   154ec:	f7ff beb0 	b.w	15250 <print_array.isra.4>
			out = print_object(item, depth, fmt, 0);
   154f0:	2300      	movs	r3, #0
   154f2:	f104 0008 	add.w	r0, r4, #8
}
   154f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_object(item, depth, fmt, 0);
   154fa:	f000 b809 	b.w	15510 <print_object.isra.3>
	char *out = 0;
   154fe:	2400      	movs	r4, #0
   15500:	e7ba      	b.n	15478 <print_value+0x2c>
   15502:	bf00      	nop
   15504:	00035c79 	.word	0x00035c79
   15508:	00035c7e 	.word	0x00035c7e
   1550c:	00035c84 	.word	0x00035c84

00015510 <print_object.isra.3>:
}

/* Render an object to text. */
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   15510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15514:	4615      	mov	r5, r2
{
	char **entries = 0, **names = 0;
	char *out = 0, *ptr, *ret, *str;
	int len = 7, i = 0, j;
	cJSON *child = item->child;
	int numentries = 0, fail = 0;
   15516:	2200      	movs	r2, #0
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   15518:	4680      	mov	r8, r0
   1551a:	468b      	mov	fp, r1
   1551c:	b089      	sub	sp, #36	; 0x24
   1551e:	461c      	mov	r4, r3
	cJSON *child = item->child;
   15520:	6803      	ldr	r3, [r0, #0]
	int numentries = 0, fail = 0;
   15522:	9200      	str	r2, [sp, #0]
	size_t tmplen = 0;
	/* Count the number of entries. */
	while (child)
   15524:	b96b      	cbnz	r3, 15542 <print_object.isra.3+0x32>
		numentries++, child = child->next;
	/* Explicitly handle empty object case */
	if (!numentries) {
   15526:	9b00      	ldr	r3, [sp, #0]
   15528:	2b00      	cmp	r3, #0
   1552a:	d13a      	bne.n	155a2 <print_object.isra.3+0x92>
		if (p)
   1552c:	b184      	cbz	r4, 15550 <print_object.isra.3+0x40>
			out = ensure(p, fmt ? depth + 4 : 3);
   1552e:	b16d      	cbz	r5, 1554c <print_object.isra.3+0x3c>
   15530:	f10b 0104 	add.w	r1, fp, #4
   15534:	4620      	mov	r0, r4
   15536:	f7ff fd81 	bl	1503c <ensure>
		else
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   1553a:	4604      	mov	r4, r0
		if (!out)
   1553c:	b988      	cbnz	r0, 15562 <print_object.isra.3+0x52>
				if (entries[i])
					cJSON_free(entries[i]);
			}
			cJSON_free(names);
			cJSON_free(entries);
			return 0;
   1553e:	2400      	movs	r4, #0
   15540:	e017      	b.n	15572 <print_object.isra.3+0x62>
		numentries++, child = child->next;
   15542:	9a00      	ldr	r2, [sp, #0]
   15544:	681b      	ldr	r3, [r3, #0]
   15546:	3201      	adds	r2, #1
   15548:	9200      	str	r2, [sp, #0]
   1554a:	e7eb      	b.n	15524 <print_object.isra.3+0x14>
			out = ensure(p, fmt ? depth + 4 : 3);
   1554c:	2103      	movs	r1, #3
   1554e:	e7f1      	b.n	15534 <print_object.isra.3+0x24>
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   15550:	4b97      	ldr	r3, [pc, #604]	; (157b0 <print_object.isra.3+0x2a0>)
   15552:	681b      	ldr	r3, [r3, #0]
   15554:	b11d      	cbz	r5, 1555e <print_object.isra.3+0x4e>
   15556:	f10b 0004 	add.w	r0, fp, #4
   1555a:	4798      	blx	r3
   1555c:	e7ed      	b.n	1553a <print_object.isra.3+0x2a>
   1555e:	2003      	movs	r0, #3
   15560:	e7fb      	b.n	1555a <print_object.isra.3+0x4a>
		*ptr++ = '{';
   15562:	237b      	movs	r3, #123	; 0x7b
   15564:	7003      	strb	r3, [r0, #0]
		if (fmt) {
   15566:	b945      	cbnz	r5, 1557a <print_object.isra.3+0x6a>
		*ptr++ = '{';
   15568:	1c43      	adds	r3, r0, #1
		*ptr++ = '}';
   1556a:	227d      	movs	r2, #125	; 0x7d
   1556c:	701a      	strb	r2, [r3, #0]
		*ptr++ = 0;
   1556e:	2200      	movs	r2, #0
   15570:	705a      	strb	r2, [r3, #1]
				*ptr++ = '\t';
		*ptr++ = '}';
		*ptr++ = 0;
	}
	return out;
}
   15572:	4620      	mov	r0, r4
   15574:	b009      	add	sp, #36	; 0x24
   15576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*ptr++ = '\n';
   1557a:	220a      	movs	r2, #10
   1557c:	1c83      	adds	r3, r0, #2
			for (i = 0; i < depth - 1; i++)
   1557e:	f06f 0501 	mvn.w	r5, #1
			*ptr++ = '\n';
   15582:	7042      	strb	r2, [r0, #1]
				*ptr++ = '\t';
   15584:	2609      	movs	r6, #9
			*ptr++ = '\n';
   15586:	461a      	mov	r2, r3
			for (i = 0; i < depth - 1; i++)
   15588:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   1558c:	1a2d      	subs	r5, r5, r0
   1558e:	1950      	adds	r0, r2, r5
   15590:	4281      	cmp	r1, r0
   15592:	dc03      	bgt.n	1559c <print_object.isra.3+0x8c>
   15594:	2900      	cmp	r1, #0
   15596:	bfa8      	it	ge
   15598:	185b      	addge	r3, r3, r1
   1559a:	e7e6      	b.n	1556a <print_object.isra.3+0x5a>
				*ptr++ = '\t';
   1559c:	f802 6b01 	strb.w	r6, [r2], #1
   155a0:	e7f5      	b.n	1558e <print_object.isra.3+0x7e>
	if (p) {
   155a2:	2c00      	cmp	r4, #0
   155a4:	f000 8092 	beq.w	156cc <print_object.isra.3+0x1bc>
		len = fmt ? 2 : 1;
   155a8:	2d00      	cmp	r5, #0
   155aa:	bf14      	ite	ne
   155ac:	2702      	movne	r7, #2
   155ae:	2701      	moveq	r7, #1
		ptr = ensure(p, len + 1);
   155b0:	4620      	mov	r0, r4
   155b2:	1c79      	adds	r1, r7, #1
		i = p->offset;
   155b4:	f8d4 9008 	ldr.w	r9, [r4, #8]
		ptr = ensure(p, len + 1);
   155b8:	f7ff fd40 	bl	1503c <ensure>
		if (!ptr)
   155bc:	2800      	cmp	r0, #0
   155be:	d0be      	beq.n	1553e <print_object.isra.3+0x2e>
		*ptr++ = '{';
   155c0:	237b      	movs	r3, #123	; 0x7b
   155c2:	7003      	strb	r3, [r0, #0]
		if (fmt)
   155c4:	b9f5      	cbnz	r5, 15604 <print_object.isra.3+0xf4>
		*ptr++ = '{';
   155c6:	1c43      	adds	r3, r0, #1
		*ptr = 0;
   155c8:	2200      	movs	r2, #0
					*ptr++ = '\t';
   155ca:	f04f 0a09 	mov.w	sl, #9
		*ptr = 0;
   155ce:	701a      	strb	r2, [r3, #0]
		p->offset += len;
   155d0:	68a3      	ldr	r3, [r4, #8]
		child = item->child;
   155d2:	f8d8 6000 	ldr.w	r6, [r8]
		p->offset += len;
   155d6:	443b      	add	r3, r7
   155d8:	60a3      	str	r3, [r4, #8]
		depth++;
   155da:	f10b 0801 	add.w	r8, fp, #1
		while (child) {
   155de:	b9ae      	cbnz	r6, 1560c <print_object.isra.3+0xfc>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   155e0:	2d00      	cmp	r5, #0
   155e2:	d066      	beq.n	156b2 <print_object.isra.3+0x1a2>
   155e4:	f10b 0102 	add.w	r1, fp, #2
   155e8:	4620      	mov	r0, r4
   155ea:	f7ff fd27 	bl	1503c <ensure>
		if (!ptr)
   155ee:	2800      	cmp	r0, #0
   155f0:	d0a5      	beq.n	1553e <print_object.isra.3+0x2e>
		if (fmt)
   155f2:	2d00      	cmp	r5, #0
   155f4:	d167      	bne.n	156c6 <print_object.isra.3+0x1b6>
		*ptr++ = '}';
   155f6:	237d      	movs	r3, #125	; 0x7d
   155f8:	7003      	strb	r3, [r0, #0]
		*ptr = 0;
   155fa:	2300      	movs	r3, #0
   155fc:	7043      	strb	r3, [r0, #1]
		out = (p->buffer) + i;
   155fe:	6824      	ldr	r4, [r4, #0]
   15600:	444c      	add	r4, r9
   15602:	e7b6      	b.n	15572 <print_object.isra.3+0x62>
			*ptr++ = '\n';
   15604:	220a      	movs	r2, #10
   15606:	1c83      	adds	r3, r0, #2
   15608:	7042      	strb	r2, [r0, #1]
   1560a:	e7dd      	b.n	155c8 <print_object.isra.3+0xb8>
			if (fmt) {
   1560c:	b15d      	cbz	r5, 15626 <print_object.isra.3+0x116>
				ptr = ensure(p, depth);
   1560e:	4641      	mov	r1, r8
   15610:	4620      	mov	r0, r4
   15612:	f7ff fd13 	bl	1503c <ensure>
				if (!ptr)
   15616:	2800      	cmp	r0, #0
   15618:	d091      	beq.n	1553e <print_object.isra.3+0x2e>
				for (j = 0; j < depth; j++)
   1561a:	2300      	movs	r3, #0
   1561c:	4598      	cmp	r8, r3
   1561e:	dc44      	bgt.n	156aa <print_object.isra.3+0x19a>
				p->offset += depth;
   15620:	68a3      	ldr	r3, [r4, #8]
   15622:	4443      	add	r3, r8
   15624:	60a3      	str	r3, [r4, #8]
			print_string_ptr(child->string, p);
   15626:	4621      	mov	r1, r4
   15628:	6a30      	ldr	r0, [r6, #32]
   1562a:	f7ff fd55 	bl	150d8 <print_string_ptr>
			p->offset = update(p);
   1562e:	4620      	mov	r0, r4
   15630:	f018 f9a4 	bl	2d97c <update>
			ptr = ensure(p, len);
   15634:	4639      	mov	r1, r7
			p->offset = update(p);
   15636:	60a0      	str	r0, [r4, #8]
			ptr = ensure(p, len);
   15638:	4620      	mov	r0, r4
   1563a:	f7ff fcff 	bl	1503c <ensure>
			if (!ptr)
   1563e:	2800      	cmp	r0, #0
   15640:	f43f af7d 	beq.w	1553e <print_object.isra.3+0x2e>
			*ptr++ = ':';
   15644:	f04f 033a 	mov.w	r3, #58	; 0x3a
   15648:	7003      	strb	r3, [r0, #0]
			if (fmt)
   1564a:	b10d      	cbz	r5, 15650 <print_object.isra.3+0x140>
				*ptr++ = '\t';
   1564c:	f880 a001 	strb.w	sl, [r0, #1]
			p->offset += len;
   15650:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   15652:	462a      	mov	r2, r5
			p->offset += len;
   15654:	443b      	add	r3, r7
			print_value(child, depth, fmt, p);
   15656:	4641      	mov	r1, r8
			p->offset += len;
   15658:	60a3      	str	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   1565a:	4630      	mov	r0, r6
   1565c:	4623      	mov	r3, r4
   1565e:	f7ff fef5 	bl	1544c <print_value>
			p->offset = update(p);
   15662:	4620      	mov	r0, r4
   15664:	f018 f98a 	bl	2d97c <update>
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   15668:	1c2b      	adds	r3, r5, #0
   1566a:	bf18      	it	ne
   1566c:	2301      	movne	r3, #1
   1566e:	6832      	ldr	r2, [r6, #0]
			p->offset = update(p);
   15670:	60a0      	str	r0, [r4, #8]
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   15672:	2a00      	cmp	r2, #0
   15674:	bf18      	it	ne
   15676:	3301      	addne	r3, #1
			ptr = ensure(p, len + 1);
   15678:	4620      	mov	r0, r4
   1567a:	1c59      	adds	r1, r3, #1
   1567c:	9300      	str	r3, [sp, #0]
   1567e:	f7ff fcdd 	bl	1503c <ensure>
			if (!ptr)
   15682:	2800      	cmp	r0, #0
   15684:	f43f af5b 	beq.w	1553e <print_object.isra.3+0x2e>
			if (child->next)
   15688:	6832      	ldr	r2, [r6, #0]
   1568a:	9b00      	ldr	r3, [sp, #0]
   1568c:	b112      	cbz	r2, 15694 <print_object.isra.3+0x184>
				*ptr++ = ',';
   1568e:	222c      	movs	r2, #44	; 0x2c
   15690:	f800 2b01 	strb.w	r2, [r0], #1
			if (fmt) {
   15694:	b115      	cbz	r5, 1569c <print_object.isra.3+0x18c>
				*ptr++ = '\n';
   15696:	220a      	movs	r2, #10
   15698:	f800 2b01 	strb.w	r2, [r0], #1
			*ptr = 0;
   1569c:	2200      	movs	r2, #0
   1569e:	7002      	strb	r2, [r0, #0]
			p->offset += len;
   156a0:	68a2      	ldr	r2, [r4, #8]
			child = child->next;
   156a2:	6836      	ldr	r6, [r6, #0]
			p->offset += len;
   156a4:	4413      	add	r3, r2
   156a6:	60a3      	str	r3, [r4, #8]
			child = child->next;
   156a8:	e799      	b.n	155de <print_object.isra.3+0xce>
					*ptr++ = '\t';
   156aa:	f800 a003 	strb.w	sl, [r0, r3]
				for (j = 0; j < depth; j++)
   156ae:	3301      	adds	r3, #1
   156b0:	e7b4      	b.n	1561c <print_object.isra.3+0x10c>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   156b2:	2102      	movs	r1, #2
   156b4:	e798      	b.n	155e8 <print_object.isra.3+0xd8>
				*ptr++ = '\t';
   156b6:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < depth - 1; i++)
   156b8:	3301      	adds	r3, #1
   156ba:	459b      	cmp	fp, r3
   156bc:	dcfb      	bgt.n	156b6 <print_object.isra.3+0x1a6>
   156be:	ea2b 79eb 	bic.w	r9, fp, fp, asr #31
   156c2:	4448      	add	r0, r9
   156c4:	e797      	b.n	155f6 <print_object.isra.3+0xe6>
   156c6:	2300      	movs	r3, #0
				*ptr++ = '\t';
   156c8:	2209      	movs	r2, #9
   156ca:	e7f6      	b.n	156ba <print_object.isra.3+0x1aa>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   156cc:	9b00      	ldr	r3, [sp, #0]
   156ce:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 157b0 <print_object.isra.3+0x2a0>
   156d2:	009f      	lsls	r7, r3, #2
   156d4:	4638      	mov	r0, r7
   156d6:	f8d9 3000 	ldr.w	r3, [r9]
   156da:	4798      	blx	r3
		if (!entries)
   156dc:	4606      	mov	r6, r0
   156de:	2800      	cmp	r0, #0
   156e0:	f43f af2d 	beq.w	1553e <print_object.isra.3+0x2e>
		names = (char **)cJSON_malloc(numentries * sizeof(char *));
   156e4:	f8d9 3000 	ldr.w	r3, [r9]
   156e8:	4638      	mov	r0, r7
   156ea:	4798      	blx	r3
		if (!names) {
   156ec:	9001      	str	r0, [sp, #4]
   156ee:	b920      	cbnz	r0, 156fa <print_object.isra.3+0x1ea>
			cJSON_free(entries);
   156f0:	4b30      	ldr	r3, [pc, #192]	; (157b4 <print_object.isra.3+0x2a4>)
   156f2:	4630      	mov	r0, r6
   156f4:	681b      	ldr	r3, [r3, #0]
   156f6:	4798      	blx	r3
			return 0;
   156f8:	e73b      	b.n	15572 <print_object.isra.3+0x62>
__ssp_bos_icheck3(memset, void *, int)
   156fa:	463a      	mov	r2, r7
   156fc:	4621      	mov	r1, r4
   156fe:	4630      	mov	r0, r6
   15700:	f01e f898 	bl	33834 <memset>
   15704:	463a      	mov	r2, r7
   15706:	4621      	mov	r1, r4
   15708:	9801      	ldr	r0, [sp, #4]
   1570a:	f01e f893 	bl	33834 <memset>
		depth++;
   1570e:	f10b 0301 	add.w	r3, fp, #1
		child = item->child;
   15712:	f8d8 7000 	ldr.w	r7, [r8]
		depth++;
   15716:	9304      	str	r3, [sp, #16]
		if (fmt)
   15718:	b31d      	cbz	r5, 15762 <print_object.isra.3+0x252>
			len += depth;
   1571a:	f10b 0408 	add.w	r4, fp, #8
   1571e:	2d00      	cmp	r5, #0
				       (fmt ? 2 + depth : 0);
   15720:	f10b 0303 	add.w	r3, fp, #3
   15724:	bf08      	it	eq
   15726:	2300      	moveq	r3, #0
   15728:	f04f 0a00 	mov.w	sl, #0
   1572c:	9a01      	ldr	r2, [sp, #4]
				len += strlens(ret) + strlens(str) + 2 +
   1572e:	3302      	adds	r3, #2
   15730:	3a04      	subs	r2, #4
   15732:	9203      	str	r2, [sp, #12]
   15734:	1f32      	subs	r2, r6, #4
   15736:	9202      	str	r2, [sp, #8]
				       (fmt ? 2 + depth : 0);
   15738:	4691      	mov	r9, r2
   1573a:	9a03      	ldr	r2, [sp, #12]
				len += strlens(ret) + strlens(str) + 2 +
   1573c:	9306      	str	r3, [sp, #24]
				       (fmt ? 2 + depth : 0);
   1573e:	9205      	str	r2, [sp, #20]
		while (child) {
   15740:	b98f      	cbnz	r7, 15766 <print_object.isra.3+0x256>
		if (!fail)
   15742:	f1ba 0f00 	cmp.w	sl, #0
   15746:	d037      	beq.n	157b8 <print_object.isra.3+0x2a8>
   15748:	4d1a      	ldr	r5, [pc, #104]	; (157b4 <print_object.isra.3+0x2a4>)
				       (fmt ? 2 + depth : 0);
   1574a:	2400      	movs	r4, #0
   1574c:	462f      	mov	r7, r5
			for (i = 0; i < numentries; i++) {
   1574e:	9a00      	ldr	r2, [sp, #0]
   15750:	682b      	ldr	r3, [r5, #0]
   15752:	42a2      	cmp	r2, r4
   15754:	dc5d      	bgt.n	15812 <print_object.isra.3+0x302>
			cJSON_free(names);
   15756:	9801      	ldr	r0, [sp, #4]
   15758:	4798      	blx	r3
			cJSON_free(entries);
   1575a:	682b      	ldr	r3, [r5, #0]
   1575c:	4630      	mov	r0, r6
   1575e:	4798      	blx	r3
   15760:	e6ed      	b.n	1553e <print_object.isra.3+0x2e>
	int len = 7, i = 0, j;
   15762:	2407      	movs	r4, #7
   15764:	e7db      	b.n	1571e <print_object.isra.3+0x20e>
			names[i] = str = print_string_ptr(child->string, 0);
   15766:	2100      	movs	r1, #0
   15768:	6a38      	ldr	r0, [r7, #32]
   1576a:	f7ff fcb5 	bl	150d8 <print_string_ptr>
   1576e:	9b05      	ldr	r3, [sp, #20]
   15770:	4680      	mov	r8, r0
   15772:	f843 0f04 	str.w	r0, [r3, #4]!
   15776:	9305      	str	r3, [sp, #20]
			entries[i++] = ret = print_value(child, depth, fmt, 0);
   15778:	462a      	mov	r2, r5
   1577a:	2300      	movs	r3, #0
   1577c:	9904      	ldr	r1, [sp, #16]
   1577e:	4638      	mov	r0, r7
   15780:	f7ff fe64 	bl	1544c <print_value>
   15784:	f849 0f04 	str.w	r0, [r9, #4]!
			if (str && ret)
   15788:	f1b8 0f00 	cmp.w	r8, #0
   1578c:	d00d      	beq.n	157aa <print_object.isra.3+0x29a>
   1578e:	b160      	cbz	r0, 157aa <print_object.isra.3+0x29a>
				len += strlens(ret) + strlens(str) + 2 +
   15790:	f7fc fc76 	bl	12080 <strlen>
   15794:	9007      	str	r0, [sp, #28]
   15796:	4640      	mov	r0, r8
   15798:	f7fc fc72 	bl	12080 <strlen>
   1579c:	9b06      	ldr	r3, [sp, #24]
   1579e:	441c      	add	r4, r3
   157a0:	9b07      	ldr	r3, [sp, #28]
   157a2:	441c      	add	r4, r3
   157a4:	4404      	add	r4, r0
			child = child->next;
   157a6:	683f      	ldr	r7, [r7, #0]
   157a8:	e7ca      	b.n	15740 <print_object.isra.3+0x230>
				fail = 1;
   157aa:	f04f 0a01 	mov.w	sl, #1
   157ae:	e7fa      	b.n	157a6 <print_object.isra.3+0x296>
   157b0:	20020080 	.word	0x20020080
   157b4:	2002007c 	.word	0x2002007c
			out = (char *)cJSON_malloc(len);
   157b8:	4b4a      	ldr	r3, [pc, #296]	; (158e4 <print_object.isra.3+0x3d4>)
   157ba:	4620      	mov	r0, r4
   157bc:	681b      	ldr	r3, [r3, #0]
   157be:	4798      	blx	r3
		if (!out)
   157c0:	4604      	mov	r4, r0
   157c2:	2800      	cmp	r0, #0
   157c4:	d0c0      	beq.n	15748 <print_object.isra.3+0x238>
		*out = '{';
   157c6:	237b      	movs	r3, #123	; 0x7b
   157c8:	7003      	strb	r3, [r0, #0]
		if (fmt)
   157ca:	bb75      	cbnz	r5, 1582a <print_object.isra.3+0x31a>
		ptr = out + 1;
   157cc:	1c47      	adds	r7, r0, #1
		*ptr = 0;
   157ce:	f04f 0900 	mov.w	r9, #0
   157d2:	9b04      	ldr	r3, [sp, #16]
   157d4:	f887 9000 	strb.w	r9, [r7]
		for (i = 0; i < numentries; i++) {
   157d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   157dc:	9305      	str	r3, [sp, #20]
   157de:	9b00      	ldr	r3, [sp, #0]
   157e0:	454b      	cmp	r3, r9
   157e2:	dc26      	bgt.n	15832 <print_object.isra.3+0x322>
		cJSON_free(names);
   157e4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 158e8 <print_object.isra.3+0x3d8>
   157e8:	9801      	ldr	r0, [sp, #4]
   157ea:	f8d8 3000 	ldr.w	r3, [r8]
   157ee:	4798      	blx	r3
		cJSON_free(entries);
   157f0:	f8d8 3000 	ldr.w	r3, [r8]
   157f4:	4630      	mov	r0, r6
   157f6:	4798      	blx	r3
		if (fmt)
   157f8:	b135      	cbz	r5, 15808 <print_object.isra.3+0x2f8>
				*ptr++ = '\t';
   157fa:	2309      	movs	r3, #9
			for (i = 0; i < depth - 1; i++)
   157fc:	45d3      	cmp	fp, sl
   157fe:	dc6b      	bgt.n	158d8 <print_object.isra.3+0x3c8>
   15800:	f1bb 0f00 	cmp.w	fp, #0
   15804:	bfa8      	it	ge
   15806:	445f      	addge	r7, fp
		*ptr++ = '}';
   15808:	237d      	movs	r3, #125	; 0x7d
   1580a:	703b      	strb	r3, [r7, #0]
		*ptr++ = 0;
   1580c:	2300      	movs	r3, #0
   1580e:	707b      	strb	r3, [r7, #1]
   15810:	e6af      	b.n	15572 <print_object.isra.3+0x62>
				if (names[i])
   15812:	9a01      	ldr	r2, [sp, #4]
   15814:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   15818:	b100      	cbz	r0, 1581c <print_object.isra.3+0x30c>
					cJSON_free(names[i]);
   1581a:	4798      	blx	r3
				if (entries[i])
   1581c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15820:	b108      	cbz	r0, 15826 <print_object.isra.3+0x316>
					cJSON_free(entries[i]);
   15822:	683b      	ldr	r3, [r7, #0]
   15824:	4798      	blx	r3
			for (i = 0; i < numentries; i++) {
   15826:	3401      	adds	r4, #1
   15828:	e791      	b.n	1574e <print_object.isra.3+0x23e>
			*ptr++ = '\n';
   1582a:	230a      	movs	r3, #10
   1582c:	1c87      	adds	r7, r0, #2
   1582e:	7043      	strb	r3, [r0, #1]
   15830:	e7cd      	b.n	157ce <print_object.isra.3+0x2be>
			if (fmt)
   15832:	b155      	cbz	r5, 1584a <print_object.isra.3+0x33a>
				for (j = 0; j < depth; j++)
   15834:	2300      	movs	r3, #0
   15836:	e003      	b.n	15840 <print_object.isra.3+0x330>
					*ptr++ = '\t';
   15838:	f04f 0209 	mov.w	r2, #9
   1583c:	54fa      	strb	r2, [r7, r3]
				for (j = 0; j < depth; j++)
   1583e:	3301      	adds	r3, #1
   15840:	9a04      	ldr	r2, [sp, #16]
   15842:	429a      	cmp	r2, r3
   15844:	dcf8      	bgt.n	15838 <print_object.isra.3+0x328>
   15846:	9b05      	ldr	r3, [sp, #20]
   15848:	441f      	add	r7, r3
			tmplen = strlens(names[i]);
   1584a:	9b03      	ldr	r3, [sp, #12]
   1584c:	6858      	ldr	r0, [r3, #4]
   1584e:	b108      	cbz	r0, 15854 <print_object.isra.3+0x344>
   15850:	f7fc fc16 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15854:	9b03      	ldr	r3, [sp, #12]
   15856:	4680      	mov	r8, r0
   15858:	4602      	mov	r2, r0
   1585a:	6859      	ldr	r1, [r3, #4]
   1585c:	4638      	mov	r0, r7
   1585e:	f01d ffaf 	bl	337c0 <memcpy>
			*ptr++ = ':';
   15862:	223a      	movs	r2, #58	; 0x3a
			ptr += tmplen;
   15864:	eb07 0308 	add.w	r3, r7, r8
			*ptr++ = ':';
   15868:	f807 2008 	strb.w	r2, [r7, r8]
			if (fmt)
   1586c:	bb75      	cbnz	r5, 158cc <print_object.isra.3+0x3bc>
			*ptr++ = ':';
   1586e:	f103 0801 	add.w	r8, r3, #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15872:	9b02      	ldr	r3, [sp, #8]
   15874:	4640      	mov	r0, r8
   15876:	6859      	ldr	r1, [r3, #4]
   15878:	f01e f907 	bl	33a8a <strcpy>
			ptr += strlens(entries[i]);
   1587c:	9b02      	ldr	r3, [sp, #8]
   1587e:	6858      	ldr	r0, [r3, #4]
   15880:	b108      	cbz	r0, 15886 <print_object.isra.3+0x376>
   15882:	f7fc fbfd 	bl	12080 <strlen>
			if (i != numentries - 1)
   15886:	9b00      	ldr	r3, [sp, #0]
			ptr += strlens(entries[i]);
   15888:	eb08 0700 	add.w	r7, r8, r0
			if (i != numentries - 1)
   1588c:	3b01      	subs	r3, #1
   1588e:	4599      	cmp	r9, r3
				*ptr++ = ',';
   15890:	bf1e      	ittt	ne
   15892:	232c      	movne	r3, #44	; 0x2c
   15894:	3701      	addne	r7, #1
   15896:	f808 3000 	strbne.w	r3, [r8, r0]
			if (fmt) {
   1589a:	b115      	cbz	r5, 158a2 <print_object.isra.3+0x392>
				*ptr++ = '\n';
   1589c:	230a      	movs	r3, #10
   1589e:	f807 3b01 	strb.w	r3, [r7], #1
			*ptr = 0;
   158a2:	2300      	movs	r3, #0
			cJSON_free(names[i]);
   158a4:	9a03      	ldr	r2, [sp, #12]
			*ptr = 0;
   158a6:	703b      	strb	r3, [r7, #0]
			cJSON_free(names[i]);
   158a8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 158e8 <print_object.isra.3+0x3d8>
   158ac:	f852 0f04 	ldr.w	r0, [r2, #4]!
   158b0:	f8d8 3000 	ldr.w	r3, [r8]
   158b4:	9203      	str	r2, [sp, #12]
   158b6:	4798      	blx	r3
			cJSON_free(entries[i]);
   158b8:	9a02      	ldr	r2, [sp, #8]
   158ba:	f8d8 3000 	ldr.w	r3, [r8]
   158be:	f852 0f04 	ldr.w	r0, [r2, #4]!
		for (i = 0; i < numentries; i++) {
   158c2:	f109 0901 	add.w	r9, r9, #1
			cJSON_free(entries[i]);
   158c6:	9202      	str	r2, [sp, #8]
   158c8:	4798      	blx	r3
   158ca:	e788      	b.n	157de <print_object.isra.3+0x2ce>
				*ptr++ = '\t';
   158cc:	f04f 0209 	mov.w	r2, #9
   158d0:	f103 0802 	add.w	r8, r3, #2
   158d4:	705a      	strb	r2, [r3, #1]
   158d6:	e7cc      	b.n	15872 <print_object.isra.3+0x362>
				*ptr++ = '\t';
   158d8:	f807 300a 	strb.w	r3, [r7, sl]
			for (i = 0; i < depth - 1; i++)
   158dc:	f10a 0a01 	add.w	sl, sl, #1
   158e0:	e78c      	b.n	157fc <print_object.isra.3+0x2ec>
   158e2:	bf00      	nop
   158e4:	20020080 	.word	0x20020080
   158e8:	2002007c 	.word	0x2002007c

000158ec <cJSON_Delete>:
{
   158ec:	b570      	push	{r4, r5, r6, lr}
   158ee:	4604      	mov	r4, r0
   158f0:	4d0f      	ldr	r5, [pc, #60]	; (15930 <cJSON_Delete+0x44>)
	while (c) {
   158f2:	b904      	cbnz	r4, 158f6 <cJSON_Delete+0xa>
}
   158f4:	bd70      	pop	{r4, r5, r6, pc}
		if (!(c->type & cJSON_IsReference) && c->child)
   158f6:	68e3      	ldr	r3, [r4, #12]
		next = c->next;
   158f8:	6826      	ldr	r6, [r4, #0]
		if (!(c->type & cJSON_IsReference) && c->child)
   158fa:	05d9      	lsls	r1, r3, #23
   158fc:	d403      	bmi.n	15906 <cJSON_Delete+0x1a>
   158fe:	68a0      	ldr	r0, [r4, #8]
   15900:	b968      	cbnz	r0, 1591e <cJSON_Delete+0x32>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   15902:	6920      	ldr	r0, [r4, #16]
   15904:	b988      	cbnz	r0, 1592a <cJSON_Delete+0x3e>
		if (!(c->type & cJSON_StringIsConst) && c->string)
   15906:	68e3      	ldr	r3, [r4, #12]
   15908:	059b      	lsls	r3, r3, #22
   1590a:	d403      	bmi.n	15914 <cJSON_Delete+0x28>
   1590c:	6a20      	ldr	r0, [r4, #32]
   1590e:	b108      	cbz	r0, 15914 <cJSON_Delete+0x28>
			cJSON_free(c->string);
   15910:	682b      	ldr	r3, [r5, #0]
   15912:	4798      	blx	r3
		cJSON_free(c);
   15914:	4620      	mov	r0, r4
   15916:	682b      	ldr	r3, [r5, #0]
   15918:	4798      	blx	r3
		c = next;
   1591a:	4634      	mov	r4, r6
   1591c:	e7e9      	b.n	158f2 <cJSON_Delete+0x6>
			cJSON_Delete(c->child);
   1591e:	f7ff ffe5 	bl	158ec <cJSON_Delete>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   15922:	68e3      	ldr	r3, [r4, #12]
   15924:	05da      	lsls	r2, r3, #23
   15926:	d5ec      	bpl.n	15902 <cJSON_Delete+0x16>
   15928:	e7ed      	b.n	15906 <cJSON_Delete+0x1a>
			cJSON_free(c->valuestring);
   1592a:	682b      	ldr	r3, [r5, #0]
   1592c:	4798      	blx	r3
   1592e:	e7ea      	b.n	15906 <cJSON_Delete+0x1a>
   15930:	2002007c 	.word	0x2002007c

00015934 <cJSON_ParseWithOpts>:
{
   15934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15938:	4605      	mov	r5, r0
   1593a:	460e      	mov	r6, r1
   1593c:	4691      	mov	r9, r2
	ep = 0;
   1593e:	2700      	movs	r7, #0
	cJSON *c = cJSON_New_Item();
   15940:	f7ff fa72 	bl	14e28 <cJSON_New_Item>
	ep = 0;
   15944:	f8df 8050 	ldr.w	r8, [pc, #80]	; 15998 <cJSON_ParseWithOpts+0x64>
	if (!c)
   15948:	4604      	mov	r4, r0
	ep = 0;
   1594a:	f8c8 7000 	str.w	r7, [r8]
	if (!c)
   1594e:	b160      	cbz	r0, 1596a <cJSON_ParseWithOpts+0x36>
	end = parse_value(c, skip(value));
   15950:	4628      	mov	r0, r5
   15952:	f018 f80a 	bl	2d96a <skip>
   15956:	4601      	mov	r1, r0
   15958:	4620      	mov	r0, r4
   1595a:	f7ff fa75 	bl	14e48 <parse_value>
	if (!end) {
   1595e:	4605      	mov	r5, r0
   15960:	b930      	cbnz	r0, 15970 <cJSON_ParseWithOpts+0x3c>
		cJSON_Delete(c);
   15962:	4620      	mov	r0, r4
   15964:	f7ff ffc2 	bl	158ec <cJSON_Delete>
		return 0;
   15968:	462c      	mov	r4, r5
}
   1596a:	4620      	mov	r0, r4
   1596c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (require_null_terminated) {
   15970:	f1b9 0f00 	cmp.w	r9, #0
   15974:	d00b      	beq.n	1598e <cJSON_ParseWithOpts+0x5a>
		end = skip(end);
   15976:	f017 fff8 	bl	2d96a <skip>
		if (*end) {
   1597a:	7803      	ldrb	r3, [r0, #0]
		end = skip(end);
   1597c:	4605      	mov	r5, r0
		if (*end) {
   1597e:	b133      	cbz	r3, 1598e <cJSON_ParseWithOpts+0x5a>
			cJSON_Delete(c);
   15980:	4620      	mov	r0, r4
   15982:	f7ff ffb3 	bl	158ec <cJSON_Delete>
			return 0;
   15986:	463c      	mov	r4, r7
			ep = end;
   15988:	f8c8 5000 	str.w	r5, [r8]
			return 0;
   1598c:	e7ed      	b.n	1596a <cJSON_ParseWithOpts+0x36>
	if (return_parse_end)
   1598e:	2e00      	cmp	r6, #0
   15990:	d0eb      	beq.n	1596a <cJSON_ParseWithOpts+0x36>
		*return_parse_end = end;
   15992:	6035      	str	r5, [r6, #0]
   15994:	e7e9      	b.n	1596a <cJSON_ParseWithOpts+0x36>
   15996:	bf00      	nop
   15998:	200213f4 	.word	0x200213f4

0001599c <cJSON_AddItemToObject>:
			c = c->next;
		suffix_object(c, item);
	}
}
void cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
   1599c:	b570      	push	{r4, r5, r6, lr}
   1599e:	4605      	mov	r5, r0
   159a0:	460e      	mov	r6, r1
	if (!item)
   159a2:	4614      	mov	r4, r2
   159a4:	b172      	cbz	r2, 159c4 <cJSON_AddItemToObject+0x28>
		return;
	if (item->string)
   159a6:	6a10      	ldr	r0, [r2, #32]
   159a8:	b110      	cbz	r0, 159b0 <cJSON_AddItemToObject+0x14>
		cJSON_free(item->string);
   159aa:	4b07      	ldr	r3, [pc, #28]	; (159c8 <cJSON_AddItemToObject+0x2c>)
   159ac:	681b      	ldr	r3, [r3, #0]
   159ae:	4798      	blx	r3
	item->string = cJSON_strdup(string);
   159b0:	4630      	mov	r0, r6
   159b2:	f7ff fb7b 	bl	150ac <cJSON_strdup>
	cJSON_AddItemToArray(object, item);
   159b6:	4621      	mov	r1, r4
	item->string = cJSON_strdup(string);
   159b8:	6220      	str	r0, [r4, #32]
	cJSON_AddItemToArray(object, item);
   159ba:	4628      	mov	r0, r5
}
   159bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cJSON_AddItemToArray(object, item);
   159c0:	f017 bff2 	b.w	2d9a8 <cJSON_AddItemToArray>
}
   159c4:	bd70      	pop	{r4, r5, r6, pc}
   159c6:	bf00      	nop
   159c8:	2002007c 	.word	0x2002007c

000159cc <timer_work_handler>:
bool timer_stopped = true;

/* work handler */
void timer_work_handler(struct k_work *work)
{
	timer_stopped = false;
   159cc:	2200      	movs	r2, #0
   159ce:	4b03      	ldr	r3, [pc, #12]	; (159dc <timer_work_handler+0x10>)
   159d0:	701a      	strb	r2, [r3, #0]

	sec += 1;
   159d2:	4a03      	ldr	r2, [pc, #12]	; (159e0 <timer_work_handler+0x14>)
   159d4:	6813      	ldr	r3, [r2, #0]
   159d6:	3301      	adds	r3, #1
   159d8:	6013      	str	r3, [r2, #0]
	m = (sec -(3600*h))/60;
	
	s = (sec -(3600*h)-(m*60));

	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
}
   159da:	4770      	bx	lr
   159dc:	2002033c 	.word	0x2002033c
   159e0:	20021428 	.word	0x20021428

000159e4 <timer_stop_work_handler>:

void timer_stop_work_handler(struct k_work *work)
{
	LOG_DBG("BSEC took %d seconds to stabilise", sec);
	sec = 0;
   159e4:	2200      	movs	r2, #0
   159e6:	4b03      	ldr	r3, [pc, #12]	; (159f4 <timer_stop_work_handler+0x10>)
   159e8:	601a      	str	r2, [r3, #0]
	timer_stopped = true;
   159ea:	2201      	movs	r2, #1
   159ec:	4b02      	ldr	r3, [pc, #8]	; (159f8 <timer_stop_work_handler+0x14>)
   159ee:	701a      	strb	r2, [r3, #0]
}
   159f0:	4770      	bx	lr
   159f2:	bf00      	nop
   159f4:	20021428 	.word	0x20021428
   159f8:	2002033c 	.word	0x2002033c

000159fc <submit_poll_work>:
	return 0;
}

static inline int submit_poll_work(const u32_t delay_s)
{
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   159fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a00:	4b02      	ldr	r3, [pc, #8]	; (15a0c <submit_poll_work+0x10>)
   15a02:	4342      	muls	r2, r0
   15a04:	4902      	ldr	r1, [pc, #8]	; (15a10 <submit_poll_work+0x14>)
   15a06:	6818      	ldr	r0, [r3, #0]
   15a08:	f014 b9b4 	b.w	29d74 <k_delayed_work_submit_to_queue>
   15a0c:	2002141c 	.word	0x2002141c
   15a10:	200213fc 	.word	0x200213fc

00015a14 <bsec_thread>:
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   15a14:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
{
   15a18:	b507      	push	{r0, r1, r2, lr}
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   15a1a:	4a05      	ldr	r2, [pc, #20]	; (15a30 <bsec_thread+0x1c>)
   15a1c:	9300      	str	r3, [sp, #0]
   15a1e:	4905      	ldr	r1, [pc, #20]	; (15a34 <bsec_thread+0x20>)
   15a20:	4b05      	ldr	r3, [pc, #20]	; (15a38 <bsec_thread+0x24>)
   15a22:	4806      	ldr	r0, [pc, #24]	; (15a3c <bsec_thread+0x28>)
   15a24:	f000 fc9e 	bl	16364 <bsec_iot_loop>
}
   15a28:	b003      	add	sp, #12
   15a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a2e:	bf00      	nop
   15a30:	00015b2d 	.word	0x00015b2d
   15a34:	0002da19 	.word	0x0002da19
   15a38:	00015a41 	.word	0x00015a41
   15a3c:	0002da3d 	.word	0x0002da3d

00015a40 <state_save>:
	settings_save_one("bsec/state", state_buffer, length);
   15a40:	460a      	mov	r2, r1
   15a42:	4601      	mov	r1, r0
   15a44:	4801      	ldr	r0, [pc, #4]	; (15a4c <state_save+0xc>)
   15a46:	f002 b929 	b.w	17c9c <settings_save_one>
   15a4a:	bf00      	nop
   15a4c:	00035d32 	.word	0x00035d32

00015a50 <settings_set>:
{
   15a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a54:	460d      	mov	r5, r1
	if (!strcmp(key, "state")) {
   15a56:	490b      	ldr	r1, [pc, #44]	; (15a84 <settings_set+0x34>)
{
   15a58:	4617      	mov	r7, r2
   15a5a:	4698      	mov	r8, r3
	if (!strcmp(key, "state")) {
   15a5c:	f7fc fb06 	bl	1206c <strcmp>
   15a60:	4e09      	ldr	r6, [pc, #36]	; (15a88 <settings_set+0x38>)
   15a62:	4604      	mov	r4, r0
   15a64:	b130      	cbz	r0, 15a74 <settings_set+0x24>
	s_state_buffer_len = 0;
   15a66:	2300      	movs	r3, #0
	return -1;
   15a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	s_state_buffer_len = 0;
   15a6c:	6033      	str	r3, [r6, #0]
}
   15a6e:	4620      	mov	r0, r4
   15a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		s_state_buffer_len = len_rd;
   15a74:	6035      	str	r5, [r6, #0]
		if (read_cb(cb_arg, s_state_buffer, len_rd) > 0) {
   15a76:	462a      	mov	r2, r5
   15a78:	4904      	ldr	r1, [pc, #16]	; (15a8c <settings_set+0x3c>)
   15a7a:	4640      	mov	r0, r8
   15a7c:	47b8      	blx	r7
   15a7e:	2800      	cmp	r0, #0
   15a80:	dcf5      	bgt.n	15a6e <settings_set+0x1e>
   15a82:	e7f0      	b.n	15a66 <settings_set+0x16>
   15a84:	00035d37 	.word	0x00035d37
   15a88:	20021424 	.word	0x20021424
   15a8c:	20027d6c 	.word	0x20027d6c

00015a90 <state_load>:
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   15a90:	4b07      	ldr	r3, [pc, #28]	; (15ab0 <state_load+0x20>)
{
   15a92:	b510      	push	{r4, lr}
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   15a94:	681c      	ldr	r4, [r3, #0]
   15a96:	2c00      	cmp	r4, #0
   15a98:	dd07      	ble.n	15aaa <state_load+0x1a>
   15a9a:	428c      	cmp	r4, r1
   15a9c:	d805      	bhi.n	15aaa <state_load+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15a9e:	4622      	mov	r2, r4
   15aa0:	4904      	ldr	r1, [pc, #16]	; (15ab4 <state_load+0x24>)
   15aa2:	f01d fe8d 	bl	337c0 <memcpy>
}
   15aa6:	4620      	mov	r0, r4
   15aa8:	bd10      	pop	{r4, pc}
		return 0;
   15aaa:	2400      	movs	r4, #0
   15aac:	e7fb      	b.n	15aa6 <state_load+0x16>
   15aae:	bf00      	nop
   15ab0:	20021424 	.word	0x20021424
   15ab4:	20027d6c 	.word	0x20027d6c

00015ab8 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   15ab8:	b510      	push	{r4, lr}

	if (data_send_interval_s == 0) {
   15aba:	4c09      	ldr	r4, [pc, #36]	; (15ae0 <env_sensors_poll_fn+0x28>)
   15abc:	6822      	ldr	r2, [r4, #0]
   15abe:	b16a      	cbz	r2, 15adc <env_sensors_poll_fn+0x24>
		return;
	}

	if (data_ready_cb) {
   15ac0:	4b08      	ldr	r3, [pc, #32]	; (15ae4 <env_sensors_poll_fn+0x2c>)
   15ac2:	681b      	ldr	r3, [r3, #0]
   15ac4:	b103      	cbz	r3, 15ac8 <env_sensors_poll_fn+0x10>
		data_ready_cb();
   15ac6:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   15ac8:	4b07      	ldr	r3, [pc, #28]	; (15ae8 <env_sensors_poll_fn+0x30>)
   15aca:	781b      	ldrb	r3, [r3, #0]
   15acc:	b923      	cbnz	r3, 15ad8 <env_sensors_poll_fn+0x20>
   15ace:	6820      	ldr	r0, [r4, #0]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   15ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	submit_poll_work(backoff_enabled ?
   15ad4:	f7ff bf92 	b.w	159fc <submit_poll_work>
   15ad8:	2014      	movs	r0, #20
   15ada:	e7f9      	b.n	15ad0 <env_sensors_poll_fn+0x18>
}
   15adc:	bd10      	pop	{r4, pc}
   15ade:	bf00      	nop
   15ae0:	20020088 	.word	0x20020088
   15ae4:	200213f8 	.word	0x200213f8
   15ae8:	20027d69 	.word	0x20027d69

00015aec <bus_read>:
{
   15aec:	b530      	push	{r4, r5, lr}
   15aee:	b089      	sub	sp, #36	; 0x24
   15af0:	f88d 1007 	strb.w	r1, [sp, #7]
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   15af4:	490c      	ldr	r1, [pc, #48]	; (15b28 <bus_read+0x3c>)
{
   15af6:	4605      	mov	r5, r0
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   15af8:	6808      	ldr	r0, [r1, #0]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
   15afa:	f10d 0107 	add.w	r1, sp, #7
   15afe:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   15b00:	2101      	movs	r1, #1
   15b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
   15b06:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   15b08:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   15b0a:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   15b0c:	f88d 301c 	strb.w	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   15b10:	f88d 1010 	strb.w	r1, [sp, #16]
	return api->transfer(dev, msgs, num_msgs, addr);
   15b14:	6883      	ldr	r3, [r0, #8]
   15b16:	2202      	movs	r2, #2
   15b18:	685c      	ldr	r4, [r3, #4]
   15b1a:	a902      	add	r1, sp, #8
   15b1c:	462b      	mov	r3, r5
   15b1e:	47a0      	blx	r4
}
   15b20:	b240      	sxtb	r0, r0
   15b22:	b009      	add	sp, #36	; 0x24
   15b24:	bd30      	pop	{r4, r5, pc}
   15b26:	bf00      	nop
   15b28:	20021420 	.word	0x20021420

00015b2c <output_ready>:
{
   15b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!iaq_reading_ok) {
   15b30:	4c8b      	ldr	r4, [pc, #556]	; (15d60 <output_ready+0x234>)
{
   15b32:	4615      	mov	r5, r2
	if (!iaq_reading_ok) {
   15b34:	7822      	ldrb	r2, [r4, #0]
{
   15b36:	ed2d 8b02 	vpush	{d8}
   15b3a:	ee10 7a10 	vmov	r7, s0
   15b3e:	ee10 9a90 	vmov	r9, s1
   15b42:	ee11 8a10 	vmov	r8, s2
   15b46:	eeb0 8a61 	vmov.f32	s16, s3
	if (!iaq_reading_ok) {
   15b4a:	b92a      	cbnz	r2, 15b58 <output_ready+0x2c>
	z_impl_k_timer_start(timer, duration, period);
   15b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b50:	4884      	ldr	r0, [pc, #528]	; (15d64 <output_ready+0x238>)
   15b52:	4611      	mov	r1, r2
   15b54:	f014 fd44 	bl	2a5e0 <z_impl_k_timer_start>
	switch (iaq_accuracy) 
   15b58:	2d03      	cmp	r5, #3
   15b5a:	d107      	bne.n	15b6c <output_ready+0x40>
			iaq_reading_ok = true;
   15b5c:	2201      	movs	r2, #1
	if (timer_stopped && iaq_reading_ok) {
   15b5e:	4b82      	ldr	r3, [pc, #520]	; (15d68 <output_ready+0x23c>)
			iaq_reading_ok = true;
   15b60:	7022      	strb	r2, [r4, #0]
	if (timer_stopped && iaq_reading_ok) {
   15b62:	781b      	ldrb	r3, [r3, #0]
			if (!timer_stopped) {
   15b64:	b913      	cbnz	r3, 15b6c <output_ready+0x40>
	z_impl_k_timer_stop(timer);
   15b66:	487f      	ldr	r0, [pc, #508]	; (15d64 <output_ready+0x238>)
   15b68:	f01d fd90 	bl	3368c <z_impl_k_timer_stop>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   15b6c:	f04f 0320 	mov.w	r3, #32
   15b70:	f3ef 8611 	mrs	r6, BASEPRI
   15b74:	f383 8811 	msr	BASEPRI, r3
   15b78:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15b7c:	487b      	ldr	r0, [pc, #492]	; (15d6c <output_ready+0x240>)
   15b7e:	f014 f8af 	bl	29ce0 <z_spin_lock_valid>
   15b82:	b968      	cbnz	r0, 15ba0 <output_ready+0x74>
   15b84:	235c      	movs	r3, #92	; 0x5c
   15b86:	4a7a      	ldr	r2, [pc, #488]	; (15d70 <output_ready+0x244>)
   15b88:	497a      	ldr	r1, [pc, #488]	; (15d74 <output_ready+0x248>)
   15b8a:	487b      	ldr	r0, [pc, #492]	; (15d78 <output_ready+0x24c>)
   15b8c:	f018 fb16 	bl	2e1bc <printk>
   15b90:	4976      	ldr	r1, [pc, #472]	; (15d6c <output_ready+0x240>)
   15b92:	487a      	ldr	r0, [pc, #488]	; (15d7c <output_ready+0x250>)
   15b94:	f018 fb12 	bl	2e1bc <printk>
   15b98:	215c      	movs	r1, #92	; 0x5c
   15b9a:	4875      	ldr	r0, [pc, #468]	; (15d70 <output_ready+0x244>)
   15b9c:	f018 fe0f 	bl	2e7be <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   15ba0:	4c77      	ldr	r4, [pc, #476]	; (15d80 <output_ready+0x254>)
   15ba2:	f104 0018 	add.w	r0, r4, #24
   15ba6:	f014 f8b9 	bl	29d1c <z_spin_lock_set_owner>
	temp_sensor.sensor.value = temperature;
   15baa:	4648      	mov	r0, r9
   15bac:	f7f7 fa26 	bl	cffc <__aeabi_f2d>
   15bb0:	e9c4 0102 	strd	r0, r1, [r4, #8]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15bb4:	f104 0018 	add.w	r0, r4, #24
   15bb8:	f014 f8a0 	bl	29cfc <z_spin_unlock_valid>
   15bbc:	b970      	cbnz	r0, 15bdc <output_ready+0xb0>
   15bbe:	2384      	movs	r3, #132	; 0x84
   15bc0:	4a6b      	ldr	r2, [pc, #428]	; (15d70 <output_ready+0x244>)
   15bc2:	4970      	ldr	r1, [pc, #448]	; (15d84 <output_ready+0x258>)
   15bc4:	486c      	ldr	r0, [pc, #432]	; (15d78 <output_ready+0x24c>)
   15bc6:	f018 faf9 	bl	2e1bc <printk>
   15bca:	f104 0118 	add.w	r1, r4, #24
   15bce:	486e      	ldr	r0, [pc, #440]	; (15d88 <output_ready+0x25c>)
   15bd0:	f018 faf4 	bl	2e1bc <printk>
   15bd4:	2184      	movs	r1, #132	; 0x84
   15bd6:	4866      	ldr	r0, [pc, #408]	; (15d70 <output_ready+0x244>)
   15bd8:	f018 fdf1 	bl	2e7be <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   15bdc:	f386 8811 	msr	BASEPRI, r6
   15be0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15be4:	f04f 0320 	mov.w	r3, #32
   15be8:	f3ef 8611 	mrs	r6, BASEPRI
   15bec:	f383 8811 	msr	BASEPRI, r3
   15bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15bf4:	4865      	ldr	r0, [pc, #404]	; (15d8c <output_ready+0x260>)
   15bf6:	f014 f873 	bl	29ce0 <z_spin_lock_valid>
   15bfa:	b968      	cbnz	r0, 15c18 <output_ready+0xec>
   15bfc:	235c      	movs	r3, #92	; 0x5c
   15bfe:	4a5c      	ldr	r2, [pc, #368]	; (15d70 <output_ready+0x244>)
   15c00:	495c      	ldr	r1, [pc, #368]	; (15d74 <output_ready+0x248>)
   15c02:	485d      	ldr	r0, [pc, #372]	; (15d78 <output_ready+0x24c>)
   15c04:	f018 fada 	bl	2e1bc <printk>
   15c08:	4960      	ldr	r1, [pc, #384]	; (15d8c <output_ready+0x260>)
   15c0a:	485c      	ldr	r0, [pc, #368]	; (15d7c <output_ready+0x250>)
   15c0c:	f018 fad6 	bl	2e1bc <printk>
   15c10:	215c      	movs	r1, #92	; 0x5c
   15c12:	4857      	ldr	r0, [pc, #348]	; (15d70 <output_ready+0x244>)
   15c14:	f018 fdd3 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15c18:	4c5d      	ldr	r4, [pc, #372]	; (15d90 <output_ready+0x264>)
   15c1a:	f104 0018 	add.w	r0, r4, #24
   15c1e:	f014 f87d 	bl	29d1c <z_spin_lock_set_owner>
	humid_sensor.sensor.value = humidity;
   15c22:	4640      	mov	r0, r8
   15c24:	f7f7 f9ea 	bl	cffc <__aeabi_f2d>
   15c28:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15c2c:	f104 0018 	add.w	r0, r4, #24
   15c30:	f014 f864 	bl	29cfc <z_spin_unlock_valid>
   15c34:	b970      	cbnz	r0, 15c54 <output_ready+0x128>
   15c36:	2384      	movs	r3, #132	; 0x84
   15c38:	4a4d      	ldr	r2, [pc, #308]	; (15d70 <output_ready+0x244>)
   15c3a:	4952      	ldr	r1, [pc, #328]	; (15d84 <output_ready+0x258>)
   15c3c:	484e      	ldr	r0, [pc, #312]	; (15d78 <output_ready+0x24c>)
   15c3e:	f018 fabd 	bl	2e1bc <printk>
   15c42:	f104 0118 	add.w	r1, r4, #24
   15c46:	4850      	ldr	r0, [pc, #320]	; (15d88 <output_ready+0x25c>)
   15c48:	f018 fab8 	bl	2e1bc <printk>
   15c4c:	2184      	movs	r1, #132	; 0x84
   15c4e:	4848      	ldr	r0, [pc, #288]	; (15d70 <output_ready+0x244>)
   15c50:	f018 fdb5 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   15c54:	f386 8811 	msr	BASEPRI, r6
   15c58:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15c5c:	f04f 0320 	mov.w	r3, #32
   15c60:	f3ef 8611 	mrs	r6, BASEPRI
   15c64:	f383 8811 	msr	BASEPRI, r3
   15c68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15c6c:	4849      	ldr	r0, [pc, #292]	; (15d94 <output_ready+0x268>)
   15c6e:	f014 f837 	bl	29ce0 <z_spin_lock_valid>
   15c72:	b968      	cbnz	r0, 15c90 <output_ready+0x164>
   15c74:	235c      	movs	r3, #92	; 0x5c
   15c76:	4a3e      	ldr	r2, [pc, #248]	; (15d70 <output_ready+0x244>)
   15c78:	493e      	ldr	r1, [pc, #248]	; (15d74 <output_ready+0x248>)
   15c7a:	483f      	ldr	r0, [pc, #252]	; (15d78 <output_ready+0x24c>)
   15c7c:	f018 fa9e 	bl	2e1bc <printk>
   15c80:	4944      	ldr	r1, [pc, #272]	; (15d94 <output_ready+0x268>)
   15c82:	483e      	ldr	r0, [pc, #248]	; (15d7c <output_ready+0x250>)
   15c84:	f018 fa9a 	bl	2e1bc <printk>
   15c88:	215c      	movs	r1, #92	; 0x5c
   15c8a:	4839      	ldr	r0, [pc, #228]	; (15d70 <output_ready+0x244>)
   15c8c:	f018 fd97 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15c90:	4c41      	ldr	r4, [pc, #260]	; (15d98 <output_ready+0x26c>)
   15c92:	f104 0018 	add.w	r0, r4, #24
   15c96:	f014 f841 	bl	29d1c <z_spin_lock_set_owner>
	pressure_sensor.sensor.value = pressure / 1000;
   15c9a:	eddf 7a40 	vldr	s15, [pc, #256]	; 15d9c <output_ready+0x270>
   15c9e:	eec8 7a27 	vdiv.f32	s15, s16, s15
   15ca2:	ee17 0a90 	vmov	r0, s15
   15ca6:	f7f7 f9a9 	bl	cffc <__aeabi_f2d>
   15caa:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15cae:	f104 0018 	add.w	r0, r4, #24
   15cb2:	f014 f823 	bl	29cfc <z_spin_unlock_valid>
   15cb6:	b970      	cbnz	r0, 15cd6 <output_ready+0x1aa>
   15cb8:	2384      	movs	r3, #132	; 0x84
   15cba:	4a2d      	ldr	r2, [pc, #180]	; (15d70 <output_ready+0x244>)
   15cbc:	4931      	ldr	r1, [pc, #196]	; (15d84 <output_ready+0x258>)
   15cbe:	482e      	ldr	r0, [pc, #184]	; (15d78 <output_ready+0x24c>)
   15cc0:	f018 fa7c 	bl	2e1bc <printk>
   15cc4:	f104 0118 	add.w	r1, r4, #24
   15cc8:	482f      	ldr	r0, [pc, #188]	; (15d88 <output_ready+0x25c>)
   15cca:	f018 fa77 	bl	2e1bc <printk>
   15cce:	2184      	movs	r1, #132	; 0x84
   15cd0:	4827      	ldr	r0, [pc, #156]	; (15d70 <output_ready+0x244>)
   15cd2:	f018 fd74 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   15cd6:	f386 8811 	msr	BASEPRI, r6
   15cda:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15cde:	f04f 0320 	mov.w	r3, #32
   15ce2:	f3ef 8611 	mrs	r6, BASEPRI
   15ce6:	f383 8811 	msr	BASEPRI, r3
   15cea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15cee:	482c      	ldr	r0, [pc, #176]	; (15da0 <output_ready+0x274>)
   15cf0:	f013 fff6 	bl	29ce0 <z_spin_lock_valid>
   15cf4:	b968      	cbnz	r0, 15d12 <output_ready+0x1e6>
   15cf6:	235c      	movs	r3, #92	; 0x5c
   15cf8:	4a1d      	ldr	r2, [pc, #116]	; (15d70 <output_ready+0x244>)
   15cfa:	491e      	ldr	r1, [pc, #120]	; (15d74 <output_ready+0x248>)
   15cfc:	481e      	ldr	r0, [pc, #120]	; (15d78 <output_ready+0x24c>)
   15cfe:	f018 fa5d 	bl	2e1bc <printk>
   15d02:	4927      	ldr	r1, [pc, #156]	; (15da0 <output_ready+0x274>)
   15d04:	481d      	ldr	r0, [pc, #116]	; (15d7c <output_ready+0x250>)
   15d06:	f018 fa59 	bl	2e1bc <printk>
   15d0a:	215c      	movs	r1, #92	; 0x5c
   15d0c:	4818      	ldr	r0, [pc, #96]	; (15d70 <output_ready+0x244>)
   15d0e:	f018 fd56 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15d12:	4c24      	ldr	r4, [pc, #144]	; (15da4 <output_ready+0x278>)
   15d14:	f104 0018 	add.w	r0, r4, #24
   15d18:	f014 f800 	bl	29d1c <z_spin_lock_set_owner>
	air_quality_sensor.sensor.value = iaq;
   15d1c:	4638      	mov	r0, r7
   15d1e:	f7f7 f96d 	bl	cffc <__aeabi_f2d>
   15d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15d26:	f104 0018 	add.w	r0, r4, #24
	air_quality_sensor.sensor.accuracy = iaq_accuracy;
   15d2a:	7425      	strb	r5, [r4, #16]
   15d2c:	f013 ffe6 	bl	29cfc <z_spin_unlock_valid>
   15d30:	b970      	cbnz	r0, 15d50 <output_ready+0x224>
   15d32:	2384      	movs	r3, #132	; 0x84
   15d34:	4a0e      	ldr	r2, [pc, #56]	; (15d70 <output_ready+0x244>)
   15d36:	4913      	ldr	r1, [pc, #76]	; (15d84 <output_ready+0x258>)
   15d38:	480f      	ldr	r0, [pc, #60]	; (15d78 <output_ready+0x24c>)
   15d3a:	f018 fa3f 	bl	2e1bc <printk>
   15d3e:	f104 0118 	add.w	r1, r4, #24
   15d42:	4811      	ldr	r0, [pc, #68]	; (15d88 <output_ready+0x25c>)
   15d44:	f018 fa3a 	bl	2e1bc <printk>
   15d48:	2184      	movs	r1, #132	; 0x84
   15d4a:	4809      	ldr	r0, [pc, #36]	; (15d70 <output_ready+0x244>)
   15d4c:	f018 fd37 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   15d50:	f386 8811 	msr	BASEPRI, r6
   15d54:	f3bf 8f6f 	isb	sy
}
   15d58:	ecbd 8b02 	vpop	{d8}
   15d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15d60:	20027d6a 	.word	0x20027d6a
   15d64:	20020514 	.word	0x20020514
   15d68:	2002033c 	.word	0x2002033c
   15d6c:	200207d8 	.word	0x200207d8
   15d70:	00035cb3 	.word	0x00035cb3
   15d74:	00035cd9 	.word	0x00035cd9
   15d78:	00035920 	.word	0x00035920
   15d7c:	00035cee 	.word	0x00035cee
   15d80:	200207c0 	.word	0x200207c0
   15d84:	00035d06 	.word	0x00035d06
   15d88:	00035d1d 	.word	0x00035d1d
   15d8c:	20020038 	.word	0x20020038
   15d90:	20020020 	.word	0x20020020
   15d94:	20020058 	.word	0x20020058
   15d98:	20020040 	.word	0x20020040
   15d9c:	447a0000 	.word	0x447a0000
   15da0:	20020018 	.word	0x20020018
   15da4:	20020000 	.word	0x20020000

00015da8 <k_work_submit_to_queue.constprop.7>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   15da8:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15daa:	f100 0308 	add.w	r3, r0, #8
   15dae:	e8d3 2fef 	ldaex	r2, [r3]
   15db2:	f042 0001 	orr.w	r0, r2, #1
   15db6:	e8c3 0fec 	stlex	ip, r0, [r3]
   15dba:	f1bc 0f00 	cmp.w	ip, #0
   15dbe:	d1f6      	bne.n	15dae <k_work_submit_to_queue.constprop.7+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15dc0:	07d3      	lsls	r3, r2, #31
   15dc2:	d402      	bmi.n	15dca <k_work_submit_to_queue.constprop.7+0x22>
		k_queue_append(&work_q->queue, work);
   15dc4:	4801      	ldr	r0, [pc, #4]	; (15dcc <k_work_submit_to_queue.constprop.7+0x24>)
   15dc6:	f01d bb63 	b.w	33490 <k_queue_append>
	}
}
   15dca:	4770      	bx	lr
   15dcc:	20027368 	.word	0x20027368

00015dd0 <iaq_timer_handler>:
 *
 * @return N/A
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
   15dd0:	4801      	ldr	r0, [pc, #4]	; (15dd8 <iaq_timer_handler+0x8>)
   15dd2:	f7ff bfe9 	b.w	15da8 <k_work_submit_to_queue.constprop.7>
   15dd6:	bf00      	nop
   15dd8:	20020098 	.word	0x20020098

00015ddc <iaq_timer_stop>:
   15ddc:	4801      	ldr	r0, [pc, #4]	; (15de4 <iaq_timer_stop+0x8>)
   15dde:	f7ff bfe3 	b.w	15da8 <k_work_submit_to_queue.constprop.7>
   15de2:	bf00      	nop
   15de4:	2002008c 	.word	0x2002008c

00015de8 <bus_write>:
{
   15de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dea:	b085      	sub	sp, #20
   15dec:	4605      	mov	r5, r0
	u8_t buf[data_len+1];
   15dee:	4668      	mov	r0, sp
{
   15df0:	4616      	mov	r6, r2
	u8_t buf[data_len+1];
   15df2:	f103 0208 	add.w	r2, r3, #8
   15df6:	08d2      	lsrs	r2, r2, #3
   15df8:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
{
   15dfc:	af00      	add	r7, sp, #0
	u8_t buf[data_len+1];
   15dfe:	4695      	mov	sp, r2
	buf[0] = reg_addr;
   15e00:	4668      	mov	r0, sp
   15e02:	461a      	mov	r2, r3
   15e04:	f800 1b01 	strb.w	r1, [r0], #1
   15e08:	4631      	mov	r1, r6
	u8_t buf[data_len+1];
   15e0a:	1c5c      	adds	r4, r3, #1
   15e0c:	f01d fcd8 	bl	337c0 <memcpy>
	return i2c_write(i2c_master, buf, data_len+1, dev_addr);
   15e10:	4b08      	ldr	r3, [pc, #32]	; (15e34 <bus_write+0x4c>)
	msg.buf = (u8_t *)buf;
   15e12:	f8c7 d004 	str.w	sp, [r7, #4]
   15e16:	6818      	ldr	r0, [r3, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   15e18:	2302      	movs	r3, #2
	msg.len = num_bytes;
   15e1a:	60bc      	str	r4, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   15e1c:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   15e1e:	6883      	ldr	r3, [r0, #8]
   15e20:	1d39      	adds	r1, r7, #4
   15e22:	685c      	ldr	r4, [r3, #4]
   15e24:	2201      	movs	r2, #1
   15e26:	462b      	mov	r3, r5
   15e28:	47a0      	blx	r4
}
   15e2a:	3714      	adds	r7, #20
   15e2c:	b240      	sxtb	r0, r0
   15e2e:	46bd      	mov	sp, r7
   15e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e32:	bf00      	nop
   15e34:	20021420 	.word	0x20021420

00015e38 <env_sensors_get_temperature>:
{
   15e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15e3a:	4604      	mov	r4, r0
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d040      	beq.n	15ec2 <env_sensors_get_temperature+0x8a>
	__asm__ volatile(
   15e40:	f04f 0320 	mov.w	r3, #32
   15e44:	f3ef 8711 	mrs	r7, BASEPRI
   15e48:	f383 8811 	msr	BASEPRI, r3
   15e4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e50:	481d      	ldr	r0, [pc, #116]	; (15ec8 <env_sensors_get_temperature+0x90>)
   15e52:	f013 ff45 	bl	29ce0 <z_spin_lock_valid>
   15e56:	4e1c      	ldr	r6, [pc, #112]	; (15ec8 <env_sensors_get_temperature+0x90>)
   15e58:	b968      	cbnz	r0, 15e76 <env_sensors_get_temperature+0x3e>
   15e5a:	235c      	movs	r3, #92	; 0x5c
   15e5c:	4a1b      	ldr	r2, [pc, #108]	; (15ecc <env_sensors_get_temperature+0x94>)
   15e5e:	491c      	ldr	r1, [pc, #112]	; (15ed0 <env_sensors_get_temperature+0x98>)
   15e60:	481c      	ldr	r0, [pc, #112]	; (15ed4 <env_sensors_get_temperature+0x9c>)
   15e62:	f018 f9ab 	bl	2e1bc <printk>
   15e66:	4631      	mov	r1, r6
   15e68:	481b      	ldr	r0, [pc, #108]	; (15ed8 <env_sensors_get_temperature+0xa0>)
   15e6a:	f018 f9a7 	bl	2e1bc <printk>
   15e6e:	215c      	movs	r1, #92	; 0x5c
   15e70:	4816      	ldr	r0, [pc, #88]	; (15ecc <env_sensors_get_temperature+0x94>)
   15e72:	f018 fca4 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15e76:	4814      	ldr	r0, [pc, #80]	; (15ec8 <env_sensors_get_temperature+0x90>)
   15e78:	f013 ff50 	bl	29d1c <z_spin_lock_set_owner>
   15e7c:	4623      	mov	r3, r4
   15e7e:	4d17      	ldr	r5, [pc, #92]	; (15edc <env_sensors_get_temperature+0xa4>)
   15e80:	462a      	mov	r2, r5
   15e82:	ca03      	ldmia	r2!, {r0, r1}
   15e84:	42b2      	cmp	r2, r6
   15e86:	6018      	str	r0, [r3, #0]
   15e88:	6059      	str	r1, [r3, #4]
   15e8a:	4615      	mov	r5, r2
   15e8c:	f103 0308 	add.w	r3, r3, #8
   15e90:	d1f6      	bne.n	15e80 <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15e92:	480d      	ldr	r0, [pc, #52]	; (15ec8 <env_sensors_get_temperature+0x90>)
   15e94:	f013 ff32 	bl	29cfc <z_spin_unlock_valid>
   15e98:	b968      	cbnz	r0, 15eb6 <env_sensors_get_temperature+0x7e>
   15e9a:	2384      	movs	r3, #132	; 0x84
   15e9c:	4a0b      	ldr	r2, [pc, #44]	; (15ecc <env_sensors_get_temperature+0x94>)
   15e9e:	4910      	ldr	r1, [pc, #64]	; (15ee0 <env_sensors_get_temperature+0xa8>)
   15ea0:	480c      	ldr	r0, [pc, #48]	; (15ed4 <env_sensors_get_temperature+0x9c>)
   15ea2:	f018 f98b 	bl	2e1bc <printk>
   15ea6:	4908      	ldr	r1, [pc, #32]	; (15ec8 <env_sensors_get_temperature+0x90>)
   15ea8:	480e      	ldr	r0, [pc, #56]	; (15ee4 <env_sensors_get_temperature+0xac>)
   15eaa:	f018 f987 	bl	2e1bc <printk>
   15eae:	2184      	movs	r1, #132	; 0x84
   15eb0:	4806      	ldr	r0, [pc, #24]	; (15ecc <env_sensors_get_temperature+0x94>)
   15eb2:	f018 fc84 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   15eb6:	f387 8811 	msr	BASEPRI, r7
   15eba:	f3bf 8f6f 	isb	sy
	return 0;
   15ebe:	2000      	movs	r0, #0
}
   15ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   15ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ec6:	e7fb      	b.n	15ec0 <env_sensors_get_temperature+0x88>
   15ec8:	200207d8 	.word	0x200207d8
   15ecc:	00035cb3 	.word	0x00035cb3
   15ed0:	00035cd9 	.word	0x00035cd9
   15ed4:	00035920 	.word	0x00035920
   15ed8:	00035cee 	.word	0x00035cee
   15edc:	200207c0 	.word	0x200207c0
   15ee0:	00035d06 	.word	0x00035d06
   15ee4:	00035d1d 	.word	0x00035d1d

00015ee8 <env_sensors_get_humidity>:
{
   15ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15eea:	4604      	mov	r4, r0
   15eec:	2800      	cmp	r0, #0
   15eee:	d040      	beq.n	15f72 <env_sensors_get_humidity+0x8a>
	__asm__ volatile(
   15ef0:	f04f 0320 	mov.w	r3, #32
   15ef4:	f3ef 8711 	mrs	r7, BASEPRI
   15ef8:	f383 8811 	msr	BASEPRI, r3
   15efc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15f00:	481d      	ldr	r0, [pc, #116]	; (15f78 <env_sensors_get_humidity+0x90>)
   15f02:	f013 feed 	bl	29ce0 <z_spin_lock_valid>
   15f06:	4e1c      	ldr	r6, [pc, #112]	; (15f78 <env_sensors_get_humidity+0x90>)
   15f08:	b968      	cbnz	r0, 15f26 <env_sensors_get_humidity+0x3e>
   15f0a:	235c      	movs	r3, #92	; 0x5c
   15f0c:	4a1b      	ldr	r2, [pc, #108]	; (15f7c <env_sensors_get_humidity+0x94>)
   15f0e:	491c      	ldr	r1, [pc, #112]	; (15f80 <env_sensors_get_humidity+0x98>)
   15f10:	481c      	ldr	r0, [pc, #112]	; (15f84 <env_sensors_get_humidity+0x9c>)
   15f12:	f018 f953 	bl	2e1bc <printk>
   15f16:	4631      	mov	r1, r6
   15f18:	481b      	ldr	r0, [pc, #108]	; (15f88 <env_sensors_get_humidity+0xa0>)
   15f1a:	f018 f94f 	bl	2e1bc <printk>
   15f1e:	215c      	movs	r1, #92	; 0x5c
   15f20:	4816      	ldr	r0, [pc, #88]	; (15f7c <env_sensors_get_humidity+0x94>)
   15f22:	f018 fc4c 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15f26:	4814      	ldr	r0, [pc, #80]	; (15f78 <env_sensors_get_humidity+0x90>)
   15f28:	f013 fef8 	bl	29d1c <z_spin_lock_set_owner>
   15f2c:	4623      	mov	r3, r4
   15f2e:	4d17      	ldr	r5, [pc, #92]	; (15f8c <env_sensors_get_humidity+0xa4>)
   15f30:	462a      	mov	r2, r5
   15f32:	ca03      	ldmia	r2!, {r0, r1}
   15f34:	42b2      	cmp	r2, r6
   15f36:	6018      	str	r0, [r3, #0]
   15f38:	6059      	str	r1, [r3, #4]
   15f3a:	4615      	mov	r5, r2
   15f3c:	f103 0308 	add.w	r3, r3, #8
   15f40:	d1f6      	bne.n	15f30 <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f42:	480d      	ldr	r0, [pc, #52]	; (15f78 <env_sensors_get_humidity+0x90>)
   15f44:	f013 feda 	bl	29cfc <z_spin_unlock_valid>
   15f48:	b968      	cbnz	r0, 15f66 <env_sensors_get_humidity+0x7e>
   15f4a:	2384      	movs	r3, #132	; 0x84
   15f4c:	4a0b      	ldr	r2, [pc, #44]	; (15f7c <env_sensors_get_humidity+0x94>)
   15f4e:	4910      	ldr	r1, [pc, #64]	; (15f90 <env_sensors_get_humidity+0xa8>)
   15f50:	480c      	ldr	r0, [pc, #48]	; (15f84 <env_sensors_get_humidity+0x9c>)
   15f52:	f018 f933 	bl	2e1bc <printk>
   15f56:	4908      	ldr	r1, [pc, #32]	; (15f78 <env_sensors_get_humidity+0x90>)
   15f58:	480e      	ldr	r0, [pc, #56]	; (15f94 <env_sensors_get_humidity+0xac>)
   15f5a:	f018 f92f 	bl	2e1bc <printk>
   15f5e:	2184      	movs	r1, #132	; 0x84
   15f60:	4806      	ldr	r0, [pc, #24]	; (15f7c <env_sensors_get_humidity+0x94>)
   15f62:	f018 fc2c 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   15f66:	f387 8811 	msr	BASEPRI, r7
   15f6a:	f3bf 8f6f 	isb	sy
	return 0;
   15f6e:	2000      	movs	r0, #0
}
   15f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   15f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f76:	e7fb      	b.n	15f70 <env_sensors_get_humidity+0x88>
   15f78:	20020038 	.word	0x20020038
   15f7c:	00035cb3 	.word	0x00035cb3
   15f80:	00035cd9 	.word	0x00035cd9
   15f84:	00035920 	.word	0x00035920
   15f88:	00035cee 	.word	0x00035cee
   15f8c:	20020020 	.word	0x20020020
   15f90:	00035d06 	.word	0x00035d06
   15f94:	00035d1d 	.word	0x00035d1d

00015f98 <env_sensors_get_pressure>:
{
   15f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15f9a:	4604      	mov	r4, r0
   15f9c:	2800      	cmp	r0, #0
   15f9e:	d040      	beq.n	16022 <env_sensors_get_pressure+0x8a>
	__asm__ volatile(
   15fa0:	f04f 0320 	mov.w	r3, #32
   15fa4:	f3ef 8711 	mrs	r7, BASEPRI
   15fa8:	f383 8811 	msr	BASEPRI, r3
   15fac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15fb0:	481d      	ldr	r0, [pc, #116]	; (16028 <env_sensors_get_pressure+0x90>)
   15fb2:	f013 fe95 	bl	29ce0 <z_spin_lock_valid>
   15fb6:	4e1c      	ldr	r6, [pc, #112]	; (16028 <env_sensors_get_pressure+0x90>)
   15fb8:	b968      	cbnz	r0, 15fd6 <env_sensors_get_pressure+0x3e>
   15fba:	235c      	movs	r3, #92	; 0x5c
   15fbc:	4a1b      	ldr	r2, [pc, #108]	; (1602c <env_sensors_get_pressure+0x94>)
   15fbe:	491c      	ldr	r1, [pc, #112]	; (16030 <env_sensors_get_pressure+0x98>)
   15fc0:	481c      	ldr	r0, [pc, #112]	; (16034 <env_sensors_get_pressure+0x9c>)
   15fc2:	f018 f8fb 	bl	2e1bc <printk>
   15fc6:	4631      	mov	r1, r6
   15fc8:	481b      	ldr	r0, [pc, #108]	; (16038 <env_sensors_get_pressure+0xa0>)
   15fca:	f018 f8f7 	bl	2e1bc <printk>
   15fce:	215c      	movs	r1, #92	; 0x5c
   15fd0:	4816      	ldr	r0, [pc, #88]	; (1602c <env_sensors_get_pressure+0x94>)
   15fd2:	f018 fbf4 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   15fd6:	4814      	ldr	r0, [pc, #80]	; (16028 <env_sensors_get_pressure+0x90>)
   15fd8:	f013 fea0 	bl	29d1c <z_spin_lock_set_owner>
   15fdc:	4623      	mov	r3, r4
   15fde:	4d17      	ldr	r5, [pc, #92]	; (1603c <env_sensors_get_pressure+0xa4>)
   15fe0:	462a      	mov	r2, r5
   15fe2:	ca03      	ldmia	r2!, {r0, r1}
   15fe4:	42b2      	cmp	r2, r6
   15fe6:	6018      	str	r0, [r3, #0]
   15fe8:	6059      	str	r1, [r3, #4]
   15fea:	4615      	mov	r5, r2
   15fec:	f103 0308 	add.w	r3, r3, #8
   15ff0:	d1f6      	bne.n	15fe0 <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15ff2:	480d      	ldr	r0, [pc, #52]	; (16028 <env_sensors_get_pressure+0x90>)
   15ff4:	f013 fe82 	bl	29cfc <z_spin_unlock_valid>
   15ff8:	b968      	cbnz	r0, 16016 <env_sensors_get_pressure+0x7e>
   15ffa:	2384      	movs	r3, #132	; 0x84
   15ffc:	4a0b      	ldr	r2, [pc, #44]	; (1602c <env_sensors_get_pressure+0x94>)
   15ffe:	4910      	ldr	r1, [pc, #64]	; (16040 <env_sensors_get_pressure+0xa8>)
   16000:	480c      	ldr	r0, [pc, #48]	; (16034 <env_sensors_get_pressure+0x9c>)
   16002:	f018 f8db 	bl	2e1bc <printk>
   16006:	4908      	ldr	r1, [pc, #32]	; (16028 <env_sensors_get_pressure+0x90>)
   16008:	480e      	ldr	r0, [pc, #56]	; (16044 <env_sensors_get_pressure+0xac>)
   1600a:	f018 f8d7 	bl	2e1bc <printk>
   1600e:	2184      	movs	r1, #132	; 0x84
   16010:	4806      	ldr	r0, [pc, #24]	; (1602c <env_sensors_get_pressure+0x94>)
   16012:	f018 fbd4 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   16016:	f387 8811 	msr	BASEPRI, r7
   1601a:	f3bf 8f6f 	isb	sy
	return 0;
   1601e:	2000      	movs	r0, #0
}
   16020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   16022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16026:	e7fb      	b.n	16020 <env_sensors_get_pressure+0x88>
   16028:	20020058 	.word	0x20020058
   1602c:	00035cb3 	.word	0x00035cb3
   16030:	00035cd9 	.word	0x00035cd9
   16034:	00035920 	.word	0x00035920
   16038:	00035cee 	.word	0x00035cee
   1603c:	20020040 	.word	0x20020040
   16040:	00035d06 	.word	0x00035d06
   16044:	00035d1d 	.word	0x00035d1d

00016048 <env_sensors_get_air_quality>:
{
   16048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   1604a:	4604      	mov	r4, r0
   1604c:	2800      	cmp	r0, #0
   1604e:	d040      	beq.n	160d2 <env_sensors_get_air_quality+0x8a>
	__asm__ volatile(
   16050:	f04f 0320 	mov.w	r3, #32
   16054:	f3ef 8711 	mrs	r7, BASEPRI
   16058:	f383 8811 	msr	BASEPRI, r3
   1605c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16060:	481d      	ldr	r0, [pc, #116]	; (160d8 <env_sensors_get_air_quality+0x90>)
   16062:	f013 fe3d 	bl	29ce0 <z_spin_lock_valid>
   16066:	4e1c      	ldr	r6, [pc, #112]	; (160d8 <env_sensors_get_air_quality+0x90>)
   16068:	b968      	cbnz	r0, 16086 <env_sensors_get_air_quality+0x3e>
   1606a:	235c      	movs	r3, #92	; 0x5c
   1606c:	4a1b      	ldr	r2, [pc, #108]	; (160dc <env_sensors_get_air_quality+0x94>)
   1606e:	491c      	ldr	r1, [pc, #112]	; (160e0 <env_sensors_get_air_quality+0x98>)
   16070:	481c      	ldr	r0, [pc, #112]	; (160e4 <env_sensors_get_air_quality+0x9c>)
   16072:	f018 f8a3 	bl	2e1bc <printk>
   16076:	4631      	mov	r1, r6
   16078:	481b      	ldr	r0, [pc, #108]	; (160e8 <env_sensors_get_air_quality+0xa0>)
   1607a:	f018 f89f 	bl	2e1bc <printk>
   1607e:	215c      	movs	r1, #92	; 0x5c
   16080:	4816      	ldr	r0, [pc, #88]	; (160dc <env_sensors_get_air_quality+0x94>)
   16082:	f018 fb9c 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   16086:	4814      	ldr	r0, [pc, #80]	; (160d8 <env_sensors_get_air_quality+0x90>)
   16088:	f013 fe48 	bl	29d1c <z_spin_lock_set_owner>
   1608c:	4623      	mov	r3, r4
   1608e:	4d17      	ldr	r5, [pc, #92]	; (160ec <env_sensors_get_air_quality+0xa4>)
   16090:	462a      	mov	r2, r5
   16092:	ca03      	ldmia	r2!, {r0, r1}
   16094:	42b2      	cmp	r2, r6
   16096:	6018      	str	r0, [r3, #0]
   16098:	6059      	str	r1, [r3, #4]
   1609a:	4615      	mov	r5, r2
   1609c:	f103 0308 	add.w	r3, r3, #8
   160a0:	d1f6      	bne.n	16090 <env_sensors_get_air_quality+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   160a2:	480d      	ldr	r0, [pc, #52]	; (160d8 <env_sensors_get_air_quality+0x90>)
   160a4:	f013 fe2a 	bl	29cfc <z_spin_unlock_valid>
   160a8:	b968      	cbnz	r0, 160c6 <env_sensors_get_air_quality+0x7e>
   160aa:	2384      	movs	r3, #132	; 0x84
   160ac:	4a0b      	ldr	r2, [pc, #44]	; (160dc <env_sensors_get_air_quality+0x94>)
   160ae:	4910      	ldr	r1, [pc, #64]	; (160f0 <env_sensors_get_air_quality+0xa8>)
   160b0:	480c      	ldr	r0, [pc, #48]	; (160e4 <env_sensors_get_air_quality+0x9c>)
   160b2:	f018 f883 	bl	2e1bc <printk>
   160b6:	4908      	ldr	r1, [pc, #32]	; (160d8 <env_sensors_get_air_quality+0x90>)
   160b8:	480e      	ldr	r0, [pc, #56]	; (160f4 <env_sensors_get_air_quality+0xac>)
   160ba:	f018 f87f 	bl	2e1bc <printk>
   160be:	2184      	movs	r1, #132	; 0x84
   160c0:	4806      	ldr	r0, [pc, #24]	; (160dc <env_sensors_get_air_quality+0x94>)
   160c2:	f018 fb7c 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   160c6:	f387 8811 	msr	BASEPRI, r7
   160ca:	f3bf 8f6f 	isb	sy
	return 0;
   160ce:	2000      	movs	r0, #0
}
   160d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   160d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   160d6:	e7fb      	b.n	160d0 <env_sensors_get_air_quality+0x88>
   160d8:	20020018 	.word	0x20020018
   160dc:	00035cb3 	.word	0x00035cb3
   160e0:	00035cd9 	.word	0x00035cd9
   160e4:	00035920 	.word	0x00035920
   160e8:	00035cee 	.word	0x00035cee
   160ec:	20020000 	.word	0x20020000
   160f0:	00035d06 	.word	0x00035d06
   160f4:	00035d1d 	.word	0x00035d1d

000160f8 <env_sensors_init_and_start>:

int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   160f8:	b570      	push	{r4, r5, r6, lr}
   160fa:	460e      	mov	r6, r1
   160fc:	b08c      	sub	sp, #48	; 0x30
	
	return_values_init bsec_ret;
	int ret;

	if ((work_q == NULL) || (cb == NULL)) {
   160fe:	4605      	mov	r5, r0
   16100:	b920      	cbnz	r0, 1610c <env_sensors_init_and_start+0x14>
		LOG_DBG("EINVAL");
		return -EINVAL;
   16102:	f06f 0415 	mvn.w	r4, #21

	initialized = true;

	return (data_send_interval_s > 0) ?
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
}
   16106:	4620      	mov	r0, r4
   16108:	b00c      	add	sp, #48	; 0x30
   1610a:	bd70      	pop	{r4, r5, r6, pc}
	if ((work_q == NULL) || (cb == NULL)) {
   1610c:	2900      	cmp	r1, #0
   1610e:	d0f8      	beq.n	16102 <env_sensors_init_and_start+0xa>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   16110:	482a      	ldr	r0, [pc, #168]	; (161bc <env_sensors_init_and_start+0xc4>)
   16112:	f010 ffe3 	bl	270dc <z_impl_device_get_binding>
	i2c_master = device_get_binding("I2C_2");
   16116:	4b2a      	ldr	r3, [pc, #168]	; (161c0 <env_sensors_init_and_start+0xc8>)
   16118:	6018      	str	r0, [r3, #0]
	if (!i2c_master) {
   1611a:	2800      	cmp	r0, #0
   1611c:	d0f1      	beq.n	16102 <env_sensors_init_and_start+0xa>
	settings_subsys_init();
   1611e:	f001 fec1 	bl	17ea4 <settings_subsys_init>
	struct settings_handler my_conf = {
   16122:	2214      	movs	r2, #20
   16124:	2100      	movs	r1, #0
   16126:	a807      	add	r0, sp, #28
   16128:	f01d fb84 	bl	33834 <memset>
   1612c:	4b25      	ldr	r3, [pc, #148]	; (161c4 <env_sensors_init_and_start+0xcc>)
	err = settings_register(&my_conf);
   1612e:	a806      	add	r0, sp, #24
	struct settings_handler my_conf = {
   16130:	9306      	str	r3, [sp, #24]
   16132:	4b25      	ldr	r3, [pc, #148]	; (161c8 <env_sensors_init_and_start+0xd0>)
   16134:	9308      	str	r3, [sp, #32]
	err = settings_register(&my_conf);
   16136:	f001 fe07 	bl	17d48 <settings_register>
	if (err) {
   1613a:	4604      	mov	r4, r0
   1613c:	2800      	cmp	r0, #0
   1613e:	d1e2      	bne.n	16106 <env_sensors_init_and_start+0xe>
	err = settings_load();
   16140:	f018 fd80 	bl	2ec44 <settings_load>
	if (ret) {
   16144:	4604      	mov	r4, r0
   16146:	2800      	cmp	r0, #0
   16148:	d1dd      	bne.n	16106 <env_sensors_init_and_start+0xe>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   1614a:	4b20      	ldr	r3, [pc, #128]	; (161cc <env_sensors_init_and_start+0xd4>)
   1614c:	4a20      	ldr	r2, [pc, #128]	; (161d0 <env_sensors_init_and_start+0xd8>)
   1614e:	9300      	str	r3, [sp, #0]
   16150:	4920      	ldr	r1, [pc, #128]	; (161d4 <env_sensors_init_and_start+0xdc>)
   16152:	4b21      	ldr	r3, [pc, #132]	; (161d8 <env_sensors_init_and_start+0xe0>)
   16154:	4821      	ldr	r0, [pc, #132]	; (161dc <env_sensors_init_and_start+0xe4>)
   16156:	eddf 0a22 	vldr	s1, [pc, #136]	; 161e0 <env_sensors_init_and_start+0xe8>
   1615a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 161e4 <env_sensors_init_and_start+0xec>
   1615e:	f000 f855 	bl	1620c <bsec_iot_init>
   16162:	f8ad 0018 	strh.w	r0, [sp, #24]
   16166:	b240      	sxtb	r0, r0
	if (bsec_ret.bme680_status) {
   16168:	b108      	cbz	r0, 1616e <env_sensors_init_and_start+0x76>
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   1616a:	4604      	mov	r4, r0
   1616c:	e7cb      	b.n	16106 <env_sensors_init_and_start+0xe>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   1616e:	f99d 3019 	ldrsb.w	r3, [sp, #25]
	} else if (bsec_ret.bsec_status) {
   16172:	b10b      	cbz	r3, 16178 <env_sensors_init_and_start+0x80>
		return (int)bsec_ret.bsec_status;
   16174:	461c      	mov	r4, r3
   16176:	e7c6      	b.n	16106 <env_sensors_init_and_start+0xe>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16178:	2307      	movs	r3, #7
   1617a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1617e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16182:	4919      	ldr	r1, [pc, #100]	; (161e8 <env_sensors_init_and_start+0xf0>)
   16184:	4b19      	ldr	r3, [pc, #100]	; (161ec <env_sensors_init_and_start+0xf4>)
   16186:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1618a:	e9cd 4400 	strd	r4, r4, [sp]
   1618e:	4818      	ldr	r0, [pc, #96]	; (161f0 <env_sensors_init_and_start+0xf8>)
   16190:	f013 fcc8 	bl	29b24 <z_impl_k_thread_create>
	data_ready_cb = cb;
   16194:	4b17      	ldr	r3, [pc, #92]	; (161f4 <env_sensors_init_and_start+0xfc>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   16196:	4918      	ldr	r1, [pc, #96]	; (161f8 <env_sensors_init_and_start+0x100>)
	data_ready_cb = cb;
   16198:	601e      	str	r6, [r3, #0]
	env_sensors_work_q = work_q;
   1619a:	4b18      	ldr	r3, [pc, #96]	; (161fc <env_sensors_init_and_start+0x104>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   1619c:	4818      	ldr	r0, [pc, #96]	; (16200 <env_sensors_init_and_start+0x108>)
	env_sensors_work_q = work_q;
   1619e:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   161a0:	f01d fa34 	bl	3360c <k_delayed_work_init>
	initialized = true;
   161a4:	2201      	movs	r2, #1
   161a6:	4b17      	ldr	r3, [pc, #92]	; (16204 <env_sensors_init_and_start+0x10c>)
   161a8:	701a      	strb	r2, [r3, #0]
	return (data_send_interval_s > 0) ?
   161aa:	4b17      	ldr	r3, [pc, #92]	; (16208 <env_sensors_init_and_start+0x110>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   161ac:	681b      	ldr	r3, [r3, #0]
   161ae:	2b00      	cmp	r3, #0
   161b0:	d0a9      	beq.n	16106 <env_sensors_init_and_start+0xe>
   161b2:	2005      	movs	r0, #5
   161b4:	f7ff fc22 	bl	159fc <submit_poll_work>
   161b8:	e7d7      	b.n	1616a <env_sensors_init_and_start+0x72>
   161ba:	bf00      	nop
   161bc:	00035ca8 	.word	0x00035ca8
   161c0:	20021420 	.word	0x20021420
   161c4:	00035cae 	.word	0x00035cae
   161c8:	00015a51 	.word	0x00015a51
   161cc:	0002da15 	.word	0x0002da15
   161d0:	0002da41 	.word	0x0002da41
   161d4:	00015aed 	.word	0x00015aed
   161d8:	00015a91 	.word	0x00015a91
   161dc:	00015de9 	.word	0x00015de9
   161e0:	3f99999a 	.word	0x3f99999a
   161e4:	3b5a737e 	.word	0x3b5a737e
   161e8:	20030408 	.word	0x20030408
   161ec:	00015a15 	.word	0x00015a15
   161f0:	2002142c 	.word	0x2002142c
   161f4:	200213f8 	.word	0x200213f8
   161f8:	00015ab9 	.word	0x00015ab9
   161fc:	2002141c 	.word	0x2002141c
   16200:	200213fc 	.word	0x200213fc
   16204:	20027d6b 	.word	0x20027d6b
   16208:	20020088 	.word	0x20020088

0001620c <bsec_iot_init>:
 *
 * @return      zero if successful, negative otherwise
 */
return_values_init bsec_iot_init(float sample_rate, float temperature_offset, bme680_com_fptr_t bus_write, 
                    bme680_com_fptr_t bus_read, sleep_fct sleep, state_load_fct state_load, config_load_fct config_load)
{
   1620c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1620e:	ed2d 8b02 	vpush	{d8}
   16212:	f2ad 5de4 	subw	sp, sp, #1508	; 0x5e4
   16216:	460d      	mov	r5, r1
   16218:	4607      	mov	r7, r0
   1621a:	4614      	mov	r4, r2
    return_values_init ret = {BME680_OK, BSEC_OK};
    bsec_library_return_t bsec_status = BSEC_OK;
    
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1621c:	2100      	movs	r1, #0
   1621e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   16222:	a822      	add	r0, sp, #136	; 0x88
{
   16224:	eeb0 8a40 	vmov.f32	s16, s0
   16228:	eef0 8a60 	vmov.f32	s17, s1
   1622c:	461e      	mov	r6, r3
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1622e:	f01d fb01 	bl	33834 <memset>
    uint8_t bsec_config[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   16232:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   16236:	2100      	movs	r1, #0
   16238:	a894      	add	r0, sp, #592	; 0x250
   1623a:	f01d fafb 	bl	33834 <memset>
    uint8_t work_buffer[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1623e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   16242:	2100      	movs	r1, #0
   16244:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
   16248:	f01d faf4 	bl	33834 <memset>
    int bsec_state_len, bsec_config_len;
    
    /* Fixed I2C configuration */
    bme680_g.dev_id = BME680_I2C_ADDR_PRIMARY;
   1624c:	2376      	movs	r3, #118	; 0x76
   1624e:	4843      	ldr	r0, [pc, #268]	; (1635c <bsec_iot_init+0x150>)
   16250:	7043      	strb	r3, [r0, #1]
    bme680_g.intf = BME680_I2C_INTF;
   16252:	2301      	movs	r3, #1
    /* User configurable I2C configuration */
    bme680_g.write = bus_write;
    bme680_g.read = bus_read;
   16254:	e9c0 5712 	strd	r5, r7, [r0, #72]	; 0x48
    bme680_g.intf = BME680_I2C_INTF;
   16258:	7083      	strb	r3, [r0, #2]
    bme680_g.delay_ms = sleep;
   1625a:	6504      	str	r4, [r0, #80]	; 0x50
    
    /* Initialize BME680 API */
    ret.bme680_status = bme680_init(&bme680_g);
   1625c:	f017 fcf1 	bl	2dc42 <bme680_init>
    if (ret.bme680_status != BME680_OK)
   16260:	4605      	mov	r5, r0
   16262:	b190      	cbz	r0, 1628a <bsec_iot_init+0x7e>
    {
        return ret;
   16264:	2300      	movs	r3, #0
   16266:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   1626a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   1626e:	2000      	movs	r0, #0
   16270:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   16274:	f363 0007 	bfi	r0, r3, #0, #8
   16278:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1627c:	f363 200f 	bfi	r0, r3, #8, #8
    {
        return ret;
    }
    
    return ret;
}
   16280:	f20d 5de4 	addw	sp, sp, #1508	; 0x5e4
   16284:	ecbd 8b02 	vpop	{d8}
   16288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret.bsec_status = bsec_init();
   1628a:	f7f7 fbf9 	bl	da80 <bsec_init>
    if (ret.bsec_status != BSEC_OK)
   1628e:	4604      	mov	r4, r0
   16290:	b120      	cbz	r0, 1629c <bsec_iot_init+0x90>
        return ret;
   16292:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
   16296:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   1629a:	e7e8      	b.n	1626e <bsec_iot_init+0x62>
    bsec_config_len = config_load(bsec_config, sizeof(bsec_config));
   1629c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   162a0:	a894      	add	r0, sp, #592	; 0x250
   162a2:	f8dd 3600 	ldr.w	r3, [sp, #1536]	; 0x600
   162a6:	4798      	blx	r3
    if (bsec_config_len != 0)
   162a8:	4601      	mov	r1, r0
   162aa:	b160      	cbz	r0, 162c6 <bsec_iot_init+0xba>
        ret.bsec_status = bsec_set_configuration(bsec_config, bsec_config_len, work_buffer, sizeof(work_buffer));     
   162ac:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   162b0:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   162b4:	a894      	add	r0, sp, #592	; 0x250
   162b6:	f7f7 fc15 	bl	dae4 <bsec_set_configuration>
        if (ret.bsec_status != BSEC_OK)
   162ba:	b120      	cbz	r0, 162c6 <bsec_iot_init+0xba>
            return ret;
   162bc:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            return ret;
   162c0:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   162c4:	e7d3      	b.n	1626e <bsec_iot_init+0x62>
    bsec_state_len = state_load(bsec_state, sizeof(bsec_state));
   162c6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   162ca:	a822      	add	r0, sp, #136	; 0x88
   162cc:	47b0      	blx	r6
    if (bsec_state_len != 0)
   162ce:	4601      	mov	r1, r0
   162d0:	b158      	cbz	r0, 162ea <bsec_iot_init+0xde>
        ret.bsec_status = bsec_set_state(bsec_state, bsec_state_len, work_buffer, sizeof(work_buffer));     
   162d2:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   162d6:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   162da:	a822      	add	r0, sp, #136	; 0x88
   162dc:	f7f7 fc10 	bl	db00 <bsec_set_state>
        if (ret.bsec_status != BSEC_OK)
   162e0:	b118      	cbz	r0, 162ea <bsec_iot_init+0xde>
            return ret;
   162e2:	2300      	movs	r3, #0
   162e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   162e8:	e7ea      	b.n	162c0 <bsec_iot_init+0xb4>
    bme680_temperature_offset_g = temperature_offset;
   162ea:	4b1d      	ldr	r3, [pc, #116]	; (16360 <bsec_iot_init+0x154>)
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   162ec:	2108      	movs	r1, #8
    bme680_temperature_offset_g = temperature_offset;
   162ee:	edc3 8a00 	vstr	s17, [r3]
    requested_virtual_sensors[0].sensor_id = BSEC_OUTPUT_IAQ;
   162f2:	2301      	movs	r3, #1
   162f4:	f88d 300c 	strb.w	r3, [sp, #12]
    requested_virtual_sensors[1].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_TEMPERATURE;
   162f8:	230e      	movs	r3, #14
   162fa:	f88d 3014 	strb.w	r3, [sp, #20]
    requested_virtual_sensors[2].sensor_id = BSEC_OUTPUT_RAW_PRESSURE;
   162fe:	2307      	movs	r3, #7
   16300:	f88d 301c 	strb.w	r3, [sp, #28]
    requested_virtual_sensors[3].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_HUMIDITY;
   16304:	230f      	movs	r3, #15
   16306:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    requested_virtual_sensors[4].sensor_id = BSEC_OUTPUT_RAW_GAS;
   1630a:	2309      	movs	r3, #9
   1630c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    requested_virtual_sensors[5].sensor_id = BSEC_OUTPUT_RAW_TEMPERATURE;
   16310:	2306      	movs	r3, #6
   16312:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   16316:	2302      	movs	r3, #2
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   16318:	aa12      	add	r2, sp, #72	; 0x48
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   1631a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   1631e:	eb0d 0001 	add.w	r0, sp, r1
   16322:	f10d 0307 	add.w	r3, sp, #7
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   16326:	f88d 1007 	strb.w	r1, [sp, #7]
    requested_virtual_sensors[0].sample_rate = sample_rate;
   1632a:	ed8d 8a02 	vstr	s16, [sp, #8]
    requested_virtual_sensors[1].sample_rate = sample_rate;
   1632e:	ed8d 8a04 	vstr	s16, [sp, #16]
    requested_virtual_sensors[2].sample_rate = sample_rate;
   16332:	ed8d 8a06 	vstr	s16, [sp, #24]
    requested_virtual_sensors[3].sample_rate = sample_rate;
   16336:	ed8d 8a08 	vstr	s16, [sp, #32]
    requested_virtual_sensors[4].sample_rate = sample_rate;
   1633a:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
    requested_virtual_sensors[5].sample_rate = sample_rate;
   1633e:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
    requested_virtual_sensors[6].sensor_id = BSEC_OUTPUT_RAW_HUMIDITY;
   16342:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
    requested_virtual_sensors[6].sample_rate = sample_rate;
   16346:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
    requested_virtual_sensors[7].sample_rate = sample_rate;
   1634a:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   1634e:	f7f7 fba5 	bl	da9c <bsec_update_subscription>
    if (ret.bsec_status != BSEC_OK)
   16352:	2800      	cmp	r0, #0
   16354:	d1c5      	bne.n	162e2 <bsec_iot_init+0xd6>
    return ret;
   16356:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
   1635a:	e788      	b.n	1626e <bsec_iot_init+0x62>
   1635c:	200214e4 	.word	0x200214e4
   16360:	2002153c 	.word	0x2002153c

00016364 <bsec_iot_loop>:
 *
 * @return      none
 */
void bsec_iot_loop(sleep_fct sleep, get_timestamp_us_fct get_timestamp_us, output_ready_fct output_ready,
                    state_save_fct state_save, uint32_t save_intvl)
{
   16364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16368:	ed2d 8b02 	vpush	{d8}
    bsec_bme_settings_t sensor_settings;
    
    /* Save state variables */
    uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE];
    uint8_t work_buffer[BSEC_MAX_STATE_BLOB_SIZE];
    uint32_t bsec_state_len = 0;
   1636c:	2500      	movs	r5, #0
{
   1636e:	4680      	mov	r8, r0
   16370:	4689      	mov	r9, r1
   16372:	4692      	mov	sl, r2
   16374:	469b      	mov	fp, r3
    float breath_voc_equivalent = 0.0f;
   16376:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 16610 <bsec_iot_loop+0x2ac>
{
   1637a:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
   1637e:	4ca5      	ldr	r4, [pc, #660]	; (16614 <bsec_iot_loop+0x2b0>)
    uint32_t bsec_state_len = 0;
   16380:	9507      	str	r5, [sp, #28]
    bsec_library_return_t bsec_status = BSEC_OK;

    while (1)
    {
        /* get the timestamp in nanoseconds before calling bsec_sensor_control() */
        time_stamp = get_timestamp_us() * 1000;
   16382:	47c8      	blx	r9
   16384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16388:	fba0 6703 	umull	r6, r7, r0, r3
   1638c:	fb03 7701 	mla	r7, r3, r1, r7
        
        /* Retrieve sensor settings to be used in this time instant by calling bsec_sensor_control */
        bsec_sensor_control(time_stamp, &sensor_settings);
   16390:	aa08      	add	r2, sp, #32
   16392:	4630      	mov	r0, r6
   16394:	4639      	mov	r1, r7
   16396:	f7f7 fbf5 	bl	db84 <bsec_sensor_control>
    if (sensor_settings->trigger_measurement)
   1639a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1639e:	b1f3      	cbz	r3, 163de <bsec_iot_loop+0x7a>
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   163a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163a4:	4621      	mov	r1, r4
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   163a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   163aa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163ae:	20cf      	movs	r0, #207	; 0xcf
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   163b0:	ba5b      	rev16	r3, r3
   163b2:	8723      	strh	r3, [r4, #56]	; 0x38
        bme680_g.gas_sett.run_gas = sensor_settings->run_gas;
   163b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   163b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        bme680_g.gas_sett.heatr_temp = sensor_settings->heater_temperature; /* degree Celsius */
   163bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163be:	6423      	str	r3, [r4, #64]	; 0x40
        bme680_g.power_mode = BME680_FORCED_MODE;
   163c0:	2301      	movs	r3, #1
   163c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163c6:	f000 f935 	bl	16634 <bme680_set_sensor_settings>
        bme680_status = bme680_set_sensor_mode(&bme680_g);
   163ca:	4620      	mov	r0, r4
   163cc:	f017 fd10 	bl	2ddf0 <bme680_set_sensor_mode>
        bme680_get_profile_dur(&meas_period, &bme680_g);
   163d0:	a874      	add	r0, sp, #464	; 0x1d0
   163d2:	4621      	mov	r1, r4
   163d4:	f000 faac 	bl	16930 <bme680_get_profile_dur>
        sleep((uint32_t)meas_period);
   163d8:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	; 0x1d0
        sleep(5);
   163dc:	47c0      	blx	r8
        bme680_status = bme680_get_sensor_mode(&bme680_g);
   163de:	4620      	mov	r0, r4
   163e0:	f017 fd45 	bl	2de6e <bme680_get_sensor_mode>
    while (bme680_g.power_mode == BME680_FORCED_MODE)
   163e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   163e8:	2b01      	cmp	r3, #1
   163ea:	f000 80a4 	beq.w	16536 <bsec_iot_loop+0x1d2>
        /* Trigger a measurement if necessary */
        bme680_bsec_trigger_measurement(&sensor_settings, sleep);
        
        /* Read data from last measurement */
        num_bsec_inputs = 0;
        bme680_bsec_read_data(time_stamp, bsec_inputs, &num_bsec_inputs, sensor_settings.process_data);
   163ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (bsec_process_data)
   163f0:	2b00      	cmp	r3, #0
   163f2:	f000 80a4 	beq.w	1653e <bsec_iot_loop+0x1da>
        bme680_status = bme680_get_sensor_data(&data, &bme680_g);
   163f6:	4a88      	ldr	r2, [pc, #544]	; (16618 <bsec_iot_loop+0x2b4>)
   163f8:	4621      	mov	r1, r4
   163fa:	4610      	mov	r0, r2
   163fc:	9305      	str	r3, [sp, #20]
   163fe:	f000 facb 	bl	16998 <bme680_get_sensor_data>
        if (data.status & BME680_NEW_DATA_MSK)
   16402:	4a85      	ldr	r2, [pc, #532]	; (16618 <bsec_iot_loop+0x2b4>)
   16404:	7810      	ldrb	r0, [r2, #0]
   16406:	0603      	lsls	r3, r0, #24
   16408:	f140 8099 	bpl.w	1653e <bsec_iot_loop+0x1da>
            if (bsec_process_data & BSEC_PROCESS_PRESSURE)
   1640c:	9b05      	ldr	r3, [sp, #20]
   1640e:	f013 0101 	ands.w	r1, r3, #1
   16412:	d00a      	beq.n	1642a <bsec_iot_loop+0xc6>
                inputs[*num_bsec_inputs].signal = data.pressure;
   16414:	edd2 7a02 	vldr	s15, [r2, #8]
   16418:	eef8 7a67 	vcvt.f32.u32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   1641c:	2101      	movs	r1, #1
                inputs[*num_bsec_inputs].signal = data.pressure;
   1641e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   16422:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   16426:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
            if (bsec_process_data & BSEC_PROCESS_TEMPERATURE)
   1642a:	f013 0f04 	tst.w	r3, #4
   1642e:	d029      	beq.n	16484 <bsec_iot_loop+0x120>
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   16430:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
   16434:	eddf 6a79 	vldr	s13, [pc, #484]	; 1661c <bsec_iot_loop+0x2b8>
   16438:	ee07 2a90 	vmov	s15, r2
   1643c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   16440:	f04f 0e03 	mov.w	lr, #3
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   16444:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   16448:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   1644c:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
                (*num_bsec_inputs)++;
   16450:	1c4a      	adds	r2, r1, #1
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   16452:	e9cc 6700 	strd	r6, r7, [ip]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   16456:	f88c e00d 	strb.w	lr, [ip, #13]
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   1645a:	ed8c 7a02 	vstr	s14, [ip, #8]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HEATSOURCE;
   1645e:	b2d2      	uxtb	r2, r2
   16460:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   16464:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
   16468:	f04f 0c0e 	mov.w	ip, #14
   1646c:	f882 c00d 	strb.w	ip, [r2, #13]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   16470:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 16630 <bsec_iot_loop+0x2cc>
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   16474:	e9c2 6700 	strd	r6, r7, [r2]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   16478:	f8dc c000 	ldr.w	ip, [ip]
                (*num_bsec_inputs)++;
   1647c:	3102      	adds	r1, #2
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   1647e:	f8c2 c008 	str.w	ip, [r2, #8]
                (*num_bsec_inputs)++;
   16482:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_HUMIDITY)
   16484:	079a      	lsls	r2, r3, #30
   16486:	d516      	bpl.n	164b6 <bsec_iot_loop+0x152>
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HUMIDITY;
   16488:	f04f 0c02 	mov.w	ip, #2
   1648c:	aa0e      	add	r2, sp, #56	; 0x38
   1648e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   16492:	f882 c00d 	strb.w	ip, [r2, #13]
                    inputs[*num_bsec_inputs].signal = data.humidity / 1000.0f;
   16496:	f8df c180 	ldr.w	ip, [pc, #384]	; 16618 <bsec_iot_loop+0x2b4>
   1649a:	eddf 6a61 	vldr	s13, [pc, #388]	; 16620 <bsec_iot_loop+0x2bc>
   1649e:	eddc 7a03 	vldr	s15, [ip, #12]
   164a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   164a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   164aa:	ed82 7a02 	vstr	s14, [r2, #8]
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   164ae:	e9c2 6700 	strd	r6, r7, [r2]
                (*num_bsec_inputs)++;
   164b2:	3101      	adds	r1, #1
   164b4:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_GAS)
   164b6:	071a      	lsls	r2, r3, #28
   164b8:	d53f      	bpl.n	1653a <bsec_iot_loop+0x1d6>
                if(data.status & BME680_GASM_VALID_MSK)
   164ba:	0683      	lsls	r3, r0, #26
   164bc:	d53d      	bpl.n	1653a <bsec_iot_loop+0x1d6>
                    inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_GASRESISTOR;
   164be:	2204      	movs	r2, #4
   164c0:	ab0e      	add	r3, sp, #56	; 0x38
   164c2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   164c6:	735a      	strb	r2, [r3, #13]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   164c8:	4a53      	ldr	r2, [pc, #332]	; (16618 <bsec_iot_loop+0x2b4>)
                    inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   164ca:	e9c3 6700 	strd	r6, r7, [r3]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   164ce:	edd2 7a04 	vldr	s15, [r2, #16]
   164d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   164d6:	edc3 7a02 	vstr	s15, [r3, #8]
                    (*num_bsec_inputs)++;
   164da:	3101      	adds	r1, #1
   164dc:	b2c9      	uxtb	r1, r1
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   164de:	230e      	movs	r3, #14
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164e0:	aa74      	add	r2, sp, #464	; 0x1d0
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   164e2:	f88d 301b 	strb.w	r3, [sp, #27]
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164e6:	a80e      	add	r0, sp, #56	; 0x38
   164e8:	f10d 031b 	add.w	r3, sp, #27
   164ec:	f7f7 fae8 	bl	dac0 <bsec_do_steps>
        for (index = 0; index < num_bsec_outputs; index++)
   164f0:	2700      	movs	r7, #0
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164f2:	9005      	str	r0, [sp, #20]
    float breath_voc_equivalent = 0.0f;
   164f4:	eef0 4a48 	vmov.f32	s9, s16
    float co2_equivalent = 0.0f;
   164f8:	eeb0 4a48 	vmov.f32	s8, s16
    float static_iaq = 0.0f;
   164fc:	eef0 3a48 	vmov.f32	s7, s16
    float raw_gas = 0.0f;
   16500:	eeb0 3a48 	vmov.f32	s6, s16
    float raw_humidity = 0.0f;
   16504:	eef0 2a48 	vmov.f32	s5, s16
    float humidity = 0.0f;
   16508:	eeb0 1a48 	vmov.f32	s2, s16
    float raw_pressure = 0.0f;
   1650c:	eef0 1a48 	vmov.f32	s3, s16
    float raw_temp = 0.0f;
   16510:	eeb0 2a48 	vmov.f32	s4, s16
    float temp = 0.0f;
   16514:	eef0 0a48 	vmov.f32	s1, s16
    uint8_t iaq_accuracy = 0;
   16518:	463a      	mov	r2, r7
    float iaq = 0.0f;
   1651a:	eeb0 0a48 	vmov.f32	s0, s16
    int64_t timestamp = 0;
   1651e:	2000      	movs	r0, #0
   16520:	2100      	movs	r1, #0
        for (index = 0; index < num_bsec_outputs; index++)
   16522:	f89d e01b 	ldrb.w	lr, [sp, #27]
   16526:	ae74      	add	r6, sp, #464	; 0x1d0
   16528:	fa5f fc87 	uxtb.w	ip, r7
   1652c:	45e6      	cmp	lr, ip
   1652e:	d836      	bhi.n	1659e <bsec_iot_loop+0x23a>
        output_ready(timestamp, iaq, iaq_accuracy, temp, humidity, raw_pressure, raw_temp, 
   16530:	9b05      	ldr	r3, [sp, #20]
   16532:	47d0      	blx	sl
   16534:	e003      	b.n	1653e <bsec_iot_loop+0x1da>
        sleep(5);
   16536:	2005      	movs	r0, #5
   16538:	e750      	b.n	163dc <bsec_iot_loop+0x78>
    if (num_bsec_inputs > 0)
   1653a:	2900      	cmp	r1, #0
   1653c:	d1cf      	bne.n	164de <bsec_iot_loop+0x17a>
        
        /* Increment sample counter */
        n_samples++;
        
        /* Retrieve and store state if the passed save_intvl */
        if (n_samples >= save_intvl)
   1653e:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
        n_samples++;
   16540:	3501      	adds	r5, #1
        if (n_samples >= save_intvl)
   16542:	429d      	cmp	r5, r3
   16544:	d30e      	bcc.n	16564 <bsec_iot_loop+0x200>
        {
            bsec_status = bsec_get_state(0, bsec_state, sizeof(bsec_state), work_buffer, sizeof(work_buffer), &bsec_state_len);
   16546:	228b      	movs	r2, #139	; 0x8b
   16548:	ae07      	add	r6, sp, #28
   1654a:	9601      	str	r6, [sp, #4]
   1654c:	9200      	str	r2, [sp, #0]
   1654e:	ab51      	add	r3, sp, #324	; 0x144
   16550:	a92e      	add	r1, sp, #184	; 0xb8
   16552:	2000      	movs	r0, #0
   16554:	f7f7 fafc 	bl	db50 <bsec_get_state>
            if (bsec_status == BSEC_OK)
   16558:	4605      	mov	r5, r0
   1655a:	2800      	cmp	r0, #0
   1655c:	d156      	bne.n	1660c <bsec_iot_loop+0x2a8>
            {
                state_save(bsec_state, bsec_state_len);
   1655e:	6831      	ldr	r1, [r6, #0]
   16560:	a82e      	add	r0, sp, #184	; 0xb8
   16562:	47d8      	blx	fp
        }
        
        
        /* Compute how long we can sleep until we need to call bsec_sensor_control() next */
        /* Time_stamp is converted from microseconds to nanoseconds first and then the difference to milliseconds */
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   16564:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   16568:	47c8      	blx	r9
   1656a:	4a2e      	ldr	r2, [pc, #184]	; (16624 <bsec_iot_loop+0x2c0>)
   1656c:	4243      	negs	r3, r0
   1656e:	fb02 3301 	mla	r3, r2, r1, r3
   16572:	fba0 0102 	umull	r0, r1, r0, r2
   16576:	4419      	add	r1, r3
   16578:	1983      	adds	r3, r0, r6
   1657a:	9302      	str	r3, [sp, #8]
   1657c:	eb41 0307 	adc.w	r3, r1, r7
   16580:	9303      	str	r3, [sp, #12]
        if (time_stamp_interval_ms > 0)
   16582:	2300      	movs	r3, #0
   16584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   16588:	4a27      	ldr	r2, [pc, #156]	; (16628 <bsec_iot_loop+0x2c4>)
   1658a:	4282      	cmp	r2, r0
   1658c:	418b      	sbcs	r3, r1
   1658e:	f6bf aef8 	bge.w	16382 <bsec_iot_loop+0x1e>
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   16592:	4a26      	ldr	r2, [pc, #152]	; (1662c <bsec_iot_loop+0x2c8>)
   16594:	2300      	movs	r3, #0
   16596:	f7f7 f89b 	bl	d6d0 <__aeabi_ldivmod>
        {
            sleep((uint32_t)time_stamp_interval_ms);
   1659a:	47c0      	blx	r8
   1659c:	e6f1      	b.n	16382 <bsec_iot_loop+0x1e>
            switch (bsec_outputs[index].sensor_id)
   1659e:	f896 c00d 	ldrb.w	ip, [r6, #13]
   165a2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   165a6:	f1bc 0f14 	cmp.w	ip, #20
   165aa:	d811      	bhi.n	165d0 <bsec_iot_loop+0x26c>
   165ac:	e8df f00c 	tbb	[pc, ip]
   165b0:	1916130b 	.word	0x1916130b
   165b4:	2b1f2810 	.word	0x2b1f2810
   165b8:	10101025 	.word	0x10101025
   165bc:	10221c10 	.word	0x10221c10
   165c0:	10100e10 	.word	0x10100e10
   165c4:	0e          	.byte	0x0e
   165c5:	00          	.byte	0x00
                    iaq = bsec_outputs[index].signal;
   165c6:	ed96 0a02 	vldr	s0, [r6, #8]
                    iaq_accuracy = bsec_outputs[index].accuracy;
   165ca:	7bb2      	ldrb	r2, [r6, #14]
            timestamp = bsec_outputs[index].time_stamp;
   165cc:	e9d6 0100 	ldrd	r0, r1, [r6]
   165d0:	3701      	adds	r7, #1
   165d2:	3610      	adds	r6, #16
   165d4:	e7a8      	b.n	16528 <bsec_iot_loop+0x1c4>
                    static_iaq = bsec_outputs[index].signal;
   165d6:	edd6 3a02 	vldr	s7, [r6, #8]
                    break;
   165da:	e7f7      	b.n	165cc <bsec_iot_loop+0x268>
                    co2_equivalent = bsec_outputs[index].signal;
   165dc:	ed96 4a02 	vldr	s8, [r6, #8]
                    break;
   165e0:	e7f4      	b.n	165cc <bsec_iot_loop+0x268>
                    breath_voc_equivalent = bsec_outputs[index].signal;
   165e2:	edd6 4a02 	vldr	s9, [r6, #8]
                    break;
   165e6:	e7f1      	b.n	165cc <bsec_iot_loop+0x268>
                    temp = bsec_outputs[index].signal;
   165e8:	edd6 0a02 	vldr	s1, [r6, #8]
                    break;
   165ec:	e7ee      	b.n	165cc <bsec_iot_loop+0x268>
                    raw_pressure = bsec_outputs[index].signal;
   165ee:	edd6 1a02 	vldr	s3, [r6, #8]
                    break;
   165f2:	e7eb      	b.n	165cc <bsec_iot_loop+0x268>
                    humidity = bsec_outputs[index].signal;
   165f4:	ed96 1a02 	vldr	s2, [r6, #8]
                    break;
   165f8:	e7e8      	b.n	165cc <bsec_iot_loop+0x268>
                    raw_gas = bsec_outputs[index].signal;
   165fa:	ed96 3a02 	vldr	s6, [r6, #8]
                    break;
   165fe:	e7e5      	b.n	165cc <bsec_iot_loop+0x268>
                    raw_temp = bsec_outputs[index].signal;
   16600:	ed96 2a02 	vldr	s4, [r6, #8]
                    break;
   16604:	e7e2      	b.n	165cc <bsec_iot_loop+0x268>
                    raw_humidity = bsec_outputs[index].signal;
   16606:	edd6 2a02 	vldr	s5, [r6, #8]
                    break;
   1660a:	e7df      	b.n	165cc <bsec_iot_loop+0x268>
            n_samples = 0;
   1660c:	2500      	movs	r5, #0
   1660e:	e7a9      	b.n	16564 <bsec_iot_loop+0x200>
   16610:	00000000 	.word	0x00000000
   16614:	200214e4 	.word	0x200214e4
   16618:	20021540 	.word	0x20021540
   1661c:	42c80000 	.word	0x42c80000
   16620:	447a0000 	.word	0x447a0000
   16624:	fffffc18 	.word	0xfffffc18
   16628:	000f423f 	.word	0x000f423f
   1662c:	000f4240 	.word	0x000f4240
   16630:	2002153c 	.word	0x2002153c

00016634 <bme680_set_sensor_settings>:
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   16634:	2300      	movs	r3, #0
{
   16636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1663a:	4606      	mov	r6, r0
   1663c:	b088      	sub	sp, #32
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1663e:	4608      	mov	r0, r1
{
   16640:	460c      	mov	r4, r1
	uint8_t data = 0;
   16642:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   16646:	9304      	str	r3, [sp, #16]
   16648:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   1664c:	9306      	str	r3, [sp, #24]
   1664e:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
   16652:	f017 f9f7 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   16656:	2800      	cmp	r0, #0
   16658:	f040 8101 	bne.w	1685e <bme680_set_sensor_settings+0x22a>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   1665c:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   16660:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
   16664:	d105      	bne.n	16672 <bme680_set_sensor_settings+0x3e>
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   16666:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
		if (rslt == BME680_OK)
			rslt = bme680_set_sensor_mode(dev);
   1666a:	4620      	mov	r0, r4
   1666c:	f017 fbc0 	bl	2ddf0 <bme680_set_sensor_mode>
   16670:	e009      	b.n	16686 <bme680_set_sensor_settings+0x52>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   16672:	2f01      	cmp	r7, #1
		uint8_t reg_addr[2] = {0};
   16674:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   16678:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
   1667c:	f000 80f2 	beq.w	16864 <bme680_set_sensor_settings+0x230>
		dev->power_mode = BME680_SLEEP_MODE;
   16680:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
			dev->gas_sett.nb_conv = 0;
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   16684:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
   16686:	f016 0510 	ands.w	r5, r6, #16
   1668a:	d020      	beq.n	166ce <bme680_set_sensor_settings+0x9a>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   1668c:	f104 0246 	add.w	r2, r4, #70	; 0x46
   16690:	2107      	movs	r1, #7
   16692:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   16696:	f017 fa2d 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   1669a:	b930      	cbnz	r0, 166aa <bme680_set_sensor_settings+0x76>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   1669c:	4623      	mov	r3, r4
   1669e:	2201      	movs	r2, #1
   166a0:	f10d 0107 	add.w	r1, sp, #7
   166a4:	2075      	movs	r0, #117	; 0x75
   166a6:	f017 fa31 	bl	2db0c <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   166aa:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   166ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
   166b2:	009b      	lsls	r3, r3, #2
   166b4:	f022 021c 	bic.w	r2, r2, #28
   166b8:	f003 031c 	and.w	r3, r3, #28
   166bc:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   166be:	2275      	movs	r2, #117	; 0x75
			count++;
   166c0:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   166c2:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   166c6:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   166ca:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
   166ce:	06b3      	lsls	r3, r6, #26
   166d0:	d522      	bpl.n	16718 <bme680_set_sensor_settings+0xe4>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   166d2:	f104 0246 	add.w	r2, r4, #70	; 0x46
   166d6:	2108      	movs	r1, #8
   166d8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   166dc:	f017 fa0a 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   166e0:	b930      	cbnz	r0, 166f0 <bme680_set_sensor_settings+0xbc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   166e2:	4623      	mov	r3, r4
   166e4:	2201      	movs	r2, #1
   166e6:	f10d 0107 	add.w	r1, sp, #7
   166ea:	2070      	movs	r0, #112	; 0x70
   166ec:	f017 fa0e 	bl	2db0c <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   166f0:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   166f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   166f6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   166fa:	f023 0308 	bic.w	r3, r3, #8
   166fe:	f002 0208 	and.w	r2, r2, #8
   16702:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   16704:	aa08      	add	r2, sp, #32
   16706:	442a      	add	r2, r5
			count++;
   16708:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   1670a:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   1670e:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   16712:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   16716:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   16718:	07b1      	lsls	r1, r6, #30
   1671a:	d033      	beq.n	16784 <bme680_set_sensor_settings+0x150>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   1671c:	f104 0246 	add.w	r2, r4, #70	; 0x46
   16720:	2105      	movs	r1, #5
   16722:	f104 0039 	add.w	r0, r4, #57	; 0x39
   16726:	f017 f9e5 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   1672a:	b930      	cbnz	r0, 1673a <bme680_set_sensor_settings+0x106>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   1672c:	4623      	mov	r3, r4
   1672e:	2201      	movs	r2, #1
   16730:	f10d 0107 	add.w	r1, sp, #7
   16734:	2074      	movs	r0, #116	; 0x74
   16736:	f017 f9e9 	bl	2db0c <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
   1673a:	07f2      	lsls	r2, r6, #31
   1673c:	d509      	bpl.n	16752 <bme680_set_sensor_settings+0x11e>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   1673e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16742:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   16746:	f003 031f 	and.w	r3, r3, #31
   1674a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1674e:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
   16752:	07b3      	lsls	r3, r6, #30
   16754:	d50b      	bpl.n	1676e <bme680_set_sensor_settings+0x13a>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   16756:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1675a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1675e:	009b      	lsls	r3, r3, #2
   16760:	f003 031c 	and.w	r3, r3, #28
   16764:	f022 021c 	bic.w	r2, r2, #28
   16768:	4313      	orrs	r3, r2
   1676a:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
   1676e:	2274      	movs	r2, #116	; 0x74
   16770:	ab08      	add	r3, sp, #32
   16772:	442b      	add	r3, r5
   16774:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   16778:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   1677c:	3501      	adds	r5, #1
			data_array[count] = data;
   1677e:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   16782:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
   16784:	0771      	lsls	r1, r6, #29
   16786:	d522      	bpl.n	167ce <bme680_set_sensor_settings+0x19a>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   16788:	f104 0246 	add.w	r2, r4, #70	; 0x46
   1678c:	2105      	movs	r1, #5
   1678e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16792:	f017 f9af 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   16796:	b930      	cbnz	r0, 167a6 <bme680_set_sensor_settings+0x172>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   16798:	4623      	mov	r3, r4
   1679a:	2201      	movs	r2, #1
   1679c:	f10d 0107 	add.w	r1, sp, #7
   167a0:	2072      	movs	r0, #114	; 0x72
   167a2:	f017 f9b3 	bl	2db0c <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   167a6:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   167a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   167ac:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   167b0:	f023 0307 	bic.w	r3, r3, #7
   167b4:	f002 0207 	and.w	r2, r2, #7
   167b8:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   167ba:	aa08      	add	r2, sp, #32
   167bc:	442a      	add	r2, r5
			count++;
   167be:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   167c0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   167c4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   167c8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   167cc:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   167ce:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   167d2:	d03b      	beq.n	1684c <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   167d4:	f104 0846 	add.w	r8, r4, #70	; 0x46
   167d8:	4642      	mov	r2, r8
   167da:	2101      	movs	r1, #1
   167dc:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   167e0:	f017 f988 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK) {
   167e4:	b960      	cbnz	r0, 16800 <bme680_set_sensor_settings+0x1cc>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   167e6:	210a      	movs	r1, #10
   167e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   167ec:	f017 f982 	bl	2daf4 <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   167f0:	b930      	cbnz	r0, 16800 <bme680_set_sensor_settings+0x1cc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   167f2:	4623      	mov	r3, r4
   167f4:	2201      	movs	r2, #1
   167f6:	f10d 0107 	add.w	r1, sp, #7
   167fa:	2071      	movs	r0, #113	; 0x71
   167fc:	f017 f986 	bl	2db0c <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
   16800:	0672      	lsls	r2, r6, #25
   16802:	d50b      	bpl.n	1681c <bme680_set_sensor_settings+0x1e8>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   16804:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   16808:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1680c:	011b      	lsls	r3, r3, #4
   1680e:	f003 0310 	and.w	r3, r3, #16
   16812:	f022 0210 	bic.w	r2, r2, #16
   16816:	4313      	orrs	r3, r2
   16818:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
   1681c:	0633      	lsls	r3, r6, #24
   1681e:	d50a      	bpl.n	16836 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   16820:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16824:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   16828:	f023 030f 	bic.w	r3, r3, #15
   1682c:	f002 020f 	and.w	r2, r2, #15
   16830:	4313      	orrs	r3, r2
   16832:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   16836:	2271      	movs	r2, #113	; 0x71
   16838:	ab08      	add	r3, sp, #32
   1683a:	442b      	add	r3, r5
   1683c:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   16840:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   16844:	3501      	adds	r5, #1
			data_array[count] = data;
   16846:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   1684a:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
   1684c:	b928      	cbnz	r0, 1685a <bme680_set_sensor_settings+0x226>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   1684e:	4623      	mov	r3, r4
   16850:	462a      	mov	r2, r5
   16852:	a906      	add	r1, sp, #24
   16854:	a804      	add	r0, sp, #16
   16856:	f017 f97d 	bl	2db54 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
   1685a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
   1685e:	b008      	add	sp, #32
   16860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (temp > 400) /* Cap temperature */
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   16864:	8a4a      	ldrh	r2, [r1, #18]
   16866:	2105      	movs	r1, #5
   16868:	4b30      	ldr	r3, [pc, #192]	; (1692c <bme680_set_sensor_settings+0x2f8>)
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   1686a:	f994 5014 	ldrsb.w	r5, [r4, #20]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   1686e:	fb12 3301 	smlabb	r3, r2, r1, r3
   16872:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
   16876:	2164      	movs	r1, #100	; 0x64
   16878:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
   1687c:	bf28      	it	cs
   1687e:	f44f 72c8 	movcs.w	r2, #400	; 0x190
   16882:	435a      	muls	r2, r3
   16884:	fbb2 f2f1 	udiv	r2, r2, r1
   16888:	230a      	movs	r3, #10
   1688a:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
   1688e:	fbb2 f2f3 	udiv	r2, r2, r3
   16892:	f994 3011 	ldrsb.w	r3, [r4, #17]
   16896:	f503 7344 	add.w	r3, r3, #784	; 0x310
   1689a:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   1689c:	f994 3004 	ldrsb.w	r3, [r4, #4]
   168a0:	fb13 f305 	smulbb	r3, r3, r5
   168a4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   168a8:	fb93 f3f5 	sdiv	r3, r3, r5
   168ac:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   168ae:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   168b2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   168b6:	f994 5035 	ldrsb.w	r5, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   168ba:	3204      	adds	r2, #4
   168bc:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   168c0:	2283      	movs	r2, #131	; 0x83
   168c2:	436a      	muls	r2, r5
   168c4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   168c8:	fbb3 f3f2 	udiv	r3, r3, r2
   168cc:	2222      	movs	r2, #34	; 0x22
   168ce:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   168d0:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
   168d4:	3b02      	subs	r3, #2
   168d6:	fb93 f3f1 	sdiv	r3, r3, r1
   168da:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   168de:	f246 435a 	movw	r3, #25690	; 0x645a
   168e2:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   168e6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   168ea:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   168ee:	d21a      	bcs.n	16926 <bme680_set_sensor_settings+0x2f2>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   168f0:	2b3f      	cmp	r3, #63	; 0x3f
   168f2:	b242      	sxtb	r2, r0
   168f4:	f100 0001 	add.w	r0, r0, #1
   168f8:	d813      	bhi.n	16922 <bme680_set_sensor_settings+0x2ee>
			dur = dur / 4;
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   168fa:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   168fe:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
   16900:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   16902:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   16906:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   1690a:	4623      	mov	r3, r4
   1690c:	2202      	movs	r2, #2
   1690e:	a903      	add	r1, sp, #12
   16910:	a802      	add	r0, sp, #8
   16912:	f017 f91f 	bl	2db54 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
   16916:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   1691a:	2800      	cmp	r0, #0
   1691c:	f47f aeb3 	bne.w	16686 <bme680_set_sensor_settings+0x52>
   16920:	e6a3      	b.n	1666a <bme680_set_sensor_settings+0x36>
			dur = dur / 4;
   16922:	089b      	lsrs	r3, r3, #2
			factor += 1;
   16924:	e7e4      	b.n	168f0 <bme680_set_sensor_settings+0x2bc>
		durval = 0xff; /* Max duration*/
   16926:	23ff      	movs	r3, #255	; 0xff
   16928:	e7ea      	b.n	16900 <bme680_set_sensor_settings+0x2cc>
   1692a:	bf00      	nop
   1692c:	000bbffd 	.word	0x000bbffd

00016930 <bme680_get_profile_dur>:
{
   16930:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   16932:	4b18      	ldr	r3, [pc, #96]	; (16994 <bme680_get_profile_dur+0x64>)
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   16934:	aa02      	add	r2, sp, #8
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   16936:	9300      	str	r3, [sp, #0]
   16938:	f241 0308 	movw	r3, #4104	; 0x1008
   1693c:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   16940:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   16944:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   16948:	4413      	add	r3, r2
   1694a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   1694e:	ab02      	add	r3, sp, #8
   16950:	441c      	add	r4, r3
   16952:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   16956:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   16958:	441a      	add	r2, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   1695a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1695e:	4423      	add	r3, r4
   16960:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   16964:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   16968:	4413      	add	r3, r2
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   1696a:	f241 22b9 	movw	r2, #4793	; 0x12b9
   1696e:	fb04 2303 	mla	r3, r4, r3, r2
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   16972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16976:	fbb3 f3f2 	udiv	r3, r3, r2
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   1697a:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
   1697c:	b29b      	uxth	r3, r3
   1697e:	8003      	strh	r3, [r0, #0]
	if (dev->gas_sett.run_gas) {
   16980:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   16984:	b11a      	cbz	r2, 1698e <bme680_get_profile_dur+0x5e>
		*duration += dev->gas_sett.heatr_dur;
   16986:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   1698a:	4413      	add	r3, r2
   1698c:	8003      	strh	r3, [r0, #0]
}
   1698e:	b002      	add	sp, #8
   16990:	bd10      	pop	{r4, pc}
   16992:	bf00      	nop
   16994:	04020100 	.word	0x04020100

00016998 <bme680_get_sensor_data>:
{
   16998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1699c:	4606      	mov	r6, r0
   1699e:	b0a9      	sub	sp, #164	; 0xa4
	rslt = null_ptr_check(dev);
   169a0:	4608      	mov	r0, r1
{
   169a2:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   169a4:	f017 f84e 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   169a8:	4605      	mov	r5, r0
   169aa:	2800      	cmp	r0, #0
   169ac:	f040 8199 	bne.w	16ce2 <bme680_get_sensor_data+0x34a>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   169b0:	f10d 0a10 	add.w	sl, sp, #16
   169b4:	4601      	mov	r1, r0
   169b6:	220f      	movs	r2, #15
   169b8:	4650      	mov	r0, sl
   169ba:	f01c ff3b 	bl	33834 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   169be:	4620      	mov	r0, r4
   169c0:	f017 f840 	bl	2da44 <null_ptr_check>
   169c4:	f04f 090a 	mov.w	r9, #10
   169c8:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   169ca:	2d00      	cmp	r5, #0
   169cc:	f040 8190 	bne.w	16cf0 <bme680_get_sensor_data+0x358>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   169d0:	4623      	mov	r3, r4
   169d2:	220f      	movs	r2, #15
   169d4:	4651      	mov	r1, sl
   169d6:	201d      	movs	r0, #29
   169d8:	f017 f898 	bl	2db0c <bme680_get_regs>
			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169dc:	f89d 1018 	ldrb.w	r1, [sp, #24]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   169e0:	f89d 701e 	ldrb.w	r7, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169e4:	9101      	str	r1, [sp, #4]
   169e6:	f89d 1019 	ldrb.w	r1, [sp, #25]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   169ea:	f89d b010 	ldrb.w	fp, [sp, #16]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169ee:	9102      	str	r1, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   169f0:	f89d 101d 	ldrb.w	r1, [sp, #29]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   169f4:	fa4f fe87 	sxtb.w	lr, r7
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   169f8:	f00b 030f 	and.w	r3, fp, #15
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   169fc:	9103      	str	r1, [sp, #12]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   169fe:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   16a02:	f00e 0120 	and.w	r1, lr, #32
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   16a06:	7073      	strb	r3, [r6, #1]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   16a08:	ea4b 0101 	orr.w	r1, fp, r1
			data->meas_index = buff[1];
   16a0c:	f89d 3011 	ldrb.w	r3, [sp, #17]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   16a10:	f00e 0e10 	and.w	lr, lr, #16
   16a14:	ea41 010e 	orr.w	r1, r1, lr
   16a18:	b249      	sxtb	r1, r1
			data->meas_index = buff[1];
   16a1a:	70b3      	strb	r3, [r6, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16a1c:	f89d 3012 	ldrb.w	r3, [sp, #18]

			if (data->status & BME680_NEW_DATA_MSK) {
   16a20:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   16a22:	4605      	mov	r5, r0
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16a24:	9300      	str	r3, [sp, #0]
   16a26:	f89d c013 	ldrb.w	ip, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   16a2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   16a2e:	f89d 2015 	ldrb.w	r2, [sp, #21]
   16a32:	f89d 8016 	ldrb.w	r8, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   16a36:	f89d 0017 	ldrb.w	r0, [sp, #23]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   16a3a:	7031      	strb	r1, [r6, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
   16a3c:	f280 8155 	bge.w	16cea <bme680_get_sensor_data+0x352>
				| ((uint32_t) buff[7] / 16));
   16a40:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   16a42:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
   16a46:	ea48 3202 	orr.w	r2, r8, r2, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   16a4a:	f8b4 8016 	ldrh.w	r8, [r4, #22]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a4e:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   16a52:	ea4f 0848 	mov.w	r8, r8, lsl #1
   16a56:	ebc8 02d2 	rsb	r2, r8, r2, lsr #3
   16a5a:	17d1      	asrs	r1, r2, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   16a5c:	ea4f 0a52 	mov.w	sl, r2, lsr #1
   16a60:	ea4a 7ac1 	orr.w	sl, sl, r1, lsl #31
   16a64:	1049      	asrs	r1, r1, #1
   16a66:	fb0a f101 	mul.w	r1, sl, r1
   16a6a:	fbaa ab0a 	umull	sl, fp, sl, sl
   16a6e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
   16a72:	ea4f 3e1a 	mov.w	lr, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a76:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   16a78:	ea4e 5e0b 	orr.w	lr, lr, fp, lsl #20
   16a7c:	ea4f 382b 	mov.w	r8, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a80:	ea4f 7be1 	mov.w	fp, r1, asr #31
   16a84:	fb0e f00b 	mul.w	r0, lr, fp
   16a88:	fbae ab01 	umull	sl, fp, lr, r1
   16a8c:	fb01 0808 	mla	r8, r1, r8, r0
   16a90:	44c3      	add	fp, r8
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   16a92:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a96:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   16a9a:	fb88 8902 	smull	r8, r9, r8, r2
   16a9e:	ea4f 22d8 	mov.w	r2, r8, lsr #11
   16aa2:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16aa6:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
   16aaa:	4410      	add	r0, r2
   16aac:	6320      	str	r0, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   16aae:	eb00 0280 	add.w	r2, r0, r0, lsl #2
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   16ab2:	1040      	asrs	r0, r0, #1
   16ab4:	f5a0 407a 	sub.w	r0, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   16ab8:	1081      	asrs	r1, r0, #2
   16aba:	4349      	muls	r1, r1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   16abc:	3280      	adds	r2, #128	; 0x80
   16abe:	1212      	asrs	r2, r2, #8
   16ac0:	80b2      	strh	r2, [r6, #4]
		(int32_t)dev->calib.par_p6) >> 2;
   16ac2:	f994 8026 	ldrsb.w	r8, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   16ac6:	ea4f 2ee1 	mov.w	lr, r1, asr #11
   16aca:	fb08 f80e 	mul.w	r8, r8, lr
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16ace:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
				| ((uint32_t) buff[4] / 16));
   16ad2:	091b      	lsrs	r3, r3, #4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16ad4:	fb00 fe0e 	mul.w	lr, r0, lr
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16ad8:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
   16adc:	9b00      	ldr	r3, [sp, #0]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16ade:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16ae2:	ea4c 3c03 	orr.w	ip, ip, r3, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   16ae6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16aea:	eb0e 0ea8 	add.w	lr, lr, r8, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   16aee:	041b      	lsls	r3, r3, #16
   16af0:	eb03 0eae 	add.w	lr, r3, lr, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   16af4:	f640 4335 	movw	r3, #3125	; 0xc35
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   16af8:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16afc:	1349      	asrs	r1, r1, #13
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   16afe:	fb00 f008 	mul.w	r0, r0, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b02:	f994 8020 	ldrsb.w	r8, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
   16b06:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b0a:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16b0e:	fb01 f108 	mul.w	r1, r1, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b12:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16b14:	eb01 0060 	add.w	r0, r1, r0, asr #1
	var1 = var1 >> 18;
   16b18:	1480      	asrs	r0, r0, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b1a:	8ba1      	ldrh	r1, [r4, #28]
   16b1c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   16b20:	ebac 3e2e 	sub.w	lr, ip, lr, asr #12
   16b24:	fb03 fe0e 	mul.w	lr, r3, lr
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b28:	4341      	muls	r1, r0
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   16b2a:	f1be 4f80 	cmp.w	lr, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b2e:	ea4f 31e1 	mov.w	r1, r1, asr #15
		pressure_comp = ((pressure_comp / var1) << 1);
   16b32:	bfad      	iteet	ge
   16b34:	fb9e f3f1 	sdivge	r3, lr, r1
		pressure_comp = ((pressure_comp << 1) / var1);
   16b38:	ea4f 0e4e 	movlt.w	lr, lr, lsl #1
   16b3c:	fb9e f3f1 	sdivlt	r3, lr, r1
		pressure_comp = ((pressure_comp / var1) << 1);
   16b40:	005b      	lslge	r3, r3, #1
		(int32_t)dev->calib.par_p8) >> 13;
   16b42:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
   16b46:	ea4f 0ea3 	mov.w	lr, r3, asr #2
   16b4a:	fb00 fe0e 	mul.w	lr, r0, lr
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b4e:	10d9      	asrs	r1, r3, #3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   16b50:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b54:	4349      	muls	r1, r1
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   16b56:	01c0      	lsls	r0, r0, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b58:	eb00 306e 	add.w	r0, r0, lr, asr #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b5c:	f9b4 e02a 	ldrsh.w	lr, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
   16b60:	1349      	asrs	r1, r1, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b62:	fb0e f101 	mul.w	r1, lr, r1
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   16b66:	ea4f 2c23 	mov.w	ip, r3, asr #8
   16b6a:	fb0c fe0c 	mul.w	lr, ip, ip
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b6e:	eb00 3121 	add.w	r1, r0, r1, asr #12
		(int32_t)dev->calib.par_p10) >> 17;
   16b72:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
   16b76:	fb00 f00e 	mul.w	r0, r0, lr
   16b7a:	fb0c f000 	mul.w	r0, ip, r0
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b7e:	eb01 4060 	add.w	r0, r1, r0, asr #17
   16b82:	eb03 1320 	add.w	r3, r3, r0, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b86:	2064      	movs	r0, #100	; 0x64
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   16b88:	60b3      	str	r3, [r6, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b8a:	f994 100e 	ldrsb.w	r1, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16b8e:	f994 300d 	ldrsb.w	r3, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b92:	4351      	muls	r1, r2
   16b94:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16b98:	4353      	muls	r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b9a:	4351      	muls	r1, r2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16b9c:	fb93 f3f0 	sdiv	r3, r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16ba0:	1189      	asrs	r1, r1, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   16ba2:	fb91 f1f0 	sdiv	r1, r1, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16ba6:	f06f 0e0f 	mvn.w	lr, #15
	var2 = ((int32_t) dev->calib.par_h2
   16baa:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   16bae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   16bb2:	4419      	add	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16bb4:	fb0c f101 	mul.w	r1, ip, r1
	var2 = ((int32_t) dev->calib.par_h2
   16bb8:	ea4f 2ca1 	mov.w	ip, r1, asr #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16bbc:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   16bc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16bc4:	8921      	ldrh	r1, [r4, #8]
   16bc6:	fb0e 3101 	mla	r1, lr, r1, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   16bca:	f994 300c 	ldrsb.w	r3, [r4, #12]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16bce:	f10d 0e20 	add.w	lr, sp, #32
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   16bd2:	4353      	muls	r3, r2
   16bd4:	fb93 f3f0 	sdiv	r3, r3, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16bd8:	eba1 0163 	sub.w	r1, r1, r3, asr #1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16bdc:	f994 3010 	ldrsb.w	r3, [r4, #16]
	var3 = var1 * var2;
   16be0:	fb01 f10c 	mul.w	r1, r1, ip
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16be4:	4353      	muls	r3, r2
   16be6:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
   16bea:	7be2      	ldrb	r2, [r4, #15]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16bec:	f8df c11c 	ldr.w	ip, [pc, #284]	; 16d0c <bme680_get_sensor_data+0x374>
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16bf0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   16bf4:	138a      	asrs	r2, r1, #14
   16bf6:	4352      	muls	r2, r2
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16bf8:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   16bfa:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
   16bfc:	4353      	muls	r3, r2
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   16bfe:	eb01 0363 	add.w	r3, r1, r3, asr #1
   16c02:	1299      	asrs	r1, r3, #10
   16c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c08:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
   16c0a:	4a3f      	ldr	r2, [pc, #252]	; (16d08 <bme680_get_sensor_data+0x370>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   16c0c:	131b      	asrs	r3, r3, #12
   16c0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
   16c12:	4293      	cmp	r3, r2
   16c14:	bfd4      	ite	le
   16c16:	60f3      	strle	r3, [r6, #12]
   16c18:	60f2      	strgt	r2, [r6, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   16c1a:	f994 8036 	ldrsb.w	r8, [r4, #54]	; 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16c1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c36:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   16c3a:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16c3e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   16c42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c46:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
   16c4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c5e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   16c62:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c66:	2305      	movs	r3, #5
   16c68:	f240 503c 	movw	r0, #1340	; 0x53c
   16c6c:	2100      	movs	r1, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
   16c6e:	f007 0c0f 	and.w	ip, r7, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c72:	fbc8 0103 	smlal	r0, r1, r8, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
   16c76:	ab28      	add	r3, sp, #160	; 0xa0
   16c78:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   16c7c:	f85c ec80 	ldr.w	lr, [ip, #-128]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16c80:	ea4f 1897 	mov.w	r8, r7, lsr #6
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c84:	fba0 230e 	umull	r2, r3, r0, lr
   16c88:	fb0e 3301 	mla	r3, lr, r1, r3
   16c8c:	0c11      	lsrs	r1, r2, #16
   16c8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16c92:	1418      	asrs	r0, r3, #16
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16c94:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16c96:	f85c 7c40 	ldr.w	r7, [ip, #-64]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16c9a:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   16c9e:	fa1f f888 	uxth.w	r8, r8
   16ca2:	ea4f 4358 	mov.w	r3, r8, lsr #17
   16ca6:	ea4f 32c8 	mov.w	r2, r8, lsl #15
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16caa:	fba7 8901 	umull	r8, r9, r7, r1
   16cae:	fb07 9900 	mla	r9, r7, r0, r9
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   16cb2:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   16cb6:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   16cba:	1852      	adds	r2, r2, r1
   16cbc:	eb40 0303 	adc.w	r3, r0, r3
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16cc0:	0857      	lsrs	r7, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16cc2:	ea4f 2058 	mov.w	r0, r8, lsr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16cc6:	ea47 77c3 	orr.w	r7, r7, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16cca:	ea40 50c9 	orr.w	r0, r0, r9, lsl #23
   16cce:	ea4f 2c69 	mov.w	ip, r9, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16cd2:	1059      	asrs	r1, r3, #1
   16cd4:	19c0      	adds	r0, r0, r7
   16cd6:	eb4c 0101 	adc.w	r1, ip, r1
   16cda:	f7f6 fcf9 	bl	d6d0 <__aeabi_ldivmod>
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   16cde:	6130      	str	r0, [r6, #16]
		if (rslt == BME680_OK) {
   16ce0:	b175      	cbz	r5, 16d00 <bme680_get_sensor_data+0x368>
}
   16ce2:	4628      	mov	r0, r5
   16ce4:	b029      	add	sp, #164	; 0xa4
   16ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   16cea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16cec:	200a      	movs	r0, #10
   16cee:	4798      	blx	r3
		}
		tries--;
   16cf0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	} while (tries);
   16cf4:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   16cf8:	f47f ae67 	bne.w	169ca <bme680_get_sensor_data+0x32>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   16cfc:	2502      	movs	r5, #2
	return rslt;
   16cfe:	e7f0      	b.n	16ce2 <bme680_get_sensor_data+0x34a>
				dev->new_fields = 1;
   16d00:	2301      	movs	r3, #1
   16d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   16d06:	e7ec      	b.n	16ce2 <bme680_get_sensor_data+0x34a>
   16d08:	000186a0 	.word	0x000186a0
   16d0c:	00034588 	.word	0x00034588

00016d10 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   16d10:	4b08      	ldr	r3, [pc, #32]	; (16d34 <primary_feed_worker+0x24>)
   16d12:	4909      	ldr	r1, [pc, #36]	; (16d38 <primary_feed_worker+0x28>)
   16d14:	6818      	ldr	r0, [r3, #0]
   16d16:	e8d1 3fef 	ldaex	r3, [r1]
   16d1a:	f043 0201 	orr.w	r2, r3, #1
   16d1e:	e8c1 2fec 	stlex	ip, r2, [r1]
   16d22:	f1bc 0f00 	cmp.w	ip, #0
   16d26:	d1f6      	bne.n	16d16 <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16d28:	07db      	lsls	r3, r3, #31
   16d2a:	d402      	bmi.n	16d32 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   16d2c:	3908      	subs	r1, #8
   16d2e:	f01c bbaf 	b.w	33490 <k_queue_append>
}
   16d32:	4770      	bx	lr
   16d34:	20021554 	.word	0x20021554
   16d38:	20021588 	.word	0x20021588

00016d3c <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   16d3c:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   16d3e:	4c08      	ldr	r4, [pc, #32]	; (16d60 <secondary_feed_worker+0x24>)
   16d40:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->driver_api;

	return api->feed(dev, channel_id);
   16d44:	6883      	ldr	r3, [r0, #8]
   16d46:	68db      	ldr	r3, [r3, #12]
   16d48:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   16d4a:	b940      	cbnz	r0, 16d5e <secondary_feed_worker+0x22>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16d4c:	f104 0108 	add.w	r1, r4, #8
   16d50:	f241 3288 	movw	r2, #5000	; 0x1388
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   16d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16d58:	4802      	ldr	r0, [pc, #8]	; (16d64 <secondary_feed_worker+0x28>)
   16d5a:	f013 b80b 	b.w	29d74 <k_delayed_work_submit_to_queue>
   16d5e:	bd10      	pop	{r4, pc}
   16d60:	20021558 	.word	0x20021558
   16d64:	20027368 	.word	0x20027368

00016d68 <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   16d68:	b538      	push	{r3, r4, r5, lr}
	if (work_q == NULL) {
   16d6a:	2800      	cmp	r0, #0
   16d6c:	d02e      	beq.n	16dcc <watchdog_init_and_start+0x64>
		return -EINVAL;
	}
	second_work_q = work_q;
   16d6e:	4b1c      	ldr	r3, [pc, #112]	; (16de0 <watchdog_init_and_start+0x78>)
   16d70:	6018      	str	r0, [r3, #0]
   16d72:	481c      	ldr	r0, [pc, #112]	; (16de4 <watchdog_init_and_start+0x7c>)
   16d74:	f010 f9b2 	bl	270dc <z_impl_device_get_binding>
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   16d78:	4c1b      	ldr	r4, [pc, #108]	; (16de8 <watchdog_init_and_start+0x80>)
   16d7a:	6020      	str	r0, [r4, #0]
	if (data->wdt_drv == NULL) {
   16d7c:	b350      	cbz	r0, 16dd4 <watchdog_init_and_start+0x6c>
	return api->install_timeout(dev, cfg);
   16d7e:	6883      	ldr	r3, [r0, #8]
   16d80:	491a      	ldr	r1, [pc, #104]	; (16dec <watchdog_init_and_start+0x84>)
   16d82:	689b      	ldr	r3, [r3, #8]
   16d84:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
   16d86:	2800      	cmp	r0, #0
	data->wdt_channel_id = wdt_install_timeout(
   16d88:	6060      	str	r0, [r4, #4]
	if (data->wdt_channel_id < 0) {
   16d8a:	db26      	blt.n	16dda <watchdog_init_and_start+0x72>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   16d8c:	6820      	ldr	r0, [r4, #0]
	return api->setup(dev, options);
   16d8e:	6883      	ldr	r3, [r0, #8]
   16d90:	2102      	movs	r1, #2
   16d92:	681b      	ldr	r3, [r3, #0]
   16d94:	4798      	blx	r3
	if (err) {
   16d96:	4605      	mov	r5, r0
   16d98:	b9d0      	cbnz	r0, 16dd0 <watchdog_init_and_start+0x68>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   16d9a:	f104 0008 	add.w	r0, r4, #8
   16d9e:	4914      	ldr	r1, [pc, #80]	; (16df0 <watchdog_init_and_start+0x88>)
   16da0:	f01c fc34 	bl	3360c <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   16da4:	e9d4 0100 	ldrd	r0, r1, [r4]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16da8:	4b12      	ldr	r3, [pc, #72]	; (16df4 <watchdog_init_and_start+0x8c>)
   16daa:	62a5      	str	r5, [r4, #40]	; 0x28
   16dac:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return api->feed(dev, channel_id);
   16db0:	6883      	ldr	r3, [r0, #8]
   16db2:	68db      	ldr	r3, [r3, #12]
   16db4:	4798      	blx	r3
	if (err) {
   16db6:	4605      	mov	r5, r0
   16db8:	b950      	cbnz	r0, 16dd0 <watchdog_init_and_start+0x68>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16dba:	f104 0108 	add.w	r1, r4, #8
   16dbe:	f241 3288 	movw	r2, #5000	; 0x1388
	return watchdog_enable(&wdt_data);
}
   16dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16dc6:	480c      	ldr	r0, [pc, #48]	; (16df8 <watchdog_init_and_start+0x90>)
   16dc8:	f012 bfd4 	b.w	29d74 <k_delayed_work_submit_to_queue>
		return -EINVAL;
   16dcc:	f06f 0515 	mvn.w	r5, #21
}
   16dd0:	4628      	mov	r0, r5
   16dd2:	bd38      	pop	{r3, r4, r5, pc}
		return err;
   16dd4:	f06f 0505 	mvn.w	r5, #5
   16dd8:	e7fa      	b.n	16dd0 <watchdog_init_and_start+0x68>
		return -EFAULT;
   16dda:	f06f 050d 	mvn.w	r5, #13
   16dde:	e7f7      	b.n	16dd0 <watchdog_init_and_start+0x68>
   16de0:	20021554 	.word	0x20021554
   16de4:	00035d3d 	.word	0x00035d3d
   16de8:	20021558 	.word	0x20021558
   16dec:	00034768 	.word	0x00034768
   16df0:	00016d11 	.word	0x00016d11
   16df4:	00016d3d 	.word	0x00016d3d
   16df8:	20027368 	.word	0x20027368

00016dfc <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   16dfc:	2803      	cmp	r0, #3
{
   16dfe:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   16e00:	d906      	bls.n	16e10 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
   16e02:	f019 f90c 	bl	3001e <__errno>
   16e06:	2309      	movs	r3, #9
   16e08:	6003      	str	r3, [r0, #0]
   16e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   16e0e:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
   16e10:	4b03      	ldr	r3, [pc, #12]	; (16e20 <_check_fd+0x24>)
   16e12:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   16e16:	2b00      	cmp	r3, #0
   16e18:	d0f3      	beq.n	16e02 <_check_fd+0x6>
	return 0;
   16e1a:	2000      	movs	r0, #0
   16e1c:	e7f7      	b.n	16e0e <_check_fd+0x12>
   16e1e:	bf00      	nop
   16e20:	2002158c 	.word	0x2002158c

00016e24 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   16e24:	b570      	push	{r4, r5, r6, lr}
   16e26:	4604      	mov	r4, r0
   16e28:	460d      	mov	r5, r1
   16e2a:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   16e2c:	f7ff ffe6 	bl	16dfc <_check_fd>
   16e30:	2800      	cmp	r0, #0
   16e32:	db09      	blt.n	16e48 <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   16e34:	4b07      	ldr	r3, [pc, #28]	; (16e54 <z_get_fd_obj+0x30>)
   16e36:	b14d      	cbz	r5, 16e4c <z_get_fd_obj+0x28>
   16e38:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16e3c:	6852      	ldr	r2, [r2, #4]
   16e3e:	42aa      	cmp	r2, r5
   16e40:	d004      	beq.n	16e4c <z_get_fd_obj+0x28>
		errno = err;
   16e42:	f019 f8ec 	bl	3001e <__errno>
   16e46:	6006      	str	r6, [r0, #0]
		return NULL;
   16e48:	2000      	movs	r0, #0
   16e4a:	e001      	b.n	16e50 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
   16e4c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
   16e50:	bd70      	pop	{r4, r5, r6, pc}
   16e52:	bf00      	nop
   16e54:	2002158c 	.word	0x2002158c

00016e58 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   16e58:	b538      	push	{r3, r4, r5, lr}
   16e5a:	4604      	mov	r4, r0
   16e5c:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   16e5e:	f7ff ffcd 	bl	16dfc <_check_fd>
   16e62:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   16e64:	bfa9      	itett	ge
   16e66:	4b05      	ldrge	r3, [pc, #20]	; (16e7c <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   16e68:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   16e6a:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
   16e6e:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
   16e70:	bfa4      	itt	ge
   16e72:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
   16e76:	602a      	strge	r2, [r5, #0]
}
   16e78:	bd38      	pop	{r3, r4, r5, pc}
   16e7a:	bf00      	nop
   16e7c:	2002158c 	.word	0x2002158c

00016e80 <z_reserve_fd>:

int z_reserve_fd(void)
{
   16e80:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   16e82:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   16e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16e88:	480c      	ldr	r0, [pc, #48]	; (16ebc <z_reserve_fd+0x3c>)
   16e8a:	f010 ffbf 	bl	27e0c <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
   16e8e:	4b0c      	ldr	r3, [pc, #48]	; (16ec0 <z_reserve_fd+0x40>)
   16e90:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   16e94:	b16a      	cbz	r2, 16eb2 <z_reserve_fd+0x32>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   16e96:	3401      	adds	r4, #1
   16e98:	2c04      	cmp	r4, #4
   16e9a:	d1f9      	bne.n	16e90 <z_reserve_fd+0x10>
	errno = ENFILE;
   16e9c:	f019 f8bf 	bl	3001e <__errno>
   16ea0:	2317      	movs	r3, #23
	return -1;
   16ea2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   16ea6:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   16ea8:	4804      	ldr	r0, [pc, #16]	; (16ebc <z_reserve_fd+0x3c>)
   16eaa:	f011 f88d 	bl	27fc8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   16eae:	4620      	mov	r0, r4
   16eb0:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
   16eb2:	2201      	movs	r2, #1
   16eb4:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   16eb8:	e7f6      	b.n	16ea8 <z_reserve_fd+0x28>
   16eba:	bf00      	nop
   16ebc:	200205f4 	.word	0x200205f4
   16ec0:	2002158c 	.word	0x2002158c

00016ec4 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
   16ec4:	4b03      	ldr	r3, [pc, #12]	; (16ed4 <z_finalize_fd+0x10>)
   16ec6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
   16eca:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16ece:	605a      	str	r2, [r3, #4]
}
   16ed0:	4770      	bx	lr
   16ed2:	bf00      	nop
   16ed4:	2002158c 	.word	0x2002158c

00016ed8 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
   16ed8:	2200      	movs	r2, #0
   16eda:	4b02      	ldr	r3, [pc, #8]	; (16ee4 <z_free_fd+0xc>)
   16edc:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
   16ee0:	4770      	bx	lr
   16ee2:	bf00      	nop
   16ee4:	2002158c 	.word	0x2002158c

00016ee8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   16ee8:	680b      	ldr	r3, [r1, #0]
   16eea:	3301      	adds	r3, #1
   16eec:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   16eee:	4b01      	ldr	r3, [pc, #4]	; (16ef4 <char_out+0xc>)
   16ef0:	681b      	ldr	r3, [r3, #0]
   16ef2:	4718      	bx	r3
   16ef4:	200200a4 	.word	0x200200a4

00016ef8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   16ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16efc:	b085      	sub	sp, #20
   16efe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   16f00:	469b      	mov	fp, r3
   16f02:	2c01      	cmp	r4, #1
   16f04:	bfb8      	it	lt
   16f06:	2401      	movlt	r4, #1
   16f08:	2b01      	cmp	r3, #1
   16f0a:	bf0c      	ite	eq
   16f0c:	2330      	moveq	r3, #48	; 0x30
   16f0e:	2320      	movne	r3, #32
   16f10:	4616      	mov	r6, r2
   16f12:	4682      	mov	sl, r0
   16f14:	4688      	mov	r8, r1
   16f16:	2501      	movs	r5, #1
   16f18:	270a      	movs	r7, #10
   16f1a:	2200      	movs	r2, #0
   16f1c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 16f8c <_printk_dec_ulong+0x94>
   16f20:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   16f22:	fbb6 f3f9 	udiv	r3, r6, r9
   16f26:	9301      	str	r3, [sp, #4]
   16f28:	b90a      	cbnz	r2, 16f2e <_printk_dec_ulong+0x36>
   16f2a:	45b1      	cmp	r9, r6
   16f2c:	d81c      	bhi.n	16f68 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   16f2e:	9b01      	ldr	r3, [sp, #4]
   16f30:	4641      	mov	r1, r8
   16f32:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16f36:	47d0      	blx	sl
			found_largest_digit = 1;
   16f38:	2201      	movs	r2, #1
			digits++;
   16f3a:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   16f3c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   16f3e:	3f01      	subs	r7, #1
		remainder %= pos;
   16f40:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   16f44:	230a      	movs	r3, #10
	while (pos >= 10) {
   16f46:	2f01      	cmp	r7, #1
		pos /= 10;
   16f48:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   16f4c:	d1e9      	bne.n	16f22 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   16f4e:	4641      	mov	r1, r8
   16f50:	f106 0030 	add.w	r0, r6, #48	; 0x30
   16f54:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   16f56:	f1bb 0f03 	cmp.w	fp, #3
   16f5a:	d102      	bne.n	16f62 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   16f5c:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   16f5e:	2c00      	cmp	r4, #0
   16f60:	dc0e      	bgt.n	16f80 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   16f62:	b005      	add	sp, #20
   16f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   16f68:	42bc      	cmp	r4, r7
   16f6a:	dbe7      	blt.n	16f3c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   16f6c:	f1bb 0f02 	cmp.w	fp, #2
   16f70:	d8e4      	bhi.n	16f3c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   16f72:	4641      	mov	r1, r8
   16f74:	9802      	ldr	r0, [sp, #8]
   16f76:	9203      	str	r2, [sp, #12]
			digits++;
   16f78:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   16f7a:	47d0      	blx	sl
			digits++;
   16f7c:	9a03      	ldr	r2, [sp, #12]
   16f7e:	e7dd      	b.n	16f3c <_printk_dec_ulong+0x44>
			out(' ', ctx);
   16f80:	4641      	mov	r1, r8
   16f82:	2020      	movs	r0, #32
   16f84:	47d0      	blx	sl
   16f86:	3c01      	subs	r4, #1
   16f88:	e7e9      	b.n	16f5e <_printk_dec_ulong+0x66>
   16f8a:	bf00      	nop
   16f8c:	3b9aca00 	.word	0x3b9aca00

00016f90 <vprintk>:
	struct out_context ctx = { 0 };
   16f90:	2300      	movs	r3, #0
{
   16f92:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   16f94:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   16f96:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   16f98:	4803      	ldr	r0, [pc, #12]	; (16fa8 <vprintk+0x18>)
   16f9a:	460b      	mov	r3, r1
   16f9c:	a901      	add	r1, sp, #4
   16f9e:	f016 ff9d 	bl	2dedc <z_vprintk>
}
   16fa2:	b003      	add	sp, #12
   16fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   16fa8:	00016ee9 	.word	0x00016ee9

00016fac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   16fac:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   16fae:	2500      	movs	r5, #0
{
   16fb0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   16fb2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   16fb6:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   16fb8:	a901      	add	r1, sp, #4
   16fba:	4805      	ldr	r0, [pc, #20]	; (16fd0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   16fbc:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   16fbe:	f016 ff8d 	bl	2dedc <z_vprintk>

	if (ctx.count < ctx.max) {
   16fc2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   16fc6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   16fc8:	bfb8      	it	lt
   16fca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   16fcc:	b005      	add	sp, #20
   16fce:	bd30      	pop	{r4, r5, pc}
   16fd0:	0002deb7 	.word	0x0002deb7

00016fd4 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

s64_t timeutil_timegm64(const struct tm *tm)
{
   16fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t y = 1900 + (s64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   16fd8:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   16fda:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   16fdc:	f103 0801 	add.w	r8, r3, #1
	unsigned int d = tm->tm_mday - 1;
   16fe0:	1e63      	subs	r3, r4, #1
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16fe2:	f240 746c 	movw	r4, #1900	; 0x76c
   16fe6:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   16fe8:	461e      	mov	r6, r3
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16fea:	6943      	ldr	r3, [r0, #20]
{
   16fec:	4681      	mov	r9, r0
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16fee:	18e1      	adds	r1, r4, r3
   16ff0:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
	y -= m <= 2;
   16ff4:	f1b8 0f02 	cmp.w	r8, #2
   16ff8:	bf8c      	ite	hi
   16ffa:	2300      	movhi	r3, #0
   16ffc:	2301      	movls	r3, #1
   16ffe:	1acc      	subs	r4, r1, r3
   17000:	f162 0500 	sbc.w	r5, r2, #0
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   17004:	2c00      	cmp	r4, #0
   17006:	f175 0300 	sbcs.w	r3, r5, #0
   1700a:	da5c      	bge.n	170c6 <timeutil_timegm64+0xf2>
   1700c:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   17010:	f44f 72c8 	mov.w	r2, #400	; 0x190
   17014:	2300      	movs	r3, #0
   17016:	1820      	adds	r0, r4, r0
   17018:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   1701c:	f7f6 fb58 	bl	d6d0 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   17020:	4b2c      	ldr	r3, [pc, #176]	; (170d4 <timeutil_timegm64+0x100>)
	s64_t ndays = time_days_from_civil(y, m, d);
	s64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   17022:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   17026:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1702a:	e9d9 5300 	ldrd	r5, r3, [r9]
   1702e:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17030:	f1b8 0f02 	cmp.w	r8, #2
   17034:	bf8c      	ite	hi
   17036:	f06f 0e02 	mvnhi.w	lr, #2
   1703a:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1703e:	ea4f 7be3 	mov.w	fp, r3, asr #31
   17042:	f8d9 3008 	ldr.w	r3, [r9, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17046:	44f0      	add	r8, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   17048:	fbcc ab03 	smlal	sl, fp, ip, r3
   1704c:	fbaa 230c 	umull	r2, r3, sl, ip
   17050:	fb0c 330b 	mla	r3, ip, fp, r3
   17054:	eb12 0905 	adds.w	r9, r2, r5
   17058:	eb43 7ae5 	adc.w	sl, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1705c:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17060:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17064:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   17068:	fb05 c504 	mla	r5, r5, r4, ip
   1706c:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17070:	fb0e fe08 	mul.w	lr, lr, r8
   17074:	f04f 0805 	mov.w	r8, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17078:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1707c:	f10e 0e02 	add.w	lr, lr, #2
   17080:	fbbe fef8 	udiv	lr, lr, r8
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17084:	4435      	add	r5, r6
	return era * 146097 + (time_t)doe - 719468;
   17086:	f8df c058 	ldr.w	ip, [pc, #88]	; 170e0 <timeutil_timegm64+0x10c>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1708a:	1b2c      	subs	r4, r5, r4
   1708c:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1708e:	fba0 450c 	umull	r4, r5, r0, ip
   17092:	fb0c 5501 	mla	r5, ip, r1, r5
   17096:	4910      	ldr	r1, [pc, #64]	; (170d8 <timeutil_timegm64+0x104>)
   17098:	1863      	adds	r3, r4, r1
   1709a:	9300      	str	r3, [sp, #0]
   1709c:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
	time += 86400LL * ndays;
   170a0:	490e      	ldr	r1, [pc, #56]	; (170dc <timeutil_timegm64+0x108>)
	return era * 146097 + (time_t)doe - 719468;
   170a2:	9301      	str	r3, [sp, #4]
   170a4:	e9dd 6700 	ldrd	r6, r7, [sp]
   170a8:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   170ac:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   170b0:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   170b4:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   170b8:	eb14 0009 	adds.w	r0, r4, r9
   170bc:	eb45 010a 	adc.w	r1, r5, sl
   170c0:	b003      	add	sp, #12
   170c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   170c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   170ca:	2300      	movs	r3, #0
   170cc:	4620      	mov	r0, r4
   170ce:	4629      	mov	r1, r5
   170d0:	e7a4      	b.n	1701c <timeutil_timegm64+0x48>
   170d2:	bf00      	nop
   170d4:	fffffe70 	.word	0xfffffe70
   170d8:	fff50594 	.word	0xfff50594
   170dc:	00015180 	.word	0x00015180
   170e0:	00023ab1 	.word	0x00023ab1

000170e4 <str_encode>:
	return append_bytes("]", 1, data);
}

static int str_encode(const char **str, json_append_bytes_t append_bytes,
		      void *data)
{
   170e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   170e6:	460c      	mov	r4, r1
   170e8:	4606      	mov	r6, r0
	int ret;

	ret = append_bytes("\"", 1, data);
   170ea:	2101      	movs	r1, #1
   170ec:	4811      	ldr	r0, [pc, #68]	; (17134 <str_encode+0x50>)
{
   170ee:	4615      	mov	r5, r2
	ret = append_bytes("\"", 1, data);
   170f0:	47a0      	blx	r4
	if (ret < 0) {
   170f2:	2800      	cmp	r0, #0
   170f4:	db17      	blt.n	17126 <str_encode+0x42>
			char bytes[2] = { '\\', escaped };
   170f6:	275c      	movs	r7, #92	; 0x5c
   170f8:	6836      	ldr	r6, [r6, #0]
   170fa:	4633      	mov	r3, r6
	for (cur = str; ret == 0 && *cur; cur++) {
   170fc:	f816 0b01 	ldrb.w	r0, [r6], #1
   17100:	b920      	cbnz	r0, 1710c <str_encode+0x28>
		return ret;
	}

	ret = json_escape_internal(*str, append_bytes, data);
	if (!ret) {
		return append_bytes("\"", 1, data);
   17102:	462a      	mov	r2, r5
   17104:	2101      	movs	r1, #1
   17106:	480b      	ldr	r0, [pc, #44]	; (17134 <str_encode+0x50>)
   17108:	47a0      	blx	r4
   1710a:	e00c      	b.n	17126 <str_encode+0x42>
		char escaped = escape_as(*cur);
   1710c:	f017 fb3c 	bl	2e788 <escape_as>
		if (escaped) {
   17110:	b158      	cbz	r0, 1712a <str_encode+0x46>
			ret = append_bytes(bytes, 2, data);
   17112:	462a      	mov	r2, r5
   17114:	2102      	movs	r1, #2
			char bytes[2] = { '\\', escaped };
   17116:	f88d 0005 	strb.w	r0, [sp, #5]
   1711a:	f88d 7004 	strb.w	r7, [sp, #4]
			ret = append_bytes(bytes, 2, data);
   1711e:	a801      	add	r0, sp, #4
			ret = append_bytes(cur, 1, data);
   17120:	47a0      	blx	r4
	for (cur = str; ret == 0 && *cur; cur++) {
   17122:	2800      	cmp	r0, #0
   17124:	d0e9      	beq.n	170fa <str_encode+0x16>
	}

	return ret;
}
   17126:	b003      	add	sp, #12
   17128:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = append_bytes(cur, 1, data);
   1712a:	462a      	mov	r2, r5
   1712c:	2101      	movs	r1, #1
   1712e:	4618      	mov	r0, r3
   17130:	e7f6      	b.n	17120 <str_encode+0x3c>
   17132:	bf00      	nop
   17134:	00035c98 	.word	0x00035c98

00017138 <json_obj_encode>:
}

int json_obj_encode(const struct json_obj_descr *descr, size_t descr_len,
		    const void *val, json_append_bytes_t append_bytes,
		    void *data)
{
   17138:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1713c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1713e:	4606      	mov	r6, r0
   17140:	4688      	mov	r8, r1
   17142:	4691      	mov	r9, r2
	size_t i;
	int ret;

	ret = append_bytes("{", 1, data);
   17144:	2101      	movs	r1, #1
   17146:	462a      	mov	r2, r5
   17148:	481b      	ldr	r0, [pc, #108]	; (171b8 <json_obj_encode+0x80>)
{
   1714a:	461c      	mov	r4, r3
	ret = append_bytes("{", 1, data);
   1714c:	4798      	blx	r3
	if (ret < 0) {
   1714e:	2800      	cmp	r0, #0
   17150:	db2f      	blt.n	171b2 <json_obj_encode+0x7a>
		return ret;
	}

	for (i = 0; i < descr_len; i++) {
   17152:	2700      	movs	r7, #0
				 append_bytes, data);
		if (ret < 0) {
			return ret;
		}

		ret = append_bytes(":", 1, data);
   17154:	f8df a068 	ldr.w	sl, [pc, #104]	; 171c0 <json_obj_encode+0x88>
		if (ret < 0) {
			return ret;
		}

		if (i < descr_len - 1) {
			ret = append_bytes(",", 1, data);
   17158:	f8df b068 	ldr.w	fp, [pc, #104]	; 171c4 <json_obj_encode+0x8c>
	for (i = 0; i < descr_len; i++) {
   1715c:	45b8      	cmp	r8, r7
		ret = str_encode((const char **)&descr[i].field_name,
   1715e:	462a      	mov	r2, r5
	for (i = 0; i < descr_len; i++) {
   17160:	d106      	bne.n	17170 <json_obj_encode+0x38>
				return ret;
			}
		}
	}

	return append_bytes("}", 1, data);
   17162:	2101      	movs	r1, #1
   17164:	4623      	mov	r3, r4
   17166:	4815      	ldr	r0, [pc, #84]	; (171bc <json_obj_encode+0x84>)
}
   17168:	b001      	add	sp, #4
   1716a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("}", 1, data);
   1716e:	4718      	bx	r3
		ret = str_encode((const char **)&descr[i].field_name,
   17170:	4621      	mov	r1, r4
   17172:	4630      	mov	r0, r6
   17174:	f7ff ffb6 	bl	170e4 <str_encode>
		if (ret < 0) {
   17178:	2800      	cmp	r0, #0
   1717a:	db1a      	blt.n	171b2 <json_obj_encode+0x7a>
		ret = append_bytes(":", 1, data);
   1717c:	462a      	mov	r2, r5
   1717e:	2101      	movs	r1, #1
   17180:	4650      	mov	r0, sl
   17182:	47a0      	blx	r4
		if (ret < 0) {
   17184:	2800      	cmp	r0, #0
   17186:	db14      	blt.n	171b2 <json_obj_encode+0x7a>
		ret = encode(&descr[i], val, append_bytes, data);
   17188:	462b      	mov	r3, r5
   1718a:	4622      	mov	r2, r4
   1718c:	4649      	mov	r1, r9
   1718e:	4630      	mov	r0, r6
   17190:	f000 f81a 	bl	171c8 <encode>
		if (ret < 0) {
   17194:	2800      	cmp	r0, #0
   17196:	db0c      	blt.n	171b2 <json_obj_encode+0x7a>
		if (i < descr_len - 1) {
   17198:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1719c:	429f      	cmp	r7, r3
   1719e:	d302      	bcc.n	171a6 <json_obj_encode+0x6e>
	for (i = 0; i < descr_len; i++) {
   171a0:	3701      	adds	r7, #1
   171a2:	3610      	adds	r6, #16
   171a4:	e7da      	b.n	1715c <json_obj_encode+0x24>
			ret = append_bytes(",", 1, data);
   171a6:	462a      	mov	r2, r5
   171a8:	2101      	movs	r1, #1
   171aa:	4658      	mov	r0, fp
   171ac:	47a0      	blx	r4
			if (ret < 0) {
   171ae:	2800      	cmp	r0, #0
   171b0:	daf6      	bge.n	171a0 <json_obj_encode+0x68>
}
   171b2:	b001      	add	sp, #4
   171b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b8:	00035d43 	.word	0x00035d43
   171bc:	00035d47 	.word	0x00035d47
   171c0:	00036bfc 	.word	0x00036bfc
   171c4:	00035d45 	.word	0x00035d45

000171c8 <encode>:
{
   171c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171cc:	461d      	mov	r5, r3
	switch (descr->type) {
   171ce:	7943      	ldrb	r3, [r0, #5]
{
   171d0:	4614      	mov	r4, r2
	switch (descr->type) {
   171d2:	085b      	lsrs	r3, r3, #1
	void *ptr = (char *)val + descr->offset;
   171d4:	88c2      	ldrh	r2, [r0, #6]
	switch (descr->type) {
   171d6:	2b5b      	cmp	r3, #91	; 0x5b
{
   171d8:	b087      	sub	sp, #28
	void *ptr = (char *)val + descr->offset;
   171da:	eb01 0602 	add.w	r6, r1, r2
	switch (descr->type) {
   171de:	d01f      	beq.n	17220 <encode+0x58>
   171e0:	d806      	bhi.n	171f0 <encode+0x28>
   171e2:	2b22      	cmp	r3, #34	; 0x22
   171e4:	d014      	beq.n	17210 <encode+0x48>
   171e6:	2b30      	cmp	r3, #48	; 0x30
   171e8:	d051      	beq.n	1728e <encode+0xc6>
		return -EINVAL;
   171ea:	f06f 0015 	mvn.w	r0, #21
   171ee:	e014      	b.n	1721a <encode+0x52>
	switch (descr->type) {
   171f0:	2b74      	cmp	r3, #116	; 0x74
   171f2:	d003      	beq.n	171fc <encode+0x34>
   171f4:	2b7b      	cmp	r3, #123	; 0x7b
   171f6:	d042      	beq.n	1727e <encode+0xb6>
   171f8:	2b66      	cmp	r3, #102	; 0x66
   171fa:	d1f6      	bne.n	171ea <encode+0x22>
	if (*value) {
   171fc:	5c8b      	ldrb	r3, [r1, r2]
		return append_bytes("true", 4, data);
   171fe:	462a      	mov	r2, r5
	if (*value) {
   17200:	b11b      	cbz	r3, 1720a <encode+0x42>
		return append_bytes("true", 4, data);
   17202:	2104      	movs	r1, #4
   17204:	482b      	ldr	r0, [pc, #172]	; (172b4 <encode+0xec>)
	return append_bytes(buf, (size_t)ret, data);
   17206:	47a0      	blx	r4
   17208:	e007      	b.n	1721a <encode+0x52>
	return append_bytes("false", 5, data);
   1720a:	2105      	movs	r1, #5
   1720c:	482a      	ldr	r0, [pc, #168]	; (172b8 <encode+0xf0>)
   1720e:	e7fa      	b.n	17206 <encode+0x3e>
		return str_encode(ptr, append_bytes, data);
   17210:	462a      	mov	r2, r5
   17212:	4621      	mov	r1, r4
   17214:	4630      	mov	r0, r6
   17216:	f7ff ff65 	bl	170e4 <str_encode>
}
   1721a:	b007      	add	sp, #28
   1721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return arr_encode(descr->array.element_descr, ptr,
   17220:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   17224:	4640      	mov	r0, r8
   17226:	f017 fa71 	bl	2e70c <get_elem_size>
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   1722a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1722e:	4682      	mov	sl, r0
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   17230:	f851 9003 	ldr.w	r9, [r1, r3]
	ret = append_bytes("[", 1, data);
   17234:	462a      	mov	r2, r5
   17236:	2101      	movs	r1, #1
   17238:	4820      	ldr	r0, [pc, #128]	; (172bc <encode+0xf4>)
   1723a:	47a0      	blx	r4
	if (ret < 0) {
   1723c:	2800      	cmp	r0, #0
   1723e:	dbec      	blt.n	1721a <encode+0x52>
	for (i = 0; i < n_elem; i++) {
   17240:	2700      	movs	r7, #0
		if (i < n_elem - 1) {
   17242:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
	for (i = 0; i < n_elem; i++) {
   17246:	45b9      	cmp	r9, r7
   17248:	d103      	bne.n	17252 <encode+0x8a>
	return append_bytes("]", 1, data);
   1724a:	462a      	mov	r2, r5
   1724c:	2101      	movs	r1, #1
   1724e:	481c      	ldr	r0, [pc, #112]	; (172c0 <encode+0xf8>)
   17250:	e7d9      	b.n	17206 <encode+0x3e>
		ret = encode(elem_descr, (char *)field - elem_descr->offset,
   17252:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   17256:	462b      	mov	r3, r5
   17258:	4622      	mov	r2, r4
   1725a:	1a71      	subs	r1, r6, r1
   1725c:	4640      	mov	r0, r8
   1725e:	f7ff ffb3 	bl	171c8 <encode>
		if (ret < 0) {
   17262:	2800      	cmp	r0, #0
   17264:	dbd9      	blt.n	1721a <encode+0x52>
		if (i < n_elem - 1) {
   17266:	45bb      	cmp	fp, r7
   17268:	d802      	bhi.n	17270 <encode+0xa8>
		field = (char *)field + elem_size;
   1726a:	4456      	add	r6, sl
	for (i = 0; i < n_elem; i++) {
   1726c:	3701      	adds	r7, #1
   1726e:	e7ea      	b.n	17246 <encode+0x7e>
			ret = append_bytes(",", 1, data);
   17270:	462a      	mov	r2, r5
   17272:	2101      	movs	r1, #1
   17274:	4813      	ldr	r0, [pc, #76]	; (172c4 <encode+0xfc>)
   17276:	47a0      	blx	r4
			if (ret < 0) {
   17278:	2800      	cmp	r0, #0
   1727a:	daf6      	bge.n	1726a <encode+0xa2>
   1727c:	e7cd      	b.n	1721a <encode+0x52>
		return json_obj_encode(descr->object.sub_descr,
   1727e:	9500      	str	r5, [sp, #0]
   17280:	4623      	mov	r3, r4
   17282:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   17286:	4632      	mov	r2, r6
   17288:	f7ff ff56 	bl	17138 <json_obj_encode>
   1728c:	e7c5      	b.n	1721a <encode+0x52>
	ret = snprintk(buf, sizeof(buf), "%d", *num);
   1728e:	588b      	ldr	r3, [r1, r2]
   17290:	210c      	movs	r1, #12
   17292:	4a0d      	ldr	r2, [pc, #52]	; (172c8 <encode+0x100>)
   17294:	eb0d 0001 	add.w	r0, sp, r1
   17298:	f016 ff9d 	bl	2e1d6 <snprintk>
	if (ret < 0) {
   1729c:	2800      	cmp	r0, #0
   1729e:	dbbc      	blt.n	1721a <encode+0x52>
	if (ret >= (int)sizeof(buf)) {
   172a0:	280b      	cmp	r0, #11
   172a2:	dc03      	bgt.n	172ac <encode+0xe4>
	return append_bytes(buf, (size_t)ret, data);
   172a4:	4601      	mov	r1, r0
   172a6:	462a      	mov	r2, r5
   172a8:	a803      	add	r0, sp, #12
   172aa:	e7ac      	b.n	17206 <encode+0x3e>
		return -ENOMEM;
   172ac:	f06f 000b 	mvn.w	r0, #11
		return num_encode(ptr, append_bytes, data);
   172b0:	e7b3      	b.n	1721a <encode+0x52>
   172b2:	bf00      	nop
   172b4:	00035c84 	.word	0x00035c84
   172b8:	00035c7e 	.word	0x00035c7e
   172bc:	00035d41 	.word	0x00035d41
   172c0:	00035c8a 	.word	0x00035c8a
   172c4:	00035d45 	.word	0x00035d45
   172c8:	00036eb8 	.word	0x00036eb8

000172cc <nordicsemi_nrf91_init>:
	__asm__ volatile(
   172cc:	f04f 0220 	mov.w	r2, #32
   172d0:	f3ef 8311 	mrs	r3, BASEPRI
   172d4:	f382 8811 	msr	BASEPRI, r2
   172d8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   172dc:	2101      	movs	r1, #1
   172de:	4a04      	ldr	r2, [pc, #16]	; (172f0 <nordicsemi_nrf91_init+0x24>)
   172e0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   172e4:	f383 8811 	msr	BASEPRI, r3
   172e8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   172ec:	2000      	movs	r0, #0
   172ee:	4770      	bx	lr
   172f0:	40039000 	.word	0x40039000

000172f4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   172f4:	b120      	cbz	r0, 17300 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   172f6:	4b03      	ldr	r3, [pc, #12]	; (17304 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   172f8:	0180      	lsls	r0, r0, #6
   172fa:	f043 0301 	orr.w	r3, r3, #1
   172fe:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   17300:	4770      	bx	lr
   17302:	bf00      	nop
   17304:	00034660 	.word	0x00034660

00017308 <net_context_get_state>:
 *
 * @return Network state.
 */
static inline
enum net_context_state net_context_get_state(struct net_context *context)
{
   17308:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1730a:	4604      	mov	r4, r0
   1730c:	b970      	cbnz	r0, 1732c <net_context_get_state+0x24>
   1730e:	490a      	ldr	r1, [pc, #40]	; (17338 <net_context_get_state+0x30>)
   17310:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   17314:	4a09      	ldr	r2, [pc, #36]	; (1733c <net_context_get_state+0x34>)
   17316:	480a      	ldr	r0, [pc, #40]	; (17340 <net_context_get_state+0x38>)
   17318:	f016 ff50 	bl	2e1bc <printk>
   1731c:	4809      	ldr	r0, [pc, #36]	; (17344 <net_context_get_state+0x3c>)
   1731e:	f016 ff4d 	bl	2e1bc <printk>
   17322:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   17326:	4805      	ldr	r0, [pc, #20]	; (1733c <net_context_get_state+0x34>)
   17328:	f017 fa49 	bl	2e7be <assert_post_action>

	return (enum net_context_state)
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1732c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
		NET_CONTEXT_STATE_MASK);
}
   17330:	f3c0 0041 	ubfx	r0, r0, #1, #2
   17334:	bd10      	pop	{r4, pc}
   17336:	bf00      	nop
   17338:	00035d76 	.word	0x00035d76
   1733c:	00035d49 	.word	0x00035d49
   17340:	00035920 	.word	0x00035920
   17344:	00035d7e 	.word	0x00035d7e

00017348 <net_context_get_type>:
 *
 * @return Network context type.
 */
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
   17348:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1734a:	4604      	mov	r4, r0
   1734c:	b970      	cbnz	r0, 1736c <net_context_get_type+0x24>
   1734e:	490a      	ldr	r1, [pc, #40]	; (17378 <net_context_get_type+0x30>)
   17350:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   17354:	4a09      	ldr	r2, [pc, #36]	; (1737c <net_context_get_type+0x34>)
   17356:	480a      	ldr	r0, [pc, #40]	; (17380 <net_context_get_type+0x38>)
   17358:	f016 ff30 	bl	2e1bc <printk>
   1735c:	4809      	ldr	r0, [pc, #36]	; (17384 <net_context_get_type+0x3c>)
   1735e:	f016 ff2d 	bl	2e1bc <printk>
   17362:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   17366:	4805      	ldr	r0, [pc, #20]	; (1737c <net_context_get_type+0x34>)
   17368:	f017 fa29 	bl	2e7be <assert_post_action>

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1736c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   17370:	f3c0 1081 	ubfx	r0, r0, #6, #2
   17374:	bd10      	pop	{r4, pc}
   17376:	bf00      	nop
   17378:	00035d76 	.word	0x00035d76
   1737c:	00035d49 	.word	0x00035d49
   17380:	00035920 	.word	0x00035920
   17384:	00035d7e 	.word	0x00035d7e

00017388 <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
   17388:	b538      	push	{r3, r4, r5, lr}
   1738a:	9d04      	ldr	r5, [sp, #16]
   1738c:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
   1738e:	461a      	mov	r2, r3
   17390:	b96b      	cbnz	r3, 173ae <zsock_accepted_cb+0x26>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
   17392:	4907      	ldr	r1, [pc, #28]	; (173b0 <zsock_accepted_cb+0x28>)
   17394:	f003 fad2 	bl	1a93c <net_context_recv>
	z_impl_k_queue_init(queue);
   17398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1739c:	f01c f86b 	bl	33476 <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
   173a0:	4621      	mov	r1, r4
   173a2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
	}
}
   173a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
   173aa:	f01c b871 	b.w	33490 <k_queue_append>
}
   173ae:	bd38      	pop	{r3, r4, r5, pc}
   173b0:	0002e89b 	.word	0x0002e89b

000173b4 <zsock_socket_internal>:
{
   173b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173b6:	4607      	mov	r7, r0
   173b8:	460e      	mov	r6, r1
   173ba:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
   173bc:	f7ff fd60 	bl	16e80 <z_reserve_fd>
	if (fd < 0) {
   173c0:	1e05      	subs	r5, r0, #0
   173c2:	db17      	blt.n	173f4 <zsock_socket_internal+0x40>
	if (proto == 0) {
   173c4:	b93c      	cbnz	r4, 173d6 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
   173c6:	1e7b      	subs	r3, r7, #1
   173c8:	2b01      	cmp	r3, #1
   173ca:	d804      	bhi.n	173d6 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
   173cc:	2e02      	cmp	r6, #2
   173ce:	d014      	beq.n	173fa <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
   173d0:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
   173d2:	bf08      	it	eq
   173d4:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
   173d6:	b2f1      	uxtb	r1, r6
   173d8:	ab01      	add	r3, sp, #4
   173da:	b2a2      	uxth	r2, r4
   173dc:	b2b8      	uxth	r0, r7
   173de:	f002 fe7f 	bl	1a0e0 <net_context_get>
	if (res < 0) {
   173e2:	1e06      	subs	r6, r0, #0
   173e4:	da0b      	bge.n	173fe <zsock_socket_internal+0x4a>
		z_free_fd(fd);
   173e6:	4628      	mov	r0, r5
   173e8:	f7ff fd76 	bl	16ed8 <z_free_fd>
		errno = -res;
   173ec:	f018 fe17 	bl	3001e <__errno>
   173f0:	4276      	negs	r6, r6
   173f2:	6006      	str	r6, [r0, #0]
		return -1;
   173f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   173f8:	e012      	b.n	17420 <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
   173fa:	2411      	movs	r4, #17
   173fc:	e7eb      	b.n	173d6 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
   173fe:	2300      	movs	r3, #0
   17400:	9801      	ldr	r0, [sp, #4]
   17402:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
   17404:	6583      	str	r3, [r0, #88]	; 0x58
   17406:	305c      	adds	r0, #92	; 0x5c
   17408:	f01c f835 	bl	33476 <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
   1740c:	2c06      	cmp	r4, #6
   1740e:	d102      	bne.n	17416 <zsock_socket_internal+0x62>
		net_context_ref(ctx);
   17410:	9801      	ldr	r0, [sp, #4]
   17412:	f019 f859 	bl	304c8 <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   17416:	4a04      	ldr	r2, [pc, #16]	; (17428 <zsock_socket_internal+0x74>)
   17418:	9901      	ldr	r1, [sp, #4]
   1741a:	4628      	mov	r0, r5
   1741c:	f7ff fd52 	bl	16ec4 <z_finalize_fd>
}
   17420:	4628      	mov	r0, r5
   17422:	b003      	add	sp, #12
   17424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17426:	bf00      	nop
   17428:	00034778 	.word	0x00034778

0001742c <z_impl_zsock_socket>:
{
   1742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   17430:	f8df 909c 	ldr.w	r9, [pc, #156]	; 174d0 <z_impl_zsock_socket+0xa4>
{
   17434:	4605      	mov	r5, r0
   17436:	460f      	mov	r7, r1
   17438:	4690      	mov	r8, r2
   1743a:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1743c:	4c1d      	ldr	r4, [pc, #116]	; (174b4 <z_impl_zsock_socket+0x88>)
   1743e:	4e1e      	ldr	r6, [pc, #120]	; (174b8 <z_impl_zsock_socket+0x8c>)
   17440:	454c      	cmp	r4, r9
   17442:	d90c      	bls.n	1745e <z_impl_zsock_socket+0x32>
   17444:	491d      	ldr	r1, [pc, #116]	; (174bc <z_impl_zsock_socket+0x90>)
   17446:	2399      	movs	r3, #153	; 0x99
   17448:	4632      	mov	r2, r6
   1744a:	481d      	ldr	r0, [pc, #116]	; (174c0 <z_impl_zsock_socket+0x94>)
   1744c:	f016 feb6 	bl	2e1bc <printk>
   17450:	481c      	ldr	r0, [pc, #112]	; (174c4 <z_impl_zsock_socket+0x98>)
   17452:	f016 feb3 	bl	2e1bc <printk>
   17456:	2199      	movs	r1, #153	; 0x99
   17458:	4630      	mov	r0, r6
   1745a:	f017 f9b0 	bl	2e7be <assert_post_action>
   1745e:	4554      	cmp	r4, sl
   17460:	d306      	bcc.n	17470 <z_impl_zsock_socket+0x44>
		return zsock_socket_internal(family, type, proto);
   17462:	4642      	mov	r2, r8
   17464:	4639      	mov	r1, r7
   17466:	4628      	mov	r0, r5
}
   17468:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return zsock_socket_internal(family, type, proto);
   1746c:	f7ff bfa2 	b.w	173b4 <zsock_socket_internal>
		if (sock_family->family != family &&
   17470:	6823      	ldr	r3, [r4, #0]
   17472:	42ab      	cmp	r3, r5
   17474:	d000      	beq.n	17478 <z_impl_zsock_socket+0x4c>
   17476:	b9db      	cbnz	r3, 174b0 <z_impl_zsock_socket+0x84>
		NET_ASSERT(sock_family->is_supported);
   17478:	6863      	ldr	r3, [r4, #4]
   1747a:	b963      	cbnz	r3, 17496 <z_impl_zsock_socket+0x6a>
   1747c:	4912      	ldr	r1, [pc, #72]	; (174c8 <z_impl_zsock_socket+0x9c>)
   1747e:	239f      	movs	r3, #159	; 0x9f
   17480:	4632      	mov	r2, r6
   17482:	480f      	ldr	r0, [pc, #60]	; (174c0 <z_impl_zsock_socket+0x94>)
   17484:	f016 fe9a 	bl	2e1bc <printk>
   17488:	4810      	ldr	r0, [pc, #64]	; (174cc <z_impl_zsock_socket+0xa0>)
   1748a:	f016 fe97 	bl	2e1bc <printk>
   1748e:	219f      	movs	r1, #159	; 0x9f
   17490:	4630      	mov	r0, r6
   17492:	f017 f994 	bl	2e7be <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   17496:	6863      	ldr	r3, [r4, #4]
   17498:	4642      	mov	r2, r8
   1749a:	4639      	mov	r1, r7
   1749c:	4628      	mov	r0, r5
   1749e:	4798      	blx	r3
   174a0:	b130      	cbz	r0, 174b0 <z_impl_zsock_socket+0x84>
		return sock_family->handler(family, type, proto);
   174a2:	68a3      	ldr	r3, [r4, #8]
   174a4:	4642      	mov	r2, r8
   174a6:	4639      	mov	r1, r7
   174a8:	4628      	mov	r0, r5
}
   174aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   174ae:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   174b0:	340c      	adds	r4, #12
   174b2:	e7c5      	b.n	17440 <z_impl_zsock_socket+0x14>
   174b4:	00034568 	.word	0x00034568
   174b8:	00035d81 	.word	0x00035d81
   174bc:	00035dcf 	.word	0x00035dcf
   174c0:	00035920 	.word	0x00035920
   174c4:	00035dfc 	.word	0x00035dfc
   174c8:	00035db5 	.word	0x00035db5
   174cc:	00035d7e 	.word	0x00035d7e
   174d0:	00034574 	.word	0x00034574

000174d4 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
   174d4:	b538      	push	{r3, r4, r5, lr}
   174d6:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
   174d8:	f002 fefc 	bl	1a2d4 <net_context_bind>
   174dc:	1e05      	subs	r5, r0, #0
   174de:	da06      	bge.n	174ee <zsock_bind_ctx+0x1a>
   174e0:	f018 fd9d 	bl	3001e <__errno>
   174e4:	426d      	negs	r5, r5
   174e6:	6005      	str	r5, [r0, #0]
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   174e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   174ec:	e005      	b.n	174fa <zsock_bind_ctx+0x26>
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
   174ee:	4620      	mov	r0, r4
   174f0:	f7ff ff2a 	bl	17348 <net_context_get_type>
   174f4:	2802      	cmp	r0, #2
   174f6:	d001      	beq.n	174fc <zsock_bind_ctx+0x28>
					   ctx->user_data));
	}

	return 0;
   174f8:	2000      	movs	r0, #0
}
   174fa:	bd38      	pop	{r3, r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   174fc:	6823      	ldr	r3, [r4, #0]
   174fe:	4620      	mov	r0, r4
   17500:	2200      	movs	r2, #0
   17502:	4905      	ldr	r1, [pc, #20]	; (17518 <zsock_bind_ctx+0x44>)
   17504:	f003 fa1a 	bl	1a93c <net_context_recv>
   17508:	1e04      	subs	r4, r0, #0
   1750a:	daf5      	bge.n	174f8 <zsock_bind_ctx+0x24>
   1750c:	f018 fd87 	bl	3001e <__errno>
   17510:	4264      	negs	r4, r4
   17512:	6004      	str	r4, [r0, #0]
   17514:	e7e8      	b.n	174e8 <zsock_bind_ctx+0x14>
   17516:	bf00      	nop
   17518:	0002e89b 	.word	0x0002e89b

0001751c <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
   1751c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   1751e:	f640 33b8 	movw	r3, #3000	; 0xbb8
   17522:	2400      	movs	r4, #0
   17524:	e9cd 3400 	strd	r3, r4, [sp]
   17528:	4623      	mov	r3, r4
{
   1752a:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   1752c:	f003 f8e2 	bl	1a6f4 <net_context_connect>
   17530:	1e05      	subs	r5, r0, #0
   17532:	da07      	bge.n	17544 <zsock_connect_ctx+0x28>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   17534:	f018 fd73 	bl	3001e <__errno>
   17538:	426d      	negs	r5, r5
   1753a:	6005      	str	r5, [r0, #0]
   1753c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
   17540:	b002      	add	sp, #8
   17542:	bd70      	pop	{r4, r5, r6, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   17544:	6833      	ldr	r3, [r6, #0]
   17546:	4622      	mov	r2, r4
   17548:	4903      	ldr	r1, [pc, #12]	; (17558 <zsock_connect_ctx+0x3c>)
   1754a:	4630      	mov	r0, r6
   1754c:	f003 f9f6 	bl	1a93c <net_context_recv>
   17550:	1e05      	subs	r5, r0, #0
   17552:	dbef      	blt.n	17534 <zsock_connect_ctx+0x18>
	return 0;
   17554:	4620      	mov	r0, r4
   17556:	e7f3      	b.n	17540 <zsock_connect_ctx+0x24>
   17558:	0002e89b 	.word	0x0002e89b

0001755c <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
   1755c:	b538      	push	{r3, r4, r5, lr}
   1755e:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
   17560:	f002 ff42 	bl	1a3e8 <net_context_listen>
   17564:	1e04      	subs	r4, r0, #0
   17566:	da06      	bge.n	17576 <zsock_listen_ctx+0x1a>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   17568:	f018 fd59 	bl	3001e <__errno>
   1756c:	4264      	negs	r4, r4
   1756e:	6004      	str	r4, [r0, #0]
   17570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
   17574:	bd38      	pop	{r3, r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   17576:	462b      	mov	r3, r5
   17578:	2200      	movs	r2, #0
   1757a:	4904      	ldr	r1, [pc, #16]	; (1758c <zsock_listen_ctx+0x30>)
   1757c:	4628      	mov	r0, r5
   1757e:	f003 f98d 	bl	1a89c <net_context_accept>
   17582:	1e04      	subs	r4, r0, #0
   17584:	dbf0      	blt.n	17568 <zsock_listen_ctx+0xc>
	return 0;
   17586:	2000      	movs	r0, #0
   17588:	e7f4      	b.n	17574 <zsock_listen_ctx+0x18>
   1758a:	bf00      	nop
   1758c:	00017389 	.word	0x00017389

00017590 <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
   17590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17592:	4605      	mov	r5, r0
   17594:	460f      	mov	r7, r1
   17596:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
   17598:	f7ff fc72 	bl	16e80 <z_reserve_fd>
	if (fd < 0) {
   1759c:	1e04      	subs	r4, r0, #0
   1759e:	db31      	blt.n	17604 <zsock_accept_ctx+0x74>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
   175a0:	6da9      	ldr	r1, [r5, #88]	; 0x58
   175a2:	f081 0102 	eor.w	r1, r1, #2
   175a6:	f341 0140 	sbfx	r1, r1, #1, #1
	return z_impl_k_queue_get(queue, timeout);
   175aa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   175ae:	f010 fe97 	bl	282e0 <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
   175b2:	4605      	mov	r5, r0
   175b4:	b938      	cbnz	r0, 175c6 <zsock_accept_ctx+0x36>
		z_free_fd(fd);
   175b6:	4620      	mov	r0, r4
   175b8:	f7ff fc8e 	bl	16ed8 <z_free_fd>
		errno = EAGAIN;
   175bc:	f018 fd2f 	bl	3001e <__errno>
   175c0:	230b      	movs	r3, #11
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
   175c2:	6003      	str	r3, [r0, #0]
			return -1;
   175c4:	e01e      	b.n	17604 <zsock_accept_ctx+0x74>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   175c6:	2100      	movs	r1, #0
   175c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
   175ca:	f01b ff48 	bl	3345e <z_queue_node_peek>
	if (last_pkt) {
   175ce:	b170      	cbz	r0, 175ee <zsock_accept_ctx+0x5e>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
   175d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
		if (net_pkt_eof(last_pkt)) {
   175d4:	0799      	lsls	r1, r3, #30
   175d6:	d50a      	bpl.n	175ee <zsock_accept_ctx+0x5e>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
   175d8:	6dab      	ldr	r3, [r5, #88]	; 0x58
			z_free_fd(fd);
   175da:	4620      	mov	r0, r4
   175dc:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   175e0:	65ab      	str	r3, [r5, #88]	; 0x58
   175e2:	f7ff fc79 	bl	16ed8 <z_free_fd>
			errno = ECONNABORTED;
   175e6:	f018 fd1a 	bl	3001e <__errno>
   175ea:	2371      	movs	r3, #113	; 0x71
   175ec:	e7e9      	b.n	175c2 <zsock_accept_ctx+0x32>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
   175ee:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
	if (net_context_is_closing(ctx)) {
   175f2:	055a      	lsls	r2, r3, #21
   175f4:	d509      	bpl.n	1760a <zsock_accept_ctx+0x7a>
		errno = ECONNABORTED;
   175f6:	f018 fd12 	bl	3001e <__errno>
   175fa:	2371      	movs	r3, #113	; 0x71
   175fc:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   175fe:	4620      	mov	r0, r4
   17600:	f7ff fc6a 	bl	16ed8 <z_free_fd>
		return -1;
   17604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17608:	e01b      	b.n	17642 <zsock_accept_ctx+0xb2>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
   1760a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1760e:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
	if (addr != NULL && addrlen != NULL) {
   17612:	b177      	cbz	r7, 17632 <zsock_accept_ctx+0xa2>
   17614:	b16e      	cbz	r6, 17632 <zsock_accept_ctx+0xa2>
		int len = MIN(*addrlen, sizeof(ctx->remote));
   17616:	6832      	ldr	r2, [r6, #0]
   17618:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1761c:	2a08      	cmp	r2, #8
   1761e:	bf28      	it	cs
   17620:	2208      	movcs	r2, #8
   17622:	4638      	mov	r0, r7
   17624:	f01c f8cc 	bl	337c0 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
   17628:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1762a:	2b01      	cmp	r3, #1
   1762c:	d10b      	bne.n	17646 <zsock_accept_ctx+0xb6>
			*addrlen = sizeof(struct sockaddr_in);
   1762e:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   17630:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
   17632:	4628      	mov	r0, r5
   17634:	f018 ff48 	bl	304c8 <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   17638:	4a08      	ldr	r2, [pc, #32]	; (1765c <zsock_accept_ctx+0xcc>)
   1763a:	4629      	mov	r1, r5
   1763c:	4620      	mov	r0, r4
   1763e:	f7ff fc41 	bl	16ec4 <z_finalize_fd>

	return fd;
}
   17642:	4620      	mov	r0, r4
   17644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
   17646:	2b02      	cmp	r3, #2
   17648:	d101      	bne.n	1764e <zsock_accept_ctx+0xbe>
			*addrlen = sizeof(struct sockaddr_in6);
   1764a:	2318      	movs	r3, #24
   1764c:	e7f0      	b.n	17630 <zsock_accept_ctx+0xa0>
			z_free_fd(fd);
   1764e:	4620      	mov	r0, r4
   17650:	f7ff fc42 	bl	16ed8 <z_free_fd>
			errno = ENOTSUP;
   17654:	f018 fce3 	bl	3001e <__errno>
   17658:	2386      	movs	r3, #134	; 0x86
   1765a:	e7b2      	b.n	175c2 <zsock_accept_ctx+0x32>
   1765c:	00034778 	.word	0x00034778

00017660 <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
   17660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_timeout_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17664:	065b      	lsls	r3, r3, #25
   17666:	bf58      	it	pl
   17668:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
{
   1766a:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1766c:	bf58      	it	pl
   1766e:	f084 0402 	eorpl.w	r4, r4, #2
{
   17672:	4688      	mov	r8, r1
   17674:	4691      	mov	r9, r2
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
   17676:	6803      	ldr	r3, [r0, #0]
   17678:	f04f 0200 	mov.w	r2, #0
   1767c:	4919      	ldr	r1, [pc, #100]	; (176e4 <zsock_sendto_ctx+0x84>)
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1767e:	bf54      	ite	pl
   17680:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
   17684:	2400      	movmi	r4, #0
{
   17686:	4605      	mov	r5, r0
   17688:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	status = net_context_recv(ctx, zsock_received_cb,
   1768a:	f003 f957 	bl	1a93c <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
   1768e:	1e07      	subs	r7, r0, #0
   17690:	da09      	bge.n	176a6 <zsock_sendto_ctx+0x46>
		errno = -status;
   17692:	f018 fcc4 	bl	3001e <__errno>
   17696:	427f      	negs	r7, r7
   17698:	6007      	str	r7, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
   1769a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
   1769e:	4620      	mov	r0, r4
   176a0:	b005      	add	sp, #20
   176a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
   176a6:	682b      	ldr	r3, [r5, #0]
   176a8:	b19e      	cbz	r6, 176d2 <zsock_sendto_ctx+0x72>
		status = net_context_sendto(ctx, buf, len, dest_addr,
   176aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
   176ae:	2300      	movs	r3, #0
   176b0:	9301      	str	r3, [sp, #4]
   176b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   176b4:	464a      	mov	r2, r9
   176b6:	9300      	str	r3, [sp, #0]
   176b8:	4641      	mov	r1, r8
   176ba:	4633      	mov	r3, r6
   176bc:	4628      	mov	r0, r5
   176be:	f018 ff9e 	bl	305fe <net_context_sendto>
	if (status < 0) {
   176c2:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
   176c4:	4604      	mov	r4, r0
	if (status < 0) {
   176c6:	daea      	bge.n	1769e <zsock_sendto_ctx+0x3e>
		errno = -status;
   176c8:	f018 fca9 	bl	3001e <__errno>
   176cc:	4264      	negs	r4, r4
   176ce:	6004      	str	r4, [r0, #0]
   176d0:	e7e3      	b.n	1769a <zsock_sendto_ctx+0x3a>
		status = net_context_send(ctx, buf, len, NULL, timeout,
   176d2:	e9cd 4300 	strd	r4, r3, [sp]
   176d6:	464a      	mov	r2, r9
   176d8:	4633      	mov	r3, r6
   176da:	4641      	mov	r1, r8
   176dc:	4628      	mov	r0, r5
   176de:	f018 ff41 	bl	30564 <net_context_send>
   176e2:	e7ee      	b.n	176c2 <zsock_sendto_ctx+0x62>
   176e4:	0002e89b 	.word	0x0002e89b

000176e8 <zsock_recvfrom_ctx>:
}

ssize_t zsock_recvfrom_ctx(struct net_context *ctx, void *buf, size_t max_len,
			   int flags,
			   struct sockaddr *src_addr, socklen_t *addrlen)
{
   176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ec:	b08d      	sub	sp, #52	; 0x34
   176ee:	461d      	mov	r5, r3
   176f0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   176f4:	4680      	mov	r8, r0
   176f6:	9102      	str	r1, [sp, #8]
   176f8:	9200      	str	r2, [sp, #0]
	enum net_sock_type sock_type = net_context_get_type(ctx);
   176fa:	f7ff fe25 	bl	17348 <net_context_get_type>

	if (max_len == 0) {
   176fe:	9b00      	ldr	r3, [sp, #0]
   17700:	b90b      	cbnz	r3, 17706 <zsock_recvfrom_ctx+0x1e>
	if (sock_type == SOCK_DGRAM) {
		return zsock_recv_dgram(ctx, buf, max_len, flags, src_addr, addrlen);
	} else if (sock_type == SOCK_STREAM) {
		return zsock_recv_stream(ctx, buf, max_len, flags);
	} else {
		__ASSERT(0, "Unknown socket type");
   17702:	2400      	movs	r4, #0
   17704:	e0bf      	b.n	17886 <zsock_recvfrom_ctx+0x19e>
	if (sock_type == SOCK_DGRAM) {
   17706:	2802      	cmp	r0, #2
   17708:	f040 80c6 	bne.w	17898 <zsock_recvfrom_ctx+0x1b0>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1770c:	066b      	lsls	r3, r5, #25
   1770e:	bf57      	itett	pl
   17710:	f8d8 1058 	ldrpl.w	r1, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   17714:	2100      	movmi	r1, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17716:	f081 0102 	eorpl.w	r1, r1, #2
   1771a:	f341 0140 	sbfxpl	r1, r1, #1, #1
	if (flags & ZSOCK_MSG_PEEK) {
   1771e:	f015 0502 	ands.w	r5, r5, #2
   17722:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   17726:	d01c      	beq.n	17762 <zsock_recvfrom_ctx+0x7a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   17728:	f017 f8a2 	bl	2e870 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   1772c:	f100 030b 	add.w	r3, r0, #11
   17730:	2b0b      	cmp	r3, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   17732:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   17734:	d806      	bhi.n	17744 <zsock_recvfrom_ctx+0x5c>
   17736:	f640 0181 	movw	r1, #2177	; 0x881
   1773a:	40d9      	lsrs	r1, r3
   1773c:	43c9      	mvns	r1, r1
   1773e:	f011 0101 	ands.w	r1, r1, #1
   17742:	d004      	beq.n	1774e <zsock_recvfrom_ctx+0x66>
			errno = -res;
   17744:	f018 fc6b 	bl	3001e <__errno>
   17748:	4264      	negs	r4, r4
   1774a:	6004      	str	r4, [r0, #0]
			return -1;
   1774c:	e033      	b.n	177b6 <zsock_recvfrom_ctx+0xce>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1774e:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   17752:	f01b fe84 	bl	3345e <z_queue_node_peek>
   17756:	4604      	mov	r4, r0
	if (!pkt) {
   17758:	b930      	cbnz	r0, 17768 <zsock_recvfrom_ctx+0x80>
				errno = EAGAIN;
   1775a:	f018 fc60 	bl	3001e <__errno>
   1775e:	230b      	movs	r3, #11
   17760:	e0b6      	b.n	178d0 <zsock_recvfrom_ctx+0x1e8>
   17762:	f010 fdbd 	bl	282e0 <z_impl_k_queue_get>
   17766:	e7f6      	b.n	17756 <zsock_recvfrom_ctx+0x6e>
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
	backup->pos = pkt->cursor.pos;
   17768:	e9d0 a305 	ldrd	sl, r3, [r0, #20]
   1776c:	9301      	str	r3, [sp, #4]
	if (src_addr && addrlen) {
   1776e:	2e00      	cmp	r6, #0
   17770:	d06a      	beq.n	17848 <zsock_recvfrom_ctx+0x160>
   17772:	2f00      	cmp	r7, #0
   17774:	d068      	beq.n	17848 <zsock_recvfrom_ctx+0x160>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   17776:	f8b8 3078 	ldrh.w	r3, [r8, #120]	; 0x78
   1777a:	f8d7 8000 	ldr.w	r8, [r7]
   1777e:	9303      	str	r3, [sp, #12]
	net_pkt_cursor_init(pkt);
   17780:	f019 f8a7 	bl	308d2 <net_pkt_cursor_init>
	return pkt->family;
   17784:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   17788:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1778c:	2b01      	cmp	r3, #1
	addr->sa_family = net_pkt_family(pkt);
   1778e:	8033      	strh	r3, [r6, #0]
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   17790:	d014      	beq.n	177bc <zsock_recvfrom_ctx+0xd4>
		ret = -ENOTSUP;
   17792:	f06f 0985 	mvn.w	r9, #133	; 0x85
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
	pkt->cursor.buf = backup->buf;
	pkt->cursor.pos = backup->pos;
   17796:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   17798:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   1779c:	61a3      	str	r3, [r4, #24]
		if (rv < 0) {
   1779e:	f1b9 0f00 	cmp.w	r9, #0
   177a2:	d04c      	beq.n	1783e <zsock_recvfrom_ctx+0x156>
			errno = -rv;
   177a4:	f018 fc3b 	bl	3001e <__errno>
   177a8:	f1c9 0300 	rsb	r3, r9, #0
		errno = ENOBUFS;
   177ac:	6003      	str	r3, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   177ae:	b915      	cbnz	r5, 177b6 <zsock_recvfrom_ctx+0xce>
		net_pkt_unref(pkt);
   177b0:	4620      	mov	r0, r4
   177b2:	f019 f82a 	bl	3080a <net_pkt_unref>
	return -1;
   177b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   177ba:	e064      	b.n	17886 <zsock_recvfrom_ctx+0x19e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   177bc:	f04f 0c00 	mov.w	ip, #0
   177c0:	2314      	movs	r3, #20
		if (addrlen < sizeof(struct sockaddr_in)) {
   177c2:	f1b8 0f07 	cmp.w	r8, #7
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   177c6:	e9cd c307 	strd	ip, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in)) {
   177ca:	d92c      	bls.n	17826 <zsock_recvfrom_ctx+0x13e>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
   177cc:	f10d 081c 	add.w	r8, sp, #28
   177d0:	4641      	mov	r1, r8
   177d2:	4620      	mov	r0, r4
   177d4:	f019 fa5b 	bl	30c8e <net_pkt_get_data>
		if (!ipv4_hdr ||
   177d8:	4683      	mov	fp, r0
   177da:	b910      	cbnz	r0, 177e2 <zsock_recvfrom_ctx+0xfa>
			ret = -ENOBUFS;
   177dc:	f06f 0968 	mvn.w	r9, #104	; 0x68
   177e0:	e7d9      	b.n	17796 <zsock_recvfrom_ctx+0xae>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   177e2:	9908      	ldr	r1, [sp, #32]
   177e4:	4620      	mov	r0, r4
   177e6:	f019 f8fe 	bl	309e6 <net_pkt_skip>
		if (!ipv4_hdr ||
   177ea:	2800      	cmp	r0, #0
   177ec:	d1f6      	bne.n	177dc <zsock_recvfrom_ctx+0xf4>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
   177ee:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   177f2:	4620      	mov	r0, r4
   177f4:	f019 f8f7 	bl	309e6 <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
   177f8:	4681      	mov	r9, r0
   177fa:	2800      	cmp	r0, #0
   177fc:	d1ee      	bne.n	177dc <zsock_recvfrom_ctx+0xf4>
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   177fe:	f8db 100c 	ldr.w	r1, [fp, #12]
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   17802:	f89d 200c 	ldrb.w	r2, [sp, #12]
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   17806:	6071      	str	r1, [r6, #4]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   17808:	2a11      	cmp	r2, #17
   1780a:	d10f      	bne.n	1782c <zsock_recvfrom_ctx+0x144>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1780c:	aa05      	add	r2, sp, #20
   1780e:	9207      	str	r2, [sp, #28]
   17810:	2208      	movs	r2, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   17812:	4641      	mov	r1, r8
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17814:	9208      	str	r2, [sp, #32]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   17816:	4620      	mov	r0, r4
   17818:	f019 fa39 	bl	30c8e <net_pkt_get_data>
		if (!tcp_hdr) {
   1781c:	2800      	cmp	r0, #0
   1781e:	d0dd      	beq.n	177dc <zsock_recvfrom_ctx+0xf4>
		*port = tcp_hdr->src_port;
   17820:	8802      	ldrh	r2, [r0, #0]
   17822:	8072      	strh	r2, [r6, #2]
   17824:	e7b7      	b.n	17796 <zsock_recvfrom_ctx+0xae>
			ret = -EINVAL;
   17826:	f06f 0915 	mvn.w	r9, #21
   1782a:	e7b4      	b.n	17796 <zsock_recvfrom_ctx+0xae>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1782c:	2a06      	cmp	r2, #6
   1782e:	d1b0      	bne.n	17792 <zsock_recvfrom_ctx+0xaa>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   17830:	2214      	movs	r2, #20
   17832:	f8cd 8014 	str.w	r8, [sp, #20]
   17836:	9206      	str	r2, [sp, #24]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   17838:	eb0d 0102 	add.w	r1, sp, r2
   1783c:	e7eb      	b.n	17816 <zsock_recvfrom_ctx+0x12e>
		if (src_addr->sa_family == AF_INET) {
   1783e:	8833      	ldrh	r3, [r6, #0]
   17840:	2b01      	cmp	r3, #1
   17842:	d113      	bne.n	1786c <zsock_recvfrom_ctx+0x184>
			*addrlen = sizeof(struct sockaddr_in);
   17844:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   17846:	603b      	str	r3, [r7, #0]
	recv_len = net_pkt_remaining_data(pkt);
   17848:	4620      	mov	r0, r4
   1784a:	f019 f946 	bl	30ada <net_pkt_remaining_data>
	if (recv_len > max_len) {
   1784e:	9b00      	ldr	r3, [sp, #0]
	if (net_pkt_read(pkt, buf, recv_len)) {
   17850:	9902      	ldr	r1, [sp, #8]
   17852:	4283      	cmp	r3, r0
   17854:	bf28      	it	cs
   17856:	4603      	movcs	r3, r0
   17858:	4620      	mov	r0, r4
   1785a:	461a      	mov	r2, r3
   1785c:	461e      	mov	r6, r3
   1785e:	f019 f8d8 	bl	30a12 <net_pkt_read>
   17862:	b158      	cbz	r0, 1787c <zsock_recvfrom_ctx+0x194>
		errno = ENOBUFS;
   17864:	f018 fbdb 	bl	3001e <__errno>
   17868:	2369      	movs	r3, #105	; 0x69
   1786a:	e79f      	b.n	177ac <zsock_recvfrom_ctx+0xc4>
		} else if (src_addr->sa_family == AF_INET6) {
   1786c:	2b02      	cmp	r3, #2
   1786e:	d101      	bne.n	17874 <zsock_recvfrom_ctx+0x18c>
			*addrlen = sizeof(struct sockaddr_in6);
   17870:	2318      	movs	r3, #24
   17872:	e7e8      	b.n	17846 <zsock_recvfrom_ctx+0x15e>
			errno = ENOTSUP;
   17874:	f018 fbd3 	bl	3001e <__errno>
   17878:	2386      	movs	r3, #134	; 0x86
   1787a:	e797      	b.n	177ac <zsock_recvfrom_ctx+0xc4>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   1787c:	b93d      	cbnz	r5, 1788e <zsock_recvfrom_ctx+0x1a6>
		net_pkt_unref(pkt);
   1787e:	4620      	mov	r0, r4
   17880:	f018 ffc3 	bl	3080a <net_pkt_unref>
	return recv_len;
   17884:	4634      	mov	r4, r6
	}

	return 0;
}
   17886:	4620      	mov	r0, r4
   17888:	b00d      	add	sp, #52	; 0x34
   1788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt->cursor.pos = backup->pos;
   1788e:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   17890:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   17894:	61a3      	str	r3, [r4, #24]
   17896:	e7f5      	b.n	17884 <zsock_recvfrom_ctx+0x19c>
	} else if (sock_type == SOCK_STREAM) {
   17898:	2801      	cmp	r0, #1
   1789a:	f040 8087 	bne.w	179ac <zsock_recvfrom_ctx+0x2c4>
	NET_ASSERT(context);
   1789e:	f1b8 0f00 	cmp.w	r8, #0
   178a2:	d10e      	bne.n	178c2 <zsock_recvfrom_ctx+0x1da>
   178a4:	4949      	ldr	r1, [pc, #292]	; (179cc <zsock_recvfrom_ctx+0x2e4>)
   178a6:	f44f 73a9 	mov.w	r3, #338	; 0x152
   178aa:	4a49      	ldr	r2, [pc, #292]	; (179d0 <zsock_recvfrom_ctx+0x2e8>)
   178ac:	4849      	ldr	r0, [pc, #292]	; (179d4 <zsock_recvfrom_ctx+0x2ec>)
   178ae:	f016 fc85 	bl	2e1bc <printk>
   178b2:	4849      	ldr	r0, [pc, #292]	; (179d8 <zsock_recvfrom_ctx+0x2f0>)
   178b4:	f016 fc82 	bl	2e1bc <printk>
   178b8:	f44f 71a9 	mov.w	r1, #338	; 0x152
   178bc:	4844      	ldr	r0, [pc, #272]	; (179d0 <zsock_recvfrom_ctx+0x2e8>)
   178be:	f016 ff7e 	bl	2e7be <assert_post_action>
	if (!net_context_is_used(ctx)) {
   178c2:	f8b8 307a 	ldrh.w	r3, [r8, #122]	; 0x7a
   178c6:	07dc      	lsls	r4, r3, #31
   178c8:	d404      	bmi.n	178d4 <zsock_recvfrom_ctx+0x1ec>
		errno = EBADF;
   178ca:	f018 fba8 	bl	3001e <__errno>
   178ce:	2309      	movs	r3, #9
			errno = ENOBUFS;
   178d0:	6003      	str	r3, [r0, #0]
			return -1;
   178d2:	e770      	b.n	177b6 <zsock_recvfrom_ctx+0xce>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   178d4:	0668      	lsls	r0, r5, #25
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   178d6:	f8d8 7058 	ldr.w	r7, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   178da:	bf4e      	itee	mi
   178dc:	2700      	movmi	r7, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   178de:	f087 0702 	eorpl.w	r7, r7, #2
   178e2:	f347 0740 	sbfxpl	r7, r7, #1, #1
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   178e6:	f108 0a5c 	add.w	sl, r8, #92	; 0x5c
   178ea:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
		if (sock_is_eof(ctx)) {
   178ee:	07d9      	lsls	r1, r3, #31
   178f0:	f53f af07 	bmi.w	17702 <zsock_recvfrom_ctx+0x1a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   178f4:	4639      	mov	r1, r7
   178f6:	4650      	mov	r0, sl
   178f8:	f016 ffba 	bl	2e870 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   178fc:	f100 010b 	add.w	r1, r0, #11
   17900:	290b      	cmp	r1, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   17902:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   17904:	f63f af1e 	bhi.w	17744 <zsock_recvfrom_ctx+0x5c>
   17908:	f640 0381 	movw	r3, #2177	; 0x881
   1790c:	fa23 f101 	lsr.w	r1, r3, r1
   17910:	43c9      	mvns	r1, r1
   17912:	f011 0101 	ands.w	r1, r1, #1
   17916:	f47f af15 	bne.w	17744 <zsock_recvfrom_ctx+0x5c>
   1791a:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   1791e:	f01b fd9e 	bl	3345e <z_queue_node_peek>
		if (!pkt) {
   17922:	4606      	mov	r6, r0
   17924:	b928      	cbnz	r0, 17932 <zsock_recvfrom_ctx+0x24a>
   17926:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
			if (sock_is_eof(ctx)) {
   1792a:	07da      	lsls	r2, r3, #31
   1792c:	f53f aee9 	bmi.w	17702 <zsock_recvfrom_ctx+0x1a>
   17930:	e713      	b.n	1775a <zsock_recvfrom_ctx+0x72>
	backup->buf = pkt->cursor.buf;
   17932:	6943      	ldr	r3, [r0, #20]
   17934:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
   17936:	6983      	ldr	r3, [r0, #24]
   17938:	9301      	str	r3, [sp, #4]
		data_len = net_pkt_remaining_data(pkt);
   1793a:	f019 f8ce 	bl	30ada <net_pkt_remaining_data>
   1793e:	9b00      	ldr	r3, [sp, #0]
   17940:	4683      	mov	fp, r0
		if (recv_len > max_len) {
   17942:	4283      	cmp	r3, r0
   17944:	bf28      	it	cs
   17946:	4603      	movcs	r3, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   17948:	9902      	ldr	r1, [sp, #8]
   1794a:	461a      	mov	r2, r3
   1794c:	4630      	mov	r0, r6
   1794e:	461c      	mov	r4, r3
   17950:	f019 f85f 	bl	30a12 <net_pkt_read>
   17954:	9b03      	ldr	r3, [sp, #12]
   17956:	b118      	cbz	r0, 17960 <zsock_recvfrom_ctx+0x278>
			errno = ENOBUFS;
   17958:	f018 fb61 	bl	3001e <__errno>
   1795c:	2369      	movs	r3, #105	; 0x69
   1795e:	e7b7      	b.n	178d0 <zsock_recvfrom_ctx+0x1e8>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   17960:	f015 0902 	ands.w	r9, r5, #2
   17964:	d11e      	bne.n	179a4 <zsock_recvfrom_ctx+0x2bc>
			if (recv_len == data_len) {
   17966:	9b00      	ldr	r3, [sp, #0]
   17968:	455b      	cmp	r3, fp
   1796a:	d310      	bcc.n	1798e <zsock_recvfrom_ctx+0x2a6>
   1796c:	4649      	mov	r1, r9
   1796e:	4650      	mov	r0, sl
   17970:	f010 fcb6 	bl	282e0 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   17974:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
				net_pkt_unref(pkt);
   17978:	4630      	mov	r0, r6
				if (net_pkt_eof(pkt)) {
   1797a:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   1797c:	bf42      	ittt	mi
   1797e:	f8d8 3058 	ldrmi.w	r3, [r8, #88]	; 0x58
   17982:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17986:	f8c8 3058 	strmi.w	r3, [r8, #88]	; 0x58
				net_pkt_unref(pkt);
   1798a:	f018 ff3e 	bl	3080a <net_pkt_unref>
	} while (recv_len == 0);
   1798e:	2c00      	cmp	r4, #0
   17990:	d0ab      	beq.n	178ea <zsock_recvfrom_ctx+0x202>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   17992:	f1b9 0f00 	cmp.w	r9, #0
   17996:	f47f af76 	bne.w	17886 <zsock_recvfrom_ctx+0x19e>
		net_context_update_recv_wnd(ctx, recv_len);
   1799a:	4621      	mov	r1, r4
   1799c:	4640      	mov	r0, r8
   1799e:	f018 fe4f 	bl	30640 <net_context_update_recv_wnd>
	return recv_len;
   179a2:	e770      	b.n	17886 <zsock_recvfrom_ctx+0x19e>
	pkt->cursor.buf = backup->buf;
   179a4:	6173      	str	r3, [r6, #20]
	pkt->cursor.pos = backup->pos;
   179a6:	9b01      	ldr	r3, [sp, #4]
   179a8:	61b3      	str	r3, [r6, #24]
   179aa:	e7f0      	b.n	1798e <zsock_recvfrom_ctx+0x2a6>
		__ASSERT(0, "Unknown socket type");
   179ac:	f240 339f 	movw	r3, #927	; 0x39f
   179b0:	4a0a      	ldr	r2, [pc, #40]	; (179dc <zsock_recvfrom_ctx+0x2f4>)
   179b2:	490b      	ldr	r1, [pc, #44]	; (179e0 <zsock_recvfrom_ctx+0x2f8>)
   179b4:	4807      	ldr	r0, [pc, #28]	; (179d4 <zsock_recvfrom_ctx+0x2ec>)
   179b6:	f016 fc01 	bl	2e1bc <printk>
   179ba:	480a      	ldr	r0, [pc, #40]	; (179e4 <zsock_recvfrom_ctx+0x2fc>)
   179bc:	f016 fbfe 	bl	2e1bc <printk>
   179c0:	f240 319f 	movw	r1, #927	; 0x39f
   179c4:	4805      	ldr	r0, [pc, #20]	; (179dc <zsock_recvfrom_ctx+0x2f4>)
   179c6:	f016 fefa 	bl	2e7be <assert_post_action>
   179ca:	e69a      	b.n	17702 <zsock_recvfrom_ctx+0x1a>
   179cc:	00035d76 	.word	0x00035d76
   179d0:	00035d49 	.word	0x00035d49
   179d4:	00035920 	.word	0x00035920
   179d8:	00035d7e 	.word	0x00035d7e
   179dc:	00035d81 	.word	0x00035d81
   179e0:	00037308 	.word	0x00037308
   179e4:	00035e1b 	.word	0x00035e1b

000179e8 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   179e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179ec:	4683      	mov	fp, r0
   179ee:	4688      	mov	r8, r1
   179f0:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
   179f4:	b09b      	sub	sp, #108	; 0x6c
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   179f6:	4648      	mov	r0, r9
   179f8:	f01b fe16 	bl	33628 <z_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   179fc:	4646      	mov	r6, r8
   179fe:	464c      	mov	r4, r9
   17a00:	465f      	mov	r7, fp
	end = z_timeout_end_calc(timeout);
   17a02:	e9cd 0106 	strd	r0, r1, [sp, #24]
	pev = poll_events;
   17a06:	ad0b      	add	r5, sp, #44	; 0x2c
   17a08:	9509      	str	r5, [sp, #36]	; 0x24
	for (pfd = fds, i = nfds; i--; pfd++) {
   17a0a:	b9ee      	cbnz	r6, 17a48 <z_impl_zsock_poll+0x60>
			errno = -result;
			return -1;
		}
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17a0c:	1c63      	adds	r3, r4, #1
   17a0e:	2b01      	cmp	r3, #1
   17a10:	d94f      	bls.n	17ab2 <z_impl_zsock_poll+0xca>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   17a12:	f012 fd73 	bl	2a4fc <z_tick_get>
   17a16:	9b06      	ldr	r3, [sp, #24]
   17a18:	1a1b      	subs	r3, r3, r0
   17a1a:	9302      	str	r3, [sp, #8]
   17a1c:	9b07      	ldr	r3, [sp, #28]
   17a1e:	eb63 0301 	sbc.w	r3, r3, r1
   17a22:	9303      	str	r3, [sp, #12]

		if (remaining <= 0) {
   17a24:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17a28:	2b01      	cmp	r3, #1
   17a2a:	f174 0300 	sbcs.w	r3, r4, #0
   17a2e:	db3f      	blt.n	17ab0 <z_impl_zsock_poll+0xc8>
			return (u32_t)((t * to_hz + off) / from_hz);
   17a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17a34:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17a38:	2300      	movs	r3, #0
   17a3a:	9802      	ldr	r0, [sp, #8]
   17a3c:	fbe1 2300 	umlal	r2, r3, r1, r0
   17a40:	0bd4      	lsrs	r4, r2, #15
   17a42:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
   17a46:	e034      	b.n	17ab2 <z_impl_zsock_poll+0xca>
		if (pfd->fd < 0) {
   17a48:	6838      	ldr	r0, [r7, #0]
   17a4a:	2800      	cmp	r0, #0
   17a4c:	db2d      	blt.n	17aaa <z_impl_zsock_poll+0xc2>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   17a4e:	a90a      	add	r1, sp, #40	; 0x28
   17a50:	f7ff fa02 	bl	16e58 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   17a54:	4682      	mov	sl, r0
   17a56:	b340      	cbz	r0, 17aaa <z_impl_zsock_poll+0xc2>
		result = z_fdtable_call_ioctl(vtable, ctx,
   17a58:	ab1a      	add	r3, sp, #104	; 0x68
   17a5a:	9301      	str	r3, [sp, #4]
   17a5c:	ab09      	add	r3, sp, #36	; 0x24
   17a5e:	9300      	str	r3, [sp, #0]
   17a60:	4601      	mov	r1, r0
   17a62:	463b      	mov	r3, r7
   17a64:	f240 1203 	movw	r2, #259	; 0x103
   17a68:	980a      	ldr	r0, [sp, #40]	; 0x28
   17a6a:	f016 feea 	bl	2e842 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   17a6e:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   17a72:	4603      	mov	r3, r0
		if (result == -EALREADY) {
   17a74:	d018      	beq.n	17aa8 <z_impl_zsock_poll+0xc0>
		} else if (result == -EXDEV) {
   17a76:	f110 0f12 	cmn.w	r0, #18
   17a7a:	d10d      	bne.n	17a98 <z_impl_zsock_poll+0xb0>
			return z_fdtable_call_ioctl(vtable, ctx,
   17a7c:	e9cd 8900 	strd	r8, r9, [sp]
   17a80:	465b      	mov	r3, fp
   17a82:	f240 1205 	movw	r2, #261	; 0x105
   17a86:	4651      	mov	r1, sl
   17a88:	980a      	ldr	r0, [sp, #40]	; 0x28
   17a8a:	f016 feda 	bl	2e842 <z_fdtable_call_ioctl>
   17a8e:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   17a90:	4630      	mov	r0, r6
   17a92:	b01b      	add	sp, #108	; 0x6c
   17a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (result != 0) {
   17a98:	b138      	cbz	r0, 17aaa <z_impl_zsock_poll+0xc2>
   17a9a:	9302      	str	r3, [sp, #8]
				errno = -result;
   17a9c:	f018 fabf 	bl	3001e <__errno>
   17aa0:	9b02      	ldr	r3, [sp, #8]
   17aa2:	425b      	negs	r3, r3
   17aa4:	6003      	str	r3, [r0, #0]
				return -1;
   17aa6:	e01d      	b.n	17ae4 <z_impl_zsock_poll+0xfc>
			timeout = K_NO_WAIT;
   17aa8:	2400      	movs	r4, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   17aaa:	3708      	adds	r7, #8
   17aac:	3e01      	subs	r6, #1
   17aae:	e7ac      	b.n	17a0a <z_impl_zsock_poll+0x22>
			timeout = K_NO_WAIT;
   17ab0:	4634      	mov	r4, r6
		ret = k_poll(poll_events, pev - poll_events, timeout);
   17ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
   17ab4:	4b35      	ldr	r3, [pc, #212]	; (17b8c <z_impl_zsock_poll+0x1a4>)
   17ab6:	1b49      	subs	r1, r1, r5
   17ab8:	1089      	asrs	r1, r1, #2
   17aba:	4359      	muls	r1, r3
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17abc:	4622      	mov	r2, r4
   17abe:	4628      	mov	r0, r5
   17ac0:	f012 ffa8 	bl	2aa14 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   17ac4:	f100 030b 	add.w	r3, r0, #11
   17ac8:	2b0b      	cmp	r3, #11
   17aca:	4606      	mov	r6, r0
   17acc:	d806      	bhi.n	17adc <z_impl_zsock_poll+0xf4>
   17ace:	f640 0781 	movw	r7, #2177	; 0x881
   17ad2:	40df      	lsrs	r7, r3
   17ad4:	43ff      	mvns	r7, r7
   17ad6:	f017 0701 	ands.w	r7, r7, #1
   17ada:	d006      	beq.n	17aea <z_impl_zsock_poll+0x102>
			errno = -ret;
   17adc:	f018 fa9f 	bl	3001e <__errno>
   17ae0:	4276      	negs	r6, r6
   17ae2:	6006      	str	r6, [r0, #0]
			return -1;
   17ae4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17ae8:	e7d2      	b.n	17a90 <z_impl_zsock_poll+0xa8>
		for (pfd = fds, i = nfds; i--; pfd++) {
   17aea:	46c2      	mov	sl, r8
   17aec:	46d9      	mov	r9, fp
		ret = 0;
   17aee:	463e      	mov	r6, r7
		pev = poll_events;
   17af0:	9509      	str	r5, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   17af2:	f1ba 0f00 	cmp.w	sl, #0
   17af6:	d11d      	bne.n	17b34 <z_impl_zsock_poll+0x14c>
		if (retry) {
   17af8:	2f00      	cmp	r7, #0
   17afa:	d0c9      	beq.n	17a90 <z_impl_zsock_poll+0xa8>
			if (ret > 0) {
   17afc:	2e00      	cmp	r6, #0
   17afe:	dcc7      	bgt.n	17a90 <z_impl_zsock_poll+0xa8>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17b00:	2c00      	cmp	r4, #0
   17b02:	d0c5      	beq.n	17a90 <z_impl_zsock_poll+0xa8>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17b04:	1c63      	adds	r3, r4, #1
   17b06:	d0d4      	beq.n	17ab2 <z_impl_zsock_poll+0xca>
				s64_t remaining = end - z_tick_get();
   17b08:	f012 fcf8 	bl	2a4fc <z_tick_get>
   17b0c:	9b06      	ldr	r3, [sp, #24]
   17b0e:	1a1b      	subs	r3, r3, r0
   17b10:	9304      	str	r3, [sp, #16]
   17b12:	9b07      	ldr	r3, [sp, #28]
   17b14:	eb63 0301 	sbc.w	r3, r3, r1
   17b18:	9305      	str	r3, [sp, #20]
				if (remaining <= 0) {
   17b1a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   17b1e:	2b01      	cmp	r3, #1
   17b20:	f174 0300 	sbcs.w	r3, r4, #0
   17b24:	dbb4      	blt.n	17a90 <z_impl_zsock_poll+0xa8>
   17b26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17b2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17b2e:	2300      	movs	r3, #0
   17b30:	9804      	ldr	r0, [sp, #16]
   17b32:	e783      	b.n	17a3c <z_impl_zsock_poll+0x54>
			pfd->revents = 0;
   17b34:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   17b38:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   17b3c:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   17b40:	2800      	cmp	r0, #0
   17b42:	db1b      	blt.n	17b7c <z_impl_zsock_poll+0x194>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   17b44:	a90a      	add	r1, sp, #40	; 0x28
   17b46:	f7ff f987 	bl	16e58 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   17b4a:	4601      	mov	r1, r0
   17b4c:	b920      	cbnz	r0, 17b58 <z_impl_zsock_poll+0x170>
				pfd->revents = ZSOCK_POLLNVAL;
   17b4e:	2320      	movs	r3, #32
   17b50:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   17b54:	3601      	adds	r6, #1
   17b56:	e011      	b.n	17b7c <z_impl_zsock_poll+0x194>
			result = z_fdtable_call_ioctl(vtable, ctx,
   17b58:	ab09      	add	r3, sp, #36	; 0x24
   17b5a:	9300      	str	r3, [sp, #0]
   17b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
   17b60:	464b      	mov	r3, r9
   17b62:	980a      	ldr	r0, [sp, #40]	; 0x28
   17b64:	f016 fe6d 	bl	2e842 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   17b68:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   17b6c:	4603      	mov	r3, r0
			if (result == -EAGAIN) {
   17b6e:	d00a      	beq.n	17b86 <z_impl_zsock_poll+0x19e>
			} else if (result != 0) {
   17b70:	2800      	cmp	r0, #0
   17b72:	d192      	bne.n	17a9a <z_impl_zsock_poll+0xb2>
			if (pfd->revents != 0) {
   17b74:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   17b78:	2b00      	cmp	r3, #0
   17b7a:	d1eb      	bne.n	17b54 <z_impl_zsock_poll+0x16c>
		for (pfd = fds, i = nfds; i--; pfd++) {
   17b7c:	f109 0908 	add.w	r9, r9, #8
   17b80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   17b84:	e7b5      	b.n	17af2 <z_impl_zsock_poll+0x10a>
				retry = true;
   17b86:	2701      	movs	r7, #1
   17b88:	e7f8      	b.n	17b7c <z_impl_zsock_poll+0x194>
   17b8a:	bf00      	nop
   17b8c:	cccccccd 	.word	0xcccccccd

00017b90 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   17b90:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   17b92:	4605      	mov	r5, r0
   17b94:	b948      	cbnz	r0, 17baa <socket_offload_dns_register+0x1a>
   17b96:	490c      	ldr	r1, [pc, #48]	; (17bc8 <socket_offload_dns_register+0x38>)
   17b98:	480c      	ldr	r0, [pc, #48]	; (17bcc <socket_offload_dns_register+0x3c>)
   17b9a:	2313      	movs	r3, #19
   17b9c:	4a0c      	ldr	r2, [pc, #48]	; (17bd0 <socket_offload_dns_register+0x40>)
   17b9e:	f016 fb0d 	bl	2e1bc <printk>
   17ba2:	2113      	movs	r1, #19
   17ba4:	480a      	ldr	r0, [pc, #40]	; (17bd0 <socket_offload_dns_register+0x40>)
   17ba6:	f016 fe0a 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   17baa:	4c0a      	ldr	r4, [pc, #40]	; (17bd4 <socket_offload_dns_register+0x44>)
   17bac:	6822      	ldr	r2, [r4, #0]
   17bae:	b14a      	cbz	r2, 17bc4 <socket_offload_dns_register+0x34>
   17bb0:	4909      	ldr	r1, [pc, #36]	; (17bd8 <socket_offload_dns_register+0x48>)
   17bb2:	4806      	ldr	r0, [pc, #24]	; (17bcc <socket_offload_dns_register+0x3c>)
   17bb4:	2314      	movs	r3, #20
   17bb6:	4a06      	ldr	r2, [pc, #24]	; (17bd0 <socket_offload_dns_register+0x40>)
   17bb8:	f016 fb00 	bl	2e1bc <printk>
   17bbc:	2114      	movs	r1, #20
   17bbe:	4804      	ldr	r0, [pc, #16]	; (17bd0 <socket_offload_dns_register+0x40>)
   17bc0:	f016 fdfd 	bl	2e7be <assert_post_action>

	dns_offload = ops;
   17bc4:	6025      	str	r5, [r4, #0]
}
   17bc6:	bd38      	pop	{r3, r4, r5, pc}
   17bc8:	00035e6c 	.word	0x00035e6c
   17bcc:	00035920 	.word	0x00035920
   17bd0:	00035e31 	.word	0x00035e31
   17bd4:	200215ac 	.word	0x200215ac
   17bd8:	00035e70 	.word	0x00035e70

00017bdc <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   17bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   17be0:	4c13      	ldr	r4, [pc, #76]	; (17c30 <socket_offload_getaddrinfo+0x54>)
{
   17be2:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   17be4:	6823      	ldr	r3, [r4, #0]
{
   17be6:	4605      	mov	r5, r0
   17be8:	460e      	mov	r6, r1
   17bea:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   17bec:	b94b      	cbnz	r3, 17c02 <socket_offload_getaddrinfo+0x26>
   17bee:	4911      	ldr	r1, [pc, #68]	; (17c34 <socket_offload_getaddrinfo+0x58>)
   17bf0:	4811      	ldr	r0, [pc, #68]	; (17c38 <socket_offload_getaddrinfo+0x5c>)
   17bf2:	231d      	movs	r3, #29
   17bf4:	4a11      	ldr	r2, [pc, #68]	; (17c3c <socket_offload_getaddrinfo+0x60>)
   17bf6:	f016 fae1 	bl	2e1bc <printk>
   17bfa:	211d      	movs	r1, #29
   17bfc:	480f      	ldr	r0, [pc, #60]	; (17c3c <socket_offload_getaddrinfo+0x60>)
   17bfe:	f016 fdde 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   17c02:	6823      	ldr	r3, [r4, #0]
   17c04:	681b      	ldr	r3, [r3, #0]
   17c06:	b94b      	cbnz	r3, 17c1c <socket_offload_getaddrinfo+0x40>
   17c08:	490d      	ldr	r1, [pc, #52]	; (17c40 <socket_offload_getaddrinfo+0x64>)
   17c0a:	480b      	ldr	r0, [pc, #44]	; (17c38 <socket_offload_getaddrinfo+0x5c>)
   17c0c:	231e      	movs	r3, #30
   17c0e:	4a0b      	ldr	r2, [pc, #44]	; (17c3c <socket_offload_getaddrinfo+0x60>)
   17c10:	f016 fad4 	bl	2e1bc <printk>
   17c14:	211e      	movs	r1, #30
   17c16:	4809      	ldr	r0, [pc, #36]	; (17c3c <socket_offload_getaddrinfo+0x60>)
   17c18:	f016 fdd1 	bl	2e7be <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   17c1c:	6823      	ldr	r3, [r4, #0]
   17c1e:	463a      	mov	r2, r7
   17c20:	681c      	ldr	r4, [r3, #0]
   17c22:	4631      	mov	r1, r6
   17c24:	4643      	mov	r3, r8
   17c26:	4628      	mov	r0, r5
   17c28:	46a4      	mov	ip, r4
}
   17c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   17c2e:	4760      	bx	ip
   17c30:	200215ac 	.word	0x200215ac
   17c34:	00035ea5 	.word	0x00035ea5
   17c38:	00035920 	.word	0x00035920
   17c3c:	00035e31 	.word	0x00035e31
   17c40:	00035eb1 	.word	0x00035eb1

00017c44 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   17c44:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   17c46:	4c10      	ldr	r4, [pc, #64]	; (17c88 <socket_offload_freeaddrinfo+0x44>)
{
   17c48:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   17c4a:	6823      	ldr	r3, [r4, #0]
   17c4c:	b94b      	cbnz	r3, 17c62 <socket_offload_freeaddrinfo+0x1e>
   17c4e:	490f      	ldr	r1, [pc, #60]	; (17c8c <socket_offload_freeaddrinfo+0x48>)
   17c50:	480f      	ldr	r0, [pc, #60]	; (17c90 <socket_offload_freeaddrinfo+0x4c>)
   17c52:	2325      	movs	r3, #37	; 0x25
   17c54:	4a0f      	ldr	r2, [pc, #60]	; (17c94 <socket_offload_freeaddrinfo+0x50>)
   17c56:	f016 fab1 	bl	2e1bc <printk>
   17c5a:	2125      	movs	r1, #37	; 0x25
   17c5c:	480d      	ldr	r0, [pc, #52]	; (17c94 <socket_offload_freeaddrinfo+0x50>)
   17c5e:	f016 fdae 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   17c62:	6823      	ldr	r3, [r4, #0]
   17c64:	685b      	ldr	r3, [r3, #4]
   17c66:	b94b      	cbnz	r3, 17c7c <socket_offload_freeaddrinfo+0x38>
   17c68:	490b      	ldr	r1, [pc, #44]	; (17c98 <socket_offload_freeaddrinfo+0x54>)
   17c6a:	4809      	ldr	r0, [pc, #36]	; (17c90 <socket_offload_freeaddrinfo+0x4c>)
   17c6c:	2326      	movs	r3, #38	; 0x26
   17c6e:	4a09      	ldr	r2, [pc, #36]	; (17c94 <socket_offload_freeaddrinfo+0x50>)
   17c70:	f016 faa4 	bl	2e1bc <printk>
   17c74:	2126      	movs	r1, #38	; 0x26
   17c76:	4807      	ldr	r0, [pc, #28]	; (17c94 <socket_offload_freeaddrinfo+0x50>)
   17c78:	f016 fda1 	bl	2e7be <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   17c7c:	6823      	ldr	r3, [r4, #0]
   17c7e:	4628      	mov	r0, r5
}
   17c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   17c84:	685b      	ldr	r3, [r3, #4]
   17c86:	4718      	bx	r3
   17c88:	200215ac 	.word	0x200215ac
   17c8c:	00035ea5 	.word	0x00035ea5
   17c90:	00035920 	.word	0x00035920
   17c94:	00035e31 	.word	0x00035e31
   17c98:	00035e8b 	.word	0x00035e8b

00017c9c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   17c9c:	4b0e      	ldr	r3, [pc, #56]	; (17cd8 <settings_save_one+0x3c>)
{
   17c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   17ca2:	681c      	ldr	r4, [r3, #0]
{
   17ca4:	4606      	mov	r6, r0
   17ca6:	460f      	mov	r7, r1
   17ca8:	4690      	mov	r8, r2
	if (!cs) {
   17caa:	b194      	cbz	r4, 17cd2 <settings_save_one+0x36>
	return z_impl_k_mutex_lock(mutex, timeout);
   17cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cb0:	480a      	ldr	r0, [pc, #40]	; (17cdc <settings_save_one+0x40>)
   17cb2:	f010 f8ab 	bl	27e0c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   17cb6:	6863      	ldr	r3, [r4, #4]
   17cb8:	463a      	mov	r2, r7
   17cba:	689d      	ldr	r5, [r3, #8]
   17cbc:	4631      	mov	r1, r6
   17cbe:	4643      	mov	r3, r8
   17cc0:	4620      	mov	r0, r4
   17cc2:	47a8      	blx	r5
   17cc4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17cc6:	4805      	ldr	r0, [pc, #20]	; (17cdc <settings_save_one+0x40>)
   17cc8:	f010 f97e 	bl	27fc8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   17ccc:	4620      	mov	r0, r4
   17cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   17cd2:	f06f 0401 	mvn.w	r4, #1
   17cd6:	e7f9      	b.n	17ccc <settings_save_one+0x30>
   17cd8:	200215b8 	.word	0x200215b8
   17cdc:	20020608 	.word	0x20020608

00017ce0 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   17ce0:	2300      	movs	r3, #0
{
   17ce2:	b530      	push	{r4, r5, lr}
   17ce4:	b085      	sub	sp, #20
   17ce6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   17ce8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17cec:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   17cee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cf2:	480b      	ldr	r0, [pc, #44]	; (17d20 <settings_load_subtree+0x40>)
   17cf4:	f010 f88a 	bl	27e0c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   17cf8:	4b0a      	ldr	r3, [pc, #40]	; (17d24 <settings_load_subtree+0x44>)
   17cfa:	681c      	ldr	r4, [r3, #0]
   17cfc:	b134      	cbz	r4, 17d0c <settings_load_subtree+0x2c>
		cs->cs_itf->csi_load(cs, &arg);
   17cfe:	6863      	ldr	r3, [r4, #4]
   17d00:	4620      	mov	r0, r4
   17d02:	681b      	ldr	r3, [r3, #0]
   17d04:	a901      	add	r1, sp, #4
   17d06:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17d08:	6824      	ldr	r4, [r4, #0]
	return node->next;
   17d0a:	e7f7      	b.n	17cfc <settings_load_subtree+0x1c>
	rc = settings_commit_subtree(subtree);
   17d0c:	4628      	mov	r0, r5
   17d0e:	f000 f875 	bl	17dfc <settings_commit_subtree>
   17d12:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17d14:	4802      	ldr	r0, [pc, #8]	; (17d20 <settings_load_subtree+0x40>)
   17d16:	f010 f957 	bl	27fc8 <z_impl_k_mutex_unlock>
}
   17d1a:	4620      	mov	r0, r4
   17d1c:	b005      	add	sp, #20
   17d1e:	bd30      	pop	{r4, r5, pc}
   17d20:	20020608 	.word	0x20020608
   17d24:	200215b0 	.word	0x200215b0

00017d28 <settings_store_init>:
	list->head = NULL;
   17d28:	2200      	movs	r2, #0
   17d2a:	4b02      	ldr	r3, [pc, #8]	; (17d34 <settings_store_init+0xc>)
	list->tail = NULL;
   17d2c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   17d30:	4770      	bx	lr
   17d32:	bf00      	nop
   17d34:	200215b0 	.word	0x200215b0

00017d38 <settings_init>:
	list->head = NULL;
   17d38:	2200      	movs	r2, #0
   17d3a:	4b02      	ldr	r3, [pc, #8]	; (17d44 <settings_init+0xc>)
	list->tail = NULL;
   17d3c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   17d40:	f7ff bff2 	b.w	17d28 <settings_store_init>
   17d44:	200215bc 	.word	0x200215bc

00017d48 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   17d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17d4c:	4d23      	ldr	r5, [pc, #140]	; (17ddc <settings_register+0x94>)
{
   17d4e:	4606      	mov	r6, r0
   17d50:	46a8      	mov	r8, r5
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17d52:	4c23      	ldr	r4, [pc, #140]	; (17de0 <settings_register+0x98>)
   17d54:	4f23      	ldr	r7, [pc, #140]	; (17de4 <settings_register+0x9c>)
   17d56:	42ac      	cmp	r4, r5
   17d58:	d90c      	bls.n	17d74 <settings_register+0x2c>
   17d5a:	4923      	ldr	r1, [pc, #140]	; (17de8 <settings_register+0xa0>)
   17d5c:	232b      	movs	r3, #43	; 0x2b
   17d5e:	463a      	mov	r2, r7
   17d60:	4822      	ldr	r0, [pc, #136]	; (17dec <settings_register+0xa4>)
   17d62:	f016 fa2b 	bl	2e1bc <printk>
   17d66:	4822      	ldr	r0, [pc, #136]	; (17df0 <settings_register+0xa8>)
   17d68:	f016 fa28 	bl	2e1bc <printk>
   17d6c:	212b      	movs	r1, #43	; 0x2b
   17d6e:	4638      	mov	r0, r7
   17d70:	f016 fd25 	bl	2e7be <assert_post_action>
   17d74:	4544      	cmp	r4, r8
   17d76:	d316      	bcc.n	17da6 <settings_register+0x5e>
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17d78:	4d1e      	ldr	r5, [pc, #120]	; (17df4 <settings_register+0xac>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17d7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17d7e:	481e      	ldr	r0, [pc, #120]	; (17df8 <settings_register+0xb0>)
   17d80:	f010 f844 	bl	27e0c <z_impl_k_mutex_lock>
   17d84:	682c      	ldr	r4, [r5, #0]
   17d86:	b9ac      	cbnz	r4, 17db4 <settings_register+0x6c>
	parent->next = child;
   17d88:	2400      	movs	r4, #0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   17d8a:	686a      	ldr	r2, [r5, #4]
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   17d8c:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   17d90:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   17d92:	b9ca      	cbnz	r2, 17dc8 <settings_register+0x80>
	int rc = 0;
   17d94:	4614      	mov	r4, r2
	list->head = node;
   17d96:	e9c5 3300 	strd	r3, r3, [r5]
	return z_impl_k_mutex_unlock(mutex);
   17d9a:	4817      	ldr	r0, [pc, #92]	; (17df8 <settings_register+0xb0>)
   17d9c:	f010 f914 	bl	27fc8 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   17da0:	4620      	mov	r0, r4
   17da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(handler->name, ch->name) == 0) {
   17da6:	6821      	ldr	r1, [r4, #0]
   17da8:	6830      	ldr	r0, [r6, #0]
   17daa:	f7fa f95f 	bl	1206c <strcmp>
   17dae:	b188      	cbz	r0, 17dd4 <settings_register+0x8c>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17db0:	3414      	adds	r4, #20
   17db2:	e7d0      	b.n	17d56 <settings_register+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17db4:	3c14      	subs	r4, #20
   17db6:	2c00      	cmp	r4, #0
   17db8:	d0e6      	beq.n	17d88 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   17dba:	6821      	ldr	r1, [r4, #0]
   17dbc:	6830      	ldr	r0, [r6, #0]
   17dbe:	f7fa f955 	bl	1206c <strcmp>
   17dc2:	b120      	cbz	r0, 17dce <settings_register+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17dc4:	6964      	ldr	r4, [r4, #20]
	return node->next;
   17dc6:	e7de      	b.n	17d86 <settings_register+0x3e>
	parent->next = child;
   17dc8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17dca:	606b      	str	r3, [r5, #4]
   17dcc:	e7e5      	b.n	17d9a <settings_register+0x52>
			rc = -EEXIST;
   17dce:	f06f 0410 	mvn.w	r4, #16
   17dd2:	e7e2      	b.n	17d9a <settings_register+0x52>
			return -EEXIST;
   17dd4:	f06f 0410 	mvn.w	r4, #16
   17dd8:	e7e2      	b.n	17da0 <settings_register+0x58>
   17dda:	bf00      	nop
   17ddc:	00034574 	.word	0x00034574
   17de0:	00034574 	.word	0x00034574
   17de4:	00035eca 	.word	0x00035eca
   17de8:	00035efc 	.word	0x00035efc
   17dec:	00035920 	.word	0x00035920
   17df0:	00035dfc 	.word	0x00035dfc
   17df4:	200215bc 	.word	0x200215bc
   17df8:	20020608 	.word	0x20020608

00017dfc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   17dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e00:	4f21      	ldr	r7, [pc, #132]	; (17e88 <settings_commit_subtree+0x8c>)
{
   17e02:	4606      	mov	r6, r0
	rc = 0;
   17e04:	2500      	movs	r5, #0
   17e06:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e08:	4c20      	ldr	r4, [pc, #128]	; (17e8c <settings_commit_subtree+0x90>)
   17e0a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 17ea0 <settings_commit_subtree+0xa4>
   17e0e:	42bc      	cmp	r4, r7
   17e10:	d90c      	bls.n	17e2c <settings_commit_subtree+0x30>
   17e12:	491f      	ldr	r1, [pc, #124]	; (17e90 <settings_commit_subtree+0x94>)
   17e14:	23f4      	movs	r3, #244	; 0xf4
   17e16:	4642      	mov	r2, r8
   17e18:	481e      	ldr	r0, [pc, #120]	; (17e94 <settings_commit_subtree+0x98>)
   17e1a:	f016 f9cf 	bl	2e1bc <printk>
   17e1e:	481e      	ldr	r0, [pc, #120]	; (17e98 <settings_commit_subtree+0x9c>)
   17e20:	f016 f9cc 	bl	2e1bc <printk>
   17e24:	21f4      	movs	r1, #244	; 0xf4
   17e26:	4640      	mov	r0, r8
   17e28:	f016 fcc9 	bl	2e7be <assert_post_action>
   17e2c:	454c      	cmp	r4, r9
   17e2e:	d307      	bcc.n	17e40 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17e30:	4b1a      	ldr	r3, [pc, #104]	; (17e9c <settings_commit_subtree+0xa0>)
   17e32:	681c      	ldr	r4, [r3, #0]
   17e34:	b10c      	cbz	r4, 17e3a <settings_commit_subtree+0x3e>
   17e36:	3c14      	subs	r4, #20
   17e38:	b9a4      	cbnz	r4, 17e64 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   17e3a:	4628      	mov	r0, r5
   17e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e40:	b91e      	cbnz	r6, 17e4a <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   17e42:	68e3      	ldr	r3, [r4, #12]
   17e44:	b94b      	cbnz	r3, 17e5a <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e46:	3414      	adds	r4, #20
   17e48:	e7e1      	b.n	17e0e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e4a:	2200      	movs	r2, #0
   17e4c:	4631      	mov	r1, r6
   17e4e:	6820      	ldr	r0, [r4, #0]
   17e50:	f016 fefb 	bl	2ec4a <settings_name_steq>
   17e54:	2800      	cmp	r0, #0
   17e56:	d1f4      	bne.n	17e42 <settings_commit_subtree+0x46>
   17e58:	e7f5      	b.n	17e46 <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   17e5a:	4798      	blx	r3
				rc = rc2;
   17e5c:	2d00      	cmp	r5, #0
   17e5e:	bf08      	it	eq
   17e60:	4605      	moveq	r5, r0
   17e62:	e7f0      	b.n	17e46 <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e64:	b91e      	cbnz	r6, 17e6e <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   17e66:	68e3      	ldr	r3, [r4, #12]
   17e68:	b94b      	cbnz	r3, 17e7e <settings_commit_subtree+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17e6a:	6964      	ldr	r4, [r4, #20]
   17e6c:	e7e2      	b.n	17e34 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e6e:	2200      	movs	r2, #0
   17e70:	4631      	mov	r1, r6
   17e72:	6820      	ldr	r0, [r4, #0]
   17e74:	f016 fee9 	bl	2ec4a <settings_name_steq>
   17e78:	2800      	cmp	r0, #0
   17e7a:	d1f4      	bne.n	17e66 <settings_commit_subtree+0x6a>
   17e7c:	e7f5      	b.n	17e6a <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   17e7e:	4798      	blx	r3
				rc = rc2;
   17e80:	2d00      	cmp	r5, #0
   17e82:	bf08      	it	eq
   17e84:	4605      	moveq	r5, r0
   17e86:	e7f0      	b.n	17e6a <settings_commit_subtree+0x6e>
   17e88:	00034574 	.word	0x00034574
   17e8c:	00034574 	.word	0x00034574
   17e90:	00035efc 	.word	0x00035efc
   17e94:	00035920 	.word	0x00035920
   17e98:	00035dfc 	.word	0x00035dfc
   17e9c:	200215bc 	.word	0x200215bc
   17ea0:	00035eca 	.word	0x00035eca

00017ea4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   17ea4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   17ea6:	4c06      	ldr	r4, [pc, #24]	; (17ec0 <settings_subsys_init+0x1c>)
   17ea8:	7823      	ldrb	r3, [r4, #0]
   17eaa:	b93b      	cbnz	r3, 17ebc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   17eac:	f7ff ff44 	bl	17d38 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   17eb0:	f016 feeb 	bl	2ec8a <settings_backend_init>

	if (!err) {
   17eb4:	b908      	cbnz	r0, 17eba <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   17eb6:	2301      	movs	r3, #1
   17eb8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   17eba:	bd10      	pop	{r4, pc}
		return 0;
   17ebc:	2000      	movs	r0, #0
   17ebe:	e7fc      	b.n	17eba <settings_subsys_init+0x16>
   17ec0:	20027df7 	.word	0x20027df7

00017ec4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   17ec4:	b508      	push	{r3, lr}
   17ec6:	4604      	mov	r4, r0
	__asm__ volatile(
   17ec8:	f04f 0220 	mov.w	r2, #32
   17ecc:	f3ef 8311 	mrs	r3, BASEPRI
   17ed0:	f382 8811 	msr	BASEPRI, r2
   17ed4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   17ed8:	f016 ff0d 	bl	2ecf6 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   17edc:	4620      	mov	r0, r4
   17ede:	f001 f8a5 	bl	1902c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   17ee2:	4803      	ldr	r0, [pc, #12]	; (17ef0 <sys_reboot+0x2c>)
   17ee4:	f016 f96a 	bl	2e1bc <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   17ee8:	f000 ff06 	bl	18cf8 <arch_cpu_idle>
   17eec:	e7fc      	b.n	17ee8 <sys_reboot+0x24>
   17eee:	bf00      	nop
   17ef0:	00035f24 	.word	0x00035f24

00017ef4 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
   17ef4:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17ef6:	b2cc      	uxtb	r4, r1
   17ef8:	2c01      	cmp	r4, #1
{
   17efa:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17efc:	d909      	bls.n	17f12 <get_status+0x1e>
   17efe:	490b      	ldr	r1, [pc, #44]	; (17f2c <get_status+0x38>)
   17f00:	480b      	ldr	r0, [pc, #44]	; (17f30 <get_status+0x3c>)
   17f02:	237f      	movs	r3, #127	; 0x7f
   17f04:	4a0b      	ldr	r2, [pc, #44]	; (17f34 <get_status+0x40>)
   17f06:	f016 f959 	bl	2e1bc <printk>
   17f0a:	217f      	movs	r1, #127	; 0x7f
   17f0c:	4809      	ldr	r0, [pc, #36]	; (17f34 <get_status+0x40>)
   17f0e:	f016 fc56 	bl	2e7be <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
   17f12:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   17f14:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
   17f16:	fb04 3101 	mla	r1, r4, r1, r3
   17f1a:	7a4b      	ldrb	r3, [r1, #9]
   17f1c:	b923      	cbnz	r3, 17f28 <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
   17f1e:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   17f20:	fab0 f080 	clz	r0, r0
   17f24:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
   17f26:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   17f28:	2002      	movs	r0, #2
   17f2a:	e7fc      	b.n	17f26 <get_status+0x32>
   17f2c:	00035fe8 	.word	0x00035fe8
   17f30:	00035920 	.word	0x00035920
   17f34:	00035fad 	.word	0x00035fad

00017f38 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   17f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f3c:	b2ce      	uxtb	r6, r1
   17f3e:	2e01      	cmp	r6, #1
{
   17f40:	4680      	mov	r8, r0
   17f42:	4689      	mov	r9, r1
   17f44:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f46:	d909      	bls.n	17f5c <clock_async_start+0x24>
   17f48:	493f      	ldr	r1, [pc, #252]	; (18048 <clock_async_start+0x110>)
   17f4a:	4840      	ldr	r0, [pc, #256]	; (1804c <clock_async_start+0x114>)
   17f4c:	23ef      	movs	r3, #239	; 0xef
   17f4e:	4a40      	ldr	r2, [pc, #256]	; (18050 <clock_async_start+0x118>)
   17f50:	f016 f934 	bl	2e1bc <printk>
   17f54:	21ef      	movs	r1, #239	; 0xef
   17f56:	483e      	ldr	r0, [pc, #248]	; (18050 <clock_async_start+0x118>)
   17f58:	f016 fc31 	bl	2e7be <assert_post_action>
	config = get_sub_config(dev, type);
   17f5c:	f8d8 a004 	ldr.w	sl, [r8, #4]
	clk_data = get_sub_data(dev, type);
   17f60:	f8d8 700c 	ldr.w	r7, [r8, #12]

	__ASSERT_NO_MSG((data == NULL) ||
   17f64:	2c00      	cmp	r4, #0
   17f66:	d151      	bne.n	1800c <clock_async_start+0xd4>
   17f68:	f04f 0320 	mov.w	r3, #32
   17f6c:	f3ef 8b11 	mrs	fp, BASEPRI
   17f70:	f383 8811 	msr	BASEPRI, r3
   17f74:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   17f78:	230c      	movs	r3, #12
   17f7a:	fb06 7303 	mla	r3, r6, r3, r7
   17f7e:	7a1d      	ldrb	r5, [r3, #8]
   17f80:	3501      	adds	r5, #1
   17f82:	b2ed      	uxtb	r5, r5
   17f84:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   17f86:	b95d      	cbnz	r5, 17fa0 <clock_async_start+0x68>
   17f88:	4932      	ldr	r1, [pc, #200]	; (18054 <clock_async_start+0x11c>)
   17f8a:	4830      	ldr	r0, [pc, #192]	; (1804c <clock_async_start+0x114>)
   17f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
   17f90:	4a2f      	ldr	r2, [pc, #188]	; (18050 <clock_async_start+0x118>)
   17f92:	f016 f913 	bl	2e1bc <printk>
   17f96:	f44f 7180 	mov.w	r1, #256	; 0x100
   17f9a:	482d      	ldr	r0, [pc, #180]	; (18050 <clock_async_start+0x118>)
   17f9c:	f016 fc0f 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   17fa0:	f38b 8811 	msr	BASEPRI, fp
   17fa4:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
   17fa8:	b324      	cbz	r4, 17ff4 <clock_async_start+0xbc>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   17faa:	2203      	movs	r2, #3
   17fac:	4b2a      	ldr	r3, [pc, #168]	; (18058 <clock_async_start+0x120>)
   17fae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   17fb2:	220c      	movs	r2, #12
   17fb4:	4372      	muls	r2, r6
   17fb6:	18bb      	adds	r3, r7, r2
   17fb8:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   17fba:	b989      	cbnz	r1, 17fe0 <clock_async_start+0xa8>
	__asm__ volatile(
   17fbc:	f04f 0020 	mov.w	r0, #32
   17fc0:	f3ef 8c11 	mrs	ip, BASEPRI
   17fc4:	f380 8811 	msr	BASEPRI, r0
   17fc8:	f3bf 8f6f 	isb	sy
	parent->next = child;
   17fcc:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   17fce:	6858      	ldr	r0, [r3, #4]
   17fd0:	2800      	cmp	r0, #0
   17fd2:	d132      	bne.n	1803a <clock_async_start+0x102>
	list->tail = node;
   17fd4:	605c      	str	r4, [r3, #4]
	list->head = node;
   17fd6:	50bc      	str	r4, [r7, r2]
	__asm__ volatile(
   17fd8:	f38c 8811 	msr	BASEPRI, ip
   17fdc:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   17fe0:	2203      	movs	r2, #3
   17fe2:	4b1d      	ldr	r3, [pc, #116]	; (18058 <clock_async_start+0x120>)
   17fe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   17fe8:	b121      	cbz	r1, 17ff4 <clock_async_start+0xbc>
			data->cb(dev, subsys, data->user_data);
   17fea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17fee:	4649      	mov	r1, r9
   17ff0:	4640      	mov	r0, r8
   17ff2:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   17ff4:	2d01      	cmp	r5, #1
   17ff6:	d107      	bne.n	18008 <clock_async_start+0xd0>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   17ff8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17ffc:	78b3      	ldrb	r3, [r6, #2]
   17ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18002:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   18006:	601d      	str	r5, [r3, #0]
	}

	return 0;
   18008:	2000      	movs	r0, #0
   1800a:	e01b      	b.n	18044 <clock_async_start+0x10c>
	__ASSERT_NO_MSG((data == NULL) ||
   1800c:	6863      	ldr	r3, [r4, #4]
   1800e:	b94b      	cbnz	r3, 18024 <clock_async_start+0xec>
   18010:	4912      	ldr	r1, [pc, #72]	; (1805c <clock_async_start+0x124>)
   18012:	480e      	ldr	r0, [pc, #56]	; (1804c <clock_async_start+0x114>)
   18014:	23f4      	movs	r3, #244	; 0xf4
   18016:	4a0e      	ldr	r2, [pc, #56]	; (18050 <clock_async_start+0x118>)
   18018:	f016 f8d0 	bl	2e1bc <printk>
   1801c:	21f4      	movs	r1, #244	; 0xf4
   1801e:	480c      	ldr	r0, [pc, #48]	; (18050 <clock_async_start+0x118>)
   18020:	f016 fbcd 	bl	2e7be <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   18024:	230c      	movs	r3, #12
   18026:	4373      	muls	r3, r6
   18028:	58fb      	ldr	r3, [r7, r3]
		if (item == node) {
   1802a:	429c      	cmp	r4, r3
   1802c:	d008      	beq.n	18040 <clock_async_start+0x108>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1802e:	2b00      	cmp	r3, #0
   18030:	d09a      	beq.n	17f68 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18032:	681b      	ldr	r3, [r3, #0]
	} while (item);
   18034:	2b00      	cmp	r3, #0
   18036:	d1f8      	bne.n	1802a <clock_async_start+0xf2>
   18038:	e796      	b.n	17f68 <clock_async_start+0x30>
	parent->next = child;
   1803a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1803c:	605c      	str	r4, [r3, #4]
   1803e:	e7cb      	b.n	17fd8 <clock_async_start+0xa0>
		return -EBUSY;
   18040:	f06f 000f 	mvn.w	r0, #15
}
   18044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18048:	00035fe8 	.word	0x00035fe8
   1804c:	00035920 	.word	0x00035920
   18050:	00035fad 	.word	0x00035fad
   18054:	00035f9b 	.word	0x00035f9b
   18058:	40005000 	.word	0x40005000
   1805c:	00035f4d 	.word	0x00035f4d

00018060 <clock_stop>:
{
   18060:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18062:	b2cc      	uxtb	r4, r1
   18064:	2c01      	cmp	r4, #1
{
   18066:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18068:	d909      	bls.n	1807e <clock_stop+0x1e>
   1806a:	4919      	ldr	r1, [pc, #100]	; (180d0 <clock_stop+0x70>)
   1806c:	4819      	ldr	r0, [pc, #100]	; (180d4 <clock_stop+0x74>)
   1806e:	2394      	movs	r3, #148	; 0x94
   18070:	4a19      	ldr	r2, [pc, #100]	; (180d8 <clock_stop+0x78>)
   18072:	f016 f8a3 	bl	2e1bc <printk>
   18076:	2194      	movs	r1, #148	; 0x94
   18078:	4817      	ldr	r0, [pc, #92]	; (180d8 <clock_stop+0x78>)
   1807a:	f016 fba0 	bl	2e7be <assert_post_action>
	config = get_sub_config(dev, type);
   1807e:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
   18080:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
   18082:	f04f 0320 	mov.w	r3, #32
   18086:	f3ef 8611 	mrs	r6, BASEPRI
   1808a:	f383 8811 	msr	BASEPRI, r3
   1808e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   18092:	230c      	movs	r3, #12
   18094:	4363      	muls	r3, r4
   18096:	18ea      	adds	r2, r5, r3
   18098:	7a10      	ldrb	r0, [r2, #8]
   1809a:	b1a0      	cbz	r0, 180c6 <clock_stop+0x66>
	data->ref--;
   1809c:	3801      	subs	r0, #1
   1809e:	b2c0      	uxtb	r0, r0
   180a0:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   180a2:	b998      	cbnz	r0, 180cc <clock_stop+0x6c>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   180a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
	list->head = NULL;
   180a8:	50e8      	str	r0, [r5, r3]
   180aa:	78cb      	ldrb	r3, [r1, #3]
   180ac:	2101      	movs	r1, #1
   180ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   180b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   180b6:	6050      	str	r0, [r2, #4]
   180b8:	6019      	str	r1, [r3, #0]
		data->started = false;
   180ba:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   180bc:	f386 8811 	msr	BASEPRI, r6
   180c0:	f3bf 8f6f 	isb	sy
}
   180c4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   180c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   180ca:	e7f7      	b.n	180bc <clock_stop+0x5c>
	int err = 0;
   180cc:	2000      	movs	r0, #0
   180ce:	e7f5      	b.n	180bc <clock_stop+0x5c>
   180d0:	00035fe8 	.word	0x00035fe8
   180d4:	00035920 	.word	0x00035920
   180d8:	00035fad 	.word	0x00035fad

000180dc <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   180dc:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   180de:	2200      	movs	r2, #0
{
   180e0:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   180e2:	2101      	movs	r1, #1
   180e4:	2005      	movs	r0, #5
   180e6:	f000 fd7d 	bl	18be4 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   180ea:	2005      	movs	r0, #5
   180ec:	f000 fd6a 	bl	18bc4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   180f0:	2202      	movs	r2, #2
   180f2:	4b07      	ldr	r3, [pc, #28]	; (18110 <clk_init+0x34>)
	list->head = NULL;
   180f4:	2000      	movs	r0, #0
   180f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   180fa:	2203      	movs	r2, #3
   180fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   18100:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   18102:	e9c3 0000 	strd	r0, r0, [r3]
   18106:	68e3      	ldr	r3, [r4, #12]
   18108:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   1810c:	bd10      	pop	{r4, pc}
   1810e:	bf00      	nop
   18110:	40005000 	.word	0x40005000

00018114 <clkstarted_handle.constprop.9>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   18114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   18116:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18118:	4d11      	ldr	r5, [pc, #68]	; (18160 <clkstarted_handle.constprop.9+0x4c>)
static void clkstarted_handle(struct device *dev,
   1811a:	4606      	mov	r6, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1811c:	68eb      	ldr	r3, [r5, #12]
	sub_data->started = true;
   1811e:	fb04 3400 	mla	r4, r4, r0, r3
   18122:	2301      	movs	r3, #1
   18124:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   18126:	f04f 0320 	mov.w	r3, #32
   1812a:	f3ef 8111 	mrs	r1, BASEPRI
   1812e:	f383 8811 	msr	BASEPRI, r3
   18132:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   18136:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   18138:	b12b      	cbz	r3, 18146 <clkstarted_handle.constprop.9+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1813a:	6860      	ldr	r0, [r4, #4]
   1813c:	681a      	ldr	r2, [r3, #0]
   1813e:	4283      	cmp	r3, r0
	list->head = node;
   18140:	6022      	str	r2, [r4, #0]
	list->tail = node;
   18142:	bf08      	it	eq
   18144:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   18146:	f381 8811 	msr	BASEPRI, r1
   1814a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1814e:	b903      	cbnz	r3, 18152 <clkstarted_handle.constprop.9+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   18150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   18152:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
   18156:	4631      	mov	r1, r6
   18158:	4628      	mov	r0, r5
   1815a:	47b8      	blx	r7
   1815c:	e7e3      	b.n	18126 <clkstarted_handle.constprop.9+0x12>
   1815e:	bf00      	nop
   18160:	2002041c 	.word	0x2002041c

00018164 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   18164:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18166:	4b10      	ldr	r3, [pc, #64]	; (181a8 <nrf_power_clock_isr+0x44>)
   18168:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1816a:	b162      	cbz	r2, 18186 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1816c:	4a0f      	ldr	r2, [pc, #60]	; (181ac <nrf_power_clock_isr+0x48>)
   1816e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   18172:	07d1      	lsls	r1, r2, #31
   18174:	d507      	bpl.n	18186 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18176:	2200      	movs	r2, #0
   18178:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1817a:	4b0d      	ldr	r3, [pc, #52]	; (181b0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1817c:	68db      	ldr	r3, [r3, #12]
   1817e:	7a58      	ldrb	r0, [r3, #9]
   18180:	b908      	cbnz	r0, 18186 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18182:	f7ff ffc7 	bl	18114 <clkstarted_handle.constprop.9>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18186:	4b0b      	ldr	r3, [pc, #44]	; (181b4 <nrf_power_clock_isr+0x50>)
   18188:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1818a:	b15a      	cbz	r2, 181a4 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   1818c:	4a07      	ldr	r2, [pc, #28]	; (181ac <nrf_power_clock_isr+0x48>)
   1818e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   18192:	0792      	lsls	r2, r2, #30
   18194:	d506      	bpl.n	181a4 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18196:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18198:	2001      	movs	r0, #1
   1819a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1819c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   181a0:	f7ff bfb8 	b.w	18114 <clkstarted_handle.constprop.9>
}
   181a4:	bd08      	pop	{r3, pc}
   181a6:	bf00      	nop
   181a8:	40005100 	.word	0x40005100
   181ac:	40005000 	.word	0x40005000
   181b0:	2002041c 	.word	0x2002041c
   181b4:	40005104 	.word	0x40005104

000181b8 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   181b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181ba:	7b0b      	ldrb	r3, [r1, #12]
{
   181bc:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181be:	2b02      	cmp	r3, #2
{
   181c0:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181c2:	d128      	bne.n	18216 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   181c4:	680b      	ldr	r3, [r1, #0]
   181c6:	bb1b      	cbnz	r3, 18210 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   181c8:	68c2      	ldr	r2, [r0, #12]
	return dev->driver_data;
   181ca:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   181cc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   181d0:	b9d9      	cbnz	r1, 1820a <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   181d2:	4914      	ldr	r1, [pc, #80]	; (18224 <wdt_nrf_install_timeout+0x6c>)
   181d4:	1e58      	subs	r0, r3, #1
   181d6:	4288      	cmp	r0, r1
   181d8:	d81a      	bhi.n	18210 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   181da:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   181dc:	f10d 0107 	add.w	r1, sp, #7
   181e0:	6860      	ldr	r0, [r4, #4]
   181e2:	f00e fee7 	bl	26fb4 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   181e6:	4b10      	ldr	r3, [pc, #64]	; (18228 <wdt_nrf_install_timeout+0x70>)
   181e8:	4298      	cmp	r0, r3
   181ea:	d017      	beq.n	1821c <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   181ec:	68ab      	ldr	r3, [r5, #8]
   181ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   181f2:	b113      	cbz	r3, 181fa <wdt_nrf_install_timeout+0x42>
   181f4:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   181f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   181fa:	68e2      	ldr	r2, [r4, #12]
   181fc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   18200:	3301      	adds	r3, #1
   18202:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   18206:	b003      	add	sp, #12
   18208:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   1820a:	6a12      	ldr	r2, [r2, #32]
   1820c:	429a      	cmp	r2, r3
   1820e:	d0e5      	beq.n	181dc <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   18210:	f06f 0015 	mvn.w	r0, #21
   18214:	e7f7      	b.n	18206 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   18216:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1821a:	e7f4      	b.n	18206 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   1821c:	f06f 000b 	mvn.w	r0, #11
   18220:	e7f1      	b.n	18206 <wdt_nrf_install_timeout+0x4e>
   18222:	bf00      	nop
   18224:	07cffffe 	.word	0x07cffffe
   18228:	0bad0002 	.word	0x0bad0002

0001822c <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   1822c:	b510      	push	{r4, lr}
   1822e:	4604      	mov	r4, r0
   18230:	2200      	movs	r2, #0
   18232:	2101      	movs	r1, #1
   18234:	2018      	movs	r0, #24
   18236:	f000 fcd5 	bl	18be4 <z_arm_irq_priority_set>
   1823a:	6860      	ldr	r0, [r4, #4]
   1823c:	4a05      	ldr	r2, [pc, #20]	; (18254 <wdt_0_init+0x28>)
   1823e:	f100 0108 	add.w	r1, r0, #8
   18242:	f00e fe2d 	bl	26ea0 <nrfx_wdt_init>
   18246:	4b04      	ldr	r3, [pc, #16]	; (18258 <wdt_0_init+0x2c>)
   18248:	4298      	cmp	r0, r3
   1824a:	bf14      	ite	ne
   1824c:	f06f 000f 	mvnne.w	r0, #15
   18250:	2000      	moveq	r0, #0
   18252:	bd10      	pop	{r4, pc}
   18254:	0001825d 	.word	0x0001825d
   18258:	0bad0000 	.word	0x0bad0000

0001825c <wdt_0_event_handler>:
   1825c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   1825e:	2400      	movs	r4, #0
   18260:	4d0a      	ldr	r5, [pc, #40]	; (1828c <wdt_0_event_handler+0x30>)
   18262:	68ea      	ldr	r2, [r5, #12]
   18264:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   18268:	429c      	cmp	r4, r3
   1826a:	db00      	blt.n	1826e <wdt_0_event_handler+0x12>
WDT_NRFX_WDT_DEVICE(0);
   1826c:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   1826e:	686b      	ldr	r3, [r5, #4]
   18270:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   18272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   18276:	40e3      	lsrs	r3, r4
   18278:	07db      	lsls	r3, r3, #31
   1827a:	d505      	bpl.n	18288 <wdt_0_event_handler+0x2c>
			if (get_dev_data(dev)->m_callbacks[i]) {
   1827c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   18280:	b113      	cbz	r3, 18288 <wdt_0_event_handler+0x2c>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   18282:	4621      	mov	r1, r4
   18284:	4628      	mov	r0, r5
   18286:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   18288:	3401      	adds	r4, #1
   1828a:	e7ea      	b.n	18262 <wdt_0_event_handler+0x6>
   1828c:	2002042c 	.word	0x2002042c

00018290 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   18290:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   18292:	4c06      	ldr	r4, [pc, #24]	; (182ac <z_clock_isr+0x1c>)
   18294:	4906      	ldr	r1, [pc, #24]	; (182b0 <z_clock_isr+0x20>)
   18296:	4622      	mov	r2, r4
   18298:	4806      	ldr	r0, [pc, #24]	; (182b4 <z_clock_isr+0x24>)
   1829a:	2317      	movs	r3, #23
   1829c:	f015 ff8e 	bl	2e1bc <printk>
   182a0:	4620      	mov	r0, r4
}
   182a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   182a6:	2117      	movs	r1, #23
   182a8:	f016 ba89 	b.w	2e7be <assert_post_action>
   182ac:	0003601c 	.word	0x0003601c
   182b0:	00037308 	.word	0x00037308
   182b4:	00035920 	.word	0x00035920

000182b8 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   182b8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   182ba:	4b08      	ldr	r3, [pc, #32]	; (182dc <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   182bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   182c0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   182c4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   182c8:	4290      	cmp	r0, r2
   182ca:	d100      	bne.n	182ce <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   182cc:	4770      	bx	lr
   182ce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   182d2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   182d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   182d8:	e7f2      	b.n	182c0 <handle_next_tick_case+0x8>
   182da:	bf00      	nop
   182dc:	40015000 	.word	0x40015000

000182e0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   182e0:	2200      	movs	r2, #0
   182e2:	4b06      	ldr	r3, [pc, #24]	; (182fc <rtc1_nrf_isr+0x1c>)
   182e4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   182e6:	4a06      	ldr	r2, [pc, #24]	; (18300 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   182e8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   182ec:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   182ee:	1ac0      	subs	r0, r0, r3
   182f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   182f4:	4403      	add	r3, r0
   182f6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   182f8:	f012 b84e 	b.w	2a398 <z_clock_announce>
   182fc:	40015140 	.word	0x40015140
   18300:	20021604 	.word	0x20021604

00018304 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   18304:	b538      	push	{r3, r4, r5, lr}
   18306:	4814      	ldr	r0, [pc, #80]	; (18358 <z_clock_driver_init+0x54>)
   18308:	f00e fee8 	bl	270dc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   1830c:	b300      	cbz	r0, 18350 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1830e:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   18310:	2400      	movs	r4, #0
   18312:	681b      	ldr	r3, [r3, #0]
   18314:	2101      	movs	r1, #1
   18316:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18318:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1831c:	4d0f      	ldr	r5, [pc, #60]	; (1835c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1831e:	4b10      	ldr	r3, [pc, #64]	; (18360 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   18320:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18324:	601c      	str	r4, [r3, #0]
   18326:	4b0f      	ldr	r3, [pc, #60]	; (18364 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   18328:	2101      	movs	r1, #1
   1832a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   1832e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18332:	4622      	mov	r2, r4
   18334:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   18338:	2015      	movs	r0, #21
   1833a:	f000 fc53 	bl	18be4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1833e:	2015      	movs	r0, #21
   18340:	f000 fc40 	bl	18bc4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18344:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   18346:	4620      	mov	r0, r4
   18348:	4a07      	ldr	r2, [pc, #28]	; (18368 <z_clock_driver_init+0x64>)
   1834a:	6013      	str	r3, [r2, #0]
   1834c:	602b      	str	r3, [r5, #0]
}
   1834e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   18350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18354:	e7fb      	b.n	1834e <z_clock_driver_init+0x4a>
   18356:	bf00      	nop
   18358:	0003600c 	.word	0x0003600c
   1835c:	40015000 	.word	0x40015000
   18360:	40015140 	.word	0x40015140
   18364:	e000e100 	.word	0xe000e100
   18368:	40015008 	.word	0x40015008

0001836c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   1836e:	4b2c      	ldr	r3, [pc, #176]	; (18420 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18370:	4c2c      	ldr	r4, [pc, #176]	; (18424 <z_clock_set_timeout+0xb8>)
   18372:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   18376:	4b2c      	ldr	r3, [pc, #176]	; (18428 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18378:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1837c:	bf08      	it	eq
   1837e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   18380:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   18382:	1a52      	subs	r2, r2, r1
   18384:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   18388:	0212      	lsls	r2, r2, #8
   1838a:	d436      	bmi.n	183fa <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1838c:	3801      	subs	r0, #1
   1838e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   18392:	42a0      	cmp	r0, r4
   18394:	bfa8      	it	ge
   18396:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18398:	3301      	adds	r3, #1
   1839a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1839c:	42a0      	cmp	r0, r4
   1839e:	bf94      	ite	ls
   183a0:	180c      	addls	r4, r1, r0
   183a2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   183a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183a8:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   183aa:	4b1d      	ldr	r3, [pc, #116]	; (18420 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183ac:	4e1f      	ldr	r6, [pc, #124]	; (1842c <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   183ae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   183b2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   183b6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   183ba:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   183be:	1a52      	subs	r2, r2, r1
   183c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   183c4:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183c6:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   183c8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   183cc:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   183d0:	461d      	mov	r5, r3
	if (counter_sub(prev_val, now) == 1) {
   183d2:	d103      	bne.n	183dc <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   183d4:	200f      	movs	r0, #15
   183d6:	f01b f8b0 	bl	3353a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183da:	6037      	str	r7, [r6, #0]
   183dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   183e0:	4b13      	ldr	r3, [pc, #76]	; (18430 <z_clock_set_timeout+0xc4>)
   183e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   183e6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   183ea:	1a23      	subs	r3, r4, r0
   183ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   183f0:	2b01      	cmp	r3, #1
   183f2:	d104      	bne.n	183fe <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   183f4:	f7ff ff60 	bl	182b8 <handle_next_tick_case>
   183f8:	e00b      	b.n	18412 <z_clock_set_timeout+0xa6>
		ticks = 0;
   183fa:	2000      	movs	r0, #0
   183fc:	e7cc      	b.n	18398 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   183fe:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   18402:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   18406:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1840a:	1a24      	subs	r4, r4, r0
   1840c:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   1840e:	0223      	lsls	r3, r4, #8
   18410:	d4f0      	bmi.n	183f4 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   18412:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18416:	4b02      	ldr	r3, [pc, #8]	; (18420 <z_clock_set_timeout+0xb4>)
   18418:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   1841c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1841e:	bf00      	nop
   18420:	40015000 	.word	0x40015000
   18424:	007fffff 	.word	0x007fffff
   18428:	20021604 	.word	0x20021604
   1842c:	40015140 	.word	0x40015140
   18430:	e000e100 	.word	0xe000e100

00018434 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   18434:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18436:	f04f 0320 	mov.w	r3, #32
   1843a:	f3ef 8511 	mrs	r5, BASEPRI
   1843e:	f383 8811 	msr	BASEPRI, r3
   18442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18446:	481a      	ldr	r0, [pc, #104]	; (184b0 <z_clock_elapsed+0x7c>)
   18448:	f011 fc4a 	bl	29ce0 <z_spin_lock_valid>
   1844c:	b968      	cbnz	r0, 1846a <z_clock_elapsed+0x36>
   1844e:	235c      	movs	r3, #92	; 0x5c
   18450:	4a18      	ldr	r2, [pc, #96]	; (184b4 <z_clock_elapsed+0x80>)
   18452:	4919      	ldr	r1, [pc, #100]	; (184b8 <z_clock_elapsed+0x84>)
   18454:	4819      	ldr	r0, [pc, #100]	; (184bc <z_clock_elapsed+0x88>)
   18456:	f015 feb1 	bl	2e1bc <printk>
   1845a:	4915      	ldr	r1, [pc, #84]	; (184b0 <z_clock_elapsed+0x7c>)
   1845c:	4818      	ldr	r0, [pc, #96]	; (184c0 <z_clock_elapsed+0x8c>)
   1845e:	f015 fead 	bl	2e1bc <printk>
   18462:	215c      	movs	r1, #92	; 0x5c
   18464:	4813      	ldr	r0, [pc, #76]	; (184b4 <z_clock_elapsed+0x80>)
   18466:	f016 f9aa 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   1846a:	4811      	ldr	r0, [pc, #68]	; (184b0 <z_clock_elapsed+0x7c>)
   1846c:	f011 fc56 	bl	29d1c <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   18470:	4b14      	ldr	r3, [pc, #80]	; (184c4 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18472:	480f      	ldr	r0, [pc, #60]	; (184b0 <z_clock_elapsed+0x7c>)
   18474:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   18478:	4b13      	ldr	r3, [pc, #76]	; (184c8 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   1847a:	681b      	ldr	r3, [r3, #0]
   1847c:	1ae4      	subs	r4, r4, r3
   1847e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   18482:	f011 fc3b 	bl	29cfc <z_spin_unlock_valid>
   18486:	b968      	cbnz	r0, 184a4 <z_clock_elapsed+0x70>
   18488:	2384      	movs	r3, #132	; 0x84
   1848a:	4a0a      	ldr	r2, [pc, #40]	; (184b4 <z_clock_elapsed+0x80>)
   1848c:	490f      	ldr	r1, [pc, #60]	; (184cc <z_clock_elapsed+0x98>)
   1848e:	480b      	ldr	r0, [pc, #44]	; (184bc <z_clock_elapsed+0x88>)
   18490:	f015 fe94 	bl	2e1bc <printk>
   18494:	4906      	ldr	r1, [pc, #24]	; (184b0 <z_clock_elapsed+0x7c>)
   18496:	480e      	ldr	r0, [pc, #56]	; (184d0 <z_clock_elapsed+0x9c>)
   18498:	f015 fe90 	bl	2e1bc <printk>
   1849c:	2184      	movs	r1, #132	; 0x84
   1849e:	4805      	ldr	r0, [pc, #20]	; (184b4 <z_clock_elapsed+0x80>)
   184a0:	f016 f98d 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   184a4:	f385 8811 	msr	BASEPRI, r5
   184a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   184ac:	4620      	mov	r0, r4
   184ae:	bd38      	pop	{r3, r4, r5, pc}
   184b0:	20021608 	.word	0x20021608
   184b4:	00035cb3 	.word	0x00035cb3
   184b8:	00035cd9 	.word	0x00035cd9
   184bc:	00035920 	.word	0x00035920
   184c0:	00035cee 	.word	0x00035cee
   184c4:	40015000 	.word	0x40015000
   184c8:	20021604 	.word	0x20021604
   184cc:	00035d06 	.word	0x00035d06
   184d0:	00035d1d 	.word	0x00035d1d

000184d4 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   184d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   184d6:	f04f 0320 	mov.w	r3, #32
   184da:	f3ef 8511 	mrs	r5, BASEPRI
   184de:	f383 8811 	msr	BASEPRI, r3
   184e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184e6:	481b      	ldr	r0, [pc, #108]	; (18554 <z_timer_cycle_get_32+0x80>)
   184e8:	f011 fbfa 	bl	29ce0 <z_spin_lock_valid>
   184ec:	b968      	cbnz	r0, 1850a <z_timer_cycle_get_32+0x36>
   184ee:	235c      	movs	r3, #92	; 0x5c
   184f0:	4a19      	ldr	r2, [pc, #100]	; (18558 <z_timer_cycle_get_32+0x84>)
   184f2:	491a      	ldr	r1, [pc, #104]	; (1855c <z_timer_cycle_get_32+0x88>)
   184f4:	481a      	ldr	r0, [pc, #104]	; (18560 <z_timer_cycle_get_32+0x8c>)
   184f6:	f015 fe61 	bl	2e1bc <printk>
   184fa:	4916      	ldr	r1, [pc, #88]	; (18554 <z_timer_cycle_get_32+0x80>)
   184fc:	4819      	ldr	r0, [pc, #100]	; (18564 <z_timer_cycle_get_32+0x90>)
   184fe:	f015 fe5d 	bl	2e1bc <printk>
   18502:	215c      	movs	r1, #92	; 0x5c
   18504:	4814      	ldr	r0, [pc, #80]	; (18558 <z_timer_cycle_get_32+0x84>)
   18506:	f016 f95a 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   1850a:	4812      	ldr	r0, [pc, #72]	; (18554 <z_timer_cycle_get_32+0x80>)
   1850c:	f011 fc06 	bl	29d1c <z_spin_lock_set_owner>
   18510:	4b15      	ldr	r3, [pc, #84]	; (18568 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18512:	4810      	ldr	r0, [pc, #64]	; (18554 <z_timer_cycle_get_32+0x80>)
   18514:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   18518:	4b14      	ldr	r3, [pc, #80]	; (1856c <z_timer_cycle_get_32+0x98>)
   1851a:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1851c:	1ae4      	subs	r4, r4, r3
   1851e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   18522:	441c      	add	r4, r3
   18524:	f011 fbea 	bl	29cfc <z_spin_unlock_valid>
   18528:	b968      	cbnz	r0, 18546 <z_timer_cycle_get_32+0x72>
   1852a:	2384      	movs	r3, #132	; 0x84
   1852c:	4a0a      	ldr	r2, [pc, #40]	; (18558 <z_timer_cycle_get_32+0x84>)
   1852e:	4910      	ldr	r1, [pc, #64]	; (18570 <z_timer_cycle_get_32+0x9c>)
   18530:	480b      	ldr	r0, [pc, #44]	; (18560 <z_timer_cycle_get_32+0x8c>)
   18532:	f015 fe43 	bl	2e1bc <printk>
   18536:	4907      	ldr	r1, [pc, #28]	; (18554 <z_timer_cycle_get_32+0x80>)
   18538:	480e      	ldr	r0, [pc, #56]	; (18574 <z_timer_cycle_get_32+0xa0>)
   1853a:	f015 fe3f 	bl	2e1bc <printk>
   1853e:	2184      	movs	r1, #132	; 0x84
   18540:	4805      	ldr	r0, [pc, #20]	; (18558 <z_timer_cycle_get_32+0x84>)
   18542:	f016 f93c 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   18546:	f385 8811 	msr	BASEPRI, r5
   1854a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1854e:	4620      	mov	r0, r4
   18550:	bd38      	pop	{r3, r4, r5, pc}
   18552:	bf00      	nop
   18554:	20021608 	.word	0x20021608
   18558:	00035cb3 	.word	0x00035cb3
   1855c:	00035cd9 	.word	0x00035cd9
   18560:	00035920 	.word	0x00035920
   18564:	00035cee 	.word	0x00035cee
   18568:	40015000 	.word	0x40015000
   1856c:	20021604 	.word	0x20021604
   18570:	00035d06 	.word	0x00035d06
   18574:	00035d1d 	.word	0x00035d1d

00018578 <uECC_set_rng>:
static uECC_RNG_Function g_rng_function = 0;
#endif

void uECC_set_rng(uECC_RNG_Function rng_function)
{
	g_rng_function = rng_function;
   18578:	4b01      	ldr	r3, [pc, #4]	; (18580 <uECC_set_rng+0x8>)
   1857a:	6018      	str	r0, [r3, #0]
}
   1857c:	4770      	bx	lr
   1857e:	bf00      	nop
   18580:	200200a8 	.word	0x200200a8

00018584 <uECC_get_rng>:

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   18584:	4b01      	ldr	r3, [pc, #4]	; (1858c <uECC_get_rng+0x8>)
   18586:	6818      	ldr	r0, [r3, #0]
   18588:	4770      	bx	lr
   1858a:	bf00      	nop
   1858c:	200200a8 	.word	0x200200a8

00018590 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   18590:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   18592:	2208      	movs	r2, #8
{
   18594:	b089      	sub	sp, #36	; 0x24
   18596:	460c      	mov	r4, r1
   18598:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1859a:	f016 fde6 	bl	2f16a <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   1859e:	2700      	movs	r7, #0
	tmp[3] = product[11];
   185a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[4] = product[12];
	tmp[5] = product[13];
	tmp[6] = product[14];
	tmp[7] = product[15];
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185a2:	466a      	mov	r2, sp
	tmp[3] = product[11];
   185a4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   185a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185a8:	4668      	mov	r0, sp
	tmp[4] = product[12];
   185aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   185ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	tmp[0] = tmp[1] = tmp[2] = 0;
   185ae:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[5] = product[13];
   185b2:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   185b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
   185b6:	9700      	str	r7, [sp, #0]
	tmp[6] = product[14];
   185b8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   185ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185bc:	4669      	mov	r1, sp
	tmp[7] = product[15];
   185be:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185c0:	2308      	movs	r3, #8
   185c2:	f016 fcd7 	bl	2ef74 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185c6:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185c8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185ca:	466a      	mov	r2, sp
   185cc:	4631      	mov	r1, r6
   185ce:	4630      	mov	r0, r6
   185d0:	f016 fcd0 	bl	2ef74 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   185d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185d6:	4405      	add	r5, r0
	tmp[3] = product[12];
   185d8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   185da:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185dc:	466a      	mov	r2, sp
	tmp[4] = product[13];
   185de:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   185e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185e2:	4669      	mov	r1, sp
	tmp[5] = product[14];
   185e4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   185e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185e8:	4668      	mov	r0, sp
	tmp[7] = 0;
   185ea:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185ee:	2308      	movs	r3, #8
   185f0:	f016 fcc0 	bl	2ef74 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185f4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185f6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185f8:	2308      	movs	r3, #8
   185fa:	466a      	mov	r2, sp
   185fc:	4630      	mov	r0, r6
   185fe:	f016 fcb9 	bl	2ef74 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   18602:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18604:	4405      	add	r5, r0
	tmp[0] = product[8];
   18606:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   18608:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
	tmp[7] = product[15];
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1860a:	466a      	mov	r2, sp
	tmp[1] = product[9];
   1860c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   1860e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18610:	4630      	mov	r0, r6
	tmp[2] = product[10];
   18612:	9302      	str	r3, [sp, #8]
	tmp[6] = product[14];
   18614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = tmp[4] = tmp[5] = 0;
   18616:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[14];
   1861a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1861c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = tmp[4] = tmp[5] = 0;
   1861e:	9703      	str	r7, [sp, #12]
	tmp[7] = product[15];
   18620:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18622:	2308      	movs	r3, #8
   18624:	f016 fca6 	bl	2ef74 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   18628:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   1862a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[0] = product[9];
   1862c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   1862e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[4] = product[14];
   18630:	9204      	str	r2, [sp, #16]
	tmp[1] = product[10];
   18632:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   18634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[5] = product[15];
   18636:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[2] = product[11];
   18638:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   1863a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1863c:	4405      	add	r5, r0
	tmp[6] = product[13];
   1863e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[3] = product[13];
   18642:	9303      	str	r3, [sp, #12]
	tmp[7] = product[8];
   18644:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18646:	466a      	mov	r2, sp
	tmp[7] = product[8];
   18648:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1864a:	4630      	mov	r0, r6
   1864c:	2308      	movs	r3, #8
   1864e:	f016 fc91 	bl	2ef74 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   18652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18654:	4405      	add	r5, r0
	tmp[0] = product[11];
   18656:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   18658:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
	tmp[7] = product[10];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1865a:	466a      	mov	r2, sp
	tmp[1] = product[12];
   1865c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   1865e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18660:	4630      	mov	r0, r6
	tmp[2] = product[13];
   18662:	9302      	str	r3, [sp, #8]
	tmp[6] = product[8];
   18664:	6a23      	ldr	r3, [r4, #32]
	tmp[3] = tmp[4] = tmp[5] = 0;
   18666:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[8];
   1866a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   1866c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[3] = tmp[4] = tmp[5] = 0;
   1866e:	9703      	str	r7, [sp, #12]
	tmp[7] = product[10];
   18670:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18672:	2308      	movs	r3, #8
   18674:	f016 fd9c 	bl	2f1b0 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   18678:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1867a:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[12];
   1867c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   1867e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18680:	466a      	mov	r2, sp
	tmp[1] = product[13];
   18682:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   18684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18686:	4630      	mov	r0, r6
	tmp[2] = product[14];
   18688:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   1868a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[4] = tmp[5] = 0;
   1868c:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[3] = product[15];
   18690:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
   18692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18694:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   18696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18698:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1869a:	2308      	movs	r3, #8
   1869c:	f016 fd88 	bl	2f1b0 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   186a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186a2:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[13];
   186a4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   186a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186a8:	466a      	mov	r2, sp
	tmp[1] = product[14];
   186aa:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   186ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186ae:	4630      	mov	r0, r6
	tmp[2] = product[15];
   186b0:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   186b2:	6a23      	ldr	r3, [r4, #32]
   186b4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   186b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   186b8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   186ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   186bc:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   186c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   186c2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186c4:	2308      	movs	r3, #8
   186c6:	f016 fd73 	bl	2f1b0 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   186ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186cc:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
   186ce:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   186d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186d2:	466a      	mov	r2, sp
	tmp[2] = 0;
   186d4:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   186d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186da:	4630      	mov	r0, r6
	tmp[3] = product[9];
   186dc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   186de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   186e0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   186e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   186e4:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   186e8:	6b63      	ldr	r3, [r4, #52]	; 0x34

	if (carry < 0) {
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   186ea:	4c10      	ldr	r4, [pc, #64]	; (1872c <vli_mmod_fast_secp256r1+0x19c>)
	tmp[7] = product[13];
   186ec:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186ee:	2308      	movs	r3, #8
   186f0:	f016 fd5e 	bl	2f1b0 <uECC_vli_sub>
	if (carry < 0) {
   186f4:	1a2d      	subs	r5, r5, r0
   186f6:	d40f      	bmi.n	18718 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
   186f8:	b935      	cbnz	r5, 18708 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   186fa:	2208      	movs	r2, #8
   186fc:	4631      	mov	r1, r6
   186fe:	4620      	mov	r0, r4
   18700:	f016 fd3f 	bl	2f182 <uECC_vli_cmp_unsafe>
		while (carry || 
   18704:	2801      	cmp	r0, #1
   18706:	d00f      	beq.n	18728 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   18708:	2308      	movs	r3, #8
   1870a:	4622      	mov	r2, r4
   1870c:	4631      	mov	r1, r6
   1870e:	4630      	mov	r0, r6
   18710:	f016 fd4e 	bl	2f1b0 <uECC_vli_sub>
   18714:	1a2d      	subs	r5, r5, r0
   18716:	e7ef      	b.n	186f8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   18718:	2308      	movs	r3, #8
   1871a:	4622      	mov	r2, r4
   1871c:	4631      	mov	r1, r6
   1871e:	4630      	mov	r0, r6
   18720:	f016 fc28 	bl	2ef74 <uECC_vli_add>
		while (carry < 0);
   18724:	182d      	adds	r5, r5, r0
   18726:	d4f7      	bmi.n	18718 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
   18728:	b009      	add	sp, #36	; 0x24
   1872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1872c:	000347e4 	.word	0x000347e4

00018730 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   18730:	b5f0      	push	{r4, r5, r6, r7, lr}
   18732:	4607      	mov	r7, r0
   18734:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   18736:	4e27      	ldr	r6, [pc, #156]	; (187d4 <tc_aes128_set_encrypt_key+0xa4>)
   18738:	ad01      	add	r5, sp, #4
{
   1873a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1873c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1873e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18740:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   18742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18744:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18748:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   1874c:	2f00      	cmp	r7, #0
   1874e:	d03d      	beq.n	187cc <tc_aes128_set_encrypt_key+0x9c>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   18750:	2c00      	cmp	r4, #0
   18752:	d03d      	beq.n	187d0 <tc_aes128_set_encrypt_key+0xa0>
   18754:	1f38      	subs	r0, r7, #4
   18756:	4602      	mov	r2, r0
   18758:	4621      	mov	r1, r4
   1875a:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1875c:	784b      	ldrb	r3, [r1, #1]
   1875e:	780d      	ldrb	r5, [r1, #0]
   18760:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18762:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   18766:	78cd      	ldrb	r5, [r1, #3]
   18768:	3104      	adds	r1, #4
   1876a:	432b      	orrs	r3, r5
   1876c:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   18770:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18772:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18776:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1877a:	d1ef      	bne.n	1875c <tc_aes128_set_encrypt_key+0x2c>
   1877c:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1877e:	4c16      	ldr	r4, [pc, #88]	; (187d8 <tc_aes128_set_encrypt_key+0xa8>)
		if ((i % Nk) == 0) {
   18780:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   18782:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   18784:	d118      	bne.n	187b8 <tc_aes128_set_encrypt_key+0x88>
	return (((a) >> 24)|((a) << 8));
   18786:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1878a:	0e1a      	lsrs	r2, r3, #24
   1878c:	5ca5      	ldrb	r5, [r4, r2]
   1878e:	b2da      	uxtb	r2, r3
   18790:	5ca2      	ldrb	r2, [r4, r2]
   18792:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   18796:	f3c3 4507 	ubfx	r5, r3, #16, #8
   1879a:	5d65      	ldrb	r5, [r4, r5]
   1879c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   187a0:	5ce3      	ldrb	r3, [r4, r3]
   187a2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   187a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   187aa:	ad0c      	add	r5, sp, #48	; 0x30
   187ac:	f021 0303 	bic.w	r3, r1, #3
   187b0:	442b      	add	r3, r5
   187b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   187b6:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   187b8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   187bc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   187be:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   187c0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   187c2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   187c4:	d1dc      	bne.n	18780 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   187c6:	2001      	movs	r0, #1
}
   187c8:	b00d      	add	sp, #52	; 0x34
   187ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   187cc:	4638      	mov	r0, r7
   187ce:	e7fb      	b.n	187c8 <tc_aes128_set_encrypt_key+0x98>
   187d0:	4620      	mov	r0, r4
   187d2:	e7f9      	b.n	187c8 <tc_aes128_set_encrypt_key+0x98>
   187d4:	00034608 	.word	0x00034608
   187d8:	0003604e 	.word	0x0003604e

000187dc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   187dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187e0:	4615      	mov	r5, r2
   187e2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   187e4:	4607      	mov	r7, r0
   187e6:	2800      	cmp	r0, #0
   187e8:	d059      	beq.n	1889e <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   187ea:	2900      	cmp	r1, #0
   187ec:	d05a      	beq.n	188a4 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   187ee:	2a00      	cmp	r2, #0
   187f0:	d05a      	beq.n	188a8 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   187f2:	2310      	movs	r3, #16
   187f4:	460a      	mov	r2, r1
   187f6:	4668      	mov	r0, sp
   187f8:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   187fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 188ac <tc_aes_encrypt+0xd0>
	(void)_copy(state, sizeof(state), in, sizeof(state));
   187fe:	f016 fa7b 	bl	2ecf8 <_copy>
	add_round_key(state, s->words);
   18802:	4629      	mov	r1, r5
   18804:	4668      	mov	r0, sp
   18806:	f017 f98b 	bl	2fb20 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1880a:	46c8      	mov	r8, r9
   1880c:	f105 0610 	add.w	r6, r5, #16
   18810:	35a0      	adds	r5, #160	; 0xa0
   18812:	466c      	mov	r4, sp
{
   18814:	466a      	mov	r2, sp
   18816:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   18818:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1881a:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1881c:	f819 1001 	ldrb.w	r1, [r9, r1]
   18820:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   18824:	d1f8      	bne.n	18818 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
   18826:	4668      	mov	r0, sp
   18828:	f017 f9bf 	bl	2fbaa <shift_rows>
	mult_row_column(t, s);
   1882c:	4669      	mov	r1, sp
   1882e:	a804      	add	r0, sp, #16
   18830:	f017 f9f4 	bl	2fc1c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   18834:	a901      	add	r1, sp, #4
   18836:	a805      	add	r0, sp, #20
   18838:	f017 f9f0 	bl	2fc1c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1883c:	a902      	add	r1, sp, #8
   1883e:	a806      	add	r0, sp, #24
   18840:	f017 f9ec 	bl	2fc1c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   18844:	a903      	add	r1, sp, #12
   18846:	a807      	add	r0, sp, #28
   18848:	f017 f9e8 	bl	2fc1c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1884c:	2310      	movs	r3, #16
   1884e:	4668      	mov	r0, sp
   18850:	4619      	mov	r1, r3
   18852:	eb0d 0203 	add.w	r2, sp, r3
   18856:	f016 fa4f 	bl	2ecf8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1885a:	4631      	mov	r1, r6
   1885c:	4668      	mov	r0, sp
   1885e:	3610      	adds	r6, #16
   18860:	f017 f95e 	bl	2fb20 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   18864:	42ae      	cmp	r6, r5
   18866:	d1d4      	bne.n	18812 <tc_aes_encrypt+0x36>
   18868:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
   1886a:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1886c:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
   1886e:	f818 3003 	ldrb.w	r3, [r8, r3]
   18872:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   18876:	d1f8      	bne.n	1886a <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
   18878:	4668      	mov	r0, sp
   1887a:	f017 f996 	bl	2fbaa <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1887e:	4629      	mov	r1, r5
   18880:	4668      	mov	r0, sp
   18882:	f017 f94d 	bl	2fb20 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18886:	2310      	movs	r3, #16
   18888:	466a      	mov	r2, sp
   1888a:	4619      	mov	r1, r3
   1888c:	4638      	mov	r0, r7
   1888e:	f016 fa33 	bl	2ecf8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   18892:	4668      	mov	r0, sp
   18894:	2210      	movs	r2, #16
   18896:	4631      	mov	r1, r6
   18898:	f016 fa3b 	bl	2ed12 <_set>

	return TC_CRYPTO_SUCCESS;
   1889c:	2001      	movs	r0, #1
}
   1889e:	b009      	add	sp, #36	; 0x24
   188a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   188a4:	4608      	mov	r0, r1
   188a6:	e7fa      	b.n	1889e <tc_aes_encrypt+0xc2>
   188a8:	4610      	mov	r0, r2
   188aa:	e7f8      	b.n	1889e <tc_aes_encrypt+0xc2>
   188ac:	0003604e 	.word	0x0003604e

000188b0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   188b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188b4:	6803      	ldr	r3, [r0, #0]
{
   188b6:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188b8:	9302      	str	r3, [sp, #8]
   188ba:	6843      	ldr	r3, [r0, #4]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188bc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188be:	9303      	str	r3, [sp, #12]
   188c0:	6883      	ldr	r3, [r0, #8]
{
   188c2:	9100      	str	r1, [sp, #0]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188c4:	9304      	str	r3, [sp, #16]
   188c6:	68c3      	ldr	r3, [r0, #12]
   188c8:	4965      	ldr	r1, [pc, #404]	; (18a60 <compress+0x1b0>)
   188ca:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188cc:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188ce:	9c02      	ldr	r4, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188d0:	9306      	str	r3, [sp, #24]
   188d2:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188d4:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188d8:	9307      	str	r3, [sp, #28]
   188da:	6983      	ldr	r3, [r0, #24]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188dc:	e9dd 6a03 	ldrd	r6, sl, [sp, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188e0:	9308      	str	r3, [sp, #32]
   188e2:	69c3      	ldr	r3, [r0, #28]
   188e4:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
   188e8:	4698      	mov	r8, r3
   188ea:	9309      	str	r3, [sp, #36]	; 0x24
	n = (((unsigned int)(*((*c)++))) << 24);
   188ec:	9b00      	ldr	r3, [sp, #0]
   188ee:	59dd      	ldr	r5, [r3, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
   188f0:	ab0c      	add	r3, sp, #48	; 0x30
   188f2:	ba2d      	rev	r5, r5
   188f4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   188f6:	f851 3b04 	ldr.w	r3, [r1], #4
   188fa:	3704      	adds	r7, #4
   188fc:	eb05 0903 	add.w	r9, r5, r3
   18900:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   18904:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   18908:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   1890c:	444d      	add	r5, r9
   1890e:	ea2b 0302 	bic.w	r3, fp, r2
   18912:	ea02 090c 	and.w	r9, r2, ip
   18916:	ea83 0309 	eor.w	r3, r3, r9
   1891a:	442b      	add	r3, r5
   1891c:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   1891e:	ea86 050a 	eor.w	r5, r6, sl
	return (((a) >> n) | ((a) << (32 - n)));
   18922:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   18926:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   1892a:	4025      	ands	r5, r4
   1892c:	ea06 090a 	and.w	r9, r6, sl
   18930:	ea85 0509 	eor.w	r5, r5, r9
   18934:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   18938:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   1893a:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   1893c:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   18940:	4443      	add	r3, r8
   18942:	46d6      	mov	lr, sl
   18944:	46d8      	mov	r8, fp
	for (i = 0; i < 16; ++i) {
   18946:	d17d      	bne.n	18a44 <compress+0x194>
   18948:	4946      	ldr	r1, [pc, #280]	; (18a64 <compress+0x1b4>)
   1894a:	910a      	str	r1, [sp, #40]	; 0x28
   1894c:	2110      	movs	r1, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1894e:	1c4f      	adds	r7, r1, #1
   18950:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   18954:	970b      	str	r7, [sp, #44]	; 0x2c
   18956:	f007 070f 	and.w	r7, r7, #15
   1895a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1895e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   18962:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   18966:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   1896a:	9700      	str	r7, [sp, #0]
		s0 = sigma0(s0);
   1896c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   18970:	f101 070e 	add.w	r7, r1, #14
   18974:	f007 070f 	and.w	r7, r7, #15
   18978:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1897c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   18980:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   18982:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = work_space[(i+14)&0x0f];
   18986:	9701      	str	r7, [sp, #4]
		s1 = sigma1(s1);
   18988:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1898c:	f001 010f 	and.w	r1, r1, #15
   18990:	af1c      	add	r7, sp, #112	; 0x70
   18992:	eb07 0989 	add.w	r9, r7, r9, lsl #2
   18996:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1899a:	f851 1c40 	ldr.w	r1, [r1, #-64]
   1899e:	f859 7c40 	ldr.w	r7, [r9, #-64]
   189a2:	4439      	add	r1, r7
		s0 = sigma0(s0);
   189a4:	9f00      	ldr	r7, [sp, #0]
   189a6:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
   189aa:	9f01      	ldr	r7, [sp, #4]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189ac:	4441      	add	r1, r8
		s1 = sigma1(s1);
   189ae:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189b4:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189b6:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189ba:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   189be:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189c2:	970a      	str	r7, [sp, #40]	; 0x28
   189c4:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   189c8:	ea2c 0705 	bic.w	r7, ip, r5
   189cc:	ea05 0802 	and.w	r8, r5, r2
   189d0:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   189d4:	ea87 0708 	eor.w	r7, r7, r8
   189d8:	444f      	add	r7, r9
   189da:	4477      	add	r7, lr
   189dc:	4439      	add	r1, r7
   189de:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
   189e0:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   189e4:	ea84 0b06 	eor.w	fp, r4, r6
   189e8:	ea0b 0b03 	and.w	fp, fp, r3
   189ec:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   189f0:	ea04 0e06 	and.w	lr, r4, r6
   189f4:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   189f8:	ea8b 0e0e 	eor.w	lr, fp, lr
   189fc:	44be      	add	lr, r7
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   189fe:	448e      	add	lr, r1
		h = g; g = f; f = e; e = d + t1;
   18a00:	eb01 070a 	add.w	r7, r1, sl
		d = c; c = b; b = a; a = t1 + t2;
   18a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18a06:	46b2      	mov	sl, r6
	for ( ; i < 64; ++i) {
   18a08:	2940      	cmp	r1, #64	; 0x40
   18a0a:	46e3      	mov	fp, ip
   18a0c:	d121      	bne.n	18a52 <compress+0x1a2>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   18a0e:	9902      	ldr	r1, [sp, #8]
   18a10:	4471      	add	r1, lr
   18a12:	6001      	str	r1, [r0, #0]
   18a14:	9903      	ldr	r1, [sp, #12]
   18a16:	4419      	add	r1, r3
   18a18:	9b04      	ldr	r3, [sp, #16]
   18a1a:	6041      	str	r1, [r0, #4]
   18a1c:	4423      	add	r3, r4
   18a1e:	6083      	str	r3, [r0, #8]
   18a20:	9b05      	ldr	r3, [sp, #20]
   18a22:	4433      	add	r3, r6
   18a24:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   18a26:	9b06      	ldr	r3, [sp, #24]
   18a28:	443b      	add	r3, r7
   18a2a:	6103      	str	r3, [r0, #16]
   18a2c:	9b07      	ldr	r3, [sp, #28]
   18a2e:	442b      	add	r3, r5
   18a30:	6143      	str	r3, [r0, #20]
   18a32:	9b08      	ldr	r3, [sp, #32]
   18a34:	4413      	add	r3, r2
   18a36:	6183      	str	r3, [r0, #24]
   18a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a3a:	4463      	add	r3, ip
   18a3c:	61c3      	str	r3, [r0, #28]
}
   18a3e:	b01d      	add	sp, #116	; 0x74
   18a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a44:	46e3      	mov	fp, ip
   18a46:	46b2      	mov	sl, r6
   18a48:	4694      	mov	ip, r2
   18a4a:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
   18a4c:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
   18a4e:	461c      	mov	r4, r3
   18a50:	e74c      	b.n	188ec <compress+0x3c>
   18a52:	4694      	mov	ip, r2
   18a54:	4626      	mov	r6, r4
   18a56:	462a      	mov	r2, r5
   18a58:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   18a5a:	463d      	mov	r5, r7
		d = c; c = b; b = a; a = t1 + t2;
   18a5c:	4673      	mov	r3, lr
   18a5e:	e776      	b.n	1894e <compress+0x9e>
   18a60:	00034890 	.word	0x00034890
   18a64:	000348d0 	.word	0x000348d0

00018a68 <tc_sha256_init>:
{
   18a68:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   18a6a:	4604      	mov	r4, r0
   18a6c:	b1c8      	cbz	r0, 18aa2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   18a6e:	2270      	movs	r2, #112	; 0x70
   18a70:	2100      	movs	r1, #0
   18a72:	f016 f94e 	bl	2ed12 <_set>
	s->iv[1] = 0xbb67ae85;
   18a76:	4b0b      	ldr	r3, [pc, #44]	; (18aa4 <tc_sha256_init+0x3c>)
   18a78:	4a0b      	ldr	r2, [pc, #44]	; (18aa8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   18a7a:	490c      	ldr	r1, [pc, #48]	; (18aac <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   18a7c:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   18a80:	4b0b      	ldr	r3, [pc, #44]	; (18ab0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   18a82:	480c      	ldr	r0, [pc, #48]	; (18ab4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   18a84:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   18a88:	4b0b      	ldr	r3, [pc, #44]	; (18ab8 <tc_sha256_init+0x50>)
   18a8a:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   18a8e:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   18a90:	4b0a      	ldr	r3, [pc, #40]	; (18abc <tc_sha256_init+0x54>)
   18a92:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   18a94:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   18a98:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   18a9c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   18aa0:	61e3      	str	r3, [r4, #28]
}
   18aa2:	bd10      	pop	{r4, pc}
   18aa4:	bb67ae85 	.word	0xbb67ae85
   18aa8:	6a09e667 	.word	0x6a09e667
   18aac:	3c6ef372 	.word	0x3c6ef372
   18ab0:	a54ff53a 	.word	0xa54ff53a
   18ab4:	510e527f 	.word	0x510e527f
   18ab8:	9b05688c 	.word	0x9b05688c
   18abc:	1f83d9ab 	.word	0x1f83d9ab

00018ac0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   18ac0:	4a09      	ldr	r2, [pc, #36]	; (18ae8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   18ac2:	490a      	ldr	r1, [pc, #40]	; (18aec <arch_swap+0x2c>)
	_current->arch.basepri = key;
   18ac4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   18ac6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   18ac8:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   18aca:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   18acc:	4908      	ldr	r1, [pc, #32]	; (18af0 <arch_swap+0x30>)
   18ace:	684b      	ldr	r3, [r1, #4]
   18ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   18ad4:	604b      	str	r3, [r1, #4]
   18ad6:	2300      	movs	r3, #0
   18ad8:	f383 8811 	msr	BASEPRI, r3
   18adc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   18ae0:	6893      	ldr	r3, [r2, #8]
}
   18ae2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   18ae4:	4770      	bx	lr
   18ae6:	bf00      	nop
   18ae8:	20027320 	.word	0x20027320
   18aec:	00035058 	.word	0x00035058
   18af0:	e000ed00 	.word	0xe000ed00

00018af4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   18af4:	4929      	ldr	r1, [pc, #164]	; (18b9c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   18af6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   18af8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   18afc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   18afe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   18b02:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   18b06:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   18b0a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   18b0e:	d004      	beq.n	18b1a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   18b10:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   18b14:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   18b18:	e007      	b.n	18b2a <out_fp_endif>

00018b1a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   18b1a:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
   18b1e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   18b22:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   18b26:	f050 0004 	orrs.w	r0, r0, #4

00018b2a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   18b2a:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18b2e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18b30:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   18b34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   18b38:	4f19      	ldr	r7, [pc, #100]	; (18ba0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   18b3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   18b3e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   18b40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   18b42:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   18b44:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   18b46:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   18b48:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   18b4a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   18b4e:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   18b52:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   18b56:	d105      	bne.n	18b64 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   18b58:	2300      	movs	r3, #0
    vmsr fpscr, r3
   18b5a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   18b5e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   18b62:	e005      	b.n	18b70 <in_fp_endif>

00018b64 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   18b64:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   18b68:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   18b6c:	ec90 8a10 	vldmia	r0, {s16-s31}

00018b70 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   18b70:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   18b74:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   18b78:	f383 8814 	msr	CONTROL, r3
    isb
   18b7c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   18b80:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   18b84:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   18b88:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   18b8c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   18b90:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   18b92:	f017 f9fd 	bl	2ff90 <configure_builtin_stack_guard>
    pop {r2, lr}
   18b96:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   18b9a:	4770      	bx	lr
    ldr r1, =_kernel
   18b9c:	20027320 	.word	0x20027320
    ldr v4, =_SCS_ICSR
   18ba0:	e000ed04 	.word	0xe000ed04

00018ba4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   18ba4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   18ba8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   18baa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   18bae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   18bb2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   18bb4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   18bb8:	2902      	cmp	r1, #2
    beq _oops
   18bba:	d0ff      	beq.n	18bbc <_oops>

00018bbc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   18bbc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   18bbe:	f017 f9ed 	bl	2ff9c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   18bc2:	bd01      	pop	{r0, pc}

00018bc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   18bc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	db08      	blt.n	18bdc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18bca:	2201      	movs	r2, #1
   18bcc:	f000 001f 	and.w	r0, r0, #31
   18bd0:	fa02 f000 	lsl.w	r0, r2, r0
   18bd4:	4a02      	ldr	r2, [pc, #8]	; (18be0 <arch_irq_enable+0x1c>)
   18bd6:	095b      	lsrs	r3, r3, #5
   18bd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   18bdc:	4770      	bx	lr
   18bde:	bf00      	nop
   18be0:	e000e100 	.word	0xe000e100

00018be4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   18be4:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   18be6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   18be8:	2c07      	cmp	r4, #7
{
   18bea:	4605      	mov	r5, r0
   18bec:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   18bee:	d90e      	bls.n	18c0e <z_arm_irq_priority_set+0x2a>
   18bf0:	235e      	movs	r3, #94	; 0x5e
   18bf2:	4a10      	ldr	r2, [pc, #64]	; (18c34 <z_arm_irq_priority_set+0x50>)
   18bf4:	4910      	ldr	r1, [pc, #64]	; (18c38 <z_arm_irq_priority_set+0x54>)
   18bf6:	4811      	ldr	r0, [pc, #68]	; (18c3c <z_arm_irq_priority_set+0x58>)
   18bf8:	f015 fae0 	bl	2e1bc <printk>
   18bfc:	4631      	mov	r1, r6
   18bfe:	4810      	ldr	r0, [pc, #64]	; (18c40 <z_arm_irq_priority_set+0x5c>)
   18c00:	2207      	movs	r2, #7
   18c02:	f015 fadb 	bl	2e1bc <printk>
   18c06:	215e      	movs	r1, #94	; 0x5e
   18c08:	480a      	ldr	r0, [pc, #40]	; (18c34 <z_arm_irq_priority_set+0x50>)
   18c0a:	f015 fdd8 	bl	2e7be <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   18c0e:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   18c10:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c12:	bfa8      	it	ge
   18c14:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   18c18:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c1c:	bfb8      	it	lt
   18c1e:	4b09      	ldrlt	r3, [pc, #36]	; (18c44 <z_arm_irq_priority_set+0x60>)
   18c20:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c22:	bfab      	itete	ge
   18c24:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c28:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c2c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c30:	555c      	strblt	r4, [r3, r5]
}
   18c32:	bd70      	pop	{r4, r5, r6, pc}
   18c34:	0003614e 	.word	0x0003614e
   18c38:	00036184 	.word	0x00036184
   18c3c:	00035920 	.word	0x00035920
   18c40:	0003619f 	.word	0x0003619f
   18c44:	e000ed14 	.word	0xe000ed14

00018c48 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   18c48:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   18c4a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   18c4c:	4b04      	ldr	r3, [pc, #16]	; (18c60 <_arch_isr_direct_pm+0x18>)
   18c4e:	6a18      	ldr	r0, [r3, #32]
   18c50:	b118      	cbz	r0, 18c5a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   18c52:	2200      	movs	r2, #0
   18c54:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   18c56:	f01a fb49 	bl	332ec <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   18c5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   18c5c:	bd08      	pop	{r3, pc}
   18c5e:	bf00      	nop
   18c60:	20027320 	.word	0x20027320

00018c64 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   18c64:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   18c68:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   18c6a:	3a20      	subs	r2, #32
   18c6c:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   18c70:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   18c72:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c74:	4908      	ldr	r1, [pc, #32]	; (18c98 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   18c76:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   18c78:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c7a:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   18c7e:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   18c80:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c82:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   18c84:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   18c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   18c8a:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   18c8c:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   18c8e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   18c90:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   18c92:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   18c96:	4770      	bx	lr
   18c98:	0002e219 	.word	0x0002e219

00018c9c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   18c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c9e:	461e      	mov	r6, r3
   18ca0:	4607      	mov	r7, r0
   18ca2:	460d      	mov	r5, r1
   18ca4:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   18ca6:	2300      	movs	r3, #0
   18ca8:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   18cac:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   18cb0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   18cb4:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   18cb8:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18cbc:	f000 fa12 	bl	190e4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   18cc0:	4b09      	ldr	r3, [pc, #36]	; (18ce8 <arch_switch_to_main_thread+0x4c>)
	start_of_main_stack =
   18cc2:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   18cc4:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
   18cc8:	609f      	str	r7, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   18cca:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   18cce:	4630      	mov	r0, r6
   18cd0:	f384 8809 	msr	PSP, r4
   18cd4:	2100      	movs	r1, #0
   18cd6:	b663      	cpsie	if
   18cd8:	f381 8811 	msr	BASEPRI, r1
   18cdc:	f3bf 8f6f 	isb	sy
   18ce0:	2200      	movs	r2, #0
   18ce2:	2300      	movs	r3, #0
   18ce4:	f015 fa98 	bl	2e218 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   18ce8:	20027320 	.word	0x20027320

00018cec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   18cec:	4901      	ldr	r1, [pc, #4]	; (18cf4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   18cee:	2210      	movs	r2, #16
	str	r2, [r1]
   18cf0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   18cf2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   18cf4:	e000ed10 	.word	0xe000ed10

00018cf8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   18cf8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   18cfa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   18cfc:	f380 8811 	msr	BASEPRI, r0
	isb
   18d00:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   18d04:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   18d08:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   18d0a:	b662      	cpsie	i
	isb
   18d0c:	f3bf 8f6f 	isb	sy

	bx	lr
   18d10:	4770      	bx	lr
   18d12:	bf00      	nop

00018d14 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   18d14:	bf30      	wfi
    b z_SysNmiOnReset
   18d16:	f7ff bffd 	b.w	18d14 <z_SysNmiOnReset>
   18d1a:	bf00      	nop

00018d1c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18d1c:	4a14      	ldr	r2, [pc, #80]	; (18d70 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   18d1e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18d20:	4b14      	ldr	r3, [pc, #80]	; (18d74 <z_arm_prep_c+0x58>)
   18d22:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   18d26:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   18d28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18d2c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   18d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18d34:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   18d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   18d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18d40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   18d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   18d48:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   18d4c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   18d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18d54:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   18d58:	2300      	movs	r3, #0
   18d5a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   18d5e:	f00e fa33 	bl	271c8 <z_bss_zero>
	z_data_copy();
   18d62:	f00e fa3b 	bl	271dc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   18d66:	f000 f973 	bl	19050 <z_arm_interrupt_init>
	z_cstart();
   18d6a:	f00e fa69 	bl	27240 <z_cstart>
   18d6e:	bf00      	nop
   18d70:	0000c000 	.word	0x0000c000
   18d74:	e000ed00 	.word	0xe000ed00

00018d78 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   18d78:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   18d7a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   18d7c:	4a0b      	ldr	r2, [pc, #44]	; (18dac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   18d7e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   18d80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   18d82:	bf1e      	ittt	ne
	movne	r1, #0
   18d84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   18d86:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   18d88:	f01a fab0 	blne	332ec <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   18d8c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   18d8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   18d92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   18d96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   18d9a:	4905      	ldr	r1, [pc, #20]	; (18db0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   18d9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   18d9e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   18da0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   18da2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   18da6:	4903      	ldr	r1, [pc, #12]	; (18db4 <_isr_wrapper+0x3c>)
	bx r1
   18da8:	4708      	bx	r1
   18daa:	0000      	.short	0x0000
	ldr r2, =_kernel
   18dac:	20027320 	.word	0x20027320
	ldr r1, =_sw_isr_table
   18db0:	00034360 	.word	0x00034360
	ldr r1, =z_arm_int_exit
   18db4:	00019011 	.word	0x00019011

00018db8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   18db8:	f015 fd09 	bl	2e7ce <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18dbc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18dbe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   18dc2:	4808      	ldr	r0, [pc, #32]	; (18de4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   18dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   18dc8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   18dca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   18dce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   18dd2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   18dd4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   18dd6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   18dda:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   18dde:	f7ff ff9d 	bl	18d1c <z_arm_prep_c>
   18de2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   18de4:	200347d8 	.word	0x200347d8

00018de8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   18de8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   18dec:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   18df0:	4672      	mov	r2, lr

	push {r0, lr}
   18df2:	b501      	push	{r0, lr}

	bl z_arm_fault
   18df4:	f000 f86e 	bl	18ed4 <z_arm_fault>

	pop {r0, pc}
   18df8:	bd01      	pop	{r0, pc}
   18dfa:	bf00      	nop

00018dfc <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   18dfc:	4b0d      	ldr	r3, [pc, #52]	; (18e34 <bus_fault.isra.2+0x38>)
   18dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   18e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   18e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e04:	0592      	lsls	r2, r2, #22
   18e06:	d508      	bpl.n	18e1a <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   18e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   18e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e0c:	0412      	lsls	r2, r2, #16
   18e0e:	d504      	bpl.n	18e1a <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   18e10:	b118      	cbz	r0, 18e1a <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   18e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   18e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   18e1a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   18e1c:	4b05      	ldr	r3, [pc, #20]	; (18e34 <bus_fault.isra.2+0x38>)
   18e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   18e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e22:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   18e24:	bf58      	it	pl
   18e26:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   18e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e2a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   18e2e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18e30:	7008      	strb	r0, [r1, #0]

	return reason;
}
   18e32:	4770      	bx	lr
   18e34:	e000ed00 	.word	0xe000ed00

00018e38 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   18e38:	4b09      	ldr	r3, [pc, #36]	; (18e60 <usage_fault.isra.3+0x28>)
   18e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   18e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   18e3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   18e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   18e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   18e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   18e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   18e4a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e4e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   18e52:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   18e56:	bf18      	it	ne
   18e58:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
   18e5c:	4770      	bx	lr
   18e5e:	bf00      	nop
   18e60:	e000ed00 	.word	0xe000ed00

00018e64 <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18e64:	4b16      	ldr	r3, [pc, #88]	; (18ec0 <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   18e66:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   18e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   18e6e:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18e70:	0791      	lsls	r1, r2, #30
   18e72:	d508      	bpl.n	18e86 <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
   18e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   18e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e78:	0612      	lsls	r2, r2, #24
   18e7a:	d504      	bpl.n	18e86 <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
   18e7c:	b118      	cbz	r0, 18e86 <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   18e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   18e84:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   18e86:	4b0e      	ldr	r3, [pc, #56]	; (18ec0 <mem_manage_fault.isra.6+0x5c>)
   18e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   18e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   18e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18e8e:	06db      	lsls	r3, r3, #27
   18e90:	d50e      	bpl.n	18eb0 <mem_manage_fault.isra.6+0x4c>
	__ASSERT(0,
   18e92:	490c      	ldr	r1, [pc, #48]	; (18ec4 <mem_manage_fault.isra.6+0x60>)
   18e94:	f240 1337 	movw	r3, #311	; 0x137
   18e98:	4a0b      	ldr	r2, [pc, #44]	; (18ec8 <mem_manage_fault.isra.6+0x64>)
   18e9a:	480c      	ldr	r0, [pc, #48]	; (18ecc <mem_manage_fault.isra.6+0x68>)
   18e9c:	f015 f98e 	bl	2e1bc <printk>
   18ea0:	480b      	ldr	r0, [pc, #44]	; (18ed0 <mem_manage_fault.isra.6+0x6c>)
   18ea2:	f015 f98b 	bl	2e1bc <printk>
   18ea6:	f240 1137 	movw	r1, #311	; 0x137
   18eaa:	4807      	ldr	r0, [pc, #28]	; (18ec8 <mem_manage_fault.isra.6+0x64>)
   18eac:	f015 fc87 	bl	2e7be <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   18eb0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   18eb2:	4a03      	ldr	r2, [pc, #12]	; (18ec0 <mem_manage_fault.isra.6+0x5c>)
   18eb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   18eb6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   18eba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18ebc:	7020      	strb	r0, [r4, #0]
}
   18ebe:	bd10      	pop	{r4, pc}
   18ec0:	e000ed00 	.word	0xe000ed00
   18ec4:	00037308 	.word	0x00037308
   18ec8:	000361d4 	.word	0x000361d4
   18ecc:	00035920 	.word	0x00035920
   18ed0:	0003620e 	.word	0x0003620e

00018ed4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   18ed4:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18ed6:	4b41      	ldr	r3, [pc, #260]	; (18fdc <z_arm_fault+0x108>)
{
   18ed8:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18eda:	685c      	ldr	r4, [r3, #4]
   18edc:	2500      	movs	r5, #0
   18ede:	f3c4 0408 	ubfx	r4, r4, #0, #9
   18ee2:	f385 8811 	msr	BASEPRI, r5
   18ee6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   18eea:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   18eee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   18ef2:	d10e      	bne.n	18f12 <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   18ef4:	07d3      	lsls	r3, r2, #31
   18ef6:	d40c      	bmi.n	18f12 <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   18ef8:	0656      	lsls	r6, r2, #25
   18efa:	d404      	bmi.n	18f06 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   18efc:	0715      	lsls	r5, r2, #28
   18efe:	d405      	bmi.n	18f0c <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   18f00:	4606      	mov	r6, r0
			*nested_exc = true;
   18f02:	2501      	movs	r5, #1
   18f04:	e004      	b.n	18f10 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   18f06:	f012 0504 	ands.w	r5, r2, #4
   18f0a:	d01c      	beq.n	18f46 <z_arm_fault+0x72>
			ptr_esf = (z_arch_esf_t *)psp;
   18f0c:	460e      	mov	r6, r1
	*nested_exc = false;
   18f0e:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   18f10:	b97e      	cbnz	r6, 18f32 <z_arm_fault+0x5e>
   18f12:	f240 33b2 	movw	r3, #946	; 0x3b2
   18f16:	4a32      	ldr	r2, [pc, #200]	; (18fe0 <z_arm_fault+0x10c>)
   18f18:	4932      	ldr	r1, [pc, #200]	; (18fe4 <z_arm_fault+0x110>)
   18f1a:	4833      	ldr	r0, [pc, #204]	; (18fe8 <z_arm_fault+0x114>)
   18f1c:	f015 f94e 	bl	2e1bc <printk>
   18f20:	4832      	ldr	r0, [pc, #200]	; (18fec <z_arm_fault+0x118>)
   18f22:	f015 f94b 	bl	2e1bc <printk>
   18f26:	f240 31b2 	movw	r1, #946	; 0x3b2
   18f2a:	482d      	ldr	r0, [pc, #180]	; (18fe0 <z_arm_fault+0x10c>)
   18f2c:	f015 fc47 	bl	2e7be <assert_post_action>
   18f30:	2600      	movs	r6, #0
	*recoverable = false;
   18f32:	2300      	movs	r3, #0
   18f34:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   18f38:	1ee3      	subs	r3, r4, #3
   18f3a:	2b03      	cmp	r3, #3
   18f3c:	d847      	bhi.n	18fce <z_arm_fault+0xfa>
   18f3e:	e8df f003 	tbb	[pc, r3]
   18f42:	3e04      	.short	0x3e04
   18f44:	3b42      	.short	0x3b42
			ptr_esf = (z_arch_esf_t *)msp;
   18f46:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
   18f48:	e7e2      	b.n	18f10 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   18f4a:	4b24      	ldr	r3, [pc, #144]	; (18fdc <z_arm_fault+0x108>)
   18f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f4e:	0792      	lsls	r2, r2, #30
   18f50:	d43d      	bmi.n	18fce <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   18f52:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   18f54:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   18f58:	d008      	beq.n	18f6c <z_arm_fault+0x98>
		if (SCB_MMFSR != 0) {
   18f5a:	3328      	adds	r3, #40	; 0x28
   18f5c:	781b      	ldrb	r3, [r3, #0]
   18f5e:	b1eb      	cbz	r3, 18f9c <z_arm_fault+0xc8>
			reason = mem_manage_fault(esf, 1, recoverable);
   18f60:	2001      	movs	r0, #1
   18f62:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   18f66:	f7ff ff7d 	bl	18e64 <mem_manage_fault.isra.6>
		reason = usage_fault(esf);
   18f6a:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   18f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18f70:	b993      	cbnz	r3, 18f98 <z_arm_fault+0xc4>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   18f72:	2268      	movs	r2, #104	; 0x68
   18f74:	4631      	mov	r1, r6
   18f76:	a802      	add	r0, sp, #8
   18f78:	f01a fc22 	bl	337c0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   18f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f7e:	b345      	cbz	r5, 18fd2 <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   18f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
   18f84:	b922      	cbnz	r2, 18f90 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   18f86:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18f8a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18f8e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   18f90:	a902      	add	r1, sp, #8
   18f92:	4620      	mov	r0, r4
   18f94:	f017 f800 	bl	2ff98 <z_arm_fatal_error>
}
   18f98:	b01c      	add	sp, #112	; 0x70
   18f9a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   18f9c:	4b14      	ldr	r3, [pc, #80]	; (18ff0 <z_arm_fault+0x11c>)
   18f9e:	781b      	ldrb	r3, [r3, #0]
   18fa0:	b12b      	cbz	r3, 18fae <z_arm_fault+0xda>
			reason = bus_fault(esf, 1, recoverable);
   18fa2:	2001      	movs	r0, #1
   18fa4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   18fa8:	f7ff ff28 	bl	18dfc <bus_fault.isra.2>
   18fac:	e7dd      	b.n	18f6a <z_arm_fault+0x96>
		} else if (SCB_UFSR != 0) {
   18fae:	4b11      	ldr	r3, [pc, #68]	; (18ff4 <z_arm_fault+0x120>)
   18fb0:	881c      	ldrh	r4, [r3, #0]
   18fb2:	b2a4      	uxth	r4, r4
   18fb4:	2c00      	cmp	r4, #0
   18fb6:	d0d9      	beq.n	18f6c <z_arm_fault+0x98>
		reason = usage_fault(esf);
   18fb8:	f7ff ff3e 	bl	18e38 <usage_fault.isra.3>
   18fbc:	e7d5      	b.n	18f6a <z_arm_fault+0x96>
		reason = mem_manage_fault(esf, 0, recoverable);
   18fbe:	f10d 0107 	add.w	r1, sp, #7
   18fc2:	2000      	movs	r0, #0
   18fc4:	e7cf      	b.n	18f66 <z_arm_fault+0x92>
		reason = bus_fault(esf, 0, recoverable);
   18fc6:	f10d 0107 	add.w	r1, sp, #7
   18fca:	2000      	movs	r0, #0
   18fcc:	e7ec      	b.n	18fa8 <z_arm_fault+0xd4>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   18fce:	2400      	movs	r4, #0
   18fd0:	e7cc      	b.n	18f6c <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18fd2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   18fd6:	f023 0301 	bic.w	r3, r3, #1
   18fda:	e7d8      	b.n	18f8e <z_arm_fault+0xba>
   18fdc:	e000ed00 	.word	0xe000ed00
   18fe0:	000361d4 	.word	0x000361d4
   18fe4:	00036248 	.word	0x00036248
   18fe8:	00035920 	.word	0x00035920
   18fec:	0003625b 	.word	0x0003625b
   18ff0:	e000ed29 	.word	0xe000ed29
   18ff4:	e000ed2a 	.word	0xe000ed2a

00018ff8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   18ff8:	4b04      	ldr	r3, [pc, #16]	; (1900c <z_arm_fault_init+0x14>)
   18ffa:	695a      	ldr	r2, [r3, #20]
   18ffc:	f042 0210 	orr.w	r2, r2, #16
   19000:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   19002:	695a      	ldr	r2, [r3, #20]
   19004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   19008:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1900a:	4770      	bx	lr
   1900c:	e000ed00 	.word	0xe000ed00

00019010 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   19010:	4b04      	ldr	r3, [pc, #16]	; (19024 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   19012:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   19014:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   19016:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   19018:	d003      	beq.n	19022 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1901a:	4903      	ldr	r1, [pc, #12]	; (19028 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   19020:	600a      	str	r2, [r1, #0]

00019022 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   19022:	4770      	bx	lr
	ldr r3, =_kernel
   19024:	20027320 	.word	0x20027320
	ldr r1, =_SCS_ICSR
   19028:	e000ed04 	.word	0xe000ed04

0001902c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1902c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19030:	4905      	ldr	r1, [pc, #20]	; (19048 <sys_arch_reboot+0x1c>)
   19032:	4b06      	ldr	r3, [pc, #24]	; (1904c <sys_arch_reboot+0x20>)
   19034:	68ca      	ldr	r2, [r1, #12]
   19036:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1903a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1903c:	60cb      	str	r3, [r1, #12]
   1903e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   19042:	bf00      	nop
   19044:	e7fd      	b.n	19042 <sys_arch_reboot+0x16>
   19046:	bf00      	nop
   19048:	e000ed00 	.word	0xe000ed00
   1904c:	05fa0004 	.word	0x05fa0004

00019050 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   19050:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19052:	2120      	movs	r1, #32
   19054:	4803      	ldr	r0, [pc, #12]	; (19064 <z_arm_interrupt_init+0x14>)
   19056:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   19058:	3301      	adds	r3, #1
   1905a:	2b41      	cmp	r3, #65	; 0x41
   1905c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   19060:	d1f9      	bne.n	19056 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   19062:	4770      	bx	lr
   19064:	e000e100 	.word	0xe000e100

00019068 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   19068:	b538      	push	{r3, r4, r5, lr}
   1906a:	4604      	mov	r4, r0
	__asm__ volatile(
   1906c:	f04f 0320 	mov.w	r3, #32
   19070:	f3ef 8511 	mrs	r5, BASEPRI
   19074:	f383 8811 	msr	BASEPRI, r3
   19078:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1907c:	7b03      	ldrb	r3, [r0, #12]
   1907e:	07db      	lsls	r3, r3, #31
   19080:	d50c      	bpl.n	1909c <z_impl_k_thread_abort+0x34>
   19082:	4912      	ldr	r1, [pc, #72]	; (190cc <z_impl_k_thread_abort+0x64>)
   19084:	2324      	movs	r3, #36	; 0x24
   19086:	4a12      	ldr	r2, [pc, #72]	; (190d0 <z_impl_k_thread_abort+0x68>)
   19088:	4812      	ldr	r0, [pc, #72]	; (190d4 <z_impl_k_thread_abort+0x6c>)
   1908a:	f015 f897 	bl	2e1bc <printk>
   1908e:	4812      	ldr	r0, [pc, #72]	; (190d8 <z_impl_k_thread_abort+0x70>)
   19090:	f015 f894 	bl	2e1bc <printk>
   19094:	2124      	movs	r1, #36	; 0x24
   19096:	480e      	ldr	r0, [pc, #56]	; (190d0 <z_impl_k_thread_abort+0x68>)
   19098:	f015 fb91 	bl	2e7be <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1909c:	4620      	mov	r0, r4
   1909e:	f00f ff03 	bl	28ea8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   190a2:	4b0e      	ldr	r3, [pc, #56]	; (190dc <z_impl_k_thread_abort+0x74>)
   190a4:	689b      	ldr	r3, [r3, #8]
   190a6:	42a3      	cmp	r3, r4
   190a8:	d10b      	bne.n	190c2 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   190aa:	4b0d      	ldr	r3, [pc, #52]	; (190e0 <z_impl_k_thread_abort+0x78>)
   190ac:	685a      	ldr	r2, [r3, #4]
   190ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
   190b2:	b912      	cbnz	r2, 190ba <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   190b4:	4628      	mov	r0, r5
   190b6:	f7ff fd03 	bl	18ac0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   190ba:	685a      	ldr	r2, [r3, #4]
   190bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   190c0:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   190c2:	4628      	mov	r0, r5
}
   190c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   190c8:	f01a b9f5 	b.w	334b6 <z_reschedule_irqlock>
   190cc:	000362da 	.word	0x000362da
   190d0:	00036299 	.word	0x00036299
   190d4:	00035920 	.word	0x00035920
   190d8:	00036308 	.word	0x00036308
   190dc:	20027320 	.word	0x20027320
   190e0:	e000ed00 	.word	0xe000ed00

000190e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   190e4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   190e6:	4b0e      	ldr	r3, [pc, #56]	; (19120 <z_arm_configure_static_mpu_regions+0x3c>)
{
   190e8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   190ea:	9302      	str	r3, [sp, #8]
   190ec:	4b0d      	ldr	r3, [pc, #52]	; (19124 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   190ee:	4c0e      	ldr	r4, [pc, #56]	; (19128 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   190f0:	9303      	str	r3, [sp, #12]
   190f2:	4b0e      	ldr	r3, [pc, #56]	; (1912c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   190f4:	4a0e      	ldr	r2, [pc, #56]	; (19130 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   190f6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   190f8:	ab02      	add	r3, sp, #8
   190fa:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   190fc:	a801      	add	r0, sp, #4
   190fe:	4623      	mov	r3, r4
   19100:	2101      	movs	r1, #1
   19102:	f000 f935 	bl	19370 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   19106:	2300      	movs	r3, #0
   19108:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1910a:	4b0a      	ldr	r3, [pc, #40]	; (19134 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1910c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1910e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19110:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   19112:	9305      	str	r3, [sp, #20]
   19114:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19116:	f000 f951 	bl	193bc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1911a:	b008      	add	sp, #32
   1911c:	bd10      	pop	{r4, pc}
   1911e:	bf00      	nop
   19120:	20020000 	.word	0x20020000
   19124:	00000000 	.word	0x00000000
   19128:	20040000 	.word	0x20040000
   1912c:	00010006 	.word	0x00010006
   19130:	20020000 	.word	0x20020000
   19134:	200207c0 	.word	0x200207c0

00019138 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   19138:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1913a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1913c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1913e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   19142:	f004 031f 	and.w	r3, r4, #31
   19146:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19148:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1914a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1914c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   19150:	4904      	ldr	r1, [pc, #16]	; (19164 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   19152:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   19156:	f043 0301 	orr.w	r3, r3, #1
   1915a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1915c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1915e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   19160:	bd10      	pop	{r4, pc}
   19162:	bf00      	nop
   19164:	e000ed90 	.word	0xe000ed90

00019168 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   19168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1916c:	4680      	mov	r8, r0
   1916e:	4689      	mov	r9, r1
   19170:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   19172:	2700      	movs	r7, #0
	MPU->RNR = index;
   19174:	4d48      	ldr	r5, [pc, #288]	; (19298 <mpu_configure_regions_and_partition.constprop.2+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   19176:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   19178:	454f      	cmp	r7, r9
   1917a:	da07      	bge.n	1918c <mpu_configure_regions_and_partition.constprop.2+0x24>
		if (regions[i]->size == 0U) {
   1917c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   19180:	685e      	ldr	r6, [r3, #4]
   19182:	b3c6      	cbz	r6, 191f6 <mpu_configure_regions_and_partition.constprop.2+0x8e>
		&&
   19184:	2e1f      	cmp	r6, #31
   19186:	d805      	bhi.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   19188:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1918c:	4620      	mov	r0, r4
   1918e:	b005      	add	sp, #20
   19190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   19194:	06f2      	lsls	r2, r6, #27
   19196:	d1f7      	bne.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
		((part->start &
   19198:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1919c:	f01a 0f1f 	tst.w	sl, #31
   191a0:	d1f2      	bne.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   191a2:	4650      	mov	r0, sl
   191a4:	f016 ff27 	bl	2fff6 <arm_cmse_mpu_region_get>
   191a8:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   191aa:	eb06 000a 	add.w	r0, r6, sl
   191ae:	3801      	subs	r0, #1
   191b0:	f016 ff21 	bl	2fff6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   191b4:	4583      	cmp	fp, r0
   191b6:	d1e7      	bne.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
   191b8:	f11b 0f16 	cmn.w	fp, #22
   191bc:	d0e4      	beq.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
   191be:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   191c0:	455b      	cmp	r3, fp
   191c2:	dbe1      	blt.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
   191c4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   191c8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191ca:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   191ce:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   191d2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   191d4:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191d8:	e9d1 3200 	ldrd	r3, r2, [r1]
   191dc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   191de:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   191e0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191e4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   191e8:	d118      	bne.n	1921c <mpu_configure_regions_and_partition.constprop.2+0xb4>
   191ea:	4556      	cmp	r6, sl
   191ec:	d105      	bne.n	191fa <mpu_configure_regions_and_partition.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   191ee:	fa5f f08b 	uxtb.w	r0, fp
   191f2:	f016 fede 	bl	2ffb2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   191f6:	3701      	adds	r7, #1
   191f8:	e7be      	b.n	19178 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   191fa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   191fe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   19200:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   19204:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   19208:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1920a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1920c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1920e:	f016 fed0 	bl	2ffb2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   19212:	f110 0f16 	cmn.w	r0, #22
   19216:	d0b7      	beq.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
			reg_index++;
   19218:	1c44      	adds	r4, r0, #1
   1921a:	e7ec      	b.n	191f6 <mpu_configure_regions_and_partition.constprop.2+0x8e>
	MPU->RNR = index;
   1921c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   19220:	692a      	ldr	r2, [r5, #16]
   19222:	3b01      	subs	r3, #1
   19224:	f023 031f 	bic.w	r3, r3, #31
   19228:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1922c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1922e:	4556      	cmp	r6, sl
   19230:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   19232:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   19234:	d0eb      	beq.n	1920e <mpu_configure_regions_and_partition.constprop.2+0xa6>
				mpu_configure_region(reg_index, regions[i]);
   19236:	f016 febc 	bl	2ffb2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1923a:	f110 0f16 	cmn.w	r0, #22
   1923e:	d0a3      	beq.n	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
   19240:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   19244:	68ea      	ldr	r2, [r5, #12]
   19246:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1924a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   1924c:	f362 0304 	bfi	r3, r2, #0, #5
   19250:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   19254:	692b      	ldr	r3, [r5, #16]
   19256:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1925a:	085b      	lsrs	r3, r3, #1
   1925c:	f363 1247 	bfi	r2, r3, #5, #3
   19260:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   19264:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   19268:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   1926a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1926e:	4413      	add	r3, r2
   19270:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   19272:	f023 031f 	bic.w	r3, r3, #31
   19276:	441e      	add	r6, r3
   19278:	eba6 060a 	sub.w	r6, r6, sl
   1927c:	b2c4      	uxtb	r4, r0
   1927e:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   19282:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   19284:	9603      	str	r6, [sp, #12]
   19286:	f63f af7f 	bhi.w	19188 <mpu_configure_regions_and_partition.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1928a:	4620      	mov	r0, r4
   1928c:	4669      	mov	r1, sp
   1928e:	f7ff ff53 	bl	19138 <region_init>
			reg_index++;
   19292:	3401      	adds	r4, #1
   19294:	e7af      	b.n	191f6 <mpu_configure_regions_and_partition.constprop.2+0x8e>
   19296:	bf00      	nop
   19298:	e000ed90 	.word	0xe000ed90

0001929c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1929c:	2205      	movs	r2, #5
   1929e:	4b03      	ldr	r3, [pc, #12]	; (192ac <arm_core_mpu_enable+0x10>)
   192a0:	605a      	str	r2, [r3, #4]
   192a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   192a6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   192aa:	4770      	bx	lr
   192ac:	e000ed90 	.word	0xe000ed90

000192b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   192b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   192b4:	2200      	movs	r2, #0
   192b6:	4b01      	ldr	r3, [pc, #4]	; (192bc <arm_core_mpu_disable+0xc>)
   192b8:	605a      	str	r2, [r3, #4]
}
   192ba:	4770      	bx	lr
   192bc:	e000ed90 	.word	0xe000ed90

000192c0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   192c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   192c2:	4f21      	ldr	r7, [pc, #132]	; (19348 <arm_mpu_init+0x88>)
   192c4:	683e      	ldr	r6, [r7, #0]
   192c6:	2e10      	cmp	r6, #16
   192c8:	d913      	bls.n	192f2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   192ca:	f240 133d 	movw	r3, #317	; 0x13d
   192ce:	4a1f      	ldr	r2, [pc, #124]	; (1934c <arm_mpu_init+0x8c>)
   192d0:	491f      	ldr	r1, [pc, #124]	; (19350 <arm_mpu_init+0x90>)
   192d2:	4820      	ldr	r0, [pc, #128]	; (19354 <arm_mpu_init+0x94>)
   192d4:	f014 ff72 	bl	2e1bc <printk>
   192d8:	2210      	movs	r2, #16
   192da:	4631      	mov	r1, r6
   192dc:	481e      	ldr	r0, [pc, #120]	; (19358 <arm_mpu_init+0x98>)
   192de:	f014 ff6d 	bl	2e1bc <printk>
   192e2:	481a      	ldr	r0, [pc, #104]	; (1934c <arm_mpu_init+0x8c>)
   192e4:	f240 113d 	movw	r1, #317	; 0x13d
   192e8:	f015 fa69 	bl	2e7be <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   192ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   192f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   192f2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   192f4:	f7ff ffdc 	bl	192b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
   192f8:	4d18      	ldr	r5, [pc, #96]	; (1935c <arm_mpu_init+0x9c>)
   192fa:	4a19      	ldr	r2, [pc, #100]	; (19360 <arm_mpu_init+0xa0>)
   192fc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   192fe:	42a6      	cmp	r6, r4
   19300:	d119      	bne.n	19336 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   19302:	4b18      	ldr	r3, [pc, #96]	; (19364 <arm_mpu_init+0xa4>)
   19304:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   19306:	f7ff ffc9 	bl	1929c <arm_core_mpu_enable>
	__ASSERT(
   1930a:	682b      	ldr	r3, [r5, #0]
   1930c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19310:	2b10      	cmp	r3, #16
   19312:	d00e      	beq.n	19332 <arm_mpu_init+0x72>
   19314:	4914      	ldr	r1, [pc, #80]	; (19368 <arm_mpu_init+0xa8>)
   19316:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1931a:	4a0c      	ldr	r2, [pc, #48]	; (1934c <arm_mpu_init+0x8c>)
   1931c:	480d      	ldr	r0, [pc, #52]	; (19354 <arm_mpu_init+0x94>)
   1931e:	f014 ff4d 	bl	2e1bc <printk>
   19322:	4812      	ldr	r0, [pc, #72]	; (1936c <arm_mpu_init+0xac>)
   19324:	f014 ff4a 	bl	2e1bc <printk>
   19328:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1932c:	4807      	ldr	r0, [pc, #28]	; (1934c <arm_mpu_init+0x8c>)
   1932e:	f015 fa46 	bl	2e7be <assert_post_action>
	return 0;
   19332:	2000      	movs	r0, #0
   19334:	e7dc      	b.n	192f0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   19336:	6879      	ldr	r1, [r7, #4]
   19338:	4620      	mov	r0, r4
   1933a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1933e:	f7ff fefb 	bl	19138 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   19342:	3401      	adds	r4, #1
   19344:	e7db      	b.n	192fe <arm_mpu_init+0x3e>
   19346:	bf00      	nop
   19348:	00034990 	.word	0x00034990
   1934c:	0003637e 	.word	0x0003637e
   19350:	00037308 	.word	0x00037308
   19354:	00035920 	.word	0x00035920
   19358:	000363be 	.word	0x000363be
   1935c:	e000ed90 	.word	0xe000ed90
   19360:	0044ffaa 	.word	0x0044ffaa
   19364:	20027df8 	.word	0x20027df8
   19368:	000363f2 	.word	0x000363f2
   1936c:	00036443 	.word	0x00036443

00019370 <arm_core_mpu_configure_static_mpu_regions>:
{
   19370:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   19372:	4c0d      	ldr	r4, [pc, #52]	; (193a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   19374:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   19376:	7822      	ldrb	r2, [r4, #0]
   19378:	f7ff fef6 	bl	19168 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1937c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1937e:	3016      	adds	r0, #22
   19380:	d111      	bne.n	193a6 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   19382:	f240 1303 	movw	r3, #259	; 0x103
   19386:	4a09      	ldr	r2, [pc, #36]	; (193ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   19388:	4909      	ldr	r1, [pc, #36]	; (193b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1938a:	480a      	ldr	r0, [pc, #40]	; (193b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1938c:	f014 ff16 	bl	2e1bc <printk>
   19390:	4629      	mov	r1, r5
   19392:	4809      	ldr	r0, [pc, #36]	; (193b8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   19394:	f014 ff12 	bl	2e1bc <printk>
}
   19398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1939c:	f240 1103 	movw	r1, #259	; 0x103
   193a0:	4802      	ldr	r0, [pc, #8]	; (193ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   193a2:	f015 ba0c 	b.w	2e7be <assert_post_action>
}
   193a6:	bd38      	pop	{r3, r4, r5, pc}
   193a8:	20027df8 	.word	0x20027df8
   193ac:	0003637e 	.word	0x0003637e
   193b0:	00037308 	.word	0x00037308
   193b4:	00035920 	.word	0x00035920
   193b8:	00036323 	.word	0x00036323

000193bc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   193bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c0:	4c2e      	ldr	r4, [pc, #184]	; (1947c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   193c2:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   193c4:	4680      	mov	r8, r0
   193c6:	2700      	movs	r7, #0
   193c8:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   193ca:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   193ce:	4d2c      	ldr	r5, [pc, #176]	; (19480 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   193d0:	454f      	cmp	r7, r9
   193d2:	db02      	blt.n	193da <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   193d4:	b003      	add	sp, #12
   193d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   193da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   193de:	9301      	str	r3, [sp, #4]
   193e0:	2b00      	cmp	r3, #0
   193e2:	d046      	beq.n	19472 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   193e4:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   193e8:	4608      	mov	r0, r1
   193ea:	9100      	str	r1, [sp, #0]
   193ec:	f016 fe03 	bl	2fff6 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   193f0:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   193f4:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   193f6:	1858      	adds	r0, r3, r1
   193f8:	3801      	subs	r0, #1
   193fa:	f016 fdfc 	bl	2fff6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   193fe:	4286      	cmp	r6, r0
   19400:	4a20      	ldr	r2, [pc, #128]	; (19484 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   19402:	d018      	beq.n	19436 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   19404:	2314      	movs	r3, #20
   19406:	435f      	muls	r7, r3
   19408:	f06f 0315 	mvn.w	r3, #21
   1940c:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   19410:	f240 1313 	movw	r3, #275	; 0x113
   19414:	4a1c      	ldr	r2, [pc, #112]	; (19488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   19416:	491d      	ldr	r1, [pc, #116]	; (1948c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   19418:	481d      	ldr	r0, [pc, #116]	; (19490 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1941a:	f014 fecf 	bl	2e1bc <printk>
   1941e:	4649      	mov	r1, r9
   19420:	481c      	ldr	r0, [pc, #112]	; (19494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   19422:	f014 fecb 	bl	2e1bc <printk>
   19426:	f240 1113 	movw	r1, #275	; 0x113
   1942a:	4817      	ldr	r0, [pc, #92]	; (19488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   1942c:	b003      	add	sp, #12
   1942e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   19432:	f015 b9c4 	b.w	2e7be <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   19436:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   1943a:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1943c:	d0e8      	beq.n	19410 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1943e:	7813      	ldrb	r3, [r2, #0]
   19440:	42b3      	cmp	r3, r6
   19442:	dde5      	ble.n	19410 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   19444:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   19448:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   1944a:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   1944c:	68e8      	ldr	r0, [r5, #12]
   1944e:	7b19      	ldrb	r1, [r3, #12]
   19450:	f360 0104 	bfi	r1, r0, #0, #5
   19454:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   19456:	6929      	ldr	r1, [r5, #16]
   19458:	7b18      	ldrb	r0, [r3, #12]
   1945a:	0849      	lsrs	r1, r1, #1
   1945c:	f361 1047 	bfi	r0, r1, #5, #3
   19460:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   19462:	68eb      	ldr	r3, [r5, #12]
   19464:	f023 031f 	bic.w	r3, r3, #31
   19468:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1946a:	692b      	ldr	r3, [r5, #16]
   1946c:	f023 031f 	bic.w	r3, r3, #31
   19470:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   19472:	3701      	adds	r7, #1
   19474:	3414      	adds	r4, #20
   19476:	f108 080c 	add.w	r8, r8, #12
   1947a:	e7a9      	b.n	193d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   1947c:	2002160c 	.word	0x2002160c
   19480:	e000ed90 	.word	0xe000ed90
   19484:	20027df8 	.word	0x20027df8
   19488:	0003637e 	.word	0x0003637e
   1948c:	00037308 	.word	0x00037308
   19490:	00035920 	.word	0x00035920
   19494:	0003634f 	.word	0x0003634f

00019498 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   19498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1949a:	460e      	mov	r6, r1
   1949c:	4f09      	ldr	r7, [pc, #36]	; (194c4 <z_impl_zephyr_write_stdout+0x2c>)
   1949e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   194a0:	f1c0 0501 	rsb	r5, r0, #1
   194a4:	192b      	adds	r3, r5, r4
   194a6:	429e      	cmp	r6, r3
   194a8:	dc01      	bgt.n	194ae <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   194aa:	4630      	mov	r0, r6
   194ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   194ae:	7863      	ldrb	r3, [r4, #1]
   194b0:	2b0a      	cmp	r3, #10
   194b2:	d102      	bne.n	194ba <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   194b4:	683b      	ldr	r3, [r7, #0]
   194b6:	200d      	movs	r0, #13
   194b8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   194ba:	683b      	ldr	r3, [r7, #0]
   194bc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   194c0:	4798      	blx	r3
   194c2:	e7ef      	b.n	194a4 <z_impl_zephyr_write_stdout+0xc>
   194c4:	200200ac 	.word	0x200200ac

000194c8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   194c8:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   194ca:	2105      	movs	r1, #5
   194cc:	4801      	ldr	r0, [pc, #4]	; (194d4 <_exit+0xc>)
   194ce:	f7ff ffe3 	bl	19498 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   194d2:	e7fe      	b.n	194d2 <_exit+0xa>
   194d4:	00036464 	.word	0x00036464

000194d8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   194d8:	b538      	push	{r3, r4, r5, lr}
   194da:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   194dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194e0:	480b      	ldr	r0, [pc, #44]	; (19510 <_sbrk+0x38>)
   194e2:	f014 fe8a 	bl	2e1fa <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   194e6:	4a0b      	ldr	r2, [pc, #44]	; (19514 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   194e8:	490b      	ldr	r1, [pc, #44]	; (19518 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   194ea:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   194ec:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   194f0:	4425      	add	r5, r4
   194f2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   194f6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   194f8:	bf2c      	ite	cs
   194fa:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   194fe:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   19500:	4803      	ldr	r0, [pc, #12]	; (19510 <_sbrk+0x38>)
		heap_sz += count;
   19502:	bf38      	it	cc
   19504:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   19506:	f014 fe73 	bl	2e1f0 <sys_sem_give>

	return ret;
}
   1950a:	4620      	mov	r0, r4
   1950c:	bd38      	pop	{r3, r4, r5, pc}
   1950e:	bf00      	nop
   19510:	200205dc 	.word	0x200205dc
   19514:	20021620 	.word	0x20021620
   19518:	2003896f 	.word	0x2003896f

0001951c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1951c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1951e:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   19520:	4a04      	ldr	r2, [pc, #16]	; (19534 <net_buf_id+0x18>)
   19522:	fb01 2303 	mla	r3, r1, r3, r2
   19526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19528:	1ac0      	subs	r0, r0, r3
}
   1952a:	4b03      	ldr	r3, [pc, #12]	; (19538 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1952c:	10c0      	asrs	r0, r0, #3
}
   1952e:	4358      	muls	r0, r3
   19530:	4770      	bx	lr
   19532:	bf00      	nop
   19534:	200206b8 	.word	0x200206b8
   19538:	aaaaaaab 	.word	0xaaaaaaab

0001953c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1953c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1953e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19540:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19542:	4a09      	ldr	r2, [pc, #36]	; (19568 <fixed_data_alloc+0x2c>)
   19544:	fb04 2303 	mla	r3, r4, r3, r2
   19548:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1954a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1954c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1954e:	6823      	ldr	r3, [r4, #0]
   19550:	429a      	cmp	r2, r3
   19552:	bf94      	ite	ls
   19554:	600a      	strls	r2, [r1, #0]
   19556:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19558:	f7ff ffe0 	bl	1951c <net_buf_id>
   1955c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19560:	fb02 3000 	mla	r0, r2, r0, r3
   19564:	bd10      	pop	{r4, pc}
   19566:	bf00      	nop
   19568:	200206b8 	.word	0x200206b8

0001956c <net_buf_reset>:
{
   1956c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1956e:	7943      	ldrb	r3, [r0, #5]
{
   19570:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   19572:	b14b      	cbz	r3, 19588 <net_buf_reset+0x1c>
   19574:	490d      	ldr	r1, [pc, #52]	; (195ac <net_buf_reset+0x40>)
   19576:	480e      	ldr	r0, [pc, #56]	; (195b0 <net_buf_reset+0x44>)
   19578:	234f      	movs	r3, #79	; 0x4f
   1957a:	4a0e      	ldr	r2, [pc, #56]	; (195b4 <net_buf_reset+0x48>)
   1957c:	f014 fe1e 	bl	2e1bc <printk>
   19580:	214f      	movs	r1, #79	; 0x4f
   19582:	480c      	ldr	r0, [pc, #48]	; (195b4 <net_buf_reset+0x48>)
   19584:	f015 f91b 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   19588:	6823      	ldr	r3, [r4, #0]
   1958a:	b14b      	cbz	r3, 195a0 <net_buf_reset+0x34>
   1958c:	490a      	ldr	r1, [pc, #40]	; (195b8 <net_buf_reset+0x4c>)
   1958e:	4808      	ldr	r0, [pc, #32]	; (195b0 <net_buf_reset+0x44>)
   19590:	2350      	movs	r3, #80	; 0x50
   19592:	4a08      	ldr	r2, [pc, #32]	; (195b4 <net_buf_reset+0x48>)
   19594:	f014 fe12 	bl	2e1bc <printk>
   19598:	2150      	movs	r1, #80	; 0x50
   1959a:	4806      	ldr	r0, [pc, #24]	; (195b4 <net_buf_reset+0x48>)
   1959c:	f015 f90f 	bl	2e7be <assert_post_action>
 *
 * @param buf Buffer to reset.
 */
static inline void net_buf_simple_reset(struct net_buf_simple *buf)
{
	buf->len  = 0U;
   195a0:	2300      	movs	r3, #0
   195a2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   195a4:	6923      	ldr	r3, [r4, #16]
   195a6:	60a3      	str	r3, [r4, #8]
}
   195a8:	bd10      	pop	{r4, pc}
   195aa:	bf00      	nop
   195ac:	000364bf 	.word	0x000364bf
   195b0:	00035920 	.word	0x00035920
   195b4:	0003649b 	.word	0x0003649b
   195b8:	000364d0 	.word	0x000364d0

000195bc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   195bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c0:	4605      	mov	r5, r0
	u64_t end = z_timeout_end_calc(timeout);
   195c2:	4610      	mov	r0, r2
{
   195c4:	9101      	str	r1, [sp, #4]
   195c6:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   195c8:	f01a f82e 	bl	33628 <z_timeout_end_calc>
   195cc:	4607      	mov	r7, r0
   195ce:	468a      	mov	sl, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   195d0:	b94d      	cbnz	r5, 195e6 <net_buf_alloc_len+0x2a>
   195d2:	494c      	ldr	r1, [pc, #304]	; (19704 <net_buf_alloc_len+0x148>)
   195d4:	484c      	ldr	r0, [pc, #304]	; (19708 <net_buf_alloc_len+0x14c>)
   195d6:	23f1      	movs	r3, #241	; 0xf1
   195d8:	4a4c      	ldr	r2, [pc, #304]	; (1970c <net_buf_alloc_len+0x150>)
   195da:	f014 fdef 	bl	2e1bc <printk>
   195de:	21f1      	movs	r1, #241	; 0xf1
   195e0:	484a      	ldr	r0, [pc, #296]	; (1970c <net_buf_alloc_len+0x150>)
   195e2:	f015 f8ec 	bl	2e7be <assert_post_action>
   195e6:	f04f 0320 	mov.w	r3, #32
   195ea:	f3ef 8b11 	mrs	fp, BASEPRI
   195ee:	f383 8811 	msr	BASEPRI, r3
   195f2:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   195f6:	8beb      	ldrh	r3, [r5, #30]
   195f8:	2b00      	cmp	r3, #0
   195fa:	d056      	beq.n	196aa <net_buf_alloc_len+0xee>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   195fc:	8baa      	ldrh	r2, [r5, #28]
   195fe:	429a      	cmp	r2, r3
   19600:	d93f      	bls.n	19682 <net_buf_alloc_len+0xc6>
	return z_impl_k_queue_get(queue, timeout);
   19602:	2100      	movs	r1, #0
   19604:	4628      	mov	r0, r5
   19606:	f00e fe6b 	bl	282e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1960a:	4604      	mov	r4, r0
   1960c:	2800      	cmp	r0, #0
   1960e:	d038      	beq.n	19682 <net_buf_alloc_len+0xc6>
	__asm__ volatile(
   19610:	f38b 8811 	msr	BASEPRI, fp
   19614:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19618:	9d01      	ldr	r5, [sp, #4]
   1961a:	2d00      	cmp	r5, #0
   1961c:	d070      	beq.n	19700 <net_buf_alloc_len+0x144>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1961e:	1c73      	adds	r3, r6, #1
   19620:	2b01      	cmp	r3, #1
   19622:	d916      	bls.n	19652 <net_buf_alloc_len+0x96>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   19624:	f010 ff6a 	bl	2a4fc <z_tick_get>
   19628:	ebb7 0800 	subs.w	r8, r7, r0
   1962c:	eb6a 0901 	sbc.w	r9, sl, r1

			if (remaining <= 0) {
   19630:	f1b8 0f01 	cmp.w	r8, #1
   19634:	f179 0300 	sbcs.w	r3, r9, #0
   19638:	bfa3      	ittte	ge
   1963a:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   1963e:	2300      	movge	r3, #0
   19640:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
				timeout = K_NO_WAIT;
   19644:	2600      	movlt	r6, #0
   19646:	bfa2      	ittt	ge
   19648:	fbe1 2308 	umlalge	r2, r3, r1, r8
   1964c:	0bd6      	lsrge	r6, r2, #15
   1964e:	ea46 4643 	orrge.w	r6, r6, r3, lsl #17
	return pool->alloc->cb->alloc(buf, size, timeout);
   19652:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19656:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19658:	4f2d      	ldr	r7, [pc, #180]	; (19710 <net_buf_alloc_len+0x154>)
   1965a:	4632      	mov	r2, r6
   1965c:	fb08 7303 	mla	r3, r8, r3, r7
   19660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19662:	a901      	add	r1, sp, #4
   19664:	681b      	ldr	r3, [r3, #0]
   19666:	4620      	mov	r0, r4
   19668:	681b      	ldr	r3, [r3, #0]
   1966a:	4798      	blx	r3
   1966c:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1966e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19670:	bb50      	cbnz	r0, 196c8 <net_buf_alloc_len+0x10c>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   19672:	79a0      	ldrb	r0, [r4, #6]
   19674:	4621      	mov	r1, r4
   19676:	fb00 7008 	mla	r0, r0, r8, r7
   1967a:	f019 ff0e 	bl	3349a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1967e:	4634      	mov	r4, r6
   19680:	e01e      	b.n	196c0 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   19682:	8beb      	ldrh	r3, [r5, #30]
   19684:	1e5a      	subs	r2, r3, #1
   19686:	83ea      	strh	r2, [r5, #30]
   19688:	f38b 8811 	msr	BASEPRI, fp
   1968c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19690:	2218      	movs	r2, #24
   19692:	8bac      	ldrh	r4, [r5, #28]
   19694:	1ae4      	subs	r4, r4, r3
   19696:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19698:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1969c:	4b1c      	ldr	r3, [pc, #112]	; (19710 <net_buf_alloc_len+0x154>)
   1969e:	1aed      	subs	r5, r5, r3
   196a0:	4b1c      	ldr	r3, [pc, #112]	; (19714 <net_buf_alloc_len+0x158>)
   196a2:	10ad      	asrs	r5, r5, #2
   196a4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   196a6:	71a5      	strb	r5, [r4, #6]
		goto success;
   196a8:	e7b6      	b.n	19618 <net_buf_alloc_len+0x5c>
   196aa:	f38b 8811 	msr	BASEPRI, fp
   196ae:	f3bf 8f6f 	isb	sy
   196b2:	4631      	mov	r1, r6
   196b4:	4628      	mov	r0, r5
   196b6:	f00e fe13 	bl	282e0 <z_impl_k_queue_get>
	if (!buf) {
   196ba:	4604      	mov	r4, r0
   196bc:	2800      	cmp	r0, #0
   196be:	d1ab      	bne.n	19618 <net_buf_alloc_len+0x5c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   196c0:	4620      	mov	r0, r4
   196c2:	b003      	add	sp, #12
   196c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   196c8:	9b01      	ldr	r3, [sp, #4]
   196ca:	429d      	cmp	r5, r3
   196cc:	d90e      	bls.n	196ec <net_buf_alloc_len+0x130>
   196ce:	4912      	ldr	r1, [pc, #72]	; (19718 <net_buf_alloc_len+0x15c>)
   196d0:	f240 1351 	movw	r3, #337	; 0x151
   196d4:	4a0d      	ldr	r2, [pc, #52]	; (1970c <net_buf_alloc_len+0x150>)
   196d6:	480c      	ldr	r0, [pc, #48]	; (19708 <net_buf_alloc_len+0x14c>)
   196d8:	f014 fd70 	bl	2e1bc <printk>
   196dc:	480f      	ldr	r0, [pc, #60]	; (1971c <net_buf_alloc_len+0x160>)
   196de:	f014 fd6d 	bl	2e1bc <printk>
   196e2:	f240 1151 	movw	r1, #337	; 0x151
   196e6:	4809      	ldr	r0, [pc, #36]	; (1970c <net_buf_alloc_len+0x150>)
   196e8:	f015 f869 	bl	2e7be <assert_post_action>
	buf->frags = NULL;
   196ec:	2300      	movs	r3, #0
   196ee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   196f0:	2301      	movs	r3, #1
   196f2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   196f4:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   196f6:	4620      	mov	r0, r4
	buf->size  = size;
   196f8:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   196fa:	f7ff ff37 	bl	1956c <net_buf_reset>
	return buf;
   196fe:	e7df      	b.n	196c0 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   19700:	6125      	str	r5, [r4, #16]
   19702:	e7f3      	b.n	196ec <net_buf_alloc_len+0x130>
   19704:	00036479 	.word	0x00036479
   19708:	00035920 	.word	0x00035920
   1970c:	0003649b 	.word	0x0003649b
   19710:	200206b8 	.word	0x200206b8
   19714:	ba2e8ba3 	.word	0xba2e8ba3
   19718:	0003647e 	.word	0x0003647e
   1971c:	00035d7e 	.word	0x00035d7e

00019720 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19724:	4604      	mov	r4, r0
   19726:	b328      	cbz	r0, 19774 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19728:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1972a:	272c      	movs	r7, #44	; 0x2c
   1972c:	4d1b      	ldr	r5, [pc, #108]	; (1979c <net_buf_unref+0x7c>)
		if (--buf->ref > 0) {
   1972e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19730:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   19734:	3b01      	subs	r3, #1
   19736:	b2db      	uxtb	r3, r3
   19738:	7123      	strb	r3, [r4, #4]
   1973a:	b9cb      	cbnz	r3, 19770 <net_buf_unref+0x50>
		if (buf->__buf) {
   1973c:	6921      	ldr	r1, [r4, #16]
   1973e:	b159      	cbz	r1, 19758 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19740:	7963      	ldrb	r3, [r4, #5]
   19742:	079b      	lsls	r3, r3, #30
   19744:	d407      	bmi.n	19756 <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   19746:	79a3      	ldrb	r3, [r4, #6]
   19748:	4620      	mov	r0, r4
   1974a:	fb07 5303 	mla	r3, r7, r3, r5
   1974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19750:	681b      	ldr	r3, [r3, #0]
   19752:	689b      	ldr	r3, [r3, #8]
   19754:	4798      	blx	r3
			buf->__buf = NULL;
   19756:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   19758:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1975a:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1975c:	fb07 5300 	mla	r3, r7, r0, r5
   19760:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   19762:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19764:	b1a3      	cbz	r3, 19790 <net_buf_unref+0x70>
			pool->destroy(buf);
   19766:	4620      	mov	r0, r4
   19768:	4798      	blx	r3
	while (buf) {
   1976a:	4644      	mov	r4, r8
   1976c:	2c00      	cmp	r4, #0
   1976e:	d1de      	bne.n	1972e <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   19774:	490a      	ldr	r1, [pc, #40]	; (197a0 <net_buf_unref+0x80>)
   19776:	480b      	ldr	r0, [pc, #44]	; (197a4 <net_buf_unref+0x84>)
   19778:	f44f 7303 	mov.w	r3, #524	; 0x20c
   1977c:	4a0a      	ldr	r2, [pc, #40]	; (197a8 <net_buf_unref+0x88>)
   1977e:	f014 fd1d 	bl	2e1bc <printk>
}
   19782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19786:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1978a:	4807      	ldr	r0, [pc, #28]	; (197a8 <net_buf_unref+0x88>)
   1978c:	f015 b817 	b.w	2e7be <assert_post_action>
   19790:	4621      	mov	r1, r4
   19792:	fb00 5007 	mla	r0, r0, r7, r5
   19796:	f019 fe80 	bl	3349a <k_queue_prepend>
   1979a:	e7e6      	b.n	1976a <net_buf_unref+0x4a>
   1979c:	200206b8 	.word	0x200206b8
   197a0:	0003650e 	.word	0x0003650e
   197a4:	00035920 	.word	0x00035920
   197a8:	0003649b 	.word	0x0003649b

000197ac <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   197ac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   197ae:	4604      	mov	r4, r0
   197b0:	b958      	cbnz	r0, 197ca <net_buf_frag_last+0x1e>
   197b2:	4909      	ldr	r1, [pc, #36]	; (197d8 <net_buf_frag_last+0x2c>)
   197b4:	4809      	ldr	r0, [pc, #36]	; (197dc <net_buf_frag_last+0x30>)
   197b6:	f44f 731e 	mov.w	r3, #632	; 0x278
   197ba:	4a09      	ldr	r2, [pc, #36]	; (197e0 <net_buf_frag_last+0x34>)
   197bc:	f014 fcfe 	bl	2e1bc <printk>
   197c0:	f44f 711e 	mov.w	r1, #632	; 0x278
   197c4:	4806      	ldr	r0, [pc, #24]	; (197e0 <net_buf_frag_last+0x34>)
   197c6:	f014 fffa 	bl	2e7be <assert_post_action>

	while (buf->frags) {
   197ca:	6823      	ldr	r3, [r4, #0]
   197cc:	b90b      	cbnz	r3, 197d2 <net_buf_frag_last+0x26>
		buf = buf->frags;
	}

	return buf;
}
   197ce:	4620      	mov	r0, r4
   197d0:	bd10      	pop	{r4, pc}
   197d2:	461c      	mov	r4, r3
   197d4:	e7f9      	b.n	197ca <net_buf_frag_last+0x1e>
   197d6:	bf00      	nop
   197d8:	0003650e 	.word	0x0003650e
   197dc:	00035920 	.word	0x00035920
   197e0:	0003649b 	.word	0x0003649b

000197e4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   197e4:	b538      	push	{r3, r4, r5, lr}
   197e6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   197e8:	4604      	mov	r4, r0
   197ea:	b958      	cbnz	r0, 19804 <net_buf_frag_insert+0x20>
   197ec:	4910      	ldr	r1, [pc, #64]	; (19830 <net_buf_frag_insert+0x4c>)
   197ee:	4811      	ldr	r0, [pc, #68]	; (19834 <net_buf_frag_insert+0x50>)
   197f0:	f240 2383 	movw	r3, #643	; 0x283
   197f4:	4a10      	ldr	r2, [pc, #64]	; (19838 <net_buf_frag_insert+0x54>)
   197f6:	f014 fce1 	bl	2e1bc <printk>
   197fa:	f240 2183 	movw	r1, #643	; 0x283
   197fe:	480e      	ldr	r0, [pc, #56]	; (19838 <net_buf_frag_insert+0x54>)
   19800:	f014 ffdd 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(frag);
   19804:	b95d      	cbnz	r5, 1981e <net_buf_frag_insert+0x3a>
   19806:	490d      	ldr	r1, [pc, #52]	; (1983c <net_buf_frag_insert+0x58>)
   19808:	480a      	ldr	r0, [pc, #40]	; (19834 <net_buf_frag_insert+0x50>)
   1980a:	f44f 7321 	mov.w	r3, #644	; 0x284
   1980e:	4a0a      	ldr	r2, [pc, #40]	; (19838 <net_buf_frag_insert+0x54>)
   19810:	f014 fcd4 	bl	2e1bc <printk>
   19814:	f44f 7121 	mov.w	r1, #644	; 0x284
   19818:	4807      	ldr	r0, [pc, #28]	; (19838 <net_buf_frag_insert+0x54>)
   1981a:	f014 ffd0 	bl	2e7be <assert_post_action>

	if (parent->frags) {
   1981e:	6823      	ldr	r3, [r4, #0]
   19820:	b123      	cbz	r3, 1982c <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   19822:	4628      	mov	r0, r5
   19824:	f7ff ffc2 	bl	197ac <net_buf_frag_last>
   19828:	6823      	ldr	r3, [r4, #0]
   1982a:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1982c:	6025      	str	r5, [r4, #0]
}
   1982e:	bd38      	pop	{r3, r4, r5, pc}
   19830:	0003648f 	.word	0x0003648f
   19834:	00035920 	.word	0x00035920
   19838:	0003649b 	.word	0x0003649b
   1983c:	00036496 	.word	0x00036496

00019840 <net_buf_simple_add>:
{
	memcpy(clone, original, sizeof(struct net_buf_simple));
}

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
   19840:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   19842:	6803      	ldr	r3, [r0, #0]
   19844:	8886      	ldrh	r6, [r0, #4]
   19846:	4604      	mov	r4, r0
   19848:	460d      	mov	r5, r1
   1984a:	441e      	add	r6, r3
	u8_t *tail = net_buf_simple_tail(buf);

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1984c:	f016 fbf0 	bl	30030 <net_buf_simple_tailroom>
   19850:	4288      	cmp	r0, r1
   19852:	d20b      	bcs.n	1986c <net_buf_simple_add+0x2c>
   19854:	4908      	ldr	r1, [pc, #32]	; (19878 <net_buf_simple_add+0x38>)
   19856:	4809      	ldr	r0, [pc, #36]	; (1987c <net_buf_simple_add+0x3c>)
   19858:	f240 3319 	movw	r3, #793	; 0x319
   1985c:	4a08      	ldr	r2, [pc, #32]	; (19880 <net_buf_simple_add+0x40>)
   1985e:	f014 fcad 	bl	2e1bc <printk>
   19862:	f240 3119 	movw	r1, #793	; 0x319
   19866:	4806      	ldr	r0, [pc, #24]	; (19880 <net_buf_simple_add+0x40>)
   19868:	f014 ffa9 	bl	2e7be <assert_post_action>

	buf->len += len;
   1986c:	88a3      	ldrh	r3, [r4, #4]
	return tail;
}
   1986e:	4630      	mov	r0, r6
	buf->len += len;
   19870:	441d      	add	r5, r3
   19872:	80a5      	strh	r5, [r4, #4]
}
   19874:	bd70      	pop	{r4, r5, r6, pc}
   19876:	bf00      	nop
   19878:	000364ea 	.word	0x000364ea
   1987c:	00035920 	.word	0x00035920
   19880:	0003649b 	.word	0x0003649b

00019884 <net_ipv4_is_ll_addr>:
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
   19884:	6803      	ldr	r3, [r0, #0]
   19886:	4a04      	ldr	r2, [pc, #16]	; (19898 <net_ipv4_is_ll_addr+0x14>)
   19888:	ba1b      	rev	r3, r3
   1988a:	ea32 0303 	bics.w	r3, r2, r3
}
   1988e:	bf0c      	ite	eq
   19890:	2001      	moveq	r0, #1
   19892:	2000      	movne	r0, #0
   19894:	4770      	bx	lr
   19896:	bf00      	nop
   19898:	a9fe0000 	.word	0xa9fe0000

0001989c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   1989c:	b538      	push	{r3, r4, r5, lr}
   1989e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   198a0:	4604      	mov	r4, r0
   198a2:	b970      	cbnz	r0, 198c2 <net_if_flag_is_set+0x26>
   198a4:	490b      	ldr	r1, [pc, #44]	; (198d4 <net_if_flag_is_set+0x38>)
   198a6:	f44f 7307 	mov.w	r3, #540	; 0x21c
   198aa:	4a0b      	ldr	r2, [pc, #44]	; (198d8 <net_if_flag_is_set+0x3c>)
   198ac:	480b      	ldr	r0, [pc, #44]	; (198dc <net_if_flag_is_set+0x40>)
   198ae:	f014 fc85 	bl	2e1bc <printk>
   198b2:	480b      	ldr	r0, [pc, #44]	; (198e0 <net_if_flag_is_set+0x44>)
   198b4:	f014 fc82 	bl	2e1bc <printk>
   198b8:	f44f 7107 	mov.w	r1, #540	; 0x21c
   198bc:	4806      	ldr	r0, [pc, #24]	; (198d8 <net_if_flag_is_set+0x3c>)
   198be:	f014 ff7e 	bl	2e7be <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198c2:	6823      	ldr	r3, [r4, #0]
   198c4:	330c      	adds	r3, #12
   198c6:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   198ca:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   198cc:	f000 0001 	and.w	r0, r0, #1
   198d0:	bd38      	pop	{r3, r4, r5, pc}
   198d2:	bf00      	nop
   198d4:	00036549 	.word	0x00036549
   198d8:	00036521 	.word	0x00036521
   198dc:	00035920 	.word	0x00035920
   198e0:	00035d7e 	.word	0x00035d7e

000198e4 <iface_router_run_timer>:
	}
}


static void iface_router_run_timer(u32_t current_time)
{
   198e4:	b538      	push	{r3, r4, r5, lr}
   198e6:	4604      	mov	r4, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   198e8:	4817      	ldr	r0, [pc, #92]	; (19948 <iface_router_run_timer+0x64>)
   198ea:	f010 fc73 	bl	2a1d4 <z_timeout_remaining>
   198ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   198f2:	fba0 0103 	umull	r0, r1, r0, r3
   198f6:	0bc3      	lsrs	r3, r0, #15
	struct net_if_router *router, *next;
	u32_t new_timer = UINT_MAX;

	if (k_delayed_work_remaining_get(&router_timer)) {
   198f8:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   198fc:	d002      	beq.n	19904 <iface_router_run_timer+0x20>
		k_delayed_work_cancel(&router_timer);
   198fe:	4813      	ldr	r0, [pc, #76]	; (1994c <iface_router_run_timer+0x68>)
   19900:	f010 faca 	bl	29e98 <k_delayed_work_cancel>
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19904:	4b12      	ldr	r3, [pc, #72]	; (19950 <iface_router_run_timer+0x6c>)
   19906:	681b      	ldr	r3, [r3, #0]
   19908:	b1e3      	cbz	r3, 19944 <iface_router_run_timer+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1990a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
					 router, next, node) {
		u32_t current_timer = router->life_start +
			(MSEC_PER_SEC * router->lifetime) - current_time;
   1990e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   19912:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19914:	b93b      	cbnz	r3, 19926 <iface_router_run_timer+0x42>

		new_timer = MIN(current_timer, new_timer);
	}

	if (new_timer != UINT_MAX) {
   19916:	1c53      	adds	r3, r2, #1
   19918:	d014      	beq.n	19944 <iface_router_run_timer+0x60>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
	}
}
   1991a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1991e:	490b      	ldr	r1, [pc, #44]	; (1994c <iface_router_run_timer+0x68>)
   19920:	480c      	ldr	r0, [pc, #48]	; (19954 <iface_router_run_timer+0x70>)
   19922:	f010 ba27 	b.w	29d74 <k_delayed_work_submit_to_queue>
			(MSEC_PER_SEC * router->lifetime) - current_time;
   19926:	8c18      	ldrh	r0, [r3, #32]
		u32_t current_timer = router->life_start +
   19928:	69db      	ldr	r3, [r3, #28]
   1992a:	1b1b      	subs	r3, r3, r4
   1992c:	fb05 3300 	mla	r3, r5, r0, r3
		new_timer = MIN(current_timer, new_timer);
   19930:	429a      	cmp	r2, r3
   19932:	bf28      	it	cs
   19934:	461a      	movcs	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19936:	b119      	cbz	r1, 19940 <iface_router_run_timer+0x5c>
   19938:	6808      	ldr	r0, [r1, #0]
   1993a:	460b      	mov	r3, r1
   1993c:	4601      	mov	r1, r0
   1993e:	e7e9      	b.n	19914 <iface_router_run_timer+0x30>
   19940:	4608      	mov	r0, r1
   19942:	e7fa      	b.n	1993a <iface_router_run_timer+0x56>
}
   19944:	bd38      	pop	{r3, r4, r5, pc}
   19946:	bf00      	nop
   19948:	20021680 	.word	0x20021680
   1994c:	20021674 	.word	0x20021674
   19950:	20021624 	.word	0x20021624
   19954:	20027368 	.word	0x20027368

00019958 <net_if_flag_set.constprop.32>:
static inline void net_if_flag_set(struct net_if *iface,
   19958:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1995a:	4604      	mov	r4, r0
   1995c:	b970      	cbnz	r0, 1997c <net_if_flag_set.constprop.32+0x24>
   1995e:	490d      	ldr	r1, [pc, #52]	; (19994 <net_if_flag_set.constprop.32+0x3c>)
   19960:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   19964:	4a0c      	ldr	r2, [pc, #48]	; (19998 <net_if_flag_set.constprop.32+0x40>)
   19966:	480d      	ldr	r0, [pc, #52]	; (1999c <net_if_flag_set.constprop.32+0x44>)
   19968:	f014 fc28 	bl	2e1bc <printk>
   1996c:	480c      	ldr	r0, [pc, #48]	; (199a0 <net_if_flag_set.constprop.32+0x48>)
   1996e:	f014 fc25 	bl	2e1bc <printk>
   19972:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   19976:	4808      	ldr	r0, [pc, #32]	; (19998 <net_if_flag_set.constprop.32+0x40>)
   19978:	f014 ff21 	bl	2e7be <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1997c:	6823      	ldr	r3, [r4, #0]
   1997e:	330c      	adds	r3, #12
   19980:	e8d3 2fef 	ldaex	r2, [r3]
   19984:	f042 0201 	orr.w	r2, r2, #1
   19988:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1998c:	2900      	cmp	r1, #0
   1998e:	d1f7      	bne.n	19980 <net_if_flag_set.constprop.32+0x28>
}
   19990:	bd10      	pop	{r4, pc}
   19992:	bf00      	nop
   19994:	00036549 	.word	0x00036549
   19998:	00036521 	.word	0x00036521
   1999c:	00035920 	.word	0x00035920
   199a0:	00035d7e 	.word	0x00035d7e

000199a4 <net_if_ipv4_get_best_match.isra.17>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
   199a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199a6:	4615      	mov	r5, r2
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv4) {
   199a8:	4604      	mov	r4, r0
   199aa:	b310      	cbz	r0, 199f2 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   199ac:	6942      	ldr	r2, [r0, #20]
   199ae:	4b17      	ldr	r3, [pc, #92]	; (19a0c <net_if_ipv4_get_best_match.isra.17+0x68>)
   199b0:	4013      	ands	r3, r2
   199b2:	4a17      	ldr	r2, [pc, #92]	; (19a10 <net_if_ipv4_get_best_match.isra.17+0x6c>)
   199b4:	4293      	cmp	r3, r2
   199b6:	d001      	beq.n	199bc <net_if_ipv4_get_best_match.isra.17+0x18>
		return NULL;
   199b8:	2400      	movs	r4, #0
   199ba:	e01a      	b.n	199f2 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   199bc:	8823      	ldrh	r3, [r4, #0]
   199be:	2b01      	cmp	r3, #1
   199c0:	d1fa      	bne.n	199b8 <net_if_ipv4_get_best_match.isra.17+0x14>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
   199c2:	1d26      	adds	r6, r4, #4
   199c4:	4630      	mov	r0, r6
   199c6:	f7ff ff5d 	bl	19884 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
   199ca:	2800      	cmp	r0, #0
   199cc:	d1f4      	bne.n	199b8 <net_if_ipv4_get_best_match.isra.17+0x14>
   199ce:	3901      	subs	r1, #1
   199d0:	3403      	adds	r4, #3
		if (src[j] == dst[j]) {
   199d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   199d6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   199da:	f100 0208 	add.w	r2, r0, #8
   199de:	42bb      	cmp	r3, r7
   199e0:	d109      	bne.n	199f6 <net_if_ipv4_get_best_match.isra.17+0x52>
			len += 8U;
   199e2:	b2d0      	uxtb	r0, r2
	for (j = 0U; j < addr_len; j++) {
   199e4:	2820      	cmp	r0, #32
   199e6:	d1f4      	bne.n	199d2 <net_if_ipv4_get_best_match.isra.17+0x2e>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
			continue;
		}

		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
		if (len >= *best_so_far) {
   199e8:	782b      	ldrb	r3, [r5, #0]
   199ea:	4283      	cmp	r3, r0
   199ec:	d8e4      	bhi.n	199b8 <net_if_ipv4_get_best_match.isra.17+0x14>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
   199ee:	4634      	mov	r4, r6
			*best_so_far = len;
   199f0:	7028      	strb	r0, [r5, #0]
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
   199f2:	4620      	mov	r0, r4
   199f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xor = src[j] ^ dst[j];
   199f6:	407b      	eors	r3, r7
			for (k = 0U; k < 8; k++) {
   199f8:	b2d2      	uxtb	r2, r2
				if (!(xor & 0x80)) {
   199fa:	0619      	lsls	r1, r3, #24
   199fc:	d4f4      	bmi.n	199e8 <net_if_ipv4_get_best_match.isra.17+0x44>
					len++;
   199fe:	3001      	adds	r0, #1
   19a00:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   19a02:	005b      	lsls	r3, r3, #1
			for (k = 0U; k < 8; k++) {
   19a04:	4282      	cmp	r2, r0
					xor <<= 1;
   19a06:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
   19a08:	d1f7      	bne.n	199fa <net_if_ipv4_get_best_match.isra.17+0x56>
   19a0a:	e7ed      	b.n	199e8 <net_if_ipv4_get_best_match.isra.17+0x44>
   19a0c:	0002ff00 	.word	0x0002ff00
   19a10:	00020100 	.word	0x00020100

00019a14 <iface_router_expired>:
{
   19a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
   19a16:	f016 fbff 	bl	30218 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19a1a:	4a18      	ldr	r2, [pc, #96]	; (19a7c <iface_router_expired+0x68>)
   19a1c:	6813      	ldr	r3, [r2, #0]
   19a1e:	b91b      	cbnz	r3, 19a28 <iface_router_expired+0x14>
}
   19a20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
   19a24:	f7ff bf5e 	b.w	198e4 <iface_router_run_timer>
   19a28:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
   19a2a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
   19a2e:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a30:	681c      	ldr	r4, [r3, #0]
   19a32:	69de      	ldr	r6, [r3, #28]
   19a34:	8c1d      	ldrh	r5, [r3, #32]
   19a36:	1a36      	subs	r6, r6, r0
   19a38:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
   19a3c:	2d00      	cmp	r5, #0
   19a3e:	461f      	mov	r7, r3
   19a40:	dc0f      	bgt.n	19a62 <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   19a42:	681d      	ldr	r5, [r3, #0]
   19a44:	b999      	cbnz	r1, 19a6e <iface_router_expired+0x5a>
   19a46:	6856      	ldr	r6, [r2, #4]
	list->head = node;
   19a48:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19a4a:	429e      	cmp	r6, r3
   19a4c:	d100      	bne.n	19a50 <iface_router_expired+0x3c>
	list->tail = node;
   19a4e:	6055      	str	r5, [r2, #4]
		router->is_used = false;
   19a50:	460f      	mov	r7, r1
   19a52:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
   19a56:	f8c3 c000 	str.w	ip, [r3]
   19a5a:	f36c 0500 	bfi	r5, ip, #0, #1
   19a5e:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19a62:	2c00      	cmp	r4, #0
   19a64:	d0dc      	beq.n	19a20 <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a66:	4623      	mov	r3, r4
   19a68:	4639      	mov	r1, r7
   19a6a:	6824      	ldr	r4, [r4, #0]
   19a6c:	e7e1      	b.n	19a32 <iface_router_expired+0x1e>
	parent->next = child;
   19a6e:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19a70:	6855      	ldr	r5, [r2, #4]
   19a72:	429d      	cmp	r5, r3
	list->tail = node;
   19a74:	bf08      	it	eq
   19a76:	6051      	streq	r1, [r2, #4]
   19a78:	e7ea      	b.n	19a50 <iface_router_expired+0x3c>
   19a7a:	bf00      	nop
   19a7c:	20021624 	.word	0x20021624

00019a80 <net_if_queue_tx>:
{
   19a80:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   19a82:	2000      	movs	r0, #0
{
   19a84:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   19a86:	f001 f8e1 	bl	1ac4c <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19a8a:	2300      	movs	r3, #0
   19a8c:	4a04      	ldr	r2, [pc, #16]	; (19aa0 <net_if_queue_tx+0x20>)
   19a8e:	6023      	str	r3, [r4, #0]
   19a90:	e9c4 2301 	strd	r2, r3, [r4, #4]
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   19a94:	4621      	mov	r1, r4
}
   19a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   19a9a:	b2c0      	uxtb	r0, r0
   19a9c:	f001 b8c2 	b.w	1ac24 <net_tc_submit_to_tx_queue>
   19aa0:	00019c65 	.word	0x00019c65

00019aa4 <net_if_get_default>:
}
   19aa4:	4b02      	ldr	r3, [pc, #8]	; (19ab0 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   19aa6:	4803      	ldr	r0, [pc, #12]	; (19ab4 <net_if_get_default+0x10>)
}
   19aa8:	4298      	cmp	r0, r3
   19aaa:	bf08      	it	eq
   19aac:	2000      	moveq	r0, #0
   19aae:	4770      	bx	lr
   19ab0:	200207a0 	.word	0x200207a0
   19ab4:	20020780 	.word	0x20020780

00019ab8 <net_if_ipv4_is_addr_bcast>:
{
   19ab8:	b570      	push	{r4, r5, r6, lr}
   19aba:	460e      	mov	r6, r1
	if (iface) {
   19abc:	b168      	cbz	r0, 19ada <net_if_ipv4_is_addr_bcast+0x22>
}
   19abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ipv4_is_broadcast_address(iface, addr);
   19ac2:	f016 bbca 	b.w	3025a <ipv4_is_broadcast_address>
		ret = ipv4_is_broadcast_address(iface, addr);
   19ac6:	4631      	mov	r1, r6
   19ac8:	4620      	mov	r0, r4
   19aca:	f016 fbc6 	bl	3025a <ipv4_is_broadcast_address>
		if (ret) {
   19ace:	b918      	cbnz	r0, 19ad8 <net_if_ipv4_is_addr_bcast+0x20>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19ad0:	3420      	adds	r4, #32
   19ad2:	42ac      	cmp	r4, r5
   19ad4:	d1f7      	bne.n	19ac6 <net_if_ipv4_is_addr_bcast+0xe>
	return false;
   19ad6:	2000      	movs	r0, #0
}
   19ad8:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19ada:	4c01      	ldr	r4, [pc, #4]	; (19ae0 <net_if_ipv4_is_addr_bcast+0x28>)
   19adc:	4d01      	ldr	r5, [pc, #4]	; (19ae4 <net_if_ipv4_is_addr_bcast+0x2c>)
   19ade:	e7f8      	b.n	19ad2 <net_if_ipv4_is_addr_bcast+0x1a>
   19ae0:	20020780 	.word	0x20020780
   19ae4:	200207a0 	.word	0x200207a0

00019ae8 <net_if_ipv4_select_src_iface>:
{
   19ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19aea:	4c0a      	ldr	r4, [pc, #40]	; (19b14 <net_if_ipv4_select_src_iface+0x2c>)
{
   19aec:	4607      	mov	r7, r0
   19aee:	4625      	mov	r5, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19af0:	4e09      	ldr	r6, [pc, #36]	; (19b18 <net_if_ipv4_select_src_iface+0x30>)
   19af2:	42b4      	cmp	r4, r6
   19af4:	d106      	bne.n	19b04 <net_if_ipv4_select_src_iface+0x1c>
		return NULL;
   19af6:	4b07      	ldr	r3, [pc, #28]	; (19b14 <net_if_ipv4_select_src_iface+0x2c>)
   19af8:	42a5      	cmp	r5, r4
   19afa:	bf14      	ite	ne
   19afc:	461c      	movne	r4, r3
   19afe:	2400      	moveq	r4, #0
}
   19b00:	4620      	mov	r0, r4
   19b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
   19b04:	4639      	mov	r1, r7
   19b06:	4620      	mov	r0, r4
   19b08:	f016 fb93 	bl	30232 <net_if_ipv4_addr_mask_cmp>
		if (ret) {
   19b0c:	2800      	cmp	r0, #0
   19b0e:	d1f7      	bne.n	19b00 <net_if_ipv4_select_src_iface+0x18>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19b10:	3420      	adds	r4, #32
   19b12:	e7ee      	b.n	19af2 <net_if_ipv4_select_src_iface+0xa>
   19b14:	20020780 	.word	0x20020780
   19b18:	200207a0 	.word	0x200207a0

00019b1c <net_if_ipv4_select_src_addr>:

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
						  const struct in_addr *dst)
{
	struct in_addr *src = NULL;
	u8_t best_match = 0U;
   19b1c:	2300      	movs	r3, #0
{
   19b1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19b22:	4605      	mov	r5, r0
	struct net_if *iface;

	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   19b24:	4608      	mov	r0, r1
{
   19b26:	460e      	mov	r6, r1
	u8_t best_match = 0U;
   19b28:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   19b2c:	f7ff feaa 	bl	19884 <net_ipv4_is_ll_addr>
   19b30:	bba8      	cbnz	r0, 19b9e <net_if_ipv4_select_src_addr+0x82>
   19b32:	4608      	mov	r0, r1
   19b34:	f016 fb2a 	bl	3018c <net_ipv4_is_addr_mcast>
   19b38:	bb88      	cbnz	r0, 19b9e <net_if_ipv4_select_src_addr+0x82>

		for (iface = __net_if_start;
   19b3a:	4f1d      	ldr	r7, [pc, #116]	; (19bb0 <net_if_ipv4_select_src_addr+0x94>)
	struct in_addr *src = NULL;
   19b3c:	4604      	mov	r4, r0
		     !dst_iface && iface != __net_if_end;
   19b3e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 19bb4 <net_if_ipv4_select_src_addr+0x98>
		for (iface = __net_if_start;
   19b42:	b185      	cbz	r5, 19b66 <net_if_ipv4_select_src_addr+0x4a>
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
			src = net_if_ipv4_get_best_match(dst_iface, dst,
   19b44:	f10d 0207 	add.w	r2, sp, #7
   19b48:	6868      	ldr	r0, [r5, #4]
   19b4a:	f7ff ff2b 	bl	199a4 <net_if_ipv4_get_best_match.isra.17>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19b4e:	4604      	mov	r4, r0
   19b50:	e00b      	b.n	19b6a <net_if_ipv4_select_src_addr+0x4e>
			addr = net_if_ipv4_get_best_match(iface, dst,
   19b52:	6878      	ldr	r0, [r7, #4]
   19b54:	f10d 0207 	add.w	r2, sp, #7
   19b58:	4631      	mov	r1, r6
   19b5a:	f7ff ff23 	bl	199a4 <net_if_ipv4_get_best_match.isra.17>
			if (addr) {
   19b5e:	2800      	cmp	r0, #0
   19b60:	bf18      	it	ne
   19b62:	4604      	movne	r4, r0
		     iface++) {
   19b64:	3720      	adds	r7, #32
		     !dst_iface && iface != __net_if_end;
   19b66:	4547      	cmp	r7, r8
   19b68:	d1f3      	bne.n	19b52 <net_if_ipv4_select_src_addr+0x36>
		}
	}

	if (!src) {
   19b6a:	b16c      	cbz	r4, 19b88 <net_if_ipv4_select_src_addr+0x6c>

		return net_ipv4_unspecified_address();
	}

	return src;
}
   19b6c:	4620      	mov	r0, r4
   19b6e:	b002      	add	sp, #8
   19b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			addr = net_if_ipv4_get_ll(iface, NET_ADDR_PREFERRED);
   19b74:	2101      	movs	r1, #1
   19b76:	4630      	mov	r0, r6
   19b78:	f016 fb80 	bl	3027c <net_if_ipv4_get_ll>
			if (addr) {
   19b7c:	4604      	mov	r4, r0
   19b7e:	2800      	cmp	r0, #0
   19b80:	d1f4      	bne.n	19b6c <net_if_ipv4_select_src_addr+0x50>
		     iface++) {
   19b82:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   19b84:	42be      	cmp	r6, r7
   19b86:	d1f5      	bne.n	19b74 <net_if_ipv4_select_src_addr+0x58>
		src = net_if_ipv4_get_global_addr(dst_iface,
   19b88:	2101      	movs	r1, #1
   19b8a:	4628      	mov	r0, r5
   19b8c:	f016 fb79 	bl	30282 <net_if_ipv4_get_global_addr>
		if (src) {
   19b90:	4604      	mov	r4, r0
   19b92:	2800      	cmp	r0, #0
   19b94:	d1ea      	bne.n	19b6c <net_if_ipv4_select_src_addr+0x50>
		return net_ipv4_unspecified_address();
   19b96:	f000 f957 	bl	19e48 <net_ipv4_unspecified_address>
   19b9a:	4604      	mov	r4, r0
   19b9c:	e7e6      	b.n	19b6c <net_if_ipv4_select_src_addr+0x50>
   19b9e:	4e04      	ldr	r6, [pc, #16]	; (19bb0 <net_if_ipv4_select_src_addr+0x94>)
		     !dst_iface && iface != __net_if_end;
   19ba0:	4f04      	ldr	r7, [pc, #16]	; (19bb4 <net_if_ipv4_select_src_addr+0x98>)
		for (iface = __net_if_start;
   19ba2:	2d00      	cmp	r5, #0
   19ba4:	d0ee      	beq.n	19b84 <net_if_ipv4_select_src_addr+0x68>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19ba6:	2101      	movs	r1, #1
   19ba8:	4628      	mov	r0, r5
   19baa:	f016 fb67 	bl	3027c <net_if_ipv4_get_ll>
   19bae:	e7ce      	b.n	19b4e <net_if_ipv4_select_src_addr+0x32>
   19bb0:	20020780 	.word	0x20020780
   19bb4:	200207a0 	.word	0x200207a0

00019bb8 <net_if_ipv4_addr_lookup>:

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
					    struct net_if **ret)
{
   19bb8:	b570      	push	{r4, r5, r6, lr}
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19bba:	4a0c      	ldr	r2, [pc, #48]	; (19bec <net_if_ipv4_addr_lookup+0x34>)
   19bbc:	4c0c      	ldr	r4, [pc, #48]	; (19bf0 <net_if_ipv4_addr_lookup+0x38>)
   19bbe:	42a2      	cmp	r2, r4
   19bc0:	d101      	bne.n	19bc6 <net_if_ipv4_addr_lookup+0xe>
				return &ipv4->unicast[i];
			}
		}
	}

	return NULL;
   19bc2:	2000      	movs	r0, #0
   19bc4:	e00e      	b.n	19be4 <net_if_ipv4_addr_lookup+0x2c>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   19bc6:	6853      	ldr	r3, [r2, #4]
		if (!ipv4) {
   19bc8:	b16b      	cbz	r3, 19be6 <net_if_ipv4_addr_lookup+0x2e>
			if (!ipv4->unicast[i].is_used ||
   19bca:	7d9d      	ldrb	r5, [r3, #22]
   19bcc:	07ad      	lsls	r5, r5, #30
   19bce:	d50a      	bpl.n	19be6 <net_if_ipv4_addr_lookup+0x2e>
   19bd0:	881d      	ldrh	r5, [r3, #0]
   19bd2:	2d01      	cmp	r5, #1
   19bd4:	d107      	bne.n	19be6 <net_if_ipv4_addr_lookup+0x2e>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
   19bd6:	6805      	ldr	r5, [r0, #0]
   19bd8:	685e      	ldr	r6, [r3, #4]
   19bda:	42ae      	cmp	r6, r5
   19bdc:	d103      	bne.n	19be6 <net_if_ipv4_addr_lookup+0x2e>
				if (ret) {
   19bde:	b101      	cbz	r1, 19be2 <net_if_ipv4_addr_lookup+0x2a>
					*ret = iface;
   19be0:	600a      	str	r2, [r1, #0]
				return &ipv4->unicast[i];
   19be2:	4618      	mov	r0, r3
}
   19be4:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19be6:	3220      	adds	r2, #32
   19be8:	e7e9      	b.n	19bbe <net_if_ipv4_addr_lookup+0x6>
   19bea:	bf00      	nop
   19bec:	20020780 	.word	0x20020780
   19bf0:	200207a0 	.word	0x200207a0

00019bf4 <net_if_ipv4_maddr_lookup>:
	return false;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
						   struct net_if **ret)
{
   19bf4:	b570      	push	{r4, r5, r6, lr}
	struct net_if_mcast_addr *addr;
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19bf6:	4a0f      	ldr	r2, [pc, #60]	; (19c34 <net_if_ipv4_maddr_lookup+0x40>)
   19bf8:	4c0f      	ldr	r4, [pc, #60]	; (19c38 <net_if_ipv4_maddr_lookup+0x44>)
   19bfa:	42a2      	cmp	r2, r4
   19bfc:	d101      	bne.n	19c02 <net_if_ipv4_maddr_lookup+0xe>

			return addr;
		}
	}

	return NULL;
   19bfe:	2000      	movs	r0, #0
   19c00:	e00e      	b.n	19c20 <net_if_ipv4_maddr_lookup+0x2c>
		if (ret && *ret && iface != *ret) {
   19c02:	b119      	cbz	r1, 19c0c <net_if_ipv4_maddr_lookup+0x18>
   19c04:	680b      	ldr	r3, [r1, #0]
   19c06:	b10b      	cbz	r3, 19c0c <net_if_ipv4_maddr_lookup+0x18>
   19c08:	4293      	cmp	r3, r2
   19c0a:	d10e      	bne.n	19c2a <net_if_ipv4_maddr_lookup+0x36>
		addr = ipv4_maddr_find(iface, true, maddr);
   19c0c:	6853      	ldr	r3, [r2, #4]
	if (!ipv4) {
   19c0e:	b163      	cbz	r3, 19c2a <net_if_ipv4_maddr_lookup+0x36>
		if ((is_used && !ipv4->mcast[i].is_used) ||
   19c10:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
   19c14:	07ed      	lsls	r5, r5, #31
   19c16:	d508      	bpl.n	19c2a <net_if_ipv4_maddr_lookup+0x36>
		if (addr) {
   19c18:	b918      	cbnz	r0, 19c22 <net_if_ipv4_maddr_lookup+0x2e>
		return &ipv4->mcast[i];
   19c1a:	f103 0018 	add.w	r0, r3, #24
			if (ret) {
   19c1e:	b931      	cbnz	r1, 19c2e <net_if_ipv4_maddr_lookup+0x3a>
}
   19c20:	bd70      	pop	{r4, r5, r6, pc}
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   19c22:	69de      	ldr	r6, [r3, #28]
   19c24:	6805      	ldr	r5, [r0, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
   19c26:	42ae      	cmp	r6, r5
   19c28:	d0f7      	beq.n	19c1a <net_if_ipv4_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19c2a:	3220      	adds	r2, #32
   19c2c:	e7e5      	b.n	19bfa <net_if_ipv4_maddr_lookup+0x6>
				*ret = iface;
   19c2e:	600a      	str	r2, [r1, #0]
   19c30:	e7f6      	b.n	19c20 <net_if_ipv4_maddr_lookup+0x2c>
   19c32:	bf00      	nop
   19c34:	20020780 	.word	0x20020780
   19c38:	200207a0 	.word	0x200207a0

00019c3c <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   19c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19c3e:	4b08      	ldr	r3, [pc, #32]	; (19c60 <net_if_call_link_cb+0x24>)
{
   19c40:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19c42:	681b      	ldr	r3, [r3, #0]
{
   19c44:	460e      	mov	r6, r1
   19c46:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19c48:	b14b      	cbz	r3, 19c5e <net_if_call_link_cb+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19c4a:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   19c4c:	685b      	ldr	r3, [r3, #4]
   19c4e:	463a      	mov	r2, r7
   19c50:	4631      	mov	r1, r6
   19c52:	4628      	mov	r0, r5
   19c54:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19c56:	b114      	cbz	r4, 19c5e <net_if_call_link_cb+0x22>
   19c58:	4623      	mov	r3, r4
   19c5a:	6824      	ldr	r4, [r4, #0]
   19c5c:	e7f6      	b.n	19c4c <net_if_call_link_cb+0x10>
	}
}
   19c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c60:	2002166c 	.word	0x2002166c

00019c64 <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   19c64:	2300      	movs	r3, #0
{
   19c66:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c68:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   19c6a:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   19c6e:	4b24      	ldr	r3, [pc, #144]	; (19d00 <process_tx_packet+0x9c>)
{
   19c70:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   19c72:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   19c74:	6a05      	ldr	r5, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   19c76:	b1ab      	cbz	r3, 19ca4 <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   19c78:	6b01      	ldr	r1, [r0, #48]	; 0x30
   19c7a:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   19c7e:	b189      	cbz	r1, 19ca4 <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   19c80:	2e06      	cmp	r6, #6
   19c82:	d80f      	bhi.n	19ca4 <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   19c84:	f10d 070a 	add.w	r7, sp, #10
   19c88:	2306      	movs	r3, #6
   19c8a:	4632      	mov	r2, r6
   19c8c:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
   19c8e:	f88d 6009 	strb.w	r6, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   19c92:	f019 fda2 	bl	337da <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   19c96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			ll_dst.addr = ll_dst_storage.addr;
   19c9a:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   19c9c:	f88d 6004 	strb.w	r6, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   19ca0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19ca4:	2100      	movs	r1, #0
   19ca6:	4628      	mov	r0, r5
	context = net_pkt_context(pkt);
   19ca8:	69e7      	ldr	r7, [r4, #28]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19caa:	f7ff fdf7 	bl	1989c <net_if_flag_is_set>
   19cae:	b320      	cbz	r0, 19cfa <process_tx_packet+0x96>
	return pkt->family;
   19cb0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		status = net_if_l2(iface)->send(iface, pkt);
   19cb4:	4628      	mov	r0, r5
		if (IS_ENABLED(CONFIG_NET_TCP) &&
   19cb6:	f013 0f0e 	tst.w	r3, #14
	pkt->pkt_queued = send;
   19cba:	bf1e      	ittt	ne
   19cbc:	f894 303e 	ldrbne.w	r3, [r4, #62]	; 0x3e
   19cc0:	f36f 0300 	bfcne	r3, #0, #1
   19cc4:	f884 303e 	strbne.w	r3, [r4, #62]	; 0x3e
		status = net_if_l2(iface)->send(iface, pkt);
   19cc8:	f016 fa69 	bl	3019e <net_if_l2>
   19ccc:	4621      	mov	r1, r4
   19cce:	6843      	ldr	r3, [r0, #4]
   19cd0:	4628      	mov	r0, r5
   19cd2:	4798      	blx	r3
	if (status < 0) {
   19cd4:	1e06      	subs	r6, r0, #0
   19cd6:	da02      	bge.n	19cde <process_tx_packet+0x7a>
		net_pkt_unref(pkt);
   19cd8:	4620      	mov	r0, r4
   19cda:	f016 fd96 	bl	3080a <net_pkt_unref>
	if (context) {
   19cde:	b11f      	cbz	r7, 19ce8 <process_tx_packet+0x84>
		net_context_send_cb(context, status);
   19ce0:	4631      	mov	r1, r6
   19ce2:	4638      	mov	r0, r7
   19ce4:	f016 fa60 	bl	301a8 <net_context_send_cb>
	if (ll_dst.addr) {
   19ce8:	9b00      	ldr	r3, [sp, #0]
   19cea:	b123      	cbz	r3, 19cf6 <process_tx_packet+0x92>
		net_if_call_link_cb(iface, &ll_dst, status);
   19cec:	4632      	mov	r2, r6
   19cee:	4669      	mov	r1, sp
   19cf0:	4628      	mov	r0, r5
   19cf2:	f7ff ffa3 	bl	19c3c <net_if_call_link_cb>
}
   19cf6:	b005      	add	sp, #20
   19cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   19cfa:	f06f 0672 	mvn.w	r6, #114	; 0x72
   19cfe:	e7eb      	b.n	19cd8 <process_tx_packet+0x74>
   19d00:	2002166c 	.word	0x2002166c

00019d04 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   19d04:	2800      	cmp	r0, #0
   19d06:	dd08      	ble.n	19d1a <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   19d08:	1e43      	subs	r3, r0, #1
   19d0a:	4805      	ldr	r0, [pc, #20]	; (19d20 <net_if_get_by_index+0x1c>)
   19d0c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   19d10:	4b04      	ldr	r3, [pc, #16]	; (19d24 <net_if_get_by_index+0x20>)
   19d12:	4298      	cmp	r0, r3
   19d14:	bf28      	it	cs
   19d16:	2000      	movcs	r0, #0
   19d18:	4770      	bx	lr
   19d1a:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   19d1c:	4770      	bx	lr
   19d1e:	bf00      	nop
   19d20:	20020780 	.word	0x20020780
   19d24:	200207a0 	.word	0x200207a0

00019d28 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   19d28:	4b06      	ldr	r3, [pc, #24]	; (19d44 <net_if_get_by_iface+0x1c>)
   19d2a:	4298      	cmp	r0, r3
   19d2c:	d306      	bcc.n	19d3c <net_if_get_by_iface+0x14>
   19d2e:	4a06      	ldr	r2, [pc, #24]	; (19d48 <net_if_get_by_iface+0x20>)
   19d30:	4290      	cmp	r0, r2
   19d32:	d203      	bcs.n	19d3c <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
   19d34:	1ac0      	subs	r0, r0, r3
   19d36:	1140      	asrs	r0, r0, #5
   19d38:	3001      	adds	r0, #1
   19d3a:	4770      	bx	lr
		return -1;
   19d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19d40:	4770      	bx	lr
   19d42:	bf00      	nop
   19d44:	20020780 	.word	0x20020780
   19d48:	200207a0 	.word	0x200207a0

00019d4c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   19d4c:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19d4e:	2100      	movs	r1, #0
{
   19d50:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19d52:	f7ff fda3 	bl	1989c <net_if_flag_is_set>
   19d56:	b928      	cbnz	r0, 19d64 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   19d58:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   19d5a:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   19d5c:	7e9b      	ldrb	r3, [r3, #26]
   19d5e:	b11b      	cbz	r3, 19d68 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   19d60:	f7ff fdfa 	bl	19958 <net_if_flag_set.constprop.32>
		return 0;
   19d64:	2000      	movs	r0, #0
   19d66:	e023      	b.n	19db0 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   19d68:	f016 fa19 	bl	3019e <net_if_l2>
   19d6c:	b9c0      	cbnz	r0, 19da0 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   19d6e:	682b      	ldr	r3, [r5, #0]
   19d70:	691b      	ldr	r3, [r3, #16]
   19d72:	b973      	cbnz	r3, 19d92 <net_if_up+0x46>
   19d74:	490f      	ldr	r1, [pc, #60]	; (19db4 <net_if_up+0x68>)
   19d76:	f640 53ba 	movw	r3, #3514	; 0xdba
   19d7a:	4a0f      	ldr	r2, [pc, #60]	; (19db8 <net_if_up+0x6c>)
   19d7c:	480f      	ldr	r0, [pc, #60]	; (19dbc <net_if_up+0x70>)
   19d7e:	f014 fa1d 	bl	2e1bc <printk>
   19d82:	480f      	ldr	r0, [pc, #60]	; (19dc0 <net_if_up+0x74>)
   19d84:	f014 fa1a 	bl	2e1bc <printk>
   19d88:	f640 51ba 	movw	r1, #3514	; 0xdba
   19d8c:	480a      	ldr	r0, [pc, #40]	; (19db8 <net_if_up+0x6c>)
   19d8e:	f014 fd16 	bl	2e7be <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   19d92:	4628      	mov	r0, r5
   19d94:	f7ff fde0 	bl	19958 <net_if_flag_set.constprop.32>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   19d98:	4628      	mov	r0, r5
   19d9a:	f016 fa0b 	bl	301b4 <l2_flags_get>
   19d9e:	e7e1      	b.n	19d64 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   19da0:	6883      	ldr	r3, [r0, #8]
   19da2:	2b00      	cmp	r3, #0
   19da4:	d0e3      	beq.n	19d6e <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   19da6:	2101      	movs	r1, #1
   19da8:	4628      	mov	r0, r5
   19daa:	4798      	blx	r3
	if (status < 0) {
   19dac:	2800      	cmp	r0, #0
   19dae:	dade      	bge.n	19d6e <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   19db0:	bd38      	pop	{r3, r4, r5, pc}
   19db2:	bf00      	nop
   19db4:	0003654f 	.word	0x0003654f
   19db8:	00036580 	.word	0x00036580
   19dbc:	00035920 	.word	0x00035920
   19dc0:	00035d7e 	.word	0x00035d7e

00019dc4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   19dc4:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   19dc6:	4c10      	ldr	r4, [pc, #64]	; (19e08 <net_if_init+0x44>)
	net_tc_tx_init();
   19dc8:	f000 ff48 	bl	1ac5c <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   19dcc:	4625      	mov	r5, r4
   19dce:	4e0f      	ldr	r6, [pc, #60]	; (19e0c <net_if_init+0x48>)
   19dd0:	42b4      	cmp	r4, r6
   19dd2:	d10e      	bne.n	19df2 <net_if_init+0x2e>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   19dd4:	42ac      	cmp	r4, r5
   19dd6:	d00b      	beq.n	19df0 <net_if_init+0x2c>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   19dd8:	2240      	movs	r2, #64	; 0x40
   19dda:	4b0d      	ldr	r3, [pc, #52]	; (19e10 <net_if_init+0x4c>)
	k_delayed_work_init(&router_timer, iface_router_expired);
   19ddc:	490d      	ldr	r1, [pc, #52]	; (19e14 <net_if_init+0x50>)
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   19dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	k_delayed_work_init(&router_timer, iface_router_expired);
   19de2:	480d      	ldr	r0, [pc, #52]	; (19e18 <net_if_init+0x54>)
   19de4:	f019 fc12 	bl	3360c <k_delayed_work_init>
	list->head = NULL;
   19de8:	2200      	movs	r2, #0
   19dea:	4b0c      	ldr	r3, [pc, #48]	; (19e1c <net_if_init+0x58>)
	list->tail = NULL;
   19dec:	e9c3 2200 	strd	r2, r2, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   19df0:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   19df2:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   19df4:	681b      	ldr	r3, [r3, #0]
   19df6:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   19df8:	b11b      	cbz	r3, 19e02 <net_if_init+0x3e>
   19dfa:	681b      	ldr	r3, [r3, #0]
   19dfc:	b10b      	cbz	r3, 19e02 <net_if_init+0x3e>
	api->init(iface);
   19dfe:	4620      	mov	r0, r4
   19e00:	4798      	blx	r3
	     iface++, if_count++) {
   19e02:	3420      	adds	r4, #32
   19e04:	e7e4      	b.n	19dd0 <net_if_init+0xc>
   19e06:	bf00      	nop
   19e08:	20020780 	.word	0x20020780
   19e0c:	200207a0 	.word	0x200207a0
   19e10:	2002162c 	.word	0x2002162c
   19e14:	00019a15 	.word	0x00019a15
   19e18:	20021674 	.word	0x20021674
   19e1c:	20021624 	.word	0x20021624

00019e20 <net_if_post_init>:

void net_if_post_init(void)
{
   19e20:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19e22:	4c07      	ldr	r4, [pc, #28]	; (19e40 <net_if_post_init+0x20>)
   19e24:	4d07      	ldr	r5, [pc, #28]	; (19e44 <net_if_post_init+0x24>)
   19e26:	42ac      	cmp	r4, r5
   19e28:	d100      	bne.n	19e2c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   19e2a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   19e2c:	2103      	movs	r1, #3
   19e2e:	4620      	mov	r0, r4
   19e30:	f7ff fd34 	bl	1989c <net_if_flag_is_set>
   19e34:	b910      	cbnz	r0, 19e3c <net_if_post_init+0x1c>
			net_if_up(iface);
   19e36:	4620      	mov	r0, r4
   19e38:	f7ff ff88 	bl	19d4c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19e3c:	3420      	adds	r4, #32
   19e3e:	e7f2      	b.n	19e26 <net_if_post_init+0x6>
   19e40:	20020780 	.word	0x20020780
   19e44:	200207a0 	.word	0x200207a0

00019e48 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
   19e48:	4800      	ldr	r0, [pc, #0]	; (19e4c <net_ipv4_unspecified_address+0x4>)
   19e4a:	4770      	bx	lr
   19e4c:	000349c4 	.word	0x000349c4

00019e50 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
   19e50:	4800      	ldr	r0, [pc, #0]	; (19e54 <net_ipv4_broadcast_address+0x4>)
   19e52:	4770      	bx	lr
   19e54:	000349c8 	.word	0x000349c8

00019e58 <net_context_is_used>:
{
   19e58:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19e5a:	4604      	mov	r4, r0
   19e5c:	b970      	cbnz	r0, 19e7c <net_context_is_used+0x24>
   19e5e:	490a      	ldr	r1, [pc, #40]	; (19e88 <net_context_is_used+0x30>)
   19e60:	f44f 73a9 	mov.w	r3, #338	; 0x152
   19e64:	4a09      	ldr	r2, [pc, #36]	; (19e8c <net_context_is_used+0x34>)
   19e66:	480a      	ldr	r0, [pc, #40]	; (19e90 <net_context_is_used+0x38>)
   19e68:	f014 f9a8 	bl	2e1bc <printk>
   19e6c:	4809      	ldr	r0, [pc, #36]	; (19e94 <net_context_is_used+0x3c>)
   19e6e:	f014 f9a5 	bl	2e1bc <printk>
   19e72:	f44f 71a9 	mov.w	r1, #338	; 0x152
   19e76:	4805      	ldr	r0, [pc, #20]	; (19e8c <net_context_is_used+0x34>)
   19e78:	f014 fca1 	bl	2e7be <assert_post_action>
	return context->flags & NET_CONTEXT_IN_USE;
   19e7c:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
}
   19e80:	f000 0001 	and.w	r0, r0, #1
   19e84:	bd10      	pop	{r4, pc}
   19e86:	bf00      	nop
   19e88:	00035d76 	.word	0x00035d76
   19e8c:	00035d49 	.word	0x00035d49
   19e90:	00035920 	.word	0x00035920
   19e94:	00035d7e 	.word	0x00035d7e

00019e98 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   19e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e9c:	460f      	mov	r7, r1
   19e9e:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   19ea0:	4680      	mov	r8, r0
   19ea2:	4c0f      	ldr	r4, [pc, #60]	; (19ee0 <check_used_port+0x48>)
   19ea4:	f504 7640 	add.w	r6, r4, #768	; 0x300
		if (!net_context_is_used(&contexts[i])) {
   19ea8:	4620      	mov	r0, r4
   19eaa:	f7ff ffd5 	bl	19e58 <net_context_is_used>
   19eae:	b170      	cbz	r0, 19ece <check_used_port+0x36>
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   19eb0:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   19eb4:	4543      	cmp	r3, r8
   19eb6:	d10a      	bne.n	19ece <check_used_port+0x36>
   19eb8:	8be3      	ldrh	r3, [r4, #30]
   19eba:	42bb      	cmp	r3, r7
   19ebc:	d107      	bne.n	19ece <check_used_port+0x36>
							     sin6_addr,
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   19ebe:	882b      	ldrh	r3, [r5, #0]
   19ec0:	2b01      	cmp	r3, #1
   19ec2:	d104      	bne.n	19ece <check_used_port+0x36>
   19ec4:	6a23      	ldr	r3, [r4, #32]
   19ec6:	686a      	ldr	r2, [r5, #4]
   19ec8:	681b      	ldr	r3, [r3, #0]
			   local_addr->sa_family == AF_INET) {
			if (net_ipv4_addr_cmp(
   19eca:	429a      	cmp	r2, r3
   19ecc:	d005      	beq.n	19eda <check_used_port+0x42>
   19ece:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19ed0:	42b4      	cmp	r4, r6
   19ed2:	d1e9      	bne.n	19ea8 <check_used_port+0x10>
				return -EEXIST;
			}
		}
	}

	return 0;
   19ed4:	2000      	movs	r0, #0
}
   19ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EEXIST;
   19eda:	f06f 0010 	mvn.w	r0, #16
   19ede:	e7fa      	b.n	19ed6 <check_used_port+0x3e>
   19ee0:	20021694 	.word	0x20021694

00019ee4 <net_context_get_state>:
{
   19ee4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19ee6:	4604      	mov	r4, r0
   19ee8:	b970      	cbnz	r0, 19f08 <net_context_get_state+0x24>
   19eea:	490a      	ldr	r1, [pc, #40]	; (19f14 <net_context_get_state+0x30>)
   19eec:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   19ef0:	4a09      	ldr	r2, [pc, #36]	; (19f18 <net_context_get_state+0x34>)
   19ef2:	480a      	ldr	r0, [pc, #40]	; (19f1c <net_context_get_state+0x38>)
   19ef4:	f014 f962 	bl	2e1bc <printk>
   19ef8:	4809      	ldr	r0, [pc, #36]	; (19f20 <net_context_get_state+0x3c>)
   19efa:	f014 f95f 	bl	2e1bc <printk>
   19efe:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   19f02:	4805      	ldr	r0, [pc, #20]	; (19f18 <net_context_get_state+0x34>)
   19f04:	f014 fc5b 	bl	2e7be <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   19f08:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   19f0c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   19f10:	bd10      	pop	{r4, pc}
   19f12:	bf00      	nop
   19f14:	00035d76 	.word	0x00035d76
   19f18:	00035d49 	.word	0x00035d49
   19f1c:	00035920 	.word	0x00035920
   19f20:	00035d7e 	.word	0x00035d7e

00019f24 <net_context_get_family>:
{
   19f24:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19f26:	4604      	mov	r4, r0
   19f28:	b970      	cbnz	r0, 19f48 <net_context_get_family+0x24>
   19f2a:	490a      	ldr	r1, [pc, #40]	; (19f54 <net_context_get_family+0x30>)
   19f2c:	f240 13cb 	movw	r3, #459	; 0x1cb
   19f30:	4a09      	ldr	r2, [pc, #36]	; (19f58 <net_context_get_family+0x34>)
   19f32:	480a      	ldr	r0, [pc, #40]	; (19f5c <net_context_get_family+0x38>)
   19f34:	f014 f942 	bl	2e1bc <printk>
   19f38:	4809      	ldr	r0, [pc, #36]	; (19f60 <net_context_get_family+0x3c>)
   19f3a:	f014 f93f 	bl	2e1bc <printk>
   19f3e:	f240 11cb 	movw	r1, #459	; 0x1cb
   19f42:	4805      	ldr	r0, [pc, #20]	; (19f58 <net_context_get_family+0x34>)
   19f44:	f014 fc3b 	bl	2e7be <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   19f48:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   19f4c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   19f50:	bd10      	pop	{r4, pc}
   19f52:	bf00      	nop
   19f54:	00035d76 	.word	0x00035d76
   19f58:	00035d49 	.word	0x00035d49
   19f5c:	00035920 	.word	0x00035920
   19f60:	00035d7e 	.word	0x00035d7e

00019f64 <net_context_get_type>:
{
   19f64:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19f66:	4604      	mov	r4, r0
   19f68:	b970      	cbnz	r0, 19f88 <net_context_get_type+0x24>
   19f6a:	490a      	ldr	r1, [pc, #40]	; (19f94 <net_context_get_type+0x30>)
   19f6c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   19f70:	4a09      	ldr	r2, [pc, #36]	; (19f98 <net_context_get_type+0x34>)
   19f72:	480a      	ldr	r0, [pc, #40]	; (19f9c <net_context_get_type+0x38>)
   19f74:	f014 f922 	bl	2e1bc <printk>
   19f78:	4809      	ldr	r0, [pc, #36]	; (19fa0 <net_context_get_type+0x3c>)
   19f7a:	f014 f91f 	bl	2e1bc <printk>
   19f7e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   19f82:	4805      	ldr	r0, [pc, #20]	; (19f98 <net_context_get_type+0x34>)
   19f84:	f014 fc1b 	bl	2e7be <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   19f88:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   19f8c:	f3c0 1081 	ubfx	r0, r0, #6, #2
   19f90:	bd10      	pop	{r4, pc}
   19f92:	bf00      	nop
   19f94:	00035d76 	.word	0x00035d76
   19f98:	00035d49 	.word	0x00035d49
   19f9c:	00035920 	.word	0x00035920
   19fa0:	00035d7e 	.word	0x00035d7e

00019fa4 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   19fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fa6:	4605      	mov	r5, r0
   19fa8:	460e      	mov	r6, r1
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   19faa:	4f08      	ldr	r7, [pc, #32]	; (19fcc <find_available_port+0x28>)
   19fac:	f002 faea 	bl	1c584 <sys_rand32_get>
   19fb0:	ea40 0407 	orr.w	r4, r0, r7
   19fb4:	ba64      	rev16	r4, r4
   19fb6:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
   19fb8:	4632      	mov	r2, r6
   19fba:	4621      	mov	r1, r4
   19fbc:	f895 0078 	ldrb.w	r0, [r5, #120]	; 0x78
   19fc0:	f7ff ff6a 	bl	19e98 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   19fc4:	3011      	adds	r0, #17
   19fc6:	d0f1      	beq.n	19fac <find_available_port+0x8>

	return htons(local_port);
}
   19fc8:	4620      	mov	r0, r4
   19fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fcc:	ffff8000 	.word	0xffff8000

00019fd0 <net_context_set_iface.isra.16>:
 * @details This function binds network interface to this context.
 *
 * @param context Network context.
 * @param iface Network interface.
 */
static inline void net_context_set_iface(struct net_context *context,
   19fd0:	b538      	push	{r3, r4, r5, lr}
   19fd2:	4605      	mov	r5, r0
					 struct net_if *iface)
{
	NET_ASSERT(iface);
   19fd4:	460c      	mov	r4, r1
   19fd6:	b971      	cbnz	r1, 19ff6 <net_context_set_iface.isra.16+0x26>
   19fd8:	4909      	ldr	r1, [pc, #36]	; (1a000 <net_context_set_iface.isra.16+0x30>)
   19fda:	f240 2381 	movw	r3, #641	; 0x281
   19fde:	4a09      	ldr	r2, [pc, #36]	; (1a004 <net_context_set_iface.isra.16+0x34>)
   19fe0:	4809      	ldr	r0, [pc, #36]	; (1a008 <net_context_set_iface.isra.16+0x38>)
   19fe2:	f014 f8eb 	bl	2e1bc <printk>
   19fe6:	4809      	ldr	r0, [pc, #36]	; (1a00c <net_context_set_iface.isra.16+0x3c>)
   19fe8:	f014 f8e8 	bl	2e1bc <printk>
   19fec:	f240 2181 	movw	r1, #641	; 0x281
   19ff0:	4804      	ldr	r0, [pc, #16]	; (1a004 <net_context_set_iface.isra.16+0x34>)
   19ff2:	f014 fbe4 	bl	2e7be <assert_post_action>

	context->iface = net_if_get_by_iface(iface);
   19ff6:	4620      	mov	r0, r4
   19ff8:	f7ff fe96 	bl	19d28 <net_if_get_by_iface>
   19ffc:	7028      	strb	r0, [r5, #0]
}
   19ffe:	bd38      	pop	{r3, r4, r5, pc}
   1a000:	00036549 	.word	0x00036549
   1a004:	00035d49 	.word	0x00035d49
   1a008:	00035920 	.word	0x00035920
   1a00c:	00035d7e 	.word	0x00035d7e

0001a010 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
   1a010:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a014:	4682      	mov	sl, r0
   1a016:	460e      	mov	r6, r1
   1a018:	4690      	mov	r8, r2
   1a01a:	4699      	mov	r9, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a01c:	2700      	movs	r7, #0
   1a01e:	4d2a      	ldr	r5, [pc, #168]	; (1a0c8 <net_context_packet_received+0xb8>)
		if (!net_context_is_used(&contexts[i])) {
   1a020:	4628      	mov	r0, r5
   1a022:	462c      	mov	r4, r5
   1a024:	f7ff ff18 	bl	19e58 <net_context_is_used>
   1a028:	b110      	cbz	r0, 1a030 <net_context_packet_received+0x20>
		if (contexts[i].conn_handler == conn_handler) {
   1a02a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a02c:	459a      	cmp	sl, r3
   1a02e:	d014      	beq.n	1a05a <net_context_packet_received+0x4a>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a030:	3701      	adds	r7, #1
   1a032:	2f06      	cmp	r7, #6
   1a034:	f105 0580 	add.w	r5, r5, #128	; 0x80
   1a038:	d1f2      	bne.n	1a020 <net_context_packet_received+0x10>
	struct net_context *context = find_context(conn);
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
   1a03a:	f240 63b9 	movw	r3, #1721	; 0x6b9
   1a03e:	4a23      	ldr	r2, [pc, #140]	; (1a0cc <net_context_packet_received+0xbc>)
   1a040:	4923      	ldr	r1, [pc, #140]	; (1a0d0 <net_context_packet_received+0xc0>)
   1a042:	4824      	ldr	r0, [pc, #144]	; (1a0d4 <net_context_packet_received+0xc4>)
   1a044:	f014 f8ba 	bl	2e1bc <printk>
   1a048:	4823      	ldr	r0, [pc, #140]	; (1a0d8 <net_context_packet_received+0xc8>)
   1a04a:	f014 f8b7 	bl	2e1bc <printk>
   1a04e:	f240 61b9 	movw	r1, #1721	; 0x6b9
   1a052:	481e      	ldr	r0, [pc, #120]	; (1a0cc <net_context_packet_received+0xbc>)
   1a054:	f014 fbb3 	bl	2e7be <assert_post_action>
	return NULL;
   1a058:	2400      	movs	r4, #0
	NET_ASSERT(net_pkt_iface(pkt));
   1a05a:	6a33      	ldr	r3, [r6, #32]
   1a05c:	b973      	cbnz	r3, 1a07c <net_context_packet_received+0x6c>
   1a05e:	491f      	ldr	r1, [pc, #124]	; (1a0dc <net_context_packet_received+0xcc>)
   1a060:	f240 63ba 	movw	r3, #1722	; 0x6ba
   1a064:	4a19      	ldr	r2, [pc, #100]	; (1a0cc <net_context_packet_received+0xbc>)
   1a066:	481b      	ldr	r0, [pc, #108]	; (1a0d4 <net_context_packet_received+0xc4>)
   1a068:	f014 f8a8 	bl	2e1bc <printk>
   1a06c:	481a      	ldr	r0, [pc, #104]	; (1a0d8 <net_context_packet_received+0xc8>)
   1a06e:	f014 f8a5 	bl	2e1bc <printk>
   1a072:	f240 61ba 	movw	r1, #1722	; 0x6ba
   1a076:	4815      	ldr	r0, [pc, #84]	; (1a0cc <net_context_packet_received+0xbc>)
   1a078:	f014 fba1 	bl	2e7be <assert_post_action>

	k_mutex_lock(&context->lock, K_FOREVER);
   1a07c:	f104 0708 	add.w	r7, r4, #8
   1a080:	4638      	mov	r0, r7
   1a082:	f016 fa1d 	bl	304c0 <k_mutex_lock.constprop.28>

	net_context_set_iface(context, net_pkt_iface(pkt));
   1a086:	6a31      	ldr	r1, [r6, #32]
   1a088:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1a08c:	f7ff ffa0 	bl	19fd0 <net_context_set_iface.isra.16>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
   1a090:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	pkt->context = ctx;
   1a094:	61f4      	str	r4, [r6, #28]
   1a096:	f1ba 0f00 	cmp.w	sl, #0
   1a09a:	d013      	beq.n	1a0c4 <net_context_packet_received+0xb4>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   1a09c:	2500      	movs	r5, #0
   1a09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a0a0:	9500      	str	r5, [sp, #0]
   1a0a2:	9301      	str	r3, [sp, #4]
   1a0a4:	4642      	mov	r2, r8
   1a0a6:	464b      	mov	r3, r9
   1a0a8:	4631      	mov	r1, r6
   1a0aa:	4620      	mov	r0, r4
   1a0ac:	47d0      	blx	sl
	z_impl_k_sem_give(sem);
   1a0ae:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1a0b2:	f00f fb9b 	bl	297ec <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
   1a0b6:	4638      	mov	r0, r7
   1a0b8:	f016 f9e5 	bl	30486 <k_mutex_unlock>

	return verdict;
}
   1a0bc:	4628      	mov	r0, r5
   1a0be:	b002      	add	sp, #8
   1a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	enum net_verdict verdict = NET_DROP;
   1a0c4:	2502      	movs	r5, #2
   1a0c6:	e7f6      	b.n	1a0b6 <net_context_packet_received+0xa6>
   1a0c8:	20021694 	.word	0x20021694
   1a0cc:	00036728 	.word	0x00036728
   1a0d0:	00035d76 	.word	0x00035d76
   1a0d4:	00035920 	.word	0x00035920
   1a0d8:	00035d7e 	.word	0x00035d7e
   1a0dc:	00036757 	.word	0x00036757

0001a0e0 <net_context_get>:
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1a0e0:	2802      	cmp	r0, #2
{
   1a0e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e6:	4607      	mov	r7, r0
   1a0e8:	468a      	mov	sl, r1
   1a0ea:	4690      	mov	r8, r2
   1a0ec:	4699      	mov	r9, r3
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1a0ee:	f000 809d 	beq.w	1a22c <net_context_get+0x14c>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   1a0f2:	2804      	cmp	r0, #4
   1a0f4:	f000 809a 	beq.w	1a22c <net_context_get+0x14c>
		if (type == SOCK_RAW) {
   1a0f8:	2903      	cmp	r1, #3
   1a0fa:	d003      	beq.n	1a104 <net_context_get+0x24>
			if (family == AF_PACKET || family == AF_CAN) {
   1a0fc:	1ec3      	subs	r3, r0, #3
   1a0fe:	2b01      	cmp	r3, #1
   1a100:	f240 809a 	bls.w	1a238 <net_context_get+0x158>
		if (family != AF_INET && family != AF_INET6 &&
   1a104:	1e7b      	subs	r3, r7, #1
   1a106:	2b03      	cmp	r3, #3
   1a108:	f200 8093 	bhi.w	1a232 <net_context_get+0x152>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
   1a10c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1a110:	2b02      	cmp	r3, #2
   1a112:	f200 8091 	bhi.w	1a238 <net_context_get+0x158>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   1a116:	f1ba 0f03 	cmp.w	sl, #3
   1a11a:	d00a      	beq.n	1a132 <net_context_get+0x52>
   1a11c:	f1b8 0f11 	cmp.w	r8, #17
   1a120:	f000 8090 	beq.w	1a244 <net_context_get+0x164>
   1a124:	f1b8 0f06 	cmp.w	r8, #6
   1a128:	f000 8093 	beq.w	1a252 <net_context_get+0x172>
			return -EPROTONOSUPPORT;
   1a12c:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1a130:	e01f      	b.n	1a172 <net_context_get+0x92>
		if (!context) {
   1a132:	f1b9 0f00 	cmp.w	r9, #0
   1a136:	f000 8082 	beq.w	1a23e <net_context_get+0x15e>
	return z_impl_k_sem_take(sem, timeout);
   1a13a:	4c47      	ldr	r4, [pc, #284]	; (1a258 <net_context_get+0x178>)
   1a13c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a140:	4846      	ldr	r0, [pc, #280]	; (1a25c <net_context_get+0x17c>)
   1a142:	f00f fb97 	bl	29874 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a146:	f04f 0b00 	mov.w	fp, #0
   1a14a:	4626      	mov	r6, r4
		if (net_context_is_used(&contexts[i])) {
   1a14c:	4620      	mov	r0, r4
   1a14e:	f7ff fe83 	bl	19e58 <net_context_is_used>
   1a152:	ea4f 15cb 	mov.w	r5, fp, lsl #7
   1a156:	4601      	mov	r1, r0
   1a158:	b170      	cbz	r0, 1a178 <net_context_get+0x98>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a15a:	f10b 0b01 	add.w	fp, fp, #1
   1a15e:	f1bb 0f06 	cmp.w	fp, #6
   1a162:	f104 0480 	add.w	r4, r4, #128	; 0x80
   1a166:	d1f1      	bne.n	1a14c <net_context_get+0x6c>
	int i, ret = -ENOENT;
   1a168:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
   1a16c:	483b      	ldr	r0, [pc, #236]	; (1a25c <net_context_get+0x17c>)
   1a16e:	f00f fb3d 	bl	297ec <z_impl_k_sem_give>
}
   1a172:	4620      	mov	r0, r4
   1a174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
   1a178:	2280      	movs	r2, #128	; 0x80
   1a17a:	4620      	mov	r0, r4
   1a17c:	f019 fb5a 	bl	33834 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
   1a180:	f7ff fc90 	bl	19aa4 <net_if_get_default>
			&& ip_proto == IPPROTO_TCP) {
   1a184:	f1b8 0f06 	cmp.w	r8, #6
   1a188:	d032      	beq.n	1a1f0 <net_context_get+0x110>
		contexts[i].iface = -1;
   1a18a:	22ff      	movs	r2, #255	; 0xff
   1a18c:	1973      	adds	r3, r6, r5
   1a18e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		contexts[i].flags = 0U;
   1a192:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a194:	2001      	movs	r0, #1
   1a196:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
   1a19a:	1d19      	adds	r1, r3, #4
   1a19c:	e8d1 cfef 	ldaex	ip, [r1]
   1a1a0:	e8c1 0fee 	stlex	lr, r0, [r1]
   1a1a4:	f1be 0f00 	cmp.w	lr, #0
   1a1a8:	d1f8      	bne.n	1a19c <net_context_get+0xbc>
		flag = family << 3;
   1a1aa:	00f9      	lsls	r1, r7, #3
	context->flags |= flag;
   1a1ac:	f8b3 007a 	ldrh.w	r0, [r3, #122]	; 0x7a
	context->flags |= flag;
   1a1b0:	b2c9      	uxtb	r1, r1
	context->flags |= flag;
   1a1b2:	ea41 118a 	orr.w	r1, r1, sl, lsl #6
   1a1b6:	4301      	orrs	r1, r0
   1a1b8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
			(void)memset(&contexts[i].remote, 0,
   1a1bc:	f105 0324 	add.w	r3, r5, #36	; 0x24
	context->proto = proto;
   1a1c0:	f8a4 8078 	strh.w	r8, [r4, #120]	; 0x78
   1a1c4:	18f1      	adds	r1, r6, r3
   1a1c6:	50f2      	str	r2, [r6, r3]
			(void)memset(&contexts[i].local, 0,
   1a1c8:	f105 031c 	add.w	r3, r5, #28
   1a1cc:	eb06 0803 	add.w	r8, r6, r3
		if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1a1d0:	2f01      	cmp	r7, #1
   1a1d2:	604a      	str	r2, [r1, #4]
   1a1d4:	50f2      	str	r2, [r6, r3]
   1a1d6:	f8c8 2004 	str.w	r2, [r8, #4]
   1a1da:	d10f      	bne.n	1a1fc <net_context_get+0x11c>
			addr->sin_port = find_available_port(&contexts[i],
   1a1dc:	4641      	mov	r1, r8
   1a1de:	4620      	mov	r0, r4
   1a1e0:	f7ff fee0 	bl	19fa4 <find_available_port>
   1a1e4:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr->sin_port) {
   1a1e8:	b940      	cbnz	r0, 1a1fc <net_context_get+0x11c>
				ret = -EADDRINUSE;
   1a1ea:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1a1ee:	e7bd      	b.n	1a16c <net_context_get+0x8c>
			if (net_tcp_get(&contexts[i]) < 0) {
   1a1f0:	4620      	mov	r0, r4
   1a1f2:	f001 ff43 	bl	1c07c <net_tcp_get>
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	dac7      	bge.n	1a18a <net_context_get+0xaa>
   1a1fa:	e7b5      	b.n	1a168 <net_context_get+0x88>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1a1fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a204:	2101      	movs	r1, #1
   1a206:	4430      	add	r0, r6
   1a208:	f019 f981 	bl	3350e <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
   1a20c:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_mutex_init(mutex);
   1a210:	4430      	add	r0, r6
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1a212:	4435      	add	r5, r6
   1a214:	f019 f91c 	bl	33450 <z_impl_k_mutex_init>
   1a218:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
   1a21c:	f043 0301 	orr.w	r3, r3, #1
   1a220:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
		*context = &contexts[i];
   1a224:	f8c9 4000 	str.w	r4, [r9]
		ret = 0;
   1a228:	2400      	movs	r4, #0
		break;
   1a22a:	e79f      	b.n	1a16c <net_context_get+0x8c>
			return -EPFNOSUPPORT;
   1a22c:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1a230:	e79f      	b.n	1a172 <net_context_get+0x92>
			return -EAFNOSUPPORT;
   1a232:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1a236:	e79c      	b.n	1a172 <net_context_get+0x92>
				return -EPROTOTYPE;
   1a238:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1a23c:	e799      	b.n	1a172 <net_context_get+0x92>
			return -EINVAL;
   1a23e:	f06f 0415 	mvn.w	r4, #21
   1a242:	e796      	b.n	1a172 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1a244:	f1ba 0f01 	cmp.w	sl, #1
   1a248:	f47f af73 	bne.w	1a132 <net_context_get+0x52>
			return -EOPNOTSUPP;
   1a24c:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1a250:	e78f      	b.n	1a172 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1a252:	f1ba 0f02 	cmp.w	sl, #2
   1a256:	e7f7      	b.n	1a248 <net_context_get+0x168>
   1a258:	20021694 	.word	0x20021694
   1a25c:	20021994 	.word	0x20021994

0001a260 <net_context_put>:
{
   1a260:	b570      	push	{r4, r5, r6, lr}
	NET_ASSERT(context);
   1a262:	4605      	mov	r5, r0
   1a264:	b988      	cbnz	r0, 1a28a <net_context_put+0x2a>
   1a266:	4916      	ldr	r1, [pc, #88]	; (1a2c0 <net_context_put+0x60>)
   1a268:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1a26c:	4a15      	ldr	r2, [pc, #84]	; (1a2c4 <net_context_put+0x64>)
   1a26e:	4816      	ldr	r0, [pc, #88]	; (1a2c8 <net_context_put+0x68>)
   1a270:	f013 ffa4 	bl	2e1bc <printk>
   1a274:	4815      	ldr	r0, [pc, #84]	; (1a2cc <net_context_put+0x6c>)
   1a276:	f013 ffa1 	bl	2e1bc <printk>
   1a27a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1a27e:	4811      	ldr	r0, [pc, #68]	; (1a2c4 <net_context_put+0x64>)
   1a280:	f014 fa9d 	bl	2e7be <assert_post_action>
		return -EINVAL;
   1a284:	f06f 0015 	mvn.w	r0, #21
   1a288:	e019      	b.n	1a2be <net_context_put+0x5e>
	if (!PART_OF_ARRAY(contexts, context)) {
   1a28a:	4b11      	ldr	r3, [pc, #68]	; (1a2d0 <net_context_put+0x70>)
   1a28c:	4298      	cmp	r0, r3
   1a28e:	d3f9      	bcc.n	1a284 <net_context_put+0x24>
   1a290:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a294:	429d      	cmp	r5, r3
   1a296:	d2f5      	bcs.n	1a284 <net_context_put+0x24>
	context->connect_cb = NULL;
   1a298:	2400      	movs	r4, #0
	k_mutex_lock(&context->lock, K_FOREVER);
   1a29a:	f105 0608 	add.w	r6, r5, #8
   1a29e:	4630      	mov	r0, r6
   1a2a0:	f016 f90e 	bl	304c0 <k_mutex_lock.constprop.28>
	context->connect_cb = NULL;
   1a2a4:	63ac      	str	r4, [r5, #56]	; 0x38
	context->send_cb = NULL;
   1a2a6:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
	net_context_unref(context);
   1a2aa:	4628      	mov	r0, r5
   1a2ac:	f016 f916 	bl	304dc <net_context_unref>
	net_tcp_put(context);
   1a2b0:	4628      	mov	r0, r5
   1a2b2:	f017 fbc2 	bl	31a3a <net_tcp_put>
	k_mutex_unlock(&context->lock);
   1a2b6:	4630      	mov	r0, r6
   1a2b8:	f016 f8e5 	bl	30486 <k_mutex_unlock>
	return ret;
   1a2bc:	4620      	mov	r0, r4
}
   1a2be:	bd70      	pop	{r4, r5, r6, pc}
   1a2c0:	00035d76 	.word	0x00035d76
   1a2c4:	00036728 	.word	0x00036728
   1a2c8:	00035920 	.word	0x00035920
   1a2cc:	00035d7e 	.word	0x00035d7e
   1a2d0:	20021694 	.word	0x20021694

0001a2d4 <net_context_bind>:
{
   1a2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a2d6:	4605      	mov	r5, r0
   1a2d8:	4614      	mov	r4, r2
	NET_ASSERT(addr);
   1a2da:	460e      	mov	r6, r1
   1a2dc:	b971      	cbnz	r1, 1a2fc <net_context_bind+0x28>
   1a2de:	493c      	ldr	r1, [pc, #240]	; (1a3d0 <net_context_bind+0xfc>)
   1a2e0:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   1a2e4:	4a3b      	ldr	r2, [pc, #236]	; (1a3d4 <net_context_bind+0x100>)
   1a2e6:	483c      	ldr	r0, [pc, #240]	; (1a3d8 <net_context_bind+0x104>)
   1a2e8:	f013 ff68 	bl	2e1bc <printk>
   1a2ec:	483b      	ldr	r0, [pc, #236]	; (1a3dc <net_context_bind+0x108>)
   1a2ee:	f013 ff65 	bl	2e1bc <printk>
   1a2f2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1a2f6:	4837      	ldr	r0, [pc, #220]	; (1a3d4 <net_context_bind+0x100>)
   1a2f8:	f014 fa61 	bl	2e7be <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a2fc:	b135      	cbz	r5, 1a30c <net_context_bind+0x38>
   1a2fe:	4b38      	ldr	r3, [pc, #224]	; (1a3e0 <net_context_bind+0x10c>)
   1a300:	429d      	cmp	r5, r3
   1a302:	d303      	bcc.n	1a30c <net_context_bind+0x38>
   1a304:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a308:	429d      	cmp	r5, r3
   1a30a:	d30e      	bcc.n	1a32a <net_context_bind+0x56>
   1a30c:	4935      	ldr	r1, [pc, #212]	; (1a3e4 <net_context_bind+0x110>)
   1a30e:	f240 13eb 	movw	r3, #491	; 0x1eb
   1a312:	4a30      	ldr	r2, [pc, #192]	; (1a3d4 <net_context_bind+0x100>)
   1a314:	4830      	ldr	r0, [pc, #192]	; (1a3d8 <net_context_bind+0x104>)
   1a316:	f013 ff51 	bl	2e1bc <printk>
   1a31a:	4830      	ldr	r0, [pc, #192]	; (1a3dc <net_context_bind+0x108>)
   1a31c:	f013 ff4e 	bl	2e1bc <printk>
   1a320:	f240 11eb 	movw	r1, #491	; 0x1eb
   1a324:	482b      	ldr	r0, [pc, #172]	; (1a3d4 <net_context_bind+0x100>)
   1a326:	f014 fa4a 	bl	2e7be <assert_post_action>
	if (context->conn_handler) {
   1a32a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a32c:	2b00      	cmp	r3, #0
   1a32e:	d148      	bne.n	1a3c2 <net_context_bind+0xee>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
   1a330:	8832      	ldrh	r2, [r6, #0]
   1a332:	2a01      	cmp	r2, #1
   1a334:	d148      	bne.n	1a3c8 <net_context_bind+0xf4>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a336:	2c07      	cmp	r4, #7
		struct net_if *iface = NULL;
   1a338:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a33a:	d945      	bls.n	1a3c8 <net_context_bind+0xf4>
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
   1a33c:	1d32      	adds	r2, r6, #4
   1a33e:	4610      	mov	r0, r2
   1a340:	f016 f898 	bl	30474 <net_ipv4_is_addr_mcast>
   1a344:	b148      	cbz	r0, 1a35a <net_context_bind+0x86>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
   1a346:	a901      	add	r1, sp, #4
   1a348:	4610      	mov	r0, r2
   1a34a:	f7ff fc53 	bl	19bf4 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
   1a34e:	bb78      	cbnz	r0, 1a3b0 <net_context_bind+0xdc>
				return -ENOENT;
   1a350:	f06f 0401 	mvn.w	r4, #1
}
   1a354:	4620      	mov	r0, r4
   1a356:	b003      	add	sp, #12
   1a358:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
   1a35a:	6873      	ldr	r3, [r6, #4]
   1a35c:	bb1b      	cbnz	r3, 1a3a6 <net_context_bind+0xd2>
			iface = net_if_ipv4_select_src_iface(
   1a35e:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1a362:	f7ff fbc1 	bl	19ae8 <net_if_ipv4_select_src_iface>
   1a366:	9001      	str	r0, [sp, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
   1a368:	f7ff fd6e 	bl	19e48 <net_ipv4_unspecified_address>
   1a36c:	4604      	mov	r4, r0
		if (!iface) {
   1a36e:	9b01      	ldr	r3, [sp, #4]
   1a370:	b323      	cbz	r3, 1a3bc <net_context_bind+0xe8>
		k_mutex_lock(&context->lock, K_FOREVER);
   1a372:	f105 0708 	add.w	r7, r5, #8
   1a376:	4638      	mov	r0, r7
   1a378:	f016 f8a2 	bl	304c0 <k_mutex_lock.constprop.28>
		net_context_set_iface(context, iface);
   1a37c:	9901      	ldr	r1, [sp, #4]
   1a37e:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   1a382:	f7ff fe25 	bl	19fd0 <net_context_set_iface.isra.16>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a386:	2001      	movs	r0, #1
		if (addr4->sin_port) {
   1a388:	8871      	ldrh	r1, [r6, #2]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a38a:	83a8      	strh	r0, [r5, #28]
		net_sin_ptr(&context->local)->sin_addr = ptr;
   1a38c:	622c      	str	r4, [r5, #32]
		if (addr4->sin_port) {
   1a38e:	b189      	cbz	r1, 1a3b4 <net_context_bind+0xe0>
			ret = check_used_port(AF_INET, addr4->sin_port,
   1a390:	4632      	mov	r2, r6
   1a392:	f7ff fd81 	bl	19e98 <check_used_port>
			if (!ret) {
   1a396:	4604      	mov	r4, r0
   1a398:	b908      	cbnz	r0, 1a39e <net_context_bind+0xca>
				net_sin_ptr(&context->local)->sin_port =
   1a39a:	8873      	ldrh	r3, [r6, #2]
   1a39c:	83eb      	strh	r3, [r5, #30]
		k_mutex_unlock(&context->lock);
   1a39e:	4638      	mov	r0, r7
   1a3a0:	f016 f871 	bl	30486 <k_mutex_unlock>
		return ret;
   1a3a4:	e7d6      	b.n	1a354 <net_context_bind+0x80>
			ifaddr = net_if_ipv4_addr_lookup(&addr4->sin_addr,
   1a3a6:	a901      	add	r1, sp, #4
   1a3a8:	4610      	mov	r0, r2
   1a3aa:	f7ff fc05 	bl	19bb8 <net_if_ipv4_addr_lookup>
   1a3ae:	e7ce      	b.n	1a34e <net_context_bind+0x7a>
			ptr = &ifaddr->address.in_addr;
   1a3b0:	1d04      	adds	r4, r0, #4
   1a3b2:	e7dc      	b.n	1a36e <net_context_bind+0x9a>
			addr4->sin_port =
   1a3b4:	8beb      	ldrh	r3, [r5, #30]
   1a3b6:	460c      	mov	r4, r1
   1a3b8:	8073      	strh	r3, [r6, #2]
   1a3ba:	e7f0      	b.n	1a39e <net_context_bind+0xca>
			return -EADDRNOTAVAIL;
   1a3bc:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1a3c0:	e7c8      	b.n	1a354 <net_context_bind+0x80>
		return -EISCONN;
   1a3c2:	f06f 047e 	mvn.w	r4, #126	; 0x7e
   1a3c6:	e7c5      	b.n	1a354 <net_context_bind+0x80>
	return -EINVAL;
   1a3c8:	f06f 0415 	mvn.w	r4, #21
   1a3cc:	e7c2      	b.n	1a354 <net_context_bind+0x80>
   1a3ce:	bf00      	nop
   1a3d0:	00036723 	.word	0x00036723
   1a3d4:	00036728 	.word	0x00036728
   1a3d8:	00035920 	.word	0x00035920
   1a3dc:	00035d7e 	.word	0x00035d7e
   1a3e0:	20021694 	.word	0x20021694
   1a3e4:	000365aa 	.word	0x000365aa

0001a3e8 <net_context_listen>:
{
   1a3e8:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a3ea:	4604      	mov	r4, r0
   1a3ec:	b130      	cbz	r0, 1a3fc <net_context_listen+0x14>
   1a3ee:	4b18      	ldr	r3, [pc, #96]	; (1a450 <net_context_listen+0x68>)
   1a3f0:	4298      	cmp	r0, r3
   1a3f2:	d303      	bcc.n	1a3fc <net_context_listen+0x14>
   1a3f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a3f8:	4298      	cmp	r0, r3
   1a3fa:	d30e      	bcc.n	1a41a <net_context_listen+0x32>
   1a3fc:	4915      	ldr	r1, [pc, #84]	; (1a454 <net_context_listen+0x6c>)
   1a3fe:	f240 331d 	movw	r3, #797	; 0x31d
   1a402:	4a15      	ldr	r2, [pc, #84]	; (1a458 <net_context_listen+0x70>)
   1a404:	4815      	ldr	r0, [pc, #84]	; (1a45c <net_context_listen+0x74>)
   1a406:	f013 fed9 	bl	2e1bc <printk>
   1a40a:	4815      	ldr	r0, [pc, #84]	; (1a460 <net_context_listen+0x78>)
   1a40c:	f013 fed6 	bl	2e1bc <printk>
   1a410:	f240 311d 	movw	r1, #797	; 0x31d
   1a414:	4810      	ldr	r0, [pc, #64]	; (1a458 <net_context_listen+0x70>)
   1a416:	f014 f9d2 	bl	2e7be <assert_post_action>
	if (!net_context_is_used(context)) {
   1a41a:	4620      	mov	r0, r4
   1a41c:	f7ff fd1c 	bl	19e58 <net_context_is_used>
   1a420:	b198      	cbz	r0, 1a44a <net_context_listen+0x62>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a422:	f104 0508 	add.w	r5, r4, #8
   1a426:	4628      	mov	r0, r5
   1a428:	f016 f84a 	bl	304c0 <k_mutex_lock.constprop.28>
	if (net_tcp_listen(context) >= 0) {
   1a42c:	4620      	mov	r0, r4
   1a42e:	f017 fb54 	bl	31ada <net_tcp_listen>
   1a432:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
   1a434:	4628      	mov	r0, r5
	if (net_tcp_listen(context) >= 0) {
   1a436:	db03      	blt.n	1a440 <net_context_listen+0x58>
		k_mutex_unlock(&context->lock);
   1a438:	f016 f825 	bl	30486 <k_mutex_unlock>
		return 0;
   1a43c:	2000      	movs	r0, #0
}
   1a43e:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_unlock(&context->lock);
   1a440:	f016 f821 	bl	30486 <k_mutex_unlock>
	return -EOPNOTSUPP;
   1a444:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1a448:	e7f9      	b.n	1a43e <net_context_listen+0x56>
		return -EBADF;
   1a44a:	f06f 0008 	mvn.w	r0, #8
   1a44e:	e7f6      	b.n	1a43e <net_context_listen+0x56>
   1a450:	20021694 	.word	0x20021694
   1a454:	000365aa 	.word	0x000365aa
   1a458:	00036728 	.word	0x00036728
   1a45c:	00035920 	.word	0x00035920
   1a460:	00035d7e 	.word	0x00035d7e

0001a464 <net_context_create_ipv4_new>:
{
   1a464:	b570      	push	{r4, r5, r6, lr}
   1a466:	460c      	mov	r4, r1
   1a468:	4605      	mov	r5, r0
   1a46a:	461e      	mov	r6, r3
	if (!src) {
   1a46c:	4611      	mov	r1, r2
   1a46e:	b98a      	cbnz	r2, 1a494 <net_context_create_ipv4_new+0x30>
		NET_ASSERT(((
   1a470:	6a03      	ldr	r3, [r0, #32]
   1a472:	b973      	cbnz	r3, 1a492 <net_context_create_ipv4_new+0x2e>
   1a474:	4914      	ldr	r1, [pc, #80]	; (1a4c8 <net_context_create_ipv4_new+0x64>)
   1a476:	f240 333d 	movw	r3, #829	; 0x33d
   1a47a:	4a14      	ldr	r2, [pc, #80]	; (1a4cc <net_context_create_ipv4_new+0x68>)
   1a47c:	4814      	ldr	r0, [pc, #80]	; (1a4d0 <net_context_create_ipv4_new+0x6c>)
   1a47e:	f013 fe9d 	bl	2e1bc <printk>
   1a482:	4814      	ldr	r0, [pc, #80]	; (1a4d4 <net_context_create_ipv4_new+0x70>)
   1a484:	f013 fe9a 	bl	2e1bc <printk>
   1a488:	f240 313d 	movw	r1, #829	; 0x33d
   1a48c:	480f      	ldr	r0, [pc, #60]	; (1a4cc <net_context_create_ipv4_new+0x68>)
   1a48e:	f014 f996 	bl	2e7be <assert_post_action>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   1a492:	6a29      	ldr	r1, [r5, #32]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1a494:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
   1a496:	b11b      	cbz	r3, 1a4a0 <net_context_create_ipv4_new+0x3c>
	    || net_ipv4_is_addr_mcast(src)) {
   1a498:	4608      	mov	r0, r1
   1a49a:	f015 ffeb 	bl	30474 <net_ipv4_is_addr_mcast>
   1a49e:	b130      	cbz	r0, 1a4ae <net_context_create_ipv4_new+0x4a>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   1a4a0:	4631      	mov	r1, r6
   1a4a2:	6a20      	ldr	r0, [r4, #32]
   1a4a4:	f7ff fb3a 	bl	19b1c <net_if_ipv4_select_src_addr>
   1a4a8:	6803      	ldr	r3, [r0, #0]
   1a4aa:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
   1a4ac:	b14b      	cbz	r3, 1a4c2 <net_context_create_ipv4_new+0x5e>
	net_pkt_set_ipv4_ttl(pkt, net_context_get_ipv4_ttl(context));
   1a4ae:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
	return net_ipv4_create(pkt, src, dst);
   1a4b2:	4632      	mov	r2, r6
	pkt->ipv4_ttl = ttl;
   1a4b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1a4b8:	4620      	mov	r0, r4
}
   1a4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
   1a4be:	f016 bd3c 	b.w	30f3a <net_ipv4_create>
}
   1a4c2:	f06f 0015 	mvn.w	r0, #21
   1a4c6:	bd70      	pop	{r4, r5, r6, pc}
   1a4c8:	000366f1 	.word	0x000366f1
   1a4cc:	00036728 	.word	0x00036728
   1a4d0:	00035920 	.word	0x00035920
   1a4d4:	00035d7e 	.word	0x00035d7e

0001a4d8 <context_sendto.isra.21>:
static int context_sendto(struct net_context *context,
   1a4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4dc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1a4e0:	4689      	mov	r9, r1
   1a4e2:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
   1a4e6:	4617      	mov	r7, r2
   1a4e8:	461d      	mov	r5, r3
   1a4ea:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a4ee:	4604      	mov	r4, r0
   1a4f0:	b130      	cbz	r0, 1a500 <context_sendto.isra.21+0x28>
   1a4f2:	4b79      	ldr	r3, [pc, #484]	; (1a6d8 <context_sendto.isra.21+0x200>)
   1a4f4:	4298      	cmp	r0, r3
   1a4f6:	d303      	bcc.n	1a500 <context_sendto.isra.21+0x28>
   1a4f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a4fc:	4298      	cmp	r0, r3
   1a4fe:	d30e      	bcc.n	1a51e <context_sendto.isra.21+0x46>
   1a500:	4976      	ldr	r1, [pc, #472]	; (1a6dc <context_sendto.isra.21+0x204>)
   1a502:	f240 534c 	movw	r3, #1356	; 0x54c
   1a506:	4a76      	ldr	r2, [pc, #472]	; (1a6e0 <context_sendto.isra.21+0x208>)
   1a508:	4876      	ldr	r0, [pc, #472]	; (1a6e4 <context_sendto.isra.21+0x20c>)
   1a50a:	f013 fe57 	bl	2e1bc <printk>
   1a50e:	4876      	ldr	r0, [pc, #472]	; (1a6e8 <context_sendto.isra.21+0x210>)
   1a510:	f013 fe54 	bl	2e1bc <printk>
   1a514:	f240 514c 	movw	r1, #1356	; 0x54c
   1a518:	4871      	ldr	r0, [pc, #452]	; (1a6e0 <context_sendto.isra.21+0x208>)
   1a51a:	f014 f950 	bl	2e7be <assert_post_action>
	if (!net_context_is_used(context)) {
   1a51e:	4620      	mov	r0, r4
   1a520:	f7ff fc9a 	bl	19e58 <net_context_is_used>
   1a524:	2800      	cmp	r0, #0
   1a526:	f000 80d0 	beq.w	1a6ca <context_sendto.isra.21+0x1f2>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a52a:	f1b8 0f00 	cmp.w	r8, #0
   1a52e:	d00b      	beq.n	1a548 <context_sendto.isra.21+0x70>
   1a530:	b956      	cbnz	r6, 1a548 <context_sendto.isra.21+0x70>
   1a532:	b95d      	cbnz	r5, 1a54c <context_sendto.isra.21+0x74>
   1a534:	f1b9 0f00 	cmp.w	r9, #0
   1a538:	f040 8093 	bne.w	1a662 <context_sendto.isra.21+0x18a>
		return -EDESTADDRREQ;
   1a53c:	f06f 0578 	mvn.w	r5, #120	; 0x78
}
   1a540:	4628      	mov	r0, r5
   1a542:	b003      	add	sp, #12
   1a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!msghdr && !dst_addr &&
   1a548:	2d00      	cmp	r5, #0
   1a54a:	d0f7      	beq.n	1a53c <context_sendto.isra.21+0x64>
   1a54c:	f04f 0800 	mov.w	r8, #0
		   net_context_get_family(context) == AF_INET) {
   1a550:	4620      	mov	r0, r4
   1a552:	f7ff fce7 	bl	19f24 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a556:	2801      	cmp	r0, #1
   1a558:	f040 8087 	bne.w	1a66a <context_sendto.isra.21+0x192>
		if (msghdr) {
   1a55c:	f1b8 0f00 	cmp.w	r8, #0
   1a560:	f000 8081 	beq.w	1a666 <context_sendto.isra.21+0x18e>
			addrlen = msghdr->msg_namelen;
   1a564:	e9d8 5600 	ldrd	r5, r6, [r8]
			if (!addr4) {
   1a568:	2d00      	cmp	r5, #0
   1a56a:	d17c      	bne.n	1a666 <context_sendto.isra.21+0x18e>
				addr4 = net_sin(&context->remote);
   1a56c:	f104 0524 	add.w	r5, r4, #36	; 0x24
		if (!addr4->sin_addr.s_addr) {
   1a570:	686b      	ldr	r3, [r5, #4]
   1a572:	2b00      	cmp	r3, #0
   1a574:	d0e2      	beq.n	1a53c <context_sendto.isra.21+0x64>
	if (msghdr && len == 0) {
   1a576:	f1b8 0f00 	cmp.w	r8, #0
   1a57a:	d005      	beq.n	1a588 <context_sendto.isra.21+0xb0>
   1a57c:	b927      	cbnz	r7, 1a588 <context_sendto.isra.21+0xb0>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a57e:	463b      	mov	r3, r7
   1a580:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1a584:	428b      	cmp	r3, r1
   1a586:	d173      	bne.n	1a670 <context_sendto.isra.21+0x198>
	NET_ASSERT(context);
   1a588:	b974      	cbnz	r4, 1a5a8 <context_sendto.isra.21+0xd0>
   1a58a:	4958      	ldr	r1, [pc, #352]	; (1a6ec <context_sendto.isra.21+0x214>)
   1a58c:	f240 2371 	movw	r3, #625	; 0x271
   1a590:	4a57      	ldr	r2, [pc, #348]	; (1a6f0 <context_sendto.isra.21+0x218>)
   1a592:	4854      	ldr	r0, [pc, #336]	; (1a6e4 <context_sendto.isra.21+0x20c>)
   1a594:	f013 fe12 	bl	2e1bc <printk>
   1a598:	4853      	ldr	r0, [pc, #332]	; (1a6e8 <context_sendto.isra.21+0x210>)
   1a59a:	f013 fe0f 	bl	2e1bc <printk>
   1a59e:	f240 2171 	movw	r1, #625	; 0x271
   1a5a2:	4853      	ldr	r0, [pc, #332]	; (1a6f0 <context_sendto.isra.21+0x218>)
   1a5a4:	f014 f90b 	bl	2e7be <assert_post_action>
	return net_if_get_by_index(context->iface);
   1a5a8:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
   1a5ac:	f7ff fbaa 	bl	19d04 <net_if_get_by_index>
   1a5b0:	4606      	mov	r6, r0
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   1a5b2:	4620      	mov	r0, r4
   1a5b4:	f7ff fcb6 	bl	19f24 <net_context_get_family>
   1a5b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a5bc:	9300      	str	r3, [sp, #0]
   1a5be:	4602      	mov	r2, r0
   1a5c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1a5c4:	4630      	mov	r0, r6
   1a5c6:	4639      	mov	r1, r7
   1a5c8:	f000 fb1e 	bl	1ac08 <net_pkt_alloc_with_buffer>
	if (pkt) {
   1a5cc:	4606      	mov	r6, r0
   1a5ce:	2800      	cmp	r0, #0
   1a5d0:	d07e      	beq.n	1a6d0 <context_sendto.isra.21+0x1f8>
	pkt->context = ctx;
   1a5d2:	61c4      	str	r4, [r0, #28]
	tmp_len = net_pkt_available_payload_buffer(
   1a5d4:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1a5d8:	f016 f949 	bl	3086e <net_pkt_available_payload_buffer>
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1a5dc:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1a5e0:	4287      	cmp	r7, r0
   1a5e2:	bf28      	it	cs
   1a5e4:	4607      	movcs	r7, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a5e6:	2b11      	cmp	r3, #17
	context->send_cb = cb;
   1a5e8:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	context->user_data = user_data;
   1a5ec:	f8c4 b000 	str.w	fp, [r4]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a5f0:	d14c      	bne.n	1a68c <context_sendto.isra.21+0x1b4>
		   net_context_get_family(context) == AF_INET) {
   1a5f2:	4620      	mov	r0, r4
   1a5f4:	f7ff fc96 	bl	19f24 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a5f8:	2801      	cmp	r0, #1
   1a5fa:	d160      	bne.n	1a6be <context_sendto.isra.21+0x1e6>
		ret = net_context_create_ipv4_new(context, pkt,
   1a5fc:	1d2b      	adds	r3, r5, #4
   1a5fe:	2200      	movs	r2, #0
   1a600:	4631      	mov	r1, r6
   1a602:	4620      	mov	r0, r4
		dst_port = addr4->sin_port;
   1a604:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		ret = net_context_create_ipv4_new(context, pkt,
   1a608:	f7ff ff2c 	bl	1a464 <net_context_create_ipv4_new>
	if (ret < 0) {
   1a60c:	1e05      	subs	r5, r0, #0
   1a60e:	db39      	blt.n	1a684 <context_sendto.isra.21+0x1ac>
	ret = bind_default(context);
   1a610:	4620      	mov	r0, r4
   1a612:	f015 ff8a 	bl	3052a <bind_default>
	if (ret) {
   1a616:	4605      	mov	r5, r0
   1a618:	bb90      	cbnz	r0, 1a680 <context_sendto.isra.21+0x1a8>
	ret = net_udp_create(pkt,
   1a61a:	4652      	mov	r2, sl
   1a61c:	8be1      	ldrh	r1, [r4, #30]
   1a61e:	4630      	mov	r0, r6
   1a620:	f017 fa9e 	bl	31b60 <net_udp_create>
	if (ret) {
   1a624:	4605      	mov	r5, r0
   1a626:	bb58      	cbnz	r0, 1a680 <context_sendto.isra.21+0x1a8>
	ret = context_write_data(pkt, buf, len, msg);
   1a628:	4643      	mov	r3, r8
   1a62a:	463a      	mov	r2, r7
   1a62c:	4649      	mov	r1, r9
   1a62e:	4630      	mov	r0, r6
   1a630:	f015 ff2b 	bl	3048a <context_write_data>
	if (ret) {
   1a634:	4605      	mov	r5, r0
   1a636:	bb18      	cbnz	r0, 1a680 <context_sendto.isra.21+0x1a8>
	net_pkt_cursor_init(pkt);
   1a638:	4630      	mov	r0, r6
   1a63a:	f016 f94a 	bl	308d2 <net_pkt_cursor_init>
		   net_context_get_family(context) == AF_INET) {
   1a63e:	4620      	mov	r0, r4
   1a640:	f7ff fc70 	bl	19f24 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a644:	2801      	cmp	r0, #1
   1a646:	d104      	bne.n	1a652 <context_sendto.isra.21+0x17a>
		net_ipv4_finalize(pkt, net_context_get_ip_proto(context));
   1a648:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1a64c:	4630      	mov	r0, r6
   1a64e:	f016 fca7 	bl	30fa0 <net_ipv4_finalize>
		ret = net_send_data(pkt);
   1a652:	4630      	mov	r0, r6
   1a654:	f015 fd2a 	bl	300ac <net_send_data>
	if (ret < 0) {
   1a658:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
   1a65a:	4605      	mov	r5, r0
	if (ret < 0) {
   1a65c:	db12      	blt.n	1a684 <context_sendto.isra.21+0x1ac>
	return len;
   1a65e:	463d      	mov	r5, r7
   1a660:	e76e      	b.n	1a540 <context_sendto.isra.21+0x68>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a662:	46c8      	mov	r8, r9
   1a664:	e774      	b.n	1a550 <context_sendto.isra.21+0x78>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a666:	2e07      	cmp	r6, #7
   1a668:	d882      	bhi.n	1a570 <context_sendto.isra.21+0x98>
		return -EINVAL;
   1a66a:	f06f 0515 	mvn.w	r5, #21
   1a66e:	e767      	b.n	1a540 <context_sendto.isra.21+0x68>
			len += msghdr->msg_iov[i].iov_len;
   1a670:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1a674:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a678:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a67a:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
   1a67c:	4417      	add	r7, r2
   1a67e:	e781      	b.n	1a584 <context_sendto.isra.21+0xac>
		if (ret < 0) {
   1a680:	2d00      	cmp	r5, #0
   1a682:	dad9      	bge.n	1a638 <context_sendto.isra.21+0x160>
	net_pkt_unref(pkt);
   1a684:	4630      	mov	r0, r6
   1a686:	f016 f8c0 	bl	3080a <net_pkt_unref>
	return ret;
   1a68a:	e759      	b.n	1a540 <context_sendto.isra.21+0x68>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a68c:	2b06      	cmp	r3, #6
   1a68e:	d119      	bne.n	1a6c4 <context_sendto.isra.21+0x1ec>
		ret = context_write_data(pkt, buf, len, msghdr);
   1a690:	4643      	mov	r3, r8
   1a692:	463a      	mov	r2, r7
   1a694:	4649      	mov	r1, r9
   1a696:	4630      	mov	r0, r6
   1a698:	f015 fef7 	bl	3048a <context_write_data>
		if (ret < 0) {
   1a69c:	1e05      	subs	r5, r0, #0
   1a69e:	dbf1      	blt.n	1a684 <context_sendto.isra.21+0x1ac>
		net_pkt_cursor_init(pkt);
   1a6a0:	4630      	mov	r0, r6
   1a6a2:	f016 f916 	bl	308d2 <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
   1a6a6:	4631      	mov	r1, r6
   1a6a8:	4620      	mov	r0, r4
   1a6aa:	f001 f869 	bl	1b780 <net_tcp_queue_data>
		if (ret < 0) {
   1a6ae:	1e05      	subs	r5, r0, #0
   1a6b0:	dbe8      	blt.n	1a684 <context_sendto.isra.21+0x1ac>
		ret = net_tcp_send_data(context, cb, user_data);
   1a6b2:	465a      	mov	r2, fp
   1a6b4:	4651      	mov	r1, sl
   1a6b6:	4620      	mov	r0, r4
   1a6b8:	f016 ff29 	bl	3150e <net_tcp_send_data>
   1a6bc:	e7cc      	b.n	1a658 <context_sendto.isra.21+0x180>
	int ret = -EINVAL;
   1a6be:	f06f 0515 	mvn.w	r5, #21
   1a6c2:	e7df      	b.n	1a684 <context_sendto.isra.21+0x1ac>
		ret = -EPROTONOSUPPORT;
   1a6c4:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   1a6c8:	e7dc      	b.n	1a684 <context_sendto.isra.21+0x1ac>
		return -EBADF;
   1a6ca:	f06f 0508 	mvn.w	r5, #8
   1a6ce:	e737      	b.n	1a540 <context_sendto.isra.21+0x68>
		return -ENOMEM;
   1a6d0:	f06f 050b 	mvn.w	r5, #11
   1a6d4:	e734      	b.n	1a540 <context_sendto.isra.21+0x68>
   1a6d6:	bf00      	nop
   1a6d8:	20021694 	.word	0x20021694
   1a6dc:	000365aa 	.word	0x000365aa
   1a6e0:	00036728 	.word	0x00036728
   1a6e4:	00035920 	.word	0x00035920
   1a6e8:	00035d7e 	.word	0x00035d7e
   1a6ec:	00035d76 	.word	0x00035d76
   1a6f0:	00035d49 	.word	0x00035d49

0001a6f4 <net_context_connect>:
{
   1a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6f8:	4604      	mov	r4, r0
   1a6fa:	b087      	sub	sp, #28
   1a6fc:	4615      	mov	r5, r2
   1a6fe:	461f      	mov	r7, r3
	NET_ASSERT(addr);
   1a700:	460e      	mov	r6, r1
   1a702:	b971      	cbnz	r1, 1a722 <net_context_connect+0x2e>
   1a704:	495d      	ldr	r1, [pc, #372]	; (1a87c <net_context_connect+0x188>)
   1a706:	f240 3379 	movw	r3, #889	; 0x379
   1a70a:	4a5d      	ldr	r2, [pc, #372]	; (1a880 <net_context_connect+0x18c>)
   1a70c:	485d      	ldr	r0, [pc, #372]	; (1a884 <net_context_connect+0x190>)
   1a70e:	f013 fd55 	bl	2e1bc <printk>
   1a712:	485d      	ldr	r0, [pc, #372]	; (1a888 <net_context_connect+0x194>)
   1a714:	f013 fd52 	bl	2e1bc <printk>
   1a718:	f240 3179 	movw	r1, #889	; 0x379
   1a71c:	4858      	ldr	r0, [pc, #352]	; (1a880 <net_context_connect+0x18c>)
   1a71e:	f014 f84e 	bl	2e7be <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a722:	b134      	cbz	r4, 1a732 <net_context_connect+0x3e>
   1a724:	4b59      	ldr	r3, [pc, #356]	; (1a88c <net_context_connect+0x198>)
   1a726:	429c      	cmp	r4, r3
   1a728:	d303      	bcc.n	1a732 <net_context_connect+0x3e>
   1a72a:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a72e:	429c      	cmp	r4, r3
   1a730:	d30e      	bcc.n	1a750 <net_context_connect+0x5c>
   1a732:	4957      	ldr	r1, [pc, #348]	; (1a890 <net_context_connect+0x19c>)
   1a734:	f240 337a 	movw	r3, #890	; 0x37a
   1a738:	4a51      	ldr	r2, [pc, #324]	; (1a880 <net_context_connect+0x18c>)
   1a73a:	4852      	ldr	r0, [pc, #328]	; (1a884 <net_context_connect+0x190>)
   1a73c:	f013 fd3e 	bl	2e1bc <printk>
   1a740:	4851      	ldr	r0, [pc, #324]	; (1a888 <net_context_connect+0x194>)
   1a742:	f013 fd3b 	bl	2e1bc <printk>
   1a746:	f240 317a 	movw	r1, #890	; 0x37a
   1a74a:	484d      	ldr	r0, [pc, #308]	; (1a880 <net_context_connect+0x18c>)
   1a74c:	f014 f837 	bl	2e7be <assert_post_action>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a750:	f104 0808 	add.w	r8, r4, #8
   1a754:	4640      	mov	r0, r8
   1a756:	f015 feb3 	bl	304c0 <k_mutex_lock.constprop.28>
	if (!net_context_is_used(context)) {
   1a75a:	4620      	mov	r0, r4
   1a75c:	f7ff fb7c 	bl	19e58 <net_context_is_used>
   1a760:	2800      	cmp	r0, #0
   1a762:	f000 8081 	beq.w	1a868 <net_context_connect+0x174>
	if (addr->sa_family != net_context_get_family(context)) {
   1a766:	4620      	mov	r0, r4
   1a768:	f8b6 9000 	ldrh.w	r9, [r6]
   1a76c:	f7ff fbda 	bl	19f24 <net_context_get_family>
   1a770:	4581      	cmp	r9, r0
   1a772:	d024      	beq.n	1a7be <net_context_connect+0xca>
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1a774:	4620      	mov	r0, r4
   1a776:	8835      	ldrh	r5, [r6, #0]
   1a778:	f7ff fbd4 	bl	19f24 <net_context_get_family>
   1a77c:	4285      	cmp	r5, r0
   1a77e:	d108      	bne.n	1a792 <net_context_connect+0x9e>
		ret = -EINVAL;
   1a780:	f06f 0515 	mvn.w	r5, #21
	k_mutex_unlock(&context->lock);
   1a784:	4640      	mov	r0, r8
   1a786:	f015 fe7e 	bl	30486 <k_mutex_unlock>
}
   1a78a:	4628      	mov	r0, r5
   1a78c:	b007      	add	sp, #28
   1a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1a792:	f240 3387 	movw	r3, #903	; 0x387
   1a796:	4a3a      	ldr	r2, [pc, #232]	; (1a880 <net_context_connect+0x18c>)
   1a798:	493e      	ldr	r1, [pc, #248]	; (1a894 <net_context_connect+0x1a0>)
   1a79a:	483a      	ldr	r0, [pc, #232]	; (1a884 <net_context_connect+0x190>)
   1a79c:	f013 fd0e 	bl	2e1bc <printk>
   1a7a0:	4620      	mov	r0, r4
   1a7a2:	8835      	ldrh	r5, [r6, #0]
   1a7a4:	f7ff fbbe 	bl	19f24 <net_context_get_family>
   1a7a8:	4629      	mov	r1, r5
   1a7aa:	4602      	mov	r2, r0
   1a7ac:	483a      	ldr	r0, [pc, #232]	; (1a898 <net_context_connect+0x1a4>)
   1a7ae:	f013 fd05 	bl	2e1bc <printk>
   1a7b2:	f240 3187 	movw	r1, #903	; 0x387
   1a7b6:	4832      	ldr	r0, [pc, #200]	; (1a880 <net_context_connect+0x18c>)
   1a7b8:	f014 f801 	bl	2e7be <assert_post_action>
   1a7bc:	e7e0      	b.n	1a780 <net_context_connect+0x8c>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1a7be:	4620      	mov	r0, r4
   1a7c0:	f7ff fb90 	bl	19ee4 <net_context_get_state>
   1a7c4:	2803      	cmp	r0, #3
   1a7c6:	d052      	beq.n	1a86e <net_context_connect+0x17a>
		   net_context_get_family(context) == AF_INET) {
   1a7c8:	4620      	mov	r0, r4
   1a7ca:	f7ff fbab 	bl	19f24 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a7ce:	2801      	cmp	r0, #1
   1a7d0:	d1d6      	bne.n	1a780 <net_context_connect+0x8c>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a7d2:	2d07      	cmp	r5, #7
   1a7d4:	d9d4      	bls.n	1a780 <net_context_connect+0x8c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a7d6:	6872      	ldr	r2, [r6, #4]
   1a7d8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1a7dc:	62a2      	str	r2, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
   1a7de:	f8b6 9002 	ldrh.w	r9, [r6, #2]
		addr4->sin_family = AF_INET;
   1a7e2:	84a0      	strh	r0, [r4, #36]	; 0x24
		addr4->sin_port = net_sin(addr)->sin_port;
   1a7e4:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
		if (addr4->sin_addr.s_addr) {
   1a7e8:	b33a      	cbz	r2, 1a83a <net_context_connect+0x146>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1a7ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a7ee:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		ret = bind_default(context);
   1a7f2:	4620      	mov	r0, r4
   1a7f4:	f015 fe99 	bl	3052a <bind_default>
		if (ret) {
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	2800      	cmp	r0, #0
   1a7fc:	d1c2      	bne.n	1a784 <net_context_connect+0x90>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a7fe:	2301      	movs	r3, #1
		net_sin(&local_addr)->sin_port = lport =
   1a800:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a804:	f8d4 a020 	ldr.w	sl, [r4, #32]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a808:	83a3      	strh	r3, [r4, #28]
		net_sin(&local_addr)->sin_family = AF_INET;
   1a80a:	f8ad 3010 	strh.w	r3, [sp, #16]
		net_sin(&local_addr)->sin_port = lport =
   1a80e:	f8ad b012 	strh.w	fp, [sp, #18]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a812:	f1ba 0f00 	cmp.w	sl, #0
   1a816:	d004      	beq.n	1a822 <net_context_connect+0x12e>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1a818:	f8da 3000 	ldr.w	r3, [sl]
   1a81c:	9305      	str	r3, [sp, #20]
			laddr = &local_addr;
   1a81e:	f10d 0a10 	add.w	sl, sp, #16
	    net_context_get_type(context) == SOCK_DGRAM) {
   1a822:	4620      	mov	r0, r4
   1a824:	f7ff fb9e 	bl	19f64 <net_context_get_type>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a828:	2802      	cmp	r0, #2
   1a82a:	d10a      	bne.n	1a842 <net_context_connect+0x14e>
		if (cb) {
   1a82c:	2f00      	cmp	r7, #0
   1a82e:	d0a9      	beq.n	1a784 <net_context_connect+0x90>
			cb(context, 0, user_data);
   1a830:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a832:	2100      	movs	r1, #0
   1a834:	4620      	mov	r0, r4
   1a836:	47b8      	blx	r7
   1a838:	e7a4      	b.n	1a784 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1a83a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1a83e:	b29b      	uxth	r3, r3
   1a840:	e7d5      	b.n	1a7ee <net_context_connect+0xfa>
		   net_context_get_type(context) == SOCK_STREAM) {
   1a842:	4620      	mov	r0, r4
   1a844:	f7ff fb8e 	bl	19f64 <net_context_get_type>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a848:	2801      	cmp	r0, #1
   1a84a:	d113      	bne.n	1a874 <net_context_connect+0x180>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   1a84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a84e:	4652      	mov	r2, sl
   1a850:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1a854:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a856:	4631      	mov	r1, r6
   1a858:	e9cd b300 	strd	fp, r3, [sp]
   1a85c:	4620      	mov	r0, r4
   1a85e:	464b      	mov	r3, r9
   1a860:	f001 fcd6 	bl	1c210 <net_tcp_connect>
   1a864:	4605      	mov	r5, r0
   1a866:	e78d      	b.n	1a784 <net_context_connect+0x90>
		ret = -EBADF;
   1a868:	f06f 0508 	mvn.w	r5, #8
   1a86c:	e78a      	b.n	1a784 <net_context_connect+0x90>
		ret = -EOPNOTSUPP;
   1a86e:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   1a872:	e787      	b.n	1a784 <net_context_connect+0x90>
		ret = -ENOTSUP;
   1a874:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1a878:	e784      	b.n	1a784 <net_context_connect+0x90>
   1a87a:	bf00      	nop
   1a87c:	00036723 	.word	0x00036723
   1a880:	00036728 	.word	0x00036728
   1a884:	00035920 	.word	0x00035920
   1a888:	00035d7e 	.word	0x00035d7e
   1a88c:	20021694 	.word	0x20021694
   1a890:	000365aa 	.word	0x000365aa
   1a894:	0003669c 	.word	0x0003669c
   1a898:	000366cf 	.word	0x000366cf

0001a89c <net_context_accept>:
{
   1a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a89e:	460e      	mov	r6, r1
   1a8a0:	461f      	mov	r7, r3
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a8a2:	4604      	mov	r4, r0
   1a8a4:	b130      	cbz	r0, 1a8b4 <net_context_accept+0x18>
   1a8a6:	4b20      	ldr	r3, [pc, #128]	; (1a928 <net_context_accept+0x8c>)
   1a8a8:	4298      	cmp	r0, r3
   1a8aa:	d303      	bcc.n	1a8b4 <net_context_accept+0x18>
   1a8ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a8b0:	4298      	cmp	r0, r3
   1a8b2:	d30e      	bcc.n	1a8d2 <net_context_accept+0x36>
   1a8b4:	491d      	ldr	r1, [pc, #116]	; (1a92c <net_context_accept+0x90>)
   1a8b6:	f240 4325 	movw	r3, #1061	; 0x425
   1a8ba:	4a1d      	ldr	r2, [pc, #116]	; (1a930 <net_context_accept+0x94>)
   1a8bc:	481d      	ldr	r0, [pc, #116]	; (1a934 <net_context_accept+0x98>)
   1a8be:	f013 fc7d 	bl	2e1bc <printk>
   1a8c2:	481d      	ldr	r0, [pc, #116]	; (1a938 <net_context_accept+0x9c>)
   1a8c4:	f013 fc7a 	bl	2e1bc <printk>
   1a8c8:	f240 4125 	movw	r1, #1061	; 0x425
   1a8cc:	4818      	ldr	r0, [pc, #96]	; (1a930 <net_context_accept+0x94>)
   1a8ce:	f013 ff76 	bl	2e7be <assert_post_action>
	if (!net_context_is_used(context)) {
   1a8d2:	4620      	mov	r0, r4
   1a8d4:	f7ff fac0 	bl	19e58 <net_context_is_used>
   1a8d8:	b310      	cbz	r0, 1a920 <net_context_accept+0x84>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a8da:	f104 0508 	add.w	r5, r4, #8
   1a8de:	4628      	mov	r0, r5
   1a8e0:	f015 fdee 	bl	304c0 <k_mutex_lock.constprop.28>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1a8e4:	4620      	mov	r0, r4
   1a8e6:	f7ff fafd 	bl	19ee4 <net_context_get_state>
   1a8ea:	2803      	cmp	r0, #3
   1a8ec:	d109      	bne.n	1a902 <net_context_accept+0x66>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1a8ee:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1a8f2:	2b06      	cmp	r3, #6
   1a8f4:	d00d      	beq.n	1a912 <net_context_accept+0x76>
	int ret = 0;
   1a8f6:	2400      	movs	r4, #0
	k_mutex_unlock(&context->lock);
   1a8f8:	4628      	mov	r0, r5
   1a8fa:	f015 fdc4 	bl	30486 <k_mutex_unlock>
}
   1a8fe:	4620      	mov	r0, r4
   1a900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    (net_context_get_type(context) != SOCK_STREAM)) {
   1a902:	4620      	mov	r0, r4
   1a904:	f7ff fb2e 	bl	19f64 <net_context_get_type>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1a908:	2801      	cmp	r0, #1
   1a90a:	d0f0      	beq.n	1a8ee <net_context_accept+0x52>
		ret = -EINVAL;
   1a90c:	f06f 0415 	mvn.w	r4, #21
   1a910:	e7f2      	b.n	1a8f8 <net_context_accept+0x5c>
		ret = net_tcp_accept(context, cb, user_data);
   1a912:	4620      	mov	r0, r4
   1a914:	463a      	mov	r2, r7
   1a916:	4631      	mov	r1, r6
   1a918:	f001 fc00 	bl	1c11c <net_tcp_accept>
   1a91c:	4604      	mov	r4, r0
		goto unlock;
   1a91e:	e7eb      	b.n	1a8f8 <net_context_accept+0x5c>
		return -EBADF;
   1a920:	f06f 0408 	mvn.w	r4, #8
   1a924:	e7eb      	b.n	1a8fe <net_context_accept+0x62>
   1a926:	bf00      	nop
   1a928:	20021694 	.word	0x20021694
   1a92c:	000365aa 	.word	0x000365aa
   1a930:	00036728 	.word	0x00036728
   1a934:	00035920 	.word	0x00035920
   1a938:	00035d7e 	.word	0x00035d7e

0001a93c <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
   1a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a940:	4688      	mov	r8, r1
   1a942:	b088      	sub	sp, #32
   1a944:	4617      	mov	r7, r2
   1a946:	4699      	mov	r9, r3
	int ret;
	NET_ASSERT(context);
   1a948:	4604      	mov	r4, r0
   1a94a:	b970      	cbnz	r0, 1a96a <net_context_recv+0x2e>
   1a94c:	4944      	ldr	r1, [pc, #272]	; (1aa60 <net_context_recv+0x124>)
   1a94e:	f240 7365 	movw	r3, #1893	; 0x765
   1a952:	4a44      	ldr	r2, [pc, #272]	; (1aa64 <net_context_recv+0x128>)
   1a954:	4844      	ldr	r0, [pc, #272]	; (1aa68 <net_context_recv+0x12c>)
   1a956:	f013 fc31 	bl	2e1bc <printk>
   1a95a:	4844      	ldr	r0, [pc, #272]	; (1aa6c <net_context_recv+0x130>)
   1a95c:	f013 fc2e 	bl	2e1bc <printk>
   1a960:	f240 7165 	movw	r1, #1893	; 0x765
   1a964:	483f      	ldr	r0, [pc, #252]	; (1aa64 <net_context_recv+0x128>)
   1a966:	f013 ff2a 	bl	2e7be <assert_post_action>

	if (!net_context_is_used(context)) {
   1a96a:	4620      	mov	r0, r4
   1a96c:	f7ff fa74 	bl	19e58 <net_context_is_used>
   1a970:	2800      	cmp	r0, #0
   1a972:	d071      	beq.n	1aa58 <net_context_recv+0x11c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   1a974:	f104 0608 	add.w	r6, r4, #8
   1a978:	4630      	mov	r0, r6
   1a97a:	f015 fda1 	bl	304c0 <k_mutex_lock.constprop.28>
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1a97e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a982:	2b11      	cmp	r3, #17
   1a984:	d15d      	bne.n	1aa42 <net_context_recv+0x106>
	struct sockaddr local_addr = {
   1a986:	2500      	movs	r5, #0
		.sa_family = net_context_get_family(context),
   1a988:	4620      	mov	r0, r4
	struct sockaddr local_addr = {
   1a98a:	e9cd 5506 	strd	r5, r5, [sp, #24]
		.sa_family = net_context_get_family(context),
   1a98e:	f7ff fac9 	bl	19f24 <net_context_get_family>
	struct sockaddr local_addr = {
   1a992:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (context->conn_handler) {
   1a996:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a998:	b110      	cbz	r0, 1a9a0 <net_context_recv+0x64>
		net_conn_unregister(context->conn_handler);
   1a99a:	f000 fab5 	bl	1af08 <net_conn_unregister>
		context->conn_handler = NULL;
   1a99e:	62e5      	str	r5, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1a9a0:	4620      	mov	r0, r4
   1a9a2:	f015 fdc2 	bl	3052a <bind_default>
	if (ret) {
   1a9a6:	4605      	mov	r5, r0
   1a9a8:	bb90      	cbnz	r0, 1aa10 <net_context_recv+0xd4>
		   net_context_get_family(context) == AF_INET) {
   1a9aa:	4620      	mov	r0, r4
   1a9ac:	f7ff faba 	bl	19f24 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a9b0:	2801      	cmp	r0, #1
   1a9b2:	d144      	bne.n	1aa3e <net_context_recv+0x102>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a9b4:	f8d4 a020 	ldr.w	sl, [r4, #32]
   1a9b8:	f1ba 0f00 	cmp.w	sl, #0
   1a9bc:	d004      	beq.n	1a9c8 <net_context_recv+0x8c>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1a9be:	f8da 3000 	ldr.w	r3, [sl]
   1a9c2:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1a9c4:	f10d 0a18 	add.w	sl, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
   1a9c8:	8be5      	ldrh	r5, [r4, #30]
	context->recv_cb = cb;
   1a9ca:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
				net_context_get_family(context),
   1a9ce:	4620      	mov	r0, r4
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a9d0:	f8b4 8078 	ldrh.w	r8, [r4, #120]	; 0x78
				net_context_get_family(context),
   1a9d4:	f7ff faa6 	bl	19f24 <net_context_get_family>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a9d8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1a9dc:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1a9e0:	b2c1      	uxtb	r1, r0
				ntohs(net_sin(&context->remote)->sin_port),
   1a9e2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a9e4:	e9cd 9303 	strd	r9, r3, [sp, #12]
   1a9e8:	4b21      	ldr	r3, [pc, #132]	; (1aa70 <net_context_recv+0x134>)
   1a9ea:	ba6d      	rev16	r5, r5
   1a9ec:	9302      	str	r3, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1a9ee:	0203      	lsls	r3, r0, #8
   1a9f0:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a9f4:	b29b      	uxth	r3, r3
   1a9f6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1a9fa:	b2ad      	uxth	r5, r5
   1a9fc:	9300      	str	r3, [sp, #0]
   1a9fe:	bf18      	it	ne
   1aa00:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1aa04:	9501      	str	r5, [sp, #4]
   1aa06:	4653      	mov	r3, sl
   1aa08:	4640      	mov	r0, r8
   1aa0a:	f000 f9bb 	bl	1ad84 <net_conn_register>
		ret = recv_udp(context, cb, timeout, user_data);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
		   net_context_get_ip_proto(context) == IPPROTO_TCP) {
		ret = net_tcp_recv(context, cb, user_data);
   1aa0e:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
   1aa10:	2d00      	cmp	r5, #0
   1aa12:	db0d      	blt.n	1aa30 <net_context_recv+0xf4>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1aa14:	b167      	cbz	r7, 1aa30 <net_context_recv+0xf4>
	sem->count = 0U;
   1aa16:	2300      	movs	r3, #0
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
   1aa18:	4630      	mov	r0, r6
   1aa1a:	64a3      	str	r3, [r4, #72]	; 0x48
   1aa1c:	f015 fd33 	bl	30486 <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1aa20:	4639      	mov	r1, r7
   1aa22:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1aa26:	f00e ff25 	bl	29874 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
   1aa2a:	4630      	mov	r0, r6
   1aa2c:	f015 fd48 	bl	304c0 <k_mutex_lock.constprop.28>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
   1aa30:	4630      	mov	r0, r6
   1aa32:	f015 fd28 	bl	30486 <k_mutex_unlock>

	return ret;
}
   1aa36:	4628      	mov	r0, r5
   1aa38:	b008      	add	sp, #32
   1aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct sockaddr *laddr = NULL;
   1aa3e:	46aa      	mov	sl, r5
   1aa40:	e7c3      	b.n	1a9ca <net_context_recv+0x8e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1aa42:	2b06      	cmp	r3, #6
   1aa44:	d105      	bne.n	1aa52 <net_context_recv+0x116>
		ret = net_tcp_recv(context, cb, user_data);
   1aa46:	464a      	mov	r2, r9
   1aa48:	4641      	mov	r1, r8
   1aa4a:	4620      	mov	r0, r4
   1aa4c:	f001 fae0 	bl	1c010 <net_tcp_recv>
   1aa50:	e7dd      	b.n	1aa0e <net_context_recv+0xd2>
			ret = -EPROTOTYPE;
   1aa52:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   1aa56:	e7eb      	b.n	1aa30 <net_context_recv+0xf4>
		return -EBADF;
   1aa58:	f06f 0508 	mvn.w	r5, #8
   1aa5c:	e7eb      	b.n	1aa36 <net_context_recv+0xfa>
   1aa5e:	bf00      	nop
   1aa60:	00035d76 	.word	0x00035d76
   1aa64:	00036728 	.word	0x00036728
   1aa68:	00035920 	.word	0x00035920
   1aa6c:	00035d7e 	.word	0x00035d7e
   1aa70:	0001a011 	.word	0x0001a011

0001aa74 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1aa74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aa78:	2101      	movs	r1, #1
   1aa7a:	4801      	ldr	r0, [pc, #4]	; (1aa80 <net_context_init+0xc>)
   1aa7c:	f018 bd47 	b.w	3350e <z_impl_k_sem_init>
   1aa80:	20021994 	.word	0x20021994

0001aa84 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   1aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa88:	4607      	mov	r7, r0
   1aa8a:	b085      	sub	sp, #20
	u64_t end = z_timeout_end_calc(timeout);
   1aa8c:	4618      	mov	r0, r3
{
   1aa8e:	460e      	mov	r6, r1
   1aa90:	4690      	mov	r8, r2
   1aa92:	461c      	mov	r4, r3
	u64_t end = z_timeout_end_calc(timeout);
   1aa94:	f018 fdc8 	bl	33628 <z_timeout_end_calc>
   1aa98:	4681      	mov	r9, r0
   1aa9a:	468a      	mov	sl, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   1aa9c:	b946      	cbnz	r6, 1aab0 <net_pkt_alloc_buffer+0x2c>
   1aa9e:	f1b8 0f00 	cmp.w	r8, #0
   1aaa2:	d105      	bne.n	1aab0 <net_pkt_alloc_buffer+0x2c>
	return pkt->family;
   1aaa4:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
   1aaa8:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1aaac:	2800      	cmp	r0, #0
   1aaae:	d074      	beq.n	1ab9a <net_pkt_alloc_buffer+0x116>
		return 0;
	}

	if (k_is_in_isr()) {
   1aab0:	f018 fd3d 	bl	3352e <k_is_in_isr>
		timeout = K_NO_WAIT;
   1aab4:	2800      	cmp	r0, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1aab6:	6938      	ldr	r0, [r7, #16]
		timeout = K_NO_WAIT;
   1aab8:	bf18      	it	ne
   1aaba:	2400      	movne	r4, #0
	struct net_buf *buf = pkt->buffer;
   1aabc:	4605      	mov	r5, r0
	size_t size = 0;
   1aabe:	f04f 0b00 	mov.w	fp, #0
	while (buf) {
   1aac2:	2d00      	cmp	r5, #0
   1aac4:	d156      	bne.n	1ab74 <net_pkt_alloc_buffer+0xf0>
	return net_buf_frags_len(pkt->frags);
   1aac6:	f015 fdcd 	bl	30664 <net_buf_frags_len>
   1aaca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
	if (!alloc_len) {
   1aace:	4558      	cmp	r0, fp
   1aad0:	4603      	mov	r3, r0
   1aad2:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1aad6:	d151      	bne.n	1ab7c <net_pkt_alloc_buffer+0xf8>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   1aad8:	b290      	uxth	r0, r2
	if (family == AF_UNSPEC) {
   1aada:	2800      	cmp	r0, #0
   1aadc:	d04e      	beq.n	1ab7c <net_pkt_alloc_buffer+0xf8>
   1aade:	4641      	mov	r1, r8
   1aae0:	f015 fe08 	bl	306f4 <pkt_estimate_headers_length.isra.19.part.20>
	if (net_pkt_iface(pkt)) {
   1aae4:	6a39      	ldr	r1, [r7, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   1aae6:	4406      	add	r6, r0
	if (net_pkt_iface(pkt)) {
   1aae8:	b109      	cbz	r1, 1aaee <net_pkt_alloc_buffer+0x6a>
 *
 * @return the MTU
 */
static inline u16_t net_if_get_mtu(struct net_if *iface)
{
	return iface->if_dev->mtu;
   1aaea:	6809      	ldr	r1, [r1, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   1aaec:	8b09      	ldrh	r1, [r1, #24]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1aaee:	2a01      	cmp	r2, #1
   1aaf0:	d146      	bne.n	1ab80 <net_pkt_alloc_buffer+0xfc>
		max_len = MAX(max_len, NET_IPV4_MTU);
   1aaf2:	f5b1 7f10 	cmp.w	r1, #576	; 0x240
   1aaf6:	bf38      	it	cc
   1aaf8:	f44f 7110 	movcc.w	r1, #576	; 0x240
	max_len -= existing;
   1aafc:	eba3 030b 	sub.w	r3, r3, fp
   1ab00:	4419      	add	r1, r3
	return MIN(size, max_len);
   1ab02:	428e      	cmp	r6, r1
   1ab04:	bf28      	it	cs
   1ab06:	460e      	movcs	r6, r1
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   1ab08:	4b3c      	ldr	r3, [pc, #240]	; (1abfc <net_pkt_alloc_buffer+0x178>)
   1ab0a:	68f9      	ldr	r1, [r7, #12]
   1ab0c:	483c      	ldr	r0, [pc, #240]	; (1ac00 <net_pkt_alloc_buffer+0x17c>)
   1ab0e:	4a3d      	ldr	r2, [pc, #244]	; (1ac04 <net_pkt_alloc_buffer+0x180>)
   1ab10:	4281      	cmp	r1, r0
   1ab12:	bf0c      	ite	eq
   1ab14:	4690      	moveq	r8, r2
   1ab16:	4698      	movne	r8, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ab18:	1c63      	adds	r3, r4, #1
   1ab1a:	2b01      	cmp	r3, #1
   1ab1c:	d91a      	bls.n	1ab54 <net_pkt_alloc_buffer+0xd0>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   1ab1e:	f00f fced 	bl	2a4fc <z_tick_get>
   1ab22:	ebb9 0300 	subs.w	r3, r9, r0
   1ab26:	9300      	str	r3, [sp, #0]
   1ab28:	eb6a 0301 	sbc.w	r3, sl, r1
   1ab2c:	9301      	str	r3, [sp, #4]

		if (remaining <= 0) {
   1ab2e:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ab32:	2b01      	cmp	r3, #1
   1ab34:	f174 0300 	sbcs.w	r3, r4, #0
   1ab38:	bfa3      	ittte	ge
   1ab3a:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   1ab3e:	2300      	movge	r3, #0
   1ab40:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   1ab44:	2400      	movlt	r4, #0
   1ab46:	bfa1      	itttt	ge
   1ab48:	9800      	ldrge	r0, [sp, #0]
   1ab4a:	fbe1 2300 	umlalge	r2, r3, r1, r0
   1ab4e:	0bd4      	lsrge	r4, r2, #15
   1ab50:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	u64_t end = z_timeout_end_calc(timeout);
   1ab54:	4620      	mov	r0, r4
   1ab56:	f018 fd67 	bl	33628 <z_timeout_end_calc>
   1ab5a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1ab5e:	4681      	mov	r9, r0
   1ab60:	468b      	mov	fp, r1
	struct net_buf *current = NULL;
   1ab62:	2200      	movs	r2, #0
	while (size) {
   1ab64:	b976      	cbnz	r6, 1ab84 <net_pkt_alloc_buffer+0x100>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   1ab66:	b1b5      	cbz	r5, 1ab96 <net_pkt_alloc_buffer+0x112>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   1ab68:	4638      	mov	r0, r7
   1ab6a:	4629      	mov	r1, r5
   1ab6c:	f015 fee6 	bl	3093c <net_pkt_append_buffer>

	return 0;
   1ab70:	2000      	movs	r0, #0
   1ab72:	e012      	b.n	1ab9a <net_pkt_alloc_buffer+0x116>
		size += buf->size;
   1ab74:	89eb      	ldrh	r3, [r5, #14]
		buf = buf->frags;
   1ab76:	682d      	ldr	r5, [r5, #0]
		size += buf->size;
   1ab78:	449b      	add	fp, r3
		buf = buf->frags;
   1ab7a:	e7a2      	b.n	1aac2 <net_pkt_alloc_buffer+0x3e>
	size_t hdr_len = 0;
   1ab7c:	4628      	mov	r0, r5
   1ab7e:	e7b1      	b.n	1aae4 <net_pkt_alloc_buffer+0x60>
			max_len = size;
   1ab80:	4631      	mov	r1, r6
   1ab82:	e7bb      	b.n	1aafc <net_pkt_alloc_buffer+0x78>
		new = net_buf_alloc_fixed(pool, timeout);
   1ab84:	4621      	mov	r1, r4
   1ab86:	4640      	mov	r0, r8
   1ab88:	9200      	str	r2, [sp, #0]
   1ab8a:	f015 fa4b 	bl	30024 <net_buf_alloc_fixed>
		if (!new) {
   1ab8e:	9a00      	ldr	r2, [sp, #0]
   1ab90:	4603      	mov	r3, r0
   1ab92:	b928      	cbnz	r0, 1aba0 <net_pkt_alloc_buffer+0x11c>
	if (first) {
   1ab94:	bb6d      	cbnz	r5, 1abf2 <net_pkt_alloc_buffer+0x16e>
		return -ENOMEM;
   1ab96:	f06f 000b 	mvn.w	r0, #11
}
   1ab9a:	b005      	add	sp, #20
   1ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
   1aba0:	b905      	cbnz	r5, 1aba4 <net_pkt_alloc_buffer+0x120>
   1aba2:	b322      	cbz	r2, 1abee <net_pkt_alloc_buffer+0x16a>
			current->frags = new;
   1aba4:	6013      	str	r3, [r2, #0]
		if (current->size > size) {
   1aba6:	89da      	ldrh	r2, [r3, #14]
   1aba8:	42b2      	cmp	r2, r6
			current->size = size;
   1abaa:	bf88      	it	hi
   1abac:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   1abae:	89da      	ldrh	r2, [r3, #14]
   1abb0:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1abb2:	1c62      	adds	r2, r4, #1
   1abb4:	2a01      	cmp	r2, #1
   1abb6:	d918      	bls.n	1abea <net_pkt_alloc_buffer+0x166>
   1abb8:	9300      	str	r3, [sp, #0]
			s64_t remaining = end - z_tick_get();
   1abba:	f00f fc9f 	bl	2a4fc <z_tick_get>
   1abbe:	ebb9 0300 	subs.w	r3, r9, r0
   1abc2:	9302      	str	r3, [sp, #8]
   1abc4:	eb6b 0301 	sbc.w	r3, fp, r1
   1abc8:	9303      	str	r3, [sp, #12]
			if (remaining <= 0) {
   1abca:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1abce:	2b01      	cmp	r3, #1
   1abd0:	f174 0300 	sbcs.w	r3, r4, #0
   1abd4:	dbc7      	blt.n	1ab66 <net_pkt_alloc_buffer+0xe2>
   1abd6:	f647 70ff 	movw	r0, #32767	; 0x7fff
   1abda:	2100      	movs	r1, #0
   1abdc:	9b02      	ldr	r3, [sp, #8]
   1abde:	fbea 0103 	umlal	r0, r1, sl, r3
   1abe2:	9b00      	ldr	r3, [sp, #0]
   1abe4:	0bc4      	lsrs	r4, r0, #15
   1abe6:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		if (!first && !current) {
   1abea:	461a      	mov	r2, r3
   1abec:	e7ba      	b.n	1ab64 <net_pkt_alloc_buffer+0xe0>
   1abee:	4605      	mov	r5, r0
   1abf0:	e7d9      	b.n	1aba6 <net_pkt_alloc_buffer+0x122>
		net_buf_unref(first);
   1abf2:	4628      	mov	r0, r5
   1abf4:	f7fe fd94 	bl	19720 <net_buf_unref>
   1abf8:	e7cd      	b.n	1ab96 <net_pkt_alloc_buffer+0x112>
   1abfa:	bf00      	nop
   1abfc:	20020710 	.word	0x20020710
   1ac00:	2002055c 	.word	0x2002055c
   1ac04:	2002073c 	.word	0x2002073c

0001ac08 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   1ac08:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   1ac0a:	9c04      	ldr	r4, [sp, #16]
   1ac0c:	e9cd 3400 	strd	r3, r4, [sp]
   1ac10:	4613      	mov	r3, r2
   1ac12:	460a      	mov	r2, r1
   1ac14:	4601      	mov	r1, r0
   1ac16:	4802      	ldr	r0, [pc, #8]	; (1ac20 <net_pkt_alloc_with_buffer+0x18>)
   1ac18:	f015 fea2 	bl	30960 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   1ac1c:	b002      	add	sp, #8
   1ac1e:	bd10      	pop	{r4, pc}
   1ac20:	2002055c 	.word	0x2002055c

0001ac24 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   1ac24:	b508      	push	{r3, lr}
   1ac26:	460b      	mov	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac28:	3308      	adds	r3, #8
   1ac2a:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   1ac2e:	07db      	lsls	r3, r3, #31
   1ac30:	d407      	bmi.n	1ac42 <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   1ac32:	22dc      	movs	r2, #220	; 0xdc
   1ac34:	4b04      	ldr	r3, [pc, #16]	; (1ac48 <net_tc_submit_to_tx_queue+0x24>)
   1ac36:	fb00 3002 	mla	r0, r0, r2, r3
   1ac3a:	f016 f84e 	bl	30cda <k_work_submit_to_queue>

	return true;
   1ac3e:	2001      	movs	r0, #1
}
   1ac40:	bd08      	pop	{r3, pc}
		return false;
   1ac42:	2000      	movs	r0, #0
   1ac44:	e7fc      	b.n	1ac40 <net_tc_submit_to_tx_queue+0x1c>
   1ac46:	bf00      	nop
   1ac48:	20021a88 	.word	0x20021a88

0001ac4c <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   1ac4c:	2807      	cmp	r0, #7
   1ac4e:	bf88      	it	hi
   1ac50:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   1ac52:	4b01      	ldr	r3, [pc, #4]	; (1ac58 <net_tx_priority2tc+0xc>)
   1ac54:	5c18      	ldrb	r0, [r3, r0]
   1ac56:	4770      	bx	lr
   1ac58:	0003677c 	.word	0x0003677c

0001ac5c <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   1ac5c:	2307      	movs	r3, #7
{
   1ac5e:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   1ac60:	4c08      	ldr	r4, [pc, #32]	; (1ac84 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   1ac62:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   1ac66:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&tx_classes[i].work_q,
   1ac6a:	4907      	ldr	r1, [pc, #28]	; (1ac88 <net_tc_tx_init+0x2c>)
   1ac6c:	f06f 0308 	mvn.w	r3, #8
   1ac70:	4620      	mov	r0, r4
   1ac72:	f00f f85b 	bl	29d2c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1ac76:	4905      	ldr	r1, [pc, #20]	; (1ac8c <net_tc_tx_init+0x30>)
   1ac78:	f104 001c 	add.w	r0, r4, #28
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   1ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac80:	f018 bc5d 	b.w	3353e <z_impl_k_thread_name_set>
   1ac84:	20021a88 	.word	0x20021a88
   1ac88:	20031408 	.word	0x20031408
   1ac8c:	00036773 	.word	0x00036773

0001ac90 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   1ac90:	2307      	movs	r3, #7
{
   1ac92:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   1ac94:	4c08      	ldr	r4, [pc, #32]	; (1acb8 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   1ac96:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   1ac9a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&rx_classes[i].work_q,
   1ac9e:	4907      	ldr	r1, [pc, #28]	; (1acbc <net_tc_rx_init+0x2c>)
   1aca0:	f06f 0308 	mvn.w	r3, #8
   1aca4:	4620      	mov	r0, r4
   1aca6:	f00f f841 	bl	29d2c <k_work_q_start>
   1acaa:	4905      	ldr	r1, [pc, #20]	; (1acc0 <net_tc_rx_init+0x30>)
   1acac:	f104 001c 	add.w	r0, r4, #28
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   1acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1acb4:	f018 bc43 	b.w	3353e <z_impl_k_thread_name_set>
   1acb8:	200219ac 	.word	0x200219ac
   1acbc:	200318b8 	.word	0x200318b8
   1acc0:	0003676a 	.word	0x0003676a

0001acc4 <net_icmpv4_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   1acc4:	4b03      	ldr	r3, [pc, #12]	; (1acd4 <net_icmpv4_register_handler+0x10>)
   1acc6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1acc8:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   1acca:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1accc:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1acce:	b902      	cbnz	r2, 1acd2 <net_icmpv4_register_handler+0xe>
	list->tail = node;
   1acd0:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1acd2:	4770      	bx	lr
   1acd4:	20021b64 	.word	0x20021b64

0001acd8 <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
   1acd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1acda:	2304      	movs	r3, #4
   1acdc:	2200      	movs	r2, #0
{
   1acde:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1ace0:	4669      	mov	r1, sp
{
   1ace2:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1ace4:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1ace8:	f015 ffd1 	bl	30c8e <net_pkt_get_data>
	if (!icmp_hdr) {
   1acec:	4604      	mov	r4, r0
   1acee:	b910      	cbnz	r0, 1acf6 <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
   1acf0:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   1acf2:	b003      	add	sp, #12
   1acf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline u16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
   1acf6:	2101      	movs	r1, #1
   1acf8:	4628      	mov	r0, r5
   1acfa:	f015 fb22 	bl	30342 <net_calc_chksum>
	if (net_calc_chksum_icmpv4(pkt) != 0U) {
   1acfe:	2800      	cmp	r0, #0
   1ad00:	d1f6      	bne.n	1acf0 <net_icmpv4_input+0x18>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &ip_hdr->dst) &&
   1ad02:	6a2f      	ldr	r7, [r5, #32]
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline bool net_ipv4_is_addr_bcast(struct net_if *iface,
					  const struct in_addr *addr)
{
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1ad04:	f7ff f8a4 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1ad08:	6932      	ldr	r2, [r6, #16]
   1ad0a:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1ad0c:	429a      	cmp	r2, r3
   1ad0e:	d0ef      	beq.n	1acf0 <net_icmpv4_input+0x18>
		return true;
	}

	return net_if_ipv4_is_addr_bcast(iface, addr);
   1ad10:	f106 0110 	add.w	r1, r6, #16
   1ad14:	4638      	mov	r0, r7
   1ad16:	f7fe fecf 	bl	19ab8 <net_if_ipv4_is_addr_bcast>
   1ad1a:	2800      	cmp	r0, #0
   1ad1c:	d1e8      	bne.n	1acf0 <net_icmpv4_input+0x18>
	return net_pkt_skip(pkt, access->size);
   1ad1e:	9901      	ldr	r1, [sp, #4]
   1ad20:	4628      	mov	r0, r5
   1ad22:	f015 fe60 	bl	309e6 <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1ad26:	4b0b      	ldr	r3, [pc, #44]	; (1ad54 <net_icmpv4_input+0x7c>)
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	2b00      	cmp	r3, #0
   1ad2c:	d0e0      	beq.n	1acf0 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
   1ad2e:	7821      	ldrb	r1, [r4, #0]
   1ad30:	7a1a      	ldrb	r2, [r3, #8]
   1ad32:	428a      	cmp	r2, r1
   1ad34:	d10a      	bne.n	1ad4c <net_icmpv4_input+0x74>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1ad36:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   1ad38:	7860      	ldrb	r0, [r4, #1]
   1ad3a:	4290      	cmp	r0, r2
   1ad3c:	d000      	beq.n	1ad40 <net_icmpv4_input+0x68>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1ad3e:	b92a      	cbnz	r2, 1ad4c <net_icmpv4_input+0x74>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   1ad40:	685b      	ldr	r3, [r3, #4]
   1ad42:	4622      	mov	r2, r4
   1ad44:	4631      	mov	r1, r6
   1ad46:	4628      	mov	r0, r5
   1ad48:	4798      	blx	r3
   1ad4a:	e7d2      	b.n	1acf2 <net_icmpv4_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ad4c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1ad4e:	2b00      	cmp	r3, #0
   1ad50:	d1ee      	bne.n	1ad30 <net_icmpv4_input+0x58>
   1ad52:	e7cd      	b.n	1acf0 <net_icmpv4_input+0x18>
   1ad54:	20021b64 	.word	0x20021b64

0001ad58 <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
   1ad58:	4801      	ldr	r0, [pc, #4]	; (1ad60 <net_icmpv4_init+0x8>)
   1ad5a:	f7ff bfb3 	b.w	1acc4 <net_icmpv4_register_handler>
   1ad5e:	bf00      	nop
   1ad60:	200200b0 	.word	0x200200b0

0001ad64 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
   1ad64:	b510      	push	{r4, lr}
   1ad66:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1ad68:	2220      	movs	r2, #32
   1ad6a:	2100      	movs	r1, #0
   1ad6c:	f018 fd62 	bl	33834 <memset>
Z_GENLIST_PREPEND(slist, snode)
   1ad70:	4b03      	ldr	r3, [pc, #12]	; (1ad80 <conn_set_unused+0x1c>)
   1ad72:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1ad74:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ad76:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ad78:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ad7a:	b902      	cbnz	r2, 1ad7e <conn_set_unused+0x1a>
	list->tail = node;
   1ad7c:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
   1ad7e:	bd10      	pop	{r4, pc}
   1ad80:	20021b6c 	.word	0x20021b6c

0001ad84 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   1ad84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1ad88:	4e5d      	ldr	r6, [pc, #372]	; (1af00 <net_conn_register+0x17c>)
{
   1ad8a:	9101      	str	r1, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1ad8c:	6834      	ldr	r4, [r6, #0]
{
   1ad8e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   1ad92:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
   1ad96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1ad9a:	b344      	cbz	r4, 1adee <net_conn_register+0x6a>
   1ad9c:	fa97 f897 	rev16.w	r8, r7
   1ada0:	fa9c f99c 	rev16.w	r9, ip
   1ada4:	fa1f f888 	uxth.w	r8, r8
   1ada8:	fa1f f989 	uxth.w	r9, r9
		if (conn->proto != proto) {
   1adac:	8ba5      	ldrh	r5, [r4, #28]
   1adae:	4285      	cmp	r5, r0
   1adb0:	d11a      	bne.n	1ade8 <net_conn_register+0x64>
		if (conn->family != family) {
   1adb2:	7fa5      	ldrb	r5, [r4, #30]
   1adb4:	9901      	ldr	r1, [sp, #4]
   1adb6:	428d      	cmp	r5, r1
   1adb8:	d116      	bne.n	1ade8 <net_conn_register+0x64>
		if (remote_addr) {
   1adba:	7fe5      	ldrb	r5, [r4, #31]
   1adbc:	f005 0a02 	and.w	sl, r5, #2
   1adc0:	b1da      	cbz	r2, 1adfa <net_conn_register+0x76>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
   1adc2:	f1ba 0f00 	cmp.w	sl, #0
   1adc6:	d00f      	beq.n	1ade8 <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1adc8:	f8b2 a000 	ldrh.w	sl, [r2]
   1adcc:	f1ba 0f01 	cmp.w	sl, #1
   1add0:	d10a      	bne.n	1ade8 <net_conn_register+0x64>
				   remote_addr->sa_family == AF_INET &&
   1add2:	f8b4 a004 	ldrh.w	sl, [r4, #4]
   1add6:	f1ba 0f01 	cmp.w	sl, #1
   1adda:	d105      	bne.n	1ade8 <net_conn_register+0x64>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1addc:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1ade0:	f8d4 a008 	ldr.w	sl, [r4, #8]
				if (!net_ipv4_addr_cmp(
   1ade4:	45d3      	cmp	fp, sl
   1ade6:	d00b      	beq.n	1ae00 <net_conn_register+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ade8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1adea:	2c00      	cmp	r4, #0
   1adec:	d1de      	bne.n	1adac <net_conn_register+0x28>
	node = sys_slist_peek_head(&conn_unused);
   1adee:	4d45      	ldr	r5, [pc, #276]	; (1af04 <net_conn_register+0x180>)
   1adf0:	682c      	ldr	r4, [r5, #0]
	if (!node) {
   1adf2:	bb0c      	cbnz	r4, 1ae38 <net_conn_register+0xb4>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
   1adf4:	f06f 0001 	mvn.w	r0, #1
   1adf8:	e075      	b.n	1aee6 <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1adfa:	f1ba 0f00 	cmp.w	sl, #0
   1adfe:	d1f3      	bne.n	1ade8 <net_conn_register+0x64>
		if (local_addr) {
   1ae00:	f005 0504 	and.w	r5, r5, #4
   1ae04:	b1ab      	cbz	r3, 1ae32 <net_conn_register+0xae>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
   1ae06:	2d00      	cmp	r5, #0
   1ae08:	d0ee      	beq.n	1ade8 <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ae0a:	881d      	ldrh	r5, [r3, #0]
   1ae0c:	2d01      	cmp	r5, #1
   1ae0e:	d1eb      	bne.n	1ade8 <net_conn_register+0x64>
				   local_addr->sa_family == AF_INET &&
   1ae10:	89a5      	ldrh	r5, [r4, #12]
   1ae12:	2d01      	cmp	r5, #1
   1ae14:	d1e8      	bne.n	1ade8 <net_conn_register+0x64>
   1ae16:	f8d3 a004 	ldr.w	sl, [r3, #4]
   1ae1a:	6925      	ldr	r5, [r4, #16]
				if (!net_ipv4_addr_cmp(
   1ae1c:	45aa      	cmp	sl, r5
   1ae1e:	d1e3      	bne.n	1ade8 <net_conn_register+0x64>
		if (net_sin(&conn->remote_addr)->sin_port !=
   1ae20:	88e5      	ldrh	r5, [r4, #6]
   1ae22:	4545      	cmp	r5, r8
   1ae24:	d1e0      	bne.n	1ade8 <net_conn_register+0x64>
		if (net_sin(&conn->local_addr)->sin_port !=
   1ae26:	89e5      	ldrh	r5, [r4, #14]
   1ae28:	454d      	cmp	r5, r9
   1ae2a:	d1dd      	bne.n	1ade8 <net_conn_register+0x64>
		return -EALREADY;
   1ae2c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ae30:	e059      	b.n	1aee6 <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1ae32:	2d00      	cmp	r5, #0
   1ae34:	d0f4      	beq.n	1ae20 <net_conn_register+0x9c>
   1ae36:	e7d7      	b.n	1ade8 <net_conn_register+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1ae38:	6869      	ldr	r1, [r5, #4]
   1ae3a:	f8d4 9000 	ldr.w	r9, [r4]
   1ae3e:	428c      	cmp	r4, r1
	list->head = node;
   1ae40:	f8c5 9000 	str.w	r9, [r5]
	list->tail = node;
   1ae44:	bf08      	it	eq
   1ae46:	f8c5 9004 	streq.w	r9, [r5, #4]
	parent->next = child;
   1ae4a:	2500      	movs	r5, #0
   1ae4c:	6025      	str	r5, [r4, #0]
	}

	if (remote_addr) {
   1ae4e:	2a00      	cmp	r2, #0
   1ae50:	d04c      	beq.n	1aeec <net_conn_register+0x168>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(remote_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ae52:	8815      	ldrh	r5, [r2, #0]
   1ae54:	2d01      	cmp	r5, #1
   1ae56:	d14b      	bne.n	1aef0 <net_conn_register+0x16c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ae58:	6815      	ldr	r5, [r2, #0]
   1ae5a:	6065      	str	r5, [r4, #4]
   1ae5c:	6855      	ldr	r5, [r2, #4]
   1ae5e:	60a5      	str	r5, [r4, #8]
			   remote_addr->sa_family == AF_INET) {
			memcpy(&conn->remote_addr, remote_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(remote_addr)->sin_addr.s_addr) {
   1ae60:	6855      	ldr	r5, [r2, #4]
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   1ae62:	2d00      	cmp	r5, #0
		} else {
			NET_ERR("Remote address family not set");
			goto error;
		}

		flags |= NET_CONN_REMOTE_ADDR_SET;
   1ae64:	bf14      	ite	ne
   1ae66:	2522      	movne	r5, #34	; 0x22
   1ae68:	2502      	moveq	r5, #2
	}

	if (local_addr) {
   1ae6a:	b1bb      	cbz	r3, 1ae9c <net_conn_register+0x118>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(local_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ae6c:	f8b3 8000 	ldrh.w	r8, [r3]
   1ae70:	f1b8 0f01 	cmp.w	r8, #1
   1ae74:	d13c      	bne.n	1aef0 <net_conn_register+0x16c>
   1ae76:	f8d3 8000 	ldr.w	r8, [r3]
   1ae7a:	f8c4 800c 	str.w	r8, [r4, #12]
   1ae7e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1ae82:	f8c4 8010 	str.w	r8, [r4, #16]
			   local_addr->sa_family == AF_INET) {
			memcpy(&conn->local_addr, local_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(local_addr)->sin_addr.s_addr) {
   1ae86:	6859      	ldr	r1, [r3, #4]
   1ae88:	b109      	cbz	r1, 1ae8e <net_conn_register+0x10a>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   1ae8a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
		} else {
			NET_ERR("Local address family not set");
			goto error;
		}

		flags |= NET_CONN_LOCAL_ADDR_SET;
   1ae8e:	f045 0504 	orr.w	r5, r5, #4
	}

	if (remote_addr && local_addr) {
   1ae92:	b11a      	cbz	r2, 1ae9c <net_conn_register+0x118>
		if (remote_addr->sa_family != local_addr->sa_family) {
   1ae94:	8812      	ldrh	r2, [r2, #0]
   1ae96:	881b      	ldrh	r3, [r3, #0]
   1ae98:	429a      	cmp	r2, r3
   1ae9a:	d129      	bne.n	1aef0 <net_conn_register+0x16c>
			NET_ERR("Address families different");
			goto error;
		}
	}

	if (remote_port) {
   1ae9c:	b11f      	cbz	r7, 1aea6 <net_conn_register+0x122>
		flags |= NET_CONN_REMOTE_PORT_SPEC;
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1ae9e:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   1aea0:	f045 0508 	orr.w	r5, r5, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1aea4:	80e7      	strh	r7, [r4, #6]
	}

	if (local_port) {
   1aea6:	f1bc 0f00 	cmp.w	ip, #0
   1aeaa:	d005      	beq.n	1aeb8 <net_conn_register+0x134>
		flags |= NET_CONN_LOCAL_PORT_SPEC;
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1aeac:	fa9c fc9c 	rev16.w	ip, ip
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   1aeb0:	f045 0510 	orr.w	r5, r5, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1aeb4:	f8a4 c00e 	strh.w	ip, [r4, #14]
	}

	conn->cb = cb;
   1aeb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	conn->user_data = user_data;
	conn->flags = flags;
   1aeba:	77e5      	strb	r5, [r4, #31]
	conn->cb = cb;
   1aebc:	6163      	str	r3, [r4, #20]
	conn->user_data = user_data;
   1aebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn->proto = proto;
   1aec0:	83a0      	strh	r0, [r4, #28]
	conn->user_data = user_data;
   1aec2:	61a3      	str	r3, [r4, #24]
	conn->family = family;
   1aec4:	9b01      	ldr	r3, [sp, #4]
   1aec6:	77a3      	strb	r3, [r4, #30]

	if (handle) {
   1aec8:	f1be 0f00 	cmp.w	lr, #0
   1aecc:	d001      	beq.n	1aed2 <net_conn_register+0x14e>
		*handle = (struct net_conn_handle *)conn;
   1aece:	f8ce 4000 	str.w	r4, [lr]
	conn->flags |= NET_CONN_IN_USE;
   1aed2:	7fe3      	ldrb	r3, [r4, #31]
   1aed4:	f043 0301 	orr.w	r3, r3, #1
   1aed8:	77e3      	strb	r3, [r4, #31]
Z_GENLIST_PREPEND(slist, snode)
   1aeda:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
   1aedc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1aede:	6870      	ldr	r0, [r6, #4]
	list->head = node;
   1aee0:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1aee2:	b958      	cbnz	r0, 1aefc <net_conn_register+0x178>
	list->tail = node;
   1aee4:	6074      	str	r4, [r6, #4]

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
   1aee6:	b003      	add	sp, #12
   1aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t flags = 0U;
   1aeec:	4615      	mov	r5, r2
   1aeee:	e7bc      	b.n	1ae6a <net_conn_register+0xe6>
	conn_set_unused(conn);
   1aef0:	4620      	mov	r0, r4
   1aef2:	f7ff ff37 	bl	1ad64 <conn_set_unused>
	return -EINVAL;
   1aef6:	f06f 0015 	mvn.w	r0, #21
   1aefa:	e7f4      	b.n	1aee6 <net_conn_register+0x162>
	return 0;
   1aefc:	2000      	movs	r0, #0
   1aefe:	e7f2      	b.n	1aee6 <net_conn_register+0x162>
   1af00:	20021b74 	.word	0x20021b74
   1af04:	20021b6c 	.word	0x20021b6c

0001af08 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
   1af08:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1af0a:	4b15      	ldr	r3, [pc, #84]	; (1af60 <net_conn_unregister+0x58>)
   1af0c:	4298      	cmp	r0, r3
   1af0e:	d321      	bcc.n	1af54 <net_conn_unregister+0x4c>
   1af10:	3380      	adds	r3, #128	; 0x80
   1af12:	4298      	cmp	r0, r3
   1af14:	d81e      	bhi.n	1af54 <net_conn_unregister+0x4c>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   1af16:	7fc3      	ldrb	r3, [r0, #31]
   1af18:	07db      	lsls	r3, r3, #31
   1af1a:	d51e      	bpl.n	1af5a <net_conn_unregister+0x52>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1af1c:	2100      	movs	r1, #0
   1af1e:	4b11      	ldr	r3, [pc, #68]	; (1af64 <net_conn_unregister+0x5c>)
   1af20:	681a      	ldr	r2, [r3, #0]
   1af22:	b152      	cbz	r2, 1af3a <net_conn_unregister+0x32>
   1af24:	4290      	cmp	r0, r2
   1af26:	d112      	bne.n	1af4e <net_conn_unregister+0x46>
Z_GENLIST_REMOVE(slist, snode)
   1af28:	6802      	ldr	r2, [r0, #0]
   1af2a:	b951      	cbnz	r1, 1af42 <net_conn_unregister+0x3a>
   1af2c:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1af2e:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1af30:	4288      	cmp	r0, r1
   1af32:	d100      	bne.n	1af36 <net_conn_unregister+0x2e>
	list->tail = node;
   1af34:	605a      	str	r2, [r3, #4]
	parent->next = child;
   1af36:	2300      	movs	r3, #0
   1af38:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
   1af3a:	f7ff ff13 	bl	1ad64 <conn_set_unused>

	return 0;
   1af3e:	2000      	movs	r0, #0
}
   1af40:	bd08      	pop	{r3, pc}
   1af42:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1af44:	685a      	ldr	r2, [r3, #4]
   1af46:	4290      	cmp	r0, r2
	list->tail = node;
   1af48:	bf08      	it	eq
   1af4a:	6059      	streq	r1, [r3, #4]
   1af4c:	e7f3      	b.n	1af36 <net_conn_unregister+0x2e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1af4e:	4611      	mov	r1, r2
   1af50:	6812      	ldr	r2, [r2, #0]
   1af52:	e7e6      	b.n	1af22 <net_conn_unregister+0x1a>
		return -EINVAL;
   1af54:	f06f 0015 	mvn.w	r0, #21
   1af58:	e7f2      	b.n	1af40 <net_conn_unregister+0x38>
		return -ENOENT;
   1af5a:	f06f 0001 	mvn.w	r0, #1
   1af5e:	e7ef      	b.n	1af40 <net_conn_unregister+0x38>
   1af60:	20021b7c 	.word	0x20021b7c
   1af64:	20021b74 	.word	0x20021b74

0001af68 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   1af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1af6c:	2a11      	cmp	r2, #17
{
   1af6e:	b087      	sub	sp, #28
   1af70:	4606      	mov	r6, r0
   1af72:	4689      	mov	r9, r1
   1af74:	4617      	mov	r7, r2
   1af76:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1af78:	d16f      	bne.n	1b05a <net_conn_input+0xf2>
		src_port = proto_hdr->udp->src_port;
		dst_port = proto_hdr->udp->dst_port;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		src_port = proto_hdr->tcp->src_port;
   1af7a:	f8da 3000 	ldr.w	r3, [sl]
   1af7e:	881a      	ldrh	r2, [r3, #0]
   1af80:	9202      	str	r2, [sp, #8]
		dst_port = proto_hdr->tcp->dst_port;
   1af82:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   1af86:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1af8a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1af8e:	2b01      	cmp	r3, #1
   1af90:	d069      	beq.n	1b066 <net_conn_input+0xfe>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   1af92:	2500      	movs	r5, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1af94:	4b6a      	ldr	r3, [pc, #424]	; (1b140 <net_conn_input+0x1d8>)
   1af96:	681c      	ldr	r4, [r3, #0]
   1af98:	2c00      	cmp	r4, #0
   1af9a:	f000 80be 	beq.w	1b11a <net_conn_input+0x1b2>
   1af9e:	2200      	movs	r2, #0
   1afa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1afa4:	4690      	mov	r8, r2
   1afa6:	9304      	str	r3, [sp, #16]
		if (conn->proto != proto) {
   1afa8:	b2bb      	uxth	r3, r7
   1afaa:	9305      	str	r3, [sp, #20]
   1afac:	8ba3      	ldrh	r3, [r4, #28]
   1afae:	9905      	ldr	r1, [sp, #20]
   1afb0:	428b      	cmp	r3, r1
   1afb2:	d146      	bne.n	1b042 <net_conn_input+0xda>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   1afb4:	7fa1      	ldrb	r1, [r4, #30]
   1afb6:	b129      	cbz	r1, 1afc4 <net_conn_input+0x5c>
   1afb8:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   1afbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1afc0:	428b      	cmp	r3, r1
   1afc2:	d13e      	bne.n	1b042 <net_conn_input+0xda>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   1afc4:	88e3      	ldrh	r3, [r4, #6]
   1afc6:	b113      	cbz	r3, 1afce <net_conn_input+0x66>
				if (net_sin(&conn->remote_addr)->sin_port !=
   1afc8:	9902      	ldr	r1, [sp, #8]
   1afca:	4299      	cmp	r1, r3
   1afcc:	d139      	bne.n	1b042 <net_conn_input+0xda>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   1afce:	89e3      	ldrh	r3, [r4, #14]
   1afd0:	b10b      	cbz	r3, 1afd6 <net_conn_input+0x6e>
				if (net_sin(&conn->local_addr)->sin_port !=
   1afd2:	459b      	cmp	fp, r3
   1afd4:	d135      	bne.n	1b042 <net_conn_input+0xda>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1afd6:	7fe3      	ldrb	r3, [r4, #31]
   1afd8:	079f      	lsls	r7, r3, #30
   1afda:	d50f      	bpl.n	1affc <net_conn_input+0x94>
   1afdc:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1afe0:	88a0      	ldrh	r0, [r4, #4]
   1afe2:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1afe6:	4288      	cmp	r0, r1
   1afe8:	d12b      	bne.n	1b042 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1afea:	2901      	cmp	r1, #1
   1afec:	d106      	bne.n	1affc <net_conn_input+0x94>
		if (net_sin(addr)->sin_addr.s_addr) {
   1afee:	68a1      	ldr	r1, [r4, #8]
   1aff0:	b121      	cbz	r1, 1affc <net_conn_input+0x94>
   1aff2:	f8d9 0000 	ldr.w	r0, [r9]
   1aff6:	68c0      	ldr	r0, [r0, #12]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1aff8:	4281      	cmp	r1, r0
   1affa:	d122      	bne.n	1b042 <net_conn_input+0xda>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1affc:	0758      	lsls	r0, r3, #29
   1affe:	d50f      	bpl.n	1b020 <net_conn_input+0xb8>
   1b000:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1b004:	89a0      	ldrh	r0, [r4, #12]
   1b006:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1b00a:	4288      	cmp	r0, r1
   1b00c:	d119      	bne.n	1b042 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b00e:	2901      	cmp	r1, #1
   1b010:	d106      	bne.n	1b020 <net_conn_input+0xb8>
		if (net_sin(addr)->sin_addr.s_addr) {
   1b012:	6921      	ldr	r1, [r4, #16]
   1b014:	b121      	cbz	r1, 1b020 <net_conn_input+0xb8>
   1b016:	f8d9 0000 	ldr.w	r0, [r9]
   1b01a:	6900      	ldr	r0, [r0, #16]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1b01c:	4281      	cmp	r1, r0
   1b01e:	d110      	bne.n	1b042 <net_conn_input+0xda>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   1b020:	f1b8 0f00 	cmp.w	r8, #0
   1b024:	d003      	beq.n	1b02e <net_conn_input+0xc6>
   1b026:	f898 101f 	ldrb.w	r1, [r8, #31]
   1b02a:	0709      	lsls	r1, r1, #28
   1b02c:	d409      	bmi.n	1b042 <net_conn_input+0xda>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   1b02e:	9904      	ldr	r1, [sp, #16]
   1b030:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1b034:	4299      	cmp	r1, r3
   1b036:	da04      	bge.n	1b042 <net_conn_input+0xda>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   1b038:	2d00      	cmp	r5, #0
   1b03a:	d148      	bne.n	1b0ce <net_conn_input+0x166>
					best_rank = NET_CONN_RANK(conn->flags);
					best_match = conn;

					continue;
   1b03c:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
   1b03e:	b21b      	sxth	r3, r3
   1b040:	9304      	str	r3, [sp, #16]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b042:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1b044:	2c00      	cmp	r4, #0
   1b046:	d1b1      	bne.n	1afac <net_conn_input+0x44>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   1b048:	2d00      	cmp	r5, #0
   1b04a:	d056      	beq.n	1b0fa <net_conn_input+0x192>
   1b04c:	2a00      	cmp	r2, #0
   1b04e:	d054      	beq.n	1b0fa <net_conn_input+0x192>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   1b050:	4630      	mov	r0, r6
   1b052:	f015 fbda 	bl	3080a <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   1b056:	2000      	movs	r0, #0
   1b058:	e002      	b.n	1b060 <net_conn_input+0xf8>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1b05a:	2a06      	cmp	r2, #6
   1b05c:	d08d      	beq.n	1af7a <net_conn_input+0x12>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   1b05e:	2002      	movs	r0, #2
}
   1b060:	b007      	add	sp, #28
   1b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
   1b066:	f8d9 4000 	ldr.w	r4, [r9]
   1b06a:	68e2      	ldr	r2, [r4, #12]
   1b06c:	6923      	ldr	r3, [r4, #16]
   1b06e:	429a      	cmp	r2, r3
   1b070:	d061      	beq.n	1b136 <net_conn_input+0x1ce>
		    net_ipv4_is_my_addr(&ip_hdr->ipv4->src)) {
   1b072:	f104 050c 	add.w	r5, r4, #12
 */
static inline bool net_ipv4_is_my_addr(const struct in_addr *addr)
{
	bool ret;

	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1b076:	2100      	movs	r1, #0
   1b078:	4628      	mov	r0, r5
   1b07a:	f7fe fd9d 	bl	19bb8 <net_if_ipv4_addr_lookup>
   1b07e:	f1b0 0800 	subs.w	r8, r0, #0
   1b082:	bf14      	ite	ne
   1b084:	2001      	movne	r0, #1
   1b086:	2000      	moveq	r0, #0
	if (!ret) {
   1b088:	d109      	bne.n	1b09e <net_conn_input+0x136>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b08a:	f7fe fee1 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b08e:	68e2      	ldr	r2, [r4, #12]
   1b090:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b092:	429a      	cmp	r2, r3
   1b094:	d004      	beq.n	1b0a0 <net_conn_input+0x138>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1b096:	4629      	mov	r1, r5
   1b098:	4640      	mov	r0, r8
   1b09a:	f7fe fd0d 	bl	19ab8 <net_if_ipv4_is_addr_bcast>
				      &ip_hdr->ipv4->dst) ||
   1b09e:	b110      	cbz	r0, 1b0a6 <net_conn_input+0x13e>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1b0a0:	9b02      	ldr	r3, [sp, #8]
   1b0a2:	459b      	cmp	fp, r3
   1b0a4:	d0db      	beq.n	1b05e <net_conn_input+0xf6>
   1b0a6:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1b0aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b0ae:	2b01      	cmp	r3, #1
   1b0b0:	f47f af6f 	bne.w	1af92 <net_conn_input+0x2a>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   1b0b4:	f8d9 3000 	ldr.w	r3, [r9]
   1b0b8:	691d      	ldr	r5, [r3, #16]
   1b0ba:	ba2d      	rev	r5, r5
   1b0bc:	f005 4560 	and.w	r5, r5, #3758096384	; 0xe0000000
		if (net_ipv4_is_addr_mcast(&ip_hdr->ipv4->dst)) {
   1b0c0:	f105 5c00 	add.w	ip, r5, #536870912	; 0x20000000
   1b0c4:	f1dc 0500 	rsbs	r5, ip, #0
   1b0c8:	eb45 050c 	adc.w	r5, r5, ip
   1b0cc:	e762      	b.n	1af94 <net_conn_input+0x2c>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   1b0ce:	2164      	movs	r1, #100	; 0x64
   1b0d0:	4630      	mov	r0, r6
   1b0d2:	f015 fd3a 	bl	30b4a <net_pkt_clone>
				if (!mcast_pkt) {
   1b0d6:	9003      	str	r0, [sp, #12]
   1b0d8:	2800      	cmp	r0, #0
   1b0da:	d0c0      	beq.n	1b05e <net_conn_input+0xf6>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   1b0dc:	69a3      	ldr	r3, [r4, #24]
   1b0de:	4601      	mov	r1, r0
   1b0e0:	9300      	str	r3, [sp, #0]
   1b0e2:	464a      	mov	r2, r9
   1b0e4:	4653      	mov	r3, sl
   1b0e6:	4620      	mov	r0, r4
   1b0e8:	6967      	ldr	r7, [r4, #20]
   1b0ea:	47b8      	blx	r7
   1b0ec:	2802      	cmp	r0, #2
   1b0ee:	d102      	bne.n	1b0f6 <net_conn_input+0x18e>
					net_pkt_unref(mcast_pkt);
   1b0f0:	9803      	ldr	r0, [sp, #12]
   1b0f2:	f015 fb8a 	bl	3080a <net_pkt_unref>
				mcast_pkt_delivered = true;
   1b0f6:	462a      	mov	r2, r5
   1b0f8:	e7a3      	b.n	1b042 <net_conn_input+0xda>
	if (conn) {
   1b0fa:	f1b8 0f00 	cmp.w	r8, #0
   1b0fe:	d00c      	beq.n	1b11a <net_conn_input+0x1b2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   1b100:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1b104:	464a      	mov	r2, r9
   1b106:	9300      	str	r3, [sp, #0]
   1b108:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1b10c:	4653      	mov	r3, sl
   1b10e:	4631      	mov	r1, r6
   1b110:	4640      	mov	r0, r8
   1b112:	47a0      	blx	r4
   1b114:	2802      	cmp	r0, #2
   1b116:	d19e      	bne.n	1b056 <net_conn_input+0xee>
   1b118:	e7a1      	b.n	1b05e <net_conn_input+0xf6>
   1b11a:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b11e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b122:	2b01      	cmp	r3, #1
   1b124:	d101      	bne.n	1b12a <net_conn_input+0x1c2>
		   net_pkt_family(pkt) == AF_INET && is_mcast_pkt) {
   1b126:	2d00      	cmp	r5, #0
   1b128:	d199      	bne.n	1b05e <net_conn_input+0xf6>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
   1b12a:	2203      	movs	r2, #3
   1b12c:	4630      	mov	r0, r6
   1b12e:	4611      	mov	r1, r2
   1b130:	f015 fe76 	bl	30e20 <net_icmpv4_send_error>
   1b134:	e793      	b.n	1b05e <net_conn_input+0xf6>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1b136:	9b02      	ldr	r3, [sp, #8]
   1b138:	459b      	cmp	fp, r3
   1b13a:	d090      	beq.n	1b05e <net_conn_input+0xf6>
   1b13c:	e7ba      	b.n	1b0b4 <net_conn_input+0x14c>
   1b13e:	bf00      	nop
   1b140:	20021b74 	.word	0x20021b74

0001b144 <net_conn_init>:
	list->head = NULL;
   1b144:	2200      	movs	r2, #0
   1b146:	4b09      	ldr	r3, [pc, #36]	; (1b16c <net_conn_init+0x28>)
	list->tail = NULL;
   1b148:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   1b14c:	4b08      	ldr	r3, [pc, #32]	; (1b170 <net_conn_init+0x2c>)
   1b14e:	4619      	mov	r1, r3
   1b150:	601a      	str	r2, [r3, #0]
   1b152:	f103 0220 	add.w	r2, r3, #32
   1b156:	f841 2f40 	str.w	r2, [r1, #64]!
   1b15a:	461a      	mov	r2, r3
   1b15c:	f842 1f60 	str.w	r1, [r2, #96]!
   1b160:	4904      	ldr	r1, [pc, #16]	; (1b174 <net_conn_init+0x30>)
   1b162:	621b      	str	r3, [r3, #32]
	return list->tail;
   1b164:	e9c1 2300 	strd	r2, r3, [r1]
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   1b168:	4770      	bx	lr
   1b16a:	bf00      	nop
   1b16c:	20021b74 	.word	0x20021b74
   1b170:	20021b7c 	.word	0x20021b7c
   1b174:	20021b6c 	.word	0x20021b6c

0001b178 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1b178:	460a      	mov	r2, r1
   1b17a:	4601      	mov	r1, r0
   1b17c:	4801      	ldr	r0, [pc, #4]	; (1b184 <k_delayed_work_submit+0xc>)
   1b17e:	f00e bdf9 	b.w	29d74 <k_delayed_work_submit_to_queue>
   1b182:	bf00      	nop
   1b184:	20027368 	.word	0x20027368

0001b188 <net_context_get_family>:
{
   1b188:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b18a:	4604      	mov	r4, r0
   1b18c:	b970      	cbnz	r0, 1b1ac <net_context_get_family+0x24>
   1b18e:	490a      	ldr	r1, [pc, #40]	; (1b1b8 <net_context_get_family+0x30>)
   1b190:	f240 13cb 	movw	r3, #459	; 0x1cb
   1b194:	4a09      	ldr	r2, [pc, #36]	; (1b1bc <net_context_get_family+0x34>)
   1b196:	480a      	ldr	r0, [pc, #40]	; (1b1c0 <net_context_get_family+0x38>)
   1b198:	f013 f810 	bl	2e1bc <printk>
   1b19c:	4809      	ldr	r0, [pc, #36]	; (1b1c4 <net_context_get_family+0x3c>)
   1b19e:	f013 f80d 	bl	2e1bc <printk>
   1b1a2:	f240 11cb 	movw	r1, #459	; 0x1cb
   1b1a6:	4805      	ldr	r0, [pc, #20]	; (1b1bc <net_context_get_family+0x34>)
   1b1a8:	f013 fb09 	bl	2e7be <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1b1ac:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1b1b0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b1b4:	bd10      	pop	{r4, pc}
   1b1b6:	bf00      	nop
   1b1b8:	00035d76 	.word	0x00035d76
   1b1bc:	00035d49 	.word	0x00035d49
   1b1c0:	00035920 	.word	0x00035920
   1b1c4:	00035d7e 	.word	0x00035d7e

0001b1c8 <net_context_get_state>:
{
   1b1c8:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b1ca:	4604      	mov	r4, r0
   1b1cc:	b970      	cbnz	r0, 1b1ec <net_context_get_state+0x24>
   1b1ce:	490a      	ldr	r1, [pc, #40]	; (1b1f8 <net_context_get_state+0x30>)
   1b1d0:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1b1d4:	4a09      	ldr	r2, [pc, #36]	; (1b1fc <net_context_get_state+0x34>)
   1b1d6:	480a      	ldr	r0, [pc, #40]	; (1b200 <net_context_get_state+0x38>)
   1b1d8:	f012 fff0 	bl	2e1bc <printk>
   1b1dc:	4809      	ldr	r0, [pc, #36]	; (1b204 <net_context_get_state+0x3c>)
   1b1de:	f012 ffed 	bl	2e1bc <printk>
   1b1e2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1b1e6:	4805      	ldr	r0, [pc, #20]	; (1b1fc <net_context_get_state+0x34>)
   1b1e8:	f013 fae9 	bl	2e7be <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1b1ec:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1b1f0:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1b1f4:	bd10      	pop	{r4, pc}
   1b1f6:	bf00      	nop
   1b1f8:	00035d76 	.word	0x00035d76
   1b1fc:	00035d49 	.word	0x00035d49
   1b200:	00035920 	.word	0x00035920
   1b204:	00035d7e 	.word	0x00035d7e

0001b208 <net_context_set_state>:
{
   1b208:	b538      	push	{r3, r4, r5, lr}
   1b20a:	460d      	mov	r5, r1
	NET_ASSERT(context);
   1b20c:	4604      	mov	r4, r0
   1b20e:	b970      	cbnz	r0, 1b22e <net_context_set_state+0x26>
   1b210:	490b      	ldr	r1, [pc, #44]	; (1b240 <net_context_set_state+0x38>)
   1b212:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1b216:	4a0b      	ldr	r2, [pc, #44]	; (1b244 <net_context_set_state+0x3c>)
   1b218:	480b      	ldr	r0, [pc, #44]	; (1b248 <net_context_set_state+0x40>)
   1b21a:	f012 ffcf 	bl	2e1bc <printk>
   1b21e:	480b      	ldr	r0, [pc, #44]	; (1b24c <net_context_set_state+0x44>)
   1b220:	f012 ffcc 	bl	2e1bc <printk>
   1b224:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1b228:	4806      	ldr	r0, [pc, #24]	; (1b244 <net_context_set_state+0x3c>)
   1b22a:	f013 fac8 	bl	2e7be <assert_post_action>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1b22e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   1b232:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1b236:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   1b23a:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
}
   1b23e:	bd38      	pop	{r3, r4, r5, pc}
   1b240:	00035d76 	.word	0x00035d76
   1b244:	00035d49 	.word	0x00035d49
   1b248:	00035920 	.word	0x00035920
   1b24c:	00035d7e 	.word	0x00035d7e

0001b250 <net_context_get_iface>:
{
   1b250:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b252:	4604      	mov	r4, r0
   1b254:	b970      	cbnz	r0, 1b274 <net_context_get_iface+0x24>
   1b256:	490a      	ldr	r1, [pc, #40]	; (1b280 <net_context_get_iface+0x30>)
   1b258:	f240 2371 	movw	r3, #625	; 0x271
   1b25c:	4a09      	ldr	r2, [pc, #36]	; (1b284 <net_context_get_iface+0x34>)
   1b25e:	480a      	ldr	r0, [pc, #40]	; (1b288 <net_context_get_iface+0x38>)
   1b260:	f012 ffac 	bl	2e1bc <printk>
   1b264:	4809      	ldr	r0, [pc, #36]	; (1b28c <net_context_get_iface+0x3c>)
   1b266:	f012 ffa9 	bl	2e1bc <printk>
   1b26a:	f240 2171 	movw	r1, #625	; 0x271
   1b26e:	4805      	ldr	r0, [pc, #20]	; (1b284 <net_context_get_iface+0x34>)
   1b270:	f013 faa5 	bl	2e7be <assert_post_action>
	return net_if_get_by_index(context->iface);
   1b274:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
}
   1b278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   1b27c:	f7fe bd42 	b.w	19d04 <net_if_get_by_index>
   1b280:	00035d76 	.word	0x00035d76
   1b284:	00035d49 	.word	0x00035d49
   1b288:	00035920 	.word	0x00035920
   1b28c:	00035d7e 	.word	0x00035d7e

0001b290 <net_context_set_iface.isra.25>:
static inline void net_context_set_iface(struct net_context *context,
   1b290:	b538      	push	{r3, r4, r5, lr}
   1b292:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   1b294:	460c      	mov	r4, r1
   1b296:	b971      	cbnz	r1, 1b2b6 <net_context_set_iface.isra.25+0x26>
   1b298:	4909      	ldr	r1, [pc, #36]	; (1b2c0 <net_context_set_iface.isra.25+0x30>)
   1b29a:	f240 2381 	movw	r3, #641	; 0x281
   1b29e:	4a09      	ldr	r2, [pc, #36]	; (1b2c4 <net_context_set_iface.isra.25+0x34>)
   1b2a0:	4809      	ldr	r0, [pc, #36]	; (1b2c8 <net_context_set_iface.isra.25+0x38>)
   1b2a2:	f012 ff8b 	bl	2e1bc <printk>
   1b2a6:	4809      	ldr	r0, [pc, #36]	; (1b2cc <net_context_set_iface.isra.25+0x3c>)
   1b2a8:	f012 ff88 	bl	2e1bc <printk>
   1b2ac:	f240 2181 	movw	r1, #641	; 0x281
   1b2b0:	4804      	ldr	r0, [pc, #16]	; (1b2c4 <net_context_set_iface.isra.25+0x34>)
   1b2b2:	f013 fa84 	bl	2e7be <assert_post_action>
	context->iface = net_if_get_by_iface(iface);
   1b2b6:	4620      	mov	r0, r4
   1b2b8:	f7fe fd36 	bl	19d28 <net_if_get_by_iface>
   1b2bc:	7028      	strb	r0, [r5, #0]
}
   1b2be:	bd38      	pop	{r3, r4, r5, pc}
   1b2c0:	00036549 	.word	0x00036549
   1b2c4:	00035d49 	.word	0x00035d49
   1b2c8:	00035920 	.word	0x00035920
   1b2cc:	00035d7e 	.word	0x00035d7e

0001b2d0 <tcp_backlog_find.isra.26>:
		addr6->sin6_port = port;
		addr->sa_family = AF_INET6;
	}
}

static int tcp_backlog_find(struct net_pkt *pkt,
   1b2d0:	b570      	push	{r4, r5, r6, lr}
			    int *empty_slot)
{
	int i, empty = -1;

	for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1b2d2:	4d12      	ldr	r5, [pc, #72]	; (1b31c <tcp_backlog_find.isra.26+0x4c>)
static int tcp_backlog_find(struct net_pkt *pkt,
   1b2d4:	461e      	mov	r6, r3
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1b2d6:	682c      	ldr	r4, [r5, #0]
   1b2d8:	b144      	cbz	r4, 1b2ec <tcp_backlog_find.isra.26+0x1c>
   1b2da:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
			empty = i;
			continue;
		}

		if (net_pkt_family(pkt) != tcp_backlog[i].remote.sa_family) {
   1b2de:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1b2e0:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1b2e4:	4283      	cmp	r3, r0
   1b2e6:	d006      	beq.n	1b2f6 <tcp_backlog_find.isra.26+0x26>
	int i, empty = -1;
   1b2e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		}

		return i;
	}

	if (empty_slot) {
   1b2ec:	b106      	cbz	r6, 1b2f0 <tcp_backlog_find.isra.26+0x20>
		*empty_slot = empty;
   1b2ee:	6034      	str	r4, [r6, #0]
	}

	return -EADDRNOTAVAIL;
   1b2f0:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b2f4:	e002      	b.n	1b2fc <tcp_backlog_find.isra.26+0x2c>
		if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b2f6:	2801      	cmp	r0, #1
   1b2f8:	d001      	beq.n	1b2fe <tcp_backlog_find.isra.26+0x2e>
	return -EADDRNOTAVAIL;
   1b2fa:	2000      	movs	r0, #0
}
   1b2fc:	bd70      	pop	{r4, r5, r6, pc}
			if (net_sin(&tcp_backlog[i].remote)->sin_port !=
   1b2fe:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
   1b300:	8813      	ldrh	r3, [r2, #0]
   1b302:	4298      	cmp	r0, r3
   1b304:	d1f0      	bne.n	1b2e8 <tcp_backlog_find.isra.26+0x18>
				   &ip_hdr->ipv4->src,
   1b306:	6809      	ldr	r1, [r1, #0]
			if (memcmp(&net_sin(&tcp_backlog[i].remote)->sin_addr,
   1b308:	2204      	movs	r2, #4
   1b30a:	310c      	adds	r1, #12
   1b30c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1b310:	f018 fa48 	bl	337a4 <memcmp>
   1b314:	2800      	cmp	r0, #0
   1b316:	d0f0      	beq.n	1b2fa <tcp_backlog_find.isra.26+0x2a>
   1b318:	e7e6      	b.n	1b2e8 <tcp_backlog_find.isra.26+0x18>
   1b31a:	bf00      	nop
   1b31c:	20021bfc 	.word	0x20021bfc

0001b320 <prepare_segment.isra.21>:
static int prepare_segment(struct net_tcp *tcp,
   1b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b324:	b08d      	sub	sp, #52	; 0x34
   1b326:	9303      	str	r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1b328:	ab07      	add	r3, sp, #28
   1b32a:	9305      	str	r3, [sp, #20]
   1b32c:	2314      	movs	r3, #20
static int prepare_segment(struct net_tcp *tcp,
   1b32e:	460e      	mov	r6, r1
   1b330:	4614      	mov	r4, r2
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1b332:	9306      	str	r3, [sp, #24]
	NET_ASSERT(context);
   1b334:	4605      	mov	r5, r0
   1b336:	b970      	cbnz	r0, 1b356 <prepare_segment.isra.21+0x36>
   1b338:	4974      	ldr	r1, [pc, #464]	; (1b50c <prepare_segment.isra.21+0x1ec>)
   1b33a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   1b33e:	4a74      	ldr	r2, [pc, #464]	; (1b510 <prepare_segment.isra.21+0x1f0>)
   1b340:	4874      	ldr	r0, [pc, #464]	; (1b514 <prepare_segment.isra.21+0x1f4>)
   1b342:	f012 ff3b 	bl	2e1bc <printk>
   1b346:	4874      	ldr	r0, [pc, #464]	; (1b518 <prepare_segment.isra.21+0x1f8>)
   1b348:	f012 ff38 	bl	2e1bc <printk>
   1b34c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   1b350:	486f      	ldr	r0, [pc, #444]	; (1b510 <prepare_segment.isra.21+0x1f0>)
   1b352:	f013 fa34 	bl	2e7be <assert_post_action>
	if (pkt) {
   1b356:	2c00      	cmp	r4, #0
   1b358:	f000 8095 	beq.w	1b486 <prepare_segment.isra.21+0x166>
		pkt->buffer = NULL;
   1b35c:	2300      	movs	r3, #0
		tail = pkt->buffer;
   1b35e:	f8d4 8010 	ldr.w	r8, [r4, #16]
		pkt->buffer = NULL;
   1b362:	6123      	str	r3, [r4, #16]
		status = net_pkt_alloc_buffer(pkt, segment->optlen,
   1b364:	2206      	movs	r2, #6
   1b366:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1b36a:	7af1      	ldrb	r1, [r6, #11]
   1b36c:	4620      	mov	r0, r4
   1b36e:	f7ff fb89 	bl	1aa84 <net_pkt_alloc_buffer>
		if (status) {
   1b372:	4607      	mov	r7, r0
   1b374:	2800      	cmp	r0, #0
   1b376:	f040 80ab 	bne.w	1b4d0 <prepare_segment.isra.21+0x1b0>
		pkt_allocated = false;
   1b37a:	4681      	mov	r9, r0
	pkt->tcp_first_msg = is_1st;
   1b37c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1b380:	f043 0301 	orr.w	r3, r3, #1
   1b384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	pkt->sent_or_eof = sent;
   1b388:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1b38c:	f36f 0341 	bfc	r3, #1, #1
   1b390:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return pkt->family;
   1b394:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b398:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b39c:	2b01      	cmp	r3, #1
   1b39e:	f040 80ac 	bne.w	1b4fa <prepare_segment.isra.21+0x1da>
				net_sin_ptr(segment->src_addr)->sin_addr,
   1b3a2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
		status = net_context_create_ipv4_new(context, pkt,
   1b3a6:	4621      	mov	r1, r4
   1b3a8:	3304      	adds	r3, #4
   1b3aa:	6852      	ldr	r2, [r2, #4]
   1b3ac:	4628      	mov	r0, r5
   1b3ae:	f7ff f859 	bl	1a464 <net_context_create_ipv4_new>
		if (status < 0) {
   1b3b2:	1e07      	subs	r7, r0, #0
   1b3b4:	f2c0 8089 	blt.w	1b4ca <prepare_segment.isra.21+0x1aa>
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b3b8:	6973      	ldr	r3, [r6, #20]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b3ba:	a905      	add	r1, sp, #20
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b3bc:	885b      	ldrh	r3, [r3, #2]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b3be:	4620      	mov	r0, r4
		src_port = ((struct sockaddr_in_ptr *)&context->local)->
   1b3c0:	f8b5 b01e 	ldrh.w	fp, [r5, #30]
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b3c4:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b3c6:	f015 fc62 	bl	30c8e <net_pkt_get_data>
	if (!tcp_hdr) {
   1b3ca:	4605      	mov	r5, r0
   1b3cc:	2800      	cmp	r0, #0
   1b3ce:	f000 8097 	beq.w	1b500 <prepare_segment.isra.21+0x1e0>
	if (segment->options && segment->optlen) {
   1b3d2:	68f3      	ldr	r3, [r6, #12]
   1b3d4:	2b00      	cmp	r3, #0
   1b3d6:	d06f      	beq.n	1b4b8 <prepare_segment.isra.21+0x198>
   1b3d8:	f896 a00b 	ldrb.w	sl, [r6, #11]
   1b3dc:	f1ba 0f00 	cmp.w	sl, #0
   1b3e0:	d007      	beq.n	1b3f2 <prepare_segment.isra.21+0xd2>
		if ((segment->optlen & 0x3u) != 0u) {
   1b3e2:	f01a 0f03 	tst.w	sl, #3
   1b3e6:	d004      	beq.n	1b3f2 <prepare_segment.isra.21+0xd2>
			optlen = (segment->optlen & 0xfffCu) + 4u;
   1b3e8:	f02a 0303 	bic.w	r3, sl, #3
   1b3ec:	3304      	adds	r3, #4
   1b3ee:	fa5f fa83 	uxtb.w	sl, r3
__ssp_bos_icheck3(memset, void *, int)
   1b3f2:	2210      	movs	r2, #16
   1b3f4:	2100      	movs	r1, #0
   1b3f6:	1d28      	adds	r0, r5, #4
   1b3f8:	f018 fa1c 	bl	33834 <memset>
	sys_put_be32(segment->seq, tcp_hdr->seq);
   1b3fc:	6832      	ldr	r2, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   1b3fe:	9b02      	ldr	r3, [sp, #8]
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(u32_t val, u8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
   1b400:	0c11      	lsrs	r1, r2, #16
	dst[1] = val;
   1b402:	7169      	strb	r1, [r5, #5]
	dst[0] = val >> 8;
   1b404:	0a08      	lsrs	r0, r1, #8
   1b406:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1b40a:	7128      	strb	r0, [r5, #4]
   1b40c:	71a9      	strb	r1, [r5, #6]
	dst[1] = val;
   1b40e:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   1b410:	6872      	ldr	r2, [r6, #4]
	tcp_hdr->src_port = src_port;
   1b412:	f8a5 b000 	strh.w	fp, [r5]
	sys_put_be16(val >> 16, dst);
   1b416:	0c11      	lsrs	r1, r2, #16
	dst[0] = val >> 8;
   1b418:	0a08      	lsrs	r0, r1, #8
	dst[1] = val;
   1b41a:	7269      	strb	r1, [r5, #9]
   1b41c:	72ea      	strb	r2, [r5, #11]
	dst[0] = val >> 8;
   1b41e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	tcp_hdr->offset   = (NET_TCPH_LEN + optlen) << 2;
   1b422:	f10a 0214 	add.w	r2, sl, #20
   1b426:	0092      	lsls	r2, r2, #2
   1b428:	7228      	strb	r0, [r5, #8]
   1b42a:	72a9      	strb	r1, [r5, #10]
   1b42c:	732a      	strb	r2, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   1b42e:	806b      	strh	r3, [r5, #2]
	tcp_hdr->flags    = segment->flags;
   1b430:	7ab2      	ldrb	r2, [r6, #10]
	net_pkt_set_data(pkt, &tcp_access);
   1b432:	4620      	mov	r0, r4
	tcp_hdr->flags    = segment->flags;
   1b434:	736a      	strb	r2, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   1b436:	8932      	ldrh	r2, [r6, #8]
   1b438:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   1b43a:	73ea      	strb	r2, [r5, #15]
	tcp_hdr->chksum   = 0U;
   1b43c:	2200      	movs	r2, #0
	dst[0] = val >> 8;
   1b43e:	73a9      	strb	r1, [r5, #14]
   1b440:	742a      	strb	r2, [r5, #16]
   1b442:	746a      	strb	r2, [r5, #17]
	tcp_hdr->urg[0]   = 0U;
   1b444:	74aa      	strb	r2, [r5, #18]
	tcp_hdr->urg[1]   = 0U;
   1b446:	74ea      	strb	r2, [r5, #19]
	net_pkt_set_data(pkt, &tcp_access);
   1b448:	a905      	add	r1, sp, #20
   1b44a:	f015 fc41 	bl	30cd0 <net_pkt_set_data>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1b44e:	f1ba 0f00 	cmp.w	sl, #0
   1b452:	d133      	bne.n	1b4bc <prepare_segment.isra.21+0x19c>
	if (tail) {
   1b454:	f1b8 0f00 	cmp.w	r8, #0
   1b458:	d140      	bne.n	1b4dc <prepare_segment.isra.21+0x1bc>
	net_pkt_cursor_init(pkt);
   1b45a:	4620      	mov	r0, r4
   1b45c:	f015 fa39 	bl	308d2 <net_pkt_cursor_init>
   1b460:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b464:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b468:	2b01      	cmp	r3, #1
   1b46a:	d13c      	bne.n	1b4e6 <prepare_segment.isra.21+0x1c6>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
   1b46c:	2106      	movs	r1, #6
   1b46e:	4620      	mov	r0, r4
   1b470:	f015 fd96 	bl	30fa0 <net_ipv4_finalize>
	if (status < 0) {
   1b474:	1e07      	subs	r7, r0, #0
   1b476:	da39      	bge.n	1b4ec <prepare_segment.isra.21+0x1cc>
		if (pkt_allocated) {
   1b478:	f1b9 0f00 	cmp.w	r9, #0
   1b47c:	d039      	beq.n	1b4f2 <prepare_segment.isra.21+0x1d2>
		net_pkt_unref(pkt);
   1b47e:	4620      	mov	r0, r4
   1b480:	f015 f9c3 	bl	3080a <net_pkt_unref>
   1b484:	e035      	b.n	1b4f2 <prepare_segment.isra.21+0x1d2>
		pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context),
   1b486:	4628      	mov	r0, r5
   1b488:	f7ff fee2 	bl	1b250 <net_context_get_iface>
   1b48c:	4607      	mov	r7, r0
   1b48e:	4628      	mov	r0, r5
   1b490:	f896 800b 	ldrb.w	r8, [r6, #11]
   1b494:	f7ff fe78 	bl	1b188 <net_context_get_family>
   1b498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1b49c:	4602      	mov	r2, r0
   1b49e:	9300      	str	r3, [sp, #0]
   1b4a0:	4641      	mov	r1, r8
   1b4a2:	2306      	movs	r3, #6
   1b4a4:	4638      	mov	r0, r7
   1b4a6:	f7ff fbaf 	bl	1ac08 <net_pkt_alloc_with_buffer>
		if (!pkt) {
   1b4aa:	b360      	cbz	r0, 1b506 <prepare_segment.isra.21+0x1e6>
	struct net_buf *tail = NULL;
   1b4ac:	46a0      	mov	r8, r4
	pkt->context = ctx;
   1b4ae:	61c5      	str	r5, [r0, #28]
   1b4b0:	4604      	mov	r4, r0
		pkt_allocated = true;
   1b4b2:	f04f 0901 	mov.w	r9, #1
   1b4b6:	e761      	b.n	1b37c <prepare_segment.isra.21+0x5c>
	u8_t optlen = 0U;
   1b4b8:	469a      	mov	sl, r3
   1b4ba:	e79a      	b.n	1b3f2 <prepare_segment.isra.21+0xd2>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1b4bc:	7af2      	ldrb	r2, [r6, #11]
   1b4be:	68f1      	ldr	r1, [r6, #12]
   1b4c0:	4620      	mov	r0, r4
   1b4c2:	f015 fbc9 	bl	30c58 <net_pkt_write>
   1b4c6:	2800      	cmp	r0, #0
   1b4c8:	d0c4      	beq.n	1b454 <prepare_segment.isra.21+0x134>
	if (pkt_allocated) {
   1b4ca:	f1b9 0f00 	cmp.w	r9, #0
   1b4ce:	d1d6      	bne.n	1b47e <prepare_segment.isra.21+0x15e>
		net_buf_unref(pkt->buffer);
   1b4d0:	6920      	ldr	r0, [r4, #16]
   1b4d2:	f7fe f925 	bl	19720 <net_buf_unref>
		pkt->buffer = tail;
   1b4d6:	f8c4 8010 	str.w	r8, [r4, #16]
   1b4da:	e00a      	b.n	1b4f2 <prepare_segment.isra.21+0x1d2>
		net_pkt_append_buffer(pkt, tail);
   1b4dc:	4641      	mov	r1, r8
   1b4de:	4620      	mov	r0, r4
   1b4e0:	f015 fa2c 	bl	3093c <net_pkt_append_buffer>
   1b4e4:	e7b9      	b.n	1b45a <prepare_segment.isra.21+0x13a>
	return -EINVAL;
   1b4e6:	f06f 0715 	mvn.w	r7, #21
   1b4ea:	e7c5      	b.n	1b478 <prepare_segment.isra.21+0x158>
	return 0;
   1b4ec:	2700      	movs	r7, #0
	*out_pkt = pkt;
   1b4ee:	9b03      	ldr	r3, [sp, #12]
   1b4f0:	601c      	str	r4, [r3, #0]
}
   1b4f2:	4638      	mov	r0, r7
   1b4f4:	b00d      	add	sp, #52	; 0x34
   1b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = -EINVAL;
   1b4fa:	f06f 0715 	mvn.w	r7, #21
   1b4fe:	e7e4      	b.n	1b4ca <prepare_segment.isra.21+0x1aa>
		status = -ENOBUFS;
   1b500:	f06f 0768 	mvn.w	r7, #104	; 0x68
   1b504:	e7e1      	b.n	1b4ca <prepare_segment.isra.21+0x1aa>
			return -ENOMEM;
   1b506:	f06f 070b 	mvn.w	r7, #11
   1b50a:	e7f2      	b.n	1b4f2 <prepare_segment.isra.21+0x1d2>
   1b50c:	00035d76 	.word	0x00035d76
   1b510:	000367de 	.word	0x000367de
   1b514:	00035920 	.word	0x00035920
   1b518:	00035d7e 	.word	0x00035d7e

0001b51c <net_tcp_alloc>:
{
   1b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b51e:	4607      	mov	r7, r0
	__asm__ volatile(
   1b520:	f04f 0320 	mov.w	r3, #32
   1b524:	f3ef 8411 	mrs	r4, BASEPRI
   1b528:	f383 8811 	msr	BASEPRI, r3
   1b52c:	f3bf 8f6f 	isb	sy
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1b530:	4a26      	ldr	r2, [pc, #152]	; (1b5cc <net_tcp_alloc+0xb0>)
   1b532:	2300      	movs	r3, #0
   1b534:	4616      	mov	r6, r2
		if (!net_tcp_is_used(&tcp_context[i])) {
   1b536:	4610      	mov	r0, r2
   1b538:	f015 fe36 	bl	311a8 <net_tcp_is_used>
   1b53c:	2800      	cmp	r0, #0
   1b53e:	d13c      	bne.n	1b5ba <net_tcp_alloc+0x9e>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   1b540:	22c0      	movs	r2, #192	; 0xc0
   1b542:	fb02 6203 	mla	r2, r2, r3, r6
   1b546:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   1b54a:	f041 0120 	orr.w	r1, r1, #32
   1b54e:	f8a2 10bc 	strh.w	r1, [r2, #188]	; 0xbc
	__asm__ volatile(
   1b552:	f384 8811 	msr	BASEPRI, r4
   1b556:	f3bf 8f6f 	isb	sy
	if (i >= NET_MAX_TCP_CONTEXT) {
   1b55a:	2b06      	cmp	r3, #6
   1b55c:	d033      	beq.n	1b5c6 <net_tcp_alloc+0xaa>
	(void)memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   1b55e:	22c0      	movs	r2, #192	; 0xc0
   1b560:	fb02 f403 	mul.w	r4, r2, r3
   1b564:	1935      	adds	r5, r6, r4
   1b566:	2100      	movs	r1, #0
   1b568:	4628      	mov	r0, r5
   1b56a:	f018 f963 	bl	33834 <memset>
	tcp_context[i].state = NET_TCP_CLOSED;
   1b56e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b572:	4432      	add	r2, r6
	tcp_context[i].flags = NET_TCP_IN_USE;
   1b574:	6853      	ldr	r3, [r2, #4]
   1b576:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
   1b57a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   1b57e:	f043 0320 	orr.w	r3, r3, #32
   1b582:	6053      	str	r3, [r2, #4]
	tcp_context[i].context = context;
   1b584:	5137      	str	r7, [r6, r4]
 * @return Return a random TCP sequence number
 */
static inline u32_t tcp_init_isn(void)
{
	/* Randomise initial seq number */
	return sys_rand32_get();
   1b586:	f000 fffd 	bl	1c584 <sys_rand32_get>
	tcp_context[i].accept_cb = NULL;
   1b58a:	2700      	movs	r7, #0
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1b58c:	4b10      	ldr	r3, [pc, #64]	; (1b5d0 <net_tcp_alloc+0xb4>)
	tcp_context[i].send_seq = tcp_init_isn();
   1b58e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1b592:	f104 0048 	add.w	r0, r4, #72	; 0x48
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1b596:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	tcp_context[i].accept_cb = NULL;
   1b59a:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1b59e:	490d      	ldr	r1, [pc, #52]	; (1b5d4 <net_tcp_alloc+0xb8>)
   1b5a0:	4430      	add	r0, r6
   1b5a2:	f018 f833 	bl	3360c <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   1b5a6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b5ae:	4639      	mov	r1, r7
   1b5b0:	4430      	add	r0, r6
   1b5b2:	f017 ffac 	bl	3350e <z_impl_k_sem_init>
}
   1b5b6:	4628      	mov	r0, r5
   1b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1b5ba:	3301      	adds	r3, #1
   1b5bc:	2b06      	cmp	r3, #6
   1b5be:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
   1b5c2:	d1b8      	bne.n	1b536 <net_tcp_alloc+0x1a>
   1b5c4:	e7c5      	b.n	1b552 <net_tcp_alloc+0x36>
		return NULL;
   1b5c6:	2500      	movs	r5, #0
   1b5c8:	e7f5      	b.n	1b5b6 <net_tcp_alloc+0x9a>
   1b5ca:	bf00      	nop
   1b5cc:	20021c34 	.word	0x20021c34
   1b5d0:	02180500 	.word	0x02180500
   1b5d4:	00031467 	.word	0x00031467

0001b5d8 <net_tcp_change_state>:
{
   1b5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b5da:	460d      	mov	r5, r1
	NET_ASSERT(tcp);
   1b5dc:	4604      	mov	r4, r0
   1b5de:	b970      	cbnz	r0, 1b5fe <net_tcp_change_state+0x26>
   1b5e0:	4922      	ldr	r1, [pc, #136]	; (1b66c <net_tcp_change_state+0x94>)
   1b5e2:	f240 5319 	movw	r3, #1305	; 0x519
   1b5e6:	4a22      	ldr	r2, [pc, #136]	; (1b670 <net_tcp_change_state+0x98>)
   1b5e8:	4822      	ldr	r0, [pc, #136]	; (1b674 <net_tcp_change_state+0x9c>)
   1b5ea:	f012 fde7 	bl	2e1bc <printk>
   1b5ee:	4822      	ldr	r0, [pc, #136]	; (1b678 <net_tcp_change_state+0xa0>)
   1b5f0:	f012 fde4 	bl	2e1bc <printk>
   1b5f4:	f240 5119 	movw	r1, #1305	; 0x519
   1b5f8:	481d      	ldr	r0, [pc, #116]	; (1b670 <net_tcp_change_state+0x98>)
   1b5fa:	f013 f8e0 	bl	2e7be <assert_post_action>
 * @param tcp TCP context
 */
#if defined(CONFIG_NET_NATIVE_TCP)
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1b5fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) == new_state) {
   1b602:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b606:	42ab      	cmp	r3, r5
   1b608:	d02d      	beq.n	1b666 <net_tcp_change_state+0x8e>
	NET_ASSERT(new_state >= NET_TCP_CLOSED &&
   1b60a:	2d0a      	cmp	r5, #10
   1b60c:	d90e      	bls.n	1b62c <net_tcp_change_state+0x54>
   1b60e:	491b      	ldr	r1, [pc, #108]	; (1b67c <net_tcp_change_state+0xa4>)
   1b610:	f44f 63a4 	mov.w	r3, #1312	; 0x520
   1b614:	4a16      	ldr	r2, [pc, #88]	; (1b670 <net_tcp_change_state+0x98>)
   1b616:	4817      	ldr	r0, [pc, #92]	; (1b674 <net_tcp_change_state+0x9c>)
   1b618:	f012 fdd0 	bl	2e1bc <printk>
   1b61c:	4816      	ldr	r0, [pc, #88]	; (1b678 <net_tcp_change_state+0xa0>)
   1b61e:	f012 fdcd 	bl	2e1bc <printk>
   1b622:	f44f 61a4 	mov.w	r1, #1312	; 0x520
   1b626:	4812      	ldr	r0, [pc, #72]	; (1b670 <net_tcp_change_state+0x98>)
   1b628:	f013 f8c9 	bl	2e7be <assert_post_action>
	tcp->state = new_state;
   1b62c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1b630:	f005 050f 	and.w	r5, r5, #15
   1b634:	f365 3350 	bfi	r3, r5, #13, #4
   1b638:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   1b63c:	b99d      	cbnz	r5, 1b666 <net_tcp_change_state+0x8e>
	if (!tcp->context) {
   1b63e:	6823      	ldr	r3, [r4, #0]
   1b640:	b18b      	cbz	r3, 1b666 <net_tcp_change_state+0x8e>
	if (tcp->context->conn_handler) {
   1b642:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1b644:	b118      	cbz	r0, 1b64e <net_tcp_change_state+0x76>
	return net_conn_unregister(handle);
   1b646:	f7ff fc5f 	bl	1af08 <net_conn_unregister>
		tcp->context->conn_handler = NULL;
   1b64a:	6823      	ldr	r3, [r4, #0]
   1b64c:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (tcp->accept_cb) {
   1b64e:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   1b652:	b145      	cbz	r5, 1b666 <net_tcp_change_state+0x8e>
		tcp->accept_cb(tcp->context,
   1b654:	6820      	ldr	r0, [r4, #0]
   1b656:	2208      	movs	r2, #8
   1b658:	4601      	mov	r1, r0
   1b65a:	f851 3b24 	ldr.w	r3, [r1], #36
   1b65e:	9300      	str	r3, [sp, #0]
   1b660:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   1b664:	47a8      	blx	r5
}
   1b666:	b003      	add	sp, #12
   1b668:	bd30      	pop	{r4, r5, pc}
   1b66a:	bf00      	nop
   1b66c:	00036819 	.word	0x00036819
   1b670:	000367de 	.word	0x000367de
   1b674:	00035920 	.word	0x00035920
   1b678:	00035d7e 	.word	0x00035d7e
   1b67c:	00036784 	.word	0x00036784

0001b680 <net_tcp_release>:
{
   1b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   1b684:	4604      	mov	r4, r0
   1b686:	2800      	cmp	r0, #0
   1b688:	d074      	beq.n	1b774 <net_tcp_release+0xf4>
   1b68a:	4b3c      	ldr	r3, [pc, #240]	; (1b77c <net_tcp_release+0xfc>)
   1b68c:	4298      	cmp	r0, r3
   1b68e:	d371      	bcc.n	1b774 <net_tcp_release+0xf4>
   1b690:	f503 6390 	add.w	r3, r3, #1152	; 0x480
   1b694:	4298      	cmp	r0, r3
   1b696:	d26d      	bcs.n	1b774 <net_tcp_release+0xf4>
	k_delayed_work_cancel(&tcp->retry_timer);
   1b698:	3048      	adds	r0, #72	; 0x48
   1b69a:	f00e fbfd 	bl	29e98 <k_delayed_work_cancel>
	sem->count = 0U;
   1b69e:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->ack_timer);
   1b6a0:	f104 0008 	add.w	r0, r4, #8
   1b6a4:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   1b6a8:	f00e fbf6 	bl	29e98 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   1b6ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b6b0:	f00e fbf2 	bl	29e98 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   1b6b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1b6b8:	f00e fbee 	bl	29e98 <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1b6bc:	4629      	mov	r1, r5
   1b6be:	4620      	mov	r0, r4
   1b6c0:	f7ff ff8a 	bl	1b5d8 <net_tcp_change_state>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b6c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b6c8:	b1d3      	cbz	r3, 1b700 <net_tcp_release+0x80>
   1b6ca:	f1b3 0538 	subs.w	r5, r3, #56	; 0x38
   1b6ce:	d017      	beq.n	1b700 <net_tcp_release+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b6d0:	681e      	ldr	r6, [r3, #0]
   1b6d2:	b106      	cbz	r6, 1b6d6 <net_tcp_release+0x56>
   1b6d4:	3e38      	subs	r6, #56	; 0x38
	parent->next = child;
   1b6d6:	f04f 0800 	mov.w	r8, #0
Z_GENLIST_REMOVE(slist, snode)
   1b6da:	462b      	mov	r3, r5
   1b6dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   1b6e0:	f853 2f38 	ldr.w	r2, [r3, #56]!
		if (atomic_get(&pkt->atomic_ref) == 0) {
   1b6e4:	f105 0724 	add.w	r7, r5, #36	; 0x24
   1b6e8:	4299      	cmp	r1, r3
	list->head = node;
   1b6ea:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	list->tail = node;
   1b6ee:	bf08      	it	eq
   1b6f0:	f8c4 208c 	streq.w	r2, [r4, #140]	; 0x8c
	parent->next = child;
   1b6f4:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
   1b6f8:	e8d7 3faf 	lda	r3, [r7]
   1b6fc:	b9d3      	cbnz	r3, 1b734 <net_tcp_release+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b6fe:	bb9e      	cbnz	r6, 1b768 <net_tcp_release+0xe8>
	tcp->context = NULL;
   1b700:	2000      	movs	r0, #0
   1b702:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1b704:	f04f 0320 	mov.w	r3, #32
   1b708:	f3ef 8111 	mrs	r1, BASEPRI
   1b70c:	f383 8811 	msr	BASEPRI, r3
   1b710:	f3bf 8f6f 	isb	sy
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   1b714:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   1b718:	f3c3 1247 	ubfx	r2, r3, #5, #8
   1b71c:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   1b720:	f362 134c 	bfi	r3, r2, #5, #8
   1b724:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile(
   1b728:	f381 8811 	msr	BASEPRI, r1
   1b72c:	f3bf 8f6f 	isb	sy
}
   1b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_pkt_unref(pkt);
   1b734:	4628      	mov	r0, r5
   1b736:	f015 f868 	bl	3080a <net_pkt_unref>
   1b73a:	e8d7 3faf 	lda	r3, [r7]
		if (refcount > 0) {
   1b73e:	2b00      	cmp	r3, #0
   1b740:	461f      	mov	r7, r3
   1b742:	dddc      	ble.n	1b6fe <net_tcp_release+0x7e>
   1b744:	f105 0208 	add.w	r2, r5, #8
   1b748:	e8d2 2faf 	lda	r2, [r2]
			if (k_work_pending(net_pkt_work(pkt)) ||
   1b74c:	07d1      	lsls	r1, r2, #31
   1b74e:	d403      	bmi.n	1b758 <net_tcp_release+0xd8>
	return pkt->sent_or_eof;
   1b750:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
   1b754:	0792      	lsls	r2, r2, #30
   1b756:	d500      	bpl.n	1b75a <net_tcp_release+0xda>
				refcount--;
   1b758:	1e5f      	subs	r7, r3, #1
			while (refcount) {
   1b75a:	2f00      	cmp	r7, #0
   1b75c:	d0cf      	beq.n	1b6fe <net_tcp_release+0x7e>
				net_pkt_unref(pkt);
   1b75e:	4628      	mov	r0, r5
   1b760:	f015 f853 	bl	3080a <net_pkt_unref>
				refcount--;
   1b764:	3f01      	subs	r7, #1
   1b766:	e7f8      	b.n	1b75a <net_tcp_release+0xda>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b768:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b76a:	b103      	cbz	r3, 1b76e <net_tcp_release+0xee>
   1b76c:	3b38      	subs	r3, #56	; 0x38
{
   1b76e:	4635      	mov	r5, r6
   1b770:	461e      	mov	r6, r3
   1b772:	e7b2      	b.n	1b6da <net_tcp_release+0x5a>
		return -EINVAL;
   1b774:	f06f 0015 	mvn.w	r0, #21
   1b778:	e7da      	b.n	1b730 <net_tcp_release+0xb0>
   1b77a:	bf00      	nop
   1b77c:	20021c34 	.word	0x20021c34

0001b780 <net_tcp_queue_data>:
{
   1b780:	b570      	push	{r4, r5, r6, lr}
   1b782:	4604      	mov	r4, r0
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1b784:	2500      	movs	r5, #0
   1b786:	b086      	sub	sp, #24
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   1b788:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	size_t data_len = net_pkt_get_len(pkt);
   1b78a:	690b      	ldr	r3, [r1, #16]
{
   1b78c:	9105      	str	r1, [sp, #20]

	while (buf) {
   1b78e:	bba3      	cbnz	r3, 1b7fa <net_tcp_queue_data+0x7a>
	if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1b790:	4620      	mov	r0, r4
   1b792:	f7ff fd19 	bl	1b1c8 <net_context_get_state>
   1b796:	2802      	cmp	r0, #2
   1b798:	d133      	bne.n	1b802 <net_tcp_queue_data+0x82>
	NET_ASSERT(context->tcp);
   1b79a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b79c:	b973      	cbnz	r3, 1b7bc <net_tcp_queue_data+0x3c>
   1b79e:	491c      	ldr	r1, [pc, #112]	; (1b810 <net_tcp_queue_data+0x90>)
   1b7a0:	f240 3366 	movw	r3, #870	; 0x366
   1b7a4:	4a1b      	ldr	r2, [pc, #108]	; (1b814 <net_tcp_queue_data+0x94>)
   1b7a6:	481c      	ldr	r0, [pc, #112]	; (1b818 <net_tcp_queue_data+0x98>)
   1b7a8:	f012 fd08 	bl	2e1bc <printk>
   1b7ac:	481b      	ldr	r0, [pc, #108]	; (1b81c <net_tcp_queue_data+0x9c>)
   1b7ae:	f012 fd05 	bl	2e1bc <printk>
   1b7b2:	f240 3166 	movw	r1, #870	; 0x366
   1b7b6:	4817      	ldr	r0, [pc, #92]	; (1b814 <net_tcp_queue_data+0x94>)
   1b7b8:	f013 f801 	bl	2e7be <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1b7bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b7be:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   1b7c2:	f3c3 1347 	ubfx	r3, r3, #5, #8
   1b7c6:	f013 0308 	ands.w	r3, r3, #8
   1b7ca:	d11d      	bne.n	1b808 <net_tcp_queue_data+0x88>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1b7cc:	aa05      	add	r2, sp, #20
				      NULL, 0, NULL, &conn->remote_addr, &pkt);
   1b7ce:	3604      	adds	r6, #4
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1b7d0:	9202      	str	r2, [sp, #8]
   1b7d2:	e9cd 3600 	strd	r3, r6, [sp]
   1b7d6:	461a      	mov	r2, r3
   1b7d8:	2118      	movs	r1, #24
   1b7da:	f015 fed1 	bl	31580 <net_tcp_prepare_segment>
	if (ret) {
   1b7de:	b950      	cbnz	r0, 1b7f6 <net_tcp_queue_data+0x76>
	context->tcp->send_seq += data_len;
   1b7e0:	4620      	mov	r0, r4
   1b7e2:	f850 2f3c 	ldr.w	r2, [r0, #60]!
	return net_tcp_queue_pkt(context, pkt);
   1b7e6:	9905      	ldr	r1, [sp, #20]
	context->tcp->send_seq += data_len;
   1b7e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b7ec:	441d      	add	r5, r3
   1b7ee:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
	return net_tcp_queue_pkt(context, pkt);
   1b7f2:	f015 fcde 	bl	311b2 <net_tcp_queue_pkt.isra.22>
}
   1b7f6:	b006      	add	sp, #24
   1b7f8:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   1b7fa:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b7fc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b7fe:	4415      	add	r5, r2
		buf = buf->frags;
   1b800:	e7c5      	b.n	1b78e <net_tcp_queue_data+0xe>
		return -ENOTCONN;
   1b802:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b806:	e7f6      	b.n	1b7f6 <net_tcp_queue_data+0x76>
		return -ESHUTDOWN;
   1b808:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1b80c:	e7f3      	b.n	1b7f6 <net_tcp_queue_data+0x76>
   1b80e:	bf00      	nop
   1b810:	00036810 	.word	0x00036810
   1b814:	000367de 	.word	0x000367de
   1b818:	00035920 	.word	0x00035920
   1b81c:	00035d7e 	.word	0x00035d7e

0001b820 <tcp_established>:
 *				    union net_ip_header *ip_hdr,
 *				    union net_proto_header *proto_hdr,
 *				    struct net_pkt *pkt,
 *                                  void *user_data)
 */
NET_CONN_CB(tcp_established)
   1b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b824:	469b      	mov	fp, r3
   1b826:	b087      	sub	sp, #28
   1b828:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1b82a:	4681      	mov	r9, r0
   1b82c:	4620      	mov	r0, r4
   1b82e:	4688      	mov	r8, r1
   1b830:	9204      	str	r2, [sp, #16]
   1b832:	f014 fe49 	bl	304c8 <net_context_ref>
	enum net_verdict ret = NET_OK;
	bool do_not_send_ack = false;
	u8_t tcp_flags;
	u16_t data_len;

	k_mutex_lock(&context->lock, K_FOREVER);
   1b836:	f104 0308 	add.w	r3, r4, #8
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
   1b83a:	f8db 7000 	ldr.w	r7, [fp]
	k_mutex_lock(&context->lock, K_FOREVER);
   1b83e:	9303      	str	r3, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1b840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b844:	9803      	ldr	r0, [sp, #12]
   1b846:	f00c fae1 	bl	27e0c <z_impl_k_mutex_lock>

	NET_ASSERT(context && context->tcp);
   1b84a:	b10c      	cbz	r4, 1b850 <tcp_established+0x30>
   1b84c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b84e:	b973      	cbnz	r3, 1b86e <tcp_established+0x4e>
   1b850:	497b      	ldr	r1, [pc, #492]	; (1ba40 <tcp_established+0x220>)
   1b852:	f640 0304 	movw	r3, #2052	; 0x804
   1b856:	4a7b      	ldr	r2, [pc, #492]	; (1ba44 <tcp_established+0x224>)
   1b858:	487b      	ldr	r0, [pc, #492]	; (1ba48 <tcp_established+0x228>)
   1b85a:	f012 fcaf 	bl	2e1bc <printk>
   1b85e:	487b      	ldr	r0, [pc, #492]	; (1ba4c <tcp_established+0x22c>)
   1b860:	f012 fcac 	bl	2e1bc <printk>
   1b864:	f640 0104 	movw	r1, #2052	; 0x804
   1b868:	4876      	ldr	r0, [pc, #472]	; (1ba44 <tcp_established+0x224>)
   1b86a:	f012 ffa8 	bl	2e7be <assert_post_action>

	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1b86e:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1b872:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
   1b876:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b87a:	2b03      	cmp	r3, #3
   1b87c:	d80a      	bhi.n	1b894 <tcp_established+0x74>
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);

		ret = NET_DROP;
   1b87e:	2602      	movs	r6, #2
	return z_impl_k_mutex_unlock(mutex);
   1b880:	9803      	ldr	r0, [sp, #12]
   1b882:	f00c fba1 	bl	27fc8 <z_impl_k_mutex_unlock>
NET_CONN_CB(tcp_established)
   1b886:	4620      	mov	r0, r4
   1b888:	f014 fe28 	bl	304dc <net_context_unref>
   1b88c:	4630      	mov	r0, r6
   1b88e:	b007      	add	sp, #28
   1b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1b894:	1d38      	adds	r0, r7, #4
   1b896:	f015 fc78 	bl	3118a <sys_get_be32>
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1b89a:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   1b89e:	1ac3      	subs	r3, r0, r3
   1b8a0:	2b00      	cmp	r3, #0
   1b8a2:	da06      	bge.n	1b8b2 <tcp_established+0x92>
		send_ack(context, &conn->remote_addr, true);
   1b8a4:	2201      	movs	r2, #1
   1b8a6:	f109 0104 	add.w	r1, r9, #4
   1b8aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b8ac:	f015 feff 	bl	316ae <send_ack.isra.34>
		goto unlock;
   1b8b0:	e7e5      	b.n	1b87e <tcp_established+0x5e>
   1b8b2:	9305      	str	r3, [sp, #20]
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1b8b4:	d1e3      	bne.n	1b87e <tcp_established+0x5e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1b8b6:	7b7d      	ldrb	r5, [r7, #13]
	if (tcp_flags & NET_TCP_RST) {
   1b8b8:	f015 0604 	ands.w	r6, r5, #4
   1b8bc:	d016      	beq.n	1b8ec <tcp_established+0xcc>
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1b8be:	4639      	mov	r1, r7
   1b8c0:	4650      	mov	r0, sl
   1b8c2:	f016 f844 	bl	3194e <net_tcp_validate_seq>
   1b8c6:	2800      	cmp	r0, #0
   1b8c8:	d0d9      	beq.n	1b87e <tcp_established+0x5e>
		if (context->recv_cb) {
   1b8ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b8cc:	b155      	cbz	r5, 1b8e4 <tcp_established+0xc4>
			context->recv_cb(context, NULL, NULL, NULL, -ECONNRESET,
   1b8ce:	f8da 2004 	ldr.w	r2, [sl, #4]
   1b8d2:	9b05      	ldr	r3, [sp, #20]
   1b8d4:	9201      	str	r2, [sp, #4]
   1b8d6:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1b8da:	4619      	mov	r1, r3
   1b8dc:	9200      	str	r2, [sp, #0]
   1b8de:	4620      	mov	r0, r4
   1b8e0:	461a      	mov	r2, r3
   1b8e2:	47a8      	blx	r5
		net_context_unref(context);
   1b8e4:	4620      	mov	r0, r4
   1b8e6:	f014 fdf9 	bl	304dc <net_context_unref>
   1b8ea:	e7c8      	b.n	1b87e <tcp_established+0x5e>
		goto unlock;
	}

	/* Handle TCP state transition */
	if (tcp_flags & NET_TCP_ACK) {
   1b8ec:	06ea      	lsls	r2, r5, #27
   1b8ee:	d513      	bpl.n	1b918 <tcp_established+0xf8>
		if (!net_tcp_ack_received(context,
   1b8f0:	f107 0008 	add.w	r0, r7, #8
   1b8f4:	f015 fc49 	bl	3118a <sys_get_be32>
   1b8f8:	4601      	mov	r1, r0
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	f015 ff29 	bl	31752 <net_tcp_ack_received>
   1b900:	2800      	cmp	r0, #0
   1b902:	d0bc      	beq.n	1b87e <tcp_established+0x5e>

		/* TCP state might be changed after maintaining the sent pkt
		 * list, e.g., an ack of FIN is received.
		 */

		if (net_tcp_get_state(context->tcp)
   1b904:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b906:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1b90a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b90e:	2b07      	cmp	r3, #7
   1b910:	d133      	bne.n	1b97a <tcp_established+0x15a>
			   == NET_TCP_FIN_WAIT_1) {
			/* Active close: step to FIN_WAIT_2 */
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   1b912:	2108      	movs	r1, #8
   1b914:	f7ff fe60 	bl	1b5d8 <net_tcp_change_state>
			net_pkt_unref(pkt);
			goto clean_up;
		}
	}

	if (tcp_flags & NET_TCP_FIN) {
   1b918:	f015 0301 	ands.w	r3, r5, #1
   1b91c:	469a      	mov	sl, r3
   1b91e:	d01c      	beq.n	1b95a <tcp_established+0x13a>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1b920:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b922:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1b926:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b92a:	2b04      	cmp	r3, #4
   1b92c:	d14d      	bne.n	1b9ca <tcp_established+0x1aa>
			/* Passive close: step to CLOSE_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1b92e:	2105      	movs	r1, #5
   1b930:	f7ff fe52 	bl	1b5d8 <net_tcp_change_state>
			/* We should receive ACK next in order to get rid of
			 * LAST_ACK state that we are entering in a short while.
			 * But we need to be prepared to NOT to receive it as
			 * otherwise the connection would be stuck forever.
			 */
			k_delayed_work_submit(&context->tcp->ack_timer,
   1b934:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b93a:	3008      	adds	r0, #8
   1b93c:	f7ff fc1c 	bl	1b178 <k_delayed_work_submit>
		context->flags |= NET_CONTEXT_CLOSING_SOCK;
   1b940:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1b944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b948:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			k_delayed_work_cancel(&context->tcp->fin_timer);
			/* Active close: step to TIME_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
		}

		context->tcp->fin_rcvd = 1U;
   1b94c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b94e:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   1b952:	f043 0304 	orr.w	r3, r3, #4
   1b956:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	}

	if (!IS_ENABLED(CONFIG_NET_TCP_AUTO_ACCEPT) &&
   1b95a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1b95e:	059b      	lsls	r3, r3, #22
   1b960:	d464      	bmi.n	1ba2c <tcp_established+0x20c>
	    net_context_is_accepting(context)) {
		data_len = 0;
		do_not_send_ack = true;
	} else {
		data_len = net_pkt_remaining_data(pkt);
   1b962:	4640      	mov	r0, r8
   1b964:	f015 f8b9 	bl	30ada <net_pkt_remaining_data>
	return tcp->recv_wnd;
   1b968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		data_len = net_pkt_remaining_data(pkt);
   1b96a:	b285      	uxth	r5, r0
	}

	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1b96c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
   1b970:	42ab      	cmp	r3, r5
   1b972:	d234      	bcs.n	1b9de <tcp_established+0x1be>
		 * for net_tcp_get_recv_wnd(context->tcp) == 0, but
		 * given the if above, we know that if data_len == 1,
		 * then net_tcp_get_recv_wnd(context->tcp) can be only 0
		 * here.
		 */
		if (data_len == 1U) {
   1b974:	2d01      	cmp	r5, #1
   1b976:	d182      	bne.n	1b87e <tcp_established+0x5e>
   1b978:	e794      	b.n	1b8a4 <tcp_established+0x84>
		} else if (net_tcp_get_state(context->tcp)
   1b97a:	2b06      	cmp	r3, #6
   1b97c:	d1cc      	bne.n	1b918 <tcp_established+0xf8>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   1b97e:	4631      	mov	r1, r6
   1b980:	f7ff fe2a 	bl	1b5d8 <net_tcp_change_state>
			net_pkt_unref(pkt);
   1b984:	4640      	mov	r0, r8
   1b986:	f014 ff40 	bl	3080a <net_pkt_unref>

		send_ack(context, &conn->remote_addr, false);
	}

clean_up:
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   1b98a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b98c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1b990:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b994:	2b09      	cmp	r3, #9
   1b996:	d103      	bne.n	1b9a0 <tcp_established+0x180>
		k_delayed_work_submit(&context->tcp->timewait_timer,
   1b998:	21fa      	movs	r1, #250	; 0xfa
   1b99a:	3068      	adds	r0, #104	; 0x68
   1b99c:	f7ff fbec 	bl	1b178 <k_delayed_work_submit>
				      K_MSEC(CONFIG_NET_TCP_TIME_WAIT_DELAY));
	}

	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   1b9a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b9a2:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1b9a6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	f47f af68 	bne.w	1b880 <tcp_established+0x60>
		if (context->recv_cb) {
   1b9b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b9b2:	b135      	cbz	r5, 1b9c2 <tcp_established+0x1a2>
			context->recv_cb(context, NULL, NULL, NULL, 0,
   1b9b4:	6852      	ldr	r2, [r2, #4]
   1b9b6:	4619      	mov	r1, r3
   1b9b8:	e9cd 3200 	strd	r3, r2, [sp]
   1b9bc:	4620      	mov	r0, r4
   1b9be:	461a      	mov	r2, r3
   1b9c0:	47a8      	blx	r5
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);
   1b9c2:	4620      	mov	r0, r4
   1b9c4:	f014 fd8a 	bl	304dc <net_context_unref>
   1b9c8:	e75a      	b.n	1b880 <tcp_established+0x60>
		} else if (net_tcp_get_state(context->tcp)
   1b9ca:	2b08      	cmp	r3, #8
   1b9cc:	d1be      	bne.n	1b94c <tcp_established+0x12c>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   1b9ce:	3028      	adds	r0, #40	; 0x28
   1b9d0:	f00e fa62 	bl	29e98 <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   1b9d4:	2109      	movs	r1, #9
   1b9d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b9d8:	f7ff fdfe 	bl	1b5d8 <net_tcp_change_state>
   1b9dc:	e7b6      	b.n	1b94c <tcp_established+0x12c>
	if (data_len > 0) {
   1b9de:	b335      	cbz	r5, 1ba2e <tcp_established+0x20e>
	u8_t offset = tcp_hdr->offset >> 4;
   1b9e0:	7b3e      	ldrb	r6, [r7, #12]
   1b9e2:	0936      	lsrs	r6, r6, #4
	if ((offset << 2) > sizeof(struct net_tcp_hdr)) {
   1b9e4:	00b6      	lsls	r6, r6, #2
   1b9e6:	2e14      	cmp	r6, #20
   1b9e8:	dd08      	ble.n	1b9fc <tcp_established+0x1dc>
		net_pkt_skip(pkt, (offset << 2) -
   1b9ea:	f1a6 0114 	sub.w	r1, r6, #20
   1b9ee:	4640      	mov	r0, r8
   1b9f0:	f014 fff9 	bl	309e6 <net_pkt_skip>
		data_len -= (offset << 2) - sizeof(struct net_tcp_hdr);
   1b9f4:	f1c6 0614 	rsb	r6, r6, #20
   1b9f8:	4435      	add	r5, r6
   1b9fa:	b2ad      	uxth	r5, r5
		ret = net_context_packet_received(conn, pkt, ip_hdr, proto_hdr,
   1b9fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b9fe:	9a04      	ldr	r2, [sp, #16]
   1ba00:	685b      	ldr	r3, [r3, #4]
   1ba02:	4641      	mov	r1, r8
   1ba04:	9300      	str	r3, [sp, #0]
   1ba06:	4648      	mov	r0, r9
   1ba08:	465b      	mov	r3, fp
   1ba0a:	f7fe fb01 	bl	1a010 <net_context_packet_received>
   1ba0e:	4606      	mov	r6, r0
		context->tcp->send_ack += data_len;
   1ba10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ba12:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1ba16:	441d      	add	r5, r3
		if (tcp_flags & NET_TCP_FIN) {
   1ba18:	4653      	mov	r3, sl
   1ba1a:	b973      	cbnz	r3, 1ba3a <tcp_established+0x21a>
			context->tcp->send_ack += 1U;
   1ba1c:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		send_ack(context, &conn->remote_addr, false);
   1ba20:	2200      	movs	r2, #0
   1ba22:	f109 0104 	add.w	r1, r9, #4
   1ba26:	f015 fe42 	bl	316ae <send_ack.isra.34>
   1ba2a:	e7ae      	b.n	1b98a <tcp_established+0x16a>
		do_not_send_ack = true;
   1ba2c:	2501      	movs	r5, #1
		net_pkt_unref(pkt);
   1ba2e:	4640      	mov	r0, r8
   1ba30:	f014 feeb 	bl	3080a <net_pkt_unref>
	if (do_not_send_ack == false) {
   1ba34:	2d00      	cmp	r5, #0
   1ba36:	d1a8      	bne.n	1b98a <tcp_established+0x16a>
   1ba38:	e7ea      	b.n	1ba10 <tcp_established+0x1f0>
			context->tcp->send_ack += 1U;
   1ba3a:	3501      	adds	r5, #1
   1ba3c:	e7ee      	b.n	1ba1c <tcp_established+0x1fc>
   1ba3e:	bf00      	nop
   1ba40:	00036805 	.word	0x00036805
   1ba44:	000367de 	.word	0x000367de
   1ba48:	00035920 	.word	0x00035920
   1ba4c:	00035d7e 	.word	0x00035d7e

0001ba50 <tcp_synack_received>:
 *					struct net_pkt *pkt,
 *				        union net_ip_header *ip_hdr,
 *				        union net_proto_header *proto_hdr,
 *					void *user_data)
 */
NET_CONN_CB(tcp_synack_received)
   1ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba54:	461d      	mov	r5, r3
   1ba56:	b08a      	sub	sp, #40	; 0x28
   1ba58:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1ba5a:	460e      	mov	r6, r1
   1ba5c:	4620      	mov	r0, r4
   1ba5e:	4690      	mov	r8, r2
   1ba60:	f014 fd32 	bl	304c8 <net_context_ref>
   1ba64:	682d      	ldr	r5, [r5, #0]
{
	struct net_context *context = (struct net_context *)user_data;
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
	int ret;

	NET_ASSERT(context && context->tcp);
   1ba66:	b10c      	cbz	r4, 1ba6c <tcp_synack_received+0x1c>
   1ba68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ba6a:	b973      	cbnz	r3, 1ba8a <tcp_synack_received+0x3a>
   1ba6c:	4958      	ldr	r1, [pc, #352]	; (1bbd0 <tcp_synack_received+0x180>)
   1ba6e:	f640 03cd 	movw	r3, #2253	; 0x8cd
   1ba72:	4a58      	ldr	r2, [pc, #352]	; (1bbd4 <tcp_synack_received+0x184>)
   1ba74:	4858      	ldr	r0, [pc, #352]	; (1bbd8 <tcp_synack_received+0x188>)
   1ba76:	f012 fba1 	bl	2e1bc <printk>
   1ba7a:	4858      	ldr	r0, [pc, #352]	; (1bbdc <tcp_synack_received+0x18c>)
   1ba7c:	f012 fb9e 	bl	2e1bc <printk>
   1ba80:	f640 01cd 	movw	r1, #2253	; 0x8cd
   1ba84:	4853      	ldr	r0, [pc, #332]	; (1bbd4 <tcp_synack_received+0x184>)
   1ba86:	f012 fe9a 	bl	2e7be <assert_post_action>
   1ba8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ba8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc

	switch (net_tcp_get_state(context->tcp)) {
   1ba90:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ba94:	2b02      	cmp	r3, #2
   1ba96:	d17d      	bne.n	1bb94 <tcp_synack_received+0x144>
	case NET_TCP_SYN_SENT:
		net_context_set_iface(context, net_pkt_iface(pkt));
   1ba98:	6a31      	ldr	r1, [r6, #32]
   1ba9a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1ba9e:	f7ff fbf7 	bl	1b290 <net_context_set_iface.isra.25>
		return NET_DROP;
	}

	net_pkt_set_context(pkt, context);

	NET_ASSERT(net_pkt_iface(pkt));
   1baa2:	6a33      	ldr	r3, [r6, #32]
	pkt->context = ctx;
   1baa4:	61f4      	str	r4, [r6, #28]
   1baa6:	b973      	cbnz	r3, 1bac6 <tcp_synack_received+0x76>
   1baa8:	494d      	ldr	r1, [pc, #308]	; (1bbe0 <tcp_synack_received+0x190>)
   1baaa:	f640 03db 	movw	r3, #2267	; 0x8db
   1baae:	4a49      	ldr	r2, [pc, #292]	; (1bbd4 <tcp_synack_received+0x184>)
   1bab0:	4849      	ldr	r0, [pc, #292]	; (1bbd8 <tcp_synack_received+0x188>)
   1bab2:	f012 fb83 	bl	2e1bc <printk>
   1bab6:	4849      	ldr	r0, [pc, #292]	; (1bbdc <tcp_synack_received+0x18c>)
   1bab8:	f012 fb80 	bl	2e1bc <printk>
   1babc:	f640 01db 	movw	r1, #2267	; 0x8db
   1bac0:	4844      	ldr	r0, [pc, #272]	; (1bbd4 <tcp_synack_received+0x184>)
   1bac2:	f012 fe7c 	bl	2e7be <assert_post_action>

	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bac6:	7b6f      	ldrb	r7, [r5, #13]
   1bac8:	077a      	lsls	r2, r7, #29
   1baca:	d513      	bpl.n	1baf4 <tcp_synack_received+0xa4>
		/* We only accept RST packet that has valid seq field. */
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1bacc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   1bace:	4629      	mov	r1, r5
   1bad0:	4630      	mov	r0, r6
   1bad2:	f015 ff3c 	bl	3194e <net_tcp_validate_seq>
   1bad6:	2800      	cmp	r0, #0
   1bad8:	d05c      	beq.n	1bb94 <tcp_synack_received+0x144>
	z_impl_k_sem_give(sem);
   1bada:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
   1bade:	f00d fe85 	bl	297ec <z_impl_k_sem_give>

		net_stats_update_tcp_seg_rst(net_pkt_iface(pkt));

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
   1bae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bae4:	2b00      	cmp	r3, #0
   1bae6:	d055      	beq.n	1bb94 <tcp_synack_received+0x144>
			context->connect_cb(context, -ECONNREFUSED,
   1bae8:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1baec:	6822      	ldr	r2, [r4, #0]
		send_ack(context, &remote_addr, false);

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
			context->connect_cb(context, 0, context->user_data);
   1baee:	4620      	mov	r0, r4
   1baf0:	4798      	blx	r3
   1baf2:	e04f      	b.n	1bb94 <tcp_synack_received+0x144>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1baf4:	07bb      	lsls	r3, r7, #30
   1baf6:	d506      	bpl.n	1bb06 <tcp_synack_received+0xb6>
			sys_get_be32(tcp_hdr->seq) + 1;
   1baf8:	1d28      	adds	r0, r5, #4
   1bafa:	f015 fb46 	bl	3118a <sys_get_be32>
		context->tcp->send_ack =
   1bafe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1bb00:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1bb02:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1bb06:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   1bb0a:	2f12      	cmp	r7, #18
   1bb0c:	d142      	bne.n	1bb94 <tcp_synack_received+0x144>
	return pkt->family;
   1bb0e:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bb12:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bb16:	2b01      	cmp	r3, #1
   1bb18:	d117      	bne.n	1bb4a <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bb1a:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1bb1e:	882a      	ldrh	r2, [r5, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bb20:	68c9      	ldr	r1, [r1, #12]
   1bb22:	9109      	str	r1, [sp, #36]	; 0x24
		addr->sa_family = AF_INET;
   1bb24:	f8ad 3020 	strh.w	r3, [sp, #32]
   1bb28:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
		addr4->sin_port = port;
   1bb2c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bb30:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bb34:	2b01      	cmp	r3, #1
   1bb36:	d108      	bne.n	1bb4a <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bb38:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1bb3c:	886a      	ldrh	r2, [r5, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bb3e:	6909      	ldr	r1, [r1, #16]
   1bb40:	9107      	str	r1, [sp, #28]
		addr4->sin_port = port;
   1bb42:	f8ad 201a 	strh.w	r2, [sp, #26]
		addr->sa_family = AF_INET;
   1bb46:	f8ad 3018 	strh.w	r3, [sp, #24]
	return net_conn_unregister(handle);
   1bb4a:	4627      	mov	r7, r4
   1bb4c:	f857 0f2c 	ldr.w	r0, [r7, #44]!
   1bb50:	f7ff f9da 	bl	1af08 <net_conn_unregister>
				       ntohs(tcp_hdr->dst_port),
   1bb54:	886b      	ldrh	r3, [r5, #2]
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1bb56:	4a23      	ldr	r2, [pc, #140]	; (1bbe4 <tcp_synack_received+0x194>)
				       ntohs(tcp_hdr->src_port),
   1bb58:	8828      	ldrh	r0, [r5, #0]
   1bb5a:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
   1bb5e:	9202      	str	r2, [sp, #8]
				       ntohs(tcp_hdr->dst_port),
   1bb60:	021a      	lsls	r2, r3, #8
   1bb62:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
				       ntohs(tcp_hdr->src_port),
   1bb66:	0203      	lsls	r3, r0, #8
   1bb68:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1bb6c:	b292      	uxth	r2, r2
   1bb6e:	b29b      	uxth	r3, r3
   1bb70:	9201      	str	r2, [sp, #4]
   1bb72:	9300      	str	r3, [sp, #0]
   1bb74:	e9cd 4703 	strd	r4, r7, [sp, #12]
   1bb78:	ab06      	add	r3, sp, #24
   1bb7a:	aa08      	add	r2, sp, #32
   1bb7c:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1bb80:	2006      	movs	r0, #6
   1bb82:	f7ff f8ff 	bl	1ad84 <net_conn_register>
		if (ret < 0) {
   1bb86:	2800      	cmp	r0, #0
   1bb88:	da0b      	bge.n	1bba2 <tcp_synack_received+0x152>
			send_reset(context, &local_addr, &remote_addr);
   1bb8a:	aa08      	add	r2, sp, #32
   1bb8c:	a906      	add	r1, sp, #24
   1bb8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bb90:	f015 fbb8 	bl	31304 <send_reset.isra.29>
NET_CONN_CB(tcp_synack_received)
   1bb94:	4620      	mov	r0, r4
   1bb96:	f014 fca1 	bl	304dc <net_context_unref>
   1bb9a:	2002      	movs	r0, #2
   1bb9c:	b00a      	add	sp, #40	; 0x28
   1bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bba2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bba4:	2104      	movs	r1, #4
   1bba6:	f7ff fd17 	bl	1b5d8 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_CONNECTED);
   1bbaa:	4620      	mov	r0, r4
   1bbac:	2102      	movs	r1, #2
   1bbae:	f7ff fb2b 	bl	1b208 <net_context_set_state>
		send_ack(context, &remote_addr, false);
   1bbb2:	2200      	movs	r2, #0
   1bbb4:	a908      	add	r1, sp, #32
   1bbb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bbb8:	f015 fd79 	bl	316ae <send_ack.isra.34>
		k_sem_give(&context->tcp->connect_wait);
   1bbbc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bbbe:	30a0      	adds	r0, #160	; 0xa0
   1bbc0:	f00d fe14 	bl	297ec <z_impl_k_sem_give>
		if (context->connect_cb) {
   1bbc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d0e4      	beq.n	1bb94 <tcp_synack_received+0x144>
			context->connect_cb(context, 0, context->user_data);
   1bbca:	6822      	ldr	r2, [r4, #0]
   1bbcc:	2100      	movs	r1, #0
   1bbce:	e78e      	b.n	1baee <tcp_synack_received+0x9e>
   1bbd0:	00036805 	.word	0x00036805
   1bbd4:	000367de 	.word	0x000367de
   1bbd8:	00035920 	.word	0x00035920
   1bbdc:	00035d7e 	.word	0x00035d7e
   1bbe0:	00036757 	.word	0x00036757
   1bbe4:	0001b821 	.word	0x0001b821

0001bbe8 <tcp_syn_rcvd>:
 *			         struct net_pkt *pkt,
 *			         union net_ip_header *ip_hdr,
 *			         union net_proto_header *proto_hdr,
 *			         void *user_data)
 */
NET_CONN_CB(tcp_syn_rcvd)
   1bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbec:	461e      	mov	r6, r3
   1bbee:	b08f      	sub	sp, #60	; 0x3c
   1bbf0:	9c18      	ldr	r4, [sp, #96]	; 0x60
   1bbf2:	460d      	mov	r5, r1
   1bbf4:	4620      	mov	r0, r4
   1bbf6:	4690      	mov	r8, r2
   1bbf8:	f014 fc66 	bl	304c8 <net_context_ref>
   1bbfc:	6836      	ldr	r6, [r6, #0]
	struct net_tcp *tcp;
	struct sockaddr_ptr pkt_src_addr;
	struct sockaddr local_addr;
	struct sockaddr remote_addr;

	NET_ASSERT(context && context->tcp);
   1bbfe:	b10c      	cbz	r4, 1bc04 <tcp_syn_rcvd+0x1c>
   1bc00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bc02:	b973      	cbnz	r3, 1bc22 <tcp_syn_rcvd+0x3a>
   1bc04:	49b6      	ldr	r1, [pc, #728]	; (1bee0 <tcp_syn_rcvd+0x2f8>)
   1bc06:	f640 135a 	movw	r3, #2394	; 0x95a
   1bc0a:	4ab6      	ldr	r2, [pc, #728]	; (1bee4 <tcp_syn_rcvd+0x2fc>)
   1bc0c:	48b6      	ldr	r0, [pc, #728]	; (1bee8 <tcp_syn_rcvd+0x300>)
   1bc0e:	f012 fad5 	bl	2e1bc <printk>
   1bc12:	48b6      	ldr	r0, [pc, #728]	; (1beec <tcp_syn_rcvd+0x304>)
   1bc14:	f012 fad2 	bl	2e1bc <printk>
   1bc18:	f640 115a 	movw	r1, #2394	; 0x95a
   1bc1c:	48b1      	ldr	r0, [pc, #708]	; (1bee4 <tcp_syn_rcvd+0x2fc>)
   1bc1e:	f012 fdce 	bl	2e7be <assert_post_action>

	tcp = context->tcp;
   1bc22:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1bc26:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
   1bc2a:	f3c3 3343 	ubfx	r3, r3, #13, #4

	switch (net_tcp_get_state(tcp)) {
   1bc2e:	2b01      	cmp	r3, #1
   1bc30:	d004      	beq.n	1bc3c <tcp_syn_rcvd+0x54>
   1bc32:	2b03      	cmp	r3, #3
   1bc34:	f000 80c7 	beq.w	1bdc6 <tcp_syn_rcvd+0x1de>
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {

		if (tcp_backlog_rst(pkt, ip_hdr, tcp_hdr) < 0) {
			net_stats_update_tcp_seg_rsterr(net_pkt_iface(pkt));
			return NET_DROP;
   1bc38:	2702      	movs	r7, #2
   1bc3a:	e0bd      	b.n	1bdb8 <tcp_syn_rcvd+0x1d0>
		net_context_set_iface(context, net_pkt_iface(pkt));
   1bc3c:	6a29      	ldr	r1, [r5, #32]
   1bc3e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1bc42:	f7ff fb25 	bl	1b290 <net_context_set_iface.isra.25>
	NET_ASSERT(net_pkt_iface(pkt));
   1bc46:	6a2b      	ldr	r3, [r5, #32]
	pkt->context = ctx;
   1bc48:	61ec      	str	r4, [r5, #28]
   1bc4a:	b973      	cbnz	r3, 1bc6a <tcp_syn_rcvd+0x82>
   1bc4c:	49a8      	ldr	r1, [pc, #672]	; (1bef0 <tcp_syn_rcvd+0x308>)
   1bc4e:	f640 136f 	movw	r3, #2415	; 0x96f
   1bc52:	4aa4      	ldr	r2, [pc, #656]	; (1bee4 <tcp_syn_rcvd+0x2fc>)
   1bc54:	48a4      	ldr	r0, [pc, #656]	; (1bee8 <tcp_syn_rcvd+0x300>)
   1bc56:	f012 fab1 	bl	2e1bc <printk>
   1bc5a:	48a4      	ldr	r0, [pc, #656]	; (1beec <tcp_syn_rcvd+0x304>)
   1bc5c:	f012 faae 	bl	2e1bc <printk>
   1bc60:	f640 116f 	movw	r1, #2415	; 0x96f
   1bc64:	489f      	ldr	r0, [pc, #636]	; (1bee4 <tcp_syn_rcvd+0x2fc>)
   1bc66:	f012 fdaa 	bl	2e7be <assert_post_action>
	return pkt->family;
   1bc6a:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bc6e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bc72:	2b01      	cmp	r3, #1
   1bc74:	d117      	bne.n	1bca6 <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bc76:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1bc7a:	8832      	ldrh	r2, [r6, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bc7c:	68c9      	ldr	r1, [r1, #12]
   1bc7e:	910d      	str	r1, [sp, #52]	; 0x34
		addr->sa_family = AF_INET;
   1bc80:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1bc84:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		addr4->sin_port = port;
   1bc88:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bc8c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bc90:	2b01      	cmp	r3, #1
   1bc92:	d108      	bne.n	1bca6 <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bc94:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1bc98:	8872      	ldrh	r2, [r6, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bc9a:	6909      	ldr	r1, [r1, #16]
   1bc9c:	910b      	str	r1, [sp, #44]	; 0x2c
		addr4->sin_port = port;
   1bc9e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
		addr->sa_family = AF_INET;
   1bca2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_SYN) {
   1bca6:	7b73      	ldrb	r3, [r6, #13]
   1bca8:	f003 073f 	and.w	r7, r3, #63	; 0x3f
   1bcac:	2f02      	cmp	r7, #2
   1bcae:	f040 8092 	bne.w	1bdd6 <tcp_syn_rcvd+0x1ee>
		struct net_tcp_options tcp_opts = {
   1bcb2:	f44f 7306 	mov.w	r3, #536	; 0x218
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bcb6:	f06f 0113 	mvn.w	r1, #19
		struct net_tcp_options tcp_opts = {
   1bcba:	f8ad 301c 	strh.w	r3, [sp, #28]
		opt_totlen = NET_TCP_HDR_LEN(tcp_hdr)
   1bcbe:	7b33      	ldrb	r3, [r6, #12]
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bcc0:	aa07      	add	r2, sp, #28
			     - sizeof(struct net_tcp_hdr);
   1bcc2:	091b      	lsrs	r3, r3, #4
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bcc4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1bcc8:	4628      	mov	r0, r5
   1bcca:	f015 fe73 	bl	319b4 <net_tcp_parse_opts>
   1bcce:	2800      	cmp	r0, #0
   1bcd0:	db72      	blt.n	1bdb8 <tcp_syn_rcvd+0x1d0>
		net_tcp_change_state(tcp, NET_TCP_SYN_RCVD);
   1bcd2:	2103      	movs	r1, #3
   1bcd4:	4648      	mov	r0, r9
   1bcd6:	f7ff fc7f 	bl	1b5d8 <net_tcp_change_state>
		context->tcp->send_seq = tcp_init_isn();
   1bcda:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return sys_rand32_get();
   1bcde:	f000 fc51 	bl	1c584 <sys_rand32_get>
   1bce2:	f8c9 0090 	str.w	r0, [r9, #144]	; 0x90
			sys_get_be32(tcp_hdr->seq) + 1;
   1bce6:	1d30      	adds	r0, r6, #4
   1bce8:	f015 fa4f 	bl	3118a <sys_get_be32>
		context->tcp->send_ack =
   1bcec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1bcee:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1bcf0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	int empty_slot = -1;
   1bcf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1bcf8:	4632      	mov	r2, r6
	int empty_slot = -1;
   1bcfa:	9308      	str	r3, [sp, #32]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1bcfc:	4641      	mov	r1, r8
   1bcfe:	ab08      	add	r3, sp, #32
   1bd00:	4628      	mov	r0, r5
		r = tcp_backlog_syn(pkt, ip_hdr, tcp_hdr,
   1bd02:	f8bd 901c 	ldrh.w	r9, [sp, #28]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1bd06:	f7ff fae3 	bl	1b2d0 <tcp_backlog_find.isra.26>
   1bd0a:	2800      	cmp	r0, #0
   1bd0c:	da54      	bge.n	1bdb8 <tcp_syn_rcvd+0x1d0>
	if (empty_slot < 0) {
   1bd0e:	9a08      	ldr	r2, [sp, #32]
   1bd10:	2a00      	cmp	r2, #0
   1bd12:	db51      	blt.n	1bdb8 <tcp_syn_rcvd+0x1d0>
	tcp_backlog[empty_slot].tcp = context->tcp;
   1bd14:	2338      	movs	r3, #56	; 0x38
   1bd16:	4353      	muls	r3, r2
   1bd18:	4f76      	ldr	r7, [pc, #472]	; (1bef4 <tcp_syn_rcvd+0x30c>)
   1bd1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1bd1c:	18f8      	adds	r0, r7, r3
   1bd1e:	50fa      	str	r2, [r7, r3]
   1bd20:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bd24:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1bd28:	2a01      	cmp	r2, #1
   1bd2a:	d10a      	bne.n	1bd42 <tcp_syn_rcvd+0x15a>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bd2c:	f8d8 1000 	ldr.w	r1, [r8]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1bd30:	332c      	adds	r3, #44	; 0x2c
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bd32:	68c9      	ldr	r1, [r1, #12]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1bd34:	443b      	add	r3, r7
		port = tcp_hdr->src_port;
   1bd36:	f8b6 c000 	ldrh.w	ip, [r6]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bd3a:	6059      	str	r1, [r3, #4]
		addr4->sin_port = port;
   1bd3c:	f8a3 c002 	strh.w	ip, [r3, #2]
		addr->sa_family = AF_INET;
   1bd40:	8582      	strh	r2, [r0, #44]	; 0x2c
	tcp_backlog[empty_slot].send_seq = context->tcp->send_seq;
   1bd42:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1bd46:	9808      	ldr	r0, [sp, #32]
   1bd48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1bd4a:	fb0a f000 	mul.w	r0, sl, r0
   1bd4e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1bd52:	183a      	adds	r2, r7, r0
   1bd54:	6053      	str	r3, [r2, #4]
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1bd56:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1bd5a:	300c      	adds	r0, #12
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1bd5c:	6093      	str	r3, [r2, #8]
	tcp_backlog[empty_slot].send_mss = send_mss;
   1bd5e:	f8a2 9034 	strh.w	r9, [r2, #52]	; 0x34
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1bd62:	4965      	ldr	r1, [pc, #404]	; (1bef8 <tcp_syn_rcvd+0x310>)
   1bd64:	4438      	add	r0, r7
   1bd66:	f017 fc51 	bl	3360c <k_delayed_work_init>
	k_delayed_work_submit(&tcp_backlog[empty_slot].ack_timer, ACK_TIMEOUT);
   1bd6a:	9808      	ldr	r0, [sp, #32]
   1bd6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1bd70:	fb0a 7000 	mla	r0, sl, r0, r7
   1bd74:	300c      	adds	r0, #12
   1bd76:	f7ff f9ff 	bl	1b178 <k_delayed_work_submit>
		get_sockaddr_ptr(ip_hdr, tcp_hdr,
   1bd7a:	4620      	mov	r0, r4
   1bd7c:	f7ff fa04 	bl	1b188 <net_context_get_family>
	(void)memset(addr, 0, sizeof(*addr));
   1bd80:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bd82:	2801      	cmp	r0, #1
	(void)memset(addr, 0, sizeof(*addr));
   1bd84:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bd88:	d10b      	bne.n	1bda2 <tcp_syn_rcvd+0x1ba>
		addr4->sin_family = AF_INET;
   1bd8a:	f8ad 0020 	strh.w	r0, [sp, #32]
		addr4->sin_port = tcp_hdr->dst_port;
   1bd8e:	78b3      	ldrb	r3, [r6, #2]
   1bd90:	78f2      	ldrb	r2, [r6, #3]
   1bd92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bd96:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		addr4->sin_addr = &ip_hdr->ipv4->dst;
   1bd9a:	f8d8 3000 	ldr.w	r3, [r8]
   1bd9e:	3310      	adds	r3, #16
   1bda0:	9309      	str	r3, [sp, #36]	; 0x24
	return send_syn_segment(context, local, remote,
   1bda2:	2312      	movs	r3, #18
   1bda4:	aa0c      	add	r2, sp, #48	; 0x30
   1bda6:	a908      	add	r1, sp, #32
   1bda8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1bdac:	f015 fc99 	bl	316e2 <send_syn_segment.isra.35>
		net_pkt_unref(pkt);
   1bdb0:	4628      	mov	r0, r5
   1bdb2:	f014 fd2a 	bl	3080a <net_pkt_unref>
		return NET_OK;
   1bdb6:	2700      	movs	r7, #0
NET_CONN_CB(tcp_syn_rcvd)
   1bdb8:	4620      	mov	r0, r4
   1bdba:	f014 fb8f 	bl	304dc <net_context_unref>
   1bdbe:	4638      	mov	r0, r7
   1bdc0:	b00f      	add	sp, #60	; 0x3c
   1bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_pkt_iface(pkt) != net_context_get_iface(context)) {
   1bdc6:	4620      	mov	r0, r4
   1bdc8:	6a2f      	ldr	r7, [r5, #32]
   1bdca:	f7ff fa41 	bl	1b250 <net_context_get_iface>
   1bdce:	4287      	cmp	r7, r0
   1bdd0:	f43f af39 	beq.w	1bc46 <tcp_syn_rcvd+0x5e>
   1bdd4:	e730      	b.n	1bc38 <tcp_syn_rcvd+0x50>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bdd6:	f013 0704 	ands.w	r7, r3, #4
   1bdda:	d01f      	beq.n	1be1c <tcp_syn_rcvd+0x234>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1bddc:	4628      	mov	r0, r5
   1bdde:	2300      	movs	r3, #0
   1bde0:	4632      	mov	r2, r6
   1bde2:	4641      	mov	r1, r8
   1bde4:	f7ff fa74 	bl	1b2d0 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1bde8:	1e05      	subs	r5, r0, #0
   1bdea:	f6ff af25 	blt.w	1bc38 <tcp_syn_rcvd+0x50>
	if (tcp_backlog[r].send_ack != sys_get_be32(tcp_hdr->seq)) {
   1bdee:	1d30      	adds	r0, r6, #4
   1bdf0:	2638      	movs	r6, #56	; 0x38
   1bdf2:	f015 f9ca 	bl	3118a <sys_get_be32>
   1bdf6:	fb06 f305 	mul.w	r3, r6, r5
   1bdfa:	4a3e      	ldr	r2, [pc, #248]	; (1bef4 <tcp_syn_rcvd+0x30c>)
   1bdfc:	18d5      	adds	r5, r2, r3
   1bdfe:	68a9      	ldr	r1, [r5, #8]
   1be00:	4281      	cmp	r1, r0
   1be02:	f47f af19 	bne.w	1bc38 <tcp_syn_rcvd+0x50>
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1be06:	f103 000c 	add.w	r0, r3, #12
   1be0a:	4410      	add	r0, r2
   1be0c:	f00e f844 	bl	29e98 <k_delayed_work_cancel>
   1be10:	4632      	mov	r2, r6
   1be12:	2100      	movs	r1, #0
   1be14:	4628      	mov	r0, r5
   1be16:	f017 fd0d 	bl	33834 <memset>
   1be1a:	e70d      	b.n	1bc38 <tcp_syn_rcvd+0x50>
	}

	/*
	 * If we receive ACK, we go to ESTABLISHED state.
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_ACK) {
   1be1c:	06db      	lsls	r3, r3, #27
   1be1e:	f57f af0b 	bpl.w	1bc38 <tcp_syn_rcvd+0x50>
		socklen_t addrlen;
		int ret;

		net_tcp_print_recv_info("ACK", pkt, tcp_hdr->src_port);

		if (!context->tcp->accept_cb) {
   1be22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1be24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1be28:	b93b      	cbnz	r3, 1be3a <tcp_syn_rcvd+0x252>

conndrop:
	net_stats_update_tcp_seg_conndrop(net_pkt_iface(pkt));

reset:
	send_reset(tcp->context, &local_addr, &remote_addr);
   1be2a:	f8d9 3000 	ldr.w	r3, [r9]
   1be2e:	aa0c      	add	r2, sp, #48	; 0x30
   1be30:	a90a      	add	r1, sp, #40	; 0x28
   1be32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1be34:	f015 fa66 	bl	31304 <send_reset.isra.29>

	return NET_DROP;
   1be38:	e6fe      	b.n	1bc38 <tcp_syn_rcvd+0x50>
   1be3a:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
		ret = net_context_get(net_pkt_family(pkt),
   1be3e:	ab08      	add	r3, sp, #32
   1be40:	2206      	movs	r2, #6
   1be42:	2101      	movs	r1, #1
   1be44:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1be48:	f7fe f94a 	bl	1a0e0 <net_context_get>
		if (ret < 0) {
   1be4c:	2800      	cmp	r0, #0
   1be4e:	dbec      	blt.n	1be2a <tcp_syn_rcvd+0x242>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1be50:	4641      	mov	r1, r8
   1be52:	463b      	mov	r3, r7
   1be54:	4632      	mov	r2, r6
   1be56:	4628      	mov	r0, r5
		ret = tcp_backlog_ack(pkt, ip_hdr, tcp_hdr, new_context);
   1be58:	f8dd a020 	ldr.w	sl, [sp, #32]
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1be5c:	f7ff fa38 	bl	1b2d0 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1be60:	f1b0 0800 	subs.w	r8, r0, #0
   1be64:	db37      	blt.n	1bed6 <tcp_syn_rcvd+0x2ee>
	if (tcp_backlog[r].send_seq + 1 != sys_get_be32(tcp_hdr->ack)) {
   1be66:	f04f 0b38 	mov.w	fp, #56	; 0x38
   1be6a:	f106 0008 	add.w	r0, r6, #8
   1be6e:	f015 f98c 	bl	3118a <sys_get_be32>
   1be72:	fb0b f308 	mul.w	r3, fp, r8
   1be76:	4a1f      	ldr	r2, [pc, #124]	; (1bef4 <tcp_syn_rcvd+0x30c>)
   1be78:	eb02 0803 	add.w	r8, r2, r3
   1be7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1be80:	3101      	adds	r1, #1
   1be82:	4281      	cmp	r1, r0
   1be84:	d127      	bne.n	1bed6 <tcp_syn_rcvd+0x2ee>
	memcpy(&context->remote, &tcp_backlog[r].remote,
   1be86:	f103 062c 	add.w	r6, r3, #44	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1be8a:	4416      	add	r6, r2
   1be8c:	ce03      	ldmia	r6!, {r0, r1}
   1be8e:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
   1be92:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
	context->tcp->send_seq = tcp_backlog[r].send_seq + 1;
   1be96:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1be9a:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
   1be9e:	3001      	adds	r0, #1
   1bea0:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
	context->tcp->send_ack = tcp_backlog[r].send_ack;
   1bea4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1bea8:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
	context->tcp->send_mss = tcp_backlog[r].send_mss;
   1beac:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
   1beb0:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1beb4:	f103 000c 	add.w	r0, r3, #12
   1beb8:	4410      	add	r0, r2
   1beba:	f00d ffed 	bl	29e98 <k_delayed_work_cancel>
__ssp_bos_icheck3(memset, void *, int)
   1bebe:	465a      	mov	r2, fp
   1bec0:	4639      	mov	r1, r7
   1bec2:	4640      	mov	r0, r8
   1bec4:	f017 fcb6 	bl	33834 <memset>
		ret = net_context_bind(new_context, &local_addr,
   1bec8:	2208      	movs	r2, #8
   1beca:	a90a      	add	r1, sp, #40	; 0x28
   1becc:	9808      	ldr	r0, [sp, #32]
   1bece:	f7fe fa01 	bl	1a2d4 <net_context_bind>
		if (ret < 0) {
   1bed2:	2800      	cmp	r0, #0
   1bed4:	da12      	bge.n	1befc <tcp_syn_rcvd+0x314>
			net_context_unref(new_context);
   1bed6:	9808      	ldr	r0, [sp, #32]
   1bed8:	f014 fb00 	bl	304dc <net_context_unref>
			goto conndrop;
   1bedc:	e7a5      	b.n	1be2a <tcp_syn_rcvd+0x242>
   1bede:	bf00      	nop
   1bee0:	00036805 	.word	0x00036805
   1bee4:	000367de 	.word	0x000367de
   1bee8:	00035920 	.word	0x00035920
   1beec:	00035d7e 	.word	0x00035d7e
   1bef0:	00036757 	.word	0x00036757
   1bef4:	20021bfc 	.word	0x20021bfc
   1bef8:	0003133b 	.word	0x0003133b
		new_context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1befc:	9b08      	ldr	r3, [sp, #32]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1befe:	ae0c      	add	r6, sp, #48	; 0x30
   1bf00:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
   1bf04:	ce03      	ldmia	r6!, {r0, r1}
   1bf06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1bf0a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		memcpy(&new_context->remote, &remote_addr,
   1bf0e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1bf12:	6258      	str	r0, [r3, #36]	; 0x24
   1bf14:	6051      	str	r1, [r2, #4]
		ret = net_tcp_register(net_pkt_family(pkt),
   1bf16:	f103 002c 	add.w	r0, r3, #44	; 0x2c
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1bf1a:	8cde      	ldrh	r6, [r3, #38]	; 0x26
   1bf1c:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
			       ntohs(net_sin(&local_addr)->sin_port),
   1bf20:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1bf24:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1bf28:	4b31      	ldr	r3, [pc, #196]	; (1bff0 <tcp_syn_rcvd+0x408>)
   1bf2a:	ea4f 200c 	mov.w	r0, ip, lsl #8
   1bf2e:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1bf30:	0233      	lsls	r3, r6, #8
			       ntohs(net_sin(&local_addr)->sin_port),
   1bf32:	ea40 201c 	orr.w	r0, r0, ip, lsr #8
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1bf36:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
   1bf3a:	b280      	uxth	r0, r0
   1bf3c:	b29b      	uxth	r3, r3
   1bf3e:	9001      	str	r0, [sp, #4]
   1bf40:	9300      	str	r3, [sp, #0]
   1bf42:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1bf46:	ab0a      	add	r3, sp, #40	; 0x28
   1bf48:	2006      	movs	r0, #6
   1bf4a:	f7fe ff1b 	bl	1ad84 <net_conn_register>
		if (ret < 0) {
   1bf4e:	2800      	cmp	r0, #0
   1bf50:	dbc1      	blt.n	1bed6 <tcp_syn_rcvd+0x2ee>
		net_tcp_change_state(tcp, NET_TCP_LISTEN);
   1bf52:	2101      	movs	r1, #1
   1bf54:	4648      	mov	r0, r9
   1bf56:	f7ff fb3f 	bl	1b5d8 <net_tcp_change_state>
		net_tcp_change_state(new_context->tcp, NET_TCP_ESTABLISHED);
   1bf5a:	9b08      	ldr	r3, [sp, #32]
   1bf5c:	2104      	movs	r1, #4
   1bf5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1bf60:	f7ff fb3a 	bl	1b5d8 <net_tcp_change_state>
		net_context_set_accepting(new_context, true);
   1bf64:	9e08      	ldr	r6, [sp, #32]
	NET_ASSERT(context);
   1bf66:	b976      	cbnz	r6, 1bf86 <tcp_syn_rcvd+0x39e>
   1bf68:	4922      	ldr	r1, [pc, #136]	; (1bff4 <tcp_syn_rcvd+0x40c>)
   1bf6a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1bf6e:	4a22      	ldr	r2, [pc, #136]	; (1bff8 <tcp_syn_rcvd+0x410>)
   1bf70:	4822      	ldr	r0, [pc, #136]	; (1bffc <tcp_syn_rcvd+0x414>)
   1bf72:	f012 f923 	bl	2e1bc <printk>
   1bf76:	4822      	ldr	r0, [pc, #136]	; (1c000 <tcp_syn_rcvd+0x418>)
   1bf78:	f012 f920 	bl	2e1bc <printk>
   1bf7c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1bf80:	481d      	ldr	r0, [pc, #116]	; (1bff8 <tcp_syn_rcvd+0x410>)
   1bf82:	f012 fc1c 	bl	2e7be <assert_post_action>
		context->flags |= NET_CONTEXT_ACCEPTING_SOCK;
   1bf86:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
		net_context_set_state(new_context, NET_CONTEXT_CONNECTED);
   1bf8a:	9808      	ldr	r0, [sp, #32]
   1bf8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1bf90:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
   1bf94:	2102      	movs	r1, #2
   1bf96:	f7ff f937 	bl	1b208 <net_context_set_state>
		if (new_context->remote.sa_family == AF_INET) {
   1bf9a:	9808      	ldr	r0, [sp, #32]
   1bf9c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1bf9e:	2b01      	cmp	r3, #1
   1bfa0:	d016      	beq.n	1bfd0 <tcp_syn_rcvd+0x3e8>
		} else if (new_context->remote.sa_family == AF_INET6) {
   1bfa2:	2b02      	cmp	r3, #2
   1bfa4:	d022      	beq.n	1bfec <tcp_syn_rcvd+0x404>
			NET_ASSERT(false, "Invalid protocol family %d",
   1bfa6:	4a17      	ldr	r2, [pc, #92]	; (1c004 <tcp_syn_rcvd+0x41c>)
   1bfa8:	f640 2312 	movw	r3, #2578	; 0xa12
   1bfac:	4916      	ldr	r1, [pc, #88]	; (1c008 <tcp_syn_rcvd+0x420>)
   1bfae:	4813      	ldr	r0, [pc, #76]	; (1bffc <tcp_syn_rcvd+0x414>)
   1bfb0:	f012 f904 	bl	2e1bc <printk>
   1bfb4:	9b08      	ldr	r3, [sp, #32]
   1bfb6:	4815      	ldr	r0, [pc, #84]	; (1c00c <tcp_syn_rcvd+0x424>)
   1bfb8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1bfba:	f012 f8ff 	bl	2e1bc <printk>
   1bfbe:	f640 2112 	movw	r1, #2578	; 0xa12
   1bfc2:	4810      	ldr	r0, [pc, #64]	; (1c004 <tcp_syn_rcvd+0x41c>)
   1bfc4:	f012 fbfb 	bl	2e7be <assert_post_action>
			net_context_unref(new_context);
   1bfc8:	9808      	ldr	r0, [sp, #32]
   1bfca:	f014 fa87 	bl	304dc <net_context_unref>
			return NET_DROP;
   1bfce:	e633      	b.n	1bc38 <tcp_syn_rcvd+0x50>
			addrlen = sizeof(struct sockaddr_in);
   1bfd0:	2208      	movs	r2, #8
		context->tcp->accept_cb(new_context,
   1bfd2:	6821      	ldr	r1, [r4, #0]
   1bfd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bfd6:	9100      	str	r1, [sp, #0]
   1bfd8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
   1bfdc:	f100 0124 	add.w	r1, r0, #36	; 0x24
   1bfe0:	2300      	movs	r3, #0
   1bfe2:	47b0      	blx	r6
		net_pkt_unref(pkt);
   1bfe4:	4628      	mov	r0, r5
   1bfe6:	f014 fc10 	bl	3080a <net_pkt_unref>
		return NET_OK;
   1bfea:	e6e5      	b.n	1bdb8 <tcp_syn_rcvd+0x1d0>
			addrlen = sizeof(struct sockaddr_in6);
   1bfec:	2218      	movs	r2, #24
   1bfee:	e7f0      	b.n	1bfd2 <tcp_syn_rcvd+0x3ea>
   1bff0:	0001b821 	.word	0x0001b821
   1bff4:	00035d76 	.word	0x00035d76
   1bff8:	00035d49 	.word	0x00035d49
   1bffc:	00035920 	.word	0x00035920
   1c000:	00035d7e 	.word	0x00035d7e
   1c004:	000367de 	.word	0x000367de
   1c008:	00037308 	.word	0x00037308
   1c00c:	0003681d 	.word	0x0003681d

0001c010 <net_tcp_recv>:
{
   1c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_ASSERT(context->tcp);
   1c012:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c014:	4605      	mov	r5, r0
   1c016:	460f      	mov	r7, r1
   1c018:	4616      	mov	r6, r2
	NET_ASSERT(context->tcp);
   1c01a:	b973      	cbnz	r3, 1c03a <net_tcp_recv+0x2a>
   1c01c:	4913      	ldr	r1, [pc, #76]	; (1c06c <net_tcp_recv+0x5c>)
   1c01e:	f240 53be 	movw	r3, #1470	; 0x5be
   1c022:	4a13      	ldr	r2, [pc, #76]	; (1c070 <net_tcp_recv+0x60>)
   1c024:	4813      	ldr	r0, [pc, #76]	; (1c074 <net_tcp_recv+0x64>)
   1c026:	f012 f8c9 	bl	2e1bc <printk>
   1c02a:	4813      	ldr	r0, [pc, #76]	; (1c078 <net_tcp_recv+0x68>)
   1c02c:	f012 f8c6 	bl	2e1bc <printk>
   1c030:	f240 51be 	movw	r1, #1470	; 0x5be
   1c034:	480e      	ldr	r0, [pc, #56]	; (1c070 <net_tcp_recv+0x60>)
   1c036:	f012 fbc2 	bl	2e7be <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c03a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1c03c:	f8b3 00bc 	ldrh.w	r0, [r3, #188]	; 0xbc
   1c040:	f3c0 1047 	ubfx	r0, r0, #5, #8
   1c044:	f010 0408 	ands.w	r4, r0, #8
   1c048:	d109      	bne.n	1c05e <net_tcp_recv+0x4e>
	} else if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c04a:	4628      	mov	r0, r5
   1c04c:	f7ff f8bc 	bl	1b1c8 <net_context_get_state>
   1c050:	2802      	cmp	r0, #2
   1c052:	d107      	bne.n	1c064 <net_tcp_recv+0x54>
	return 0;
   1c054:	4620      	mov	r0, r4
	context->tcp->recv_user_data = user_data;
   1c056:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	context->recv_cb = cb;
   1c058:	632f      	str	r7, [r5, #48]	; 0x30
	context->tcp->recv_user_data = user_data;
   1c05a:	605e      	str	r6, [r3, #4]
}
   1c05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESHUTDOWN;
   1c05e:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1c062:	e7fb      	b.n	1c05c <net_tcp_recv+0x4c>
		return -ENOTCONN;
   1c064:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c068:	e7f8      	b.n	1c05c <net_tcp_recv+0x4c>
   1c06a:	bf00      	nop
   1c06c:	00036810 	.word	0x00036810
   1c070:	000367de 	.word	0x000367de
   1c074:	00035920 	.word	0x00035920
   1c078:	00035d7e 	.word	0x00035d7e

0001c07c <net_tcp_get>:
{
   1c07c:	b510      	push	{r4, lr}
   1c07e:	4604      	mov	r4, r0
	context->tcp = net_tcp_alloc(context);
   1c080:	f7ff fa4c 	bl	1b51c <net_tcp_alloc>
   1c084:	63e0      	str	r0, [r4, #60]	; 0x3c
	if (!context->tcp) {
   1c086:	b988      	cbnz	r0, 1c0ac <net_tcp_get+0x30>
		NET_ASSERT(context->tcp, "Cannot allocate TCP context");
   1c088:	f240 731b 	movw	r3, #1819	; 0x71b
   1c08c:	4a0f      	ldr	r2, [pc, #60]	; (1c0cc <net_tcp_get+0x50>)
   1c08e:	4910      	ldr	r1, [pc, #64]	; (1c0d0 <net_tcp_get+0x54>)
   1c090:	4810      	ldr	r0, [pc, #64]	; (1c0d4 <net_tcp_get+0x58>)
   1c092:	f012 f893 	bl	2e1bc <printk>
   1c096:	4810      	ldr	r0, [pc, #64]	; (1c0d8 <net_tcp_get+0x5c>)
   1c098:	f012 f890 	bl	2e1bc <printk>
   1c09c:	480b      	ldr	r0, [pc, #44]	; (1c0cc <net_tcp_get+0x50>)
   1c09e:	f240 711b 	movw	r1, #1819	; 0x71b
   1c0a2:	f012 fb8c 	bl	2e7be <assert_post_action>
		return -ENOBUFS;
   1c0a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1c0aa:	bd10      	pop	{r4, pc}
	k_delayed_work_init(&context->tcp->ack_timer, handle_ack_timeout);
   1c0ac:	490b      	ldr	r1, [pc, #44]	; (1c0dc <net_tcp_get+0x60>)
   1c0ae:	3008      	adds	r0, #8
   1c0b0:	f017 faac 	bl	3360c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->fin_timer, handle_fin_timeout);
   1c0b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c0b6:	490a      	ldr	r1, [pc, #40]	; (1c0e0 <net_tcp_get+0x64>)
   1c0b8:	3028      	adds	r0, #40	; 0x28
   1c0ba:	f017 faa7 	bl	3360c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->timewait_timer,
   1c0be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c0c0:	4908      	ldr	r1, [pc, #32]	; (1c0e4 <net_tcp_get+0x68>)
   1c0c2:	3068      	adds	r0, #104	; 0x68
   1c0c4:	f017 faa2 	bl	3360c <k_delayed_work_init>
	return 0;
   1c0c8:	2000      	movs	r0, #0
   1c0ca:	e7ee      	b.n	1c0aa <net_tcp_get+0x2e>
   1c0cc:	000367de 	.word	0x000367de
   1c0d0:	00036810 	.word	0x00036810
   1c0d4:	00035920 	.word	0x00035920
   1c0d8:	000367c0 	.word	0x000367c0
   1c0dc:	0003190d 	.word	0x0003190d
   1c0e0:	000311a1 	.word	0x000311a1
   1c0e4:	000318cd 	.word	0x000318cd

0001c0e8 <net_tcp_unref>:
{
   1c0e8:	b538      	push	{r3, r4, r5, lr}
	if (!context->tcp)
   1c0ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c0ec:	4604      	mov	r4, r0
	if (!context->tcp)
   1c0ee:	b18b      	cbz	r3, 1c114 <net_tcp_unref+0x2c>
		if (tcp_backlog[i].tcp != context->tcp) {
   1c0f0:	4d09      	ldr	r5, [pc, #36]	; (1c118 <net_tcp_unref+0x30>)
   1c0f2:	682a      	ldr	r2, [r5, #0]
   1c0f4:	4293      	cmp	r3, r2
   1c0f6:	d108      	bne.n	1c10a <net_tcp_unref+0x22>
		k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c0f8:	f105 000c 	add.w	r0, r5, #12
   1c0fc:	f00d fecc 	bl	29e98 <k_delayed_work_cancel>
		(void)memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c100:	2238      	movs	r2, #56	; 0x38
   1c102:	2100      	movs	r1, #0
   1c104:	4628      	mov	r0, r5
   1c106:	f017 fb95 	bl	33834 <memset>
	net_tcp_release(context->tcp);
   1c10a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c10c:	f7ff fab8 	bl	1b680 <net_tcp_release>
	context->tcp = NULL;
   1c110:	2300      	movs	r3, #0
   1c112:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   1c114:	2000      	movs	r0, #0
   1c116:	bd38      	pop	{r3, r4, r5, pc}
   1c118:	20021bfc 	.word	0x20021bfc

0001c11c <net_tcp_accept>:
}

int net_tcp_accept(struct net_context *context,
		   net_tcp_accept_cb_t cb,
		   void *user_data)
{
   1c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sockaddr local_addr;
	struct sockaddr *laddr = NULL;
	u16_t lport = 0U;
	int ret;

	NET_ASSERT(context->tcp);
   1c120:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c122:	b088      	sub	sp, #32
   1c124:	4604      	mov	r4, r0
   1c126:	460e      	mov	r6, r1
   1c128:	4617      	mov	r7, r2
	NET_ASSERT(context->tcp);
   1c12a:	b973      	cbnz	r3, 1c14a <net_tcp_accept+0x2e>
   1c12c:	4933      	ldr	r1, [pc, #204]	; (1c1fc <net_tcp_accept+0xe0>)
   1c12e:	f640 2334 	movw	r3, #2612	; 0xa34
   1c132:	4a33      	ldr	r2, [pc, #204]	; (1c200 <net_tcp_accept+0xe4>)
   1c134:	4833      	ldr	r0, [pc, #204]	; (1c204 <net_tcp_accept+0xe8>)
   1c136:	f012 f841 	bl	2e1bc <printk>
   1c13a:	4833      	ldr	r0, [pc, #204]	; (1c208 <net_tcp_accept+0xec>)
   1c13c:	f012 f83e 	bl	2e1bc <printk>
   1c140:	f640 2134 	movw	r1, #2612	; 0xa34
   1c144:	482e      	ldr	r0, [pc, #184]	; (1c200 <net_tcp_accept+0xe4>)
   1c146:	f012 fb3a 	bl	2e7be <assert_post_action>

	if (net_tcp_get_state(context->tcp) != NET_TCP_LISTEN) {
   1c14a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1c14c:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1c150:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c154:	2b01      	cmp	r3, #1
   1c156:	d14b      	bne.n	1c1f0 <net_tcp_accept+0xd4>
		NET_DBG("Context %p in wrong state %d, should be %d",
			context, context->tcp->state, NET_TCP_LISTEN);
		return -EINVAL;
	}

	if (cb == NULL) {
   1c158:	b93e      	cbnz	r6, 1c16a <net_tcp_accept+0x4e>
		/* The context is being shut down */
		if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c15a:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1c15e:	2b06      	cmp	r3, #6
   1c160:	d103      	bne.n	1c16a <net_tcp_accept+0x4e>
			context->tcp->accept_cb = NULL;
   1c162:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
	/* accept callback is only valid for TCP contexts */
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		context->tcp->accept_cb = cb;
	}

	return 0;
   1c166:	2000      	movs	r0, #0
   1c168:	e044      	b.n	1c1f4 <net_tcp_accept+0xd8>
	local_addr.sa_family = net_context_get_family(context);
   1c16a:	4620      	mov	r0, r4
   1c16c:	f7ff f80c 	bl	1b188 <net_context_get_family>
   1c170:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (net_context_get_family(context) == AF_INET) {
   1c174:	4620      	mov	r0, r4
   1c176:	f7ff f807 	bl	1b188 <net_context_get_family>
   1c17a:	2801      	cmp	r0, #1
   1c17c:	d135      	bne.n	1c1ea <net_tcp_accept+0xce>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1c17e:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1c182:	f1b8 0f00 	cmp.w	r8, #0
   1c186:	d004      	beq.n	1c192 <net_tcp_accept+0x76>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1c188:	f8d8 3000 	ldr.w	r3, [r8]
   1c18c:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1c18e:	f10d 0818 	add.w	r8, sp, #24
		net_sin(&local_addr)->sin_port = lport =
   1c192:	8be5      	ldrh	r5, [r4, #30]
   1c194:	f8ad 501a 	strh.w	r5, [sp, #26]
	ret = net_tcp_register(net_context_get_family(context),
   1c198:	4620      	mov	r0, r4
   1c19a:	f7fe fff5 	bl	1b188 <net_context_get_family>
   1c19e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1c1a2:	b2c1      	uxtb	r1, r0
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1c1a4:	e9cd 4303 	strd	r4, r3, [sp, #12]
			       ntohs(net_sin(&context->remote)->sin_port),
   1c1a8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
   1c1aa:	4b18      	ldr	r3, [pc, #96]	; (1c20c <net_tcp_accept+0xf0>)
	ret = net_tcp_register(net_context_get_family(context),
   1c1ac:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1c1b0:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&context->remote)->sin_port),
   1c1b2:	0203      	lsls	r3, r0, #8
   1c1b4:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1c1b8:	ba6d      	rev16	r5, r5
	ret = net_tcp_register(net_context_get_family(context),
   1c1ba:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1c1be:	b29b      	uxth	r3, r3
   1c1c0:	b2ad      	uxth	r5, r5
   1c1c2:	bf18      	it	ne
   1c1c4:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1c1c8:	9300      	str	r3, [sp, #0]
   1c1ca:	9501      	str	r5, [sp, #4]
   1c1cc:	4643      	mov	r3, r8
   1c1ce:	2006      	movs	r0, #6
   1c1d0:	f7fe fdd8 	bl	1ad84 <net_conn_register>
	if (ret < 0) {
   1c1d4:	2800      	cmp	r0, #0
   1c1d6:	db0d      	blt.n	1c1f4 <net_tcp_accept+0xd8>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c1d8:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	context->user_data = user_data;
   1c1dc:	6027      	str	r7, [r4, #0]
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c1de:	2b06      	cmp	r3, #6
   1c1e0:	d1c1      	bne.n	1c166 <net_tcp_accept+0x4a>
		context->tcp->accept_cb = cb;
   1c1e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c1e4:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
   1c1e8:	e7bd      	b.n	1c166 <net_tcp_accept+0x4a>
	u16_t lport = 0U;
   1c1ea:	2500      	movs	r5, #0
	struct sockaddr *laddr = NULL;
   1c1ec:	46a8      	mov	r8, r5
   1c1ee:	e7d3      	b.n	1c198 <net_tcp_accept+0x7c>
		return -EINVAL;
   1c1f0:	f06f 0015 	mvn.w	r0, #21
}
   1c1f4:	b008      	add	sp, #32
   1c1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c1fa:	bf00      	nop
   1c1fc:	00036810 	.word	0x00036810
   1c200:	000367de 	.word	0x000367de
   1c204:	00035920 	.word	0x00035920
   1c208:	00035d7e 	.word	0x00035d7e
   1c20c:	0001bbe9 	.word	0x0001bbe9

0001c210 <net_tcp_connect>:
		    u16_t rport,
		    u16_t lport,
		    k_timeout_t timeout,
		    net_context_connect_cb_t cb,
		    void *user_data)
{
   1c210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c214:	461d      	mov	r5, r3
	int ret;

	NET_ASSERT(context->tcp);
   1c216:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c218:	b087      	sub	sp, #28
   1c21a:	4604      	mov	r4, r0
   1c21c:	460f      	mov	r7, r1
   1c21e:	4691      	mov	r9, r2
   1c220:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(context->tcp);
   1c224:	b973      	cbnz	r3, 1c244 <net_tcp_connect+0x34>
   1c226:	492a      	ldr	r1, [pc, #168]	; (1c2d0 <net_tcp_connect+0xc0>)
   1c228:	f640 2384 	movw	r3, #2692	; 0xa84
   1c22c:	4a29      	ldr	r2, [pc, #164]	; (1c2d4 <net_tcp_connect+0xc4>)
   1c22e:	482a      	ldr	r0, [pc, #168]	; (1c2d8 <net_tcp_connect+0xc8>)
   1c230:	f011 ffc4 	bl	2e1bc <printk>
   1c234:	4829      	ldr	r0, [pc, #164]	; (1c2dc <net_tcp_connect+0xcc>)
   1c236:	f011 ffc1 	bl	2e1bc <printk>
   1c23a:	f640 2184 	movw	r1, #2692	; 0xa84
   1c23e:	4825      	ldr	r0, [pc, #148]	; (1c2d4 <net_tcp_connect+0xc4>)
   1c240:	f012 fabd 	bl	2e7be <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1c244:	f8b4 607a 	ldrh.w	r6, [r4, #122]	; 0x7a
   1c248:	f3c6 1681 	ubfx	r6, r6, #6, #2

	if (net_context_get_type(context) != SOCK_STREAM) {
   1c24c:	2e01      	cmp	r6, #1
   1c24e:	d002      	beq.n	1c256 <net_tcp_connect+0x46>
		return -ENOTSUP;
   1c250:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c254:	e036      	b.n	1c2c4 <net_tcp_connect+0xb4>
	}

	/* We need to register a handler, otherwise the SYN-ACK
	 * packet would not be received.
	 */
	ret = net_tcp_register(net_context_get_family(context),
   1c256:	4620      	mov	r0, r4
   1c258:	f7fe ff96 	bl	1b188 <net_context_get_family>
   1c25c:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1c260:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c264:	4b1e      	ldr	r3, [pc, #120]	; (1c2e0 <net_tcp_connect+0xd0>)
   1c266:	ba6d      	rev16	r5, r5
   1c268:	9302      	str	r3, [sp, #8]
   1c26a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1c26e:	b2ad      	uxth	r5, r5
   1c270:	ba5b      	rev16	r3, r3
   1c272:	b29b      	uxth	r3, r3
   1c274:	9301      	str	r3, [sp, #4]
   1c276:	b2c1      	uxtb	r1, r0
   1c278:	9500      	str	r5, [sp, #0]
   1c27a:	464b      	mov	r3, r9
   1c27c:	463a      	mov	r2, r7
   1c27e:	2006      	movs	r0, #6
   1c280:	f7fe fd80 	bl	1ad84 <net_conn_register>
			       ntohs(rport),
			       ntohs(lport),
			       tcp_synack_received,
			       context,
			       &context->conn_handler);
	if (ret < 0) {
   1c284:	2800      	cmp	r0, #0
   1c286:	db1d      	blt.n	1c2c4 <net_tcp_connect+0xb4>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c288:	4625      	mov	r5, r4
		return ret;
	}

	context->connect_cb = cb;
   1c28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	context->user_data = user_data;

	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c28c:	4631      	mov	r1, r6
	context->connect_cb = cb;
   1c28e:	63a3      	str	r3, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c290:	9b11      	ldr	r3, [sp, #68]	; 0x44
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c292:	4620      	mov	r0, r4
	context->user_data = user_data;
   1c294:	6023      	str	r3, [r4, #0]
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c296:	f7fe ffb7 	bl	1b208 <net_context_set_state>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c29a:	f855 0f3c 	ldr.w	r0, [r5, #60]!
   1c29e:	2102      	movs	r1, #2
   1c2a0:	f7ff f99a 	bl	1b5d8 <net_tcp_change_state>
	return send_syn_segment(context, NULL, remote, NET_TCP_SYN, "SYN");
   1c2a4:	2302      	movs	r3, #2
   1c2a6:	463a      	mov	r2, r7
   1c2a8:	2100      	movs	r1, #0
   1c2aa:	4628      	mov	r0, r5
   1c2ac:	f015 fa19 	bl	316e2 <send_syn_segment.isra.35>

	send_syn(context, addr);

	/* in tcp_synack_received() we give back this semaphore */
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c2b0:	f1b8 0f00 	cmp.w	r8, #0
   1c2b4:	d005      	beq.n	1c2c2 <net_tcp_connect+0xb2>
	    k_sem_take(&context->tcp->connect_wait, timeout)) {
   1c2b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c2b8:	30a0      	adds	r0, #160	; 0xa0
	return z_impl_k_sem_take(sem, timeout);
   1c2ba:	4641      	mov	r1, r8
   1c2bc:	f00d fada 	bl	29874 <z_impl_k_sem_take>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c2c0:	b918      	cbnz	r0, 1c2ca <net_tcp_connect+0xba>
		return -ETIMEDOUT;
	}

	return 0;
   1c2c2:	2000      	movs	r0, #0
}
   1c2c4:	b007      	add	sp, #28
   1c2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ETIMEDOUT;
   1c2ca:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1c2ce:	e7f9      	b.n	1c2c4 <net_tcp_connect+0xb4>
   1c2d0:	00036810 	.word	0x00036810
   1c2d4:	000367de 	.word	0x000367de
   1c2d8:	00035920 	.word	0x00035920
   1c2dc:	00035d7e 	.word	0x00035d7e
   1c2e0:	0001ba51 	.word	0x0001ba51

0001c2e4 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c2e8:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   1c2ea:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c2ee:	4b3b      	ldr	r3, [pc, #236]	; (1c3dc <connect_request_encode+0xf8>)
   1c2f0:	4a3b      	ldr	r2, [pc, #236]	; (1c3e0 <connect_request_encode+0xfc>)
{
   1c2f2:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1c2f4:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c2f8:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c2fa:	2804      	cmp	r0, #4
   1c2fc:	bf0c      	ite	eq
   1c2fe:	4610      	moveq	r0, r2
   1c300:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c302:	600f      	str	r7, [r1, #0]
{
   1c304:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c306:	f015 fd6e 	bl	31de6 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   1c30a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1c30e:	4603      	mov	r3, r0
   1c310:	b938      	cbnz	r0, 1c322 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c312:	e9d4 2000 	ldrd	r2, r0, [r4]
   1c316:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1c318:	f896 107a 	ldrb.w	r1, [r6, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c31c:	d104      	bne.n	1c328 <connect_request_encode+0x44>
		return -ENOMEM;
   1c31e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1c322:	4618      	mov	r0, r3
   1c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1c328:	1c50      	adds	r0, r2, #1
   1c32a:	6020      	str	r0, [r4, #0]
   1c32c:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c32e:	e9d4 8200 	ldrd	r8, r2, [r4]
   1c332:	4590      	cmp	r8, r2
   1c334:	d0f3      	beq.n	1c31e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1c336:	f108 0201 	add.w	r2, r8, #1
   1c33a:	6022      	str	r2, [r4, #0]
   1c33c:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1c340:	4621      	mov	r1, r4
   1c342:	f8b6 0078 	ldrh.w	r0, [r6, #120]	; 0x78
   1c346:	f015 fd3c 	bl	31dc2 <pack_uint16>
	if (err_code != 0) {
   1c34a:	4603      	mov	r3, r0
   1c34c:	2800      	cmp	r0, #0
   1c34e:	d1e8      	bne.n	1c322 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1c350:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1c354:	f015 fd47 	bl	31de6 <pack_utf8_str>
	if (err_code != 0) {
   1c358:	4603      	mov	r3, r0
   1c35a:	2800      	cmp	r0, #0
   1c35c:	d1e1      	bne.n	1c322 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1c35e:	6df0      	ldr	r0, [r6, #92]	; 0x5c
	u8_t connect_flags = client->clean_session << 1;
   1c360:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1c362:	b1d8      	cbz	r0, 1c39c <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1c364:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1c368:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   1c36c:	f003 0301 	and.w	r3, r3, #1
   1c370:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1c374:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1c376:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1c378:	00db      	lsls	r3, r3, #3
   1c37a:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1c37e:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1c380:	f015 fd31 	bl	31de6 <pack_utf8_str>
		if (err_code != 0) {
   1c384:	4603      	mov	r3, r0
   1c386:	2800      	cmp	r0, #0
   1c388:	d1cb      	bne.n	1c322 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1c38a:	6e33      	ldr	r3, [r6, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   1c38c:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1c38e:	b313      	cbz	r3, 1c3d6 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   1c390:	4618      	mov	r0, r3
   1c392:	f015 fd28 	bl	31de6 <pack_utf8_str>
			if (err_code != 0) {
   1c396:	4603      	mov	r3, r0
   1c398:	2800      	cmp	r0, #0
   1c39a:	d1c2      	bne.n	1c322 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   1c39c:	6d70      	ldr	r0, [r6, #84]	; 0x54
   1c39e:	b138      	cbz	r0, 1c3b0 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1c3a0:	4621      	mov	r1, r4
   1c3a2:	f015 fd20 	bl	31de6 <pack_utf8_str>
		if (err_code != 0) {
   1c3a6:	4603      	mov	r3, r0
   1c3a8:	2800      	cmp	r0, #0
   1c3aa:	d1ba      	bne.n	1c322 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1c3ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1c3b0:	6db0      	ldr	r0, [r6, #88]	; 0x58
   1c3b2:	b138      	cbz	r0, 1c3c4 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1c3b4:	4621      	mov	r1, r4
   1c3b6:	f015 fd16 	bl	31de6 <pack_utf8_str>
		if (err_code != 0) {
   1c3ba:	4603      	mov	r3, r0
   1c3bc:	2800      	cmp	r0, #0
   1c3be:	d1b0      	bne.n	1c322 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1c3c0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1c3c4:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c3c8:	4622      	mov	r2, r4
   1c3ca:	4639      	mov	r1, r7
}
   1c3cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c3d0:	2010      	movs	r0, #16
   1c3d2:	f015 bd23 	b.w	31e1c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1c3d6:	f015 fcf4 	bl	31dc2 <pack_uint16>
   1c3da:	e7dc      	b.n	1c396 <connect_request_encode+0xb2>
   1c3dc:	000349ec 	.word	0x000349ec
   1c3e0:	000349f4 	.word	0x000349f4

0001c3e4 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1c3e4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c3e8:	1a9b      	subs	r3, r3, r2
   1c3ea:	2b01      	cmp	r3, #1
   1c3ec:	bf81      	itttt	hi
   1c3ee:	4b05      	ldrhi	r3, [pc, #20]	; (1c404 <disconnect_encode+0x20>)
   1c3f0:	881b      	ldrhhi	r3, [r3, #0]
   1c3f2:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1c3f4:	6803      	ldrhi	r3, [r0, #0]
   1c3f6:	bf83      	ittte	hi
   1c3f8:	3302      	addhi	r3, #2
   1c3fa:	6043      	strhi	r3, [r0, #4]

	return 0;
   1c3fc:	2000      	movhi	r0, #0
		return -ENOMEM;
   1c3fe:	f06f 000b 	mvnls.w	r0, #11
}
   1c402:	4770      	bx	lr
   1c404:	0003683a 	.word	0x0003683a

0001c408 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1c408:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c40c:	1a9b      	subs	r3, r3, r2
   1c40e:	2b01      	cmp	r3, #1
   1c410:	bf81      	itttt	hi
   1c412:	4b05      	ldrhi	r3, [pc, #20]	; (1c428 <ping_request_encode+0x20>)
   1c414:	881b      	ldrhhi	r3, [r3, #0]
   1c416:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1c418:	6803      	ldrhi	r3, [r0, #0]
   1c41a:	bf83      	ittte	hi
   1c41c:	3302      	addhi	r3, #2
   1c41e:	6043      	strhi	r3, [r0, #4]

	return 0;
   1c420:	2000      	movhi	r0, #0
		return -ENOMEM;
   1c422:	f06f 000b 	mvnls.w	r0, #11
}
   1c426:	4770      	bx	lr
   1c428:	0003683c 	.word	0x0003683c

0001c42c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1c42c:	2314      	movs	r3, #20
   1c42e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1c432:	4353      	muls	r3, r2
   1c434:	4a01      	ldr	r2, [pc, #4]	; (1c43c <mqtt_transport_connect+0x10>)
   1c436:	58d3      	ldr	r3, [r2, r3]
   1c438:	4718      	bx	r3
   1c43a:	bf00      	nop
   1c43c:	000349fc 	.word	0x000349fc

0001c440 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   1c440:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1c442:	2514      	movs	r5, #20
   1c444:	4c03      	ldr	r4, [pc, #12]	; (1c454 <mqtt_transport_write+0x14>)
   1c446:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c44a:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1c44e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1c450:	685b      	ldr	r3, [r3, #4]
   1c452:	4718      	bx	r3
   1c454:	000349fc 	.word	0x000349fc

0001c458 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1c458:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1c45a:	2414      	movs	r4, #20
   1c45c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c460:	4a03      	ldr	r2, [pc, #12]	; (1c470 <mqtt_transport_write_msg+0x18>)
   1c462:	fb04 2303 	mla	r3, r4, r3, r2
}
   1c466:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   1c46a:	689b      	ldr	r3, [r3, #8]
   1c46c:	4718      	bx	r3
   1c46e:	bf00      	nop
   1c470:	000349fc 	.word	0x000349fc

0001c474 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   1c474:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1c476:	2614      	movs	r6, #20
   1c478:	4d04      	ldr	r5, [pc, #16]	; (1c48c <mqtt_transport_read+0x18>)
   1c47a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1c47e:	fb06 5404 	mla	r4, r6, r4, r5
   1c482:	68e4      	ldr	r4, [r4, #12]
   1c484:	46a4      	mov	ip, r4
							 shall_block);
}
   1c486:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1c488:	4760      	bx	ip
   1c48a:	bf00      	nop
   1c48c:	000349fc 	.word	0x000349fc

0001c490 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1c490:	2114      	movs	r1, #20
   1c492:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c496:	4a02      	ldr	r2, [pc, #8]	; (1c4a0 <mqtt_transport_disconnect+0x10>)
   1c498:	fb01 2303 	mla	r3, r1, r3, r2
   1c49c:	691b      	ldr	r3, [r3, #16]
   1c49e:	4718      	bx	r3
   1c4a0:	000349fc 	.word	0x000349fc

0001c4a4 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   1c4a4:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1c4a6:	b510      	push	{r4, lr}
   1c4a8:	b142      	cbz	r2, 1c4bc <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   1c4aa:	4b0f      	ldr	r3, [pc, #60]	; (1c4e8 <mqtt_mutex_unlock+0x44>)
   1c4ac:	6882      	ldr	r2, [r0, #8]
   1c4ae:	689b      	ldr	r3, [r3, #8]
   1c4b0:	429a      	cmp	r2, r3
   1c4b2:	d115      	bne.n	1c4e0 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   1c4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   1c4b8:	f00b bd86 	b.w	27fc8 <z_impl_k_mutex_unlock>
		return -EINVAL;
   1c4bc:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1c4c0:	2343      	movs	r3, #67	; 0x43
   1c4c2:	4a0a      	ldr	r2, [pc, #40]	; (1c4ec <mqtt_mutex_unlock+0x48>)
   1c4c4:	490a      	ldr	r1, [pc, #40]	; (1c4f0 <mqtt_mutex_unlock+0x4c>)
   1c4c6:	480b      	ldr	r0, [pc, #44]	; (1c4f4 <mqtt_mutex_unlock+0x50>)
   1c4c8:	f011 fe78 	bl	2e1bc <printk>
   1c4cc:	4621      	mov	r1, r4
   1c4ce:	480a      	ldr	r0, [pc, #40]	; (1c4f8 <mqtt_mutex_unlock+0x54>)
   1c4d0:	f011 fe74 	bl	2e1bc <printk>
}
   1c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1c4d8:	2143      	movs	r1, #67	; 0x43
   1c4da:	4804      	ldr	r0, [pc, #16]	; (1c4ec <mqtt_mutex_unlock+0x48>)
   1c4dc:	f012 b96f 	b.w	2e7be <assert_post_action>
		return -EPERM;
   1c4e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c4e4:	e7ec      	b.n	1c4c0 <mqtt_mutex_unlock+0x1c>
   1c4e6:	bf00      	nop
   1c4e8:	20027320 	.word	0x20027320
   1c4ec:	0003686a 	.word	0x0003686a
   1c4f0:	0003689b 	.word	0x0003689b
   1c4f4:	00035920 	.word	0x00035920
   1c4f8:	000368a4 	.word	0x000368a4

0001c4fc <mqtt_mutex_lock>:
{
   1c4fc:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1c4fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c502:	f00b fc83 	bl	27e0c <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1c506:	4604      	mov	r4, r0
   1c508:	b178      	cbz	r0, 1c52a <mqtt_mutex_lock+0x2e>
   1c50a:	2339      	movs	r3, #57	; 0x39
   1c50c:	4a07      	ldr	r2, [pc, #28]	; (1c52c <mqtt_mutex_lock+0x30>)
   1c50e:	4908      	ldr	r1, [pc, #32]	; (1c530 <mqtt_mutex_lock+0x34>)
   1c510:	4808      	ldr	r0, [pc, #32]	; (1c534 <mqtt_mutex_lock+0x38>)
   1c512:	f011 fe53 	bl	2e1bc <printk>
   1c516:	4621      	mov	r1, r4
   1c518:	4807      	ldr	r0, [pc, #28]	; (1c538 <mqtt_mutex_lock+0x3c>)
   1c51a:	f011 fe4f 	bl	2e1bc <printk>
}
   1c51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1c522:	2139      	movs	r1, #57	; 0x39
   1c524:	4801      	ldr	r0, [pc, #4]	; (1c52c <mqtt_mutex_lock+0x30>)
   1c526:	f012 b94a 	b.w	2e7be <assert_post_action>
}
   1c52a:	bd10      	pop	{r4, pc}
   1c52c:	0003686a 	.word	0x0003686a
   1c530:	0003689b 	.word	0x0003689b
   1c534:	00035920 	.word	0x00035920
   1c538:	0003684a 	.word	0x0003684a

0001c53c <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   1c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   1c540:	6885      	ldr	r5, [r0, #8]
{
   1c542:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   1c544:	682b      	ldr	r3, [r5, #0]
{
   1c546:	460e      	mov	r6, r1
   1c548:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   1c54a:	b963      	cbnz	r3, 1c566 <z_impl_entropy_get_entropy+0x2a>
   1c54c:	4909      	ldr	r1, [pc, #36]	; (1c574 <z_impl_entropy_get_entropy+0x38>)
   1c54e:	234c      	movs	r3, #76	; 0x4c
   1c550:	4a09      	ldr	r2, [pc, #36]	; (1c578 <z_impl_entropy_get_entropy+0x3c>)
   1c552:	480a      	ldr	r0, [pc, #40]	; (1c57c <z_impl_entropy_get_entropy+0x40>)
   1c554:	f011 fe32 	bl	2e1bc <printk>
   1c558:	4809      	ldr	r0, [pc, #36]	; (1c580 <z_impl_entropy_get_entropy+0x44>)
   1c55a:	f011 fe2f 	bl	2e1bc <printk>
   1c55e:	214c      	movs	r1, #76	; 0x4c
   1c560:	4805      	ldr	r0, [pc, #20]	; (1c578 <z_impl_entropy_get_entropy+0x3c>)
   1c562:	f012 f92c 	bl	2e7be <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c566:	682b      	ldr	r3, [r5, #0]
   1c568:	463a      	mov	r2, r7
   1c56a:	4631      	mov	r1, r6
   1c56c:	4620      	mov	r0, r4
}
   1c56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   1c572:	4718      	bx	r3
   1c574:	000369b2 	.word	0x000369b2
   1c578:	00036985 	.word	0x00036985
   1c57c:	00035920 	.word	0x00035920
   1c580:	000369d2 	.word	0x000369d2

0001c584 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   1c584:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   1c586:	4d12      	ldr	r5, [pc, #72]	; (1c5d0 <sys_rand32_get+0x4c>)
   1c588:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1c58a:	b99c      	cbnz	r4, 1c5b4 <sys_rand32_get+0x30>
   1c58c:	4811      	ldr	r0, [pc, #68]	; (1c5d4 <sys_rand32_get+0x50>)
   1c58e:	f00a fda5 	bl	270dc <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
   1c592:	4604      	mov	r4, r0
   1c594:	b968      	cbnz	r0, 1c5b2 <sys_rand32_get+0x2e>
   1c596:	231d      	movs	r3, #29
   1c598:	4a0f      	ldr	r2, [pc, #60]	; (1c5d8 <sys_rand32_get+0x54>)
   1c59a:	4910      	ldr	r1, [pc, #64]	; (1c5dc <sys_rand32_get+0x58>)
   1c59c:	4810      	ldr	r0, [pc, #64]	; (1c5e0 <sys_rand32_get+0x5c>)
   1c59e:	f011 fe0d 	bl	2e1bc <printk>
   1c5a2:	490c      	ldr	r1, [pc, #48]	; (1c5d4 <sys_rand32_get+0x50>)
   1c5a4:	480f      	ldr	r0, [pc, #60]	; (1c5e4 <sys_rand32_get+0x60>)
   1c5a6:	f011 fe09 	bl	2e1bc <printk>
   1c5aa:	211d      	movs	r1, #29
   1c5ac:	480a      	ldr	r0, [pc, #40]	; (1c5d8 <sys_rand32_get+0x54>)
   1c5ae:	f012 f906 	bl	2e7be <assert_post_action>
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1c5b2:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1c5b4:	2204      	movs	r2, #4
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	eb0d 0102 	add.w	r1, sp, r2
   1c5bc:	f7ff ffbe 	bl	1c53c <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1c5c0:	2800      	cmp	r0, #0
   1c5c2:	da02      	bge.n	1c5ca <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1c5c4:	f7fb ff86 	bl	184d4 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1c5c8:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1c5ca:	9801      	ldr	r0, [sp, #4]
   1c5cc:	b003      	add	sp, #12
   1c5ce:	bd30      	pop	{r4, r5, pc}
   1c5d0:	200220b4 	.word	0x200220b4
   1c5d4:	000368c6 	.word	0x000368c6
   1c5d8:	000368d4 	.word	0x000368d4
   1c5dc:	0003690d 	.word	0x0003690d
   1c5e0:	00035920 	.word	0x00035920
   1c5e4:	00036922 	.word	0x00036922

0001c5e8 <default_CSPRNG>:

	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
}

int default_CSPRNG(u8_t *dest, unsigned int size)
{
   1c5e8:	b507      	push	{r0, r1, r2, lr}
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1c5ea:	2200      	movs	r2, #0
   1c5ec:	9100      	str	r1, [sp, #0]
   1c5ee:	4603      	mov	r3, r0
   1c5f0:	4611      	mov	r1, r2
   1c5f2:	4803      	ldr	r0, [pc, #12]	; (1c600 <default_CSPRNG+0x18>)
   1c5f4:	f013 fc6b 	bl	2fece <tc_ctr_prng_generate>
	return res;
}
   1c5f8:	b003      	add	sp, #12
   1c5fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5fe:	bf00      	nop
   1c600:	200207e0 	.word	0x200207e0

0001c604 <jwt_add_payload>:
{
   1c604:	b530      	push	{r4, r5, lr}
   1c606:	b087      	sub	sp, #28
	struct jwt_payload payload = {
   1c608:	e9cd 1203 	strd	r1, r2, [sp, #12]
	base64_outch(builder, '.');
   1c60c:	212e      	movs	r1, #46	; 0x2e
{
   1c60e:	4604      	mov	r4, r0
	struct jwt_payload payload = {
   1c610:	9305      	str	r3, [sp, #20]
	base64_outch(builder, '.');
   1c612:	f016 f907 	bl	32824 <base64_outch>
	int res = json_obj_encode(jwt_payload_desc,
   1c616:	4b07      	ldr	r3, [pc, #28]	; (1c634 <jwt_add_payload+0x30>)
   1c618:	9000      	str	r0, [sp, #0]
   1c61a:	aa03      	add	r2, sp, #12
   1c61c:	2103      	movs	r1, #3
   1c61e:	4806      	ldr	r0, [pc, #24]	; (1c638 <jwt_add_payload+0x34>)
   1c620:	f7fa fd8a 	bl	17138 <json_obj_encode>
   1c624:	4605      	mov	r5, r0
	base64_flush(builder);
   1c626:	4620      	mov	r0, r4
   1c628:	f016 f90f 	bl	3284a <base64_flush>
}
   1c62c:	4628      	mov	r0, r5
   1c62e:	b007      	add	sp, #28
   1c630:	bd30      	pop	{r4, r5, pc}
   1c632:	bf00      	nop
   1c634:	000328c3 	.word	0x000328c3
   1c638:	200200dc 	.word	0x200200dc

0001c63c <jwt_sign>:

int jwt_sign(struct jwt_builder *builder,
	     const char *der_key,
	     size_t der_key_len)
{
   1c63c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c63e:	4605      	mov	r5, r0
   1c640:	b0b7      	sub	sp, #220	; 0xdc
	struct tc_sha256_state_struct ctx;
	u8_t hash[32], sig[64];
	int res;

	tc_sha256_init(&ctx);
   1c642:	a81a      	add	r0, sp, #104	; 0x68
{
   1c644:	460f      	mov	r7, r1
	tc_sha256_init(&ctx);
   1c646:	f7fc fa0f 	bl	18a68 <tc_sha256_init>
	tc_sha256_update(&ctx, builder->base, builder->buf - builder->base);
   1c64a:	e9d5 1200 	ldrd	r1, r2, [r5]
   1c64e:	a81a      	add	r0, sp, #104	; 0x68
   1c650:	1a52      	subs	r2, r2, r1
   1c652:	f013 fb23 	bl	2fc9c <tc_sha256_update>
	tc_sha256_final(hash, &ctx);
   1c656:	a91a      	add	r1, sp, #104	; 0x68
   1c658:	a802      	add	r0, sp, #8
   1c65a:	f013 fb4b 	bl	2fcf4 <tc_sha256_final>
	if (prng_init) {
   1c65e:	4b1b      	ldr	r3, [pc, #108]	; (1c6cc <jwt_sign+0x90>)
   1c660:	781c      	ldrb	r4, [r3, #0]
   1c662:	b17c      	cbz	r4, 1c684 <jwt_sign+0x48>
	res = setup_prng();

	if (res != 0) {
		return res;
	}
	uECC_set_rng(&default_CSPRNG);
   1c664:	481a      	ldr	r0, [pc, #104]	; (1c6d0 <jwt_sign+0x94>)
   1c666:	f7fb ff87 	bl	18578 <uECC_set_rng>

	/* Note that tinycrypt only supports P-256. */
	res = uECC_sign(der_key, hash, sizeof(hash),
   1c66a:	4b1a      	ldr	r3, [pc, #104]	; (1c6d4 <jwt_sign+0x98>)
   1c66c:	2220      	movs	r2, #32
   1c66e:	9300      	str	r3, [sp, #0]
   1c670:	a902      	add	r1, sp, #8
   1c672:	ab0a      	add	r3, sp, #40	; 0x28
   1c674:	4638      	mov	r0, r7
   1c676:	f012 fc4b 	bl	2ef10 <uECC_sign>
			sig, &curve_secp256r1);
	if (res != TC_CRYPTO_SUCCESS) {
   1c67a:	2801      	cmp	r0, #1
   1c67c:	d017      	beq.n	1c6ae <jwt_sign+0x72>
		return -EINVAL;
   1c67e:	f06f 0015 	mvn.w	r0, #21
   1c682:	e021      	b.n	1c6c8 <jwt_sign+0x8c>
	prng_init = true;
   1c684:	2201      	movs	r2, #1
   1c686:	ae0a      	add	r6, sp, #40	; 0x28
   1c688:	701a      	strb	r2, [r3, #0]
		u32_t rv = sys_rand32_get();
   1c68a:	f7ff ff7b 	bl	1c584 <sys_rand32_get>
   1c68e:	3404      	adds	r4, #4
	for (int i = 0; i < sizeof(entropy); i += sizeof(u32_t)) {
   1c690:	2c20      	cmp	r4, #32
   1c692:	f846 0b04 	str.w	r0, [r6], #4
   1c696:	d1f8      	bne.n	1c68a <jwt_sign+0x4e>
	int res = tc_ctr_prng_init(&prng_state,
   1c698:	2319      	movs	r3, #25
   1c69a:	4622      	mov	r2, r4
   1c69c:	9300      	str	r3, [sp, #0]
   1c69e:	a90a      	add	r1, sp, #40	; 0x28
   1c6a0:	4b0d      	ldr	r3, [pc, #52]	; (1c6d8 <jwt_sign+0x9c>)
   1c6a2:	480e      	ldr	r0, [pc, #56]	; (1c6dc <jwt_sign+0xa0>)
   1c6a4:	f013 fbc5 	bl	2fe32 <tc_ctr_prng_init>
	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
   1c6a8:	2801      	cmp	r0, #1
   1c6aa:	d0db      	beq.n	1c664 <jwt_sign+0x28>
   1c6ac:	e7e7      	b.n	1c67e <jwt_sign+0x42>
	}

	base64_outch(builder, '.');
   1c6ae:	212e      	movs	r1, #46	; 0x2e
   1c6b0:	4628      	mov	r0, r5
   1c6b2:	f016 f8b7 	bl	32824 <base64_outch>
	base64_append_bytes(sig, sizeof(sig), builder);
   1c6b6:	462a      	mov	r2, r5
   1c6b8:	2140      	movs	r1, #64	; 0x40
   1c6ba:	a80a      	add	r0, sp, #40	; 0x28
   1c6bc:	f016 f901 	bl	328c2 <base64_append_bytes>
	base64_flush(builder);
   1c6c0:	4628      	mov	r0, r5
   1c6c2:	f016 f8c2 	bl	3284a <base64_flush>

	return 0;
   1c6c6:	2000      	movs	r0, #0
}
   1c6c8:	b037      	add	sp, #220	; 0xdc
   1c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c6cc:	20027df9 	.word	0x20027df9
   1c6d0:	0001c5e9 	.word	0x0001c5e9
   1c6d4:	00034a44 	.word	0x00034a44
   1c6d8:	000369f8 	.word	0x000369f8
   1c6dc:	200207e0 	.word	0x200207e0

0001c6e0 <jwt_init_builder>:
		     size_t buffer_size)
{
	builder->base = buffer;
	builder->buf = buffer;
	builder->len = buffer_size;
	builder->overflowed = false;
   1c6e0:	2300      	movs	r3, #0
{
   1c6e2:	b513      	push	{r0, r1, r4, lr}
	builder->buf = buffer;
   1c6e4:	e9c0 1100 	strd	r1, r1, [r0]
	builder->len = buffer_size;
   1c6e8:	6082      	str	r2, [r0, #8]
	builder->overflowed = false;
   1c6ea:	7303      	strb	r3, [r0, #12]
	builder->pending = 0;
   1c6ec:	6103      	str	r3, [r0, #16]
{
   1c6ee:	4604      	mov	r4, r0
	int res = json_obj_encode(jwt_header_desc, ARRAY_SIZE(jwt_header_desc),
   1c6f0:	9000      	str	r0, [sp, #0]
   1c6f2:	4b06      	ldr	r3, [pc, #24]	; (1c70c <jwt_init_builder+0x2c>)
   1c6f4:	4a06      	ldr	r2, [pc, #24]	; (1c710 <jwt_init_builder+0x30>)
   1c6f6:	2102      	movs	r1, #2
   1c6f8:	4806      	ldr	r0, [pc, #24]	; (1c714 <jwt_init_builder+0x34>)
   1c6fa:	f7fa fd1d 	bl	17138 <json_obj_encode>
	if (res != 0) {
   1c6fe:	b910      	cbnz	r0, 1c706 <jwt_init_builder+0x26>
	base64_flush(builder);
   1c700:	4620      	mov	r0, r4
   1c702:	f016 f8a2 	bl	3284a <base64_flush>

	jwt_add_header(builder);

	return 0;
}
   1c706:	2000      	movs	r0, #0
   1c708:	b002      	add	sp, #8
   1c70a:	bd10      	pop	{r4, pc}
   1c70c:	000328c3 	.word	0x000328c3
   1c710:	00034af4 	.word	0x00034af4
   1c714:	200200bc 	.word	0x200200bc

0001c718 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c718:	b570      	push	{r4, r5, r6, lr}
   1c71a:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c71c:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c71e:	460d      	mov	r5, r1
   1c720:	b961      	cbnz	r1, 1c73c <gpio_nrfx_manage_callback+0x24>
   1c722:	4922      	ldr	r1, [pc, #136]	; (1c7ac <gpio_nrfx_manage_callback+0x94>)
   1c724:	2324      	movs	r3, #36	; 0x24
   1c726:	4a22      	ldr	r2, [pc, #136]	; (1c7b0 <gpio_nrfx_manage_callback+0x98>)
   1c728:	4822      	ldr	r0, [pc, #136]	; (1c7b4 <gpio_nrfx_manage_callback+0x9c>)
   1c72a:	f011 fd47 	bl	2e1bc <printk>
   1c72e:	4822      	ldr	r0, [pc, #136]	; (1c7b8 <gpio_nrfx_manage_callback+0xa0>)
   1c730:	f011 fd44 	bl	2e1bc <printk>
   1c734:	2124      	movs	r1, #36	; 0x24
   1c736:	481e      	ldr	r0, [pc, #120]	; (1c7b0 <gpio_nrfx_manage_callback+0x98>)
   1c738:	f012 f841 	bl	2e7be <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1c73c:	686b      	ldr	r3, [r5, #4]
   1c73e:	b963      	cbnz	r3, 1c75a <gpio_nrfx_manage_callback+0x42>
   1c740:	491e      	ldr	r1, [pc, #120]	; (1c7bc <gpio_nrfx_manage_callback+0xa4>)
   1c742:	2325      	movs	r3, #37	; 0x25
   1c744:	4a1a      	ldr	r2, [pc, #104]	; (1c7b0 <gpio_nrfx_manage_callback+0x98>)
   1c746:	481b      	ldr	r0, [pc, #108]	; (1c7b4 <gpio_nrfx_manage_callback+0x9c>)
   1c748:	f011 fd38 	bl	2e1bc <printk>
   1c74c:	481c      	ldr	r0, [pc, #112]	; (1c7c0 <gpio_nrfx_manage_callback+0xa8>)
   1c74e:	f011 fd35 	bl	2e1bc <printk>
   1c752:	2125      	movs	r1, #37	; 0x25
   1c754:	4816      	ldr	r0, [pc, #88]	; (1c7b0 <gpio_nrfx_manage_callback+0x98>)
   1c756:	f012 f832 	bl	2e7be <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1c75a:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c75c:	b15b      	cbz	r3, 1c776 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c75e:	2200      	movs	r2, #0
   1c760:	429d      	cmp	r5, r3
   1c762:	d113      	bne.n	1c78c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1c764:	682b      	ldr	r3, [r5, #0]
   1c766:	b95a      	cbnz	r2, 1c780 <gpio_nrfx_manage_callback+0x68>
   1c768:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1c76a:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c76c:	4295      	cmp	r5, r2
   1c76e:	d100      	bne.n	1c772 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1c770:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1c772:	2300      	movs	r3, #0
   1c774:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1c776:	b976      	cbnz	r6, 1c796 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c778:	2000      	movs	r0, #0
				     callback, set);
}
   1c77a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c77c:	460b      	mov	r3, r1
   1c77e:	e7ef      	b.n	1c760 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   1c780:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c782:	68a3      	ldr	r3, [r4, #8]
   1c784:	429d      	cmp	r5, r3
	list->tail = node;
   1c786:	bf08      	it	eq
   1c788:	60a2      	streq	r2, [r4, #8]
   1c78a:	e7f2      	b.n	1c772 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c78c:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1c78e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c790:	2900      	cmp	r1, #0
   1c792:	d1f3      	bne.n	1c77c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c794:	b13e      	cbz	r6, 1c7a6 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1c796:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1c798:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c79a:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1c79c:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c79e:	2800      	cmp	r0, #0
   1c7a0:	d1ea      	bne.n	1c778 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c7a2:	60a5      	str	r5, [r4, #8]
   1c7a4:	e7e9      	b.n	1c77a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1c7a6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c7aa:	e7e6      	b.n	1c77a <gpio_nrfx_manage_callback+0x62>
   1c7ac:	00036a5c 	.word	0x00036a5c
   1c7b0:	00036a2f 	.word	0x00036a2f
   1c7b4:	00035920 	.word	0x00035920
   1c7b8:	00036a65 	.word	0x00036a65
   1c7bc:	00036a74 	.word	0x00036a74
   1c7c0:	00036a86 	.word	0x00036a86

0001c7c4 <nrf_gpio_pin_port_decode.isra.9.part.10>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1c7c4:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c7c6:	4c07      	ldr	r4, [pc, #28]	; (1c7e4 <nrf_gpio_pin_port_decode.isra.9.part.10+0x20>)
   1c7c8:	4907      	ldr	r1, [pc, #28]	; (1c7e8 <nrf_gpio_pin_port_decode.isra.9.part.10+0x24>)
   1c7ca:	4622      	mov	r2, r4
   1c7cc:	4807      	ldr	r0, [pc, #28]	; (1c7ec <nrf_gpio_pin_port_decode.isra.9.part.10+0x28>)
   1c7ce:	f240 230d 	movw	r3, #525	; 0x20d
   1c7d2:	f011 fcf3 	bl	2e1bc <printk>
   1c7d6:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & 0x1F;
        return NRF_P1;
    }
#endif
}
   1c7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c7dc:	f240 210d 	movw	r1, #525	; 0x20d
   1c7e0:	f011 bfed 	b.w	2e7be <assert_post_action>
   1c7e4:	00036ad5 	.word	0x00036ad5
   1c7e8:	00036b08 	.word	0x00036b08
   1c7ec:	00035920 	.word	0x00035920

0001c7f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1c7f0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1c7f2:	4b09      	ldr	r3, [pc, #36]	; (1c818 <gpio_nrfx_init+0x28>)
   1c7f4:	781a      	ldrb	r2, [r3, #0]
   1c7f6:	b96a      	cbnz	r2, 1c814 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1c7f8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c7fa:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1c7fc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c7fe:	2105      	movs	r1, #5
   1c800:	f7fc f9f0 	bl	18be4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1c804:	2031      	movs	r0, #49	; 0x31
   1c806:	f7fc f9dd 	bl	18bc4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c80a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c80e:	4b03      	ldr	r3, [pc, #12]	; (1c81c <gpio_nrfx_init+0x2c>)
   1c810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1c814:	2000      	movs	r0, #0
   1c816:	bd08      	pop	{r3, pc}
   1c818:	20027dfa 	.word	0x20027dfa
   1c81c:	40031000 	.word	0x40031000

0001c820 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c820:	4b2e      	ldr	r3, [pc, #184]	; (1c8dc <gpio_nrfx_config+0xbc>)
{
   1c822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c826:	4013      	ands	r3, r2
   1c828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c82c:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c82e:	d044      	beq.n	1c8ba <gpio_nrfx_config+0x9a>
   1c830:	d808      	bhi.n	1c844 <gpio_nrfx_config+0x24>
   1c832:	2b02      	cmp	r3, #2
   1c834:	d043      	beq.n	1c8be <gpio_nrfx_config+0x9e>
   1c836:	2b06      	cmp	r3, #6
   1c838:	d043      	beq.n	1c8c2 <gpio_nrfx_config+0xa2>
   1c83a:	2b00      	cmp	r3, #0
   1c83c:	d041      	beq.n	1c8c2 <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1c83e:	f06f 0015 	mvn.w	r0, #21
   1c842:	e038      	b.n	1c8b6 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1c848:	d03d      	beq.n	1c8c6 <gpio_nrfx_config+0xa6>
   1c84a:	d804      	bhi.n	1c856 <gpio_nrfx_config+0x36>
   1c84c:	4c24      	ldr	r4, [pc, #144]	; (1c8e0 <gpio_nrfx_config+0xc0>)
   1c84e:	42a3      	cmp	r3, r4
   1c850:	d1f5      	bne.n	1c83e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0D1;
   1c852:	2407      	movs	r4, #7
   1c854:	e006      	b.n	1c864 <gpio_nrfx_config+0x44>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c856:	4c23      	ldr	r4, [pc, #140]	; (1c8e4 <gpio_nrfx_config+0xc4>)
   1c858:	42a3      	cmp	r3, r4
   1c85a:	d036      	beq.n	1c8ca <gpio_nrfx_config+0xaa>
   1c85c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1c860:	d1ed      	bne.n	1c83e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0H1;
   1c862:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1c864:	06d6      	lsls	r6, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1c866:	bf54      	ite	pl
   1c868:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1c86c:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c86e:	f482 7380 	eor.w	r3, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1c872:	0595      	lsls	r5, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1c874:	f3c2 2640 	ubfx	r6, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c878:	f3c3 2800 	ubfx	r8, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1c87c:	d505      	bpl.n	1c88a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c87e:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c880:	6845      	ldr	r5, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c882:	d524      	bpl.n	1c8ce <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1c884:	2301      	movs	r3, #1
   1c886:	408b      	lsls	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1c888:	60ab      	str	r3, [r5, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1c88a:	7a05      	ldrb	r5, [r0, #8]
   1c88c:	f001 011f 	and.w	r1, r1, #31
   1c890:	ea41 1545 	orr.w	r5, r1, r5, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c894:	4628      	mov	r0, r5
   1c896:	f016 f829 	bl	328ec <nrf_gpio_pin_present_check>
   1c89a:	b908      	cbnz	r0, 1c8a0 <gpio_nrfx_config+0x80>
   1c89c:	f7ff ff92 	bl	1c7c4 <nrf_gpio_pin_port_decode.isra.9.part.10>
	return 0;
   1c8a0:	2000      	movs	r0, #0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1c8a2:	ea46 0348 	orr.w	r3, r6, r8, lsl #1
   1c8a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c8aa:	4a0f      	ldr	r2, [pc, #60]	; (1c8e8 <gpio_nrfx_config+0xc8>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1c8ac:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c8b0:	3580      	adds	r5, #128	; 0x80
   1c8b2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
}
   1c8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1c8ba:	2401      	movs	r4, #1
   1c8bc:	e7d2      	b.n	1c864 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0S1;
   1c8be:	2404      	movs	r4, #4
   1c8c0:	e7d0      	b.n	1c864 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0S1;
   1c8c2:	461c      	mov	r4, r3
   1c8c4:	e7ce      	b.n	1c864 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0H1;
   1c8c6:	2402      	movs	r4, #2
   1c8c8:	e7cc      	b.n	1c864 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0H1;
   1c8ca:	2405      	movs	r4, #5
   1c8cc:	e7ca      	b.n	1c864 <gpio_nrfx_config+0x44>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1c8ce:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1c8d0:	bf42      	ittt	mi
   1c8d2:	2301      	movmi	r3, #1
   1c8d4:	408b      	lslmi	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1c8d6:	60eb      	strmi	r3, [r5, #12]
   1c8d8:	e7d7      	b.n	1c88a <gpio_nrfx_config+0x6a>
   1c8da:	bf00      	nop
   1c8dc:	00f00006 	.word	0x00f00006
   1c8e0:	00100006 	.word	0x00100006
   1c8e4:	00400002 	.word	0x00400002
   1c8e8:	40842500 	.word	0x40842500

0001c8ec <nrf_gpio_cfg_sense_set>:
{
   1c8ec:	b538      	push	{r3, r4, r5, lr}
   1c8ee:	4605      	mov	r5, r0
   1c8f0:	460c      	mov	r4, r1
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c8f2:	f015 fffb 	bl	328ec <nrf_gpio_pin_present_check>
   1c8f6:	b908      	cbnz	r0, 1c8fc <nrf_gpio_cfg_sense_set+0x10>
   1c8f8:	f7ff ff64 	bl	1c7c4 <nrf_gpio_pin_port_decode.isra.9.part.10>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c8fc:	4805      	ldr	r0, [pc, #20]	; (1c914 <nrf_gpio_cfg_sense_set+0x28>)
   1c8fe:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1c902:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   1c906:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c90a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   1c90e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1c912:	bd38      	pop	{r3, r4, r5, pc}
   1c914:	40842500 	.word	0x40842500

0001c918 <gpiote_pin_int_cfg>:
{
   1c918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c91c:	6843      	ldr	r3, [r0, #4]
   1c91e:	f001 041f 	and.w	r4, r1, #31
   1c922:	7a1b      	ldrb	r3, [r3, #8]
{
   1c924:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c926:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1c92a:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1c92c:	4e46      	ldr	r6, [pc, #280]	; (1ca48 <gpiote_pin_int_cfg+0x130>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1c92e:	68c7      	ldr	r7, [r0, #12]
   1c930:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1c934:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c936:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1c93a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1c93e:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1c942:	428c      	cmp	r4, r1
   1c944:	d167      	bne.n	1ca16 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   1c946:	fa22 f103 	lsr.w	r1, r2, r3
   1c94a:	07c9      	lsls	r1, r1, #31
   1c94c:	d563      	bpl.n	1ca16 <gpiote_pin_int_cfg+0xfe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1c94e:	009a      	lsls	r2, r3, #2
   1c950:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c954:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1c958:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1c95c:	f021 0101 	bic.w	r1, r1, #1
   1c960:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1c964:	2201      	movs	r2, #1
   1c966:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   1c96a:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c96e:	4620      	mov	r0, r4
   1c970:	2100      	movs	r1, #0
   1c972:	f7ff ffbb 	bl	1c8ec <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1c976:	68f8      	ldr	r0, [r7, #12]
   1c978:	40e8      	lsrs	r0, r5
   1c97a:	f010 0001 	ands.w	r0, r0, #1
   1c97e:	d048      	beq.n	1ca12 <gpiote_pin_int_cfg+0xfa>
   1c980:	6938      	ldr	r0, [r7, #16]
   1c982:	40e8      	lsrs	r0, r5
   1c984:	f010 0001 	ands.w	r0, r0, #1
   1c988:	d043      	beq.n	1ca12 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   1c98a:	69b8      	ldr	r0, [r7, #24]
   1c98c:	40e8      	lsrs	r0, r5
   1c98e:	f010 0801 	ands.w	r8, r0, #1
   1c992:	d04c      	beq.n	1ca2e <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   1c994:	69fb      	ldr	r3, [r7, #28]
   1c996:	40eb      	lsrs	r3, r5
   1c998:	07db      	lsls	r3, r3, #31
   1c99a:	d440      	bmi.n	1ca1e <gpiote_pin_int_cfg+0x106>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1c99c:	697b      	ldr	r3, [r7, #20]
   1c99e:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1c9a2:	f015 0f01 	tst.w	r5, #1
   1c9a6:	bf14      	ite	ne
   1c9a8:	2501      	movne	r5, #1
   1c9aa:	2502      	moveq	r5, #2
   1c9ac:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1c9ae:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1c9b2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1c9b6:	f010 0003 	ands.w	r0, r0, #3
   1c9ba:	d132      	bne.n	1ca22 <gpiote_pin_int_cfg+0x10a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c9bc:	008b      	lsls	r3, r1, #2
   1c9be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c9c2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1c9c6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c9ca:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c9cc:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1c9d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1c9d4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c9d8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c9dc:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1c9e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c9e4:	4314      	orrs	r4, r2
			nrf_gpiote_event_t evt =
   1c9e6:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1c9ea:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   1c9ec:	b292      	uxth	r2, r2
   1c9ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c9f2:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c9f6:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c9fa:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c9fc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ca00:	f042 0201 	orr.w	r2, r2, #1
   1ca04:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1ca08:	2301      	movs	r3, #1
   1ca0a:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   1ca0e:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   1ca12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ca16:	3301      	adds	r3, #1
   1ca18:	2b08      	cmp	r3, #8
   1ca1a:	d18c      	bne.n	1c936 <gpiote_pin_int_cfg+0x1e>
   1ca1c:	e7a7      	b.n	1c96e <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1ca1e:	2503      	movs	r5, #3
   1ca20:	e7c4      	b.n	1c9ac <gpiote_pin_int_cfg+0x94>
   1ca22:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1ca24:	2908      	cmp	r1, #8
   1ca26:	d1c2      	bne.n	1c9ae <gpiote_pin_int_cfg+0x96>
	return -ENODEV;
   1ca28:	f06f 0012 	mvn.w	r0, #18
   1ca2c:	e7f1      	b.n	1ca12 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ca2e:	697b      	ldr	r3, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ca30:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ca32:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1ca36:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ca3a:	bf0c      	ite	eq
   1ca3c:	2103      	moveq	r1, #3
   1ca3e:	2102      	movne	r1, #2
   1ca40:	f7ff ff54 	bl	1c8ec <nrf_gpio_cfg_sense_set>
	int res = 0;
   1ca44:	4640      	mov	r0, r8
   1ca46:	e7e4      	b.n	1ca12 <gpiote_pin_int_cfg+0xfa>
   1ca48:	40031000 	.word	0x40031000

0001ca4c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ca4c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1ca50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ca54:	4605      	mov	r5, r0
   1ca56:	460f      	mov	r7, r1
   1ca58:	4690      	mov	r8, r2
   1ca5a:	461e      	mov	r6, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1ca5c:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ca5e:	d13c      	bne.n	1cada <gpio_nrfx_pin_interrupt_configure+0x8e>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ca60:	6843      	ldr	r3, [r0, #4]
   1ca62:	f001 091f 	and.w	r9, r1, #31
   1ca66:	7a1b      	ldrb	r3, [r3, #8]
   1ca68:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ca6c:	4648      	mov	r0, r9
   1ca6e:	f015 ff3d 	bl	328ec <nrf_gpio_pin_present_check>
   1ca72:	b908      	cbnz	r0, 1ca78 <gpio_nrfx_pin_interrupt_configure+0x2c>
   1ca74:	f7ff fea6 	bl	1c7c4 <nrf_gpio_pin_port_decode.isra.9.part.10>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ca78:	4b1f      	ldr	r3, [pc, #124]	; (1caf8 <gpio_nrfx_pin_interrupt_configure+0xac>)
   1ca7a:	f109 0980 	add.w	r9, r9, #128	; 0x80
   1ca7e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ca82:	07db      	lsls	r3, r3, #31
   1ca84:	d433      	bmi.n	1caee <gpio_nrfx_pin_interrupt_configure+0xa2>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ca86:	2301      	movs	r3, #1
   1ca88:	68e2      	ldr	r2, [r4, #12]
   1ca8a:	40bb      	lsls	r3, r7
   1ca8c:	4313      	orrs	r3, r2
   1ca8e:	60e3      	str	r3, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ca90:	2301      	movs	r3, #1
   1ca92:	6922      	ldr	r2, [r4, #16]
   1ca94:	40bb      	lsls	r3, r7
   1ca96:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   1ca9a:	bf14      	ite	ne
   1ca9c:	431a      	orrne	r2, r3
   1ca9e:	439a      	biceq	r2, r3
   1caa0:	6122      	str	r2, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1caa2:	69a2      	ldr	r2, [r4, #24]
   1caa4:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1caa8:	bf0c      	ite	eq
   1caaa:	431a      	orreq	r2, r3
   1caac:	439a      	bicne	r2, r3
   1caae:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1cab0:	69e2      	ldr	r2, [r4, #28]
   1cab2:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
   1cab6:	bf0c      	ite	eq
   1cab8:	431a      	orreq	r2, r3
   1caba:	439a      	bicne	r2, r3
   1cabc:	61e2      	str	r2, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1cabe:	6962      	ldr	r2, [r4, #20]
   1cac0:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
   1cac4:	bf0c      	ite	eq
   1cac6:	4313      	orreq	r3, r2
   1cac8:	ea22 0303 	bicne.w	r3, r2, r3
   1cacc:	6163      	str	r3, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   1cace:	4639      	mov	r1, r7
   1cad0:	4628      	mov	r0, r5
}
   1cad2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return gpiote_pin_int_cfg(port, pin);
   1cad6:	f7ff bf1f 	b.w	1c918 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cada:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1cade:	d1d2      	bne.n	1ca86 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1cae0:	2301      	movs	r3, #1
   1cae2:	fa03 f201 	lsl.w	r2, r3, r1
   1cae6:	68e3      	ldr	r3, [r4, #12]
   1cae8:	ea23 0302 	bic.w	r3, r3, r2
   1caec:	e7cf      	b.n	1ca8e <gpio_nrfx_pin_interrupt_configure+0x42>
}
   1caee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1caf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1caf6:	bf00      	nop
   1caf8:	40842500 	.word	0x40842500

0001cafc <gpiote_event_handler>:
{
   1cafc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cb00:	4f53      	ldr	r7, [pc, #332]	; (1cc50 <gpiote_event_handler+0x154>)
   1cb02:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   1cb04:	2e00      	cmp	r6, #0
   1cb06:	d05c      	beq.n	1cbc2 <gpiote_event_handler+0xc6>
	u32_t bit = 1U << pin;
   1cb08:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   1cb0c:	f04f 0900 	mov.w	r9, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1cb10:	4a50      	ldr	r2, [pc, #320]	; (1cc54 <gpiote_event_handler+0x158>)
   1cb12:	68d3      	ldr	r3, [r2, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1cb14:	f8d2 a004 	ldr.w	sl, [r2, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1cb18:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
   1cb1c:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1cb1e:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   1cb22:	430a      	orrs	r2, r1
   1cb24:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1cb28:	f8da 2004 	ldr.w	r2, [sl, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1cb2c:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   1cb2e:	6914      	ldr	r4, [r2, #16]
   1cb30:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   1cb32:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1cb36:	bb8d      	cbnz	r5, 1cb9c <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cb38:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1cb3a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1cb3c:	2001      	movs	r0, #1
   1cb3e:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1cb40:	4945      	ldr	r1, [pc, #276]	; (1cc58 <gpiote_event_handler+0x15c>)
   1cb42:	4d46      	ldr	r5, [pc, #280]	; (1cc5c <gpiote_event_handler+0x160>)
   1cb44:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1cb48:	fa00 fc03 	lsl.w	ip, r0, r3
   1cb4c:	ea1c 0f02 	tst.w	ip, r2
   1cb50:	d00d      	beq.n	1cb6e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cb52:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   1cb56:	b152      	cbz	r2, 1cb6e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cb58:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1cb5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cb60:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cb64:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cb68:	fa00 f202 	lsl.w	r2, r0, r2
   1cb6c:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cb6e:	3301      	adds	r3, #1
   1cb70:	2b08      	cmp	r3, #8
   1cb72:	d1e7      	bne.n	1cb44 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   1cb74:	bb3c      	cbnz	r4, 1cbc6 <gpiote_event_handler+0xca>
	if (port_event) {
   1cb76:	b17e      	cbz	r6, 1cb98 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   1cb78:	2601      	movs	r6, #1
	u32_t pin = 0U;
   1cb7a:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1cb7c:	4b35      	ldr	r3, [pc, #212]	; (1cc54 <gpiote_event_handler+0x158>)
   1cb7e:	68dd      	ldr	r5, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1cb80:	f8d3 8004 	ldr.w	r8, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1cb84:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   1cb88:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1cb8a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   1cb8e:	4313      	orrs	r3, r2
   1cb90:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1cb94:	2c00      	cmp	r4, #0
   1cb96:	d145      	bne.n	1cc24 <gpiote_event_handler+0x128>
}
   1cb98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   1cb9c:	ea15 0f08 	tst.w	r5, r8
   1cba0:	d00a      	beq.n	1cbb8 <gpiote_event_handler+0xbc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cba2:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1cba6:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1cbaa:	2100      	movs	r1, #0
   1cbac:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1cbb0:	f7ff fe9c 	bl	1c8ec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1cbb4:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1cbb8:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1cbbc:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1cbc0:	e7b9      	b.n	1cb36 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1cbc2:	4634      	mov	r4, r6
   1cbc4:	e7b9      	b.n	1cb3a <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1cbc6:	4b23      	ldr	r3, [pc, #140]	; (1cc54 <gpiote_event_handler+0x158>)
   1cbc8:	f8d3 900c 	ldr.w	r9, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cbcc:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1cbd0:	2d00      	cmp	r5, #0
   1cbd2:	d0d0      	beq.n	1cb76 <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cbd4:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cbd6:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   1cbd8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1cc68 <gpiote_event_handler+0x16c>
   1cbdc:	f8df b08c 	ldr.w	fp, [pc, #140]	; 1cc6c <gpiote_event_handler+0x170>
		if ((cb->pin_mask & pins) & data->int_en) {
   1cbe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1cbe4:	68aa      	ldr	r2, [r5, #8]
   1cbe6:	4023      	ands	r3, r4
   1cbe8:	4213      	tst	r3, r2
   1cbea:	d016      	beq.n	1cc1a <gpiote_event_handler+0x11e>
			__ASSERT(cb->handler, "No callback handler!");
   1cbec:	686b      	ldr	r3, [r5, #4]
   1cbee:	b973      	cbnz	r3, 1cc0e <gpiote_event_handler+0x112>
   1cbf0:	4659      	mov	r1, fp
   1cbf2:	f240 13a7 	movw	r3, #423	; 0x1a7
   1cbf6:	4652      	mov	r2, sl
   1cbf8:	4819      	ldr	r0, [pc, #100]	; (1cc60 <gpiote_event_handler+0x164>)
   1cbfa:	f011 fadf 	bl	2e1bc <printk>
   1cbfe:	4819      	ldr	r0, [pc, #100]	; (1cc64 <gpiote_event_handler+0x168>)
   1cc00:	f011 fadc 	bl	2e1bc <printk>
   1cc04:	f240 11a7 	movw	r1, #423	; 0x1a7
   1cc08:	4650      	mov	r0, sl
   1cc0a:	f011 fdd8 	bl	2e7be <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cc0e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1cc12:	4629      	mov	r1, r5
   1cc14:	4022      	ands	r2, r4
   1cc16:	4640      	mov	r0, r8
   1cc18:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cc1a:	2f00      	cmp	r7, #0
   1cc1c:	d0ab      	beq.n	1cb76 <gpiote_event_handler+0x7a>
   1cc1e:	463d      	mov	r5, r7
   1cc20:	683f      	ldr	r7, [r7, #0]
   1cc22:	e7dd      	b.n	1cbe0 <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
   1cc24:	4226      	tst	r6, r4
   1cc26:	d010      	beq.n	1cc4a <gpiote_event_handler+0x14e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cc28:	696b      	ldr	r3, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cc2a:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cc2e:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   1cc30:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cc34:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1cc38:	bf0c      	ite	eq
   1cc3a:	2103      	moveq	r1, #3
   1cc3c:	2102      	movne	r1, #2
   1cc3e:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   1cc42:	f7ff fe53 	bl	1c8ec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1cc46:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1cc4a:	3701      	adds	r7, #1
		bit <<= 1;
   1cc4c:	0076      	lsls	r6, r6, #1
   1cc4e:	e7a1      	b.n	1cb94 <gpiote_event_handler+0x98>
   1cc50:	4003117c 	.word	0x4003117c
   1cc54:	2002045c 	.word	0x2002045c
   1cc58:	40031000 	.word	0x40031000
   1cc5c:	40031100 	.word	0x40031100
   1cc60:	00035920 	.word	0x00035920
   1cc64:	00036a86 	.word	0x00036a86
   1cc68:	00036a9d 	.word	0x00036a9d
   1cc6c:	00036ac9 	.word	0x00036ac9

0001cc70 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   1cc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cc72:	460d      	mov	r5, r1
   1cc74:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1cc76:	b948      	cbnz	r0, 1cc8c <entropy_cc310_rng_get_entropy+0x1c>
   1cc78:	4910      	ldr	r1, [pc, #64]	; (1ccbc <entropy_cc310_rng_get_entropy+0x4c>)
   1cc7a:	4811      	ldr	r0, [pc, #68]	; (1ccc0 <entropy_cc310_rng_get_entropy+0x50>)
   1cc7c:	231c      	movs	r3, #28
   1cc7e:	4a11      	ldr	r2, [pc, #68]	; (1ccc4 <entropy_cc310_rng_get_entropy+0x54>)
   1cc80:	f011 fa9c 	bl	2e1bc <printk>
   1cc84:	211c      	movs	r1, #28
   1cc86:	480f      	ldr	r0, [pc, #60]	; (1ccc4 <entropy_cc310_rng_get_entropy+0x54>)
   1cc88:	f011 fd99 	bl	2e7be <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1cc8c:	b94d      	cbnz	r5, 1cca2 <entropy_cc310_rng_get_entropy+0x32>
   1cc8e:	490e      	ldr	r1, [pc, #56]	; (1ccc8 <entropy_cc310_rng_get_entropy+0x58>)
   1cc90:	480b      	ldr	r0, [pc, #44]	; (1ccc0 <entropy_cc310_rng_get_entropy+0x50>)
   1cc92:	231d      	movs	r3, #29
   1cc94:	4a0b      	ldr	r2, [pc, #44]	; (1ccc4 <entropy_cc310_rng_get_entropy+0x54>)
   1cc96:	f011 fa91 	bl	2e1bc <printk>
   1cc9a:	211d      	movs	r1, #29
   1cc9c:	4809      	ldr	r0, [pc, #36]	; (1ccc4 <entropy_cc310_rng_get_entropy+0x54>)
   1cc9e:	f011 fd8e 	bl	2e7be <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   1cca2:	aa01      	add	r2, sp, #4
   1cca4:	4621      	mov	r1, r4
   1cca6:	4628      	mov	r0, r5
   1cca8:	f7eb f9a2 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1ccac:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   1ccae:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   1ccb0:	bf18      	it	ne
   1ccb2:	f06f 0015 	mvnne.w	r0, #21
   1ccb6:	b003      	add	sp, #12
   1ccb8:	bd30      	pop	{r4, r5, pc}
   1ccba:	bf00      	nop
   1ccbc:	00036b62 	.word	0x00036b62
   1ccc0:	00035920 	.word	0x00035920
   1ccc4:	00036b32 	.word	0x00036b32
   1ccc8:	00036b75 	.word	0x00036b75

0001cccc <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   1cccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1ccce:	2200      	movs	r2, #0
   1ccd0:	202a      	movs	r0, #42	; 0x2a
   1ccd2:	4611      	mov	r1, r2
   1ccd4:	f7fb ff86 	bl	18be4 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   1ccd8:	4a06      	ldr	r2, [pc, #24]	; (1ccf4 <_bsdlib_init+0x28>)
   1ccda:	ab01      	add	r3, sp, #4
   1ccdc:	ca07      	ldmia	r2, {r0, r1, r2}
   1ccde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1cce2:	4618      	mov	r0, r3
   1cce4:	f008 f8e4 	bl	24eb0 <bsd_init>
   1cce8:	4b03      	ldr	r3, [pc, #12]	; (1ccf8 <_bsdlib_init+0x2c>)
   1ccea:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1ccec:	2000      	movs	r0, #0
   1ccee:	b005      	add	sp, #20
   1ccf0:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccf4:	00034634 	.word	0x00034634
   1ccf8:	200220d8 	.word	0x200220d8

0001ccfc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1ccfc:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1ccfe:	4b0d      	ldr	r3, [pc, #52]	; (1cd34 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1cd00:	4c0d      	ldr	r4, [pc, #52]	; (1cd38 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   1cd02:	681a      	ldr	r2, [r3, #0]
   1cd04:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1cd06:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1cd08:	4623      	mov	r3, r4
		if (entry->id == id) {
   1cd0a:	6819      	ldr	r1, [r3, #0]
   1cd0c:	4281      	cmp	r1, r0
   1cd0e:	d00e      	beq.n	1cd2e <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   1cd10:	b151      	cbz	r1, 1cd28 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1cd12:	6859      	ldr	r1, [r3, #4]
   1cd14:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1cd16:	42b1      	cmp	r1, r6
   1cd18:	bfc4      	itt	gt
   1cd1a:	461c      	movgt	r4, r3
   1cd1c:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1cd1e:	3d01      	subs	r5, #1
   1cd20:	f103 0308 	add.w	r3, r3, #8
   1cd24:	d1f1      	bne.n	1cd0a <thread_monitor_entry_get+0xe>
   1cd26:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1cd28:	3a01      	subs	r2, #1
	new_entry->id = id;
   1cd2a:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1cd2c:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   1cd2e:	4618      	mov	r0, r3
   1cd30:	bd70      	pop	{r4, r5, r6, pc}
   1cd32:	bf00      	nop
   1cd34:	200220dc 	.word	0x200220dc
   1cd38:	200220e8 	.word	0x200220e8

0001cd3c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1cd3c:	4668      	mov	r0, sp
   1cd3e:	f020 0107 	bic.w	r1, r0, #7
   1cd42:	468d      	mov	sp, r1
   1cd44:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cd46:	4b0d      	ldr	r3, [pc, #52]	; (1cd7c <rpc_proxy_irq_handler+0x40>)
   1cd48:	e8d3 2fef 	ldaex	r2, [r3]
   1cd4c:	3201      	adds	r2, #1
   1cd4e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cd52:	2900      	cmp	r1, #0
   1cd54:	d1f8      	bne.n	1cd48 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1cd56:	f002 fc51 	bl	1f5fc <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1cd5a:	4b09      	ldr	r3, [pc, #36]	; (1cd80 <rpc_proxy_irq_handler+0x44>)
   1cd5c:	681c      	ldr	r4, [r3, #0]
   1cd5e:	b93c      	cbnz	r4, 1cd70 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1cd60:	f7fb ff72 	bl	18c48 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1cd64:	f7fc f954 	bl	19010 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1cd68:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1cd6c:	4685      	mov	sp, r0
   1cd6e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   1cd70:	1d20      	adds	r0, r4, #4
   1cd72:	f00c fd3b 	bl	297ec <z_impl_k_sem_give>
   1cd76:	6824      	ldr	r4, [r4, #0]
	return node->next;
   1cd78:	e7f1      	b.n	1cd5e <rpc_proxy_irq_handler+0x22>
   1cd7a:	bf00      	nop
   1cd7c:	200220dc 	.word	0x200220dc
   1cd80:	200220e0 	.word	0x200220e0

0001cd84 <bsd_os_timedwait>:
{
   1cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd88:	460e      	mov	r6, r1
   1cd8a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1cd8c:	f016 fc4a 	bl	33624 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1cd90:	6833      	ldr	r3, [r6, #0]
   1cd92:	4680      	mov	r8, r0
   1cd94:	2b00      	cmp	r3, #0
   1cd96:	460f      	mov	r7, r1
   1cd98:	d103      	bne.n	1cda2 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1cd9a:	f00c fba3 	bl	294e4 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1cd9e:	203c      	movs	r0, #60	; 0x3c
   1cda0:	e084      	b.n	1ceac <bsd_os_timedwait+0x128>
		*timeout = SYS_FOREVER_MS;
   1cda2:	bfbc      	itt	lt
   1cda4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1cda8:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cdaa:	2201      	movs	r2, #1
   1cdac:	2100      	movs	r1, #0
   1cdae:	a802      	add	r0, sp, #8
   1cdb0:	f016 fbad 	bl	3350e <z_impl_k_sem_init>
   1cdb4:	f10d 0a04 	add.w	sl, sp, #4
	__asm__ volatile(
   1cdb8:	f04f 0320 	mov.w	r3, #32
   1cdbc:	f3ef 8b11 	mrs	fp, BASEPRI
   1cdc0:	f383 8811 	msr	BASEPRI, r3
   1cdc4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1cdc8:	f00c fd0a 	bl	297e0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1cdcc:	f7ff ff96 	bl	1ccfc <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1cdd0:	493f      	ldr	r1, [pc, #252]	; (1ced0 <bsd_os_timedwait+0x14c>)
   1cdd2:	6843      	ldr	r3, [r0, #4]
   1cdd4:	680a      	ldr	r2, [r1, #0]
   1cdd6:	4689      	mov	r9, r1
   1cdd8:	4293      	cmp	r3, r2
   1cdda:	f04f 0300 	mov.w	r3, #0
   1cdde:	d108      	bne.n	1cdf2 <bsd_os_timedwait+0x6e>
	parent->next = child;
   1cde0:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1cde2:	4b3c      	ldr	r3, [pc, #240]	; (1ced4 <bsd_os_timedwait+0x150>)
   1cde4:	685a      	ldr	r2, [r3, #4]
   1cde6:	2a00      	cmp	r2, #0
   1cde8:	d163      	bne.n	1ceb2 <bsd_os_timedwait+0x12e>
	list->head = node;
   1cdea:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1cdee:	2301      	movs	r3, #1
   1cdf0:	e000      	b.n	1cdf4 <bsd_os_timedwait+0x70>
	entry->cnt = rpc_event_cnt;
   1cdf2:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1cdf4:	f38b 8811 	msr	BASEPRI, fp
   1cdf8:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d054      	beq.n	1ceaa <bsd_os_timedwait+0x126>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ce00:	6831      	ldr	r1, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   1ce02:	a802      	add	r0, sp, #8
   1ce04:	f00c fd36 	bl	29874 <z_impl_k_sem_take>
	__asm__ volatile(
   1ce08:	f04f 0320 	mov.w	r3, #32
   1ce0c:	f3ef 8b11 	mrs	fp, BASEPRI
   1ce10:	f383 8811 	msr	BASEPRI, r3
   1ce14:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ce18:	2000      	movs	r0, #0
   1ce1a:	4b2e      	ldr	r3, [pc, #184]	; (1ced4 <bsd_os_timedwait+0x150>)
   1ce1c:	681a      	ldr	r2, [r3, #0]
   1ce1e:	b15a      	cbz	r2, 1ce38 <bsd_os_timedwait+0xb4>
   1ce20:	4552      	cmp	r2, sl
   1ce22:	d151      	bne.n	1cec8 <bsd_os_timedwait+0x144>
Z_GENLIST_REMOVE(slist, snode)
   1ce24:	9901      	ldr	r1, [sp, #4]
   1ce26:	2800      	cmp	r0, #0
   1ce28:	d148      	bne.n	1cebc <bsd_os_timedwait+0x138>
   1ce2a:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1ce2c:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ce2e:	4290      	cmp	r0, r2
   1ce30:	d100      	bne.n	1ce34 <bsd_os_timedwait+0xb0>
	list->tail = node;
   1ce32:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1ce34:	2300      	movs	r3, #0
   1ce36:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1ce38:	f00c fcd2 	bl	297e0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ce3c:	f7ff ff5e 	bl	1ccfc <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1ce40:	f8d9 3000 	ldr.w	r3, [r9]
   1ce44:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1ce46:	f38b 8811 	msr	BASEPRI, fp
   1ce4a:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1ce4e:	f8d6 a000 	ldr.w	sl, [r6]
   1ce52:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   1ce56:	d028      	beq.n	1ceaa <bsd_os_timedwait+0x126>
	return z_impl_k_uptime_ticks();
   1ce58:	f016 fbe4 	bl	33624 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1ce5c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1ce60:	fba8 890c 	umull	r8, r9, r8, ip
   1ce64:	fb0c 9907 	mla	r9, ip, r7, r9
   1ce68:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1ce6c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1ce70:	eb12 080a 	adds.w	r8, r2, sl
   1ce74:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1ce78:	eb43 79ea 	adc.w	r9, r3, sl, asr #31
   1ce7c:	fba0 ab0c 	umull	sl, fp, r0, ip
   1ce80:	fb0c bb01 	mla	fp, ip, r1, fp
   1ce84:	ea4f 33da 	mov.w	r3, sl, lsr #15
   1ce88:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   1ce8c:	ebb8 0403 	subs.w	r4, r8, r3
   1ce90:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1ce94:	eb69 0502 	sbc.w	r5, r9, r2
	*timeout = remaining > 0 ? remaining : 0;
   1ce98:	2c00      	cmp	r4, #0
   1ce9a:	f175 0300 	sbcs.w	r3, r5, #0
   1ce9e:	bfb8      	it	lt
   1cea0:	2400      	movlt	r4, #0
   1cea2:	6034      	str	r4, [r6, #0]
	if (*timeout == 0) {
   1cea4:	2c00      	cmp	r4, #0
   1cea6:	f43f af7a 	beq.w	1cd9e <bsd_os_timedwait+0x1a>
	return 0;
   1ceaa:	2000      	movs	r0, #0
}
   1ceac:	b009      	add	sp, #36	; 0x24
   1ceae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceb2:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1ceb6:	f8c3 a004 	str.w	sl, [r3, #4]
   1ceba:	e798      	b.n	1cdee <bsd_os_timedwait+0x6a>
	parent->next = child;
   1cebc:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cebe:	6859      	ldr	r1, [r3, #4]
   1cec0:	4291      	cmp	r1, r2
	list->tail = node;
   1cec2:	bf08      	it	eq
   1cec4:	6058      	streq	r0, [r3, #4]
   1cec6:	e7b5      	b.n	1ce34 <bsd_os_timedwait+0xb0>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cec8:	4610      	mov	r0, r2
   1ceca:	6812      	ldr	r2, [r2, #0]
   1cecc:	e7a7      	b.n	1ce1e <bsd_os_timedwait+0x9a>
   1cece:	bf00      	nop
   1ced0:	200220dc 	.word	0x200220dc
   1ced4:	200220e0 	.word	0x200220e0

0001ced8 <bsd_os_errno_set>:
	switch (err_code) {
   1ced8:	282d      	cmp	r0, #45	; 0x2d
{
   1ceda:	b510      	push	{r4, lr}
   1cedc:	4604      	mov	r4, r0
	switch (err_code) {
   1cede:	f000 8099 	beq.w	1d014 <bsd_os_errno_set+0x13c>
   1cee2:	dc41      	bgt.n	1cf68 <bsd_os_errno_set+0x90>
   1cee4:	2816      	cmp	r0, #22
   1cee6:	d009      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1cee8:	dc29      	bgt.n	1cf3e <bsd_os_errno_set+0x66>
   1ceea:	2808      	cmp	r0, #8
   1ceec:	d006      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1ceee:	dc09      	bgt.n	1cf04 <bsd_os_errno_set+0x2c>
   1cef0:	2802      	cmp	r0, #2
   1cef2:	d003      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1cef4:	2805      	cmp	r0, #5
   1cef6:	d001      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1cef8:	2801      	cmp	r0, #1
   1cefa:	d10c      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   1cefc:	f013 f88f 	bl	3001e <__errno>
   1cf00:	6004      	str	r4, [r0, #0]
}
   1cf02:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1cf04:	280c      	cmp	r0, #12
   1cf06:	d0f9      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1cf08:	dc01      	bgt.n	1cf0e <bsd_os_errno_set+0x36>
   1cf0a:	2809      	cmp	r0, #9
   1cf0c:	e7f5      	b.n	1cefa <bsd_os_errno_set+0x22>
   1cf0e:	280d      	cmp	r0, #13
   1cf10:	d0f4      	beq.n	1cefc <bsd_os_errno_set+0x24>
   1cf12:	280e      	cmp	r0, #14
   1cf14:	d065      	beq.n	1cfe2 <bsd_os_errno_set+0x10a>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   1cf16:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1cf1a:	4a5c      	ldr	r2, [pc, #368]	; (1d08c <bsd_os_errno_set+0x1b4>)
   1cf1c:	495c      	ldr	r1, [pc, #368]	; (1d090 <bsd_os_errno_set+0x1b8>)
   1cf1e:	485d      	ldr	r0, [pc, #372]	; (1d094 <bsd_os_errno_set+0x1bc>)
   1cf20:	f011 f94c 	bl	2e1bc <printk>
   1cf24:	4621      	mov	r1, r4
   1cf26:	485c      	ldr	r0, [pc, #368]	; (1d098 <bsd_os_errno_set+0x1c0>)
   1cf28:	f011 f948 	bl	2e1bc <printk>
   1cf2c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   1cf30:	4856      	ldr	r0, [pc, #344]	; (1d08c <bsd_os_errno_set+0x1b4>)
   1cf32:	f011 fc44 	bl	2e7be <assert_post_action>
		errno = 0xBAADBAAD;
   1cf36:	f013 f872 	bl	3001e <__errno>
   1cf3a:	4b58      	ldr	r3, [pc, #352]	; (1d09c <bsd_os_errno_set+0x1c4>)
   1cf3c:	e054      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cf3e:	2828      	cmp	r0, #40	; 0x28
   1cf40:	f000 809f 	beq.w	1d082 <bsd_os_errno_set+0x1aa>
   1cf44:	dc05      	bgt.n	1cf52 <bsd_os_errno_set+0x7a>
   1cf46:	2823      	cmp	r0, #35	; 0x23
   1cf48:	d050      	beq.n	1cfec <bsd_os_errno_set+0x114>
   1cf4a:	2825      	cmp	r0, #37	; 0x25
   1cf4c:	d052      	beq.n	1cff4 <bsd_os_errno_set+0x11c>
   1cf4e:	2818      	cmp	r0, #24
   1cf50:	e7d3      	b.n	1cefa <bsd_os_errno_set+0x22>
   1cf52:	282a      	cmp	r0, #42	; 0x2a
   1cf54:	d056      	beq.n	1d004 <bsd_os_errno_set+0x12c>
   1cf56:	db51      	blt.n	1cffc <bsd_os_errno_set+0x124>
   1cf58:	282b      	cmp	r0, #43	; 0x2b
   1cf5a:	d057      	beq.n	1d00c <bsd_os_errno_set+0x134>
   1cf5c:	282c      	cmp	r0, #44	; 0x2c
   1cf5e:	d1da      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   1cf60:	f013 f85d 	bl	3001e <__errno>
   1cf64:	237c      	movs	r3, #124	; 0x7c
   1cf66:	e03f      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cf68:	283c      	cmp	r0, #60	; 0x3c
   1cf6a:	d06b      	beq.n	1d044 <bsd_os_errno_set+0x16c>
   1cf6c:	dc1d      	bgt.n	1cfaa <bsd_os_errno_set+0xd2>
   1cf6e:	2833      	cmp	r0, #51	; 0x33
   1cf70:	d05c      	beq.n	1d02c <bsd_os_errno_set+0x154>
   1cf72:	dc09      	bgt.n	1cf88 <bsd_os_errno_set+0xb0>
   1cf74:	2830      	cmp	r0, #48	; 0x30
   1cf76:	d051      	beq.n	1d01c <bsd_os_errno_set+0x144>
   1cf78:	2832      	cmp	r0, #50	; 0x32
   1cf7a:	d053      	beq.n	1d024 <bsd_os_errno_set+0x14c>
   1cf7c:	282f      	cmp	r0, #47	; 0x2f
   1cf7e:	d1ca      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   1cf80:	f013 f84d 	bl	3001e <__errno>
   1cf84:	236a      	movs	r3, #106	; 0x6a
   1cf86:	e02f      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cf88:	2836      	cmp	r0, #54	; 0x36
   1cf8a:	d053      	beq.n	1d034 <bsd_os_errno_set+0x15c>
   1cf8c:	dc05      	bgt.n	1cf9a <bsd_os_errno_set+0xc2>
   1cf8e:	2834      	cmp	r0, #52	; 0x34
   1cf90:	d1c1      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   1cf92:	f013 f844 	bl	3001e <__errno>
   1cf96:	237e      	movs	r3, #126	; 0x7e
   1cf98:	e026      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cf9a:	2838      	cmp	r0, #56	; 0x38
   1cf9c:	d04e      	beq.n	1d03c <bsd_os_errno_set+0x164>
   1cf9e:	2839      	cmp	r0, #57	; 0x39
   1cfa0:	d1b9      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   1cfa2:	f013 f83c 	bl	3001e <__errno>
   1cfa6:	2380      	movs	r3, #128	; 0x80
   1cfa8:	e01e      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cfaa:	287d      	cmp	r0, #125	; 0x7d
   1cfac:	d056      	beq.n	1d05c <bsd_os_errno_set+0x184>
   1cfae:	dc0c      	bgt.n	1cfca <bsd_os_errno_set+0xf2>
   1cfb0:	2870      	cmp	r0, #112	; 0x70
   1cfb2:	d04b      	beq.n	1d04c <bsd_os_errno_set+0x174>
   1cfb4:	dc01      	bgt.n	1cfba <bsd_os_errno_set+0xe2>
   1cfb6:	2869      	cmp	r0, #105	; 0x69
   1cfb8:	e79f      	b.n	1cefa <bsd_os_errno_set+0x22>
   1cfba:	2872      	cmp	r0, #114	; 0x72
   1cfbc:	d04a      	beq.n	1d054 <bsd_os_errno_set+0x17c>
   1cfbe:	2873      	cmp	r0, #115	; 0x73
   1cfc0:	d1a9      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   1cfc2:	f013 f82c 	bl	3001e <__errno>
   1cfc6:	2377      	movs	r3, #119	; 0x77
   1cfc8:	e00e      	b.n	1cfe8 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1cfca:	287f      	cmp	r0, #127	; 0x7f
   1cfcc:	d04f      	beq.n	1d06e <bsd_os_errno_set+0x196>
   1cfce:	db49      	blt.n	1d064 <bsd_os_errno_set+0x18c>
   1cfd0:	2880      	cmp	r0, #128	; 0x80
   1cfd2:	d051      	beq.n	1d078 <bsd_os_errno_set+0x1a0>
   1cfd4:	2881      	cmp	r0, #129	; 0x81
   1cfd6:	d19e      	bne.n	1cf16 <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   1cfd8:	f013 f821 	bl	3001e <__errno>
   1cfdc:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1cfe0:	e002      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EFAULT;
   1cfe2:	f013 f81c 	bl	3001e <__errno>
   1cfe6:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   1cfe8:	6003      	str	r3, [r0, #0]
}
   1cfea:	e78a      	b.n	1cf02 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   1cfec:	f013 f817 	bl	3001e <__errno>
   1cff0:	230b      	movs	r3, #11
   1cff2:	e7f9      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EDOM;
   1cff4:	f013 f813 	bl	3001e <__errno>
   1cff8:	2321      	movs	r3, #33	; 0x21
   1cffa:	e7f5      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EPROTOTYPE;
   1cffc:	f013 f80f 	bl	3001e <__errno>
   1d000:	236b      	movs	r3, #107	; 0x6b
   1d002:	e7f1      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ENOPROTOOPT;
   1d004:	f013 f80b 	bl	3001e <__errno>
   1d008:	236d      	movs	r3, #109	; 0x6d
   1d00a:	e7ed      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EPROTONOSUPPORT;
   1d00c:	f013 f807 	bl	3001e <__errno>
   1d010:	237b      	movs	r3, #123	; 0x7b
   1d012:	e7e9      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EOPNOTSUPP;
   1d014:	f013 f803 	bl	3001e <__errno>
   1d018:	235f      	movs	r3, #95	; 0x5f
   1d01a:	e7e5      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EADDRINUSE;
   1d01c:	f012 ffff 	bl	3001e <__errno>
   1d020:	2370      	movs	r3, #112	; 0x70
   1d022:	e7e1      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ENETDOWN;
   1d024:	f012 fffb 	bl	3001e <__errno>
   1d028:	2373      	movs	r3, #115	; 0x73
   1d02a:	e7dd      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ENETUNREACH;
   1d02c:	f012 fff7 	bl	3001e <__errno>
   1d030:	2372      	movs	r3, #114	; 0x72
   1d032:	e7d9      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ECONNRESET;
   1d034:	f012 fff3 	bl	3001e <__errno>
   1d038:	2368      	movs	r3, #104	; 0x68
   1d03a:	e7d5      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EISCONN;
   1d03c:	f012 ffef 	bl	3001e <__errno>
   1d040:	237f      	movs	r3, #127	; 0x7f
   1d042:	e7d1      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ETIMEDOUT;
   1d044:	f012 ffeb 	bl	3001e <__errno>
   1d048:	2374      	movs	r3, #116	; 0x74
   1d04a:	e7cd      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EHOSTDOWN;
   1d04c:	f012 ffe7 	bl	3001e <__errno>
   1d050:	2375      	movs	r3, #117	; 0x75
   1d052:	e7c9      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EALREADY;
   1d054:	f012 ffe3 	bl	3001e <__errno>
   1d058:	2378      	movs	r3, #120	; 0x78
   1d05a:	e7c5      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ECANCELED;
   1d05c:	f012 ffdf 	bl	3001e <__errno>
   1d060:	238c      	movs	r3, #140	; 0x8c
   1d062:	e7c1      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = ENOKEY;
   1d064:	f012 ffdb 	bl	3001e <__errno>
   1d068:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1d06c:	e7bc      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EKEYEXPIRED;
   1d06e:	f012 ffd6 	bl	3001e <__errno>
   1d072:	f240 73d2 	movw	r3, #2002	; 0x7d2
   1d076:	e7b7      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EKEYREVOKED;
   1d078:	f012 ffd1 	bl	3001e <__errno>
   1d07c:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1d080:	e7b2      	b.n	1cfe8 <bsd_os_errno_set+0x110>
		errno = EMSGSIZE;
   1d082:	f012 ffcc 	bl	3001e <__errno>
   1d086:	237a      	movs	r3, #122	; 0x7a
   1d088:	e7ae      	b.n	1cfe8 <bsd_os_errno_set+0x110>
   1d08a:	bf00      	nop
   1d08c:	00036b8b 	.word	0x00036b8b
   1d090:	00037308 	.word	0x00037308
   1d094:	00035920 	.word	0x00035920
   1d098:	00036baf 	.word	0x00036baf
   1d09c:	baadbaad 	.word	0xbaadbaad

0001d0a0 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d0a4:	4b01      	ldr	r3, [pc, #4]	; (1d0ac <bsd_os_application_irq_set+0xc>)
   1d0a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d0aa:	4770      	bx	lr
   1d0ac:	e000e100 	.word	0xe000e100

0001d0b0 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d0b4:	4b01      	ldr	r3, [pc, #4]	; (1d0bc <bsd_os_application_irq_clear+0xc>)
   1d0b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d0ba:	4770      	bx	lr
   1d0bc:	e000e100 	.word	0xe000e100

0001d0c0 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d0c4:	4b01      	ldr	r3, [pc, #4]	; (1d0cc <bsd_os_trace_irq_set+0xc>)
   1d0c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d0ca:	4770      	bx	lr
   1d0cc:	e000e100 	.word	0xe000e100

0001d0d0 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d0d4:	4b01      	ldr	r3, [pc, #4]	; (1d0dc <bsd_os_trace_irq_clear+0xc>)
   1d0d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d0da:	4770      	bx	lr
   1d0dc:	e000e100 	.word	0xe000e100

0001d0e0 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1d0e0:	b508      	push	{r3, lr}
	list->head = NULL;
   1d0e2:	2300      	movs	r3, #0
   1d0e4:	4a07      	ldr	r2, [pc, #28]	; (1d104 <bsd_os_init+0x24>)
	list->tail = NULL;
   1d0e6:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d0ea:	4a07      	ldr	r2, [pc, #28]	; (1d108 <bsd_os_init+0x28>)
   1d0ec:	e8d2 1fef 	ldaex	r1, [r2]
   1d0f0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1d0f4:	2800      	cmp	r0, #0
   1d0f6:	d1f9      	bne.n	1d0ec <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1d0f8:	f015 fc68 	bl	329cc <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   1d0fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1d100:	f015 bc59 	b.w	329b6 <trace_task_create>
   1d104:	200220e0 	.word	0x200220e0
   1d108:	200220dc 	.word	0x200220dc

0001d10c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1d10c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1d110:	d03c      	beq.n	1d18c <z_to_nrf_optname+0x80>
   1d112:	dc04      	bgt.n	1d11e <z_to_nrf_optname+0x12>
   1d114:	2801      	cmp	r0, #1
   1d116:	d042      	beq.n	1d19e <z_to_nrf_optname+0x92>
			break;
		}
		break;

	default:
		retval = -1;
   1d118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   1d11c:	4770      	bx	lr
	switch (z_in_level) {
   1d11e:	f240 2302 	movw	r3, #514	; 0x202
   1d122:	4298      	cmp	r0, r3
   1d124:	d060      	beq.n	1d1e8 <z_to_nrf_optname+0xdc>
   1d126:	f240 2303 	movw	r3, #515	; 0x203
   1d12a:	4298      	cmp	r0, r3
   1d12c:	d1f4      	bne.n	1d118 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1d12e:	3901      	subs	r1, #1
   1d130:	2913      	cmp	r1, #19
   1d132:	d8f1      	bhi.n	1d118 <z_to_nrf_optname+0xc>
   1d134:	a301      	add	r3, pc, #4	; (adr r3, 1d13c <z_to_nrf_optname+0x30>)
   1d136:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1d13a:	bf00      	nop
   1d13c:	0001d1f5 	.word	0x0001d1f5
   1d140:	0001d1cd 	.word	0x0001d1cd
   1d144:	0001d1d1 	.word	0x0001d1d1
   1d148:	0001d1d5 	.word	0x0001d1d5
   1d14c:	0001d1d9 	.word	0x0001d1d9
   1d150:	0001d1dd 	.word	0x0001d1dd
   1d154:	0001d1e1 	.word	0x0001d1e1
   1d158:	0001d119 	.word	0x0001d119
   1d15c:	0001d119 	.word	0x0001d119
   1d160:	0001d119 	.word	0x0001d119
   1d164:	0001d119 	.word	0x0001d119
   1d168:	0001d119 	.word	0x0001d119
   1d16c:	0001d119 	.word	0x0001d119
   1d170:	0001d119 	.word	0x0001d119
   1d174:	0001d119 	.word	0x0001d119
   1d178:	0001d119 	.word	0x0001d119
   1d17c:	0001d119 	.word	0x0001d119
   1d180:	0001d119 	.word	0x0001d119
   1d184:	0001d119 	.word	0x0001d119
   1d188:	0001d1e5 	.word	0x0001d1e5
		switch (z_in_optname) {
   1d18c:	3901      	subs	r1, #1
   1d18e:	2906      	cmp	r1, #6
   1d190:	d8c2      	bhi.n	1d118 <z_to_nrf_optname+0xc>
   1d192:	e8df f001 	tbb	[pc, r1]
   1d196:	211b      	.short	0x211b
   1d198:	2f1f2523 	.word	0x2f1f2523
   1d19c:	1d          	.byte	0x1d
   1d19d:	00          	.byte	0x00
		switch (z_in_optname) {
   1d19e:	2915      	cmp	r1, #21
   1d1a0:	d00d      	beq.n	1d1be <z_to_nrf_optname+0xb2>
   1d1a2:	dc07      	bgt.n	1d1b4 <z_to_nrf_optname+0xa8>
   1d1a4:	2904      	cmp	r1, #4
   1d1a6:	d015      	beq.n	1d1d4 <z_to_nrf_optname+0xc8>
   1d1a8:	2914      	cmp	r1, #20
   1d1aa:	d008      	beq.n	1d1be <z_to_nrf_optname+0xb2>
   1d1ac:	2902      	cmp	r1, #2
   1d1ae:	d1b3      	bne.n	1d118 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   1d1b0:	2328      	movs	r3, #40	; 0x28
   1d1b2:	e020      	b.n	1d1f6 <z_to_nrf_optname+0xea>
   1d1b4:	291e      	cmp	r1, #30
   1d1b6:	d002      	beq.n	1d1be <z_to_nrf_optname+0xb2>
   1d1b8:	dc04      	bgt.n	1d1c4 <z_to_nrf_optname+0xb8>
   1d1ba:	2919      	cmp	r1, #25
   1d1bc:	d1ac      	bne.n	1d118 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   1d1be:	6011      	str	r1, [r2, #0]
	int retval = 0;
   1d1c0:	2000      	movs	r0, #0
			break;
   1d1c2:	4770      	bx	lr
   1d1c4:	291f      	cmp	r1, #31
   1d1c6:	d0fa      	beq.n	1d1be <z_to_nrf_optname+0xb2>
   1d1c8:	2920      	cmp	r1, #32
   1d1ca:	e7f7      	b.n	1d1bc <z_to_nrf_optname+0xb0>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   1d1cc:	2302      	movs	r3, #2
   1d1ce:	e012      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1d1d0:	2303      	movs	r3, #3
   1d1d2:	e010      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1d1d4:	2304      	movs	r3, #4
   1d1d6:	e00e      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1d1d8:	2305      	movs	r3, #5
   1d1da:	e00c      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1d1dc:	2306      	movs	r3, #6
   1d1de:	e00a      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1d1e0:	2307      	movs	r3, #7
   1d1e2:	e008      	b.n	1d1f6 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1d1e4:	2314      	movs	r3, #20
   1d1e6:	e006      	b.n	1d1f6 <z_to_nrf_optname+0xea>
		switch (z_in_optname) {
   1d1e8:	2902      	cmp	r1, #2
   1d1ea:	d0ef      	beq.n	1d1cc <z_to_nrf_optname+0xc0>
   1d1ec:	2903      	cmp	r1, #3
   1d1ee:	d0ef      	beq.n	1d1d0 <z_to_nrf_optname+0xc4>
   1d1f0:	2901      	cmp	r1, #1
   1d1f2:	d191      	bne.n	1d118 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1d1f4:	2301      	movs	r3, #1
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1d1f6:	6013      	str	r3, [r2, #0]
   1d1f8:	e7e2      	b.n	1d1c0 <z_to_nrf_optname+0xb4>
   1d1fa:	bf00      	nop

0001d1fc <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   1d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   1d200:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
{
   1d204:	b093      	sub	sp, #76	; 0x4c
	int sd = OBJ_TO_SD(obj);
   1d206:	3801      	subs	r0, #1
	switch (request) {
   1d208:	2b05      	cmp	r3, #5
   1d20a:	d87a      	bhi.n	1d302 <nrf91_socket_offload_ioctl+0x106>
   1d20c:	e8df f003 	tbb	[pc, r3]
   1d210:	95797909 	.word	0x95797909
   1d214:	0d03      	.short	0x0d03

	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;

	case ZFD_IOCTL_POLL_UPDATE:
		return -EOPNOTSUPP;
   1d216:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   1d21a:	4620      	mov	r0, r4
   1d21c:	b013      	add	sp, #76	; 0x4c
   1d21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   1d222:	f008 f86d 	bl	25300 <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d226:	4604      	mov	r4, r0
		break;
   1d228:	e7f7      	b.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   1d22a:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   1d22e:	e9d2 a900 	ldrd	sl, r9, [r2]
		timeout = va_arg(args, int);
   1d232:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1d234:	2100      	movs	r1, #0
   1d236:	2240      	movs	r2, #64	; 0x40
   1d238:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   1d23a:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1d23c:	4655      	mov	r5, sl
   1d23e:	f016 faf9 	bl	33834 <memset>
   1d242:	4657      	mov	r7, sl
	int retval = 0;
   1d244:	4644      	mov	r4, r8
		tmp[i].events = 0;
   1d246:	46c3      	mov	fp, r8
   1d248:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   1d24a:	45c1      	cmp	r9, r8
   1d24c:	dc33      	bgt.n	1d2b6 <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   1d24e:	2c00      	cmp	r4, #0
   1d250:	dce3      	bgt.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1d252:	9a01      	ldr	r2, [sp, #4]
   1d254:	4649      	mov	r1, r9
   1d256:	a802      	add	r0, sp, #8
   1d258:	f008 f91e 	bl	25498 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1d25c:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1d25e:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1d260:	4599      	cmp	r9, r3
   1d262:	ddda      	ble.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   1d264:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   1d268:	2a00      	cmp	r2, #0
   1d26a:	db21      	blt.n	1d2b0 <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   1d26c:	aa02      	add	r2, sp, #8
   1d26e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d272:	88d2      	ldrh	r2, [r2, #6]
   1d274:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   1d276:	bf42      	ittt	mi
   1d278:	88e9      	ldrhmi	r1, [r5, #6]
   1d27a:	f041 0101 	orrmi.w	r1, r1, #1
   1d27e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1d280:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1d282:	bf42      	ittt	mi
   1d284:	88e9      	ldrhmi	r1, [r5, #6]
   1d286:	f041 0104 	orrmi.w	r1, r1, #4
   1d28a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1d28c:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1d28e:	bf42      	ittt	mi
   1d290:	88e9      	ldrhmi	r1, [r5, #6]
   1d292:	f041 0108 	orrmi.w	r1, r1, #8
   1d296:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1d298:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   1d29a:	bf42      	ittt	mi
   1d29c:	88e9      	ldrhmi	r1, [r5, #6]
   1d29e:	f041 0120 	orrmi.w	r1, r1, #32
   1d2a2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1d2a4:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   1d2a6:	bf42      	ittt	mi
   1d2a8:	88ea      	ldrhmi	r2, [r5, #6]
   1d2aa:	f042 0210 	orrmi.w	r2, r2, #16
   1d2ae:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1d2b0:	3301      	adds	r3, #1
   1d2b2:	3508      	adds	r5, #8
   1d2b4:	e7d4      	b.n	1d260 <nrf91_socket_offload_ioctl+0x64>
		if (fds[i].fd < 0) {
   1d2b6:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1d2b8:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   1d2bc:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   1d2be:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   1d2c2:	da05      	bge.n	1d2d0 <nrf91_socket_offload_ioctl+0xd4>
			tmp[i].fd = fds[i].fd;
   1d2c4:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1d2c6:	f108 0801 	add.w	r8, r8, #1
   1d2ca:	3608      	adds	r6, #8
   1d2cc:	3708      	adds	r7, #8
   1d2ce:	e7bc      	b.n	1d24a <nrf91_socket_offload_ioctl+0x4e>
			obj = z_get_fd_obj(fds[i].fd,
   1d2d0:	2286      	movs	r2, #134	; 0x86
   1d2d2:	491b      	ldr	r1, [pc, #108]	; (1d340 <nrf91_socket_offload_ioctl+0x144>)
   1d2d4:	f7f9 fda6 	bl	16e24 <z_get_fd_obj>
			if (obj != NULL) {
   1d2d8:	b178      	cbz	r0, 1d2fa <nrf91_socket_offload_ioctl+0xfe>
				tmp[i].fd = OBJ_TO_SD(obj);
   1d2da:	3801      	subs	r0, #1
   1d2dc:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   1d2de:	88b9      	ldrh	r1, [r7, #4]
   1d2e0:	07ca      	lsls	r2, r1, #31
			tmp[i].events |= NRF_POLLIN;
   1d2e2:	bf42      	ittt	mi
   1d2e4:	88b2      	ldrhmi	r2, [r6, #4]
   1d2e6:	f042 0201 	orrmi.w	r2, r2, #1
   1d2ea:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1d2ec:	074b      	lsls	r3, r1, #29
			tmp[i].events |= NRF_POLLOUT;
   1d2ee:	bf42      	ittt	mi
   1d2f0:	88b2      	ldrhmi	r2, [r6, #4]
   1d2f2:	f042 0202 	orrmi.w	r2, r2, #2
   1d2f6:	80b2      	strhmi	r2, [r6, #4]
   1d2f8:	e7e5      	b.n	1d2c6 <nrf91_socket_offload_ioctl+0xca>
				fds[i].revents = POLLNVAL;
   1d2fa:	2220      	movs	r2, #32
				retval++;
   1d2fc:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1d2fe:	80fa      	strh	r2, [r7, #6]
				retval++;
   1d300:	e7ed      	b.n	1d2de <nrf91_socket_offload_ioctl+0xe2>
	switch (cmd) {
   1d302:	2903      	cmp	r1, #3
   1d304:	d00a      	beq.n	1d31c <nrf91_socket_offload_ioctl+0x120>
   1d306:	2904      	cmp	r1, #4
   1d308:	d110      	bne.n	1d32c <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   1d30a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1d30c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1d310:	d10c      	bne.n	1d32c <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d312:	1392      	asrs	r2, r2, #14
   1d314:	2101      	movs	r1, #1
   1d316:	f008 f8c1 	bl	2549c <nrf_fcntl>
   1d31a:	e784      	b.n	1d226 <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1d31c:	2200      	movs	r2, #0
   1d31e:	2102      	movs	r1, #2
   1d320:	f008 f8bc 	bl	2549c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1d324:	0380      	lsls	r0, r0, #14
   1d326:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1d32a:	e776      	b.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   1d32c:	f012 fe77 	bl	3001e <__errno>
   1d330:	2316      	movs	r3, #22
	return retval;
   1d332:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   1d336:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1d338:	e76f      	b.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   1d33a:	f06f 0411 	mvn.w	r4, #17
   1d33e:	e76c      	b.n	1d21a <nrf91_socket_offload_ioctl+0x1e>
   1d340:	00034b44 	.word	0x00034b44

0001d344 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1d344:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1d346:	4b03      	ldr	r3, [pc, #12]	; (1d354 <nrf91_socket_iface_init+0x10>)
   1d348:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1d34a:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d34c:	4802      	ldr	r0, [pc, #8]	; (1d358 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1d34e:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d350:	f7fa bc1e 	b.w	17b90 <socket_offload_dns_register>
   1d354:	20022138 	.word	0x20022138
   1d358:	00034b3c 	.word	0x00034b3c

0001d35c <nrf91_socket_offload_accept>:
{
   1d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d360:	b08a      	sub	sp, #40	; 0x28
   1d362:	4605      	mov	r5, r0
   1d364:	460c      	mov	r4, r1
   1d366:	4616      	mov	r6, r2
	int fd = z_reserve_fd();
   1d368:	f7f9 fd8a 	bl	16e80 <z_reserve_fd>
	if (fd < 0) {
   1d36c:	1e07      	subs	r7, r0, #0
	int sd = OBJ_TO_SD(obj);
   1d36e:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
	if (fd < 0) {
   1d372:	da05      	bge.n	1d380 <nrf91_socket_offload_accept+0x24>
	return -1;
   1d374:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
}
   1d378:	4638      	mov	r0, r7
   1d37a:	b00a      	add	sp, #40	; 0x28
   1d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1d380:	b324      	cbz	r4, 1d3cc <nrf91_socket_offload_accept+0x70>
   1d382:	b336      	cbz	r6, 1d3d2 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d384:	6832      	ldr	r2, [r6, #0]
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1d386:	ad01      	add	r5, sp, #4
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d388:	2a08      	cmp	r2, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1d38a:	bf0c      	ite	eq
   1d38c:	2210      	moveq	r2, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1d38e:	2224      	movne	r2, #36	; 0x24
   1d390:	9200      	str	r2, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1d392:	466a      	mov	r2, sp
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1d394:	4629      	mov	r1, r5
   1d396:	4618      	mov	r0, r3
   1d398:	f008 f81a 	bl	253d0 <nrf_accept>
	if (new_sd < 0) {
   1d39c:	f1b0 0800 	subs.w	r8, r0, #0
   1d3a0:	dbe8      	blt.n	1d374 <nrf91_socket_offload_accept+0x18>
	if ((addr != NULL) && (addrlen != NULL)) {
   1d3a2:	b164      	cbz	r4, 1d3be <nrf91_socket_offload_accept+0x62>
   1d3a4:	b15e      	cbz	r6, 1d3be <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1d3a6:	686b      	ldr	r3, [r5, #4]
   1d3a8:	2b02      	cmp	r3, #2
   1d3aa:	d115      	bne.n	1d3d8 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   1d3ac:	2308      	movs	r3, #8
   1d3ae:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1d3b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1d3b4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1d3b6:	2301      	movs	r3, #1
   1d3b8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1d3ba:	9b04      	ldr	r3, [sp, #16]
   1d3bc:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   1d3be:	4a0d      	ldr	r2, [pc, #52]	; (1d3f4 <nrf91_socket_offload_accept+0x98>)
   1d3c0:	f108 0101 	add.w	r1, r8, #1
   1d3c4:	4638      	mov	r0, r7
   1d3c6:	f7f9 fd7d 	bl	16ec4 <z_finalize_fd>
	return fd;
   1d3ca:	e7d5      	b.n	1d378 <nrf91_socket_offload_accept+0x1c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d3cc:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d3ce:	4625      	mov	r5, r4
   1d3d0:	e7e0      	b.n	1d394 <nrf91_socket_offload_accept+0x38>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d3d2:	4632      	mov	r2, r6
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d3d4:	4635      	mov	r5, r6
   1d3d6:	e7dd      	b.n	1d394 <nrf91_socket_offload_accept+0x38>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1d3d8:	2b0a      	cmp	r3, #10
   1d3da:	d106      	bne.n	1d3ea <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   1d3dc:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1d3de:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   1d3e0:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   1d3e2:	4620      	mov	r0, r4
   1d3e4:	f015 fbe4 	bl	32bb0 <nrf_to_z_ipv6>
   1d3e8:	e7e9      	b.n	1d3be <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   1d3ea:	4638      	mov	r0, r7
   1d3ec:	f7f9 fd74 	bl	16ed8 <z_free_fd>
   1d3f0:	e7c0      	b.n	1d374 <nrf91_socket_offload_accept+0x18>
   1d3f2:	bf00      	nop
   1d3f4:	00034b44 	.word	0x00034b44

0001d3f8 <nrf91_socket_offload_sendmsg>:
{
   1d3f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d3fc:	4607      	mov	r7, r0
   1d3fe:	4690      	mov	r8, r2
	if (msg == NULL) {
   1d400:	460c      	mov	r4, r1
   1d402:	b309      	cbz	r1, 1d448 <nrf91_socket_offload_sendmsg+0x50>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d404:	2300      	movs	r3, #0
	ssize_t len = 0;
   1d406:	461a      	mov	r2, r3
   1d408:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d40a:	4298      	cmp	r0, r3
   1d40c:	d126      	bne.n	1d45c <nrf91_socket_offload_sendmsg+0x64>
	if (len <= sizeof(buf)) {
   1d40e:	2a80      	cmp	r2, #128	; 0x80
   1d410:	d855      	bhi.n	1d4be <nrf91_socket_offload_sendmsg+0xc6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d412:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1d414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d418:	482a      	ldr	r0, [pc, #168]	; (1d4c4 <nrf91_socket_offload_sendmsg+0xcc>)
   1d41a:	f00a fcf7 	bl	27e0c <z_impl_k_mutex_lock>
		len = 0;
   1d41e:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1d420:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1d4c8 <nrf91_socket_offload_sendmsg+0xd0>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d424:	68e3      	ldr	r3, [r4, #12]
   1d426:	42ab      	cmp	r3, r5
   1d428:	d81f      	bhi.n	1d46a <nrf91_socket_offload_sendmsg+0x72>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   1d42a:	6863      	ldr	r3, [r4, #4]
   1d42c:	4632      	mov	r2, r6
   1d42e:	9301      	str	r3, [sp, #4]
   1d430:	6823      	ldr	r3, [r4, #0]
   1d432:	4925      	ldr	r1, [pc, #148]	; (1d4c8 <nrf91_socket_offload_sendmsg+0xd0>)
   1d434:	9300      	str	r3, [sp, #0]
   1d436:	4638      	mov	r0, r7
   1d438:	4643      	mov	r3, r8
   1d43a:	f015 fd0c 	bl	32e56 <nrf91_socket_offload_sendto>
   1d43e:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1d440:	4820      	ldr	r0, [pc, #128]	; (1d4c4 <nrf91_socket_offload_sendmsg+0xcc>)
   1d442:	f00a fdc1 	bl	27fc8 <z_impl_k_mutex_unlock>
		return ret;
   1d446:	e005      	b.n	1d454 <nrf91_socket_offload_sendmsg+0x5c>
		errno = EINVAL;
   1d448:	f012 fde9 	bl	3001e <__errno>
   1d44c:	2316      	movs	r3, #22
		return -1;
   1d44e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = EINVAL;
   1d452:	6003      	str	r3, [r0, #0]
}
   1d454:	4630      	mov	r0, r6
   1d456:	b002      	add	sp, #8
   1d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1d45c:	68a1      	ldr	r1, [r4, #8]
   1d45e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d462:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d464:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1d466:	440a      	add	r2, r1
   1d468:	e7cf      	b.n	1d40a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1d46a:	68a3      	ldr	r3, [r4, #8]
   1d46c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1d470:	eb03 0209 	add.w	r2, r3, r9
   1d474:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1d478:	eb0a 0006 	add.w	r0, sl, r6
   1d47c:	6852      	ldr	r2, [r2, #4]
   1d47e:	f016 f99f 	bl	337c0 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1d482:	68a3      	ldr	r3, [r4, #8]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d484:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1d486:	444b      	add	r3, r9
   1d488:	685b      	ldr	r3, [r3, #4]
   1d48a:	441e      	add	r6, r3
   1d48c:	e7ca      	b.n	1d424 <nrf91_socket_offload_sendmsg+0x2c>
		if (msg->msg_iov[i].iov_len == 0) {
   1d48e:	68a1      	ldr	r1, [r4, #8]
   1d490:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   1d494:	685a      	ldr	r2, [r3, #4]
   1d496:	b162      	cbz	r2, 1d4b2 <nrf91_socket_offload_sendmsg+0xba>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   1d498:	6863      	ldr	r3, [r4, #4]
   1d49a:	4638      	mov	r0, r7
   1d49c:	9301      	str	r3, [sp, #4]
   1d49e:	6823      	ldr	r3, [r4, #0]
   1d4a0:	9300      	str	r3, [sp, #0]
   1d4a2:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1d4a6:	4643      	mov	r3, r8
   1d4a8:	f015 fcd5 	bl	32e56 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   1d4ac:	1e06      	subs	r6, r0, #0
   1d4ae:	dbd1      	blt.n	1d454 <nrf91_socket_offload_sendmsg+0x5c>
		len += ret;
   1d4b0:	44b1      	add	r9, r6
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d4b2:	3501      	adds	r5, #1
   1d4b4:	68e3      	ldr	r3, [r4, #12]
   1d4b6:	429d      	cmp	r5, r3
   1d4b8:	d3e9      	bcc.n	1d48e <nrf91_socket_offload_sendmsg+0x96>
   1d4ba:	464e      	mov	r6, r9
   1d4bc:	e7ca      	b.n	1d454 <nrf91_socket_offload_sendmsg+0x5c>
   1d4be:	2500      	movs	r5, #0
	len = 0;
   1d4c0:	46a9      	mov	r9, r5
   1d4c2:	e7f7      	b.n	1d4b4 <nrf91_socket_offload_sendmsg+0xbc>
   1d4c4:	2002061c 	.word	0x2002061c
   1d4c8:	20027dfb 	.word	0x20027dfb

0001d4cc <nrf91_socket_create>:
{
   1d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4ce:	4606      	mov	r6, r0
   1d4d0:	460d      	mov	r5, r1
   1d4d2:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   1d4d4:	f7f9 fcd4 	bl	16e80 <z_reserve_fd>
	if (fd < 0) {
   1d4d8:	1e04      	subs	r4, r0, #0
   1d4da:	db0d      	blt.n	1d4f8 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   1d4dc:	b2b0      	uxth	r0, r6
   1d4de:	f015 fa90 	bl	32a02 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1d4e2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   1d4e6:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   1d4e8:	d109      	bne.n	1d4fe <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   1d4ea:	f012 fd98 	bl	3001e <__errno>
   1d4ee:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1d4f0:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7f9 fcf0 	bl	16ed8 <z_free_fd>
		return -1;
   1d4f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d4fc:	e01b      	b.n	1d536 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1d4fe:	2d03      	cmp	r5, #3
   1d500:	d003      	beq.n	1d50a <nrf91_socket_create+0x3e>
		return NRF_SOCK_MGMT;
   1d502:	2d04      	cmp	r5, #4
   1d504:	bf08      	it	eq
   1d506:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1d50a:	4638      	mov	r0, r7
   1d50c:	f015 fa91 	bl	32a32 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1d510:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   1d514:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1d516:	d103      	bne.n	1d520 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   1d518:	f012 fd81 	bl	3001e <__errno>
   1d51c:	237b      	movs	r3, #123	; 0x7b
   1d51e:	e7e7      	b.n	1d4f0 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   1d520:	4629      	mov	r1, r5
   1d522:	4630      	mov	r0, r6
   1d524:	f007 feda 	bl	252dc <nrf_socket>
	if (sd < 0) {
   1d528:	1e01      	subs	r1, r0, #0
   1d52a:	dbe2      	blt.n	1d4f2 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   1d52c:	4a03      	ldr	r2, [pc, #12]	; (1d53c <nrf91_socket_create+0x70>)
   1d52e:	3101      	adds	r1, #1
   1d530:	4620      	mov	r0, r4
   1d532:	f7f9 fcc7 	bl	16ec4 <z_finalize_fd>
}
   1d536:	4620      	mov	r0, r4
   1d538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d53a:	bf00      	nop
   1d53c:	00034b44 	.word	0x00034b44

0001d540 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   1d540:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   1d542:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   1d544:	b118      	cbz	r0, 1d54e <callback_worker+0xe>
		data->callback(data->data);
   1d546:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1d54a:	300c      	adds	r0, #12
   1d54c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1d54e:	a901      	add	r1, sp, #4
   1d550:	4802      	ldr	r0, [pc, #8]	; (1d55c <callback_worker+0x1c>)
   1d552:	f00a fa63 	bl	27a1c <k_mem_slab_free>
}
   1d556:	b003      	add	sp, #12
   1d558:	f85d fb04 	ldr.w	pc, [sp], #4
   1d55c:	20020578 	.word	0x20020578

0001d560 <open_socket>:
{
   1d560:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   1d562:	f240 2201 	movw	r2, #513	; 0x201
   1d566:	2102      	movs	r1, #2
   1d568:	2066      	movs	r0, #102	; 0x66
   1d56a:	f7f9 ff5f 	bl	1742c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   1d56e:	4b05      	ldr	r3, [pc, #20]	; (1d584 <open_socket+0x24>)
   1d570:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   1d572:	3001      	adds	r0, #1
   1d574:	d104      	bne.n	1d580 <open_socket+0x20>
		return -errno;
   1d576:	f012 fd52 	bl	3001e <__errno>
   1d57a:	6800      	ldr	r0, [r0, #0]
   1d57c:	4240      	negs	r0, r0
}
   1d57e:	bd08      	pop	{r3, pc}
	return 0;
   1d580:	2000      	movs	r0, #0
   1d582:	e7fc      	b.n	1d57e <open_socket+0x1e>
   1d584:	2002213c 	.word	0x2002213c

0001d588 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   1d588:	b530      	push	{r4, r5, lr}
   1d58a:	b085      	sub	sp, #20
   1d58c:	4605      	mov	r5, r0
   1d58e:	460c      	mov	r4, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   1d590:	f7f4 fd76 	bl	12080 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1d594:	4b10      	ldr	r3, [pc, #64]	; (1d5d8 <at_write+0x50>)
	int bytes_to_send = strlen(cmd);
   1d596:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1d598:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d59a:	2300      	movs	r3, #0
   1d59c:	4629      	mov	r1, r5
   1d59e:	e9cd 3300 	strd	r3, r3, [sp]
   1d5a2:	f011 fa19 	bl	2e9d8 <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   1d5a6:	3001      	adds	r0, #1
   1d5a8:	d10e      	bne.n	1d5c8 <at_write+0x40>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
   1d5aa:	f012 fd38 	bl	3001e <__errno>
   1d5ae:	6803      	ldr	r3, [r0, #0]
   1d5b0:	425b      	negs	r3, r3
   1d5b2:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   1d5b4:	2301      	movs	r3, #1
   1d5b6:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   1d5ba:	b114      	cbz	r4, 1d5c2 <at_write+0x3a>
		*state = ret.state;
   1d5bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d5c0:	7023      	strb	r3, [r4, #0]
	}

	return ret.code;
}
   1d5c2:	9802      	ldr	r0, [sp, #8]
   1d5c4:	b005      	add	sp, #20
   1d5c6:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
   1d5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5cc:	a902      	add	r1, sp, #8
   1d5ce:	4803      	ldr	r0, [pc, #12]	; (1d5dc <at_write+0x54>)
   1d5d0:	f00a fb38 	bl	27c44 <z_impl_k_msgq_get>
   1d5d4:	e7f1      	b.n	1d5ba <at_write+0x32>
   1d5d6:	bf00      	nop
   1d5d8:	2002213c 	.word	0x2002213c
   1d5dc:	2002068c 	.word	0x2002068c

0001d5e0 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   1d5e0:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   1d5e2:	4d0e      	ldr	r5, [pc, #56]	; (1d61c <at_cmd_driver_init+0x3c>)
{
   1d5e4:	b087      	sub	sp, #28
	if (initialized) {
   1d5e6:	782b      	ldrb	r3, [r5, #0]
   1d5e8:	b9b3      	cbnz	r3, 1d618 <at_cmd_driver_init+0x38>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1d5ea:	f7ff ffb9 	bl	1d560 <open_socket>
	if (err) {
   1d5ee:	4604      	mov	r4, r0
   1d5f0:	b978      	cbnz	r0, 1d612 <at_cmd_driver_init+0x32>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d5f2:	230a      	movs	r3, #10
   1d5f4:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1d5f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1d5fc:	e9cd 0000 	strd	r0, r0, [sp]
   1d600:	4b07      	ldr	r3, [pc, #28]	; (1d620 <at_cmd_driver_init+0x40>)
   1d602:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d606:	4907      	ldr	r1, [pc, #28]	; (1d624 <at_cmd_driver_init+0x44>)
   1d608:	4807      	ldr	r0, [pc, #28]	; (1d628 <at_cmd_driver_init+0x48>)
   1d60a:	f00c fa8b 	bl	29b24 <z_impl_k_thread_create>
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	initialized = true;
   1d60e:	2301      	movs	r3, #1
   1d610:	702b      	strb	r3, [r5, #0]
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   1d612:	4620      	mov	r0, r4
   1d614:	b007      	add	sp, #28
   1d616:	bd30      	pop	{r4, r5, pc}
		return 0;
   1d618:	2400      	movs	r4, #0
   1d61a:	e7fa      	b.n	1d612 <at_cmd_driver_init+0x32>
   1d61c:	20027e7b 	.word	0x20027e7b
   1d620:	0001d62d 	.word	0x0001d62d
   1d624:	20031e98 	.word	0x20031e98
   1d628:	20022150 	.word	0x20022150

0001d62c <socket_thread_fn>:
{
   1d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   1d630:	4e66      	ldr	r6, [pc, #408]	; (1d7cc <socket_thread_fn+0x1a0>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1d632:	4f67      	ldr	r7, [pc, #412]	; (1d7d0 <socket_thread_fn+0x1a4>)
   1d634:	46b0      	mov	r8, r6
{
   1d636:	b086      	sub	sp, #24
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1d638:	a903      	add	r1, sp, #12
   1d63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d63e:	4638      	mov	r0, r7
   1d640:	f00a f988 	bl	27954 <k_mem_slab_alloc>
		ret.code  = 0;
   1d644:	2300      	movs	r3, #0
		item->callback = NULL;
   1d646:	9903      	ldr	r1, [sp, #12]
		ret.code  = 0;
   1d648:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   1d64a:	f88d 3014 	strb.w	r3, [sp, #20]
		item->callback = NULL;
   1d64e:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
		bytes_read = recv(common_socket_fd, item->data,
   1d652:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d654:	f640 228c 	movw	r2, #2700	; 0xa8c
   1d658:	e9cd 3300 	strd	r3, r3, [sp]
   1d65c:	310c      	adds	r1, #12
   1d65e:	f011 fa0d 	bl	2ea7c <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   1d662:	2800      	cmp	r0, #0
   1d664:	da2f      	bge.n	1d6c6 <socket_thread_fn+0x9a>
			if ((close(common_socket_fd) == 0) &&
   1d666:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   1d668:	f011 f97c 	bl	2e964 <z_impl_zsock_close>
   1d66c:	bb20      	cbnz	r0, 1d6b8 <socket_thread_fn+0x8c>
			    (open_socket() == 0)) {
   1d66e:	f7ff ff77 	bl	1d560 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   1d672:	bb08      	cbnz	r0, 1d6b8 <socket_thread_fn+0x8c>
				ret.state = AT_CMD_ERROR;
   1d674:	2301      	movs	r3, #1
   1d676:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   1d67a:	f012 fcd0 	bl	3001e <__errno>
   1d67e:	6803      	ldr	r3, [r0, #0]
   1d680:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   1d682:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   1d684:	9903      	ldr	r1, [sp, #12]
   1d686:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	d162      	bne.n	1d754 <socket_thread_fn+0x128>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1d68e:	a903      	add	r1, sp, #12
   1d690:	4638      	mov	r0, r7
   1d692:	f00a f9c3 	bl	27a1c <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   1d696:	4b4f      	ldr	r3, [pc, #316]	; (1d7d4 <socket_thread_fn+0x1a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1d698:	689b      	ldr	r3, [r3, #8]
   1d69a:	2b00      	cmp	r3, #0
   1d69c:	d1cc      	bne.n	1d638 <socket_thread_fn+0xc>
   1d69e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1d6a2:	2a04      	cmp	r2, #4
   1d6a4:	d0c8      	beq.n	1d638 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   1d6a6:	4a4c      	ldr	r2, [pc, #304]	; (1d7d8 <socket_thread_fn+0x1ac>)
   1d6a8:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1d6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d6ae:	a904      	add	r1, sp, #16
   1d6b0:	484a      	ldr	r0, [pc, #296]	; (1d7dc <socket_thread_fn+0x1b0>)
   1d6b2:	f00a fa2d 	bl	27b10 <z_impl_k_msgq_put>
   1d6b6:	e7bf      	b.n	1d638 <socket_thread_fn+0xc>
			close(common_socket_fd);
   1d6b8:	f8d8 0000 	ldr.w	r0, [r8]
   1d6bc:	f011 f952 	bl	2e964 <z_impl_zsock_close>
}
   1d6c0:	b006      	add	sp, #24
   1d6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   1d6c6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d6ca:	4448      	add	r0, r9
   1d6cc:	f890 a00b 	ldrb.w	sl, [r0, #11]
   1d6d0:	f1ba 0f00 	cmp.w	sl, #0
   1d6d4:	d002      	beq.n	1d6dc <socket_thread_fn+0xb0>
			ret.code  = -ENOBUFS;
   1d6d6:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1d6da:	e7d2      	b.n	1d682 <socket_thread_fn+0x56>
	ret->state = AT_CMD_NOTIFICATION;
   1d6dc:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   1d6de:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1d6e2:	493f      	ldr	r1, [pc, #252]	; (1d7e0 <socket_thread_fn+0x1b4>)
   1d6e4:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   1d6e6:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1d6ea:	f016 f9e8 	bl	33abe <strstr>
		if (tmpstr) {
   1d6ee:	4605      	mov	r5, r0
   1d6f0:	b140      	cbz	r0, 1d704 <socket_thread_fn+0xd8>
			ret->state = AT_CMD_OK;
   1d6f2:	f88d a014 	strb.w	sl, [sp, #20]
			ret->code  = 0;
   1d6f6:	f8cd a010 	str.w	sl, [sp, #16]
		buf[new_len++] = '\0';
   1d6fa:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1d6fc:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
   1d6fe:	3201      	adds	r2, #1
   1d700:	702b      	strb	r3, [r5, #0]
   1d702:	e04c      	b.n	1d79e <socket_thread_fn+0x172>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1d704:	4937      	ldr	r1, [pc, #220]	; (1d7e4 <socket_thread_fn+0x1b8>)
   1d706:	4620      	mov	r0, r4
   1d708:	f016 f9d9 	bl	33abe <strstr>
		if (tmpstr) {
   1d70c:	4605      	mov	r5, r0
   1d70e:	b140      	cbz	r0, 1d722 <socket_thread_fn+0xf6>
			ret->state = AT_CMD_ERROR_CMS;
   1d710:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1d712:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   1d716:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1d71a:	f016 f831 	bl	33780 <atoi>
   1d71e:	9004      	str	r0, [sp, #16]
			break;
   1d720:	e7eb      	b.n	1d6fa <socket_thread_fn+0xce>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   1d722:	4931      	ldr	r1, [pc, #196]	; (1d7e8 <socket_thread_fn+0x1bc>)
   1d724:	4620      	mov	r0, r4
   1d726:	f016 f9ca 	bl	33abe <strstr>
		if (tmpstr) {
   1d72a:	4605      	mov	r5, r0
   1d72c:	b108      	cbz	r0, 1d732 <socket_thread_fn+0x106>
			ret->state = AT_CMD_ERROR_CME;
   1d72e:	2303      	movs	r3, #3
   1d730:	e7ef      	b.n	1d712 <socket_thread_fn+0xe6>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   1d732:	492e      	ldr	r1, [pc, #184]	; (1d7ec <socket_thread_fn+0x1c0>)
   1d734:	4620      	mov	r0, r4
   1d736:	f016 f9c2 	bl	33abe <strstr>
		if (tmpstr) {
   1d73a:	4605      	mov	r5, r0
   1d73c:	b358      	cbz	r0, 1d796 <socket_thread_fn+0x16a>
			ret->state = AT_CMD_ERROR;
   1d73e:	2301      	movs	r3, #1
   1d740:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   1d744:	f06f 0307 	mvn.w	r3, #7
   1d748:	9304      	str	r3, [sp, #16]
			break;
   1d74a:	e7d6      	b.n	1d6fa <socket_thread_fn+0xce>
					ret.code  = -EMSGSIZE;
   1d74c:	f06f 0379 	mvn.w	r3, #121	; 0x79
   1d750:	9304      	str	r3, [sp, #16]
   1d752:	e036      	b.n	1d7c2 <socket_thread_fn+0x196>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d754:	4b26      	ldr	r3, [pc, #152]	; (1d7f0 <socket_thread_fn+0x1c4>)
   1d756:	2200      	movs	r2, #0
   1d758:	604b      	str	r3, [r1, #4]
   1d75a:	460b      	mov	r3, r1
   1d75c:	600a      	str	r2, [r1, #0]
   1d75e:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d762:	e8d3 2fef 	ldaex	r2, [r3]
   1d766:	f042 0001 	orr.w	r0, r2, #1
   1d76a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1d76e:	2c00      	cmp	r4, #0
   1d770:	d1f7      	bne.n	1d762 <socket_thread_fn+0x136>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d772:	07d3      	lsls	r3, r2, #31
   1d774:	d48f      	bmi.n	1d696 <socket_thread_fn+0x6a>
		k_queue_append(&work_q->queue, work);
   1d776:	481f      	ldr	r0, [pc, #124]	; (1d7f4 <socket_thread_fn+0x1c8>)
   1d778:	f015 fe8a 	bl	33490 <k_queue_append>
   1d77c:	e78b      	b.n	1d696 <socket_thread_fn+0x6a>
		if (payload_len == 0) {
   1d77e:	2a00      	cmp	r2, #0
   1d780:	d080      	beq.n	1d684 <socket_thread_fn+0x58>
			item->callback = notification_handler;
   1d782:	4b1d      	ldr	r3, [pc, #116]	; (1d7f8 <socket_thread_fn+0x1cc>)
			item->callback = current_cmd_handler;
   1d784:	681b      	ldr	r3, [r3, #0]
   1d786:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   1d78a:	e77b      	b.n	1d684 <socket_thread_fn+0x58>
		if (payload_len == 0) {
   1d78c:	2a00      	cmp	r2, #0
   1d78e:	f43f af79 	beq.w	1d684 <socket_thread_fn+0x58>
			item->callback = current_cmd_handler;
   1d792:	4b11      	ldr	r3, [pc, #68]	; (1d7d8 <socket_thread_fn+0x1ac>)
   1d794:	e7f6      	b.n	1d784 <socket_thread_fn+0x158>
		new_len = strlen(buf) + 1;
   1d796:	4620      	mov	r0, r4
   1d798:	f7f4 fc72 	bl	12080 <strlen>
   1d79c:	1c42      	adds	r2, r0, #1
		if (ret.state != AT_CMD_NOTIFICATION) {
   1d79e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d7a2:	9903      	ldr	r1, [sp, #12]
   1d7a4:	2b04      	cmp	r3, #4
   1d7a6:	d0ea      	beq.n	1d77e <socket_thread_fn+0x152>
			if ((response_buf_len > 0) &&
   1d7a8:	4d14      	ldr	r5, [pc, #80]	; (1d7fc <socket_thread_fn+0x1d0>)
   1d7aa:	682b      	ldr	r3, [r5, #0]
   1d7ac:	2b00      	cmp	r3, #0
   1d7ae:	d0ed      	beq.n	1d78c <socket_thread_fn+0x160>
			    (response_buf != NULL)) {
   1d7b0:	4c13      	ldr	r4, [pc, #76]	; (1d800 <socket_thread_fn+0x1d4>)
   1d7b2:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   1d7b4:	2800      	cmp	r0, #0
   1d7b6:	d0e9      	beq.n	1d78c <socket_thread_fn+0x160>
				if (response_buf_len >= payload_len) {
   1d7b8:	4293      	cmp	r3, r2
   1d7ba:	d3c7      	bcc.n	1d74c <socket_thread_fn+0x120>
   1d7bc:	310c      	adds	r1, #12
   1d7be:	f015 ffff 	bl	337c0 <memcpy>
				response_buf_len = 0;
   1d7c2:	2300      	movs	r3, #0
   1d7c4:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   1d7c6:	6023      	str	r3, [r4, #0]
				goto next;
   1d7c8:	e75c      	b.n	1d684 <socket_thread_fn+0x58>
   1d7ca:	bf00      	nop
   1d7cc:	2002213c 	.word	0x2002213c
   1d7d0:	20020578 	.word	0x20020578
   1d7d4:	200205ac 	.word	0x200205ac
   1d7d8:	20022140 	.word	0x20022140
   1d7dc:	2002068c 	.word	0x2002068c
   1d7e0:	00036be3 	.word	0x00036be3
   1d7e4:	00036be6 	.word	0x00036be6
   1d7e8:	00036bf2 	.word	0x00036bf2
   1d7ec:	00036bfe 	.word	0x00036bfe
   1d7f0:	0001d541 	.word	0x0001d541
   1d7f4:	20027368 	.word	0x20027368
   1d7f8:	20022144 	.word	0x20022144
   1d7fc:	2002214c 	.word	0x2002214c
   1d800:	20022148 	.word	0x20022148

0001d804 <at_cmd_write>:
{
   1d804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d808:	4605      	mov	r5, r0
   1d80a:	4688      	mov	r8, r1
   1d80c:	4617      	mov	r7, r2
   1d80e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   1d810:	4c0a      	ldr	r4, [pc, #40]	; (1d83c <at_cmd_write+0x38>)
   1d812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d816:	4620      	mov	r0, r4
   1d818:	f00c f82c 	bl	29874 <z_impl_k_sem_take>
	response_buf     = buf;
   1d81c:	4b08      	ldr	r3, [pc, #32]	; (1d840 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   1d81e:	4631      	mov	r1, r6
	response_buf     = buf;
   1d820:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   1d824:	4b07      	ldr	r3, [pc, #28]	; (1d844 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1d826:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1d828:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1d82a:	f7ff fead 	bl	1d588 <at_write>
   1d82e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1d830:	4620      	mov	r0, r4
   1d832:	f00b ffdb 	bl	297ec <z_impl_k_sem_give>
}
   1d836:	4628      	mov	r0, r5
   1d838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d83c:	200205ac 	.word	0x200205ac
   1d840:	20022148 	.word	0x20022148
   1d844:	2002214c 	.word	0x2002214c

0001d848 <at_cmd_set_notification_handler>:
{
   1d848:	b538      	push	{r3, r4, r5, lr}
   1d84a:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   1d84c:	4c06      	ldr	r4, [pc, #24]	; (1d868 <at_cmd_set_notification_handler+0x20>)
   1d84e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d852:	4620      	mov	r0, r4
   1d854:	f00c f80e 	bl	29874 <z_impl_k_sem_take>
	notification_handler = handler;
   1d858:	4b04      	ldr	r3, [pc, #16]	; (1d86c <at_cmd_set_notification_handler+0x24>)
   1d85a:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   1d85c:	4620      	mov	r0, r4
}
   1d85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d862:	f00b bfc3 	b.w	297ec <z_impl_k_sem_give>
   1d866:	bf00      	nop
   1d868:	200205ac 	.word	0x200205ac
   1d86c:	20022144 	.word	0x20022144

0001d870 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1d870:	4b0b      	ldr	r3, [pc, #44]	; (1d8a0 <find_node+0x30>)
{
   1d872:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1d874:	681b      	ldr	r3, [r3, #0]
   1d876:	b153      	cbz	r3, 1d88e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d878:	2500      	movs	r5, #0
   1d87a:	461c      	mov	r4, r3
   1d87c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1d87e:	6866      	ldr	r6, [r4, #4]
   1d880:	428e      	cmp	r6, r1
   1d882:	d106      	bne.n	1d892 <find_node+0x22>
   1d884:	68a6      	ldr	r6, [r4, #8]
   1d886:	4296      	cmp	r6, r2
   1d888:	d103      	bne.n	1d892 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1d88a:	4623      	mov	r3, r4
			*prev_out = prev;
   1d88c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1d88e:	4618      	mov	r0, r3
   1d890:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1d892:	2b00      	cmp	r3, #0
   1d894:	d0fb      	beq.n	1d88e <find_node+0x1e>
   1d896:	4625      	mov	r5, r4
   1d898:	461c      	mov	r4, r3
   1d89a:	681b      	ldr	r3, [r3, #0]
   1d89c:	e7ef      	b.n	1d87e <find_node+0xe>
   1d89e:	bf00      	nop
   1d8a0:	20022208 	.word	0x20022208

0001d8a4 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   1d8a4:	4a06      	ldr	r2, [pc, #24]	; (1d8c0 <module_init+0x1c>)
{
   1d8a6:	b508      	push	{r3, lr}
	if (initialized) {
   1d8a8:	7813      	ldrb	r3, [r2, #0]
   1d8aa:	b93b      	cbnz	r3, 1d8bc <module_init+0x18>
		LOG_WRN("Already initialized. Nothing to do");
		return 0;
	}

	initialized = true;
   1d8ac:	2101      	movs	r1, #1
   1d8ae:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   1d8b0:	4a04      	ldr	r2, [pc, #16]	; (1d8c4 <module_init+0x20>)

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1d8b2:	4805      	ldr	r0, [pc, #20]	; (1d8c8 <module_init+0x24>)
	list->tail = NULL;
   1d8b4:	e9c2 3300 	strd	r3, r3, [r2]
   1d8b8:	f7ff ffc6 	bl	1d848 <at_cmd_set_notification_handler>
	return 0;
}
   1d8bc:	2000      	movs	r0, #0
   1d8be:	bd08      	pop	{r3, pc}
   1d8c0:	20027e7c 	.word	0x20027e7c
   1d8c4:	20022208 	.word	0x20022208
   1d8c8:	0001d8d9 	.word	0x0001d8d9

0001d8cc <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   1d8cc:	4801      	ldr	r0, [pc, #4]	; (1d8d4 <k_mutex_unlock.constprop.7+0x8>)
   1d8ce:	f00a bb7b 	b.w	27fc8 <z_impl_k_mutex_unlock>
   1d8d2:	bf00      	nop
   1d8d4:	20020630 	.word	0x20020630

0001d8d8 <notif_dispatch>:
{
   1d8d8:	b538      	push	{r3, r4, r5, lr}
   1d8da:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1d8dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d8e0:	4809      	ldr	r0, [pc, #36]	; (1d908 <notif_dispatch+0x30>)
   1d8e2:	f00a fa93 	bl	27e0c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1d8e6:	4b09      	ldr	r3, [pc, #36]	; (1d90c <notif_dispatch+0x34>)
   1d8e8:	681b      	ldr	r3, [r3, #0]
   1d8ea:	b91b      	cbnz	r3, 1d8f4 <notif_dispatch+0x1c>
}
   1d8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1d8f0:	f7ff bfec 	b.w	1d8cc <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d8f4:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   1d8f6:	689a      	ldr	r2, [r3, #8]
   1d8f8:	4629      	mov	r1, r5
   1d8fa:	6858      	ldr	r0, [r3, #4]
   1d8fc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1d8fe:	2c00      	cmp	r4, #0
   1d900:	d0f4      	beq.n	1d8ec <notif_dispatch+0x14>
   1d902:	4623      	mov	r3, r4
   1d904:	6824      	ldr	r4, [r4, #0]
   1d906:	e7f6      	b.n	1d8f6 <notif_dispatch+0x1e>
   1d908:	20020630 	.word	0x20020630
   1d90c:	20022208 	.word	0x20022208

0001d910 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   1d910:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d912:	4606      	mov	r6, r0
	if (handler == NULL) {
   1d914:	460d      	mov	r5, r1
   1d916:	b351      	cbz	r1, 1d96e <at_notif_register_handler+0x5e>
   1d918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d91c:	4815      	ldr	r0, [pc, #84]	; (1d974 <at_notif_register_handler+0x64>)
   1d91e:	f00a fa75 	bl	27e0c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1d922:	462a      	mov	r2, r5
   1d924:	4631      	mov	r1, r6
   1d926:	a801      	add	r0, sp, #4
   1d928:	f7ff ffa2 	bl	1d870 <find_node>
   1d92c:	4604      	mov	r4, r0
   1d92e:	b120      	cbz	r0, 1d93a <at_notif_register_handler+0x2a>
		k_mutex_unlock(&list_mtx);
   1d930:	f7ff ffcc 	bl	1d8cc <k_mutex_unlock.constprop.7>
		return 0;
   1d934:	2000      	movs	r0, #0
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
}
   1d936:	b002      	add	sp, #8
   1d938:	bd70      	pop	{r4, r5, r6, pc}
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   1d93a:	200c      	movs	r0, #12
   1d93c:	f00a f8cc 	bl	27ad8 <k_malloc>
   1d940:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1d942:	b920      	cbnz	r0, 1d94e <at_notif_register_handler+0x3e>
		k_mutex_unlock(&list_mtx);
   1d944:	f7ff ffc2 	bl	1d8cc <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   1d948:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d94c:	e7f3      	b.n	1d936 <at_notif_register_handler+0x26>
__ssp_bos_icheck3(memset, void *, int)
   1d94e:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   1d950:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1d952:	4a09      	ldr	r2, [pc, #36]	; (1d978 <at_notif_register_handler+0x68>)
   1d954:	6044      	str	r4, [r0, #4]
   1d956:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1d958:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1d95a:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1d95c:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1d960:	b911      	cbnz	r1, 1d968 <at_notif_register_handler+0x58>
	list->head = node;
   1d962:	e9c2 3300 	strd	r3, r3, [r2]
   1d966:	e7e3      	b.n	1d930 <at_notif_register_handler+0x20>
	parent->next = child;
   1d968:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1d96a:	6053      	str	r3, [r2, #4]
   1d96c:	e7e0      	b.n	1d930 <at_notif_register_handler+0x20>
		return -EINVAL;
   1d96e:	f06f 0015 	mvn.w	r0, #21
   1d972:	e7e0      	b.n	1d936 <at_notif_register_handler+0x26>
   1d974:	20020630 	.word	0x20020630
   1d978:	20022208 	.word	0x20022208

0001d97c <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1d97c:	4b06      	ldr	r3, [pc, #24]	; (1d998 <is_valid_notification_char+0x1c>)
   1d97e:	5cc3      	ldrb	r3, [r0, r3]
   1d980:	f003 0303 	and.w	r3, r3, #3
   1d984:	2b02      	cmp	r3, #2
   1d986:	bf08      	it	eq
   1d988:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1d98a:	3841      	subs	r0, #65	; 0x41
   1d98c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1d98e:	2819      	cmp	r0, #25
   1d990:	bf8c      	ite	hi
   1d992:	2000      	movhi	r0, #0
   1d994:	2001      	movls	r0, #1
   1d996:	4770      	bx	lr
   1d998:	00037719 	.word	0x00037719

0001d99c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1d99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1d9a0:	6805      	ldr	r5, [r0, #0]
{
   1d9a2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1d9a4:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d9a6:	782b      	ldrb	r3, [r5, #0]
{
   1d9a8:	4680      	mov	r8, r0
   1d9aa:	460f      	mov	r7, r1
   1d9ac:	4616      	mov	r6, r2
   1d9ae:	2b00      	cmp	r3, #0
   1d9b0:	f000 80c8 	beq.w	1db44 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1d9b4:	4b65      	ldr	r3, [pc, #404]	; (1db4c <at_parse_process_element+0x1b0>)
   1d9b6:	781c      	ldrb	r4, [r3, #0]
   1d9b8:	2c06      	cmp	r4, #6
   1d9ba:	d110      	bne.n	1d9de <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1d9bc:	1c6b      	adds	r3, r5, #1
   1d9be:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   1d9c0:	9a00      	ldr	r2, [sp, #0]
   1d9c2:	7810      	ldrb	r0, [r2, #0]
   1d9c4:	f7ff ffda 	bl	1d97c <is_valid_notification_char>
   1d9c8:	b930      	cbnz	r0, 1d9d8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1d9ca:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1d9cc:	462a      	mov	r2, r5
   1d9ce:	4639      	mov	r1, r7
   1d9d0:	4630      	mov	r0, r6
   1d9d2:	f015 fb98 	bl	33106 <at_params_string_put>
   1d9d6:	e01b      	b.n	1da10 <at_parse_process_element+0x74>
			tmpstr++;
   1d9d8:	3201      	adds	r2, #1
   1d9da:	9200      	str	r2, [sp, #0]
   1d9dc:	e7f0      	b.n	1d9c0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1d9de:	2c07      	cmp	r4, #7
   1d9e0:	d124      	bne.n	1da2c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   1d9e2:	4668      	mov	r0, sp
   1d9e4:	f015 fb1f 	bl	33026 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   1d9e8:	9a00      	ldr	r2, [sp, #0]
   1d9ea:	7810      	ldrb	r0, [r2, #0]
   1d9ec:	f7ff ffc6 	bl	1d97c <is_valid_notification_char>
   1d9f0:	b9a8      	cbnz	r0, 1da1e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   1d9f2:	1b53      	subs	r3, r2, r5
   1d9f4:	4639      	mov	r1, r7
   1d9f6:	462a      	mov	r2, r5
   1d9f8:	4630      	mov	r0, r6
   1d9fa:	f015 fb84 	bl	33106 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1d9fe:	9b00      	ldr	r3, [sp, #0]
   1da00:	781a      	ldrb	r2, [r3, #0]
   1da02:	2a3d      	cmp	r2, #61	; 0x3d
   1da04:	d10e      	bne.n	1da24 <at_parse_process_element+0x88>
   1da06:	785a      	ldrb	r2, [r3, #1]
   1da08:	2a3f      	cmp	r2, #63	; 0x3f
   1da0a:	d101      	bne.n	1da10 <at_parse_process_element+0x74>
			tmpstr += 2;
   1da0c:	3302      	adds	r3, #2
			tmpstr++;
   1da0e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1da10:	2000      	movs	r0, #0
	*str = tmpstr;
   1da12:	9b00      	ldr	r3, [sp, #0]
   1da14:	f8c8 3000 	str.w	r3, [r8]
}
   1da18:	b023      	add	sp, #140	; 0x8c
   1da1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1da1e:	3201      	adds	r2, #1
   1da20:	9200      	str	r2, [sp, #0]
   1da22:	e7e1      	b.n	1d9e8 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1da24:	2a3f      	cmp	r2, #63	; 0x3f
   1da26:	d1f3      	bne.n	1da10 <at_parse_process_element+0x74>
			tmpstr++;
   1da28:	3301      	adds	r3, #1
   1da2a:	e7f0      	b.n	1da0e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1da2c:	2c08      	cmp	r4, #8
   1da2e:	d103      	bne.n	1da38 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   1da30:	4610      	mov	r0, r2
   1da32:	f015 fb3f 	bl	330b4 <at_params_empty_put>
   1da36:	e7eb      	b.n	1da10 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   1da38:	2c02      	cmp	r4, #2
   1da3a:	d111      	bne.n	1da60 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1da3c:	9a00      	ldr	r2, [sp, #0]
   1da3e:	7811      	ldrb	r1, [r2, #0]
   1da40:	4608      	mov	r0, r1
   1da42:	f015 fae7 	bl	33014 <is_lfcr>
   1da46:	b918      	cbnz	r0, 1da50 <at_parse_process_element+0xb4>
   1da48:	b111      	cbz	r1, 1da50 <at_parse_process_element+0xb4>
			tmpstr++;
   1da4a:	3201      	adds	r2, #1
   1da4c:	9200      	str	r2, [sp, #0]
   1da4e:	e7f5      	b.n	1da3c <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   1da50:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1da52:	462a      	mov	r2, r5
   1da54:	4639      	mov	r1, r7
   1da56:	4630      	mov	r0, r6
   1da58:	f015 fb55 	bl	33106 <at_params_string_put>
		tmpstr++;
   1da5c:	9b00      	ldr	r3, [sp, #0]
   1da5e:	e7e3      	b.n	1da28 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   1da60:	2c03      	cmp	r4, #3
   1da62:	d109      	bne.n	1da78 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1da64:	9b00      	ldr	r3, [sp, #0]
   1da66:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1da68:	2a22      	cmp	r2, #34	; 0x22
   1da6a:	d003      	beq.n	1da74 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1da6c:	b112      	cbz	r2, 1da74 <at_parse_process_element+0xd8>
			tmpstr++;
   1da6e:	3301      	adds	r3, #1
   1da70:	9300      	str	r3, [sp, #0]
   1da72:	e7f7      	b.n	1da64 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   1da74:	1b5b      	subs	r3, r3, r5
   1da76:	e7ec      	b.n	1da52 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   1da78:	2c01      	cmp	r4, #1
   1da7a:	d13c      	bne.n	1daf6 <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1da7c:	4628      	mov	r0, r5
   1da7e:	220a      	movs	r2, #10
   1da80:	a901      	add	r1, sp, #4
   1da82:	f00f fcef 	bl	2d464 <strtoul>
		tmpstr = next;
   1da86:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1da88:	4d31      	ldr	r5, [pc, #196]	; (1db50 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1da8a:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1da8c:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1da8e:	9800      	ldr	r0, [sp, #0]
   1da90:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1da92:	2b29      	cmp	r3, #41	; 0x29
   1da94:	d028      	beq.n	1dae8 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1da96:	b33b      	cbz	r3, 1dae8 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1da98:	3b2c      	subs	r3, #44	; 0x2c
   1da9a:	b2db      	uxtb	r3, r3
   1da9c:	3001      	adds	r0, #1
   1da9e:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1daa0:	9000      	str	r0, [sp, #0]
   1daa2:	d803      	bhi.n	1daac <at_parse_process_element+0x110>
   1daa4:	fa25 f303 	lsr.w	r3, r5, r3
   1daa8:	07db      	lsls	r3, r3, #31
   1daaa:	d408      	bmi.n	1dabe <at_parse_process_element+0x122>
				tmpstr++;
   1daac:	46a1      	mov	r9, r4
   1daae:	e004      	b.n	1daba <at_parse_process_element+0x11e>
					tmpstr = next;
   1dab0:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1dab2:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1dab6:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1dab8:	d015      	beq.n	1dae6 <at_parse_process_element+0x14a>
				tmpstr++;
   1daba:	464c      	mov	r4, r9
   1dabc:	e7e7      	b.n	1da8e <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   1dabe:	220a      	movs	r2, #10
   1dac0:	a901      	add	r1, sp, #4
   1dac2:	f00f fccf 	bl	2d464 <strtoul>
				tmparray[i++] =
   1dac6:	ab22      	add	r3, sp, #136	; 0x88
   1dac8:	f104 0901 	add.w	r9, r4, #1
   1dacc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1dad0:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1dad4:	9800      	ldr	r0, [sp, #0]
   1dad6:	f7f4 fad3 	bl	12080 <strlen>
   1dada:	4604      	mov	r4, r0
   1dadc:	9801      	ldr	r0, [sp, #4]
   1dade:	f7f4 facf 	bl	12080 <strlen>
   1dae2:	4284      	cmp	r4, r0
   1dae4:	d1e4      	bne.n	1dab0 <at_parse_process_element+0x114>
   1dae6:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   1dae8:	00a3      	lsls	r3, r4, #2
   1daea:	aa02      	add	r2, sp, #8
   1daec:	4639      	mov	r1, r7
   1daee:	4630      	mov	r0, r6
   1daf0:	f015 fb2f 	bl	33152 <at_params_array_put>
   1daf4:	e7b2      	b.n	1da5c <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   1daf6:	2c04      	cmp	r4, #4
   1daf8:	d115      	bne.n	1db26 <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1dafa:	220a      	movs	r2, #10
   1dafc:	a902      	add	r1, sp, #8
   1dafe:	4628      	mov	r0, r5
   1db00:	f00f fcb0 	bl	2d464 <strtoul>
		tmpstr = next;
   1db04:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   1db06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1db0a:	4602      	mov	r2, r0
		tmpstr = next;
   1db0c:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   1db0e:	da05      	bge.n	1db1c <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   1db10:	b282      	uxth	r2, r0
   1db12:	4639      	mov	r1, r7
   1db14:	4630      	mov	r0, r6
   1db16:	f015 fab8 	bl	3308a <at_params_short_put>
   1db1a:	e779      	b.n	1da10 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1db1c:	4639      	mov	r1, r7
   1db1e:	4630      	mov	r0, r6
   1db20:	f015 fadc 	bl	330dc <at_params_int_put>
   1db24:	e774      	b.n	1da10 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   1db26:	2c05      	cmp	r4, #5
   1db28:	f47f af72 	bne.w	1da10 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   1db2c:	4909      	ldr	r1, [pc, #36]	; (1db54 <at_parse_process_element+0x1b8>)
   1db2e:	9b00      	ldr	r3, [sp, #0]
   1db30:	781a      	ldrb	r2, [r3, #0]
   1db32:	5c52      	ldrb	r2, [r2, r1]
   1db34:	f012 0f44 	tst.w	r2, #68	; 0x44
   1db38:	d101      	bne.n	1db3e <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   1db3a:	1b5b      	subs	r3, r3, r5
   1db3c:	e746      	b.n	1d9cc <at_parse_process_element+0x30>
			tmpstr++;
   1db3e:	3301      	adds	r3, #1
   1db40:	9300      	str	r3, [sp, #0]
   1db42:	e7f4      	b.n	1db2e <at_parse_process_element+0x192>
		return -1;
   1db44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db48:	e766      	b.n	1da18 <at_parse_process_element+0x7c>
   1db4a:	bf00      	nop
   1db4c:	20027e7d 	.word	0x20027e7d
   1db50:	00024001 	.word	0x00024001
   1db54:	00037719 	.word	0x00037719

0001db58 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1db58:	b510      	push	{r4, lr}
   1db5a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1db5c:	f7f4 fa90 	bl	12080 <strlen>
   1db60:	2801      	cmp	r0, #1
   1db62:	d922      	bls.n	1dbaa <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1db64:	7821      	ldrb	r1, [r4, #0]
   1db66:	4b13      	ldr	r3, [pc, #76]	; (1dbb4 <is_command+0x5c>)
   1db68:	5cca      	ldrb	r2, [r1, r3]
   1db6a:	f002 0203 	and.w	r2, r2, #3
   1db6e:	2a02      	cmp	r2, #2
   1db70:	bf08      	it	eq
   1db72:	3920      	subeq	r1, #32
   1db74:	2941      	cmp	r1, #65	; 0x41
   1db76:	461a      	mov	r2, r3
   1db78:	d117      	bne.n	1dbaa <is_command+0x52>
   1db7a:	7863      	ldrb	r3, [r4, #1]
   1db7c:	5cd2      	ldrb	r2, [r2, r3]
   1db7e:	f002 0203 	and.w	r2, r2, #3
   1db82:	2a02      	cmp	r2, #2
   1db84:	bf08      	it	eq
   1db86:	3b20      	subeq	r3, #32
   1db88:	2b54      	cmp	r3, #84	; 0x54
   1db8a:	d10e      	bne.n	1dbaa <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1db8c:	78a2      	ldrb	r2, [r4, #2]
   1db8e:	2a25      	cmp	r2, #37	; 0x25
   1db90:	d00d      	beq.n	1dbae <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1db92:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1db96:	2b23      	cmp	r3, #35	; 0x23
   1db98:	d009      	beq.n	1dbae <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1db9a:	4610      	mov	r0, r2
   1db9c:	f015 fa3a 	bl	33014 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1dba0:	b910      	cbnz	r0, 1dba8 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1dba2:	fab2 f082 	clz	r0, r2
   1dba6:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1dba8:	bd10      	pop	{r4, pc}
		return false;
   1dbaa:	2000      	movs	r0, #0
   1dbac:	e7fc      	b.n	1dba8 <is_command+0x50>
		return true;
   1dbae:	2001      	movs	r0, #1
   1dbb0:	e7fa      	b.n	1dba8 <is_command+0x50>
   1dbb2:	bf00      	nop
   1dbb4:	00037719 	.word	0x00037719

0001dbb8 <at_parse_detect_type>:
{
   1dbb8:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1dbba:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1dbbc:	2900      	cmp	r1, #0
{
   1dbbe:	4606      	mov	r6, r0
   1dbc0:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1dbc2:	d141      	bne.n	1dc48 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1dbc4:	2a2b      	cmp	r2, #43	; 0x2b
   1dbc6:	4d29      	ldr	r5, [pc, #164]	; (1dc6c <at_parse_detect_type+0xb4>)
   1dbc8:	d001      	beq.n	1dbce <at_parse_detect_type+0x16>
   1dbca:	2a25      	cmp	r2, #37	; 0x25
   1dbcc:	d104      	bne.n	1dbd8 <at_parse_detect_type+0x20>
	state = new_state;
   1dbce:	2306      	movs	r3, #6
   1dbd0:	702b      	strb	r3, [r5, #0]
	return 0;
   1dbd2:	2000      	movs	r0, #0
	*str = tmpstr;
   1dbd4:	6034      	str	r4, [r6, #0]
}
   1dbd6:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1dbd8:	4620      	mov	r0, r4
   1dbda:	f7ff ffbd 	bl	1db58 <is_command>
   1dbde:	b388      	cbz	r0, 1dc44 <at_parse_detect_type+0x8c>
	state = new_state;
   1dbe0:	2307      	movs	r3, #7
   1dbe2:	e7f5      	b.n	1dbd0 <at_parse_detect_type+0x18>
	if (chr == '"') {
   1dbe4:	2a22      	cmp	r2, #34	; 0x22
   1dbe6:	d006      	beq.n	1dbf6 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   1dbe8:	2a28      	cmp	r2, #40	; 0x28
   1dbea:	d109      	bne.n	1dc00 <at_parse_detect_type+0x48>
   1dbec:	2201      	movs	r2, #1
   1dbee:	4b1f      	ldr	r3, [pc, #124]	; (1dc6c <at_parse_detect_type+0xb4>)
		tmpstr++;
   1dbf0:	4414      	add	r4, r2
	state = new_state;
   1dbf2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1dbf4:	e7ed      	b.n	1dbd2 <at_parse_detect_type+0x1a>
	state = new_state;
   1dbf6:	2203      	movs	r2, #3
   1dbf8:	4b1c      	ldr	r3, [pc, #112]	; (1dc6c <at_parse_detect_type+0xb4>)
		tmpstr++;
   1dbfa:	3401      	adds	r4, #1
	state = new_state;
   1dbfc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1dbfe:	e7e8      	b.n	1dbd2 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1dc00:	4610      	mov	r0, r2
   1dc02:	f015 fa07 	bl	33014 <is_lfcr>
   1dc06:	b170      	cbz	r0, 1dc26 <at_parse_detect_type+0x6e>
   1dc08:	4918      	ldr	r1, [pc, #96]	; (1dc6c <at_parse_detect_type+0xb4>)
   1dc0a:	7808      	ldrb	r0, [r1, #0]
   1dc0c:	2804      	cmp	r0, #4
   1dc0e:	d108      	bne.n	1dc22 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   1dc10:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1dc14:	f015 f9fe 	bl	33014 <is_lfcr>
   1dc18:	2800      	cmp	r0, #0
   1dc1a:	d1f9      	bne.n	1dc10 <at_parse_detect_type+0x58>
	state = new_state;
   1dc1c:	2305      	movs	r3, #5
   1dc1e:	700b      	strb	r3, [r1, #0]
   1dc20:	e7d7      	b.n	1dbd2 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1dc22:	2808      	cmp	r0, #8
   1dc24:	d0d5      	beq.n	1dbd2 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1dc26:	3a2c      	subs	r2, #44	; 0x2c
   1dc28:	b2d2      	uxtb	r2, r2
   1dc2a:	2a11      	cmp	r2, #17
   1dc2c:	d807      	bhi.n	1dc3e <at_parse_detect_type+0x86>
   1dc2e:	4b10      	ldr	r3, [pc, #64]	; (1dc70 <at_parse_detect_type+0xb8>)
   1dc30:	fa23 f202 	lsr.w	r2, r3, r2
   1dc34:	07d3      	lsls	r3, r2, #31
   1dc36:	d502      	bpl.n	1dc3e <at_parse_detect_type+0x86>
	state = new_state;
   1dc38:	4b0c      	ldr	r3, [pc, #48]	; (1dc6c <at_parse_detect_type+0xb4>)
   1dc3a:	2208      	movs	r2, #8
   1dc3c:	e013      	b.n	1dc66 <at_parse_detect_type+0xae>
		return -1;
   1dc3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc42:	e7c8      	b.n	1dbd6 <at_parse_detect_type+0x1e>
	state = new_state;
   1dc44:	2302      	movs	r3, #2
   1dc46:	e7c3      	b.n	1dbd0 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1dc48:	dd03      	ble.n	1dc52 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1dc4a:	2a2b      	cmp	r2, #43	; 0x2b
   1dc4c:	d0f7      	beq.n	1dc3e <at_parse_detect_type+0x86>
   1dc4e:	2a25      	cmp	r2, #37	; 0x25
   1dc50:	d0f5      	beq.n	1dc3e <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1dc52:	4b08      	ldr	r3, [pc, #32]	; (1dc74 <at_parse_detect_type+0xbc>)
   1dc54:	5cd3      	ldrb	r3, [r2, r3]
   1dc56:	0759      	lsls	r1, r3, #29
   1dc58:	d403      	bmi.n	1dc62 <at_parse_detect_type+0xaa>
   1dc5a:	2a2d      	cmp	r2, #45	; 0x2d
   1dc5c:	d001      	beq.n	1dc62 <at_parse_detect_type+0xaa>
   1dc5e:	2a2b      	cmp	r2, #43	; 0x2b
   1dc60:	d1c0      	bne.n	1dbe4 <at_parse_detect_type+0x2c>
	state = new_state;
   1dc62:	2204      	movs	r2, #4
   1dc64:	4b01      	ldr	r3, [pc, #4]	; (1dc6c <at_parse_detect_type+0xb4>)
   1dc66:	701a      	strb	r2, [r3, #0]
   1dc68:	e7b3      	b.n	1dbd2 <at_parse_detect_type+0x1a>
   1dc6a:	bf00      	nop
   1dc6c:	20027e7d 	.word	0x20027e7d
   1dc70:	00024001 	.word	0x00024001
   1dc74:	00037719 	.word	0x00037719

0001dc78 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1dc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc7c:	4688      	mov	r8, r1
   1dc7e:	4616      	mov	r6, r2
   1dc80:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1dc82:	4604      	mov	r4, r0
   1dc84:	2800      	cmp	r0, #0
   1dc86:	d07e      	beq.n	1dd86 <at_parser_max_params_from_str+0x10e>
   1dc88:	2a00      	cmp	r2, #0
   1dc8a:	d07c      	beq.n	1dd86 <at_parser_max_params_from_str+0x10e>
   1dc8c:	6853      	ldr	r3, [r2, #4]
   1dc8e:	2b00      	cmp	r3, #0
   1dc90:	d079      	beq.n	1dd86 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   1dc92:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1dc94:	4610      	mov	r0, r2
   1dc96:	f000 f8eb 	bl	1de70 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1dc9a:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   1dc9c:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1dc9e:	4297      	cmp	r7, r2
   1dca0:	bf28      	it	cs
   1dca2:	4617      	movcs	r7, r2
	int index = 0;
   1dca4:	462c      	mov	r4, r5
	state = IDLE;
   1dca6:	4b39      	ldr	r3, [pc, #228]	; (1dd8c <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   1dca8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1dd90 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1dcac:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1dd94 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   1dcb0:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1dcb2:	9b01      	ldr	r3, [sp, #4]
   1dcb4:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1dcb6:	2a00      	cmp	r2, #0
   1dcb8:	d04b      	beq.n	1dd52 <at_parser_max_params_from_str+0xda>
   1dcba:	42a7      	cmp	r7, r4
   1dcbc:	d949      	bls.n	1dd52 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   1dcbe:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   1dcc2:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   1dcc4:	0711      	lsls	r1, r2, #28
			str++;
   1dcc6:	bf48      	it	mi
   1dcc8:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   1dcca:	4621      	mov	r1, r4
			str++;
   1dccc:	bf48      	it	mi
   1dcce:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   1dcd0:	f7ff ff72 	bl	1dbb8 <at_parse_detect_type>
   1dcd4:	1c42      	adds	r2, r0, #1
   1dcd6:	d03c      	beq.n	1dd52 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   1dcd8:	4632      	mov	r2, r6
   1dcda:	4621      	mov	r1, r4
   1dcdc:	a801      	add	r0, sp, #4
   1dcde:	f7ff fe5d 	bl	1d99c <at_parse_process_element>
   1dce2:	1c43      	adds	r3, r0, #1
   1dce4:	d035      	beq.n	1dd52 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   1dce6:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1dce8:	781a      	ldrb	r2, [r3, #0]
   1dcea:	3a2c      	subs	r2, #44	; 0x2c
   1dcec:	b2d2      	uxtb	r2, r2
   1dcee:	2a11      	cmp	r2, #17
   1dcf0:	d81a      	bhi.n	1dd28 <at_parser_max_params_from_str+0xb0>
   1dcf2:	fa2a f202 	lsr.w	r2, sl, r2
   1dcf6:	07d1      	lsls	r1, r2, #31
   1dcf8:	d516      	bpl.n	1dd28 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   1dcfa:	7858      	ldrb	r0, [r3, #1]
   1dcfc:	f015 f98a 	bl	33014 <is_lfcr>
   1dd00:	b178      	cbz	r0, 1dd22 <at_parser_max_params_from_str+0xaa>
				index++;
   1dd02:	3401      	adds	r4, #1
				if (index == max_params) {
   1dd04:	42bc      	cmp	r4, r7
   1dd06:	d039      	beq.n	1dd7c <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   1dd08:	4621      	mov	r1, r4
   1dd0a:	a801      	add	r0, sp, #4
   1dd0c:	f7ff ff54 	bl	1dbb8 <at_parse_detect_type>
   1dd10:	1c42      	adds	r2, r0, #1
   1dd12:	d01e      	beq.n	1dd52 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   1dd14:	4632      	mov	r2, r6
   1dd16:	4621      	mov	r1, r4
   1dd18:	a801      	add	r0, sp, #4
   1dd1a:	f7ff fe3f 	bl	1d99c <at_parse_process_element>
   1dd1e:	1c43      	adds	r3, r0, #1
   1dd20:	d017      	beq.n	1dd52 <at_parser_max_params_from_str+0xda>
			str++;
   1dd22:	9b01      	ldr	r3, [sp, #4]
   1dd24:	3301      	adds	r3, #1
   1dd26:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1dd28:	9a01      	ldr	r2, [sp, #4]
   1dd2a:	7810      	ldrb	r0, [r2, #0]
   1dd2c:	f015 f972 	bl	33014 <is_lfcr>
   1dd30:	b1f8      	cbz	r0, 1dd72 <at_parser_max_params_from_str+0xfa>
   1dd32:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1dd34:	7811      	ldrb	r1, [r2, #0]
   1dd36:	4693      	mov	fp, r2
   1dd38:	4608      	mov	r0, r1
   1dd3a:	3201      	adds	r2, #1
   1dd3c:	f015 f96a 	bl	33014 <is_lfcr>
   1dd40:	2800      	cmp	r0, #0
   1dd42:	d1f7      	bne.n	1dd34 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1dd44:	b119      	cbz	r1, 1dd4e <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1dd46:	292b      	cmp	r1, #43	; 0x2b
   1dd48:	d001      	beq.n	1dd4e <at_parser_max_params_from_str+0xd6>
   1dd4a:	2925      	cmp	r1, #37	; 0x25
   1dd4c:	d111      	bne.n	1dd72 <at_parser_max_params_from_str+0xfa>
				str += i;
   1dd4e:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   1dd52:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1dd54:	b9a5      	cbnz	r5, 1dd80 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1dd56:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   1dd58:	2a00      	cmp	r2, #0
   1dd5a:	bf0c      	ite	eq
   1dd5c:	2000      	moveq	r0, #0
   1dd5e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1dd62:	f1b8 0f00 	cmp.w	r8, #0
   1dd66:	d001      	beq.n	1dd6c <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   1dd68:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1dd6c:	b003      	add	sp, #12
   1dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   1dd72:	3401      	adds	r4, #1
			oversized = true;
   1dd74:	42bc      	cmp	r4, r7
   1dd76:	bf08      	it	eq
   1dd78:	2501      	moveq	r5, #1
   1dd7a:	e79a      	b.n	1dcb2 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   1dd7c:	4605      	mov	r5, r0
   1dd7e:	e7e8      	b.n	1dd52 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   1dd80:	f06f 0006 	mvn.w	r0, #6
   1dd84:	e7ed      	b.n	1dd62 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   1dd86:	f06f 0015 	mvn.w	r0, #21
   1dd8a:	e7ef      	b.n	1dd6c <at_parser_max_params_from_str+0xf4>
   1dd8c:	20027e7d 	.word	0x20027e7d
   1dd90:	00037719 	.word	0x00037719
   1dd94:	00024001 	.word	0x00024001

0001dd98 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1dd98:	b538      	push	{r3, r4, r5, lr}
   1dd9a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1dd9c:	4605      	mov	r5, r0
   1dd9e:	b960      	cbnz	r0, 1ddba <at_params_get+0x22>
   1dda0:	490a      	ldr	r1, [pc, #40]	; (1ddcc <at_params_get+0x34>)
   1dda2:	232b      	movs	r3, #43	; 0x2b
   1dda4:	4a0a      	ldr	r2, [pc, #40]	; (1ddd0 <at_params_get+0x38>)
   1dda6:	480b      	ldr	r0, [pc, #44]	; (1ddd4 <at_params_get+0x3c>)
   1dda8:	f010 fa08 	bl	2e1bc <printk>
   1ddac:	480a      	ldr	r0, [pc, #40]	; (1ddd8 <at_params_get+0x40>)
   1ddae:	f010 fa05 	bl	2e1bc <printk>
   1ddb2:	212b      	movs	r1, #43	; 0x2b
   1ddb4:	4806      	ldr	r0, [pc, #24]	; (1ddd0 <at_params_get+0x38>)
   1ddb6:	f010 fd02 	bl	2e7be <assert_post_action>

	if (index >= list->param_count) {
   1ddba:	682b      	ldr	r3, [r5, #0]
   1ddbc:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1ddbe:	bf85      	ittet	hi
   1ddc0:	230c      	movhi	r3, #12
   1ddc2:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   1ddc4:	2000      	movls	r0, #0
	return &param[index];
   1ddc6:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   1ddca:	bd38      	pop	{r3, r4, r5, pc}
   1ddcc:	00036c63 	.word	0x00036c63
   1ddd0:	00036c35 	.word	0x00036c35
   1ddd4:	00035920 	.word	0x00035920
   1ddd8:	00036c77 	.word	0x00036c77

0001dddc <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1dddc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1ddde:	4604      	mov	r4, r0
   1dde0:	b960      	cbnz	r0, 1ddfc <at_param_size+0x20>
   1dde2:	490e      	ldr	r1, [pc, #56]	; (1de1c <at_param_size+0x40>)
   1dde4:	2339      	movs	r3, #57	; 0x39
   1dde6:	4a0e      	ldr	r2, [pc, #56]	; (1de20 <at_param_size+0x44>)
   1dde8:	480e      	ldr	r0, [pc, #56]	; (1de24 <at_param_size+0x48>)
   1ddea:	f010 f9e7 	bl	2e1bc <printk>
   1ddee:	480e      	ldr	r0, [pc, #56]	; (1de28 <at_param_size+0x4c>)
   1ddf0:	f010 f9e4 	bl	2e1bc <printk>
   1ddf4:	2139      	movs	r1, #57	; 0x39
   1ddf6:	480a      	ldr	r0, [pc, #40]	; (1de20 <at_param_size+0x44>)
   1ddf8:	f010 fce1 	bl	2e7be <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1ddfc:	7823      	ldrb	r3, [r4, #0]
   1ddfe:	2b01      	cmp	r3, #1
   1de00:	d006      	beq.n	1de10 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1de02:	2b02      	cmp	r3, #2
   1de04:	d006      	beq.n	1de14 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1de06:	3b03      	subs	r3, #3
   1de08:	2b01      	cmp	r3, #1
   1de0a:	d805      	bhi.n	1de18 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1de0c:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   1de0e:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   1de10:	2002      	movs	r0, #2
   1de12:	e7fc      	b.n	1de0e <at_param_size+0x32>
		return sizeof(u32_t);
   1de14:	2004      	movs	r0, #4
   1de16:	e7fa      	b.n	1de0e <at_param_size+0x32>
	return 0;
   1de18:	2000      	movs	r0, #0
   1de1a:	e7f8      	b.n	1de0e <at_param_size+0x32>
   1de1c:	00036c04 	.word	0x00036c04
   1de20:	00036c35 	.word	0x00036c35
   1de24:	00035920 	.word	0x00035920
   1de28:	00036c19 	.word	0x00036c19

0001de2c <at_param_clear>:
{
   1de2c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1de2e:	4604      	mov	r4, r0
   1de30:	b960      	cbnz	r0, 1de4c <at_param_clear+0x20>
   1de32:	490b      	ldr	r1, [pc, #44]	; (1de60 <at_param_clear+0x34>)
   1de34:	231d      	movs	r3, #29
   1de36:	4a0b      	ldr	r2, [pc, #44]	; (1de64 <at_param_clear+0x38>)
   1de38:	480b      	ldr	r0, [pc, #44]	; (1de68 <at_param_clear+0x3c>)
   1de3a:	f010 f9bf 	bl	2e1bc <printk>
   1de3e:	480b      	ldr	r0, [pc, #44]	; (1de6c <at_param_clear+0x40>)
   1de40:	f010 f9bc 	bl	2e1bc <printk>
   1de44:	211d      	movs	r1, #29
   1de46:	4807      	ldr	r0, [pc, #28]	; (1de64 <at_param_clear+0x38>)
   1de48:	f010 fcb9 	bl	2e7be <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1de4c:	7823      	ldrb	r3, [r4, #0]
   1de4e:	3b03      	subs	r3, #3
   1de50:	2b01      	cmp	r3, #1
   1de52:	d802      	bhi.n	1de5a <at_param_clear+0x2e>
		k_free(param->value.str_val);
   1de54:	68a0      	ldr	r0, [r4, #8]
   1de56:	f015 fad1 	bl	333fc <k_free>
	param->value.int_val = 0;
   1de5a:	2300      	movs	r3, #0
   1de5c:	60a3      	str	r3, [r4, #8]
}
   1de5e:	bd10      	pop	{r4, pc}
   1de60:	00036c04 	.word	0x00036c04
   1de64:	00036c35 	.word	0x00036c35
   1de68:	00035920 	.word	0x00035920
   1de6c:	00036c19 	.word	0x00036c19

0001de70 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1de70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   1de74:	4605      	mov	r5, r0
   1de76:	b158      	cbz	r0, 1de90 <at_params_list_clear+0x20>
   1de78:	6843      	ldr	r3, [r0, #4]
   1de7a:	b14b      	cbz	r3, 1de90 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1de7c:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1de7e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1ded4 <at_params_list_clear+0x64>
   1de82:	f8df a054 	ldr.w	sl, [pc, #84]	; 1ded8 <at_params_list_clear+0x68>
   1de86:	f8df b054 	ldr.w	fp, [pc, #84]	; 1dedc <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   1de8a:	682b      	ldr	r3, [r5, #0]
   1de8c:	429c      	cmp	r4, r3
   1de8e:	d301      	bcc.n	1de94 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1de90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   1de94:	270c      	movs	r7, #12
   1de96:	4367      	muls	r7, r4
   1de98:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1de9c:	eb09 0607 	add.w	r6, r9, r7
   1dea0:	4630      	mov	r0, r6
   1dea2:	f7ff ffc3 	bl	1de2c <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1dea6:	b966      	cbnz	r6, 1dec2 <at_params_list_clear+0x52>
   1dea8:	4651      	mov	r1, sl
   1deaa:	2314      	movs	r3, #20
   1deac:	4642      	mov	r2, r8
   1deae:	4658      	mov	r0, fp
   1deb0:	f010 f984 	bl	2e1bc <printk>
   1deb4:	4806      	ldr	r0, [pc, #24]	; (1ded0 <at_params_list_clear+0x60>)
   1deb6:	f010 f981 	bl	2e1bc <printk>
   1deba:	2114      	movs	r1, #20
   1debc:	4640      	mov	r0, r8
   1debe:	f010 fc7e 	bl	2e7be <assert_post_action>
   1dec2:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   1dec4:	3401      	adds	r4, #1
   1dec6:	f849 3007 	str.w	r3, [r9, r7]
   1deca:	6073      	str	r3, [r6, #4]
   1decc:	60b3      	str	r3, [r6, #8]
   1dece:	e7dc      	b.n	1de8a <at_params_list_clear+0x1a>
   1ded0:	00036c19 	.word	0x00036c19
   1ded4:	00036c35 	.word	0x00036c35
   1ded8:	00036c04 	.word	0x00036c04
   1dedc:	00035920 	.word	0x00035920

0001dee0 <parse_psm_cfg>:
	char timer_str[9] = {0};
   1dee0:	2300      	movs	r3, #0
{
   1dee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dee6:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   1dee8:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1deec:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   1def0:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   1def2:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1def4:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   1def6:	9302      	str	r3, [sp, #8]
{
   1def8:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   1defa:	446b      	add	r3, sp
   1defc:	aa03      	add	r2, sp, #12
   1defe:	bf14      	ite	ne
   1df00:	2108      	movne	r1, #8
   1df02:	2109      	moveq	r1, #9
{
   1df04:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1df06:	bf14      	ite	ne
   1df08:	f04f 0807 	movne.w	r8, #7
   1df0c:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   1df10:	f015 f972 	bl	331f8 <at_params_string_get>
	if (err) {
   1df14:	4604      	mov	r4, r0
   1df16:	b970      	cbnz	r0, 1df36 <parse_psm_cfg+0x56>
	memcpy(unit_str, timer_str, unit_str_len);
   1df18:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df1a:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   1df1c:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df20:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   1df22:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   1df24:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   1df26:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df2a:	f00f fa9b 	bl	2d464 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1df2e:	2807      	cmp	r0, #7
   1df30:	d905      	bls.n	1df3e <parse_psm_cfg+0x5e>
		return err;
   1df32:	f06f 0415 	mvn.w	r4, #21
}
   1df36:	4620      	mov	r0, r4
   1df38:	b006      	add	sp, #24
   1df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	timer_unit = t3412_lookup[lut_idx];
   1df3e:	4b1a      	ldr	r3, [pc, #104]	; (1dfa8 <parse_psm_cfg+0xc8>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1df40:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   1df42:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1df46:	4621      	mov	r1, r4
   1df48:	f10d 000f 	add.w	r0, sp, #15
   1df4c:	f00f fa8a 	bl	2d464 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1df50:	b325      	cbz	r5, 1df9c <parse_psm_cfg+0xbc>
   1df52:	4345      	muls	r5, r0
   1df54:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   1df56:	ab02      	add	r3, sp, #8
   1df58:	aa03      	add	r2, sp, #12
   1df5a:	4641      	mov	r1, r8
   1df5c:	4638      	mov	r0, r7
   1df5e:	f015 f94b 	bl	331f8 <at_params_string_get>
	if (err) {
   1df62:	4604      	mov	r4, r0
   1df64:	2800      	cmp	r0, #0
   1df66:	d1e6      	bne.n	1df36 <parse_psm_cfg+0x56>
	memcpy(unit_str, timer_str, unit_str_len);
   1df68:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df6a:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   1df6c:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df70:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   1df72:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   1df74:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   1df76:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1df7a:	f00f fa73 	bl	2d464 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1df7e:	2807      	cmp	r0, #7
   1df80:	d8d7      	bhi.n	1df32 <parse_psm_cfg+0x52>
	timer_unit = t3324_lookup[lut_idx];
   1df82:	4b0a      	ldr	r3, [pc, #40]	; (1dfac <parse_psm_cfg+0xcc>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1df84:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1df86:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1df8a:	4621      	mov	r1, r4
   1df8c:	f10d 000f 	add.w	r0, sp, #15
   1df90:	f00f fa68 	bl	2d464 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1df94:	b12d      	cbz	r5, 1dfa2 <parse_psm_cfg+0xc2>
   1df96:	4368      	muls	r0, r5
   1df98:	6070      	str	r0, [r6, #4]
	return 0;
   1df9a:	e7cc      	b.n	1df36 <parse_psm_cfg+0x56>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1df9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dfa0:	e7d8      	b.n	1df54 <parse_psm_cfg+0x74>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1dfa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dfa6:	e7f7      	b.n	1df98 <parse_psm_cfg+0xb8>
   1dfa8:	00034bb8 	.word	0x00034bb8
   1dfac:	00034b98 	.word	0x00034b98

0001dfb0 <lte_lc_normal>:
{
   1dfb0:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   1dfb2:	2300      	movs	r3, #0
   1dfb4:	4804      	ldr	r0, [pc, #16]	; (1dfc8 <lte_lc_normal+0x18>)
   1dfb6:	461a      	mov	r2, r3
   1dfb8:	4619      	mov	r1, r3
   1dfba:	f7ff fc23 	bl	1d804 <at_cmd_write>
   1dfbe:	2800      	cmp	r0, #0
}
   1dfc0:	bf18      	it	ne
   1dfc2:	f06f 0004 	mvnne.w	r0, #4
   1dfc6:	bd08      	pop	{r3, pc}
   1dfc8:	00036cfc 	.word	0x00036cfc

0001dfcc <lte_lc_psm_req>:
{
   1dfcc:	b500      	push	{lr}
	if (enable) {
   1dfce:	4603      	mov	r3, r0
{
   1dfd0:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   1dfd2:	b1a0      	cbz	r0, 1dffe <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   1dfd4:	4b0c      	ldr	r3, [pc, #48]	; (1e008 <lte_lc_psm_req+0x3c>)
   1dfd6:	4a0d      	ldr	r2, [pc, #52]	; (1e00c <lte_lc_psm_req+0x40>)
   1dfd8:	9300      	str	r3, [sp, #0]
   1dfda:	2128      	movs	r1, #40	; 0x28
   1dfdc:	4b0c      	ldr	r3, [pc, #48]	; (1e010 <lte_lc_psm_req+0x44>)
   1dfde:	a802      	add	r0, sp, #8
   1dfe0:	f00f f8f6 	bl	2d1d0 <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   1dfe4:	2300      	movs	r3, #0
   1dfe6:	461a      	mov	r2, r3
   1dfe8:	4619      	mov	r1, r3
   1dfea:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   1dfec:	f7ff fc0a 	bl	1d804 <at_cmd_write>
		return -EIO;
   1dff0:	2800      	cmp	r0, #0
}
   1dff2:	bf18      	it	ne
   1dff4:	f06f 0004 	mvnne.w	r0, #4
   1dff8:	b00d      	add	sp, #52	; 0x34
   1dffa:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   1dffe:	4602      	mov	r2, r0
   1e000:	4601      	mov	r1, r0
   1e002:	4804      	ldr	r0, [pc, #16]	; (1e014 <lte_lc_psm_req+0x48>)
   1e004:	e7f2      	b.n	1dfec <lte_lc_psm_req+0x20>
   1e006:	bf00      	nop
   1e008:	20020408 	.word	0x20020408
   1e00c:	00036cb5 	.word	0x00036cb5
   1e010:	20020411 	.word	0x20020411
   1e014:	00036d06 	.word	0x00036d06

0001e018 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1e018:	b500      	push	{lr}
   1e01a:	b08f      	sub	sp, #60	; 0x3c
	int err, len;
	char cmd[50];

	switch (mode) {
   1e01c:	b188      	cbz	r0, 1e042 <lte_lc_system_mode_set+0x2a>
   1e01e:	2805      	cmp	r0, #5
   1e020:	d812      	bhi.n	1e048 <lte_lc_system_mode_set+0x30>
	default:
		LOG_ERR("Invalid system mode requested");
		return -EINVAL;
	}

	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   1e022:	4b0c      	ldr	r3, [pc, #48]	; (1e054 <lte_lc_system_mode_set+0x3c>)
   1e024:	4a0c      	ldr	r2, [pc, #48]	; (1e058 <lte_lc_system_mode_set+0x40>)
   1e026:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e02a:	2132      	movs	r1, #50	; 0x32
   1e02c:	a801      	add	r0, sp, #4
   1e02e:	f010 f8d2 	bl	2e1d6 <snprintk>
		       system_mode_params[mode]);
	if (len < 0) {
   1e032:	2800      	cmp	r0, #0
   1e034:	db0b      	blt.n	1e04e <lte_lc_system_mode_set+0x36>
		return -EFAULT;
	}

	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));

	err = at_cmd_write(cmd, NULL, 0, NULL);
   1e036:	2300      	movs	r3, #0
   1e038:	a801      	add	r0, sp, #4
   1e03a:	461a      	mov	r2, r3
   1e03c:	4619      	mov	r1, r3
   1e03e:	f7ff fbe1 	bl	1d804 <at_cmd_write>
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
	}

	return err;
}
   1e042:	b00f      	add	sp, #60	; 0x3c
   1e044:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1e048:	f06f 0015 	mvn.w	r0, #21
   1e04c:	e7f9      	b.n	1e042 <lte_lc_system_mode_set+0x2a>
		return -EFAULT;
   1e04e:	f06f 000d 	mvn.w	r0, #13
   1e052:	e7f6      	b.n	1e042 <lte_lc_system_mode_set+0x2a>
   1e054:	00034b80 	.word	0x00034b80
   1e058:	00036ce9 	.word	0x00036ce9

0001e05c <w_lte_lc_init>:
{
   1e05c:	b530      	push	{r4, r5, lr}
	if (is_initialized) {
   1e05e:	4d1f      	ldr	r5, [pc, #124]	; (1e0dc <w_lte_lc_init+0x80>)
{
   1e060:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   1e062:	7828      	ldrb	r0, [r5, #0]
   1e064:	2800      	cmp	r0, #0
   1e066:	d136      	bne.n	1e0d6 <w_lte_lc_init+0x7a>
	err = at_notif_register_handler(NULL, at_handler);
   1e068:	491d      	ldr	r1, [pc, #116]	; (1e0e0 <w_lte_lc_init+0x84>)
   1e06a:	f7ff fc51 	bl	1d910 <at_notif_register_handler>
	if (err) {
   1e06e:	4604      	mov	r4, r0
   1e070:	b968      	cbnz	r0, 1e08e <w_lte_lc_init+0x32>
	err = lte_lc_system_mode_set(sys_mode_preferred);
   1e072:	2002      	movs	r0, #2
   1e074:	f7ff ffd0 	bl	1e018 <lte_lc_system_mode_set>
	if (err) {
   1e078:	4604      	mov	r4, r0
   1e07a:	b940      	cbnz	r0, 1e08e <w_lte_lc_init+0x32>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1e07c:	4603      	mov	r3, r0
   1e07e:	4602      	mov	r2, r0
   1e080:	4601      	mov	r1, r0
   1e082:	4818      	ldr	r0, [pc, #96]	; (1e0e4 <w_lte_lc_init+0x88>)
   1e084:	f7ff fbbe 	bl	1d804 <at_cmd_write>
   1e088:	b120      	cbz	r0, 1e094 <w_lte_lc_init+0x38>
		return -EIO;
   1e08a:	f06f 0404 	mvn.w	r4, #4
}
   1e08e:	4620      	mov	r0, r4
   1e090:	b00f      	add	sp, #60	; 0x3c
   1e092:	bd30      	pop	{r4, r5, pc}
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   1e094:	4623      	mov	r3, r4
   1e096:	4622      	mov	r2, r4
   1e098:	4621      	mov	r1, r4
   1e09a:	4813      	ldr	r0, [pc, #76]	; (1e0e8 <w_lte_lc_init+0x8c>)
   1e09c:	f7ff fbb2 	bl	1d804 <at_cmd_write>
   1e0a0:	2800      	cmp	r0, #0
   1e0a2:	d1f2      	bne.n	1e08a <w_lte_lc_init+0x2e>
	if (at_cmd_write(cgauth, NULL, 0, NULL) != 0) {
   1e0a4:	4623      	mov	r3, r4
   1e0a6:	4622      	mov	r2, r4
   1e0a8:	4621      	mov	r1, r4
   1e0aa:	4810      	ldr	r0, [pc, #64]	; (1e0ec <w_lte_lc_init+0x90>)
   1e0ac:	f7ff fbaa 	bl	1d804 <at_cmd_write>
   1e0b0:	4604      	mov	r4, r0
   1e0b2:	2800      	cmp	r0, #0
   1e0b4:	d1e9      	bne.n	1e08a <w_lte_lc_init+0x2e>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   1e0b6:	4603      	mov	r3, r0
   1e0b8:	4602      	mov	r2, r0
   1e0ba:	4601      	mov	r1, r0
   1e0bc:	480c      	ldr	r0, [pc, #48]	; (1e0f0 <w_lte_lc_init+0x94>)
   1e0be:	f7ff fba1 	bl	1d804 <at_cmd_write>
	if (err) {
   1e0c2:	b128      	cbz	r0, 1e0d0 <w_lte_lc_init+0x74>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   1e0c4:	4623      	mov	r3, r4
   1e0c6:	2232      	movs	r2, #50	; 0x32
   1e0c8:	a901      	add	r1, sp, #4
   1e0ca:	480a      	ldr	r0, [pc, #40]	; (1e0f4 <w_lte_lc_init+0x98>)
   1e0cc:	f7ff fb9a 	bl	1d804 <at_cmd_write>
	is_initialized = true;
   1e0d0:	2301      	movs	r3, #1
   1e0d2:	702b      	strb	r3, [r5, #0]
	return 0;
   1e0d4:	e7db      	b.n	1e08e <w_lte_lc_init+0x32>
		return -EALREADY;
   1e0d6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1e0da:	e7d8      	b.n	1e08e <w_lte_lc_init+0x32>
   1e0dc:	20027e7e 	.word	0x20027e7e
   1e0e0:	000126b9 	.word	0x000126b9
   1e0e4:	00036c98 	.word	0x00036c98
   1e0e8:	20020378 	.word	0x20020378
   1e0ec:	2002033d 	.word	0x2002033d
   1e0f0:	00036ca3 	.word	0x00036ca3
   1e0f4:	00036d56 	.word	0x00036d56

0001e0f8 <w_lte_lc_connect>:
	if (!is_initialized) {
   1e0f8:	4b0f      	ldr	r3, [pc, #60]	; (1e138 <w_lte_lc_connect+0x40>)
{
   1e0fa:	b510      	push	{r4, lr}
	if (!is_initialized) {
   1e0fc:	781b      	ldrb	r3, [r3, #0]
{
   1e0fe:	4604      	mov	r4, r0
	if (!is_initialized) {
   1e100:	b1b3      	cbz	r3, 1e130 <w_lte_lc_connect+0x38>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e102:	2201      	movs	r2, #1
   1e104:	2100      	movs	r1, #0
   1e106:	480d      	ldr	r0, [pc, #52]	; (1e13c <w_lte_lc_connect+0x44>)
   1e108:	f015 fa01 	bl	3350e <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(current_network_mode);
   1e10c:	2002      	movs	r0, #2
   1e10e:	f7ff ff83 	bl	1e018 <lte_lc_system_mode_set>
		if (err) {
   1e112:	b960      	cbnz	r0, 1e12e <w_lte_lc_connect+0x36>
		err = lte_lc_normal();
   1e114:	f7ff ff4c 	bl	1dfb0 <lte_lc_normal>
		if (err || !blocking) {
   1e118:	b948      	cbnz	r0, 1e12e <w_lte_lc_connect+0x36>
   1e11a:	b144      	cbz	r4, 1e12e <w_lte_lc_connect+0x36>
	return z_impl_k_sem_take(sem, timeout);
   1e11c:	4908      	ldr	r1, [pc, #32]	; (1e140 <w_lte_lc_connect+0x48>)
   1e11e:	4807      	ldr	r0, [pc, #28]	; (1e13c <w_lte_lc_connect+0x44>)
   1e120:	f00b fba8 	bl	29874 <z_impl_k_sem_take>
				err = -ETIMEDOUT;
   1e124:	f110 0f0b 	cmn.w	r0, #11
   1e128:	bf08      	it	eq
   1e12a:	f06f 0073 	mvneq.w	r0, #115	; 0x73
}
   1e12e:	bd10      	pop	{r4, pc}
		return -EPERM;
   1e130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e134:	e7fb      	b.n	1e12e <w_lte_lc_connect+0x36>
   1e136:	bf00      	nop
   1e138:	20027e7e 	.word	0x20027e7e
   1e13c:	20022214 	.word	0x20022214
   1e140:	000927c0 	.word	0x000927c0

0001e144 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   1e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   1e148:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   1e14a:	260d      	movs	r6, #13
{
   1e14c:	4605      	mov	r5, r0
   1e14e:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1e150:	221e      	movs	r2, #30
   1e152:	4621      	mov	r1, r4
   1e154:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   1e156:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1e15a:	f015 fb6b 	bl	33834 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   1e15e:	4632      	mov	r2, r6
   1e160:	4621      	mov	r1, r4
   1e162:	a804      	add	r0, sp, #16
   1e164:	f015 fb66 	bl	33834 <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   1e168:	9600      	str	r6, [sp, #0]

	if (mode == NULL) {
   1e16a:	2d00      	cmp	r5, #0
   1e16c:	d05d      	beq.n	1e22a <lte_lc_system_mode_get+0xe6>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   1e16e:	4623      	mov	r3, r4
   1e170:	221e      	movs	r2, #30
   1e172:	a908      	add	r1, sp, #32
   1e174:	482e      	ldr	r0, [pc, #184]	; (1e230 <lte_lc_system_mode_get+0xec>)
   1e176:	f7ff fb45 	bl	1d804 <at_cmd_write>
			   NULL);
	if (err) {
   1e17a:	4604      	mov	r4, r0
   1e17c:	2800      	cmp	r0, #0
   1e17e:	d13f      	bne.n	1e200 <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not send AT command");
		return err;
	}

	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   1e180:	2105      	movs	r1, #5
   1e182:	a802      	add	r0, sp, #8
   1e184:	f014 ff60 	bl	33048 <at_params_list_init>
	if (err) {
   1e188:	4604      	mov	r4, r0
   1e18a:	2800      	cmp	r0, #0
   1e18c:	d138      	bne.n	1e200 <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   1e18e:	4601      	mov	r1, r0
   1e190:	2305      	movs	r3, #5
   1e192:	aa02      	add	r2, sp, #8
   1e194:	a808      	add	r0, sp, #32
   1e196:	f7ff fd6f 	bl	1dc78 <at_parser_max_params_from_str>
					    AT_XSYSTEMMODE_PARAMS_COUNT);
	if (err) {
   1e19a:	4604      	mov	r4, r0
   1e19c:	bb68      	cbnz	r0, 1e1fa <lte_lc_system_mode_get+0xb6>
		LOG_ERR("Could not parse AT response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with %XSYSTEMMODE */
	err = at_params_string_get(&resp_list,
   1e19e:	4601      	mov	r1, r0
   1e1a0:	466b      	mov	r3, sp
   1e1a2:	aa04      	add	r2, sp, #16
   1e1a4:	a802      	add	r0, sp, #8
   1e1a6:	f015 f827 	bl	331f8 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   1e1aa:	4604      	mov	r4, r0
   1e1ac:	bb28      	cbnz	r0, 1e1fa <lte_lc_system_mode_get+0xb6>
	if ((response == NULL) || (check == NULL)) {
   1e1ae:	4a21      	ldr	r2, [pc, #132]	; (1e234 <lte_lc_system_mode_get+0xf0>)
   1e1b0:	9900      	ldr	r1, [sp, #0]
   1e1b2:	a804      	add	r0, sp, #16
   1e1b4:	f015 f85e 	bl	33274 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   1e1b8:	b388      	cbz	r0, 1e21e <lte_lc_system_mode_get+0xda>
	}

	/* We skip the first parameter, as that's the response prefix,
	 * "%XSYSTEMMODE:" in this case."
	 */
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1e1ba:	2601      	movs	r6, #1
	int err, bitmask = 0;
   1e1bc:	4627      	mov	r7, r4
		if (err) {
			LOG_ERR("Could not parse mode parameter, err: %d", err);
			goto clean_exit;
		}

		bitmask = param ? bitmask | BIT(i) : bitmask;
   1e1be:	46b0      	mov	r8, r6
		err = at_params_int_get(&resp_list, i, &param);
   1e1c0:	aa01      	add	r2, sp, #4
   1e1c2:	4631      	mov	r1, r6
   1e1c4:	a802      	add	r0, sp, #8
   1e1c6:	f015 f800 	bl	331ca <at_params_int_get>
		if (err) {
   1e1ca:	4604      	mov	r4, r0
   1e1cc:	b9a8      	cbnz	r0, 1e1fa <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1e1ce:	9b01      	ldr	r3, [sp, #4]
   1e1d0:	b113      	cbz	r3, 1e1d8 <lte_lc_system_mode_get+0x94>
   1e1d2:	fa08 f306 	lsl.w	r3, r8, r6
   1e1d6:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1e1d8:	3601      	adds	r6, #1
   1e1da:	2e05      	cmp	r6, #5
   1e1dc:	d1f0      	bne.n	1e1c0 <lte_lc_system_mode_get+0x7c>
	}

	/* When checking the bitmask, we need to add 1 to the indices,
	 * as the response prefix is also counted as a parameter.
	 */
	switch (bitmask) {
   1e1de:	2f0c      	cmp	r7, #12
   1e1e0:	d820      	bhi.n	1e224 <lte_lc_system_mode_get+0xe0>
   1e1e2:	e8df f007 	tbb	[pc, r7]
   1e1e6:	1f07      	.short	0x1f07
   1e1e8:	1f141f11 	.word	0x1f141f11
   1e1ec:	1f161f1f 	.word	0x1f161f1f
   1e1f0:	1f18      	.short	0x1f18
   1e1f2:	1a          	.byte	0x1a
   1e1f3:	00          	.byte	0x00
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1e1f4:	2300      	movs	r3, #0
		break;
   1e1f6:	463c      	mov	r4, r7
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1e1f8:	702b      	strb	r3, [r5, #0]
		err = -EFAULT;
		break;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1e1fa:	a802      	add	r0, sp, #8
   1e1fc:	f014 ff37 	bl	3306e <at_params_list_free>

	return err;
}
   1e200:	4620      	mov	r0, r4
   1e202:	b010      	add	sp, #64	; 0x40
   1e204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   1e208:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1e20a:	702b      	strb	r3, [r5, #0]
		break;
   1e20c:	e7f5      	b.n	1e1fa <lte_lc_system_mode_get+0xb6>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1e20e:	2302      	movs	r3, #2
   1e210:	e7fb      	b.n	1e20a <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   1e212:	2303      	movs	r3, #3
   1e214:	e7f9      	b.n	1e20a <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   1e216:	2304      	movs	r3, #4
   1e218:	e7f7      	b.n	1e20a <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1e21a:	2305      	movs	r3, #5
   1e21c:	e7f5      	b.n	1e20a <lte_lc_system_mode_get+0xc6>
		err = -EIO;
   1e21e:	f06f 0404 	mvn.w	r4, #4
   1e222:	e7ea      	b.n	1e1fa <lte_lc_system_mode_get+0xb6>
		err = -EFAULT;
   1e224:	f06f 040d 	mvn.w	r4, #13
   1e228:	e7e7      	b.n	1e1fa <lte_lc_system_mode_get+0xb6>
		return -EINVAL;
   1e22a:	f06f 0415 	mvn.w	r4, #21
   1e22e:	e7e7      	b.n	1e200 <lte_lc_system_mode_get+0xbc>
   1e230:	00036ccc 	.word	0x00036ccc
   1e234:	00036cdc 	.word	0x00036cdc

0001e238 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   1e238:	b510      	push	{r4, lr}
   1e23a:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1e23c:	4a09      	ldr	r2, [pc, #36]	; (1e264 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   1e23e:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1e240:	7823      	ldrb	r3, [r4, #0]
   1e242:	2100      	movs	r1, #0
   1e244:	f7ff fd18 	bl	1dc78 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   1e248:	f110 0f0b 	cmn.w	r0, #11
   1e24c:	d000      	beq.n	1e250 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   1e24e:	b940      	cbnz	r0, 1e262 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   1e250:	4804      	ldr	r0, [pc, #16]	; (1e264 <modem_info_parse.isra.0+0x2c>)
   1e252:	f014 fff8 	bl	33246 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   1e256:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   1e258:	4298      	cmp	r0, r3
   1e25a:	bf94      	ite	ls
   1e25c:	2000      	movls	r0, #0
   1e25e:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   1e262:	bd10      	pop	{r4, pc}
   1e264:	2002223c 	.word	0x2002223c

0001e268 <modem_info_short_get>:

	return len;
}

int modem_info_short_get(enum modem_info info, u16_t *buf)
{
   1e268:	b530      	push	{r4, r5, lr}
   1e26a:	460d      	mov	r5, r1
   1e26c:	b0a1      	sub	sp, #132	; 0x84
   1e26e:	4604      	mov	r4, r0
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1e270:	2280      	movs	r2, #128	; 0x80
   1e272:	2100      	movs	r1, #0
   1e274:	4668      	mov	r0, sp
   1e276:	f015 fadd 	bl	33834 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   1e27a:	b1e5      	cbz	r5, 1e2b6 <modem_info_short_get+0x4e>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1e27c:	4b11      	ldr	r3, [pc, #68]	; (1e2c4 <modem_info_short_get+0x5c>)
   1e27e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1e282:	7aa3      	ldrb	r3, [r4, #10]
   1e284:	2b03      	cmp	r3, #3
   1e286:	d016      	beq.n	1e2b6 <modem_info_short_get+0x4e>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1e288:	2300      	movs	r3, #0
   1e28a:	2280      	movs	r2, #128	; 0x80
   1e28c:	4669      	mov	r1, sp
   1e28e:	6820      	ldr	r0, [r4, #0]
   1e290:	f7ff fab8 	bl	1d804 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   1e294:	b990      	cbnz	r0, 1e2bc <modem_info_short_get+0x54>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   1e296:	4669      	mov	r1, sp
   1e298:	f104 0009 	add.w	r0, r4, #9
   1e29c:	f7ff ffcc 	bl	1e238 <modem_info_parse.isra.0>

	if (err) {
   1e2a0:	b938      	cbnz	r0, 1e2b2 <modem_info_short_get+0x4a>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   1e2a2:	462a      	mov	r2, r5
   1e2a4:	7a21      	ldrb	r1, [r4, #8]
   1e2a6:	4808      	ldr	r0, [pc, #32]	; (1e2c8 <modem_info_short_get+0x60>)
   1e2a8:	f014 ff79 	bl	3319e <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(u16_t);
   1e2ac:	2800      	cmp	r0, #0
   1e2ae:	bf08      	it	eq
   1e2b0:	2002      	moveq	r0, #2
}
   1e2b2:	b021      	add	sp, #132	; 0x84
   1e2b4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e2b6:	f06f 0015 	mvn.w	r0, #21
   1e2ba:	e7fa      	b.n	1e2b2 <modem_info_short_get+0x4a>
		return -EIO;
   1e2bc:	f06f 0004 	mvn.w	r0, #4
   1e2c0:	e7f7      	b.n	1e2b2 <modem_info_short_get+0x4a>
   1e2c2:	bf00      	nop
   1e2c4:	00034ca4 	.word	0x00034ca4
   1e2c8:	2002223c 	.word	0x2002223c

0001e2cc <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   1e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2d0:	460e      	mov	r6, r1
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   1e2d2:	2500      	movs	r5, #0
{
   1e2d4:	b0a5      	sub	sp, #148	; 0x94
   1e2d6:	4680      	mov	r8, r0
   1e2d8:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1e2da:	2100      	movs	r1, #0
   1e2dc:	2280      	movs	r2, #128	; 0x80
   1e2de:	a804      	add	r0, sp, #16
   1e2e0:	f015 faa8 	bl	33834 <memset>
	size_t len = 0;
   1e2e4:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   1e2e6:	2e00      	cmp	r6, #0
   1e2e8:	f000 80c5 	beq.w	1e476 <modem_info_string_get+0x1aa>
   1e2ec:	f1b9 0f00 	cmp.w	r9, #0
   1e2f0:	f000 80c1 	beq.w	1e476 <modem_info_string_get+0x1aa>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1e2f4:	4b64      	ldr	r3, [pc, #400]	; (1e488 <modem_info_string_get+0x1bc>)
   1e2f6:	2280      	movs	r2, #128	; 0x80
   1e2f8:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   1e2fc:	a904      	add	r1, sp, #16
   1e2fe:	462b      	mov	r3, r5
   1e300:	f8da 0000 	ldr.w	r0, [sl]
   1e304:	f7ff fa7e 	bl	1d804 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   1e308:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   1e30c:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   1e30e:	d10a      	bne.n	1e326 <modem_info_string_get+0x5a>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e310:	f10d 0119 	add.w	r1, sp, #25
   1e314:	4630      	mov	r0, r6
   1e316:	f015 fbb8 	bl	33a8a <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   1e31a:	4630      	mov	r0, r6
   1e31c:	f7f3 feb0 	bl	12080 <strlen>
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   1e320:	b025      	add	sp, #148	; 0x94
   1e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   1e326:	f1b8 0f09 	cmp.w	r8, #9
   1e32a:	d041      	beq.n	1e3b0 <modem_info_string_get+0xe4>
	if (err != 0) {
   1e32c:	2c00      	cmp	r4, #0
   1e32e:	f040 80a5 	bne.w	1e47c <modem_info_string_get+0x1b0>
	size_t ip_str_len = 0;
   1e332:	4627      	mov	r7, r4
	size_t cmd_rsp_idx = 0;
   1e334:	46a3      	mov	fp, r4
	if (info == MODEM_INFO_IP_ADDRESS) {
   1e336:	ab04      	add	r3, sp, #16
   1e338:	f1b8 0f09 	cmp.w	r8, #9
   1e33c:	445b      	add	r3, fp
   1e33e:	d10f      	bne.n	1e360 <modem_info_string_get+0x94>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   1e340:	4952      	ldr	r1, [pc, #328]	; (1e48c <modem_info_string_get+0x1c0>)
   1e342:	4618      	mov	r0, r3
   1e344:	9301      	str	r3, [sp, #4]
   1e346:	f015 fbba 	bl	33abe <strstr>
		if (ip_str_end == NULL) {
   1e34a:	2800      	cmp	r0, #0
   1e34c:	f000 8099 	beq.w	1e482 <modem_info_string_get+0x1b6>
		recv_buf[++ip_str_len] = 0;
   1e350:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1e352:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   1e354:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1e356:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   1e358:	1c47      	adds	r7, r0, #1
   1e35a:	443a      	add	r2, r7
   1e35c:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   1e360:	4619      	mov	r1, r3
   1e362:	f10a 0009 	add.w	r0, sl, #9
   1e366:	f7ff ff67 	bl	1e238 <modem_info_parse.isra.0>
	if (err) {
   1e36a:	2800      	cmp	r0, #0
   1e36c:	d1d8      	bne.n	1e320 <modem_info_string_get+0x54>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   1e36e:	f89a 300a 	ldrb.w	r3, [sl, #10]
   1e372:	2b01      	cmp	r3, #1
   1e374:	d11f      	bne.n	1e3b6 <modem_info_string_get+0xea>
		err = at_params_short_get(&m_param_list,
   1e376:	f10d 020a 	add.w	r2, sp, #10
   1e37a:	f89a 1008 	ldrb.w	r1, [sl, #8]
   1e37e:	4844      	ldr	r0, [pc, #272]	; (1e490 <modem_info_string_get+0x1c4>)
   1e380:	f014 ff0d 	bl	3319e <at_params_short_get>
		if (err) {
   1e384:	2800      	cmp	r0, #0
   1e386:	d1cb      	bne.n	1e320 <modem_info_string_get+0x54>
		err = snprintf(buf, buf_size, "%d", param_value);
   1e388:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e38c:	4a41      	ldr	r2, [pc, #260]	; (1e494 <modem_info_string_get+0x1c8>)
   1e38e:	4649      	mov	r1, r9
   1e390:	4630      	mov	r0, r6
   1e392:	f00e ff1d 	bl	2d1d0 <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   1e396:	4548      	cmp	r0, r9
   1e398:	d91f      	bls.n	1e3da <modem_info_string_get+0x10e>
			return -EMSGSIZE;
   1e39a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e39e:	e7bf      	b.n	1e320 <modem_info_string_get+0x54>
			++ip_str_end;
   1e3a0:	3001      	adds	r0, #1
			++ip_cnt;
   1e3a2:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   1e3a4:	4639      	mov	r1, r7
   1e3a6:	f015 fb8a 	bl	33abe <strstr>
   1e3aa:	2800      	cmp	r0, #0
   1e3ac:	d1f8      	bne.n	1e3a0 <modem_info_string_get+0xd4>
   1e3ae:	e7bd      	b.n	1e32c <modem_info_string_get+0x60>
	char *ip_str_end = recv_buf;
   1e3b0:	a804      	add	r0, sp, #16
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   1e3b2:	4f36      	ldr	r7, [pc, #216]	; (1e48c <modem_info_string_get+0x1c0>)
   1e3b4:	e7f6      	b.n	1e3a4 <modem_info_string_get+0xd8>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1e3b6:	2b03      	cmp	r3, #3
   1e3b8:	d10f      	bne.n	1e3da <modem_info_string_get+0x10e>
		len = buf_size - out_buf_len;
   1e3ba:	eba9 0304 	sub.w	r3, r9, r4
   1e3be:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   1e3c0:	1932      	adds	r2, r6, r4
   1e3c2:	ab03      	add	r3, sp, #12
   1e3c4:	f89a 1008 	ldrb.w	r1, [sl, #8]
   1e3c8:	4831      	ldr	r0, [pc, #196]	; (1e490 <modem_info_string_get+0x1c4>)
   1e3ca:	f014 ff15 	bl	331f8 <at_params_string_get>
		if (err != 0) {
   1e3ce:	2800      	cmp	r0, #0
   1e3d0:	d1a6      	bne.n	1e320 <modem_info_string_get+0x54>
		} else if (len >= buf_size) {
   1e3d2:	9b03      	ldr	r3, [sp, #12]
   1e3d4:	454b      	cmp	r3, r9
   1e3d6:	d2e0      	bcs.n	1e39a <modem_info_string_get+0xce>
		buf[len] = 0;
   1e3d8:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   1e3da:	f1b8 0f0e 	cmp.w	r8, #14
   1e3de:	d121      	bne.n	1e424 <modem_info_string_get+0x158>
   1e3e0:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1e3e2:	4630      	mov	r0, r6
   1e3e4:	f7f3 fe4c 	bl	12080 <strlen>
   1e3e8:	1ca3      	adds	r3, r4, #2
   1e3ea:	1ba4      	subs	r4, r4, r6
   1e3ec:	4284      	cmp	r4, r0
   1e3ee:	d30f      	bcc.n	1e410 <modem_info_string_get+0x144>
		if ((len == ICCID_LEN) &&
   1e3f0:	9b03      	ldr	r3, [sp, #12]
   1e3f2:	2b14      	cmp	r3, #20
   1e3f4:	d106      	bne.n	1e404 <modem_info_string_get+0x138>
   1e3f6:	7cf3      	ldrb	r3, [r6, #19]
   1e3f8:	2b46      	cmp	r3, #70	; 0x46
   1e3fa:	d103      	bne.n	1e404 <modem_info_string_get+0x138>
			buf[len - 1] = '\0';
   1e3fc:	2300      	movs	r3, #0
   1e3fe:	74f3      	strb	r3, [r6, #19]
			--len;
   1e400:	2313      	movs	r3, #19
   1e402:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   1e404:	9803      	ldr	r0, [sp, #12]
   1e406:	2800      	cmp	r0, #0
   1e408:	bf08      	it	eq
   1e40a:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   1e40e:	e787      	b.n	1e320 <modem_info_string_get+0x54>
		current_char = buf[i];
   1e410:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   1e414:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   1e418:	461c      	mov	r4, r3
		buf[i] = next_char;
   1e41a:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   1e41e:	f803 2c01 	strb.w	r2, [r3, #-1]
   1e422:	e7de      	b.n	1e3e2 <modem_info_string_get+0x116>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   1e424:	f1b8 0f09 	cmp.w	r8, #9
   1e428:	d1ec      	bne.n	1e404 <modem_info_string_get+0x138>
   1e42a:	2d00      	cmp	r5, #0
   1e42c:	ddea      	ble.n	1e404 <modem_info_string_get+0x138>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   1e42e:	1933      	adds	r3, r6, r4
   1e430:	4919      	ldr	r1, [pc, #100]	; (1e498 <modem_info_string_get+0x1cc>)
   1e432:	4618      	mov	r0, r3
   1e434:	9301      	str	r3, [sp, #4]
   1e436:	f015 fb42 	bl	33abe <strstr>
		if (ip_v6_str) {
   1e43a:	b130      	cbz	r0, 1e44a <modem_info_string_get+0x17e>
			*ip_v6_str = 0;
   1e43c:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   1e43e:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   1e440:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   1e442:	4618      	mov	r0, r3
   1e444:	f7f3 fe1c 	bl	12080 <strlen>
   1e448:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   1e44a:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   1e44c:	2d01      	cmp	r5, #1
		out_buf_len += len;
   1e44e:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   1e450:	d00c      	beq.n	1e46c <modem_info_string_get+0x1a0>
			err = snprintf(&buf[out_buf_len],
   1e452:	eba9 0b04 	sub.w	fp, r9, r4
   1e456:	4a11      	ldr	r2, [pc, #68]	; (1e49c <modem_info_string_get+0x1d0>)
   1e458:	4659      	mov	r1, fp
   1e45a:	1930      	adds	r0, r6, r4
   1e45c:	f00e feb8 	bl	2d1d0 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   1e460:	f1bb 0f01 	cmp.w	fp, #1
   1e464:	d999      	bls.n	1e39a <modem_info_string_get+0xce>
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   1e466:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   1e468:	f107 0b01 	add.w	fp, r7, #1
		if (--ip_cnt) {
   1e46c:	3d01      	subs	r5, #1
   1e46e:	f47f af62 	bne.w	1e336 <modem_info_string_get+0x6a>
			len = out_buf_len;
   1e472:	9403      	str	r4, [sp, #12]
   1e474:	e7c6      	b.n	1e404 <modem_info_string_get+0x138>
		return -EINVAL;
   1e476:	f06f 0015 	mvn.w	r0, #21
   1e47a:	e751      	b.n	1e320 <modem_info_string_get+0x54>
		return -EIO;
   1e47c:	f06f 0004 	mvn.w	r0, #4
   1e480:	e74e      	b.n	1e320 <modem_info_string_get+0x54>
			return -EFAULT;
   1e482:	f06f 000d 	mvn.w	r0, #13
   1e486:	e74b      	b.n	1e320 <modem_info_string_get+0x54>
   1e488:	00034ca4 	.word	0x00034ca4
   1e48c:	0003700a 	.word	0x0003700a
   1e490:	2002223c 	.word	0x2002223c
   1e494:	00036eb8 	.word	0x00036eb8
   1e498:	0003788a 	.word	0x0003788a
   1e49c:	00036d5e 	.word	0x00036d5e

0001e4a0 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   1e4a0:	210a      	movs	r1, #10
   1e4a2:	4801      	ldr	r0, [pc, #4]	; (1e4a8 <modem_info_init+0x8>)
   1e4a4:	f014 bdd0 	b.w	33048 <at_params_list_init>
   1e4a8:	2002223c 	.word	0x2002223c

0001e4ac <write_at_cmd_with_cme_enabled>:
	return err;
}

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
					 enum at_cmd_state *state)
{
   1e4ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e4b0:	4605      	mov	r5, r0
   1e4b2:	460e      	mov	r6, r1
   1e4b4:	4617      	mov	r7, r2
   1e4b6:	4698      	mov	r8, r3
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   1e4b8:	220b      	movs	r2, #11
   1e4ba:	2300      	movs	r3, #0
   1e4bc:	a901      	add	r1, sp, #4
   1e4be:	4814      	ldr	r0, [pc, #80]	; (1e510 <write_at_cmd_with_cme_enabled+0x64>)
   1e4c0:	f7ff f9a0 	bl	1d804 <at_cmd_write>
	if (err) {
   1e4c4:	1e04      	subs	r4, r0, #0
   1e4c6:	d11f      	bne.n	1e508 <write_at_cmd_with_cme_enabled+0x5c>
	return (response[CMEE_STATUS] == '1');
   1e4c8:	f89d 300b 	ldrb.w	r3, [sp, #11]

	if (cmee_was_active < 0) {
		return -EFAULT;
	}

	if (!cmee_was_active) {
   1e4cc:	2b31      	cmp	r3, #49	; 0x31
   1e4ce:	d00b      	beq.n	1e4e8 <write_at_cmd_with_cme_enabled+0x3c>
	return at_cmd_write("AT+CMEE=1", NULL, 0, NULL);
   1e4d0:	4623      	mov	r3, r4
   1e4d2:	4622      	mov	r2, r4
   1e4d4:	4621      	mov	r1, r4
   1e4d6:	480f      	ldr	r0, [pc, #60]	; (1e514 <write_at_cmd_with_cme_enabled+0x68>)
   1e4d8:	f7ff f994 	bl	1d804 <at_cmd_write>
		err = cmee_enable();
		if (err) {
   1e4dc:	4604      	mov	r4, r0
   1e4de:	b120      	cbz	r0, 1e4ea <write_at_cmd_with_cme_enabled+0x3e>
			return err;
		}
	}

	return err;
}
   1e4e0:	4620      	mov	r0, r4
   1e4e2:	b004      	add	sp, #16
   1e4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (response[CMEE_STATUS] == '1');
   1e4e8:	2401      	movs	r4, #1
	err = at_cmd_write(cmd, buf, buf_len, state);
   1e4ea:	4643      	mov	r3, r8
   1e4ec:	463a      	mov	r2, r7
   1e4ee:	4631      	mov	r1, r6
   1e4f0:	4628      	mov	r0, r5
   1e4f2:	f7ff f987 	bl	1d804 <at_cmd_write>
	if (!cmee_was_active) {
   1e4f6:	b92c      	cbnz	r4, 1e504 <write_at_cmd_with_cme_enabled+0x58>
	return at_cmd_write("AT+CMEE=0", NULL, 0, NULL);
   1e4f8:	4623      	mov	r3, r4
   1e4fa:	4622      	mov	r2, r4
   1e4fc:	4621      	mov	r1, r4
   1e4fe:	4806      	ldr	r0, [pc, #24]	; (1e518 <write_at_cmd_with_cme_enabled+0x6c>)
   1e500:	f7ff f980 	bl	1d804 <at_cmd_write>
	err = at_cmd_write(cmd, buf, buf_len, state);
   1e504:	4604      	mov	r4, r0
   1e506:	e7eb      	b.n	1e4e0 <write_at_cmd_with_cme_enabled+0x34>
	if (cmee_was_active < 0) {
   1e508:	daef      	bge.n	1e4ea <write_at_cmd_with_cme_enabled+0x3e>
		return -EFAULT;
   1e50a:	f06f 040d 	mvn.w	r4, #13
   1e50e:	e7e7      	b.n	1e4e0 <write_at_cmd_with_cme_enabled+0x34>
   1e510:	00036f2b 	.word	0x00036f2b
   1e514:	00036f34 	.word	0x00036f34
   1e518:	00036f3e 	.word	0x00036f3e

0001e51c <translate_error>:
{
   1e51c:	b510      	push	{r4, lr}
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   1e51e:	1e04      	subs	r4, r0, #0
   1e520:	dd0d      	ble.n	1e53e <translate_error+0x22>
   1e522:	2903      	cmp	r1, #3
   1e524:	d10b      	bne.n	1e53e <translate_error+0x22>
		switch (err) {
   1e526:	f46f 7300 	mvn.w	r3, #512	; 0x200
   1e52a:	18e3      	adds	r3, r4, r3
   1e52c:	2b05      	cmp	r3, #5
   1e52e:	d80e      	bhi.n	1e54e <translate_error+0x32>
   1e530:	e8df f003 	tbb	[pc, r3]
   1e534:	0d07031d 	.word	0x0d07031d
   1e538:	0a0d      	.short	0x0a0d
			return -EPERM;
   1e53a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1e53e:	4620      	mov	r0, r4
   1e540:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   1e542:	f06f 040b 	mvn.w	r4, #11
   1e546:	e7fa      	b.n	1e53e <translate_error+0x22>
			return -EACCES;
   1e548:	f06f 040c 	mvn.w	r4, #12
   1e54c:	e7f7      	b.n	1e53e <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   1e54e:	234a      	movs	r3, #74	; 0x4a
   1e550:	4a08      	ldr	r2, [pc, #32]	; (1e574 <translate_error+0x58>)
   1e552:	4909      	ldr	r1, [pc, #36]	; (1e578 <translate_error+0x5c>)
   1e554:	4809      	ldr	r0, [pc, #36]	; (1e57c <translate_error+0x60>)
   1e556:	f00f fe31 	bl	2e1bc <printk>
   1e55a:	4621      	mov	r1, r4
   1e55c:	4808      	ldr	r0, [pc, #32]	; (1e580 <translate_error+0x64>)
   1e55e:	f00f fe2d 	bl	2e1bc <printk>
   1e562:	214a      	movs	r1, #74	; 0x4a
   1e564:	4803      	ldr	r0, [pc, #12]	; (1e574 <translate_error+0x58>)
   1e566:	f010 f92a 	bl	2e7be <assert_post_action>
   1e56a:	4c06      	ldr	r4, [pc, #24]	; (1e584 <translate_error+0x68>)
   1e56c:	e7e7      	b.n	1e53e <translate_error+0x22>
			return -ENOENT;
   1e56e:	f06f 0401 	mvn.w	r4, #1
   1e572:	e7e4      	b.n	1e53e <translate_error+0x22>
   1e574:	00036eda 	.word	0x00036eda
   1e578:	00037308 	.word	0x00037308
   1e57c:	00035920 	.word	0x00035920
   1e580:	00036f0e 	.word	0x00036f0e
   1e584:	baadbaad 	.word	0xbaadbaad

0001e588 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgnt_cred_type cred_type,
			 const void *buf, size_t len)
{
   1e588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e58a:	461d      	mov	r5, r3
   1e58c:	b085      	sub	sp, #20
	int err;
	int written;
	enum at_cmd_state state;

	if (buf == NULL || len == 0) {
   1e58e:	4617      	mov	r7, r2
   1e590:	b322      	cbz	r2, 1e5dc <modem_key_mgmt_write+0x54>
   1e592:	b31b      	cbz	r3, 1e5dc <modem_key_mgmt_write+0x54>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d,\"",
   1e594:	4c14      	ldr	r4, [pc, #80]	; (1e5e8 <modem_key_mgmt_write+0x60>)
   1e596:	e9cd 0100 	strd	r0, r1, [sp]
   1e59a:	4b14      	ldr	r3, [pc, #80]	; (1e5ec <modem_key_mgmt_write+0x64>)
   1e59c:	4a14      	ldr	r2, [pc, #80]	; (1e5f0 <modem_key_mgmt_write+0x68>)
   1e59e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e5a2:	4620      	mov	r0, r4
   1e5a4:	f00e fe14 	bl	2d1d0 <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	if (written + len + sizeof("\"") > sizeof(scratch_buf)) {
   1e5a8:	1946      	adds	r6, r0, r5
   1e5aa:	1cb3      	adds	r3, r6, #2
   1e5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1e5b0:	d817      	bhi.n	1e5e2 <modem_key_mgmt_write+0x5a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e5b2:	462a      	mov	r2, r5
   1e5b4:	4639      	mov	r1, r7
   1e5b6:	4420      	add	r0, r4
   1e5b8:	f015 f902 	bl	337c0 <memcpy>
	memcpy(&scratch_buf[written], buf, len);
	written += len;

	memcpy(&scratch_buf[written], "\"", sizeof("\""));

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   1e5bc:	2200      	movs	r2, #0
   1e5be:	4b0d      	ldr	r3, [pc, #52]	; (1e5f4 <modem_key_mgmt_write+0x6c>)
   1e5c0:	4611      	mov	r1, r2
   1e5c2:	881b      	ldrh	r3, [r3, #0]
   1e5c4:	4620      	mov	r0, r4
   1e5c6:	5333      	strh	r3, [r6, r4]
   1e5c8:	f10d 030f 	add.w	r3, sp, #15
   1e5cc:	f7ff ff6e 	bl	1e4ac <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   1e5d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1e5d4:	f7ff ffa2 	bl	1e51c <translate_error>
}
   1e5d8:	b005      	add	sp, #20
   1e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1e5dc:	f06f 0015 	mvn.w	r0, #21
   1e5e0:	e7fa      	b.n	1e5d8 <modem_key_mgmt_write+0x50>
		return -ENOBUFS;
   1e5e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e5e6:	e7f7      	b.n	1e5d8 <modem_key_mgmt_write+0x50>
   1e5e8:	20027e80 	.word	0x20027e80
   1e5ec:	00036ec5 	.word	0x00036ec5
   1e5f0:	00036ecf 	.word	0x00036ecf
   1e5f4:	00035c98 	.word	0x00035c98

0001e5f8 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgnt_cred_type cred_type)
{
   1e5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int written;
	enum at_cmd_state state;

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d",
   1e5fa:	4c0b      	ldr	r4, [pc, #44]	; (1e628 <modem_key_mgmt_delete+0x30>)
   1e5fc:	e9cd 0100 	strd	r0, r1, [sp]
   1e600:	4b0a      	ldr	r3, [pc, #40]	; (1e62c <modem_key_mgmt_delete+0x34>)
   1e602:	4a0b      	ldr	r2, [pc, #44]	; (1e630 <modem_key_mgmt_delete+0x38>)
   1e604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e608:	4620      	mov	r0, r4
   1e60a:	f00e fde1 	bl	2d1d0 <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   1e60e:	2200      	movs	r2, #0
   1e610:	f10d 030f 	add.w	r3, sp, #15
   1e614:	4611      	mov	r1, r2
   1e616:	4620      	mov	r0, r4
   1e618:	f7ff ff48 	bl	1e4ac <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   1e61c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1e620:	f7ff ff7c 	bl	1e51c <translate_error>
}
   1e624:	b004      	add	sp, #16
   1e626:	bd10      	pop	{r4, pc}
   1e628:	20027e80 	.word	0x20027e80
   1e62c:	00036ebb 	.word	0x00036ebb
   1e630:	00036eb2 	.word	0x00036eb2

0001e634 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   1e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   1e638:	4e59      	ldr	r6, [pc, #356]	; (1e7a0 <new_date_time_get+0x16c>)
{
   1e63a:	b095      	sub	sp, #84	; 0x54
   1e63c:	4635      	mov	r5, r6
   1e63e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e642:	4858      	ldr	r0, [pc, #352]	; (1e7a4 <new_date_time_get+0x170>)
   1e644:	f00b f916 	bl	29874 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   1e648:	68b3      	ldr	r3, [r6, #8]
   1e64a:	b19b      	cbz	r3, 1e674 <new_date_time_get+0x40>
   1e64c:	e9d6 2300 	ldrd	r2, r3, [r6]
   1e650:	4313      	orrs	r3, r2
   1e652:	d00f      	beq.n	1e674 <new_date_time_get+0x40>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   1e654:	f014 fe30 	bl	332b8 <k_uptime_get>
   1e658:	2400      	movs	r4, #0
   1e65a:	68b3      	ldr	r3, [r6, #8]
   1e65c:	1ac7      	subs	r7, r0, r3
   1e65e:	eb61 78e3 	sbc.w	r8, r1, r3, asr #31
   1e662:	4b51      	ldr	r3, [pc, #324]	; (1e7a8 <new_date_time_get+0x174>)
   1e664:	42bb      	cmp	r3, r7
   1e666:	eb74 0308 	sbcs.w	r3, r4, r8
   1e66a:	db03      	blt.n	1e674 <new_date_time_get+0x40>
		LOG_DBG("Fallback on NTP server");

		err = time_NTP_server_get();
		if (err == 0) {
			LOG_DBG("Time from NTP server obtained");
			initial_valid_time = true;
   1e66c:	2201      	movs	r2, #1
   1e66e:	4b4f      	ldr	r3, [pc, #316]	; (1e7ac <new_date_time_get+0x178>)
   1e670:	701a      	strb	r2, [r3, #0]
			continue;
   1e672:	e7e4      	b.n	1e63e <new_date_time_get+0xa>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   1e674:	2300      	movs	r3, #0
   1e676:	2221      	movs	r2, #33	; 0x21
   1e678:	a902      	add	r1, sp, #8
   1e67a:	484d      	ldr	r0, [pc, #308]	; (1e7b0 <new_date_time_get+0x17c>)
   1e67c:	f7ff f8c2 	bl	1d804 <at_cmd_write>
	if (err) {
   1e680:	2800      	cmp	r0, #0
   1e682:	d14d      	bne.n	1e720 <new_date_time_get+0xec>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   1e684:	2120      	movs	r1, #32
   1e686:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
			buf[i] = ' ';
   1e68a:	460c      	mov	r4, r1
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   1e68c:	f244 0009 	movw	r0, #16393	; 0x4009
   1e690:	aa02      	add	r2, sp, #8
   1e692:	f812 3b01 	ldrb.w	r3, [r2], #1
   1e696:	3b2c      	subs	r3, #44	; 0x2c
   1e698:	b2db      	uxtb	r3, r3
   1e69a:	2b0e      	cmp	r3, #14
   1e69c:	d805      	bhi.n	1e6aa <new_date_time_get+0x76>
   1e69e:	fa20 f303 	lsr.w	r3, r0, r3
   1e6a2:	07df      	lsls	r7, r3, #31
			buf[i] = ' ';
   1e6a4:	bf48      	it	mi
   1e6a6:	f802 4c01 	strbmi.w	r4, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   1e6aa:	3901      	subs	r1, #1
   1e6ac:	d1f1      	bne.n	1e692 <new_date_time_get+0x5e>
	char *ptr_index = &buf[8];
   1e6ae:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1e6b0:	220a      	movs	r2, #10
   1e6b2:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   1e6b4:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1e6b6:	f00e fe57 	bl	2d368 <strtol>
   1e6ba:	3064      	adds	r0, #100	; 0x64
   1e6bc:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1e6be:	220a      	movs	r2, #10
   1e6c0:	a901      	add	r1, sp, #4
   1e6c2:	9801      	ldr	r0, [sp, #4]
   1e6c4:	f00e fe50 	bl	2d368 <strtol>
   1e6c8:	3801      	subs	r0, #1
   1e6ca:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1e6cc:	220a      	movs	r2, #10
   1e6ce:	a901      	add	r1, sp, #4
   1e6d0:	9801      	ldr	r0, [sp, #4]
   1e6d2:	f00e fe49 	bl	2d368 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1e6d6:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1e6d8:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1e6da:	a901      	add	r1, sp, #4
   1e6dc:	9801      	ldr	r0, [sp, #4]
   1e6de:	f00e fe43 	bl	2d368 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1e6e2:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1e6e4:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1e6e6:	a901      	add	r1, sp, #4
   1e6e8:	9801      	ldr	r0, [sp, #4]
   1e6ea:	f00e fe3d 	bl	2d368 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1e6ee:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1e6f0:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1e6f2:	a901      	add	r1, sp, #4
   1e6f4:	9801      	ldr	r0, [sp, #4]
   1e6f6:	f00e fe37 	bl	2d368 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1e6fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1e6fc:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1e6fe:	2b73      	cmp	r3, #115	; 0x73
   1e700:	d00e      	beq.n	1e720 <new_date_time_get+0xec>
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(&date_time) * 1000;
   1e702:	a80b      	add	r0, sp, #44	; 0x2c
   1e704:	f7f8 fc66 	bl	16fd4 <timeutil_timegm64>
   1e708:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e70c:	fba0 2304 	umull	r2, r3, r0, r4
   1e710:	fb04 3301 	mla	r3, r4, r1, r3
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   1e714:	e9c5 2300 	strd	r2, r3, [r5]
		time_aux.last_date_time_update = k_uptime_get();
   1e718:	f014 fdce 	bl	332b8 <k_uptime_get>
   1e71c:	60a8      	str	r0, [r5, #8]
   1e71e:	e7a5      	b.n	1e66c <new_date_time_get+0x38>
		if (err == 0) {
   1e720:	f04f 0800 	mov.w	r8, #0
	hints.ai_family = AF_INET;
   1e724:	f04f 0901 	mov.w	r9, #1
   1e728:	4c22      	ldr	r4, [pc, #136]	; (1e7b4 <new_date_time_get+0x180>)
   1e72a:	4f23      	ldr	r7, [pc, #140]	; (1e7b8 <new_date_time_get+0x184>)
	return zsock_getaddrinfo(host, service, hints, res);
   1e72c:	f8df a090 	ldr.w	sl, [pc, #144]	; 1e7c0 <new_date_time_get+0x18c>
	hints.ai_protocol = 0;
   1e730:	2300      	movs	r3, #0
   1e732:	2202      	movs	r2, #2
   1e734:	e9c7 2303 	strd	r2, r3, [r7, #12]
	if (server->addr == NULL) {
   1e738:	6863      	ldr	r3, [r4, #4]
	hints.ai_family = AF_INET;
   1e73a:	f8c7 9008 	str.w	r9, [r7, #8]
	if (server->addr == NULL) {
   1e73e:	b1f3      	cbz	r3, 1e77e <new_date_time_get+0x14a>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   1e740:	6863      	ldr	r3, [r4, #4]
   1e742:	a80b      	add	r0, sp, #44	; 0x2c
   1e744:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1e748:	f010 f843 	bl	2e7d2 <sntp_init>
	if (err) {
   1e74c:	4683      	mov	fp, r0
   1e74e:	b930      	cbnz	r0, 1e75e <new_date_time_get+0x12a>
	err = sntp_query(&sntp_ctx, timeout, time);
   1e750:	4a1a      	ldr	r2, [pc, #104]	; (1e7bc <new_date_time_get+0x188>)
   1e752:	f241 3188 	movw	r1, #5000	; 0x1388
   1e756:	a80b      	add	r0, sp, #44	; 0x2c
   1e758:	f7f3 ff0a 	bl	12570 <sntp_query>
   1e75c:	4683      	mov	fp, r0
	sntp_close(&sntp_ctx);
   1e75e:	a80b      	add	r0, sp, #44	; 0x2c
   1e760:	f010 f866 	bl	2e830 <sntp_close>
		if (err) {
   1e764:	f1bb 0f00 	cmp.w	fp, #0
   1e768:	d111      	bne.n	1e78e <new_date_time_get+0x15a>
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   1e76a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e76e:	4b13      	ldr	r3, [pc, #76]	; (1e7bc <new_date_time_get+0x188>)
   1e770:	681a      	ldr	r2, [r3, #0]
   1e772:	6858      	ldr	r0, [r3, #4]
   1e774:	fba2 2301 	umull	r2, r3, r2, r1
   1e778:	fb01 3300 	mla	r3, r1, r0, r3
   1e77c:	e7ca      	b.n	1e714 <new_date_time_get+0xe0>
   1e77e:	1d23      	adds	r3, r4, #4
   1e780:	463a      	mov	r2, r7
   1e782:	4651      	mov	r1, sl
   1e784:	6820      	ldr	r0, [r4, #0]
   1e786:	f010 f858 	bl	2e83a <zsock_getaddrinfo>
		if (err) {
   1e78a:	2800      	cmp	r0, #0
   1e78c:	d0d8      	beq.n	1e740 <new_date_time_get+0x10c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   1e78e:	f108 0801 	add.w	r8, r8, #1
   1e792:	f1b8 0f05 	cmp.w	r8, #5
   1e796:	f104 0408 	add.w	r4, r4, #8
   1e79a:	d1c9      	bne.n	1e730 <new_date_time_get+0xfc>
   1e79c:	e74f      	b.n	1e63e <new_date_time_get+0xa>
   1e79e:	bf00      	nop
   1e7a0:	200208b8 	.word	0x200208b8
   1e7a4:	200205c4 	.word	0x200205c4
   1e7a8:	0036ee80 	.word	0x0036ee80
   1e7ac:	20028e80 	.word	0x20028e80
   1e7b0:	00036d7a 	.word	0x00036d7a
   1e7b4:	20020110 	.word	0x20020110
   1e7b8:	200222fc 	.word	0x200222fc
   1e7bc:	200208a8 	.word	0x200208a8
   1e7c0:	00036f48 	.word	0x00036f48

0001e7c4 <date_time_init>:
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
}

static int date_time_init(struct device *unused)
{
   1e7c4:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   1e7c6:	4c06      	ldr	r4, [pc, #24]	; (1e7e0 <date_time_init+0x1c>)
   1e7c8:	4906      	ldr	r1, [pc, #24]	; (1e7e4 <date_time_init+0x20>)
   1e7ca:	4620      	mov	r0, r4
   1e7cc:	f014 ff1e 	bl	3360c <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1e7d0:	4a05      	ldr	r2, [pc, #20]	; (1e7e8 <date_time_init+0x24>)
   1e7d2:	4621      	mov	r1, r4
   1e7d4:	4805      	ldr	r0, [pc, #20]	; (1e7ec <date_time_init+0x28>)
   1e7d6:	f00b facd 	bl	29d74 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   1e7da:	2000      	movs	r0, #0
   1e7dc:	bd10      	pop	{r4, pc}
   1e7de:	bf00      	nop
   1e7e0:	2002233c 	.word	0x2002233c
   1e7e4:	0001e7f1 	.word	0x0001e7f1
   1e7e8:	0036ee80 	.word	0x0036ee80
   1e7ec:	20027368 	.word	0x20027368

0001e7f0 <date_time_handler>:
{
   1e7f0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1e7f2:	4805      	ldr	r0, [pc, #20]	; (1e808 <date_time_handler+0x18>)
   1e7f4:	f00a fffa 	bl	297ec <z_impl_k_sem_give>
}
   1e7f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e7fc:	4a03      	ldr	r2, [pc, #12]	; (1e80c <date_time_handler+0x1c>)
   1e7fe:	4904      	ldr	r1, [pc, #16]	; (1e810 <date_time_handler+0x20>)
   1e800:	4804      	ldr	r0, [pc, #16]	; (1e814 <date_time_handler+0x24>)
   1e802:	f00b bab7 	b.w	29d74 <k_delayed_work_submit_to_queue>
   1e806:	bf00      	nop
   1e808:	200205c4 	.word	0x200205c4
   1e80c:	0036ee80 	.word	0x0036ee80
   1e810:	2002233c 	.word	0x2002233c
   1e814:	20027368 	.word	0x20027368

0001e818 <date_time_uptime_to_unix_time_ms>:
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(new_date_time) * 1000;
}

int date_time_uptime_to_unix_time_ms(s64_t *uptime)
{
	if (!initial_valid_time) {
   1e818:	4b0e      	ldr	r3, [pc, #56]	; (1e854 <date_time_uptime_to_unix_time_ms+0x3c>)
{
   1e81a:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	if (!initial_valid_time) {
   1e81e:	781b      	ldrb	r3, [r3, #0]
   1e820:	b933      	cbnz	r3, 1e830 <date_time_uptime_to_unix_time_ms+0x18>
   1e822:	480d      	ldr	r0, [pc, #52]	; (1e858 <date_time_uptime_to_unix_time_ms+0x40>)
   1e824:	f00a ffe2 	bl	297ec <z_impl_k_sem_give>
		LOG_ERR("Valid time not currently available, requesting time");
		k_sem_give(&time_fetch_sem);
		return -ENODATA;
   1e828:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;

	return 0;
}
   1e82c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   1e830:	4b0a      	ldr	r3, [pc, #40]	; (1e85c <date_time_uptime_to_unix_time_ms+0x44>)
   1e832:	689a      	ldr	r2, [r3, #8]
   1e834:	e9d3 4500 	ldrd	r4, r5, [r3]
   1e838:	ebb4 0b02 	subs.w	fp, r4, r2
   1e83c:	eb65 7ce2 	sbc.w	ip, r5, r2, asr #31
   1e840:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e844:	eb13 030b 	adds.w	r3, r3, fp
   1e848:	eb4c 0202 	adc.w	r2, ip, r2
   1e84c:	e9c0 3200 	strd	r3, r2, [r0]
	return 0;
   1e850:	2000      	movs	r0, #0
   1e852:	e7eb      	b.n	1e82c <date_time_uptime_to_unix_time_ms+0x14>
   1e854:	20028e80 	.word	0x20028e80
   1e858:	200205c4 	.word	0x200205c4
   1e85c:	200208b8 	.word	0x200208b8

0001e860 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   1e860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e864:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1e866:	4c21      	ldr	r4, [pc, #132]	; (1e8ec <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   1e868:	4e21      	ldr	r6, [pc, #132]	; (1e8f0 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e86a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1e86e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1e8f8 <check_ext_api_requests+0x98>
{
   1e872:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e874:	45a8      	cmp	r8, r5
   1e876:	d803      	bhi.n	1e880 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1e878:	2000      	movs	r0, #0
   1e87a:	b005      	add	sp, #20
   1e87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   1e880:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e882:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1e886:	681f      	ldr	r7, [r3, #0]
   1e888:	ab01      	add	r3, sp, #4
   1e88a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1e88e:	220c      	movs	r2, #12
   1e890:	4619      	mov	r1, r3
   1e892:	4638      	mov	r0, r7
   1e894:	f014 ff86 	bl	337a4 <memcmp>
   1e898:	b990      	cbnz	r0, 1e8c0 <check_ext_api_requests+0x60>
   1e89a:	b18f      	cbz	r7, 1e8c0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1e89c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   1e89e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1e8a0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1e8a2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1e8a4:	4291      	cmp	r1, r2
   1e8a6:	d10b      	bne.n	1e8c0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1e8a8:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   1e8aa:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1e8ac:	4291      	cmp	r1, r2
   1e8ae:	d807      	bhi.n	1e8c0 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   1e8b0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1e8b2:	4291      	cmp	r1, r2
   1e8b4:	d904      	bls.n	1e8c0 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1e8b6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1e8b8:	695b      	ldr	r3, [r3, #20]
   1e8ba:	ea32 0303 	bics.w	r3, r2, r3
   1e8be:	d00a      	beq.n	1e8d6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   1e8c0:	6a27      	ldr	r7, [r4, #32]
   1e8c2:	b167      	cbz	r7, 1e8de <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1e8c4:	480b      	ldr	r0, [pc, #44]	; (1e8f4 <check_ext_api_requests+0x94>)
   1e8c6:	f00f fc79 	bl	2e1bc <printk>
			k_panic();
   1e8ca:	4040      	eors	r0, r0
   1e8cc:	f380 8811 	msr	BASEPRI, r0
   1e8d0:	f04f 0004 	mov.w	r0, #4
   1e8d4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1e8d6:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e8d8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1e8da:	441c      	add	r4, r3
   1e8dc:	e7ca      	b.n	1e874 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1e8de:	4648      	mov	r0, r9
   1e8e0:	f00f fc6c 	bl	2e1bc <printk>
			*ext_api_req->ext_api = NULL;
   1e8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e8e6:	601f      	str	r7, [r3, #0]
   1e8e8:	e7f5      	b.n	1e8d6 <check_ext_api_requests+0x76>
   1e8ea:	bf00      	nop
   1e8ec:	0000c23c 	.word	0x0000c23c
   1e8f0:	00034640 	.word	0x00034640
   1e8f4:	00036fb1 	.word	0x00036fb1
   1e8f8:	00036fda 	.word	0x00036fda

0001e8fc <packet_free_cb>:
   1e8fc:	b510      	push	{r4, lr}
   1e8fe:	4604      	mov	r4, r0
   1e900:	6800      	ldr	r0, [r0, #0]
   1e902:	f004 ff7d 	bl	23800 <rpc_logobj_client_data_free>
   1e906:	68a0      	ldr	r0, [r4, #8]
   1e908:	b118      	cbz	r0, 1e912 <packet_free_cb+0x16>
   1e90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e90e:	f007 bd2d 	b.w	2636c <nrf_free>
   1e912:	bd10      	pop	{r4, pc}

0001e914 <logobj_event_handler>:
   1e914:	b530      	push	{r4, r5, lr}
   1e916:	4b3b      	ldr	r3, [pc, #236]	; (1ea04 <logobj_event_handler+0xf0>)
   1e918:	b085      	sub	sp, #20
   1e91a:	681d      	ldr	r5, [r3, #0]
   1e91c:	2d00      	cmp	r5, #0
   1e91e:	d04c      	beq.n	1e9ba <logobj_event_handler+0xa6>
   1e920:	f248 0302 	movw	r3, #32770	; 0x8002
   1e924:	4299      	cmp	r1, r3
   1e926:	d053      	beq.n	1e9d0 <logobj_event_handler+0xbc>
   1e928:	d91c      	bls.n	1e964 <logobj_event_handler+0x50>
   1e92a:	f248 0303 	movw	r3, #32771	; 0x8003
   1e92e:	4299      	cmp	r1, r3
   1e930:	d05a      	beq.n	1e9e8 <logobj_event_handler+0xd4>
   1e932:	f249 0301 	movw	r3, #36865	; 0x9001
   1e936:	4299      	cmp	r1, r3
   1e938:	d147      	bne.n	1e9ca <logobj_event_handler+0xb6>
   1e93a:	2400      	movs	r4, #0
   1e93c:	6843      	ldr	r3, [r0, #4]
   1e93e:	6802      	ldr	r2, [r0, #0]
   1e940:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1e944:	e9cd 2300 	strd	r2, r3, [sp]
   1e948:	69e8      	ldr	r0, [r5, #28]
   1e94a:	4669      	mov	r1, sp
   1e94c:	6803      	ldr	r3, [r0, #0]
   1e94e:	685b      	ldr	r3, [r3, #4]
   1e950:	4798      	blx	r3
   1e952:	3001      	adds	r0, #1
   1e954:	d04e      	beq.n	1e9f4 <logobj_event_handler+0xe0>
   1e956:	4620      	mov	r0, r4
   1e958:	682b      	ldr	r3, [r5, #0]
   1e95a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1e95e:	602b      	str	r3, [r5, #0]
   1e960:	b005      	add	sp, #20
   1e962:	bd30      	pop	{r4, r5, pc}
   1e964:	f248 0301 	movw	r3, #32769	; 0x8001
   1e968:	4299      	cmp	r1, r3
   1e96a:	d12e      	bne.n	1e9ca <logobj_event_handler+0xb6>
   1e96c:	68c3      	ldr	r3, [r0, #12]
   1e96e:	2b00      	cmp	r3, #0
   1e970:	d135      	bne.n	1e9de <logobj_event_handler+0xca>
   1e972:	6828      	ldr	r0, [r5, #0]
   1e974:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1e978:	d03e      	beq.n	1e9f8 <logobj_event_handler+0xe4>
   1e97a:	682b      	ldr	r3, [r5, #0]
   1e97c:	b29b      	uxth	r3, r3
   1e97e:	2b01      	cmp	r3, #1
   1e980:	d105      	bne.n	1e98e <logobj_event_handler+0x7a>
   1e982:	682b      	ldr	r3, [r5, #0]
   1e984:	0c1b      	lsrs	r3, r3, #16
   1e986:	041b      	lsls	r3, r3, #16
   1e988:	f043 0302 	orr.w	r3, r3, #2
   1e98c:	602b      	str	r3, [r5, #0]
   1e98e:	4b1e      	ldr	r3, [pc, #120]	; (1ea08 <logobj_event_handler+0xf4>)
   1e990:	781a      	ldrb	r2, [r3, #0]
   1e992:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1e996:	2a00      	cmp	r2, #0
   1e998:	d031      	beq.n	1e9fe <logobj_event_handler+0xea>
   1e99a:	4a1c      	ldr	r2, [pc, #112]	; (1ea0c <logobj_event_handler+0xf8>)
   1e99c:	7811      	ldrb	r1, [r2, #0]
   1e99e:	b909      	cbnz	r1, 1e9a4 <logobj_event_handler+0x90>
   1e9a0:	2101      	movs	r1, #1
   1e9a2:	7011      	strb	r1, [r2, #0]
   1e9a4:	2000      	movs	r0, #0
   1e9a6:	7018      	strb	r0, [r3, #0]
   1e9a8:	682b      	ldr	r3, [r5, #0]
   1e9aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1e9ae:	602b      	str	r3, [r5, #0]
   1e9b0:	682b      	ldr	r3, [r5, #0]
   1e9b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1e9b6:	602b      	str	r3, [r5, #0]
   1e9b8:	e7d2      	b.n	1e960 <logobj_event_handler+0x4c>
   1e9ba:	6800      	ldr	r0, [r0, #0]
   1e9bc:	2800      	cmp	r0, #0
   1e9be:	d0cf      	beq.n	1e960 <logobj_event_handler+0x4c>
   1e9c0:	f004 ff1e 	bl	23800 <rpc_logobj_client_data_free>
   1e9c4:	4628      	mov	r0, r5
   1e9c6:	b005      	add	sp, #20
   1e9c8:	bd30      	pop	{r4, r5, pc}
   1e9ca:	2000      	movs	r0, #0
   1e9cc:	b005      	add	sp, #20
   1e9ce:	bd30      	pop	{r4, r5, pc}
   1e9d0:	682b      	ldr	r3, [r5, #0]
   1e9d2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1e9d6:	d00b      	beq.n	1e9f0 <logobj_event_handler+0xdc>
   1e9d8:	68c0      	ldr	r0, [r0, #12]
   1e9da:	2800      	cmp	r0, #0
   1e9dc:	d0e4      	beq.n	1e9a8 <logobj_event_handler+0x94>
   1e9de:	230e      	movs	r3, #14
   1e9e0:	2000      	movs	r0, #0
   1e9e2:	606b      	str	r3, [r5, #4]
   1e9e4:	b005      	add	sp, #20
   1e9e6:	bd30      	pop	{r4, r5, pc}
   1e9e8:	68c3      	ldr	r3, [r0, #12]
   1e9ea:	2b01      	cmp	r3, #1
   1e9ec:	d1a5      	bne.n	1e93a <logobj_event_handler+0x26>
   1e9ee:	e7f6      	b.n	1e9de <logobj_event_handler+0xca>
   1e9f0:	4618      	mov	r0, r3
   1e9f2:	e7b5      	b.n	1e960 <logobj_event_handler+0x4c>
   1e9f4:	2002      	movs	r0, #2
   1e9f6:	e7b3      	b.n	1e960 <logobj_event_handler+0x4c>
   1e9f8:	230e      	movs	r3, #14
   1e9fa:	606b      	str	r3, [r5, #4]
   1e9fc:	e7b0      	b.n	1e960 <logobj_event_handler+0x4c>
   1e9fe:	4a03      	ldr	r2, [pc, #12]	; (1ea0c <logobj_event_handler+0xf8>)
   1ea00:	7011      	strb	r1, [r2, #0]
   1ea02:	e7cf      	b.n	1e9a4 <logobj_event_handler+0x90>
   1ea04:	20022360 	.word	0x20022360
   1ea08:	20028e81 	.word	0x20028e81
   1ea0c:	20028e82 	.word	0x20028e82

0001ea10 <logobj_interface_init>:
   1ea10:	2300      	movs	r3, #0
   1ea12:	b510      	push	{r4, lr}
   1ea14:	4808      	ldr	r0, [pc, #32]	; (1ea38 <logobj_interface_init+0x28>)
   1ea16:	4c09      	ldr	r4, [pc, #36]	; (1ea3c <logobj_interface_init+0x2c>)
   1ea18:	4909      	ldr	r1, [pc, #36]	; (1ea40 <logobj_interface_init+0x30>)
   1ea1a:	4a0a      	ldr	r2, [pc, #40]	; (1ea44 <logobj_interface_init+0x34>)
   1ea1c:	7023      	strb	r3, [r4, #0]
   1ea1e:	6003      	str	r3, [r0, #0]
   1ea20:	700b      	strb	r3, [r1, #0]
   1ea22:	6013      	str	r3, [r2, #0]
   1ea24:	f004 feb0 	bl	23788 <rpc_logobj_client_init>
   1ea28:	b918      	cbnz	r0, 1ea32 <logobj_interface_init+0x22>
   1ea2a:	2201      	movs	r2, #1
   1ea2c:	4b06      	ldr	r3, [pc, #24]	; (1ea48 <logobj_interface_init+0x38>)
   1ea2e:	701a      	strb	r2, [r3, #0]
   1ea30:	bd10      	pop	{r4, pc}
   1ea32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea36:	bd10      	pop	{r4, pc}
   1ea38:	20022360 	.word	0x20022360
   1ea3c:	20028e82 	.word	0x20028e82
   1ea40:	20028e81 	.word	0x20028e81
   1ea44:	2002235c 	.word	0x2002235c
   1ea48:	20028e83 	.word	0x20028e83

0001ea4c <logobj_interface_open>:
   1ea4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea50:	2400      	movs	r4, #0
   1ea52:	4b5b      	ldr	r3, [pc, #364]	; (1ebc0 <logobj_interface_open+0x174>)
   1ea54:	b084      	sub	sp, #16
   1ea56:	781b      	ldrb	r3, [r3, #0]
   1ea58:	9401      	str	r4, [sp, #4]
   1ea5a:	2b00      	cmp	r3, #0
   1ea5c:	f000 809f 	beq.w	1eb9e <logobj_interface_open+0x152>
   1ea60:	2866      	cmp	r0, #102	; 0x66
   1ea62:	4680      	mov	r8, r0
   1ea64:	f040 808f 	bne.w	1eb86 <logobj_interface_open+0x13a>
   1ea68:	2902      	cmp	r1, #2
   1ea6a:	4689      	mov	r9, r1
   1ea6c:	f040 808b 	bne.w	1eb86 <logobj_interface_open+0x13a>
   1ea70:	f240 2305 	movw	r3, #517	; 0x205
   1ea74:	429a      	cmp	r2, r3
   1ea76:	4692      	mov	sl, r2
   1ea78:	f040 8085 	bne.w	1eb86 <logobj_interface_open+0x13a>
   1ea7c:	4f51      	ldr	r7, [pc, #324]	; (1ebc4 <logobj_interface_open+0x178>)
   1ea7e:	683d      	ldr	r5, [r7, #0]
   1ea80:	2d00      	cmp	r5, #0
   1ea82:	f040 8086 	bne.w	1eb92 <logobj_interface_open+0x146>
   1ea86:	4a50      	ldr	r2, [pc, #320]	; (1ebc8 <logobj_interface_open+0x17c>)
   1ea88:	a801      	add	r0, sp, #4
   1ea8a:	f007 ff97 	bl	269bc <interface_socket_allocate>
   1ea8e:	9b01      	ldr	r3, [sp, #4]
   1ea90:	4606      	mov	r6, r0
   1ea92:	2b00      	cmp	r3, #0
   1ea94:	f000 808d 	beq.w	1ebb2 <logobj_interface_open+0x166>
   1ea98:	4629      	mov	r1, r5
   1ea9a:	2204      	movs	r2, #4
   1ea9c:	484b      	ldr	r0, [pc, #300]	; (1ebcc <logobj_interface_open+0x180>)
   1ea9e:	603b      	str	r3, [r7, #0]
   1eaa0:	f014 fec8 	bl	33834 <memset>
   1eaa4:	9c01      	ldr	r4, [sp, #4]
   1eaa6:	4629      	mov	r1, r5
   1eaa8:	e9c4 8903 	strd	r8, r9, [r4, #12]
   1eaac:	f8c4 a014 	str.w	sl, [r4, #20]
   1eab0:	a802      	add	r0, sp, #8
   1eab2:	f004 fe6f 	bl	23794 <rpc_logobj_client_request_alloc>
   1eab6:	2800      	cmp	r0, #0
   1eab8:	d142      	bne.n	1eb40 <logobj_interface_open+0xf4>
   1eaba:	2201      	movs	r2, #1
   1eabc:	2104      	movs	r1, #4
   1eabe:	9b02      	ldr	r3, [sp, #8]
   1eac0:	4d43      	ldr	r5, [pc, #268]	; (1ebd0 <logobj_interface_open+0x184>)
   1eac2:	7358      	strb	r0, [r3, #13]
   1eac4:	7398      	strb	r0, [r3, #14]
   1eac6:	73d8      	strb	r0, [r3, #15]
   1eac8:	7258      	strb	r0, [r3, #9]
   1eaca:	7298      	strb	r0, [r3, #10]
   1eacc:	72d8      	strb	r0, [r3, #11]
   1eace:	7219      	strb	r1, [r3, #8]
   1ead0:	702a      	strb	r2, [r5, #0]
   1ead2:	731a      	strb	r2, [r3, #12]
   1ead4:	6822      	ldr	r2, [r4, #0]
   1ead6:	4618      	mov	r0, r3
   1ead8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1eadc:	6022      	str	r2, [r4, #0]
   1eade:	f247 0101 	movw	r1, #28673	; 0x7001
   1eae2:	f004 fe6f 	bl	237c4 <rpc_logobj_client_request_send>
   1eae6:	bb68      	cbnz	r0, 1eb44 <logobj_interface_open+0xf8>
   1eae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1eaea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1eaee:	2900      	cmp	r1, #0
   1eaf0:	bf08      	it	eq
   1eaf2:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1eaf6:	ab04      	add	r3, sp, #16
   1eaf8:	f843 1d04 	str.w	r1, [r3, #-4]!
   1eafc:	4630      	mov	r0, r6
   1eafe:	4611      	mov	r1, r2
   1eb00:	f008 f80e 	bl	26b20 <interface_socket_wait>
   1eb04:	4604      	mov	r4, r0
   1eb06:	b310      	cbz	r0, 1eb4e <logobj_interface_open+0x102>
   1eb08:	9a01      	ldr	r2, [sp, #4]
   1eb0a:	2e00      	cmp	r6, #0
   1eb0c:	6813      	ldr	r3, [r2, #0]
   1eb0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1eb12:	6013      	str	r3, [r2, #0]
   1eb14:	9a01      	ldr	r2, [sp, #4]
   1eb16:	6813      	ldr	r3, [r2, #0]
   1eb18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1eb1c:	6013      	str	r3, [r2, #0]
   1eb1e:	9a01      	ldr	r2, [sp, #4]
   1eb20:	6813      	ldr	r3, [r2, #0]
   1eb22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1eb26:	6013      	str	r3, [r2, #0]
   1eb28:	da3f      	bge.n	1ebaa <logobj_interface_open+0x15e>
   1eb2a:	2300      	movs	r3, #0
   1eb2c:	4620      	mov	r0, r4
   1eb2e:	603b      	str	r3, [r7, #0]
   1eb30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1eb34:	f7fe f9d0 	bl	1ced8 <bsd_os_errno_set>
   1eb38:	4630      	mov	r0, r6
   1eb3a:	b004      	add	sp, #16
   1eb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb40:	240c      	movs	r4, #12
   1eb42:	e7e1      	b.n	1eb08 <logobj_interface_open+0xbc>
   1eb44:	9802      	ldr	r0, [sp, #8]
   1eb46:	f004 fe53 	bl	237f0 <rpc_logobj_client_message_free>
   1eb4a:	2405      	movs	r4, #5
   1eb4c:	e7dc      	b.n	1eb08 <logobj_interface_open+0xbc>
   1eb4e:	4630      	mov	r0, r6
   1eb50:	f008 f85a 	bl	26c08 <interface_socket_from_handle_get>
   1eb54:	b120      	cbz	r0, 1eb60 <logobj_interface_open+0x114>
   1eb56:	6844      	ldr	r4, [r0, #4]
   1eb58:	b114      	cbz	r4, 1eb60 <logobj_interface_open+0x114>
   1eb5a:	2300      	movs	r3, #0
   1eb5c:	6043      	str	r3, [r0, #4]
   1eb5e:	e7d3      	b.n	1eb08 <logobj_interface_open+0xbc>
   1eb60:	4630      	mov	r0, r6
   1eb62:	9a01      	ldr	r2, [sp, #4]
   1eb64:	6813      	ldr	r3, [r2, #0]
   1eb66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1eb6a:	6013      	str	r3, [r2, #0]
   1eb6c:	9a01      	ldr	r2, [sp, #4]
   1eb6e:	6813      	ldr	r3, [r2, #0]
   1eb70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1eb74:	6013      	str	r3, [r2, #0]
   1eb76:	9a01      	ldr	r2, [sp, #4]
   1eb78:	6813      	ldr	r3, [r2, #0]
   1eb7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1eb7e:	6013      	str	r3, [r2, #0]
   1eb80:	b004      	add	sp, #16
   1eb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb86:	2016      	movs	r0, #22
   1eb88:	f7fe f9a6 	bl	1ced8 <bsd_os_errno_set>
   1eb8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1eb90:	e7d2      	b.n	1eb38 <logobj_interface_open+0xec>
   1eb92:	2001      	movs	r0, #1
   1eb94:	f7fe f9a0 	bl	1ced8 <bsd_os_errno_set>
   1eb98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1eb9c:	e7cc      	b.n	1eb38 <logobj_interface_open+0xec>
   1eb9e:	2070      	movs	r0, #112	; 0x70
   1eba0:	f7fe f99a 	bl	1ced8 <bsd_os_errno_set>
   1eba4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1eba8:	e7c6      	b.n	1eb38 <logobj_interface_open+0xec>
   1ebaa:	4630      	mov	r0, r6
   1ebac:	f007 ff6a 	bl	26a84 <interface_socket_free>
   1ebb0:	e7bb      	b.n	1eb2a <logobj_interface_open+0xde>
   1ebb2:	2018      	movs	r0, #24
   1ebb4:	f7fe f990 	bl	1ced8 <bsd_os_errno_set>
   1ebb8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ebbc:	e7bc      	b.n	1eb38 <logobj_interface_open+0xec>
   1ebbe:	bf00      	nop
   1ebc0:	20028e83 	.word	0x20028e83
   1ebc4:	20022360 	.word	0x20022360
   1ebc8:	0001e8fd 	.word	0x0001e8fd
   1ebcc:	2002235c 	.word	0x2002235c
   1ebd0:	20028e81 	.word	0x20028e81

0001ebd4 <logobj_interface_read>:
   1ebd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ebd8:	b087      	sub	sp, #28
   1ebda:	2900      	cmp	r1, #0
   1ebdc:	d06b      	beq.n	1ecb6 <logobj_interface_read+0xe2>
   1ebde:	2a00      	cmp	r2, #0
   1ebe0:	4617      	mov	r7, r2
   1ebe2:	dd68      	ble.n	1ecb6 <logobj_interface_read+0xe2>
   1ebe4:	461d      	mov	r5, r3
   1ebe6:	4680      	mov	r8, r0
   1ebe8:	460e      	mov	r6, r1
   1ebea:	f008 f80d 	bl	26c08 <interface_socket_from_handle_get>
   1ebee:	4604      	mov	r4, r0
   1ebf0:	2800      	cmp	r0, #0
   1ebf2:	d066      	beq.n	1ecc2 <logobj_interface_read+0xee>
   1ebf4:	bb4d      	cbnz	r5, 1ec4a <logobj_interface_read+0x76>
   1ebf6:	69e0      	ldr	r0, [r4, #28]
   1ebf8:	07aa      	lsls	r2, r5, #30
   1ebfa:	6803      	ldr	r3, [r0, #0]
   1ebfc:	68db      	ldr	r3, [r3, #12]
   1ebfe:	d52d      	bpl.n	1ec5c <logobj_interface_read+0x88>
   1ec00:	4798      	blx	r3
   1ec02:	3001      	adds	r0, #1
   1ec04:	d047      	beq.n	1ec96 <logobj_interface_read+0xc2>
   1ec06:	6823      	ldr	r3, [r4, #0]
   1ec08:	69e0      	ldr	r0, [r4, #28]
   1ec0a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   1ec0e:	d044      	beq.n	1ec9a <logobj_interface_read+0xc6>
   1ec10:	2100      	movs	r1, #0
   1ec12:	6823      	ldr	r3, [r4, #0]
   1ec14:	462a      	mov	r2, r5
   1ec16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ec1a:	6023      	str	r3, [r4, #0]
   1ec1c:	e9cd 1104 	strd	r1, r1, [sp, #16]
   1ec20:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ec24:	6803      	ldr	r3, [r0, #0]
   1ec26:	a902      	add	r1, sp, #8
   1ec28:	689b      	ldr	r3, [r3, #8]
   1ec2a:	4798      	blx	r3
   1ec2c:	4605      	mov	r5, r0
   1ec2e:	69e0      	ldr	r0, [r4, #28]
   1ec30:	6803      	ldr	r3, [r0, #0]
   1ec32:	68db      	ldr	r3, [r3, #12]
   1ec34:	4798      	blx	r3
   1ec36:	3001      	adds	r0, #1
   1ec38:	d003      	beq.n	1ec42 <logobj_interface_read+0x6e>
   1ec3a:	6823      	ldr	r3, [r4, #0]
   1ec3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ec40:	6023      	str	r3, [r4, #0]
   1ec42:	4628      	mov	r0, r5
   1ec44:	b007      	add	sp, #28
   1ec46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ec4a:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   1ec4e:	d1d2      	bne.n	1ebf6 <logobj_interface_read+0x22>
   1ec50:	202d      	movs	r0, #45	; 0x2d
   1ec52:	f7fe f941 	bl	1ced8 <bsd_os_errno_set>
   1ec56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ec5a:	e7f2      	b.n	1ec42 <logobj_interface_read+0x6e>
   1ec5c:	6822      	ldr	r2, [r4, #0]
   1ec5e:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   1ec62:	d1cd      	bne.n	1ec00 <logobj_interface_read+0x2c>
   1ec64:	4798      	blx	r3
   1ec66:	1c43      	adds	r3, r0, #1
   1ec68:	d1cd      	bne.n	1ec06 <logobj_interface_read+0x32>
   1ec6a:	6a22      	ldr	r2, [r4, #32]
   1ec6c:	ab06      	add	r3, sp, #24
   1ec6e:	2a00      	cmp	r2, #0
   1ec70:	bf18      	it	ne
   1ec72:	4610      	movne	r0, r2
   1ec74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ec78:	f843 0d14 	str.w	r0, [r3, #-20]!
   1ec7c:	4611      	mov	r1, r2
   1ec7e:	4640      	mov	r0, r8
   1ec80:	f007 ff4e 	bl	26b20 <interface_socket_wait>
   1ec84:	b158      	cbz	r0, 1ec9e <logobj_interface_read+0xca>
   1ec86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ec8a:	f7fe f925 	bl	1ced8 <bsd_os_errno_set>
   1ec8e:	4628      	mov	r0, r5
   1ec90:	b007      	add	sp, #28
   1ec92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ec96:	2023      	movs	r0, #35	; 0x23
   1ec98:	e7f5      	b.n	1ec86 <logobj_interface_read+0xb2>
   1ec9a:	461d      	mov	r5, r3
   1ec9c:	e7c8      	b.n	1ec30 <logobj_interface_read+0x5c>
   1ec9e:	4640      	mov	r0, r8
   1eca0:	f007 ffb2 	bl	26c08 <interface_socket_from_handle_get>
   1eca4:	4603      	mov	r3, r0
   1eca6:	2800      	cmp	r0, #0
   1eca8:	d0ad      	beq.n	1ec06 <logobj_interface_read+0x32>
   1ecaa:	6840      	ldr	r0, [r0, #4]
   1ecac:	2800      	cmp	r0, #0
   1ecae:	d0aa      	beq.n	1ec06 <logobj_interface_read+0x32>
   1ecb0:	f8c3 9004 	str.w	r9, [r3, #4]
   1ecb4:	e7e7      	b.n	1ec86 <logobj_interface_read+0xb2>
   1ecb6:	2016      	movs	r0, #22
   1ecb8:	f7fe f90e 	bl	1ced8 <bsd_os_errno_set>
   1ecbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ecc0:	e7bf      	b.n	1ec42 <logobj_interface_read+0x6e>
   1ecc2:	2009      	movs	r0, #9
   1ecc4:	f7fe f908 	bl	1ced8 <bsd_os_errno_set>
   1ecc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1eccc:	e7b9      	b.n	1ec42 <logobj_interface_read+0x6e>
   1ecce:	bf00      	nop

0001ecd0 <logobj_interface_write>:
   1ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecd4:	b082      	sub	sp, #8
   1ecd6:	2900      	cmp	r1, #0
   1ecd8:	d06b      	beq.n	1edb2 <logobj_interface_write+0xe2>
   1ecda:	2a04      	cmp	r2, #4
   1ecdc:	d169      	bne.n	1edb2 <logobj_interface_write+0xe2>
   1ecde:	461f      	mov	r7, r3
   1ece0:	4606      	mov	r6, r0
   1ece2:	460d      	mov	r5, r1
   1ece4:	f007 ff90 	bl	26c08 <interface_socket_from_handle_get>
   1ece8:	4604      	mov	r4, r0
   1ecea:	2800      	cmp	r0, #0
   1ecec:	d074      	beq.n	1edd8 <logobj_interface_write+0x108>
   1ecee:	b1e7      	cbz	r7, 1ed2a <logobj_interface_write+0x5a>
   1ecf0:	07b8      	lsls	r0, r7, #30
   1ecf2:	d56b      	bpl.n	1edcc <logobj_interface_write+0xfc>
   1ecf4:	6823      	ldr	r3, [r4, #0]
   1ecf6:	039b      	lsls	r3, r3, #14
   1ecf8:	d564      	bpl.n	1edc4 <logobj_interface_write+0xf4>
   1ecfa:	2700      	movs	r7, #0
   1ecfc:	6823      	ldr	r3, [r4, #0]
   1ecfe:	2100      	movs	r1, #0
   1ed00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1ed04:	6023      	str	r3, [r4, #0]
   1ed06:	4668      	mov	r0, sp
   1ed08:	f8d5 8000 	ldr.w	r8, [r5]
   1ed0c:	f004 fd42 	bl	23794 <rpc_logobj_client_request_alloc>
   1ed10:	b198      	cbz	r0, 1ed3a <logobj_interface_write+0x6a>
   1ed12:	200c      	movs	r0, #12
   1ed14:	6823      	ldr	r3, [r4, #0]
   1ed16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ed1a:	6023      	str	r3, [r4, #0]
   1ed1c:	f7fe f8dc 	bl	1ced8 <bsd_os_errno_set>
   1ed20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed24:	b002      	add	sp, #8
   1ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed2a:	6803      	ldr	r3, [r0, #0]
   1ed2c:	00d9      	lsls	r1, r3, #3
   1ed2e:	d4e1      	bmi.n	1ecf4 <logobj_interface_write+0x24>
   1ed30:	6803      	ldr	r3, [r0, #0]
   1ed32:	039a      	lsls	r2, r3, #14
   1ed34:	d548      	bpl.n	1edc8 <logobj_interface_write+0xf8>
   1ed36:	2701      	movs	r7, #1
   1ed38:	e7e0      	b.n	1ecfc <logobj_interface_write+0x2c>
   1ed3a:	2504      	movs	r5, #4
   1ed3c:	9b00      	ldr	r3, [sp, #0]
   1ed3e:	f247 0103 	movw	r1, #28675	; 0x7003
   1ed42:	f8c3 800c 	str.w	r8, [r3, #12]
   1ed46:	7258      	strb	r0, [r3, #9]
   1ed48:	7298      	strb	r0, [r3, #10]
   1ed4a:	72d8      	strb	r0, [r3, #11]
   1ed4c:	721d      	strb	r5, [r3, #8]
   1ed4e:	4618      	mov	r0, r3
   1ed50:	f004 fd38 	bl	237c4 <rpc_logobj_client_request_send>
   1ed54:	4680      	mov	r8, r0
   1ed56:	bb18      	cbnz	r0, 1eda0 <logobj_interface_write+0xd0>
   1ed58:	b1d7      	cbz	r7, 1ed90 <logobj_interface_write+0xc0>
   1ed5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ed5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ed60:	2900      	cmp	r1, #0
   1ed62:	bf08      	it	eq
   1ed64:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1ed68:	ab02      	add	r3, sp, #8
   1ed6a:	f843 1d04 	str.w	r1, [r3, #-4]!
   1ed6e:	4630      	mov	r0, r6
   1ed70:	4611      	mov	r1, r2
   1ed72:	f007 fed5 	bl	26b20 <interface_socket_wait>
   1ed76:	b120      	cbz	r0, 1ed82 <logobj_interface_write+0xb2>
   1ed78:	6823      	ldr	r3, [r4, #0]
   1ed7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ed7e:	6023      	str	r3, [r4, #0]
   1ed80:	e7cc      	b.n	1ed1c <logobj_interface_write+0x4c>
   1ed82:	4630      	mov	r0, r6
   1ed84:	f007 ff40 	bl	26c08 <interface_socket_from_handle_get>
   1ed88:	4603      	mov	r3, r0
   1ed8a:	b108      	cbz	r0, 1ed90 <logobj_interface_write+0xc0>
   1ed8c:	6840      	ldr	r0, [r0, #4]
   1ed8e:	b9b0      	cbnz	r0, 1edbe <logobj_interface_write+0xee>
   1ed90:	4628      	mov	r0, r5
   1ed92:	6823      	ldr	r3, [r4, #0]
   1ed94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ed98:	6023      	str	r3, [r4, #0]
   1ed9a:	b002      	add	sp, #8
   1ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eda0:	9800      	ldr	r0, [sp, #0]
   1eda2:	f004 fd25 	bl	237f0 <rpc_logobj_client_message_free>
   1eda6:	6823      	ldr	r3, [r4, #0]
   1eda8:	2005      	movs	r0, #5
   1edaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1edae:	6023      	str	r3, [r4, #0]
   1edb0:	e7b4      	b.n	1ed1c <logobj_interface_write+0x4c>
   1edb2:	2016      	movs	r0, #22
   1edb4:	f7fe f890 	bl	1ced8 <bsd_os_errno_set>
   1edb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edbc:	e7b2      	b.n	1ed24 <logobj_interface_write+0x54>
   1edbe:	f8c3 8004 	str.w	r8, [r3, #4]
   1edc2:	e7d9      	b.n	1ed78 <logobj_interface_write+0xa8>
   1edc4:	2073      	movs	r0, #115	; 0x73
   1edc6:	e7a9      	b.n	1ed1c <logobj_interface_write+0x4c>
   1edc8:	2009      	movs	r0, #9
   1edca:	e7a7      	b.n	1ed1c <logobj_interface_write+0x4c>
   1edcc:	202d      	movs	r0, #45	; 0x2d
   1edce:	f7fe f883 	bl	1ced8 <bsd_os_errno_set>
   1edd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edd6:	e7a5      	b.n	1ed24 <logobj_interface_write+0x54>
   1edd8:	2009      	movs	r0, #9
   1edda:	f7fe f87d 	bl	1ced8 <bsd_os_errno_set>
   1edde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ede2:	e79f      	b.n	1ed24 <logobj_interface_write+0x54>

0001ede4 <logobj_interface_setopt>:
   1ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ede6:	2901      	cmp	r1, #1
   1ede8:	b085      	sub	sp, #20
   1edea:	d06d      	beq.n	1eec8 <logobj_interface_setopt+0xe4>
   1edec:	461e      	mov	r6, r3
   1edee:	f240 2305 	movw	r3, #517	; 0x205
   1edf2:	4299      	cmp	r1, r3
   1edf4:	f040 80a0 	bne.w	1ef38 <logobj_interface_setopt+0x154>
   1edf8:	4607      	mov	r7, r0
   1edfa:	4615      	mov	r5, r2
   1edfc:	f007 ff04 	bl	26c08 <interface_socket_from_handle_get>
   1ee00:	4604      	mov	r4, r0
   1ee02:	2800      	cmp	r0, #0
   1ee04:	f000 80c3 	beq.w	1ef8e <logobj_interface_setopt+0x1aa>
   1ee08:	2d01      	cmp	r5, #1
   1ee0a:	d019      	beq.n	1ee40 <logobj_interface_setopt+0x5c>
   1ee0c:	2d02      	cmp	r5, #2
   1ee0e:	d010      	beq.n	1ee32 <logobj_interface_setopt+0x4e>
   1ee10:	252a      	movs	r5, #42	; 0x2a
   1ee12:	6803      	ldr	r3, [r0, #0]
   1ee14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1ee18:	6023      	str	r3, [r4, #0]
   1ee1a:	6823      	ldr	r3, [r4, #0]
   1ee1c:	4628      	mov	r0, r5
   1ee1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1ee22:	6023      	str	r3, [r4, #0]
   1ee24:	f7fe f858 	bl	1ced8 <bsd_os_errno_set>
   1ee28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee2c:	4628      	mov	r0, r5
   1ee2e:	b005      	add	sp, #20
   1ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee32:	b116      	cbz	r6, 1ee3a <logobj_interface_setopt+0x56>
   1ee34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ee36:	2b01      	cmp	r3, #1
   1ee38:	d04e      	beq.n	1eed8 <logobj_interface_setopt+0xf4>
   1ee3a:	6823      	ldr	r3, [r4, #0]
   1ee3c:	2516      	movs	r5, #22
   1ee3e:	e7e9      	b.n	1ee14 <logobj_interface_setopt+0x30>
   1ee40:	2e00      	cmp	r6, #0
   1ee42:	d0fa      	beq.n	1ee3a <logobj_interface_setopt+0x56>
   1ee44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ee46:	2b04      	cmp	r3, #4
   1ee48:	d1f7      	bne.n	1ee3a <logobj_interface_setopt+0x56>
   1ee4a:	2100      	movs	r1, #0
   1ee4c:	a803      	add	r0, sp, #12
   1ee4e:	f004 fca1 	bl	23794 <rpc_logobj_client_request_alloc>
   1ee52:	4605      	mov	r5, r0
   1ee54:	2800      	cmp	r0, #0
   1ee56:	d175      	bne.n	1ef44 <logobj_interface_setopt+0x160>
   1ee58:	9803      	ldr	r0, [sp, #12]
   1ee5a:	2208      	movs	r2, #8
   1ee5c:	4629      	mov	r1, r5
   1ee5e:	300c      	adds	r0, #12
   1ee60:	f014 fce8 	bl	33834 <memset>
   1ee64:	9803      	ldr	r0, [sp, #12]
   1ee66:	4631      	mov	r1, r6
   1ee68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ee6a:	300c      	adds	r0, #12
   1ee6c:	f014 fca8 	bl	337c0 <memcpy>
   1ee70:	2308      	movs	r3, #8
   1ee72:	9803      	ldr	r0, [sp, #12]
   1ee74:	f247 0102 	movw	r1, #28674	; 0x7002
   1ee78:	7203      	strb	r3, [r0, #8]
   1ee7a:	7245      	strb	r5, [r0, #9]
   1ee7c:	7285      	strb	r5, [r0, #10]
   1ee7e:	72c5      	strb	r5, [r0, #11]
   1ee80:	6823      	ldr	r3, [r4, #0]
   1ee82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1ee86:	6023      	str	r3, [r4, #0]
   1ee88:	f004 fc9c 	bl	237c4 <rpc_logobj_client_request_send>
   1ee8c:	2800      	cmp	r0, #0
   1ee8e:	d178      	bne.n	1ef82 <logobj_interface_setopt+0x19e>
   1ee90:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ee92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ee96:	2900      	cmp	r1, #0
   1ee98:	bf08      	it	eq
   1ee9a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1ee9e:	ab04      	add	r3, sp, #16
   1eea0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1eea4:	4638      	mov	r0, r7
   1eea6:	4611      	mov	r1, r2
   1eea8:	f007 fe3a 	bl	26b20 <interface_socket_wait>
   1eeac:	4605      	mov	r5, r0
   1eeae:	2800      	cmp	r0, #0
   1eeb0:	d140      	bne.n	1ef34 <logobj_interface_setopt+0x150>
   1eeb2:	4638      	mov	r0, r7
   1eeb4:	f007 fea8 	bl	26c08 <interface_socket_from_handle_get>
   1eeb8:	2800      	cmp	r0, #0
   1eeba:	d04e      	beq.n	1ef5a <logobj_interface_setopt+0x176>
   1eebc:	6843      	ldr	r3, [r0, #4]
   1eebe:	2b00      	cmp	r3, #0
   1eec0:	d04b      	beq.n	1ef5a <logobj_interface_setopt+0x176>
   1eec2:	6045      	str	r5, [r0, #4]
   1eec4:	461d      	mov	r5, r3
   1eec6:	e035      	b.n	1ef34 <logobj_interface_setopt+0x150>
   1eec8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1eeca:	9400      	str	r4, [sp, #0]
   1eecc:	f007 fec4 	bl	26c58 <interface_socket_setopt>
   1eed0:	4605      	mov	r5, r0
   1eed2:	4628      	mov	r0, r5
   1eed4:	b005      	add	sp, #20
   1eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eed8:	2100      	movs	r1, #0
   1eeda:	a802      	add	r0, sp, #8
   1eedc:	7835      	ldrb	r5, [r6, #0]
   1eede:	f004 fc59 	bl	23794 <rpc_logobj_client_request_alloc>
   1eee2:	bb78      	cbnz	r0, 1ef44 <logobj_interface_setopt+0x160>
   1eee4:	2d01      	cmp	r5, #1
   1eee6:	bf08      	it	eq
   1eee8:	4b2c      	ldreq	r3, [pc, #176]	; (1ef9c <logobj_interface_setopt+0x1b8>)
   1eeea:	f04f 0204 	mov.w	r2, #4
   1eeee:	bf08      	it	eq
   1eef0:	701d      	strbeq	r5, [r3, #0]
   1eef2:	2300      	movs	r3, #0
   1eef4:	9802      	ldr	r0, [sp, #8]
   1eef6:	f247 0101 	movw	r1, #28673	; 0x7001
   1eefa:	7243      	strb	r3, [r0, #9]
   1eefc:	60c5      	str	r5, [r0, #12]
   1eefe:	7283      	strb	r3, [r0, #10]
   1ef00:	72c3      	strb	r3, [r0, #11]
   1ef02:	7202      	strb	r2, [r0, #8]
   1ef04:	6823      	ldr	r3, [r4, #0]
   1ef06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1ef0a:	6023      	str	r3, [r4, #0]
   1ef0c:	f004 fc5a 	bl	237c4 <rpc_logobj_client_request_send>
   1ef10:	4606      	mov	r6, r0
   1ef12:	bb80      	cbnz	r0, 1ef76 <logobj_interface_setopt+0x192>
   1ef14:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ef16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ef1a:	2900      	cmp	r1, #0
   1ef1c:	bf08      	it	eq
   1ef1e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1ef22:	ab04      	add	r3, sp, #16
   1ef24:	f843 1d04 	str.w	r1, [r3, #-4]!
   1ef28:	4638      	mov	r0, r7
   1ef2a:	4611      	mov	r1, r2
   1ef2c:	f007 fdf8 	bl	26b20 <interface_socket_wait>
   1ef30:	4605      	mov	r5, r0
   1ef32:	b150      	cbz	r0, 1ef4a <logobj_interface_setopt+0x166>
   1ef34:	6823      	ldr	r3, [r4, #0]
   1ef36:	e76d      	b.n	1ee14 <logobj_interface_setopt+0x30>
   1ef38:	202a      	movs	r0, #42	; 0x2a
   1ef3a:	f7fd ffcd 	bl	1ced8 <bsd_os_errno_set>
   1ef3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef42:	e773      	b.n	1ee2c <logobj_interface_setopt+0x48>
   1ef44:	6823      	ldr	r3, [r4, #0]
   1ef46:	250c      	movs	r5, #12
   1ef48:	e764      	b.n	1ee14 <logobj_interface_setopt+0x30>
   1ef4a:	4638      	mov	r0, r7
   1ef4c:	f007 fe5c 	bl	26c08 <interface_socket_from_handle_get>
   1ef50:	b140      	cbz	r0, 1ef64 <logobj_interface_setopt+0x180>
   1ef52:	6845      	ldr	r5, [r0, #4]
   1ef54:	b135      	cbz	r5, 1ef64 <logobj_interface_setopt+0x180>
   1ef56:	6046      	str	r6, [r0, #4]
   1ef58:	e7ec      	b.n	1ef34 <logobj_interface_setopt+0x150>
   1ef5a:	4631      	mov	r1, r6
   1ef5c:	2204      	movs	r2, #4
   1ef5e:	4810      	ldr	r0, [pc, #64]	; (1efa0 <logobj_interface_setopt+0x1bc>)
   1ef60:	f014 fc2e 	bl	337c0 <memcpy>
   1ef64:	6823      	ldr	r3, [r4, #0]
   1ef66:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1ef6a:	6023      	str	r3, [r4, #0]
   1ef6c:	6823      	ldr	r3, [r4, #0]
   1ef6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1ef72:	6023      	str	r3, [r4, #0]
   1ef74:	e75a      	b.n	1ee2c <logobj_interface_setopt+0x48>
   1ef76:	9802      	ldr	r0, [sp, #8]
   1ef78:	f004 fc3a 	bl	237f0 <rpc_logobj_client_message_free>
   1ef7c:	2505      	movs	r5, #5
   1ef7e:	6823      	ldr	r3, [r4, #0]
   1ef80:	e748      	b.n	1ee14 <logobj_interface_setopt+0x30>
   1ef82:	9803      	ldr	r0, [sp, #12]
   1ef84:	f004 fc34 	bl	237f0 <rpc_logobj_client_message_free>
   1ef88:	2505      	movs	r5, #5
   1ef8a:	6823      	ldr	r3, [r4, #0]
   1ef8c:	e742      	b.n	1ee14 <logobj_interface_setopt+0x30>
   1ef8e:	2009      	movs	r0, #9
   1ef90:	f7fd ffa2 	bl	1ced8 <bsd_os_errno_set>
   1ef94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef98:	e748      	b.n	1ee2c <logobj_interface_setopt+0x48>
   1ef9a:	bf00      	nop
   1ef9c:	20028e81 	.word	0x20028e81
   1efa0:	2002235c 	.word	0x2002235c

0001efa4 <logobj_interface_getopt>:
   1efa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efa6:	2901      	cmp	r1, #1
   1efa8:	b083      	sub	sp, #12
   1efaa:	9e08      	ldr	r6, [sp, #32]
   1efac:	d030      	beq.n	1f010 <logobj_interface_getopt+0x6c>
   1efae:	461f      	mov	r7, r3
   1efb0:	f240 2305 	movw	r3, #517	; 0x205
   1efb4:	4299      	cmp	r1, r3
   1efb6:	d134      	bne.n	1f022 <logobj_interface_getopt+0x7e>
   1efb8:	4615      	mov	r5, r2
   1efba:	f007 fe25 	bl	26c08 <interface_socket_from_handle_get>
   1efbe:	2800      	cmp	r0, #0
   1efc0:	d037      	beq.n	1f032 <logobj_interface_getopt+0x8e>
   1efc2:	2d01      	cmp	r5, #1
   1efc4:	d015      	beq.n	1eff2 <logobj_interface_getopt+0x4e>
   1efc6:	2d02      	cmp	r5, #2
   1efc8:	d10b      	bne.n	1efe2 <logobj_interface_getopt+0x3e>
   1efca:	b387      	cbz	r7, 1f02e <logobj_interface_getopt+0x8a>
   1efcc:	6833      	ldr	r3, [r6, #0]
   1efce:	b373      	cbz	r3, 1f02e <logobj_interface_getopt+0x8a>
   1efd0:	2300      	movs	r3, #0
   1efd2:	2201      	movs	r2, #1
   1efd4:	4618      	mov	r0, r3
   1efd6:	491a      	ldr	r1, [pc, #104]	; (1f040 <logobj_interface_getopt+0x9c>)
   1efd8:	7809      	ldrb	r1, [r1, #0]
   1efda:	7039      	strb	r1, [r7, #0]
   1efdc:	6032      	str	r2, [r6, #0]
   1efde:	b003      	add	sp, #12
   1efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1efe2:	2009      	movs	r0, #9
   1efe4:	f7fd ff78 	bl	1ced8 <bsd_os_errno_set>
   1efe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efec:	4618      	mov	r0, r3
   1efee:	b003      	add	sp, #12
   1eff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eff2:	b1e7      	cbz	r7, 1f02e <logobj_interface_getopt+0x8a>
   1eff4:	6833      	ldr	r3, [r6, #0]
   1eff6:	2b03      	cmp	r3, #3
   1eff8:	d919      	bls.n	1f02e <logobj_interface_getopt+0x8a>
   1effa:	4638      	mov	r0, r7
   1effc:	2204      	movs	r2, #4
   1effe:	4911      	ldr	r1, [pc, #68]	; (1f044 <logobj_interface_getopt+0xa0>)
   1f000:	f014 fbde 	bl	337c0 <memcpy>
   1f004:	2300      	movs	r3, #0
   1f006:	2204      	movs	r2, #4
   1f008:	4618      	mov	r0, r3
   1f00a:	6032      	str	r2, [r6, #0]
   1f00c:	b003      	add	sp, #12
   1f00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f010:	9600      	str	r6, [sp, #0]
   1f012:	f007 fe67 	bl	26ce4 <interface_socket_getopt>
   1f016:	4603      	mov	r3, r0
   1f018:	2800      	cmp	r0, #0
   1f01a:	d1e3      	bne.n	1efe4 <logobj_interface_getopt+0x40>
   1f01c:	4618      	mov	r0, r3
   1f01e:	b003      	add	sp, #12
   1f020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f022:	202a      	movs	r0, #42	; 0x2a
   1f024:	f7fd ff58 	bl	1ced8 <bsd_os_errno_set>
   1f028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f02c:	e7de      	b.n	1efec <logobj_interface_getopt+0x48>
   1f02e:	2016      	movs	r0, #22
   1f030:	e7d8      	b.n	1efe4 <logobj_interface_getopt+0x40>
   1f032:	2009      	movs	r0, #9
   1f034:	f7fd ff50 	bl	1ced8 <bsd_os_errno_set>
   1f038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f03c:	e7d6      	b.n	1efec <logobj_interface_getopt+0x48>
   1f03e:	bf00      	nop
   1f040:	20028e82 	.word	0x20028e82
   1f044:	2002235c 	.word	0x2002235c

0001f048 <logobj_interface_close>:
   1f048:	b510      	push	{r4, lr}
   1f04a:	4604      	mov	r4, r0
   1f04c:	f007 fddc 	bl	26c08 <interface_socket_from_handle_get>
   1f050:	b138      	cbz	r0, 1f062 <logobj_interface_close+0x1a>
   1f052:	4620      	mov	r0, r4
   1f054:	f007 fd16 	bl	26a84 <interface_socket_free>
   1f058:	2300      	movs	r3, #0
   1f05a:	4a05      	ldr	r2, [pc, #20]	; (1f070 <logobj_interface_close+0x28>)
   1f05c:	4618      	mov	r0, r3
   1f05e:	6013      	str	r3, [r2, #0]
   1f060:	bd10      	pop	{r4, pc}
   1f062:	2009      	movs	r0, #9
   1f064:	f7fd ff38 	bl	1ced8 <bsd_os_errno_set>
   1f068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f06c:	bd10      	pop	{r4, pc}
   1f06e:	bf00      	nop
   1f070:	20022360 	.word	0x20022360

0001f074 <rpc_transport_send>:
   1f074:	f000 bece 	b.w	1fe14 <rpc_transport_ipc_send>

0001f078 <rpc_transport_rpc_alloc>:
   1f078:	f000 bf4e 	b.w	1ff18 <rpc_transport_ipc_tx_rpc_data_alloc>

0001f07c <rpc_transport_data_alloc>:
   1f07c:	f000 bfb4 	b.w	1ffe8 <rpc_transport_ipc_tx_data_alloc>

0001f080 <rpc_transport_rpc_free>:
   1f080:	f000 bdac 	b.w	1fbdc <rpc_transport_ipc_msg_free>

0001f084 <rpc_transport_data_free>:
   1f084:	f000 ba64 	b.w	1f550 <rpc_transport_ipc_data_free>

0001f088 <ipc_trace_init>:
   1f088:	4b01      	ldr	r3, [pc, #4]	; (1f090 <ipc_trace_init+0x8>)
   1f08a:	6018      	str	r0, [r3, #0]
   1f08c:	4770      	bx	lr
   1f08e:	bf00      	nop
   1f090:	20022370 	.word	0x20022370

0001f094 <bsd_os_trace_irq_handler>:
   1f094:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f096:	4b6e      	ldr	r3, [pc, #440]	; (1f250 <bsd_os_trace_irq_handler+0x1bc>)
   1f098:	b083      	sub	sp, #12
   1f09a:	781b      	ldrb	r3, [r3, #0]
   1f09c:	2b00      	cmp	r3, #0
   1f09e:	f000 80d3 	beq.w	1f248 <bsd_os_trace_irq_handler+0x1b4>
   1f0a2:	4b6c      	ldr	r3, [pc, #432]	; (1f254 <bsd_os_trace_irq_handler+0x1c0>)
   1f0a4:	681c      	ldr	r4, [r3, #0]
   1f0a6:	b124      	cbz	r4, 1f0b2 <bsd_os_trace_irq_handler+0x1e>
   1f0a8:	68a3      	ldr	r3, [r4, #8]
   1f0aa:	6862      	ldr	r2, [r4, #4]
   1f0ac:	4293      	cmp	r3, r2
   1f0ae:	f040 808c 	bne.w	1f1ca <bsd_os_trace_irq_handler+0x136>
   1f0b2:	4b69      	ldr	r3, [pc, #420]	; (1f258 <bsd_os_trace_irq_handler+0x1c4>)
   1f0b4:	681c      	ldr	r4, [r3, #0]
   1f0b6:	b11c      	cbz	r4, 1f0c0 <bsd_os_trace_irq_handler+0x2c>
   1f0b8:	68a3      	ldr	r3, [r4, #8]
   1f0ba:	6862      	ldr	r2, [r4, #4]
   1f0bc:	4293      	cmp	r3, r2
   1f0be:	d146      	bne.n	1f14e <bsd_os_trace_irq_handler+0xba>
   1f0c0:	4b66      	ldr	r3, [pc, #408]	; (1f25c <bsd_os_trace_irq_handler+0x1c8>)
   1f0c2:	681c      	ldr	r4, [r3, #0]
   1f0c4:	b11c      	cbz	r4, 1f0ce <bsd_os_trace_irq_handler+0x3a>
   1f0c6:	68a3      	ldr	r3, [r4, #8]
   1f0c8:	6862      	ldr	r2, [r4, #4]
   1f0ca:	4293      	cmp	r3, r2
   1f0cc:	d101      	bne.n	1f0d2 <bsd_os_trace_irq_handler+0x3e>
   1f0ce:	b003      	add	sp, #12
   1f0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f0d2:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f0d6:	f8ad 2000 	strh.w	r2, [sp]
   1f0da:	7822      	ldrb	r2, [r4, #0]
   1f0dc:	466e      	mov	r6, sp
   1f0de:	f88d 2004 	strb.w	r2, [sp, #4]
   1f0e2:	6862      	ldr	r2, [r4, #4]
   1f0e4:	2105      	movs	r1, #5
   1f0e6:	4293      	cmp	r3, r2
   1f0e8:	bf2a      	itet	cs
   1f0ea:	6927      	ldrcs	r7, [r4, #16]
   1f0ec:	1ad7      	subcc	r7, r2, r3
   1f0ee:	1aff      	subcs	r7, r7, r3
   1f0f0:	4293      	cmp	r3, r2
   1f0f2:	bf94      	ite	ls
   1f0f4:	2500      	movls	r5, #0
   1f0f6:	68e5      	ldrhi	r5, [r4, #12]
   1f0f8:	b2bf      	uxth	r7, r7
   1f0fa:	bf88      	it	hi
   1f0fc:	1b52      	subhi	r2, r2, r5
   1f0fe:	4630      	mov	r0, r6
   1f100:	bf88      	it	hi
   1f102:	b295      	uxthhi	r5, r2
   1f104:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f108:	f013 fc6b 	bl	329e2 <bsd_os_trace_put>
   1f10c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f110:	68a0      	ldr	r0, [r4, #8]
   1f112:	f013 fc66 	bl	329e2 <bsd_os_trace_put>
   1f116:	68a3      	ldr	r3, [r4, #8]
   1f118:	6922      	ldr	r2, [r4, #16]
   1f11a:	441f      	add	r7, r3
   1f11c:	4297      	cmp	r7, r2
   1f11e:	bf08      	it	eq
   1f120:	68e3      	ldreq	r3, [r4, #12]
   1f122:	60a7      	str	r7, [r4, #8]
   1f124:	bf08      	it	eq
   1f126:	60a3      	streq	r3, [r4, #8]
   1f128:	2d00      	cmp	r5, #0
   1f12a:	d0d0      	beq.n	1f0ce <bsd_os_trace_irq_handler+0x3a>
   1f12c:	2105      	movs	r1, #5
   1f12e:	4630      	mov	r0, r6
   1f130:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f134:	f013 fc55 	bl	329e2 <bsd_os_trace_put>
   1f138:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f13c:	68e0      	ldr	r0, [r4, #12]
   1f13e:	f013 fc50 	bl	329e2 <bsd_os_trace_put>
   1f142:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f146:	68e3      	ldr	r3, [r4, #12]
   1f148:	4413      	add	r3, r2
   1f14a:	60a3      	str	r3, [r4, #8]
   1f14c:	e7bf      	b.n	1f0ce <bsd_os_trace_irq_handler+0x3a>
   1f14e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f152:	f8ad 2000 	strh.w	r2, [sp]
   1f156:	7822      	ldrb	r2, [r4, #0]
   1f158:	466e      	mov	r6, sp
   1f15a:	f88d 2004 	strb.w	r2, [sp, #4]
   1f15e:	6862      	ldr	r2, [r4, #4]
   1f160:	2105      	movs	r1, #5
   1f162:	4293      	cmp	r3, r2
   1f164:	bf2a      	itet	cs
   1f166:	6927      	ldrcs	r7, [r4, #16]
   1f168:	1ad7      	subcc	r7, r2, r3
   1f16a:	1aff      	subcs	r7, r7, r3
   1f16c:	4293      	cmp	r3, r2
   1f16e:	bf94      	ite	ls
   1f170:	2500      	movls	r5, #0
   1f172:	68e5      	ldrhi	r5, [r4, #12]
   1f174:	b2bf      	uxth	r7, r7
   1f176:	bf88      	it	hi
   1f178:	1b52      	subhi	r2, r2, r5
   1f17a:	4630      	mov	r0, r6
   1f17c:	bf88      	it	hi
   1f17e:	b295      	uxthhi	r5, r2
   1f180:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f184:	f013 fc2d 	bl	329e2 <bsd_os_trace_put>
   1f188:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f18c:	68a0      	ldr	r0, [r4, #8]
   1f18e:	f013 fc28 	bl	329e2 <bsd_os_trace_put>
   1f192:	68a3      	ldr	r3, [r4, #8]
   1f194:	6922      	ldr	r2, [r4, #16]
   1f196:	441f      	add	r7, r3
   1f198:	4297      	cmp	r7, r2
   1f19a:	bf08      	it	eq
   1f19c:	68e3      	ldreq	r3, [r4, #12]
   1f19e:	60a7      	str	r7, [r4, #8]
   1f1a0:	bf08      	it	eq
   1f1a2:	60a3      	streq	r3, [r4, #8]
   1f1a4:	2d00      	cmp	r5, #0
   1f1a6:	d08b      	beq.n	1f0c0 <bsd_os_trace_irq_handler+0x2c>
   1f1a8:	2105      	movs	r1, #5
   1f1aa:	4630      	mov	r0, r6
   1f1ac:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f1b0:	f013 fc17 	bl	329e2 <bsd_os_trace_put>
   1f1b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f1b8:	68e0      	ldr	r0, [r4, #12]
   1f1ba:	f013 fc12 	bl	329e2 <bsd_os_trace_put>
   1f1be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f1c2:	68e3      	ldr	r3, [r4, #12]
   1f1c4:	4413      	add	r3, r2
   1f1c6:	60a3      	str	r3, [r4, #8]
   1f1c8:	e77a      	b.n	1f0c0 <bsd_os_trace_irq_handler+0x2c>
   1f1ca:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f1ce:	f8ad 2000 	strh.w	r2, [sp]
   1f1d2:	7822      	ldrb	r2, [r4, #0]
   1f1d4:	466e      	mov	r6, sp
   1f1d6:	f88d 2004 	strb.w	r2, [sp, #4]
   1f1da:	6862      	ldr	r2, [r4, #4]
   1f1dc:	2105      	movs	r1, #5
   1f1de:	4293      	cmp	r3, r2
   1f1e0:	bf2a      	itet	cs
   1f1e2:	6927      	ldrcs	r7, [r4, #16]
   1f1e4:	1ad7      	subcc	r7, r2, r3
   1f1e6:	1aff      	subcs	r7, r7, r3
   1f1e8:	4293      	cmp	r3, r2
   1f1ea:	bf94      	ite	ls
   1f1ec:	2500      	movls	r5, #0
   1f1ee:	68e5      	ldrhi	r5, [r4, #12]
   1f1f0:	b2bf      	uxth	r7, r7
   1f1f2:	bf88      	it	hi
   1f1f4:	1b52      	subhi	r2, r2, r5
   1f1f6:	4630      	mov	r0, r6
   1f1f8:	bf88      	it	hi
   1f1fa:	b295      	uxthhi	r5, r2
   1f1fc:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f200:	f013 fbef 	bl	329e2 <bsd_os_trace_put>
   1f204:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f208:	68a0      	ldr	r0, [r4, #8]
   1f20a:	f013 fbea 	bl	329e2 <bsd_os_trace_put>
   1f20e:	68a3      	ldr	r3, [r4, #8]
   1f210:	6922      	ldr	r2, [r4, #16]
   1f212:	441f      	add	r7, r3
   1f214:	4297      	cmp	r7, r2
   1f216:	bf08      	it	eq
   1f218:	68e3      	ldreq	r3, [r4, #12]
   1f21a:	60a7      	str	r7, [r4, #8]
   1f21c:	bf08      	it	eq
   1f21e:	60a3      	streq	r3, [r4, #8]
   1f220:	2d00      	cmp	r5, #0
   1f222:	f43f af46 	beq.w	1f0b2 <bsd_os_trace_irq_handler+0x1e>
   1f226:	2105      	movs	r1, #5
   1f228:	4630      	mov	r0, r6
   1f22a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f22e:	f013 fbd8 	bl	329e2 <bsd_os_trace_put>
   1f232:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f236:	68e0      	ldr	r0, [r4, #12]
   1f238:	f013 fbd3 	bl	329e2 <bsd_os_trace_put>
   1f23c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f240:	68e3      	ldr	r3, [r4, #12]
   1f242:	4413      	add	r3, r2
   1f244:	60a3      	str	r3, [r4, #8]
   1f246:	e734      	b.n	1f0b2 <bsd_os_trace_irq_handler+0x1e>
   1f248:	f7fd ff42 	bl	1d0d0 <bsd_os_trace_irq_clear>
   1f24c:	e729      	b.n	1f0a2 <bsd_os_trace_irq_handler+0xe>
   1f24e:	bf00      	nop
   1f250:	20028e84 	.word	0x20028e84
   1f254:	2002236c 	.word	0x2002236c
   1f258:	20022364 	.word	0x20022364
   1f25c:	20022368 	.word	0x20022368

0001f260 <ipc_trace_handle>:
   1f260:	2200      	movs	r2, #0
   1f262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f266:	4bb2      	ldr	r3, [pc, #712]	; (1f530 <ipc_trace_handle+0x2d0>)
   1f268:	b083      	sub	sp, #12
   1f26a:	681b      	ldr	r3, [r3, #0]
   1f26c:	6919      	ldr	r1, [r3, #16]
   1f26e:	695c      	ldr	r4, [r3, #20]
   1f270:	7c18      	ldrb	r0, [r3, #16]
   1f272:	741a      	strb	r2, [r3, #16]
   1f274:	7c58      	ldrb	r0, [r3, #17]
   1f276:	745a      	strb	r2, [r3, #17]
   1f278:	7c98      	ldrb	r0, [r3, #18]
   1f27a:	749a      	strb	r2, [r3, #18]
   1f27c:	7cd8      	ldrb	r0, [r3, #19]
   1f27e:	74da      	strb	r2, [r3, #19]
   1f280:	7d18      	ldrb	r0, [r3, #20]
   1f282:	751a      	strb	r2, [r3, #20]
   1f284:	7d58      	ldrb	r0, [r3, #21]
   1f286:	755a      	strb	r2, [r3, #21]
   1f288:	7d98      	ldrb	r0, [r3, #22]
   1f28a:	759a      	strb	r2, [r3, #22]
   1f28c:	7dd8      	ldrb	r0, [r3, #23]
   1f28e:	75da      	strb	r2, [r3, #23]
   1f290:	b1a9      	cbz	r1, 1f2be <ipc_trace_handle+0x5e>
   1f292:	3901      	subs	r1, #1
   1f294:	2903      	cmp	r1, #3
   1f296:	d812      	bhi.n	1f2be <ipc_trace_handle+0x5e>
   1f298:	e8df f001 	tbb	[pc, r1]
   1f29c:	1402a97c 	.word	0x1402a97c
   1f2a0:	2501      	movs	r5, #1
   1f2a2:	2003      	movs	r0, #3
   1f2a4:	2200      	movs	r2, #0
   1f2a6:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1f2aa:	4ca2      	ldr	r4, [pc, #648]	; (1f534 <ipc_trace_handle+0x2d4>)
   1f2ac:	7025      	strb	r5, [r4, #0]
   1f2ae:	7a1c      	ldrb	r4, [r3, #8]
   1f2b0:	7218      	strb	r0, [r3, #8]
   1f2b2:	7a58      	ldrb	r0, [r3, #9]
   1f2b4:	725a      	strb	r2, [r3, #9]
   1f2b6:	7a98      	ldrb	r0, [r3, #10]
   1f2b8:	729a      	strb	r2, [r3, #10]
   1f2ba:	7ada      	ldrb	r2, [r3, #11]
   1f2bc:	72d9      	strb	r1, [r3, #11]
   1f2be:	b003      	add	sp, #12
   1f2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2c4:	2104      	movs	r1, #4
   1f2c6:	2200      	movs	r2, #0
   1f2c8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1f2cc:	7a1c      	ldrb	r4, [r3, #8]
   1f2ce:	7219      	strb	r1, [r3, #8]
   1f2d0:	7a59      	ldrb	r1, [r3, #9]
   1f2d2:	725a      	strb	r2, [r3, #9]
   1f2d4:	4997      	ldr	r1, [pc, #604]	; (1f534 <ipc_trace_handle+0x2d4>)
   1f2d6:	7a9c      	ldrb	r4, [r3, #10]
   1f2d8:	729a      	strb	r2, [r3, #10]
   1f2da:	7adc      	ldrb	r4, [r3, #11]
   1f2dc:	72d8      	strb	r0, [r3, #11]
   1f2de:	700a      	strb	r2, [r1, #0]
   1f2e0:	780b      	ldrb	r3, [r1, #0]
   1f2e2:	2b00      	cmp	r3, #0
   1f2e4:	f000 809f 	beq.w	1f426 <ipc_trace_handle+0x1c6>
   1f2e8:	4b93      	ldr	r3, [pc, #588]	; (1f538 <ipc_trace_handle+0x2d8>)
   1f2ea:	681c      	ldr	r4, [r3, #0]
   1f2ec:	b124      	cbz	r4, 1f2f8 <ipc_trace_handle+0x98>
   1f2ee:	68a3      	ldr	r3, [r4, #8]
   1f2f0:	6862      	ldr	r2, [r4, #4]
   1f2f2:	4293      	cmp	r3, r2
   1f2f4:	f040 80d9 	bne.w	1f4aa <ipc_trace_handle+0x24a>
   1f2f8:	4b90      	ldr	r3, [pc, #576]	; (1f53c <ipc_trace_handle+0x2dc>)
   1f2fa:	681c      	ldr	r4, [r3, #0]
   1f2fc:	b124      	cbz	r4, 1f308 <ipc_trace_handle+0xa8>
   1f2fe:	68a3      	ldr	r3, [r4, #8]
   1f300:	6862      	ldr	r2, [r4, #4]
   1f302:	4293      	cmp	r3, r2
   1f304:	f040 8092 	bne.w	1f42c <ipc_trace_handle+0x1cc>
   1f308:	4b8d      	ldr	r3, [pc, #564]	; (1f540 <ipc_trace_handle+0x2e0>)
   1f30a:	681c      	ldr	r4, [r3, #0]
   1f30c:	2c00      	cmp	r4, #0
   1f30e:	d0d6      	beq.n	1f2be <ipc_trace_handle+0x5e>
   1f310:	68a3      	ldr	r3, [r4, #8]
   1f312:	6862      	ldr	r2, [r4, #4]
   1f314:	4293      	cmp	r3, r2
   1f316:	d0d2      	beq.n	1f2be <ipc_trace_handle+0x5e>
   1f318:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f31c:	f8ad 2000 	strh.w	r2, [sp]
   1f320:	7822      	ldrb	r2, [r4, #0]
   1f322:	466e      	mov	r6, sp
   1f324:	f88d 2004 	strb.w	r2, [sp, #4]
   1f328:	6862      	ldr	r2, [r4, #4]
   1f32a:	2105      	movs	r1, #5
   1f32c:	4293      	cmp	r3, r2
   1f32e:	bf2a      	itet	cs
   1f330:	6927      	ldrcs	r7, [r4, #16]
   1f332:	1ad7      	subcc	r7, r2, r3
   1f334:	1aff      	subcs	r7, r7, r3
   1f336:	4293      	cmp	r3, r2
   1f338:	bf94      	ite	ls
   1f33a:	2500      	movls	r5, #0
   1f33c:	68e5      	ldrhi	r5, [r4, #12]
   1f33e:	b2bf      	uxth	r7, r7
   1f340:	bf88      	it	hi
   1f342:	1b52      	subhi	r2, r2, r5
   1f344:	4630      	mov	r0, r6
   1f346:	bf88      	it	hi
   1f348:	b295      	uxthhi	r5, r2
   1f34a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f34e:	f013 fb48 	bl	329e2 <bsd_os_trace_put>
   1f352:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f356:	68a0      	ldr	r0, [r4, #8]
   1f358:	f013 fb43 	bl	329e2 <bsd_os_trace_put>
   1f35c:	68a3      	ldr	r3, [r4, #8]
   1f35e:	6922      	ldr	r2, [r4, #16]
   1f360:	441f      	add	r7, r3
   1f362:	4297      	cmp	r7, r2
   1f364:	bf08      	it	eq
   1f366:	68e3      	ldreq	r3, [r4, #12]
   1f368:	60a7      	str	r7, [r4, #8]
   1f36a:	bf08      	it	eq
   1f36c:	60a3      	streq	r3, [r4, #8]
   1f36e:	2d00      	cmp	r5, #0
   1f370:	d0a5      	beq.n	1f2be <ipc_trace_handle+0x5e>
   1f372:	2105      	movs	r1, #5
   1f374:	4630      	mov	r0, r6
   1f376:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f37a:	f013 fb32 	bl	329e2 <bsd_os_trace_put>
   1f37e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f382:	68e0      	ldr	r0, [r4, #12]
   1f384:	f013 fb2d 	bl	329e2 <bsd_os_trace_put>
   1f388:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f38c:	68e3      	ldr	r3, [r4, #12]
   1f38e:	4413      	add	r3, r2
   1f390:	60a3      	str	r3, [r4, #8]
   1f392:	e794      	b.n	1f2be <ipc_trace_handle+0x5e>
   1f394:	4a67      	ldr	r2, [pc, #412]	; (1f534 <ipc_trace_handle+0x2d4>)
   1f396:	7811      	ldrb	r1, [r2, #0]
   1f398:	b109      	cbz	r1, 1f39e <ipc_trace_handle+0x13e>
   1f39a:	2100      	movs	r1, #0
   1f39c:	7011      	strb	r1, [r2, #0]
   1f39e:	68a5      	ldr	r5, [r4, #8]
   1f3a0:	2d00      	cmp	r5, #0
   1f3a2:	d03b      	beq.n	1f41c <ipc_trace_handle+0x1bc>
   1f3a4:	f04f 0c00 	mov.w	ip, #0
   1f3a8:	f8df a190 	ldr.w	sl, [pc, #400]	; 1f53c <ipc_trace_handle+0x2dc>
   1f3ac:	f8df b188 	ldr.w	fp, [pc, #392]	; 1f538 <ipc_trace_handle+0x2d8>
   1f3b0:	4963      	ldr	r1, [pc, #396]	; (1f540 <ipc_trace_handle+0x2e0>)
   1f3b2:	46e1      	mov	r9, ip
   1f3b4:	4666      	mov	r6, ip
   1f3b6:	4662      	mov	r2, ip
   1f3b8:	f8d1 e000 	ldr.w	lr, [r1]
   1f3bc:	f8da 8000 	ldr.w	r8, [sl]
   1f3c0:	f8db 7000 	ldr.w	r7, [fp]
   1f3c4:	e008      	b.n	1f3d8 <ipc_trace_handle+0x178>
   1f3c6:	2963      	cmp	r1, #99	; 0x63
   1f3c8:	d016      	beq.n	1f3f8 <ipc_trace_handle+0x198>
   1f3ca:	2961      	cmp	r1, #97	; 0x61
   1f3cc:	bf04      	itt	eq
   1f3ce:	4607      	moveq	r7, r0
   1f3d0:	2601      	moveq	r6, #1
   1f3d2:	3201      	adds	r2, #1
   1f3d4:	42aa      	cmp	r2, r5
   1f3d6:	d013      	beq.n	1f400 <ipc_trace_handle+0x1a0>
   1f3d8:	1c91      	adds	r1, r2, #2
   1f3da:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1f3de:	6848      	ldr	r0, [r1, #4]
   1f3e0:	7801      	ldrb	r1, [r0, #0]
   1f3e2:	2962      	cmp	r1, #98	; 0x62
   1f3e4:	d1ef      	bne.n	1f3c6 <ipc_trace_handle+0x166>
   1f3e6:	4680      	mov	r8, r0
   1f3e8:	f04f 0901 	mov.w	r9, #1
   1f3ec:	e7f1      	b.n	1f3d2 <ipc_trace_handle+0x172>
   1f3ee:	f7fd fe67 	bl	1d0c0 <bsd_os_trace_irq_set>
   1f3f2:	b003      	add	sp, #12
   1f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3f8:	4686      	mov	lr, r0
   1f3fa:	f04f 0c01 	mov.w	ip, #1
   1f3fe:	e7e8      	b.n	1f3d2 <ipc_trace_handle+0x172>
   1f400:	2e00      	cmp	r6, #0
   1f402:	f040 8091 	bne.w	1f528 <ipc_trace_handle+0x2c8>
   1f406:	f1b9 0f00 	cmp.w	r9, #0
   1f40a:	d001      	beq.n	1f410 <ipc_trace_handle+0x1b0>
   1f40c:	f8ca 8000 	str.w	r8, [sl]
   1f410:	f1bc 0f00 	cmp.w	ip, #0
   1f414:	d002      	beq.n	1f41c <ipc_trace_handle+0x1bc>
   1f416:	4a4a      	ldr	r2, [pc, #296]	; (1f540 <ipc_trace_handle+0x2e0>)
   1f418:	f8c2 e000 	str.w	lr, [r2]
   1f41c:	2001      	movs	r0, #1
   1f41e:	2200      	movs	r2, #0
   1f420:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1f424:	e743      	b.n	1f2ae <ipc_trace_handle+0x4e>
   1f426:	f7fd fe53 	bl	1d0d0 <bsd_os_trace_irq_clear>
   1f42a:	e75d      	b.n	1f2e8 <ipc_trace_handle+0x88>
   1f42c:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f430:	f8ad 2000 	strh.w	r2, [sp]
   1f434:	7822      	ldrb	r2, [r4, #0]
   1f436:	466e      	mov	r6, sp
   1f438:	f88d 2004 	strb.w	r2, [sp, #4]
   1f43c:	6862      	ldr	r2, [r4, #4]
   1f43e:	2105      	movs	r1, #5
   1f440:	4293      	cmp	r3, r2
   1f442:	bf2a      	itet	cs
   1f444:	6927      	ldrcs	r7, [r4, #16]
   1f446:	1ad7      	subcc	r7, r2, r3
   1f448:	1aff      	subcs	r7, r7, r3
   1f44a:	4293      	cmp	r3, r2
   1f44c:	bf94      	ite	ls
   1f44e:	2500      	movls	r5, #0
   1f450:	68e5      	ldrhi	r5, [r4, #12]
   1f452:	b2bf      	uxth	r7, r7
   1f454:	bf88      	it	hi
   1f456:	1b52      	subhi	r2, r2, r5
   1f458:	4630      	mov	r0, r6
   1f45a:	bf88      	it	hi
   1f45c:	b295      	uxthhi	r5, r2
   1f45e:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f462:	f013 fabe 	bl	329e2 <bsd_os_trace_put>
   1f466:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f46a:	68a0      	ldr	r0, [r4, #8]
   1f46c:	f013 fab9 	bl	329e2 <bsd_os_trace_put>
   1f470:	68a3      	ldr	r3, [r4, #8]
   1f472:	6922      	ldr	r2, [r4, #16]
   1f474:	441f      	add	r7, r3
   1f476:	4297      	cmp	r7, r2
   1f478:	bf08      	it	eq
   1f47a:	68e3      	ldreq	r3, [r4, #12]
   1f47c:	60a7      	str	r7, [r4, #8]
   1f47e:	bf08      	it	eq
   1f480:	60a3      	streq	r3, [r4, #8]
   1f482:	2d00      	cmp	r5, #0
   1f484:	f43f af40 	beq.w	1f308 <ipc_trace_handle+0xa8>
   1f488:	2105      	movs	r1, #5
   1f48a:	4630      	mov	r0, r6
   1f48c:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f490:	f013 faa7 	bl	329e2 <bsd_os_trace_put>
   1f494:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f498:	68e0      	ldr	r0, [r4, #12]
   1f49a:	f013 faa2 	bl	329e2 <bsd_os_trace_put>
   1f49e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f4a2:	68e3      	ldr	r3, [r4, #12]
   1f4a4:	4413      	add	r3, r2
   1f4a6:	60a3      	str	r3, [r4, #8]
   1f4a8:	e72e      	b.n	1f308 <ipc_trace_handle+0xa8>
   1f4aa:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f4ae:	f8ad 2000 	strh.w	r2, [sp]
   1f4b2:	7822      	ldrb	r2, [r4, #0]
   1f4b4:	466e      	mov	r6, sp
   1f4b6:	f88d 2004 	strb.w	r2, [sp, #4]
   1f4ba:	6862      	ldr	r2, [r4, #4]
   1f4bc:	2105      	movs	r1, #5
   1f4be:	4293      	cmp	r3, r2
   1f4c0:	bf2a      	itet	cs
   1f4c2:	6927      	ldrcs	r7, [r4, #16]
   1f4c4:	1ad7      	subcc	r7, r2, r3
   1f4c6:	1aff      	subcs	r7, r7, r3
   1f4c8:	4293      	cmp	r3, r2
   1f4ca:	bf94      	ite	ls
   1f4cc:	2500      	movls	r5, #0
   1f4ce:	68e5      	ldrhi	r5, [r4, #12]
   1f4d0:	b2bf      	uxth	r7, r7
   1f4d2:	bf88      	it	hi
   1f4d4:	1b52      	subhi	r2, r2, r5
   1f4d6:	4630      	mov	r0, r6
   1f4d8:	bf88      	it	hi
   1f4da:	b295      	uxthhi	r5, r2
   1f4dc:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f4e0:	f013 fa7f 	bl	329e2 <bsd_os_trace_put>
   1f4e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f4e8:	68a0      	ldr	r0, [r4, #8]
   1f4ea:	f013 fa7a 	bl	329e2 <bsd_os_trace_put>
   1f4ee:	68a3      	ldr	r3, [r4, #8]
   1f4f0:	6922      	ldr	r2, [r4, #16]
   1f4f2:	441f      	add	r7, r3
   1f4f4:	4297      	cmp	r7, r2
   1f4f6:	bf08      	it	eq
   1f4f8:	68e3      	ldreq	r3, [r4, #12]
   1f4fa:	60a7      	str	r7, [r4, #8]
   1f4fc:	bf08      	it	eq
   1f4fe:	60a3      	streq	r3, [r4, #8]
   1f500:	2d00      	cmp	r5, #0
   1f502:	f43f aef9 	beq.w	1f2f8 <ipc_trace_handle+0x98>
   1f506:	2105      	movs	r1, #5
   1f508:	4630      	mov	r0, r6
   1f50a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f50e:	f013 fa68 	bl	329e2 <bsd_os_trace_put>
   1f512:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f516:	68e0      	ldr	r0, [r4, #12]
   1f518:	f013 fa63 	bl	329e2 <bsd_os_trace_put>
   1f51c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f520:	68e3      	ldr	r3, [r4, #12]
   1f522:	4413      	add	r3, r2
   1f524:	60a3      	str	r3, [r4, #8]
   1f526:	e6e7      	b.n	1f2f8 <ipc_trace_handle+0x98>
   1f528:	f8cb 7000 	str.w	r7, [fp]
   1f52c:	e76b      	b.n	1f406 <ipc_trace_handle+0x1a6>
   1f52e:	bf00      	nop
   1f530:	20022370 	.word	0x20022370
   1f534:	20028e84 	.word	0x20028e84
   1f538:	2002236c 	.word	0x2002236c
   1f53c:	20022364 	.word	0x20022364
   1f540:	20022368 	.word	0x20022368

0001f544 <rpc_trace_coredump_in_progress>:
   1f544:	4b01      	ldr	r3, [pc, #4]	; (1f54c <rpc_trace_coredump_in_progress+0x8>)
   1f546:	7818      	ldrb	r0, [r3, #0]
   1f548:	4770      	bx	lr
   1f54a:	bf00      	nop
   1f54c:	20028e84 	.word	0x20028e84

0001f550 <rpc_transport_ipc_data_free>:
   1f550:	b510      	push	{r4, lr}
   1f552:	4b0e      	ldr	r3, [pc, #56]	; (1f58c <rpc_transport_ipc_data_free+0x3c>)
   1f554:	4604      	mov	r4, r0
   1f556:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f55a:	4413      	add	r3, r2
   1f55c:	4298      	cmp	r0, r3
   1f55e:	d20d      	bcs.n	1f57c <rpc_transport_ipc_data_free+0x2c>
   1f560:	4282      	cmp	r2, r0
   1f562:	d80b      	bhi.n	1f57c <rpc_transport_ipc_data_free+0x2c>
   1f564:	f000 fd10 	bl	1ff88 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1f568:	b158      	cbz	r0, 1f582 <rpc_transport_ipc_data_free+0x32>
   1f56a:	4a09      	ldr	r2, [pc, #36]	; (1f590 <rpc_transport_ipc_data_free+0x40>)
   1f56c:	6084      	str	r4, [r0, #8]
   1f56e:	6002      	str	r2, [r0, #0]
   1f570:	f7ff fd80 	bl	1f074 <rpc_transport_send>
   1f574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f578:	f7fd bd92 	b.w	1d0a0 <bsd_os_application_irq_set>
   1f57c:	4620      	mov	r0, r4
   1f57e:	f006 ff0b 	bl	26398 <nrf_shared_free>
   1f582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f586:	f7fd bd8b 	b.w	1d0a0 <bsd_os_application_irq_set>
   1f58a:	bf00      	nop
   1f58c:	20022374 	.word	0x20022374
   1f590:	00020001 	.word	0x00020001

0001f594 <rpc_transport_ipc_init>:
   1f594:	b188      	cbz	r0, 1f5ba <rpc_transport_ipc_init+0x26>
   1f596:	b510      	push	{r4, lr}
   1f598:	b082      	sub	sp, #8
   1f59a:	aa01      	add	r2, sp, #4
   1f59c:	4669      	mov	r1, sp
   1f59e:	4604      	mov	r4, r0
   1f5a0:	f000 fb4e 	bl	1fc40 <rpc_transport_ipc_tx_init>
   1f5a4:	4602      	mov	r2, r0
   1f5a6:	b148      	cbz	r0, 1f5bc <rpc_transport_ipc_init+0x28>
   1f5a8:	4b12      	ldr	r3, [pc, #72]	; (1f5f4 <rpc_transport_ipc_init+0x60>)
   1f5aa:	3428      	adds	r4, #40	; 0x28
   1f5ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   1f5b0:	e883 0003 	stmia.w	r3, {r0, r1}
   1f5b4:	4610      	mov	r0, r2
   1f5b6:	b002      	add	sp, #8
   1f5b8:	bd10      	pop	{r4, pc}
   1f5ba:	e7fe      	b.n	1f5ba <rpc_transport_ipc_init+0x26>
   1f5bc:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f5c0:	4620      	mov	r0, r4
   1f5c2:	f000 f9e9 	bl	1f998 <rpc_transport_ipc_rx_init>
   1f5c6:	4602      	mov	r2, r0
   1f5c8:	4b0a      	ldr	r3, [pc, #40]	; (1f5f4 <rpc_transport_ipc_init+0x60>)
   1f5ca:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1f5ce:	c903      	ldmia	r1, {r0, r1}
   1f5d0:	e883 0003 	stmia.w	r3, {r0, r1}
   1f5d4:	2a00      	cmp	r2, #0
   1f5d6:	d1ed      	bne.n	1f5b4 <rpc_transport_ipc_init+0x20>
   1f5d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f5dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f5de:	4906      	ldr	r1, [pc, #24]	; (1f5f8 <rpc_transport_ipc_init+0x64>)
   1f5e0:	015b      	lsls	r3, r3, #5
   1f5e2:	b2db      	uxtb	r3, r3
   1f5e4:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1f5e8:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1f5ec:	6048      	str	r0, [r1, #4]
   1f5ee:	4610      	mov	r0, r2
   1f5f0:	b002      	add	sp, #8
   1f5f2:	bd10      	pop	{r4, pc}
   1f5f4:	20022374 	.word	0x20022374
   1f5f8:	e000e100 	.word	0xe000e100

0001f5fc <bsd_os_application_irq_handler>:
   1f5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f600:	f7fd fd56 	bl	1d0b0 <bsd_os_application_irq_clear>
   1f604:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1f6dc <bsd_os_application_irq_handler+0xe0>
   1f608:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1f6e0 <bsd_os_application_irq_handler+0xe4>
   1f60c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1f6e4 <bsd_os_application_irq_handler+0xe8>
   1f610:	f108 0908 	add.w	r9, r8, #8
   1f614:	f858 7b04 	ldr.w	r7, [r8], #4
   1f618:	6839      	ldr	r1, [r7, #0]
   1f61a:	b361      	cbz	r1, 1f676 <bsd_os_application_irq_handler+0x7a>
   1f61c:	2400      	movs	r4, #0
   1f61e:	e002      	b.n	1f626 <bsd_os_application_irq_handler+0x2a>
   1f620:	3401      	adds	r4, #1
   1f622:	428c      	cmp	r4, r1
   1f624:	d227      	bcs.n	1f676 <bsd_os_application_irq_handler+0x7a>
   1f626:	00e6      	lsls	r6, r4, #3
   1f628:	19bd      	adds	r5, r7, r6
   1f62a:	68aa      	ldr	r2, [r5, #8]
   1f62c:	2a00      	cmp	r2, #0
   1f62e:	d0f7      	beq.n	1f620 <bsd_os_application_irq_handler+0x24>
   1f630:	686a      	ldr	r2, [r5, #4]
   1f632:	b2d2      	uxtb	r2, r2
   1f634:	2a01      	cmp	r2, #1
   1f636:	d1f3      	bne.n	1f620 <bsd_os_application_irq_handler+0x24>
   1f638:	6868      	ldr	r0, [r5, #4]
   1f63a:	f8bb 2000 	ldrh.w	r2, [fp]
   1f63e:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1f642:	d1ed      	bne.n	1f620 <bsd_os_application_irq_handler+0x24>
   1f644:	68a8      	ldr	r0, [r5, #8]
   1f646:	6841      	ldr	r1, [r0, #4]
   1f648:	b2c9      	uxtb	r1, r1
   1f64a:	2902      	cmp	r1, #2
   1f64c:	d02c      	beq.n	1f6a8 <bsd_os_application_irq_handler+0xac>
   1f64e:	2901      	cmp	r1, #1
   1f650:	d015      	beq.n	1f67e <bsd_os_application_irq_handler+0x82>
   1f652:	3604      	adds	r6, #4
   1f654:	59b9      	ldr	r1, [r7, r6]
   1f656:	3201      	adds	r2, #1
   1f658:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1f65c:	f041 0103 	orr.w	r1, r1, #3
   1f660:	51b9      	str	r1, [r7, r6]
   1f662:	f8ab 2000 	strh.w	r2, [fp]
   1f666:	f7fd fd1b 	bl	1d0a0 <bsd_os_application_irq_set>
   1f66a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1f66e:	3401      	adds	r4, #1
   1f670:	6839      	ldr	r1, [r7, #0]
   1f672:	428c      	cmp	r4, r1
   1f674:	d3d7      	bcc.n	1f626 <bsd_os_application_irq_handler+0x2a>
   1f676:	45c1      	cmp	r9, r8
   1f678:	d1cc      	bne.n	1f614 <bsd_os_application_irq_handler+0x18>
   1f67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f67e:	6801      	ldr	r1, [r0, #0]
   1f680:	0c09      	lsrs	r1, r1, #16
   1f682:	f003 f855 	bl	22730 <rpc_handle_ctrl_message>
   1f686:	2801      	cmp	r0, #1
   1f688:	d014      	beq.n	1f6b4 <bsd_os_application_irq_handler+0xb8>
   1f68a:	d310      	bcc.n	1f6ae <bsd_os_application_irq_handler+0xb2>
   1f68c:	2802      	cmp	r0, #2
   1f68e:	d007      	beq.n	1f6a0 <bsd_os_application_irq_handler+0xa4>
   1f690:	2203      	movs	r2, #3
   1f692:	4b11      	ldr	r3, [pc, #68]	; (1f6d8 <bsd_os_application_irq_handler+0xdc>)
   1f694:	4610      	mov	r0, r2
   1f696:	f8ca 2000 	str.w	r2, [sl]
   1f69a:	601a      	str	r2, [r3, #0]
   1f69c:	f005 fc28 	bl	24ef0 <rpc_transport_ipc_fault_handler>
   1f6a0:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1f6a4:	6839      	ldr	r1, [r7, #0]
   1f6a6:	e7bb      	b.n	1f620 <bsd_os_application_irq_handler+0x24>
   1f6a8:	f003 f85a 	bl	22760 <rpc_handle_data_message>
   1f6ac:	e7eb      	b.n	1f686 <bsd_os_application_irq_handler+0x8a>
   1f6ae:	f8bb 2000 	ldrh.w	r2, [fp]
   1f6b2:	e7ce      	b.n	1f652 <bsd_os_application_irq_handler+0x56>
   1f6b4:	686a      	ldr	r2, [r5, #4]
   1f6b6:	f8bb 1000 	ldrh.w	r1, [fp]
   1f6ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1f6be:	f042 0202 	orr.w	r2, r2, #2
   1f6c2:	606a      	str	r2, [r5, #4]
   1f6c4:	1c4a      	adds	r2, r1, #1
   1f6c6:	f8ab 2000 	strh.w	r2, [fp]
   1f6ca:	f7fd fce9 	bl	1d0a0 <bsd_os_application_irq_set>
   1f6ce:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1f6d2:	6839      	ldr	r1, [r7, #0]
   1f6d4:	e7a4      	b.n	1f620 <bsd_os_application_irq_handler+0x24>
   1f6d6:	bf00      	nop
   1f6d8:	2002237c 	.word	0x2002237c
   1f6dc:	20022384 	.word	0x20022384
   1f6e0:	2002745c 	.word	0x2002745c
   1f6e4:	2002238c 	.word	0x2002238c

0001f6e8 <IPC_IRQHandler>:
   1f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6ec:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1f6f0:	4d95      	ldr	r5, [pc, #596]	; (1f948 <__kernel_ram_size+0x108>)
   1f6f2:	4c96      	ldr	r4, [pc, #600]	; (1f94c <__kernel_ram_size+0x10c>)
   1f6f4:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1f6f8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1f6fc:	b092      	sub	sp, #72	; 0x48
   1f6fe:	0618      	lsls	r0, r3, #24
   1f700:	d50b      	bpl.n	1f71a <IPC_IRQHandler+0x32>
   1f702:	f7ff fdad 	bl	1f260 <ipc_trace_handle>
   1f706:	f7ff ff1d 	bl	1f544 <rpc_trace_coredump_in_progress>
   1f70a:	2800      	cmp	r0, #0
   1f70c:	d159      	bne.n	1f7c2 <IPC_IRQHandler+0xda>
   1f70e:	4b90      	ldr	r3, [pc, #576]	; (1f950 <__kernel_ram_size+0x110>)
   1f710:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1f714:	681b      	ldr	r3, [r3, #0]
   1f716:	9301      	str	r3, [sp, #4]
   1f718:	9b01      	ldr	r3, [sp, #4]
   1f71a:	4c8c      	ldr	r4, [pc, #560]	; (1f94c <__kernel_ram_size+0x10c>)
   1f71c:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   1f720:	f015 0501 	ands.w	r5, r5, #1
   1f724:	d11f      	bne.n	1f766 <IPC_IRQHandler+0x7e>
   1f726:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1f72a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   1f72e:	d14d      	bne.n	1f7cc <IPC_IRQHandler+0xe4>
   1f730:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   1f734:	0751      	lsls	r1, r2, #29
   1f736:	d50e      	bpl.n	1f756 <IPC_IRQHandler+0x6e>
   1f738:	4a86      	ldr	r2, [pc, #536]	; (1f954 <__kernel_ram_size+0x114>)
   1f73a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1f73e:	6812      	ldr	r2, [r2, #0]
   1f740:	4b85      	ldr	r3, [pc, #532]	; (1f958 <__kernel_ram_size+0x118>)
   1f742:	9206      	str	r2, [sp, #24]
   1f744:	9a06      	ldr	r2, [sp, #24]
   1f746:	681a      	ldr	r2, [r3, #0]
   1f748:	2a02      	cmp	r2, #2
   1f74a:	f000 80e0 	beq.w	1f90e <__kernel_ram_size+0xce>
   1f74e:	681a      	ldr	r2, [r3, #0]
   1f750:	2a01      	cmp	r2, #1
   1f752:	f000 80c1 	beq.w	1f8d8 <__kernel_ram_size+0x98>
   1f756:	4b7d      	ldr	r3, [pc, #500]	; (1f94c <__kernel_ram_size+0x10c>)
   1f758:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1f75c:	06d2      	lsls	r2, r2, #27
   1f75e:	d424      	bmi.n	1f7aa <IPC_IRQHandler+0xc2>
   1f760:	b012      	add	sp, #72	; 0x48
   1f762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f766:	2100      	movs	r1, #0
   1f768:	f248 0202 	movw	r2, #32770	; 0x8002
   1f76c:	4b7b      	ldr	r3, [pc, #492]	; (1f95c <__kernel_ram_size+0x11c>)
   1f76e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f772:	681b      	ldr	r3, [r3, #0]
   1f774:	9302      	str	r3, [sp, #8]
   1f776:	9b02      	ldr	r3, [sp, #8]
   1f778:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   1f77c:	4293      	cmp	r3, r2
   1f77e:	f000 80cf 	beq.w	1f920 <__kernel_ram_size+0xe0>
   1f782:	f200 808d 	bhi.w	1f8a0 <__kernel_ram_size+0x60>
   1f786:	2b00      	cmp	r3, #0
   1f788:	f000 80c4 	beq.w	1f914 <__kernel_ram_size+0xd4>
   1f78c:	2b02      	cmp	r3, #2
   1f78e:	f240 8098 	bls.w	1f8c2 <__kernel_ram_size+0x82>
   1f792:	f248 0201 	movw	r2, #32769	; 0x8001
   1f796:	4293      	cmp	r3, r2
   1f798:	f040 80bc 	bne.w	1f914 <__kernel_ram_size+0xd4>
   1f79c:	2003      	movs	r0, #3
   1f79e:	2207      	movs	r2, #7
   1f7a0:	496d      	ldr	r1, [pc, #436]	; (1f958 <__kernel_ram_size+0x118>)
   1f7a2:	4b6f      	ldr	r3, [pc, #444]	; (1f960 <__kernel_ram_size+0x120>)
   1f7a4:	6008      	str	r0, [r1, #0]
   1f7a6:	601a      	str	r2, [r3, #0]
   1f7a8:	e7da      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f7aa:	2100      	movs	r1, #0
   1f7ac:	4a6d      	ldr	r2, [pc, #436]	; (1f964 <__kernel_ram_size+0x124>)
   1f7ae:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1f7b2:	6813      	ldr	r3, [r2, #0]
   1f7b4:	9307      	str	r3, [sp, #28]
   1f7b6:	9b07      	ldr	r3, [sp, #28]
   1f7b8:	b012      	add	sp, #72	; 0x48
   1f7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f7be:	f7fd bc6f 	b.w	1d0a0 <bsd_os_application_irq_set>
   1f7c2:	23e0      	movs	r3, #224	; 0xe0
   1f7c4:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1f7c8:	606e      	str	r6, [r5, #4]
   1f7ca:	e7c9      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f7cc:	4b66      	ldr	r3, [pc, #408]	; (1f968 <__kernel_ram_size+0x128>)
   1f7ce:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   1f7d2:	681b      	ldr	r3, [r3, #0]
   1f7d4:	2704      	movs	r7, #4
   1f7d6:	9305      	str	r3, [sp, #20]
   1f7d8:	9b05      	ldr	r3, [sp, #20]
   1f7da:	f000 fc0f 	bl	1fffc <rpc_transport_ipc_tx_suspend>
   1f7de:	2210      	movs	r2, #16
   1f7e0:	f04f 0c01 	mov.w	ip, #1
   1f7e4:	4961      	ldr	r1, [pc, #388]	; (1f96c <__kernel_ram_size+0x12c>)
   1f7e6:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   1f7ea:	680b      	ldr	r3, [r1, #0]
   1f7ec:	9303      	str	r3, [sp, #12]
   1f7ee:	4b60      	ldr	r3, [pc, #384]	; (1f970 <__kernel_ram_size+0x130>)
   1f7f0:	9803      	ldr	r0, [sp, #12]
   1f7f2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   1f7f6:	6818      	ldr	r0, [r3, #0]
   1f7f8:	9004      	str	r0, [sp, #16]
   1f7fa:	485e      	ldr	r0, [pc, #376]	; (1f974 <__kernel_ram_size+0x134>)
   1f7fc:	9e04      	ldr	r6, [sp, #16]
   1f7fe:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
   1f802:	6800      	ldr	r0, [r0, #0]
   1f804:	2640      	movs	r6, #64	; 0x40
   1f806:	9008      	str	r0, [sp, #32]
   1f808:	485b      	ldr	r0, [pc, #364]	; (1f978 <__kernel_ram_size+0x138>)
   1f80a:	f8dd e020 	ldr.w	lr, [sp, #32]
   1f80e:	f8c4 5598 	str.w	r5, [r4, #1432]	; 0x598
   1f812:	f8d0 e000 	ldr.w	lr, [r0]
   1f816:	2080      	movs	r0, #128	; 0x80
   1f818:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   1f81c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1f820:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   1f824:	f8d1 e000 	ldr.w	lr, [r1]
   1f828:	2105      	movs	r1, #5
   1f82a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   1f82e:	f8df e160 	ldr.w	lr, [pc, #352]	; 1f990 <__kernel_ram_size+0x150>
   1f832:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1f836:	f8c4 55a8 	str.w	r5, [r4, #1448]	; 0x5a8
   1f83a:	f8de e000 	ldr.w	lr, [lr]
   1f83e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1f842:	f8df e150 	ldr.w	lr, [pc, #336]	; 1f994 <__kernel_ram_size+0x154>
   1f846:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1f84a:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
   1f84e:	f8de e000 	ldr.w	lr, [lr]
   1f852:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
   1f856:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   1f85a:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
   1f85e:	f8d3 c000 	ldr.w	ip, [r3]
   1f862:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   1f866:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1f86a:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
   1f86e:	681f      	ldr	r7, [r3, #0]
   1f870:	970e      	str	r7, [sp, #56]	; 0x38
   1f872:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1f874:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   1f878:	681a      	ldr	r2, [r3, #0]
   1f87a:	920f      	str	r2, [sp, #60]	; 0x3c
   1f87c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f87e:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   1f882:	681e      	ldr	r6, [r3, #0]
   1f884:	4a34      	ldr	r2, [pc, #208]	; (1f958 <__kernel_ram_size+0x118>)
   1f886:	9610      	str	r6, [sp, #64]	; 0x40
   1f888:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1f88a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1f88e:	6818      	ldr	r0, [r3, #0]
   1f890:	4b3a      	ldr	r3, [pc, #232]	; (1f97c <__kernel_ram_size+0x13c>)
   1f892:	9011      	str	r0, [sp, #68]	; 0x44
   1f894:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f896:	801d      	strh	r5, [r3, #0]
   1f898:	6011      	str	r1, [r2, #0]
   1f89a:	b012      	add	sp, #72	; 0x48
   1f89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f8a0:	4a37      	ldr	r2, [pc, #220]	; (1f980 <__kernel_ram_size+0x140>)
   1f8a2:	4293      	cmp	r3, r2
   1f8a4:	d82a      	bhi.n	1f8fc <__kernel_ram_size+0xbc>
   1f8a6:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1f8aa:	d82a      	bhi.n	1f902 <__kernel_ram_size+0xc2>
   1f8ac:	f248 0203 	movw	r2, #32771	; 0x8003
   1f8b0:	4293      	cmp	r3, r2
   1f8b2:	d12f      	bne.n	1f914 <__kernel_ram_size+0xd4>
   1f8b4:	2003      	movs	r0, #3
   1f8b6:	2204      	movs	r2, #4
   1f8b8:	4927      	ldr	r1, [pc, #156]	; (1f958 <__kernel_ram_size+0x118>)
   1f8ba:	4b29      	ldr	r3, [pc, #164]	; (1f960 <__kernel_ram_size+0x120>)
   1f8bc:	6008      	str	r0, [r1, #0]
   1f8be:	601a      	str	r2, [r3, #0]
   1f8c0:	e74e      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f8c2:	2303      	movs	r3, #3
   1f8c4:	4618      	mov	r0, r3
   1f8c6:	4924      	ldr	r1, [pc, #144]	; (1f958 <__kernel_ram_size+0x118>)
   1f8c8:	4a25      	ldr	r2, [pc, #148]	; (1f960 <__kernel_ram_size+0x120>)
   1f8ca:	600b      	str	r3, [r1, #0]
   1f8cc:	6013      	str	r3, [r2, #0]
   1f8ce:	b012      	add	sp, #72	; 0x48
   1f8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f8d4:	f005 bb0c 	b.w	24ef0 <rpc_transport_ipc_fault_handler>
   1f8d8:	4a2a      	ldr	r2, [pc, #168]	; (1f984 <__kernel_ram_size+0x144>)
   1f8da:	482b      	ldr	r0, [pc, #172]	; (1f988 <__kernel_ram_size+0x148>)
   1f8dc:	6811      	ldr	r1, [r2, #0]
   1f8de:	688a      	ldr	r2, [r1, #8]
   1f8e0:	6002      	str	r2, [r0, #0]
   1f8e2:	6849      	ldr	r1, [r1, #4]
   1f8e4:	6041      	str	r1, [r0, #4]
   1f8e6:	b312      	cbz	r2, 1f92e <__kernel_ram_size+0xee>
   1f8e8:	b309      	cbz	r1, 1f92e <__kernel_ram_size+0xee>
   1f8ea:	6812      	ldr	r2, [r2, #0]
   1f8ec:	2a10      	cmp	r2, #16
   1f8ee:	d824      	bhi.n	1f93a <__kernel_ram_size+0xfa>
   1f8f0:	680a      	ldr	r2, [r1, #0]
   1f8f2:	2a10      	cmp	r2, #16
   1f8f4:	d821      	bhi.n	1f93a <__kernel_ram_size+0xfa>
   1f8f6:	2202      	movs	r2, #2
   1f8f8:	601a      	str	r2, [r3, #0]
   1f8fa:	e72c      	b.n	1f756 <IPC_IRQHandler+0x6e>
   1f8fc:	4a23      	ldr	r2, [pc, #140]	; (1f98c <__kernel_ram_size+0x14c>)
   1f8fe:	4293      	cmp	r3, r2
   1f900:	d108      	bne.n	1f914 <__kernel_ram_size+0xd4>
   1f902:	2003      	movs	r0, #3
   1f904:	4914      	ldr	r1, [pc, #80]	; (1f958 <__kernel_ram_size+0x118>)
   1f906:	4a16      	ldr	r2, [pc, #88]	; (1f960 <__kernel_ram_size+0x120>)
   1f908:	6008      	str	r0, [r1, #0]
   1f90a:	6013      	str	r3, [r2, #0]
   1f90c:	e728      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f90e:	f7fd fbc7 	bl	1d0a0 <bsd_os_application_irq_set>
   1f912:	e720      	b.n	1f756 <IPC_IRQHandler+0x6e>
   1f914:	2303      	movs	r3, #3
   1f916:	4910      	ldr	r1, [pc, #64]	; (1f958 <__kernel_ram_size+0x118>)
   1f918:	4a11      	ldr	r2, [pc, #68]	; (1f960 <__kernel_ram_size+0x120>)
   1f91a:	600b      	str	r3, [r1, #0]
   1f91c:	6013      	str	r3, [r2, #0]
   1f91e:	e71f      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f920:	2003      	movs	r0, #3
   1f922:	2206      	movs	r2, #6
   1f924:	490c      	ldr	r1, [pc, #48]	; (1f958 <__kernel_ram_size+0x118>)
   1f926:	4b0e      	ldr	r3, [pc, #56]	; (1f960 <__kernel_ram_size+0x120>)
   1f928:	6008      	str	r0, [r1, #0]
   1f92a:	601a      	str	r2, [r3, #0]
   1f92c:	e718      	b.n	1f760 <IPC_IRQHandler+0x78>
   1f92e:	2003      	movs	r0, #3
   1f930:	2110      	movs	r1, #16
   1f932:	4a0b      	ldr	r2, [pc, #44]	; (1f960 <__kernel_ram_size+0x120>)
   1f934:	6018      	str	r0, [r3, #0]
   1f936:	6011      	str	r1, [r2, #0]
   1f938:	e70d      	b.n	1f756 <IPC_IRQHandler+0x6e>
   1f93a:	2003      	movs	r0, #3
   1f93c:	f24c 0106 	movw	r1, #49158	; 0xc006
   1f940:	4a07      	ldr	r2, [pc, #28]	; (1f960 <__kernel_ram_size+0x120>)
   1f942:	6018      	str	r0, [r3, #0]
   1f944:	6011      	str	r1, [r2, #0]
   1f946:	e706      	b.n	1f756 <IPC_IRQHandler+0x6e>
   1f948:	e000e100 	.word	0xe000e100
   1f94c:	4002a000 	.word	0x4002a000
   1f950:	4002a11c 	.word	0x4002a11c
   1f954:	4002a108 	.word	0x4002a108
   1f958:	2002238c 	.word	0x2002238c
   1f95c:	4002a100 	.word	0x4002a100
   1f960:	2002237c 	.word	0x2002237c
   1f964:	4002a110 	.word	0x4002a110
   1f968:	4002a118 	.word	0x4002a118
   1f96c:	4002a5a0 	.word	0x4002a5a0
   1f970:	4002a308 	.word	0x4002a308
   1f974:	4002a590 	.word	0x4002a590
   1f978:	4002a598 	.word	0x4002a598
   1f97c:	2002745c 	.word	0x2002745c
   1f980:	04400004 	.word	0x04400004
   1f984:	20022390 	.word	0x20022390
   1f988:	20022384 	.word	0x20022384
   1f98c:	05500001 	.word	0x05500001
   1f990:	4002a5a8 	.word	0x4002a5a8
   1f994:	4002a5ac 	.word	0x4002a5ac

0001f998 <rpc_transport_ipc_rx_init>:
   1f998:	2800      	cmp	r0, #0
   1f99a:	f000 8108 	beq.w	1fbae <rpc_transport_ipc_rx_init+0x216>
   1f99e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9a2:	6805      	ldr	r5, [r0, #0]
   1f9a4:	b097      	sub	sp, #92	; 0x5c
   1f9a6:	2d00      	cmp	r5, #0
   1f9a8:	f000 80f7 	beq.w	1fb9a <rpc_transport_ipc_rx_init+0x202>
   1f9ac:	6883      	ldr	r3, [r0, #8]
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	f000 80f3 	beq.w	1fb9a <rpc_transport_ipc_rx_init+0x202>
   1f9b4:	6906      	ldr	r6, [r0, #16]
   1f9b6:	2e00      	cmp	r6, #0
   1f9b8:	f000 80ef 	beq.w	1fb9a <rpc_transport_ipc_rx_init+0x202>
   1f9bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1f9be:	2c00      	cmp	r4, #0
   1f9c0:	f000 80eb 	beq.w	1fb9a <rpc_transport_ipc_rx_init+0x202>
   1f9c4:	6844      	ldr	r4, [r0, #4]
   1f9c6:	2c1b      	cmp	r4, #27
   1f9c8:	f240 80ec 	bls.w	1fba4 <rpc_transport_ipc_rx_init+0x20c>
   1f9cc:	68c4      	ldr	r4, [r0, #12]
   1f9ce:	2c0b      	cmp	r4, #11
   1f9d0:	f240 80e8 	bls.w	1fba4 <rpc_transport_ipc_rx_init+0x20c>
   1f9d4:	f8d0 c014 	ldr.w	ip, [r0, #20]
   1f9d8:	f1bc 0f17 	cmp.w	ip, #23
   1f9dc:	f240 80e2 	bls.w	1fba4 <rpc_transport_ipc_rx_init+0x20c>
   1f9e0:	2700      	movs	r7, #0
   1f9e2:	4604      	mov	r4, r0
   1f9e4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1fbcc <rpc_transport_ipc_rx_init+0x234>
   1f9e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1f9ea:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1fbd0 <rpc_transport_ipc_rx_init+0x238>
   1f9ee:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1fbd4 <rpc_transport_ipc_rx_init+0x23c>
   1f9f2:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 1fbd8 <rpc_transport_ipc_rx_init+0x240>
   1f9f6:	e9cd 1200 	strd	r1, r2, [sp]
   1f9fa:	f8ca 0000 	str.w	r0, [sl]
   1f9fe:	4662      	mov	r2, ip
   1fa00:	4639      	mov	r1, r7
   1fa02:	4630      	mov	r0, r6
   1fa04:	f8cb 3000 	str.w	r3, [fp]
   1fa08:	f8c8 7000 	str.w	r7, [r8]
   1fa0c:	f8c9 7000 	str.w	r7, [r9]
   1fa10:	f013 ff10 	bl	33834 <memset>
   1fa14:	69e3      	ldr	r3, [r4, #28]
   1fa16:	4630      	mov	r0, r6
   1fa18:	6033      	str	r3, [r6, #0]
   1fa1a:	69a3      	ldr	r3, [r4, #24]
   1fa1c:	6073      	str	r3, [r6, #4]
   1fa1e:	f7ff fb33 	bl	1f088 <ipc_trace_init>
   1fa22:	2201      	movs	r2, #1
   1fa24:	f04f 0c04 	mov.w	ip, #4
   1fa28:	4b62      	ldr	r3, [pc, #392]	; (1fbb4 <rpc_transport_ipc_rx_init+0x21c>)
   1fa2a:	4963      	ldr	r1, [pc, #396]	; (1fbb8 <rpc_transport_ipc_rx_init+0x220>)
   1fa2c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1fa30:	6809      	ldr	r1, [r1, #0]
   1fa32:	2080      	movs	r0, #128	; 0x80
   1fa34:	9106      	str	r1, [sp, #24]
   1fa36:	4961      	ldr	r1, [pc, #388]	; (1fbbc <rpc_transport_ipc_rx_init+0x224>)
   1fa38:	f8dd e018 	ldr.w	lr, [sp, #24]
   1fa3c:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   1fa40:	6809      	ldr	r1, [r1, #0]
   1fa42:	702f      	strb	r7, [r5, #0]
   1fa44:	9105      	str	r1, [sp, #20]
   1fa46:	706f      	strb	r7, [r5, #1]
   1fa48:	70ef      	strb	r7, [r5, #3]
   1fa4a:	70aa      	strb	r2, [r5, #2]
   1fa4c:	9905      	ldr	r1, [sp, #20]
   1fa4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1fa50:	f8db e000 	ldr.w	lr, [fp]
   1fa54:	6069      	str	r1, [r5, #4]
   1fa56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1fa58:	9c01      	ldr	r4, [sp, #4]
   1fa5a:	60a9      	str	r1, [r5, #8]
   1fa5c:	60ec      	str	r4, [r5, #12]
   1fa5e:	9c00      	ldr	r4, [sp, #0]
   1fa60:	4957      	ldr	r1, [pc, #348]	; (1fbc0 <rpc_transport_ipc_rx_init+0x228>)
   1fa62:	61ae      	str	r6, [r5, #24]
   1fa64:	f8c5 e014 	str.w	lr, [r5, #20]
   1fa68:	612c      	str	r4, [r5, #16]
   1fa6a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1fa6e:	680c      	ldr	r4, [r1, #0]
   1fa70:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1fa74:	9407      	str	r4, [sp, #28]
   1fa76:	9c07      	ldr	r4, [sp, #28]
   1fa78:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   1fa7c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1fa80:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1fa84:	9408      	str	r4, [sp, #32]
   1fa86:	9c08      	ldr	r4, [sp, #32]
   1fa88:	2410      	movs	r4, #16
   1fa8a:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1fa8e:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1fa92:	4d4c      	ldr	r5, [pc, #304]	; (1fbc4 <rpc_transport_ipc_rx_init+0x22c>)
   1fa94:	9409      	str	r4, [sp, #36]	; 0x24
   1fa96:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1fa98:	2440      	movs	r4, #64	; 0x40
   1fa9a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1fa9e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1faa2:	940a      	str	r4, [sp, #40]	; 0x28
   1faa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1faa6:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1faaa:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1faae:	900b      	str	r0, [sp, #44]	; 0x2c
   1fab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1fab2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   1fab6:	6808      	ldr	r0, [r1, #0]
   1fab8:	900c      	str	r0, [sp, #48]	; 0x30
   1faba:	980c      	ldr	r0, [sp, #48]	; 0x30
   1fabc:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   1fac0:	6888      	ldr	r0, [r1, #8]
   1fac2:	900d      	str	r0, [sp, #52]	; 0x34
   1fac4:	980d      	ldr	r0, [sp, #52]	; 0x34
   1fac6:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   1faca:	6908      	ldr	r0, [r1, #16]
   1facc:	900e      	str	r0, [sp, #56]	; 0x38
   1face:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fad0:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   1fad4:	6988      	ldr	r0, [r1, #24]
   1fad6:	900f      	str	r0, [sp, #60]	; 0x3c
   1fad8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1fada:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   1fade:	69c8      	ldr	r0, [r1, #28]
   1fae0:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1fae4:	9010      	str	r0, [sp, #64]	; 0x40
   1fae6:	9810      	ldr	r0, [sp, #64]	; 0x40
   1fae8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1faec:	4310      	orrs	r0, r2
   1faee:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   1faf2:	680c      	ldr	r4, [r1, #0]
   1faf4:	4834      	ldr	r0, [pc, #208]	; (1fbc8 <rpc_transport_ipc_rx_init+0x230>)
   1faf6:	9411      	str	r4, [sp, #68]	; 0x44
   1faf8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1fafa:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1fafe:	ea44 040c 	orr.w	r4, r4, ip
   1fb02:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1fb06:	680c      	ldr	r4, [r1, #0]
   1fb08:	9412      	str	r4, [sp, #72]	; 0x48
   1fb0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1fb0c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1fb10:	f044 0410 	orr.w	r4, r4, #16
   1fb14:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1fb18:	680c      	ldr	r4, [r1, #0]
   1fb1a:	9413      	str	r4, [sp, #76]	; 0x4c
   1fb1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1fb1e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1fb22:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1fb26:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1fb2a:	680c      	ldr	r4, [r1, #0]
   1fb2c:	9414      	str	r4, [sp, #80]	; 0x50
   1fb2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1fb30:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1fb34:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1fb38:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1fb3c:	f8da 3000 	ldr.w	r3, [sl]
   1fb40:	6809      	ldr	r1, [r1, #0]
   1fb42:	015b      	lsls	r3, r3, #5
   1fb44:	9115      	str	r1, [sp, #84]	; 0x54
   1fb46:	b2db      	uxtb	r3, r3
   1fb48:	9915      	ldr	r1, [sp, #84]	; 0x54
   1fb4a:	f8c8 2000 	str.w	r2, [r8]
   1fb4e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   1fb52:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   1fb56:	6046      	str	r6, [r0, #4]
   1fb58:	9704      	str	r7, [sp, #16]
   1fb5a:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   1fb5e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   1fb62:	9304      	str	r3, [sp, #16]
   1fb64:	9b04      	ldr	r3, [sp, #16]
   1fb66:	f8d8 3000 	ldr.w	r3, [r8]
   1fb6a:	4293      	cmp	r3, r2
   1fb6c:	d110      	bne.n	1fb90 <rpc_transport_ipc_rx_init+0x1f8>
   1fb6e:	f247 5430 	movw	r4, #30000	; 0x7530
   1fb72:	2564      	movs	r5, #100	; 0x64
   1fb74:	e000      	b.n	1fb78 <rpc_transport_ipc_rx_init+0x1e0>
   1fb76:	b15c      	cbz	r4, 1fb90 <rpc_transport_ipc_rx_init+0x1f8>
   1fb78:	a903      	add	r1, sp, #12
   1fb7a:	2000      	movs	r0, #0
   1fb7c:	9503      	str	r5, [sp, #12]
   1fb7e:	f7fd f901 	bl	1cd84 <bsd_os_timedwait>
   1fb82:	9b03      	ldr	r3, [sp, #12]
   1fb84:	f8d8 2000 	ldr.w	r2, [r8]
   1fb88:	3b64      	subs	r3, #100	; 0x64
   1fb8a:	2a01      	cmp	r2, #1
   1fb8c:	441c      	add	r4, r3
   1fb8e:	d0f2      	beq.n	1fb76 <rpc_transport_ipc_rx_init+0x1de>
   1fb90:	f8d9 0000 	ldr.w	r0, [r9]
   1fb94:	b017      	add	sp, #92	; 0x5c
   1fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb9a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1fb9e:	b017      	add	sp, #92	; 0x5c
   1fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fba4:	f24c 0009 	movw	r0, #49161	; 0xc009
   1fba8:	b017      	add	sp, #92	; 0x5c
   1fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbae:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1fbb2:	4770      	bx	lr
   1fbb4:	4002a000 	.word	0x4002a000
   1fbb8:	4002a610 	.word	0x4002a610
   1fbbc:	4002a614 	.word	0x4002a614
   1fbc0:	4002a590 	.word	0x4002a590
   1fbc4:	40005000 	.word	0x40005000
   1fbc8:	e000e100 	.word	0xe000e100
   1fbcc:	20022380 	.word	0x20022380
   1fbd0:	2002238c 	.word	0x2002238c
   1fbd4:	20022390 	.word	0x20022390
   1fbd8:	2002237c 	.word	0x2002237c

0001fbdc <rpc_transport_ipc_msg_free>:
   1fbdc:	b470      	push	{r4, r5, r6}
   1fbde:	4e17      	ldr	r6, [pc, #92]	; (1fc3c <rpc_transport_ipc_msg_free+0x60>)
   1fbe0:	6831      	ldr	r1, [r6, #0]
   1fbe2:	680d      	ldr	r5, [r1, #0]
   1fbe4:	b1ad      	cbz	r5, 1fc12 <rpc_transport_ipc_msg_free+0x36>
   1fbe6:	688b      	ldr	r3, [r1, #8]
   1fbe8:	4283      	cmp	r3, r0
   1fbea:	d024      	beq.n	1fc36 <rpc_transport_ipc_msg_free+0x5a>
   1fbec:	2300      	movs	r3, #0
   1fbee:	3301      	adds	r3, #1
   1fbf0:	00da      	lsls	r2, r3, #3
   1fbf2:	429d      	cmp	r5, r3
   1fbf4:	eb01 0402 	add.w	r4, r1, r2
   1fbf8:	d00b      	beq.n	1fc12 <rpc_transport_ipc_msg_free+0x36>
   1fbfa:	68a4      	ldr	r4, [r4, #8]
   1fbfc:	42a0      	cmp	r0, r4
   1fbfe:	d1f6      	bne.n	1fbee <rpc_transport_ipc_msg_free+0x12>
   1fc00:	3204      	adds	r2, #4
   1fc02:	588b      	ldr	r3, [r1, r2]
   1fc04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1fc08:	f043 0303 	orr.w	r3, r3, #3
   1fc0c:	508b      	str	r3, [r1, r2]
   1fc0e:	bc70      	pop	{r4, r5, r6}
   1fc10:	4770      	bx	lr
   1fc12:	6871      	ldr	r1, [r6, #4]
   1fc14:	680d      	ldr	r5, [r1, #0]
   1fc16:	2d00      	cmp	r5, #0
   1fc18:	d0f9      	beq.n	1fc0e <rpc_transport_ipc_msg_free+0x32>
   1fc1a:	688b      	ldr	r3, [r1, #8]
   1fc1c:	4283      	cmp	r3, r0
   1fc1e:	d00a      	beq.n	1fc36 <rpc_transport_ipc_msg_free+0x5a>
   1fc20:	2300      	movs	r3, #0
   1fc22:	3301      	adds	r3, #1
   1fc24:	00da      	lsls	r2, r3, #3
   1fc26:	429d      	cmp	r5, r3
   1fc28:	eb01 0402 	add.w	r4, r1, r2
   1fc2c:	d0ef      	beq.n	1fc0e <rpc_transport_ipc_msg_free+0x32>
   1fc2e:	68a4      	ldr	r4, [r4, #8]
   1fc30:	42a0      	cmp	r0, r4
   1fc32:	d1f6      	bne.n	1fc22 <rpc_transport_ipc_msg_free+0x46>
   1fc34:	e7e4      	b.n	1fc00 <rpc_transport_ipc_msg_free+0x24>
   1fc36:	2204      	movs	r2, #4
   1fc38:	e7e3      	b.n	1fc02 <rpc_transport_ipc_msg_free+0x26>
   1fc3a:	bf00      	nop
   1fc3c:	20022384 	.word	0x20022384

0001fc40 <rpc_transport_ipc_tx_init>:
   1fc40:	2800      	cmp	r0, #0
   1fc42:	f000 80b8 	beq.w	1fdb6 <rpc_transport_ipc_tx_init+0x176>
   1fc46:	2900      	cmp	r1, #0
   1fc48:	f000 80b5 	beq.w	1fdb6 <rpc_transport_ipc_tx_init+0x176>
   1fc4c:	2a00      	cmp	r2, #0
   1fc4e:	f000 80b2 	beq.w	1fdb6 <rpc_transport_ipc_tx_init+0x176>
   1fc52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc56:	6a04      	ldr	r4, [r0, #32]
   1fc58:	b085      	sub	sp, #20
   1fc5a:	2c00      	cmp	r4, #0
   1fc5c:	f000 80a6 	beq.w	1fdac <rpc_transport_ipc_tx_init+0x16c>
   1fc60:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1fc62:	2800      	cmp	r0, #0
   1fc64:	f000 80a2 	beq.w	1fdac <rpc_transport_ipc_tx_init+0x16c>
   1fc68:	f642 4587 	movw	r5, #11399	; 0x2c87
   1fc6c:	f04f 0a00 	mov.w	sl, #0
   1fc70:	4e55      	ldr	r6, [pc, #340]	; (1fdc8 <rpc_transport_ipc_tx_init+0x188>)
   1fc72:	42a8      	cmp	r0, r5
   1fc74:	f886 a000 	strb.w	sl, [r6]
   1fc78:	f240 80a0 	bls.w	1fdbc <rpc_transport_ipc_tx_init+0x17c>
   1fc7c:	2708      	movs	r7, #8
   1fc7e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1fe00 <rpc_transport_ipc_tx_init+0x1c0>
   1fc82:	4620      	mov	r0, r4
   1fc84:	4616      	mov	r6, r2
   1fc86:	460d      	mov	r5, r1
   1fc88:	2244      	movs	r2, #68	; 0x44
   1fc8a:	4651      	mov	r1, sl
   1fc8c:	f8c9 4000 	str.w	r4, [r9]
   1fc90:	f013 fdd0 	bl	33834 <memset>
   1fc94:	f8d9 2000 	ldr.w	r2, [r9]
   1fc98:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1fc9c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1fe04 <rpc_transport_ipc_tx_init+0x1c4>
   1fca0:	f882 a001 	strb.w	sl, [r2, #1]
   1fca4:	f882 a002 	strb.w	sl, [r2, #2]
   1fca8:	f882 a003 	strb.w	sl, [r2, #3]
   1fcac:	7017      	strb	r7, [r2, #0]
   1fcae:	4618      	mov	r0, r3
   1fcb0:	2244      	movs	r2, #68	; 0x44
   1fcb2:	4651      	mov	r1, sl
   1fcb4:	f8c8 3000 	str.w	r3, [r8]
   1fcb8:	f013 fdbc 	bl	33834 <memset>
   1fcbc:	f8d8 2000 	ldr.w	r2, [r8]
   1fcc0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1fcc4:	f8df b140 	ldr.w	fp, [pc, #320]	; 1fe08 <rpc_transport_ipc_tx_init+0x1c8>
   1fcc8:	7017      	strb	r7, [r2, #0]
   1fcca:	f882 a001 	strb.w	sl, [r2, #1]
   1fcce:	f882 a002 	strb.w	sl, [r2, #2]
   1fcd2:	f882 a003 	strb.w	sl, [r2, #3]
   1fcd6:	4618      	mov	r0, r3
   1fcd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fcdc:	4651      	mov	r1, sl
   1fcde:	f8cb 3000 	str.w	r3, [fp]
   1fce2:	f013 fda7 	bl	33834 <memset>
   1fce6:	4b39      	ldr	r3, [pc, #228]	; (1fdcc <rpc_transport_ipc_tx_init+0x18c>)
   1fce8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1fcec:	f8c3 c000 	str.w	ip, [r3]
   1fcf0:	4651      	mov	r1, sl
   1fcf2:	4660      	mov	r0, ip
   1fcf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fcf8:	f013 fd9c 	bl	33834 <memset>
   1fcfc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1fd00:	2106      	movs	r1, #6
   1fd02:	f04f 0e01 	mov.w	lr, #1
   1fd06:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1fd0a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1fd0e:	4b30      	ldr	r3, [pc, #192]	; (1fdd0 <rpc_transport_ipc_tx_init+0x190>)
   1fd10:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1fd14:	605c      	str	r4, [r3, #4]
   1fd16:	4c2f      	ldr	r4, [pc, #188]	; (1fdd4 <rpc_transport_ipc_tx_init+0x194>)
   1fd18:	f8c3 c008 	str.w	ip, [r3, #8]
   1fd1c:	8199      	strh	r1, [r3, #12]
   1fd1e:	f8a3 e000 	strh.w	lr, [r3]
   1fd22:	4619      	mov	r1, r3
   1fd24:	611c      	str	r4, [r3, #16]
   1fd26:	4b2c      	ldr	r3, [pc, #176]	; (1fdd8 <rpc_transport_ipc_tx_init+0x198>)
   1fd28:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1fe0c <rpc_transport_ipc_tx_init+0x1cc>
   1fd2c:	6120      	str	r0, [r4, #16]
   1fd2e:	482b      	ldr	r0, [pc, #172]	; (1fddc <rpc_transport_ipc_tx_init+0x19c>)
   1fd30:	6063      	str	r3, [r4, #4]
   1fd32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1fd36:	60a0      	str	r0, [r4, #8]
   1fd38:	f8c4 c000 	str.w	ip, [r4]
   1fd3c:	4828      	ldr	r0, [pc, #160]	; (1fde0 <rpc_transport_ipc_tx_init+0x1a0>)
   1fd3e:	60e3      	str	r3, [r4, #12]
   1fd40:	6162      	str	r2, [r4, #20]
   1fd42:	f006 f9ef 	bl	26124 <nrf_mem_register>
   1fd46:	2800      	cmp	r0, #0
   1fd48:	d132      	bne.n	1fdb0 <rpc_transport_ipc_tx_init+0x170>
   1fd4a:	f04f 0c02 	mov.w	ip, #2
   1fd4e:	2420      	movs	r4, #32
   1fd50:	f8d9 1000 	ldr.w	r1, [r9]
   1fd54:	f8db 2000 	ldr.w	r2, [fp]
   1fd58:	6029      	str	r1, [r5, #0]
   1fd5a:	4b1c      	ldr	r3, [pc, #112]	; (1fdcc <rpc_transport_ipc_tx_init+0x18c>)
   1fd5c:	f8d8 1000 	ldr.w	r1, [r8]
   1fd60:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1fe10 <rpc_transport_ipc_tx_init+0x1d0>
   1fd64:	4d1f      	ldr	r5, [pc, #124]	; (1fde4 <rpc_transport_ipc_tx_init+0x1a4>)
   1fd66:	6031      	str	r1, [r6, #0]
   1fd68:	f8ce 2000 	str.w	r2, [lr]
   1fd6c:	681b      	ldr	r3, [r3, #0]
   1fd6e:	491e      	ldr	r1, [pc, #120]	; (1fde8 <rpc_transport_ipc_tx_init+0x1a8>)
   1fd70:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1fd74:	602a      	str	r2, [r5, #0]
   1fd76:	4e1d      	ldr	r6, [pc, #116]	; (1fdec <rpc_transport_ipc_tx_init+0x1ac>)
   1fd78:	4a1d      	ldr	r2, [pc, #116]	; (1fdf0 <rpc_transport_ipc_tx_init+0x1b0>)
   1fd7a:	4d1e      	ldr	r5, [pc, #120]	; (1fdf4 <rpc_transport_ipc_tx_init+0x1b4>)
   1fd7c:	600b      	str	r3, [r1, #0]
   1fd7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1fd82:	491d      	ldr	r1, [pc, #116]	; (1fdf8 <rpc_transport_ipc_tx_init+0x1b8>)
   1fd84:	6033      	str	r3, [r6, #0]
   1fd86:	8028      	strh	r0, [r5, #0]
   1fd88:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1fd8c:	6809      	ldr	r1, [r1, #0]
   1fd8e:	4b1b      	ldr	r3, [pc, #108]	; (1fdfc <rpc_transport_ipc_tx_init+0x1bc>)
   1fd90:	9103      	str	r1, [sp, #12]
   1fd92:	9903      	ldr	r1, [sp, #12]
   1fd94:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1fd98:	6819      	ldr	r1, [r3, #0]
   1fd9a:	443b      	add	r3, r7
   1fd9c:	9102      	str	r1, [sp, #8]
   1fd9e:	9902      	ldr	r1, [sp, #8]
   1fda0:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1fda4:	681b      	ldr	r3, [r3, #0]
   1fda6:	9301      	str	r3, [sp, #4]
   1fda8:	9b01      	ldr	r3, [sp, #4]
   1fdaa:	e001      	b.n	1fdb0 <rpc_transport_ipc_tx_init+0x170>
   1fdac:	f24c 0007 	movw	r0, #49159	; 0xc007
   1fdb0:	b005      	add	sp, #20
   1fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdb6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1fdba:	4770      	bx	lr
   1fdbc:	f24c 0004 	movw	r0, #49156	; 0xc004
   1fdc0:	b005      	add	sp, #20
   1fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdc6:	bf00      	nop
   1fdc8:	20028e85 	.word	0x20028e85
   1fdcc:	200223bc 	.word	0x200223bc
   1fdd0:	200223a8 	.word	0x200223a8
   1fdd4:	200223cc 	.word	0x200223cc
   1fdd8:	00040080 	.word	0x00040080
   1fddc:	00040100 	.word	0x00040100
   1fde0:	20022394 	.word	0x20022394
   1fde4:	200223a0 	.word	0x200223a0
   1fde8:	2002239c 	.word	0x2002239c
   1fdec:	20022398 	.word	0x20022398
   1fdf0:	4002a000 	.word	0x4002a000
   1fdf4:	2002745e 	.word	0x2002745e
   1fdf8:	4002a514 	.word	0x4002a514
   1fdfc:	4002a51c 	.word	0x4002a51c
   1fe00:	200223c8 	.word	0x200223c8
   1fe04:	200223c0 	.word	0x200223c0
   1fe08:	200223c4 	.word	0x200223c4
   1fe0c:	00080040 	.word	0x00080040
   1fe10:	200223a4 	.word	0x200223a4

0001fe14 <rpc_transport_ipc_send>:
   1fe14:	2800      	cmp	r0, #0
   1fe16:	d061      	beq.n	1fedc <rpc_transport_ipc_send+0xc8>
   1fe18:	b4f0      	push	{r4, r5, r6, r7}
   1fe1a:	4b34      	ldr	r3, [pc, #208]	; (1feec <rpc_transport_ipc_send+0xd8>)
   1fe1c:	b082      	sub	sp, #8
   1fe1e:	681a      	ldr	r2, [r3, #0]
   1fe20:	4b33      	ldr	r3, [pc, #204]	; (1fef0 <rpc_transport_ipc_send+0xdc>)
   1fe22:	4282      	cmp	r2, r0
   1fe24:	d81e      	bhi.n	1fe64 <rpc_transport_ipc_send+0x50>
   1fe26:	681b      	ldr	r3, [r3, #0]
   1fe28:	4932      	ldr	r1, [pc, #200]	; (1fef4 <rpc_transport_ipc_send+0xe0>)
   1fe2a:	4283      	cmp	r3, r0
   1fe2c:	6809      	ldr	r1, [r1, #0]
   1fe2e:	d803      	bhi.n	1fe38 <rpc_transport_ipc_send+0x24>
   1fe30:	4c31      	ldr	r4, [pc, #196]	; (1fef8 <rpc_transport_ipc_send+0xe4>)
   1fe32:	6824      	ldr	r4, [r4, #0]
   1fe34:	4284      	cmp	r4, r0
   1fe36:	d849      	bhi.n	1fecc <rpc_transport_ipc_send+0xb8>
   1fe38:	4281      	cmp	r1, r0
   1fe3a:	d90e      	bls.n	1fe5a <rpc_transport_ipc_send+0x46>
   1fe3c:	4b2f      	ldr	r3, [pc, #188]	; (1fefc <rpc_transport_ipc_send+0xe8>)
   1fe3e:	781b      	ldrb	r3, [r3, #0]
   1fe40:	2b00      	cmp	r3, #0
   1fe42:	d14e      	bne.n	1fee2 <rpc_transport_ipc_send+0xce>
   1fe44:	1a83      	subs	r3, r0, r2
   1fe46:	492e      	ldr	r1, [pc, #184]	; (1ff00 <rpc_transport_ipc_send+0xec>)
   1fe48:	099f      	lsrs	r7, r3, #6
   1fe4a:	069b      	lsls	r3, r3, #26
   1fe4c:	680a      	ldr	r2, [r1, #0]
   1fe4e:	4d2d      	ldr	r5, [pc, #180]	; (1ff04 <rpc_transport_ipc_send+0xf0>)
   1fe50:	f04f 0403 	mov.w	r4, #3
   1fe54:	f04f 0602 	mov.w	r6, #2
   1fe58:	d014      	beq.n	1fe84 <rpc_transport_ipc_send+0x70>
   1fe5a:	f24c 0010 	movw	r0, #49168	; 0xc010
   1fe5e:	b002      	add	sp, #8
   1fe60:	bcf0      	pop	{r4, r5, r6, r7}
   1fe62:	4770      	bx	lr
   1fe64:	681b      	ldr	r3, [r3, #0]
   1fe66:	4298      	cmp	r0, r3
   1fe68:	d3f7      	bcc.n	1fe5a <rpc_transport_ipc_send+0x46>
   1fe6a:	4a23      	ldr	r2, [pc, #140]	; (1fef8 <rpc_transport_ipc_send+0xe4>)
   1fe6c:	6812      	ldr	r2, [r2, #0]
   1fe6e:	4290      	cmp	r0, r2
   1fe70:	d2f3      	bcs.n	1fe5a <rpc_transport_ipc_send+0x46>
   1fe72:	2401      	movs	r4, #1
   1fe74:	1ac3      	subs	r3, r0, r3
   1fe76:	4a24      	ldr	r2, [pc, #144]	; (1ff08 <rpc_transport_ipc_send+0xf4>)
   1fe78:	099f      	lsrs	r7, r3, #6
   1fe7a:	069b      	lsls	r3, r3, #26
   1fe7c:	4626      	mov	r6, r4
   1fe7e:	6812      	ldr	r2, [r2, #0]
   1fe80:	4d22      	ldr	r5, [pc, #136]	; (1ff0c <rpc_transport_ipc_send+0xf8>)
   1fe82:	d1ea      	bne.n	1fe5a <rpc_transport_ipc_send+0x46>
   1fe84:	6841      	ldr	r1, [r0, #4]
   1fe86:	b2c9      	uxtb	r1, r1
   1fe88:	428e      	cmp	r6, r1
   1fe8a:	d122      	bne.n	1fed2 <rpc_transport_ipc_send+0xbe>
   1fe8c:	2020      	movs	r0, #32
   1fe8e:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   1fe92:	491f      	ldr	r1, [pc, #124]	; (1ff10 <rpc_transport_ipc_send+0xfc>)
   1fe94:	685a      	ldr	r2, [r3, #4]
   1fe96:	880e      	ldrh	r6, [r1, #0]
   1fe98:	b292      	uxth	r2, r2
   1fe9a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1fe9e:	605a      	str	r2, [r3, #4]
   1fea0:	685a      	ldr	r2, [r3, #4]
   1fea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1fea6:	f042 0201 	orr.w	r2, r2, #1
   1feaa:	605a      	str	r2, [r3, #4]
   1feac:	bf00      	nop
   1feae:	3801      	subs	r0, #1
   1feb0:	d1fc      	bne.n	1feac <rpc_transport_ipc_send+0x98>
   1feb2:	2201      	movs	r2, #1
   1feb4:	4b17      	ldr	r3, [pc, #92]	; (1ff14 <rpc_transport_ipc_send+0x100>)
   1feb6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1feba:	682a      	ldr	r2, [r5, #0]
   1febc:	880b      	ldrh	r3, [r1, #0]
   1febe:	9201      	str	r2, [sp, #4]
   1fec0:	9a01      	ldr	r2, [sp, #4]
   1fec2:	3301      	adds	r3, #1
   1fec4:	800b      	strh	r3, [r1, #0]
   1fec6:	b002      	add	sp, #8
   1fec8:	bcf0      	pop	{r4, r5, r6, r7}
   1feca:	4770      	bx	lr
   1fecc:	4281      	cmp	r1, r0
   1fece:	d9d0      	bls.n	1fe72 <rpc_transport_ipc_send+0x5e>
   1fed0:	e7b4      	b.n	1fe3c <rpc_transport_ipc_send+0x28>
   1fed2:	f24c 0007 	movw	r0, #49159	; 0xc007
   1fed6:	b002      	add	sp, #8
   1fed8:	bcf0      	pop	{r4, r5, r6, r7}
   1feda:	4770      	bx	lr
   1fedc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1fee0:	4770      	bx	lr
   1fee2:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1fee6:	b002      	add	sp, #8
   1fee8:	bcf0      	pop	{r4, r5, r6, r7}
   1feea:	4770      	bx	lr
   1feec:	200223a4 	.word	0x200223a4
   1fef0:	2002239c 	.word	0x2002239c
   1fef4:	200223a0 	.word	0x200223a0
   1fef8:	20022398 	.word	0x20022398
   1fefc:	20028e85 	.word	0x20028e85
   1ff00:	200223c8 	.word	0x200223c8
   1ff04:	4002a00c 	.word	0x4002a00c
   1ff08:	200223c0 	.word	0x200223c0
   1ff0c:	4002a004 	.word	0x4002a004
   1ff10:	2002745e 	.word	0x2002745e
   1ff14:	4002a000 	.word	0x4002a000

0001ff18 <rpc_transport_ipc_tx_rpc_data_alloc>:
   1ff18:	4b18      	ldr	r3, [pc, #96]	; (1ff7c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1ff1a:	781b      	ldrb	r3, [r3, #0]
   1ff1c:	bb63      	cbnz	r3, 1ff78 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1ff1e:	b4f0      	push	{r4, r5, r6, r7}
   1ff20:	4a17      	ldr	r2, [pc, #92]	; (1ff80 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1ff22:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ff26:	6814      	ldr	r4, [r2, #0]
   1ff28:	4b16      	ldr	r3, [pc, #88]	; (1ff84 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1ff2a:	6825      	ldr	r5, [r4, #0]
   1ff2c:	681e      	ldr	r6, [r3, #0]
   1ff2e:	b1a5      	cbz	r5, 1ff5a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1ff30:	4607      	mov	r7, r0
   1ff32:	00c1      	lsls	r1, r0, #3
   1ff34:	1863      	adds	r3, r4, r1
   1ff36:	685a      	ldr	r2, [r3, #4]
   1ff38:	b2d2      	uxtb	r2, r2
   1ff3a:	2a03      	cmp	r2, #3
   1ff3c:	d104      	bne.n	1ff48 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1ff3e:	609f      	str	r7, [r3, #8]
   1ff40:	685a      	ldr	r2, [r3, #4]
   1ff42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ff46:	605a      	str	r2, [r3, #4]
   1ff48:	685a      	ldr	r2, [r3, #4]
   1ff4a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1ff4e:	d101      	bne.n	1ff54 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1ff50:	689b      	ldr	r3, [r3, #8]
   1ff52:	b12b      	cbz	r3, 1ff60 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1ff54:	3001      	adds	r0, #1
   1ff56:	42a8      	cmp	r0, r5
   1ff58:	d1eb      	bne.n	1ff32 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1ff5a:	2000      	movs	r0, #0
   1ff5c:	bcf0      	pop	{r4, r5, r6, r7}
   1ff5e:	4770      	bx	lr
   1ff60:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1ff64:	4421      	add	r1, r4
   1ff66:	6088      	str	r0, [r1, #8]
   1ff68:	6843      	ldr	r3, [r0, #4]
   1ff6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ff6e:	f043 0302 	orr.w	r3, r3, #2
   1ff72:	6043      	str	r3, [r0, #4]
   1ff74:	bcf0      	pop	{r4, r5, r6, r7}
   1ff76:	4770      	bx	lr
   1ff78:	2000      	movs	r0, #0
   1ff7a:	4770      	bx	lr
   1ff7c:	20028e85 	.word	0x20028e85
   1ff80:	200223c8 	.word	0x200223c8
   1ff84:	200223c4 	.word	0x200223c4

0001ff88 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1ff88:	b4f0      	push	{r4, r5, r6, r7}
   1ff8a:	4a15      	ldr	r2, [pc, #84]	; (1ffe0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1ff8c:	4b15      	ldr	r3, [pc, #84]	; (1ffe4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1ff8e:	6814      	ldr	r4, [r2, #0]
   1ff90:	681e      	ldr	r6, [r3, #0]
   1ff92:	6825      	ldr	r5, [r4, #0]
   1ff94:	b1ad      	cbz	r5, 1ffc2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1ff96:	2000      	movs	r0, #0
   1ff98:	4607      	mov	r7, r0
   1ff9a:	00c1      	lsls	r1, r0, #3
   1ff9c:	1863      	adds	r3, r4, r1
   1ff9e:	685a      	ldr	r2, [r3, #4]
   1ffa0:	b2d2      	uxtb	r2, r2
   1ffa2:	2a03      	cmp	r2, #3
   1ffa4:	d104      	bne.n	1ffb0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1ffa6:	609f      	str	r7, [r3, #8]
   1ffa8:	685a      	ldr	r2, [r3, #4]
   1ffaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ffae:	605a      	str	r2, [r3, #4]
   1ffb0:	685a      	ldr	r2, [r3, #4]
   1ffb2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1ffb6:	d101      	bne.n	1ffbc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1ffb8:	689b      	ldr	r3, [r3, #8]
   1ffba:	b12b      	cbz	r3, 1ffc8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1ffbc:	3001      	adds	r0, #1
   1ffbe:	4285      	cmp	r5, r0
   1ffc0:	d1eb      	bne.n	1ff9a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1ffc2:	2000      	movs	r0, #0
   1ffc4:	bcf0      	pop	{r4, r5, r6, r7}
   1ffc6:	4770      	bx	lr
   1ffc8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1ffcc:	4421      	add	r1, r4
   1ffce:	6088      	str	r0, [r1, #8]
   1ffd0:	6843      	ldr	r3, [r0, #4]
   1ffd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ffd6:	f043 0301 	orr.w	r3, r3, #1
   1ffda:	6043      	str	r3, [r0, #4]
   1ffdc:	bcf0      	pop	{r4, r5, r6, r7}
   1ffde:	4770      	bx	lr
   1ffe0:	200223c0 	.word	0x200223c0
   1ffe4:	200223bc 	.word	0x200223bc

0001ffe8 <rpc_transport_ipc_tx_data_alloc>:
   1ffe8:	4b03      	ldr	r3, [pc, #12]	; (1fff8 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1ffea:	781b      	ldrb	r3, [r3, #0]
   1ffec:	b90b      	cbnz	r3, 1fff2 <rpc_transport_ipc_tx_data_alloc+0xa>
   1ffee:	f006 b9c9 	b.w	26384 <nrf_shared_malloc>
   1fff2:	2000      	movs	r0, #0
   1fff4:	4770      	bx	lr
   1fff6:	bf00      	nop
   1fff8:	20028e85 	.word	0x20028e85

0001fffc <rpc_transport_ipc_tx_suspend>:
   1fffc:	2201      	movs	r2, #1
   1fffe:	4b01      	ldr	r3, [pc, #4]	; (20004 <rpc_transport_ipc_tx_suspend+0x8>)
   20000:	701a      	strb	r2, [r3, #0]
   20002:	4770      	bx	lr
   20004:	20028e85 	.word	0x20028e85

00020008 <secure_client_socket>:
   20008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2000c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   20010:	460c      	mov	r4, r1
   20012:	680b      	ldr	r3, [r1, #0]
   20014:	4f46      	ldr	r7, [pc, #280]	; (20130 <secure_client_socket+0x128>)
   20016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2001a:	600b      	str	r3, [r1, #0]
   2001c:	680b      	ldr	r3, [r1, #0]
   2001e:	00c6      	lsls	r6, r0, #3
   20020:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20024:	600b      	str	r3, [r1, #0]
   20026:	eb07 0a06 	add.w	sl, r7, r6
   2002a:	b084      	sub	sp, #16
   2002c:	f8da 3004 	ldr.w	r3, [sl, #4]
   20030:	6989      	ldr	r1, [r1, #24]
   20032:	f247 0281 	movw	r2, #28801	; 0x7081
   20036:	4605      	mov	r5, r0
   20038:	f8d4 8000 	ldr.w	r8, [r4]
   2003c:	e9cd cc02 	strd	ip, ip, [sp, #8]
   20040:	f000 fd92 	bl	20b68 <ip_interface_request_create>
   20044:	2800      	cmp	r0, #0
   20046:	d06d      	beq.n	20124 <secure_client_socket+0x11c>
   20048:	f8da 2004 	ldr.w	r2, [sl, #4]
   2004c:	4681      	mov	r9, r0
   2004e:	2a00      	cmp	r2, #0
   20050:	d15d      	bne.n	2010e <secure_client_socket+0x106>
   20052:	4b38      	ldr	r3, [pc, #224]	; (20134 <secure_client_socket+0x12c>)
   20054:	1971      	adds	r1, r6, r5
   20056:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2005a:	2224      	movs	r2, #36	; 0x24
   2005c:	f109 0014 	add.w	r0, r9, #20
   20060:	f013 fbae 	bl	337c0 <memcpy>
   20064:	f8d9 3008 	ldr.w	r3, [r9, #8]
   20068:	4649      	mov	r1, r9
   2006a:	3324      	adds	r3, #36	; 0x24
   2006c:	f8c9 3008 	str.w	r3, [r9, #8]
   20070:	6822      	ldr	r2, [r4, #0]
   20072:	4643      	mov	r3, r8
   20074:	0c12      	lsrs	r2, r2, #16
   20076:	0412      	lsls	r2, r2, #16
   20078:	f042 020a 	orr.w	r2, r2, #10
   2007c:	6022      	str	r2, [r4, #0]
   2007e:	4620      	mov	r0, r4
   20080:	f247 0281 	movw	r2, #28801	; 0x7081
   20084:	f000 fd90 	bl	20ba8 <ip_interface_request_send>
   20088:	4603      	mov	r3, r0
   2008a:	b968      	cbnz	r0, 200a8 <secure_client_socket+0xa0>
   2008c:	6823      	ldr	r3, [r4, #0]
   2008e:	00db      	lsls	r3, r3, #3
   20090:	d40e      	bmi.n	200b0 <secure_client_socket+0xa8>
   20092:	ab03      	add	r3, sp, #12
   20094:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20098:	210b      	movs	r1, #11
   2009a:	4628      	mov	r0, r5
   2009c:	f000 fd98 	bl	20bd0 <ip_interface_wait>
   200a0:	4603      	mov	r3, r0
   200a2:	b150      	cbz	r0, 200ba <secure_client_socket+0xb2>
   200a4:	f8c4 8000 	str.w	r8, [r4]
   200a8:	4618      	mov	r0, r3
   200aa:	b004      	add	sp, #16
   200ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   200b0:	2373      	movs	r3, #115	; 0x73
   200b2:	4618      	mov	r0, r3
   200b4:	b004      	add	sp, #16
   200b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   200ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   200be:	ab02      	add	r3, sp, #8
   200c0:	4611      	mov	r1, r2
   200c2:	4628      	mov	r0, r5
   200c4:	f000 fd84 	bl	20bd0 <ip_interface_wait>
   200c8:	4603      	mov	r3, r0
   200ca:	bb30      	cbnz	r0, 2011a <secure_client_socket+0x112>
   200cc:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   200d0:	b138      	cbz	r0, 200e2 <secure_client_socket+0xda>
   200d2:	9301      	str	r3, [sp, #4]
   200d4:	f006 f94a 	bl	2636c <nrf_free>
   200d8:	9b01      	ldr	r3, [sp, #4]
   200da:	443e      	add	r6, r7
   200dc:	6073      	str	r3, [r6, #4]
   200de:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   200e2:	4618      	mov	r0, r3
   200e4:	6822      	ldr	r2, [r4, #0]
   200e6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   200ea:	6022      	str	r2, [r4, #0]
   200ec:	6822      	ldr	r2, [r4, #0]
   200ee:	0c12      	lsrs	r2, r2, #16
   200f0:	0412      	lsls	r2, r2, #16
   200f2:	f042 020c 	orr.w	r2, r2, #12
   200f6:	6022      	str	r2, [r4, #0]
   200f8:	6822      	ldr	r2, [r4, #0]
   200fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   200fe:	6022      	str	r2, [r4, #0]
   20100:	6822      	ldr	r2, [r4, #0]
   20102:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   20106:	6022      	str	r2, [r4, #0]
   20108:	b004      	add	sp, #16
   2010a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2010e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   20112:	6800      	ldr	r0, [r0, #0]
   20114:	f013 fb54 	bl	337c0 <memcpy>
   20118:	e79b      	b.n	20052 <secure_client_socket+0x4a>
   2011a:	2b73      	cmp	r3, #115	; 0x73
   2011c:	d0c4      	beq.n	200a8 <secure_client_socket+0xa0>
   2011e:	f8c4 8000 	str.w	r8, [r4]
   20122:	e7c1      	b.n	200a8 <secure_client_socket+0xa0>
   20124:	230c      	movs	r3, #12
   20126:	4618      	mov	r0, r3
   20128:	b004      	add	sp, #16
   2012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2012e:	bf00      	nop
   20130:	20022528 	.word	0x20022528
   20134:	200223e4 	.word	0x200223e4

00020138 <tls_interface_init>:
   20138:	2201      	movs	r2, #1
   2013a:	4b02      	ldr	r3, [pc, #8]	; (20144 <tls_interface_init+0xc>)
   2013c:	2000      	movs	r0, #0
   2013e:	701a      	strb	r2, [r3, #0]
   20140:	4770      	bx	lr
   20142:	bf00      	nop
   20144:	20028e86 	.word	0x20028e86

00020148 <tls_interface_open>:
   20148:	b538      	push	{r3, r4, r5, lr}
   2014a:	4b23      	ldr	r3, [pc, #140]	; (201d8 <tls_interface_open+0x90>)
   2014c:	781b      	ldrb	r3, [r3, #0]
   2014e:	2b00      	cmp	r3, #0
   20150:	d03c      	beq.n	201cc <tls_interface_open+0x84>
   20152:	1e4b      	subs	r3, r1, #1
   20154:	2b01      	cmp	r3, #1
   20156:	d808      	bhi.n	2016a <tls_interface_open+0x22>
   20158:	4614      	mov	r4, r2
   2015a:	b162      	cbz	r2, 20176 <tls_interface_open+0x2e>
   2015c:	2901      	cmp	r1, #1
   2015e:	d02d      	beq.n	201bc <tls_interface_open+0x74>
   20160:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   20164:	bf08      	it	eq
   20166:	2202      	moveq	r2, #2
   20168:	d00d      	beq.n	20186 <tls_interface_open+0x3e>
   2016a:	2029      	movs	r0, #41	; 0x29
   2016c:	f7fc feb4 	bl	1ced8 <bsd_os_errno_set>
   20170:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20174:	e020      	b.n	201b8 <tls_interface_open+0x70>
   20176:	2901      	cmp	r1, #1
   20178:	bf0b      	itete	eq
   2017a:	2201      	moveq	r2, #1
   2017c:	2202      	movne	r2, #2
   2017e:	f44f 7482 	moveq.w	r4, #260	; 0x104
   20182:	f44f 7487 	movne.w	r4, #270	; 0x10e
   20186:	f000 fd55 	bl	20c34 <ip_interface_open>
   2018a:	1e05      	subs	r5, r0, #0
   2018c:	db1b      	blt.n	201c6 <tls_interface_open+0x7e>
   2018e:	4b13      	ldr	r3, [pc, #76]	; (201dc <tls_interface_open+0x94>)
   20190:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   20194:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20198:	2224      	movs	r2, #36	; 0x24
   2019a:	4911      	ldr	r1, [pc, #68]	; (201e0 <tls_interface_open+0x98>)
   2019c:	f013 fb10 	bl	337c0 <memcpy>
   201a0:	4628      	mov	r0, r5
   201a2:	f006 fd31 	bl	26c08 <interface_socket_from_handle_get>
   201a6:	6803      	ldr	r3, [r0, #0]
   201a8:	6144      	str	r4, [r0, #20]
   201aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   201ae:	6003      	str	r3, [r0, #0]
   201b0:	6803      	ldr	r3, [r0, #0]
   201b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   201b6:	6003      	str	r3, [r0, #0]
   201b8:	4628      	mov	r0, r5
   201ba:	bd38      	pop	{r3, r4, r5, pc}
   201bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   201c0:	d1d3      	bne.n	2016a <tls_interface_open+0x22>
   201c2:	460a      	mov	r2, r1
   201c4:	e7df      	b.n	20186 <tls_interface_open+0x3e>
   201c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   201ca:	e7f5      	b.n	201b8 <tls_interface_open+0x70>
   201cc:	2070      	movs	r0, #112	; 0x70
   201ce:	f7fc fe83 	bl	1ced8 <bsd_os_errno_set>
   201d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   201d6:	e7ef      	b.n	201b8 <tls_interface_open+0x70>
   201d8:	20028e86 	.word	0x20028e86
   201dc:	200223e4 	.word	0x200223e4
   201e0:	00034d38 	.word	0x00034d38

000201e4 <tls_interface_close>:
   201e4:	b538      	push	{r3, r4, r5, lr}
   201e6:	4604      	mov	r4, r0
   201e8:	f006 fd0e 	bl	26c08 <interface_socket_from_handle_get>
   201ec:	b180      	cbz	r0, 20210 <tls_interface_close+0x2c>
   201ee:	4d0b      	ldr	r5, [pc, #44]	; (2021c <tls_interface_close+0x38>)
   201f0:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   201f4:	b138      	cbz	r0, 20206 <tls_interface_close+0x22>
   201f6:	f006 f8b9 	bl	2636c <nrf_free>
   201fa:	2300      	movs	r3, #0
   201fc:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   20200:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   20204:	6053      	str	r3, [r2, #4]
   20206:	4620      	mov	r0, r4
   20208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2020c:	f000 bdd8 	b.w	20dc0 <ip_interface_close>
   20210:	2009      	movs	r0, #9
   20212:	f7fc fe61 	bl	1ced8 <bsd_os_errno_set>
   20216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2021a:	bd38      	pop	{r3, r4, r5, pc}
   2021c:	20022528 	.word	0x20022528

00020220 <tls_interface_sendto>:
   20220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20224:	460d      	mov	r5, r1
   20226:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2022a:	4616      	mov	r6, r2
   2022c:	461f      	mov	r7, r3
   2022e:	4604      	mov	r4, r0
   20230:	f006 fcea 	bl	26c08 <interface_socket_from_handle_get>
   20234:	2800      	cmp	r0, #0
   20236:	d03b      	beq.n	202b0 <tls_interface_sendto+0x90>
   20238:	6803      	ldr	r3, [r0, #0]
   2023a:	b29b      	uxth	r3, r3
   2023c:	2b0c      	cmp	r3, #12
   2023e:	d039      	beq.n	202b4 <tls_interface_sendto+0x94>
   20240:	6803      	ldr	r3, [r0, #0]
   20242:	b29b      	uxth	r3, r3
   20244:	2b0b      	cmp	r3, #11
   20246:	d111      	bne.n	2026c <tls_interface_sendto+0x4c>
   20248:	4b20      	ldr	r3, [pc, #128]	; (202cc <tls_interface_sendto+0xac>)
   2024a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   2024e:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   20252:	2b02      	cmp	r3, #2
   20254:	d038      	beq.n	202c8 <tls_interface_sendto+0xa8>
   20256:	6903      	ldr	r3, [r0, #16]
   20258:	2b01      	cmp	r3, #1
   2025a:	bf14      	ite	ne
   2025c:	2039      	movne	r0, #57	; 0x39
   2025e:	202a      	moveq	r0, #42	; 0x2a
   20260:	f7fc fe3a 	bl	1ced8 <bsd_os_errno_set>
   20264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2026c:	6903      	ldr	r3, [r0, #16]
   2026e:	2b01      	cmp	r3, #1
   20270:	d00b      	beq.n	2028a <tls_interface_sendto+0x6a>
   20272:	2b02      	cmp	r3, #2
   20274:	d001      	beq.n	2027a <tls_interface_sendto+0x5a>
   20276:	2039      	movs	r0, #57	; 0x39
   20278:	e7f2      	b.n	20260 <tls_interface_sendto+0x40>
   2027a:	6803      	ldr	r3, [r0, #0]
   2027c:	b29b      	uxth	r3, r3
   2027e:	2b02      	cmp	r3, #2
   20280:	d007      	beq.n	20292 <tls_interface_sendto+0x72>
   20282:	6803      	ldr	r3, [r0, #0]
   20284:	b29b      	uxth	r3, r3
   20286:	2b04      	cmp	r3, #4
   20288:	d003      	beq.n	20292 <tls_interface_sendto+0x72>
   2028a:	6803      	ldr	r3, [r0, #0]
   2028c:	b29b      	uxth	r3, r3
   2028e:	2b05      	cmp	r3, #5
   20290:	d1f1      	bne.n	20276 <tls_interface_sendto+0x56>
   20292:	4b0e      	ldr	r3, [pc, #56]	; (202cc <tls_interface_sendto+0xac>)
   20294:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   20298:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2029c:	2b02      	cmp	r3, #2
   2029e:	d1ea      	bne.n	20276 <tls_interface_sendto+0x56>
   202a0:	4601      	mov	r1, r0
   202a2:	4620      	mov	r0, r4
   202a4:	f7ff feb0 	bl	20008 <secure_client_socket>
   202a8:	2800      	cmp	r0, #0
   202aa:	d003      	beq.n	202b4 <tls_interface_sendto+0x94>
   202ac:	dcd8      	bgt.n	20260 <tls_interface_sendto+0x40>
   202ae:	e7d9      	b.n	20264 <tls_interface_sendto+0x44>
   202b0:	2009      	movs	r0, #9
   202b2:	e7d5      	b.n	20260 <tls_interface_sendto+0x40>
   202b4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   202b8:	463b      	mov	r3, r7
   202ba:	4632      	mov	r2, r6
   202bc:	4629      	mov	r1, r5
   202be:	4620      	mov	r0, r4
   202c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202c4:	f000 bdee 	b.w	20ea4 <ip_interface_sendto>
   202c8:	2023      	movs	r0, #35	; 0x23
   202ca:	e7c9      	b.n	20260 <tls_interface_sendto+0x40>
   202cc:	200223e4 	.word	0x200223e4

000202d0 <tls_interface_recvfrom>:
   202d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202d4:	460d      	mov	r5, r1
   202d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   202da:	4616      	mov	r6, r2
   202dc:	461f      	mov	r7, r3
   202de:	4604      	mov	r4, r0
   202e0:	f006 fc92 	bl	26c08 <interface_socket_from_handle_get>
   202e4:	2800      	cmp	r0, #0
   202e6:	d038      	beq.n	2035a <tls_interface_recvfrom+0x8a>
   202e8:	6803      	ldr	r3, [r0, #0]
   202ea:	b29b      	uxth	r3, r3
   202ec:	2b0c      	cmp	r3, #12
   202ee:	d00f      	beq.n	20310 <tls_interface_recvfrom+0x40>
   202f0:	6803      	ldr	r3, [r0, #0]
   202f2:	b29b      	uxth	r3, r3
   202f4:	2b0d      	cmp	r3, #13
   202f6:	d00b      	beq.n	20310 <tls_interface_recvfrom+0x40>
   202f8:	6903      	ldr	r3, [r0, #16]
   202fa:	2b01      	cmp	r3, #1
   202fc:	d01a      	beq.n	20334 <tls_interface_recvfrom+0x64>
   202fe:	2b02      	cmp	r3, #2
   20300:	d010      	beq.n	20324 <tls_interface_recvfrom+0x54>
   20302:	2023      	movs	r0, #35	; 0x23
   20304:	f7fc fde8 	bl	1ced8 <bsd_os_errno_set>
   20308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20310:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20314:	463b      	mov	r3, r7
   20316:	4632      	mov	r2, r6
   20318:	4629      	mov	r1, r5
   2031a:	4620      	mov	r0, r4
   2031c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20320:	f000 bf26 	b.w	21170 <ip_interface_recvfrom>
   20324:	6803      	ldr	r3, [r0, #0]
   20326:	b29b      	uxth	r3, r3
   20328:	2b02      	cmp	r3, #2
   2032a:	d007      	beq.n	2033c <tls_interface_recvfrom+0x6c>
   2032c:	6803      	ldr	r3, [r0, #0]
   2032e:	b29b      	uxth	r3, r3
   20330:	2b04      	cmp	r3, #4
   20332:	d003      	beq.n	2033c <tls_interface_recvfrom+0x6c>
   20334:	6803      	ldr	r3, [r0, #0]
   20336:	b29b      	uxth	r3, r3
   20338:	2b05      	cmp	r3, #5
   2033a:	d1e2      	bne.n	20302 <tls_interface_recvfrom+0x32>
   2033c:	4b08      	ldr	r3, [pc, #32]	; (20360 <tls_interface_recvfrom+0x90>)
   2033e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   20342:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20346:	2b02      	cmp	r3, #2
   20348:	d1db      	bne.n	20302 <tls_interface_recvfrom+0x32>
   2034a:	4601      	mov	r1, r0
   2034c:	4620      	mov	r0, r4
   2034e:	f7ff fe5b 	bl	20008 <secure_client_socket>
   20352:	2800      	cmp	r0, #0
   20354:	d0dc      	beq.n	20310 <tls_interface_recvfrom+0x40>
   20356:	dcd5      	bgt.n	20304 <tls_interface_recvfrom+0x34>
   20358:	e7d6      	b.n	20308 <tls_interface_recvfrom+0x38>
   2035a:	2009      	movs	r0, #9
   2035c:	e7d2      	b.n	20304 <tls_interface_recvfrom+0x34>
   2035e:	bf00      	nop
   20360:	200223e4 	.word	0x200223e4

00020364 <tls_interface_bind>:
   20364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20368:	b082      	sub	sp, #8
   2036a:	460e      	mov	r6, r1
   2036c:	4617      	mov	r7, r2
   2036e:	4605      	mov	r5, r0
   20370:	f006 fc4a 	bl	26c08 <interface_socket_from_handle_get>
   20374:	2800      	cmp	r0, #0
   20376:	d069      	beq.n	2044c <tls_interface_bind+0xe8>
   20378:	6803      	ldr	r3, [r0, #0]
   2037a:	4604      	mov	r4, r0
   2037c:	b29b      	uxth	r3, r3
   2037e:	2b02      	cmp	r3, #2
   20380:	d158      	bne.n	20434 <tls_interface_bind+0xd0>
   20382:	463a      	mov	r2, r7
   20384:	4631      	mov	r1, r6
   20386:	4628      	mov	r0, r5
   20388:	f001 f8dc 	bl	21544 <ip_interface_bind>
   2038c:	2800      	cmp	r0, #0
   2038e:	d148      	bne.n	20422 <tls_interface_bind+0xbe>
   20390:	00ee      	lsls	r6, r5, #3
   20392:	4f2f      	ldr	r7, [pc, #188]	; (20450 <tls_interface_bind+0xec>)
   20394:	1973      	adds	r3, r6, r5
   20396:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2039a:	2b01      	cmp	r3, #1
   2039c:	d002      	beq.n	203a4 <tls_interface_bind+0x40>
   2039e:	b002      	add	sp, #8
   203a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   203a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   203a8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 20454 <tls_interface_bind+0xf0>
   203ac:	f247 0281 	movw	r2, #28801	; 0x7081
   203b0:	eb0a 0906 	add.w	r9, sl, r6
   203b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   203b8:	69a1      	ldr	r1, [r4, #24]
   203ba:	4628      	mov	r0, r5
   203bc:	f8cd c004 	str.w	ip, [sp, #4]
   203c0:	f000 fbd2 	bl	20b68 <ip_interface_request_create>
   203c4:	4680      	mov	r8, r0
   203c6:	2800      	cmp	r0, #0
   203c8:	d03e      	beq.n	20448 <tls_interface_bind+0xe4>
   203ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   203ce:	bbaa      	cbnz	r2, 2043c <tls_interface_bind+0xd8>
   203d0:	1971      	adds	r1, r6, r5
   203d2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   203d6:	2224      	movs	r2, #36	; 0x24
   203d8:	f108 0014 	add.w	r0, r8, #20
   203dc:	f013 f9f0 	bl	337c0 <memcpy>
   203e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   203e4:	4641      	mov	r1, r8
   203e6:	3324      	adds	r3, #36	; 0x24
   203e8:	f8c8 3008 	str.w	r3, [r8, #8]
   203ec:	6822      	ldr	r2, [r4, #0]
   203ee:	2304      	movs	r3, #4
   203f0:	0c12      	lsrs	r2, r2, #16
   203f2:	0412      	lsls	r2, r2, #16
   203f4:	f042 020a 	orr.w	r2, r2, #10
   203f8:	6022      	str	r2, [r4, #0]
   203fa:	4620      	mov	r0, r4
   203fc:	f247 0281 	movw	r2, #28801	; 0x7081
   20400:	f000 fbd2 	bl	20ba8 <ip_interface_request_send>
   20404:	b968      	cbnz	r0, 20422 <tls_interface_bind+0xbe>
   20406:	6823      	ldr	r3, [r4, #0]
   20408:	00db      	lsls	r3, r3, #3
   2040a:	d415      	bmi.n	20438 <tls_interface_bind+0xd4>
   2040c:	4628      	mov	r0, r5
   2040e:	ab01      	add	r3, sp, #4
   20410:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20414:	210b      	movs	r1, #11
   20416:	f000 fbdb 	bl	20bd0 <ip_interface_wait>
   2041a:	2800      	cmp	r0, #0
   2041c:	d0bf      	beq.n	2039e <tls_interface_bind+0x3a>
   2041e:	2304      	movs	r3, #4
   20420:	6023      	str	r3, [r4, #0]
   20422:	2800      	cmp	r0, #0
   20424:	ddbb      	ble.n	2039e <tls_interface_bind+0x3a>
   20426:	f7fc fd57 	bl	1ced8 <bsd_os_errno_set>
   2042a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2042e:	b002      	add	sp, #8
   20430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20434:	202d      	movs	r0, #45	; 0x2d
   20436:	e7f6      	b.n	20426 <tls_interface_bind+0xc2>
   20438:	2073      	movs	r0, #115	; 0x73
   2043a:	e7f4      	b.n	20426 <tls_interface_bind+0xc2>
   2043c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   20440:	6800      	ldr	r0, [r0, #0]
   20442:	f013 f9bd 	bl	337c0 <memcpy>
   20446:	e7c3      	b.n	203d0 <tls_interface_bind+0x6c>
   20448:	200c      	movs	r0, #12
   2044a:	e7ec      	b.n	20426 <tls_interface_bind+0xc2>
   2044c:	2009      	movs	r0, #9
   2044e:	e7ea      	b.n	20426 <tls_interface_bind+0xc2>
   20450:	200223e4 	.word	0x200223e4
   20454:	20022528 	.word	0x20022528

00020458 <tls_interface_connect>:
   20458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2045a:	460e      	mov	r6, r1
   2045c:	4617      	mov	r7, r2
   2045e:	4604      	mov	r4, r0
   20460:	f006 fbd2 	bl	26c08 <interface_socket_from_handle_get>
   20464:	b1e8      	cbz	r0, 204a2 <tls_interface_connect+0x4a>
   20466:	4b13      	ldr	r3, [pc, #76]	; (204b4 <tls_interface_connect+0x5c>)
   20468:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2046c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20470:	2b02      	cmp	r3, #2
   20472:	d11c      	bne.n	204ae <tls_interface_connect+0x56>
   20474:	6803      	ldr	r3, [r0, #0]
   20476:	4605      	mov	r5, r0
   20478:	b29b      	uxth	r3, r3
   2047a:	2b02      	cmp	r3, #2
   2047c:	d003      	beq.n	20486 <tls_interface_connect+0x2e>
   2047e:	6803      	ldr	r3, [r0, #0]
   20480:	b29b      	uxth	r3, r3
   20482:	2b04      	cmp	r3, #4
   20484:	d113      	bne.n	204ae <tls_interface_connect+0x56>
   20486:	463a      	mov	r2, r7
   20488:	4631      	mov	r1, r6
   2048a:	4620      	mov	r0, r4
   2048c:	f000 ff98 	bl	213c0 <ip_interface_connect>
   20490:	b110      	cbz	r0, 20498 <tls_interface_connect+0x40>
   20492:	2800      	cmp	r0, #0
   20494:	dc06      	bgt.n	204a4 <tls_interface_connect+0x4c>
   20496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20498:	4629      	mov	r1, r5
   2049a:	4620      	mov	r0, r4
   2049c:	f7ff fdb4 	bl	20008 <secure_client_socket>
   204a0:	e7f7      	b.n	20492 <tls_interface_connect+0x3a>
   204a2:	2009      	movs	r0, #9
   204a4:	f7fc fd18 	bl	1ced8 <bsd_os_errno_set>
   204a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   204ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204ae:	202d      	movs	r0, #45	; 0x2d
   204b0:	e7f8      	b.n	204a4 <tls_interface_connect+0x4c>
   204b2:	bf00      	nop
   204b4:	200223e4 	.word	0x200223e4

000204b8 <tls_interface_listen>:
   204b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204bc:	b085      	sub	sp, #20
   204be:	9101      	str	r1, [sp, #4]
   204c0:	4605      	mov	r5, r0
   204c2:	f006 fba1 	bl	26c08 <interface_socket_from_handle_get>
   204c6:	2800      	cmp	r0, #0
   204c8:	d07c      	beq.n	205c4 <tls_interface_listen+0x10c>
   204ca:	6903      	ldr	r3, [r0, #16]
   204cc:	4604      	mov	r4, r0
   204ce:	2b01      	cmp	r3, #1
   204d0:	d176      	bne.n	205c0 <tls_interface_listen+0x108>
   204d2:	6803      	ldr	r3, [r0, #0]
   204d4:	b29b      	uxth	r3, r3
   204d6:	2b04      	cmp	r3, #4
   204d8:	d062      	beq.n	205a0 <tls_interface_listen+0xe8>
   204da:	6823      	ldr	r3, [r4, #0]
   204dc:	b29b      	uxth	r3, r3
   204de:	2b0b      	cmp	r3, #11
   204e0:	d16e      	bne.n	205c0 <tls_interface_listen+0x108>
   204e2:	00ee      	lsls	r6, r5, #3
   204e4:	4f38      	ldr	r7, [pc, #224]	; (205c8 <tls_interface_listen+0x110>)
   204e6:	1973      	adds	r3, r6, r5
   204e8:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   204ec:	2b01      	cmp	r3, #1
   204ee:	d167      	bne.n	205c0 <tls_interface_listen+0x108>
   204f0:	2201      	movs	r2, #1
   204f2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   204f6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 205cc <tls_interface_listen+0x114>
   204fa:	1973      	adds	r3, r6, r5
   204fc:	00ee      	lsls	r6, r5, #3
   204fe:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   20502:	eb09 0806 	add.w	r8, r9, r6
   20506:	69a1      	ldr	r1, [r4, #24]
   20508:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2050c:	f247 0281 	movw	r2, #28801	; 0x7081
   20510:	4628      	mov	r0, r5
   20512:	f8d4 a000 	ldr.w	sl, [r4]
   20516:	f8cd c00c 	str.w	ip, [sp, #12]
   2051a:	f000 fb25 	bl	20b68 <ip_interface_request_create>
   2051e:	4683      	mov	fp, r0
   20520:	2800      	cmp	r0, #0
   20522:	d04b      	beq.n	205bc <tls_interface_listen+0x104>
   20524:	f8d8 2004 	ldr.w	r2, [r8, #4]
   20528:	2a00      	cmp	r2, #0
   2052a:	d141      	bne.n	205b0 <tls_interface_listen+0xf8>
   2052c:	1971      	adds	r1, r6, r5
   2052e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   20532:	2224      	movs	r2, #36	; 0x24
   20534:	f10b 0014 	add.w	r0, fp, #20
   20538:	f013 f942 	bl	337c0 <memcpy>
   2053c:	f8db 2008 	ldr.w	r2, [fp, #8]
   20540:	4659      	mov	r1, fp
   20542:	3224      	adds	r2, #36	; 0x24
   20544:	f8cb 2008 	str.w	r2, [fp, #8]
   20548:	6822      	ldr	r2, [r4, #0]
   2054a:	4653      	mov	r3, sl
   2054c:	0c12      	lsrs	r2, r2, #16
   2054e:	0412      	lsls	r2, r2, #16
   20550:	f042 020a 	orr.w	r2, r2, #10
   20554:	6022      	str	r2, [r4, #0]
   20556:	4620      	mov	r0, r4
   20558:	f247 0281 	movw	r2, #28801	; 0x7081
   2055c:	f000 fb24 	bl	20ba8 <ip_interface_request_send>
   20560:	b960      	cbnz	r0, 2057c <tls_interface_listen+0xc4>
   20562:	6823      	ldr	r3, [r4, #0]
   20564:	00db      	lsls	r3, r3, #3
   20566:	d40e      	bmi.n	20586 <tls_interface_listen+0xce>
   20568:	ab03      	add	r3, sp, #12
   2056a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2056e:	210b      	movs	r1, #11
   20570:	4628      	mov	r0, r5
   20572:	f000 fb2d 	bl	20bd0 <ip_interface_wait>
   20576:	b170      	cbz	r0, 20596 <tls_interface_listen+0xde>
   20578:	f8c4 a000 	str.w	sl, [r4]
   2057c:	2800      	cmp	r0, #0
   2057e:	dc03      	bgt.n	20588 <tls_interface_listen+0xd0>
   20580:	b005      	add	sp, #20
   20582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20586:	2073      	movs	r0, #115	; 0x73
   20588:	f7fc fca6 	bl	1ced8 <bsd_os_errno_set>
   2058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20590:	b005      	add	sp, #20
   20592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20596:	9901      	ldr	r1, [sp, #4]
   20598:	4628      	mov	r0, r5
   2059a:	f001 f875 	bl	21688 <ip_interface_listen>
   2059e:	e7ed      	b.n	2057c <tls_interface_listen+0xc4>
   205a0:	00ee      	lsls	r6, r5, #3
   205a2:	4f09      	ldr	r7, [pc, #36]	; (205c8 <tls_interface_listen+0x110>)
   205a4:	1973      	adds	r3, r6, r5
   205a6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   205aa:	2b02      	cmp	r3, #2
   205ac:	d195      	bne.n	204da <tls_interface_listen+0x22>
   205ae:	e79f      	b.n	204f0 <tls_interface_listen+0x38>
   205b0:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   205b4:	6800      	ldr	r0, [r0, #0]
   205b6:	f013 f903 	bl	337c0 <memcpy>
   205ba:	e7b7      	b.n	2052c <tls_interface_listen+0x74>
   205bc:	200c      	movs	r0, #12
   205be:	e7e3      	b.n	20588 <tls_interface_listen+0xd0>
   205c0:	202d      	movs	r0, #45	; 0x2d
   205c2:	e7e1      	b.n	20588 <tls_interface_listen+0xd0>
   205c4:	2009      	movs	r0, #9
   205c6:	e7df      	b.n	20588 <tls_interface_listen+0xd0>
   205c8:	200223e4 	.word	0x200223e4
   205cc:	20022528 	.word	0x20022528

000205d0 <tls_interface_accept>:
   205d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   205d4:	b082      	sub	sp, #8
   205d6:	460e      	mov	r6, r1
   205d8:	4617      	mov	r7, r2
   205da:	4698      	mov	r8, r3
   205dc:	4605      	mov	r5, r0
   205de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   205e2:	f006 fb11 	bl	26c08 <interface_socket_from_handle_get>
   205e6:	9401      	str	r4, [sp, #4]
   205e8:	2800      	cmp	r0, #0
   205ea:	d03c      	beq.n	20666 <tls_interface_accept+0x96>
   205ec:	6800      	ldr	r0, [r0, #0]
   205ee:	b280      	uxth	r0, r0
   205f0:	2806      	cmp	r0, #6
   205f2:	d138      	bne.n	20666 <tls_interface_accept+0x96>
   205f4:	4643      	mov	r3, r8
   205f6:	463a      	mov	r2, r7
   205f8:	4631      	mov	r1, r6
   205fa:	4628      	mov	r0, r5
   205fc:	f001 f8bc 	bl	21778 <ip_interface_accept>
   20600:	4604      	mov	r4, r0
   20602:	b128      	cbz	r0, 20610 <tls_interface_accept+0x40>
   20604:	2c00      	cmp	r4, #0
   20606:	dc2f      	bgt.n	20668 <tls_interface_accept+0x98>
   20608:	4620      	mov	r0, r4
   2060a:	b002      	add	sp, #8
   2060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20610:	4628      	mov	r0, r5
   20612:	f006 faf9 	bl	26c08 <interface_socket_from_handle_get>
   20616:	6803      	ldr	r3, [r0, #0]
   20618:	4f18      	ldr	r7, [pc, #96]	; (2067c <tls_interface_accept+0xac>)
   2061a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2061e:	6003      	str	r3, [r0, #0]
   20620:	6803      	ldr	r3, [r0, #0]
   20622:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2062a:	4606      	mov	r6, r0
   2062c:	6003      	str	r3, [r0, #0]
   2062e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   20632:	2224      	movs	r2, #36	; 0x24
   20634:	4638      	mov	r0, r7
   20636:	f013 f8c3 	bl	337c0 <memcpy>
   2063a:	2302      	movs	r3, #2
   2063c:	703b      	strb	r3, [r7, #0]
   2063e:	6833      	ldr	r3, [r6, #0]
   20640:	4620      	mov	r0, r4
   20642:	0c1b      	lsrs	r3, r3, #16
   20644:	041b      	lsls	r3, r3, #16
   20646:	f043 030b 	orr.w	r3, r3, #11
   2064a:	6033      	str	r3, [r6, #0]
   2064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20650:	ab01      	add	r3, sp, #4
   20652:	210c      	movs	r1, #12
   20654:	f000 fabc 	bl	20bd0 <ip_interface_wait>
   20658:	4604      	mov	r4, r0
   2065a:	2800      	cmp	r0, #0
   2065c:	d0d4      	beq.n	20608 <tls_interface_accept+0x38>
   2065e:	2000      	movs	r0, #0
   20660:	f000 fbae 	bl	20dc0 <ip_interface_close>
   20664:	e7ce      	b.n	20604 <tls_interface_accept+0x34>
   20666:	2409      	movs	r4, #9
   20668:	4620      	mov	r0, r4
   2066a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2066e:	f7fc fc33 	bl	1ced8 <bsd_os_errno_set>
   20672:	4620      	mov	r0, r4
   20674:	b002      	add	sp, #8
   20676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2067a:	bf00      	nop
   2067c:	200223e4 	.word	0x200223e4

00020680 <tls_interface_setopt>:
   20680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20684:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   20688:	9e06      	ldr	r6, [sp, #24]
   2068a:	d11e      	bne.n	206ca <tls_interface_setopt+0x4a>
   2068c:	461f      	mov	r7, r3
   2068e:	4605      	mov	r5, r0
   20690:	2b00      	cmp	r3, #0
   20692:	f000 808c 	beq.w	207ae <tls_interface_setopt+0x12e>
   20696:	4690      	mov	r8, r2
   20698:	f006 fab6 	bl	26c08 <interface_socket_from_handle_get>
   2069c:	2800      	cmp	r0, #0
   2069e:	d07b      	beq.n	20798 <tls_interface_setopt+0x118>
   206a0:	6804      	ldr	r4, [r0, #0]
   206a2:	b2a4      	uxth	r4, r4
   206a4:	2c02      	cmp	r4, #2
   206a6:	d007      	beq.n	206b8 <tls_interface_setopt+0x38>
   206a8:	6803      	ldr	r3, [r0, #0]
   206aa:	b29b      	uxth	r3, r3
   206ac:	2b04      	cmp	r3, #4
   206ae:	d003      	beq.n	206b8 <tls_interface_setopt+0x38>
   206b0:	6803      	ldr	r3, [r0, #0]
   206b2:	b29b      	uxth	r3, r3
   206b4:	2b05      	cmp	r3, #5
   206b6:	d16f      	bne.n	20798 <tls_interface_setopt+0x118>
   206b8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   206bc:	2a04      	cmp	r2, #4
   206be:	d87c      	bhi.n	207ba <tls_interface_setopt+0x13a>
   206c0:	e8df f002 	tbb	[pc, r2]
   206c4:	41324e24 	.word	0x41324e24
   206c8:	07          	.byte	0x07
   206c9:	00          	.byte	0x00
   206ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   206ce:	f001 b995 	b.w	219fc <ip_interface_setopt>
   206d2:	4c3b      	ldr	r4, [pc, #236]	; (207c0 <tls_interface_setopt+0x140>)
   206d4:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   206d8:	b138      	cbz	r0, 206ea <tls_interface_setopt+0x6a>
   206da:	f005 fe47 	bl	2636c <nrf_free>
   206de:	2200      	movs	r2, #0
   206e0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   206e4:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   206e8:	605a      	str	r2, [r3, #4]
   206ea:	4630      	mov	r0, r6
   206ec:	b34e      	cbz	r6, 20742 <tls_interface_setopt+0xc2>
   206ee:	f005 fe33 	bl	26358 <nrf_malloc>
   206f2:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   206f6:	2800      	cmp	r0, #0
   206f8:	d057      	beq.n	207aa <tls_interface_setopt+0x12a>
   206fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   206fe:	4632      	mov	r2, r6
   20700:	4639      	mov	r1, r7
   20702:	6066      	str	r6, [r4, #4]
   20704:	f013 f85c 	bl	337c0 <memcpy>
   20708:	2000      	movs	r0, #0
   2070a:	e01a      	b.n	20742 <tls_interface_setopt+0xc2>
   2070c:	2e04      	cmp	r6, #4
   2070e:	d14a      	bne.n	207a6 <tls_interface_setopt+0x126>
   20710:	6838      	ldr	r0, [r7, #0]
   20712:	2800      	cmp	r0, #0
   20714:	d039      	beq.n	2078a <tls_interface_setopt+0x10a>
   20716:	2801      	cmp	r0, #1
   20718:	d145      	bne.n	207a6 <tls_interface_setopt+0x126>
   2071a:	4a2a      	ldr	r2, [pc, #168]	; (207c4 <tls_interface_setopt+0x144>)
   2071c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20720:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   20724:	2000      	movs	r0, #0
   20726:	e00c      	b.n	20742 <tls_interface_setopt+0xc2>
   20728:	2e01      	cmp	r6, #1
   2072a:	d13c      	bne.n	207a6 <tls_interface_setopt+0x126>
   2072c:	783a      	ldrb	r2, [r7, #0]
   2072e:	2000      	movs	r0, #0
   20730:	3200      	adds	r2, #0
   20732:	bf18      	it	ne
   20734:	2201      	movne	r2, #1
   20736:	4b23      	ldr	r3, [pc, #140]	; (207c4 <tls_interface_setopt+0x144>)
   20738:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2073c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   20740:	7062      	strb	r2, [r4, #1]
   20742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20746:	2e04      	cmp	r6, #4
   20748:	d12d      	bne.n	207a6 <tls_interface_setopt+0x126>
   2074a:	683a      	ldr	r2, [r7, #0]
   2074c:	2a02      	cmp	r2, #2
   2074e:	d82a      	bhi.n	207a6 <tls_interface_setopt+0x126>
   20750:	4b1c      	ldr	r3, [pc, #112]	; (207c4 <tls_interface_setopt+0x144>)
   20752:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2075a:	70a2      	strb	r2, [r4, #2]
   2075c:	2000      	movs	r0, #0
   2075e:	e7f0      	b.n	20742 <tls_interface_setopt+0xc2>
   20760:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   20764:	d01f      	beq.n	207a6 <tls_interface_setopt+0x126>
   20766:	f016 0403 	ands.w	r4, r6, #3
   2076a:	d11c      	bne.n	207a6 <tls_interface_setopt+0x126>
   2076c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20770:	00ad      	lsls	r5, r5, #2
   20772:	4b14      	ldr	r3, [pc, #80]	; (207c4 <tls_interface_setopt+0x144>)
   20774:	1d28      	adds	r0, r5, #4
   20776:	4418      	add	r0, r3
   20778:	442b      	add	r3, r5
   2077a:	4632      	mov	r2, r6
   2077c:	4639      	mov	r1, r7
   2077e:	f883 c003 	strb.w	ip, [r3, #3]
   20782:	f013 f81d 	bl	337c0 <memcpy>
   20786:	4620      	mov	r0, r4
   20788:	e7db      	b.n	20742 <tls_interface_setopt+0xc2>
   2078a:	2102      	movs	r1, #2
   2078c:	4a0d      	ldr	r2, [pc, #52]	; (207c4 <tls_interface_setopt+0x144>)
   2078e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20792:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   20796:	e7d4      	b.n	20742 <tls_interface_setopt+0xc2>
   20798:	2009      	movs	r0, #9
   2079a:	f7fc fb9d 	bl	1ced8 <bsd_os_errno_set>
   2079e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207a6:	2016      	movs	r0, #22
   207a8:	e7f7      	b.n	2079a <tls_interface_setopt+0x11a>
   207aa:	200c      	movs	r0, #12
   207ac:	e7f5      	b.n	2079a <tls_interface_setopt+0x11a>
   207ae:	200e      	movs	r0, #14
   207b0:	f7fc fb92 	bl	1ced8 <bsd_os_errno_set>
   207b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207b8:	e7c3      	b.n	20742 <tls_interface_setopt+0xc2>
   207ba:	202a      	movs	r0, #42	; 0x2a
   207bc:	e7ed      	b.n	2079a <tls_interface_setopt+0x11a>
   207be:	bf00      	nop
   207c0:	20022528 	.word	0x20022528
   207c4:	200223e4 	.word	0x200223e4

000207c8 <tls_interface_getopt>:
   207c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207cc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   207d0:	9f06      	ldr	r7, [sp, #24]
   207d2:	d112      	bne.n	207fa <tls_interface_getopt+0x32>
   207d4:	461d      	mov	r5, r3
   207d6:	b16b      	cbz	r3, 207f4 <tls_interface_getopt+0x2c>
   207d8:	b167      	cbz	r7, 207f4 <tls_interface_getopt+0x2c>
   207da:	4606      	mov	r6, r0
   207dc:	4614      	mov	r4, r2
   207de:	f006 fa13 	bl	26c08 <interface_socket_from_handle_get>
   207e2:	2800      	cmp	r0, #0
   207e4:	d04f      	beq.n	20886 <tls_interface_getopt+0xbe>
   207e6:	3c01      	subs	r4, #1
   207e8:	2c03      	cmp	r4, #3
   207ea:	d852      	bhi.n	20892 <tls_interface_getopt+0xca>
   207ec:	e8df f004 	tbb	[pc, r4]
   207f0:	09152139 	.word	0x09152139
   207f4:	200e      	movs	r0, #14
   207f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   207fe:	f001 ba0f 	b.w	21c20 <ip_interface_getopt>
   20802:	683b      	ldr	r3, [r7, #0]
   20804:	2b04      	cmp	r3, #4
   20806:	d13c      	bne.n	20882 <tls_interface_getopt+0xba>
   20808:	4b23      	ldr	r3, [pc, #140]	; (20898 <tls_interface_getopt+0xd0>)
   2080a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2080e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20812:	78b3      	ldrb	r3, [r6, #2]
   20814:	2000      	movs	r0, #0
   20816:	602b      	str	r3, [r5, #0]
   20818:	e7ed      	b.n	207f6 <tls_interface_getopt+0x2e>
   2081a:	683b      	ldr	r3, [r7, #0]
   2081c:	2b01      	cmp	r3, #1
   2081e:	d130      	bne.n	20882 <tls_interface_getopt+0xba>
   20820:	4b1d      	ldr	r3, [pc, #116]	; (20898 <tls_interface_getopt+0xd0>)
   20822:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20826:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2082a:	7873      	ldrb	r3, [r6, #1]
   2082c:	2000      	movs	r0, #0
   2082e:	702b      	strb	r3, [r5, #0]
   20830:	e7e1      	b.n	207f6 <tls_interface_getopt+0x2e>
   20832:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20836:	4918      	ldr	r1, [pc, #96]	; (20898 <tls_interface_getopt+0xd0>)
   20838:	683b      	ldr	r3, [r7, #0]
   2083a:	00b6      	lsls	r6, r6, #2
   2083c:	198a      	adds	r2, r1, r6
   2083e:	f013 0403 	ands.w	r4, r3, #3
   20842:	78d0      	ldrb	r0, [r2, #3]
   20844:	d121      	bne.n	2088a <tls_interface_getopt+0xc2>
   20846:	089b      	lsrs	r3, r3, #2
   20848:	4283      	cmp	r3, r0
   2084a:	bf28      	it	cs
   2084c:	4603      	movcs	r3, r0
   2084e:	009a      	lsls	r2, r3, #2
   20850:	b1db      	cbz	r3, 2088a <tls_interface_getopt+0xc2>
   20852:	3604      	adds	r6, #4
   20854:	4431      	add	r1, r6
   20856:	603a      	str	r2, [r7, #0]
   20858:	4628      	mov	r0, r5
   2085a:	f012 ffb1 	bl	337c0 <memcpy>
   2085e:	4620      	mov	r0, r4
   20860:	e7c9      	b.n	207f6 <tls_interface_getopt+0x2e>
   20862:	683b      	ldr	r3, [r7, #0]
   20864:	2b04      	cmp	r3, #4
   20866:	d10c      	bne.n	20882 <tls_interface_getopt+0xba>
   20868:	4b0b      	ldr	r3, [pc, #44]	; (20898 <tls_interface_getopt+0xd0>)
   2086a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2086e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   20872:	2000      	movs	r0, #0
   20874:	f1a3 0301 	sub.w	r3, r3, #1
   20878:	fab3 f383 	clz	r3, r3
   2087c:	095b      	lsrs	r3, r3, #5
   2087e:	602b      	str	r3, [r5, #0]
   20880:	e7b9      	b.n	207f6 <tls_interface_getopt+0x2e>
   20882:	2016      	movs	r0, #22
   20884:	e7b7      	b.n	207f6 <tls_interface_getopt+0x2e>
   20886:	2009      	movs	r0, #9
   20888:	e7b5      	b.n	207f6 <tls_interface_getopt+0x2e>
   2088a:	2800      	cmp	r0, #0
   2088c:	d1f9      	bne.n	20882 <tls_interface_getopt+0xba>
   2088e:	6038      	str	r0, [r7, #0]
   20890:	e7b1      	b.n	207f6 <tls_interface_getopt+0x2e>
   20892:	202a      	movs	r0, #42	; 0x2a
   20894:	e7af      	b.n	207f6 <tls_interface_getopt+0x2e>
   20896:	bf00      	nop
   20898:	200223e4 	.word	0x200223e4

0002089c <tls_rpc_ip_event_handler>:
   2089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2089e:	f248 0581 	movw	r5, #32897	; 0x8081
   208a2:	42ab      	cmp	r3, r5
   208a4:	460c      	mov	r4, r1
   208a6:	d062      	beq.n	2096e <tls_rpc_ip_event_handler+0xd2>
   208a8:	f249 0182 	movw	r1, #36994	; 0x9082
   208ac:	428b      	cmp	r3, r1
   208ae:	4606      	mov	r6, r0
   208b0:	d02e      	beq.n	20910 <tls_rpc_ip_event_handler+0x74>
   208b2:	f248 0102 	movw	r1, #32770	; 0x8002
   208b6:	428b      	cmp	r3, r1
   208b8:	d001      	beq.n	208be <tls_rpc_ip_event_handler+0x22>
   208ba:	2001      	movs	r0, #1
   208bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   208be:	2c00      	cmp	r4, #0
   208c0:	d0fb      	beq.n	208ba <tls_rpc_ip_event_handler+0x1e>
   208c2:	6963      	ldr	r3, [r4, #20]
   208c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   208c8:	d002      	beq.n	208d0 <tls_rpc_ip_event_handler+0x34>
   208ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   208ce:	d1f4      	bne.n	208ba <tls_rpc_ip_event_handler+0x1e>
   208d0:	6823      	ldr	r3, [r4, #0]
   208d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   208d6:	6023      	str	r3, [r4, #0]
   208d8:	6955      	ldr	r5, [r2, #20]
   208da:	2d00      	cmp	r5, #0
   208dc:	d156      	bne.n	2098c <tls_rpc_ip_event_handler+0xf0>
   208de:	6823      	ldr	r3, [r4, #0]
   208e0:	0c1b      	lsrs	r3, r3, #16
   208e2:	041b      	lsls	r3, r3, #16
   208e4:	f043 0305 	orr.w	r3, r3, #5
   208e8:	6023      	str	r3, [r4, #0]
   208ea:	6823      	ldr	r3, [r4, #0]
   208ec:	00da      	lsls	r2, r3, #3
   208ee:	d50d      	bpl.n	2090c <tls_rpc_ip_event_handler+0x70>
   208f0:	4b2b      	ldr	r3, [pc, #172]	; (209a0 <tls_rpc_ip_event_handler+0x104>)
   208f2:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   208f6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   208fa:	2b02      	cmp	r3, #2
   208fc:	d106      	bne.n	2090c <tls_rpc_ip_event_handler+0x70>
   208fe:	4630      	mov	r0, r6
   20900:	4621      	mov	r1, r4
   20902:	f7ff fb81 	bl	20008 <secure_client_socket>
   20906:	b108      	cbz	r0, 2090c <tls_rpc_ip_event_handler+0x70>
   20908:	2873      	cmp	r0, #115	; 0x73
   2090a:	d142      	bne.n	20992 <tls_rpc_ip_event_handler+0xf6>
   2090c:	2000      	movs	r0, #0
   2090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20910:	2c00      	cmp	r4, #0
   20912:	d0fb      	beq.n	2090c <tls_rpc_ip_event_handler+0x70>
   20914:	6823      	ldr	r3, [r4, #0]
   20916:	b29b      	uxth	r3, r3
   20918:	2b0b      	cmp	r3, #11
   2091a:	d1f7      	bne.n	2090c <tls_rpc_ip_event_handler+0x70>
   2091c:	6915      	ldr	r5, [r2, #16]
   2091e:	2d00      	cmp	r5, #0
   20920:	d134      	bne.n	2098c <tls_rpc_ip_event_handler+0xf0>
   20922:	6823      	ldr	r3, [r4, #0]
   20924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   20928:	6023      	str	r3, [r4, #0]
   2092a:	6823      	ldr	r3, [r4, #0]
   2092c:	00db      	lsls	r3, r3, #3
   2092e:	d5ed      	bpl.n	2090c <tls_rpc_ip_event_handler+0x70>
   20930:	4f1c      	ldr	r7, [pc, #112]	; (209a4 <tls_rpc_ip_event_handler+0x108>)
   20932:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   20936:	b130      	cbz	r0, 20946 <tls_rpc_ip_event_handler+0xaa>
   20938:	f005 fd18 	bl	2636c <nrf_free>
   2093c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   20940:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   20944:	605d      	str	r5, [r3, #4]
   20946:	6823      	ldr	r3, [r4, #0]
   20948:	2000      	movs	r0, #0
   2094a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2094e:	6023      	str	r3, [r4, #0]
   20950:	6823      	ldr	r3, [r4, #0]
   20952:	0c1b      	lsrs	r3, r3, #16
   20954:	041b      	lsls	r3, r3, #16
   20956:	f043 030c 	orr.w	r3, r3, #12
   2095a:	6023      	str	r3, [r4, #0]
   2095c:	6823      	ldr	r3, [r4, #0]
   2095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   20962:	6023      	str	r3, [r4, #0]
   20964:	6823      	ldr	r3, [r4, #0]
   20966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2096a:	6023      	str	r3, [r4, #0]
   2096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2096e:	2900      	cmp	r1, #0
   20970:	d0cc      	beq.n	2090c <tls_rpc_ip_event_handler+0x70>
   20972:	680b      	ldr	r3, [r1, #0]
   20974:	b29b      	uxth	r3, r3
   20976:	2b0a      	cmp	r3, #10
   20978:	d1c8      	bne.n	2090c <tls_rpc_ip_event_handler+0x70>
   2097a:	6950      	ldr	r0, [r2, #20]
   2097c:	b938      	cbnz	r0, 2098e <tls_rpc_ip_event_handler+0xf2>
   2097e:	680b      	ldr	r3, [r1, #0]
   20980:	0c1b      	lsrs	r3, r3, #16
   20982:	041b      	lsls	r3, r3, #16
   20984:	f043 030b 	orr.w	r3, r3, #11
   20988:	600b      	str	r3, [r1, #0]
   2098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2098c:	4628      	mov	r0, r5
   2098e:	f000 f8e1 	bl	20b54 <rpc_error_to_nrf_bsd_error>
   20992:	6060      	str	r0, [r4, #4]
   20994:	6823      	ldr	r3, [r4, #0]
   20996:	2000      	movs	r0, #0
   20998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2099c:	6023      	str	r3, [r4, #0]
   2099e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209a0:	200223e4 	.word	0x200223e4
   209a4:	20022528 	.word	0x20022528

000209a8 <ip_client_event_handler>:
   209a8:	f850 1b08 	ldr.w	r1, [r0], #8
   209ac:	0c09      	lsrs	r1, r1, #16
   209ae:	f001 bc29 	b.w	22204 <rpc_ip_event_handler>
   209b2:	bf00      	nop

000209b4 <rpc_ip_client_init>:
   209b4:	4801      	ldr	r0, [pc, #4]	; (209bc <rpc_ip_client_init+0x8>)
   209b6:	f001 bf27 	b.w	22808 <rpc_client_register>
   209ba:	bf00      	nop
   209bc:	00034d5c 	.word	0x00034d5c

000209c0 <rpc_ip_client_request_alloc>:
   209c0:	2300      	movs	r3, #0
   209c2:	b510      	push	{r4, lr}
   209c4:	b082      	sub	sp, #8
   209c6:	9301      	str	r3, [sp, #4]
   209c8:	b158      	cbz	r0, 209e2 <rpc_ip_client_request_alloc+0x22>
   209ca:	4604      	mov	r4, r0
   209cc:	aa01      	add	r2, sp, #4
   209ce:	2004      	movs	r0, #4
   209d0:	f001 ff94 	bl	228fc <rpc_message_alloc>
   209d4:	b918      	cbnz	r0, 209de <rpc_ip_client_request_alloc+0x1e>
   209d6:	9b01      	ldr	r3, [sp, #4]
   209d8:	b10b      	cbz	r3, 209de <rpc_ip_client_request_alloc+0x1e>
   209da:	3308      	adds	r3, #8
   209dc:	6023      	str	r3, [r4, #0]
   209de:	b002      	add	sp, #8
   209e0:	bd10      	pop	{r4, pc}
   209e2:	2007      	movs	r0, #7
   209e4:	b002      	add	sp, #8
   209e6:	bd10      	pop	{r4, pc}

000209e8 <rpc_ip_client_request_send>:
   209e8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   209ec:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   209f0:	d10b      	bne.n	20a0a <rpc_ip_client_request_send+0x22>
   209f2:	b160      	cbz	r0, 20a0e <rpc_ip_client_request_send+0x26>
   209f4:	4603      	mov	r3, r0
   209f6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   209fa:	2004      	movs	r0, #4
   209fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20a00:	f843 1d08 	str.w	r1, [r3, #-8]!
   20a04:	4619      	mov	r1, r3
   20a06:	f001 bf69 	b.w	228dc <rpc_message_send>
   20a0a:	200f      	movs	r0, #15
   20a0c:	4770      	bx	lr
   20a0e:	2007      	movs	r0, #7
   20a10:	4770      	bx	lr
   20a12:	bf00      	nop

00020a14 <rpc_ip_client_message_free>:
   20a14:	b120      	cbz	r0, 20a20 <rpc_ip_client_message_free+0xc>
   20a16:	f1a0 0108 	sub.w	r1, r0, #8
   20a1a:	2004      	movs	r0, #4
   20a1c:	f001 bf9a 	b.w	22954 <rpc_message_free>
   20a20:	2007      	movs	r0, #7
   20a22:	4770      	bx	lr

00020a24 <rpc_ip_client_data_free>:
   20a24:	b118      	cbz	r0, 20a2e <rpc_ip_client_data_free+0xa>
   20a26:	4601      	mov	r1, r0
   20a28:	2004      	movs	r0, #4
   20a2a:	f001 bf9f 	b.w	2296c <rpc_message_data_free>
   20a2e:	2007      	movs	r0, #7
   20a30:	4770      	bx	lr
   20a32:	bf00      	nop

00020a34 <ip_recvd_packet_free_cb>:
   20a34:	b510      	push	{r4, lr}
   20a36:	4604      	mov	r4, r0
   20a38:	6800      	ldr	r0, [r0, #0]
   20a3a:	f7ff fff3 	bl	20a24 <rpc_ip_client_data_free>
   20a3e:	68a0      	ldr	r0, [r4, #8]
   20a40:	b118      	cbz	r0, 20a4a <ip_recvd_packet_free_cb+0x16>
   20a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20a46:	f005 bc91 	b.w	2636c <nrf_free>
   20a4a:	bd10      	pop	{r4, pc}

00020a4c <setopt_check_and_send_int>:
   20a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a50:	b082      	sub	sp, #8
   20a52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20a54:	2d04      	cmp	r5, #4
   20a56:	d15e      	bne.n	20b16 <setopt_check_and_send_int+0xca>
   20a58:	461e      	mov	r6, r3
   20a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20a5c:	2b00      	cmp	r3, #0
   20a5e:	d05a      	beq.n	20b16 <setopt_check_and_send_int+0xca>
   20a60:	4614      	mov	r4, r2
   20a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a66:	6823      	ldr	r3, [r4, #0]
   20a68:	9200      	str	r2, [sp, #0]
   20a6a:	025f      	lsls	r7, r3, #9
   20a6c:	d444      	bmi.n	20af8 <setopt_check_and_send_int+0xac>
   20a6e:	6823      	ldr	r3, [r4, #0]
   20a70:	021a      	lsls	r2, r3, #8
   20a72:	d441      	bmi.n	20af8 <setopt_check_and_send_int+0xac>
   20a74:	6823      	ldr	r3, [r4, #0]
   20a76:	01db      	lsls	r3, r3, #7
   20a78:	d43e      	bmi.n	20af8 <setopt_check_and_send_int+0xac>
   20a7a:	6823      	ldr	r3, [r4, #0]
   20a7c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   20a80:	d13a      	bne.n	20af8 <setopt_check_and_send_int+0xac>
   20a82:	f8d4 9000 	ldr.w	r9, [r4]
   20a86:	6822      	ldr	r2, [r4, #0]
   20a88:	4680      	mov	r8, r0
   20a8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   20a8e:	a802      	add	r0, sp, #8
   20a90:	460f      	mov	r7, r1
   20a92:	f840 3d04 	str.w	r3, [r0, #-4]!
   20a96:	4629      	mov	r1, r5
   20a98:	6022      	str	r2, [r4, #0]
   20a9a:	f8d4 a018 	ldr.w	sl, [r4, #24]
   20a9e:	f7ff ff8f 	bl	209c0 <rpc_ip_client_request_alloc>
   20aa2:	bb88      	cbnz	r0, 20b08 <setopt_check_and_send_int+0xbc>
   20aa4:	f247 0303 	movw	r3, #28675	; 0x7003
   20aa8:	2208      	movs	r2, #8
   20aaa:	9d01      	ldr	r5, [sp, #4]
   20aac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20ab0:	60eb      	str	r3, [r5, #12]
   20ab2:	f8c5 a010 	str.w	sl, [r5, #16]
   20ab6:	7268      	strb	r0, [r5, #9]
   20ab8:	72a8      	strb	r0, [r5, #10]
   20aba:	72e8      	strb	r0, [r5, #11]
   20abc:	722a      	strb	r2, [r5, #8]
   20abe:	68ab      	ldr	r3, [r5, #8]
   20ac0:	61af      	str	r7, [r5, #24]
   20ac2:	3308      	adds	r3, #8
   20ac4:	60ab      	str	r3, [r5, #8]
   20ac6:	2204      	movs	r2, #4
   20ac8:	990a      	ldr	r1, [sp, #40]	; 0x28
   20aca:	f8c5 8014 	str.w	r8, [r5, #20]
   20ace:	6828      	ldr	r0, [r5, #0]
   20ad0:	f012 fe76 	bl	337c0 <memcpy>
   20ad4:	f247 0103 	movw	r1, #28675	; 0x7003
   20ad8:	4628      	mov	r0, r5
   20ada:	f7ff ff85 	bl	209e8 <rpc_ip_client_request_send>
   20ade:	4607      	mov	r7, r0
   20ae0:	b9d8      	cbnz	r0, 20b1a <setopt_check_and_send_int+0xce>
   20ae2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   20ae6:	466b      	mov	r3, sp
   20ae8:	4611      	mov	r1, r2
   20aea:	4630      	mov	r0, r6
   20aec:	f006 f818 	bl	26b20 <interface_socket_wait>
   20af0:	b300      	cbz	r0, 20b34 <setopt_check_and_send_int+0xe8>
   20af2:	f8c4 9000 	str.w	r9, [r4]
   20af6:	e000      	b.n	20afa <setopt_check_and_send_int+0xae>
   20af8:	2023      	movs	r0, #35	; 0x23
   20afa:	f7fc f9ed 	bl	1ced8 <bsd_os_errno_set>
   20afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20b02:	b002      	add	sp, #8
   20b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20b08:	9d01      	ldr	r5, [sp, #4]
   20b0a:	2d00      	cmp	r5, #0
   20b0c:	d1d7      	bne.n	20abe <setopt_check_and_send_int+0x72>
   20b0e:	f8c4 9000 	str.w	r9, [r4]
   20b12:	200c      	movs	r0, #12
   20b14:	e7f1      	b.n	20afa <setopt_check_and_send_int+0xae>
   20b16:	2016      	movs	r0, #22
   20b18:	e7ef      	b.n	20afa <setopt_check_and_send_int+0xae>
   20b1a:	6828      	ldr	r0, [r5, #0]
   20b1c:	b108      	cbz	r0, 20b22 <setopt_check_and_send_int+0xd6>
   20b1e:	f7ff ff81 	bl	20a24 <rpc_ip_client_data_free>
   20b22:	4628      	mov	r0, r5
   20b24:	f7ff ff76 	bl	20a14 <rpc_ip_client_message_free>
   20b28:	f8c4 9000 	str.w	r9, [r4]
   20b2c:	2023      	movs	r0, #35	; 0x23
   20b2e:	f8c4 9000 	str.w	r9, [r4]
   20b32:	e7e2      	b.n	20afa <setopt_check_and_send_int+0xae>
   20b34:	4630      	mov	r0, r6
   20b36:	f006 f867 	bl	26c08 <interface_socket_from_handle_get>
   20b3a:	4603      	mov	r3, r0
   20b3c:	b130      	cbz	r0, 20b4c <setopt_check_and_send_int+0x100>
   20b3e:	6840      	ldr	r0, [r0, #4]
   20b40:	b108      	cbz	r0, 20b46 <setopt_check_and_send_int+0xfa>
   20b42:	605f      	str	r7, [r3, #4]
   20b44:	e7d5      	b.n	20af2 <setopt_check_and_send_int+0xa6>
   20b46:	f8c4 9000 	str.w	r9, [r4]
   20b4a:	e7da      	b.n	20b02 <setopt_check_and_send_int+0xb6>
   20b4c:	f8c4 9000 	str.w	r9, [r4]
   20b50:	e7d7      	b.n	20b02 <setopt_check_and_send_int+0xb6>
   20b52:	bf00      	nop

00020b54 <rpc_error_to_nrf_bsd_error>:
   20b54:	2810      	cmp	r0, #16
   20b56:	bf9a      	itte	ls
   20b58:	4b02      	ldrls	r3, [pc, #8]	; (20b64 <rpc_error_to_nrf_bsd_error+0x10>)
   20b5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   20b5e:	202d      	movhi	r0, #45	; 0x2d
   20b60:	4770      	bx	lr
   20b62:	bf00      	nop
   20b64:	00034d6c 	.word	0x00034d6c

00020b68 <ip_interface_request_create>:
   20b68:	b570      	push	{r4, r5, r6, lr}
   20b6a:	2500      	movs	r5, #0
   20b6c:	b082      	sub	sp, #8
   20b6e:	ac02      	add	r4, sp, #8
   20b70:	f844 5d04 	str.w	r5, [r4, #-4]!
   20b74:	4606      	mov	r6, r0
   20b76:	460d      	mov	r5, r1
   20b78:	4620      	mov	r0, r4
   20b7a:	4619      	mov	r1, r3
   20b7c:	4614      	mov	r4, r2
   20b7e:	f7ff ff1f 	bl	209c0 <rpc_ip_client_request_alloc>
   20b82:	b960      	cbnz	r0, 20b9e <ip_interface_request_create+0x36>
   20b84:	9b01      	ldr	r3, [sp, #4]
   20b86:	2208      	movs	r2, #8
   20b88:	7258      	strb	r0, [r3, #9]
   20b8a:	7298      	strb	r0, [r3, #10]
   20b8c:	72d8      	strb	r0, [r3, #11]
   20b8e:	4618      	mov	r0, r3
   20b90:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   20b94:	60dc      	str	r4, [r3, #12]
   20b96:	611d      	str	r5, [r3, #16]
   20b98:	721a      	strb	r2, [r3, #8]
   20b9a:	b002      	add	sp, #8
   20b9c:	bd70      	pop	{r4, r5, r6, pc}
   20b9e:	9b01      	ldr	r3, [sp, #4]
   20ba0:	4618      	mov	r0, r3
   20ba2:	b002      	add	sp, #8
   20ba4:	bd70      	pop	{r4, r5, r6, pc}
   20ba6:	bf00      	nop

00020ba8 <ip_interface_request_send>:
   20ba8:	b570      	push	{r4, r5, r6, lr}
   20baa:	460c      	mov	r4, r1
   20bac:	4605      	mov	r5, r0
   20bae:	4611      	mov	r1, r2
   20bb0:	4620      	mov	r0, r4
   20bb2:	461e      	mov	r6, r3
   20bb4:	f7ff ff18 	bl	209e8 <rpc_ip_client_request_send>
   20bb8:	b900      	cbnz	r0, 20bbc <ip_interface_request_send+0x14>
   20bba:	bd70      	pop	{r4, r5, r6, pc}
   20bbc:	6820      	ldr	r0, [r4, #0]
   20bbe:	b108      	cbz	r0, 20bc4 <ip_interface_request_send+0x1c>
   20bc0:	f7ff ff30 	bl	20a24 <rpc_ip_client_data_free>
   20bc4:	4620      	mov	r0, r4
   20bc6:	f7ff ff25 	bl	20a14 <rpc_ip_client_message_free>
   20bca:	602e      	str	r6, [r5, #0]
   20bcc:	2023      	movs	r0, #35	; 0x23
   20bce:	bd70      	pop	{r4, r5, r6, pc}

00020bd0 <ip_interface_wait>:
   20bd0:	b538      	push	{r3, r4, r5, lr}
   20bd2:	4605      	mov	r5, r0
   20bd4:	f005 ffa4 	bl	26b20 <interface_socket_wait>
   20bd8:	4604      	mov	r4, r0
   20bda:	b108      	cbz	r0, 20be0 <ip_interface_wait+0x10>
   20bdc:	4620      	mov	r0, r4
   20bde:	bd38      	pop	{r3, r4, r5, pc}
   20be0:	4628      	mov	r0, r5
   20be2:	f006 f811 	bl	26c08 <interface_socket_from_handle_get>
   20be6:	2800      	cmp	r0, #0
   20be8:	d0f8      	beq.n	20bdc <ip_interface_wait+0xc>
   20bea:	6844      	ldr	r4, [r0, #4]
   20bec:	2c00      	cmp	r4, #0
   20bee:	d0f5      	beq.n	20bdc <ip_interface_wait+0xc>
   20bf0:	2300      	movs	r3, #0
   20bf2:	6043      	str	r3, [r0, #4]
   20bf4:	4620      	mov	r0, r4
   20bf6:	bd38      	pop	{r3, r4, r5, pc}

00020bf8 <ip_interface_init>:
   20bf8:	b538      	push	{r3, r4, r5, lr}
   20bfa:	2300      	movs	r3, #0
   20bfc:	4d09      	ldr	r5, [pc, #36]	; (20c24 <ip_interface_init+0x2c>)
   20bfe:	4c0a      	ldr	r4, [pc, #40]	; (20c28 <ip_interface_init+0x30>)
   20c00:	4619      	mov	r1, r3
   20c02:	2224      	movs	r2, #36	; 0x24
   20c04:	4809      	ldr	r0, [pc, #36]	; (20c2c <ip_interface_init+0x34>)
   20c06:	602b      	str	r3, [r5, #0]
   20c08:	6023      	str	r3, [r4, #0]
   20c0a:	f012 fe13 	bl	33834 <memset>
   20c0e:	f7ff fed1 	bl	209b4 <rpc_ip_client_init>
   20c12:	b918      	cbnz	r0, 20c1c <ip_interface_init+0x24>
   20c14:	2201      	movs	r2, #1
   20c16:	4b06      	ldr	r3, [pc, #24]	; (20c30 <ip_interface_init+0x38>)
   20c18:	701a      	strb	r2, [r3, #0]
   20c1a:	bd38      	pop	{r3, r4, r5, pc}
   20c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20c20:	bd38      	pop	{r3, r4, r5, pc}
   20c22:	bf00      	nop
   20c24:	20022578 	.word	0x20022578
   20c28:	20022574 	.word	0x20022574
   20c2c:	2002257c 	.word	0x2002257c
   20c30:	20028e87 	.word	0x20028e87

00020c34 <ip_interface_open>:
   20c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c38:	2500      	movs	r5, #0
   20c3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20c3e:	4c5e      	ldr	r4, [pc, #376]	; (20db8 <ip_interface_open+0x184>)
   20c40:	4606      	mov	r6, r0
   20c42:	7820      	ldrb	r0, [r4, #0]
   20c44:	b084      	sub	sp, #16
   20c46:	e9cd 5701 	strd	r5, r7, [sp, #4]
   20c4a:	2800      	cmp	r0, #0
   20c4c:	f000 80b0 	beq.w	20db0 <ip_interface_open+0x17c>
   20c50:	4690      	mov	r8, r2
   20c52:	f026 0208 	bic.w	r2, r6, #8
   20c56:	2a02      	cmp	r2, #2
   20c58:	460c      	mov	r4, r1
   20c5a:	d002      	beq.n	20c62 <ip_interface_open+0x2e>
   20c5c:	2e05      	cmp	r6, #5
   20c5e:	f040 808d 	bne.w	20d7c <ip_interface_open+0x148>
   20c62:	1e63      	subs	r3, r4, #1
   20c64:	2b02      	cmp	r3, #2
   20c66:	f200 809d 	bhi.w	20da4 <ip_interface_open+0x170>
   20c6a:	f1b8 0f00 	cmp.w	r8, #0
   20c6e:	d159      	bne.n	20d24 <ip_interface_open+0xf0>
   20c70:	2c01      	cmp	r4, #1
   20c72:	d06f      	beq.n	20d54 <ip_interface_open+0x120>
   20c74:	2c03      	cmp	r4, #3
   20c76:	bf18      	it	ne
   20c78:	f04f 0802 	movne.w	r8, #2
   20c7c:	4a4f      	ldr	r2, [pc, #316]	; (20dbc <ip_interface_open+0x188>)
   20c7e:	4621      	mov	r1, r4
   20c80:	a801      	add	r0, sp, #4
   20c82:	f005 fe9b 	bl	269bc <interface_socket_allocate>
   20c86:	9b01      	ldr	r3, [sp, #4]
   20c88:	4607      	mov	r7, r0
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d060      	beq.n	20d50 <ip_interface_open+0x11c>
   20c8e:	2100      	movs	r1, #0
   20c90:	a804      	add	r0, sp, #16
   20c92:	f840 1d04 	str.w	r1, [r0, #-4]!
   20c96:	e9c3 6403 	strd	r6, r4, [r3, #12]
   20c9a:	f8c3 8014 	str.w	r8, [r3, #20]
   20c9e:	f7ff fe8f 	bl	209c0 <rpc_ip_client_request_alloc>
   20ca2:	2800      	cmp	r0, #0
   20ca4:	d151      	bne.n	20d4a <ip_interface_open+0x116>
   20ca6:	f247 0201 	movw	r2, #28673	; 0x7001
   20caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20cae:	2108      	movs	r1, #8
   20cb0:	9d03      	ldr	r5, [sp, #12]
   20cb2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   20cb6:	60ea      	str	r2, [r5, #12]
   20cb8:	7268      	strb	r0, [r5, #9]
   20cba:	72a8      	strb	r0, [r5, #10]
   20cbc:	72e8      	strb	r0, [r5, #11]
   20cbe:	7229      	strb	r1, [r5, #8]
   20cc0:	742b      	strb	r3, [r5, #16]
   20cc2:	746b      	strb	r3, [r5, #17]
   20cc4:	74ab      	strb	r3, [r5, #18]
   20cc6:	74eb      	strb	r3, [r5, #19]
   20cc8:	68ab      	ldr	r3, [r5, #8]
   20cca:	2e05      	cmp	r6, #5
   20ccc:	f103 030c 	add.w	r3, r3, #12
   20cd0:	60ab      	str	r3, [r5, #8]
   20cd2:	d003      	beq.n	20cdc <ip_interface_open+0xa8>
   20cd4:	2e0a      	cmp	r6, #10
   20cd6:	bf14      	ite	ne
   20cd8:	2601      	movne	r6, #1
   20cda:	2602      	moveq	r6, #2
   20cdc:	616e      	str	r6, [r5, #20]
   20cde:	f8c5 801c 	str.w	r8, [r5, #28]
   20ce2:	61ac      	str	r4, [r5, #24]
   20ce4:	f247 0101 	movw	r1, #28673	; 0x7001
   20ce8:	4628      	mov	r0, r5
   20cea:	f8dd 8004 	ldr.w	r8, [sp, #4]
   20cee:	f7ff fe7b 	bl	209e8 <rpc_ip_client_request_send>
   20cf2:	4606      	mov	r6, r0
   20cf4:	b380      	cbz	r0, 20d58 <ip_interface_open+0x124>
   20cf6:	6828      	ldr	r0, [r5, #0]
   20cf8:	b108      	cbz	r0, 20cfe <ip_interface_open+0xca>
   20cfa:	f7ff fe93 	bl	20a24 <rpc_ip_client_data_free>
   20cfe:	4628      	mov	r0, r5
   20d00:	f7ff fe88 	bl	20a14 <rpc_ip_client_message_free>
   20d04:	2301      	movs	r3, #1
   20d06:	2523      	movs	r5, #35	; 0x23
   20d08:	f8c8 3000 	str.w	r3, [r8]
   20d0c:	4638      	mov	r0, r7
   20d0e:	f005 feb9 	bl	26a84 <interface_socket_free>
   20d12:	4628      	mov	r0, r5
   20d14:	f7fc f8e0 	bl	1ced8 <bsd_os_errno_set>
   20d18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20d1c:	4638      	mov	r0, r7
   20d1e:	b004      	add	sp, #16
   20d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20d24:	2c01      	cmp	r4, #1
   20d26:	d00a      	beq.n	20d3e <ip_interface_open+0x10a>
   20d28:	2c02      	cmp	r4, #2
   20d2a:	d10b      	bne.n	20d44 <ip_interface_open+0x110>
   20d2c:	f1b8 0f02 	cmp.w	r8, #2
   20d30:	d0a4      	beq.n	20c7c <ip_interface_open+0x48>
   20d32:	2029      	movs	r0, #41	; 0x29
   20d34:	f7fc f8d0 	bl	1ced8 <bsd_os_errno_set>
   20d38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20d3c:	e7ee      	b.n	20d1c <ip_interface_open+0xe8>
   20d3e:	f1b8 0f01 	cmp.w	r8, #1
   20d42:	d1f6      	bne.n	20d32 <ip_interface_open+0xfe>
   20d44:	f04f 0802 	mov.w	r8, #2
   20d48:	e798      	b.n	20c7c <ip_interface_open+0x48>
   20d4a:	9d03      	ldr	r5, [sp, #12]
   20d4c:	2d00      	cmp	r5, #0
   20d4e:	d1bb      	bne.n	20cc8 <ip_interface_open+0x94>
   20d50:	2569      	movs	r5, #105	; 0x69
   20d52:	e7db      	b.n	20d0c <ip_interface_open+0xd8>
   20d54:	46a0      	mov	r8, r4
   20d56:	e791      	b.n	20c7c <ip_interface_open+0x48>
   20d58:	ab02      	add	r3, sp, #8
   20d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20d5e:	2102      	movs	r1, #2
   20d60:	4638      	mov	r0, r7
   20d62:	f005 fedd 	bl	26b20 <interface_socket_wait>
   20d66:	4605      	mov	r5, r0
   20d68:	2800      	cmp	r0, #0
   20d6a:	d1cf      	bne.n	20d0c <ip_interface_open+0xd8>
   20d6c:	4638      	mov	r0, r7
   20d6e:	f005 ff4b 	bl	26c08 <interface_socket_from_handle_get>
   20d72:	b138      	cbz	r0, 20d84 <ip_interface_open+0x150>
   20d74:	6845      	ldr	r5, [r0, #4]
   20d76:	b12d      	cbz	r5, 20d84 <ip_interface_open+0x150>
   20d78:	6046      	str	r6, [r0, #4]
   20d7a:	e7c7      	b.n	20d0c <ip_interface_open+0xd8>
   20d7c:	202f      	movs	r0, #47	; 0x2f
   20d7e:	f7fc f8ab 	bl	1ced8 <bsd_os_errno_set>
   20d82:	e7cb      	b.n	20d1c <ip_interface_open+0xe8>
   20d84:	3c02      	subs	r4, #2
   20d86:	2c01      	cmp	r4, #1
   20d88:	d8c8      	bhi.n	20d1c <ip_interface_open+0xe8>
   20d8a:	4638      	mov	r0, r7
   20d8c:	9b01      	ldr	r3, [sp, #4]
   20d8e:	681a      	ldr	r2, [r3, #0]
   20d90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   20d94:	601a      	str	r2, [r3, #0]
   20d96:	681a      	ldr	r2, [r3, #0]
   20d98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   20d9c:	601a      	str	r2, [r3, #0]
   20d9e:	b004      	add	sp, #16
   20da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20da4:	2016      	movs	r0, #22
   20da6:	f7fc f897 	bl	1ced8 <bsd_os_errno_set>
   20daa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20dae:	e7b5      	b.n	20d1c <ip_interface_open+0xe8>
   20db0:	2070      	movs	r0, #112	; 0x70
   20db2:	f7fc f891 	bl	1ced8 <bsd_os_errno_set>
   20db6:	e7b1      	b.n	20d1c <ip_interface_open+0xe8>
   20db8:	20028e87 	.word	0x20028e87
   20dbc:	00020a35 	.word	0x00020a35

00020dc0 <ip_interface_close>:
   20dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dc8:	b082      	sub	sp, #8
   20dca:	4606      	mov	r6, r0
   20dcc:	9300      	str	r3, [sp, #0]
   20dce:	f005 ff1b 	bl	26c08 <interface_socket_from_handle_get>
   20dd2:	2800      	cmp	r0, #0
   20dd4:	d062      	beq.n	20e9c <ip_interface_close+0xdc>
   20dd6:	4604      	mov	r4, r0
   20dd8:	2100      	movs	r1, #0
   20dda:	a802      	add	r0, sp, #8
   20ddc:	6827      	ldr	r7, [r4, #0]
   20dde:	f840 1d04 	str.w	r1, [r0, #-4]!
   20de2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20de6:	f7ff fdeb 	bl	209c0 <rpc_ip_client_request_alloc>
   20dea:	2800      	cmp	r0, #0
   20dec:	d139      	bne.n	20e62 <ip_interface_close+0xa2>
   20dee:	f247 0309 	movw	r3, #28681	; 0x7009
   20df2:	2208      	movs	r2, #8
   20df4:	9d01      	ldr	r5, [sp, #4]
   20df6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20dfa:	60eb      	str	r3, [r5, #12]
   20dfc:	f8c5 8010 	str.w	r8, [r5, #16]
   20e00:	7268      	strb	r0, [r5, #9]
   20e02:	72a8      	strb	r0, [r5, #10]
   20e04:	72e8      	strb	r0, [r5, #11]
   20e06:	722a      	strb	r2, [r5, #8]
   20e08:	6823      	ldr	r3, [r4, #0]
   20e0a:	f247 0109 	movw	r1, #28681	; 0x7009
   20e0e:	0c1b      	lsrs	r3, r3, #16
   20e10:	041b      	lsls	r3, r3, #16
   20e12:	f043 030d 	orr.w	r3, r3, #13
   20e16:	6023      	str	r3, [r4, #0]
   20e18:	6823      	ldr	r3, [r4, #0]
   20e1a:	4628      	mov	r0, r5
   20e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   20e20:	6023      	str	r3, [r4, #0]
   20e22:	6823      	ldr	r3, [r4, #0]
   20e24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20e28:	6023      	str	r3, [r4, #0]
   20e2a:	f7ff fddd 	bl	209e8 <rpc_ip_client_request_send>
   20e2e:	bb38      	cbnz	r0, 20e80 <ip_interface_close+0xc0>
   20e30:	466b      	mov	r3, sp
   20e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20e36:	210e      	movs	r1, #14
   20e38:	4630      	mov	r0, r6
   20e3a:	f005 fe71 	bl	26b20 <interface_socket_wait>
   20e3e:	4604      	mov	r4, r0
   20e40:	b1a0      	cbz	r0, 20e6c <ip_interface_close+0xac>
   20e42:	4c17      	ldr	r4, [pc, #92]	; (20ea0 <ip_interface_close+0xe0>)
   20e44:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   20e48:	b120      	cbz	r0, 20e54 <ip_interface_close+0x94>
   20e4a:	f7ff fde3 	bl	20a14 <rpc_ip_client_message_free>
   20e4e:	2300      	movs	r3, #0
   20e50:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   20e54:	4630      	mov	r0, r6
   20e56:	f005 fe15 	bl	26a84 <interface_socket_free>
   20e5a:	2000      	movs	r0, #0
   20e5c:	b002      	add	sp, #8
   20e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e62:	9d01      	ldr	r5, [sp, #4]
   20e64:	200c      	movs	r0, #12
   20e66:	2d00      	cmp	r5, #0
   20e68:	d1ce      	bne.n	20e08 <ip_interface_close+0x48>
   20e6a:	e012      	b.n	20e92 <ip_interface_close+0xd2>
   20e6c:	4630      	mov	r0, r6
   20e6e:	f005 fecb 	bl	26c08 <interface_socket_from_handle_get>
   20e72:	2800      	cmp	r0, #0
   20e74:	d0e5      	beq.n	20e42 <ip_interface_close+0x82>
   20e76:	6843      	ldr	r3, [r0, #4]
   20e78:	2b00      	cmp	r3, #0
   20e7a:	d0e2      	beq.n	20e42 <ip_interface_close+0x82>
   20e7c:	6044      	str	r4, [r0, #4]
   20e7e:	e7e0      	b.n	20e42 <ip_interface_close+0x82>
   20e80:	6828      	ldr	r0, [r5, #0]
   20e82:	b108      	cbz	r0, 20e88 <ip_interface_close+0xc8>
   20e84:	f7ff fdce 	bl	20a24 <rpc_ip_client_data_free>
   20e88:	4628      	mov	r0, r5
   20e8a:	f7ff fdc3 	bl	20a14 <rpc_ip_client_message_free>
   20e8e:	2023      	movs	r0, #35	; 0x23
   20e90:	6027      	str	r7, [r4, #0]
   20e92:	f7fc f821 	bl	1ced8 <bsd_os_errno_set>
   20e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e9a:	e7df      	b.n	20e5c <ip_interface_close+0x9c>
   20e9c:	2009      	movs	r0, #9
   20e9e:	e7f8      	b.n	20e92 <ip_interface_close+0xd2>
   20ea0:	2002257c 	.word	0x2002257c

00020ea4 <ip_interface_sendto>:
   20ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ea8:	2400      	movs	r4, #0
   20eaa:	b089      	sub	sp, #36	; 0x24
   20eac:	9102      	str	r1, [sp, #8]
   20eae:	4615      	mov	r5, r2
   20eb0:	4699      	mov	r9, r3
   20eb2:	9406      	str	r4, [sp, #24]
   20eb4:	4607      	mov	r7, r0
   20eb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
   20eb8:	f005 fea6 	bl	26c08 <interface_socket_from_handle_get>
   20ebc:	2800      	cmp	r0, #0
   20ebe:	f000 814c 	beq.w	2115a <ip_interface_sendto+0x2b6>
   20ec2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   20ec6:	f300 8139 	bgt.w	2113c <ip_interface_sendto+0x298>
   20eca:	6903      	ldr	r3, [r0, #16]
   20ecc:	4604      	mov	r4, r0
   20ece:	2b01      	cmp	r3, #1
   20ed0:	f000 80ea 	beq.w	210a8 <ip_interface_sendto+0x204>
   20ed4:	6822      	ldr	r2, [r4, #0]
   20ed6:	0391      	lsls	r1, r2, #14
   20ed8:	d56a      	bpl.n	20fb0 <ip_interface_sendto+0x10c>
   20eda:	f1b9 0f00 	cmp.w	r9, #0
   20ede:	f000 80f3 	beq.w	210c8 <ip_interface_sendto+0x224>
   20ee2:	f019 0f02 	tst.w	r9, #2
   20ee6:	f000 8133 	beq.w	21150 <ip_interface_sendto+0x2ac>
   20eea:	2300      	movs	r3, #0
   20eec:	9303      	str	r3, [sp, #12]
   20eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20ef0:	f247 0806 	movw	r8, #28678	; 0x7006
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	bf08      	it	eq
   20ef8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   20efc:	f04f 0b0c 	mov.w	fp, #12
   20f00:	4a9a      	ldr	r2, [pc, #616]	; (2116c <ip_interface_sendto+0x2c8>)
   20f02:	9307      	str	r3, [sp, #28]
   20f04:	043b      	lsls	r3, r7, #16
   20f06:	9200      	str	r2, [sp, #0]
   20f08:	9304      	str	r3, [sp, #16]
   20f0a:	4629      	mov	r1, r5
   20f0c:	a806      	add	r0, sp, #24
   20f0e:	f7ff fd57 	bl	209c0 <rpc_ip_client_request_alloc>
   20f12:	2804      	cmp	r0, #4
   20f14:	f000 8098 	beq.w	21048 <ip_interface_sendto+0x1a4>
   20f18:	2800      	cmp	r0, #0
   20f1a:	f040 8123 	bne.w	21164 <ip_interface_sendto+0x2c0>
   20f1e:	9b06      	ldr	r3, [sp, #24]
   20f20:	f883 b008 	strb.w	fp, [r3, #8]
   20f24:	7258      	strb	r0, [r3, #9]
   20f26:	7298      	strb	r0, [r3, #10]
   20f28:	72d8      	strb	r0, [r3, #11]
   20f2a:	2e00      	cmp	r6, #0
   20f2c:	d053      	beq.n	20fd6 <ip_interface_sendto+0x132>
   20f2e:	68e2      	ldr	r2, [r4, #12]
   20f30:	6871      	ldr	r1, [r6, #4]
   20f32:	428a      	cmp	r2, r1
   20f34:	f040 809a 	bne.w	2106c <ip_interface_sendto+0x1c8>
   20f38:	7831      	ldrb	r1, [r6, #0]
   20f3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   20f3c:	4288      	cmp	r0, r1
   20f3e:	d10a      	bne.n	20f56 <ip_interface_sendto+0xb2>
   20f40:	2a02      	cmp	r2, #2
   20f42:	f103 001c 	add.w	r0, r3, #28
   20f46:	f000 80e7 	beq.w	21118 <ip_interface_sendto+0x274>
   20f4a:	2a0a      	cmp	r2, #10
   20f4c:	d103      	bne.n	20f56 <ip_interface_sendto+0xb2>
   20f4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20f50:	2a24      	cmp	r2, #36	; 0x24
   20f52:	f000 80ce 	beq.w	210f2 <ip_interface_sendto+0x24e>
   20f56:	f04f 0a16 	mov.w	sl, #22
   20f5a:	6818      	ldr	r0, [r3, #0]
   20f5c:	b110      	cbz	r0, 20f64 <ip_interface_sendto+0xc0>
   20f5e:	f7ff fd61 	bl	20a24 <rpc_ip_client_data_free>
   20f62:	9b06      	ldr	r3, [sp, #24]
   20f64:	4618      	mov	r0, r3
   20f66:	f7ff fd55 	bl	20a14 <rpc_ip_client_message_free>
   20f6a:	6823      	ldr	r3, [r4, #0]
   20f6c:	0318      	lsls	r0, r3, #12
   20f6e:	d40b      	bmi.n	20f88 <ip_interface_sendto+0xe4>
   20f70:	6823      	ldr	r3, [r4, #0]
   20f72:	b29b      	uxth	r3, r3
   20f74:	2b0d      	cmp	r3, #13
   20f76:	d007      	beq.n	20f88 <ip_interface_sendto+0xe4>
   20f78:	6823      	ldr	r3, [r4, #0]
   20f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   20f7e:	6023      	str	r3, [r4, #0]
   20f80:	6823      	ldr	r3, [r4, #0]
   20f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   20f86:	6023      	str	r3, [r4, #0]
   20f88:	f1ba 0f00 	cmp.w	sl, #0
   20f8c:	f040 8093 	bne.w	210b6 <ip_interface_sendto+0x212>
   20f90:	6823      	ldr	r3, [r4, #0]
   20f92:	0119      	lsls	r1, r3, #4
   20f94:	d56d      	bpl.n	21072 <ip_interface_sendto+0x1ce>
   20f96:	6823      	ldr	r3, [r4, #0]
   20f98:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   20f9c:	6023      	str	r3, [r4, #0]
   20f9e:	9b00      	ldr	r3, [sp, #0]
   20fa0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   20fa4:	2800      	cmp	r0, #0
   20fa6:	d168      	bne.n	2107a <ip_interface_sendto+0x1d6>
   20fa8:	4628      	mov	r0, r5
   20faa:	b009      	add	sp, #36	; 0x24
   20fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fb0:	6822      	ldr	r2, [r4, #0]
   20fb2:	0092      	lsls	r2, r2, #2
   20fb4:	d406      	bmi.n	20fc4 <ip_interface_sendto+0x120>
   20fb6:	2b01      	cmp	r3, #1
   20fb8:	f000 8095 	beq.w	210e6 <ip_interface_sendto+0x242>
   20fbc:	6823      	ldr	r3, [r4, #0]
   20fbe:	031b      	lsls	r3, r3, #12
   20fc0:	f140 80b7 	bpl.w	21132 <ip_interface_sendto+0x28e>
   20fc4:	6823      	ldr	r3, [r4, #0]
   20fc6:	031e      	lsls	r6, r3, #12
   20fc8:	f140 80bd 	bpl.w	21146 <ip_interface_sendto+0x2a2>
   20fcc:	4b67      	ldr	r3, [pc, #412]	; (2116c <ip_interface_sendto+0x2c8>)
   20fce:	f8d4 a008 	ldr.w	sl, [r4, #8]
   20fd2:	9300      	str	r3, [sp, #0]
   20fd4:	e7d8      	b.n	20f88 <ip_interface_sendto+0xe4>
   20fd6:	4642      	mov	r2, r8
   20fd8:	f8c3 9014 	str.w	r9, [r3, #20]
   20fdc:	69a1      	ldr	r1, [r4, #24]
   20fde:	9804      	ldr	r0, [sp, #16]
   20fe0:	6119      	str	r1, [r3, #16]
   20fe2:	9902      	ldr	r1, [sp, #8]
   20fe4:	4302      	orrs	r2, r0
   20fe6:	60da      	str	r2, [r3, #12]
   20fe8:	605d      	str	r5, [r3, #4]
   20fea:	b119      	cbz	r1, 20ff4 <ip_interface_sendto+0x150>
   20fec:	6818      	ldr	r0, [r3, #0]
   20fee:	462a      	mov	r2, r5
   20ff0:	f012 fbe6 	bl	337c0 <memcpy>
   20ff4:	6823      	ldr	r3, [r4, #0]
   20ff6:	4641      	mov	r1, r8
   20ff8:	9305      	str	r3, [sp, #20]
   20ffa:	6823      	ldr	r3, [r4, #0]
   20ffc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21000:	6023      	str	r3, [r4, #0]
   21002:	6823      	ldr	r3, [r4, #0]
   21004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   21008:	6023      	str	r3, [r4, #0]
   2100a:	9b06      	ldr	r3, [sp, #24]
   2100c:	4618      	mov	r0, r3
   2100e:	9301      	str	r3, [sp, #4]
   21010:	f7ff fcea 	bl	209e8 <rpc_ip_client_request_send>
   21014:	9b01      	ldr	r3, [sp, #4]
   21016:	4682      	mov	sl, r0
   21018:	2800      	cmp	r0, #0
   2101a:	d138      	bne.n	2108e <ip_interface_sendto+0x1ea>
   2101c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   21020:	ab07      	add	r3, sp, #28
   21022:	4611      	mov	r1, r2
   21024:	4638      	mov	r0, r7
   21026:	f005 fd7b 	bl	26b20 <interface_socket_wait>
   2102a:	4603      	mov	r3, r0
   2102c:	b198      	cbz	r0, 21056 <ip_interface_sendto+0x1b2>
   2102e:	6822      	ldr	r2, [r4, #0]
   21030:	0312      	lsls	r2, r2, #12
   21032:	d455      	bmi.n	210e0 <ip_interface_sendto+0x23c>
   21034:	2b3c      	cmp	r3, #60	; 0x3c
   21036:	d017      	beq.n	21068 <ip_interface_sendto+0x1c4>
   21038:	2b0c      	cmp	r3, #12
   2103a:	d115      	bne.n	21068 <ip_interface_sendto+0x1c4>
   2103c:	9b00      	ldr	r3, [sp, #0]
   2103e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   21042:	b108      	cbz	r0, 21048 <ip_interface_sendto+0x1a4>
   21044:	f7ff fce6 	bl	20a14 <rpc_ip_client_message_free>
   21048:	9b03      	ldr	r3, [sp, #12]
   2104a:	2b00      	cmp	r3, #0
   2104c:	f47f af5d 	bne.w	20f0a <ip_interface_sendto+0x66>
   21050:	f04f 0a23 	mov.w	sl, #35	; 0x23
   21054:	e789      	b.n	20f6a <ip_interface_sendto+0xc6>
   21056:	9001      	str	r0, [sp, #4]
   21058:	4638      	mov	r0, r7
   2105a:	f005 fdd5 	bl	26c08 <interface_socket_from_handle_get>
   2105e:	9b01      	ldr	r3, [sp, #4]
   21060:	b110      	cbz	r0, 21068 <ip_interface_sendto+0x1c4>
   21062:	6843      	ldr	r3, [r0, #4]
   21064:	2b00      	cmp	r3, #0
   21066:	d136      	bne.n	210d6 <ip_interface_sendto+0x232>
   21068:	469a      	mov	sl, r3
   2106a:	e77e      	b.n	20f6a <ip_interface_sendto+0xc6>
   2106c:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   21070:	e773      	b.n	20f5a <ip_interface_sendto+0xb6>
   21072:	9b00      	ldr	r3, [sp, #0]
   21074:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   21078:	6985      	ldr	r5, [r0, #24]
   2107a:	f7ff fccb 	bl	20a14 <rpc_ip_client_message_free>
   2107e:	2300      	movs	r3, #0
   21080:	4628      	mov	r0, r5
   21082:	9a00      	ldr	r2, [sp, #0]
   21084:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   21088:	b009      	add	sp, #36	; 0x24
   2108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2108e:	6818      	ldr	r0, [r3, #0]
   21090:	469a      	mov	sl, r3
   21092:	b108      	cbz	r0, 21098 <ip_interface_sendto+0x1f4>
   21094:	f7ff fcc6 	bl	20a24 <rpc_ip_client_data_free>
   21098:	4650      	mov	r0, sl
   2109a:	f7ff fcbb 	bl	20a14 <rpc_ip_client_message_free>
   2109e:	9b05      	ldr	r3, [sp, #20]
   210a0:	f04f 0a23 	mov.w	sl, #35	; 0x23
   210a4:	6023      	str	r3, [r4, #0]
   210a6:	e760      	b.n	20f6a <ip_interface_sendto+0xc6>
   210a8:	2e00      	cmp	r6, #0
   210aa:	f43f af13 	beq.w	20ed4 <ip_interface_sendto+0x30>
   210ae:	f04f 0a38 	mov.w	sl, #56	; 0x38
   210b2:	4b2e      	ldr	r3, [pc, #184]	; (2116c <ip_interface_sendto+0x2c8>)
   210b4:	9300      	str	r3, [sp, #0]
   210b6:	4650      	mov	r0, sl
   210b8:	f7fb ff0e 	bl	1ced8 <bsd_os_errno_set>
   210bc:	9b00      	ldr	r3, [sp, #0]
   210be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   210c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   210c6:	e76d      	b.n	20fa4 <ip_interface_sendto+0x100>
   210c8:	6823      	ldr	r3, [r4, #0]
   210ca:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   210ce:	f3c3 7300 	ubfx	r3, r3, #28, #1
   210d2:	9303      	str	r3, [sp, #12]
   210d4:	e70b      	b.n	20eee <ip_interface_sendto+0x4a>
   210d6:	f8c0 a004 	str.w	sl, [r0, #4]
   210da:	6822      	ldr	r2, [r4, #0]
   210dc:	0312      	lsls	r2, r2, #12
   210de:	d5a9      	bpl.n	21034 <ip_interface_sendto+0x190>
   210e0:	f8d4 a008 	ldr.w	sl, [r4, #8]
   210e4:	e741      	b.n	20f6a <ip_interface_sendto+0xc6>
   210e6:	6823      	ldr	r3, [r4, #0]
   210e8:	b29b      	uxth	r3, r3
   210ea:	2b05      	cmp	r3, #5
   210ec:	f47f af6a 	bne.w	20fc4 <ip_interface_sendto+0x120>
   210f0:	e764      	b.n	20fbc <ip_interface_sendto+0x118>
   210f2:	2210      	movs	r2, #16
   210f4:	8931      	ldrh	r1, [r6, #8]
   210f6:	835a      	strh	r2, [r3, #26]
   210f8:	8319      	strh	r1, [r3, #24]
   210fa:	18b1      	adds	r1, r6, r2
   210fc:	f012 fb60 	bl	337c0 <memcpy>
   21100:	f247 0207 	movw	r2, #28679	; 0x7007
   21104:	9b06      	ldr	r3, [sp, #24]
   21106:	4690      	mov	r8, r2
   21108:	6899      	ldr	r1, [r3, #8]
   2110a:	8b58      	ldrh	r0, [r3, #26]
   2110c:	3104      	adds	r1, #4
   2110e:	4401      	add	r1, r0
   21110:	f8c3 9014 	str.w	r9, [r3, #20]
   21114:	6099      	str	r1, [r3, #8]
   21116:	e761      	b.n	20fdc <ip_interface_sendto+0x138>
   21118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2111a:	2a10      	cmp	r2, #16
   2111c:	f47f af1b 	bne.w	20f56 <ip_interface_sendto+0xb2>
   21120:	2204      	movs	r2, #4
   21122:	8931      	ldrh	r1, [r6, #8]
   21124:	835a      	strh	r2, [r3, #26]
   21126:	8319      	strh	r1, [r3, #24]
   21128:	f106 010c 	add.w	r1, r6, #12
   2112c:	f012 fb48 	bl	337c0 <memcpy>
   21130:	e7e6      	b.n	21100 <ip_interface_sendto+0x25c>
   21132:	4b0e      	ldr	r3, [pc, #56]	; (2116c <ip_interface_sendto+0x2c8>)
   21134:	f04f 0a23 	mov.w	sl, #35	; 0x23
   21138:	9300      	str	r3, [sp, #0]
   2113a:	e7bc      	b.n	210b6 <ip_interface_sendto+0x212>
   2113c:	4b0b      	ldr	r3, [pc, #44]	; (2116c <ip_interface_sendto+0x2c8>)
   2113e:	f04f 0a28 	mov.w	sl, #40	; 0x28
   21142:	9300      	str	r3, [sp, #0]
   21144:	e7b7      	b.n	210b6 <ip_interface_sendto+0x212>
   21146:	4b09      	ldr	r3, [pc, #36]	; (2116c <ip_interface_sendto+0x2c8>)
   21148:	f04f 0a39 	mov.w	sl, #57	; 0x39
   2114c:	9300      	str	r3, [sp, #0]
   2114e:	e7b2      	b.n	210b6 <ip_interface_sendto+0x212>
   21150:	4b06      	ldr	r3, [pc, #24]	; (2116c <ip_interface_sendto+0x2c8>)
   21152:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   21156:	9300      	str	r3, [sp, #0]
   21158:	e7ad      	b.n	210b6 <ip_interface_sendto+0x212>
   2115a:	4b04      	ldr	r3, [pc, #16]	; (2116c <ip_interface_sendto+0x2c8>)
   2115c:	f04f 0a09 	mov.w	sl, #9
   21160:	9300      	str	r3, [sp, #0]
   21162:	e7a8      	b.n	210b6 <ip_interface_sendto+0x212>
   21164:	f04f 0a0c 	mov.w	sl, #12
   21168:	e6ff      	b.n	20f6a <ip_interface_sendto+0xc6>
   2116a:	bf00      	nop
   2116c:	2002257c 	.word	0x2002257c

00021170 <ip_interface_recvfrom>:
   21170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21174:	b087      	sub	sp, #28
   21176:	2a00      	cmp	r2, #0
   21178:	f000 8112 	beq.w	213a0 <ip_interface_recvfrom+0x230>
   2117c:	4680      	mov	r8, r0
   2117e:	468b      	mov	fp, r1
   21180:	469a      	mov	sl, r3
   21182:	4691      	mov	r9, r2
   21184:	b11b      	cbz	r3, 2118e <ip_interface_recvfrom+0x1e>
   21186:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2118a:	f000 8107 	beq.w	2139c <ip_interface_recvfrom+0x22c>
   2118e:	4640      	mov	r0, r8
   21190:	f005 fd3a 	bl	26c08 <interface_socket_from_handle_get>
   21194:	4604      	mov	r4, r0
   21196:	2800      	cmp	r0, #0
   21198:	f000 8104 	beq.w	213a4 <ip_interface_recvfrom+0x234>
   2119c:	6803      	ldr	r3, [r0, #0]
   2119e:	02db      	lsls	r3, r3, #11
   211a0:	d562      	bpl.n	21268 <ip_interface_recvfrom+0xf8>
   211a2:	f01a 0f02 	tst.w	sl, #2
   211a6:	bf18      	it	ne
   211a8:	2600      	movne	r6, #0
   211aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   211ae:	bf08      	it	eq
   211b0:	6806      	ldreq	r6, [r0, #0]
   211b2:	f00a 0310 	and.w	r3, sl, #16
   211b6:	bf04      	itt	eq
   211b8:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   211bc:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   211c0:	9301      	str	r3, [sp, #4]
   211c2:	6823      	ldr	r3, [r4, #0]
   211c4:	03df      	lsls	r7, r3, #15
   211c6:	d567      	bpl.n	21298 <ip_interface_recvfrom+0x128>
   211c8:	6823      	ldr	r3, [r4, #0]
   211ca:	69e0      	ldr	r0, [r4, #28]
   211cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   211d0:	6023      	str	r3, [r4, #0]
   211d2:	6803      	ldr	r3, [r0, #0]
   211d4:	68db      	ldr	r3, [r3, #12]
   211d6:	4798      	blx	r3
   211d8:	4605      	mov	r5, r0
   211da:	3001      	adds	r0, #1
   211dc:	d07d      	beq.n	212da <ip_interface_recvfrom+0x16a>
   211de:	45a9      	cmp	r9, r5
   211e0:	dd03      	ble.n	211ea <ip_interface_recvfrom+0x7a>
   211e2:	6923      	ldr	r3, [r4, #16]
   211e4:	2b01      	cmp	r3, #1
   211e6:	f000 80a3 	beq.w	21330 <ip_interface_recvfrom+0x1c0>
   211ea:	f04f 0800 	mov.w	r8, #0
   211ee:	af02      	add	r7, sp, #8
   211f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   211f2:	b103      	cbz	r3, 211f6 <ip_interface_recvfrom+0x86>
   211f4:	681b      	ldr	r3, [r3, #0]
   211f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   211f8:	e9cd b902 	strd	fp, r9, [sp, #8]
   211fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21200:	69e0      	ldr	r0, [r4, #28]
   21202:	4639      	mov	r1, r7
   21204:	6803      	ldr	r3, [r0, #0]
   21206:	4652      	mov	r2, sl
   21208:	689b      	ldr	r3, [r3, #8]
   2120a:	4798      	blx	r3
   2120c:	4605      	mov	r5, r0
   2120e:	69e0      	ldr	r0, [r4, #28]
   21210:	1c6b      	adds	r3, r5, #1
   21212:	6803      	ldr	r3, [r0, #0]
   21214:	bf18      	it	ne
   21216:	2701      	movne	r7, #1
   21218:	68db      	ldr	r3, [r3, #12]
   2121a:	bf0a      	itet	eq
   2121c:	2700      	moveq	r7, #0
   2121e:	2600      	movne	r6, #0
   21220:	2623      	moveq	r6, #35	; 0x23
   21222:	4798      	blx	r3
   21224:	3001      	adds	r0, #1
   21226:	d132      	bne.n	2128e <ip_interface_recvfrom+0x11e>
   21228:	f1b8 0f00 	cmp.w	r8, #0
   2122c:	f000 80b0 	beq.w	21390 <ip_interface_recvfrom+0x220>
   21230:	2f00      	cmp	r7, #0
   21232:	f000 80a1 	beq.w	21378 <ip_interface_recvfrom+0x208>
   21236:	6823      	ldr	r3, [r4, #0]
   21238:	0318      	lsls	r0, r3, #12
   2123a:	d506      	bpl.n	2124a <ip_interface_recvfrom+0xda>
   2123c:	6823      	ldr	r3, [r4, #0]
   2123e:	b29b      	uxth	r3, r3
   21240:	2b0d      	cmp	r3, #13
   21242:	d002      	beq.n	2124a <ip_interface_recvfrom+0xda>
   21244:	6923      	ldr	r3, [r4, #16]
   21246:	2b01      	cmp	r3, #1
   21248:	d021      	beq.n	2128e <ip_interface_recvfrom+0x11e>
   2124a:	6823      	ldr	r3, [r4, #0]
   2124c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   21250:	6823      	ldr	r3, [r4, #0]
   21252:	f040 80a9 	bne.w	213a8 <ip_interface_recvfrom+0x238>
   21256:	0319      	lsls	r1, r3, #12
   21258:	d473      	bmi.n	21342 <ip_interface_recvfrom+0x1d2>
   2125a:	2e00      	cmp	r6, #0
   2125c:	f040 8086 	bne.w	2136c <ip_interface_recvfrom+0x1fc>
   21260:	4628      	mov	r0, r5
   21262:	b007      	add	sp, #28
   21264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21268:	6803      	ldr	r3, [r0, #0]
   2126a:	b29b      	uxth	r3, r3
   2126c:	2b06      	cmp	r3, #6
   2126e:	d071      	beq.n	21354 <ip_interface_recvfrom+0x1e4>
   21270:	6803      	ldr	r3, [r0, #0]
   21272:	b29b      	uxth	r3, r3
   21274:	2b07      	cmp	r3, #7
   21276:	bf0c      	ite	eq
   21278:	2609      	moveq	r6, #9
   2127a:	2639      	movne	r6, #57	; 0x39
   2127c:	69e0      	ldr	r0, [r4, #28]
   2127e:	6803      	ldr	r3, [r0, #0]
   21280:	68db      	ldr	r3, [r3, #12]
   21282:	4798      	blx	r3
   21284:	1c43      	adds	r3, r0, #1
   21286:	4605      	mov	r5, r0
   21288:	d0df      	beq.n	2124a <ip_interface_recvfrom+0xda>
   2128a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2128e:	6823      	ldr	r3, [r4, #0]
   21290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   21294:	6023      	str	r3, [r4, #0]
   21296:	e7e0      	b.n	2125a <ip_interface_recvfrom+0xea>
   21298:	2e00      	cmp	r6, #0
   2129a:	d07d      	beq.n	21398 <ip_interface_recvfrom+0x228>
   2129c:	6a26      	ldr	r6, [r4, #32]
   2129e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   212a2:	2e00      	cmp	r6, #0
   212a4:	bf08      	it	eq
   212a6:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   212aa:	af02      	add	r7, sp, #8
   212ac:	463b      	mov	r3, r7
   212ae:	4611      	mov	r1, r2
   212b0:	4640      	mov	r0, r8
   212b2:	9602      	str	r6, [sp, #8]
   212b4:	f005 fc34 	bl	26b20 <interface_socket_wait>
   212b8:	4606      	mov	r6, r0
   212ba:	b350      	cbz	r0, 21312 <ip_interface_recvfrom+0x1a2>
   212bc:	6823      	ldr	r3, [r4, #0]
   212be:	031a      	lsls	r2, r3, #12
   212c0:	d532      	bpl.n	21328 <ip_interface_recvfrom+0x1b8>
   212c2:	6823      	ldr	r3, [r4, #0]
   212c4:	b29b      	uxth	r3, r3
   212c6:	2b0d      	cmp	r3, #13
   212c8:	d02e      	beq.n	21328 <ip_interface_recvfrom+0x1b8>
   212ca:	6923      	ldr	r3, [r4, #16]
   212cc:	f1a3 0801 	sub.w	r8, r3, #1
   212d0:	fab8 f888 	clz	r8, r8
   212d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
   212d8:	e78a      	b.n	211f0 <ip_interface_recvfrom+0x80>
   212da:	6823      	ldr	r3, [r4, #0]
   212dc:	031a      	lsls	r2, r3, #12
   212de:	d5db      	bpl.n	21298 <ip_interface_recvfrom+0x128>
   212e0:	6823      	ldr	r3, [r4, #0]
   212e2:	b29b      	uxth	r3, r3
   212e4:	2b0d      	cmp	r3, #13
   212e6:	d0d7      	beq.n	21298 <ip_interface_recvfrom+0x128>
   212e8:	6923      	ldr	r3, [r4, #16]
   212ea:	69e0      	ldr	r0, [r4, #28]
   212ec:	2b01      	cmp	r3, #1
   212ee:	d033      	beq.n	21358 <ip_interface_recvfrom+0x1e8>
   212f0:	2639      	movs	r6, #57	; 0x39
   212f2:	6823      	ldr	r3, [r4, #0]
   212f4:	0c1b      	lsrs	r3, r3, #16
   212f6:	041b      	lsls	r3, r3, #16
   212f8:	f043 030d 	orr.w	r3, r3, #13
   212fc:	6023      	str	r3, [r4, #0]
   212fe:	6823      	ldr	r3, [r4, #0]
   21300:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21304:	6023      	str	r3, [r4, #0]
   21306:	6803      	ldr	r3, [r0, #0]
   21308:	68db      	ldr	r3, [r3, #12]
   2130a:	4798      	blx	r3
   2130c:	3001      	adds	r0, #1
   2130e:	d1be      	bne.n	2128e <ip_interface_recvfrom+0x11e>
   21310:	e79b      	b.n	2124a <ip_interface_recvfrom+0xda>
   21312:	4640      	mov	r0, r8
   21314:	f005 fc78 	bl	26c08 <interface_socket_from_handle_get>
   21318:	b140      	cbz	r0, 2132c <ip_interface_recvfrom+0x1bc>
   2131a:	6846      	ldr	r6, [r0, #4]
   2131c:	b136      	cbz	r6, 2132c <ip_interface_recvfrom+0x1bc>
   2131e:	2300      	movs	r3, #0
   21320:	6043      	str	r3, [r0, #4]
   21322:	6823      	ldr	r3, [r4, #0]
   21324:	031a      	lsls	r2, r3, #12
   21326:	d4cc      	bmi.n	212c2 <ip_interface_recvfrom+0x152>
   21328:	69e0      	ldr	r0, [r4, #28]
   2132a:	e7ec      	b.n	21306 <ip_interface_recvfrom+0x196>
   2132c:	2601      	movs	r6, #1
   2132e:	e748      	b.n	211c2 <ip_interface_recvfrom+0x52>
   21330:	9b01      	ldr	r3, [sp, #4]
   21332:	b11b      	cbz	r3, 2133c <ip_interface_recvfrom+0x1cc>
   21334:	6823      	ldr	r3, [r4, #0]
   21336:	00d9      	lsls	r1, r3, #3
   21338:	d5b0      	bpl.n	2129c <ip_interface_recvfrom+0x12c>
   2133a:	e756      	b.n	211ea <ip_interface_recvfrom+0x7a>
   2133c:	4698      	mov	r8, r3
   2133e:	af02      	add	r7, sp, #8
   21340:	e756      	b.n	211f0 <ip_interface_recvfrom+0x80>
   21342:	6823      	ldr	r3, [r4, #0]
   21344:	b29b      	uxth	r3, r3
   21346:	2b0d      	cmp	r3, #13
   21348:	d187      	bne.n	2125a <ip_interface_recvfrom+0xea>
   2134a:	68a3      	ldr	r3, [r4, #8]
   2134c:	2b00      	cmp	r3, #0
   2134e:	d084      	beq.n	2125a <ip_interface_recvfrom+0xea>
   21350:	68a6      	ldr	r6, [r4, #8]
   21352:	e782      	b.n	2125a <ip_interface_recvfrom+0xea>
   21354:	2609      	movs	r6, #9
   21356:	e791      	b.n	2127c <ip_interface_recvfrom+0x10c>
   21358:	6803      	ldr	r3, [r0, #0]
   2135a:	68db      	ldr	r3, [r3, #12]
   2135c:	4798      	blx	r3
   2135e:	3001      	adds	r0, #1
   21360:	d00a      	beq.n	21378 <ip_interface_recvfrom+0x208>
   21362:	2623      	movs	r6, #35	; 0x23
   21364:	6823      	ldr	r3, [r4, #0]
   21366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2136a:	6023      	str	r3, [r4, #0]
   2136c:	4630      	mov	r0, r6
   2136e:	f7fb fdb3 	bl	1ced8 <bsd_os_errno_set>
   21372:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21376:	e773      	b.n	21260 <ip_interface_recvfrom+0xf0>
   21378:	6823      	ldr	r3, [r4, #0]
   2137a:	2500      	movs	r5, #0
   2137c:	0c1b      	lsrs	r3, r3, #16
   2137e:	041b      	lsls	r3, r3, #16
   21380:	f043 030d 	orr.w	r3, r3, #13
   21384:	6023      	str	r3, [r4, #0]
   21386:	6823      	ldr	r3, [r4, #0]
   21388:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2138c:	6023      	str	r3, [r4, #0]
   2138e:	e767      	b.n	21260 <ip_interface_recvfrom+0xf0>
   21390:	2f00      	cmp	r7, #0
   21392:	f47f af50 	bne.w	21236 <ip_interface_recvfrom+0xc6>
   21396:	e758      	b.n	2124a <ip_interface_recvfrom+0xda>
   21398:	2623      	movs	r6, #35	; 0x23
   2139a:	e7c5      	b.n	21328 <ip_interface_recvfrom+0x1b8>
   2139c:	262d      	movs	r6, #45	; 0x2d
   2139e:	e7e5      	b.n	2136c <ip_interface_recvfrom+0x1fc>
   213a0:	2616      	movs	r6, #22
   213a2:	e7e3      	b.n	2136c <ip_interface_recvfrom+0x1fc>
   213a4:	2609      	movs	r6, #9
   213a6:	e7e1      	b.n	2136c <ip_interface_recvfrom+0x1fc>
   213a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   213ac:	6023      	str	r3, [r4, #0]
   213ae:	6823      	ldr	r3, [r4, #0]
   213b0:	2669      	movs	r6, #105	; 0x69
   213b2:	0c1b      	lsrs	r3, r3, #16
   213b4:	041b      	lsls	r3, r3, #16
   213b6:	f043 030d 	orr.w	r3, r3, #13
   213ba:	6023      	str	r3, [r4, #0]
   213bc:	e7d6      	b.n	2136c <ip_interface_recvfrom+0x1fc>
   213be:	bf00      	nop

000213c0 <ip_interface_connect>:
   213c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   213c4:	b082      	sub	sp, #8
   213c6:	2900      	cmp	r1, #0
   213c8:	d04b      	beq.n	21462 <ip_interface_connect+0xa2>
   213ca:	4617      	mov	r7, r2
   213cc:	2a00      	cmp	r2, #0
   213ce:	d048      	beq.n	21462 <ip_interface_connect+0xa2>
   213d0:	4680      	mov	r8, r0
   213d2:	4689      	mov	r9, r1
   213d4:	f005 fc18 	bl	26c08 <interface_socket_from_handle_get>
   213d8:	4605      	mov	r5, r0
   213da:	2800      	cmp	r0, #0
   213dc:	f000 80af 	beq.w	2153e <ip_interface_connect+0x17e>
   213e0:	6803      	ldr	r3, [r0, #0]
   213e2:	b29b      	uxth	r3, r3
   213e4:	2b02      	cmp	r3, #2
   213e6:	d004      	beq.n	213f2 <ip_interface_connect+0x32>
   213e8:	6803      	ldr	r3, [r0, #0]
   213ea:	b29b      	uxth	r3, r3
   213ec:	2b04      	cmp	r3, #4
   213ee:	f040 809d 	bne.w	2152c <ip_interface_connect+0x16c>
   213f2:	6829      	ldr	r1, [r5, #0]
   213f4:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   213f8:	f040 8089 	bne.w	2150e <ip_interface_connect+0x14e>
   213fc:	ae02      	add	r6, sp, #8
   213fe:	f8d5 a018 	ldr.w	sl, [r5, #24]
   21402:	f846 1d04 	str.w	r1, [r6, #-4]!
   21406:	4630      	mov	r0, r6
   21408:	f7ff fada 	bl	209c0 <rpc_ip_client_request_alloc>
   2140c:	bb98      	cbnz	r0, 21476 <ip_interface_connect+0xb6>
   2140e:	2108      	movs	r1, #8
   21410:	ea4f 4208 	mov.w	r2, r8, lsl #16
   21414:	9c01      	ldr	r4, [sp, #4]
   21416:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   2141a:	f043 0302 	orr.w	r3, r3, #2
   2141e:	60e3      	str	r3, [r4, #12]
   21420:	f8c4 a010 	str.w	sl, [r4, #16]
   21424:	7260      	strb	r0, [r4, #9]
   21426:	72a0      	strb	r0, [r4, #10]
   21428:	72e0      	strb	r0, [r4, #11]
   2142a:	7221      	strb	r1, [r4, #8]
   2142c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   21430:	f042 0202 	orr.w	r2, r2, #2
   21434:	60e2      	str	r2, [r4, #12]
   21436:	68a3      	ldr	r3, [r4, #8]
   21438:	69aa      	ldr	r2, [r5, #24]
   2143a:	3304      	adds	r3, #4
   2143c:	6122      	str	r2, [r4, #16]
   2143e:	60a3      	str	r3, [r4, #8]
   21440:	68eb      	ldr	r3, [r5, #12]
   21442:	f8d9 2004 	ldr.w	r2, [r9, #4]
   21446:	4293      	cmp	r3, r2
   21448:	d11b      	bne.n	21482 <ip_interface_connect+0xc2>
   2144a:	f899 2000 	ldrb.w	r2, [r9]
   2144e:	4297      	cmp	r7, r2
   21450:	d107      	bne.n	21462 <ip_interface_connect+0xa2>
   21452:	2b02      	cmp	r3, #2
   21454:	f104 0018 	add.w	r0, r4, #24
   21458:	d015      	beq.n	21486 <ip_interface_connect+0xc6>
   2145a:	2b0a      	cmp	r3, #10
   2145c:	d101      	bne.n	21462 <ip_interface_connect+0xa2>
   2145e:	2f24      	cmp	r7, #36	; 0x24
   21460:	d01d      	beq.n	2149e <ip_interface_connect+0xde>
   21462:	2416      	movs	r4, #22
   21464:	4620      	mov	r0, r4
   21466:	f7fb fd37 	bl	1ced8 <bsd_os_errno_set>
   2146a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2146e:	4620      	mov	r0, r4
   21470:	b002      	add	sp, #8
   21472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21476:	9c01      	ldr	r4, [sp, #4]
   21478:	2c00      	cmp	r4, #0
   2147a:	d05e      	beq.n	2153a <ip_interface_connect+0x17a>
   2147c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   21480:	e7d4      	b.n	2142c <ip_interface_connect+0x6c>
   21482:	242f      	movs	r4, #47	; 0x2f
   21484:	e7ee      	b.n	21464 <ip_interface_connect+0xa4>
   21486:	2f10      	cmp	r7, #16
   21488:	d1eb      	bne.n	21462 <ip_interface_connect+0xa2>
   2148a:	2204      	movs	r2, #4
   2148c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   21490:	f109 010c 	add.w	r1, r9, #12
   21494:	82e2      	strh	r2, [r4, #22]
   21496:	82a3      	strh	r3, [r4, #20]
   21498:	f012 f992 	bl	337c0 <memcpy>
   2149c:	e008      	b.n	214b0 <ip_interface_connect+0xf0>
   2149e:	2210      	movs	r2, #16
   214a0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   214a4:	eb09 0102 	add.w	r1, r9, r2
   214a8:	82e2      	strh	r2, [r4, #22]
   214aa:	82a3      	strh	r3, [r4, #20]
   214ac:	f012 f988 	bl	337c0 <memcpy>
   214b0:	68a3      	ldr	r3, [r4, #8]
   214b2:	8ae2      	ldrh	r2, [r4, #22]
   214b4:	f247 0102 	movw	r1, #28674	; 0x7002
   214b8:	4413      	add	r3, r2
   214ba:	60a3      	str	r3, [r4, #8]
   214bc:	682f      	ldr	r7, [r5, #0]
   214be:	682b      	ldr	r3, [r5, #0]
   214c0:	4620      	mov	r0, r4
   214c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   214c6:	602b      	str	r3, [r5, #0]
   214c8:	f7ff fa8e 	bl	209e8 <rpc_ip_client_request_send>
   214cc:	b9a8      	cbnz	r0, 214fa <ip_interface_connect+0x13a>
   214ce:	682b      	ldr	r3, [r5, #0]
   214d0:	00db      	lsls	r3, r3, #3
   214d2:	d429      	bmi.n	21528 <ip_interface_connect+0x168>
   214d4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   214d6:	4633      	mov	r3, r6
   214d8:	2c00      	cmp	r4, #0
   214da:	bf08      	it	eq
   214dc:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   214e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   214e4:	2105      	movs	r1, #5
   214e6:	4640      	mov	r0, r8
   214e8:	9401      	str	r4, [sp, #4]
   214ea:	f005 fb19 	bl	26b20 <interface_socket_wait>
   214ee:	4604      	mov	r4, r0
   214f0:	b178      	cbz	r0, 21512 <ip_interface_connect+0x152>
   214f2:	2c73      	cmp	r4, #115	; 0x73
   214f4:	d0b6      	beq.n	21464 <ip_interface_connect+0xa4>
   214f6:	602f      	str	r7, [r5, #0]
   214f8:	e7b4      	b.n	21464 <ip_interface_connect+0xa4>
   214fa:	6820      	ldr	r0, [r4, #0]
   214fc:	b108      	cbz	r0, 21502 <ip_interface_connect+0x142>
   214fe:	f7ff fa91 	bl	20a24 <rpc_ip_client_data_free>
   21502:	4620      	mov	r0, r4
   21504:	f7ff fa86 	bl	20a14 <rpc_ip_client_message_free>
   21508:	2423      	movs	r4, #35	; 0x23
   2150a:	602f      	str	r7, [r5, #0]
   2150c:	e7aa      	b.n	21464 <ip_interface_connect+0xa4>
   2150e:	2472      	movs	r4, #114	; 0x72
   21510:	e7a8      	b.n	21464 <ip_interface_connect+0xa4>
   21512:	4640      	mov	r0, r8
   21514:	f005 fb78 	bl	26c08 <interface_socket_from_handle_get>
   21518:	2800      	cmp	r0, #0
   2151a:	d0a8      	beq.n	2146e <ip_interface_connect+0xae>
   2151c:	6843      	ldr	r3, [r0, #4]
   2151e:	2b00      	cmp	r3, #0
   21520:	d0a5      	beq.n	2146e <ip_interface_connect+0xae>
   21522:	6044      	str	r4, [r0, #4]
   21524:	461c      	mov	r4, r3
   21526:	e7e4      	b.n	214f2 <ip_interface_connect+0x132>
   21528:	2473      	movs	r4, #115	; 0x73
   2152a:	e79b      	b.n	21464 <ip_interface_connect+0xa4>
   2152c:	6803      	ldr	r3, [r0, #0]
   2152e:	b29b      	uxth	r3, r3
   21530:	2b05      	cmp	r3, #5
   21532:	bf14      	ite	ne
   21534:	2409      	movne	r4, #9
   21536:	2438      	moveq	r4, #56	; 0x38
   21538:	e794      	b.n	21464 <ip_interface_connect+0xa4>
   2153a:	240c      	movs	r4, #12
   2153c:	e792      	b.n	21464 <ip_interface_connect+0xa4>
   2153e:	2409      	movs	r4, #9
   21540:	e790      	b.n	21464 <ip_interface_connect+0xa4>
   21542:	bf00      	nop

00021544 <ip_interface_bind>:
   21544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2154c:	b083      	sub	sp, #12
   2154e:	9300      	str	r3, [sp, #0]
   21550:	b3b1      	cbz	r1, 215c0 <ip_interface_bind+0x7c>
   21552:	4616      	mov	r6, r2
   21554:	b3a2      	cbz	r2, 215c0 <ip_interface_bind+0x7c>
   21556:	4607      	mov	r7, r0
   21558:	4688      	mov	r8, r1
   2155a:	f005 fb55 	bl	26c08 <interface_socket_from_handle_get>
   2155e:	4605      	mov	r5, r0
   21560:	2800      	cmp	r0, #0
   21562:	d04a      	beq.n	215fa <ip_interface_bind+0xb6>
   21564:	6803      	ldr	r3, [r0, #0]
   21566:	b29b      	uxth	r3, r3
   21568:	2b02      	cmp	r3, #2
   2156a:	d146      	bne.n	215fa <ip_interface_bind+0xb6>
   2156c:	2100      	movs	r1, #0
   2156e:	a802      	add	r0, sp, #8
   21570:	f840 1d04 	str.w	r1, [r0, #-4]!
   21574:	f8d5 9018 	ldr.w	r9, [r5, #24]
   21578:	f7ff fa22 	bl	209c0 <rpc_ip_client_request_alloc>
   2157c:	bb50      	cbnz	r0, 215d4 <ip_interface_bind+0x90>
   2157e:	f247 0305 	movw	r3, #28677	; 0x7005
   21582:	2208      	movs	r2, #8
   21584:	9c01      	ldr	r4, [sp, #4]
   21586:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2158a:	60e3      	str	r3, [r4, #12]
   2158c:	f8c4 9010 	str.w	r9, [r4, #16]
   21590:	7260      	strb	r0, [r4, #9]
   21592:	72a0      	strb	r0, [r4, #10]
   21594:	72e0      	strb	r0, [r4, #11]
   21596:	7222      	strb	r2, [r4, #8]
   21598:	68a3      	ldr	r3, [r4, #8]
   2159a:	3304      	adds	r3, #4
   2159c:	60a3      	str	r3, [r4, #8]
   2159e:	68eb      	ldr	r3, [r5, #12]
   215a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   215a4:	4293      	cmp	r3, r2
   215a6:	d11a      	bne.n	215de <ip_interface_bind+0x9a>
   215a8:	f898 2000 	ldrb.w	r2, [r8]
   215ac:	4296      	cmp	r6, r2
   215ae:	d107      	bne.n	215c0 <ip_interface_bind+0x7c>
   215b0:	2b02      	cmp	r3, #2
   215b2:	f104 0018 	add.w	r0, r4, #24
   215b6:	d014      	beq.n	215e2 <ip_interface_bind+0x9e>
   215b8:	2b0a      	cmp	r3, #10
   215ba:	d101      	bne.n	215c0 <ip_interface_bind+0x7c>
   215bc:	2e24      	cmp	r6, #36	; 0x24
   215be:	d01e      	beq.n	215fe <ip_interface_bind+0xba>
   215c0:	2416      	movs	r4, #22
   215c2:	4620      	mov	r0, r4
   215c4:	f7fb fc88 	bl	1ced8 <bsd_os_errno_set>
   215c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   215cc:	4620      	mov	r0, r4
   215ce:	b003      	add	sp, #12
   215d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   215d4:	9c01      	ldr	r4, [sp, #4]
   215d6:	2c00      	cmp	r4, #0
   215d8:	d1de      	bne.n	21598 <ip_interface_bind+0x54>
   215da:	240c      	movs	r4, #12
   215dc:	e7f1      	b.n	215c2 <ip_interface_bind+0x7e>
   215de:	242f      	movs	r4, #47	; 0x2f
   215e0:	e7ef      	b.n	215c2 <ip_interface_bind+0x7e>
   215e2:	2e10      	cmp	r6, #16
   215e4:	d1ec      	bne.n	215c0 <ip_interface_bind+0x7c>
   215e6:	2204      	movs	r2, #4
   215e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   215ec:	f108 010c 	add.w	r1, r8, #12
   215f0:	82e2      	strh	r2, [r4, #22]
   215f2:	82a3      	strh	r3, [r4, #20]
   215f4:	f012 f8e4 	bl	337c0 <memcpy>
   215f8:	e00a      	b.n	21610 <ip_interface_bind+0xcc>
   215fa:	2409      	movs	r4, #9
   215fc:	e7e1      	b.n	215c2 <ip_interface_bind+0x7e>
   215fe:	2210      	movs	r2, #16
   21600:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   21604:	eb08 0102 	add.w	r1, r8, r2
   21608:	82e2      	strh	r2, [r4, #22]
   2160a:	82a3      	strh	r3, [r4, #20]
   2160c:	f012 f8d8 	bl	337c0 <memcpy>
   21610:	68a3      	ldr	r3, [r4, #8]
   21612:	8ae2      	ldrh	r2, [r4, #22]
   21614:	f247 0105 	movw	r1, #28677	; 0x7005
   21618:	4413      	add	r3, r2
   2161a:	60a3      	str	r3, [r4, #8]
   2161c:	682b      	ldr	r3, [r5, #0]
   2161e:	4620      	mov	r0, r4
   21620:	0c1b      	lsrs	r3, r3, #16
   21622:	041b      	lsls	r3, r3, #16
   21624:	f043 0303 	orr.w	r3, r3, #3
   21628:	602b      	str	r3, [r5, #0]
   2162a:	682e      	ldr	r6, [r5, #0]
   2162c:	f7ff f9dc 	bl	209e8 <rpc_ip_client_request_send>
   21630:	4680      	mov	r8, r0
   21632:	b978      	cbnz	r0, 21654 <ip_interface_bind+0x110>
   21634:	466b      	mov	r3, sp
   21636:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2163a:	2104      	movs	r1, #4
   2163c:	4638      	mov	r0, r7
   2163e:	f005 fa6f 	bl	26b20 <interface_socket_wait>
   21642:	4604      	mov	r4, r0
   21644:	b1a0      	cbz	r0, 21670 <ip_interface_bind+0x12c>
   21646:	682b      	ldr	r3, [r5, #0]
   21648:	0c1b      	lsrs	r3, r3, #16
   2164a:	041b      	lsls	r3, r3, #16
   2164c:	f043 0302 	orr.w	r3, r3, #2
   21650:	602b      	str	r3, [r5, #0]
   21652:	e7b6      	b.n	215c2 <ip_interface_bind+0x7e>
   21654:	6820      	ldr	r0, [r4, #0]
   21656:	b108      	cbz	r0, 2165c <ip_interface_bind+0x118>
   21658:	f7ff f9e4 	bl	20a24 <rpc_ip_client_data_free>
   2165c:	0c36      	lsrs	r6, r6, #16
   2165e:	0436      	lsls	r6, r6, #16
   21660:	4620      	mov	r0, r4
   21662:	f046 0602 	orr.w	r6, r6, #2
   21666:	f7ff f9d5 	bl	20a14 <rpc_ip_client_message_free>
   2166a:	2423      	movs	r4, #35	; 0x23
   2166c:	602e      	str	r6, [r5, #0]
   2166e:	e7a8      	b.n	215c2 <ip_interface_bind+0x7e>
   21670:	4638      	mov	r0, r7
   21672:	f005 fac9 	bl	26c08 <interface_socket_from_handle_get>
   21676:	2800      	cmp	r0, #0
   21678:	d0a8      	beq.n	215cc <ip_interface_bind+0x88>
   2167a:	6844      	ldr	r4, [r0, #4]
   2167c:	2c00      	cmp	r4, #0
   2167e:	d0a5      	beq.n	215cc <ip_interface_bind+0x88>
   21680:	f8c0 8004 	str.w	r8, [r0, #4]
   21684:	e7df      	b.n	21646 <ip_interface_bind+0x102>
   21686:	bf00      	nop

00021688 <ip_interface_listen>:
   21688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21690:	b082      	sub	sp, #8
   21692:	4606      	mov	r6, r0
   21694:	9300      	str	r3, [sp, #0]
   21696:	f005 fab7 	bl	26c08 <interface_socket_from_handle_get>
   2169a:	2800      	cmp	r0, #0
   2169c:	d066      	beq.n	2176c <ip_interface_listen+0xe4>
   2169e:	6803      	ldr	r3, [r0, #0]
   216a0:	4605      	mov	r5, r0
   216a2:	b29b      	uxth	r3, r3
   216a4:	2b04      	cmp	r3, #4
   216a6:	d161      	bne.n	2176c <ip_interface_listen+0xe4>
   216a8:	2100      	movs	r1, #0
   216aa:	4a32      	ldr	r2, [pc, #200]	; (21774 <ip_interface_listen+0xec>)
   216ac:	4630      	mov	r0, r6
   216ae:	f005 f9ff 	bl	26ab0 <interface_socket_packet_handler_update>
   216b2:	4601      	mov	r1, r0
   216b4:	2800      	cmp	r0, #0
   216b6:	d15b      	bne.n	21770 <ip_interface_listen+0xe8>
   216b8:	a802      	add	r0, sp, #8
   216ba:	f840 1d04 	str.w	r1, [r0, #-4]!
   216be:	69af      	ldr	r7, [r5, #24]
   216c0:	f7ff f97e 	bl	209c0 <rpc_ip_client_request_alloc>
   216c4:	bba0      	cbnz	r0, 21730 <ip_interface_listen+0xa8>
   216c6:	f247 0308 	movw	r3, #28680	; 0x7008
   216ca:	2208      	movs	r2, #8
   216cc:	9c01      	ldr	r4, [sp, #4]
   216ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   216d2:	60e3      	str	r3, [r4, #12]
   216d4:	6127      	str	r7, [r4, #16]
   216d6:	7260      	strb	r0, [r4, #9]
   216d8:	72a0      	strb	r0, [r4, #10]
   216da:	72e0      	strb	r0, [r4, #11]
   216dc:	7222      	strb	r2, [r4, #8]
   216de:	68a3      	ldr	r3, [r4, #8]
   216e0:	f247 0108 	movw	r1, #28680	; 0x7008
   216e4:	3304      	adds	r3, #4
   216e6:	60a3      	str	r3, [r4, #8]
   216e8:	682b      	ldr	r3, [r5, #0]
   216ea:	4620      	mov	r0, r4
   216ec:	0c1b      	lsrs	r3, r3, #16
   216ee:	041b      	lsls	r3, r3, #16
   216f0:	f043 0306 	orr.w	r3, r3, #6
   216f4:	602b      	str	r3, [r5, #0]
   216f6:	682f      	ldr	r7, [r5, #0]
   216f8:	f7ff f976 	bl	209e8 <rpc_ip_client_request_send>
   216fc:	4680      	mov	r8, r0
   216fe:	b9e0      	cbnz	r0, 2173a <ip_interface_listen+0xb2>
   21700:	466b      	mov	r3, sp
   21702:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21706:	2107      	movs	r1, #7
   21708:	4630      	mov	r0, r6
   2170a:	f005 fa09 	bl	26b20 <interface_socket_wait>
   2170e:	4604      	mov	r4, r0
   21710:	b308      	cbz	r0, 21756 <ip_interface_listen+0xce>
   21712:	682b      	ldr	r3, [r5, #0]
   21714:	0c1b      	lsrs	r3, r3, #16
   21716:	041b      	lsls	r3, r3, #16
   21718:	f043 0304 	orr.w	r3, r3, #4
   2171c:	602b      	str	r3, [r5, #0]
   2171e:	4620      	mov	r0, r4
   21720:	f7fb fbda 	bl	1ced8 <bsd_os_errno_set>
   21724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21728:	4620      	mov	r0, r4
   2172a:	b002      	add	sp, #8
   2172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21730:	9c01      	ldr	r4, [sp, #4]
   21732:	2c00      	cmp	r4, #0
   21734:	d1d3      	bne.n	216de <ip_interface_listen+0x56>
   21736:	240c      	movs	r4, #12
   21738:	e7f1      	b.n	2171e <ip_interface_listen+0x96>
   2173a:	6820      	ldr	r0, [r4, #0]
   2173c:	b108      	cbz	r0, 21742 <ip_interface_listen+0xba>
   2173e:	f7ff f971 	bl	20a24 <rpc_ip_client_data_free>
   21742:	0c3f      	lsrs	r7, r7, #16
   21744:	043f      	lsls	r7, r7, #16
   21746:	4620      	mov	r0, r4
   21748:	f047 0704 	orr.w	r7, r7, #4
   2174c:	f7ff f962 	bl	20a14 <rpc_ip_client_message_free>
   21750:	2423      	movs	r4, #35	; 0x23
   21752:	602f      	str	r7, [r5, #0]
   21754:	e7e3      	b.n	2171e <ip_interface_listen+0x96>
   21756:	4630      	mov	r0, r6
   21758:	f005 fa56 	bl	26c08 <interface_socket_from_handle_get>
   2175c:	2800      	cmp	r0, #0
   2175e:	d0e3      	beq.n	21728 <ip_interface_listen+0xa0>
   21760:	6844      	ldr	r4, [r0, #4]
   21762:	2c00      	cmp	r4, #0
   21764:	d0e0      	beq.n	21728 <ip_interface_listen+0xa0>
   21766:	f8c0 8004 	str.w	r8, [r0, #4]
   2176a:	e7d2      	b.n	21712 <ip_interface_listen+0x8a>
   2176c:	2409      	movs	r4, #9
   2176e:	e7d6      	b.n	2171e <ip_interface_listen+0x96>
   21770:	2423      	movs	r4, #35	; 0x23
   21772:	e7d4      	b.n	2171e <ip_interface_listen+0x96>
   21774:	00020a35 	.word	0x00020a35

00021778 <ip_interface_accept>:
   21778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2177c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21780:	2500      	movs	r5, #0
   21782:	b087      	sub	sp, #28
   21784:	460f      	mov	r7, r1
   21786:	4690      	mov	r8, r2
   21788:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2178c:	4606      	mov	r6, r0
   2178e:	f005 fa3b 	bl	26c08 <interface_socket_from_handle_get>
   21792:	4604      	mov	r4, r0
   21794:	2800      	cmp	r0, #0
   21796:	f000 8123 	beq.w	219e0 <ip_interface_accept+0x268>
   2179a:	6803      	ldr	r3, [r0, #0]
   2179c:	b29b      	uxth	r3, r3
   2179e:	2b07      	cmp	r3, #7
   217a0:	d10a      	bne.n	217b8 <ip_interface_accept+0x40>
   217a2:	6803      	ldr	r3, [r0, #0]
   217a4:	6805      	ldr	r5, [r0, #0]
   217a6:	00db      	lsls	r3, r3, #3
   217a8:	d416      	bmi.n	217d8 <ip_interface_accept+0x60>
   217aa:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   217ae:	d019      	beq.n	217e4 <ip_interface_accept+0x6c>
   217b0:	6805      	ldr	r5, [r0, #0]
   217b2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   217b6:	d124      	bne.n	21802 <ip_interface_accept+0x8a>
   217b8:	f04f 0909 	mov.w	r9, #9
   217bc:	9b03      	ldr	r3, [sp, #12]
   217be:	b113      	cbz	r3, 217c6 <ip_interface_accept+0x4e>
   217c0:	4628      	mov	r0, r5
   217c2:	f005 f95f 	bl	26a84 <interface_socket_free>
   217c6:	4648      	mov	r0, r9
   217c8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   217cc:	f7fb fb84 	bl	1ced8 <bsd_os_errno_set>
   217d0:	4648      	mov	r0, r9
   217d2:	b007      	add	sp, #28
   217d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217d8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   217dc:	d170      	bne.n	218c0 <ip_interface_accept+0x148>
   217de:	f04f 0923 	mov.w	r9, #35	; 0x23
   217e2:	e7eb      	b.n	217bc <ip_interface_accept+0x44>
   217e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   217e8:	ab04      	add	r3, sp, #16
   217ea:	4611      	mov	r1, r2
   217ec:	4630      	mov	r0, r6
   217ee:	f005 f997 	bl	26b20 <interface_socket_wait>
   217f2:	4681      	mov	r9, r0
   217f4:	2800      	cmp	r0, #0
   217f6:	f000 8082 	beq.w	218fe <ip_interface_accept+0x186>
   217fa:	6825      	ldr	r5, [r4, #0]
   217fc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   21800:	d0dc      	beq.n	217bc <ip_interface_accept+0x44>
   21802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21806:	2300      	movs	r3, #0
   21808:	e9cd 0300 	strd	r0, r3, [sp]
   2180c:	4a78      	ldr	r2, [pc, #480]	; (219f0 <ip_interface_accept+0x278>)
   2180e:	6921      	ldr	r1, [r4, #16]
   21810:	a803      	add	r0, sp, #12
   21812:	f005 f8d3 	bl	269bc <interface_socket_allocate>
   21816:	9b03      	ldr	r3, [sp, #12]
   21818:	4605      	mov	r5, r0
   2181a:	2b00      	cmp	r3, #0
   2181c:	f000 80e4 	beq.w	219e8 <ip_interface_accept+0x270>
   21820:	2100      	movs	r1, #0
   21822:	6962      	ldr	r2, [r4, #20]
   21824:	a806      	add	r0, sp, #24
   21826:	615a      	str	r2, [r3, #20]
   21828:	68e2      	ldr	r2, [r4, #12]
   2182a:	f840 1d04 	str.w	r1, [r0, #-4]!
   2182e:	60da      	str	r2, [r3, #12]
   21830:	6922      	ldr	r2, [r4, #16]
   21832:	611a      	str	r2, [r3, #16]
   21834:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21838:	f7ff f8c2 	bl	209c0 <rpc_ip_client_request_alloc>
   2183c:	2800      	cmp	r0, #0
   2183e:	d146      	bne.n	218ce <ip_interface_accept+0x156>
   21840:	f247 030c 	movw	r3, #28684	; 0x700c
   21844:	2108      	movs	r1, #8
   21846:	f8dd b014 	ldr.w	fp, [sp, #20]
   2184a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2184e:	f8cb 300c 	str.w	r3, [fp, #12]
   21852:	f8cb 9010 	str.w	r9, [fp, #16]
   21856:	f88b 0009 	strb.w	r0, [fp, #9]
   2185a:	f88b 000a 	strb.w	r0, [fp, #10]
   2185e:	f88b 000b 	strb.w	r0, [fp, #11]
   21862:	f88b 1008 	strb.w	r1, [fp, #8]
   21866:	6823      	ldr	r3, [r4, #0]
   21868:	f247 010c 	movw	r1, #28684	; 0x700c
   2186c:	0c1b      	lsrs	r3, r3, #16
   2186e:	041b      	lsls	r3, r3, #16
   21870:	f043 0308 	orr.w	r3, r3, #8
   21874:	6023      	str	r3, [r4, #0]
   21876:	4658      	mov	r0, fp
   21878:	f8d4 9000 	ldr.w	r9, [r4]
   2187c:	f7ff f8b4 	bl	209e8 <rpc_ip_client_request_send>
   21880:	4682      	mov	sl, r0
   21882:	bb60      	cbnz	r0, 218de <ip_interface_accept+0x166>
   21884:	6822      	ldr	r2, [r4, #0]
   21886:	9900      	ldr	r1, [sp, #0]
   21888:	ab04      	add	r3, sp, #16
   2188a:	400a      	ands	r2, r1
   2188c:	6022      	str	r2, [r4, #0]
   2188e:	2109      	movs	r1, #9
   21890:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21894:	4630      	mov	r0, r6
   21896:	f005 f943 	bl	26b20 <interface_socket_wait>
   2189a:	4681      	mov	r9, r0
   2189c:	2800      	cmp	r0, #0
   2189e:	f000 808d 	beq.w	219bc <ip_interface_accept+0x244>
   218a2:	6823      	ldr	r3, [r4, #0]
   218a4:	9a01      	ldr	r2, [sp, #4]
   218a6:	431a      	orrs	r2, r3
   218a8:	6022      	str	r2, [r4, #0]
   218aa:	6823      	ldr	r3, [r4, #0]
   218ac:	0c1b      	lsrs	r3, r3, #16
   218ae:	041b      	lsls	r3, r3, #16
   218b0:	f043 0307 	orr.w	r3, r3, #7
   218b4:	6023      	str	r3, [r4, #0]
   218b6:	6823      	ldr	r3, [r4, #0]
   218b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   218bc:	6023      	str	r3, [r4, #0]
   218be:	e77d      	b.n	217bc <ip_interface_accept+0x44>
   218c0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   218c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   218c8:	e9cd 2300 	strd	r2, r3, [sp]
   218cc:	e79e      	b.n	2180c <ip_interface_accept+0x94>
   218ce:	f8dd b014 	ldr.w	fp, [sp, #20]
   218d2:	f04f 090c 	mov.w	r9, #12
   218d6:	f1bb 0f00 	cmp.w	fp, #0
   218da:	d1c4      	bne.n	21866 <ip_interface_accept+0xee>
   218dc:	e76e      	b.n	217bc <ip_interface_accept+0x44>
   218de:	f8db 0000 	ldr.w	r0, [fp]
   218e2:	b108      	cbz	r0, 218e8 <ip_interface_accept+0x170>
   218e4:	f7ff f89e 	bl	20a24 <rpc_ip_client_data_free>
   218e8:	ea4f 4919 	mov.w	r9, r9, lsr #16
   218ec:	4658      	mov	r0, fp
   218ee:	ea4f 4909 	mov.w	r9, r9, lsl #16
   218f2:	f7ff f88f 	bl	20a14 <rpc_ip_client_message_free>
   218f6:	f049 0307 	orr.w	r3, r9, #7
   218fa:	6023      	str	r3, [r4, #0]
   218fc:	e76f      	b.n	217de <ip_interface_accept+0x66>
   218fe:	4630      	mov	r0, r6
   21900:	f005 f982 	bl	26c08 <interface_socket_from_handle_get>
   21904:	b130      	cbz	r0, 21914 <ip_interface_accept+0x19c>
   21906:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2190a:	f1b9 0f00 	cmp.w	r9, #0
   2190e:	d001      	beq.n	21914 <ip_interface_accept+0x19c>
   21910:	6045      	str	r5, [r0, #4]
   21912:	e772      	b.n	217fa <ip_interface_accept+0x82>
   21914:	6823      	ldr	r3, [r4, #0]
   21916:	03d9      	lsls	r1, r3, #15
   21918:	f53f af73 	bmi.w	21802 <ip_interface_accept+0x8a>
   2191c:	4d35      	ldr	r5, [pc, #212]	; (219f4 <ip_interface_accept+0x27c>)
   2191e:	9903      	ldr	r1, [sp, #12]
   21920:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   21924:	699b      	ldr	r3, [r3, #24]
   21926:	618b      	str	r3, [r1, #24]
   21928:	b147      	cbz	r7, 2193c <ip_interface_accept+0x1c4>
   2192a:	68cb      	ldr	r3, [r1, #12]
   2192c:	2b0a      	cmp	r3, #10
   2192e:	d028      	beq.n	21982 <ip_interface_accept+0x20a>
   21930:	2b02      	cmp	r3, #2
   21932:	d103      	bne.n	2193c <ip_interface_accept+0x1c4>
   21934:	f8d8 2000 	ldr.w	r2, [r8]
   21938:	2a10      	cmp	r2, #16
   2193a:	d036      	beq.n	219aa <ip_interface_accept+0x232>
   2193c:	680a      	ldr	r2, [r1, #0]
   2193e:	482e      	ldr	r0, [pc, #184]	; (219f8 <ip_interface_accept+0x280>)
   21940:	4002      	ands	r2, r0
   21942:	f042 0205 	orr.w	r2, r2, #5
   21946:	600a      	str	r2, [r1, #0]
   21948:	9a03      	ldr	r2, [sp, #12]
   2194a:	6811      	ldr	r1, [r2, #0]
   2194c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   21950:	6011      	str	r1, [r2, #0]
   21952:	6811      	ldr	r1, [r2, #0]
   21954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21958:	6011      	str	r1, [r2, #0]
   2195a:	6823      	ldr	r3, [r4, #0]
   2195c:	4003      	ands	r3, r0
   2195e:	f043 0307 	orr.w	r3, r3, #7
   21962:	6023      	str	r3, [r4, #0]
   21964:	6823      	ldr	r3, [r4, #0]
   21966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2196a:	6023      	str	r3, [r4, #0]
   2196c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   21970:	f7ff f850 	bl	20a14 <rpc_ip_client_message_free>
   21974:	2300      	movs	r3, #0
   21976:	4648      	mov	r0, r9
   21978:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   2197c:	b007      	add	sp, #28
   2197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21982:	f8d8 2000 	ldr.w	r2, [r8]
   21986:	2a24      	cmp	r2, #36	; 0x24
   21988:	d1d8      	bne.n	2193c <ip_interface_accept+0x1c4>
   2198a:	703a      	strb	r2, [r7, #0]
   2198c:	2210      	movs	r2, #16
   2198e:	607b      	str	r3, [r7, #4]
   21990:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   21994:	f107 0010 	add.w	r0, r7, #16
   21998:	8b9b      	ldrh	r3, [r3, #28]
   2199a:	813b      	strh	r3, [r7, #8]
   2199c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   219a0:	3120      	adds	r1, #32
   219a2:	f011 ff0d 	bl	337c0 <memcpy>
   219a6:	9903      	ldr	r1, [sp, #12]
   219a8:	e7c8      	b.n	2193c <ip_interface_accept+0x1c4>
   219aa:	703a      	strb	r2, [r7, #0]
   219ac:	607b      	str	r3, [r7, #4]
   219ae:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   219b2:	f107 000c 	add.w	r0, r7, #12
   219b6:	8b9b      	ldrh	r3, [r3, #28]
   219b8:	2204      	movs	r2, #4
   219ba:	e7ee      	b.n	2199a <ip_interface_accept+0x222>
   219bc:	4630      	mov	r0, r6
   219be:	f005 f923 	bl	26c08 <interface_socket_from_handle_get>
   219c2:	b138      	cbz	r0, 219d4 <ip_interface_accept+0x25c>
   219c4:	f8d0 9004 	ldr.w	r9, [r0, #4]
   219c8:	f1b9 0f00 	cmp.w	r9, #0
   219cc:	d002      	beq.n	219d4 <ip_interface_accept+0x25c>
   219ce:	f8c0 a004 	str.w	sl, [r0, #4]
   219d2:	e766      	b.n	218a2 <ip_interface_accept+0x12a>
   219d4:	6823      	ldr	r3, [r4, #0]
   219d6:	9a01      	ldr	r2, [sp, #4]
   219d8:	46a9      	mov	r9, r5
   219da:	4313      	orrs	r3, r2
   219dc:	6023      	str	r3, [r4, #0]
   219de:	e79d      	b.n	2191c <ip_interface_accept+0x1a4>
   219e0:	4605      	mov	r5, r0
   219e2:	f04f 0909 	mov.w	r9, #9
   219e6:	e6e9      	b.n	217bc <ip_interface_accept+0x44>
   219e8:	f04f 090c 	mov.w	r9, #12
   219ec:	e6eb      	b.n	217c6 <ip_interface_accept+0x4e>
   219ee:	bf00      	nop
   219f0:	00020a35 	.word	0x00020a35
   219f4:	2002257c 	.word	0x2002257c
   219f8:	ffff0000 	.word	0xffff0000

000219fc <ip_interface_setopt>:
   219fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a00:	2901      	cmp	r1, #1
   21a02:	b086      	sub	sp, #24
   21a04:	f040 80df 	bne.w	21bc6 <ip_interface_setopt+0x1ca>
   21a08:	4616      	mov	r6, r2
   21a0a:	461d      	mov	r5, r3
   21a0c:	4607      	mov	r7, r0
   21a0e:	f005 f8fb 	bl	26c08 <interface_socket_from_handle_get>
   21a12:	4604      	mov	r4, r0
   21a14:	2800      	cmp	r0, #0
   21a16:	f000 80f1 	beq.w	21bfc <ip_interface_setopt+0x200>
   21a1a:	f1a6 0119 	sub.w	r1, r6, #25
   21a1e:	290f      	cmp	r1, #15
   21a20:	f200 80bd 	bhi.w	21b9e <ip_interface_setopt+0x1a2>
   21a24:	e8df f001 	tbb	[pc, r1]
   21a28:	bbbbbb17 	.word	0xbbbbbb17
   21a2c:	ab9b8bbb 	.word	0xab9b8bbb
   21a30:	bbbbbbbb 	.word	0xbbbbbbbb
   21a34:	08bbbbbb 	.word	0x08bbbbbb
   21a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21a3a:	4602      	mov	r2, r0
   21a3c:	e9cd 5300 	strd	r5, r3, [sp]
   21a40:	f241 0104 	movw	r1, #4100	; 0x1004
   21a44:	463b      	mov	r3, r7
   21a46:	2008      	movs	r0, #8
   21a48:	f7ff f800 	bl	20a4c <setopt_check_and_send_int>
   21a4c:	4605      	mov	r5, r0
   21a4e:	4628      	mov	r0, r5
   21a50:	b006      	add	sp, #24
   21a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a56:	2d00      	cmp	r5, #0
   21a58:	f000 80c3 	beq.w	21be2 <ip_interface_setopt+0x1e6>
   21a5c:	4628      	mov	r0, r5
   21a5e:	f7f0 fb0f 	bl	12080 <strlen>
   21a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21a64:	4298      	cmp	r0, r3
   21a66:	f040 80bc 	bne.w	21be2 <ip_interface_setopt+0x1e6>
   21a6a:	6823      	ldr	r3, [r4, #0]
   21a6c:	b29b      	uxth	r3, r3
   21a6e:	2b02      	cmp	r3, #2
   21a70:	f040 80af 	bne.w	21bd2 <ip_interface_setopt+0x1d6>
   21a74:	4629      	mov	r1, r5
   21a76:	68e0      	ldr	r0, [r4, #12]
   21a78:	f002 fe3a 	bl	246f0 <pdn_interface_pdn_id_get>
   21a7c:	9003      	str	r0, [sp, #12]
   21a7e:	3001      	adds	r0, #1
   21a80:	bf08      	it	eq
   21a82:	2516      	moveq	r5, #22
   21a84:	f000 8099 	beq.w	21bba <ip_interface_setopt+0x1be>
   21a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a8c:	9304      	str	r3, [sp, #16]
   21a8e:	6823      	ldr	r3, [r4, #0]
   21a90:	0259      	lsls	r1, r3, #9
   21a92:	f100 8091 	bmi.w	21bb8 <ip_interface_setopt+0x1bc>
   21a96:	6823      	ldr	r3, [r4, #0]
   21a98:	021a      	lsls	r2, r3, #8
   21a9a:	f100 808d 	bmi.w	21bb8 <ip_interface_setopt+0x1bc>
   21a9e:	6823      	ldr	r3, [r4, #0]
   21aa0:	01db      	lsls	r3, r3, #7
   21aa2:	f100 8089 	bmi.w	21bb8 <ip_interface_setopt+0x1bc>
   21aa6:	6823      	ldr	r3, [r4, #0]
   21aa8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21aac:	f040 8084 	bne.w	21bb8 <ip_interface_setopt+0x1bc>
   21ab0:	6826      	ldr	r6, [r4, #0]
   21ab2:	6822      	ldr	r2, [r4, #0]
   21ab4:	a806      	add	r0, sp, #24
   21ab6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   21aba:	6022      	str	r2, [r4, #0]
   21abc:	2104      	movs	r1, #4
   21abe:	f840 3d04 	str.w	r3, [r0, #-4]!
   21ac2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   21ac6:	f7fe ff7b 	bl	209c0 <rpc_ip_client_request_alloc>
   21aca:	2800      	cmp	r0, #0
   21acc:	f040 8083 	bne.w	21bd6 <ip_interface_setopt+0x1da>
   21ad0:	f247 0303 	movw	r3, #28675	; 0x7003
   21ad4:	2208      	movs	r2, #8
   21ad6:	9d05      	ldr	r5, [sp, #20]
   21ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   21adc:	60eb      	str	r3, [r5, #12]
   21ade:	f8c5 8010 	str.w	r8, [r5, #16]
   21ae2:	7268      	strb	r0, [r5, #9]
   21ae4:	72a8      	strb	r0, [r5, #10]
   21ae6:	72e8      	strb	r0, [r5, #11]
   21ae8:	722a      	strb	r2, [r5, #8]
   21aea:	f04f 0c08 	mov.w	ip, #8
   21aee:	2300      	movs	r3, #0
   21af0:	2010      	movs	r0, #16
   21af2:	2130      	movs	r1, #48	; 0x30
   21af4:	68aa      	ldr	r2, [r5, #8]
   21af6:	756b      	strb	r3, [r5, #21]
   21af8:	4462      	add	r2, ip
   21afa:	60aa      	str	r2, [r5, #8]
   21afc:	75ab      	strb	r3, [r5, #22]
   21afe:	75eb      	strb	r3, [r5, #23]
   21b00:	76ab      	strb	r3, [r5, #26]
   21b02:	76eb      	strb	r3, [r5, #27]
   21b04:	f885 c014 	strb.w	ip, [r5, #20]
   21b08:	7628      	strb	r0, [r5, #24]
   21b0a:	7669      	strb	r1, [r5, #25]
   21b0c:	2204      	movs	r2, #4
   21b0e:	a903      	add	r1, sp, #12
   21b10:	6828      	ldr	r0, [r5, #0]
   21b12:	f011 fe55 	bl	337c0 <memcpy>
   21b16:	f247 0103 	movw	r1, #28675	; 0x7003
   21b1a:	4628      	mov	r0, r5
   21b1c:	f7fe ff64 	bl	209e8 <rpc_ip_client_request_send>
   21b20:	4680      	mov	r8, r0
   21b22:	2800      	cmp	r0, #0
   21b24:	d15f      	bne.n	21be6 <ip_interface_setopt+0x1ea>
   21b26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21b2a:	ab04      	add	r3, sp, #16
   21b2c:	4611      	mov	r1, r2
   21b2e:	4638      	mov	r0, r7
   21b30:	f004 fff6 	bl	26b20 <interface_socket_wait>
   21b34:	4605      	mov	r5, r0
   21b36:	2800      	cmp	r0, #0
   21b38:	d066      	beq.n	21c08 <ip_interface_setopt+0x20c>
   21b3a:	6026      	str	r6, [r4, #0]
   21b3c:	e03d      	b.n	21bba <ip_interface_setopt+0x1be>
   21b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21b40:	4602      	mov	r2, r0
   21b42:	e9cd 5300 	strd	r5, r3, [sp]
   21b46:	f248 0101 	movw	r1, #32769	; 0x8001
   21b4a:	463b      	mov	r3, r7
   21b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
   21b50:	f7fe ff7c 	bl	20a4c <setopt_check_and_send_int>
   21b54:	4605      	mov	r5, r0
   21b56:	4628      	mov	r0, r5
   21b58:	b006      	add	sp, #24
   21b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21b60:	4602      	mov	r2, r0
   21b62:	e9cd 5300 	strd	r5, r3, [sp]
   21b66:	f244 0110 	movw	r1, #16400	; 0x4010
   21b6a:	463b      	mov	r3, r7
   21b6c:	f44f 7000 	mov.w	r0, #512	; 0x200
   21b70:	f7fe ff6c 	bl	20a4c <setopt_check_and_send_int>
   21b74:	4605      	mov	r5, r0
   21b76:	4628      	mov	r0, r5
   21b78:	b006      	add	sp, #24
   21b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21b80:	4602      	mov	r2, r0
   21b82:	e9cd 5300 	strd	r5, r3, [sp]
   21b86:	f246 0110 	movw	r1, #24592	; 0x6010
   21b8a:	463b      	mov	r3, r7
   21b8c:	f44f 7000 	mov.w	r0, #512	; 0x200
   21b90:	f7fe ff5c 	bl	20a4c <setopt_check_and_send_int>
   21b94:	4605      	mov	r5, r0
   21b96:	4628      	mov	r0, r5
   21b98:	b006      	add	sp, #24
   21b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21ba0:	4632      	mov	r2, r6
   21ba2:	9300      	str	r3, [sp, #0]
   21ba4:	4638      	mov	r0, r7
   21ba6:	462b      	mov	r3, r5
   21ba8:	2101      	movs	r1, #1
   21baa:	f005 f855 	bl	26c58 <interface_socket_setopt>
   21bae:	4605      	mov	r5, r0
   21bb0:	4628      	mov	r0, r5
   21bb2:	b006      	add	sp, #24
   21bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21bb8:	2523      	movs	r5, #35	; 0x23
   21bba:	4628      	mov	r0, r5
   21bbc:	f7fb f98c 	bl	1ced8 <bsd_os_errno_set>
   21bc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21bc4:	e743      	b.n	21a4e <ip_interface_setopt+0x52>
   21bc6:	202a      	movs	r0, #42	; 0x2a
   21bc8:	f7fb f986 	bl	1ced8 <bsd_os_errno_set>
   21bcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21bd0:	e73d      	b.n	21a4e <ip_interface_setopt+0x52>
   21bd2:	2509      	movs	r5, #9
   21bd4:	e7f1      	b.n	21bba <ip_interface_setopt+0x1be>
   21bd6:	9d05      	ldr	r5, [sp, #20]
   21bd8:	2d00      	cmp	r5, #0
   21bda:	d186      	bne.n	21aea <ip_interface_setopt+0xee>
   21bdc:	6026      	str	r6, [r4, #0]
   21bde:	250c      	movs	r5, #12
   21be0:	e7eb      	b.n	21bba <ip_interface_setopt+0x1be>
   21be2:	250e      	movs	r5, #14
   21be4:	e7e9      	b.n	21bba <ip_interface_setopt+0x1be>
   21be6:	6828      	ldr	r0, [r5, #0]
   21be8:	b108      	cbz	r0, 21bee <ip_interface_setopt+0x1f2>
   21bea:	f7fe ff1b 	bl	20a24 <rpc_ip_client_data_free>
   21bee:	4628      	mov	r0, r5
   21bf0:	f7fe ff10 	bl	20a14 <rpc_ip_client_message_free>
   21bf4:	2523      	movs	r5, #35	; 0x23
   21bf6:	6026      	str	r6, [r4, #0]
   21bf8:	6026      	str	r6, [r4, #0]
   21bfa:	e7de      	b.n	21bba <ip_interface_setopt+0x1be>
   21bfc:	2009      	movs	r0, #9
   21bfe:	f7fb f96b 	bl	1ced8 <bsd_os_errno_set>
   21c02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21c06:	e722      	b.n	21a4e <ip_interface_setopt+0x52>
   21c08:	4638      	mov	r0, r7
   21c0a:	f004 fffd 	bl	26c08 <interface_socket_from_handle_get>
   21c0e:	b120      	cbz	r0, 21c1a <ip_interface_setopt+0x21e>
   21c10:	6845      	ldr	r5, [r0, #4]
   21c12:	b115      	cbz	r5, 21c1a <ip_interface_setopt+0x21e>
   21c14:	f8c0 8004 	str.w	r8, [r0, #4]
   21c18:	e78f      	b.n	21b3a <ip_interface_setopt+0x13e>
   21c1a:	6026      	str	r6, [r4, #0]
   21c1c:	e717      	b.n	21a4e <ip_interface_setopt+0x52>
   21c1e:	bf00      	nop

00021c20 <ip_interface_getopt>:
   21c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c24:	2901      	cmp	r1, #1
   21c26:	b085      	sub	sp, #20
   21c28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21c2a:	f040 8158 	bne.w	21ede <ip_interface_getopt+0x2be>
   21c2e:	4616      	mov	r6, r2
   21c30:	461f      	mov	r7, r3
   21c32:	4680      	mov	r8, r0
   21c34:	f004 ffe8 	bl	26c08 <interface_socket_from_handle_get>
   21c38:	4604      	mov	r4, r0
   21c3a:	2800      	cmp	r0, #0
   21c3c:	f000 819d 	beq.w	21f7a <ip_interface_getopt+0x35a>
   21c40:	f1a6 031e 	sub.w	r3, r6, #30
   21c44:	2b0a      	cmp	r3, #10
   21c46:	f200 8133 	bhi.w	21eb0 <ip_interface_getopt+0x290>
   21c4a:	e8df f013 	tbh	[pc, r3, lsl #1]
   21c4e:	0055      	.short	0x0055
   21c50:	00d60096 	.word	0x00d60096
   21c54:	01310131 	.word	0x01310131
   21c58:	01310131 	.word	0x01310131
   21c5c:	01310131 	.word	0x01310131
   21c60:	000b0131 	.word	0x000b0131
   21c64:	2d00      	cmp	r5, #0
   21c66:	f000 8134 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21c6a:	6829      	ldr	r1, [r5, #0]
   21c6c:	2904      	cmp	r1, #4
   21c6e:	f040 8130 	bne.w	21ed2 <ip_interface_getopt+0x2b2>
   21c72:	2f00      	cmp	r7, #0
   21c74:	f000 812d 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c7c:	9302      	str	r3, [sp, #8]
   21c7e:	6803      	ldr	r3, [r0, #0]
   21c80:	0258      	lsls	r0, r3, #9
   21c82:	f100 811f 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21c86:	6823      	ldr	r3, [r4, #0]
   21c88:	021a      	lsls	r2, r3, #8
   21c8a:	f100 811b 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21c8e:	6823      	ldr	r3, [r4, #0]
   21c90:	01db      	lsls	r3, r3, #7
   21c92:	f100 8117 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21c96:	6823      	ldr	r3, [r4, #0]
   21c98:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21c9c:	f040 8112 	bne.w	21ec4 <ip_interface_getopt+0x2a4>
   21ca0:	6826      	ldr	r6, [r4, #0]
   21ca2:	6822      	ldr	r2, [r4, #0]
   21ca4:	a804      	add	r0, sp, #16
   21ca6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   21caa:	6022      	str	r2, [r4, #0]
   21cac:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21cb0:	f840 3d04 	str.w	r3, [r0, #-4]!
   21cb4:	f7fe fe84 	bl	209c0 <rpc_ip_client_request_alloc>
   21cb8:	2800      	cmp	r0, #0
   21cba:	f040 812b 	bne.w	21f14 <ip_interface_getopt+0x2f4>
   21cbe:	f247 0304 	movw	r3, #28676	; 0x7004
   21cc2:	2208      	movs	r2, #8
   21cc4:	9d03      	ldr	r5, [sp, #12]
   21cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   21cca:	60eb      	str	r3, [r5, #12]
   21ccc:	f8c5 9010 	str.w	r9, [r5, #16]
   21cd0:	7268      	strb	r0, [r5, #9]
   21cd2:	72a8      	strb	r0, [r5, #10]
   21cd4:	72e8      	strb	r0, [r5, #11]
   21cd6:	722a      	strb	r2, [r5, #8]
   21cd8:	f04f 0c08 	mov.w	ip, #8
   21cdc:	2300      	movs	r3, #0
   21cde:	68aa      	ldr	r2, [r5, #8]
   21ce0:	2004      	movs	r0, #4
   21ce2:	4462      	add	r2, ip
   21ce4:	2110      	movs	r1, #16
   21ce6:	756b      	strb	r3, [r5, #21]
   21ce8:	60aa      	str	r2, [r5, #8]
   21cea:	75ab      	strb	r3, [r5, #22]
   21cec:	75eb      	strb	r3, [r5, #23]
   21cee:	76ab      	strb	r3, [r5, #26]
   21cf0:	76eb      	strb	r3, [r5, #27]
   21cf2:	f885 c014 	strb.w	ip, [r5, #20]
   21cf6:	e0c1      	b.n	21e7c <ip_interface_getopt+0x25c>
   21cf8:	2d00      	cmp	r5, #0
   21cfa:	f000 80ea 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21cfe:	6829      	ldr	r1, [r5, #0]
   21d00:	2904      	cmp	r1, #4
   21d02:	f040 80e6 	bne.w	21ed2 <ip_interface_getopt+0x2b2>
   21d06:	2f00      	cmp	r7, #0
   21d08:	f000 80e3 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21d10:	9302      	str	r3, [sp, #8]
   21d12:	6803      	ldr	r3, [r0, #0]
   21d14:	025a      	lsls	r2, r3, #9
   21d16:	f100 80d5 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21d1a:	6803      	ldr	r3, [r0, #0]
   21d1c:	021b      	lsls	r3, r3, #8
   21d1e:	f100 80d1 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21d22:	6803      	ldr	r3, [r0, #0]
   21d24:	01de      	lsls	r6, r3, #7
   21d26:	f100 80cd 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21d2a:	6803      	ldr	r3, [r0, #0]
   21d2c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21d30:	f040 80c8 	bne.w	21ec4 <ip_interface_getopt+0x2a4>
   21d34:	6826      	ldr	r6, [r4, #0]
   21d36:	6822      	ldr	r2, [r4, #0]
   21d38:	a804      	add	r0, sp, #16
   21d3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   21d3e:	6022      	str	r2, [r4, #0]
   21d40:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21d44:	f840 3d04 	str.w	r3, [r0, #-4]!
   21d48:	f7fe fe3a 	bl	209c0 <rpc_ip_client_request_alloc>
   21d4c:	2800      	cmp	r0, #0
   21d4e:	f040 80da 	bne.w	21f06 <ip_interface_getopt+0x2e6>
   21d52:	f247 0304 	movw	r3, #28676	; 0x7004
   21d56:	2208      	movs	r2, #8
   21d58:	9d03      	ldr	r5, [sp, #12]
   21d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   21d5e:	60eb      	str	r3, [r5, #12]
   21d60:	f8c5 9010 	str.w	r9, [r5, #16]
   21d64:	7268      	strb	r0, [r5, #9]
   21d66:	72a8      	strb	r0, [r5, #10]
   21d68:	72e8      	strb	r0, [r5, #11]
   21d6a:	722a      	strb	r2, [r5, #8]
   21d6c:	2300      	movs	r3, #0
   21d6e:	f04f 0c02 	mov.w	ip, #2
   21d72:	2001      	movs	r0, #1
   21d74:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   21d78:	e076      	b.n	21e68 <ip_interface_getopt+0x248>
   21d7a:	2d00      	cmp	r5, #0
   21d7c:	f000 80a9 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21d80:	6829      	ldr	r1, [r5, #0]
   21d82:	2904      	cmp	r1, #4
   21d84:	f040 80a5 	bne.w	21ed2 <ip_interface_getopt+0x2b2>
   21d88:	2f00      	cmp	r7, #0
   21d8a:	f000 80a2 	beq.w	21ed2 <ip_interface_getopt+0x2b2>
   21d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21d92:	9302      	str	r3, [sp, #8]
   21d94:	6803      	ldr	r3, [r0, #0]
   21d96:	025d      	lsls	r5, r3, #9
   21d98:	f100 8094 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21d9c:	6803      	ldr	r3, [r0, #0]
   21d9e:	0218      	lsls	r0, r3, #8
   21da0:	f100 8090 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21da4:	6823      	ldr	r3, [r4, #0]
   21da6:	01da      	lsls	r2, r3, #7
   21da8:	f100 808c 	bmi.w	21ec4 <ip_interface_getopt+0x2a4>
   21dac:	6823      	ldr	r3, [r4, #0]
   21dae:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21db2:	f040 8087 	bne.w	21ec4 <ip_interface_getopt+0x2a4>
   21db6:	6826      	ldr	r6, [r4, #0]
   21db8:	6822      	ldr	r2, [r4, #0]
   21dba:	a804      	add	r0, sp, #16
   21dbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   21dc0:	6022      	str	r2, [r4, #0]
   21dc2:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21dc6:	f840 3d04 	str.w	r3, [r0, #-4]!
   21dca:	f7fe fdf9 	bl	209c0 <rpc_ip_client_request_alloc>
   21dce:	2800      	cmp	r0, #0
   21dd0:	f040 80a8 	bne.w	21f24 <ip_interface_getopt+0x304>
   21dd4:	f247 0304 	movw	r3, #28676	; 0x7004
   21dd8:	2208      	movs	r2, #8
   21dda:	9d03      	ldr	r5, [sp, #12]
   21ddc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   21de0:	60eb      	str	r3, [r5, #12]
   21de2:	f8c5 9010 	str.w	r9, [r5, #16]
   21de6:	7268      	strb	r0, [r5, #9]
   21de8:	72a8      	strb	r0, [r5, #10]
   21dea:	72e8      	strb	r0, [r5, #11]
   21dec:	722a      	strb	r2, [r5, #8]
   21dee:	2300      	movs	r3, #0
   21df0:	f04f 0c02 	mov.w	ip, #2
   21df4:	2010      	movs	r0, #16
   21df6:	2140      	movs	r1, #64	; 0x40
   21df8:	e036      	b.n	21e68 <ip_interface_getopt+0x248>
   21dfa:	2d00      	cmp	r5, #0
   21dfc:	d069      	beq.n	21ed2 <ip_interface_getopt+0x2b2>
   21dfe:	6829      	ldr	r1, [r5, #0]
   21e00:	2904      	cmp	r1, #4
   21e02:	d166      	bne.n	21ed2 <ip_interface_getopt+0x2b2>
   21e04:	2f00      	cmp	r7, #0
   21e06:	d064      	beq.n	21ed2 <ip_interface_getopt+0x2b2>
   21e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21e0c:	9302      	str	r3, [sp, #8]
   21e0e:	6803      	ldr	r3, [r0, #0]
   21e10:	025b      	lsls	r3, r3, #9
   21e12:	d457      	bmi.n	21ec4 <ip_interface_getopt+0x2a4>
   21e14:	6803      	ldr	r3, [r0, #0]
   21e16:	021e      	lsls	r6, r3, #8
   21e18:	d454      	bmi.n	21ec4 <ip_interface_getopt+0x2a4>
   21e1a:	6803      	ldr	r3, [r0, #0]
   21e1c:	01dd      	lsls	r5, r3, #7
   21e1e:	d451      	bmi.n	21ec4 <ip_interface_getopt+0x2a4>
   21e20:	6803      	ldr	r3, [r0, #0]
   21e22:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21e26:	d14d      	bne.n	21ec4 <ip_interface_getopt+0x2a4>
   21e28:	6826      	ldr	r6, [r4, #0]
   21e2a:	6822      	ldr	r2, [r4, #0]
   21e2c:	a804      	add	r0, sp, #16
   21e2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   21e32:	6022      	str	r2, [r4, #0]
   21e34:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21e38:	f840 3d04 	str.w	r3, [r0, #-4]!
   21e3c:	f7fe fdc0 	bl	209c0 <rpc_ip_client_request_alloc>
   21e40:	2800      	cmp	r0, #0
   21e42:	d16b      	bne.n	21f1c <ip_interface_getopt+0x2fc>
   21e44:	f247 0304 	movw	r3, #28676	; 0x7004
   21e48:	2208      	movs	r2, #8
   21e4a:	9d03      	ldr	r5, [sp, #12]
   21e4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   21e50:	60eb      	str	r3, [r5, #12]
   21e52:	f8c5 9010 	str.w	r9, [r5, #16]
   21e56:	7268      	strb	r0, [r5, #9]
   21e58:	72a8      	strb	r0, [r5, #10]
   21e5a:	72e8      	strb	r0, [r5, #11]
   21e5c:	722a      	strb	r2, [r5, #8]
   21e5e:	2300      	movs	r3, #0
   21e60:	f04f 0c02 	mov.w	ip, #2
   21e64:	2010      	movs	r0, #16
   21e66:	2160      	movs	r1, #96	; 0x60
   21e68:	68aa      	ldr	r2, [r5, #8]
   21e6a:	752b      	strb	r3, [r5, #20]
   21e6c:	3208      	adds	r2, #8
   21e6e:	60aa      	str	r2, [r5, #8]
   21e70:	75ab      	strb	r3, [r5, #22]
   21e72:	75eb      	strb	r3, [r5, #23]
   21e74:	76ab      	strb	r3, [r5, #26]
   21e76:	76eb      	strb	r3, [r5, #27]
   21e78:	f885 c015 	strb.w	ip, [r5, #21]
   21e7c:	7628      	strb	r0, [r5, #24]
   21e7e:	7669      	strb	r1, [r5, #25]
   21e80:	4628      	mov	r0, r5
   21e82:	f247 0104 	movw	r1, #28676	; 0x7004
   21e86:	f8d5 9000 	ldr.w	r9, [r5]
   21e8a:	f7fe fdad 	bl	209e8 <rpc_ip_client_request_send>
   21e8e:	4682      	mov	sl, r0
   21e90:	bb58      	cbnz	r0, 21eea <ip_interface_getopt+0x2ca>
   21e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   21e96:	ab02      	add	r3, sp, #8
   21e98:	4611      	mov	r1, r2
   21e9a:	4640      	mov	r0, r8
   21e9c:	f004 fe40 	bl	26b20 <interface_socket_wait>
   21ea0:	4605      	mov	r5, r0
   21ea2:	2800      	cmp	r0, #0
   21ea4:	d042      	beq.n	21f2c <ip_interface_getopt+0x30c>
   21ea6:	4648      	mov	r0, r9
   21ea8:	f7fe fdbc 	bl	20a24 <rpc_ip_client_data_free>
   21eac:	6026      	str	r6, [r4, #0]
   21eae:	e00a      	b.n	21ec6 <ip_interface_getopt+0x2a6>
   21eb0:	9500      	str	r5, [sp, #0]
   21eb2:	463b      	mov	r3, r7
   21eb4:	4632      	mov	r2, r6
   21eb6:	4640      	mov	r0, r8
   21eb8:	2101      	movs	r1, #1
   21eba:	f004 ff13 	bl	26ce4 <interface_socket_getopt>
   21ebe:	b005      	add	sp, #20
   21ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ec4:	2523      	movs	r5, #35	; 0x23
   21ec6:	4628      	mov	r0, r5
   21ec8:	f7fb f806 	bl	1ced8 <bsd_os_errno_set>
   21ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21ed0:	e7f5      	b.n	21ebe <ip_interface_getopt+0x29e>
   21ed2:	2016      	movs	r0, #22
   21ed4:	f7fb f800 	bl	1ced8 <bsd_os_errno_set>
   21ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21edc:	e7ef      	b.n	21ebe <ip_interface_getopt+0x29e>
   21ede:	202a      	movs	r0, #42	; 0x2a
   21ee0:	f7fa fffa 	bl	1ced8 <bsd_os_errno_set>
   21ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21ee8:	e7e9      	b.n	21ebe <ip_interface_getopt+0x29e>
   21eea:	6828      	ldr	r0, [r5, #0]
   21eec:	b108      	cbz	r0, 21ef2 <ip_interface_getopt+0x2d2>
   21eee:	f7fe fd99 	bl	20a24 <rpc_ip_client_data_free>
   21ef2:	4628      	mov	r0, r5
   21ef4:	f7fe fd8e 	bl	20a14 <rpc_ip_client_message_free>
   21ef8:	6026      	str	r6, [r4, #0]
   21efa:	4648      	mov	r0, r9
   21efc:	f7fe fd92 	bl	20a24 <rpc_ip_client_data_free>
   21f00:	2523      	movs	r5, #35	; 0x23
   21f02:	6026      	str	r6, [r4, #0]
   21f04:	e7df      	b.n	21ec6 <ip_interface_getopt+0x2a6>
   21f06:	9d03      	ldr	r5, [sp, #12]
   21f08:	2d00      	cmp	r5, #0
   21f0a:	f47f af2f 	bne.w	21d6c <ip_interface_getopt+0x14c>
   21f0e:	6026      	str	r6, [r4, #0]
   21f10:	250c      	movs	r5, #12
   21f12:	e7d8      	b.n	21ec6 <ip_interface_getopt+0x2a6>
   21f14:	9d03      	ldr	r5, [sp, #12]
   21f16:	2d00      	cmp	r5, #0
   21f18:	d0f9      	beq.n	21f0e <ip_interface_getopt+0x2ee>
   21f1a:	e6dd      	b.n	21cd8 <ip_interface_getopt+0xb8>
   21f1c:	9d03      	ldr	r5, [sp, #12]
   21f1e:	2d00      	cmp	r5, #0
   21f20:	d0f5      	beq.n	21f0e <ip_interface_getopt+0x2ee>
   21f22:	e79c      	b.n	21e5e <ip_interface_getopt+0x23e>
   21f24:	9d03      	ldr	r5, [sp, #12]
   21f26:	2d00      	cmp	r5, #0
   21f28:	d0f1      	beq.n	21f0e <ip_interface_getopt+0x2ee>
   21f2a:	e760      	b.n	21dee <ip_interface_getopt+0x1ce>
   21f2c:	4640      	mov	r0, r8
   21f2e:	f004 fe6b 	bl	26c08 <interface_socket_from_handle_get>
   21f32:	b120      	cbz	r0, 21f3e <ip_interface_getopt+0x31e>
   21f34:	6845      	ldr	r5, [r0, #4]
   21f36:	b115      	cbz	r5, 21f3e <ip_interface_getopt+0x31e>
   21f38:	f8c0 a004 	str.w	sl, [r0, #4]
   21f3c:	e7b3      	b.n	21ea6 <ip_interface_getopt+0x286>
   21f3e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 21fcc <ip_interface_getopt+0x3ac>
   21f42:	f85a 5028 	ldr.w	r5, [sl, r8, lsl #2]
   21f46:	b3ad      	cbz	r5, 21fb4 <ip_interface_getopt+0x394>
   21f48:	686a      	ldr	r2, [r5, #4]
   21f4a:	2a04      	cmp	r2, #4
   21f4c:	d81b      	bhi.n	21f86 <ip_interface_getopt+0x366>
   21f4e:	f8d5 b000 	ldr.w	fp, [r5]
   21f52:	f1bb 0f00 	cmp.w	fp, #0
   21f56:	d022      	beq.n	21f9e <ip_interface_getopt+0x37e>
   21f58:	2500      	movs	r5, #0
   21f5a:	4659      	mov	r1, fp
   21f5c:	4638      	mov	r0, r7
   21f5e:	f011 fc2f 	bl	337c0 <memcpy>
   21f62:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
   21f66:	f7fe fd55 	bl	20a14 <rpc_ip_client_message_free>
   21f6a:	4648      	mov	r0, r9
   21f6c:	f84a 5028 	str.w	r5, [sl, r8, lsl #2]
   21f70:	f7fe fd58 	bl	20a24 <rpc_ip_client_data_free>
   21f74:	4628      	mov	r0, r5
   21f76:	6026      	str	r6, [r4, #0]
   21f78:	e7a1      	b.n	21ebe <ip_interface_getopt+0x29e>
   21f7a:	2009      	movs	r0, #9
   21f7c:	f7fa ffac 	bl	1ced8 <bsd_os_errno_set>
   21f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21f84:	e79b      	b.n	21ebe <ip_interface_getopt+0x29e>
   21f86:	4628      	mov	r0, r5
   21f88:	f7fe fd44 	bl	20a14 <rpc_ip_client_message_free>
   21f8c:	2300      	movs	r3, #0
   21f8e:	4648      	mov	r0, r9
   21f90:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
   21f94:	2516      	movs	r5, #22
   21f96:	f7fe fd45 	bl	20a24 <rpc_ip_client_data_free>
   21f9a:	6026      	str	r6, [r4, #0]
   21f9c:	e793      	b.n	21ec6 <ip_interface_getopt+0x2a6>
   21f9e:	4628      	mov	r0, r5
   21fa0:	f7fe fd38 	bl	20a14 <rpc_ip_client_message_free>
   21fa4:	4648      	mov	r0, r9
   21fa6:	f84a b028 	str.w	fp, [sl, r8, lsl #2]
   21faa:	2516      	movs	r5, #22
   21fac:	f7fe fd3a 	bl	20a24 <rpc_ip_client_data_free>
   21fb0:	6026      	str	r6, [r4, #0]
   21fb2:	e788      	b.n	21ec6 <ip_interface_getopt+0x2a6>
   21fb4:	2204      	movs	r2, #4
   21fb6:	4649      	mov	r1, r9
   21fb8:	4638      	mov	r0, r7
   21fba:	f011 fc01 	bl	337c0 <memcpy>
   21fbe:	4648      	mov	r0, r9
   21fc0:	f7fe fd30 	bl	20a24 <rpc_ip_client_data_free>
   21fc4:	6026      	str	r6, [r4, #0]
   21fc6:	4628      	mov	r0, r5
   21fc8:	e779      	b.n	21ebe <ip_interface_getopt+0x29e>
   21fca:	bf00      	nop
   21fcc:	2002257c 	.word	0x2002257c

00021fd0 <ip_interface_getaddrinfo>:
   21fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fd4:	f04f 0c00 	mov.w	ip, #0
   21fd8:	2401      	movs	r4, #1
   21fda:	4e75      	ldr	r6, [pc, #468]	; (221b0 <ip_interface_getaddrinfo+0x1e0>)
   21fdc:	4d75      	ldr	r5, [pc, #468]	; (221b4 <ip_interface_getaddrinfo+0x1e4>)
   21fde:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 221c4 <ip_interface_getaddrinfo+0x1f4>
   21fe2:	4f75      	ldr	r7, [pc, #468]	; (221b8 <ip_interface_getaddrinfo+0x1e8>)
   21fe4:	7836      	ldrb	r6, [r6, #0]
   21fe6:	b085      	sub	sp, #20
   21fe8:	f8a5 c000 	strh.w	ip, [r5]
   21fec:	f8c8 4000 	str.w	r4, [r8]
   21ff0:	603c      	str	r4, [r7, #0]
   21ff2:	2e00      	cmp	r6, #0
   21ff4:	d05b      	beq.n	220ae <ip_interface_getaddrinfo+0xde>
   21ff6:	9301      	str	r3, [sp, #4]
   21ff8:	4614      	mov	r4, r2
   21ffa:	460b      	mov	r3, r1
   21ffc:	4606      	mov	r6, r0
   21ffe:	b171      	cbz	r1, 2201e <ip_interface_getaddrinfo+0x4e>
   22000:	4618      	mov	r0, r3
   22002:	220a      	movs	r2, #10
   22004:	4661      	mov	r1, ip
   22006:	f00b f9af 	bl	2d368 <strtol>
   2200a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2200e:	1e42      	subs	r2, r0, #1
   22010:	429a      	cmp	r2, r3
   22012:	f200 8097 	bhi.w	22144 <ip_interface_getaddrinfo+0x174>
   22016:	0203      	lsls	r3, r0, #8
   22018:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   2201c:	8028      	strh	r0, [r5, #0]
   2201e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 221c8 <ip_interface_getaddrinfo+0x1f8>
   22022:	f8da 3000 	ldr.w	r3, [sl]
   22026:	2b00      	cmp	r3, #0
   22028:	d145      	bne.n	220b6 <ip_interface_getaddrinfo+0xe6>
   2202a:	4a64      	ldr	r2, [pc, #400]	; (221bc <ip_interface_getaddrinfo+0x1ec>)
   2202c:	6013      	str	r3, [r2, #0]
   2202e:	4a64      	ldr	r2, [pc, #400]	; (221c0 <ip_interface_getaddrinfo+0x1f0>)
   22030:	6013      	str	r3, [r2, #0]
   22032:	2e00      	cmp	r6, #0
   22034:	d07a      	beq.n	2212c <ip_interface_getaddrinfo+0x15c>
   22036:	4630      	mov	r0, r6
   22038:	f7f0 f822 	bl	12080 <strlen>
   2203c:	4683      	mov	fp, r0
   2203e:	b144      	cbz	r4, 22052 <ip_interface_getaddrinfo+0x82>
   22040:	69e2      	ldr	r2, [r4, #28]
   22042:	b132      	cbz	r2, 22052 <ip_interface_getaddrinfo+0x82>
   22044:	6851      	ldr	r1, [r2, #4]
   22046:	2966      	cmp	r1, #102	; 0x66
   22048:	d103      	bne.n	22052 <ip_interface_getaddrinfo+0x82>
   2204a:	6891      	ldr	r1, [r2, #8]
   2204c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22050:	d07e      	beq.n	22150 <ip_interface_getaddrinfo+0x180>
   22052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22056:	2100      	movs	r1, #0
   22058:	f10d 0910 	add.w	r9, sp, #16
   2205c:	f849 1d04 	str.w	r1, [r9, #-4]!
   22060:	4648      	mov	r0, r9
   22062:	4659      	mov	r1, fp
   22064:	9200      	str	r2, [sp, #0]
   22066:	f7fe fcab 	bl	209c0 <rpc_ip_client_request_alloc>
   2206a:	9a00      	ldr	r2, [sp, #0]
   2206c:	2800      	cmp	r0, #0
   2206e:	d15f      	bne.n	22130 <ip_interface_getaddrinfo+0x160>
   22070:	f247 010d 	movw	r1, #28685	; 0x700d
   22074:	f04f 0c08 	mov.w	ip, #8
   22078:	9d03      	ldr	r5, [sp, #12]
   2207a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2207e:	60e9      	str	r1, [r5, #12]
   22080:	612a      	str	r2, [r5, #16]
   22082:	7268      	strb	r0, [r5, #9]
   22084:	72a8      	strb	r0, [r5, #10]
   22086:	72e8      	strb	r0, [r5, #11]
   22088:	f885 c008 	strb.w	ip, [r5, #8]
   2208c:	2c00      	cmp	r4, #0
   2208e:	d076      	beq.n	2217e <ip_interface_getaddrinfo+0x1ae>
   22090:	6862      	ldr	r2, [r4, #4]
   22092:	f022 0108 	bic.w	r1, r2, #8
   22096:	2902      	cmp	r1, #2
   22098:	d011      	beq.n	220be <ip_interface_getaddrinfo+0xee>
   2209a:	2a05      	cmp	r2, #5
   2209c:	d176      	bne.n	2218c <ip_interface_getaddrinfo+0x1bc>
   2209e:	68a1      	ldr	r1, [r4, #8]
   220a0:	2902      	cmp	r1, #2
   220a2:	6039      	str	r1, [r7, #0]
   220a4:	d115      	bne.n	220d2 <ip_interface_getaddrinfo+0x102>
   220a6:	2102      	movs	r1, #2
   220a8:	f8c8 1000 	str.w	r1, [r8]
   220ac:	e00b      	b.n	220c6 <ip_interface_getaddrinfo+0xf6>
   220ae:	2070      	movs	r0, #112	; 0x70
   220b0:	b005      	add	sp, #20
   220b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220b6:	2073      	movs	r0, #115	; 0x73
   220b8:	b005      	add	sp, #20
   220ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220be:	68a1      	ldr	r1, [r4, #8]
   220c0:	2902      	cmp	r1, #2
   220c2:	6039      	str	r1, [r7, #0]
   220c4:	d0ef      	beq.n	220a6 <ip_interface_getaddrinfo+0xd6>
   220c6:	2a05      	cmp	r2, #5
   220c8:	d003      	beq.n	220d2 <ip_interface_getaddrinfo+0x102>
   220ca:	2a0a      	cmp	r2, #10
   220cc:	bf14      	ite	ne
   220ce:	2201      	movne	r2, #1
   220d0:	2202      	moveq	r2, #2
   220d2:	61aa      	str	r2, [r5, #24]
   220d4:	68e2      	ldr	r2, [r4, #12]
   220d6:	622a      	str	r2, [r5, #32]
   220d8:	68a2      	ldr	r2, [r4, #8]
   220da:	61ea      	str	r2, [r5, #28]
   220dc:	6822      	ldr	r2, [r4, #0]
   220de:	616a      	str	r2, [r5, #20]
   220e0:	68aa      	ldr	r2, [r5, #8]
   220e2:	3210      	adds	r2, #16
   220e4:	60aa      	str	r2, [r5, #8]
   220e6:	b12e      	cbz	r6, 220f4 <ip_interface_getaddrinfo+0x124>
   220e8:	6828      	ldr	r0, [r5, #0]
   220ea:	b118      	cbz	r0, 220f4 <ip_interface_getaddrinfo+0x124>
   220ec:	465a      	mov	r2, fp
   220ee:	4631      	mov	r1, r6
   220f0:	f011 fb66 	bl	337c0 <memcpy>
   220f4:	2301      	movs	r3, #1
   220f6:	f247 010d 	movw	r1, #28685	; 0x700d
   220fa:	4628      	mov	r0, r5
   220fc:	f8ca 3000 	str.w	r3, [sl]
   22100:	f7fe fc72 	bl	209e8 <rpc_ip_client_request_send>
   22104:	bb10      	cbnz	r0, 2214c <ip_interface_getaddrinfo+0x17c>
   22106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2210a:	9303      	str	r3, [sp, #12]
   2210c:	4649      	mov	r1, r9
   2210e:	4628      	mov	r0, r5
   22110:	f7fa fe38 	bl	1cd84 <bsd_os_timedwait>
   22114:	f8da 3000 	ldr.w	r3, [sl]
   22118:	2b01      	cmp	r3, #1
   2211a:	d0f7      	beq.n	2210c <ip_interface_getaddrinfo+0x13c>
   2211c:	4b28      	ldr	r3, [pc, #160]	; (221c0 <ip_interface_getaddrinfo+0x1f0>)
   2211e:	6818      	ldr	r0, [r3, #0]
   22120:	bb40      	cbnz	r0, 22174 <ip_interface_getaddrinfo+0x1a4>
   22122:	4b26      	ldr	r3, [pc, #152]	; (221bc <ip_interface_getaddrinfo+0x1ec>)
   22124:	9a01      	ldr	r2, [sp, #4]
   22126:	681b      	ldr	r3, [r3, #0]
   22128:	6013      	str	r3, [r2, #0]
   2212a:	e7c1      	b.n	220b0 <ip_interface_getaddrinfo+0xe0>
   2212c:	46b3      	mov	fp, r6
   2212e:	e786      	b.n	2203e <ip_interface_getaddrinfo+0x6e>
   22130:	9d03      	ldr	r5, [sp, #12]
   22132:	2d00      	cmp	r5, #0
   22134:	d1aa      	bne.n	2208c <ip_interface_getaddrinfo+0xbc>
   22136:	200c      	movs	r0, #12
   22138:	2300      	movs	r3, #0
   2213a:	f8ca 3000 	str.w	r3, [sl]
   2213e:	b005      	add	sp, #20
   22140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22144:	2016      	movs	r0, #22
   22146:	b005      	add	sp, #20
   22148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2214c:	2023      	movs	r0, #35	; 0x23
   2214e:	e7f3      	b.n	22138 <ip_interface_getaddrinfo+0x168>
   22150:	f240 2002 	movw	r0, #514	; 0x202
   22154:	68d1      	ldr	r1, [r2, #12]
   22156:	4281      	cmp	r1, r0
   22158:	f47f af7b 	bne.w	22052 <ip_interface_getaddrinfo+0x82>
   2215c:	6991      	ldr	r1, [r2, #24]
   2215e:	2900      	cmp	r1, #0
   22160:	f43f af77 	beq.w	22052 <ip_interface_getaddrinfo+0x82>
   22164:	6860      	ldr	r0, [r4, #4]
   22166:	f002 fac3 	bl	246f0 <pdn_interface_pdn_id_get>
   2216a:	1c43      	adds	r3, r0, #1
   2216c:	f43f af71 	beq.w	22052 <ip_interface_getaddrinfo+0x82>
   22170:	4602      	mov	r2, r0
   22172:	e770      	b.n	22056 <ip_interface_getaddrinfo+0x86>
   22174:	4b12      	ldr	r3, [pc, #72]	; (221c0 <ip_interface_getaddrinfo+0x1f0>)
   22176:	6818      	ldr	r0, [r3, #0]
   22178:	2800      	cmp	r0, #0
   2217a:	d099      	beq.n	220b0 <ip_interface_getaddrinfo+0xe0>
   2217c:	e7dc      	b.n	22138 <ip_interface_getaddrinfo+0x168>
   2217e:	4621      	mov	r1, r4
   22180:	2210      	movs	r2, #16
   22182:	f105 0014 	add.w	r0, r5, #20
   22186:	f011 fb55 	bl	33834 <memset>
   2218a:	e7a9      	b.n	220e0 <ip_interface_getaddrinfo+0x110>
   2218c:	202f      	movs	r0, #47	; 0x2f
   2218e:	f7fa fea3 	bl	1ced8 <bsd_os_errno_set>
   22192:	68aa      	ldr	r2, [r5, #8]
   22194:	3210      	adds	r2, #16
   22196:	60aa      	str	r2, [r5, #8]
   22198:	b916      	cbnz	r6, 221a0 <ip_interface_getaddrinfo+0x1d0>
   2219a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2219e:	e7cb      	b.n	22138 <ip_interface_getaddrinfo+0x168>
   221a0:	6828      	ldr	r0, [r5, #0]
   221a2:	2800      	cmp	r0, #0
   221a4:	d0f9      	beq.n	2219a <ip_interface_getaddrinfo+0x1ca>
   221a6:	465a      	mov	r2, fp
   221a8:	4631      	mov	r1, r6
   221aa:	f011 fb09 	bl	337c0 <memcpy>
   221ae:	e7f4      	b.n	2219a <ip_interface_getaddrinfo+0x1ca>
   221b0:	20028e87 	.word	0x20028e87
   221b4:	20027460 	.word	0x20027460
   221b8:	2002256c 	.word	0x2002256c
   221bc:	20022578 	.word	0x20022578
   221c0:	20022570 	.word	0x20022570
   221c4:	20022568 	.word	0x20022568
   221c8:	20022574 	.word	0x20022574

000221cc <ip_interface_freeaddrinfo>:
   221cc:	b538      	push	{r3, r4, r5, lr}
   221ce:	4d0b      	ldr	r5, [pc, #44]	; (221fc <ip_interface_freeaddrinfo+0x30>)
   221d0:	682b      	ldr	r3, [r5, #0]
   221d2:	2b02      	cmp	r3, #2
   221d4:	d000      	beq.n	221d8 <ip_interface_freeaddrinfo+0xc>
   221d6:	bd38      	pop	{r3, r4, r5, pc}
   221d8:	b150      	cbz	r0, 221f0 <ip_interface_freeaddrinfo+0x24>
   221da:	4604      	mov	r4, r0
   221dc:	6940      	ldr	r0, [r0, #20]
   221de:	f004 f8c5 	bl	2636c <nrf_free>
   221e2:	69a0      	ldr	r0, [r4, #24]
   221e4:	b108      	cbz	r0, 221ea <ip_interface_freeaddrinfo+0x1e>
   221e6:	f004 f8c1 	bl	2636c <nrf_free>
   221ea:	4620      	mov	r0, r4
   221ec:	f004 f8be 	bl	2636c <nrf_free>
   221f0:	2300      	movs	r3, #0
   221f2:	4a03      	ldr	r2, [pc, #12]	; (22200 <ip_interface_freeaddrinfo+0x34>)
   221f4:	602b      	str	r3, [r5, #0]
   221f6:	6013      	str	r3, [r2, #0]
   221f8:	bd38      	pop	{r3, r4, r5, pc}
   221fa:	bf00      	nop
   221fc:	20022574 	.word	0x20022574
   22200:	20022570 	.word	0x20022570

00022204 <rpc_ip_event_handler>:
   22204:	f248 030d 	movw	r3, #32781	; 0x800d
   22208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2220c:	4299      	cmp	r1, r3
   2220e:	b089      	sub	sp, #36	; 0x24
   22210:	4604      	mov	r4, r0
   22212:	d05c      	beq.n	222ce <rpc_ip_event_handler+0xca>
   22214:	f248 030f 	movw	r3, #32783	; 0x800f
   22218:	4299      	cmp	r1, r3
   2221a:	460d      	mov	r5, r1
   2221c:	d045      	beq.n	222aa <rpc_ip_event_handler+0xa6>
   2221e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   22222:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   22226:	68c0      	ldr	r0, [r0, #12]
   22228:	d075      	beq.n	22316 <rpc_ip_event_handler+0x112>
   2222a:	0c06      	lsrs	r6, r0, #16
   2222c:	4630      	mov	r0, r6
   2222e:	f004 fceb 	bl	26c08 <interface_socket_from_handle_get>
   22232:	4607      	mov	r7, r0
   22234:	2800      	cmp	r0, #0
   22236:	d059      	beq.n	222ec <rpc_ip_event_handler+0xe8>
   22238:	4601      	mov	r1, r0
   2223a:	462b      	mov	r3, r5
   2223c:	4622      	mov	r2, r4
   2223e:	4630      	mov	r0, r6
   22240:	f7fe fb2c 	bl	2089c <tls_rpc_ip_event_handler>
   22244:	2800      	cmp	r0, #0
   22246:	d04d      	beq.n	222e4 <rpc_ip_event_handler+0xe0>
   22248:	f248 0307 	movw	r3, #32775	; 0x8007
   2224c:	429d      	cmp	r5, r3
   2224e:	d866      	bhi.n	2231e <rpc_ip_event_handler+0x11a>
   22250:	f248 0306 	movw	r3, #32774	; 0x8006
   22254:	429d      	cmp	r5, r3
   22256:	f080 81e7 	bcs.w	22628 <rpc_ip_event_handler+0x424>
   2225a:	f248 0303 	movw	r3, #32771	; 0x8003
   2225e:	429d      	cmp	r5, r3
   22260:	f000 81c5 	beq.w	225ee <rpc_ip_event_handler+0x3ea>
   22264:	f200 811b 	bhi.w	2249e <rpc_ip_event_handler+0x29a>
   22268:	f248 0301 	movw	r3, #32769	; 0x8001
   2226c:	429d      	cmp	r5, r3
   2226e:	f000 8154 	beq.w	2251a <rpc_ip_event_handler+0x316>
   22272:	f248 0302 	movw	r3, #32770	; 0x8002
   22276:	429d      	cmp	r5, r3
   22278:	d138      	bne.n	222ec <rpc_ip_event_handler+0xe8>
   2227a:	683b      	ldr	r3, [r7, #0]
   2227c:	0098      	lsls	r0, r3, #2
   2227e:	d531      	bpl.n	222e4 <rpc_ip_event_handler+0xe0>
   22280:	683b      	ldr	r3, [r7, #0]
   22282:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   22286:	603b      	str	r3, [r7, #0]
   22288:	6963      	ldr	r3, [r4, #20]
   2228a:	2b00      	cmp	r3, #0
   2228c:	f000 81ea 	beq.w	22664 <rpc_ip_event_handler+0x460>
   22290:	2b10      	cmp	r3, #16
   22292:	bf8e      	itee	hi
   22294:	232d      	movhi	r3, #45	; 0x2d
   22296:	4ab9      	ldrls	r2, [pc, #740]	; (2257c <rpc_ip_event_handler+0x378>)
   22298:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2229c:	607b      	str	r3, [r7, #4]
   2229e:	683b      	ldr	r3, [r7, #0]
   222a0:	2000      	movs	r0, #0
   222a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   222a6:	603b      	str	r3, [r7, #0]
   222a8:	e00e      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   222aa:	6943      	ldr	r3, [r0, #20]
   222ac:	2001      	movs	r0, #1
   222ae:	2b10      	cmp	r3, #16
   222b0:	49b3      	ldr	r1, [pc, #716]	; (22580 <rpc_ip_event_handler+0x37c>)
   222b2:	bf88      	it	hi
   222b4:	222d      	movhi	r2, #45	; 0x2d
   222b6:	7008      	strb	r0, [r1, #0]
   222b8:	f04f 0000 	mov.w	r0, #0
   222bc:	bf9c      	itt	ls
   222be:	4aaf      	ldrls	r2, [pc, #700]	; (2257c <rpc_ip_event_handler+0x378>)
   222c0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   222c4:	4baf      	ldr	r3, [pc, #700]	; (22584 <rpc_ip_event_handler+0x380>)
   222c6:	601a      	str	r2, [r3, #0]
   222c8:	b009      	add	sp, #36	; 0x24
   222ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222ce:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 22598 <rpc_ip_event_handler+0x394>
   222d2:	6807      	ldr	r7, [r0, #0]
   222d4:	f8da 2000 	ldr.w	r2, [sl]
   222d8:	2a01      	cmp	r2, #1
   222da:	d00b      	beq.n	222f4 <rpc_ip_event_handler+0xf0>
   222dc:	b117      	cbz	r7, 222e4 <rpc_ip_event_handler+0xe0>
   222de:	4638      	mov	r0, r7
   222e0:	f7fe fba0 	bl	20a24 <rpc_ip_client_data_free>
   222e4:	2000      	movs	r0, #0
   222e6:	b009      	add	sp, #36	; 0x24
   222e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222ec:	6820      	ldr	r0, [r4, #0]
   222ee:	2800      	cmp	r0, #0
   222f0:	d1f6      	bne.n	222e0 <rpc_ip_event_handler+0xdc>
   222f2:	e7f7      	b.n	222e4 <rpc_ip_event_handler+0xe0>
   222f4:	6942      	ldr	r2, [r0, #20]
   222f6:	2a00      	cmp	r2, #0
   222f8:	d045      	beq.n	22386 <rpc_ip_event_handler+0x182>
   222fa:	2a10      	cmp	r2, #16
   222fc:	bf8e      	itee	hi
   222fe:	222d      	movhi	r2, #45	; 0x2d
   22300:	499e      	ldrls	r1, [pc, #632]	; (2257c <rpc_ip_event_handler+0x378>)
   22302:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   22306:	49a0      	ldr	r1, [pc, #640]	; (22588 <rpc_ip_event_handler+0x384>)
   22308:	600a      	str	r2, [r1, #0]
   2230a:	2202      	movs	r2, #2
   2230c:	f8ca 2000 	str.w	r2, [sl]
   22310:	2f00      	cmp	r7, #0
   22312:	d1e4      	bne.n	222de <rpc_ip_event_handler+0xda>
   22314:	e7e6      	b.n	222e4 <rpc_ip_event_handler+0xe0>
   22316:	f004 fc25 	bl	26b64 <interface_from_internal_id_search>
   2231a:	4606      	mov	r6, r0
   2231c:	e786      	b.n	2222c <rpc_ip_event_handler+0x28>
   2231e:	f248 030c 	movw	r3, #32780	; 0x800c
   22322:	429d      	cmp	r5, r3
   22324:	f000 813c 	beq.w	225a0 <rpc_ip_event_handler+0x39c>
   22328:	f240 80d5 	bls.w	224d6 <rpc_ip_event_handler+0x2d2>
   2232c:	f249 0302 	movw	r3, #36866	; 0x9002
   22330:	429d      	cmp	r5, r3
   22332:	f000 811d 	beq.w	22570 <rpc_ip_event_handler+0x36c>
   22336:	f249 0303 	movw	r3, #36867	; 0x9003
   2233a:	429d      	cmp	r5, r3
   2233c:	f000 80f9 	beq.w	22532 <rpc_ip_event_handler+0x32e>
   22340:	f249 0301 	movw	r3, #36865	; 0x9001
   22344:	429d      	cmp	r5, r3
   22346:	d1d1      	bne.n	222ec <rpc_ip_event_handler+0xe8>
   22348:	683d      	ldr	r5, [r7, #0]
   2234a:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   2234e:	f000 8184 	beq.w	2265a <rpc_ip_event_handler+0x456>
   22352:	68a3      	ldr	r3, [r4, #8]
   22354:	2b04      	cmp	r3, #4
   22356:	f200 81af 	bhi.w	226b8 <rpc_ip_event_handler+0x4b4>
   2235a:	2500      	movs	r5, #0
   2235c:	462e      	mov	r6, r5
   2235e:	6821      	ldr	r1, [r4, #0]
   22360:	6862      	ldr	r2, [r4, #4]
   22362:	e9cd 6506 	strd	r6, r5, [sp, #24]
   22366:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2236a:	69f8      	ldr	r0, [r7, #28]
   2236c:	a904      	add	r1, sp, #16
   2236e:	6803      	ldr	r3, [r0, #0]
   22370:	685b      	ldr	r3, [r3, #4]
   22372:	4798      	blx	r3
   22374:	3001      	adds	r0, #1
   22376:	f000 818e 	beq.w	22696 <rpc_ip_event_handler+0x492>
   2237a:	683b      	ldr	r3, [r7, #0]
   2237c:	2000      	movs	r0, #0
   2237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22382:	603b      	str	r3, [r7, #0]
   22384:	e7a0      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22386:	6985      	ldr	r5, [r0, #24]
   22388:	016b      	lsls	r3, r5, #5
   2238a:	4618      	mov	r0, r3
   2238c:	9303      	str	r3, [sp, #12]
   2238e:	f003 ffe3 	bl	26358 <nrf_malloc>
   22392:	9002      	str	r0, [sp, #8]
   22394:	2800      	cmp	r0, #0
   22396:	d078      	beq.n	2248a <rpc_ip_event_handler+0x286>
   22398:	00ee      	lsls	r6, r5, #3
   2239a:	1970      	adds	r0, r6, r5
   2239c:	0080      	lsls	r0, r0, #2
   2239e:	f003 ffdb 	bl	26358 <nrf_malloc>
   223a2:	2800      	cmp	r0, #0
   223a4:	d073      	beq.n	2248e <rpc_ip_event_handler+0x28a>
   223a6:	2d00      	cmp	r5, #0
   223a8:	d074      	beq.n	22494 <rpc_ip_event_handler+0x290>
   223aa:	3610      	adds	r6, #16
   223ac:	1983      	adds	r3, r0, r6
   223ae:	9301      	str	r3, [sp, #4]
   223b0:	9b02      	ldr	r3, [sp, #8]
   223b2:	2204      	movs	r2, #4
   223b4:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2259c <rpc_ip_event_handler+0x398>
   223b8:	f100 0810 	add.w	r8, r0, #16
   223bc:	f103 0520 	add.w	r5, r3, #32
   223c0:	e013      	b.n	223ea <rpc_ip_event_handler+0x1e6>
   223c2:	464a      	mov	r2, r9
   223c4:	f011 f9fc 	bl	337c0 <memcpy>
   223c8:	2100      	movs	r1, #0
   223ca:	f855 3c08 	ldr.w	r3, [r5, #-8]
   223ce:	f108 0808 	add.w	r8, r8, #8
   223d2:	eb09 0206 	add.w	r2, r9, r6
   223d6:	f803 1009 	strb.w	r1, [r3, r9]
   223da:	9b01      	ldr	r3, [sp, #4]
   223dc:	f845 5c04 	str.w	r5, [r5, #-4]
   223e0:	4598      	cmp	r8, r3
   223e2:	f105 0520 	add.w	r5, r5, #32
   223e6:	f000 8090 	beq.w	2250a <rpc_ip_event_handler+0x306>
   223ea:	58bb      	ldr	r3, [r7, r2]
   223ec:	18b9      	adds	r1, r7, r2
   223ee:	f845 3c20 	str.w	r3, [r5, #-32]
   223f2:	684b      	ldr	r3, [r1, #4]
   223f4:	f8db 0000 	ldr.w	r0, [fp]
   223f8:	2b02      	cmp	r3, #2
   223fa:	bf14      	ite	ne
   223fc:	2602      	movne	r6, #2
   223fe:	260a      	moveq	r6, #10
   22400:	4b62      	ldr	r3, [pc, #392]	; (2258c <rpc_ip_event_handler+0x388>)
   22402:	e945 6007 	strd	r6, r0, [r5, #-28]
   22406:	681b      	ldr	r3, [r3, #0]
   22408:	f102 0614 	add.w	r6, r2, #20
   2240c:	f845 3c14 	str.w	r3, [r5, #-20]
   22410:	8a08      	ldrh	r0, [r1, #16]
   22412:	f1a8 0310 	sub.w	r3, r8, #16
   22416:	f845 0c10 	str.w	r0, [r5, #-16]
   2241a:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   2241e:	f845 3c0c 	str.w	r3, [r5, #-12]
   22422:	4b5b      	ldr	r3, [pc, #364]	; (22590 <rpc_ip_event_handler+0x38c>)
   22424:	2804      	cmp	r0, #4
   22426:	eb07 0106 	add.w	r1, r7, r6
   2242a:	881b      	ldrh	r3, [r3, #0]
   2242c:	d01e      	beq.n	2246c <rpc_ip_event_handler+0x268>
   2242e:	220a      	movs	r2, #10
   22430:	f848 2c0c 	str.w	r2, [r8, #-12]
   22434:	f04f 0224 	mov.w	r2, #36	; 0x24
   22438:	f828 3c08 	strh.w	r3, [r8, #-8]
   2243c:	f808 2c10 	strb.w	r2, [r8, #-16]
   22440:	f855 2c10 	ldr.w	r2, [r5, #-16]
   22444:	4640      	mov	r0, r8
   22446:	f011 f9bb 	bl	337c0 <memcpy>
   2244a:	f855 3c10 	ldr.w	r3, [r5, #-16]
   2244e:	f109 0001 	add.w	r0, r9, #1
   22452:	441e      	add	r6, r3
   22454:	f003 ff80 	bl	26358 <nrf_malloc>
   22458:	19b9      	adds	r1, r7, r6
   2245a:	eb09 0206 	add.w	r2, r9, r6
   2245e:	f845 0c08 	str.w	r0, [r5, #-8]
   22462:	2800      	cmp	r0, #0
   22464:	d1ad      	bne.n	223c2 <rpc_ip_event_handler+0x1be>
   22466:	f108 0808 	add.w	r8, r8, #8
   2246a:	e7b6      	b.n	223da <rpc_ip_event_handler+0x1d6>
   2246c:	2210      	movs	r2, #16
   2246e:	2002      	movs	r0, #2
   22470:	f828 3c08 	strh.w	r3, [r8, #-8]
   22474:	f848 0c0c 	str.w	r0, [r8, #-12]
   22478:	f808 2c10 	strb.w	r2, [r8, #-16]
   2247c:	f855 2c10 	ldr.w	r2, [r5, #-16]
   22480:	f1a8 0004 	sub.w	r0, r8, #4
   22484:	f011 f99c 	bl	337c0 <memcpy>
   22488:	e7df      	b.n	2244a <rpc_ip_event_handler+0x246>
   2248a:	f003 ff6f 	bl	2636c <nrf_free>
   2248e:	210c      	movs	r1, #12
   22490:	4a3d      	ldr	r2, [pc, #244]	; (22588 <rpc_ip_event_handler+0x384>)
   22492:	6011      	str	r1, [r2, #0]
   22494:	9b02      	ldr	r3, [sp, #8]
   22496:	4a3f      	ldr	r2, [pc, #252]	; (22594 <rpc_ip_event_handler+0x390>)
   22498:	6827      	ldr	r7, [r4, #0]
   2249a:	6013      	str	r3, [r2, #0]
   2249c:	e735      	b.n	2230a <rpc_ip_event_handler+0x106>
   2249e:	f248 0304 	movw	r3, #32772	; 0x8004
   224a2:	429d      	cmp	r5, r3
   224a4:	f000 808f 	beq.w	225c6 <rpc_ip_event_handler+0x3c2>
   224a8:	f248 0305 	movw	r3, #32773	; 0x8005
   224ac:	429d      	cmp	r5, r3
   224ae:	f47f af1d 	bne.w	222ec <rpc_ip_event_handler+0xe8>
   224b2:	683b      	ldr	r3, [r7, #0]
   224b4:	b29b      	uxth	r3, r3
   224b6:	2b03      	cmp	r3, #3
   224b8:	f47f af14 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   224bc:	6963      	ldr	r3, [r4, #20]
   224be:	2b00      	cmp	r3, #0
   224c0:	f000 80eb 	beq.w	2269a <rpc_ip_event_handler+0x496>
   224c4:	2b10      	cmp	r3, #16
   224c6:	f200 80bd 	bhi.w	22644 <rpc_ip_event_handler+0x440>
   224ca:	4a2c      	ldr	r2, [pc, #176]	; (2257c <rpc_ip_event_handler+0x378>)
   224cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   224d0:	607b      	str	r3, [r7, #4]
   224d2:	2000      	movs	r0, #0
   224d4:	e6f8      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   224d6:	f248 0308 	movw	r3, #32776	; 0x8008
   224da:	429d      	cmp	r5, r3
   224dc:	f000 8094 	beq.w	22608 <rpc_ip_event_handler+0x404>
   224e0:	f248 0309 	movw	r3, #32777	; 0x8009
   224e4:	429d      	cmp	r5, r3
   224e6:	f47f af01 	bne.w	222ec <rpc_ip_event_handler+0xe8>
   224ea:	683b      	ldr	r3, [r7, #0]
   224ec:	b29b      	uxth	r3, r3
   224ee:	2b0d      	cmp	r3, #13
   224f0:	f47f aef8 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   224f4:	6960      	ldr	r0, [r4, #20]
   224f6:	2800      	cmp	r0, #0
   224f8:	f000 80d7 	beq.w	226aa <rpc_ip_event_handler+0x4a6>
   224fc:	2810      	cmp	r0, #16
   224fe:	f200 80a1 	bhi.w	22644 <rpc_ip_event_handler+0x440>
   22502:	4b1e      	ldr	r3, [pc, #120]	; (2257c <rpc_ip_event_handler+0x378>)
   22504:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   22508:	e7e2      	b.n	224d0 <rpc_ip_event_handler+0x2cc>
   2250a:	2100      	movs	r1, #0
   2250c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   22510:	4403      	add	r3, r0
   22512:	f843 1c04 	str.w	r1, [r3, #-4]
   22516:	4603      	mov	r3, r0
   22518:	e7bd      	b.n	22496 <rpc_ip_event_handler+0x292>
   2251a:	683b      	ldr	r3, [r7, #0]
   2251c:	2b01      	cmp	r3, #1
   2251e:	f47f aee1 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   22522:	6960      	ldr	r0, [r4, #20]
   22524:	2800      	cmp	r0, #0
   22526:	d1e9      	bne.n	224fc <rpc_ip_event_handler+0x2f8>
   22528:	2302      	movs	r3, #2
   2252a:	603b      	str	r3, [r7, #0]
   2252c:	69a3      	ldr	r3, [r4, #24]
   2252e:	61bb      	str	r3, [r7, #24]
   22530:	e6ca      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22532:	683b      	ldr	r3, [r7, #0]
   22534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   22538:	603b      	str	r3, [r7, #0]
   2253a:	683b      	ldr	r3, [r7, #0]
   2253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22540:	603b      	str	r3, [r7, #0]
   22542:	683b      	ldr	r3, [r7, #0]
   22544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22548:	603b      	str	r3, [r7, #0]
   2254a:	683b      	ldr	r3, [r7, #0]
   2254c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   22550:	603b      	str	r3, [r7, #0]
   22552:	6923      	ldr	r3, [r4, #16]
   22554:	2b6c      	cmp	r3, #108	; 0x6c
   22556:	d077      	beq.n	22648 <rpc_ip_event_handler+0x444>
   22558:	2b10      	cmp	r3, #16
   2255a:	bf8c      	ite	hi
   2255c:	232d      	movhi	r3, #45	; 0x2d
   2255e:	4a07      	ldrls	r2, [pc, #28]	; (2257c <rpc_ip_event_handler+0x378>)
   22560:	f04f 0000 	mov.w	r0, #0
   22564:	bf98      	it	ls
   22566:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2256a:	607b      	str	r3, [r7, #4]
   2256c:	60bb      	str	r3, [r7, #8]
   2256e:	e6ab      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22570:	683b      	ldr	r3, [r7, #0]
   22572:	b29b      	uxth	r3, r3
   22574:	2b07      	cmp	r3, #7
   22576:	f47f aeb5 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   2257a:	e6fe      	b.n	2237a <rpc_ip_event_handler+0x176>
   2257c:	00034d6c 	.word	0x00034d6c
   22580:	20028e88 	.word	0x20028e88
   22584:	200225a0 	.word	0x200225a0
   22588:	20022570 	.word	0x20022570
   2258c:	20022568 	.word	0x20022568
   22590:	20027460 	.word	0x20027460
   22594:	20022578 	.word	0x20022578
   22598:	20022574 	.word	0x20022574
   2259c:	2002256c 	.word	0x2002256c
   225a0:	683b      	ldr	r3, [r7, #0]
   225a2:	b29b      	uxth	r3, r3
   225a4:	2b08      	cmp	r3, #8
   225a6:	f47f ae9d 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   225aa:	6963      	ldr	r3, [r4, #20]
   225ac:	2b00      	cmp	r3, #0
   225ae:	d189      	bne.n	224c4 <rpc_ip_event_handler+0x2c0>
   225b0:	4b5e      	ldr	r3, [pc, #376]	; (2272c <rpc_ip_event_handler+0x528>)
   225b2:	2001      	movs	r0, #1
   225b4:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   225b8:	683b      	ldr	r3, [r7, #0]
   225ba:	0c1b      	lsrs	r3, r3, #16
   225bc:	041b      	lsls	r3, r3, #16
   225be:	f043 0309 	orr.w	r3, r3, #9
   225c2:	603b      	str	r3, [r7, #0]
   225c4:	e680      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   225c6:	683b      	ldr	r3, [r7, #0]
   225c8:	01db      	lsls	r3, r3, #7
   225ca:	f57f ae8b 	bpl.w	222e4 <rpc_ip_event_handler+0xe0>
   225ce:	6963      	ldr	r3, [r4, #20]
   225d0:	2b00      	cmp	r3, #0
   225d2:	f47f af77 	bne.w	224c4 <rpc_ip_event_handler+0x2c0>
   225d6:	6823      	ldr	r3, [r4, #0]
   225d8:	2b00      	cmp	r3, #0
   225da:	d071      	beq.n	226c0 <rpc_ip_event_handler+0x4bc>
   225dc:	2001      	movs	r0, #1
   225de:	4b53      	ldr	r3, [pc, #332]	; (2272c <rpc_ip_event_handler+0x528>)
   225e0:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   225e4:	683b      	ldr	r3, [r7, #0]
   225e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   225ea:	603b      	str	r3, [r7, #0]
   225ec:	e66c      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   225ee:	683b      	ldr	r3, [r7, #0]
   225f0:	025a      	lsls	r2, r3, #9
   225f2:	f57f ae77 	bpl.w	222e4 <rpc_ip_event_handler+0xe0>
   225f6:	6960      	ldr	r0, [r4, #20]
   225f8:	2800      	cmp	r0, #0
   225fa:	f47f af7f 	bne.w	224fc <rpc_ip_event_handler+0x2f8>
   225fe:	683b      	ldr	r3, [r7, #0]
   22600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22604:	603b      	str	r3, [r7, #0]
   22606:	e65f      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22608:	683b      	ldr	r3, [r7, #0]
   2260a:	b29b      	uxth	r3, r3
   2260c:	2b06      	cmp	r3, #6
   2260e:	f47f ae69 	bne.w	222e4 <rpc_ip_event_handler+0xe0>
   22612:	6960      	ldr	r0, [r4, #20]
   22614:	2800      	cmp	r0, #0
   22616:	f47f af71 	bne.w	224fc <rpc_ip_event_handler+0x2f8>
   2261a:	683b      	ldr	r3, [r7, #0]
   2261c:	0c1b      	lsrs	r3, r3, #16
   2261e:	041b      	lsls	r3, r3, #16
   22620:	f043 0307 	orr.w	r3, r3, #7
   22624:	603b      	str	r3, [r7, #0]
   22626:	e64f      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22628:	683b      	ldr	r3, [r7, #0]
   2262a:	0299      	lsls	r1, r3, #10
   2262c:	f57f ae5a 	bpl.w	222e4 <rpc_ip_event_handler+0xe0>
   22630:	6963      	ldr	r3, [r4, #20]
   22632:	b33b      	cbz	r3, 22684 <rpc_ip_event_handler+0x480>
   22634:	2b6b      	cmp	r3, #107	; 0x6b
   22636:	f47f ae2b 	bne.w	22290 <rpc_ip_event_handler+0x8c>
   2263a:	693b      	ldr	r3, [r7, #16]
   2263c:	2b01      	cmp	r3, #1
   2263e:	d041      	beq.n	226c4 <rpc_ip_event_handler+0x4c0>
   22640:	230c      	movs	r3, #12
   22642:	e62b      	b.n	2229c <rpc_ip_event_handler+0x98>
   22644:	232d      	movs	r3, #45	; 0x2d
   22646:	e743      	b.n	224d0 <rpc_ip_event_handler+0x2cc>
   22648:	2239      	movs	r2, #57	; 0x39
   2264a:	683b      	ldr	r3, [r7, #0]
   2264c:	2000      	movs	r0, #0
   2264e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   22652:	603b      	str	r3, [r7, #0]
   22654:	607a      	str	r2, [r7, #4]
   22656:	60ba      	str	r2, [r7, #8]
   22658:	e636      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   2265a:	6820      	ldr	r0, [r4, #0]
   2265c:	f7fe f9e2 	bl	20a24 <rpc_ip_client_data_free>
   22660:	4628      	mov	r0, r5
   22662:	e631      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22664:	683b      	ldr	r3, [r7, #0]
   22666:	2000      	movs	r0, #0
   22668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2266c:	603b      	str	r3, [r7, #0]
   2266e:	683b      	ldr	r3, [r7, #0]
   22670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22674:	603b      	str	r3, [r7, #0]
   22676:	683b      	ldr	r3, [r7, #0]
   22678:	0c1b      	lsrs	r3, r3, #16
   2267a:	041b      	lsls	r3, r3, #16
   2267c:	f043 0305 	orr.w	r3, r3, #5
   22680:	603b      	str	r3, [r7, #0]
   22682:	e621      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22684:	683b      	ldr	r3, [r7, #0]
   22686:	4a29      	ldr	r2, [pc, #164]	; (2272c <rpc_ip_event_handler+0x528>)
   22688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2268c:	603b      	str	r3, [r7, #0]
   2268e:	2001      	movs	r0, #1
   22690:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   22694:	e618      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   22696:	2002      	movs	r0, #2
   22698:	e616      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   2269a:	683b      	ldr	r3, [r7, #0]
   2269c:	2000      	movs	r0, #0
   2269e:	0c1b      	lsrs	r3, r3, #16
   226a0:	041b      	lsls	r3, r3, #16
   226a2:	f043 0304 	orr.w	r3, r3, #4
   226a6:	603b      	str	r3, [r7, #0]
   226a8:	e60e      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   226aa:	683b      	ldr	r3, [r7, #0]
   226ac:	0c1b      	lsrs	r3, r3, #16
   226ae:	041b      	lsls	r3, r3, #16
   226b0:	f043 030e 	orr.w	r3, r3, #14
   226b4:	603b      	str	r3, [r7, #0]
   226b6:	e607      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   226b8:	8a65      	ldrh	r5, [r4, #18]
   226ba:	b95d      	cbnz	r5, 226d4 <rpc_ip_event_handler+0x4d0>
   226bc:	462e      	mov	r6, r5
   226be:	e64e      	b.n	2235e <rpc_ip_event_handler+0x15a>
   226c0:	2000      	movs	r0, #0
   226c2:	e78f      	b.n	225e4 <rpc_ip_event_handler+0x3e0>
   226c4:	220c      	movs	r2, #12
   226c6:	683b      	ldr	r3, [r7, #0]
   226c8:	2000      	movs	r0, #0
   226ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   226ce:	603b      	str	r3, [r7, #0]
   226d0:	607a      	str	r2, [r7, #4]
   226d2:	e5f9      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   226d4:	2024      	movs	r0, #36	; 0x24
   226d6:	f003 fe3f 	bl	26358 <nrf_malloc>
   226da:	4606      	mov	r6, r0
   226dc:	2800      	cmp	r0, #0
   226de:	d0da      	beq.n	22696 <rpc_ip_event_handler+0x492>
   226e0:	8a62      	ldrh	r2, [r4, #18]
   226e2:	2a10      	cmp	r2, #16
   226e4:	d009      	beq.n	226fa <rpc_ip_event_handler+0x4f6>
   226e6:	2a04      	cmp	r2, #4
   226e8:	d013      	beq.n	22712 <rpc_ip_event_handler+0x50e>
   226ea:	6820      	ldr	r0, [r4, #0]
   226ec:	f7fe f99a 	bl	20a24 <rpc_ip_client_data_free>
   226f0:	4630      	mov	r0, r6
   226f2:	f003 fe3b 	bl	2636c <nrf_free>
   226f6:	2000      	movs	r0, #0
   226f8:	e5e6      	b.n	222c8 <rpc_ip_event_handler+0xc4>
   226fa:	230a      	movs	r3, #10
   226fc:	2524      	movs	r5, #36	; 0x24
   226fe:	6043      	str	r3, [r0, #4]
   22700:	7005      	strb	r5, [r0, #0]
   22702:	8a23      	ldrh	r3, [r4, #16]
   22704:	f104 0114 	add.w	r1, r4, #20
   22708:	8103      	strh	r3, [r0, #8]
   2270a:	3010      	adds	r0, #16
   2270c:	f011 f858 	bl	337c0 <memcpy>
   22710:	e625      	b.n	2235e <rpc_ip_event_handler+0x15a>
   22712:	2302      	movs	r3, #2
   22714:	2510      	movs	r5, #16
   22716:	6043      	str	r3, [r0, #4]
   22718:	7005      	strb	r5, [r0, #0]
   2271a:	8a23      	ldrh	r3, [r4, #16]
   2271c:	f104 0114 	add.w	r1, r4, #20
   22720:	8103      	strh	r3, [r0, #8]
   22722:	300c      	adds	r0, #12
   22724:	f011 f84c 	bl	337c0 <memcpy>
   22728:	e619      	b.n	2235e <rpc_ip_event_handler+0x15a>
   2272a:	bf00      	nop
   2272c:	2002257c 	.word	0x2002257c

00022730 <rpc_handle_ctrl_message>:
   22730:	2902      	cmp	r1, #2
   22732:	b510      	push	{r4, lr}
   22734:	4604      	mov	r4, r0
   22736:	d00c      	beq.n	22752 <rpc_handle_ctrl_message+0x22>
   22738:	2904      	cmp	r1, #4
   2273a:	d008      	beq.n	2274e <rpc_handle_ctrl_message+0x1e>
   2273c:	2901      	cmp	r1, #1
   2273e:	d006      	beq.n	2274e <rpc_handle_ctrl_message+0x1e>
   22740:	6880      	ldr	r0, [r0, #8]
   22742:	b108      	cbz	r0, 22748 <rpc_handle_ctrl_message+0x18>
   22744:	f7fc fc9e 	bl	1f084 <rpc_transport_data_free>
   22748:	4620      	mov	r0, r4
   2274a:	f7fc fc99 	bl	1f080 <rpc_transport_rpc_free>
   2274e:	2000      	movs	r0, #0
   22750:	bd10      	pop	{r4, pc}
   22752:	6880      	ldr	r0, [r0, #8]
   22754:	2800      	cmp	r0, #0
   22756:	d0fa      	beq.n	2274e <rpc_handle_ctrl_message+0x1e>
   22758:	f7fc fc94 	bl	1f084 <rpc_transport_data_free>
   2275c:	2000      	movs	r0, #0
   2275e:	bd10      	pop	{r4, pc}

00022760 <rpc_handle_data_message>:
   22760:	4b23      	ldr	r3, [pc, #140]	; (227f0 <rpc_handle_data_message+0x90>)
   22762:	6802      	ldr	r2, [r0, #0]
   22764:	8819      	ldrh	r1, [r3, #0]
   22766:	b292      	uxth	r2, r2
   22768:	4291      	cmp	r1, r2
   2276a:	d027      	beq.n	227bc <rpc_handle_data_message+0x5c>
   2276c:	8a19      	ldrh	r1, [r3, #16]
   2276e:	4291      	cmp	r1, r2
   22770:	d02a      	beq.n	227c8 <rpc_handle_data_message+0x68>
   22772:	8c19      	ldrh	r1, [r3, #32]
   22774:	4291      	cmp	r1, r2
   22776:	d02b      	beq.n	227d0 <rpc_handle_data_message+0x70>
   22778:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   2277a:	4291      	cmp	r1, r2
   2277c:	d02a      	beq.n	227d4 <rpc_handle_data_message+0x74>
   2277e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   22782:	4291      	cmp	r1, r2
   22784:	d028      	beq.n	227d8 <rpc_handle_data_message+0x78>
   22786:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   2278a:	4291      	cmp	r1, r2
   2278c:	d026      	beq.n	227dc <rpc_handle_data_message+0x7c>
   2278e:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   22792:	4291      	cmp	r1, r2
   22794:	d026      	beq.n	227e4 <rpc_handle_data_message+0x84>
   22796:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   2279a:	4291      	cmp	r1, r2
   2279c:	d024      	beq.n	227e8 <rpc_handle_data_message+0x88>
   2279e:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   227a2:	4291      	cmp	r1, r2
   227a4:	d01c      	beq.n	227e0 <rpc_handle_data_message+0x80>
   227a6:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   227aa:	4291      	cmp	r1, r2
   227ac:	d01e      	beq.n	227ec <rpc_handle_data_message+0x8c>
   227ae:	6880      	ldr	r0, [r0, #8]
   227b0:	b160      	cbz	r0, 227cc <rpc_handle_data_message+0x6c>
   227b2:	b510      	push	{r4, lr}
   227b4:	f7fc fc66 	bl	1f084 <rpc_transport_data_free>
   227b8:	2000      	movs	r0, #0
   227ba:	bd10      	pop	{r4, pc}
   227bc:	2200      	movs	r2, #0
   227be:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   227c2:	685a      	ldr	r2, [r3, #4]
   227c4:	68d9      	ldr	r1, [r3, #12]
   227c6:	4710      	bx	r2
   227c8:	2201      	movs	r2, #1
   227ca:	e7f8      	b.n	227be <rpc_handle_data_message+0x5e>
   227cc:	2000      	movs	r0, #0
   227ce:	4770      	bx	lr
   227d0:	2202      	movs	r2, #2
   227d2:	e7f4      	b.n	227be <rpc_handle_data_message+0x5e>
   227d4:	2203      	movs	r2, #3
   227d6:	e7f2      	b.n	227be <rpc_handle_data_message+0x5e>
   227d8:	2204      	movs	r2, #4
   227da:	e7f0      	b.n	227be <rpc_handle_data_message+0x5e>
   227dc:	2205      	movs	r2, #5
   227de:	e7ee      	b.n	227be <rpc_handle_data_message+0x5e>
   227e0:	2208      	movs	r2, #8
   227e2:	e7ec      	b.n	227be <rpc_handle_data_message+0x5e>
   227e4:	2206      	movs	r2, #6
   227e6:	e7ea      	b.n	227be <rpc_handle_data_message+0x5e>
   227e8:	2207      	movs	r2, #7
   227ea:	e7e8      	b.n	227be <rpc_handle_data_message+0x5e>
   227ec:	2209      	movs	r2, #9
   227ee:	e7e6      	b.n	227be <rpc_handle_data_message+0x5e>
   227f0:	200225a4 	.word	0x200225a4

000227f4 <rpc_framework_init>:
   227f4:	b508      	push	{r3, lr}
   227f6:	22a0      	movs	r2, #160	; 0xa0
   227f8:	2100      	movs	r1, #0
   227fa:	4802      	ldr	r0, [pc, #8]	; (22804 <rpc_framework_init+0x10>)
   227fc:	f011 f81a 	bl	33834 <memset>
   22800:	2000      	movs	r0, #0
   22802:	bd08      	pop	{r3, pc}
   22804:	200225a4 	.word	0x200225a4

00022808 <rpc_client_register>:
   22808:	8803      	ldrh	r3, [r0, #0]
   2280a:	2b00      	cmp	r3, #0
   2280c:	d045      	beq.n	2289a <rpc_client_register+0x92>
   2280e:	6842      	ldr	r2, [r0, #4]
   22810:	4601      	mov	r1, r0
   22812:	2a00      	cmp	r2, #0
   22814:	d050      	beq.n	228b8 <rpc_client_register+0xb0>
   22816:	4a30      	ldr	r2, [pc, #192]	; (228d8 <rpc_client_register+0xd0>)
   22818:	8810      	ldrh	r0, [r2, #0]
   2281a:	4283      	cmp	r3, r0
   2281c:	d03d      	beq.n	2289a <rpc_client_register+0x92>
   2281e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22822:	8a14      	ldrh	r4, [r2, #16]
   22824:	42a3      	cmp	r3, r4
   22826:	d035      	beq.n	22894 <rpc_client_register+0x8c>
   22828:	8c15      	ldrh	r5, [r2, #32]
   2282a:	42ab      	cmp	r3, r5
   2282c:	d032      	beq.n	22894 <rpc_client_register+0x8c>
   2282e:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   22830:	42b3      	cmp	r3, r6
   22832:	d02f      	beq.n	22894 <rpc_client_register+0x8c>
   22834:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   22838:	42bb      	cmp	r3, r7
   2283a:	d02b      	beq.n	22894 <rpc_client_register+0x8c>
   2283c:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   22840:	4563      	cmp	r3, ip
   22842:	d027      	beq.n	22894 <rpc_client_register+0x8c>
   22844:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   22848:	4573      	cmp	r3, lr
   2284a:	d023      	beq.n	22894 <rpc_client_register+0x8c>
   2284c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   22850:	4543      	cmp	r3, r8
   22852:	d01f      	beq.n	22894 <rpc_client_register+0x8c>
   22854:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   22858:	454b      	cmp	r3, r9
   2285a:	d01b      	beq.n	22894 <rpc_client_register+0x8c>
   2285c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   22860:	4553      	cmp	r3, sl
   22862:	d017      	beq.n	22894 <rpc_client_register+0x8c>
   22864:	b1e0      	cbz	r0, 228a0 <rpc_client_register+0x98>
   22866:	b35c      	cbz	r4, 228c0 <rpc_client_register+0xb8>
   22868:	b365      	cbz	r5, 228c4 <rpc_client_register+0xbc>
   2286a:	b36e      	cbz	r6, 228c8 <rpc_client_register+0xc0>
   2286c:	b377      	cbz	r7, 228cc <rpc_client_register+0xc4>
   2286e:	f1bc 0f00 	cmp.w	ip, #0
   22872:	d02d      	beq.n	228d0 <rpc_client_register+0xc8>
   22874:	f1be 0f00 	cmp.w	lr, #0
   22878:	d020      	beq.n	228bc <rpc_client_register+0xb4>
   2287a:	f1b8 0f00 	cmp.w	r8, #0
   2287e:	d029      	beq.n	228d4 <rpc_client_register+0xcc>
   22880:	f1b9 0f00 	cmp.w	r9, #0
   22884:	d00b      	beq.n	2289e <rpc_client_register+0x96>
   22886:	2009      	movs	r0, #9
   22888:	f1ba 0f00 	cmp.w	sl, #0
   2288c:	d008      	beq.n	228a0 <rpc_client_register+0x98>
   2288e:	2004      	movs	r0, #4
   22890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22894:	2007      	movs	r0, #7
   22896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2289a:	2007      	movs	r0, #7
   2289c:	4770      	bx	lr
   2289e:	2008      	movs	r0, #8
   228a0:	0100      	lsls	r0, r0, #4
   228a2:	5213      	strh	r3, [r2, r0]
   228a4:	684b      	ldr	r3, [r1, #4]
   228a6:	4402      	add	r2, r0
   228a8:	6053      	str	r3, [r2, #4]
   228aa:	688b      	ldr	r3, [r1, #8]
   228ac:	2000      	movs	r0, #0
   228ae:	6093      	str	r3, [r2, #8]
   228b0:	68cb      	ldr	r3, [r1, #12]
   228b2:	60d3      	str	r3, [r2, #12]
   228b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   228b8:	200e      	movs	r0, #14
   228ba:	4770      	bx	lr
   228bc:	2006      	movs	r0, #6
   228be:	e7ef      	b.n	228a0 <rpc_client_register+0x98>
   228c0:	2001      	movs	r0, #1
   228c2:	e7ed      	b.n	228a0 <rpc_client_register+0x98>
   228c4:	2002      	movs	r0, #2
   228c6:	e7eb      	b.n	228a0 <rpc_client_register+0x98>
   228c8:	2003      	movs	r0, #3
   228ca:	e7e9      	b.n	228a0 <rpc_client_register+0x98>
   228cc:	2004      	movs	r0, #4
   228ce:	e7e7      	b.n	228a0 <rpc_client_register+0x98>
   228d0:	2005      	movs	r0, #5
   228d2:	e7e5      	b.n	228a0 <rpc_client_register+0x98>
   228d4:	2007      	movs	r0, #7
   228d6:	e7e3      	b.n	228a0 <rpc_client_register+0x98>
   228d8:	200225a4 	.word	0x200225a4

000228dc <rpc_message_send>:
   228dc:	b150      	cbz	r0, 228f4 <rpc_message_send+0x18>
   228de:	b159      	cbz	r1, 228f8 <rpc_message_send+0x1c>
   228e0:	684b      	ldr	r3, [r1, #4]
   228e2:	8008      	strh	r0, [r1, #0]
   228e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   228e8:	f043 0302 	orr.w	r3, r3, #2
   228ec:	604b      	str	r3, [r1, #4]
   228ee:	4608      	mov	r0, r1
   228f0:	f7fc bbc0 	b.w	1f074 <rpc_transport_send>
   228f4:	2007      	movs	r0, #7
   228f6:	4770      	bx	lr
   228f8:	200e      	movs	r0, #14
   228fa:	4770      	bx	lr

000228fc <rpc_message_alloc>:
   228fc:	b342      	cbz	r2, 22950 <rpc_message_alloc+0x54>
   228fe:	b328      	cbz	r0, 2294c <rpc_message_alloc+0x50>
   22900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22902:	2300      	movs	r3, #0
   22904:	4616      	mov	r6, r2
   22906:	460c      	mov	r4, r1
   22908:	4605      	mov	r5, r0
   2290a:	6013      	str	r3, [r2, #0]
   2290c:	b171      	cbz	r1, 2292c <rpc_message_alloc+0x30>
   2290e:	4608      	mov	r0, r1
   22910:	f7fc fbb4 	bl	1f07c <rpc_transport_data_alloc>
   22914:	4607      	mov	r7, r0
   22916:	b1b8      	cbz	r0, 22948 <rpc_message_alloc+0x4c>
   22918:	f7fc fbae 	bl	1f078 <rpc_transport_rpc_alloc>
   2291c:	4603      	mov	r3, r0
   2291e:	b180      	cbz	r0, 22942 <rpc_message_alloc+0x46>
   22920:	2000      	movs	r0, #0
   22922:	60dc      	str	r4, [r3, #12]
   22924:	609f      	str	r7, [r3, #8]
   22926:	801d      	strh	r5, [r3, #0]
   22928:	6033      	str	r3, [r6, #0]
   2292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2292c:	f7fc fba4 	bl	1f078 <rpc_transport_rpc_alloc>
   22930:	4603      	mov	r3, r0
   22932:	b148      	cbz	r0, 22948 <rpc_message_alloc+0x4c>
   22934:	4627      	mov	r7, r4
   22936:	60dc      	str	r4, [r3, #12]
   22938:	609f      	str	r7, [r3, #8]
   2293a:	801d      	strh	r5, [r3, #0]
   2293c:	2000      	movs	r0, #0
   2293e:	6033      	str	r3, [r6, #0]
   22940:	e7f3      	b.n	2292a <rpc_message_alloc+0x2e>
   22942:	4638      	mov	r0, r7
   22944:	f7fc fb9e 	bl	1f084 <rpc_transport_data_free>
   22948:	2004      	movs	r0, #4
   2294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2294c:	2007      	movs	r0, #7
   2294e:	4770      	bx	lr
   22950:	200e      	movs	r0, #14
   22952:	4770      	bx	lr

00022954 <rpc_message_free>:
   22954:	b130      	cbz	r0, 22964 <rpc_message_free+0x10>
   22956:	b139      	cbz	r1, 22968 <rpc_message_free+0x14>
   22958:	b508      	push	{r3, lr}
   2295a:	4608      	mov	r0, r1
   2295c:	f7fc fb90 	bl	1f080 <rpc_transport_rpc_free>
   22960:	2000      	movs	r0, #0
   22962:	bd08      	pop	{r3, pc}
   22964:	2007      	movs	r0, #7
   22966:	4770      	bx	lr
   22968:	200e      	movs	r0, #14
   2296a:	4770      	bx	lr

0002296c <rpc_message_data_free>:
   2296c:	b130      	cbz	r0, 2297c <rpc_message_data_free+0x10>
   2296e:	b139      	cbz	r1, 22980 <rpc_message_data_free+0x14>
   22970:	b508      	push	{r3, lr}
   22972:	4608      	mov	r0, r1
   22974:	f7fc fb86 	bl	1f084 <rpc_transport_data_free>
   22978:	2000      	movs	r0, #0
   2297a:	bd08      	pop	{r3, pc}
   2297c:	2007      	movs	r0, #7
   2297e:	4770      	bx	lr
   22980:	200e      	movs	r0, #14
   22982:	4770      	bx	lr

00022984 <packet_free_cb>:
   22984:	b510      	push	{r4, lr}
   22986:	4604      	mov	r4, r0
   22988:	b118      	cbz	r0, 22992 <packet_free_cb+0xe>
   2298a:	6800      	ldr	r0, [r0, #0]
   2298c:	b108      	cbz	r0, 22992 <packet_free_cb+0xe>
   2298e:	f002 feff 	bl	25790 <rpc_gnss_client_data_free>
   22992:	68a0      	ldr	r0, [r4, #8]
   22994:	b118      	cbz	r0, 2299e <packet_free_cb+0x1a>
   22996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2299a:	f003 bce7 	b.w	2636c <nrf_free>
   2299e:	bd10      	pop	{r4, pc}

000229a0 <rpc_gnss_event_handler>:
   229a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   229a2:	4b64      	ldr	r3, [pc, #400]	; (22b34 <rpc_gnss_event_handler+0x194>)
   229a4:	4606      	mov	r6, r0
   229a6:	6800      	ldr	r0, [r0, #0]
   229a8:	881b      	ldrh	r3, [r3, #0]
   229aa:	6802      	ldr	r2, [r0, #0]
   229ac:	b085      	sub	sp, #20
   229ae:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   229b2:	460d      	mov	r5, r1
   229b4:	d037      	beq.n	22a26 <rpc_gnss_event_handler+0x86>
   229b6:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   229ba:	33ff      	adds	r3, #255	; 0xff
   229bc:	b29b      	uxth	r3, r3
   229be:	2b02      	cmp	r3, #2
   229c0:	d811      	bhi.n	229e6 <rpc_gnss_event_handler+0x46>
   229c2:	4c5d      	ldr	r4, [pc, #372]	; (22b38 <rpc_gnss_event_handler+0x198>)
   229c4:	6823      	ldr	r3, [r4, #0]
   229c6:	075a      	lsls	r2, r3, #29
   229c8:	d410      	bmi.n	229ec <rpc_gnss_event_handler+0x4c>
   229ca:	6823      	ldr	r3, [r4, #0]
   229cc:	079b      	lsls	r3, r3, #30
   229ce:	d503      	bpl.n	229d8 <rpc_gnss_event_handler+0x38>
   229d0:	f244 0303 	movw	r3, #16387	; 0x4003
   229d4:	429d      	cmp	r5, r3
   229d6:	d009      	beq.n	229ec <rpc_gnss_event_handler+0x4c>
   229d8:	6830      	ldr	r0, [r6, #0]
   229da:	b120      	cbz	r0, 229e6 <rpc_gnss_event_handler+0x46>
   229dc:	f002 fed8 	bl	25790 <rpc_gnss_client_data_free>
   229e0:	2200      	movs	r2, #0
   229e2:	4b56      	ldr	r3, [pc, #344]	; (22b3c <rpc_gnss_event_handler+0x19c>)
   229e4:	601a      	str	r2, [r3, #0]
   229e6:	2000      	movs	r0, #0
   229e8:	b005      	add	sp, #20
   229ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229ec:	2002      	movs	r0, #2
   229ee:	f003 fcb3 	bl	26358 <nrf_malloc>
   229f2:	4607      	mov	r7, r0
   229f4:	2800      	cmp	r0, #0
   229f6:	f000 8094 	beq.w	22b22 <rpc_gnss_event_handler+0x182>
   229fa:	2302      	movs	r3, #2
   229fc:	8005      	strh	r5, [r0, #0]
   229fe:	6831      	ldr	r1, [r6, #0]
   22a00:	6872      	ldr	r2, [r6, #4]
   22a02:	484f      	ldr	r0, [pc, #316]	; (22b40 <rpc_gnss_event_handler+0x1a0>)
   22a04:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   22a08:	6800      	ldr	r0, [r0, #0]
   22a0a:	9303      	str	r3, [sp, #12]
   22a0c:	6803      	ldr	r3, [r0, #0]
   22a0e:	4669      	mov	r1, sp
   22a10:	685b      	ldr	r3, [r3, #4]
   22a12:	4798      	blx	r3
   22a14:	3001      	adds	r0, #1
   22a16:	d071      	beq.n	22afc <rpc_gnss_event_handler+0x15c>
   22a18:	2000      	movs	r0, #0
   22a1a:	6823      	ldr	r3, [r4, #0]
   22a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22a20:	6023      	str	r3, [r4, #0]
   22a22:	b005      	add	sp, #20
   22a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22a26:	4c44      	ldr	r4, [pc, #272]	; (22b38 <rpc_gnss_event_handler+0x198>)
   22a28:	4f44      	ldr	r7, [pc, #272]	; (22b3c <rpc_gnss_event_handler+0x19c>)
   22a2a:	6823      	ldr	r3, [r4, #0]
   22a2c:	6038      	str	r0, [r7, #0]
   22a2e:	01d9      	lsls	r1, r3, #7
   22a30:	d523      	bpl.n	22a7a <rpc_gnss_event_handler+0xda>
   22a32:	f242 1302 	movw	r3, #8450	; 0x2102
   22a36:	429d      	cmp	r5, r3
   22a38:	d11f      	bne.n	22a7a <rpc_gnss_event_handler+0xda>
   22a3a:	6843      	ldr	r3, [r0, #4]
   22a3c:	b91b      	cbnz	r3, 22a46 <rpc_gnss_event_handler+0xa6>
   22a3e:	6823      	ldr	r3, [r4, #0]
   22a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22a44:	6023      	str	r3, [r4, #0]
   22a46:	6823      	ldr	r3, [r4, #0]
   22a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22a4c:	6023      	str	r3, [r4, #0]
   22a4e:	6823      	ldr	r3, [r4, #0]
   22a50:	025a      	lsls	r2, r3, #9
   22a52:	d430      	bmi.n	22ab6 <rpc_gnss_event_handler+0x116>
   22a54:	f242 0305 	movw	r3, #8197	; 0x2005
   22a58:	429d      	cmp	r5, r3
   22a5a:	d12c      	bne.n	22ab6 <rpc_gnss_event_handler+0x116>
   22a5c:	6823      	ldr	r3, [r4, #0]
   22a5e:	0299      	lsls	r1, r3, #10
   22a60:	d529      	bpl.n	22ab6 <rpc_gnss_event_handler+0x116>
   22a62:	6843      	ldr	r3, [r0, #4]
   22a64:	2b00      	cmp	r3, #0
   22a66:	d157      	bne.n	22b18 <rpc_gnss_event_handler+0x178>
   22a68:	6823      	ldr	r3, [r4, #0]
   22a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22a6e:	6023      	str	r3, [r4, #0]
   22a70:	6823      	ldr	r3, [r4, #0]
   22a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22a76:	6023      	str	r3, [r4, #0]
   22a78:	e01d      	b.n	22ab6 <rpc_gnss_event_handler+0x116>
   22a7a:	6823      	ldr	r3, [r4, #0]
   22a7c:	025b      	lsls	r3, r3, #9
   22a7e:	d50e      	bpl.n	22a9e <rpc_gnss_event_handler+0xfe>
   22a80:	f242 1303 	movw	r3, #8451	; 0x2103
   22a84:	429d      	cmp	r5, r3
   22a86:	d10a      	bne.n	22a9e <rpc_gnss_event_handler+0xfe>
   22a88:	6843      	ldr	r3, [r0, #4]
   22a8a:	b91b      	cbnz	r3, 22a94 <rpc_gnss_event_handler+0xf4>
   22a8c:	6823      	ldr	r3, [r4, #0]
   22a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22a92:	6023      	str	r3, [r4, #0]
   22a94:	6823      	ldr	r3, [r4, #0]
   22a96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   22a9a:	6023      	str	r3, [r4, #0]
   22a9c:	e00b      	b.n	22ab6 <rpc_gnss_event_handler+0x116>
   22a9e:	f242 0301 	movw	r3, #8193	; 0x2001
   22aa2:	429d      	cmp	r5, r3
   22aa4:	d10c      	bne.n	22ac0 <rpc_gnss_event_handler+0x120>
   22aa6:	6843      	ldr	r3, [r0, #4]
   22aa8:	b92b      	cbnz	r3, 22ab6 <rpc_gnss_event_handler+0x116>
   22aaa:	6823      	ldr	r3, [r4, #0]
   22aac:	0c1b      	lsrs	r3, r3, #16
   22aae:	041b      	lsls	r3, r3, #16
   22ab0:	f043 0302 	orr.w	r3, r3, #2
   22ab4:	6023      	str	r3, [r4, #0]
   22ab6:	f002 fe6b 	bl	25790 <rpc_gnss_client_data_free>
   22aba:	2300      	movs	r3, #0
   22abc:	603b      	str	r3, [r7, #0]
   22abe:	e77a      	b.n	229b6 <rpc_gnss_event_handler+0x16>
   22ac0:	f242 0304 	movw	r3, #8196	; 0x2004
   22ac4:	429d      	cmp	r5, r3
   22ac6:	d1c5      	bne.n	22a54 <rpc_gnss_event_handler+0xb4>
   22ac8:	6843      	ldr	r3, [r0, #4]
   22aca:	b993      	cbnz	r3, 22af2 <rpc_gnss_event_handler+0x152>
   22acc:	6823      	ldr	r3, [r4, #0]
   22ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22ad2:	6023      	str	r3, [r4, #0]
   22ad4:	6823      	ldr	r3, [r4, #0]
   22ad6:	b29b      	uxth	r3, r3
   22ad8:	2b03      	cmp	r3, #3
   22ada:	6823      	ldr	r3, [r4, #0]
   22adc:	d016      	beq.n	22b0c <rpc_gnss_event_handler+0x16c>
   22ade:	b29b      	uxth	r3, r3
   22ae0:	2b04      	cmp	r3, #4
   22ae2:	d1d7      	bne.n	22a94 <rpc_gnss_event_handler+0xf4>
   22ae4:	6823      	ldr	r3, [r4, #0]
   22ae6:	0c1b      	lsrs	r3, r3, #16
   22ae8:	041b      	lsls	r3, r3, #16
   22aea:	f043 0302 	orr.w	r3, r3, #2
   22aee:	6023      	str	r3, [r4, #0]
   22af0:	e7d0      	b.n	22a94 <rpc_gnss_event_handler+0xf4>
   22af2:	6823      	ldr	r3, [r4, #0]
   22af4:	b29b      	uxth	r3, r3
   22af6:	2b03      	cmp	r3, #3
   22af8:	d1cc      	bne.n	22a94 <rpc_gnss_event_handler+0xf4>
   22afa:	e7f3      	b.n	22ae4 <rpc_gnss_event_handler+0x144>
   22afc:	4638      	mov	r0, r7
   22afe:	f003 fc35 	bl	2636c <nrf_free>
   22b02:	6830      	ldr	r0, [r6, #0]
   22b04:	2800      	cmp	r0, #0
   22b06:	f47f af69 	bne.w	229dc <rpc_gnss_event_handler+0x3c>
   22b0a:	e76c      	b.n	229e6 <rpc_gnss_event_handler+0x46>
   22b0c:	0c1b      	lsrs	r3, r3, #16
   22b0e:	041b      	lsls	r3, r3, #16
   22b10:	f043 0304 	orr.w	r3, r3, #4
   22b14:	6023      	str	r3, [r4, #0]
   22b16:	e7bd      	b.n	22a94 <rpc_gnss_event_handler+0xf4>
   22b18:	6823      	ldr	r3, [r4, #0]
   22b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22b1e:	6023      	str	r3, [r4, #0]
   22b20:	e7c9      	b.n	22ab6 <rpc_gnss_event_handler+0x116>
   22b22:	6830      	ldr	r0, [r6, #0]
   22b24:	2800      	cmp	r0, #0
   22b26:	f43f af5e 	beq.w	229e6 <rpc_gnss_event_handler+0x46>
   22b2a:	f002 fe31 	bl	25790 <rpc_gnss_client_data_free>
   22b2e:	4b03      	ldr	r3, [pc, #12]	; (22b3c <rpc_gnss_event_handler+0x19c>)
   22b30:	601f      	str	r7, [r3, #0]
   22b32:	e758      	b.n	229e6 <rpc_gnss_event_handler+0x46>
   22b34:	20027462 	.word	0x20027462
   22b38:	20022644 	.word	0x20022644
   22b3c:	20022648 	.word	0x20022648
   22b40:	2002264c 	.word	0x2002264c

00022b44 <gnss_interface_write>:
   22b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22b48:	4a74      	ldr	r2, [pc, #464]	; (22d1c <gnss_interface_write+0x1d8>)
   22b4a:	b09f      	sub	sp, #124	; 0x7c
   22b4c:	4290      	cmp	r0, r2
   22b4e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   22b50:	f040 80d7 	bne.w	22d02 <gnss_interface_write+0x1be>
   22b54:	2900      	cmp	r1, #0
   22b56:	f000 80c6 	beq.w	22ce6 <gnss_interface_write+0x1a2>
   22b5a:	2d00      	cmp	r5, #0
   22b5c:	f000 80c3 	beq.w	22ce6 <gnss_interface_write+0x1a2>
   22b60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   22b62:	2a02      	cmp	r2, #2
   22b64:	f040 80bf 	bne.w	22ce6 <gnss_interface_write+0x1a2>
   22b68:	4c6d      	ldr	r4, [pc, #436]	; (22d20 <gnss_interface_write+0x1dc>)
   22b6a:	6822      	ldr	r2, [r4, #0]
   22b6c:	b292      	uxth	r2, r2
   22b6e:	2a02      	cmp	r2, #2
   22b70:	d004      	beq.n	22b7c <gnss_interface_write+0x38>
   22b72:	6822      	ldr	r2, [r4, #0]
   22b74:	b292      	uxth	r2, r2
   22b76:	2a04      	cmp	r2, #4
   22b78:	f040 80bd 	bne.w	22cf6 <gnss_interface_write+0x1b2>
   22b7c:	2b00      	cmp	r3, #0
   22b7e:	f040 80c6 	bne.w	22d0e <gnss_interface_write+0x1ca>
   22b82:	6822      	ldr	r2, [r4, #0]
   22b84:	0390      	lsls	r0, r2, #14
   22b86:	d512      	bpl.n	22bae <gnss_interface_write+0x6a>
   22b88:	6822      	ldr	r2, [r4, #0]
   22b8a:	882b      	ldrh	r3, [r5, #0]
   22b8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   22b90:	6022      	str	r2, [r4, #0]
   22b92:	6822      	ldr	r2, [r4, #0]
   22b94:	3b01      	subs	r3, #1
   22b96:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   22b9a:	6022      	str	r2, [r4, #0]
   22b9c:	2b07      	cmp	r3, #7
   22b9e:	f200 80a2 	bhi.w	22ce6 <gnss_interface_write+0x1a2>
   22ba2:	e8df f003 	tbb	[pc, r3]
   22ba6:	7d82      	.short	0x7d82
   22ba8:	646e7378 	.word	0x646e7378
   22bac:	0869      	.short	0x0869
   22bae:	2000      	movs	r0, #0
   22bb0:	b01f      	add	sp, #124	; 0x7c
   22bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22bb6:	4608      	mov	r0, r1
   22bb8:	a902      	add	r1, sp, #8
   22bba:	f002 fd9d 	bl	256f8 <rpc_gnss_serialize_integrity>
   22bbe:	2172      	movs	r1, #114	; 0x72
   22bc0:	4668      	mov	r0, sp
   22bc2:	f002 fdb3 	bl	2572c <rpc_gnss_client_request_alloc>
   22bc6:	4605      	mov	r5, r0
   22bc8:	9800      	ldr	r0, [sp, #0]
   22bca:	2d00      	cmp	r5, #0
   22bcc:	d172      	bne.n	22cb4 <gnss_interface_write+0x170>
   22bce:	2800      	cmp	r0, #0
   22bd0:	d077      	beq.n	22cc2 <gnss_interface_write+0x17e>
   22bd2:	f241 0605 	movw	r6, #4101	; 0x1005
   22bd6:	f04f 0c49 	mov.w	ip, #73	; 0x49
   22bda:	2272      	movs	r2, #114	; 0x72
   22bdc:	f04f 0e76 	mov.w	lr, #118	; 0x76
   22be0:	f04f 0943 	mov.w	r9, #67	; 0x43
   22be4:	f04f 0854 	mov.w	r8, #84	; 0x54
   22be8:	4f4e      	ldr	r7, [pc, #312]	; (22d24 <gnss_interface_write+0x1e0>)
   22bea:	a91e      	add	r1, sp, #120	; 0x78
   22bec:	883b      	ldrh	r3, [r7, #0]
   22bee:	f880 c00f 	strb.w	ip, [r0, #15]
   22bf2:	3301      	adds	r3, #1
   22bf4:	b29b      	uxth	r3, r3
   22bf6:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   22bfa:	f841 cd74 	str.w	ip, [r1, #-116]!
   22bfe:	7145      	strb	r5, [r0, #5]
   22c00:	7185      	strb	r5, [r0, #6]
   22c02:	71c5      	strb	r5, [r0, #7]
   22c04:	7205      	strb	r5, [r0, #8]
   22c06:	7245      	strb	r5, [r0, #9]
   22c08:	7285      	strb	r5, [r0, #10]
   22c0a:	72c5      	strb	r5, [r0, #11]
   22c0c:	7102      	strb	r2, [r0, #4]
   22c0e:	f880 900c 	strb.w	r9, [r0, #12]
   22c12:	f880 800d 	strb.w	r8, [r0, #13]
   22c16:	f880 e00e 	strb.w	lr, [r0, #14]
   22c1a:	6800      	ldr	r0, [r0, #0]
   22c1c:	803b      	strh	r3, [r7, #0]
   22c1e:	f010 fdcf 	bl	337c0 <memcpy>
   22c22:	4b41      	ldr	r3, [pc, #260]	; (22d28 <gnss_interface_write+0x1e4>)
   22c24:	4631      	mov	r1, r6
   22c26:	9800      	ldr	r0, [sp, #0]
   22c28:	601d      	str	r5, [r3, #0]
   22c2a:	f002 fd93 	bl	25754 <rpc_gnss_client_request_send>
   22c2e:	2800      	cmp	r0, #0
   22c30:	d14e      	bne.n	22cd0 <gnss_interface_write+0x18c>
   22c32:	6823      	ldr	r3, [r4, #0]
   22c34:	0299      	lsls	r1, r3, #10
   22c36:	d50b      	bpl.n	22c50 <gnss_interface_write+0x10c>
   22c38:	4e3c      	ldr	r6, [pc, #240]	; (22d2c <gnss_interface_write+0x1e8>)
   22c3a:	4d38      	ldr	r5, [pc, #224]	; (22d1c <gnss_interface_write+0x1d8>)
   22c3c:	e000      	b.n	22c40 <gnss_interface_write+0xfc>
   22c3e:	b978      	cbnz	r0, 22c60 <gnss_interface_write+0x11c>
   22c40:	4631      	mov	r1, r6
   22c42:	4628      	mov	r0, r5
   22c44:	f7fa f89e 	bl	1cd84 <bsd_os_timedwait>
   22c48:	6823      	ldr	r3, [r4, #0]
   22c4a:	029a      	lsls	r2, r3, #10
   22c4c:	d4f7      	bmi.n	22c3e <gnss_interface_write+0xfa>
   22c4e:	b938      	cbnz	r0, 22c60 <gnss_interface_write+0x11c>
   22c50:	6823      	ldr	r3, [r4, #0]
   22c52:	039b      	lsls	r3, r3, #14
   22c54:	d4ab      	bmi.n	22bae <gnss_interface_write+0x6a>
   22c56:	2005      	movs	r0, #5
   22c58:	6823      	ldr	r3, [r4, #0]
   22c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22c5e:	6023      	str	r3, [r4, #0]
   22c60:	f7fa f93a 	bl	1ced8 <bsd_os_errno_set>
   22c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22c68:	b01f      	add	sp, #124	; 0x7c
   22c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22c6e:	4608      	mov	r0, r1
   22c70:	a902      	add	r1, sp, #8
   22c72:	f002 fcf9 	bl	25668 <rpc_gnss_serialize_time_and_sv_tow>
   22c76:	e7a2      	b.n	22bbe <gnss_interface_write+0x7a>
   22c78:	4608      	mov	r0, r1
   22c7a:	a902      	add	r1, sp, #8
   22c7c:	f002 fd1c 	bl	256b8 <rpc_gnss_serialize_location>
   22c80:	e79d      	b.n	22bbe <gnss_interface_write+0x7a>
   22c82:	4608      	mov	r0, r1
   22c84:	a902      	add	r1, sp, #8
   22c86:	f002 fcd5 	bl	25634 <rpc_gnss_serialize_nequick>
   22c8a:	e798      	b.n	22bbe <gnss_interface_write+0x7a>
   22c8c:	4608      	mov	r0, r1
   22c8e:	a902      	add	r1, sp, #8
   22c90:	f002 fcac 	bl	255ec <rpc_gnss_serialize_klob>
   22c94:	e793      	b.n	22bbe <gnss_interface_write+0x7a>
   22c96:	4608      	mov	r0, r1
   22c98:	a902      	add	r1, sp, #8
   22c9a:	f002 fc75 	bl	25588 <rpc_gnss_serialize_alm>
   22c9e:	e78e      	b.n	22bbe <gnss_interface_write+0x7a>
   22ca0:	4608      	mov	r0, r1
   22ca2:	a902      	add	r1, sp, #8
   22ca4:	f002 fc1e 	bl	254e4 <rpc_gnss_serialize_ephe>
   22ca8:	e789      	b.n	22bbe <gnss_interface_write+0x7a>
   22caa:	4608      	mov	r0, r1
   22cac:	a902      	add	r1, sp, #8
   22cae:	f002 fbf7 	bl	254a0 <rpc_gnss_serialize_utc>
   22cb2:	e784      	b.n	22bbe <gnss_interface_write+0x7a>
   22cb4:	b128      	cbz	r0, 22cc2 <gnss_interface_write+0x17e>
   22cb6:	6803      	ldr	r3, [r0, #0]
   22cb8:	b11b      	cbz	r3, 22cc2 <gnss_interface_write+0x17e>
   22cba:	4618      	mov	r0, r3
   22cbc:	f002 fd68 	bl	25790 <rpc_gnss_client_data_free>
   22cc0:	9800      	ldr	r0, [sp, #0]
   22cc2:	f002 fd5d 	bl	25780 <rpc_gnss_client_message_free>
   22cc6:	2023      	movs	r0, #35	; 0x23
   22cc8:	f7fa f906 	bl	1ced8 <bsd_os_errno_set>
   22ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22cd0:	6823      	ldr	r3, [r4, #0]
   22cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22cd6:	6023      	str	r3, [r4, #0]
   22cd8:	6823      	ldr	r3, [r4, #0]
   22cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22cde:	6023      	str	r3, [r4, #0]
   22ce0:	b01f      	add	sp, #124	; 0x7c
   22ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22ce6:	2016      	movs	r0, #22
   22ce8:	f7fa f8f6 	bl	1ced8 <bsd_os_errno_set>
   22cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22cf0:	b01f      	add	sp, #124	; 0x7c
   22cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22cf6:	2039      	movs	r0, #57	; 0x39
   22cf8:	f7fa f8ee 	bl	1ced8 <bsd_os_errno_set>
   22cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d00:	e756      	b.n	22bb0 <gnss_interface_write+0x6c>
   22d02:	2009      	movs	r0, #9
   22d04:	f7fa f8e8 	bl	1ced8 <bsd_os_errno_set>
   22d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d0c:	e750      	b.n	22bb0 <gnss_interface_write+0x6c>
   22d0e:	202d      	movs	r0, #45	; 0x2d
   22d10:	f7fa f8e2 	bl	1ced8 <bsd_os_errno_set>
   22d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d18:	e74a      	b.n	22bb0 <gnss_interface_write+0x6c>
   22d1a:	bf00      	nop
   22d1c:	49765443 	.word	0x49765443
   22d20:	20022644 	.word	0x20022644
   22d24:	20027462 	.word	0x20027462
   22d28:	20022648 	.word	0x20022648
   22d2c:	20020138 	.word	0x20020138

00022d30 <gnss_interface_read>:
   22d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d34:	4c55      	ldr	r4, [pc, #340]	; (22e8c <gnss_interface_read+0x15c>)
   22d36:	b0b7      	sub	sp, #220	; 0xdc
   22d38:	42a0      	cmp	r0, r4
   22d3a:	f040 81fa 	bne.w	23132 <gnss_interface_read+0x402>
   22d3e:	460e      	mov	r6, r1
   22d40:	2900      	cmp	r1, #0
   22d42:	f000 81f0 	beq.w	23126 <gnss_interface_read+0x3f6>
   22d46:	2ad7      	cmp	r2, #215	; 0xd7
   22d48:	f240 81ed 	bls.w	23126 <gnss_interface_read+0x3f6>
   22d4c:	4d50      	ldr	r5, [pc, #320]	; (22e90 <gnss_interface_read+0x160>)
   22d4e:	469a      	mov	sl, r3
   22d50:	682b      	ldr	r3, [r5, #0]
   22d52:	b29b      	uxth	r3, r3
   22d54:	2b04      	cmp	r3, #4
   22d56:	d004      	beq.n	22d62 <gnss_interface_read+0x32>
   22d58:	682b      	ldr	r3, [r5, #0]
   22d5a:	b29b      	uxth	r3, r3
   22d5c:	2b02      	cmp	r3, #2
   22d5e:	f040 81dc 	bne.w	2311a <gnss_interface_read+0x3ea>
   22d62:	f1ba 0f00 	cmp.w	sl, #0
   22d66:	d178      	bne.n	22e5a <gnss_interface_read+0x12a>
   22d68:	2102      	movs	r1, #2
   22d6a:	20b6      	movs	r0, #182	; 0xb6
   22d6c:	2400      	movs	r4, #0
   22d6e:	682b      	ldr	r3, [r5, #0]
   22d70:	f10d 020e 	add.w	r2, sp, #14
   22d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   22d78:	602b      	str	r3, [r5, #0]
   22d7a:	ab08      	add	r3, sp, #32
   22d7c:	9304      	str	r3, [sp, #16]
   22d7e:	f8df b118 	ldr.w	fp, [pc, #280]	; 22e98 <gnss_interface_read+0x168>
   22d82:	ea0a 0301 	and.w	r3, sl, r1
   22d86:	4f43      	ldr	r7, [pc, #268]	; (22e94 <gnss_interface_read+0x164>)
   22d88:	f8df 9110 	ldr.w	r9, [pc, #272]	; 22e9c <gnss_interface_read+0x16c>
   22d8c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 22e8c <gnss_interface_read+0x15c>
   22d90:	9005      	str	r0, [sp, #20]
   22d92:	9107      	str	r1, [sp, #28]
   22d94:	9206      	str	r2, [sp, #24]
   22d96:	9301      	str	r3, [sp, #4]
   22d98:	f8db 0000 	ldr.w	r0, [fp]
   22d9c:	4652      	mov	r2, sl
   22d9e:	6803      	ldr	r3, [r0, #0]
   22da0:	a904      	add	r1, sp, #16
   22da2:	689b      	ldr	r3, [r3, #8]
   22da4:	4798      	blx	r3
   22da6:	2800      	cmp	r0, #0
   22da8:	da2a      	bge.n	22e00 <gnss_interface_read+0xd0>
   22daa:	9b01      	ldr	r3, [sp, #4]
   22dac:	b15b      	cbz	r3, 22dc6 <gnss_interface_read+0x96>
   22dae:	1c42      	adds	r2, r0, #1
   22db0:	4603      	mov	r3, r0
   22db2:	d125      	bne.n	22e00 <gnss_interface_read+0xd0>
   22db4:	b9dc      	cbnz	r4, 22dee <gnss_interface_read+0xbe>
   22db6:	2023      	movs	r0, #35	; 0x23
   22db8:	461c      	mov	r4, r3
   22dba:	f7fa f88d 	bl	1ced8 <bsd_os_errno_set>
   22dbe:	4620      	mov	r0, r4
   22dc0:	b037      	add	sp, #220	; 0xdc
   22dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22dc6:	682a      	ldr	r2, [r5, #0]
   22dc8:	783b      	ldrb	r3, [r7, #0]
   22dca:	03d1      	lsls	r1, r2, #15
   22dcc:	d40c      	bmi.n	22de8 <gnss_interface_read+0xb8>
   22dce:	b95c      	cbnz	r4, 22de8 <gnss_interface_read+0xb8>
   22dd0:	b163      	cbz	r3, 22dec <gnss_interface_read+0xbc>
   22dd2:	4649      	mov	r1, r9
   22dd4:	4640      	mov	r0, r8
   22dd6:	f7f9 ffd5 	bl	1cd84 <bsd_os_timedwait>
   22dda:	682b      	ldr	r3, [r5, #0]
   22ddc:	03db      	lsls	r3, r3, #15
   22dde:	d437      	bmi.n	22e50 <gnss_interface_read+0x120>
   22de0:	783b      	ldrb	r3, [r7, #0]
   22de2:	2800      	cmp	r0, #0
   22de4:	d0f4      	beq.n	22dd0 <gnss_interface_read+0xa0>
   22de6:	4604      	mov	r4, r0
   22de8:	2b00      	cmp	r3, #0
   22dea:	d1d5      	bne.n	22d98 <gnss_interface_read+0x68>
   22dec:	2470      	movs	r4, #112	; 0x70
   22dee:	4620      	mov	r0, r4
   22df0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22df4:	f7fa f870 	bl	1ced8 <bsd_os_errno_set>
   22df8:	4620      	mov	r0, r4
   22dfa:	b037      	add	sp, #220	; 0xdc
   22dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e00:	f244 0202 	movw	r2, #16386	; 0x4002
   22e04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   22e08:	4293      	cmp	r3, r2
   22e0a:	d02f      	beq.n	22e6c <gnss_interface_read+0x13c>
   22e0c:	f244 0201 	movw	r2, #16385	; 0x4001
   22e10:	4293      	cmp	r3, r2
   22e12:	d045      	beq.n	22ea0 <gnss_interface_read+0x170>
   22e14:	f244 0203 	movw	r2, #16387	; 0x4003
   22e18:	4293      	cmp	r3, r2
   22e1a:	f040 8184 	bne.w	23126 <gnss_interface_read+0x3f6>
   22e1e:	2203      	movs	r2, #3
   22e20:	2414      	movs	r4, #20
   22e22:	9b08      	ldr	r3, [sp, #32]
   22e24:	7032      	strb	r2, [r6, #0]
   22e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22e28:	60b3      	str	r3, [r6, #8]
   22e2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   22e2e:	e9c6 2303 	strd	r2, r3, [r6, #12]
   22e32:	f8db 0000 	ldr.w	r0, [fp]
   22e36:	6803      	ldr	r3, [r0, #0]
   22e38:	68db      	ldr	r3, [r3, #12]
   22e3a:	4798      	blx	r3
   22e3c:	2800      	cmp	r0, #0
   22e3e:	ddbe      	ble.n	22dbe <gnss_interface_read+0x8e>
   22e40:	4620      	mov	r0, r4
   22e42:	682b      	ldr	r3, [r5, #0]
   22e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22e48:	602b      	str	r3, [r5, #0]
   22e4a:	b037      	add	sp, #220	; 0xdc
   22e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e50:	783b      	ldrb	r3, [r7, #0]
   22e52:	4604      	mov	r4, r0
   22e54:	2b00      	cmp	r3, #0
   22e56:	d19f      	bne.n	22d98 <gnss_interface_read+0x68>
   22e58:	e7c8      	b.n	22dec <gnss_interface_read+0xbc>
   22e5a:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   22e5e:	d183      	bne.n	22d68 <gnss_interface_read+0x38>
   22e60:	202d      	movs	r0, #45	; 0x2d
   22e62:	f7fa f839 	bl	1ced8 <bsd_os_errno_set>
   22e66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22e6a:	e7a8      	b.n	22dbe <gnss_interface_read+0x8e>
   22e6c:	a808      	add	r0, sp, #32
   22e6e:	f7ef f907 	bl	12080 <strlen>
   22e72:	2302      	movs	r3, #2
   22e74:	1c44      	adds	r4, r0, #1
   22e76:	b2a4      	uxth	r4, r4
   22e78:	f806 3b08 	strb.w	r3, [r6], #8
   22e7c:	4622      	mov	r2, r4
   22e7e:	a908      	add	r1, sp, #32
   22e80:	4630      	mov	r0, r6
   22e82:	f010 fc9d 	bl	337c0 <memcpy>
   22e86:	3408      	adds	r4, #8
   22e88:	e7d3      	b.n	22e32 <gnss_interface_read+0x102>
   22e8a:	bf00      	nop
   22e8c:	49765443 	.word	0x49765443
   22e90:	20022644 	.word	0x20022644
   22e94:	20028e89 	.word	0x20028e89
   22e98:	2002264c 	.word	0x2002264c
   22e9c:	20020138 	.word	0x20020138
   22ea0:	2401      	movs	r4, #1
   22ea2:	a809      	add	r0, sp, #36	; 0x24
   22ea4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   22ea6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   22eaa:	e9c6 2304 	strd	r2, r3, [r6, #16]
   22eae:	990d      	ldr	r1, [sp, #52]	; 0x34
   22eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22eb2:	7034      	strb	r4, [r6, #0]
   22eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22eb6:	61b1      	str	r1, [r6, #24]
   22eb8:	9910      	ldr	r1, [sp, #64]	; 0x40
   22eba:	61f2      	str	r2, [r6, #28]
   22ebc:	6233      	str	r3, [r6, #32]
   22ebe:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   22ec2:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   22ec6:	6271      	str	r1, [r6, #36]	; 0x24
   22ec8:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   22ecc:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   22ed0:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   22ed4:	6373      	str	r3, [r6, #52]	; 0x34
   22ed6:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   22eda:	63b1      	str	r1, [r6, #56]	; 0x38
   22edc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   22ee0:	63f2      	str	r2, [r6, #60]	; 0x3c
   22ee2:	6433      	str	r3, [r6, #64]	; 0x40
   22ee4:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   22ee8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   22eec:	8531      	strh	r1, [r6, #40]	; 0x28
   22eee:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   22ef2:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   22ef6:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   22efa:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   22efe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   22f00:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   22f04:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   22f08:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   22f0c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   22f10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   22f12:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   22f16:	8630      	strh	r0, [r6, #48]	; 0x30
   22f18:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   22f1c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   22f20:	f3c3 230f 	ubfx	r3, r3, #8, #16
   22f24:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   22f28:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   22f2c:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   22f30:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   22f34:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   22f38:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   22f3c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   22f40:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   22f44:	64f3      	str	r3, [r6, #76]	; 0x4c
   22f46:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   22f4a:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   22f4e:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   22f52:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   22f56:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   22f5a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   22f5e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   22f62:	65b1      	str	r1, [r6, #88]	; 0x58
   22f64:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   22f68:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   22f6c:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   22f70:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   22f74:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   22f78:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   22f7c:	6672      	str	r2, [r6, #100]	; 0x64
   22f7e:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   22f82:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   22f86:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   22f8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   22f8c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   22f90:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   22f94:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   22f98:	f3c2 220f 	ubfx	r2, r2, #8, #16
   22f9c:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   22fa0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   22fa4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   22fa8:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   22fac:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   22fb0:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   22fb4:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   22fb8:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   22fbc:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   22fc0:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   22fc4:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   22fc8:	6733      	str	r3, [r6, #112]	; 0x70
   22fca:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   22fce:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   22fd2:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   22fd6:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   22fda:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   22fde:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   22fe2:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   22fe6:	67f1      	str	r1, [r6, #124]	; 0x7c
   22fe8:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   22fec:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   22ff0:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   22ff4:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   22ff8:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   22ffc:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   23000:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   23004:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   23008:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   2300c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2300e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   23012:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   23016:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2301a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   2301c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   23020:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   23024:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   23028:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   2302c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   23030:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   23034:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   23038:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   2303c:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   23040:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   23044:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   23048:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   2304c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   23050:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   23054:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   23058:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   2305c:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   23060:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   23064:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   23068:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   2306c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   23070:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   23074:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   23078:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   2307c:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   23080:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   23084:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   23088:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   2308c:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   23090:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   23094:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   23098:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   2309c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   230a0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   230a2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   230a6:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   230aa:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   230ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   230b2:	f3c2 220f 	ubfx	r2, r2, #8, #16
   230b6:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   230ba:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   230be:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   230c2:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   230c6:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   230ca:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   230ce:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   230d2:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   230d6:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   230da:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   230de:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   230e2:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   230e6:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   230ea:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   230ee:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   230f2:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   230f6:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   230fa:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   230fe:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   23102:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   23106:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   2310a:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   2310e:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   23112:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   23116:	24d8      	movs	r4, #216	; 0xd8
   23118:	e68b      	b.n	22e32 <gnss_interface_read+0x102>
   2311a:	2039      	movs	r0, #57	; 0x39
   2311c:	f7f9 fedc 	bl	1ced8 <bsd_os_errno_set>
   23120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23124:	e64b      	b.n	22dbe <gnss_interface_read+0x8e>
   23126:	2016      	movs	r0, #22
   23128:	f7f9 fed6 	bl	1ced8 <bsd_os_errno_set>
   2312c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23130:	e645      	b.n	22dbe <gnss_interface_read+0x8e>
   23132:	2009      	movs	r0, #9
   23134:	f7f9 fed0 	bl	1ced8 <bsd_os_errno_set>
   23138:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2313c:	e63f      	b.n	22dbe <gnss_interface_read+0x8e>
   2313e:	bf00      	nop

00023140 <gnss_interface_setopt>:
   23140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23144:	4db3      	ldr	r5, [pc, #716]	; (23414 <gnss_interface_setopt+0x2d4>)
   23146:	b086      	sub	sp, #24
   23148:	682c      	ldr	r4, [r5, #0]
   2314a:	b2a4      	uxth	r4, r4
   2314c:	2c02      	cmp	r4, #2
   2314e:	d00d      	beq.n	2316c <gnss_interface_setopt+0x2c>
   23150:	2a08      	cmp	r2, #8
   23152:	d00b      	beq.n	2316c <gnss_interface_setopt+0x2c>
   23154:	f1a2 040a 	sub.w	r4, r2, #10
   23158:	2c01      	cmp	r4, #1
   2315a:	d907      	bls.n	2316c <gnss_interface_setopt+0x2c>
   2315c:	200e      	movs	r0, #14
   2315e:	f7f9 febb 	bl	1ced8 <bsd_os_errno_set>
   23162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23166:	b006      	add	sp, #24
   23168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2316c:	682c      	ldr	r4, [r5, #0]
   2316e:	0264      	lsls	r4, r4, #9
   23170:	f100 8149 	bmi.w	23406 <gnss_interface_setopt+0x2c6>
   23174:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   23178:	f040 8139 	bne.w	233ee <gnss_interface_setopt+0x2ae>
   2317c:	49a6      	ldr	r1, [pc, #664]	; (23418 <gnss_interface_setopt+0x2d8>)
   2317e:	4288      	cmp	r0, r1
   23180:	f040 813b 	bne.w	233fa <gnss_interface_setopt+0x2ba>
   23184:	f1a2 010a 	sub.w	r1, r2, #10
   23188:	2901      	cmp	r1, #1
   2318a:	d902      	bls.n	23192 <gnss_interface_setopt+0x52>
   2318c:	2b00      	cmp	r3, #0
   2318e:	f000 8112 	beq.w	233b6 <gnss_interface_setopt+0x276>
   23192:	3a01      	subs	r2, #1
   23194:	2a0a      	cmp	r2, #10
   23196:	f200 810e 	bhi.w	233b6 <gnss_interface_setopt+0x276>
   2319a:	e8df f012 	tbh	[pc, r2, lsl #1]
   2319e:	007f      	.short	0x007f
   231a0:	0098008c 	.word	0x0098008c
   231a4:	00ae00a2 	.word	0x00ae00a2
   231a8:	00c500b9 	.word	0x00c500b9
   231ac:	00f300dd 	.word	0x00f300dd
   231b0:	000b00ff 	.word	0x000b00ff
   231b4:	682b      	ldr	r3, [r5, #0]
   231b6:	b29b      	uxth	r3, r3
   231b8:	2b04      	cmp	r3, #4
   231ba:	d1cf      	bne.n	2315c <gnss_interface_setopt+0x1c>
   231bc:	2203      	movs	r2, #3
   231be:	f241 0604 	movw	r6, #4100	; 0x1004
   231c2:	2300      	movs	r3, #0
   231c4:	4637      	mov	r7, r6
   231c6:	f88d 2008 	strb.w	r2, [sp, #8]
   231ca:	f88d 3009 	strb.w	r3, [sp, #9]
   231ce:	f88d 300a 	strb.w	r3, [sp, #10]
   231d2:	f88d 300b 	strb.w	r3, [sp, #11]
   231d6:	f88d 300c 	strb.w	r3, [sp, #12]
   231da:	682b      	ldr	r3, [r5, #0]
   231dc:	2112      	movs	r1, #18
   231de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   231e2:	4668      	mov	r0, sp
   231e4:	602b      	str	r3, [r5, #0]
   231e6:	f002 faa1 	bl	2572c <rpc_gnss_client_request_alloc>
   231ea:	4604      	mov	r4, r0
   231ec:	9800      	ldr	r0, [sp, #0]
   231ee:	2c00      	cmp	r4, #0
   231f0:	f040 80e7 	bne.w	233c2 <gnss_interface_setopt+0x282>
   231f4:	2800      	cmp	r0, #0
   231f6:	f000 80eb 	beq.w	233d0 <gnss_interface_setopt+0x290>
   231fa:	2212      	movs	r2, #18
   231fc:	f04f 0876 	mov.w	r8, #118	; 0x76
   23200:	f04f 0e49 	mov.w	lr, #73	; 0x49
   23204:	f04f 0a43 	mov.w	sl, #67	; 0x43
   23208:	f04f 0954 	mov.w	r9, #84	; 0x54
   2320c:	f8df c210 	ldr.w	ip, [pc, #528]	; 23420 <gnss_interface_setopt+0x2e0>
   23210:	a906      	add	r1, sp, #24
   23212:	f8bc 3000 	ldrh.w	r3, [ip]
   23216:	f880 800e 	strb.w	r8, [r0, #14]
   2321a:	3301      	adds	r3, #1
   2321c:	b29b      	uxth	r3, r3
   2321e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   23222:	f841 6d14 	str.w	r6, [r1, #-20]!
   23226:	7144      	strb	r4, [r0, #5]
   23228:	7184      	strb	r4, [r0, #6]
   2322a:	71c4      	strb	r4, [r0, #7]
   2322c:	7204      	strb	r4, [r0, #8]
   2322e:	7244      	strb	r4, [r0, #9]
   23230:	7284      	strb	r4, [r0, #10]
   23232:	72c4      	strb	r4, [r0, #11]
   23234:	7102      	strb	r2, [r0, #4]
   23236:	f880 a00c 	strb.w	sl, [r0, #12]
   2323a:	f880 900d 	strb.w	r9, [r0, #13]
   2323e:	f880 e00f 	strb.w	lr, [r0, #15]
   23242:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 23424 <gnss_interface_setopt+0x2e4>
   23246:	6800      	ldr	r0, [r0, #0]
   23248:	f8ac 3000 	strh.w	r3, [ip]
   2324c:	f010 fab8 	bl	337c0 <memcpy>
   23250:	4639      	mov	r1, r7
   23252:	9800      	ldr	r0, [sp, #0]
   23254:	f8c8 4000 	str.w	r4, [r8]
   23258:	f002 fa7c 	bl	25754 <rpc_gnss_client_request_send>
   2325c:	2800      	cmp	r0, #0
   2325e:	f040 80bc 	bne.w	233da <gnss_interface_setopt+0x29a>
   23262:	4f6e      	ldr	r7, [pc, #440]	; (2341c <gnss_interface_setopt+0x2dc>)
   23264:	4e6c      	ldr	r6, [pc, #432]	; (23418 <gnss_interface_setopt+0x2d8>)
   23266:	4639      	mov	r1, r7
   23268:	4630      	mov	r0, r6
   2326a:	f7f9 fd8b 	bl	1cd84 <bsd_os_timedwait>
   2326e:	682c      	ldr	r4, [r5, #0]
   23270:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   23274:	d1f7      	bne.n	23266 <gnss_interface_setopt+0x126>
   23276:	f8d8 0000 	ldr.w	r0, [r8]
   2327a:	b118      	cbz	r0, 23284 <gnss_interface_setopt+0x144>
   2327c:	f002 fa88 	bl	25790 <rpc_gnss_client_data_free>
   23280:	f8c8 4000 	str.w	r4, [r8]
   23284:	682b      	ldr	r3, [r5, #0]
   23286:	021b      	lsls	r3, r3, #8
   23288:	f140 808f 	bpl.w	233aa <gnss_interface_setopt+0x26a>
   2328c:	2000      	movs	r0, #0
   2328e:	682b      	ldr	r3, [r5, #0]
   23290:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   23294:	602b      	str	r3, [r5, #0]
   23296:	b006      	add	sp, #24
   23298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2329c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2329e:	2a02      	cmp	r2, #2
   232a0:	f040 8089 	bne.w	233b6 <gnss_interface_setopt+0x276>
   232a4:	2208      	movs	r2, #8
   232a6:	f241 1603 	movw	r6, #4355	; 0x1103
   232aa:	881b      	ldrh	r3, [r3, #0]
   232ac:	9202      	str	r2, [sp, #8]
   232ae:	f8ad 300f 	strh.w	r3, [sp, #15]
   232b2:	4637      	mov	r7, r6
   232b4:	e791      	b.n	231da <gnss_interface_setopt+0x9a>
   232b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   232b8:	2a02      	cmp	r2, #2
   232ba:	d17c      	bne.n	233b6 <gnss_interface_setopt+0x276>
   232bc:	2210      	movs	r2, #16
   232be:	f241 1603 	movw	r6, #4355	; 0x1103
   232c2:	881b      	ldrh	r3, [r3, #0]
   232c4:	9202      	str	r2, [sp, #8]
   232c6:	f8ad 3011 	strh.w	r3, [sp, #17]
   232ca:	4637      	mov	r7, r6
   232cc:	e785      	b.n	231da <gnss_interface_setopt+0x9a>
   232ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   232d0:	2a01      	cmp	r2, #1
   232d2:	d170      	bne.n	233b6 <gnss_interface_setopt+0x276>
   232d4:	781b      	ldrb	r3, [r3, #0]
   232d6:	2b01      	cmp	r3, #1
   232d8:	d16d      	bne.n	233b6 <gnss_interface_setopt+0x276>
   232da:	f241 1603 	movw	r6, #4355	; 0x1103
   232de:	4637      	mov	r7, r6
   232e0:	e77b      	b.n	231da <gnss_interface_setopt+0x9a>
   232e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   232e4:	2a02      	cmp	r2, #2
   232e6:	d166      	bne.n	233b6 <gnss_interface_setopt+0x276>
   232e8:	2220      	movs	r2, #32
   232ea:	f241 1603 	movw	r6, #4355	; 0x1103
   232ee:	881b      	ldrh	r3, [r3, #0]
   232f0:	9202      	str	r2, [sp, #8]
   232f2:	f8ad 3013 	strh.w	r3, [sp, #19]
   232f6:	4637      	mov	r7, r6
   232f8:	e76f      	b.n	231da <gnss_interface_setopt+0x9a>
   232fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   232fc:	2a01      	cmp	r2, #1
   232fe:	d15a      	bne.n	233b6 <gnss_interface_setopt+0x276>
   23300:	f241 1603 	movw	r6, #4355	; 0x1103
   23304:	781b      	ldrb	r3, [r3, #0]
   23306:	9202      	str	r2, [sp, #8]
   23308:	f88d 300c 	strb.w	r3, [sp, #12]
   2330c:	4637      	mov	r7, r6
   2330e:	e764      	b.n	231da <gnss_interface_setopt+0x9a>
   23310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23312:	2a01      	cmp	r2, #1
   23314:	d14f      	bne.n	233b6 <gnss_interface_setopt+0x276>
   23316:	2202      	movs	r2, #2
   23318:	f241 1603 	movw	r6, #4355	; 0x1103
   2331c:	781b      	ldrb	r3, [r3, #0]
   2331e:	9202      	str	r2, [sp, #8]
   23320:	f88d 300d 	strb.w	r3, [sp, #13]
   23324:	4637      	mov	r7, r6
   23326:	e758      	b.n	231da <gnss_interface_setopt+0x9a>
   23328:	682a      	ldr	r2, [r5, #0]
   2332a:	b292      	uxth	r2, r2
   2332c:	2a02      	cmp	r2, #2
   2332e:	f47f af15 	bne.w	2315c <gnss_interface_setopt+0x1c>
   23332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23334:	2a04      	cmp	r2, #4
   23336:	d13e      	bne.n	233b6 <gnss_interface_setopt+0x276>
   23338:	2101      	movs	r1, #1
   2333a:	f241 0604 	movw	r6, #4100	; 0x1004
   2333e:	682a      	ldr	r2, [r5, #0]
   23340:	6818      	ldr	r0, [r3, #0]
   23342:	0c13      	lsrs	r3, r2, #16
   23344:	041b      	lsls	r3, r3, #16
   23346:	f043 0303 	orr.w	r3, r3, #3
   2334a:	f8cd 0009 	str.w	r0, [sp, #9]
   2334e:	602b      	str	r3, [r5, #0]
   23350:	f88d 1008 	strb.w	r1, [sp, #8]
   23354:	4637      	mov	r7, r6
   23356:	e740      	b.n	231da <gnss_interface_setopt+0x9a>
   23358:	682a      	ldr	r2, [r5, #0]
   2335a:	b292      	uxth	r2, r2
   2335c:	2a04      	cmp	r2, #4
   2335e:	d004      	beq.n	2336a <gnss_interface_setopt+0x22a>
   23360:	682a      	ldr	r2, [r5, #0]
   23362:	b292      	uxth	r2, r2
   23364:	2a02      	cmp	r2, #2
   23366:	f47f aef9 	bne.w	2315c <gnss_interface_setopt+0x1c>
   2336a:	2200      	movs	r2, #0
   2336c:	f88d 2008 	strb.w	r2, [sp, #8]
   23370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23372:	2a04      	cmp	r2, #4
   23374:	d11f      	bne.n	233b6 <gnss_interface_setopt+0x276>
   23376:	f241 0604 	movw	r6, #4100	; 0x1004
   2337a:	681b      	ldr	r3, [r3, #0]
   2337c:	4637      	mov	r7, r6
   2337e:	f8cd 3009 	str.w	r3, [sp, #9]
   23382:	e72a      	b.n	231da <gnss_interface_setopt+0x9a>
   23384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23386:	2a01      	cmp	r2, #1
   23388:	d115      	bne.n	233b6 <gnss_interface_setopt+0x276>
   2338a:	2240      	movs	r2, #64	; 0x40
   2338c:	f241 1603 	movw	r6, #4355	; 0x1103
   23390:	781b      	ldrb	r3, [r3, #0]
   23392:	9202      	str	r2, [sp, #8]
   23394:	f88d 3015 	strb.w	r3, [sp, #21]
   23398:	4637      	mov	r7, r6
   2339a:	e71e      	b.n	231da <gnss_interface_setopt+0x9a>
   2339c:	682b      	ldr	r3, [r5, #0]
   2339e:	b29b      	uxth	r3, r3
   233a0:	2b04      	cmp	r3, #4
   233a2:	f47f aedb 	bne.w	2315c <gnss_interface_setopt+0x1c>
   233a6:	2202      	movs	r2, #2
   233a8:	e709      	b.n	231be <gnss_interface_setopt+0x7e>
   233aa:	200e      	movs	r0, #14
   233ac:	f7f9 fd94 	bl	1ced8 <bsd_os_errno_set>
   233b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   233b4:	e76b      	b.n	2328e <gnss_interface_setopt+0x14e>
   233b6:	2016      	movs	r0, #22
   233b8:	f7f9 fd8e 	bl	1ced8 <bsd_os_errno_set>
   233bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   233c0:	e6d1      	b.n	23166 <gnss_interface_setopt+0x26>
   233c2:	b128      	cbz	r0, 233d0 <gnss_interface_setopt+0x290>
   233c4:	6803      	ldr	r3, [r0, #0]
   233c6:	b11b      	cbz	r3, 233d0 <gnss_interface_setopt+0x290>
   233c8:	4618      	mov	r0, r3
   233ca:	f002 f9e1 	bl	25790 <rpc_gnss_client_data_free>
   233ce:	9800      	ldr	r0, [sp, #0]
   233d0:	f002 f9d6 	bl	25780 <rpc_gnss_client_message_free>
   233d4:	2023      	movs	r0, #35	; 0x23
   233d6:	f7f9 fd7f 	bl	1ced8 <bsd_os_errno_set>
   233da:	682b      	ldr	r3, [r5, #0]
   233dc:	200e      	movs	r0, #14
   233de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   233e2:	602b      	str	r3, [r5, #0]
   233e4:	f7f9 fd78 	bl	1ced8 <bsd_os_errno_set>
   233e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   233ec:	e6bb      	b.n	23166 <gnss_interface_setopt+0x26>
   233ee:	202a      	movs	r0, #42	; 0x2a
   233f0:	f7f9 fd72 	bl	1ced8 <bsd_os_errno_set>
   233f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   233f8:	e6b5      	b.n	23166 <gnss_interface_setopt+0x26>
   233fa:	2009      	movs	r0, #9
   233fc:	f7f9 fd6c 	bl	1ced8 <bsd_os_errno_set>
   23400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23404:	e6af      	b.n	23166 <gnss_interface_setopt+0x26>
   23406:	2073      	movs	r0, #115	; 0x73
   23408:	f7f9 fd66 	bl	1ced8 <bsd_os_errno_set>
   2340c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23410:	e6a9      	b.n	23166 <gnss_interface_setopt+0x26>
   23412:	bf00      	nop
   23414:	20022644 	.word	0x20022644
   23418:	49765443 	.word	0x49765443
   2341c:	20020138 	.word	0x20020138
   23420:	20027462 	.word	0x20027462
   23424:	20022648 	.word	0x20022648

00023428 <gnss_interface_getopt>:
   23428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2342c:	4c81      	ldr	r4, [pc, #516]	; (23634 <gnss_interface_getopt+0x20c>)
   2342e:	b087      	sub	sp, #28
   23430:	6825      	ldr	r5, [r4, #0]
   23432:	4698      	mov	r8, r3
   23434:	b2ad      	uxth	r5, r5
   23436:	2d02      	cmp	r5, #2
   23438:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2343a:	f040 80dd 	bne.w	235f8 <gnss_interface_getopt+0x1d0>
   2343e:	6825      	ldr	r5, [r4, #0]
   23440:	03ee      	lsls	r6, r5, #15
   23442:	f100 80eb 	bmi.w	2361c <gnss_interface_getopt+0x1f4>
   23446:	6825      	ldr	r5, [r4, #0]
   23448:	01ed      	lsls	r5, r5, #7
   2344a:	f100 80ed 	bmi.w	23628 <gnss_interface_getopt+0x200>
   2344e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   23452:	f040 80d7 	bne.w	23604 <gnss_interface_getopt+0x1dc>
   23456:	4978      	ldr	r1, [pc, #480]	; (23638 <gnss_interface_getopt+0x210>)
   23458:	4288      	cmp	r0, r1
   2345a:	f040 80d9 	bne.w	23610 <gnss_interface_getopt+0x1e8>
   2345e:	f1b8 0f00 	cmp.w	r8, #0
   23462:	d00b      	beq.n	2347c <gnss_interface_getopt+0x54>
   23464:	b153      	cbz	r3, 2347c <gnss_interface_getopt+0x54>
   23466:	1e57      	subs	r7, r2, #1
   23468:	2f05      	cmp	r7, #5
   2346a:	d807      	bhi.n	2347c <gnss_interface_getopt+0x54>
   2346c:	e8df f007 	tbb	[pc, r7]
   23470:	0f030f0f 	.word	0x0f030f0f
   23474:	0303      	.short	0x0303
   23476:	681b      	ldr	r3, [r3, #0]
   23478:	2b01      	cmp	r3, #1
   2347a:	d00b      	beq.n	23494 <gnss_interface_getopt+0x6c>
   2347c:	2016      	movs	r0, #22
   2347e:	f7f9 fd2b 	bl	1ced8 <bsd_os_errno_set>
   23482:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23486:	4628      	mov	r0, r5
   23488:	b007      	add	sp, #28
   2348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2348e:	681b      	ldr	r3, [r3, #0]
   23490:	2b02      	cmp	r3, #2
   23492:	d1f3      	bne.n	2347c <gnss_interface_getopt+0x54>
   23494:	6823      	ldr	r3, [r4, #0]
   23496:	2212      	movs	r2, #18
   23498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2349c:	2100      	movs	r1, #0
   2349e:	a801      	add	r0, sp, #4
   234a0:	6023      	str	r3, [r4, #0]
   234a2:	f010 f9c7 	bl	33834 <memset>
   234a6:	2112      	movs	r1, #18
   234a8:	4668      	mov	r0, sp
   234aa:	f002 f93f 	bl	2572c <rpc_gnss_client_request_alloc>
   234ae:	4605      	mov	r5, r0
   234b0:	9800      	ldr	r0, [sp, #0]
   234b2:	2d00      	cmp	r5, #0
   234b4:	f040 808a 	bne.w	235cc <gnss_interface_getopt+0x1a4>
   234b8:	2800      	cmp	r0, #0
   234ba:	f000 808e 	beq.w	235da <gnss_interface_getopt+0x1b2>
   234be:	f241 1602 	movw	r6, #4354	; 0x1102
   234c2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   234c6:	2212      	movs	r2, #18
   234c8:	f04f 0976 	mov.w	r9, #118	; 0x76
   234cc:	f04f 0b43 	mov.w	fp, #67	; 0x43
   234d0:	f04f 0a54 	mov.w	sl, #84	; 0x54
   234d4:	f8df c168 	ldr.w	ip, [pc, #360]	; 23640 <gnss_interface_getopt+0x218>
   234d8:	f880 e00f 	strb.w	lr, [r0, #15]
   234dc:	f8bc 3000 	ldrh.w	r3, [ip]
   234e0:	f880 900e 	strb.w	r9, [r0, #14]
   234e4:	3301      	adds	r3, #1
   234e6:	b29b      	uxth	r3, r3
   234e8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   234ec:	f8cd e004 	str.w	lr, [sp, #4]
   234f0:	7145      	strb	r5, [r0, #5]
   234f2:	7185      	strb	r5, [r0, #6]
   234f4:	71c5      	strb	r5, [r0, #7]
   234f6:	7205      	strb	r5, [r0, #8]
   234f8:	7245      	strb	r5, [r0, #9]
   234fa:	7285      	strb	r5, [r0, #10]
   234fc:	72c5      	strb	r5, [r0, #11]
   234fe:	a901      	add	r1, sp, #4
   23500:	7102      	strb	r2, [r0, #4]
   23502:	f880 b00c 	strb.w	fp, [r0, #12]
   23506:	f880 a00d 	strb.w	sl, [r0, #13]
   2350a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 23644 <gnss_interface_getopt+0x21c>
   2350e:	6800      	ldr	r0, [r0, #0]
   23510:	f8ac 3000 	strh.w	r3, [ip]
   23514:	f010 f954 	bl	337c0 <memcpy>
   23518:	4631      	mov	r1, r6
   2351a:	9800      	ldr	r0, [sp, #0]
   2351c:	f8c9 5000 	str.w	r5, [r9]
   23520:	f002 f918 	bl	25754 <rpc_gnss_client_request_send>
   23524:	2800      	cmp	r0, #0
   23526:	d15d      	bne.n	235e4 <gnss_interface_getopt+0x1bc>
   23528:	4e44      	ldr	r6, [pc, #272]	; (2363c <gnss_interface_getopt+0x214>)
   2352a:	4d43      	ldr	r5, [pc, #268]	; (23638 <gnss_interface_getopt+0x210>)
   2352c:	4631      	mov	r1, r6
   2352e:	4628      	mov	r0, r5
   23530:	f7f9 fc28 	bl	1cd84 <bsd_os_timedwait>
   23534:	6823      	ldr	r3, [r4, #0]
   23536:	01db      	lsls	r3, r3, #7
   23538:	d4f8      	bmi.n	2352c <gnss_interface_getopt+0x104>
   2353a:	f8d9 0000 	ldr.w	r0, [r9]
   2353e:	b1d8      	cbz	r0, 23578 <gnss_interface_getopt+0x150>
   23540:	6825      	ldr	r5, [r4, #0]
   23542:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   23546:	d00f      	beq.n	23568 <gnss_interface_getopt+0x140>
   23548:	2f05      	cmp	r7, #5
   2354a:	d837      	bhi.n	235bc <gnss_interface_getopt+0x194>
   2354c:	e8df f007 	tbb	[pc, r7]
   23550:	2b26201a 	.word	0x2b26201a
   23554:	0331      	.short	0x0331
   23556:	2500      	movs	r5, #0
   23558:	7b43      	ldrb	r3, [r0, #13]
   2355a:	f888 3000 	strb.w	r3, [r8]
   2355e:	f002 f917 	bl	25790 <rpc_gnss_client_data_free>
   23562:	2300      	movs	r3, #0
   23564:	f8c9 3000 	str.w	r3, [r9]
   23568:	6823      	ldr	r3, [r4, #0]
   2356a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2356e:	6023      	str	r3, [r4, #0]
   23570:	4628      	mov	r0, r5
   23572:	b007      	add	sp, #28
   23574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23578:	6823      	ldr	r3, [r4, #0]
   2357a:	4605      	mov	r5, r0
   2357c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   23580:	6023      	str	r3, [r4, #0]
   23582:	e7f5      	b.n	23570 <gnss_interface_getopt+0x148>
   23584:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   23588:	2500      	movs	r5, #0
   2358a:	f8a8 3000 	strh.w	r3, [r8]
   2358e:	e7e6      	b.n	2355e <gnss_interface_getopt+0x136>
   23590:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   23594:	2500      	movs	r5, #0
   23596:	f8a8 3000 	strh.w	r3, [r8]
   2359a:	e7e0      	b.n	2355e <gnss_interface_getopt+0x136>
   2359c:	7b83      	ldrb	r3, [r0, #14]
   2359e:	2500      	movs	r5, #0
   235a0:	f888 3000 	strb.w	r3, [r8]
   235a4:	e7db      	b.n	2355e <gnss_interface_getopt+0x136>
   235a6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   235aa:	2500      	movs	r5, #0
   235ac:	f8a8 3000 	strh.w	r3, [r8]
   235b0:	e7d5      	b.n	2355e <gnss_interface_getopt+0x136>
   235b2:	7b03      	ldrb	r3, [r0, #12]
   235b4:	2500      	movs	r5, #0
   235b6:	f888 3000 	strb.w	r3, [r8]
   235ba:	e7d0      	b.n	2355e <gnss_interface_getopt+0x136>
   235bc:	2016      	movs	r0, #22
   235be:	f7f9 fc8b 	bl	1ced8 <bsd_os_errno_set>
   235c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   235c6:	f8d9 0000 	ldr.w	r0, [r9]
   235ca:	e7c8      	b.n	2355e <gnss_interface_getopt+0x136>
   235cc:	b128      	cbz	r0, 235da <gnss_interface_getopt+0x1b2>
   235ce:	6803      	ldr	r3, [r0, #0]
   235d0:	b11b      	cbz	r3, 235da <gnss_interface_getopt+0x1b2>
   235d2:	4618      	mov	r0, r3
   235d4:	f002 f8dc 	bl	25790 <rpc_gnss_client_data_free>
   235d8:	9800      	ldr	r0, [sp, #0]
   235da:	f002 f8d1 	bl	25780 <rpc_gnss_client_message_free>
   235de:	2023      	movs	r0, #35	; 0x23
   235e0:	f7f9 fc7a 	bl	1ced8 <bsd_os_errno_set>
   235e4:	6823      	ldr	r3, [r4, #0]
   235e6:	200e      	movs	r0, #14
   235e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   235ec:	6023      	str	r3, [r4, #0]
   235ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   235f2:	f7f9 fc71 	bl	1ced8 <bsd_os_errno_set>
   235f6:	e746      	b.n	23486 <gnss_interface_getopt+0x5e>
   235f8:	200e      	movs	r0, #14
   235fa:	f7f9 fc6d 	bl	1ced8 <bsd_os_errno_set>
   235fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23602:	e740      	b.n	23486 <gnss_interface_getopt+0x5e>
   23604:	202a      	movs	r0, #42	; 0x2a
   23606:	f7f9 fc67 	bl	1ced8 <bsd_os_errno_set>
   2360a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2360e:	e73a      	b.n	23486 <gnss_interface_getopt+0x5e>
   23610:	2009      	movs	r0, #9
   23612:	f7f9 fc61 	bl	1ced8 <bsd_os_errno_set>
   23616:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2361a:	e734      	b.n	23486 <gnss_interface_getopt+0x5e>
   2361c:	2005      	movs	r0, #5
   2361e:	f7f9 fc5b 	bl	1ced8 <bsd_os_errno_set>
   23622:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23626:	e72e      	b.n	23486 <gnss_interface_getopt+0x5e>
   23628:	2073      	movs	r0, #115	; 0x73
   2362a:	f7f9 fc55 	bl	1ced8 <bsd_os_errno_set>
   2362e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23632:	e728      	b.n	23486 <gnss_interface_getopt+0x5e>
   23634:	20022644 	.word	0x20022644
   23638:	49765443 	.word	0x49765443
   2363c:	20020138 	.word	0x20020138
   23640:	20027462 	.word	0x20027462
   23644:	20022648 	.word	0x20022648

00023648 <gnss_interface_init>:
   23648:	2100      	movs	r1, #0
   2364a:	b538      	push	{r3, r4, r5, lr}
   2364c:	4c0a      	ldr	r4, [pc, #40]	; (23678 <gnss_interface_init+0x30>)
   2364e:	4d0b      	ldr	r5, [pc, #44]	; (2367c <gnss_interface_init+0x34>)
   23650:	6822      	ldr	r2, [r4, #0]
   23652:	480b      	ldr	r0, [pc, #44]	; (23680 <gnss_interface_init+0x38>)
   23654:	4b0b      	ldr	r3, [pc, #44]	; (23684 <gnss_interface_init+0x3c>)
   23656:	402a      	ands	r2, r5
   23658:	6022      	str	r2, [r4, #0]
   2365a:	8001      	strh	r1, [r0, #0]
   2365c:	6019      	str	r1, [r3, #0]
   2365e:	f002 f85f 	bl	25720 <rpc_gnss_client_init>
   23662:	b938      	cbnz	r0, 23674 <gnss_interface_init+0x2c>
   23664:	2101      	movs	r1, #1
   23666:	6823      	ldr	r3, [r4, #0]
   23668:	4a07      	ldr	r2, [pc, #28]	; (23688 <gnss_interface_init+0x40>)
   2366a:	402b      	ands	r3, r5
   2366c:	430b      	orrs	r3, r1
   2366e:	7011      	strb	r1, [r2, #0]
   23670:	6023      	str	r3, [r4, #0]
   23672:	bd38      	pop	{r3, r4, r5, pc}
   23674:	2003      	movs	r0, #3
   23676:	bd38      	pop	{r3, r4, r5, pc}
   23678:	20022644 	.word	0x20022644
   2367c:	ffff0000 	.word	0xffff0000
   23680:	20027462 	.word	0x20027462
   23684:	20022648 	.word	0x20022648
   23688:	20028e89 	.word	0x20028e89

0002368c <gnss_interface_open>:
   2368c:	b510      	push	{r4, lr}
   2368e:	4b1c      	ldr	r3, [pc, #112]	; (23700 <gnss_interface_open+0x74>)
   23690:	781b      	ldrb	r3, [r3, #0]
   23692:	b34b      	cbz	r3, 236e8 <gnss_interface_open+0x5c>
   23694:	2902      	cmp	r1, #2
   23696:	d121      	bne.n	236dc <gnss_interface_open+0x50>
   23698:	4c1a      	ldr	r4, [pc, #104]	; (23704 <gnss_interface_open+0x78>)
   2369a:	6823      	ldr	r3, [r4, #0]
   2369c:	b29b      	uxth	r3, r3
   2369e:	2b01      	cmp	r3, #1
   236a0:	d116      	bne.n	236d0 <gnss_interface_open+0x44>
   236a2:	6823      	ldr	r3, [r4, #0]
   236a4:	4608      	mov	r0, r1
   236a6:	0c1b      	lsrs	r3, r3, #16
   236a8:	041b      	lsls	r3, r3, #16
   236aa:	f043 0302 	orr.w	r3, r3, #2
   236ae:	2200      	movs	r2, #0
   236b0:	4915      	ldr	r1, [pc, #84]	; (23708 <gnss_interface_open+0x7c>)
   236b2:	6023      	str	r3, [r4, #0]
   236b4:	f002 f956 	bl	25964 <packet_handler_create>
   236b8:	4a14      	ldr	r2, [pc, #80]	; (2370c <gnss_interface_open+0x80>)
   236ba:	6010      	str	r0, [r2, #0]
   236bc:	b1d0      	cbz	r0, 236f4 <gnss_interface_open+0x68>
   236be:	6823      	ldr	r3, [r4, #0]
   236c0:	6802      	ldr	r2, [r0, #0]
   236c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   236c6:	6812      	ldr	r2, [r2, #0]
   236c8:	6023      	str	r3, [r4, #0]
   236ca:	4790      	blx	r2
   236cc:	4810      	ldr	r0, [pc, #64]	; (23710 <gnss_interface_open+0x84>)
   236ce:	bd10      	pop	{r4, pc}
   236d0:	2005      	movs	r0, #5
   236d2:	f7f9 fc01 	bl	1ced8 <bsd_os_errno_set>
   236d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   236da:	bd10      	pop	{r4, pc}
   236dc:	2029      	movs	r0, #41	; 0x29
   236de:	f7f9 fbfb 	bl	1ced8 <bsd_os_errno_set>
   236e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   236e6:	bd10      	pop	{r4, pc}
   236e8:	2070      	movs	r0, #112	; 0x70
   236ea:	f7f9 fbf5 	bl	1ced8 <bsd_os_errno_set>
   236ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   236f2:	bd10      	pop	{r4, pc}
   236f4:	200e      	movs	r0, #14
   236f6:	f7f9 fbef 	bl	1ced8 <bsd_os_errno_set>
   236fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   236fe:	bd10      	pop	{r4, pc}
   23700:	20028e89 	.word	0x20028e89
   23704:	20022644 	.word	0x20022644
   23708:	00022985 	.word	0x00022985
   2370c:	2002264c 	.word	0x2002264c
   23710:	49765443 	.word	0x49765443

00023714 <gnss_interface_close>:
   23714:	b530      	push	{r4, r5, lr}
   23716:	4b15      	ldr	r3, [pc, #84]	; (2376c <gnss_interface_close+0x58>)
   23718:	b085      	sub	sp, #20
   2371a:	4298      	cmp	r0, r3
   2371c:	d11f      	bne.n	2375e <gnss_interface_close+0x4a>
   2371e:	4c14      	ldr	r4, [pc, #80]	; (23770 <gnss_interface_close+0x5c>)
   23720:	6822      	ldr	r2, [r4, #0]
   23722:	b292      	uxth	r2, r2
   23724:	2a04      	cmp	r2, #4
   23726:	d00f      	beq.n	23748 <gnss_interface_close+0x34>
   23728:	4d12      	ldr	r5, [pc, #72]	; (23774 <gnss_interface_close+0x60>)
   2372a:	6828      	ldr	r0, [r5, #0]
   2372c:	b118      	cbz	r0, 23736 <gnss_interface_close+0x22>
   2372e:	f002 f939 	bl	259a4 <packet_handler_delete>
   23732:	2300      	movs	r3, #0
   23734:	602b      	str	r3, [r5, #0]
   23736:	2000      	movs	r0, #0
   23738:	6823      	ldr	r3, [r4, #0]
   2373a:	0c1b      	lsrs	r3, r3, #16
   2373c:	041b      	lsls	r3, r3, #16
   2373e:	f043 0301 	orr.w	r3, r3, #1
   23742:	6023      	str	r3, [r4, #0]
   23744:	b005      	add	sp, #20
   23746:	bd30      	pop	{r4, r5, pc}
   23748:	2100      	movs	r1, #0
   2374a:	ab04      	add	r3, sp, #16
   2374c:	f843 1d04 	str.w	r1, [r3, #-4]!
   23750:	9200      	str	r2, [sp, #0]
   23752:	f44f 7101 	mov.w	r1, #516	; 0x204
   23756:	2208      	movs	r2, #8
   23758:	f001 fe62 	bl	25420 <nrf_setsockopt>
   2375c:	e7e4      	b.n	23728 <gnss_interface_close+0x14>
   2375e:	2009      	movs	r0, #9
   23760:	f7f9 fbba 	bl	1ced8 <bsd_os_errno_set>
   23764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23768:	e7ec      	b.n	23744 <gnss_interface_close+0x30>
   2376a:	bf00      	nop
   2376c:	49765443 	.word	0x49765443
   23770:	20022644 	.word	0x20022644
   23774:	2002264c 	.word	0x2002264c

00023778 <rpc_logobj_client_evt_handler>:
   23778:	b120      	cbz	r0, 23784 <rpc_logobj_client_evt_handler+0xc>
   2377a:	f850 1b08 	ldr.w	r1, [r0], #8
   2377e:	0c09      	lsrs	r1, r1, #16
   23780:	f7fb b8c8 	b.w	1e914 <logobj_event_handler>
   23784:	4770      	bx	lr
   23786:	bf00      	nop

00023788 <rpc_logobj_client_init>:
   23788:	4801      	ldr	r0, [pc, #4]	; (23790 <rpc_logobj_client_init+0x8>)
   2378a:	f7ff b83d 	b.w	22808 <rpc_client_register>
   2378e:	bf00      	nop
   23790:	00034db0 	.word	0x00034db0

00023794 <rpc_logobj_client_request_alloc>:
   23794:	2300      	movs	r3, #0
   23796:	b510      	push	{r4, lr}
   23798:	b082      	sub	sp, #8
   2379a:	9301      	str	r3, [sp, #4]
   2379c:	b961      	cbnz	r1, 237b8 <rpc_logobj_client_request_alloc+0x24>
   2379e:	b170      	cbz	r0, 237be <rpc_logobj_client_request_alloc+0x2a>
   237a0:	4604      	mov	r4, r0
   237a2:	aa01      	add	r2, sp, #4
   237a4:	2009      	movs	r0, #9
   237a6:	f7ff f8a9 	bl	228fc <rpc_message_alloc>
   237aa:	b918      	cbnz	r0, 237b4 <rpc_logobj_client_request_alloc+0x20>
   237ac:	9b01      	ldr	r3, [sp, #4]
   237ae:	b10b      	cbz	r3, 237b4 <rpc_logobj_client_request_alloc+0x20>
   237b0:	3308      	adds	r3, #8
   237b2:	6023      	str	r3, [r4, #0]
   237b4:	b002      	add	sp, #8
   237b6:	bd10      	pop	{r4, pc}
   237b8:	200f      	movs	r0, #15
   237ba:	b002      	add	sp, #8
   237bc:	bd10      	pop	{r4, pc}
   237be:	200e      	movs	r0, #14
   237c0:	b002      	add	sp, #8
   237c2:	bd10      	pop	{r4, pc}

000237c4 <rpc_logobj_client_request_send>:
   237c4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   237c8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   237cc:	d10b      	bne.n	237e6 <rpc_logobj_client_request_send+0x22>
   237ce:	b160      	cbz	r0, 237ea <rpc_logobj_client_request_send+0x26>
   237d0:	4603      	mov	r3, r0
   237d2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   237d6:	2009      	movs	r0, #9
   237d8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   237dc:	f843 1d08 	str.w	r1, [r3, #-8]!
   237e0:	4619      	mov	r1, r3
   237e2:	f7ff b87b 	b.w	228dc <rpc_message_send>
   237e6:	200f      	movs	r0, #15
   237e8:	4770      	bx	lr
   237ea:	200e      	movs	r0, #14
   237ec:	4770      	bx	lr
   237ee:	bf00      	nop

000237f0 <rpc_logobj_client_message_free>:
   237f0:	b120      	cbz	r0, 237fc <rpc_logobj_client_message_free+0xc>
   237f2:	f1a0 0108 	sub.w	r1, r0, #8
   237f6:	2009      	movs	r0, #9
   237f8:	f7ff b8ac 	b.w	22954 <rpc_message_free>
   237fc:	200e      	movs	r0, #14
   237fe:	4770      	bx	lr

00023800 <rpc_logobj_client_data_free>:
   23800:	b118      	cbz	r0, 2380a <rpc_logobj_client_data_free+0xa>
   23802:	4601      	mov	r1, r0
   23804:	2009      	movs	r0, #9
   23806:	f7ff b8b1 	b.w	2296c <rpc_message_data_free>
   2380a:	200e      	movs	r0, #14
   2380c:	4770      	bx	lr
   2380e:	bf00      	nop

00023810 <dfu_client_event_handler>:
   23810:	f850 1b08 	ldr.w	r1, [r0], #8
   23814:	0c09      	lsrs	r1, r1, #16
   23816:	f002 bdcb 	b.w	263b0 <rpc_dfu_event_handler>
   2381a:	bf00      	nop

0002381c <rpc_dfu_client_init>:
   2381c:	4801      	ldr	r0, [pc, #4]	; (23824 <rpc_dfu_client_init+0x8>)
   2381e:	f7fe bff3 	b.w	22808 <rpc_client_register>
   23822:	bf00      	nop
   23824:	00034dc0 	.word	0x00034dc0

00023828 <rpc_dfu_client_request_alloc>:
   23828:	2300      	movs	r3, #0
   2382a:	b510      	push	{r4, lr}
   2382c:	b082      	sub	sp, #8
   2382e:	9301      	str	r3, [sp, #4]
   23830:	b158      	cbz	r0, 2384a <rpc_dfu_client_request_alloc+0x22>
   23832:	4604      	mov	r4, r0
   23834:	aa01      	add	r2, sp, #4
   23836:	2006      	movs	r0, #6
   23838:	f7ff f860 	bl	228fc <rpc_message_alloc>
   2383c:	b918      	cbnz	r0, 23846 <rpc_dfu_client_request_alloc+0x1e>
   2383e:	9b01      	ldr	r3, [sp, #4]
   23840:	b10b      	cbz	r3, 23846 <rpc_dfu_client_request_alloc+0x1e>
   23842:	3308      	adds	r3, #8
   23844:	6023      	str	r3, [r4, #0]
   23846:	b002      	add	sp, #8
   23848:	bd10      	pop	{r4, pc}
   2384a:	2007      	movs	r0, #7
   2384c:	b002      	add	sp, #8
   2384e:	bd10      	pop	{r4, pc}

00023850 <rpc_dfu_client_request_send>:
   23850:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   23854:	d10b      	bne.n	2386e <rpc_dfu_client_request_send+0x1e>
   23856:	b160      	cbz	r0, 23872 <rpc_dfu_client_request_send+0x22>
   23858:	4603      	mov	r3, r0
   2385a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2385e:	2006      	movs	r0, #6
   23860:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   23864:	f843 1d08 	str.w	r1, [r3, #-8]!
   23868:	4619      	mov	r1, r3
   2386a:	f7ff b837 	b.w	228dc <rpc_message_send>
   2386e:	200f      	movs	r0, #15
   23870:	4770      	bx	lr
   23872:	2007      	movs	r0, #7
   23874:	4770      	bx	lr
   23876:	bf00      	nop

00023878 <rpc_dfu_client_message_free>:
   23878:	b120      	cbz	r0, 23884 <rpc_dfu_client_message_free+0xc>
   2387a:	f1a0 0108 	sub.w	r1, r0, #8
   2387e:	2006      	movs	r0, #6
   23880:	f7ff b868 	b.w	22954 <rpc_message_free>
   23884:	2007      	movs	r0, #7
   23886:	4770      	bx	lr

00023888 <rpc_dfu_client_data_free>:
   23888:	b118      	cbz	r0, 23892 <rpc_dfu_client_data_free+0xa>
   2388a:	4601      	mov	r1, r0
   2388c:	2006      	movs	r0, #6
   2388e:	f7ff b86d 	b.w	2296c <rpc_message_data_free>
   23892:	2007      	movs	r0, #7
   23894:	4770      	bx	lr
   23896:	bf00      	nop

00023898 <packet_free_cb>:
   23898:	6800      	ldr	r0, [r0, #0]
   2389a:	f003 bae3 	b.w	26e64 <rpc_at_client_data_free>
   2389e:	bf00      	nop

000238a0 <at_interface_write>:
   238a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238a4:	b083      	sub	sp, #12
   238a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   238a8:	2c00      	cmp	r4, #0
   238aa:	d16c      	bne.n	23986 <at_interface_write+0xe6>
   238ac:	4688      	mov	r8, r1
   238ae:	4615      	mov	r5, r2
   238b0:	461e      	mov	r6, r3
   238b2:	4607      	mov	r7, r0
   238b4:	f003 f9a8 	bl	26c08 <interface_socket_from_handle_get>
   238b8:	4604      	mov	r4, r0
   238ba:	2e00      	cmp	r6, #0
   238bc:	d137      	bne.n	2392e <at_interface_write+0x8e>
   238be:	2800      	cmp	r0, #0
   238c0:	d067      	beq.n	23992 <at_interface_write+0xf2>
   238c2:	6803      	ldr	r3, [r0, #0]
   238c4:	039b      	lsls	r3, r3, #14
   238c6:	d564      	bpl.n	23992 <at_interface_write+0xf2>
   238c8:	6803      	ldr	r3, [r0, #0]
   238ca:	4629      	mov	r1, r5
   238cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   238d0:	6003      	str	r3, [r0, #0]
   238d2:	6803      	ldr	r3, [r0, #0]
   238d4:	4668      	mov	r0, sp
   238d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   238da:	6023      	str	r3, [r4, #0]
   238dc:	f003 fa98 	bl	26e10 <rpc_at_client_request_alloc>
   238e0:	4606      	mov	r6, r0
   238e2:	4638      	mov	r0, r7
   238e4:	f003 f990 	bl	26c08 <interface_socket_from_handle_get>
   238e8:	4681      	mov	r9, r0
   238ea:	bb56      	cbnz	r6, 23942 <at_interface_write+0xa2>
   238ec:	2304      	movs	r3, #4
   238ee:	9800      	ldr	r0, [sp, #0]
   238f0:	7203      	strb	r3, [r0, #8]
   238f2:	7246      	strb	r6, [r0, #9]
   238f4:	7286      	strb	r6, [r0, #10]
   238f6:	72c6      	strb	r6, [r0, #11]
   238f8:	60c7      	str	r7, [r0, #12]
   238fa:	bb25      	cbnz	r5, 23946 <at_interface_write+0xa6>
   238fc:	2101      	movs	r1, #1
   238fe:	f003 fa9b 	bl	26e38 <rpc_at_client_request_send>
   23902:	bb78      	cbnz	r0, 23964 <at_interface_write+0xc4>
   23904:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   23908:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2390c:	2900      	cmp	r1, #0
   2390e:	bf08      	it	eq
   23910:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   23914:	ab02      	add	r3, sp, #8
   23916:	f843 1d04 	str.w	r1, [r3, #-4]!
   2391a:	4638      	mov	r0, r7
   2391c:	4611      	mov	r1, r2
   2391e:	f003 f8ff 	bl	26b20 <interface_socket_wait>
   23922:	b320      	cbz	r0, 2396e <at_interface_write+0xce>
   23924:	6823      	ldr	r3, [r4, #0]
   23926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2392a:	6023      	str	r3, [r4, #0]
   2392c:	e002      	b.n	23934 <at_interface_write+0x94>
   2392e:	b390      	cbz	r0, 23996 <at_interface_write+0xf6>
   23930:	6803      	ldr	r3, [r0, #0]
   23932:	202d      	movs	r0, #45	; 0x2d
   23934:	f7f9 fad0 	bl	1ced8 <bsd_os_errno_set>
   23938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2393c:	b003      	add	sp, #12
   2393e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23942:	200c      	movs	r0, #12
   23944:	e7ee      	b.n	23924 <at_interface_write+0x84>
   23946:	4641      	mov	r1, r8
   23948:	6800      	ldr	r0, [r0, #0]
   2394a:	462a      	mov	r2, r5
   2394c:	f00f ff38 	bl	337c0 <memcpy>
   23950:	2101      	movs	r1, #1
   23952:	9800      	ldr	r0, [sp, #0]
   23954:	f003 fa70 	bl	26e38 <rpc_at_client_request_send>
   23958:	2800      	cmp	r0, #0
   2395a:	d0d3      	beq.n	23904 <at_interface_write+0x64>
   2395c:	9b00      	ldr	r3, [sp, #0]
   2395e:	6818      	ldr	r0, [r3, #0]
   23960:	f003 fa80 	bl	26e64 <rpc_at_client_data_free>
   23964:	9800      	ldr	r0, [sp, #0]
   23966:	f003 fa75 	bl	26e54 <rpc_at_client_message_free>
   2396a:	2023      	movs	r0, #35	; 0x23
   2396c:	e7da      	b.n	23924 <at_interface_write+0x84>
   2396e:	4638      	mov	r0, r7
   23970:	f003 f94a 	bl	26c08 <interface_socket_from_handle_get>
   23974:	4603      	mov	r3, r0
   23976:	b120      	cbz	r0, 23982 <at_interface_write+0xe2>
   23978:	6840      	ldr	r0, [r0, #4]
   2397a:	b110      	cbz	r0, 23982 <at_interface_write+0xe2>
   2397c:	2200      	movs	r2, #0
   2397e:	605a      	str	r2, [r3, #4]
   23980:	e7d0      	b.n	23924 <at_interface_write+0x84>
   23982:	4628      	mov	r0, r5
   23984:	e7da      	b.n	2393c <at_interface_write+0x9c>
   23986:	2038      	movs	r0, #56	; 0x38
   23988:	f7f9 faa6 	bl	1ced8 <bsd_os_errno_set>
   2398c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23990:	e7d4      	b.n	2393c <at_interface_write+0x9c>
   23992:	2016      	movs	r0, #22
   23994:	e7ce      	b.n	23934 <at_interface_write+0x94>
   23996:	202d      	movs	r0, #45	; 0x2d
   23998:	e7cc      	b.n	23934 <at_interface_write+0x94>
   2399a:	bf00      	nop

0002399c <at_interface_init>:
   2399c:	b508      	push	{r3, lr}
   2399e:	f003 fa31 	bl	26e04 <rpc_at_client_init>
   239a2:	b910      	cbnz	r0, 239aa <at_interface_init+0xe>
   239a4:	2201      	movs	r2, #1
   239a6:	4b01      	ldr	r3, [pc, #4]	; (239ac <at_interface_init+0x10>)
   239a8:	701a      	strb	r2, [r3, #0]
   239aa:	bd08      	pop	{r3, pc}
   239ac:	20028e8a 	.word	0x20028e8a

000239b0 <at_interface_open>:
   239b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239b4:	2600      	movs	r6, #0
   239b6:	4b34      	ldr	r3, [pc, #208]	; (23a88 <at_interface_open+0xd8>)
   239b8:	b084      	sub	sp, #16
   239ba:	781b      	ldrb	r3, [r3, #0]
   239bc:	9601      	str	r6, [sp, #4]
   239be:	2b00      	cmp	r3, #0
   239c0:	d05c      	beq.n	23a7c <at_interface_open+0xcc>
   239c2:	2902      	cmp	r1, #2
   239c4:	460d      	mov	r5, r1
   239c6:	d153      	bne.n	23a70 <at_interface_open+0xc0>
   239c8:	4680      	mov	r8, r0
   239ca:	4617      	mov	r7, r2
   239cc:	a801      	add	r0, sp, #4
   239ce:	4a2f      	ldr	r2, [pc, #188]	; (23a8c <at_interface_open+0xdc>)
   239d0:	f002 fff4 	bl	269bc <interface_socket_allocate>
   239d4:	9b01      	ldr	r3, [sp, #4]
   239d6:	4604      	mov	r4, r0
   239d8:	b3c3      	cbz	r3, 23a4c <at_interface_open+0x9c>
   239da:	615f      	str	r7, [r3, #20]
   239dc:	4631      	mov	r1, r6
   239de:	e9c3 8503 	strd	r8, r5, [r3, #12]
   239e2:	a802      	add	r0, sp, #8
   239e4:	f003 fa14 	bl	26e10 <rpc_at_client_request_alloc>
   239e8:	4606      	mov	r6, r0
   239ea:	4620      	mov	r0, r4
   239ec:	f003 f90c 	bl	26c08 <interface_socket_from_handle_get>
   239f0:	4607      	mov	r7, r0
   239f2:	bb16      	cbnz	r6, 23a3a <at_interface_open+0x8a>
   239f4:	2304      	movs	r3, #4
   239f6:	9802      	ldr	r0, [sp, #8]
   239f8:	2105      	movs	r1, #5
   239fa:	7246      	strb	r6, [r0, #9]
   239fc:	7286      	strb	r6, [r0, #10]
   239fe:	72c6      	strb	r6, [r0, #11]
   23a00:	7203      	strb	r3, [r0, #8]
   23a02:	60c4      	str	r4, [r0, #12]
   23a04:	f003 fa18 	bl	26e38 <rpc_at_client_request_send>
   23a08:	4606      	mov	r6, r0
   23a0a:	bb60      	cbnz	r0, 23a66 <at_interface_open+0xb6>
   23a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23a0e:	ab04      	add	r3, sp, #16
   23a10:	2a00      	cmp	r2, #0
   23a12:	bf08      	it	eq
   23a14:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   23a18:	4629      	mov	r1, r5
   23a1a:	f843 2d04 	str.w	r2, [r3, #-4]!
   23a1e:	4620      	mov	r0, r4
   23a20:	462a      	mov	r2, r5
   23a22:	f003 f87d 	bl	26b20 <interface_socket_wait>
   23a26:	4605      	mov	r5, r0
   23a28:	b940      	cbnz	r0, 23a3c <at_interface_open+0x8c>
   23a2a:	4620      	mov	r0, r4
   23a2c:	f003 f8ec 	bl	26c08 <interface_socket_from_handle_get>
   23a30:	b180      	cbz	r0, 23a54 <at_interface_open+0xa4>
   23a32:	6845      	ldr	r5, [r0, #4]
   23a34:	b175      	cbz	r5, 23a54 <at_interface_open+0xa4>
   23a36:	6046      	str	r6, [r0, #4]
   23a38:	e000      	b.n	23a3c <at_interface_open+0x8c>
   23a3a:	250c      	movs	r5, #12
   23a3c:	4620      	mov	r0, r4
   23a3e:	f003 f821 	bl	26a84 <interface_socket_free>
   23a42:	4628      	mov	r0, r5
   23a44:	f7f9 fa48 	bl	1ced8 <bsd_os_errno_set>
   23a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23a4c:	4620      	mov	r0, r4
   23a4e:	b004      	add	sp, #16
   23a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23a54:	4620      	mov	r0, r4
   23a56:	9a01      	ldr	r2, [sp, #4]
   23a58:	6813      	ldr	r3, [r2, #0]
   23a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23a5e:	6013      	str	r3, [r2, #0]
   23a60:	b004      	add	sp, #16
   23a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23a66:	9802      	ldr	r0, [sp, #8]
   23a68:	f003 f9f4 	bl	26e54 <rpc_at_client_message_free>
   23a6c:	2523      	movs	r5, #35	; 0x23
   23a6e:	e7e5      	b.n	23a3c <at_interface_open+0x8c>
   23a70:	2029      	movs	r0, #41	; 0x29
   23a72:	f7f9 fa31 	bl	1ced8 <bsd_os_errno_set>
   23a76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23a7a:	e7e7      	b.n	23a4c <at_interface_open+0x9c>
   23a7c:	2070      	movs	r0, #112	; 0x70
   23a7e:	f7f9 fa2b 	bl	1ced8 <bsd_os_errno_set>
   23a82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23a86:	e7e1      	b.n	23a4c <at_interface_open+0x9c>
   23a88:	20028e8a 	.word	0x20028e8a
   23a8c:	00023899 	.word	0x00023899

00023a90 <at_interface_close>:
   23a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a94:	b082      	sub	sp, #8
   23a96:	4606      	mov	r6, r0
   23a98:	f003 f8b6 	bl	26c08 <interface_socket_from_handle_get>
   23a9c:	2800      	cmp	r0, #0
   23a9e:	d051      	beq.n	23b44 <at_interface_close+0xb4>
   23aa0:	230d      	movs	r3, #13
   23aa2:	6807      	ldr	r7, [r0, #0]
   23aa4:	6003      	str	r3, [r0, #0]
   23aa6:	6803      	ldr	r3, [r0, #0]
   23aa8:	4604      	mov	r4, r0
   23aaa:	039b      	lsls	r3, r3, #14
   23aac:	d42e      	bmi.n	23b0c <at_interface_close+0x7c>
   23aae:	2100      	movs	r1, #0
   23ab0:	4668      	mov	r0, sp
   23ab2:	f003 f9ad 	bl	26e10 <rpc_at_client_request_alloc>
   23ab6:	4605      	mov	r5, r0
   23ab8:	4630      	mov	r0, r6
   23aba:	f003 f8a5 	bl	26c08 <interface_socket_from_handle_get>
   23abe:	4680      	mov	r8, r0
   23ac0:	bb75      	cbnz	r5, 23b20 <at_interface_close+0x90>
   23ac2:	2304      	movs	r3, #4
   23ac4:	9800      	ldr	r0, [sp, #0]
   23ac6:	2106      	movs	r1, #6
   23ac8:	7203      	strb	r3, [r0, #8]
   23aca:	7245      	strb	r5, [r0, #9]
   23acc:	7285      	strb	r5, [r0, #10]
   23ace:	72c5      	strb	r5, [r0, #11]
   23ad0:	60c6      	str	r6, [r0, #12]
   23ad2:	f003 f9b1 	bl	26e38 <rpc_at_client_request_send>
   23ad6:	b9f0      	cbnz	r0, 23b16 <at_interface_close+0x86>
   23ad8:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   23adc:	220e      	movs	r2, #14
   23ade:	2900      	cmp	r1, #0
   23ae0:	bf08      	it	eq
   23ae2:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   23ae6:	ab02      	add	r3, sp, #8
   23ae8:	f843 1d04 	str.w	r1, [r3, #-4]!
   23aec:	4630      	mov	r0, r6
   23aee:	4611      	mov	r1, r2
   23af0:	f003 f816 	bl	26b20 <interface_socket_wait>
   23af4:	4605      	mov	r5, r0
   23af6:	b1a8      	cbz	r0, 23b24 <at_interface_close+0x94>
   23af8:	6027      	str	r7, [r4, #0]
   23afa:	4628      	mov	r0, r5
   23afc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b00:	f7f9 f9ea 	bl	1ced8 <bsd_os_errno_set>
   23b04:	4628      	mov	r0, r5
   23b06:	b002      	add	sp, #8
   23b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b0c:	6803      	ldr	r3, [r0, #0]
   23b0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23b12:	6003      	str	r3, [r0, #0]
   23b14:	e7cb      	b.n	23aae <at_interface_close+0x1e>
   23b16:	9800      	ldr	r0, [sp, #0]
   23b18:	f003 f99c 	bl	26e54 <rpc_at_client_message_free>
   23b1c:	2523      	movs	r5, #35	; 0x23
   23b1e:	e7eb      	b.n	23af8 <at_interface_close+0x68>
   23b20:	250c      	movs	r5, #12
   23b22:	e7e9      	b.n	23af8 <at_interface_close+0x68>
   23b24:	4630      	mov	r0, r6
   23b26:	f003 f86f 	bl	26c08 <interface_socket_from_handle_get>
   23b2a:	b120      	cbz	r0, 23b36 <at_interface_close+0xa6>
   23b2c:	6843      	ldr	r3, [r0, #4]
   23b2e:	b113      	cbz	r3, 23b36 <at_interface_close+0xa6>
   23b30:	6045      	str	r5, [r0, #4]
   23b32:	461d      	mov	r5, r3
   23b34:	e7e0      	b.n	23af8 <at_interface_close+0x68>
   23b36:	4630      	mov	r0, r6
   23b38:	f002 ffa4 	bl	26a84 <interface_socket_free>
   23b3c:	4628      	mov	r0, r5
   23b3e:	b002      	add	sp, #8
   23b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b44:	2516      	movs	r5, #22
   23b46:	e7d8      	b.n	23afa <at_interface_close+0x6a>

00023b48 <at_interface_read>:
   23b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23b4c:	b087      	sub	sp, #28
   23b4e:	4688      	mov	r8, r1
   23b50:	4615      	mov	r5, r2
   23b52:	461e      	mov	r6, r3
   23b54:	4607      	mov	r7, r0
   23b56:	f003 f857 	bl	26c08 <interface_socket_from_handle_get>
   23b5a:	2800      	cmp	r0, #0
   23b5c:	d056      	beq.n	23c0c <at_interface_read+0xc4>
   23b5e:	2300      	movs	r3, #0
   23b60:	4604      	mov	r4, r0
   23b62:	e9cd 8502 	strd	r8, r5, [sp, #8]
   23b66:	e9cd 3304 	strd	r3, r3, [sp, #16]
   23b6a:	bb66      	cbnz	r6, 23bc6 <at_interface_read+0x7e>
   23b6c:	f016 0502 	ands.w	r5, r6, #2
   23b70:	d136      	bne.n	23be0 <at_interface_read+0x98>
   23b72:	46a8      	mov	r8, r5
   23b74:	6823      	ldr	r3, [r4, #0]
   23b76:	69e0      	ldr	r0, [r4, #28]
   23b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   23b7c:	6023      	str	r3, [r4, #0]
   23b7e:	6803      	ldr	r3, [r0, #0]
   23b80:	4632      	mov	r2, r6
   23b82:	689b      	ldr	r3, [r3, #8]
   23b84:	a902      	add	r1, sp, #8
   23b86:	4798      	blx	r3
   23b88:	f1b0 0900 	subs.w	r9, r0, #0
   23b8c:	da38      	bge.n	23c00 <at_interface_read+0xb8>
   23b8e:	bb05      	cbnz	r5, 23bd2 <at_interface_read+0x8a>
   23b90:	6a25      	ldr	r5, [r4, #32]
   23b92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   23b96:	2d00      	cmp	r5, #0
   23b98:	bf08      	it	eq
   23b9a:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   23b9e:	4611      	mov	r1, r2
   23ba0:	ab01      	add	r3, sp, #4
   23ba2:	4638      	mov	r0, r7
   23ba4:	9501      	str	r5, [sp, #4]
   23ba6:	f002 ffbb 	bl	26b20 <interface_socket_wait>
   23baa:	4605      	mov	r5, r0
   23bac:	2800      	cmp	r0, #0
   23bae:	d1e1      	bne.n	23b74 <at_interface_read+0x2c>
   23bb0:	4638      	mov	r0, r7
   23bb2:	f003 f829 	bl	26c08 <interface_socket_from_handle_get>
   23bb6:	2800      	cmp	r0, #0
   23bb8:	d0dc      	beq.n	23b74 <at_interface_read+0x2c>
   23bba:	6845      	ldr	r5, [r0, #4]
   23bbc:	2d00      	cmp	r5, #0
   23bbe:	d0d9      	beq.n	23b74 <at_interface_read+0x2c>
   23bc0:	f8c0 8004 	str.w	r8, [r0, #4]
   23bc4:	e7d6      	b.n	23b74 <at_interface_read+0x2c>
   23bc6:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   23bca:	d1cf      	bne.n	23b6c <at_interface_read+0x24>
   23bcc:	252d      	movs	r5, #45	; 0x2d
   23bce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   23bd2:	4628      	mov	r0, r5
   23bd4:	f7f9 f980 	bl	1ced8 <bsd_os_errno_set>
   23bd8:	4648      	mov	r0, r9
   23bda:	b007      	add	sp, #28
   23bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23be0:	6823      	ldr	r3, [r4, #0]
   23be2:	69e0      	ldr	r0, [r4, #28]
   23be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   23be8:	6023      	str	r3, [r4, #0]
   23bea:	6803      	ldr	r3, [r0, #0]
   23bec:	4632      	mov	r2, r6
   23bee:	689b      	ldr	r3, [r3, #8]
   23bf0:	a902      	add	r1, sp, #8
   23bf2:	4798      	blx	r3
   23bf4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23bf8:	4681      	mov	r9, r0
   23bfa:	d1ed      	bne.n	23bd8 <at_interface_read+0x90>
   23bfc:	2523      	movs	r5, #35	; 0x23
   23bfe:	e7e8      	b.n	23bd2 <at_interface_read+0x8a>
   23c00:	2d00      	cmp	r5, #0
   23c02:	d1e6      	bne.n	23bd2 <at_interface_read+0x8a>
   23c04:	4648      	mov	r0, r9
   23c06:	b007      	add	sp, #28
   23c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c0c:	2516      	movs	r5, #22
   23c0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   23c12:	e7de      	b.n	23bd2 <at_interface_read+0x8a>

00023c14 <at_interface_getopt>:
   23c14:	f003 b866 	b.w	26ce4 <interface_socket_getopt>

00023c18 <at_interface_setopt>:
   23c18:	f003 b81e 	b.w	26c58 <interface_socket_setopt>

00023c1c <rpc_at_event_handler>:
   23c1c:	b570      	push	{r4, r5, r6, lr}
   23c1e:	4606      	mov	r6, r0
   23c20:	b084      	sub	sp, #16
   23c22:	68c0      	ldr	r0, [r0, #12]
   23c24:	460d      	mov	r5, r1
   23c26:	f002 ffef 	bl	26c08 <interface_socket_from_handle_get>
   23c2a:	4604      	mov	r4, r0
   23c2c:	b348      	cbz	r0, 23c82 <rpc_at_event_handler+0x66>
   23c2e:	6803      	ldr	r3, [r0, #0]
   23c30:	b29b      	uxth	r3, r3
   23c32:	2b01      	cmp	r3, #1
   23c34:	d01f      	beq.n	23c76 <rpc_at_event_handler+0x5a>
   23c36:	6803      	ldr	r3, [r0, #0]
   23c38:	b29b      	uxth	r3, r3
   23c3a:	2b0d      	cmp	r3, #13
   23c3c:	d029      	beq.n	23c92 <rpc_at_event_handler+0x76>
   23c3e:	6803      	ldr	r3, [r0, #0]
   23c40:	b29b      	uxth	r3, r3
   23c42:	2b02      	cmp	r3, #2
   23c44:	d02d      	beq.n	23ca2 <rpc_at_event_handler+0x86>
   23c46:	3d03      	subs	r5, #3
   23c48:	2d01      	cmp	r5, #1
   23c4a:	d817      	bhi.n	23c7c <rpc_at_event_handler+0x60>
   23c4c:	2500      	movs	r5, #0
   23c4e:	6873      	ldr	r3, [r6, #4]
   23c50:	6832      	ldr	r2, [r6, #0]
   23c52:	e9cd 5502 	strd	r5, r5, [sp, #8]
   23c56:	e9cd 2300 	strd	r2, r3, [sp]
   23c5a:	69e0      	ldr	r0, [r4, #28]
   23c5c:	4669      	mov	r1, sp
   23c5e:	6803      	ldr	r3, [r0, #0]
   23c60:	685b      	ldr	r3, [r3, #4]
   23c62:	4798      	blx	r3
   23c64:	3001      	adds	r0, #1
   23c66:	d019      	beq.n	23c9c <rpc_at_event_handler+0x80>
   23c68:	4628      	mov	r0, r5
   23c6a:	6823      	ldr	r3, [r4, #0]
   23c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23c70:	6023      	str	r3, [r4, #0]
   23c72:	b004      	add	sp, #16
   23c74:	bd70      	pop	{r4, r5, r6, pc}
   23c76:	2d02      	cmp	r5, #2
   23c78:	d1e5      	bne.n	23c46 <rpc_at_event_handler+0x2a>
   23c7a:	6005      	str	r5, [r0, #0]
   23c7c:	2000      	movs	r0, #0
   23c7e:	b004      	add	sp, #16
   23c80:	bd70      	pop	{r4, r5, r6, pc}
   23c82:	6830      	ldr	r0, [r6, #0]
   23c84:	2800      	cmp	r0, #0
   23c86:	d0f9      	beq.n	23c7c <rpc_at_event_handler+0x60>
   23c88:	f003 f8ec 	bl	26e64 <rpc_at_client_data_free>
   23c8c:	4620      	mov	r0, r4
   23c8e:	b004      	add	sp, #16
   23c90:	bd70      	pop	{r4, r5, r6, pc}
   23c92:	2d02      	cmp	r5, #2
   23c94:	d1d7      	bne.n	23c46 <rpc_at_event_handler+0x2a>
   23c96:	230e      	movs	r3, #14
   23c98:	6003      	str	r3, [r0, #0]
   23c9a:	e7ef      	b.n	23c7c <rpc_at_event_handler+0x60>
   23c9c:	2002      	movs	r0, #2
   23c9e:	b004      	add	sp, #16
   23ca0:	bd70      	pop	{r4, r5, r6, pc}
   23ca2:	6803      	ldr	r3, [r0, #0]
   23ca4:	029b      	lsls	r3, r3, #10
   23ca6:	d5ce      	bpl.n	23c46 <rpc_at_event_handler+0x2a>
   23ca8:	2d02      	cmp	r5, #2
   23caa:	d1cc      	bne.n	23c46 <rpc_at_event_handler+0x2a>
   23cac:	6803      	ldr	r3, [r0, #0]
   23cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   23cb2:	6003      	str	r3, [r0, #0]
   23cb4:	6803      	ldr	r3, [r0, #0]
   23cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23cba:	6003      	str	r3, [r0, #0]
   23cbc:	e7de      	b.n	23c7c <rpc_at_event_handler+0x60>
   23cbe:	bf00      	nop

00023cc0 <ok_rsp_parser>:
   23cc0:	2000      	movs	r0, #0
   23cc2:	4770      	bx	lr

00023cc4 <pdn_state_get_parser>:
   23cc4:	2200      	movs	r2, #0
   23cc6:	b570      	push	{r4, r5, r6, lr}
   23cc8:	780b      	ldrb	r3, [r1, #0]
   23cca:	b084      	sub	sp, #16
   23ccc:	460e      	mov	r6, r1
   23cce:	e9cd 2200 	strd	r2, r2, [sp]
   23cd2:	e9cd 2202 	strd	r2, r2, [sp, #8]
   23cd6:	b323      	cbz	r3, 23d22 <pdn_state_get_parser+0x5e>
   23cd8:	460c      	mov	r4, r1
   23cda:	2b20      	cmp	r3, #32
   23cdc:	460d      	mov	r5, r1
   23cde:	d01b      	beq.n	23d18 <pdn_state_get_parser+0x54>
   23ce0:	700b      	strb	r3, [r1, #0]
   23ce2:	3201      	adds	r2, #1
   23ce4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   23ce8:	18b1      	adds	r1, r6, r2
   23cea:	460d      	mov	r5, r1
   23cec:	2b00      	cmp	r3, #0
   23cee:	d1f4      	bne.n	23cda <pdn_state_get_parser+0x16>
   23cf0:	2200      	movs	r2, #0
   23cf2:	4b0d      	ldr	r3, [pc, #52]	; (23d28 <pdn_state_get_parser+0x64>)
   23cf4:	702a      	strb	r2, [r5, #0]
   23cf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   23cfa:	4a0c      	ldr	r2, [pc, #48]	; (23d2c <pdn_state_get_parser+0x68>)
   23cfc:	681b      	ldr	r3, [r3, #0]
   23cfe:	2110      	movs	r1, #16
   23d00:	4668      	mov	r0, sp
   23d02:	f009 fa65 	bl	2d1d0 <sniprintf>
   23d06:	4669      	mov	r1, sp
   23d08:	4630      	mov	r0, r6
   23d0a:	f00f fed8 	bl	33abe <strstr>
   23d0e:	3000      	adds	r0, #0
   23d10:	bf18      	it	ne
   23d12:	2001      	movne	r0, #1
   23d14:	b004      	add	sp, #16
   23d16:	bd70      	pop	{r4, r5, r6, pc}
   23d18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   23d1c:	2b00      	cmp	r3, #0
   23d1e:	d1dc      	bne.n	23cda <pdn_state_get_parser+0x16>
   23d20:	e7e6      	b.n	23cf0 <pdn_state_get_parser+0x2c>
   23d22:	460d      	mov	r5, r1
   23d24:	e7e4      	b.n	23cf0 <pdn_state_get_parser+0x2c>
   23d26:	bf00      	nop
   23d28:	20022754 	.word	0x20022754
   23d2c:	00034e78 	.word	0x00034e78

00023d30 <pdn_id_get_parser>:
   23d30:	b570      	push	{r4, r5, r6, lr}
   23d32:	780b      	ldrb	r3, [r1, #0]
   23d34:	4606      	mov	r6, r0
   23d36:	b313      	cbz	r3, 23d7e <pdn_id_get_parser+0x4e>
   23d38:	4608      	mov	r0, r1
   23d3a:	2400      	movs	r4, #0
   23d3c:	460a      	mov	r2, r1
   23d3e:	2b20      	cmp	r3, #32
   23d40:	4615      	mov	r5, r2
   23d42:	d017      	beq.n	23d74 <pdn_id_get_parser+0x44>
   23d44:	7013      	strb	r3, [r2, #0]
   23d46:	3401      	adds	r4, #1
   23d48:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23d4c:	190a      	adds	r2, r1, r4
   23d4e:	4615      	mov	r5, r2
   23d50:	2b00      	cmp	r3, #0
   23d52:	d1f4      	bne.n	23d3e <pdn_id_get_parser+0xe>
   23d54:	2300      	movs	r3, #0
   23d56:	4608      	mov	r0, r1
   23d58:	702b      	strb	r3, [r5, #0]
   23d5a:	213a      	movs	r1, #58	; 0x3a
   23d5c:	f00f fe88 	bl	33a70 <strchr>
   23d60:	b130      	cbz	r0, 23d70 <pdn_id_get_parser+0x40>
   23d62:	3001      	adds	r0, #1
   23d64:	f00f fd0c 	bl	33780 <atoi>
   23d68:	4b06      	ldr	r3, [pc, #24]	; (23d84 <pdn_id_get_parser+0x54>)
   23d6a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   23d6e:	6058      	str	r0, [r3, #4]
   23d70:	2000      	movs	r0, #0
   23d72:	bd70      	pop	{r4, r5, r6, pc}
   23d74:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23d78:	2b00      	cmp	r3, #0
   23d7a:	d1e0      	bne.n	23d3e <pdn_id_get_parser+0xe>
   23d7c:	e7ea      	b.n	23d54 <pdn_id_get_parser+0x24>
   23d7e:	460d      	mov	r5, r1
   23d80:	e7e8      	b.n	23d54 <pdn_id_get_parser+0x24>
   23d82:	bf00      	nop
   23d84:	20022754 	.word	0x20022754

00023d88 <context_create_parser>:
   23d88:	b570      	push	{r4, r5, r6, lr}
   23d8a:	780b      	ldrb	r3, [r1, #0]
   23d8c:	4606      	mov	r6, r0
   23d8e:	b313      	cbz	r3, 23dd6 <context_create_parser+0x4e>
   23d90:	4608      	mov	r0, r1
   23d92:	2400      	movs	r4, #0
   23d94:	460a      	mov	r2, r1
   23d96:	2b20      	cmp	r3, #32
   23d98:	4615      	mov	r5, r2
   23d9a:	d017      	beq.n	23dcc <context_create_parser+0x44>
   23d9c:	7013      	strb	r3, [r2, #0]
   23d9e:	3401      	adds	r4, #1
   23da0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23da4:	190a      	adds	r2, r1, r4
   23da6:	4615      	mov	r5, r2
   23da8:	2b00      	cmp	r3, #0
   23daa:	d1f4      	bne.n	23d96 <context_create_parser+0xe>
   23dac:	2300      	movs	r3, #0
   23dae:	4608      	mov	r0, r1
   23db0:	702b      	strb	r3, [r5, #0]
   23db2:	213a      	movs	r1, #58	; 0x3a
   23db4:	f00f fe5c 	bl	33a70 <strchr>
   23db8:	b130      	cbz	r0, 23dc8 <context_create_parser+0x40>
   23dba:	4b08      	ldr	r3, [pc, #32]	; (23ddc <context_create_parser+0x54>)
   23dbc:	3001      	adds	r0, #1
   23dbe:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   23dc2:	f00f fcdd 	bl	33780 <atoi>
   23dc6:	6020      	str	r0, [r4, #0]
   23dc8:	2000      	movs	r0, #0
   23dca:	bd70      	pop	{r4, r5, r6, pc}
   23dcc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23dd0:	2b00      	cmp	r3, #0
   23dd2:	d1e0      	bne.n	23d96 <context_create_parser+0xe>
   23dd4:	e7ea      	b.n	23dac <context_create_parser+0x24>
   23dd6:	460d      	mov	r5, r1
   23dd8:	e7e8      	b.n	23dac <context_create_parser+0x24>
   23dda:	bf00      	nop
   23ddc:	20022754 	.word	0x20022754

00023de0 <pdn_interface_init>:
   23de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23de4:	b510      	push	{r4, lr}
   23de6:	4c0b      	ldr	r4, [pc, #44]	; (23e14 <pdn_interface_init+0x34>)
   23de8:	2228      	movs	r2, #40	; 0x28
   23dea:	2100      	movs	r1, #0
   23dec:	480a      	ldr	r0, [pc, #40]	; (23e18 <pdn_interface_init+0x38>)
   23dee:	6023      	str	r3, [r4, #0]
   23df0:	f00f fd20 	bl	33834 <memset>
   23df4:	f240 2201 	movw	r2, #513	; 0x201
   23df8:	2102      	movs	r1, #2
   23dfa:	2066      	movs	r0, #102	; 0x66
   23dfc:	f7ff fdd8 	bl	239b0 <at_interface_open>
   23e00:	2800      	cmp	r0, #0
   23e02:	6020      	str	r0, [r4, #0]
   23e04:	db04      	blt.n	23e10 <pdn_interface_init+0x30>
   23e06:	2201      	movs	r2, #1
   23e08:	4b04      	ldr	r3, [pc, #16]	; (23e1c <pdn_interface_init+0x3c>)
   23e0a:	2000      	movs	r0, #0
   23e0c:	701a      	strb	r2, [r3, #0]
   23e0e:	bd10      	pop	{r4, pc}
   23e10:	2003      	movs	r0, #3
   23e12:	bd10      	pop	{r4, pc}
   23e14:	20022650 	.word	0x20022650
   23e18:	20022754 	.word	0x20022754
   23e1c:	20028e8b 	.word	0x20028e8b

00023e20 <pdn_interface_open>:
   23e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e24:	4b66      	ldr	r3, [pc, #408]	; (23fc0 <pdn_interface_open+0x1a0>)
   23e26:	b083      	sub	sp, #12
   23e28:	781b      	ldrb	r3, [r3, #0]
   23e2a:	2b00      	cmp	r3, #0
   23e2c:	f000 80c2 	beq.w	23fb4 <pdn_interface_open+0x194>
   23e30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   23e34:	f040 80ad 	bne.w	23f92 <pdn_interface_open+0x172>
   23e38:	4c62      	ldr	r4, [pc, #392]	; (23fc4 <pdn_interface_open+0x1a4>)
   23e3a:	6825      	ldr	r5, [r4, #0]
   23e3c:	b34d      	cbz	r5, 23e92 <pdn_interface_open+0x72>
   23e3e:	6863      	ldr	r3, [r4, #4]
   23e40:	2b00      	cmp	r3, #0
   23e42:	f000 8098 	beq.w	23f76 <pdn_interface_open+0x156>
   23e46:	68a3      	ldr	r3, [r4, #8]
   23e48:	2b00      	cmp	r3, #0
   23e4a:	f000 8096 	beq.w	23f7a <pdn_interface_open+0x15a>
   23e4e:	68e3      	ldr	r3, [r4, #12]
   23e50:	2b00      	cmp	r3, #0
   23e52:	f000 8094 	beq.w	23f7e <pdn_interface_open+0x15e>
   23e56:	6923      	ldr	r3, [r4, #16]
   23e58:	2b00      	cmp	r3, #0
   23e5a:	f000 8092 	beq.w	23f82 <pdn_interface_open+0x162>
   23e5e:	6963      	ldr	r3, [r4, #20]
   23e60:	2b00      	cmp	r3, #0
   23e62:	f000 8090 	beq.w	23f86 <pdn_interface_open+0x166>
   23e66:	69a3      	ldr	r3, [r4, #24]
   23e68:	2b00      	cmp	r3, #0
   23e6a:	f000 808e 	beq.w	23f8a <pdn_interface_open+0x16a>
   23e6e:	69e3      	ldr	r3, [r4, #28]
   23e70:	2b00      	cmp	r3, #0
   23e72:	f000 808c 	beq.w	23f8e <pdn_interface_open+0x16e>
   23e76:	6a23      	ldr	r3, [r4, #32]
   23e78:	b153      	cbz	r3, 23e90 <pdn_interface_open+0x70>
   23e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23e7c:	2509      	movs	r5, #9
   23e7e:	b143      	cbz	r3, 23e92 <pdn_interface_open+0x72>
   23e80:	200c      	movs	r0, #12
   23e82:	f7f9 f829 	bl	1ced8 <bsd_os_errno_set>
   23e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e8a:	b003      	add	sp, #12
   23e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e90:	2508      	movs	r5, #8
   23e92:	2074      	movs	r0, #116	; 0x74
   23e94:	f002 fa60 	bl	26358 <nrf_malloc>
   23e98:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   23e9c:	2800      	cmp	r0, #0
   23e9e:	d0ef      	beq.n	23e80 <pdn_interface_open+0x60>
   23ea0:	2274      	movs	r2, #116	; 0x74
   23ea2:	2100      	movs	r1, #0
   23ea4:	f00f fcc6 	bl	33834 <memset>
   23ea8:	2101      	movs	r1, #1
   23eaa:	2003      	movs	r0, #3
   23eac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   23eb0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   23eb4:	4a44      	ldr	r2, [pc, #272]	; (23fc8 <pdn_interface_open+0x1a8>)
   23eb6:	6099      	str	r1, [r3, #8]
   23eb8:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   23ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
   23ec0:	6718      	str	r0, [r3, #112]	; 0x70
   23ec2:	605f      	str	r7, [r3, #4]
   23ec4:	4841      	ldr	r0, [pc, #260]	; (23fcc <pdn_interface_open+0x1ac>)
   23ec6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 23fd8 <pdn_interface_open+0x1b8>
   23eca:	f009 f981 	bl	2d1d0 <sniprintf>
   23ece:	483f      	ldr	r0, [pc, #252]	; (23fcc <pdn_interface_open+0x1ac>)
   23ed0:	f8d8 9000 	ldr.w	r9, [r8]
   23ed4:	2600      	movs	r6, #0
   23ed6:	f7ee f8d3 	bl	12080 <strlen>
   23eda:	4633      	mov	r3, r6
   23edc:	4602      	mov	r2, r0
   23ede:	493b      	ldr	r1, [pc, #236]	; (23fcc <pdn_interface_open+0x1ac>)
   23ee0:	4648      	mov	r0, r9
   23ee2:	9601      	str	r6, [sp, #4]
   23ee4:	9600      	str	r6, [sp, #0]
   23ee6:	f7ff fcdb 	bl	238a0 <at_interface_write>
   23eea:	4681      	mov	r9, r0
   23eec:	4837      	ldr	r0, [pc, #220]	; (23fcc <pdn_interface_open+0x1ac>)
   23eee:	f7ee f8c7 	bl	12080 <strlen>
   23ef2:	4548      	cmp	r0, r9
   23ef4:	d153      	bne.n	23f9e <pdn_interface_open+0x17e>
   23ef6:	4633      	mov	r3, r6
   23ef8:	e9cd 6600 	strd	r6, r6, [sp]
   23efc:	f44f 7280 	mov.w	r2, #256	; 0x100
   23f00:	4932      	ldr	r1, [pc, #200]	; (23fcc <pdn_interface_open+0x1ac>)
   23f02:	f8d8 0000 	ldr.w	r0, [r8]
   23f06:	f7ff fe1f 	bl	23b48 <at_interface_read>
   23f0a:	4606      	mov	r6, r0
   23f0c:	4830      	ldr	r0, [pc, #192]	; (23fd0 <pdn_interface_open+0x1b0>)
   23f0e:	f7ee f8b7 	bl	12080 <strlen>
   23f12:	4286      	cmp	r6, r0
   23f14:	db15      	blt.n	23f42 <pdn_interface_open+0x122>
   23f16:	4602      	mov	r2, r0
   23f18:	492c      	ldr	r1, [pc, #176]	; (23fcc <pdn_interface_open+0x1ac>)
   23f1a:	482d      	ldr	r0, [pc, #180]	; (23fd0 <pdn_interface_open+0x1b0>)
   23f1c:	f00f fdbd 	bl	33a9a <strncmp>
   23f20:	b978      	cbnz	r0, 23f42 <pdn_interface_open+0x122>
   23f22:	492a      	ldr	r1, [pc, #168]	; (23fcc <pdn_interface_open+0x1ac>)
   23f24:	4628      	mov	r0, r5
   23f26:	f7ff ff2f 	bl	23d88 <context_create_parser>
   23f2a:	b9b0      	cbnz	r0, 23f5a <pdn_interface_open+0x13a>
   23f2c:	2202      	movs	r2, #2
   23f2e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   23f32:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   23f36:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   23f3a:	609a      	str	r2, [r3, #8]
   23f3c:	b003      	add	sp, #12
   23f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23f42:	4824      	ldr	r0, [pc, #144]	; (23fd4 <pdn_interface_open+0x1b4>)
   23f44:	f7ee f89c 	bl	12080 <strlen>
   23f48:	4920      	ldr	r1, [pc, #128]	; (23fcc <pdn_interface_open+0x1ac>)
   23f4a:	4602      	mov	r2, r0
   23f4c:	4821      	ldr	r0, [pc, #132]	; (23fd4 <pdn_interface_open+0x1b4>)
   23f4e:	f00f fda4 	bl	33a9a <strncmp>
   23f52:	b960      	cbnz	r0, 23f6e <pdn_interface_open+0x14e>
   23f54:	2008      	movs	r0, #8
   23f56:	f7f8 ffbf 	bl	1ced8 <bsd_os_errno_set>
   23f5a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   23f5e:	f002 fa05 	bl	2636c <nrf_free>
   23f62:	2300      	movs	r3, #0
   23f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23f68:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   23f6c:	e78d      	b.n	23e8a <pdn_interface_open+0x6a>
   23f6e:	2005      	movs	r0, #5
   23f70:	f7f8 ffb2 	bl	1ced8 <bsd_os_errno_set>
   23f74:	e7f1      	b.n	23f5a <pdn_interface_open+0x13a>
   23f76:	2501      	movs	r5, #1
   23f78:	e78b      	b.n	23e92 <pdn_interface_open+0x72>
   23f7a:	2502      	movs	r5, #2
   23f7c:	e789      	b.n	23e92 <pdn_interface_open+0x72>
   23f7e:	2503      	movs	r5, #3
   23f80:	e787      	b.n	23e92 <pdn_interface_open+0x72>
   23f82:	2504      	movs	r5, #4
   23f84:	e785      	b.n	23e92 <pdn_interface_open+0x72>
   23f86:	2505      	movs	r5, #5
   23f88:	e783      	b.n	23e92 <pdn_interface_open+0x72>
   23f8a:	2506      	movs	r5, #6
   23f8c:	e781      	b.n	23e92 <pdn_interface_open+0x72>
   23f8e:	2507      	movs	r5, #7
   23f90:	e77f      	b.n	23e92 <pdn_interface_open+0x72>
   23f92:	2029      	movs	r0, #41	; 0x29
   23f94:	f7f8 ffa0 	bl	1ced8 <bsd_os_errno_set>
   23f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23f9c:	e775      	b.n	23e8a <pdn_interface_open+0x6a>
   23f9e:	2005      	movs	r0, #5
   23fa0:	f7f8 ff9a 	bl	1ced8 <bsd_os_errno_set>
   23fa4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   23fa8:	f002 f9e0 	bl	2636c <nrf_free>
   23fac:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   23fb0:	4638      	mov	r0, r7
   23fb2:	e76a      	b.n	23e8a <pdn_interface_open+0x6a>
   23fb4:	2070      	movs	r0, #112	; 0x70
   23fb6:	f7f8 ff8f 	bl	1ced8 <bsd_os_errno_set>
   23fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23fbe:	e764      	b.n	23e8a <pdn_interface_open+0x6a>
   23fc0:	20028e8b 	.word	0x20028e8b
   23fc4:	20022754 	.word	0x20022754
   23fc8:	00034e54 	.word	0x00034e54
   23fcc:	20022654 	.word	0x20022654
   23fd0:	00034e64 	.word	0x00034e64
   23fd4:	00034e70 	.word	0x00034e70
   23fd8:	20022650 	.word	0x20022650

00023fdc <pdn_interface_connect>:
   23fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fe0:	b083      	sub	sp, #12
   23fe2:	2900      	cmp	r1, #0
   23fe4:	f000 813d 	beq.w	24262 <pdn_interface_connect+0x286>
   23fe8:	2a64      	cmp	r2, #100	; 0x64
   23fea:	4691      	mov	r9, r2
   23fec:	f200 8139 	bhi.w	24262 <pdn_interface_connect+0x286>
   23ff0:	4605      	mov	r5, r0
   23ff2:	4608      	mov	r0, r1
   23ff4:	4688      	mov	r8, r1
   23ff6:	f7ee f843 	bl	12080 <strlen>
   23ffa:	2864      	cmp	r0, #100	; 0x64
   23ffc:	f200 8131 	bhi.w	24262 <pdn_interface_connect+0x286>
   24000:	0c2b      	lsrs	r3, r5, #16
   24002:	4aa5      	ldr	r2, [pc, #660]	; (24298 <pdn_interface_connect+0x2bc>)
   24004:	041b      	lsls	r3, r3, #16
   24006:	4293      	cmp	r3, r2
   24008:	f040 8122 	bne.w	24250 <pdn_interface_connect+0x274>
   2400c:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   24010:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   24014:	2d09      	cmp	r5, #9
   24016:	f300 811b 	bgt.w	24250 <pdn_interface_connect+0x274>
   2401a:	4fa0      	ldr	r7, [pc, #640]	; (2429c <pdn_interface_connect+0x2c0>)
   2401c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24020:	2b00      	cmp	r3, #0
   24022:	f000 8115 	beq.w	24250 <pdn_interface_connect+0x274>
   24026:	689a      	ldr	r2, [r3, #8]
   24028:	2a00      	cmp	r2, #0
   2402a:	f000 8111 	beq.w	24250 <pdn_interface_connect+0x274>
   2402e:	689b      	ldr	r3, [r3, #8]
   24030:	2b02      	cmp	r3, #2
   24032:	f040 810d 	bne.w	24250 <pdn_interface_connect+0x274>
   24036:	4e9a      	ldr	r6, [pc, #616]	; (242a0 <pdn_interface_connect+0x2c4>)
   24038:	4a9a      	ldr	r2, [pc, #616]	; (242a4 <pdn_interface_connect+0x2c8>)
   2403a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2403e:	4630      	mov	r0, r6
   24040:	f009 f8c6 	bl	2d1d0 <sniprintf>
   24044:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24048:	4604      	mov	r4, r0
   2404a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2404e:	681b      	ldr	r3, [r3, #0]
   24050:	4a95      	ldr	r2, [pc, #596]	; (242a8 <pdn_interface_connect+0x2cc>)
   24052:	1830      	adds	r0, r6, r0
   24054:	f009 f8bc 	bl	2d1d0 <sniprintf>
   24058:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   2405c:	4404      	add	r4, r0
   2405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   24060:	f003 0203 	and.w	r2, r3, #3
   24064:	2a03      	cmp	r2, #3
   24066:	f000 80ea 	beq.w	2423e <pdn_interface_connect+0x262>
   2406a:	079b      	lsls	r3, r3, #30
   2406c:	eb06 0004 	add.w	r0, r6, r4
   24070:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   24074:	bf4c      	ite	mi
   24076:	4b8d      	ldrmi	r3, [pc, #564]	; (242ac <pdn_interface_connect+0x2d0>)
   24078:	4b8d      	ldrpl	r3, [pc, #564]	; (242b0 <pdn_interface_connect+0x2d4>)
   2407a:	4a8e      	ldr	r2, [pc, #568]	; (242b4 <pdn_interface_connect+0x2d8>)
   2407c:	f009 f8a8 	bl	2d1d0 <sniprintf>
   24080:	4404      	add	r4, r0
   24082:	4643      	mov	r3, r8
   24084:	4a8c      	ldr	r2, [pc, #560]	; (242b8 <pdn_interface_connect+0x2dc>)
   24086:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2408a:	1930      	adds	r0, r6, r4
   2408c:	f009 f8a0 	bl	2d1d0 <sniprintf>
   24090:	4420      	add	r0, r4
   24092:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   24096:	f300 80f7 	bgt.w	24288 <pdn_interface_connect+0x2ac>
   2409a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 242d8 <pdn_interface_connect+0x2fc>
   2409e:	4880      	ldr	r0, [pc, #512]	; (242a0 <pdn_interface_connect+0x2c4>)
   240a0:	f8da b000 	ldr.w	fp, [sl]
   240a4:	2400      	movs	r4, #0
   240a6:	f7ed ffeb 	bl	12080 <strlen>
   240aa:	4623      	mov	r3, r4
   240ac:	4602      	mov	r2, r0
   240ae:	497c      	ldr	r1, [pc, #496]	; (242a0 <pdn_interface_connect+0x2c4>)
   240b0:	4658      	mov	r0, fp
   240b2:	9401      	str	r4, [sp, #4]
   240b4:	9400      	str	r4, [sp, #0]
   240b6:	f7ff fbf3 	bl	238a0 <at_interface_write>
   240ba:	4683      	mov	fp, r0
   240bc:	4878      	ldr	r0, [pc, #480]	; (242a0 <pdn_interface_connect+0x2c4>)
   240be:	f7ed ffdf 	bl	12080 <strlen>
   240c2:	4558      	cmp	r0, fp
   240c4:	d008      	beq.n	240d8 <pdn_interface_connect+0xfc>
   240c6:	2005      	movs	r0, #5
   240c8:	f7f8 ff06 	bl	1ced8 <bsd_os_errno_set>
   240cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   240d0:	4620      	mov	r0, r4
   240d2:	b003      	add	sp, #12
   240d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240d8:	4623      	mov	r3, r4
   240da:	e9cd 4400 	strd	r4, r4, [sp]
   240de:	f44f 7280 	mov.w	r2, #256	; 0x100
   240e2:	496f      	ldr	r1, [pc, #444]	; (242a0 <pdn_interface_connect+0x2c4>)
   240e4:	f8da 0000 	ldr.w	r0, [sl]
   240e8:	f7ff fd2e 	bl	23b48 <at_interface_read>
   240ec:	4604      	mov	r4, r0
   240ee:	4873      	ldr	r0, [pc, #460]	; (242bc <pdn_interface_connect+0x2e0>)
   240f0:	f7ed ffc6 	bl	12080 <strlen>
   240f4:	4284      	cmp	r4, r0
   240f6:	f2c0 8091 	blt.w	2421c <pdn_interface_connect+0x240>
   240fa:	4602      	mov	r2, r0
   240fc:	4968      	ldr	r1, [pc, #416]	; (242a0 <pdn_interface_connect+0x2c4>)
   240fe:	486f      	ldr	r0, [pc, #444]	; (242bc <pdn_interface_connect+0x2e0>)
   24100:	f00f fccb 	bl	33a9a <strncmp>
   24104:	2800      	cmp	r0, #0
   24106:	f040 8089 	bne.w	2421c <pdn_interface_connect+0x240>
   2410a:	4965      	ldr	r1, [pc, #404]	; (242a0 <pdn_interface_connect+0x2c4>)
   2410c:	4628      	mov	r0, r5
   2410e:	f7ff fdd7 	bl	23cc0 <ok_rsp_parser>
   24112:	4604      	mov	r4, r0
   24114:	2800      	cmp	r0, #0
   24116:	d1db      	bne.n	240d0 <pdn_interface_connect+0xf4>
   24118:	4a69      	ldr	r2, [pc, #420]	; (242c0 <pdn_interface_connect+0x2e4>)
   2411a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2411e:	4860      	ldr	r0, [pc, #384]	; (242a0 <pdn_interface_connect+0x2c4>)
   24120:	f009 f856 	bl	2d1d0 <sniprintf>
   24124:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24128:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2412c:	681b      	ldr	r3, [r3, #0]
   2412e:	4a65      	ldr	r2, [pc, #404]	; (242c4 <pdn_interface_connect+0x2e8>)
   24130:	4430      	add	r0, r6
   24132:	f009 f84d 	bl	2d1d0 <sniprintf>
   24136:	485a      	ldr	r0, [pc, #360]	; (242a0 <pdn_interface_connect+0x2c4>)
   24138:	f8da b000 	ldr.w	fp, [sl]
   2413c:	f7ed ffa0 	bl	12080 <strlen>
   24140:	4623      	mov	r3, r4
   24142:	4602      	mov	r2, r0
   24144:	4956      	ldr	r1, [pc, #344]	; (242a0 <pdn_interface_connect+0x2c4>)
   24146:	4658      	mov	r0, fp
   24148:	9401      	str	r4, [sp, #4]
   2414a:	9400      	str	r4, [sp, #0]
   2414c:	f7ff fba8 	bl	238a0 <at_interface_write>
   24150:	4683      	mov	fp, r0
   24152:	4853      	ldr	r0, [pc, #332]	; (242a0 <pdn_interface_connect+0x2c4>)
   24154:	f7ed ff94 	bl	12080 <strlen>
   24158:	4558      	cmp	r0, fp
   2415a:	d1b4      	bne.n	240c6 <pdn_interface_connect+0xea>
   2415c:	4623      	mov	r3, r4
   2415e:	f44f 7280 	mov.w	r2, #256	; 0x100
   24162:	494f      	ldr	r1, [pc, #316]	; (242a0 <pdn_interface_connect+0x2c4>)
   24164:	f8da 0000 	ldr.w	r0, [sl]
   24168:	e9cd 4400 	strd	r4, r4, [sp]
   2416c:	f7ff fcec 	bl	23b48 <at_interface_read>
   24170:	4683      	mov	fp, r0
   24172:	4852      	ldr	r0, [pc, #328]	; (242bc <pdn_interface_connect+0x2e0>)
   24174:	f7ed ff84 	bl	12080 <strlen>
   24178:	4583      	cmp	fp, r0
   2417a:	db4f      	blt.n	2421c <pdn_interface_connect+0x240>
   2417c:	4602      	mov	r2, r0
   2417e:	4948      	ldr	r1, [pc, #288]	; (242a0 <pdn_interface_connect+0x2c4>)
   24180:	484e      	ldr	r0, [pc, #312]	; (242bc <pdn_interface_connect+0x2e0>)
   24182:	f00f fc8a 	bl	33a9a <strncmp>
   24186:	2800      	cmp	r0, #0
   24188:	d148      	bne.n	2421c <pdn_interface_connect+0x240>
   2418a:	2103      	movs	r1, #3
   2418c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24190:	464a      	mov	r2, r9
   24192:	6099      	str	r1, [r3, #8]
   24194:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   24198:	4641      	mov	r1, r8
   2419a:	300c      	adds	r0, #12
   2419c:	f00f fb10 	bl	337c0 <memcpy>
   241a0:	4a49      	ldr	r2, [pc, #292]	; (242c8 <pdn_interface_connect+0x2ec>)
   241a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   241a6:	483e      	ldr	r0, [pc, #248]	; (242a0 <pdn_interface_connect+0x2c4>)
   241a8:	f009 f812 	bl	2d1d0 <sniprintf>
   241ac:	4601      	mov	r1, r0
   241ae:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   241b2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   241b6:	681b      	ldr	r3, [r3, #0]
   241b8:	4a42      	ldr	r2, [pc, #264]	; (242c4 <pdn_interface_connect+0x2e8>)
   241ba:	1830      	adds	r0, r6, r0
   241bc:	f009 f808 	bl	2d1d0 <sniprintf>
   241c0:	4837      	ldr	r0, [pc, #220]	; (242a0 <pdn_interface_connect+0x2c4>)
   241c2:	f8da 6000 	ldr.w	r6, [sl]
   241c6:	f7ed ff5b 	bl	12080 <strlen>
   241ca:	4623      	mov	r3, r4
   241cc:	4602      	mov	r2, r0
   241ce:	4934      	ldr	r1, [pc, #208]	; (242a0 <pdn_interface_connect+0x2c4>)
   241d0:	4630      	mov	r0, r6
   241d2:	9401      	str	r4, [sp, #4]
   241d4:	9400      	str	r4, [sp, #0]
   241d6:	f7ff fb63 	bl	238a0 <at_interface_write>
   241da:	4606      	mov	r6, r0
   241dc:	4830      	ldr	r0, [pc, #192]	; (242a0 <pdn_interface_connect+0x2c4>)
   241de:	f7ed ff4f 	bl	12080 <strlen>
   241e2:	42b0      	cmp	r0, r6
   241e4:	d153      	bne.n	2428e <pdn_interface_connect+0x2b2>
   241e6:	4623      	mov	r3, r4
   241e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   241ec:	492c      	ldr	r1, [pc, #176]	; (242a0 <pdn_interface_connect+0x2c4>)
   241ee:	f8da 0000 	ldr.w	r0, [sl]
   241f2:	e9cd 4400 	strd	r4, r4, [sp]
   241f6:	f7ff fca7 	bl	23b48 <at_interface_read>
   241fa:	4606      	mov	r6, r0
   241fc:	4833      	ldr	r0, [pc, #204]	; (242cc <pdn_interface_connect+0x2f0>)
   241fe:	f7ed ff3f 	bl	12080 <strlen>
   24202:	4286      	cmp	r6, r0
   24204:	db33      	blt.n	2426e <pdn_interface_connect+0x292>
   24206:	4602      	mov	r2, r0
   24208:	4925      	ldr	r1, [pc, #148]	; (242a0 <pdn_interface_connect+0x2c4>)
   2420a:	4830      	ldr	r0, [pc, #192]	; (242cc <pdn_interface_connect+0x2f0>)
   2420c:	f00f fc45 	bl	33a9a <strncmp>
   24210:	bb68      	cbnz	r0, 2426e <pdn_interface_connect+0x292>
   24212:	4628      	mov	r0, r5
   24214:	4922      	ldr	r1, [pc, #136]	; (242a0 <pdn_interface_connect+0x2c4>)
   24216:	f7ff fd8b 	bl	23d30 <pdn_id_get_parser>
   2421a:	e759      	b.n	240d0 <pdn_interface_connect+0xf4>
   2421c:	482c      	ldr	r0, [pc, #176]	; (242d0 <pdn_interface_connect+0x2f4>)
   2421e:	f7ed ff2f 	bl	12080 <strlen>
   24222:	491f      	ldr	r1, [pc, #124]	; (242a0 <pdn_interface_connect+0x2c4>)
   24224:	4602      	mov	r2, r0
   24226:	482a      	ldr	r0, [pc, #168]	; (242d0 <pdn_interface_connect+0x2f4>)
   24228:	f00f fc37 	bl	33a9a <strncmp>
   2422c:	2800      	cmp	r0, #0
   2422e:	f47f af4a 	bne.w	240c6 <pdn_interface_connect+0xea>
   24232:	2008      	movs	r0, #8
   24234:	f7f8 fe50 	bl	1ced8 <bsd_os_errno_set>
   24238:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2423c:	e748      	b.n	240d0 <pdn_interface_connect+0xf4>
   2423e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   24242:	1930      	adds	r0, r6, r4
   24244:	4b23      	ldr	r3, [pc, #140]	; (242d4 <pdn_interface_connect+0x2f8>)
   24246:	4a1b      	ldr	r2, [pc, #108]	; (242b4 <pdn_interface_connect+0x2d8>)
   24248:	f008 ffc2 	bl	2d1d0 <sniprintf>
   2424c:	4404      	add	r4, r0
   2424e:	e718      	b.n	24082 <pdn_interface_connect+0xa6>
   24250:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24254:	2009      	movs	r0, #9
   24256:	f7f8 fe3f 	bl	1ced8 <bsd_os_errno_set>
   2425a:	4620      	mov	r0, r4
   2425c:	b003      	add	sp, #12
   2425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24262:	2016      	movs	r0, #22
   24264:	f7f8 fe38 	bl	1ced8 <bsd_os_errno_set>
   24268:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2426c:	e730      	b.n	240d0 <pdn_interface_connect+0xf4>
   2426e:	4818      	ldr	r0, [pc, #96]	; (242d0 <pdn_interface_connect+0x2f4>)
   24270:	f7ed ff06 	bl	12080 <strlen>
   24274:	490a      	ldr	r1, [pc, #40]	; (242a0 <pdn_interface_connect+0x2c4>)
   24276:	4602      	mov	r2, r0
   24278:	4815      	ldr	r0, [pc, #84]	; (242d0 <pdn_interface_connect+0x2f4>)
   2427a:	f00f fc0e 	bl	33a9a <strncmp>
   2427e:	b930      	cbnz	r0, 2428e <pdn_interface_connect+0x2b2>
   24280:	2008      	movs	r0, #8
   24282:	f7f8 fe29 	bl	1ced8 <bsd_os_errno_set>
   24286:	e723      	b.n	240d0 <pdn_interface_connect+0xf4>
   24288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2428c:	e720      	b.n	240d0 <pdn_interface_connect+0xf4>
   2428e:	2005      	movs	r0, #5
   24290:	f7f8 fe22 	bl	1ced8 <bsd_os_errno_set>
   24294:	e71c      	b.n	240d0 <pdn_interface_connect+0xf4>
   24296:	bf00      	nop
   24298:	789a0000 	.word	0x789a0000
   2429c:	20022754 	.word	0x20022754
   242a0:	20022654 	.word	0x20022654
   242a4:	00034ddc 	.word	0x00034ddc
   242a8:	00034de8 	.word	0x00034de8
   242ac:	00034dfc 	.word	0x00034dfc
   242b0:	00034e04 	.word	0x00034e04
   242b4:	00034df4 	.word	0x00034df4
   242b8:	00034e38 	.word	0x00034e38
   242bc:	00034e08 	.word	0x00034e08
   242c0:	00034e0c 	.word	0x00034e0c
   242c4:	00034e18 	.word	0x00034e18
   242c8:	00034e1c 	.word	0x00034e1c
   242cc:	00034e2c 	.word	0x00034e2c
   242d0:	00034e70 	.word	0x00034e70
   242d4:	00034dec 	.word	0x00034dec
   242d8:	20022650 	.word	0x20022650

000242dc <pdn_interface_close>:
   242dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   242e0:	4a6b      	ldr	r2, [pc, #428]	; (24490 <pdn_interface_close+0x1b4>)
   242e2:	0c03      	lsrs	r3, r0, #16
   242e4:	041b      	lsls	r3, r3, #16
   242e6:	4293      	cmp	r3, r2
   242e8:	b083      	sub	sp, #12
   242ea:	f040 80ac 	bne.w	24446 <pdn_interface_close+0x16a>
   242ee:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   242f2:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   242f6:	2c09      	cmp	r4, #9
   242f8:	f300 80a5 	bgt.w	24446 <pdn_interface_close+0x16a>
   242fc:	4d65      	ldr	r5, [pc, #404]	; (24494 <pdn_interface_close+0x1b8>)
   242fe:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   24302:	2800      	cmp	r0, #0
   24304:	f000 809f 	beq.w	24446 <pdn_interface_close+0x16a>
   24308:	6883      	ldr	r3, [r0, #8]
   2430a:	2b00      	cmp	r3, #0
   2430c:	f000 809b 	beq.w	24446 <pdn_interface_close+0x16a>
   24310:	6883      	ldr	r3, [r0, #8]
   24312:	2b03      	cmp	r3, #3
   24314:	d00b      	beq.n	2432e <pdn_interface_close+0x52>
   24316:	6883      	ldr	r3, [r0, #8]
   24318:	2b02      	cmp	r3, #2
   2431a:	d055      	beq.n	243c8 <pdn_interface_close+0xec>
   2431c:	f002 f826 	bl	2636c <nrf_free>
   24320:	2300      	movs	r3, #0
   24322:	4618      	mov	r0, r3
   24324:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   24328:	b003      	add	sp, #12
   2432a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2432e:	4e5a      	ldr	r6, [pc, #360]	; (24498 <pdn_interface_close+0x1bc>)
   24330:	4a5a      	ldr	r2, [pc, #360]	; (2449c <pdn_interface_close+0x1c0>)
   24332:	f44f 7180 	mov.w	r1, #256	; 0x100
   24336:	4630      	mov	r0, r6
   24338:	f008 ff4a 	bl	2d1d0 <sniprintf>
   2433c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   24340:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   24344:	681b      	ldr	r3, [r3, #0]
   24346:	4a56      	ldr	r2, [pc, #344]	; (244a0 <pdn_interface_close+0x1c4>)
   24348:	4430      	add	r0, r6
   2434a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 244b0 <pdn_interface_close+0x1d4>
   2434e:	f008 ff3f 	bl	2d1d0 <sniprintf>
   24352:	4630      	mov	r0, r6
   24354:	f8d8 9000 	ldr.w	r9, [r8]
   24358:	2700      	movs	r7, #0
   2435a:	f7ed fe91 	bl	12080 <strlen>
   2435e:	4631      	mov	r1, r6
   24360:	4602      	mov	r2, r0
   24362:	463b      	mov	r3, r7
   24364:	4648      	mov	r0, r9
   24366:	9701      	str	r7, [sp, #4]
   24368:	9700      	str	r7, [sp, #0]
   2436a:	f7ff fa99 	bl	238a0 <at_interface_write>
   2436e:	4681      	mov	r9, r0
   24370:	4630      	mov	r0, r6
   24372:	f7ed fe85 	bl	12080 <strlen>
   24376:	4548      	cmp	r0, r9
   24378:	f040 8082 	bne.w	24480 <pdn_interface_close+0x1a4>
   2437c:	463b      	mov	r3, r7
   2437e:	e9cd 7700 	strd	r7, r7, [sp]
   24382:	f44f 7280 	mov.w	r2, #256	; 0x100
   24386:	4631      	mov	r1, r6
   24388:	f8d8 0000 	ldr.w	r0, [r8]
   2438c:	f7ff fbdc 	bl	23b48 <at_interface_read>
   24390:	4607      	mov	r7, r0
   24392:	4844      	ldr	r0, [pc, #272]	; (244a4 <pdn_interface_close+0x1c8>)
   24394:	f7ed fe74 	bl	12080 <strlen>
   24398:	4287      	cmp	r7, r0
   2439a:	da5a      	bge.n	24452 <pdn_interface_close+0x176>
   2439c:	4842      	ldr	r0, [pc, #264]	; (244a8 <pdn_interface_close+0x1cc>)
   2439e:	f7ed fe6f 	bl	12080 <strlen>
   243a2:	493d      	ldr	r1, [pc, #244]	; (24498 <pdn_interface_close+0x1bc>)
   243a4:	4602      	mov	r2, r0
   243a6:	4840      	ldr	r0, [pc, #256]	; (244a8 <pdn_interface_close+0x1cc>)
   243a8:	f00f fb77 	bl	33a9a <strncmp>
   243ac:	2800      	cmp	r0, #0
   243ae:	d167      	bne.n	24480 <pdn_interface_close+0x1a4>
   243b0:	2008      	movs	r0, #8
   243b2:	f7f8 fd91 	bl	1ced8 <bsd_os_errno_set>
   243b6:	2202      	movs	r2, #2
   243b8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   243bc:	609a      	str	r2, [r3, #8]
   243be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   243c2:	6883      	ldr	r3, [r0, #8]
   243c4:	2b02      	cmp	r3, #2
   243c6:	d1a9      	bne.n	2431c <pdn_interface_close+0x40>
   243c8:	4e33      	ldr	r6, [pc, #204]	; (24498 <pdn_interface_close+0x1bc>)
   243ca:	4a38      	ldr	r2, [pc, #224]	; (244ac <pdn_interface_close+0x1d0>)
   243cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   243d0:	4630      	mov	r0, r6
   243d2:	f008 fefd 	bl	2d1d0 <sniprintf>
   243d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   243da:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   243de:	681b      	ldr	r3, [r3, #0]
   243e0:	4a2f      	ldr	r2, [pc, #188]	; (244a0 <pdn_interface_close+0x1c4>)
   243e2:	4430      	add	r0, r6
   243e4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 244b0 <pdn_interface_close+0x1d4>
   243e8:	f008 fef2 	bl	2d1d0 <sniprintf>
   243ec:	4630      	mov	r0, r6
   243ee:	f8d8 9000 	ldr.w	r9, [r8]
   243f2:	2700      	movs	r7, #0
   243f4:	f7ed fe44 	bl	12080 <strlen>
   243f8:	4631      	mov	r1, r6
   243fa:	4602      	mov	r2, r0
   243fc:	463b      	mov	r3, r7
   243fe:	4648      	mov	r0, r9
   24400:	9701      	str	r7, [sp, #4]
   24402:	9700      	str	r7, [sp, #0]
   24404:	f7ff fa4c 	bl	238a0 <at_interface_write>
   24408:	4681      	mov	r9, r0
   2440a:	4630      	mov	r0, r6
   2440c:	f7ed fe38 	bl	12080 <strlen>
   24410:	4548      	cmp	r0, r9
   24412:	d139      	bne.n	24488 <pdn_interface_close+0x1ac>
   24414:	463b      	mov	r3, r7
   24416:	e9cd 7700 	strd	r7, r7, [sp]
   2441a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2441e:	4631      	mov	r1, r6
   24420:	f8d8 0000 	ldr.w	r0, [r8]
   24424:	f7ff fb90 	bl	23b48 <at_interface_read>
   24428:	4607      	mov	r7, r0
   2442a:	481e      	ldr	r0, [pc, #120]	; (244a4 <pdn_interface_close+0x1c8>)
   2442c:	f7ed fe28 	bl	12080 <strlen>
   24430:	4287      	cmp	r7, r0
   24432:	db16      	blt.n	24462 <pdn_interface_close+0x186>
   24434:	4602      	mov	r2, r0
   24436:	4631      	mov	r1, r6
   24438:	481a      	ldr	r0, [pc, #104]	; (244a4 <pdn_interface_close+0x1c8>)
   2443a:	f00f fb2e 	bl	33a9a <strncmp>
   2443e:	b980      	cbnz	r0, 24462 <pdn_interface_close+0x186>
   24440:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   24444:	e76a      	b.n	2431c <pdn_interface_close+0x40>
   24446:	2009      	movs	r0, #9
   24448:	f7f8 fd46 	bl	1ced8 <bsd_os_errno_set>
   2444c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24450:	e76a      	b.n	24328 <pdn_interface_close+0x4c>
   24452:	4602      	mov	r2, r0
   24454:	4631      	mov	r1, r6
   24456:	4813      	ldr	r0, [pc, #76]	; (244a4 <pdn_interface_close+0x1c8>)
   24458:	f00f fb1f 	bl	33a9a <strncmp>
   2445c:	2800      	cmp	r0, #0
   2445e:	d0aa      	beq.n	243b6 <pdn_interface_close+0xda>
   24460:	e79c      	b.n	2439c <pdn_interface_close+0xc0>
   24462:	4811      	ldr	r0, [pc, #68]	; (244a8 <pdn_interface_close+0x1cc>)
   24464:	f7ed fe0c 	bl	12080 <strlen>
   24468:	490b      	ldr	r1, [pc, #44]	; (24498 <pdn_interface_close+0x1bc>)
   2446a:	4602      	mov	r2, r0
   2446c:	480e      	ldr	r0, [pc, #56]	; (244a8 <pdn_interface_close+0x1cc>)
   2446e:	f00f fb14 	bl	33a9a <strncmp>
   24472:	b948      	cbnz	r0, 24488 <pdn_interface_close+0x1ac>
   24474:	2008      	movs	r0, #8
   24476:	f7f8 fd2f 	bl	1ced8 <bsd_os_errno_set>
   2447a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2447e:	e74d      	b.n	2431c <pdn_interface_close+0x40>
   24480:	2005      	movs	r0, #5
   24482:	f7f8 fd29 	bl	1ced8 <bsd_os_errno_set>
   24486:	e796      	b.n	243b6 <pdn_interface_close+0xda>
   24488:	2005      	movs	r0, #5
   2448a:	f7f8 fd25 	bl	1ced8 <bsd_os_errno_set>
   2448e:	e7d7      	b.n	24440 <pdn_interface_close+0x164>
   24490:	789a0000 	.word	0x789a0000
   24494:	20022754 	.word	0x20022754
   24498:	20022654 	.word	0x20022654
   2449c:	00034dd0 	.word	0x00034dd0
   244a0:	00034e18 	.word	0x00034e18
   244a4:	00034e08 	.word	0x00034e08
   244a8:	00034e70 	.word	0x00034e70
   244ac:	00034ddc 	.word	0x00034ddc
   244b0:	20022650 	.word	0x20022650

000244b4 <pdn_interface_setopt>:
   244b4:	b538      	push	{r3, r4, r5, lr}
   244b6:	f240 2502 	movw	r5, #514	; 0x202
   244ba:	42a9      	cmp	r1, r5
   244bc:	9c04      	ldr	r4, [sp, #16]
   244be:	d140      	bne.n	24542 <pdn_interface_setopt+0x8e>
   244c0:	2b00      	cmp	r3, #0
   244c2:	d03e      	beq.n	24542 <pdn_interface_setopt+0x8e>
   244c4:	2c00      	cmp	r4, #0
   244c6:	d03c      	beq.n	24542 <pdn_interface_setopt+0x8e>
   244c8:	0c01      	lsrs	r1, r0, #16
   244ca:	4d22      	ldr	r5, [pc, #136]	; (24554 <pdn_interface_setopt+0xa0>)
   244cc:	0409      	lsls	r1, r1, #16
   244ce:	42a9      	cmp	r1, r5
   244d0:	d005      	beq.n	244de <pdn_interface_setopt+0x2a>
   244d2:	2009      	movs	r0, #9
   244d4:	f7f8 fd00 	bl	1ced8 <bsd_os_errno_set>
   244d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   244dc:	bd38      	pop	{r3, r4, r5, pc}
   244de:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   244e2:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   244e6:	2809      	cmp	r0, #9
   244e8:	dcf3      	bgt.n	244d2 <pdn_interface_setopt+0x1e>
   244ea:	491b      	ldr	r1, [pc, #108]	; (24558 <pdn_interface_setopt+0xa4>)
   244ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   244f0:	2900      	cmp	r1, #0
   244f2:	d0ee      	beq.n	244d2 <pdn_interface_setopt+0x1e>
   244f4:	6888      	ldr	r0, [r1, #8]
   244f6:	2800      	cmp	r0, #0
   244f8:	d0eb      	beq.n	244d2 <pdn_interface_setopt+0x1e>
   244fa:	2a01      	cmp	r2, #1
   244fc:	d128      	bne.n	24550 <pdn_interface_setopt+0x9c>
   244fe:	688a      	ldr	r2, [r1, #8]
   24500:	b1ea      	cbz	r2, 2453e <pdn_interface_setopt+0x8a>
   24502:	688a      	ldr	r2, [r1, #8]
   24504:	2a03      	cmp	r2, #3
   24506:	d01a      	beq.n	2453e <pdn_interface_setopt+0x8a>
   24508:	688a      	ldr	r2, [r1, #8]
   2450a:	2a04      	cmp	r2, #4
   2450c:	d017      	beq.n	2453e <pdn_interface_setopt+0x8a>
   2450e:	08a2      	lsrs	r2, r4, #2
   24510:	1e50      	subs	r0, r2, #1
   24512:	2801      	cmp	r0, #1
   24514:	d815      	bhi.n	24542 <pdn_interface_setopt+0x8e>
   24516:	07a0      	lsls	r0, r4, #30
   24518:	d113      	bne.n	24542 <pdn_interface_setopt+0x8e>
   2451a:	6818      	ldr	r0, [r3, #0]
   2451c:	2802      	cmp	r0, #2
   2451e:	d012      	beq.n	24546 <pdn_interface_setopt+0x92>
   24520:	280a      	cmp	r0, #10
   24522:	d10e      	bne.n	24542 <pdn_interface_setopt+0x8e>
   24524:	2002      	movs	r0, #2
   24526:	2a02      	cmp	r2, #2
   24528:	d106      	bne.n	24538 <pdn_interface_setopt+0x84>
   2452a:	685b      	ldr	r3, [r3, #4]
   2452c:	2b02      	cmp	r3, #2
   2452e:	d00c      	beq.n	2454a <pdn_interface_setopt+0x96>
   24530:	2b0a      	cmp	r3, #10
   24532:	d106      	bne.n	24542 <pdn_interface_setopt+0x8e>
   24534:	f040 0002 	orr.w	r0, r0, #2
   24538:	6708      	str	r0, [r1, #112]	; 0x70
   2453a:	2000      	movs	r0, #0
   2453c:	bd38      	pop	{r3, r4, r5, pc}
   2453e:	200e      	movs	r0, #14
   24540:	e7c8      	b.n	244d4 <pdn_interface_setopt+0x20>
   24542:	2016      	movs	r0, #22
   24544:	e7c6      	b.n	244d4 <pdn_interface_setopt+0x20>
   24546:	2001      	movs	r0, #1
   24548:	e7ed      	b.n	24526 <pdn_interface_setopt+0x72>
   2454a:	f040 0001 	orr.w	r0, r0, #1
   2454e:	e7f3      	b.n	24538 <pdn_interface_setopt+0x84>
   24550:	202d      	movs	r0, #45	; 0x2d
   24552:	e7bf      	b.n	244d4 <pdn_interface_setopt+0x20>
   24554:	789a0000 	.word	0x789a0000
   24558:	20022754 	.word	0x20022754

0002455c <pdn_interface_getopt>:
   2455c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24560:	f240 2402 	movw	r4, #514	; 0x202
   24564:	b083      	sub	sp, #12
   24566:	42a1      	cmp	r1, r4
   24568:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2456a:	f040 809f 	bne.w	246ac <pdn_interface_getopt+0x150>
   2456e:	461e      	mov	r6, r3
   24570:	2b00      	cmp	r3, #0
   24572:	f000 809b 	beq.w	246ac <pdn_interface_getopt+0x150>
   24576:	2d00      	cmp	r5, #0
   24578:	f000 8098 	beq.w	246ac <pdn_interface_getopt+0x150>
   2457c:	0c03      	lsrs	r3, r0, #16
   2457e:	4955      	ldr	r1, [pc, #340]	; (246d4 <pdn_interface_getopt+0x178>)
   24580:	041b      	lsls	r3, r3, #16
   24582:	428b      	cmp	r3, r1
   24584:	f040 8094 	bne.w	246b0 <pdn_interface_getopt+0x154>
   24588:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2458c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   24590:	2c09      	cmp	r4, #9
   24592:	f300 808d 	bgt.w	246b0 <pdn_interface_getopt+0x154>
   24596:	4b50      	ldr	r3, [pc, #320]	; (246d8 <pdn_interface_getopt+0x17c>)
   24598:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2459c:	2b00      	cmp	r3, #0
   2459e:	f000 8087 	beq.w	246b0 <pdn_interface_getopt+0x154>
   245a2:	6899      	ldr	r1, [r3, #8]
   245a4:	2900      	cmp	r1, #0
   245a6:	f000 8083 	beq.w	246b0 <pdn_interface_getopt+0x154>
   245aa:	2a02      	cmp	r2, #2
   245ac:	d04c      	beq.n	24648 <pdn_interface_getopt+0xec>
   245ae:	2a03      	cmp	r2, #3
   245b0:	d009      	beq.n	245c6 <pdn_interface_getopt+0x6a>
   245b2:	2a01      	cmp	r2, #1
   245b4:	d052      	beq.n	2465c <pdn_interface_getopt+0x100>
   245b6:	202d      	movs	r0, #45	; 0x2d
   245b8:	f7f8 fc8e 	bl	1ced8 <bsd_os_errno_set>
   245bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   245c0:	b003      	add	sp, #12
   245c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   245c6:	682b      	ldr	r3, [r5, #0]
   245c8:	2b00      	cmp	r3, #0
   245ca:	d06f      	beq.n	246ac <pdn_interface_getopt+0x150>
   245cc:	4a43      	ldr	r2, [pc, #268]	; (246dc <pdn_interface_getopt+0x180>)
   245ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   245d2:	4843      	ldr	r0, [pc, #268]	; (246e0 <pdn_interface_getopt+0x184>)
   245d4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 246ec <pdn_interface_getopt+0x190>
   245d8:	f008 fdfa 	bl	2d1d0 <sniprintf>
   245dc:	4840      	ldr	r0, [pc, #256]	; (246e0 <pdn_interface_getopt+0x184>)
   245de:	f8d8 9000 	ldr.w	r9, [r8]
   245e2:	2700      	movs	r7, #0
   245e4:	f7ed fd4c 	bl	12080 <strlen>
   245e8:	463b      	mov	r3, r7
   245ea:	4602      	mov	r2, r0
   245ec:	493c      	ldr	r1, [pc, #240]	; (246e0 <pdn_interface_getopt+0x184>)
   245ee:	4648      	mov	r0, r9
   245f0:	9701      	str	r7, [sp, #4]
   245f2:	9700      	str	r7, [sp, #0]
   245f4:	f7ff f954 	bl	238a0 <at_interface_write>
   245f8:	4681      	mov	r9, r0
   245fa:	4839      	ldr	r0, [pc, #228]	; (246e0 <pdn_interface_getopt+0x184>)
   245fc:	f7ed fd40 	bl	12080 <strlen>
   24600:	4548      	cmp	r0, r9
   24602:	d160      	bne.n	246c6 <pdn_interface_getopt+0x16a>
   24604:	463b      	mov	r3, r7
   24606:	e9cd 7700 	strd	r7, r7, [sp]
   2460a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2460e:	4934      	ldr	r1, [pc, #208]	; (246e0 <pdn_interface_getopt+0x184>)
   24610:	f8d8 0000 	ldr.w	r0, [r8]
   24614:	f7ff fa98 	bl	23b48 <at_interface_read>
   24618:	4607      	mov	r7, r0
   2461a:	4832      	ldr	r0, [pc, #200]	; (246e4 <pdn_interface_getopt+0x188>)
   2461c:	f7ed fd30 	bl	12080 <strlen>
   24620:	4287      	cmp	r7, r0
   24622:	db32      	blt.n	2468a <pdn_interface_getopt+0x12e>
   24624:	4602      	mov	r2, r0
   24626:	492e      	ldr	r1, [pc, #184]	; (246e0 <pdn_interface_getopt+0x184>)
   24628:	482e      	ldr	r0, [pc, #184]	; (246e4 <pdn_interface_getopt+0x188>)
   2462a:	f00f fa36 	bl	33a9a <strncmp>
   2462e:	4607      	mov	r7, r0
   24630:	bb58      	cbnz	r0, 2468a <pdn_interface_getopt+0x12e>
   24632:	4620      	mov	r0, r4
   24634:	492a      	ldr	r1, [pc, #168]	; (246e0 <pdn_interface_getopt+0x184>)
   24636:	f7ff fb45 	bl	23cc4 <pdn_state_get_parser>
   2463a:	2800      	cmp	r0, #0
   2463c:	dbbc      	blt.n	245b8 <pdn_interface_getopt+0x5c>
   2463e:	2301      	movs	r3, #1
   24640:	7030      	strb	r0, [r6, #0]
   24642:	4638      	mov	r0, r7
   24644:	602b      	str	r3, [r5, #0]
   24646:	e7bb      	b.n	245c0 <pdn_interface_getopt+0x64>
   24648:	682a      	ldr	r2, [r5, #0]
   2464a:	b37a      	cbz	r2, 246ac <pdn_interface_getopt+0x150>
   2464c:	2201      	movs	r2, #1
   2464e:	2000      	movs	r0, #0
   24650:	681b      	ldr	r3, [r3, #0]
   24652:	7033      	strb	r3, [r6, #0]
   24654:	602a      	str	r2, [r5, #0]
   24656:	b003      	add	sp, #12
   24658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2465c:	689a      	ldr	r2, [r3, #8]
   2465e:	b31a      	cbz	r2, 246a8 <pdn_interface_getopt+0x14c>
   24660:	689a      	ldr	r2, [r3, #8]
   24662:	2a04      	cmp	r2, #4
   24664:	d020      	beq.n	246a8 <pdn_interface_getopt+0x14c>
   24666:	682a      	ldr	r2, [r5, #0]
   24668:	2a07      	cmp	r2, #7
   2466a:	d91f      	bls.n	246ac <pdn_interface_getopt+0x150>
   2466c:	f012 0203 	ands.w	r2, r2, #3
   24670:	d11c      	bne.n	246ac <pdn_interface_getopt+0x150>
   24672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   24674:	0799      	lsls	r1, r3, #30
   24676:	d421      	bmi.n	246bc <pdn_interface_getopt+0x160>
   24678:	2104      	movs	r1, #4
   2467a:	07db      	lsls	r3, r3, #31
   2467c:	d502      	bpl.n	24684 <pdn_interface_getopt+0x128>
   2467e:	2302      	movs	r3, #2
   24680:	50b3      	str	r3, [r6, r2]
   24682:	460a      	mov	r2, r1
   24684:	602a      	str	r2, [r5, #0]
   24686:	2000      	movs	r0, #0
   24688:	e79a      	b.n	245c0 <pdn_interface_getopt+0x64>
   2468a:	4817      	ldr	r0, [pc, #92]	; (246e8 <pdn_interface_getopt+0x18c>)
   2468c:	f7ed fcf8 	bl	12080 <strlen>
   24690:	4913      	ldr	r1, [pc, #76]	; (246e0 <pdn_interface_getopt+0x184>)
   24692:	4602      	mov	r2, r0
   24694:	4814      	ldr	r0, [pc, #80]	; (246e8 <pdn_interface_getopt+0x18c>)
   24696:	f00f fa00 	bl	33a9a <strncmp>
   2469a:	b9a0      	cbnz	r0, 246c6 <pdn_interface_getopt+0x16a>
   2469c:	2008      	movs	r0, #8
   2469e:	f7f8 fc1b 	bl	1ced8 <bsd_os_errno_set>
   246a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246a6:	e787      	b.n	245b8 <pdn_interface_getopt+0x5c>
   246a8:	200e      	movs	r0, #14
   246aa:	e785      	b.n	245b8 <pdn_interface_getopt+0x5c>
   246ac:	2016      	movs	r0, #22
   246ae:	e783      	b.n	245b8 <pdn_interface_getopt+0x5c>
   246b0:	2009      	movs	r0, #9
   246b2:	f7f8 fc11 	bl	1ced8 <bsd_os_errno_set>
   246b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246ba:	e781      	b.n	245c0 <pdn_interface_getopt+0x64>
   246bc:	220a      	movs	r2, #10
   246be:	2108      	movs	r1, #8
   246c0:	6032      	str	r2, [r6, #0]
   246c2:	2204      	movs	r2, #4
   246c4:	e7d9      	b.n	2467a <pdn_interface_getopt+0x11e>
   246c6:	2005      	movs	r0, #5
   246c8:	f7f8 fc06 	bl	1ced8 <bsd_os_errno_set>
   246cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246d0:	e772      	b.n	245b8 <pdn_interface_getopt+0x5c>
   246d2:	bf00      	nop
   246d4:	789a0000 	.word	0x789a0000
   246d8:	20022754 	.word	0x20022754
   246dc:	00034e40 	.word	0x00034e40
   246e0:	20022654 	.word	0x20022654
   246e4:	00034e4c 	.word	0x00034e4c
   246e8:	00034e70 	.word	0x00034e70
   246ec:	20022650 	.word	0x20022650

000246f0 <pdn_interface_pdn_id_get>:
   246f0:	2900      	cmp	r1, #0
   246f2:	f000 83b9 	beq.w	24e68 <pdn_interface_pdn_id_get+0x778>
   246f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   246fa:	4ca3      	ldr	r4, [pc, #652]	; (24988 <pdn_interface_pdn_id_get+0x298>)
   246fc:	2802      	cmp	r0, #2
   246fe:	b083      	sub	sp, #12
   24700:	460d      	mov	r5, r1
   24702:	6823      	ldr	r3, [r4, #0]
   24704:	f000 8094 	beq.w	24830 <pdn_interface_pdn_id_get+0x140>
   24708:	280a      	cmp	r0, #10
   2470a:	d03f      	beq.n	2478c <pdn_interface_pdn_id_get+0x9c>
   2470c:	b11b      	cbz	r3, 24716 <pdn_interface_pdn_id_get+0x26>
   2470e:	689b      	ldr	r3, [r3, #8]
   24710:	2b03      	cmp	r3, #3
   24712:	f000 8127 	beq.w	24964 <pdn_interface_pdn_id_get+0x274>
   24716:	6863      	ldr	r3, [r4, #4]
   24718:	b11b      	cbz	r3, 24722 <pdn_interface_pdn_id_get+0x32>
   2471a:	689b      	ldr	r3, [r3, #8]
   2471c:	2b03      	cmp	r3, #3
   2471e:	f000 8110 	beq.w	24942 <pdn_interface_pdn_id_get+0x252>
   24722:	68a3      	ldr	r3, [r4, #8]
   24724:	b11b      	cbz	r3, 2472e <pdn_interface_pdn_id_get+0x3e>
   24726:	689b      	ldr	r3, [r3, #8]
   24728:	2b03      	cmp	r3, #3
   2472a:	f000 80f9 	beq.w	24920 <pdn_interface_pdn_id_get+0x230>
   2472e:	68e3      	ldr	r3, [r4, #12]
   24730:	b11b      	cbz	r3, 2473a <pdn_interface_pdn_id_get+0x4a>
   24732:	689b      	ldr	r3, [r3, #8]
   24734:	2b03      	cmp	r3, #3
   24736:	f000 80e2 	beq.w	248fe <pdn_interface_pdn_id_get+0x20e>
   2473a:	6923      	ldr	r3, [r4, #16]
   2473c:	b11b      	cbz	r3, 24746 <pdn_interface_pdn_id_get+0x56>
   2473e:	689b      	ldr	r3, [r3, #8]
   24740:	2b03      	cmp	r3, #3
   24742:	f000 8123 	beq.w	2498c <pdn_interface_pdn_id_get+0x29c>
   24746:	6963      	ldr	r3, [r4, #20]
   24748:	b11b      	cbz	r3, 24752 <pdn_interface_pdn_id_get+0x62>
   2474a:	689b      	ldr	r3, [r3, #8]
   2474c:	2b03      	cmp	r3, #3
   2474e:	f000 8161 	beq.w	24a14 <pdn_interface_pdn_id_get+0x324>
   24752:	69a3      	ldr	r3, [r4, #24]
   24754:	b11b      	cbz	r3, 2475e <pdn_interface_pdn_id_get+0x6e>
   24756:	689b      	ldr	r3, [r3, #8]
   24758:	2b03      	cmp	r3, #3
   2475a:	f000 814a 	beq.w	249f2 <pdn_interface_pdn_id_get+0x302>
   2475e:	69e3      	ldr	r3, [r4, #28]
   24760:	b11b      	cbz	r3, 2476a <pdn_interface_pdn_id_get+0x7a>
   24762:	689b      	ldr	r3, [r3, #8]
   24764:	2b03      	cmp	r3, #3
   24766:	f000 8133 	beq.w	249d0 <pdn_interface_pdn_id_get+0x2e0>
   2476a:	6a23      	ldr	r3, [r4, #32]
   2476c:	b11b      	cbz	r3, 24776 <pdn_interface_pdn_id_get+0x86>
   2476e:	689b      	ldr	r3, [r3, #8]
   24770:	2b03      	cmp	r3, #3
   24772:	f000 811c 	beq.w	249ae <pdn_interface_pdn_id_get+0x2be>
   24776:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24778:	b11b      	cbz	r3, 24782 <pdn_interface_pdn_id_get+0x92>
   2477a:	689b      	ldr	r3, [r3, #8]
   2477c:	2b03      	cmp	r3, #3
   2477e:	f000 80ad 	beq.w	248dc <pdn_interface_pdn_id_get+0x1ec>
   24782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24786:	b003      	add	sp, #12
   24788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2478c:	b11b      	cbz	r3, 24796 <pdn_interface_pdn_id_get+0xa6>
   2478e:	689b      	ldr	r3, [r3, #8]
   24790:	2b03      	cmp	r3, #3
   24792:	f000 8335 	beq.w	24e00 <pdn_interface_pdn_id_get+0x710>
   24796:	6863      	ldr	r3, [r4, #4]
   24798:	b11b      	cbz	r3, 247a2 <pdn_interface_pdn_id_get+0xb2>
   2479a:	689b      	ldr	r3, [r3, #8]
   2479c:	2b03      	cmp	r3, #3
   2479e:	f000 82fd 	beq.w	24d9c <pdn_interface_pdn_id_get+0x6ac>
   247a2:	68a3      	ldr	r3, [r4, #8]
   247a4:	b11b      	cbz	r3, 247ae <pdn_interface_pdn_id_get+0xbe>
   247a6:	689b      	ldr	r3, [r3, #8]
   247a8:	2b03      	cmp	r3, #3
   247aa:	f000 82d5 	beq.w	24d58 <pdn_interface_pdn_id_get+0x668>
   247ae:	68e3      	ldr	r3, [r4, #12]
   247b0:	b11b      	cbz	r3, 247ba <pdn_interface_pdn_id_get+0xca>
   247b2:	689e      	ldr	r6, [r3, #8]
   247b4:	2e03      	cmp	r6, #3
   247b6:	f000 81f0 	beq.w	24b9a <pdn_interface_pdn_id_get+0x4aa>
   247ba:	6923      	ldr	r3, [r4, #16]
   247bc:	b11b      	cbz	r3, 247c6 <pdn_interface_pdn_id_get+0xd6>
   247be:	689b      	ldr	r3, [r3, #8]
   247c0:	2b03      	cmp	r3, #3
   247c2:	f000 8203 	beq.w	24bcc <pdn_interface_pdn_id_get+0x4dc>
   247c6:	6963      	ldr	r3, [r4, #20]
   247c8:	b11b      	cbz	r3, 247d2 <pdn_interface_pdn_id_get+0xe2>
   247ca:	689b      	ldr	r3, [r3, #8]
   247cc:	2b03      	cmp	r3, #3
   247ce:	f000 8215 	beq.w	24bfc <pdn_interface_pdn_id_get+0x50c>
   247d2:	69a3      	ldr	r3, [r4, #24]
   247d4:	b11b      	cbz	r3, 247de <pdn_interface_pdn_id_get+0xee>
   247d6:	689b      	ldr	r3, [r3, #8]
   247d8:	2b03      	cmp	r3, #3
   247da:	f000 8227 	beq.w	24c2c <pdn_interface_pdn_id_get+0x53c>
   247de:	69e3      	ldr	r3, [r4, #28]
   247e0:	b11b      	cbz	r3, 247ea <pdn_interface_pdn_id_get+0xfa>
   247e2:	689b      	ldr	r3, [r3, #8]
   247e4:	2b03      	cmp	r3, #3
   247e6:	f000 8239 	beq.w	24c5c <pdn_interface_pdn_id_get+0x56c>
   247ea:	6a23      	ldr	r3, [r4, #32]
   247ec:	b11b      	cbz	r3, 247f6 <pdn_interface_pdn_id_get+0x106>
   247ee:	689b      	ldr	r3, [r3, #8]
   247f0:	2b03      	cmp	r3, #3
   247f2:	f000 824d 	beq.w	24c90 <pdn_interface_pdn_id_get+0x5a0>
   247f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   247f8:	2b00      	cmp	r3, #0
   247fa:	d0c2      	beq.n	24782 <pdn_interface_pdn_id_get+0x92>
   247fc:	689b      	ldr	r3, [r3, #8]
   247fe:	2b03      	cmp	r3, #3
   24800:	d1bf      	bne.n	24782 <pdn_interface_pdn_id_get+0x92>
   24802:	4628      	mov	r0, r5
   24804:	f7ed fc3c 	bl	12080 <strlen>
   24808:	4606      	mov	r6, r0
   2480a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2480c:	300c      	adds	r0, #12
   2480e:	f7ed fc37 	bl	12080 <strlen>
   24812:	42b0      	cmp	r0, r6
   24814:	d1b5      	bne.n	24782 <pdn_interface_pdn_id_get+0x92>
   24816:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24818:	4628      	mov	r0, r5
   2481a:	310c      	adds	r1, #12
   2481c:	f7ed fc26 	bl	1206c <strcmp>
   24820:	2800      	cmp	r0, #0
   24822:	d1ae      	bne.n	24782 <pdn_interface_pdn_id_get+0x92>
   24824:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24828:	0792      	lsls	r2, r2, #30
   2482a:	d5aa      	bpl.n	24782 <pdn_interface_pdn_id_get+0x92>
   2482c:	2609      	movs	r6, #9
   2482e:	e11a      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24830:	b11b      	cbz	r3, 2483a <pdn_interface_pdn_id_get+0x14a>
   24832:	689b      	ldr	r3, [r3, #8]
   24834:	2b03      	cmp	r3, #3
   24836:	f000 82fd 	beq.w	24e34 <pdn_interface_pdn_id_get+0x744>
   2483a:	6863      	ldr	r3, [r4, #4]
   2483c:	b11b      	cbz	r3, 24846 <pdn_interface_pdn_id_get+0x156>
   2483e:	689b      	ldr	r3, [r3, #8]
   24840:	2b03      	cmp	r3, #3
   24842:	f000 82c5 	beq.w	24dd0 <pdn_interface_pdn_id_get+0x6e0>
   24846:	68a3      	ldr	r3, [r4, #8]
   24848:	b11b      	cbz	r3, 24852 <pdn_interface_pdn_id_get+0x162>
   2484a:	689b      	ldr	r3, [r3, #8]
   2484c:	2b03      	cmp	r3, #3
   2484e:	f000 8269 	beq.w	24d24 <pdn_interface_pdn_id_get+0x634>
   24852:	68e3      	ldr	r3, [r4, #12]
   24854:	b11b      	cbz	r3, 2485e <pdn_interface_pdn_id_get+0x16e>
   24856:	689e      	ldr	r6, [r3, #8]
   24858:	2e03      	cmp	r6, #3
   2485a:	f000 80ec 	beq.w	24a36 <pdn_interface_pdn_id_get+0x346>
   2485e:	6923      	ldr	r3, [r4, #16]
   24860:	b11b      	cbz	r3, 2486a <pdn_interface_pdn_id_get+0x17a>
   24862:	689b      	ldr	r3, [r3, #8]
   24864:	2b03      	cmp	r3, #3
   24866:	f000 814a 	beq.w	24afe <pdn_interface_pdn_id_get+0x40e>
   2486a:	6963      	ldr	r3, [r4, #20]
   2486c:	b11b      	cbz	r3, 24876 <pdn_interface_pdn_id_get+0x186>
   2486e:	689b      	ldr	r3, [r3, #8]
   24870:	2b03      	cmp	r3, #3
   24872:	f000 815e 	beq.w	24b32 <pdn_interface_pdn_id_get+0x442>
   24876:	69a3      	ldr	r3, [r4, #24]
   24878:	b11b      	cbz	r3, 24882 <pdn_interface_pdn_id_get+0x192>
   2487a:	689b      	ldr	r3, [r3, #8]
   2487c:	2b03      	cmp	r3, #3
   2487e:	f000 8172 	beq.w	24b66 <pdn_interface_pdn_id_get+0x476>
   24882:	69e3      	ldr	r3, [r4, #28]
   24884:	b11b      	cbz	r3, 2488e <pdn_interface_pdn_id_get+0x19e>
   24886:	689b      	ldr	r3, [r3, #8]
   24888:	2b03      	cmp	r3, #3
   2488a:	f000 821b 	beq.w	24cc4 <pdn_interface_pdn_id_get+0x5d4>
   2488e:	6a23      	ldr	r3, [r4, #32]
   24890:	b11b      	cbz	r3, 2489a <pdn_interface_pdn_id_get+0x1aa>
   24892:	689b      	ldr	r3, [r3, #8]
   24894:	2b03      	cmp	r3, #3
   24896:	f000 822d 	beq.w	24cf4 <pdn_interface_pdn_id_get+0x604>
   2489a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2489c:	2b00      	cmp	r3, #0
   2489e:	f43f af70 	beq.w	24782 <pdn_interface_pdn_id_get+0x92>
   248a2:	689b      	ldr	r3, [r3, #8]
   248a4:	2b03      	cmp	r3, #3
   248a6:	f47f af6c 	bne.w	24782 <pdn_interface_pdn_id_get+0x92>
   248aa:	4628      	mov	r0, r5
   248ac:	f7ed fbe8 	bl	12080 <strlen>
   248b0:	4606      	mov	r6, r0
   248b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   248b4:	300c      	adds	r0, #12
   248b6:	f7ed fbe3 	bl	12080 <strlen>
   248ba:	4286      	cmp	r6, r0
   248bc:	f47f af61 	bne.w	24782 <pdn_interface_pdn_id_get+0x92>
   248c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   248c2:	4628      	mov	r0, r5
   248c4:	310c      	adds	r1, #12
   248c6:	f7ed fbd1 	bl	1206c <strcmp>
   248ca:	2800      	cmp	r0, #0
   248cc:	f47f af59 	bne.w	24782 <pdn_interface_pdn_id_get+0x92>
   248d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   248d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   248d4:	07d2      	lsls	r2, r2, #31
   248d6:	f57f af54 	bpl.w	24782 <pdn_interface_pdn_id_get+0x92>
   248da:	e7a7      	b.n	2482c <pdn_interface_pdn_id_get+0x13c>
   248dc:	4628      	mov	r0, r5
   248de:	f7ed fbcf 	bl	12080 <strlen>
   248e2:	4606      	mov	r6, r0
   248e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   248e6:	300c      	adds	r0, #12
   248e8:	f7ed fbca 	bl	12080 <strlen>
   248ec:	42b0      	cmp	r0, r6
   248ee:	f47f af48 	bne.w	24782 <pdn_interface_pdn_id_get+0x92>
   248f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   248f4:	4628      	mov	r0, r5
   248f6:	310c      	adds	r1, #12
   248f8:	f7ed fbb8 	bl	1206c <strcmp>
   248fc:	e741      	b.n	24782 <pdn_interface_pdn_id_get+0x92>
   248fe:	4628      	mov	r0, r5
   24900:	f7ed fbbe 	bl	12080 <strlen>
   24904:	4606      	mov	r6, r0
   24906:	68e0      	ldr	r0, [r4, #12]
   24908:	300c      	adds	r0, #12
   2490a:	f7ed fbb9 	bl	12080 <strlen>
   2490e:	4286      	cmp	r6, r0
   24910:	f47f af13 	bne.w	2473a <pdn_interface_pdn_id_get+0x4a>
   24914:	68e1      	ldr	r1, [r4, #12]
   24916:	4628      	mov	r0, r5
   24918:	310c      	adds	r1, #12
   2491a:	f7ed fba7 	bl	1206c <strcmp>
   2491e:	e70c      	b.n	2473a <pdn_interface_pdn_id_get+0x4a>
   24920:	4628      	mov	r0, r5
   24922:	f7ed fbad 	bl	12080 <strlen>
   24926:	4606      	mov	r6, r0
   24928:	68a0      	ldr	r0, [r4, #8]
   2492a:	300c      	adds	r0, #12
   2492c:	f7ed fba8 	bl	12080 <strlen>
   24930:	4286      	cmp	r6, r0
   24932:	f47f aefc 	bne.w	2472e <pdn_interface_pdn_id_get+0x3e>
   24936:	68a1      	ldr	r1, [r4, #8]
   24938:	4628      	mov	r0, r5
   2493a:	310c      	adds	r1, #12
   2493c:	f7ed fb96 	bl	1206c <strcmp>
   24940:	e6f5      	b.n	2472e <pdn_interface_pdn_id_get+0x3e>
   24942:	4628      	mov	r0, r5
   24944:	f7ed fb9c 	bl	12080 <strlen>
   24948:	4606      	mov	r6, r0
   2494a:	6860      	ldr	r0, [r4, #4]
   2494c:	300c      	adds	r0, #12
   2494e:	f7ed fb97 	bl	12080 <strlen>
   24952:	4286      	cmp	r6, r0
   24954:	f47f aee5 	bne.w	24722 <pdn_interface_pdn_id_get+0x32>
   24958:	6861      	ldr	r1, [r4, #4]
   2495a:	4628      	mov	r0, r5
   2495c:	310c      	adds	r1, #12
   2495e:	f7ed fb85 	bl	1206c <strcmp>
   24962:	e6de      	b.n	24722 <pdn_interface_pdn_id_get+0x32>
   24964:	4608      	mov	r0, r1
   24966:	f7ed fb8b 	bl	12080 <strlen>
   2496a:	4606      	mov	r6, r0
   2496c:	6820      	ldr	r0, [r4, #0]
   2496e:	300c      	adds	r0, #12
   24970:	f7ed fb86 	bl	12080 <strlen>
   24974:	4286      	cmp	r6, r0
   24976:	f47f aece 	bne.w	24716 <pdn_interface_pdn_id_get+0x26>
   2497a:	6821      	ldr	r1, [r4, #0]
   2497c:	4628      	mov	r0, r5
   2497e:	310c      	adds	r1, #12
   24980:	f7ed fb74 	bl	1206c <strcmp>
   24984:	e6c7      	b.n	24716 <pdn_interface_pdn_id_get+0x26>
   24986:	bf00      	nop
   24988:	20022754 	.word	0x20022754
   2498c:	4628      	mov	r0, r5
   2498e:	f7ed fb77 	bl	12080 <strlen>
   24992:	4606      	mov	r6, r0
   24994:	6920      	ldr	r0, [r4, #16]
   24996:	300c      	adds	r0, #12
   24998:	f7ed fb72 	bl	12080 <strlen>
   2499c:	4286      	cmp	r6, r0
   2499e:	f47f aed2 	bne.w	24746 <pdn_interface_pdn_id_get+0x56>
   249a2:	6921      	ldr	r1, [r4, #16]
   249a4:	4628      	mov	r0, r5
   249a6:	310c      	adds	r1, #12
   249a8:	f7ed fb60 	bl	1206c <strcmp>
   249ac:	e6cb      	b.n	24746 <pdn_interface_pdn_id_get+0x56>
   249ae:	4628      	mov	r0, r5
   249b0:	f7ed fb66 	bl	12080 <strlen>
   249b4:	4606      	mov	r6, r0
   249b6:	6a20      	ldr	r0, [r4, #32]
   249b8:	300c      	adds	r0, #12
   249ba:	f7ed fb61 	bl	12080 <strlen>
   249be:	4286      	cmp	r6, r0
   249c0:	f47f aed9 	bne.w	24776 <pdn_interface_pdn_id_get+0x86>
   249c4:	6a21      	ldr	r1, [r4, #32]
   249c6:	4628      	mov	r0, r5
   249c8:	310c      	adds	r1, #12
   249ca:	f7ed fb4f 	bl	1206c <strcmp>
   249ce:	e6d2      	b.n	24776 <pdn_interface_pdn_id_get+0x86>
   249d0:	4628      	mov	r0, r5
   249d2:	f7ed fb55 	bl	12080 <strlen>
   249d6:	4606      	mov	r6, r0
   249d8:	69e0      	ldr	r0, [r4, #28]
   249da:	300c      	adds	r0, #12
   249dc:	f7ed fb50 	bl	12080 <strlen>
   249e0:	4286      	cmp	r6, r0
   249e2:	f47f aec2 	bne.w	2476a <pdn_interface_pdn_id_get+0x7a>
   249e6:	69e1      	ldr	r1, [r4, #28]
   249e8:	4628      	mov	r0, r5
   249ea:	310c      	adds	r1, #12
   249ec:	f7ed fb3e 	bl	1206c <strcmp>
   249f0:	e6bb      	b.n	2476a <pdn_interface_pdn_id_get+0x7a>
   249f2:	4628      	mov	r0, r5
   249f4:	f7ed fb44 	bl	12080 <strlen>
   249f8:	4606      	mov	r6, r0
   249fa:	69a0      	ldr	r0, [r4, #24]
   249fc:	300c      	adds	r0, #12
   249fe:	f7ed fb3f 	bl	12080 <strlen>
   24a02:	4286      	cmp	r6, r0
   24a04:	f47f aeab 	bne.w	2475e <pdn_interface_pdn_id_get+0x6e>
   24a08:	69a1      	ldr	r1, [r4, #24]
   24a0a:	4628      	mov	r0, r5
   24a0c:	310c      	adds	r1, #12
   24a0e:	f7ed fb2d 	bl	1206c <strcmp>
   24a12:	e6a4      	b.n	2475e <pdn_interface_pdn_id_get+0x6e>
   24a14:	4628      	mov	r0, r5
   24a16:	f7ed fb33 	bl	12080 <strlen>
   24a1a:	4606      	mov	r6, r0
   24a1c:	6960      	ldr	r0, [r4, #20]
   24a1e:	300c      	adds	r0, #12
   24a20:	f7ed fb2e 	bl	12080 <strlen>
   24a24:	4286      	cmp	r6, r0
   24a26:	f47f ae94 	bne.w	24752 <pdn_interface_pdn_id_get+0x62>
   24a2a:	6961      	ldr	r1, [r4, #20]
   24a2c:	4628      	mov	r0, r5
   24a2e:	310c      	adds	r1, #12
   24a30:	f7ed fb1c 	bl	1206c <strcmp>
   24a34:	e68d      	b.n	24752 <pdn_interface_pdn_id_get+0x62>
   24a36:	4628      	mov	r0, r5
   24a38:	f7ed fb22 	bl	12080 <strlen>
   24a3c:	4607      	mov	r7, r0
   24a3e:	68e0      	ldr	r0, [r4, #12]
   24a40:	300c      	adds	r0, #12
   24a42:	f7ed fb1d 	bl	12080 <strlen>
   24a46:	4287      	cmp	r7, r0
   24a48:	f47f af09 	bne.w	2485e <pdn_interface_pdn_id_get+0x16e>
   24a4c:	68e1      	ldr	r1, [r4, #12]
   24a4e:	4628      	mov	r0, r5
   24a50:	310c      	adds	r1, #12
   24a52:	f7ed fb0b 	bl	1206c <strcmp>
   24a56:	2800      	cmp	r0, #0
   24a58:	f47f af01 	bne.w	2485e <pdn_interface_pdn_id_get+0x16e>
   24a5c:	68e3      	ldr	r3, [r4, #12]
   24a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24a60:	07d1      	lsls	r1, r2, #31
   24a62:	f57f aefc 	bpl.w	2485e <pdn_interface_pdn_id_get+0x16e>
   24a66:	6858      	ldr	r0, [r3, #4]
   24a68:	1c43      	adds	r3, r0, #1
   24a6a:	f47f ae8c 	bne.w	24786 <pdn_interface_pdn_id_get+0x96>
   24a6e:	4dc6      	ldr	r5, [pc, #792]	; (24d88 <pdn_interface_pdn_id_get+0x698>)
   24a70:	4ac6      	ldr	r2, [pc, #792]	; (24d8c <pdn_interface_pdn_id_get+0x69c>)
   24a72:	f44f 7180 	mov.w	r1, #256	; 0x100
   24a76:	4628      	mov	r0, r5
   24a78:	f008 fbaa 	bl	2d1d0 <sniprintf>
   24a7c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   24a80:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   24a84:	681b      	ldr	r3, [r3, #0]
   24a86:	4ac2      	ldr	r2, [pc, #776]	; (24d90 <pdn_interface_pdn_id_get+0x6a0>)
   24a88:	4428      	add	r0, r5
   24a8a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 24d98 <pdn_interface_pdn_id_get+0x6a8>
   24a8e:	f008 fb9f 	bl	2d1d0 <sniprintf>
   24a92:	4628      	mov	r0, r5
   24a94:	f8d8 9000 	ldr.w	r9, [r8]
   24a98:	2700      	movs	r7, #0
   24a9a:	f7ed faf1 	bl	12080 <strlen>
   24a9e:	4629      	mov	r1, r5
   24aa0:	4602      	mov	r2, r0
   24aa2:	463b      	mov	r3, r7
   24aa4:	4648      	mov	r0, r9
   24aa6:	9701      	str	r7, [sp, #4]
   24aa8:	9700      	str	r7, [sp, #0]
   24aaa:	f7fe fef9 	bl	238a0 <at_interface_write>
   24aae:	4681      	mov	r9, r0
   24ab0:	4628      	mov	r0, r5
   24ab2:	f7ed fae5 	bl	12080 <strlen>
   24ab6:	4548      	cmp	r0, r9
   24ab8:	f040 81e9 	bne.w	24e8e <pdn_interface_pdn_id_get+0x79e>
   24abc:	463b      	mov	r3, r7
   24abe:	f44f 7280 	mov.w	r2, #256	; 0x100
   24ac2:	e9cd 7700 	strd	r7, r7, [sp]
   24ac6:	4629      	mov	r1, r5
   24ac8:	f8d8 0000 	ldr.w	r0, [r8]
   24acc:	f7ff f83c 	bl	23b48 <at_interface_read>
   24ad0:	4607      	mov	r7, r0
   24ad2:	48b0      	ldr	r0, [pc, #704]	; (24d94 <pdn_interface_pdn_id_get+0x6a4>)
   24ad4:	f7ed fad4 	bl	12080 <strlen>
   24ad8:	4287      	cmp	r7, r0
   24ada:	4602      	mov	r2, r0
   24adc:	f2c0 81c7 	blt.w	24e6e <pdn_interface_pdn_id_get+0x77e>
   24ae0:	4629      	mov	r1, r5
   24ae2:	48ac      	ldr	r0, [pc, #688]	; (24d94 <pdn_interface_pdn_id_get+0x6a4>)
   24ae4:	f00e ffd9 	bl	33a9a <strncmp>
   24ae8:	2800      	cmp	r0, #0
   24aea:	f040 81c0 	bne.w	24e6e <pdn_interface_pdn_id_get+0x77e>
   24aee:	4629      	mov	r1, r5
   24af0:	4630      	mov	r0, r6
   24af2:	f7ff f91d 	bl	23d30 <pdn_id_get_parser>
   24af6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   24afa:	6858      	ldr	r0, [r3, #4]
   24afc:	e643      	b.n	24786 <pdn_interface_pdn_id_get+0x96>
   24afe:	4628      	mov	r0, r5
   24b00:	f7ed fabe 	bl	12080 <strlen>
   24b04:	4606      	mov	r6, r0
   24b06:	6920      	ldr	r0, [r4, #16]
   24b08:	300c      	adds	r0, #12
   24b0a:	f7ed fab9 	bl	12080 <strlen>
   24b0e:	4286      	cmp	r6, r0
   24b10:	f47f aeab 	bne.w	2486a <pdn_interface_pdn_id_get+0x17a>
   24b14:	6921      	ldr	r1, [r4, #16]
   24b16:	4628      	mov	r0, r5
   24b18:	310c      	adds	r1, #12
   24b1a:	f7ed faa7 	bl	1206c <strcmp>
   24b1e:	2800      	cmp	r0, #0
   24b20:	f47f aea3 	bne.w	2486a <pdn_interface_pdn_id_get+0x17a>
   24b24:	6923      	ldr	r3, [r4, #16]
   24b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24b28:	07d2      	lsls	r2, r2, #31
   24b2a:	f57f ae9e 	bpl.w	2486a <pdn_interface_pdn_id_get+0x17a>
   24b2e:	2604      	movs	r6, #4
   24b30:	e799      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24b32:	4628      	mov	r0, r5
   24b34:	f7ed faa4 	bl	12080 <strlen>
   24b38:	4606      	mov	r6, r0
   24b3a:	6960      	ldr	r0, [r4, #20]
   24b3c:	300c      	adds	r0, #12
   24b3e:	f7ed fa9f 	bl	12080 <strlen>
   24b42:	4286      	cmp	r6, r0
   24b44:	f47f ae97 	bne.w	24876 <pdn_interface_pdn_id_get+0x186>
   24b48:	6961      	ldr	r1, [r4, #20]
   24b4a:	4628      	mov	r0, r5
   24b4c:	310c      	adds	r1, #12
   24b4e:	f7ed fa8d 	bl	1206c <strcmp>
   24b52:	2800      	cmp	r0, #0
   24b54:	f47f ae8f 	bne.w	24876 <pdn_interface_pdn_id_get+0x186>
   24b58:	6963      	ldr	r3, [r4, #20]
   24b5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24b5c:	07d7      	lsls	r7, r2, #31
   24b5e:	f57f ae8a 	bpl.w	24876 <pdn_interface_pdn_id_get+0x186>
   24b62:	2605      	movs	r6, #5
   24b64:	e77f      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24b66:	4628      	mov	r0, r5
   24b68:	f7ed fa8a 	bl	12080 <strlen>
   24b6c:	4606      	mov	r6, r0
   24b6e:	69a0      	ldr	r0, [r4, #24]
   24b70:	300c      	adds	r0, #12
   24b72:	f7ed fa85 	bl	12080 <strlen>
   24b76:	4286      	cmp	r6, r0
   24b78:	f47f ae83 	bne.w	24882 <pdn_interface_pdn_id_get+0x192>
   24b7c:	69a1      	ldr	r1, [r4, #24]
   24b7e:	4628      	mov	r0, r5
   24b80:	310c      	adds	r1, #12
   24b82:	f7ed fa73 	bl	1206c <strcmp>
   24b86:	2800      	cmp	r0, #0
   24b88:	f47f ae7b 	bne.w	24882 <pdn_interface_pdn_id_get+0x192>
   24b8c:	69a3      	ldr	r3, [r4, #24]
   24b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24b90:	07d6      	lsls	r6, r2, #31
   24b92:	f57f ae76 	bpl.w	24882 <pdn_interface_pdn_id_get+0x192>
   24b96:	2606      	movs	r6, #6
   24b98:	e765      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24b9a:	4628      	mov	r0, r5
   24b9c:	f7ed fa70 	bl	12080 <strlen>
   24ba0:	4607      	mov	r7, r0
   24ba2:	68e0      	ldr	r0, [r4, #12]
   24ba4:	300c      	adds	r0, #12
   24ba6:	f7ed fa6b 	bl	12080 <strlen>
   24baa:	4287      	cmp	r7, r0
   24bac:	f47f ae05 	bne.w	247ba <pdn_interface_pdn_id_get+0xca>
   24bb0:	68e1      	ldr	r1, [r4, #12]
   24bb2:	4628      	mov	r0, r5
   24bb4:	310c      	adds	r1, #12
   24bb6:	f7ed fa59 	bl	1206c <strcmp>
   24bba:	2800      	cmp	r0, #0
   24bbc:	f47f adfd 	bne.w	247ba <pdn_interface_pdn_id_get+0xca>
   24bc0:	68e3      	ldr	r3, [r4, #12]
   24bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24bc4:	0791      	lsls	r1, r2, #30
   24bc6:	f53f af4e 	bmi.w	24a66 <pdn_interface_pdn_id_get+0x376>
   24bca:	e5f6      	b.n	247ba <pdn_interface_pdn_id_get+0xca>
   24bcc:	4628      	mov	r0, r5
   24bce:	f7ed fa57 	bl	12080 <strlen>
   24bd2:	4606      	mov	r6, r0
   24bd4:	6920      	ldr	r0, [r4, #16]
   24bd6:	300c      	adds	r0, #12
   24bd8:	f7ed fa52 	bl	12080 <strlen>
   24bdc:	4286      	cmp	r6, r0
   24bde:	f47f adf2 	bne.w	247c6 <pdn_interface_pdn_id_get+0xd6>
   24be2:	6921      	ldr	r1, [r4, #16]
   24be4:	4628      	mov	r0, r5
   24be6:	310c      	adds	r1, #12
   24be8:	f7ed fa40 	bl	1206c <strcmp>
   24bec:	2800      	cmp	r0, #0
   24bee:	f47f adea 	bne.w	247c6 <pdn_interface_pdn_id_get+0xd6>
   24bf2:	6923      	ldr	r3, [r4, #16]
   24bf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24bf6:	0792      	lsls	r2, r2, #30
   24bf8:	d499      	bmi.n	24b2e <pdn_interface_pdn_id_get+0x43e>
   24bfa:	e5e4      	b.n	247c6 <pdn_interface_pdn_id_get+0xd6>
   24bfc:	4628      	mov	r0, r5
   24bfe:	f7ed fa3f 	bl	12080 <strlen>
   24c02:	4606      	mov	r6, r0
   24c04:	6960      	ldr	r0, [r4, #20]
   24c06:	300c      	adds	r0, #12
   24c08:	f7ed fa3a 	bl	12080 <strlen>
   24c0c:	4286      	cmp	r6, r0
   24c0e:	f47f ade0 	bne.w	247d2 <pdn_interface_pdn_id_get+0xe2>
   24c12:	6961      	ldr	r1, [r4, #20]
   24c14:	4628      	mov	r0, r5
   24c16:	310c      	adds	r1, #12
   24c18:	f7ed fa28 	bl	1206c <strcmp>
   24c1c:	2800      	cmp	r0, #0
   24c1e:	f47f add8 	bne.w	247d2 <pdn_interface_pdn_id_get+0xe2>
   24c22:	6963      	ldr	r3, [r4, #20]
   24c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24c26:	0797      	lsls	r7, r2, #30
   24c28:	d49b      	bmi.n	24b62 <pdn_interface_pdn_id_get+0x472>
   24c2a:	e5d2      	b.n	247d2 <pdn_interface_pdn_id_get+0xe2>
   24c2c:	4628      	mov	r0, r5
   24c2e:	f7ed fa27 	bl	12080 <strlen>
   24c32:	4606      	mov	r6, r0
   24c34:	69a0      	ldr	r0, [r4, #24]
   24c36:	300c      	adds	r0, #12
   24c38:	f7ed fa22 	bl	12080 <strlen>
   24c3c:	4286      	cmp	r6, r0
   24c3e:	f47f adce 	bne.w	247de <pdn_interface_pdn_id_get+0xee>
   24c42:	69a1      	ldr	r1, [r4, #24]
   24c44:	4628      	mov	r0, r5
   24c46:	310c      	adds	r1, #12
   24c48:	f7ed fa10 	bl	1206c <strcmp>
   24c4c:	2800      	cmp	r0, #0
   24c4e:	f47f adc6 	bne.w	247de <pdn_interface_pdn_id_get+0xee>
   24c52:	69a3      	ldr	r3, [r4, #24]
   24c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24c56:	0796      	lsls	r6, r2, #30
   24c58:	d49d      	bmi.n	24b96 <pdn_interface_pdn_id_get+0x4a6>
   24c5a:	e5c0      	b.n	247de <pdn_interface_pdn_id_get+0xee>
   24c5c:	4628      	mov	r0, r5
   24c5e:	f7ed fa0f 	bl	12080 <strlen>
   24c62:	4606      	mov	r6, r0
   24c64:	69e0      	ldr	r0, [r4, #28]
   24c66:	300c      	adds	r0, #12
   24c68:	f7ed fa0a 	bl	12080 <strlen>
   24c6c:	4286      	cmp	r6, r0
   24c6e:	f47f adbc 	bne.w	247ea <pdn_interface_pdn_id_get+0xfa>
   24c72:	69e1      	ldr	r1, [r4, #28]
   24c74:	4628      	mov	r0, r5
   24c76:	310c      	adds	r1, #12
   24c78:	f7ed f9f8 	bl	1206c <strcmp>
   24c7c:	2800      	cmp	r0, #0
   24c7e:	f47f adb4 	bne.w	247ea <pdn_interface_pdn_id_get+0xfa>
   24c82:	69e3      	ldr	r3, [r4, #28]
   24c84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24c86:	0790      	lsls	r0, r2, #30
   24c88:	f57f adaf 	bpl.w	247ea <pdn_interface_pdn_id_get+0xfa>
   24c8c:	2607      	movs	r6, #7
   24c8e:	e6ea      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24c90:	4628      	mov	r0, r5
   24c92:	f7ed f9f5 	bl	12080 <strlen>
   24c96:	4606      	mov	r6, r0
   24c98:	6a20      	ldr	r0, [r4, #32]
   24c9a:	300c      	adds	r0, #12
   24c9c:	f7ed f9f0 	bl	12080 <strlen>
   24ca0:	4286      	cmp	r6, r0
   24ca2:	f47f ada8 	bne.w	247f6 <pdn_interface_pdn_id_get+0x106>
   24ca6:	6a21      	ldr	r1, [r4, #32]
   24ca8:	4628      	mov	r0, r5
   24caa:	310c      	adds	r1, #12
   24cac:	f7ed f9de 	bl	1206c <strcmp>
   24cb0:	2800      	cmp	r0, #0
   24cb2:	f47f ada0 	bne.w	247f6 <pdn_interface_pdn_id_get+0x106>
   24cb6:	6a23      	ldr	r3, [r4, #32]
   24cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24cba:	0791      	lsls	r1, r2, #30
   24cbc:	f57f ad9b 	bpl.w	247f6 <pdn_interface_pdn_id_get+0x106>
   24cc0:	2608      	movs	r6, #8
   24cc2:	e6d0      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24cc4:	4628      	mov	r0, r5
   24cc6:	f7ed f9db 	bl	12080 <strlen>
   24cca:	4606      	mov	r6, r0
   24ccc:	69e0      	ldr	r0, [r4, #28]
   24cce:	300c      	adds	r0, #12
   24cd0:	f7ed f9d6 	bl	12080 <strlen>
   24cd4:	4286      	cmp	r6, r0
   24cd6:	f47f adda 	bne.w	2488e <pdn_interface_pdn_id_get+0x19e>
   24cda:	69e1      	ldr	r1, [r4, #28]
   24cdc:	4628      	mov	r0, r5
   24cde:	310c      	adds	r1, #12
   24ce0:	f7ed f9c4 	bl	1206c <strcmp>
   24ce4:	2800      	cmp	r0, #0
   24ce6:	f47f add2 	bne.w	2488e <pdn_interface_pdn_id_get+0x19e>
   24cea:	69e3      	ldr	r3, [r4, #28]
   24cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24cee:	07d0      	lsls	r0, r2, #31
   24cf0:	d4cc      	bmi.n	24c8c <pdn_interface_pdn_id_get+0x59c>
   24cf2:	e5cc      	b.n	2488e <pdn_interface_pdn_id_get+0x19e>
   24cf4:	4628      	mov	r0, r5
   24cf6:	f7ed f9c3 	bl	12080 <strlen>
   24cfa:	4606      	mov	r6, r0
   24cfc:	6a20      	ldr	r0, [r4, #32]
   24cfe:	300c      	adds	r0, #12
   24d00:	f7ed f9be 	bl	12080 <strlen>
   24d04:	4286      	cmp	r6, r0
   24d06:	f47f adc8 	bne.w	2489a <pdn_interface_pdn_id_get+0x1aa>
   24d0a:	6a21      	ldr	r1, [r4, #32]
   24d0c:	4628      	mov	r0, r5
   24d0e:	310c      	adds	r1, #12
   24d10:	f7ed f9ac 	bl	1206c <strcmp>
   24d14:	2800      	cmp	r0, #0
   24d16:	f47f adc0 	bne.w	2489a <pdn_interface_pdn_id_get+0x1aa>
   24d1a:	6a23      	ldr	r3, [r4, #32]
   24d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24d1e:	07d1      	lsls	r1, r2, #31
   24d20:	d4ce      	bmi.n	24cc0 <pdn_interface_pdn_id_get+0x5d0>
   24d22:	e5ba      	b.n	2489a <pdn_interface_pdn_id_get+0x1aa>
   24d24:	4628      	mov	r0, r5
   24d26:	f7ed f9ab 	bl	12080 <strlen>
   24d2a:	4606      	mov	r6, r0
   24d2c:	68a0      	ldr	r0, [r4, #8]
   24d2e:	300c      	adds	r0, #12
   24d30:	f7ed f9a6 	bl	12080 <strlen>
   24d34:	4286      	cmp	r6, r0
   24d36:	f47f ad8c 	bne.w	24852 <pdn_interface_pdn_id_get+0x162>
   24d3a:	68a1      	ldr	r1, [r4, #8]
   24d3c:	4628      	mov	r0, r5
   24d3e:	310c      	adds	r1, #12
   24d40:	f7ed f994 	bl	1206c <strcmp>
   24d44:	2800      	cmp	r0, #0
   24d46:	f47f ad84 	bne.w	24852 <pdn_interface_pdn_id_get+0x162>
   24d4a:	68a3      	ldr	r3, [r4, #8]
   24d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24d4e:	07d0      	lsls	r0, r2, #31
   24d50:	f57f ad7f 	bpl.w	24852 <pdn_interface_pdn_id_get+0x162>
   24d54:	2602      	movs	r6, #2
   24d56:	e686      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24d58:	4628      	mov	r0, r5
   24d5a:	f7ed f991 	bl	12080 <strlen>
   24d5e:	4606      	mov	r6, r0
   24d60:	68a0      	ldr	r0, [r4, #8]
   24d62:	300c      	adds	r0, #12
   24d64:	f7ed f98c 	bl	12080 <strlen>
   24d68:	4286      	cmp	r6, r0
   24d6a:	f47f ad20 	bne.w	247ae <pdn_interface_pdn_id_get+0xbe>
   24d6e:	68a1      	ldr	r1, [r4, #8]
   24d70:	4628      	mov	r0, r5
   24d72:	310c      	adds	r1, #12
   24d74:	f7ed f97a 	bl	1206c <strcmp>
   24d78:	2800      	cmp	r0, #0
   24d7a:	f47f ad18 	bne.w	247ae <pdn_interface_pdn_id_get+0xbe>
   24d7e:	68a3      	ldr	r3, [r4, #8]
   24d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24d82:	0790      	lsls	r0, r2, #30
   24d84:	d4e6      	bmi.n	24d54 <pdn_interface_pdn_id_get+0x664>
   24d86:	e512      	b.n	247ae <pdn_interface_pdn_id_get+0xbe>
   24d88:	20022654 	.word	0x20022654
   24d8c:	00034e1c 	.word	0x00034e1c
   24d90:	00034e18 	.word	0x00034e18
   24d94:	00034e2c 	.word	0x00034e2c
   24d98:	20022650 	.word	0x20022650
   24d9c:	4628      	mov	r0, r5
   24d9e:	f7ed f96f 	bl	12080 <strlen>
   24da2:	4606      	mov	r6, r0
   24da4:	6860      	ldr	r0, [r4, #4]
   24da6:	300c      	adds	r0, #12
   24da8:	f7ed f96a 	bl	12080 <strlen>
   24dac:	4286      	cmp	r6, r0
   24dae:	f47f acf8 	bne.w	247a2 <pdn_interface_pdn_id_get+0xb2>
   24db2:	6861      	ldr	r1, [r4, #4]
   24db4:	4628      	mov	r0, r5
   24db6:	310c      	adds	r1, #12
   24db8:	f7ed f958 	bl	1206c <strcmp>
   24dbc:	2800      	cmp	r0, #0
   24dbe:	f47f acf0 	bne.w	247a2 <pdn_interface_pdn_id_get+0xb2>
   24dc2:	6863      	ldr	r3, [r4, #4]
   24dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24dc6:	0796      	lsls	r6, r2, #30
   24dc8:	f57f aceb 	bpl.w	247a2 <pdn_interface_pdn_id_get+0xb2>
   24dcc:	2601      	movs	r6, #1
   24dce:	e64a      	b.n	24a66 <pdn_interface_pdn_id_get+0x376>
   24dd0:	4628      	mov	r0, r5
   24dd2:	f7ed f955 	bl	12080 <strlen>
   24dd6:	4606      	mov	r6, r0
   24dd8:	6860      	ldr	r0, [r4, #4]
   24dda:	300c      	adds	r0, #12
   24ddc:	f7ed f950 	bl	12080 <strlen>
   24de0:	4286      	cmp	r6, r0
   24de2:	f47f ad30 	bne.w	24846 <pdn_interface_pdn_id_get+0x156>
   24de6:	6861      	ldr	r1, [r4, #4]
   24de8:	4628      	mov	r0, r5
   24dea:	310c      	adds	r1, #12
   24dec:	f7ed f93e 	bl	1206c <strcmp>
   24df0:	2800      	cmp	r0, #0
   24df2:	f47f ad28 	bne.w	24846 <pdn_interface_pdn_id_get+0x156>
   24df6:	6863      	ldr	r3, [r4, #4]
   24df8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24dfa:	07d6      	lsls	r6, r2, #31
   24dfc:	d4e6      	bmi.n	24dcc <pdn_interface_pdn_id_get+0x6dc>
   24dfe:	e522      	b.n	24846 <pdn_interface_pdn_id_get+0x156>
   24e00:	4608      	mov	r0, r1
   24e02:	f7ed f93d 	bl	12080 <strlen>
   24e06:	4606      	mov	r6, r0
   24e08:	6820      	ldr	r0, [r4, #0]
   24e0a:	300c      	adds	r0, #12
   24e0c:	f7ed f938 	bl	12080 <strlen>
   24e10:	4286      	cmp	r6, r0
   24e12:	f47f acc0 	bne.w	24796 <pdn_interface_pdn_id_get+0xa6>
   24e16:	6821      	ldr	r1, [r4, #0]
   24e18:	4628      	mov	r0, r5
   24e1a:	310c      	adds	r1, #12
   24e1c:	f7ed f926 	bl	1206c <strcmp>
   24e20:	4606      	mov	r6, r0
   24e22:	2800      	cmp	r0, #0
   24e24:	f47f acb7 	bne.w	24796 <pdn_interface_pdn_id_get+0xa6>
   24e28:	6823      	ldr	r3, [r4, #0]
   24e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24e2c:	0797      	lsls	r7, r2, #30
   24e2e:	f53f ae1a 	bmi.w	24a66 <pdn_interface_pdn_id_get+0x376>
   24e32:	e4b0      	b.n	24796 <pdn_interface_pdn_id_get+0xa6>
   24e34:	4608      	mov	r0, r1
   24e36:	f7ed f923 	bl	12080 <strlen>
   24e3a:	4606      	mov	r6, r0
   24e3c:	6820      	ldr	r0, [r4, #0]
   24e3e:	300c      	adds	r0, #12
   24e40:	f7ed f91e 	bl	12080 <strlen>
   24e44:	4286      	cmp	r6, r0
   24e46:	f47f acf8 	bne.w	2483a <pdn_interface_pdn_id_get+0x14a>
   24e4a:	6821      	ldr	r1, [r4, #0]
   24e4c:	4628      	mov	r0, r5
   24e4e:	310c      	adds	r1, #12
   24e50:	f7ed f90c 	bl	1206c <strcmp>
   24e54:	4606      	mov	r6, r0
   24e56:	2800      	cmp	r0, #0
   24e58:	f47f acef 	bne.w	2483a <pdn_interface_pdn_id_get+0x14a>
   24e5c:	6823      	ldr	r3, [r4, #0]
   24e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24e60:	07d7      	lsls	r7, r2, #31
   24e62:	f53f ae00 	bmi.w	24a66 <pdn_interface_pdn_id_get+0x376>
   24e66:	e4e8      	b.n	2483a <pdn_interface_pdn_id_get+0x14a>
   24e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24e6c:	4770      	bx	lr
   24e6e:	480b      	ldr	r0, [pc, #44]	; (24e9c <pdn_interface_pdn_id_get+0x7ac>)
   24e70:	f7ed f906 	bl	12080 <strlen>
   24e74:	490a      	ldr	r1, [pc, #40]	; (24ea0 <pdn_interface_pdn_id_get+0x7b0>)
   24e76:	4602      	mov	r2, r0
   24e78:	4808      	ldr	r0, [pc, #32]	; (24e9c <pdn_interface_pdn_id_get+0x7ac>)
   24e7a:	f00e fe0e 	bl	33a9a <strncmp>
   24e7e:	b930      	cbnz	r0, 24e8e <pdn_interface_pdn_id_get+0x79e>
   24e80:	2008      	movs	r0, #8
   24e82:	f7f8 f829 	bl	1ced8 <bsd_os_errno_set>
   24e86:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   24e8a:	6858      	ldr	r0, [r3, #4]
   24e8c:	e47b      	b.n	24786 <pdn_interface_pdn_id_get+0x96>
   24e8e:	2005      	movs	r0, #5
   24e90:	f7f8 f822 	bl	1ced8 <bsd_os_errno_set>
   24e94:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   24e98:	6858      	ldr	r0, [r3, #4]
   24e9a:	e474      	b.n	24786 <pdn_interface_pdn_id_get+0x96>
   24e9c:	00034e70 	.word	0x00034e70
   24ea0:	20022654 	.word	0x20022654

00024ea4 <bsd_recoverable_error_handler>:
   24ea4:	4770      	bx	lr
   24ea6:	bf00      	nop

00024ea8 <bsd_platform_error_handler>:
   24ea8:	b508      	push	{r3, lr}
   24eaa:	f7ff fffb 	bl	24ea4 <bsd_recoverable_error_handler>
   24eae:	bd08      	pop	{r3, pc}

00024eb0 <bsd_init>:
   24eb0:	b160      	cbz	r0, 24ecc <bsd_init+0x1c>
   24eb2:	b510      	push	{r4, lr}
   24eb4:	4c07      	ldr	r4, [pc, #28]	; (24ed4 <bsd_init+0x24>)
   24eb6:	7823      	ldrb	r3, [r4, #0]
   24eb8:	b92b      	cbnz	r3, 24ec6 <bsd_init+0x16>
   24eba:	f000 f81b 	bl	24ef4 <bsd_platform_init>
   24ebe:	b908      	cbnz	r0, 24ec4 <bsd_init+0x14>
   24ec0:	2301      	movs	r3, #1
   24ec2:	7023      	strb	r3, [r4, #0]
   24ec4:	bd10      	pop	{r4, pc}
   24ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24eca:	bd10      	pop	{r4, pc}
   24ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24ed0:	4770      	bx	lr
   24ed2:	bf00      	nop
   24ed4:	20028e8c 	.word	0x20028e8c

00024ed8 <unimplemented_method>:
   24ed8:	b40f      	push	{r0, r1, r2, r3}
   24eda:	b508      	push	{r3, lr}
   24edc:	202d      	movs	r0, #45	; 0x2d
   24ede:	f7f7 fffb 	bl	1ced8 <bsd_os_errno_set>
   24ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24eea:	b004      	add	sp, #16
   24eec:	4770      	bx	lr
   24eee:	bf00      	nop

00024ef0 <rpc_transport_ipc_fault_handler>:
   24ef0:	f7ff bfda 	b.w	24ea8 <bsd_platform_error_handler>

00024ef4 <bsd_platform_init>:
   24ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ef6:	f04f 0c00 	mov.w	ip, #0
   24efa:	f247 0660 	movw	r6, #28768	; 0x7060
   24efe:	f24b 0260 	movw	r2, #45152	; 0xb060
   24f02:	6843      	ldr	r3, [r0, #4]
   24f04:	4d3a      	ldr	r5, [pc, #232]	; (24ff0 <bsd_platform_init+0xfc>)
   24f06:	4607      	mov	r7, r0
   24f08:	602b      	str	r3, [r5, #0]
   24f0a:	7801      	ldrb	r1, [r0, #0]
   24f0c:	2006      	movs	r0, #6
   24f0e:	4561      	cmp	r1, ip
   24f10:	bf08      	it	eq
   24f12:	4632      	moveq	r2, r6
   24f14:	4413      	add	r3, r2
   24f16:	4c37      	ldr	r4, [pc, #220]	; (24ff4 <bsd_platform_init+0x100>)
   24f18:	60ab      	str	r3, [r5, #8]
   24f1a:	68b9      	ldr	r1, [r7, #8]
   24f1c:	6063      	str	r3, [r4, #4]
   24f1e:	4b36      	ldr	r3, [pc, #216]	; (24ff8 <bsd_platform_init+0x104>)
   24f20:	b093      	sub	sp, #76	; 0x4c
   24f22:	606a      	str	r2, [r5, #4]
   24f24:	f8a4 c000 	strh.w	ip, [r4]
   24f28:	1a8a      	subs	r2, r1, r2
   24f2a:	60ea      	str	r2, [r5, #12]
   24f2c:	60a2      	str	r2, [r4, #8]
   24f2e:	81a0      	strh	r0, [r4, #12]
   24f30:	6123      	str	r3, [r4, #16]
   24f32:	f001 f883 	bl	2603c <nrf_mem_init>
   24f36:	2800      	cmp	r0, #0
   24f38:	d156      	bne.n	24fe8 <bsd_platform_init+0xf4>
   24f3a:	4621      	mov	r1, r4
   24f3c:	a801      	add	r0, sp, #4
   24f3e:	f001 f8f1 	bl	26124 <nrf_mem_register>
   24f42:	2800      	cmp	r0, #0
   24f44:	d150      	bne.n	24fe8 <bsd_platform_init+0xf4>
   24f46:	f7f8 f8cb 	bl	1d0e0 <bsd_os_init>
   24f4a:	f7fd fc53 	bl	227f4 <rpc_framework_init>
   24f4e:	2800      	cmp	r0, #0
   24f50:	d14a      	bne.n	24fe8 <bsd_platform_init+0xf4>
   24f52:	783a      	ldrb	r2, [r7, #0]
   24f54:	682b      	ldr	r3, [r5, #0]
   24f56:	bb32      	cbnz	r2, 24fa6 <bsd_platform_init+0xb2>
   24f58:	4606      	mov	r6, r0
   24f5a:	2220      	movs	r2, #32
   24f5c:	2408      	movs	r4, #8
   24f5e:	2500      	movs	r5, #0
   24f60:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   24f64:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   24f68:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   24f6c:	4411      	add	r1, r2
   24f6e:	9302      	str	r3, [sp, #8]
   24f70:	e9cd 6008 	strd	r6, r0, [sp, #32]
   24f74:	910c      	str	r1, [sp, #48]	; 0x30
   24f76:	9203      	str	r2, [sp, #12]
   24f78:	f103 0140 	add.w	r1, r3, #64	; 0x40
   24f7c:	9205      	str	r2, [sp, #20]
   24f7e:	9207      	str	r2, [sp, #28]
   24f80:	eb0d 0004 	add.w	r0, sp, r4
   24f84:	189a      	adds	r2, r3, r2
   24f86:	3360      	adds	r3, #96	; 0x60
   24f88:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   24f8c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   24f90:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   24f94:	940f      	str	r4, [sp, #60]	; 0x3c
   24f96:	9104      	str	r1, [sp, #16]
   24f98:	9206      	str	r2, [sp, #24]
   24f9a:	930a      	str	r3, [sp, #40]	; 0x28
   24f9c:	f7fa fafa 	bl	1f594 <rpc_transport_ipc_init>
   24fa0:	b128      	cbz	r0, 24fae <bsd_platform_init+0xba>
   24fa2:	b013      	add	sp, #76	; 0x4c
   24fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fa6:	441e      	add	r6, r3
   24fa8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   24fac:	e7d5      	b.n	24f5a <bsd_platform_init+0x66>
   24fae:	f001 fcf9 	bl	269a4 <interface_init>
   24fb2:	b9c8      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fb4:	f7fe fcf2 	bl	2399c <at_interface_init>
   24fb8:	b9b0      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fba:	f7fb fe1d 	bl	20bf8 <ip_interface_init>
   24fbe:	b998      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fc0:	f7fb f8ba 	bl	20138 <tls_interface_init>
   24fc4:	b980      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fc6:	f001 fa09 	bl	263dc <mfu_interface_init>
   24fca:	b968      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fcc:	f7fe ff08 	bl	23de0 <pdn_interface_init>
   24fd0:	b950      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fd2:	f7fe fb39 	bl	23648 <gnss_interface_init>
   24fd6:	b938      	cbnz	r0, 24fe8 <bsd_platform_init+0xf4>
   24fd8:	f7f9 fd1a 	bl	1ea10 <logobj_interface_init>
   24fdc:	1b40      	subs	r0, r0, r5
   24fde:	bf18      	it	ne
   24fe0:	2001      	movne	r0, #1
   24fe2:	4240      	negs	r0, r0
   24fe4:	b013      	add	sp, #76	; 0x4c
   24fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24fec:	b013      	add	sp, #76	; 0x4c
   24fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24ff0:	20022790 	.word	0x20022790
   24ff4:	2002277c 	.word	0x2002277c
   24ff8:	00034fc4 	.word	0x00034fc4

00024ffc <bsd_platform_af_method_table_get>:
   24ffc:	2805      	cmp	r0, #5
   24ffe:	d02a      	beq.n	25056 <bsd_platform_af_method_table_get+0x5a>
   25000:	b508      	push	{r3, lr}
   25002:	d914      	bls.n	2502e <bsd_platform_af_method_table_get+0x32>
   25004:	280a      	cmp	r0, #10
   25006:	d016      	beq.n	25036 <bsd_platform_af_method_table_get+0x3a>
   25008:	2866      	cmp	r0, #102	; 0x66
   2500a:	d11f      	bne.n	2504c <bsd_platform_af_method_table_get+0x50>
   2500c:	f240 2302 	movw	r3, #514	; 0x202
   25010:	429a      	cmp	r2, r3
   25012:	d035      	beq.n	25080 <bsd_platform_af_method_table_get+0x84>
   25014:	f240 2305 	movw	r3, #517	; 0x205
   25018:	429a      	cmp	r2, r3
   2501a:	d035      	beq.n	25088 <bsd_platform_af_method_table_get+0x8c>
   2501c:	f240 2301 	movw	r3, #513	; 0x201
   25020:	429a      	cmp	r2, r3
   25022:	d02f      	beq.n	25084 <bsd_platform_af_method_table_get+0x88>
   25024:	202b      	movs	r0, #43	; 0x2b
   25026:	f7f7 ff57 	bl	1ced8 <bsd_os_errno_set>
   2502a:	2000      	movs	r0, #0
   2502c:	bd08      	pop	{r3, pc}
   2502e:	2801      	cmp	r0, #1
   25030:	d016      	beq.n	25060 <bsd_platform_af_method_table_get+0x64>
   25032:	2802      	cmp	r0, #2
   25034:	d10a      	bne.n	2504c <bsd_platform_af_method_table_get+0x50>
   25036:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   2503a:	d21a      	bcs.n	25072 <bsd_platform_af_method_table_get+0x76>
   2503c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   25040:	d21a      	bcs.n	25078 <bsd_platform_af_method_table_get+0x7c>
   25042:	3a01      	subs	r2, #1
   25044:	2a01      	cmp	r2, #1
   25046:	d8ed      	bhi.n	25024 <bsd_platform_af_method_table_get+0x28>
   25048:	4810      	ldr	r0, [pc, #64]	; (2508c <bsd_platform_af_method_table_get+0x90>)
   2504a:	bd08      	pop	{r3, pc}
   2504c:	2016      	movs	r0, #22
   2504e:	f7f7 ff43 	bl	1ced8 <bsd_os_errno_set>
   25052:	2000      	movs	r0, #0
   25054:	bd08      	pop	{r3, pc}
   25056:	2903      	cmp	r1, #3
   25058:	480d      	ldr	r0, [pc, #52]	; (25090 <bsd_platform_af_method_table_get+0x94>)
   2505a:	bf18      	it	ne
   2505c:	2000      	movne	r0, #0
   2505e:	4770      	bx	lr
   25060:	f240 2303 	movw	r3, #515	; 0x203
   25064:	429a      	cmp	r2, r3
   25066:	d009      	beq.n	2507c <bsd_platform_af_method_table_get+0x80>
   25068:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   2506c:	d1da      	bne.n	25024 <bsd_platform_af_method_table_get+0x28>
   2506e:	4809      	ldr	r0, [pc, #36]	; (25094 <bsd_platform_af_method_table_get+0x98>)
   25070:	bd08      	pop	{r3, pc}
   25072:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   25076:	d1d5      	bne.n	25024 <bsd_platform_af_method_table_get+0x28>
   25078:	4807      	ldr	r0, [pc, #28]	; (25098 <bsd_platform_af_method_table_get+0x9c>)
   2507a:	bd08      	pop	{r3, pc}
   2507c:	4807      	ldr	r0, [pc, #28]	; (2509c <bsd_platform_af_method_table_get+0xa0>)
   2507e:	bd08      	pop	{r3, pc}
   25080:	4807      	ldr	r0, [pc, #28]	; (250a0 <bsd_platform_af_method_table_get+0xa4>)
   25082:	bd08      	pop	{r3, pc}
   25084:	4807      	ldr	r0, [pc, #28]	; (250a4 <bsd_platform_af_method_table_get+0xa8>)
   25086:	bd08      	pop	{r3, pc}
   25088:	4807      	ldr	r0, [pc, #28]	; (250a8 <bsd_platform_af_method_table_get+0xac>)
   2508a:	bd08      	pop	{r3, pc}
   2508c:	00034eac 	.word	0x00034eac
   25090:	00034f9c 	.word	0x00034f9c
   25094:	00034f4c 	.word	0x00034f4c
   25098:	00034ed4 	.word	0x00034ed4
   2509c:	00034efc 	.word	0x00034efc
   250a0:	00034f24 	.word	0x00034f24
   250a4:	00034e84 	.word	0x00034e84
   250a8:	00034f74 	.word	0x00034f74

000250ac <bsd_platform_fd_method_table_get>:
   250ac:	b538      	push	{r3, r4, r5, lr}
   250ae:	4605      	mov	r5, r0
   250b0:	f001 fdaa 	bl	26c08 <interface_socket_from_handle_get>
   250b4:	4604      	mov	r4, r0
   250b6:	b960      	cbnz	r0, 250d2 <bsd_platform_fd_method_table_get+0x26>
   250b8:	4b2c      	ldr	r3, [pc, #176]	; (2516c <bsd_platform_fd_method_table_get+0xc0>)
   250ba:	429d      	cmp	r5, r3
   250bc:	d02f      	beq.n	2511e <bsd_platform_fd_method_table_get+0x72>
   250be:	0c2b      	lsrs	r3, r5, #16
   250c0:	4a2b      	ldr	r2, [pc, #172]	; (25170 <bsd_platform_fd_method_table_get+0xc4>)
   250c2:	041b      	lsls	r3, r3, #16
   250c4:	4293      	cmp	r3, r2
   250c6:	d03d      	beq.n	25144 <bsd_platform_fd_method_table_get+0x98>
   250c8:	4b2a      	ldr	r3, [pc, #168]	; (25174 <bsd_platform_fd_method_table_get+0xc8>)
   250ca:	429d      	cmp	r5, r3
   250cc:	d149      	bne.n	25162 <bsd_platform_fd_method_table_get+0xb6>
   250ce:	482a      	ldr	r0, [pc, #168]	; (25178 <bsd_platform_fd_method_table_get+0xcc>)
   250d0:	bd38      	pop	{r3, r4, r5, pc}
   250d2:	68c3      	ldr	r3, [r0, #12]
   250d4:	6942      	ldr	r2, [r0, #20]
   250d6:	2b05      	cmp	r3, #5
   250d8:	d036      	beq.n	25148 <bsd_platform_fd_method_table_get+0x9c>
   250da:	d911      	bls.n	25100 <bsd_platform_fd_method_table_get+0x54>
   250dc:	2b0a      	cmp	r3, #10
   250de:	d013      	beq.n	25108 <bsd_platform_fd_method_table_get+0x5c>
   250e0:	2b66      	cmp	r3, #102	; 0x66
   250e2:	d11e      	bne.n	25122 <bsd_platform_fd_method_table_get+0x76>
   250e4:	f240 2302 	movw	r3, #514	; 0x202
   250e8:	429a      	cmp	r2, r3
   250ea:	d02b      	beq.n	25144 <bsd_platform_fd_method_table_get+0x98>
   250ec:	f240 2305 	movw	r3, #517	; 0x205
   250f0:	429a      	cmp	r2, r3
   250f2:	d02f      	beq.n	25154 <bsd_platform_fd_method_table_get+0xa8>
   250f4:	f240 2301 	movw	r3, #513	; 0x201
   250f8:	429a      	cmp	r2, r3
   250fa:	d11e      	bne.n	2513a <bsd_platform_fd_method_table_get+0x8e>
   250fc:	481f      	ldr	r0, [pc, #124]	; (2517c <bsd_platform_fd_method_table_get+0xd0>)
   250fe:	bd38      	pop	{r3, r4, r5, pc}
   25100:	2b01      	cmp	r3, #1
   25102:	d013      	beq.n	2512c <bsd_platform_fd_method_table_get+0x80>
   25104:	2b02      	cmp	r3, #2
   25106:	d10c      	bne.n	25122 <bsd_platform_fd_method_table_get+0x76>
   25108:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   2510c:	d224      	bcs.n	25158 <bsd_platform_fd_method_table_get+0xac>
   2510e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   25112:	d224      	bcs.n	2515e <bsd_platform_fd_method_table_get+0xb2>
   25114:	3a01      	subs	r2, #1
   25116:	2a01      	cmp	r2, #1
   25118:	d80f      	bhi.n	2513a <bsd_platform_fd_method_table_get+0x8e>
   2511a:	4819      	ldr	r0, [pc, #100]	; (25180 <bsd_platform_fd_method_table_get+0xd4>)
   2511c:	bd38      	pop	{r3, r4, r5, pc}
   2511e:	4819      	ldr	r0, [pc, #100]	; (25184 <bsd_platform_fd_method_table_get+0xd8>)
   25120:	bd38      	pop	{r3, r4, r5, pc}
   25122:	2016      	movs	r0, #22
   25124:	f7f7 fed8 	bl	1ced8 <bsd_os_errno_set>
   25128:	2000      	movs	r0, #0
   2512a:	bd38      	pop	{r3, r4, r5, pc}
   2512c:	f240 2303 	movw	r3, #515	; 0x203
   25130:	429a      	cmp	r2, r3
   25132:	d0f4      	beq.n	2511e <bsd_platform_fd_method_table_get+0x72>
   25134:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   25138:	d0c9      	beq.n	250ce <bsd_platform_fd_method_table_get+0x22>
   2513a:	202b      	movs	r0, #43	; 0x2b
   2513c:	f7f7 fecc 	bl	1ced8 <bsd_os_errno_set>
   25140:	2000      	movs	r0, #0
   25142:	bd38      	pop	{r3, r4, r5, pc}
   25144:	4810      	ldr	r0, [pc, #64]	; (25188 <bsd_platform_fd_method_table_get+0xdc>)
   25146:	bd38      	pop	{r3, r4, r5, pc}
   25148:	6903      	ldr	r3, [r0, #16]
   2514a:	4810      	ldr	r0, [pc, #64]	; (2518c <bsd_platform_fd_method_table_get+0xe0>)
   2514c:	2b03      	cmp	r3, #3
   2514e:	bf18      	it	ne
   25150:	2000      	movne	r0, #0
   25152:	bd38      	pop	{r3, r4, r5, pc}
   25154:	480e      	ldr	r0, [pc, #56]	; (25190 <bsd_platform_fd_method_table_get+0xe4>)
   25156:	bd38      	pop	{r3, r4, r5, pc}
   25158:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2515c:	d1ed      	bne.n	2513a <bsd_platform_fd_method_table_get+0x8e>
   2515e:	480d      	ldr	r0, [pc, #52]	; (25194 <bsd_platform_fd_method_table_get+0xe8>)
   25160:	bd38      	pop	{r3, r4, r5, pc}
   25162:	2009      	movs	r0, #9
   25164:	f7f7 feb8 	bl	1ced8 <bsd_os_errno_set>
   25168:	4620      	mov	r0, r4
   2516a:	bd38      	pop	{r3, r4, r5, pc}
   2516c:	49765432 	.word	0x49765432
   25170:	789a0000 	.word	0x789a0000
   25174:	49765443 	.word	0x49765443
   25178:	00034f4c 	.word	0x00034f4c
   2517c:	00034e84 	.word	0x00034e84
   25180:	00034eac 	.word	0x00034eac
   25184:	00034efc 	.word	0x00034efc
   25188:	00034f24 	.word	0x00034f24
   2518c:	00034f9c 	.word	0x00034f9c
   25190:	00034f74 	.word	0x00034f74
   25194:	00034ed4 	.word	0x00034ed4

00025198 <bsd_platform_getaddrinfo>:
   25198:	f7fc bf1a 	b.w	21fd0 <ip_interface_getaddrinfo>

0002519c <bsd_platform_freeaddrinfo>:
   2519c:	f7fd b816 	b.w	221cc <ip_interface_freeaddrinfo>

000251a0 <bsd_platform_poll>:
   251a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   251a4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   251a8:	b083      	sub	sp, #12
   251aa:	9200      	str	r2, [sp, #0]
   251ac:	2800      	cmp	r0, #0
   251ae:	d048      	beq.n	25242 <bsd_platform_poll+0xa2>
   251b0:	1e4b      	subs	r3, r1, #1
   251b2:	2b08      	cmp	r3, #8
   251b4:	d845      	bhi.n	25242 <bsd_platform_poll+0xa2>
   251b6:	4680      	mov	r8, r0
   251b8:	4605      	mov	r5, r0
   251ba:	2400      	movs	r4, #0
   251bc:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   251c0:	88ab      	ldrh	r3, [r5, #4]
   251c2:	6828      	ldr	r0, [r5, #0]
   251c4:	f003 0303 	and.w	r3, r3, #3
   251c8:	a901      	add	r1, sp, #4
   251ca:	f043 061c 	orr.w	r6, r3, #28
   251ce:	f001 fd29 	bl	26c24 <interface_socket_event_get>
   251d2:	9b01      	ldr	r3, [sp, #4]
   251d4:	3508      	adds	r5, #8
   251d6:	4033      	ands	r3, r6
   251d8:	f825 3c02 	strh.w	r3, [r5, #-2]
   251dc:	b103      	cbz	r3, 251e0 <bsd_platform_poll+0x40>
   251de:	3401      	adds	r4, #1
   251e0:	42af      	cmp	r7, r5
   251e2:	d1ed      	bne.n	251c0 <bsd_platform_poll+0x20>
   251e4:	bb9c      	cbnz	r4, 2524e <bsd_platform_poll+0xae>
   251e6:	4669      	mov	r1, sp
   251e8:	4640      	mov	r0, r8
   251ea:	f7f7 fdcb 	bl	1cd84 <bsd_os_timedwait>
   251ee:	4607      	mov	r7, r0
   251f0:	b108      	cbz	r0, 251f6 <bsd_platform_poll+0x56>
   251f2:	283c      	cmp	r0, #60	; 0x3c
   251f4:	d11d      	bne.n	25232 <bsd_platform_poll+0x92>
   251f6:	46c1      	mov	r9, r8
   251f8:	2600      	movs	r6, #0
   251fa:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   251fe:	f8d9 0000 	ldr.w	r0, [r9]
   25202:	f003 0303 	and.w	r3, r3, #3
   25206:	a901      	add	r1, sp, #4
   25208:	f043 041c 	orr.w	r4, r3, #28
   2520c:	f001 fd0a 	bl	26c24 <interface_socket_event_get>
   25210:	9b01      	ldr	r3, [sp, #4]
   25212:	f109 0908 	add.w	r9, r9, #8
   25216:	4023      	ands	r3, r4
   25218:	f829 3c02 	strh.w	r3, [r9, #-2]
   2521c:	b103      	cbz	r3, 25220 <bsd_platform_poll+0x80>
   2521e:	3601      	adds	r6, #1
   25220:	454d      	cmp	r5, r9
   25222:	d1ea      	bne.n	251fa <bsd_platform_poll+0x5a>
   25224:	b90e      	cbnz	r6, 2522a <bsd_platform_poll+0x8a>
   25226:	2f00      	cmp	r7, #0
   25228:	d0dd      	beq.n	251e6 <bsd_platform_poll+0x46>
   2522a:	4630      	mov	r0, r6
   2522c:	b003      	add	sp, #12
   2522e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25232:	2023      	movs	r0, #35	; 0x23
   25234:	f7f7 fe50 	bl	1ced8 <bsd_os_errno_set>
   25238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2523c:	b003      	add	sp, #12
   2523e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25242:	2016      	movs	r0, #22
   25244:	f7f7 fe48 	bl	1ced8 <bsd_os_errno_set>
   25248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2524c:	e7ee      	b.n	2522c <bsd_platform_poll+0x8c>
   2524e:	4620      	mov	r0, r4
   25250:	e7ec      	b.n	2522c <bsd_platform_poll+0x8c>
   25252:	bf00      	nop

00025254 <bsd_platform_fcntl>:
   25254:	b508      	push	{r3, lr}
   25256:	4b06      	ldr	r3, [pc, #24]	; (25270 <bsd_platform_fcntl+0x1c>)
   25258:	4298      	cmp	r0, r3
   2525a:	d003      	beq.n	25264 <bsd_platform_fcntl+0x10>
   2525c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25260:	f001 bd8a 	b.w	26d78 <interface_socket_fcntl>
   25264:	202d      	movs	r0, #45	; 0x2d
   25266:	f7f7 fe37 	bl	1ced8 <bsd_os_errno_set>
   2526a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2526e:	bd08      	pop	{r3, pc}
   25270:	49765432 	.word	0x49765432

00025274 <linked_list_init>:
   25274:	b128      	cbz	r0, 25282 <linked_list_init+0xe>
   25276:	2300      	movs	r3, #0
   25278:	6003      	str	r3, [r0, #0]
   2527a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2527e:	4618      	mov	r0, r3
   25280:	4770      	bx	lr
   25282:	2007      	movs	r0, #7
   25284:	4770      	bx	lr
   25286:	bf00      	nop

00025288 <linked_list_push>:
   25288:	6802      	ldr	r2, [r0, #0]
   2528a:	4603      	mov	r3, r0
   2528c:	3201      	adds	r2, #1
   2528e:	d00e      	beq.n	252ae <linked_list_push+0x26>
   25290:	2200      	movs	r2, #0
   25292:	600a      	str	r2, [r1, #0]
   25294:	6802      	ldr	r2, [r0, #0]
   25296:	b13a      	cbz	r2, 252a8 <linked_list_push+0x20>
   25298:	6882      	ldr	r2, [r0, #8]
   2529a:	6011      	str	r1, [r2, #0]
   2529c:	6081      	str	r1, [r0, #8]
   2529e:	681a      	ldr	r2, [r3, #0]
   252a0:	2000      	movs	r0, #0
   252a2:	3201      	adds	r2, #1
   252a4:	601a      	str	r2, [r3, #0]
   252a6:	4770      	bx	lr
   252a8:	e9c0 1101 	strd	r1, r1, [r0, #4]
   252ac:	e7f7      	b.n	2529e <linked_list_push+0x16>
   252ae:	2004      	movs	r0, #4
   252b0:	4770      	bx	lr
   252b2:	bf00      	nop

000252b4 <linked_list_pop>:
   252b4:	4603      	mov	r3, r0
   252b6:	6800      	ldr	r0, [r0, #0]
   252b8:	b128      	cbz	r0, 252c6 <linked_list_pop+0x12>
   252ba:	6858      	ldr	r0, [r3, #4]
   252bc:	681a      	ldr	r2, [r3, #0]
   252be:	6801      	ldr	r1, [r0, #0]
   252c0:	3a01      	subs	r2, #1
   252c2:	6059      	str	r1, [r3, #4]
   252c4:	601a      	str	r2, [r3, #0]
   252c6:	4770      	bx	lr

000252c8 <linked_list_peek>:
   252c8:	6803      	ldr	r3, [r0, #0]
   252ca:	b10b      	cbz	r3, 252d0 <linked_list_peek+0x8>
   252cc:	6840      	ldr	r0, [r0, #4]
   252ce:	4770      	bx	lr
   252d0:	4618      	mov	r0, r3
   252d2:	4770      	bx	lr

000252d4 <linked_list_size_get>:
   252d4:	6800      	ldr	r0, [r0, #0]
   252d6:	4770      	bx	lr

000252d8 <linked_list_get_next>:
   252d8:	6800      	ldr	r0, [r0, #0]
   252da:	4770      	bx	lr

000252dc <nrf_socket>:
   252dc:	b570      	push	{r4, r5, r6, lr}
   252de:	4604      	mov	r4, r0
   252e0:	460d      	mov	r5, r1
   252e2:	4616      	mov	r6, r2
   252e4:	f7ff fe8a 	bl	24ffc <bsd_platform_af_method_table_get>
   252e8:	b130      	cbz	r0, 252f8 <nrf_socket+0x1c>
   252ea:	6803      	ldr	r3, [r0, #0]
   252ec:	4632      	mov	r2, r6
   252ee:	4629      	mov	r1, r5
   252f0:	4620      	mov	r0, r4
   252f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   252f6:	4718      	bx	r3
   252f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   252fc:	bd70      	pop	{r4, r5, r6, pc}
   252fe:	bf00      	nop

00025300 <nrf_close>:
   25300:	b510      	push	{r4, lr}
   25302:	4604      	mov	r4, r0
   25304:	f7ff fed2 	bl	250ac <bsd_platform_fd_method_table_get>
   25308:	b120      	cbz	r0, 25314 <nrf_close+0x14>
   2530a:	6843      	ldr	r3, [r0, #4]
   2530c:	4620      	mov	r0, r4
   2530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25312:	4718      	bx	r3
   25314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25318:	bd10      	pop	{r4, pc}
   2531a:	bf00      	nop

0002531c <nrf_sendto>:
   2531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25320:	460d      	mov	r5, r1
   25322:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   25326:	4616      	mov	r6, r2
   25328:	461f      	mov	r7, r3
   2532a:	4604      	mov	r4, r0
   2532c:	f7ff febe 	bl	250ac <bsd_platform_fd_method_table_get>
   25330:	b158      	cbz	r0, 2534a <nrf_sendto+0x2e>
   25332:	e9cd 8908 	strd	r8, r9, [sp, #32]
   25336:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2533a:	463b      	mov	r3, r7
   2533c:	4632      	mov	r2, r6
   2533e:	4629      	mov	r1, r5
   25340:	4620      	mov	r0, r4
   25342:	46f4      	mov	ip, lr
   25344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25348:	4760      	bx	ip
   2534a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25352:	bf00      	nop

00025354 <nrf_recvfrom>:
   25354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25358:	460d      	mov	r5, r1
   2535a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2535e:	4616      	mov	r6, r2
   25360:	461f      	mov	r7, r3
   25362:	4604      	mov	r4, r0
   25364:	f7ff fea2 	bl	250ac <bsd_platform_fd_method_table_get>
   25368:	b158      	cbz	r0, 25382 <nrf_recvfrom+0x2e>
   2536a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2536e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   25372:	463b      	mov	r3, r7
   25374:	4632      	mov	r2, r6
   25376:	4629      	mov	r1, r5
   25378:	4620      	mov	r0, r4
   2537a:	46f4      	mov	ip, lr
   2537c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25380:	4760      	bx	ip
   25382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2538a:	bf00      	nop

0002538c <nrf_connect>:
   2538c:	b570      	push	{r4, r5, r6, lr}
   2538e:	460d      	mov	r5, r1
   25390:	4616      	mov	r6, r2
   25392:	4604      	mov	r4, r0
   25394:	f7ff fe8a 	bl	250ac <bsd_platform_fd_method_table_get>
   25398:	b130      	cbz	r0, 253a8 <nrf_connect+0x1c>
   2539a:	6943      	ldr	r3, [r0, #20]
   2539c:	4632      	mov	r2, r6
   2539e:	4629      	mov	r1, r5
   253a0:	4620      	mov	r0, r4
   253a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   253a6:	4718      	bx	r3
   253a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253ac:	bd70      	pop	{r4, r5, r6, pc}
   253ae:	bf00      	nop

000253b0 <nrf_listen>:
   253b0:	b570      	push	{r4, r5, r6, lr}
   253b2:	460d      	mov	r5, r1
   253b4:	4604      	mov	r4, r0
   253b6:	f7ff fe79 	bl	250ac <bsd_platform_fd_method_table_get>
   253ba:	b128      	cbz	r0, 253c8 <nrf_listen+0x18>
   253bc:	6983      	ldr	r3, [r0, #24]
   253be:	4629      	mov	r1, r5
   253c0:	4620      	mov	r0, r4
   253c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   253c6:	4718      	bx	r3
   253c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253cc:	bd70      	pop	{r4, r5, r6, pc}
   253ce:	bf00      	nop

000253d0 <nrf_accept>:
   253d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253d4:	460d      	mov	r5, r1
   253d6:	4616      	mov	r6, r2
   253d8:	4604      	mov	r4, r0
   253da:	f7ff fe67 	bl	250ac <bsd_platform_fd_method_table_get>
   253de:	b140      	cbz	r0, 253f2 <nrf_accept+0x22>
   253e0:	69c7      	ldr	r7, [r0, #28]
   253e2:	4632      	mov	r2, r6
   253e4:	4629      	mov	r1, r5
   253e6:	4620      	mov	r0, r4
   253e8:	46bc      	mov	ip, r7
   253ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   253ee:	2300      	movs	r3, #0
   253f0:	4760      	bx	ip
   253f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   253fa:	bf00      	nop

000253fc <nrf_bind>:
   253fc:	b570      	push	{r4, r5, r6, lr}
   253fe:	460d      	mov	r5, r1
   25400:	4616      	mov	r6, r2
   25402:	4604      	mov	r4, r0
   25404:	f7ff fe52 	bl	250ac <bsd_platform_fd_method_table_get>
   25408:	b130      	cbz	r0, 25418 <nrf_bind+0x1c>
   2540a:	6903      	ldr	r3, [r0, #16]
   2540c:	4632      	mov	r2, r6
   2540e:	4629      	mov	r1, r5
   25410:	4620      	mov	r0, r4
   25412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25416:	4718      	bx	r3
   25418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2541c:	bd70      	pop	{r4, r5, r6, pc}
   2541e:	bf00      	nop

00025420 <nrf_setsockopt>:
   25420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25424:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25428:	460d      	mov	r5, r1
   2542a:	4616      	mov	r6, r2
   2542c:	461f      	mov	r7, r3
   2542e:	4604      	mov	r4, r0
   25430:	f7ff fe3c 	bl	250ac <bsd_platform_fd_method_table_get>
   25434:	b158      	cbz	r0, 2544e <nrf_setsockopt+0x2e>
   25436:	f8cd 8018 	str.w	r8, [sp, #24]
   2543a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2543e:	463b      	mov	r3, r7
   25440:	4632      	mov	r2, r6
   25442:	4629      	mov	r1, r5
   25444:	4620      	mov	r0, r4
   25446:	46f4      	mov	ip, lr
   25448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2544c:	4760      	bx	ip
   2544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25456:	bf00      	nop

00025458 <nrf_getsockopt>:
   25458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2545c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25460:	460d      	mov	r5, r1
   25462:	4616      	mov	r6, r2
   25464:	461f      	mov	r7, r3
   25466:	4604      	mov	r4, r0
   25468:	f7ff fe20 	bl	250ac <bsd_platform_fd_method_table_get>
   2546c:	b158      	cbz	r0, 25486 <nrf_getsockopt+0x2e>
   2546e:	f8cd 8018 	str.w	r8, [sp, #24]
   25472:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   25476:	463b      	mov	r3, r7
   25478:	4632      	mov	r2, r6
   2547a:	4629      	mov	r1, r5
   2547c:	4620      	mov	r0, r4
   2547e:	46f4      	mov	ip, lr
   25480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25484:	4760      	bx	ip
   25486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2548e:	bf00      	nop

00025490 <nrf_getaddrinfo>:
   25490:	f7ff be82 	b.w	25198 <bsd_platform_getaddrinfo>

00025494 <nrf_freeaddrinfo>:
   25494:	f7ff be82 	b.w	2519c <bsd_platform_freeaddrinfo>

00025498 <nrf_poll>:
   25498:	f7ff be82 	b.w	251a0 <bsd_platform_poll>

0002549c <nrf_fcntl>:
   2549c:	f7ff beda 	b.w	25254 <bsd_platform_fcntl>

000254a0 <rpc_gnss_serialize_utc>:
   254a0:	4603      	mov	r3, r0
   254a2:	b1d8      	cbz	r0, 254dc <rpc_gnss_serialize_utc+0x3c>
   254a4:	b1d1      	cbz	r1, 254dc <rpc_gnss_serialize_utc+0x3c>
   254a6:	2000      	movs	r0, #0
   254a8:	2201      	movs	r2, #1
   254aa:	7048      	strb	r0, [r1, #1]
   254ac:	700a      	strb	r2, [r1, #0]
   254ae:	685a      	ldr	r2, [r3, #4]
   254b0:	2010      	movs	r0, #16
   254b2:	f8c1 2006 	str.w	r2, [r1, #6]
   254b6:	681a      	ldr	r2, [r3, #0]
   254b8:	f8c1 2002 	str.w	r2, [r1, #2]
   254bc:	f993 200a 	ldrsb.w	r2, [r3, #10]
   254c0:	730a      	strb	r2, [r1, #12]
   254c2:	f993 200d 	ldrsb.w	r2, [r3, #13]
   254c6:	73ca      	strb	r2, [r1, #15]
   254c8:	f993 200c 	ldrsb.w	r2, [r3, #12]
   254cc:	738a      	strb	r2, [r1, #14]
   254ce:	7a1a      	ldrb	r2, [r3, #8]
   254d0:	728a      	strb	r2, [r1, #10]
   254d2:	7ada      	ldrb	r2, [r3, #11]
   254d4:	734a      	strb	r2, [r1, #13]
   254d6:	7a5b      	ldrb	r3, [r3, #9]
   254d8:	72cb      	strb	r3, [r1, #11]
   254da:	4770      	bx	lr
   254dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   254e0:	4770      	bx	lr
   254e2:	bf00      	nop

000254e4 <rpc_gnss_serialize_ephe>:
   254e4:	4603      	mov	r3, r0
   254e6:	2800      	cmp	r0, #0
   254e8:	d04b      	beq.n	25582 <rpc_gnss_serialize_ephe+0x9e>
   254ea:	2900      	cmp	r1, #0
   254ec:	d049      	beq.n	25582 <rpc_gnss_serialize_ephe+0x9e>
   254ee:	2000      	movs	r0, #0
   254f0:	2202      	movs	r2, #2
   254f2:	7048      	strb	r0, [r1, #1]
   254f4:	700a      	strb	r2, [r1, #0]
   254f6:	68da      	ldr	r2, [r3, #12]
   254f8:	2040      	movs	r0, #64	; 0x40
   254fa:	f8c1 200b 	str.w	r2, [r1, #11]
   254fe:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   25502:	f8a1 2009 	strh.w	r2, [r1, #9]
   25506:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2550a:	720a      	strb	r2, [r1, #8]
   2550c:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   25510:	878a      	strh	r2, [r1, #60]	; 0x3c
   25512:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   25516:	86ca      	strh	r2, [r1, #54]	; 0x36
   25518:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   2551c:	874a      	strh	r2, [r1, #58]	; 0x3a
   2551e:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   25522:	868a      	strh	r2, [r1, #52]	; 0x34
   25524:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   25528:	87ca      	strh	r2, [r1, #62]	; 0x3e
   2552a:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   2552e:	870a      	strh	r2, [r1, #56]	; 0x38
   25530:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   25534:	830a      	strh	r2, [r1, #24]
   25536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25538:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   2553c:	7c9a      	ldrb	r2, [r3, #18]
   2553e:	744a      	strb	r2, [r1, #17]
   25540:	785a      	ldrb	r2, [r3, #1]
   25542:	70ca      	strb	r2, [r1, #3]
   25544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   25546:	62ca      	str	r2, [r1, #44]	; 0x2c
   25548:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   2554c:	84ca      	strh	r2, [r1, #38]	; 0x26
   2554e:	885a      	ldrh	r2, [r3, #2]
   25550:	808a      	strh	r2, [r1, #4]
   25552:	6a1a      	ldr	r2, [r3, #32]
   25554:	f8c1 201a 	str.w	r2, [r1, #26]
   25558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2555a:	630a      	str	r2, [r1, #48]	; 0x30
   2555c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2555e:	f8c1 201e 	str.w	r2, [r1, #30]
   25562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   25564:	628a      	str	r2, [r1, #40]	; 0x28
   25566:	781a      	ldrb	r2, [r3, #0]
   25568:	708a      	strb	r2, [r1, #2]
   2556a:	f993 2010 	ldrsb.w	r2, [r3, #16]
   2556e:	73ca      	strb	r2, [r1, #15]
   25570:	889a      	ldrh	r2, [r3, #4]
   25572:	80ca      	strh	r2, [r1, #6]
   25574:	8a9a      	ldrh	r2, [r3, #20]
   25576:	824a      	strh	r2, [r1, #18]
   25578:	7c5a      	ldrb	r2, [r3, #17]
   2557a:	740a      	strb	r2, [r1, #16]
   2557c:	699b      	ldr	r3, [r3, #24]
   2557e:	614b      	str	r3, [r1, #20]
   25580:	4770      	bx	lr
   25582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25586:	4770      	bx	lr

00025588 <rpc_gnss_serialize_alm>:
   25588:	4603      	mov	r3, r0
   2558a:	b360      	cbz	r0, 255e6 <rpc_gnss_serialize_alm+0x5e>
   2558c:	b359      	cbz	r1, 255e6 <rpc_gnss_serialize_alm+0x5e>
   2558e:	2000      	movs	r0, #0
   25590:	2203      	movs	r2, #3
   25592:	7048      	strb	r0, [r1, #1]
   25594:	700a      	strb	r2, [r1, #0]
   25596:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2559a:	2021      	movs	r0, #33	; 0x21
   2559c:	f8a1 201d 	strh.w	r2, [r1, #29]
   255a0:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   255a4:	f8a1 201f 	strh.w	r2, [r1, #31]
   255a8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   255ac:	810a      	strh	r2, [r1, #8]
   255ae:	889a      	ldrh	r2, [r3, #4]
   255b0:	80ca      	strh	r2, [r1, #6]
   255b2:	78da      	ldrb	r2, [r3, #3]
   255b4:	714a      	strb	r2, [r1, #5]
   255b6:	699a      	ldr	r2, [r3, #24]
   255b8:	f8c1 2019 	str.w	r2, [r1, #25]
   255bc:	691a      	ldr	r2, [r3, #16]
   255be:	f8c1 2011 	str.w	r2, [r1, #17]
   255c2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   255c6:	814a      	strh	r2, [r1, #10]
   255c8:	68da      	ldr	r2, [r3, #12]
   255ca:	f8c1 200d 	str.w	r2, [r1, #13]
   255ce:	7a9a      	ldrb	r2, [r3, #10]
   255d0:	730a      	strb	r2, [r1, #12]
   255d2:	781a      	ldrb	r2, [r3, #0]
   255d4:	708a      	strb	r2, [r1, #2]
   255d6:	789a      	ldrb	r2, [r3, #2]
   255d8:	710a      	strb	r2, [r1, #4]
   255da:	695a      	ldr	r2, [r3, #20]
   255dc:	f8c1 2015 	str.w	r2, [r1, #21]
   255e0:	785b      	ldrb	r3, [r3, #1]
   255e2:	70cb      	strb	r3, [r1, #3]
   255e4:	4770      	bx	lr
   255e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   255ea:	4770      	bx	lr

000255ec <rpc_gnss_serialize_klob>:
   255ec:	4603      	mov	r3, r0
   255ee:	b1f0      	cbz	r0, 2562e <rpc_gnss_serialize_klob+0x42>
   255f0:	b1e9      	cbz	r1, 2562e <rpc_gnss_serialize_klob+0x42>
   255f2:	2000      	movs	r0, #0
   255f4:	2204      	movs	r2, #4
   255f6:	7048      	strb	r0, [r1, #1]
   255f8:	700a      	strb	r2, [r1, #0]
   255fa:	f993 2000 	ldrsb.w	r2, [r3]
   255fe:	200a      	movs	r0, #10
   25600:	708a      	strb	r2, [r1, #2]
   25602:	f993 2001 	ldrsb.w	r2, [r3, #1]
   25606:	70ca      	strb	r2, [r1, #3]
   25608:	f993 2002 	ldrsb.w	r2, [r3, #2]
   2560c:	710a      	strb	r2, [r1, #4]
   2560e:	f993 2003 	ldrsb.w	r2, [r3, #3]
   25612:	714a      	strb	r2, [r1, #5]
   25614:	f993 2004 	ldrsb.w	r2, [r3, #4]
   25618:	718a      	strb	r2, [r1, #6]
   2561a:	f993 2005 	ldrsb.w	r2, [r3, #5]
   2561e:	71ca      	strb	r2, [r1, #7]
   25620:	f993 2006 	ldrsb.w	r2, [r3, #6]
   25624:	720a      	strb	r2, [r1, #8]
   25626:	f993 3007 	ldrsb.w	r3, [r3, #7]
   2562a:	724b      	strb	r3, [r1, #9]
   2562c:	4770      	bx	lr
   2562e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25632:	4770      	bx	lr

00025634 <rpc_gnss_serialize_nequick>:
   25634:	4603      	mov	r3, r0
   25636:	b198      	cbz	r0, 25660 <rpc_gnss_serialize_nequick+0x2c>
   25638:	b191      	cbz	r1, 25660 <rpc_gnss_serialize_nequick+0x2c>
   2563a:	2000      	movs	r0, #0
   2563c:	2205      	movs	r2, #5
   2563e:	7048      	strb	r0, [r1, #1]
   25640:	700a      	strb	r2, [r1, #0]
   25642:	f9b3 2000 	ldrsh.w	r2, [r3]
   25646:	200a      	movs	r0, #10
   25648:	804a      	strh	r2, [r1, #2]
   2564a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   2564e:	808a      	strh	r2, [r1, #4]
   25650:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   25654:	80ca      	strh	r2, [r1, #6]
   25656:	799a      	ldrb	r2, [r3, #6]
   25658:	720a      	strb	r2, [r1, #8]
   2565a:	79db      	ldrb	r3, [r3, #7]
   2565c:	724b      	strb	r3, [r1, #9]
   2565e:	4770      	bx	lr
   25660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25664:	4770      	bx	lr
   25666:	bf00      	nop

00025668 <rpc_gnss_serialize_time_and_sv_tow>:
   25668:	b310      	cbz	r0, 256b0 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2566a:	b309      	cbz	r1, 256b0 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2566c:	b470      	push	{r4, r5, r6}
   2566e:	2500      	movs	r5, #0
   25670:	2606      	movs	r6, #6
   25672:	460c      	mov	r4, r1
   25674:	704d      	strb	r5, [r1, #1]
   25676:	700e      	strb	r6, [r1, #0]
   25678:	462b      	mov	r3, r5
   2567a:	8805      	ldrh	r5, [r0, #0]
   2567c:	4602      	mov	r2, r0
   2567e:	804d      	strh	r5, [r1, #2]
   25680:	68c5      	ldr	r5, [r0, #12]
   25682:	f8c1 500a 	str.w	r5, [r1, #10]
   25686:	8905      	ldrh	r5, [r0, #8]
   25688:	810d      	strh	r5, [r1, #8]
   2568a:	6840      	ldr	r0, [r0, #4]
   2568c:	6048      	str	r0, [r1, #4]
   2568e:	8a15      	ldrh	r5, [r2, #16]
   25690:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   25694:	4408      	add	r0, r1
   25696:	81c5      	strh	r5, [r0, #14]
   25698:	7c90      	ldrb	r0, [r2, #18]
   2569a:	3301      	adds	r3, #1
   2569c:	2b20      	cmp	r3, #32
   2569e:	7420      	strb	r0, [r4, #16]
   256a0:	f102 0204 	add.w	r2, r2, #4
   256a4:	f104 0403 	add.w	r4, r4, #3
   256a8:	d1f1      	bne.n	2568e <rpc_gnss_serialize_time_and_sv_tow+0x26>
   256aa:	206e      	movs	r0, #110	; 0x6e
   256ac:	bc70      	pop	{r4, r5, r6}
   256ae:	4770      	bx	lr
   256b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256b4:	4770      	bx	lr
   256b6:	bf00      	nop

000256b8 <rpc_gnss_serialize_location>:
   256b8:	4603      	mov	r3, r0
   256ba:	b1c8      	cbz	r0, 256f0 <rpc_gnss_serialize_location+0x38>
   256bc:	b1c1      	cbz	r1, 256f0 <rpc_gnss_serialize_location+0x38>
   256be:	2000      	movs	r0, #0
   256c0:	2207      	movs	r2, #7
   256c2:	7048      	strb	r0, [r1, #1]
   256c4:	700a      	strb	r2, [r1, #0]
   256c6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   256ca:	2011      	movs	r0, #17
   256cc:	814a      	strh	r2, [r1, #10]
   256ce:	7b9a      	ldrb	r2, [r3, #14]
   256d0:	740a      	strb	r2, [r1, #16]
   256d2:	681a      	ldr	r2, [r3, #0]
   256d4:	f8c1 2002 	str.w	r2, [r1, #2]
   256d8:	685a      	ldr	r2, [r3, #4]
   256da:	f8c1 2006 	str.w	r2, [r1, #6]
   256de:	7b1a      	ldrb	r2, [r3, #12]
   256e0:	738a      	strb	r2, [r1, #14]
   256e2:	7b5a      	ldrb	r2, [r3, #13]
   256e4:	73ca      	strb	r2, [r1, #15]
   256e6:	7a9a      	ldrb	r2, [r3, #10]
   256e8:	730a      	strb	r2, [r1, #12]
   256ea:	7adb      	ldrb	r3, [r3, #11]
   256ec:	734b      	strb	r3, [r1, #13]
   256ee:	4770      	bx	lr
   256f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256f4:	4770      	bx	lr
   256f6:	bf00      	nop

000256f8 <rpc_gnss_serialize_integrity>:
   256f8:	b148      	cbz	r0, 2570e <rpc_gnss_serialize_integrity+0x16>
   256fa:	b141      	cbz	r1, 2570e <rpc_gnss_serialize_integrity+0x16>
   256fc:	2200      	movs	r2, #0
   256fe:	2308      	movs	r3, #8
   25700:	704a      	strb	r2, [r1, #1]
   25702:	700b      	strb	r3, [r1, #0]
   25704:	6803      	ldr	r3, [r0, #0]
   25706:	2006      	movs	r0, #6
   25708:	f8c1 3002 	str.w	r3, [r1, #2]
   2570c:	4770      	bx	lr
   2570e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25712:	4770      	bx	lr

00025714 <gnss_client_event_handler>:
   25714:	f850 1b08 	ldr.w	r1, [r0], #8
   25718:	0c09      	lsrs	r1, r1, #16
   2571a:	f7fd b941 	b.w	229a0 <rpc_gnss_event_handler>
   2571e:	bf00      	nop

00025720 <rpc_gnss_client_init>:
   25720:	4801      	ldr	r0, [pc, #4]	; (25728 <rpc_gnss_client_init+0x8>)
   25722:	f7fd b871 	b.w	22808 <rpc_client_register>
   25726:	bf00      	nop
   25728:	00034fdc 	.word	0x00034fdc

0002572c <rpc_gnss_client_request_alloc>:
   2572c:	2300      	movs	r3, #0
   2572e:	b510      	push	{r4, lr}
   25730:	b082      	sub	sp, #8
   25732:	9301      	str	r3, [sp, #4]
   25734:	b158      	cbz	r0, 2574e <rpc_gnss_client_request_alloc+0x22>
   25736:	4604      	mov	r4, r0
   25738:	aa01      	add	r2, sp, #4
   2573a:	2007      	movs	r0, #7
   2573c:	f7fd f8de 	bl	228fc <rpc_message_alloc>
   25740:	b918      	cbnz	r0, 2574a <rpc_gnss_client_request_alloc+0x1e>
   25742:	9b01      	ldr	r3, [sp, #4]
   25744:	b10b      	cbz	r3, 2574a <rpc_gnss_client_request_alloc+0x1e>
   25746:	3308      	adds	r3, #8
   25748:	6023      	str	r3, [r4, #0]
   2574a:	b002      	add	sp, #8
   2574c:	bd10      	pop	{r4, pc}
   2574e:	2007      	movs	r0, #7
   25750:	b002      	add	sp, #8
   25752:	bd10      	pop	{r4, pc}

00025754 <rpc_gnss_client_request_send>:
   25754:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   25758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2575c:	d10b      	bne.n	25776 <rpc_gnss_client_request_send+0x22>
   2575e:	b160      	cbz	r0, 2577a <rpc_gnss_client_request_send+0x26>
   25760:	4603      	mov	r3, r0
   25762:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   25766:	2007      	movs	r0, #7
   25768:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2576c:	f843 1d08 	str.w	r1, [r3, #-8]!
   25770:	4619      	mov	r1, r3
   25772:	f7fd b8b3 	b.w	228dc <rpc_message_send>
   25776:	200f      	movs	r0, #15
   25778:	4770      	bx	lr
   2577a:	2007      	movs	r0, #7
   2577c:	4770      	bx	lr
   2577e:	bf00      	nop

00025780 <rpc_gnss_client_message_free>:
   25780:	b120      	cbz	r0, 2578c <rpc_gnss_client_message_free+0xc>
   25782:	f1a0 0108 	sub.w	r1, r0, #8
   25786:	2007      	movs	r0, #7
   25788:	f7fd b8e4 	b.w	22954 <rpc_message_free>
   2578c:	2007      	movs	r0, #7
   2578e:	4770      	bx	lr

00025790 <rpc_gnss_client_data_free>:
   25790:	b118      	cbz	r0, 2579a <rpc_gnss_client_data_free+0xa>
   25792:	4601      	mov	r1, r0
   25794:	2007      	movs	r0, #7
   25796:	f7fd b8e9 	b.w	2296c <rpc_message_data_free>
   2579a:	2007      	movs	r0, #7
   2579c:	4770      	bx	lr
   2579e:	bf00      	nop

000257a0 <datagram_handler_init>:
   257a0:	b510      	push	{r4, lr}
   257a2:	4604      	mov	r4, r0
   257a4:	200c      	movs	r0, #12
   257a6:	f000 fdd7 	bl	26358 <nrf_malloc>
   257aa:	60e0      	str	r0, [r4, #12]
   257ac:	b118      	cbz	r0, 257b6 <datagram_handler_init+0x16>
   257ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   257b2:	f7ff bd5f 	b.w	25274 <linked_list_init>
   257b6:	2004      	movs	r0, #4
   257b8:	bd10      	pop	{r4, pc}
   257ba:	bf00      	nop

000257bc <datagram_handler_put>:
   257bc:	b570      	push	{r4, r5, r6, lr}
   257be:	4606      	mov	r6, r0
   257c0:	2014      	movs	r0, #20
   257c2:	460d      	mov	r5, r1
   257c4:	f000 fdc8 	bl	26358 <nrf_malloc>
   257c8:	b178      	cbz	r0, 257ea <datagram_handler_put+0x2e>
   257ca:	682b      	ldr	r3, [r5, #0]
   257cc:	4604      	mov	r4, r0
   257ce:	6043      	str	r3, [r0, #4]
   257d0:	686b      	ldr	r3, [r5, #4]
   257d2:	4601      	mov	r1, r0
   257d4:	6083      	str	r3, [r0, #8]
   257d6:	68eb      	ldr	r3, [r5, #12]
   257d8:	60c3      	str	r3, [r0, #12]
   257da:	68ab      	ldr	r3, [r5, #8]
   257dc:	6103      	str	r3, [r0, #16]
   257de:	68f0      	ldr	r0, [r6, #12]
   257e0:	f7ff fd52 	bl	25288 <linked_list_push>
   257e4:	b920      	cbnz	r0, 257f0 <datagram_handler_put+0x34>
   257e6:	6868      	ldr	r0, [r5, #4]
   257e8:	bd70      	pop	{r4, r5, r6, pc}
   257ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257ee:	bd70      	pop	{r4, r5, r6, pc}
   257f0:	4620      	mov	r0, r4
   257f2:	f000 fdbb 	bl	2636c <nrf_free>
   257f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257fa:	bd70      	pop	{r4, r5, r6, pc}

000257fc <datagram_handler_get>:
   257fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25800:	4607      	mov	r7, r0
   25802:	b084      	sub	sp, #16
   25804:	68c0      	ldr	r0, [r0, #12]
   25806:	460c      	mov	r4, r1
   25808:	4616      	mov	r6, r2
   2580a:	f7ff fd5d 	bl	252c8 <linked_list_peek>
   2580e:	2800      	cmp	r0, #0
   25810:	d03b      	beq.n	2588a <datagram_handler_get+0x8e>
   25812:	6882      	ldr	r2, [r0, #8]
   25814:	4605      	mov	r5, r0
   25816:	e9d4 0300 	ldrd	r0, r3, [r4]
   2581a:	429a      	cmp	r2, r3
   2581c:	bf28      	it	cs
   2581e:	461a      	movcs	r2, r3
   25820:	6062      	str	r2, [r4, #4]
   25822:	b110      	cbz	r0, 2582a <datagram_handler_get+0x2e>
   25824:	6869      	ldr	r1, [r5, #4]
   25826:	f00d ffcb 	bl	337c0 <memcpy>
   2582a:	68a0      	ldr	r0, [r4, #8]
   2582c:	b118      	cbz	r0, 25836 <datagram_handler_get+0x3a>
   2582e:	692b      	ldr	r3, [r5, #16]
   25830:	b10b      	cbz	r3, 25836 <datagram_handler_get+0x3a>
   25832:	68ea      	ldr	r2, [r5, #12]
   25834:	bb02      	cbnz	r2, 25878 <datagram_handler_get+0x7c>
   25836:	2300      	movs	r3, #0
   25838:	60e3      	str	r3, [r4, #12]
   2583a:	0732      	lsls	r2, r6, #28
   2583c:	d506      	bpl.n	2584c <datagram_handler_get+0x50>
   2583e:	06b3      	lsls	r3, r6, #26
   25840:	bf4c      	ite	mi
   25842:	68a8      	ldrmi	r0, [r5, #8]
   25844:	6860      	ldrpl	r0, [r4, #4]
   25846:	b004      	add	sp, #16
   25848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2584c:	68f8      	ldr	r0, [r7, #12]
   2584e:	f7ff fd31 	bl	252b4 <linked_list_pop>
   25852:	4680      	mov	r8, r0
   25854:	2800      	cmp	r0, #0
   25856:	d0f2      	beq.n	2583e <datagram_handler_get+0x42>
   25858:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2585c:	6902      	ldr	r2, [r0, #16]
   2585e:	9300      	str	r3, [sp, #0]
   25860:	68c3      	ldr	r3, [r0, #12]
   25862:	e9cd 1201 	strd	r1, r2, [sp, #4]
   25866:	9303      	str	r3, [sp, #12]
   25868:	4668      	mov	r0, sp
   2586a:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   2586e:	4798      	blx	r3
   25870:	4640      	mov	r0, r8
   25872:	f000 fd7b 	bl	2636c <nrf_free>
   25876:	e7e2      	b.n	2583e <datagram_handler_get+0x42>
   25878:	68e3      	ldr	r3, [r4, #12]
   2587a:	429a      	cmp	r2, r3
   2587c:	bf28      	it	cs
   2587e:	461a      	movcs	r2, r3
   25880:	60e2      	str	r2, [r4, #12]
   25882:	6929      	ldr	r1, [r5, #16]
   25884:	f00d ff9c 	bl	337c0 <memcpy>
   25888:	e7d7      	b.n	2583a <datagram_handler_get+0x3e>
   2588a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2588e:	e7da      	b.n	25846 <datagram_handler_get+0x4a>

00025890 <datagram_handler_available>:
   25890:	b508      	push	{r3, lr}
   25892:	68c0      	ldr	r0, [r0, #12]
   25894:	f7ff fd18 	bl	252c8 <linked_list_peek>
   25898:	b108      	cbz	r0, 2589e <datagram_handler_available+0xe>
   2589a:	6880      	ldr	r0, [r0, #8]
   2589c:	bd08      	pop	{r3, pc}
   2589e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   258a2:	bd08      	pop	{r3, pc}

000258a4 <datagram_handler_flush>:
   258a4:	b530      	push	{r4, r5, lr}
   258a6:	4605      	mov	r5, r0
   258a8:	68c0      	ldr	r0, [r0, #12]
   258aa:	b085      	sub	sp, #20
   258ac:	b9a8      	cbnz	r0, 258da <datagram_handler_flush+0x36>
   258ae:	e01a      	b.n	258e6 <datagram_handler_flush+0x42>
   258b0:	68e8      	ldr	r0, [r5, #12]
   258b2:	f7ff fcff 	bl	252b4 <linked_list_pop>
   258b6:	4604      	mov	r4, r0
   258b8:	b170      	cbz	r0, 258d8 <datagram_handler_flush+0x34>
   258ba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   258be:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   258c2:	e9cd 0100 	strd	r0, r1, [sp]
   258c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   258ca:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   258ce:	4668      	mov	r0, sp
   258d0:	4798      	blx	r3
   258d2:	4620      	mov	r0, r4
   258d4:	f000 fd4a 	bl	2636c <nrf_free>
   258d8:	68e8      	ldr	r0, [r5, #12]
   258da:	f7ff fcfb 	bl	252d4 <linked_list_size_get>
   258de:	2800      	cmp	r0, #0
   258e0:	d1e6      	bne.n	258b0 <datagram_handler_flush+0xc>
   258e2:	b005      	add	sp, #20
   258e4:	bd30      	pop	{r4, r5, pc}
   258e6:	2008      	movs	r0, #8
   258e8:	b005      	add	sp, #20
   258ea:	bd30      	pop	{r4, r5, pc}

000258ec <datagram_handler_free>:
   258ec:	b530      	push	{r4, r5, lr}
   258ee:	4605      	mov	r5, r0
   258f0:	68c0      	ldr	r0, [r0, #12]
   258f2:	b085      	sub	sp, #20
   258f4:	b9a0      	cbnz	r0, 25920 <datagram_handler_free+0x34>
   258f6:	e01c      	b.n	25932 <datagram_handler_free+0x46>
   258f8:	f7ff fcdc 	bl	252b4 <linked_list_pop>
   258fc:	4604      	mov	r4, r0
   258fe:	b170      	cbz	r0, 2591e <datagram_handler_free+0x32>
   25900:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   25904:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   25908:	e9cd 0100 	strd	r0, r1, [sp]
   2590c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25910:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25914:	4668      	mov	r0, sp
   25916:	4798      	blx	r3
   25918:	4620      	mov	r0, r4
   2591a:	f000 fd27 	bl	2636c <nrf_free>
   2591e:	68e8      	ldr	r0, [r5, #12]
   25920:	f7ff fcd8 	bl	252d4 <linked_list_size_get>
   25924:	4604      	mov	r4, r0
   25926:	68e8      	ldr	r0, [r5, #12]
   25928:	2c00      	cmp	r4, #0
   2592a:	d1e5      	bne.n	258f8 <datagram_handler_free+0xc>
   2592c:	f000 fd1e 	bl	2636c <nrf_free>
   25930:	60ec      	str	r4, [r5, #12]
   25932:	b005      	add	sp, #20
   25934:	bd30      	pop	{r4, r5, pc}
   25936:	bf00      	nop

00025938 <null_handler_init>:
   25938:	2000      	movs	r0, #0
   2593a:	4770      	bx	lr

0002593c <null_handler_put>:
   2593c:	b510      	push	{r4, lr}
   2593e:	460c      	mov	r4, r1
   25940:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25944:	4620      	mov	r0, r4
   25946:	4798      	blx	r3
   25948:	6860      	ldr	r0, [r4, #4]
   2594a:	bd10      	pop	{r4, pc}

0002594c <null_handler_get>:
   2594c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25950:	4770      	bx	lr
   25952:	bf00      	nop

00025954 <null_handler_available>:
   25954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25958:	4770      	bx	lr
   2595a:	bf00      	nop

0002595c <null_handler_flush>:
   2595c:	2000      	movs	r0, #0
   2595e:	4770      	bx	lr

00025960 <null_handler_free>:
   25960:	4770      	bx	lr
   25962:	bf00      	nop

00025964 <packet_handler_create>:
   25964:	2801      	cmp	r0, #1
   25966:	b538      	push	{r3, r4, r5, lr}
   25968:	460d      	mov	r5, r1
   2596a:	4614      	mov	r4, r2
   2596c:	d00d      	beq.n	2598a <packet_handler_create+0x26>
   2596e:	db11      	blt.n	25994 <packet_handler_create+0x30>
   25970:	2803      	cmp	r0, #3
   25972:	dc0f      	bgt.n	25994 <packet_handler_create+0x30>
   25974:	2010      	movs	r0, #16
   25976:	f000 fcef 	bl	26358 <nrf_malloc>
   2597a:	2218      	movs	r2, #24
   2597c:	b120      	cbz	r0, 25988 <packet_handler_create+0x24>
   2597e:	4b08      	ldr	r3, [pc, #32]	; (259a0 <packet_handler_create+0x3c>)
   25980:	6045      	str	r5, [r0, #4]
   25982:	4413      	add	r3, r2
   25984:	6084      	str	r4, [r0, #8]
   25986:	6003      	str	r3, [r0, #0]
   25988:	bd38      	pop	{r3, r4, r5, pc}
   2598a:	2014      	movs	r0, #20
   2598c:	f000 fce4 	bl	26358 <nrf_malloc>
   25990:	2230      	movs	r2, #48	; 0x30
   25992:	e7f3      	b.n	2597c <packet_handler_create+0x18>
   25994:	200c      	movs	r0, #12
   25996:	f000 fcdf 	bl	26358 <nrf_malloc>
   2599a:	2200      	movs	r2, #0
   2599c:	e7ee      	b.n	2597c <packet_handler_create+0x18>
   2599e:	bf00      	nop
   259a0:	00034fec 	.word	0x00034fec

000259a4 <packet_handler_delete>:
   259a4:	b510      	push	{r4, lr}
   259a6:	4604      	mov	r4, r0
   259a8:	6803      	ldr	r3, [r0, #0]
   259aa:	691b      	ldr	r3, [r3, #16]
   259ac:	4798      	blx	r3
   259ae:	6823      	ldr	r3, [r4, #0]
   259b0:	4620      	mov	r0, r4
   259b2:	695b      	ldr	r3, [r3, #20]
   259b4:	4798      	blx	r3
   259b6:	4620      	mov	r0, r4
   259b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   259bc:	f000 bcd6 	b.w	2636c <nrf_free>

000259c0 <stream_handler_init>:
   259c0:	b510      	push	{r4, lr}
   259c2:	4604      	mov	r4, r0
   259c4:	200c      	movs	r0, #12
   259c6:	f000 fcc7 	bl	26358 <nrf_malloc>
   259ca:	60e0      	str	r0, [r4, #12]
   259cc:	b128      	cbz	r0, 259da <stream_handler_init+0x1a>
   259ce:	2300      	movs	r3, #0
   259d0:	6123      	str	r3, [r4, #16]
   259d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   259d6:	f7ff bc4d 	b.w	25274 <linked_list_init>
   259da:	2004      	movs	r0, #4
   259dc:	bd10      	pop	{r4, pc}
   259de:	bf00      	nop

000259e0 <stream_handler_put>:
   259e0:	b570      	push	{r4, r5, r6, lr}
   259e2:	4606      	mov	r6, r0
   259e4:	2014      	movs	r0, #20
   259e6:	460d      	mov	r5, r1
   259e8:	f000 fcb6 	bl	26358 <nrf_malloc>
   259ec:	b178      	cbz	r0, 25a0e <stream_handler_put+0x2e>
   259ee:	682b      	ldr	r3, [r5, #0]
   259f0:	4604      	mov	r4, r0
   259f2:	6043      	str	r3, [r0, #4]
   259f4:	686b      	ldr	r3, [r5, #4]
   259f6:	4601      	mov	r1, r0
   259f8:	6083      	str	r3, [r0, #8]
   259fa:	68eb      	ldr	r3, [r5, #12]
   259fc:	60c3      	str	r3, [r0, #12]
   259fe:	68ab      	ldr	r3, [r5, #8]
   25a00:	6103      	str	r3, [r0, #16]
   25a02:	68f0      	ldr	r0, [r6, #12]
   25a04:	f7ff fc40 	bl	25288 <linked_list_push>
   25a08:	b920      	cbnz	r0, 25a14 <stream_handler_put+0x34>
   25a0a:	6868      	ldr	r0, [r5, #4]
   25a0c:	bd70      	pop	{r4, r5, r6, pc}
   25a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a12:	bd70      	pop	{r4, r5, r6, pc}
   25a14:	4620      	mov	r0, r4
   25a16:	f000 fca9 	bl	2636c <nrf_free>
   25a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a1e:	bd70      	pop	{r4, r5, r6, pc}

00025a20 <stream_handler_get>:
   25a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a24:	4682      	mov	sl, r0
   25a26:	b089      	sub	sp, #36	; 0x24
   25a28:	68c0      	ldr	r0, [r0, #12]
   25a2a:	4689      	mov	r9, r1
   25a2c:	4693      	mov	fp, r2
   25a2e:	f7ff fc4b 	bl	252c8 <linked_list_peek>
   25a32:	2800      	cmp	r0, #0
   25a34:	d071      	beq.n	25b1a <stream_handler_get+0xfa>
   25a36:	4605      	mov	r5, r0
   25a38:	f8d9 0008 	ldr.w	r0, [r9, #8]
   25a3c:	b120      	cbz	r0, 25a48 <stream_handler_get+0x28>
   25a3e:	692b      	ldr	r3, [r5, #16]
   25a40:	b113      	cbz	r3, 25a48 <stream_handler_get+0x28>
   25a42:	68ea      	ldr	r2, [r5, #12]
   25a44:	2a00      	cmp	r2, #0
   25a46:	d15d      	bne.n	25b04 <stream_handler_get+0xe4>
   25a48:	2300      	movs	r3, #0
   25a4a:	f8c9 300c 	str.w	r3, [r9, #12]
   25a4e:	f8d9 2000 	ldr.w	r2, [r9]
   25a52:	f8d9 8004 	ldr.w	r8, [r9, #4]
   25a56:	f8da 1010 	ldr.w	r1, [sl, #16]
   25a5a:	9203      	str	r2, [sp, #12]
   25a5c:	f1b8 0f00 	cmp.w	r8, #0
   25a60:	d030      	beq.n	25ac4 <stream_handler_get+0xa4>
   25a62:	2400      	movs	r4, #0
   25a64:	f00b 0320 	and.w	r3, fp, #32
   25a68:	9301      	str	r3, [sp, #4]
   25a6a:	f00b 0b08 	and.w	fp, fp, #8
   25a6e:	68ae      	ldr	r6, [r5, #8]
   25a70:	eba8 0304 	sub.w	r3, r8, r4
   25a74:	1a76      	subs	r6, r6, r1
   25a76:	429e      	cmp	r6, r3
   25a78:	4637      	mov	r7, r6
   25a7a:	bf28      	it	cs
   25a7c:	461f      	movcs	r7, r3
   25a7e:	b10a      	cbz	r2, 25a84 <stream_handler_get+0x64>
   25a80:	9a01      	ldr	r2, [sp, #4]
   25a82:	b1aa      	cbz	r2, 25ab0 <stream_handler_get+0x90>
   25a84:	f1bb 0f00 	cmp.w	fp, #0
   25a88:	d106      	bne.n	25a98 <stream_handler_get+0x78>
   25a8a:	429e      	cmp	r6, r3
   25a8c:	d921      	bls.n	25ad2 <stream_handler_get+0xb2>
   25a8e:	f8da 3010 	ldr.w	r3, [sl, #16]
   25a92:	443b      	add	r3, r7
   25a94:	f8ca 3010 	str.w	r3, [sl, #16]
   25a98:	4628      	mov	r0, r5
   25a9a:	f7ff fc1d 	bl	252d8 <linked_list_get_next>
   25a9e:	443c      	add	r4, r7
   25aa0:	4605      	mov	r5, r0
   25aa2:	b180      	cbz	r0, 25ac6 <stream_handler_get+0xa6>
   25aa4:	45a0      	cmp	r8, r4
   25aa6:	d90e      	bls.n	25ac6 <stream_handler_get+0xa6>
   25aa8:	f8d9 2000 	ldr.w	r2, [r9]
   25aac:	2100      	movs	r1, #0
   25aae:	e7de      	b.n	25a6e <stream_handler_get+0x4e>
   25ab0:	6868      	ldr	r0, [r5, #4]
   25ab2:	9302      	str	r3, [sp, #8]
   25ab4:	9b03      	ldr	r3, [sp, #12]
   25ab6:	4401      	add	r1, r0
   25ab8:	463a      	mov	r2, r7
   25aba:	1918      	adds	r0, r3, r4
   25abc:	f00d fe80 	bl	337c0 <memcpy>
   25ac0:	9b02      	ldr	r3, [sp, #8]
   25ac2:	e7df      	b.n	25a84 <stream_handler_get+0x64>
   25ac4:	4644      	mov	r4, r8
   25ac6:	4620      	mov	r0, r4
   25ac8:	f8c9 4004 	str.w	r4, [r9, #4]
   25acc:	b009      	add	sp, #36	; 0x24
   25ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ad2:	f8da 000c 	ldr.w	r0, [sl, #12]
   25ad6:	f7ff fbed 	bl	252b4 <linked_list_pop>
   25ada:	4606      	mov	r6, r0
   25adc:	b170      	cbz	r0, 25afc <stream_handler_get+0xdc>
   25ade:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   25ae2:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   25ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   25aea:	e9cd 1006 	strd	r1, r0, [sp, #24]
   25aee:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   25af2:	a804      	add	r0, sp, #16
   25af4:	4798      	blx	r3
   25af6:	4630      	mov	r0, r6
   25af8:	f000 fc38 	bl	2636c <nrf_free>
   25afc:	2300      	movs	r3, #0
   25afe:	f8ca 3010 	str.w	r3, [sl, #16]
   25b02:	e7c9      	b.n	25a98 <stream_handler_get+0x78>
   25b04:	f8d9 300c 	ldr.w	r3, [r9, #12]
   25b08:	429a      	cmp	r2, r3
   25b0a:	bf28      	it	cs
   25b0c:	461a      	movcs	r2, r3
   25b0e:	f8c9 200c 	str.w	r2, [r9, #12]
   25b12:	6929      	ldr	r1, [r5, #16]
   25b14:	f00d fe54 	bl	337c0 <memcpy>
   25b18:	e799      	b.n	25a4e <stream_handler_get+0x2e>
   25b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b1e:	e7d5      	b.n	25acc <stream_handler_get+0xac>

00025b20 <stream_handler_available>:
   25b20:	b510      	push	{r4, lr}
   25b22:	4604      	mov	r4, r0
   25b24:	68c0      	ldr	r0, [r0, #12]
   25b26:	f7ff fbcf 	bl	252c8 <linked_list_peek>
   25b2a:	b150      	cbz	r0, 25b42 <stream_handler_available+0x22>
   25b2c:	6924      	ldr	r4, [r4, #16]
   25b2e:	4264      	negs	r4, r4
   25b30:	6883      	ldr	r3, [r0, #8]
   25b32:	441c      	add	r4, r3
   25b34:	f7ff fbd0 	bl	252d8 <linked_list_get_next>
   25b38:	2800      	cmp	r0, #0
   25b3a:	d1f9      	bne.n	25b30 <stream_handler_available+0x10>
   25b3c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   25b40:	bd10      	pop	{r4, pc}
   25b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b46:	bd10      	pop	{r4, pc}

00025b48 <stream_handler_flush>:
   25b48:	b530      	push	{r4, r5, lr}
   25b4a:	4605      	mov	r5, r0
   25b4c:	68c0      	ldr	r0, [r0, #12]
   25b4e:	b085      	sub	sp, #20
   25b50:	b9a8      	cbnz	r0, 25b7e <stream_handler_flush+0x36>
   25b52:	e01a      	b.n	25b8a <stream_handler_flush+0x42>
   25b54:	68e8      	ldr	r0, [r5, #12]
   25b56:	f7ff fbad 	bl	252b4 <linked_list_pop>
   25b5a:	4604      	mov	r4, r0
   25b5c:	b170      	cbz	r0, 25b7c <stream_handler_flush+0x34>
   25b5e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   25b62:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   25b66:	e9cd 0100 	strd	r0, r1, [sp]
   25b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25b6e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25b72:	4668      	mov	r0, sp
   25b74:	4798      	blx	r3
   25b76:	4620      	mov	r0, r4
   25b78:	f000 fbf8 	bl	2636c <nrf_free>
   25b7c:	68e8      	ldr	r0, [r5, #12]
   25b7e:	f7ff fba9 	bl	252d4 <linked_list_size_get>
   25b82:	2800      	cmp	r0, #0
   25b84:	d1e6      	bne.n	25b54 <stream_handler_flush+0xc>
   25b86:	b005      	add	sp, #20
   25b88:	bd30      	pop	{r4, r5, pc}
   25b8a:	2008      	movs	r0, #8
   25b8c:	b005      	add	sp, #20
   25b8e:	bd30      	pop	{r4, r5, pc}

00025b90 <stream_handler_free>:
   25b90:	b530      	push	{r4, r5, lr}
   25b92:	4605      	mov	r5, r0
   25b94:	68c0      	ldr	r0, [r0, #12]
   25b96:	b085      	sub	sp, #20
   25b98:	b9a0      	cbnz	r0, 25bc4 <stream_handler_free+0x34>
   25b9a:	e01c      	b.n	25bd6 <stream_handler_free+0x46>
   25b9c:	f7ff fb8a 	bl	252b4 <linked_list_pop>
   25ba0:	4604      	mov	r4, r0
   25ba2:	b170      	cbz	r0, 25bc2 <stream_handler_free+0x32>
   25ba4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   25ba8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   25bac:	e9cd 0100 	strd	r0, r1, [sp]
   25bb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25bb4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25bb8:	4668      	mov	r0, sp
   25bba:	4798      	blx	r3
   25bbc:	4620      	mov	r0, r4
   25bbe:	f000 fbd5 	bl	2636c <nrf_free>
   25bc2:	68e8      	ldr	r0, [r5, #12]
   25bc4:	f7ff fb86 	bl	252d4 <linked_list_size_get>
   25bc8:	4604      	mov	r4, r0
   25bca:	68e8      	ldr	r0, [r5, #12]
   25bcc:	2c00      	cmp	r4, #0
   25bce:	d1e5      	bne.n	25b9c <stream_handler_free+0xc>
   25bd0:	f000 fbcc 	bl	2636c <nrf_free>
   25bd4:	60ec      	str	r4, [r5, #12]
   25bd6:	b005      	add	sp, #20
   25bd8:	bd30      	pop	{r4, r5, pc}
   25bda:	bf00      	nop

00025bdc <mem_free>:
   25bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25be0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 25cb0 <mem_free+0xd4>
   25be4:	b083      	sub	sp, #12
   25be6:	9000      	str	r0, [sp, #0]
   25be8:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   25bec:	f8dc 3008 	ldr.w	r3, [ip, #8]
   25bf0:	b12b      	cbz	r3, 25bfe <mem_free+0x22>
   25bf2:	f8dc 2000 	ldr.w	r2, [ip]
   25bf6:	9c00      	ldr	r4, [sp, #0]
   25bf8:	7810      	ldrb	r0, [r2, #0]
   25bfa:	42a0      	cmp	r0, r4
   25bfc:	d006      	beq.n	25c0c <mem_free+0x30>
   25bfe:	f10c 0c0c 	add.w	ip, ip, #12
   25c02:	45e3      	cmp	fp, ip
   25c04:	d1f2      	bne.n	25bec <mem_free+0x10>
   25c06:	b003      	add	sp, #12
   25c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c0c:	f8dc a004 	ldr.w	sl, [ip, #4]
   25c10:	eb03 080a 	add.w	r8, r3, sl
   25c14:	45c2      	cmp	sl, r8
   25c16:	d2f2      	bcs.n	25bfe <mem_free+0x22>
   25c18:	6853      	ldr	r3, [r2, #4]
   25c1a:	f8cd c004 	str.w	ip, [sp, #4]
   25c1e:	46d6      	mov	lr, sl
   25c20:	469c      	mov	ip, r3
   25c22:	f8d2 9010 	ldr.w	r9, [r2, #16]
   25c26:	8997      	ldrh	r7, [r2, #12]
   25c28:	ebae 000a 	sub.w	r0, lr, sl
   25c2c:	b3df      	cbz	r7, 25ca6 <mem_free+0xca>
   25c2e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   25c32:	4290      	cmp	r0, r2
   25c34:	d31c      	bcc.n	25c70 <mem_free+0x94>
   25c36:	4665      	mov	r5, ip
   25c38:	2400      	movs	r4, #0
   25c3a:	f109 0304 	add.w	r3, r9, #4
   25c3e:	e003      	b.n	25c48 <mem_free+0x6c>
   25c40:	885a      	ldrh	r2, [r3, #2]
   25c42:	3304      	adds	r3, #4
   25c44:	4282      	cmp	r2, r0
   25c46:	d815      	bhi.n	25c74 <mem_free+0x98>
   25c48:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   25c4c:	3401      	adds	r4, #1
   25c4e:	42a7      	cmp	r7, r4
   25c50:	fb02 5506 	mla	r5, r2, r6, r5
   25c54:	eba0 0002 	sub.w	r0, r0, r2
   25c58:	461e      	mov	r6, r3
   25c5a:	d1f1      	bne.n	25c40 <mem_free+0x64>
   25c5c:	2000      	movs	r0, #0
   25c5e:	4281      	cmp	r1, r0
   25c60:	d00d      	beq.n	25c7e <mem_free+0xa2>
   25c62:	f10e 0e01 	add.w	lr, lr, #1
   25c66:	45f0      	cmp	r8, lr
   25c68:	d1de      	bne.n	25c28 <mem_free+0x4c>
   25c6a:	f8dd c004 	ldr.w	ip, [sp, #4]
   25c6e:	e7c6      	b.n	25bfe <mem_free+0x22>
   25c70:	4665      	mov	r5, ip
   25c72:	464e      	mov	r6, r9
   25c74:	8833      	ldrh	r3, [r6, #0]
   25c76:	fb00 5003 	mla	r0, r0, r3, r5
   25c7a:	4281      	cmp	r1, r0
   25c7c:	d1f1      	bne.n	25c62 <mem_free+0x86>
   25c7e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   25c82:	f8dd c004 	ldr.w	ip, [sp, #4]
   25c86:	d0ba      	beq.n	25bfe <mem_free+0x22>
   25c88:	2301      	movs	r3, #1
   25c8a:	4a08      	ldr	r2, [pc, #32]	; (25cac <mem_free+0xd0>)
   25c8c:	ea4f 115e 	mov.w	r1, lr, lsr #5
   25c90:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   25c94:	f00e 0e1f 	and.w	lr, lr, #31
   25c98:	fa03 fe0e 	lsl.w	lr, r3, lr
   25c9c:	ea4e 0000 	orr.w	r0, lr, r0
   25ca0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   25ca4:	e7af      	b.n	25c06 <mem_free+0x2a>
   25ca6:	4638      	mov	r0, r7
   25ca8:	e7d9      	b.n	25c5e <mem_free+0x82>
   25caa:	bf00      	nop
   25cac:	200227a0 	.word	0x200227a0
   25cb0:	200227e4 	.word	0x200227e4

00025cb4 <mem_alloc.constprop.5>:
   25cb4:	2800      	cmp	r0, #0
   25cb6:	d050      	beq.n	25d5a <mem_alloc.constprop.5+0xa6>
   25cb8:	4b6d      	ldr	r3, [pc, #436]	; (25e70 <mem_alloc.constprop.5+0x1bc>)
   25cba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25cbe:	4290      	cmp	r0, r2
   25cc0:	d84b      	bhi.n	25d5a <mem_alloc.constprop.5+0xa6>
   25cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cc6:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   25cca:	b083      	sub	sp, #12
   25ccc:	f1bb 0f00 	cmp.w	fp, #0
   25cd0:	d054      	beq.n	25d7c <mem_alloc.constprop.5+0xc8>
   25cd2:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   25cd6:	4691      	mov	r9, r2
   25cd8:	2600      	movs	r6, #0
   25cda:	f04f 0812 	mov.w	r8, #18
   25cde:	4f65      	ldr	r7, [pc, #404]	; (25e74 <mem_alloc.constprop.5+0x1c0>)
   25ce0:	9201      	str	r2, [sp, #4]
   25ce2:	f10b 0e11 	add.w	lr, fp, #17
   25ce6:	eb06 0209 	add.w	r2, r6, r9
   25cea:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   25cee:	3201      	adds	r2, #1
   25cf0:	0852      	lsrs	r2, r2, #1
   25cf2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   25cf6:	f102 0112 	add.w	r1, r2, #18
   25cfa:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   25cfe:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   25d02:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   25d06:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   25d0a:	f8dc c004 	ldr.w	ip, [ip, #4]
   25d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25d12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   25d16:	f8da a010 	ldr.w	sl, [sl, #16]
   25d1a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   25d1e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   25d22:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   25d26:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   25d2a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   25d2e:	6849      	ldr	r1, [r1, #4]
   25d30:	692d      	ldr	r5, [r5, #16]
   25d32:	6924      	ldr	r4, [r4, #16]
   25d34:	f8dc c004 	ldr.w	ip, [ip, #4]
   25d38:	4550      	cmp	r0, sl
   25d3a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   25d3e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   25d42:	d915      	bls.n	25d70 <mem_alloc.constprop.5+0xbc>
   25d44:	4288      	cmp	r0, r1
   25d46:	d211      	bcs.n	25d6c <mem_alloc.constprop.5+0xb8>
   25d48:	42a8      	cmp	r0, r5
   25d4a:	d908      	bls.n	25d5e <mem_alloc.constprop.5+0xaa>
   25d4c:	1c56      	adds	r6, r2, #1
   25d4e:	45b1      	cmp	r9, r6
   25d50:	f0c0 8087 	bcc.w	25e62 <mem_alloc.constprop.5+0x1ae>
   25d54:	f102 0813 	add.w	r8, r2, #19
   25d58:	e7c5      	b.n	25ce6 <mem_alloc.constprop.5+0x32>
   25d5a:	2000      	movs	r0, #0
   25d5c:	4770      	bx	lr
   25d5e:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   25d62:	454e      	cmp	r6, r9
   25d64:	d87d      	bhi.n	25e62 <mem_alloc.constprop.5+0x1ae>
   25d66:	f102 0e11 	add.w	lr, r2, #17
   25d6a:	e7bc      	b.n	25ce6 <mem_alloc.constprop.5+0x32>
   25d6c:	f109 0601 	add.w	r6, r9, #1
   25d70:	45b3      	cmp	fp, r6
   25d72:	d007      	beq.n	25d84 <mem_alloc.constprop.5+0xd0>
   25d74:	2e10      	cmp	r6, #16
   25d76:	d001      	beq.n	25d7c <mem_alloc.constprop.5+0xc8>
   25d78:	45b3      	cmp	fp, r6
   25d7a:	d808      	bhi.n	25d8e <mem_alloc.constprop.5+0xda>
   25d7c:	2000      	movs	r0, #0
   25d7e:	b003      	add	sp, #12
   25d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d84:	9a01      	ldr	r2, [sp, #4]
   25d86:	2a10      	cmp	r2, #16
   25d88:	bf18      	it	ne
   25d8a:	4616      	movne	r6, r2
   25d8c:	d0f6      	beq.n	25d7c <mem_alloc.constprop.5+0xc8>
   25d8e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 25e78 <mem_alloc.constprop.5+0x1c4>
   25d92:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   25d96:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   25d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   25d9e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   25da2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   25da6:	f8d2 e004 	ldr.w	lr, [r2, #4]
   25daa:	691d      	ldr	r5, [r3, #16]
   25dac:	2c00      	cmp	r4, #0
   25dae:	d056      	beq.n	25e5e <mem_alloc.constprop.5+0x1aa>
   25db0:	462a      	mov	r2, r5
   25db2:	4670      	mov	r0, lr
   25db4:	00a4      	lsls	r4, r4, #2
   25db6:	eb05 0904 	add.w	r9, r5, r4
   25dba:	8851      	ldrh	r1, [r2, #2]
   25dbc:	3204      	adds	r2, #4
   25dbe:	4591      	cmp	r9, r2
   25dc0:	4408      	add	r0, r1
   25dc2:	d1fa      	bne.n	25dba <mem_alloc.constprop.5+0x106>
   25dc4:	1929      	adds	r1, r5, r4
   25dc6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   25dca:	4482      	add	sl, r0
   25dcc:	4582      	cmp	sl, r0
   25dce:	d918      	bls.n	25e02 <mem_alloc.constprop.5+0x14e>
   25dd0:	0941      	lsrs	r1, r0, #5
   25dd2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   25dd6:	f000 041f 	and.w	r4, r0, #31
   25dda:	fa22 f904 	lsr.w	r9, r2, r4
   25dde:	f019 0f01 	tst.w	r9, #1
   25de2:	d007      	beq.n	25df4 <mem_alloc.constprop.5+0x140>
   25de4:	e013      	b.n	25e0e <mem_alloc.constprop.5+0x15a>
   25de6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   25dea:	fa22 f904 	lsr.w	r9, r2, r4
   25dee:	f019 0f01 	tst.w	r9, #1
   25df2:	d10c      	bne.n	25e0e <mem_alloc.constprop.5+0x15a>
   25df4:	3001      	adds	r0, #1
   25df6:	4582      	cmp	sl, r0
   25df8:	ea4f 1150 	mov.w	r1, r0, lsr #5
   25dfc:	f000 041f 	and.w	r4, r0, #31
   25e00:	d1f1      	bne.n	25de6 <mem_alloc.constprop.5+0x132>
   25e02:	3601      	adds	r6, #1
   25e04:	455e      	cmp	r6, fp
   25e06:	f108 0808 	add.w	r8, r8, #8
   25e0a:	d3c4      	bcc.n	25d96 <mem_alloc.constprop.5+0xe2>
   25e0c:	e7b6      	b.n	25d7c <mem_alloc.constprop.5+0xc8>
   25e0e:	2601      	movs	r6, #1
   25e10:	fa06 f404 	lsl.w	r4, r6, r4
   25e14:	899e      	ldrh	r6, [r3, #12]
   25e16:	ea22 0204 	bic.w	r2, r2, r4
   25e1a:	eba0 000e 	sub.w	r0, r0, lr
   25e1e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   25e22:	685c      	ldr	r4, [r3, #4]
   25e24:	2e00      	cmp	r6, #0
   25e26:	d0a9      	beq.n	25d7c <mem_alloc.constprop.5+0xc8>
   25e28:	886a      	ldrh	r2, [r5, #2]
   25e2a:	4282      	cmp	r2, r0
   25e2c:	d811      	bhi.n	25e52 <mem_alloc.constprop.5+0x19e>
   25e2e:	2100      	movs	r1, #0
   25e30:	1d2b      	adds	r3, r5, #4
   25e32:	e003      	b.n	25e3c <mem_alloc.constprop.5+0x188>
   25e34:	885a      	ldrh	r2, [r3, #2]
   25e36:	3304      	adds	r3, #4
   25e38:	4282      	cmp	r2, r0
   25e3a:	d80a      	bhi.n	25e52 <mem_alloc.constprop.5+0x19e>
   25e3c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   25e40:	3101      	adds	r1, #1
   25e42:	428e      	cmp	r6, r1
   25e44:	fb02 4405 	mla	r4, r2, r5, r4
   25e48:	eba0 0002 	sub.w	r0, r0, r2
   25e4c:	461d      	mov	r5, r3
   25e4e:	d1f1      	bne.n	25e34 <mem_alloc.constprop.5+0x180>
   25e50:	e794      	b.n	25d7c <mem_alloc.constprop.5+0xc8>
   25e52:	882b      	ldrh	r3, [r5, #0]
   25e54:	fb00 4003 	mla	r0, r0, r3, r4
   25e58:	b003      	add	sp, #12
   25e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e5e:	4670      	mov	r0, lr
   25e60:	e7b0      	b.n	25dc4 <mem_alloc.constprop.5+0x110>
   25e62:	f1bb 0f10 	cmp.w	fp, #16
   25e66:	bf08      	it	eq
   25e68:	260f      	moveq	r6, #15
   25e6a:	d090      	beq.n	25d8e <mem_alloc.constprop.5+0xda>
   25e6c:	e786      	b.n	25d7c <mem_alloc.constprop.5+0xc8>
   25e6e:	bf00      	nop
   25e70:	20022820 	.word	0x20022820
   25e74:	200227e4 	.word	0x200227e4
   25e78:	200227a0 	.word	0x200227a0

00025e7c <mem_alloc.constprop.4>:
   25e7c:	2800      	cmp	r0, #0
   25e7e:	d04c      	beq.n	25f1a <mem_alloc.constprop.4+0x9e>
   25e80:	4b6b      	ldr	r3, [pc, #428]	; (26030 <mem_alloc.constprop.4+0x1b4>)
   25e82:	681a      	ldr	r2, [r3, #0]
   25e84:	4290      	cmp	r0, r2
   25e86:	d848      	bhi.n	25f1a <mem_alloc.constprop.4+0x9e>
   25e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e8c:	685f      	ldr	r7, [r3, #4]
   25e8e:	b083      	sub	sp, #12
   25e90:	9700      	str	r7, [sp, #0]
   25e92:	2f00      	cmp	r7, #0
   25e94:	d051      	beq.n	25f3a <mem_alloc.constprop.4+0xbe>
   25e96:	1e7a      	subs	r2, r7, #1
   25e98:	4696      	mov	lr, r2
   25e9a:	2100      	movs	r1, #0
   25e9c:	f04f 0c01 	mov.w	ip, #1
   25ea0:	4c64      	ldr	r4, [pc, #400]	; (26034 <mem_alloc.constprop.4+0x1b8>)
   25ea2:	9201      	str	r2, [sp, #4]
   25ea4:	eb01 020e 	add.w	r2, r1, lr
   25ea8:	3201      	adds	r2, #1
   25eaa:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   25eae:	0852      	lsrs	r2, r2, #1
   25eb0:	f102 0801 	add.w	r8, r2, #1
   25eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25eb8:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   25ebc:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   25ec0:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   25ec4:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   25ec8:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   25ecc:	f8d9 9004 	ldr.w	r9, [r9, #4]
   25ed0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   25ed4:	f8da a010 	ldr.w	sl, [sl, #16]
   25ed8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   25edc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   25ee0:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   25ee4:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   25ee8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   25eec:	6936      	ldr	r6, [r6, #16]
   25eee:	f8db b004 	ldr.w	fp, [fp, #4]
   25ef2:	692d      	ldr	r5, [r5, #16]
   25ef4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   25ef8:	4550      	cmp	r0, sl
   25efa:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   25efe:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   25f02:	d913      	bls.n	25f2c <mem_alloc.constprop.4+0xb0>
   25f04:	42a8      	cmp	r0, r5
   25f06:	d210      	bcs.n	25f2a <mem_alloc.constprop.4+0xae>
   25f08:	42b0      	cmp	r0, r6
   25f0a:	d908      	bls.n	25f1e <mem_alloc.constprop.4+0xa2>
   25f0c:	45c6      	cmp	lr, r8
   25f0e:	4641      	mov	r1, r8
   25f10:	f0c0 8087 	bcc.w	26022 <mem_alloc.constprop.4+0x1a6>
   25f14:	f108 0c01 	add.w	ip, r8, #1
   25f18:	e7c4      	b.n	25ea4 <mem_alloc.constprop.4+0x28>
   25f1a:	2000      	movs	r0, #0
   25f1c:	4770      	bx	lr
   25f1e:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   25f22:	4571      	cmp	r1, lr
   25f24:	d87d      	bhi.n	26022 <mem_alloc.constprop.4+0x1a6>
   25f26:	4617      	mov	r7, r2
   25f28:	e7bc      	b.n	25ea4 <mem_alloc.constprop.4+0x28>
   25f2a:	4639      	mov	r1, r7
   25f2c:	9a00      	ldr	r2, [sp, #0]
   25f2e:	428a      	cmp	r2, r1
   25f30:	d007      	beq.n	25f42 <mem_alloc.constprop.4+0xc6>
   25f32:	2910      	cmp	r1, #16
   25f34:	d001      	beq.n	25f3a <mem_alloc.constprop.4+0xbe>
   25f36:	428a      	cmp	r2, r1
   25f38:	d808      	bhi.n	25f4c <mem_alloc.constprop.4+0xd0>
   25f3a:	2000      	movs	r0, #0
   25f3c:	b003      	add	sp, #12
   25f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f42:	9a01      	ldr	r2, [sp, #4]
   25f44:	2a10      	cmp	r2, #16
   25f46:	bf18      	it	ne
   25f48:	4611      	movne	r1, r2
   25f4a:	d0f6      	beq.n	25f3a <mem_alloc.constprop.4+0xbe>
   25f4c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 26038 <mem_alloc.constprop.4+0x1bc>
   25f50:	f8dd 9000 	ldr.w	r9, [sp]
   25f54:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   25f58:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   25f5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   25f60:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   25f64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   25f68:	f8d2 e004 	ldr.w	lr, [r2, #4]
   25f6c:	691f      	ldr	r7, [r3, #16]
   25f6e:	2e00      	cmp	r6, #0
   25f70:	d055      	beq.n	2601e <mem_alloc.constprop.4+0x1a2>
   25f72:	463a      	mov	r2, r7
   25f74:	4670      	mov	r0, lr
   25f76:	00b6      	lsls	r6, r6, #2
   25f78:	eb07 0a06 	add.w	sl, r7, r6
   25f7c:	8855      	ldrh	r5, [r2, #2]
   25f7e:	3204      	adds	r2, #4
   25f80:	4592      	cmp	sl, r2
   25f82:	4428      	add	r0, r5
   25f84:	d1fa      	bne.n	25f7c <mem_alloc.constprop.4+0x100>
   25f86:	19bd      	adds	r5, r7, r6
   25f88:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   25f8c:	4483      	add	fp, r0
   25f8e:	4583      	cmp	fp, r0
   25f90:	d918      	bls.n	25fc4 <mem_alloc.constprop.4+0x148>
   25f92:	0945      	lsrs	r5, r0, #5
   25f94:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   25f98:	f000 061f 	and.w	r6, r0, #31
   25f9c:	fa22 fa06 	lsr.w	sl, r2, r6
   25fa0:	f01a 0f01 	tst.w	sl, #1
   25fa4:	d007      	beq.n	25fb6 <mem_alloc.constprop.4+0x13a>
   25fa6:	e013      	b.n	25fd0 <mem_alloc.constprop.4+0x154>
   25fa8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   25fac:	fa22 fa06 	lsr.w	sl, r2, r6
   25fb0:	f01a 0f01 	tst.w	sl, #1
   25fb4:	d10c      	bne.n	25fd0 <mem_alloc.constprop.4+0x154>
   25fb6:	3001      	adds	r0, #1
   25fb8:	4583      	cmp	fp, r0
   25fba:	ea4f 1550 	mov.w	r5, r0, lsr #5
   25fbe:	f000 061f 	and.w	r6, r0, #31
   25fc2:	d1f1      	bne.n	25fa8 <mem_alloc.constprop.4+0x12c>
   25fc4:	3101      	adds	r1, #1
   25fc6:	4549      	cmp	r1, r9
   25fc8:	f108 0808 	add.w	r8, r8, #8
   25fcc:	d3c4      	bcc.n	25f58 <mem_alloc.constprop.4+0xdc>
   25fce:	e7b4      	b.n	25f3a <mem_alloc.constprop.4+0xbe>
   25fd0:	2101      	movs	r1, #1
   25fd2:	40b1      	lsls	r1, r6
   25fd4:	899e      	ldrh	r6, [r3, #12]
   25fd6:	ea22 0201 	bic.w	r2, r2, r1
   25fda:	eba0 000e 	sub.w	r0, r0, lr
   25fde:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   25fe2:	685c      	ldr	r4, [r3, #4]
   25fe4:	2e00      	cmp	r6, #0
   25fe6:	d0a8      	beq.n	25f3a <mem_alloc.constprop.4+0xbe>
   25fe8:	887a      	ldrh	r2, [r7, #2]
   25fea:	4282      	cmp	r2, r0
   25fec:	d811      	bhi.n	26012 <mem_alloc.constprop.4+0x196>
   25fee:	2100      	movs	r1, #0
   25ff0:	1d3b      	adds	r3, r7, #4
   25ff2:	e003      	b.n	25ffc <mem_alloc.constprop.4+0x180>
   25ff4:	885a      	ldrh	r2, [r3, #2]
   25ff6:	3304      	adds	r3, #4
   25ff8:	4282      	cmp	r2, r0
   25ffa:	d80a      	bhi.n	26012 <mem_alloc.constprop.4+0x196>
   25ffc:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   26000:	3101      	adds	r1, #1
   26002:	428e      	cmp	r6, r1
   26004:	eba0 0002 	sub.w	r0, r0, r2
   26008:	fb02 4405 	mla	r4, r2, r5, r4
   2600c:	461f      	mov	r7, r3
   2600e:	d1f1      	bne.n	25ff4 <mem_alloc.constprop.4+0x178>
   26010:	e793      	b.n	25f3a <mem_alloc.constprop.4+0xbe>
   26012:	883b      	ldrh	r3, [r7, #0]
   26014:	fb00 4003 	mla	r0, r0, r3, r4
   26018:	b003      	add	sp, #12
   2601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2601e:	4670      	mov	r0, lr
   26020:	e7b1      	b.n	25f86 <mem_alloc.constprop.4+0x10a>
   26022:	9a00      	ldr	r2, [sp, #0]
   26024:	2a10      	cmp	r2, #16
   26026:	bf08      	it	eq
   26028:	210f      	moveq	r1, #15
   2602a:	d08f      	beq.n	25f4c <mem_alloc.constprop.4+0xd0>
   2602c:	e785      	b.n	25f3a <mem_alloc.constprop.4+0xbe>
   2602e:	bf00      	nop
   26030:	20022820 	.word	0x20022820
   26034:	200227e4 	.word	0x200227e4
   26038:	200227a0 	.word	0x200227a0

0002603c <nrf_mem_init>:
   2603c:	b570      	push	{r4, r5, r6, lr}
   2603e:	2200      	movs	r2, #0
   26040:	2501      	movs	r5, #1
   26042:	4833      	ldr	r0, [pc, #204]	; (26110 <nrf_mem_init+0xd4>)
   26044:	0951      	lsrs	r1, r2, #5
   26046:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2604a:	f002 031f 	and.w	r3, r2, #31
   2604e:	fa05 f303 	lsl.w	r3, r5, r3
   26052:	3201      	adds	r2, #1
   26054:	4323      	orrs	r3, r4
   26056:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2605a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2605e:	d1f1      	bne.n	26044 <nrf_mem_init+0x8>
   26060:	2400      	movs	r4, #0
   26062:	4b2c      	ldr	r3, [pc, #176]	; (26114 <nrf_mem_init+0xd8>)
   26064:	4621      	mov	r1, r4
   26066:	223c      	movs	r2, #60	; 0x3c
   26068:	482b      	ldr	r0, [pc, #172]	; (26118 <nrf_mem_init+0xdc>)
   2606a:	601c      	str	r4, [r3, #0]
   2606c:	f00d fbe2 	bl	33834 <memset>
   26070:	2110      	movs	r1, #16
   26072:	2205      	movs	r2, #5
   26074:	4b29      	ldr	r3, [pc, #164]	; (2611c <nrf_mem_init+0xe0>)
   26076:	4e2a      	ldr	r6, [pc, #168]	; (26120 <nrf_mem_init+0xe4>)
   26078:	e9c3 4400 	strd	r4, r4, [r3]
   2607c:	60d9      	str	r1, [r3, #12]
   2607e:	6159      	str	r1, [r3, #20]
   26080:	61d9      	str	r1, [r3, #28]
   26082:	6259      	str	r1, [r3, #36]	; 0x24
   26084:	62d9      	str	r1, [r3, #44]	; 0x2c
   26086:	6359      	str	r1, [r3, #52]	; 0x34
   26088:	63d9      	str	r1, [r3, #60]	; 0x3c
   2608a:	6459      	str	r1, [r3, #68]	; 0x44
   2608c:	64d9      	str	r1, [r3, #76]	; 0x4c
   2608e:	6559      	str	r1, [r3, #84]	; 0x54
   26090:	65d9      	str	r1, [r3, #92]	; 0x5c
   26092:	6659      	str	r1, [r3, #100]	; 0x64
   26094:	66d9      	str	r1, [r3, #108]	; 0x6c
   26096:	6759      	str	r1, [r3, #116]	; 0x74
   26098:	67d9      	str	r1, [r3, #124]	; 0x7c
   2609a:	609a      	str	r2, [r3, #8]
   2609c:	611a      	str	r2, [r3, #16]
   2609e:	619a      	str	r2, [r3, #24]
   260a0:	621a      	str	r2, [r3, #32]
   260a2:	629a      	str	r2, [r3, #40]	; 0x28
   260a4:	631a      	str	r2, [r3, #48]	; 0x30
   260a6:	639a      	str	r2, [r3, #56]	; 0x38
   260a8:	641a      	str	r2, [r3, #64]	; 0x40
   260aa:	649a      	str	r2, [r3, #72]	; 0x48
   260ac:	651a      	str	r2, [r3, #80]	; 0x50
   260ae:	659a      	str	r2, [r3, #88]	; 0x58
   260b0:	661a      	str	r2, [r3, #96]	; 0x60
   260b2:	669a      	str	r2, [r3, #104]	; 0x68
   260b4:	671a      	str	r2, [r3, #112]	; 0x70
   260b6:	679a      	str	r2, [r3, #120]	; 0x78
   260b8:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   260bc:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   260c0:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   260c4:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   260c8:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   260cc:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   260d0:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   260d4:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   260d8:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   260dc:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   260e0:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   260e4:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   260e8:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   260ec:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   260f0:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   260f4:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   260f8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   260fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   26100:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   26104:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   26108:	4620      	mov	r0, r4
   2610a:	7035      	strb	r5, [r6, #0]
   2610c:	bd70      	pop	{r4, r5, r6, pc}
   2610e:	bf00      	nop
   26110:	200227a0 	.word	0x200227a0
   26114:	200227e0 	.word	0x200227e0
   26118:	200227e4 	.word	0x200227e4
   2611c:	20022820 	.word	0x20022820
   26120:	20028e8d 	.word	0x20028e8d

00026124 <nrf_mem_register>:
   26124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26128:	4b87      	ldr	r3, [pc, #540]	; (26348 <nrf_mem_register+0x224>)
   2612a:	b087      	sub	sp, #28
   2612c:	781b      	ldrb	r3, [r3, #0]
   2612e:	2b00      	cmp	r3, #0
   26130:	f000 808c 	beq.w	2624c <nrf_mem_register+0x128>
   26134:	b328      	cbz	r0, 26182 <nrf_mem_register+0x5e>
   26136:	b321      	cbz	r1, 26182 <nrf_mem_register+0x5e>
   26138:	780b      	ldrb	r3, [r1, #0]
   2613a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 26354 <nrf_mem_register+0x230>
   2613e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   26142:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   26146:	685b      	ldr	r3, [r3, #4]
   26148:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   2614c:	4463      	add	r3, ip
   2614e:	2b10      	cmp	r3, #16
   26150:	d811      	bhi.n	26176 <nrf_mem_register+0x52>
   26152:	f04f 0a00 	mov.w	sl, #0
   26156:	4689      	mov	r9, r1
   26158:	4b7c      	ldr	r3, [pc, #496]	; (2634c <nrf_mem_register+0x228>)
   2615a:	4f7d      	ldr	r7, [pc, #500]	; (26350 <nrf_mem_register+0x22c>)
   2615c:	681b      	ldr	r3, [r3, #0]
   2615e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   26162:	9300      	str	r3, [sp, #0]
   26164:	68b9      	ldr	r1, [r7, #8]
   26166:	b191      	cbz	r1, 2618e <nrf_mem_register+0x6a>
   26168:	f10a 0a01 	add.w	sl, sl, #1
   2616c:	f1ba 0f05 	cmp.w	sl, #5
   26170:	f107 070c 	add.w	r7, r7, #12
   26174:	d1f6      	bne.n	26164 <nrf_mem_register+0x40>
   26176:	f248 1b07 	movw	fp, #33031	; 0x8107
   2617a:	4658      	mov	r0, fp
   2617c:	b007      	add	sp, #28
   2617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26182:	f248 1b0e 	movw	fp, #33038	; 0x810e
   26186:	4658      	mov	r0, fp
   26188:	b007      	add	sp, #28
   2618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2618e:	f1bc 0f00 	cmp.w	ip, #0
   26192:	d061      	beq.n	26258 <nrf_mem_register+0x134>
   26194:	460d      	mov	r5, r1
   26196:	460c      	mov	r4, r1
   26198:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2619c:	eb0e 0b03 	add.w	fp, lr, r3
   261a0:	885a      	ldrh	r2, [r3, #2]
   261a2:	f833 6b04 	ldrh.w	r6, [r3], #4
   261a6:	4415      	add	r5, r2
   261a8:	459b      	cmp	fp, r3
   261aa:	fb02 4406 	mla	r4, r2, r6, r4
   261ae:	d1f7      	bne.n	261a0 <nrf_mem_register+0x7c>
   261b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   261b4:	42a3      	cmp	r3, r4
   261b6:	d3d7      	bcc.n	26168 <nrf_mem_register+0x44>
   261b8:	9b00      	ldr	r3, [sp, #0]
   261ba:	442b      	add	r3, r5
   261bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   261c0:	d2d2      	bcs.n	26168 <nrf_mem_register+0x44>
   261c2:	4c63      	ldr	r4, [pc, #396]	; (26350 <nrf_mem_register+0x22c>)
   261c4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   261c8:	0092      	lsls	r2, r2, #2
   261ca:	f8c0 a000 	str.w	sl, [r0]
   261ce:	18a0      	adds	r0, r4, r2
   261d0:	f844 9002 	str.w	r9, [r4, r2]
   261d4:	9a00      	ldr	r2, [sp, #0]
   261d6:	468b      	mov	fp, r1
   261d8:	e9c0 2501 	strd	r2, r5, [r0, #4]
   261dc:	f899 2001 	ldrb.w	r2, [r9, #1]
   261e0:	485a      	ldr	r0, [pc, #360]	; (2634c <nrf_mem_register+0x228>)
   261e2:	2a01      	cmp	r2, #1
   261e4:	6003      	str	r3, [r0, #0]
   261e6:	d0c8      	beq.n	2617a <nrf_mem_register+0x56>
   261e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   261ec:	2b00      	cmp	r3, #0
   261ee:	d0c4      	beq.n	2617a <nrf_mem_register+0x56>
   261f0:	2500      	movs	r5, #0
   261f2:	f8cd 9004 	str.w	r9, [sp, #4]
   261f6:	f8cd a00c 	str.w	sl, [sp, #12]
   261fa:	f8cd b014 	str.w	fp, [sp, #20]
   261fe:	9b01      	ldr	r3, [sp, #4]
   26200:	781f      	ldrb	r7, [r3, #0]
   26202:	691a      	ldr	r2, [r3, #16]
   26204:	013b      	lsls	r3, r7, #4
   26206:	eb03 0907 	add.w	r9, r3, r7
   2620a:	9300      	str	r3, [sp, #0]
   2620c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   26210:	6859      	ldr	r1, [r3, #4]
   26212:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   26216:	9102      	str	r1, [sp, #8]
   26218:	bb39      	cbnz	r1, 2626a <nrf_mem_register+0x146>
   2621a:	9a03      	ldr	r2, [sp, #12]
   2621c:	60dd      	str	r5, [r3, #12]
   2621e:	609a      	str	r2, [r3, #8]
   26220:	9b00      	ldr	r3, [sp, #0]
   26222:	443b      	add	r3, r7
   26224:	461f      	mov	r7, r3
   26226:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   2622a:	684b      	ldr	r3, [r1, #4]
   2622c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   26230:	3301      	adds	r3, #1
   26232:	4294      	cmp	r4, r2
   26234:	604b      	str	r3, [r1, #4]
   26236:	d912      	bls.n	2625e <nrf_mem_register+0x13a>
   26238:	9b01      	ldr	r3, [sp, #4]
   2623a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   2623e:	899b      	ldrh	r3, [r3, #12]
   26240:	3501      	adds	r5, #1
   26242:	429d      	cmp	r5, r3
   26244:	d3db      	bcc.n	261fe <nrf_mem_register+0xda>
   26246:	f8dd b014 	ldr.w	fp, [sp, #20]
   2624a:	e796      	b.n	2617a <nrf_mem_register+0x56>
   2624c:	f248 1b08 	movw	fp, #33032	; 0x8108
   26250:	4658      	mov	r0, fp
   26252:	b007      	add	sp, #28
   26254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26258:	9b00      	ldr	r3, [sp, #0]
   2625a:	4665      	mov	r5, ip
   2625c:	e7ae      	b.n	261bc <nrf_mem_register+0x98>
   2625e:	9b01      	ldr	r3, [sp, #4]
   26260:	3501      	adds	r5, #1
   26262:	899b      	ldrh	r3, [r3, #12]
   26264:	42ab      	cmp	r3, r5
   26266:	d8ca      	bhi.n	261fe <nrf_mem_register+0xda>
   26268:	e7ed      	b.n	26246 <nrf_mem_register+0x122>
   2626a:	2600      	movs	r6, #0
   2626c:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   26270:	9504      	str	r5, [sp, #16]
   26272:	eb06 000a 	add.w	r0, r6, sl
   26276:	eb09 0206 	add.w	r2, r9, r6
   2627a:	3201      	adds	r2, #1
   2627c:	3001      	adds	r0, #1
   2627e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   26282:	0840      	lsrs	r0, r0, #1
   26284:	4d32      	ldr	r5, [pc, #200]	; (26350 <nrf_mem_register+0x22c>)
   26286:	eb09 0100 	add.w	r1, r9, r0
   2628a:	eb09 030a 	add.w	r3, r9, sl
   2628e:	3101      	adds	r1, #1
   26290:	3301      	adds	r3, #1
   26292:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   26296:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   2629a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   2629e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   262a2:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   262a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   262aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   262ae:	f8db b010 	ldr.w	fp, [fp, #16]
   262b2:	6852      	ldr	r2, [r2, #4]
   262b4:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   262b8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   262bc:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   262c0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   262c4:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   262c8:	f8de e010 	ldr.w	lr, [lr, #16]
   262cc:	6849      	ldr	r1, [r1, #4]
   262ce:	f8dc c010 	ldr.w	ip, [ip, #16]
   262d2:	685b      	ldr	r3, [r3, #4]
   262d4:	4294      	cmp	r4, r2
   262d6:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   262da:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   262de:	d92d      	bls.n	2633c <nrf_mem_register+0x218>
   262e0:	429c      	cmp	r4, r3
   262e2:	d22d      	bcs.n	26340 <nrf_mem_register+0x21c>
   262e4:	428c      	cmp	r4, r1
   262e6:	d924      	bls.n	26332 <nrf_mem_register+0x20e>
   262e8:	1c46      	adds	r6, r0, #1
   262ea:	45b2      	cmp	sl, r6
   262ec:	d2c1      	bcs.n	26272 <nrf_mem_register+0x14e>
   262ee:	2610      	movs	r6, #16
   262f0:	9d04      	ldr	r5, [sp, #16]
   262f2:	9a02      	ldr	r2, [sp, #8]
   262f4:	42b2      	cmp	r2, r6
   262f6:	d911      	bls.n	2631c <nrf_mem_register+0x1f8>
   262f8:	9b00      	ldr	r3, [sp, #0]
   262fa:	443b      	add	r3, r7
   262fc:	441a      	add	r2, r3
   262fe:	4433      	add	r3, r6
   26300:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   26304:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   26308:	2208      	movs	r2, #8
   2630a:	4651      	mov	r1, sl
   2630c:	eb0a 0002 	add.w	r0, sl, r2
   26310:	f1aa 0a08 	sub.w	sl, sl, #8
   26314:	f00d fa54 	bl	337c0 <memcpy>
   26318:	45d1      	cmp	r9, sl
   2631a:	d1f5      	bne.n	26308 <nrf_mem_register+0x1e4>
   2631c:	9b00      	ldr	r3, [sp, #0]
   2631e:	9903      	ldr	r1, [sp, #12]
   26320:	443b      	add	r3, r7
   26322:	4433      	add	r3, r6
   26324:	3301      	adds	r3, #1
   26326:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   2632a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   2632e:	6055      	str	r5, [r2, #4]
   26330:	e776      	b.n	26220 <nrf_mem_register+0xfc>
   26332:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   26336:	4556      	cmp	r6, sl
   26338:	d99b      	bls.n	26272 <nrf_mem_register+0x14e>
   2633a:	e7d8      	b.n	262ee <nrf_mem_register+0x1ca>
   2633c:	9d04      	ldr	r5, [sp, #16]
   2633e:	e7d8      	b.n	262f2 <nrf_mem_register+0x1ce>
   26340:	9d04      	ldr	r5, [sp, #16]
   26342:	f10a 0601 	add.w	r6, sl, #1
   26346:	e7d4      	b.n	262f2 <nrf_mem_register+0x1ce>
   26348:	20028e8d 	.word	0x20028e8d
   2634c:	200227e0 	.word	0x200227e0
   26350:	200227e4 	.word	0x200227e4
   26354:	20022820 	.word	0x20022820

00026358 <nrf_malloc>:
   26358:	4b03      	ldr	r3, [pc, #12]	; (26368 <nrf_malloc+0x10>)
   2635a:	781b      	ldrb	r3, [r3, #0]
   2635c:	b10b      	cbz	r3, 26362 <nrf_malloc+0xa>
   2635e:	f7ff bd8d 	b.w	25e7c <mem_alloc.constprop.4>
   26362:	4618      	mov	r0, r3
   26364:	4770      	bx	lr
   26366:	bf00      	nop
   26368:	20028e8d 	.word	0x20028e8d

0002636c <nrf_free>:
   2636c:	4b04      	ldr	r3, [pc, #16]	; (26380 <nrf_free+0x14>)
   2636e:	781b      	ldrb	r3, [r3, #0]
   26370:	b123      	cbz	r3, 2637c <nrf_free+0x10>
   26372:	b118      	cbz	r0, 2637c <nrf_free+0x10>
   26374:	4601      	mov	r1, r0
   26376:	2000      	movs	r0, #0
   26378:	f7ff bc30 	b.w	25bdc <mem_free>
   2637c:	4770      	bx	lr
   2637e:	bf00      	nop
   26380:	20028e8d 	.word	0x20028e8d

00026384 <nrf_shared_malloc>:
   26384:	4b03      	ldr	r3, [pc, #12]	; (26394 <nrf_shared_malloc+0x10>)
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	b10b      	cbz	r3, 2638e <nrf_shared_malloc+0xa>
   2638a:	f7ff bc93 	b.w	25cb4 <mem_alloc.constprop.5>
   2638e:	4618      	mov	r0, r3
   26390:	4770      	bx	lr
   26392:	bf00      	nop
   26394:	20028e8d 	.word	0x20028e8d

00026398 <nrf_shared_free>:
   26398:	4b04      	ldr	r3, [pc, #16]	; (263ac <nrf_shared_free+0x14>)
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	b123      	cbz	r3, 263a8 <nrf_shared_free+0x10>
   2639e:	b118      	cbz	r0, 263a8 <nrf_shared_free+0x10>
   263a0:	4601      	mov	r1, r0
   263a2:	2001      	movs	r0, #1
   263a4:	f7ff bc1a 	b.w	25bdc <mem_free>
   263a8:	4770      	bx	lr
   263aa:	bf00      	nop
   263ac:	20028e8d 	.word	0x20028e8d

000263b0 <rpc_dfu_event_handler>:
   263b0:	b508      	push	{r3, lr}
   263b2:	4a08      	ldr	r2, [pc, #32]	; (263d4 <rpc_dfu_event_handler+0x24>)
   263b4:	68c1      	ldr	r1, [r0, #12]
   263b6:	8812      	ldrh	r2, [r2, #0]
   263b8:	4603      	mov	r3, r0
   263ba:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   263be:	d005      	beq.n	263cc <rpc_dfu_event_handler+0x1c>
   263c0:	6800      	ldr	r0, [r0, #0]
   263c2:	b110      	cbz	r0, 263ca <rpc_dfu_event_handler+0x1a>
   263c4:	f7fd fa60 	bl	23888 <rpc_dfu_client_data_free>
   263c8:	2000      	movs	r0, #0
   263ca:	bd08      	pop	{r3, pc}
   263cc:	4a02      	ldr	r2, [pc, #8]	; (263d8 <rpc_dfu_event_handler+0x28>)
   263ce:	2001      	movs	r0, #1
   263d0:	6013      	str	r3, [r2, #0]
   263d2:	bd08      	pop	{r3, pc}
   263d4:	20027464 	.word	0x20027464
   263d8:	2002293c 	.word	0x2002293c

000263dc <mfu_interface_init>:
   263dc:	2300      	movs	r3, #0
   263de:	b510      	push	{r4, lr}
   263e0:	4808      	ldr	r0, [pc, #32]	; (26404 <mfu_interface_init+0x28>)
   263e2:	4909      	ldr	r1, [pc, #36]	; (26408 <mfu_interface_init+0x2c>)
   263e4:	4a09      	ldr	r2, [pc, #36]	; (2640c <mfu_interface_init+0x30>)
   263e6:	4c0a      	ldr	r4, [pc, #40]	; (26410 <mfu_interface_init+0x34>)
   263e8:	8003      	strh	r3, [r0, #0]
   263ea:	600b      	str	r3, [r1, #0]
   263ec:	6013      	str	r3, [r2, #0]
   263ee:	6023      	str	r3, [r4, #0]
   263f0:	f7fd fa14 	bl	2381c <rpc_dfu_client_init>
   263f4:	b910      	cbnz	r0, 263fc <mfu_interface_init+0x20>
   263f6:	2301      	movs	r3, #1
   263f8:	6023      	str	r3, [r4, #0]
   263fa:	bd10      	pop	{r4, pc}
   263fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26400:	bd10      	pop	{r4, pc}
   26402:	bf00      	nop
   26404:	20027464 	.word	0x20027464
   26408:	2002293c 	.word	0x2002293c
   2640c:	20022938 	.word	0x20022938
   26410:	20022930 	.word	0x20022930

00026414 <mfu_interface_open>:
   26414:	b508      	push	{r3, lr}
   26416:	4b07      	ldr	r3, [pc, #28]	; (26434 <mfu_interface_open+0x20>)
   26418:	681a      	ldr	r2, [r3, #0]
   2641a:	2a01      	cmp	r2, #1
   2641c:	d103      	bne.n	26426 <mfu_interface_open+0x12>
   2641e:	2202      	movs	r2, #2
   26420:	601a      	str	r2, [r3, #0]
   26422:	4805      	ldr	r0, [pc, #20]	; (26438 <mfu_interface_open+0x24>)
   26424:	bd08      	pop	{r3, pc}
   26426:	2001      	movs	r0, #1
   26428:	f7f6 fd56 	bl	1ced8 <bsd_os_errno_set>
   2642c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26430:	bd08      	pop	{r3, pc}
   26432:	bf00      	nop
   26434:	20022930 	.word	0x20022930
   26438:	49765432 	.word	0x49765432

0002643c <mfu_interface_close>:
   2643c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2643e:	4c32      	ldr	r4, [pc, #200]	; (26508 <mfu_interface_close+0xcc>)
   26440:	b083      	sub	sp, #12
   26442:	6823      	ldr	r3, [r4, #0]
   26444:	1e9a      	subs	r2, r3, #2
   26446:	2a01      	cmp	r2, #1
   26448:	d857      	bhi.n	264fa <mfu_interface_close+0xbe>
   2644a:	2b03      	cmp	r3, #3
   2644c:	d004      	beq.n	26458 <mfu_interface_close+0x1c>
   2644e:	2301      	movs	r3, #1
   26450:	2000      	movs	r0, #0
   26452:	6023      	str	r3, [r4, #0]
   26454:	b003      	add	sp, #12
   26456:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26458:	2100      	movs	r1, #0
   2645a:	4668      	mov	r0, sp
   2645c:	f7fd f9e4 	bl	23828 <rpc_dfu_client_request_alloc>
   26460:	4603      	mov	r3, r0
   26462:	2800      	cmp	r0, #0
   26464:	d13d      	bne.n	264e2 <mfu_interface_close+0xa6>
   26466:	2104      	movs	r1, #4
   26468:	4e28      	ldr	r6, [pc, #160]	; (2650c <mfu_interface_close+0xd0>)
   2646a:	9800      	ldr	r0, [sp, #0]
   2646c:	8832      	ldrh	r2, [r6, #0]
   2646e:	7201      	strb	r1, [r0, #8]
   26470:	3201      	adds	r2, #1
   26472:	b292      	uxth	r2, r2
   26474:	0411      	lsls	r1, r2, #16
   26476:	f041 0106 	orr.w	r1, r1, #6
   2647a:	4d25      	ldr	r5, [pc, #148]	; (26510 <mfu_interface_close+0xd4>)
   2647c:	60c1      	str	r1, [r0, #12]
   2647e:	7103      	strb	r3, [r0, #4]
   26480:	7143      	strb	r3, [r0, #5]
   26482:	7183      	strb	r3, [r0, #6]
   26484:	71c3      	strb	r3, [r0, #7]
   26486:	7243      	strb	r3, [r0, #9]
   26488:	7283      	strb	r3, [r0, #10]
   2648a:	72c3      	strb	r3, [r0, #11]
   2648c:	2106      	movs	r1, #6
   2648e:	8032      	strh	r2, [r6, #0]
   26490:	602b      	str	r3, [r5, #0]
   26492:	f7fd f9dd 	bl	23850 <rpc_dfu_client_request_send>
   26496:	b9d8      	cbnz	r0, 264d0 <mfu_interface_close+0x94>
   26498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2649c:	ae02      	add	r6, sp, #8
   2649e:	4627      	mov	r7, r4
   264a0:	f846 3d04 	str.w	r3, [r6, #-4]!
   264a4:	e004      	b.n	264b0 <mfu_interface_close+0x74>
   264a6:	4631      	mov	r1, r6
   264a8:	4638      	mov	r0, r7
   264aa:	f7f6 fc6b 	bl	1cd84 <bsd_os_timedwait>
   264ae:	b9f0      	cbnz	r0, 264ee <mfu_interface_close+0xb2>
   264b0:	6828      	ldr	r0, [r5, #0]
   264b2:	2800      	cmp	r0, #0
   264b4:	d0f7      	beq.n	264a6 <mfu_interface_close+0x6a>
   264b6:	6905      	ldr	r5, [r0, #16]
   264b8:	f7fd f9de 	bl	23878 <rpc_dfu_client_message_free>
   264bc:	2d00      	cmp	r5, #0
   264be:	d0c6      	beq.n	2644e <mfu_interface_close+0x12>
   264c0:	4b14      	ldr	r3, [pc, #80]	; (26514 <mfu_interface_close+0xd8>)
   264c2:	2008      	movs	r0, #8
   264c4:	601d      	str	r5, [r3, #0]
   264c6:	f7f6 fd07 	bl	1ced8 <bsd_os_errno_set>
   264ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   264ce:	e7c1      	b.n	26454 <mfu_interface_close+0x18>
   264d0:	9800      	ldr	r0, [sp, #0]
   264d2:	6803      	ldr	r3, [r0, #0]
   264d4:	b11b      	cbz	r3, 264de <mfu_interface_close+0xa2>
   264d6:	4618      	mov	r0, r3
   264d8:	f7fd f9d6 	bl	23888 <rpc_dfu_client_data_free>
   264dc:	9800      	ldr	r0, [sp, #0]
   264de:	f7fd f9cb 	bl	23878 <rpc_dfu_client_message_free>
   264e2:	200c      	movs	r0, #12
   264e4:	f7f6 fcf8 	bl	1ced8 <bsd_os_errno_set>
   264e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   264ec:	e7b2      	b.n	26454 <mfu_interface_close+0x18>
   264ee:	203c      	movs	r0, #60	; 0x3c
   264f0:	f7f6 fcf2 	bl	1ced8 <bsd_os_errno_set>
   264f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   264f8:	e7ac      	b.n	26454 <mfu_interface_close+0x18>
   264fa:	2001      	movs	r0, #1
   264fc:	f7f6 fcec 	bl	1ced8 <bsd_os_errno_set>
   26500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26504:	e7a6      	b.n	26454 <mfu_interface_close+0x18>
   26506:	bf00      	nop
   26508:	20022930 	.word	0x20022930
   2650c:	20027464 	.word	0x20027464
   26510:	2002293c 	.word	0x2002293c
   26514:	20022934 	.word	0x20022934

00026518 <mfu_interface_sendto>:
   26518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2651c:	4e64      	ldr	r6, [pc, #400]	; (266b0 <mfu_interface_sendto+0x198>)
   2651e:	460f      	mov	r7, r1
   26520:	6831      	ldr	r1, [r6, #0]
   26522:	4615      	mov	r5, r2
   26524:	1e8a      	subs	r2, r1, #2
   26526:	2a01      	cmp	r2, #1
   26528:	b082      	sub	sp, #8
   2652a:	f200 80b4 	bhi.w	26696 <mfu_interface_sendto+0x17e>
   2652e:	2f00      	cmp	r7, #0
   26530:	f000 80a5 	beq.w	2667e <mfu_interface_sendto+0x166>
   26534:	2d00      	cmp	r5, #0
   26536:	f000 80a2 	beq.w	2667e <mfu_interface_sendto+0x166>
   2653a:	2b00      	cmp	r3, #0
   2653c:	f040 80b1 	bne.w	266a2 <mfu_interface_sendto+0x18a>
   26540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26542:	2b00      	cmp	r3, #0
   26544:	f040 80a1 	bne.w	2668a <mfu_interface_sendto+0x172>
   26548:	2902      	cmp	r1, #2
   2654a:	d04f      	beq.n	265ec <mfu_interface_sendto+0xd4>
   2654c:	46e8      	mov	r8, sp
   2654e:	4640      	mov	r0, r8
   26550:	4629      	mov	r1, r5
   26552:	f7fd f969 	bl	23828 <rpc_dfu_client_request_alloc>
   26556:	4606      	mov	r6, r0
   26558:	b140      	cbz	r0, 2656c <mfu_interface_sendto+0x54>
   2655a:	200c      	movs	r0, #12
   2655c:	f7f6 fcbc 	bl	1ced8 <bsd_os_errno_set>
   26560:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26564:	4628      	mov	r0, r5
   26566:	b002      	add	sp, #8
   26568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2656c:	9b00      	ldr	r3, [sp, #0]
   2656e:	4639      	mov	r1, r7
   26570:	6818      	ldr	r0, [r3, #0]
   26572:	462a      	mov	r2, r5
   26574:	f00d f924 	bl	337c0 <memcpy>
   26578:	2104      	movs	r1, #4
   2657a:	4c4e      	ldr	r4, [pc, #312]	; (266b4 <mfu_interface_sendto+0x19c>)
   2657c:	9800      	ldr	r0, [sp, #0]
   2657e:	8823      	ldrh	r3, [r4, #0]
   26580:	6045      	str	r5, [r0, #4]
   26582:	3301      	adds	r3, #1
   26584:	b29b      	uxth	r3, r3
   26586:	041a      	lsls	r2, r3, #16
   26588:	8023      	strh	r3, [r4, #0]
   2658a:	430a      	orrs	r2, r1
   2658c:	4c4a      	ldr	r4, [pc, #296]	; (266b8 <mfu_interface_sendto+0x1a0>)
   2658e:	60c2      	str	r2, [r0, #12]
   26590:	7246      	strb	r6, [r0, #9]
   26592:	7286      	strb	r6, [r0, #10]
   26594:	72c6      	strb	r6, [r0, #11]
   26596:	7201      	strb	r1, [r0, #8]
   26598:	6026      	str	r6, [r4, #0]
   2659a:	f7fd f959 	bl	23850 <rpc_dfu_client_request_send>
   2659e:	2800      	cmp	r0, #0
   265a0:	d163      	bne.n	2666a <mfu_interface_sendto+0x152>
   265a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   265a6:	ae02      	add	r6, sp, #8
   265a8:	4f41      	ldr	r7, [pc, #260]	; (266b0 <mfu_interface_sendto+0x198>)
   265aa:	f846 3d04 	str.w	r3, [r6, #-4]!
   265ae:	e004      	b.n	265ba <mfu_interface_sendto+0xa2>
   265b0:	4631      	mov	r1, r6
   265b2:	4638      	mov	r0, r7
   265b4:	f7f6 fbe6 	bl	1cd84 <bsd_os_timedwait>
   265b8:	b978      	cbnz	r0, 265da <mfu_interface_sendto+0xc2>
   265ba:	6820      	ldr	r0, [r4, #0]
   265bc:	2800      	cmp	r0, #0
   265be:	d0f7      	beq.n	265b0 <mfu_interface_sendto+0x98>
   265c0:	6904      	ldr	r4, [r0, #16]
   265c2:	f7fd f959 	bl	23878 <rpc_dfu_client_message_free>
   265c6:	2c00      	cmp	r4, #0
   265c8:	d0cc      	beq.n	26564 <mfu_interface_sendto+0x4c>
   265ca:	4b3c      	ldr	r3, [pc, #240]	; (266bc <mfu_interface_sendto+0x1a4>)
   265cc:	2008      	movs	r0, #8
   265ce:	601c      	str	r4, [r3, #0]
   265d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   265d4:	f7f6 fc80 	bl	1ced8 <bsd_os_errno_set>
   265d8:	e7c4      	b.n	26564 <mfu_interface_sendto+0x4c>
   265da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   265de:	203c      	movs	r0, #60	; 0x3c
   265e0:	f7f6 fc7a 	bl	1ced8 <bsd_os_errno_set>
   265e4:	4628      	mov	r0, r5
   265e6:	b002      	add	sp, #8
   265e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   265ec:	46e8      	mov	r8, sp
   265ee:	4619      	mov	r1, r3
   265f0:	4640      	mov	r0, r8
   265f2:	f7fd f919 	bl	23828 <rpc_dfu_client_request_alloc>
   265f6:	4602      	mov	r2, r0
   265f8:	2800      	cmp	r0, #0
   265fa:	d1ae      	bne.n	2655a <mfu_interface_sendto+0x42>
   265fc:	f04f 0c08 	mov.w	ip, #8
   26600:	492c      	ldr	r1, [pc, #176]	; (266b4 <mfu_interface_sendto+0x19c>)
   26602:	482f      	ldr	r0, [pc, #188]	; (266c0 <mfu_interface_sendto+0x1a8>)
   26604:	880b      	ldrh	r3, [r1, #0]
   26606:	6804      	ldr	r4, [r0, #0]
   26608:	3301      	adds	r3, #1
   2660a:	9800      	ldr	r0, [sp, #0]
   2660c:	b29b      	uxth	r3, r3
   2660e:	800b      	strh	r3, [r1, #0]
   26610:	041b      	lsls	r3, r3, #16
   26612:	f043 0303 	orr.w	r3, r3, #3
   26616:	6104      	str	r4, [r0, #16]
   26618:	4c27      	ldr	r4, [pc, #156]	; (266b8 <mfu_interface_sendto+0x1a0>)
   2661a:	60c3      	str	r3, [r0, #12]
   2661c:	7102      	strb	r2, [r0, #4]
   2661e:	7142      	strb	r2, [r0, #5]
   26620:	7182      	strb	r2, [r0, #6]
   26622:	71c2      	strb	r2, [r0, #7]
   26624:	7242      	strb	r2, [r0, #9]
   26626:	7282      	strb	r2, [r0, #10]
   26628:	72c2      	strb	r2, [r0, #11]
   2662a:	f880 c008 	strb.w	ip, [r0, #8]
   2662e:	2103      	movs	r1, #3
   26630:	6022      	str	r2, [r4, #0]
   26632:	f7fd f90d 	bl	23850 <rpc_dfu_client_request_send>
   26636:	b9c0      	cbnz	r0, 2666a <mfu_interface_sendto+0x152>
   26638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2663c:	f10d 0908 	add.w	r9, sp, #8
   26640:	f849 3d04 	str.w	r3, [r9, #-4]!
   26644:	46b2      	mov	sl, r6
   26646:	e005      	b.n	26654 <mfu_interface_sendto+0x13c>
   26648:	4649      	mov	r1, r9
   2664a:	4650      	mov	r0, sl
   2664c:	f7f6 fb9a 	bl	1cd84 <bsd_os_timedwait>
   26650:	2800      	cmp	r0, #0
   26652:	d1c2      	bne.n	265da <mfu_interface_sendto+0xc2>
   26654:	6820      	ldr	r0, [r4, #0]
   26656:	2800      	cmp	r0, #0
   26658:	d0f6      	beq.n	26648 <mfu_interface_sendto+0x130>
   2665a:	6904      	ldr	r4, [r0, #16]
   2665c:	f7fd f90c 	bl	23878 <rpc_dfu_client_message_free>
   26660:	2c00      	cmp	r4, #0
   26662:	d1b2      	bne.n	265ca <mfu_interface_sendto+0xb2>
   26664:	2303      	movs	r3, #3
   26666:	6033      	str	r3, [r6, #0]
   26668:	e771      	b.n	2654e <mfu_interface_sendto+0x36>
   2666a:	9800      	ldr	r0, [sp, #0]
   2666c:	6803      	ldr	r3, [r0, #0]
   2666e:	b11b      	cbz	r3, 26678 <mfu_interface_sendto+0x160>
   26670:	4618      	mov	r0, r3
   26672:	f7fd f909 	bl	23888 <rpc_dfu_client_data_free>
   26676:	9800      	ldr	r0, [sp, #0]
   26678:	f7fd f8fe 	bl	23878 <rpc_dfu_client_message_free>
   2667c:	e76d      	b.n	2655a <mfu_interface_sendto+0x42>
   2667e:	2016      	movs	r0, #22
   26680:	f7f6 fc2a 	bl	1ced8 <bsd_os_errno_set>
   26684:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26688:	e76c      	b.n	26564 <mfu_interface_sendto+0x4c>
   2668a:	2038      	movs	r0, #56	; 0x38
   2668c:	f7f6 fc24 	bl	1ced8 <bsd_os_errno_set>
   26690:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26694:	e766      	b.n	26564 <mfu_interface_sendto+0x4c>
   26696:	2001      	movs	r0, #1
   26698:	f7f6 fc1e 	bl	1ced8 <bsd_os_errno_set>
   2669c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   266a0:	e760      	b.n	26564 <mfu_interface_sendto+0x4c>
   266a2:	202d      	movs	r0, #45	; 0x2d
   266a4:	f7f6 fc18 	bl	1ced8 <bsd_os_errno_set>
   266a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   266ac:	e75a      	b.n	26564 <mfu_interface_sendto+0x4c>
   266ae:	bf00      	nop
   266b0:	20022930 	.word	0x20022930
   266b4:	20027464 	.word	0x20027464
   266b8:	2002293c 	.word	0x2002293c
   266bc:	20022934 	.word	0x20022934
   266c0:	20022938 	.word	0x20022938

000266c4 <mfu_interface_setopt>:
   266c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   266c6:	4846      	ldr	r0, [pc, #280]	; (267e0 <mfu_interface_setopt+0x11c>)
   266c8:	b083      	sub	sp, #12
   266ca:	6800      	ldr	r0, [r0, #0]
   266cc:	3802      	subs	r0, #2
   266ce:	2801      	cmp	r0, #1
   266d0:	d877      	bhi.n	267c2 <mfu_interface_setopt+0xfe>
   266d2:	f240 2003 	movw	r0, #515	; 0x203
   266d6:	4281      	cmp	r1, r0
   266d8:	d16d      	bne.n	267b6 <mfu_interface_setopt+0xf2>
   266da:	3a04      	subs	r2, #4
   266dc:	2a03      	cmp	r2, #3
   266de:	d85c      	bhi.n	2679a <mfu_interface_setopt+0xd6>
   266e0:	e8df f002 	tbb	[pc, r2]
   266e4:	514e024b 	.word	0x514e024b
   266e8:	2407      	movs	r4, #7
   266ea:	4625      	mov	r5, r4
   266ec:	2100      	movs	r1, #0
   266ee:	4668      	mov	r0, sp
   266f0:	f7fd f89a 	bl	23828 <rpc_dfu_client_request_alloc>
   266f4:	4603      	mov	r3, r0
   266f6:	2800      	cmp	r0, #0
   266f8:	d138      	bne.n	2676c <mfu_interface_setopt+0xa8>
   266fa:	2704      	movs	r7, #4
   266fc:	4e39      	ldr	r6, [pc, #228]	; (267e4 <mfu_interface_setopt+0x120>)
   266fe:	9800      	ldr	r0, [sp, #0]
   26700:	8832      	ldrh	r2, [r6, #0]
   26702:	4629      	mov	r1, r5
   26704:	3201      	adds	r2, #1
   26706:	b292      	uxth	r2, r2
   26708:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   2670c:	4c36      	ldr	r4, [pc, #216]	; (267e8 <mfu_interface_setopt+0x124>)
   2670e:	60c5      	str	r5, [r0, #12]
   26710:	7103      	strb	r3, [r0, #4]
   26712:	7143      	strb	r3, [r0, #5]
   26714:	7183      	strb	r3, [r0, #6]
   26716:	71c3      	strb	r3, [r0, #7]
   26718:	7243      	strb	r3, [r0, #9]
   2671a:	7283      	strb	r3, [r0, #10]
   2671c:	72c3      	strb	r3, [r0, #11]
   2671e:	7207      	strb	r7, [r0, #8]
   26720:	8032      	strh	r2, [r6, #0]
   26722:	6023      	str	r3, [r4, #0]
   26724:	f7fd f894 	bl	23850 <rpc_dfu_client_request_send>
   26728:	b9b8      	cbnz	r0, 2675a <mfu_interface_setopt+0x96>
   2672a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2672e:	ad02      	add	r5, sp, #8
   26730:	4e2b      	ldr	r6, [pc, #172]	; (267e0 <mfu_interface_setopt+0x11c>)
   26732:	f845 3d04 	str.w	r3, [r5, #-4]!
   26736:	e005      	b.n	26744 <mfu_interface_setopt+0x80>
   26738:	4629      	mov	r1, r5
   2673a:	4630      	mov	r0, r6
   2673c:	f7f6 fb22 	bl	1cd84 <bsd_os_timedwait>
   26740:	2800      	cmp	r0, #0
   26742:	d131      	bne.n	267a8 <mfu_interface_setopt+0xe4>
   26744:	6820      	ldr	r0, [r4, #0]
   26746:	2800      	cmp	r0, #0
   26748:	d0f6      	beq.n	26738 <mfu_interface_setopt+0x74>
   2674a:	6904      	ldr	r4, [r0, #16]
   2674c:	f7fd f894 	bl	23878 <rpc_dfu_client_message_free>
   26750:	2c00      	cmp	r4, #0
   26752:	d13c      	bne.n	267ce <mfu_interface_setopt+0x10a>
   26754:	4620      	mov	r0, r4
   26756:	b003      	add	sp, #12
   26758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2675a:	9800      	ldr	r0, [sp, #0]
   2675c:	6803      	ldr	r3, [r0, #0]
   2675e:	b11b      	cbz	r3, 26768 <mfu_interface_setopt+0xa4>
   26760:	4618      	mov	r0, r3
   26762:	f7fd f891 	bl	23888 <rpc_dfu_client_data_free>
   26766:	9800      	ldr	r0, [sp, #0]
   26768:	f7fd f886 	bl	23878 <rpc_dfu_client_message_free>
   2676c:	200c      	movs	r0, #12
   2676e:	f7f6 fbb3 	bl	1ced8 <bsd_os_errno_set>
   26772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26776:	b003      	add	sp, #12
   26778:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2677a:	2405      	movs	r4, #5
   2677c:	4625      	mov	r5, r4
   2677e:	e7b5      	b.n	266ec <mfu_interface_setopt+0x28>
   26780:	2408      	movs	r4, #8
   26782:	4625      	mov	r5, r4
   26784:	e7b2      	b.n	266ec <mfu_interface_setopt+0x28>
   26786:	b1b3      	cbz	r3, 267b6 <mfu_interface_setopt+0xf2>
   26788:	9a08      	ldr	r2, [sp, #32]
   2678a:	2a04      	cmp	r2, #4
   2678c:	d113      	bne.n	267b6 <mfu_interface_setopt+0xf2>
   2678e:	2000      	movs	r0, #0
   26790:	681a      	ldr	r2, [r3, #0]
   26792:	4b16      	ldr	r3, [pc, #88]	; (267ec <mfu_interface_setopt+0x128>)
   26794:	601a      	str	r2, [r3, #0]
   26796:	b003      	add	sp, #12
   26798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2679a:	202a      	movs	r0, #42	; 0x2a
   2679c:	f7f6 fb9c 	bl	1ced8 <bsd_os_errno_set>
   267a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267a4:	b003      	add	sp, #12
   267a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267a8:	203c      	movs	r0, #60	; 0x3c
   267aa:	f7f6 fb95 	bl	1ced8 <bsd_os_errno_set>
   267ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267b2:	b003      	add	sp, #12
   267b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267b6:	2016      	movs	r0, #22
   267b8:	f7f6 fb8e 	bl	1ced8 <bsd_os_errno_set>
   267bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267c0:	e7c9      	b.n	26756 <mfu_interface_setopt+0x92>
   267c2:	2001      	movs	r0, #1
   267c4:	f7f6 fb88 	bl	1ced8 <bsd_os_errno_set>
   267c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267cc:	e7c3      	b.n	26756 <mfu_interface_setopt+0x92>
   267ce:	4b08      	ldr	r3, [pc, #32]	; (267f0 <mfu_interface_setopt+0x12c>)
   267d0:	2008      	movs	r0, #8
   267d2:	601c      	str	r4, [r3, #0]
   267d4:	f7f6 fb80 	bl	1ced8 <bsd_os_errno_set>
   267d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267dc:	e7bb      	b.n	26756 <mfu_interface_setopt+0x92>
   267de:	bf00      	nop
   267e0:	20022930 	.word	0x20022930
   267e4:	20027464 	.word	0x20027464
   267e8:	2002293c 	.word	0x2002293c
   267ec:	20022938 	.word	0x20022938
   267f0:	20022934 	.word	0x20022934

000267f4 <mfu_interface_getopt>:
   267f4:	f240 2003 	movw	r0, #515	; 0x203
   267f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267fc:	4281      	cmp	r1, r0
   267fe:	b082      	sub	sp, #8
   26800:	9e08      	ldr	r6, [sp, #32]
   26802:	f040 80ae 	bne.w	26962 <mfu_interface_getopt+0x16e>
   26806:	461d      	mov	r5, r3
   26808:	2b00      	cmp	r3, #0
   2680a:	f000 80aa 	beq.w	26962 <mfu_interface_getopt+0x16e>
   2680e:	2e00      	cmp	r6, #0
   26810:	f000 80a7 	beq.w	26962 <mfu_interface_getopt+0x16e>
   26814:	4b5e      	ldr	r3, [pc, #376]	; (26990 <mfu_interface_getopt+0x19c>)
   26816:	681b      	ldr	r3, [r3, #0]
   26818:	3b02      	subs	r3, #2
   2681a:	2b01      	cmp	r3, #1
   2681c:	f200 80a7 	bhi.w	2696e <mfu_interface_getopt+0x17a>
   26820:	3a01      	subs	r2, #1
   26822:	2a13      	cmp	r2, #19
   26824:	d879      	bhi.n	2691a <mfu_interface_getopt+0x126>
   26826:	e8df f002 	tbb	[pc, r2]
   2682a:	5f17      	.short	0x5f17
   2682c:	78787878 	.word	0x78787878
   26830:	78787872 	.word	0x78787872
   26834:	78787878 	.word	0x78787878
   26838:	78787878 	.word	0x78787878
   2683c:	0a78      	.short	0x0a78
   2683e:	6833      	ldr	r3, [r6, #0]
   26840:	2b04      	cmp	r3, #4
   26842:	f040 808e 	bne.w	26962 <mfu_interface_getopt+0x16e>
   26846:	2200      	movs	r2, #0
   26848:	4610      	mov	r0, r2
   2684a:	4b52      	ldr	r3, [pc, #328]	; (26994 <mfu_interface_getopt+0x1a0>)
   2684c:	6819      	ldr	r1, [r3, #0]
   2684e:	601a      	str	r2, [r3, #0]
   26850:	6029      	str	r1, [r5, #0]
   26852:	b002      	add	sp, #8
   26854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26858:	6833      	ldr	r3, [r6, #0]
   2685a:	2b24      	cmp	r3, #36	; 0x24
   2685c:	f040 8081 	bne.w	26962 <mfu_interface_getopt+0x16e>
   26860:	2401      	movs	r4, #1
   26862:	46a0      	mov	r8, r4
   26864:	2100      	movs	r1, #0
   26866:	4668      	mov	r0, sp
   26868:	f7fc ffde 	bl	23828 <rpc_dfu_client_request_alloc>
   2686c:	2800      	cmp	r0, #0
   2686e:	d146      	bne.n	268fe <mfu_interface_getopt+0x10a>
   26870:	4949      	ldr	r1, [pc, #292]	; (26998 <mfu_interface_getopt+0x1a4>)
   26872:	9b00      	ldr	r3, [sp, #0]
   26874:	880a      	ldrh	r2, [r1, #0]
   26876:	f1b8 0f03 	cmp.w	r8, #3
   2687a:	f102 0201 	add.w	r2, r2, #1
   2687e:	b292      	uxth	r2, r2
   26880:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   26884:	7118      	strb	r0, [r3, #4]
   26886:	800a      	strh	r2, [r1, #0]
   26888:	60dc      	str	r4, [r3, #12]
   2688a:	7158      	strb	r0, [r3, #5]
   2688c:	7198      	strb	r0, [r3, #6]
   2688e:	71d8      	strb	r0, [r3, #7]
   26890:	d04b      	beq.n	2692a <mfu_interface_getopt+0x136>
   26892:	2104      	movs	r1, #4
   26894:	2200      	movs	r2, #0
   26896:	4f41      	ldr	r7, [pc, #260]	; (2699c <mfu_interface_getopt+0x1a8>)
   26898:	6099      	str	r1, [r3, #8]
   2689a:	4618      	mov	r0, r3
   2689c:	4641      	mov	r1, r8
   2689e:	603a      	str	r2, [r7, #0]
   268a0:	f7fc ffd6 	bl	23850 <rpc_dfu_client_request_send>
   268a4:	2800      	cmp	r0, #0
   268a6:	d14d      	bne.n	26944 <mfu_interface_getopt+0x150>
   268a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   268ac:	ac02      	add	r4, sp, #8
   268ae:	f844 3d04 	str.w	r3, [r4, #-4]!
   268b2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 26990 <mfu_interface_getopt+0x19c>
   268b6:	e005      	b.n	268c4 <mfu_interface_getopt+0xd0>
   268b8:	4621      	mov	r1, r4
   268ba:	4640      	mov	r0, r8
   268bc:	f7f6 fa62 	bl	1cd84 <bsd_os_timedwait>
   268c0:	2800      	cmp	r0, #0
   268c2:	d137      	bne.n	26934 <mfu_interface_getopt+0x140>
   268c4:	6839      	ldr	r1, [r7, #0]
   268c6:	2900      	cmp	r1, #0
   268c8:	d0f6      	beq.n	268b8 <mfu_interface_getopt+0xc4>
   268ca:	690c      	ldr	r4, [r1, #16]
   268cc:	2c00      	cmp	r4, #0
   268ce:	d154      	bne.n	2697a <mfu_interface_getopt+0x186>
   268d0:	6832      	ldr	r2, [r6, #0]
   268d2:	3114      	adds	r1, #20
   268d4:	4628      	mov	r0, r5
   268d6:	f00c ff73 	bl	337c0 <memcpy>
   268da:	6838      	ldr	r0, [r7, #0]
   268dc:	f7fc ffcc 	bl	23878 <rpc_dfu_client_message_free>
   268e0:	4620      	mov	r0, r4
   268e2:	b002      	add	sp, #8
   268e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   268e8:	6833      	ldr	r3, [r6, #0]
   268ea:	2b04      	cmp	r3, #4
   268ec:	d139      	bne.n	26962 <mfu_interface_getopt+0x16e>
   268ee:	2402      	movs	r4, #2
   268f0:	2100      	movs	r1, #0
   268f2:	4668      	mov	r0, sp
   268f4:	46a0      	mov	r8, r4
   268f6:	f7fc ff97 	bl	23828 <rpc_dfu_client_request_alloc>
   268fa:	2800      	cmp	r0, #0
   268fc:	d0b8      	beq.n	26870 <mfu_interface_getopt+0x7c>
   268fe:	200c      	movs	r0, #12
   26900:	f7f6 faea 	bl	1ced8 <bsd_os_errno_set>
   26904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26908:	b002      	add	sp, #8
   2690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2690e:	6833      	ldr	r3, [r6, #0]
   26910:	2b04      	cmp	r3, #4
   26912:	d126      	bne.n	26962 <mfu_interface_getopt+0x16e>
   26914:	2409      	movs	r4, #9
   26916:	46a0      	mov	r8, r4
   26918:	e7a4      	b.n	26864 <mfu_interface_getopt+0x70>
   2691a:	202a      	movs	r0, #42	; 0x2a
   2691c:	f7f6 fadc 	bl	1ced8 <bsd_os_errno_set>
   26920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26924:	b002      	add	sp, #8
   26926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2692a:	4a1d      	ldr	r2, [pc, #116]	; (269a0 <mfu_interface_getopt+0x1ac>)
   2692c:	2108      	movs	r1, #8
   2692e:	6812      	ldr	r2, [r2, #0]
   26930:	611a      	str	r2, [r3, #16]
   26932:	e7af      	b.n	26894 <mfu_interface_getopt+0xa0>
   26934:	203c      	movs	r0, #60	; 0x3c
   26936:	f7f6 facf 	bl	1ced8 <bsd_os_errno_set>
   2693a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2693e:	b002      	add	sp, #8
   26940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26944:	9800      	ldr	r0, [sp, #0]
   26946:	6803      	ldr	r3, [r0, #0]
   26948:	b11b      	cbz	r3, 26952 <mfu_interface_getopt+0x15e>
   2694a:	4618      	mov	r0, r3
   2694c:	f7fc ff9c 	bl	23888 <rpc_dfu_client_data_free>
   26950:	9800      	ldr	r0, [sp, #0]
   26952:	f7fc ff91 	bl	23878 <rpc_dfu_client_message_free>
   26956:	200c      	movs	r0, #12
   26958:	f7f6 fabe 	bl	1ced8 <bsd_os_errno_set>
   2695c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26960:	e7d2      	b.n	26908 <mfu_interface_getopt+0x114>
   26962:	2016      	movs	r0, #22
   26964:	f7f6 fab8 	bl	1ced8 <bsd_os_errno_set>
   26968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2696c:	e771      	b.n	26852 <mfu_interface_getopt+0x5e>
   2696e:	2001      	movs	r0, #1
   26970:	f7f6 fab2 	bl	1ced8 <bsd_os_errno_set>
   26974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26978:	e76b      	b.n	26852 <mfu_interface_getopt+0x5e>
   2697a:	4b06      	ldr	r3, [pc, #24]	; (26994 <mfu_interface_getopt+0x1a0>)
   2697c:	2008      	movs	r0, #8
   2697e:	601c      	str	r4, [r3, #0]
   26980:	f7f6 faaa 	bl	1ced8 <bsd_os_errno_set>
   26984:	6838      	ldr	r0, [r7, #0]
   26986:	f7fc ff77 	bl	23878 <rpc_dfu_client_message_free>
   2698a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2698e:	e760      	b.n	26852 <mfu_interface_getopt+0x5e>
   26990:	20022930 	.word	0x20022930
   26994:	20022934 	.word	0x20022934
   26998:	20027464 	.word	0x20027464
   2699c:	2002293c 	.word	0x2002293c
   269a0:	20022938 	.word	0x20022938

000269a4 <interface_init>:
   269a4:	b508      	push	{r3, lr}
   269a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
   269aa:	2100      	movs	r1, #0
   269ac:	4802      	ldr	r0, [pc, #8]	; (269b8 <interface_init+0x14>)
   269ae:	f00c ff41 	bl	33834 <memset>
   269b2:	2000      	movs	r0, #0
   269b4:	bd08      	pop	{r3, pc}
   269b6:	bf00      	nop
   269b8:	20028e90 	.word	0x20028e90

000269bc <interface_socket_allocate>:
   269bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269be:	4b30      	ldr	r3, [pc, #192]	; (26a80 <interface_socket_allocate+0xc4>)
   269c0:	4606      	mov	r6, r0
   269c2:	681d      	ldr	r5, [r3, #0]
   269c4:	4608      	mov	r0, r1
   269c6:	b31d      	cbz	r5, 26a10 <interface_socket_allocate+0x54>
   269c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   269ca:	2c00      	cmp	r4, #0
   269cc:	d04a      	beq.n	26a64 <interface_socket_allocate+0xa8>
   269ce:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   269d0:	2c00      	cmp	r4, #0
   269d2:	d049      	beq.n	26a68 <interface_socket_allocate+0xac>
   269d4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   269d6:	2c00      	cmp	r4, #0
   269d8:	d048      	beq.n	26a6c <interface_socket_allocate+0xb0>
   269da:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   269de:	2900      	cmp	r1, #0
   269e0:	d046      	beq.n	26a70 <interface_socket_allocate+0xb4>
   269e2:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   269e6:	b191      	cbz	r1, 26a0e <interface_socket_allocate+0x52>
   269e8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   269ec:	2900      	cmp	r1, #0
   269ee:	d043      	beq.n	26a78 <interface_socket_allocate+0xbc>
   269f0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   269f4:	2900      	cmp	r1, #0
   269f6:	d041      	beq.n	26a7c <interface_socket_allocate+0xc0>
   269f8:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   269fc:	2900      	cmp	r1, #0
   269fe:	d039      	beq.n	26a74 <interface_socket_allocate+0xb8>
   26a00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26a04:	2069      	movs	r0, #105	; 0x69
   26a06:	f7f6 fa67 	bl	1ced8 <bsd_os_errno_set>
   26a0a:	4628      	mov	r0, r5
   26a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a0e:	2505      	movs	r5, #5
   26a10:	f04f 0c01 	mov.w	ip, #1
   26a14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26a18:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   26a1c:	00e4      	lsls	r4, r4, #3
   26a1e:	f843 c004 	str.w	ip, [r3, r4]
   26a22:	441c      	add	r4, r3
   26a24:	4611      	mov	r1, r2
   26a26:	61a7      	str	r7, [r4, #24]
   26a28:	4622      	mov	r2, r4
   26a2a:	f7fe ff9b 	bl	25964 <packet_handler_create>
   26a2e:	4603      	mov	r3, r0
   26a30:	61e0      	str	r0, [r4, #28]
   26a32:	b158      	cbz	r0, 26a4c <interface_socket_allocate+0x90>
   26a34:	681b      	ldr	r3, [r3, #0]
   26a36:	681b      	ldr	r3, [r3, #0]
   26a38:	4798      	blx	r3
   26a3a:	b910      	cbnz	r0, 26a42 <interface_socket_allocate+0x86>
   26a3c:	6034      	str	r4, [r6, #0]
   26a3e:	4628      	mov	r0, r5
   26a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a42:	69e0      	ldr	r0, [r4, #28]
   26a44:	f7fe ffae 	bl	259a4 <packet_handler_delete>
   26a48:	2300      	movs	r3, #0
   26a4a:	61e3      	str	r3, [r4, #28]
   26a4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26a50:	2228      	movs	r2, #40	; 0x28
   26a52:	2100      	movs	r1, #0
   26a54:	4620      	mov	r0, r4
   26a56:	f00c feed 	bl	33834 <memset>
   26a5a:	200c      	movs	r0, #12
   26a5c:	f7f6 fa3c 	bl	1ced8 <bsd_os_errno_set>
   26a60:	4628      	mov	r0, r5
   26a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a64:	2501      	movs	r5, #1
   26a66:	e7d3      	b.n	26a10 <interface_socket_allocate+0x54>
   26a68:	2502      	movs	r5, #2
   26a6a:	e7d1      	b.n	26a10 <interface_socket_allocate+0x54>
   26a6c:	2503      	movs	r5, #3
   26a6e:	e7cf      	b.n	26a10 <interface_socket_allocate+0x54>
   26a70:	2504      	movs	r5, #4
   26a72:	e7cd      	b.n	26a10 <interface_socket_allocate+0x54>
   26a74:	2508      	movs	r5, #8
   26a76:	e7cb      	b.n	26a10 <interface_socket_allocate+0x54>
   26a78:	2506      	movs	r5, #6
   26a7a:	e7c9      	b.n	26a10 <interface_socket_allocate+0x54>
   26a7c:	2507      	movs	r5, #7
   26a7e:	e7c7      	b.n	26a10 <interface_socket_allocate+0x54>
   26a80:	20028e90 	.word	0x20028e90

00026a84 <interface_socket_free>:
   26a84:	2808      	cmp	r0, #8
   26a86:	d900      	bls.n	26a8a <interface_socket_free+0x6>
   26a88:	4770      	bx	lr
   26a8a:	b510      	push	{r4, lr}
   26a8c:	4c07      	ldr	r4, [pc, #28]	; (26aac <interface_socket_free+0x28>)
   26a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26a92:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   26a96:	69e0      	ldr	r0, [r4, #28]
   26a98:	b108      	cbz	r0, 26a9e <interface_socket_free+0x1a>
   26a9a:	f7fe ff83 	bl	259a4 <packet_handler_delete>
   26a9e:	4620      	mov	r0, r4
   26aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26aa4:	2228      	movs	r2, #40	; 0x28
   26aa6:	2100      	movs	r1, #0
   26aa8:	f00c bec4 	b.w	33834 <memset>
   26aac:	20028e90 	.word	0x20028e90

00026ab0 <interface_socket_packet_handler_update>:
   26ab0:	2808      	cmp	r0, #8
   26ab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ab6:	d81e      	bhi.n	26af6 <interface_socket_packet_handler_update+0x46>
   26ab8:	ea4f 0880 	mov.w	r8, r0, lsl #2
   26abc:	4e17      	ldr	r6, [pc, #92]	; (26b1c <interface_socket_packet_handler_update+0x6c>)
   26abe:	eb08 0300 	add.w	r3, r8, r0
   26ac2:	00db      	lsls	r3, r3, #3
   26ac4:	58f4      	ldr	r4, [r6, r3]
   26ac6:	18f5      	adds	r5, r6, r3
   26ac8:	b1ac      	cbz	r4, 26af6 <interface_socket_packet_handler_update+0x46>
   26aca:	460b      	mov	r3, r1
   26acc:	4604      	mov	r4, r0
   26ace:	4611      	mov	r1, r2
   26ad0:	4618      	mov	r0, r3
   26ad2:	462a      	mov	r2, r5
   26ad4:	f8d5 901c 	ldr.w	r9, [r5, #28]
   26ad8:	f7fe ff44 	bl	25964 <packet_handler_create>
   26adc:	61e8      	str	r0, [r5, #28]
   26ade:	b1d0      	cbz	r0, 26b16 <interface_socket_packet_handler_update+0x66>
   26ae0:	6803      	ldr	r3, [r0, #0]
   26ae2:	681b      	ldr	r3, [r3, #0]
   26ae4:	4798      	blx	r3
   26ae6:	4607      	mov	r7, r0
   26ae8:	b948      	cbnz	r0, 26afe <interface_socket_packet_handler_update+0x4e>
   26aea:	4648      	mov	r0, r9
   26aec:	f7fe ff5a 	bl	259a4 <packet_handler_delete>
   26af0:	4638      	mov	r0, r7
   26af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26af6:	2705      	movs	r7, #5
   26af8:	4638      	mov	r0, r7
   26afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26afe:	69e8      	ldr	r0, [r5, #28]
   26b00:	f7fe ff50 	bl	259a4 <packet_handler_delete>
   26b04:	eb08 0004 	add.w	r0, r8, r4
   26b08:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   26b0c:	f8c6 901c 	str.w	r9, [r6, #28]
   26b10:	4638      	mov	r0, r7
   26b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26b16:	2704      	movs	r7, #4
   26b18:	e7f4      	b.n	26b04 <interface_socket_packet_handler_update+0x54>
   26b1a:	bf00      	nop
   26b1c:	20028e90 	.word	0x20028e90

00026b20 <interface_socket_wait>:
   26b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26b28:	4c0d      	ldr	r4, [pc, #52]	; (26b60 <interface_socket_wait+0x40>)
   26b2a:	00c0      	lsls	r0, r0, #3
   26b2c:	5825      	ldr	r5, [r4, r0]
   26b2e:	4404      	add	r4, r0
   26b30:	4015      	ands	r5, r2
   26b32:	428d      	cmp	r5, r1
   26b34:	d011      	beq.n	26b5a <interface_socket_wait+0x3a>
   26b36:	6860      	ldr	r0, [r4, #4]
   26b38:	b978      	cbnz	r0, 26b5a <interface_socket_wait+0x3a>
   26b3a:	4698      	mov	r8, r3
   26b3c:	460f      	mov	r7, r1
   26b3e:	4616      	mov	r6, r2
   26b40:	4625      	mov	r5, r4
   26b42:	e006      	b.n	26b52 <interface_socket_wait+0x32>
   26b44:	686b      	ldr	r3, [r5, #4]
   26b46:	b943      	cbnz	r3, 26b5a <interface_socket_wait+0x3a>
   26b48:	4641      	mov	r1, r8
   26b4a:	4620      	mov	r0, r4
   26b4c:	f7f6 f91a 	bl	1cd84 <bsd_os_timedwait>
   26b50:	b920      	cbnz	r0, 26b5c <interface_socket_wait+0x3c>
   26b52:	6828      	ldr	r0, [r5, #0]
   26b54:	4030      	ands	r0, r6
   26b56:	42b8      	cmp	r0, r7
   26b58:	d1f4      	bne.n	26b44 <interface_socket_wait+0x24>
   26b5a:	2000      	movs	r0, #0
   26b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b60:	20028e90 	.word	0x20028e90

00026b64 <interface_from_internal_id_search>:
   26b64:	4b27      	ldr	r3, [pc, #156]	; (26c04 <interface_from_internal_id_search+0xa0>)
   26b66:	681a      	ldr	r2, [r3, #0]
   26b68:	b112      	cbz	r2, 26b70 <interface_from_internal_id_search+0xc>
   26b6a:	699a      	ldr	r2, [r3, #24]
   26b6c:	4282      	cmp	r2, r0
   26b6e:	d039      	beq.n	26be4 <interface_from_internal_id_search+0x80>
   26b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26b72:	b112      	cbz	r2, 26b7a <interface_from_internal_id_search+0x16>
   26b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   26b76:	4282      	cmp	r2, r0
   26b78:	d036      	beq.n	26be8 <interface_from_internal_id_search+0x84>
   26b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   26b7c:	b112      	cbz	r2, 26b84 <interface_from_internal_id_search+0x20>
   26b7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   26b80:	4282      	cmp	r2, r0
   26b82:	d033      	beq.n	26bec <interface_from_internal_id_search+0x88>
   26b84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   26b86:	b11a      	cbz	r2, 26b90 <interface_from_internal_id_search+0x2c>
   26b88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   26b8c:	4282      	cmp	r2, r0
   26b8e:	d02f      	beq.n	26bf0 <interface_from_internal_id_search+0x8c>
   26b90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   26b94:	b11a      	cbz	r2, 26b9e <interface_from_internal_id_search+0x3a>
   26b96:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   26b9a:	4282      	cmp	r2, r0
   26b9c:	d02a      	beq.n	26bf4 <interface_from_internal_id_search+0x90>
   26b9e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   26ba2:	b11a      	cbz	r2, 26bac <interface_from_internal_id_search+0x48>
   26ba4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   26ba8:	4282      	cmp	r2, r0
   26baa:	d025      	beq.n	26bf8 <interface_from_internal_id_search+0x94>
   26bac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   26bb0:	b11a      	cbz	r2, 26bba <interface_from_internal_id_search+0x56>
   26bb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   26bb6:	4282      	cmp	r2, r0
   26bb8:	d020      	beq.n	26bfc <interface_from_internal_id_search+0x98>
   26bba:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   26bbe:	b11a      	cbz	r2, 26bc8 <interface_from_internal_id_search+0x64>
   26bc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   26bc4:	4282      	cmp	r2, r0
   26bc6:	d01b      	beq.n	26c00 <interface_from_internal_id_search+0x9c>
   26bc8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   26bcc:	b13a      	cbz	r2, 26bde <interface_from_internal_id_search+0x7a>
   26bce:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   26bd2:	4283      	cmp	r3, r0
   26bd4:	bf14      	ite	ne
   26bd6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26bda:	2008      	moveq	r0, #8
   26bdc:	4770      	bx	lr
   26bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26be2:	4770      	bx	lr
   26be4:	2000      	movs	r0, #0
   26be6:	4770      	bx	lr
   26be8:	2001      	movs	r0, #1
   26bea:	4770      	bx	lr
   26bec:	2002      	movs	r0, #2
   26bee:	4770      	bx	lr
   26bf0:	2003      	movs	r0, #3
   26bf2:	4770      	bx	lr
   26bf4:	2004      	movs	r0, #4
   26bf6:	4770      	bx	lr
   26bf8:	2005      	movs	r0, #5
   26bfa:	4770      	bx	lr
   26bfc:	2006      	movs	r0, #6
   26bfe:	4770      	bx	lr
   26c00:	2007      	movs	r0, #7
   26c02:	4770      	bx	lr
   26c04:	20028e90 	.word	0x20028e90

00026c08 <interface_socket_from_handle_get>:
   26c08:	2808      	cmp	r0, #8
   26c0a:	d807      	bhi.n	26c1c <interface_socket_from_handle_get+0x14>
   26c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c10:	4b03      	ldr	r3, [pc, #12]	; (26c20 <interface_socket_from_handle_get+0x18>)
   26c12:	00c0      	lsls	r0, r0, #3
   26c14:	581a      	ldr	r2, [r3, r0]
   26c16:	b10a      	cbz	r2, 26c1c <interface_socket_from_handle_get+0x14>
   26c18:	4418      	add	r0, r3
   26c1a:	4770      	bx	lr
   26c1c:	2000      	movs	r0, #0
   26c1e:	4770      	bx	lr
   26c20:	20028e90 	.word	0x20028e90

00026c24 <interface_socket_event_get>:
   26c24:	b119      	cbz	r1, 26c2e <interface_socket_event_get+0xa>
   26c26:	2808      	cmp	r0, #8
   26c28:	d902      	bls.n	26c30 <interface_socket_event_get+0xc>
   26c2a:	2310      	movs	r3, #16
   26c2c:	600b      	str	r3, [r1, #0]
   26c2e:	4770      	bx	lr
   26c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c34:	4b07      	ldr	r3, [pc, #28]	; (26c54 <interface_socket_event_get+0x30>)
   26c36:	00c0      	lsls	r0, r0, #3
   26c38:	581a      	ldr	r2, [r3, r0]
   26c3a:	2a00      	cmp	r2, #0
   26c3c:	d0f5      	beq.n	26c2a <interface_socket_event_get+0x6>
   26c3e:	581b      	ldr	r3, [r3, r0]
   26c40:	0c1b      	lsrs	r3, r3, #16
   26c42:	f003 020a 	and.w	r2, r3, #10
   26c46:	2a0a      	cmp	r2, #10
   26c48:	bf14      	ite	ne
   26c4a:	f003 030f 	andne.w	r3, r3, #15
   26c4e:	f003 030d 	andeq.w	r3, r3, #13
   26c52:	e7eb      	b.n	26c2c <interface_socket_event_get+0x8>
   26c54:	20028e90 	.word	0x20028e90

00026c58 <interface_socket_setopt>:
   26c58:	2808      	cmp	r0, #8
   26c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c5c:	d82c      	bhi.n	26cb8 <interface_socket_setopt+0x60>
   26c5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c62:	4e1e      	ldr	r6, [pc, #120]	; (26cdc <interface_socket_setopt+0x84>)
   26c64:	00c0      	lsls	r0, r0, #3
   26c66:	5834      	ldr	r4, [r6, r0]
   26c68:	b334      	cbz	r4, 26cb8 <interface_socket_setopt+0x60>
   26c6a:	2901      	cmp	r1, #1
   26c6c:	d11e      	bne.n	26cac <interface_socket_setopt+0x54>
   26c6e:	f1a2 0114 	sub.w	r1, r2, #20
   26c72:	2901      	cmp	r1, #1
   26c74:	d81a      	bhi.n	26cac <interface_socket_setopt+0x54>
   26c76:	9906      	ldr	r1, [sp, #24]
   26c78:	2908      	cmp	r1, #8
   26c7a:	d123      	bne.n	26cc4 <interface_socket_setopt+0x6c>
   26c7c:	b313      	cbz	r3, 26cc4 <interface_socket_setopt+0x6c>
   26c7e:	6859      	ldr	r1, [r3, #4]
   26c80:	4c17      	ldr	r4, [pc, #92]	; (26ce0 <interface_socket_setopt+0x88>)
   26c82:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   26c86:	fba4 4101 	umull	r4, r1, r4, r1
   26c8a:	0989      	lsrs	r1, r1, #6
   26c8c:	460c      	mov	r4, r1
   26c8e:	2500      	movs	r5, #0
   26c90:	681b      	ldr	r3, [r3, #0]
   26c92:	fbe7 4503 	umlal	r4, r5, r7, r3
   26c96:	2d01      	cmp	r5, #1
   26c98:	bf08      	it	eq
   26c9a:	2c00      	cmpeq	r4, #0
   26c9c:	d218      	bcs.n	26cd0 <interface_socket_setopt+0x78>
   26c9e:	4430      	add	r0, r6
   26ca0:	2a14      	cmp	r2, #20
   26ca2:	bf0c      	ite	eq
   26ca4:	6204      	streq	r4, [r0, #32]
   26ca6:	6244      	strne	r4, [r0, #36]	; 0x24
   26ca8:	2000      	movs	r0, #0
   26caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cac:	202a      	movs	r0, #42	; 0x2a
   26cae:	f7f6 f913 	bl	1ced8 <bsd_os_errno_set>
   26cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cb8:	2009      	movs	r0, #9
   26cba:	f7f6 f90d 	bl	1ced8 <bsd_os_errno_set>
   26cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cc4:	2016      	movs	r0, #22
   26cc6:	f7f6 f907 	bl	1ced8 <bsd_os_errno_set>
   26cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cd0:	2025      	movs	r0, #37	; 0x25
   26cd2:	f7f6 f901 	bl	1ced8 <bsd_os_errno_set>
   26cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cdc:	20028e90 	.word	0x20028e90
   26ce0:	10624dd3 	.word	0x10624dd3

00026ce4 <interface_socket_getopt>:
   26ce4:	b570      	push	{r4, r5, r6, lr}
   26ce6:	2808      	cmp	r0, #8
   26ce8:	9d04      	ldr	r5, [sp, #16]
   26cea:	d835      	bhi.n	26d58 <interface_socket_getopt+0x74>
   26cec:	4c20      	ldr	r4, [pc, #128]	; (26d70 <interface_socket_getopt+0x8c>)
   26cee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26cf2:	00c0      	lsls	r0, r0, #3
   26cf4:	5826      	ldr	r6, [r4, r0]
   26cf6:	4404      	add	r4, r0
   26cf8:	b376      	cbz	r6, 26d58 <interface_socket_getopt+0x74>
   26cfa:	2901      	cmp	r1, #1
   26cfc:	d132      	bne.n	26d64 <interface_socket_getopt+0x80>
   26cfe:	b32b      	cbz	r3, 26d4c <interface_socket_getopt+0x68>
   26d00:	b325      	cbz	r5, 26d4c <interface_socket_getopt+0x68>
   26d02:	2a04      	cmp	r2, #4
   26d04:	d019      	beq.n	26d3a <interface_socket_getopt+0x56>
   26d06:	f1a2 0114 	sub.w	r1, r2, #20
   26d0a:	2901      	cmp	r1, #1
   26d0c:	d82a      	bhi.n	26d64 <interface_socket_getopt+0x80>
   26d0e:	6829      	ldr	r1, [r5, #0]
   26d10:	2908      	cmp	r1, #8
   26d12:	d11b      	bne.n	26d4c <interface_socket_getopt+0x68>
   26d14:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   26d18:	2a14      	cmp	r2, #20
   26d1a:	bf18      	it	ne
   26d1c:	4601      	movne	r1, r0
   26d1e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   26d22:	4a14      	ldr	r2, [pc, #80]	; (26d74 <interface_socket_getopt+0x90>)
   26d24:	2000      	movs	r0, #0
   26d26:	fba2 5201 	umull	r5, r2, r2, r1
   26d2a:	0992      	lsrs	r2, r2, #6
   26d2c:	fb04 1112 	mls	r1, r4, r2, r1
   26d30:	fb04 f101 	mul.w	r1, r4, r1
   26d34:	e9c3 2100 	strd	r2, r1, [r3]
   26d38:	bd70      	pop	{r4, r5, r6, pc}
   26d3a:	682a      	ldr	r2, [r5, #0]
   26d3c:	2a04      	cmp	r2, #4
   26d3e:	d105      	bne.n	26d4c <interface_socket_getopt+0x68>
   26d40:	2200      	movs	r2, #0
   26d42:	6861      	ldr	r1, [r4, #4]
   26d44:	4610      	mov	r0, r2
   26d46:	6019      	str	r1, [r3, #0]
   26d48:	6062      	str	r2, [r4, #4]
   26d4a:	bd70      	pop	{r4, r5, r6, pc}
   26d4c:	2016      	movs	r0, #22
   26d4e:	f7f6 f8c3 	bl	1ced8 <bsd_os_errno_set>
   26d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d56:	bd70      	pop	{r4, r5, r6, pc}
   26d58:	2009      	movs	r0, #9
   26d5a:	f7f6 f8bd 	bl	1ced8 <bsd_os_errno_set>
   26d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d62:	bd70      	pop	{r4, r5, r6, pc}
   26d64:	202a      	movs	r0, #42	; 0x2a
   26d66:	f7f6 f8b7 	bl	1ced8 <bsd_os_errno_set>
   26d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d6e:	bd70      	pop	{r4, r5, r6, pc}
   26d70:	20028e90 	.word	0x20028e90
   26d74:	10624dd3 	.word	0x10624dd3

00026d78 <interface_socket_fcntl>:
   26d78:	2808      	cmp	r0, #8
   26d7a:	b510      	push	{r4, lr}
   26d7c:	d826      	bhi.n	26dcc <interface_socket_fcntl+0x54>
   26d7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26d82:	4c1b      	ldr	r4, [pc, #108]	; (26df0 <interface_socket_fcntl+0x78>)
   26d84:	00c3      	lsls	r3, r0, #3
   26d86:	58e0      	ldr	r0, [r4, r3]
   26d88:	b300      	cbz	r0, 26dcc <interface_socket_fcntl+0x54>
   26d8a:	2901      	cmp	r1, #1
   26d8c:	d005      	beq.n	26d9a <interface_socket_fcntl+0x22>
   26d8e:	2902      	cmp	r1, #2
   26d90:	d122      	bne.n	26dd8 <interface_socket_fcntl+0x60>
   26d92:	58e0      	ldr	r0, [r4, r3]
   26d94:	f3c0 7000 	ubfx	r0, r0, #28, #1
   26d98:	bd10      	pop	{r4, pc}
   26d9a:	07d2      	lsls	r2, r2, #31
   26d9c:	d410      	bmi.n	26dc0 <interface_socket_fcntl+0x48>
   26d9e:	58e0      	ldr	r0, [r4, r3]
   26da0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   26da4:	d11e      	bne.n	26de4 <interface_socket_fcntl+0x6c>
   26da6:	58e2      	ldr	r2, [r4, r3]
   26da8:	b292      	uxth	r2, r2
   26daa:	2a0a      	cmp	r2, #10
   26dac:	d01a      	beq.n	26de4 <interface_socket_fcntl+0x6c>
   26dae:	58e2      	ldr	r2, [r4, r3]
   26db0:	b292      	uxth	r2, r2
   26db2:	2a0b      	cmp	r2, #11
   26db4:	d016      	beq.n	26de4 <interface_socket_fcntl+0x6c>
   26db6:	58e2      	ldr	r2, [r4, r3]
   26db8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   26dbc:	50e2      	str	r2, [r4, r3]
   26dbe:	bd10      	pop	{r4, pc}
   26dc0:	58e2      	ldr	r2, [r4, r3]
   26dc2:	2000      	movs	r0, #0
   26dc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   26dc8:	50e2      	str	r2, [r4, r3]
   26dca:	bd10      	pop	{r4, pc}
   26dcc:	2009      	movs	r0, #9
   26dce:	f7f6 f883 	bl	1ced8 <bsd_os_errno_set>
   26dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26dd6:	bd10      	pop	{r4, pc}
   26dd8:	2016      	movs	r0, #22
   26dda:	f7f6 f87d 	bl	1ced8 <bsd_os_errno_set>
   26dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26de2:	bd10      	pop	{r4, pc}
   26de4:	2023      	movs	r0, #35	; 0x23
   26de6:	f7f6 f877 	bl	1ced8 <bsd_os_errno_set>
   26dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26dee:	bd10      	pop	{r4, pc}
   26df0:	20028e90 	.word	0x20028e90

00026df4 <at_client_evt_handler>:
   26df4:	b120      	cbz	r0, 26e00 <at_client_evt_handler+0xc>
   26df6:	f850 1b08 	ldr.w	r1, [r0], #8
   26dfa:	0c09      	lsrs	r1, r1, #16
   26dfc:	f7fc bf0e 	b.w	23c1c <rpc_at_event_handler>
   26e00:	4770      	bx	lr
   26e02:	bf00      	nop

00026e04 <rpc_at_client_init>:
   26e04:	4801      	ldr	r0, [pc, #4]	; (26e0c <rpc_at_client_init+0x8>)
   26e06:	f7fb bcff 	b.w	22808 <rpc_client_register>
   26e0a:	bf00      	nop
   26e0c:	00035034 	.word	0x00035034

00026e10 <rpc_at_client_request_alloc>:
   26e10:	b180      	cbz	r0, 26e34 <rpc_at_client_request_alloc+0x24>
   26e12:	2300      	movs	r3, #0
   26e14:	b510      	push	{r4, lr}
   26e16:	b082      	sub	sp, #8
   26e18:	aa02      	add	r2, sp, #8
   26e1a:	4604      	mov	r4, r0
   26e1c:	f842 3d04 	str.w	r3, [r2, #-4]!
   26e20:	2003      	movs	r0, #3
   26e22:	f7fb fd6b 	bl	228fc <rpc_message_alloc>
   26e26:	b918      	cbnz	r0, 26e30 <rpc_at_client_request_alloc+0x20>
   26e28:	9b01      	ldr	r3, [sp, #4]
   26e2a:	b10b      	cbz	r3, 26e30 <rpc_at_client_request_alloc+0x20>
   26e2c:	3308      	adds	r3, #8
   26e2e:	6023      	str	r3, [r4, #0]
   26e30:	b002      	add	sp, #8
   26e32:	bd10      	pop	{r4, pc}
   26e34:	200e      	movs	r0, #14
   26e36:	4770      	bx	lr

00026e38 <rpc_at_client_request_send>:
   26e38:	b150      	cbz	r0, 26e50 <rpc_at_client_request_send+0x18>
   26e3a:	4603      	mov	r3, r0
   26e3c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   26e40:	2003      	movs	r0, #3
   26e42:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   26e46:	f843 1d08 	str.w	r1, [r3, #-8]!
   26e4a:	4619      	mov	r1, r3
   26e4c:	f7fb bd46 	b.w	228dc <rpc_message_send>
   26e50:	200e      	movs	r0, #14
   26e52:	4770      	bx	lr

00026e54 <rpc_at_client_message_free>:
   26e54:	b120      	cbz	r0, 26e60 <rpc_at_client_message_free+0xc>
   26e56:	f1a0 0108 	sub.w	r1, r0, #8
   26e5a:	2003      	movs	r0, #3
   26e5c:	f7fb bd7a 	b.w	22954 <rpc_message_free>
   26e60:	200e      	movs	r0, #14
   26e62:	4770      	bx	lr

00026e64 <rpc_at_client_data_free>:
   26e64:	b118      	cbz	r0, 26e6e <rpc_at_client_data_free+0xa>
   26e66:	4601      	mov	r1, r0
   26e68:	2003      	movs	r0, #3
   26e6a:	f7fb bd7f 	b.w	2296c <rpc_message_data_free>
   26e6e:	200e      	movs	r0, #14
   26e70:	4770      	bx	lr
   26e72:	bf00      	nop

00026e74 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   26e74:	4a07      	ldr	r2, [pc, #28]	; (26e94 <SystemInit+0x20>)
   26e76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   26e7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   26e7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   26e82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26e86:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   26e8a:	4b03      	ldr	r3, [pc, #12]	; (26e98 <SystemInit+0x24>)
   26e8c:	4a03      	ldr	r2, [pc, #12]	; (26e9c <SystemInit+0x28>)
   26e8e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   26e90:	4770      	bx	lr
   26e92:	bf00      	nop
   26e94:	e000ed00 	.word	0xe000ed00
   26e98:	2002013c 	.word	0x2002013c
   26e9c:	03d09000 	.word	0x03d09000

00026ea0 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   26ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ea4:	4606      	mov	r6, r0
   26ea6:	4617      	mov	r7, r2
    NRFX_ASSERT(p_config);
   26ea8:	460c      	mov	r4, r1
   26eaa:	b949      	cbnz	r1, 26ec0 <nrfx_wdt_init+0x20>
   26eac:	4921      	ldr	r1, [pc, #132]	; (26f34 <nrfx_wdt_init+0x94>)
   26eae:	4822      	ldr	r0, [pc, #136]	; (26f38 <nrfx_wdt_init+0x98>)
   26eb0:	233d      	movs	r3, #61	; 0x3d
   26eb2:	4a22      	ldr	r2, [pc, #136]	; (26f3c <nrfx_wdt_init+0x9c>)
   26eb4:	f007 f982 	bl	2e1bc <printk>
   26eb8:	213d      	movs	r1, #61	; 0x3d
   26eba:	4820      	ldr	r0, [pc, #128]	; (26f3c <nrfx_wdt_init+0x9c>)
   26ebc:	f007 fc7f 	bl	2e7be <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26ec0:	7932      	ldrb	r2, [r6, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   26ec2:	4b1f      	ldr	r3, [pc, #124]	; (26f40 <nrfx_wdt_init+0xa0>)
   26ec4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   26ec8:	604f      	str	r7, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   26eca:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   26ece:	bb69      	cbnz	r1, 26f2c <nrfx_wdt_init+0x8c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   26ed0:	2001      	movs	r0, #1
   26ed2:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   26ed6:	7822      	ldrb	r2, [r4, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   26ed8:	6833      	ldr	r3, [r6, #0]
   26eda:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   26ede:	6863      	ldr	r3, [r4, #4]
   26ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26ee4:	0c5d      	lsrs	r5, r3, #17
   26ee6:	03dc      	lsls	r4, r3, #15
   26ee8:	4620      	mov	r0, r4
   26eea:	2300      	movs	r3, #0
   26eec:	4629      	mov	r1, r5
   26eee:	f7e6 fc3f 	bl	d770 <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   26ef2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   26ef6:	bf08      	it	eq
   26ef8:	2c00      	cmpeq	r4, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   26efa:	4680      	mov	r8, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   26efc:	d309      	bcc.n	26f12 <nrfx_wdt_init+0x72>
   26efe:	4911      	ldr	r1, [pc, #68]	; (26f44 <nrfx_wdt_init+0xa4>)
   26f00:	480d      	ldr	r0, [pc, #52]	; (26f38 <nrfx_wdt_init+0x98>)
   26f02:	2358      	movs	r3, #88	; 0x58
   26f04:	4a0d      	ldr	r2, [pc, #52]	; (26f3c <nrfx_wdt_init+0x9c>)
   26f06:	f007 f959 	bl	2e1bc <printk>
   26f0a:	2158      	movs	r1, #88	; 0x58
   26f0c:	480b      	ldr	r0, [pc, #44]	; (26f3c <nrfx_wdt_init+0x9c>)
   26f0e:	f007 fc56 	bl	2e7be <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   26f12:	6830      	ldr	r0, [r6, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   26f14:	f8c0 8504 	str.w	r8, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   26f18:	b137      	cbz	r7, 26f28 <nrfx_wdt_init+0x88>
    p_reg->INTENSET = mask;
   26f1a:	2301      	movs	r3, #1
   26f1c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   26f20:	f340 3007 	sbfx	r0, r0, #12, #8
   26f24:	f7f1 fe4e 	bl	18bc4 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   26f28:	4807      	ldr	r0, [pc, #28]	; (26f48 <nrfx_wdt_init+0xa8>)
   26f2a:	e000      	b.n	26f2e <nrfx_wdt_init+0x8e>
        return err_code;
   26f2c:	4807      	ldr	r0, [pc, #28]	; (26f4c <nrfx_wdt_init+0xac>)
}
   26f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f32:	bf00      	nop
   26f34:	000370d8 	.word	0x000370d8
   26f38:	00035920 	.word	0x00035920
   26f3c:	0003709d 	.word	0x0003709d
   26f40:	20022940 	.word	0x20022940
   26f44:	000370e1 	.word	0x000370e1
   26f48:	0bad0000 	.word	0x0bad0000
   26f4c:	0bad0005 	.word	0x0bad0005

00026f50 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   26f50:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   26f52:	4c13      	ldr	r4, [pc, #76]	; (26fa0 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26f54:	7905      	ldrb	r5, [r0, #4]
{
   26f56:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   26f58:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   26f5c:	785b      	ldrb	r3, [r3, #1]
   26f5e:	b94b      	cbnz	r3, 26f74 <nrfx_wdt_enable+0x24>
   26f60:	4910      	ldr	r1, [pc, #64]	; (26fa4 <nrfx_wdt_enable+0x54>)
   26f62:	4811      	ldr	r0, [pc, #68]	; (26fa8 <nrfx_wdt_enable+0x58>)
   26f64:	236e      	movs	r3, #110	; 0x6e
   26f66:	4a11      	ldr	r2, [pc, #68]	; (26fac <nrfx_wdt_enable+0x5c>)
   26f68:	f007 f928 	bl	2e1bc <printk>
   26f6c:	216e      	movs	r1, #110	; 0x6e
   26f6e:	480f      	ldr	r0, [pc, #60]	; (26fac <nrfx_wdt_enable+0x5c>)
   26f70:	f007 fc25 	bl	2e7be <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   26f74:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   26f78:	2b01      	cmp	r3, #1
   26f7a:	d009      	beq.n	26f90 <nrfx_wdt_enable+0x40>
   26f7c:	490c      	ldr	r1, [pc, #48]	; (26fb0 <nrfx_wdt_enable+0x60>)
   26f7e:	480a      	ldr	r0, [pc, #40]	; (26fa8 <nrfx_wdt_enable+0x58>)
   26f80:	236f      	movs	r3, #111	; 0x6f
   26f82:	4a0a      	ldr	r2, [pc, #40]	; (26fac <nrfx_wdt_enable+0x5c>)
   26f84:	f007 f91a 	bl	2e1bc <printk>
   26f88:	216f      	movs	r1, #111	; 0x6f
   26f8a:	4808      	ldr	r0, [pc, #32]	; (26fac <nrfx_wdt_enable+0x5c>)
   26f8c:	f007 fc17 	bl	2e7be <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   26f90:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   26f92:	6833      	ldr	r3, [r6, #0]
   26f94:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   26f96:	2302      	movs	r3, #2
   26f98:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   26f9c:	bd70      	pop	{r4, r5, r6, pc}
   26f9e:	bf00      	nop
   26fa0:	20022940 	.word	0x20022940
   26fa4:	0003705c 	.word	0x0003705c
   26fa8:	00035920 	.word	0x00035920
   26fac:	0003709d 	.word	0x0003709d
   26fb0:	00037073 	.word	0x00037073

00026fb4 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   26fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fb6:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   26fb8:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
   26fba:	460e      	mov	r6, r1
   26fbc:	b949      	cbnz	r1, 26fd2 <nrfx_wdt_channel_alloc+0x1e>
   26fbe:	491c      	ldr	r1, [pc, #112]	; (27030 <nrfx_wdt_channel_alloc+0x7c>)
   26fc0:	481c      	ldr	r0, [pc, #112]	; (27034 <nrfx_wdt_channel_alloc+0x80>)
   26fc2:	2385      	movs	r3, #133	; 0x85
   26fc4:	4a1c      	ldr	r2, [pc, #112]	; (27038 <nrfx_wdt_channel_alloc+0x84>)
   26fc6:	f007 f8f9 	bl	2e1bc <printk>
   26fca:	2185      	movs	r1, #133	; 0x85
   26fcc:	481a      	ldr	r0, [pc, #104]	; (27038 <nrfx_wdt_channel_alloc+0x84>)
   26fce:	f007 fbf6 	bl	2e7be <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   26fd2:	4c1a      	ldr	r4, [pc, #104]	; (2703c <nrfx_wdt_channel_alloc+0x88>)
   26fd4:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   26fd8:	2a01      	cmp	r2, #1
   26fda:	d009      	beq.n	26ff0 <nrfx_wdt_channel_alloc+0x3c>
   26fdc:	4918      	ldr	r1, [pc, #96]	; (27040 <nrfx_wdt_channel_alloc+0x8c>)
   26fde:	4815      	ldr	r0, [pc, #84]	; (27034 <nrfx_wdt_channel_alloc+0x80>)
   26fe0:	2386      	movs	r3, #134	; 0x86
   26fe2:	4a15      	ldr	r2, [pc, #84]	; (27038 <nrfx_wdt_channel_alloc+0x84>)
   26fe4:	f007 f8ea 	bl	2e1bc <printk>
   26fe8:	2186      	movs	r1, #134	; 0x86
   26fea:	4813      	ldr	r0, [pc, #76]	; (27038 <nrfx_wdt_channel_alloc+0x84>)
   26fec:	f007 fbe7 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   26ff0:	f04f 0320 	mov.w	r3, #32
   26ff4:	f3ef 8c11 	mrs	ip, BASEPRI
   26ff8:	f383 8811 	msr	BASEPRI, r3
   26ffc:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   27000:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   27004:	785a      	ldrb	r2, [r3, #1]
   27006:	2a07      	cmp	r2, #7
   27008:	d810      	bhi.n	2702c <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   2700a:	1c51      	adds	r1, r2, #1
   2700c:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   2700e:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   27010:	6829      	ldr	r1, [r5, #0]
   27012:	4093      	lsls	r3, r2
   27014:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   27018:	7032      	strb	r2, [r6, #0]
   2701a:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   2701c:	4809      	ldr	r0, [pc, #36]	; (27044 <nrfx_wdt_channel_alloc+0x90>)
   2701e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   27022:	f38c 8811 	msr	BASEPRI, ip
   27026:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   2702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   2702c:	4806      	ldr	r0, [pc, #24]	; (27048 <nrfx_wdt_channel_alloc+0x94>)
   2702e:	e7f8      	b.n	27022 <nrfx_wdt_channel_alloc+0x6e>
   27030:	0003700d 	.word	0x0003700d
   27034:	00035920 	.word	0x00035920
   27038:	0003709d 	.word	0x0003709d
   2703c:	20022940 	.word	0x20022940
   27040:	00037073 	.word	0x00037073
   27044:	0bad0000 	.word	0x0bad0000
   27048:	0bad0002 	.word	0x0bad0002

0002704c <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   2704c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2704e:	4b0c      	ldr	r3, [pc, #48]	; (27080 <nrfx_wdt_channel_feed+0x34>)
   27050:	7902      	ldrb	r2, [r0, #4]
{
   27052:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   27054:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   27058:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2705a:	2b02      	cmp	r3, #2
   2705c:	d009      	beq.n	27072 <nrfx_wdt_channel_feed+0x26>
   2705e:	4909      	ldr	r1, [pc, #36]	; (27084 <nrfx_wdt_channel_feed+0x38>)
   27060:	4809      	ldr	r0, [pc, #36]	; (27088 <nrfx_wdt_channel_feed+0x3c>)
   27062:	239b      	movs	r3, #155	; 0x9b
   27064:	4a09      	ldr	r2, [pc, #36]	; (2708c <nrfx_wdt_channel_feed+0x40>)
   27066:	f007 f8a9 	bl	2e1bc <printk>
   2706a:	219b      	movs	r1, #155	; 0x9b
   2706c:	4807      	ldr	r0, [pc, #28]	; (2708c <nrfx_wdt_channel_feed+0x40>)
   2706e:	f007 fba6 	bl	2e7be <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   27072:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   27074:	4a06      	ldr	r2, [pc, #24]	; (27090 <nrfx_wdt_channel_feed+0x44>)
   27076:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   2707a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   2707e:	bd38      	pop	{r3, r4, r5, pc}
   27080:	20022940 	.word	0x20022940
   27084:	0003701a 	.word	0x0003701a
   27088:	00035920 	.word	0x00035920
   2708c:	0003709d 	.word	0x0003709d
   27090:	6e524635 	.word	0x6e524635

00027094 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   27094:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   27096:	4c04      	ldr	r4, [pc, #16]	; (270a8 <nrfx_wdt_0_irq_handler+0x14>)
   27098:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2709a:	b123      	cbz	r3, 270a6 <nrfx_wdt_0_irq_handler+0x12>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   2709c:	4b03      	ldr	r3, [pc, #12]	; (270ac <nrfx_wdt_0_irq_handler+0x18>)
   2709e:	685b      	ldr	r3, [r3, #4]
   270a0:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   270a2:	2300      	movs	r3, #0
   270a4:	6023      	str	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   270a6:	bd10      	pop	{r4, pc}
   270a8:	40018100 	.word	0x40018100
   270ac:	20022940 	.word	0x20022940

000270b0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   270b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   270b2:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   270b4:	4b08      	ldr	r3, [pc, #32]	; (270d8 <z_sys_init_run_level+0x28>)
   270b6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   270ba:	3001      	adds	r0, #1
   270bc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   270c0:	42a6      	cmp	r6, r4
   270c2:	d800      	bhi.n	270c6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   270c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   270c6:	e9d4 3500 	ldrd	r3, r5, [r4]
   270ca:	4628      	mov	r0, r5
   270cc:	4798      	blx	r3
		if (retval != 0) {
   270ce:	b108      	cbz	r0, 270d4 <z_sys_init_run_level+0x24>
			if (dev) {
   270d0:	b105      	cbz	r5, 270d4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   270d2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   270d4:	3408      	adds	r4, #8
   270d6:	e7f3      	b.n	270c0 <z_sys_init_run_level+0x10>
   270d8:	00035044 	.word	0x00035044

000270dc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   270dc:	4b0f      	ldr	r3, [pc, #60]	; (2711c <z_impl_device_get_binding+0x40>)
{
   270de:	b570      	push	{r4, r5, r6, lr}
   270e0:	4605      	mov	r5, r0
   270e2:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   270e4:	4c0e      	ldr	r4, [pc, #56]	; (27120 <z_impl_device_get_binding+0x44>)
   270e6:	429c      	cmp	r4, r3
   270e8:	d104      	bne.n	270f4 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   270ea:	4c0d      	ldr	r4, [pc, #52]	; (27120 <z_impl_device_get_binding+0x44>)
   270ec:	42b4      	cmp	r4, r6
   270ee:	d108      	bne.n	27102 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   270f0:	2400      	movs	r4, #0
   270f2:	e010      	b.n	27116 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   270f4:	68a2      	ldr	r2, [r4, #8]
   270f6:	b112      	cbz	r2, 270fe <z_impl_device_get_binding+0x22>
   270f8:	6822      	ldr	r2, [r4, #0]
   270fa:	42aa      	cmp	r2, r5
   270fc:	d00b      	beq.n	27116 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   270fe:	3410      	adds	r4, #16
   27100:	e7f1      	b.n	270e6 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   27102:	68a3      	ldr	r3, [r4, #8]
   27104:	b90b      	cbnz	r3, 2710a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   27106:	3410      	adds	r4, #16
   27108:	e7f0      	b.n	270ec <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   2710a:	6821      	ldr	r1, [r4, #0]
   2710c:	4628      	mov	r0, r5
   2710e:	f7ea ffad 	bl	1206c <strcmp>
		if ((dev->driver_api != NULL) &&
   27112:	2800      	cmp	r0, #0
   27114:	d1f7      	bne.n	27106 <z_impl_device_get_binding+0x2a>
}
   27116:	4620      	mov	r0, r4
   27118:	bd70      	pop	{r4, r5, r6, pc}
   2711a:	bf00      	nop
   2711c:	2002048c 	.word	0x2002048c
   27120:	2002041c 	.word	0x2002041c

00027124 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   27124:	4b01      	ldr	r3, [pc, #4]	; (2712c <z_impl_z_errno+0x8>)
   27126:	6898      	ldr	r0, [r3, #8]
}
   27128:	305c      	adds	r0, #92	; 0x5c
   2712a:	4770      	bx	lr
   2712c:	20027320 	.word	0x20027320

00027130 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   27130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27132:	4604      	mov	r4, r0
   27134:	460f      	mov	r7, r1
	__asm__ volatile(
   27136:	f04f 0320 	mov.w	r3, #32
   2713a:	f3ef 8611 	mrs	r6, BASEPRI
   2713e:	f383 8811 	msr	BASEPRI, r3
   27142:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   27146:	f002 fb4b 	bl	297e0 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2714a:	4639      	mov	r1, r7
   2714c:	4605      	mov	r5, r0
   2714e:	4620      	mov	r0, r4
   27150:	f00c f8ae 	bl	332b0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   27154:	2c04      	cmp	r4, #4
   27156:	d10c      	bne.n	27172 <z_fatal_error+0x42>
   27158:	490a      	ldr	r1, [pc, #40]	; (27184 <z_fatal_error+0x54>)
   2715a:	238c      	movs	r3, #140	; 0x8c
   2715c:	4a0a      	ldr	r2, [pc, #40]	; (27188 <z_fatal_error+0x58>)
   2715e:	480b      	ldr	r0, [pc, #44]	; (2718c <z_fatal_error+0x5c>)
   27160:	f007 f82c 	bl	2e1bc <printk>
   27164:	480a      	ldr	r0, [pc, #40]	; (27190 <z_fatal_error+0x60>)
   27166:	f007 f829 	bl	2e1bc <printk>
   2716a:	218c      	movs	r1, #140	; 0x8c
   2716c:	4806      	ldr	r0, [pc, #24]	; (27188 <z_fatal_error+0x58>)
   2716e:	f007 fb26 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27172:	f386 8811 	msr	BASEPRI, r6
   27176:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2717a:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2717c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27180:	f7f1 bf72 	b.w	19068 <z_impl_k_thread_abort>
   27184:	00037119 	.word	0x00037119
   27188:	000370f7 	.word	0x000370f7
   2718c:	00035920 	.word	0x00035920
   27190:	00037136 	.word	0x00037136

00027194 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27194:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   27196:	4d0b      	ldr	r5, [pc, #44]	; (271c4 <idle+0x30>)
	__asm__ volatile(
   27198:	f04f 0220 	mov.w	r2, #32
   2719c:	f3ef 8311 	mrs	r3, BASEPRI
   271a0:	f382 8811 	msr	BASEPRI, r2
   271a4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   271a8:	f003 f85e 	bl	2a268 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   271ac:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   271ae:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   271b0:	2802      	cmp	r0, #2
   271b2:	bfd8      	it	le
   271b4:	4608      	movle	r0, r1
   271b6:	f003 f89f 	bl	2a2f8 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   271ba:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   271bc:	f7f1 fd9c 	bl	18cf8 <arch_cpu_idle>
   271c0:	e7ea      	b.n	27198 <idle+0x4>
   271c2:	bf00      	nop
   271c4:	20027320 	.word	0x20027320

000271c8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   271c8:	4802      	ldr	r0, [pc, #8]	; (271d4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   271ca:	4a03      	ldr	r2, [pc, #12]	; (271d8 <z_bss_zero+0x10>)
   271cc:	2100      	movs	r1, #0
   271ce:	1a12      	subs	r2, r2, r0
   271d0:	f00c bb30 	b.w	33834 <memset>
   271d4:	200207c0 	.word	0x200207c0
   271d8:	20029008 	.word	0x20029008

000271dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   271dc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   271de:	4806      	ldr	r0, [pc, #24]	; (271f8 <z_data_copy+0x1c>)
   271e0:	4a06      	ldr	r2, [pc, #24]	; (271fc <z_data_copy+0x20>)
   271e2:	4907      	ldr	r1, [pc, #28]	; (27200 <z_data_copy+0x24>)
   271e4:	1a12      	subs	r2, r2, r0
   271e6:	f00c faeb 	bl	337c0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   271ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   271ee:	4a05      	ldr	r2, [pc, #20]	; (27204 <z_data_copy+0x28>)
   271f0:	4905      	ldr	r1, [pc, #20]	; (27208 <z_data_copy+0x2c>)
   271f2:	4806      	ldr	r0, [pc, #24]	; (2720c <z_data_copy+0x30>)
   271f4:	f00c bae4 	b.w	337c0 <memcpy>
   271f8:	20020000 	.word	0x20020000
   271fc:	200207bc 	.word	0x200207bc
   27200:	000378a4 	.word	0x000378a4
   27204:	00000000 	.word	0x00000000
   27208:	000378a4 	.word	0x000378a4
   2720c:	20020000 	.word	0x20020000

00027210 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   27210:	2201      	movs	r2, #1
{
   27212:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   27214:	4b08      	ldr	r3, [pc, #32]	; (27238 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   27216:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   27218:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2721a:	f7ff ff49 	bl	270b0 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2721e:	2003      	movs	r0, #3
   27220:	f7ff ff46 	bl	270b0 <z_sys_init_run_level>

	z_init_static_threads();
   27224:	f002 fcd2 	bl	29bcc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   27228:	f7ed fa72 	bl	14710 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2722c:	4a03      	ldr	r2, [pc, #12]	; (2723c <bg_thread_main+0x2c>)
   2722e:	7b13      	ldrb	r3, [r2, #12]
   27230:	f023 0301 	bic.w	r3, r3, #1
   27234:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   27236:	bd08      	pop	{r3, pc}
   27238:	20028e8e 	.word	0x20028e8e
   2723c:	20022a00 	.word	0x20022a00

00027240 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   27240:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   27244:	4b36      	ldr	r3, [pc, #216]	; (27320 <z_cstart+0xe0>)
   27246:	b0b5      	sub	sp, #212	; 0xd4
   27248:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2724c:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   27250:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27254:	2400      	movs	r4, #0
   27256:	23e0      	movs	r3, #224	; 0xe0
   27258:	4d32      	ldr	r5, [pc, #200]	; (27324 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   2725a:	4e33      	ldr	r6, [pc, #204]	; (27328 <z_cstart+0xe8>)
   2725c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   27260:	77ec      	strb	r4, [r5, #31]
   27262:	762c      	strb	r4, [r5, #24]
   27264:	766c      	strb	r4, [r5, #25]
   27266:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27268:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2726a:	f04f 0b01 	mov.w	fp, #1
   2726e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   27272:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   27274:	f7f1 fec0 	bl	18ff8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   27278:	f7f1 fd38 	bl	18cec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2727c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27280:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   27282:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   27284:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   27288:	4d28      	ldr	r5, [pc, #160]	; (2732c <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2728a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2728e:	ab06      	add	r3, sp, #24
   27290:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   27292:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   27294:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   27298:	f7ff ff0a 	bl	270b0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2729c:	2001      	movs	r0, #1
   2729e:	f7ff ff07 	bl	270b0 <z_sys_init_run_level>
	z_sched_init();
   272a2:	f002 f913 	bl	294cc <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   272a6:	4b22      	ldr	r3, [pc, #136]	; (27330 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   272a8:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   272aa:	9305      	str	r3, [sp, #20]
   272ac:	2307      	movs	r3, #7
   272ae:	f8df a090 	ldr.w	sl, [pc, #144]	; 27340 <z_cstart+0x100>
   272b2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 27344 <z_cstart+0x104>
   272b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   272ba:	4641      	mov	r1, r8
   272bc:	e9cd 3b03 	strd	r3, fp, [sp, #12]
   272c0:	4630      	mov	r0, r6
   272c2:	4653      	mov	r3, sl
   272c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   272c8:	9400      	str	r4, [sp, #0]
   272ca:	f002 fbd3 	bl	29a74 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   272ce:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   272d0:	4630      	mov	r0, r6
   272d2:	f023 0304 	bic.w	r3, r3, #4
   272d6:	7373      	strb	r3, [r6, #13]
   272d8:	f001 fbb8 	bl	28a4c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   272dc:	230f      	movs	r3, #15
   272de:	4f15      	ldr	r7, [pc, #84]	; (27334 <z_cstart+0xf4>)
   272e0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   272e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   272e8:	4b13      	ldr	r3, [pc, #76]	; (27338 <z_cstart+0xf8>)
   272ea:	4914      	ldr	r1, [pc, #80]	; (2733c <z_cstart+0xfc>)
   272ec:	4638      	mov	r0, r7
   272ee:	e9cd b404 	strd	fp, r4, [sp, #16]
   272f2:	e9cd 4400 	strd	r4, r4, [sp]
   272f6:	f002 fbbd 	bl	29a74 <z_setup_new_thread>
   272fa:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   272fc:	60ef      	str	r7, [r5, #12]
   272fe:	f023 0304 	bic.w	r3, r3, #4
   27302:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   27304:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   27308:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   2730c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   2730e:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   27312:	4653      	mov	r3, sl
   27314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   27318:	4641      	mov	r1, r8
   2731a:	4630      	mov	r0, r6
   2731c:	f7f1 fcbe 	bl	18c9c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   27320:	200347d8 	.word	0x200347d8
   27324:	e000ed00 	.word	0xe000ed00
   27328:	20022a00 	.word	0x20022a00
   2732c:	20027320 	.word	0x20027320
   27330:	0003716b 	.word	0x0003716b
   27334:	20022948 	.word	0x20022948
   27338:	00027195 	.word	0x00027195
   2733c:	20034698 	.word	0x20034698
   27340:	00027211 	.word	0x00027211
   27344:	20032698 	.word	0x20032698

00027348 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   27348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2734a:	4d0f      	ldr	r5, [pc, #60]	; (27388 <statics_init+0x40>)
   2734c:	4c0f      	ldr	r4, [pc, #60]	; (2738c <statics_init+0x44>)
   2734e:	462f      	mov	r7, r5
   27350:	4e0f      	ldr	r6, [pc, #60]	; (27390 <statics_init+0x48>)
   27352:	42ac      	cmp	r4, r5
   27354:	d90c      	bls.n	27370 <statics_init+0x28>
   27356:	490f      	ldr	r1, [pc, #60]	; (27394 <statics_init+0x4c>)
   27358:	2315      	movs	r3, #21
   2735a:	4632      	mov	r2, r6
   2735c:	480e      	ldr	r0, [pc, #56]	; (27398 <statics_init+0x50>)
   2735e:	f006 ff2d 	bl	2e1bc <printk>
   27362:	480e      	ldr	r0, [pc, #56]	; (2739c <statics_init+0x54>)
   27364:	f006 ff2a 	bl	2e1bc <printk>
   27368:	2115      	movs	r1, #21
   2736a:	4630      	mov	r0, r6
   2736c:	f007 fa27 	bl	2e7be <assert_post_action>
   27370:	42bc      	cmp	r4, r7
   27372:	d301      	bcc.n	27378 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   27374:	2000      	movs	r0, #0
   27376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   27378:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2737c:	4620      	mov	r0, r4
   2737e:	f00b ffb7 	bl	332f0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   27382:	3418      	adds	r4, #24
   27384:	e7e5      	b.n	27352 <statics_init+0xa>
   27386:	bf00      	nop
   27388:	200205ac 	.word	0x200205ac
   2738c:	20020594 	.word	0x20020594
   27390:	00037198 	.word	0x00037198
   27394:	000371ba 	.word	0x000371ba
   27398:	00035920 	.word	0x00035920
   2739c:	00035dfc 	.word	0x00035dfc

000273a0 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   273a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273a4:	4606      	mov	r6, r0
   273a6:	b085      	sub	sp, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   273a8:	4610      	mov	r0, r2
{
   273aa:	468b      	mov	fp, r1
   273ac:	4617      	mov	r7, r2
	s64_t now, end = z_timeout_end_calc(timeout);
   273ae:	f00c f93b 	bl	33628 <z_timeout_end_calc>
   273b2:	4680      	mov	r8, r0
   273b4:	9003      	str	r0, [sp, #12]
   273b6:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   273b8:	f106 0414 	add.w	r4, r6, #20
   273bc:	f04f 0320 	mov.w	r3, #32
   273c0:	f3ef 8511 	mrs	r5, BASEPRI
   273c4:	f383 8811 	msr	BASEPRI, r3
   273c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273cc:	4620      	mov	r0, r4
   273ce:	f002 fc87 	bl	29ce0 <z_spin_lock_valid>
   273d2:	b968      	cbnz	r0, 273f0 <k_heap_alloc+0x50>
   273d4:	235c      	movs	r3, #92	; 0x5c
   273d6:	4a41      	ldr	r2, [pc, #260]	; (274dc <k_heap_alloc+0x13c>)
   273d8:	4941      	ldr	r1, [pc, #260]	; (274e0 <k_heap_alloc+0x140>)
   273da:	4842      	ldr	r0, [pc, #264]	; (274e4 <k_heap_alloc+0x144>)
   273dc:	f006 feee 	bl	2e1bc <printk>
   273e0:	4621      	mov	r1, r4
   273e2:	4841      	ldr	r0, [pc, #260]	; (274e8 <k_heap_alloc+0x148>)
   273e4:	f006 feea 	bl	2e1bc <printk>
   273e8:	215c      	movs	r1, #92	; 0x5c
   273ea:	483c      	ldr	r0, [pc, #240]	; (274dc <k_heap_alloc+0x13c>)
   273ec:	f007 f9e7 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   273f0:	4620      	mov	r0, r4
   273f2:	f002 fc93 	bl	29d1c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   273f6:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   273fa:	b16b      	cbz	r3, 27418 <k_heap_alloc+0x78>
   273fc:	b167      	cbz	r7, 27418 <k_heap_alloc+0x78>
   273fe:	493b      	ldr	r1, [pc, #236]	; (274ec <k_heap_alloc+0x14c>)
   27400:	2323      	movs	r3, #35	; 0x23
   27402:	4a3b      	ldr	r2, [pc, #236]	; (274f0 <k_heap_alloc+0x150>)
   27404:	4837      	ldr	r0, [pc, #220]	; (274e4 <k_heap_alloc+0x144>)
   27406:	f006 fed9 	bl	2e1bc <printk>
   2740a:	483a      	ldr	r0, [pc, #232]	; (274f4 <k_heap_alloc+0x154>)
   2740c:	f006 fed6 	bl	2e1bc <printk>
   27410:	2123      	movs	r1, #35	; 0x23
   27412:	4837      	ldr	r0, [pc, #220]	; (274f0 <k_heap_alloc+0x150>)
   27414:	f007 f9d3 	bl	2e7be <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27418:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 274dc <k_heap_alloc+0x13c>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   2741c:	4659      	mov	r1, fp
   2741e:	4630      	mov	r0, r6
   27420:	f007 f8d7 	bl	2e5d2 <sys_heap_alloc>
   27424:	4607      	mov	r7, r0

		now = z_tick_get();
   27426:	f003 f869 	bl	2a4fc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2742a:	b1cf      	cbz	r7, 27460 <k_heap_alloc+0xc0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2742c:	4620      	mov	r0, r4
   2742e:	f002 fc65 	bl	29cfc <z_spin_unlock_valid>
   27432:	b968      	cbnz	r0, 27450 <k_heap_alloc+0xb0>
   27434:	2384      	movs	r3, #132	; 0x84
   27436:	4a29      	ldr	r2, [pc, #164]	; (274dc <k_heap_alloc+0x13c>)
   27438:	492f      	ldr	r1, [pc, #188]	; (274f8 <k_heap_alloc+0x158>)
   2743a:	482a      	ldr	r0, [pc, #168]	; (274e4 <k_heap_alloc+0x144>)
   2743c:	f006 febe 	bl	2e1bc <printk>
   27440:	4621      	mov	r1, r4
   27442:	482e      	ldr	r0, [pc, #184]	; (274fc <k_heap_alloc+0x15c>)
   27444:	f006 feba 	bl	2e1bc <printk>
   27448:	2184      	movs	r1, #132	; 0x84
   2744a:	4824      	ldr	r0, [pc, #144]	; (274dc <k_heap_alloc+0x13c>)
   2744c:	f007 f9b7 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27450:	f385 8811 	msr	BASEPRI, r5
   27454:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27458:	4638      	mov	r0, r7
   2745a:	b005      	add	sp, #20
   2745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   27460:	9b03      	ldr	r3, [sp, #12]
   27462:	1a1b      	subs	r3, r3, r0
   27464:	9300      	str	r3, [sp, #0]
   27466:	eb6a 0301 	sbc.w	r3, sl, r1
   2746a:	9301      	str	r3, [sp, #4]
   2746c:	e9dd 2300 	ldrd	r2, r3, [sp]
   27470:	2a01      	cmp	r2, #1
   27472:	f173 0300 	sbcs.w	r3, r3, #0
   27476:	dbd9      	blt.n	2742c <k_heap_alloc+0x8c>
			return (u32_t)((t * to_hz + off) / from_hz);
   27478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2747c:	f647 71ff 	movw	r1, #32767	; 0x7fff
   27480:	2200      	movs	r2, #0
				   K_TICKS(end - now));
   27482:	eba8 0000 	sub.w	r0, r8, r0
   27486:	fbe3 1200 	umlal	r1, r2, r3, r0
   2748a:	4608      	mov	r0, r1
   2748c:	4611      	mov	r1, r2
   2748e:	0bc2      	lsrs	r2, r0, #15
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27490:	ea42 4341 	orr.w	r3, r2, r1, lsl #17
   27494:	4620      	mov	r0, r4
   27496:	f106 020c 	add.w	r2, r6, #12
   2749a:	4629      	mov	r1, r5
   2749c:	f001 fec8 	bl	29230 <z_pend_curr>
	__asm__ volatile(
   274a0:	f04f 0320 	mov.w	r3, #32
   274a4:	f3ef 8511 	mrs	r5, BASEPRI
   274a8:	f383 8811 	msr	BASEPRI, r3
   274ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   274b0:	4620      	mov	r0, r4
   274b2:	f002 fc15 	bl	29ce0 <z_spin_lock_valid>
   274b6:	b968      	cbnz	r0, 274d4 <k_heap_alloc+0x134>
   274b8:	235c      	movs	r3, #92	; 0x5c
   274ba:	464a      	mov	r2, r9
   274bc:	4908      	ldr	r1, [pc, #32]	; (274e0 <k_heap_alloc+0x140>)
   274be:	4809      	ldr	r0, [pc, #36]	; (274e4 <k_heap_alloc+0x144>)
   274c0:	f006 fe7c 	bl	2e1bc <printk>
   274c4:	4621      	mov	r1, r4
   274c6:	4808      	ldr	r0, [pc, #32]	; (274e8 <k_heap_alloc+0x148>)
   274c8:	f006 fe78 	bl	2e1bc <printk>
   274cc:	215c      	movs	r1, #92	; 0x5c
   274ce:	4648      	mov	r0, r9
   274d0:	f007 f975 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   274d4:	4620      	mov	r0, r4
   274d6:	f002 fc21 	bl	29d1c <z_spin_lock_set_owner>
	return k;
   274da:	e79f      	b.n	2741c <k_heap_alloc+0x7c>
   274dc:	00035cb3 	.word	0x00035cb3
   274e0:	00035cd9 	.word	0x00035cd9
   274e4:	00035920 	.word	0x00035920
   274e8:	00035cee 	.word	0x00035cee
   274ec:	00037170 	.word	0x00037170
   274f0:	00037198 	.word	0x00037198
   274f4:	00035d7e 	.word	0x00035d7e
   274f8:	00035d06 	.word	0x00035d06
   274fc:	00035d1d 	.word	0x00035d1d

00027500 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   27500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27502:	4605      	mov	r5, r0
   27504:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27506:	f100 0414 	add.w	r4, r0, #20
   2750a:	f04f 0320 	mov.w	r3, #32
   2750e:	f3ef 8611 	mrs	r6, BASEPRI
   27512:	f383 8811 	msr	BASEPRI, r3
   27516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2751a:	4620      	mov	r0, r4
   2751c:	f002 fbe0 	bl	29ce0 <z_spin_lock_valid>
   27520:	b968      	cbnz	r0, 2753e <k_heap_free+0x3e>
   27522:	235c      	movs	r3, #92	; 0x5c
   27524:	4a1a      	ldr	r2, [pc, #104]	; (27590 <k_heap_free+0x90>)
   27526:	491b      	ldr	r1, [pc, #108]	; (27594 <k_heap_free+0x94>)
   27528:	481b      	ldr	r0, [pc, #108]	; (27598 <k_heap_free+0x98>)
   2752a:	f006 fe47 	bl	2e1bc <printk>
   2752e:	4621      	mov	r1, r4
   27530:	481a      	ldr	r0, [pc, #104]	; (2759c <k_heap_free+0x9c>)
   27532:	f006 fe43 	bl	2e1bc <printk>
   27536:	215c      	movs	r1, #92	; 0x5c
   27538:	4815      	ldr	r0, [pc, #84]	; (27590 <k_heap_free+0x90>)
   2753a:	f007 f940 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2753e:	4620      	mov	r0, r4
   27540:	f002 fbec 	bl	29d1c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   27544:	4628      	mov	r0, r5
   27546:	4639      	mov	r1, r7
   27548:	f006 ff91 	bl	2e46e <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2754c:	f105 000c 	add.w	r0, r5, #12
   27550:	f00b ffcd 	bl	334ee <z_unpend_all>
   27554:	b128      	cbz	r0, 27562 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   27556:	4631      	mov	r1, r6
   27558:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2755a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2755e:	f001 b853 	b.w	28608 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27562:	4620      	mov	r0, r4
   27564:	f002 fbca 	bl	29cfc <z_spin_unlock_valid>
   27568:	b968      	cbnz	r0, 27586 <k_heap_free+0x86>
   2756a:	2384      	movs	r3, #132	; 0x84
   2756c:	4a08      	ldr	r2, [pc, #32]	; (27590 <k_heap_free+0x90>)
   2756e:	490c      	ldr	r1, [pc, #48]	; (275a0 <k_heap_free+0xa0>)
   27570:	4809      	ldr	r0, [pc, #36]	; (27598 <k_heap_free+0x98>)
   27572:	f006 fe23 	bl	2e1bc <printk>
   27576:	4621      	mov	r1, r4
   27578:	480a      	ldr	r0, [pc, #40]	; (275a4 <k_heap_free+0xa4>)
   2757a:	f006 fe1f 	bl	2e1bc <printk>
   2757e:	2184      	movs	r1, #132	; 0x84
   27580:	4803      	ldr	r0, [pc, #12]	; (27590 <k_heap_free+0x90>)
   27582:	f007 f91c 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27586:	f386 8811 	msr	BASEPRI, r6
   2758a:	f3bf 8f6f 	isb	sy
}
   2758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27590:	00035cb3 	.word	0x00035cb3
   27594:	00035cd9 	.word	0x00035cd9
   27598:	00035920 	.word	0x00035920
   2759c:	00035cee 	.word	0x00035cee
   275a0:	00035d06 	.word	0x00035d06
   275a4:	00035d1d 	.word	0x00035d1d

000275a8 <mbox_message_put>:
	struct k_thread *receiving_thread;
	struct k_mbox_msg *rx_msg;
	k_spinlock_key_t key;

	/* save sender id so it can be used during message matching */
	tx_msg->rx_source_thread = _current;
   275a8:	4b4d      	ldr	r3, [pc, #308]	; (276e0 <mbox_message_put+0x138>)
{
   275aa:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tx_msg->rx_source_thread = _current;
   275ae:	689b      	ldr	r3, [r3, #8]

	/* finish readying sending thread (actual or dummy) for send */
	sending_thread = tx_msg->_syncing_thread;
   275b0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
	tx_msg->rx_source_thread = _current;
   275b4:	61cb      	str	r3, [r1, #28]
{
   275b6:	4680      	mov	r8, r0
   275b8:	468a      	mov	sl, r1
   275ba:	4693      	mov	fp, r2
	sending_thread->base.swap_data = tx_msg;
   275bc:	f8c9 1014 	str.w	r1, [r9, #20]

	/* search mailbox's rx queue for a compatible receiver */
	key = k_spin_lock(&mbox->lock);
   275c0:	f100 0410 	add.w	r4, r0, #16
	__asm__ volatile(
   275c4:	f04f 0320 	mov.w	r3, #32
   275c8:	f3ef 8711 	mrs	r7, BASEPRI
   275cc:	f383 8811 	msr	BASEPRI, r3
   275d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275d4:	4620      	mov	r0, r4
   275d6:	f002 fb83 	bl	29ce0 <z_spin_lock_valid>
   275da:	b968      	cbnz	r0, 275f8 <mbox_message_put+0x50>
   275dc:	235c      	movs	r3, #92	; 0x5c
   275de:	4a41      	ldr	r2, [pc, #260]	; (276e4 <mbox_message_put+0x13c>)
   275e0:	4941      	ldr	r1, [pc, #260]	; (276e8 <mbox_message_put+0x140>)
   275e2:	4842      	ldr	r0, [pc, #264]	; (276ec <mbox_message_put+0x144>)
   275e4:	f006 fdea 	bl	2e1bc <printk>
   275e8:	4621      	mov	r1, r4
   275ea:	4841      	ldr	r0, [pc, #260]	; (276f0 <mbox_message_put+0x148>)
   275ec:	f006 fde6 	bl	2e1bc <printk>
   275f0:	215c      	movs	r1, #92	; 0x5c
   275f2:	483c      	ldr	r0, [pc, #240]	; (276e4 <mbox_message_put+0x13c>)
   275f4:	f007 f8e3 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   275f8:	4620      	mov	r0, r4
   275fa:	f002 fb8f 	bl	29d1c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   275fe:	4643      	mov	r3, r8
   27600:	f853 5f08 	ldr.w	r5, [r3, #8]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27604:	429d      	cmp	r5, r3
   27606:	d129      	bne.n	2765c <mbox_message_put+0xb4>

		}
	}

	/* didn't find a matching receiver: don't wait for one */
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27608:	f1bb 0f00 	cmp.w	fp, #0
   2760c:	d143      	bne.n	27696 <mbox_message_put+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2760e:	4620      	mov	r0, r4
   27610:	f002 fb74 	bl	29cfc <z_spin_unlock_valid>
   27614:	b968      	cbnz	r0, 27632 <mbox_message_put+0x8a>
   27616:	2384      	movs	r3, #132	; 0x84
   27618:	4a32      	ldr	r2, [pc, #200]	; (276e4 <mbox_message_put+0x13c>)
   2761a:	4936      	ldr	r1, [pc, #216]	; (276f4 <mbox_message_put+0x14c>)
   2761c:	4833      	ldr	r0, [pc, #204]	; (276ec <mbox_message_put+0x144>)
   2761e:	f006 fdcd 	bl	2e1bc <printk>
   27622:	4621      	mov	r1, r4
   27624:	4834      	ldr	r0, [pc, #208]	; (276f8 <mbox_message_put+0x150>)
   27626:	f006 fdc9 	bl	2e1bc <printk>
   2762a:	2184      	movs	r1, #132	; 0x84
   2762c:	482d      	ldr	r0, [pc, #180]	; (276e4 <mbox_message_put+0x13c>)
   2762e:	f007 f8c6 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27632:	f387 8811 	msr	BASEPRI, r7
   27636:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   2763a:	f06f 0622 	mvn.w	r6, #34	; 0x22
   2763e:	e026      	b.n	2768e <mbox_message_put+0xe6>
			return z_pend_curr(&mbox->lock, key, NULL, K_FOREVER);
   27640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		return 0;
	}
#endif

	/* synchronous send: sender waits on tx queue for receiver or timeout */
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   27644:	4639      	mov	r1, r7
   27646:	4620      	mov	r0, r4
}
   27648:	b001      	add	sp, #4
   2764a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   2764e:	f001 bdef 	b.w	29230 <z_pend_curr>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   27652:	f8d8 300c 	ldr.w	r3, [r8, #12]
   27656:	429d      	cmp	r5, r3
   27658:	d0d6      	beq.n	27608 <mbox_message_put+0x60>
   2765a:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->rx_msg_queue, receiving_thread) {
   2765c:	2d00      	cmp	r5, #0
   2765e:	d0d3      	beq.n	27608 <mbox_message_put+0x60>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   27660:	6969      	ldr	r1, [r5, #20]
   27662:	4650      	mov	r0, sl
   27664:	f00b fe67 	bl	33336 <mbox_message_match>
   27668:	4606      	mov	r6, r0
   2766a:	2800      	cmp	r0, #0
   2766c:	d1f1      	bne.n	27652 <mbox_message_put+0xaa>
			z_unpend_thread(receiving_thread);
   2766e:	4628      	mov	r0, r5
   27670:	f001 f8ac 	bl	287cc <z_unpend_thread>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   27674:	672e      	str	r6, [r5, #112]	; 0x70
			z_ready_thread(receiving_thread);
   27676:	4628      	mov	r0, r5
   27678:	f001 f9e8 	bl	28a4c <z_ready_thread>
			if ((sending_thread->base.thread_state & _THREAD_DUMMY)
   2767c:	f899 200d 	ldrb.w	r2, [r9, #13]
   27680:	f012 0201 	ands.w	r2, r2, #1
   27684:	d0dc      	beq.n	27640 <mbox_message_put+0x98>
				z_reschedule(&mbox->lock, key);
   27686:	4639      	mov	r1, r7
   27688:	4620      	mov	r0, r4
   2768a:	f000 ffbd 	bl	28608 <z_reschedule>
}
   2768e:	4630      	mov	r0, r6
   27690:	b001      	add	sp, #4
   27692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   27696:	f899 300d 	ldrb.w	r3, [r9, #13]
   2769a:	07db      	lsls	r3, r3, #31
   2769c:	d51d      	bpl.n	276da <mbox_message_put+0x132>
		z_pend_thread(sending_thread, &mbox->tx_msg_queue, K_FOREVER);
   2769e:	4648      	mov	r0, r9
   276a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   276a4:	4641      	mov	r1, r8
   276a6:	f001 fd9d 	bl	291e4 <z_pend_thread>
   276aa:	4620      	mov	r0, r4
   276ac:	f002 fb26 	bl	29cfc <z_spin_unlock_valid>
   276b0:	b968      	cbnz	r0, 276ce <mbox_message_put+0x126>
   276b2:	2384      	movs	r3, #132	; 0x84
   276b4:	4a0b      	ldr	r2, [pc, #44]	; (276e4 <mbox_message_put+0x13c>)
   276b6:	490f      	ldr	r1, [pc, #60]	; (276f4 <mbox_message_put+0x14c>)
   276b8:	480c      	ldr	r0, [pc, #48]	; (276ec <mbox_message_put+0x144>)
   276ba:	f006 fd7f 	bl	2e1bc <printk>
   276be:	4621      	mov	r1, r4
   276c0:	480d      	ldr	r0, [pc, #52]	; (276f8 <mbox_message_put+0x150>)
   276c2:	f006 fd7b 	bl	2e1bc <printk>
   276c6:	2184      	movs	r1, #132	; 0x84
   276c8:	4806      	ldr	r0, [pc, #24]	; (276e4 <mbox_message_put+0x13c>)
   276ca:	f007 f878 	bl	2e7be <assert_post_action>
   276ce:	f387 8811 	msr	BASEPRI, r7
   276d2:	f3bf 8f6f 	isb	sy
		return 0;
   276d6:	2600      	movs	r6, #0
   276d8:	e7d9      	b.n	2768e <mbox_message_put+0xe6>
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   276da:	465b      	mov	r3, fp
   276dc:	4642      	mov	r2, r8
   276de:	e7b1      	b.n	27644 <mbox_message_put+0x9c>
   276e0:	20027320 	.word	0x20027320
   276e4:	00035cb3 	.word	0x00035cb3
   276e8:	00035cd9 	.word	0x00035cd9
   276ec:	00035920 	.word	0x00035920
   276f0:	00035cee 	.word	0x00035cee
   276f4:	00035d06 	.word	0x00035d06
   276f8:	00035d1d 	.word	0x00035d1d

000276fc <mbox_message_dispose>:
	if (rx_msg->_syncing_thread == NULL) {
   276fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   276fe:	b510      	push	{r4, lr}
   27700:	4604      	mov	r4, r0
	if (rx_msg->_syncing_thread == NULL) {
   27702:	b36b      	cbz	r3, 27760 <mbox_message_dispose+0x64>
	if (rx_msg->tx_block.data != NULL) {
   27704:	6943      	ldr	r3, [r0, #20]
   27706:	b123      	cbz	r3, 27712 <mbox_message_dispose+0x16>
		k_mem_pool_free(&rx_msg->tx_block);
   27708:	3014      	adds	r0, #20
   2770a:	f00b fe60 	bl	333ce <k_mem_pool_free>
		rx_msg->tx_block.data = NULL;
   2770e:	2300      	movs	r3, #0
   27710:	6163      	str	r3, [r4, #20]
	rx_msg->_syncing_thread = NULL;
   27712:	2300      	movs	r3, #0
	sending_thread = rx_msg->_syncing_thread;
   27714:	6a61      	ldr	r1, [r4, #36]	; 0x24
	rx_msg->_syncing_thread = NULL;
   27716:	6263      	str	r3, [r4, #36]	; 0x24
	tx_msg = (struct k_mbox_msg *)sending_thread->base.swap_data;
   27718:	694a      	ldr	r2, [r1, #20]
	tx_msg->size = rx_msg->size;
   2771a:	6863      	ldr	r3, [r4, #4]
   2771c:	6053      	str	r3, [r2, #4]
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   2771e:	7b4b      	ldrb	r3, [r1, #13]
   27720:	f013 0001 	ands.w	r0, r3, #1
   27724:	d009      	beq.n	2773a <mbox_message_dispose+0x3e>
		struct k_sem *async_sem = tx_msg->_async_sem;
   27726:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return z_impl_k_stack_push(stack, data);
   27728:	480e      	ldr	r0, [pc, #56]	; (27764 <mbox_message_dispose+0x68>)
   2772a:	f002 f927 	bl	2997c <z_impl_k_stack_push>
		if (async_sem != NULL) {
   2772e:	b1bc      	cbz	r4, 27760 <mbox_message_dispose+0x64>
	z_impl_k_sem_give(sem);
   27730:	4620      	mov	r0, r4
}
   27732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27736:	f002 b859 	b.w	297ec <z_impl_k_sem_give>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   2773a:	f023 0302 	bic.w	r3, r3, #2
   2773e:	6708      	str	r0, [r1, #112]	; 0x70
   27740:	734b      	strb	r3, [r1, #13]
	z_ready_thread(sending_thread);
   27742:	4608      	mov	r0, r1
   27744:	f001 f982 	bl	28a4c <z_ready_thread>
	__asm__ volatile(
   27748:	f04f 0320 	mov.w	r3, #32
   2774c:	f3ef 8011 	mrs	r0, BASEPRI
   27750:	f383 8811 	msr	BASEPRI, r3
   27754:	f3bf 8f6f 	isb	sy
}
   27758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2775c:	f00b beab 	b.w	334b6 <z_reschedule_irqlock>
   27760:	bd10      	pop	{r4, pc}
   27762:	bf00      	nop
   27764:	20020644 	.word	0x20020644

00027768 <init_mbox_module>:
{
   27768:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   2776a:	2500      	movs	r5, #0
   2776c:	4c09      	ldr	r4, [pc, #36]	; (27794 <init_mbox_module+0x2c>)
	return z_impl_k_stack_push(stack, data);
   2776e:	4e0a      	ldr	r6, [pc, #40]	; (27798 <init_mbox_module+0x30>)
		z_init_thread_base(&async_msg[i].thread, 0, _THREAD_DUMMY, 0);
   27770:	2300      	movs	r3, #0
   27772:	2201      	movs	r2, #1
   27774:	4619      	mov	r1, r3
   27776:	4620      	mov	r0, r4
   27778:	f00b fee4 	bl	33544 <z_init_thread_base>
   2777c:	4621      	mov	r1, r4
   2777e:	4630      	mov	r0, r6
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   27780:	3501      	adds	r5, #1
   27782:	f002 f8fb 	bl	2997c <z_impl_k_stack_push>
   27786:	2d0a      	cmp	r5, #10
   27788:	f104 045c 	add.w	r4, r4, #92	; 0x5c
   2778c:	d1f0      	bne.n	27770 <init_mbox_module+0x8>
}
   2778e:	2000      	movs	r0, #0
   27790:	bd70      	pop	{r4, r5, r6, pc}
   27792:	bf00      	nop
   27794:	200372d8 	.word	0x200372d8
   27798:	20020644 	.word	0x20020644

0002779c <k_mbox_put>:

int k_mbox_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
	       k_timeout_t timeout)
{
	/* configure things for a synchronous send, then send the message */
	tx_msg->_syncing_thread = _current;
   2779c:	4b02      	ldr	r3, [pc, #8]	; (277a8 <k_mbox_put+0xc>)
   2779e:	689b      	ldr	r3, [r3, #8]
   277a0:	624b      	str	r3, [r1, #36]	; 0x24

	return mbox_message_put(mbox, tx_msg, timeout);
   277a2:	f7ff bf01 	b.w	275a8 <mbox_message_put>
   277a6:	bf00      	nop
   277a8:	20027320 	.word	0x20027320

000277ac <k_mbox_get>:
	return 0;
}

int k_mbox_get(struct k_mbox *mbox, struct k_mbox_msg *rx_msg, void *buffer,
	       k_timeout_t timeout)
{
   277ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct k_mbox_msg *tx_msg;
	k_spinlock_key_t key;
	int result;

	/* save receiver id so it can be used during message matching */
	rx_msg->tx_target_thread = _current;
   277b0:	4d43      	ldr	r5, [pc, #268]	; (278c0 <k_mbox_get+0x114>)
{
   277b2:	469a      	mov	sl, r3
	rx_msg->tx_target_thread = _current;
   277b4:	68ab      	ldr	r3, [r5, #8]
{
   277b6:	4607      	mov	r7, r0
   277b8:	460e      	mov	r6, r1
   277ba:	4690      	mov	r8, r2
	rx_msg->tx_target_thread = _current;
   277bc:	620b      	str	r3, [r1, #32]

	/* search mailbox's tx queue for a compatible sender */
	key = k_spin_lock(&mbox->lock);
   277be:	f100 0410 	add.w	r4, r0, #16
   277c2:	f04f 0320 	mov.w	r3, #32
   277c6:	f3ef 8911 	mrs	r9, BASEPRI
   277ca:	f383 8811 	msr	BASEPRI, r3
   277ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   277d2:	4620      	mov	r0, r4
   277d4:	f002 fa84 	bl	29ce0 <z_spin_lock_valid>
   277d8:	46ab      	mov	fp, r5
   277da:	b968      	cbnz	r0, 277f8 <k_mbox_get+0x4c>
   277dc:	235c      	movs	r3, #92	; 0x5c
   277de:	4a39      	ldr	r2, [pc, #228]	; (278c4 <k_mbox_get+0x118>)
   277e0:	4939      	ldr	r1, [pc, #228]	; (278c8 <k_mbox_get+0x11c>)
   277e2:	483a      	ldr	r0, [pc, #232]	; (278cc <k_mbox_get+0x120>)
   277e4:	f006 fcea 	bl	2e1bc <printk>
   277e8:	4621      	mov	r1, r4
   277ea:	4839      	ldr	r0, [pc, #228]	; (278d0 <k_mbox_get+0x124>)
   277ec:	f006 fce6 	bl	2e1bc <printk>
   277f0:	215c      	movs	r1, #92	; 0x5c
   277f2:	4834      	ldr	r0, [pc, #208]	; (278c4 <k_mbox_get+0x118>)
   277f4:	f006 ffe3 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   277f8:	4620      	mov	r0, r4
   277fa:	f002 fa8f 	bl	29d1c <z_spin_lock_set_owner>
	return list->head == list;
   277fe:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27800:	42af      	cmp	r7, r5
   27802:	d125      	bne.n	27850 <k_mbox_get+0xa4>
		}
	}

	/* didn't find a matching sender */

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27804:	f1ba 0f00 	cmp.w	sl, #0
   27808:	d14d      	bne.n	278a6 <k_mbox_get+0xfa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2780a:	4620      	mov	r0, r4
   2780c:	f002 fa76 	bl	29cfc <z_spin_unlock_valid>
   27810:	b968      	cbnz	r0, 2782e <k_mbox_get+0x82>
   27812:	2384      	movs	r3, #132	; 0x84
   27814:	4a2b      	ldr	r2, [pc, #172]	; (278c4 <k_mbox_get+0x118>)
   27816:	492f      	ldr	r1, [pc, #188]	; (278d4 <k_mbox_get+0x128>)
   27818:	482c      	ldr	r0, [pc, #176]	; (278cc <k_mbox_get+0x120>)
   2781a:	f006 fccf 	bl	2e1bc <printk>
   2781e:	4621      	mov	r1, r4
   27820:	482d      	ldr	r0, [pc, #180]	; (278d8 <k_mbox_get+0x12c>)
   27822:	f006 fccb 	bl	2e1bc <printk>
   27826:	2184      	movs	r1, #132	; 0x84
   27828:	4826      	ldr	r0, [pc, #152]	; (278c4 <k_mbox_get+0x118>)
   2782a:	f006 ffc8 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2782e:	f389 8811 	msr	BASEPRI, r9
   27832:	f3bf 8f6f 	isb	sy
		/* don't wait for a matching sender to appear */
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   27836:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2783a:	e032      	b.n	278a2 <k_mbox_get+0xf6>
	} else if (rx_msg->size == 0) {
   2783c:	6873      	ldr	r3, [r6, #4]
   2783e:	bb7b      	cbnz	r3, 278a0 <k_mbox_get+0xf4>
		mbox_message_dispose(rx_msg);
   27840:	4630      	mov	r0, r6
   27842:	f7ff ff5b 	bl	276fc <mbox_message_dispose>
   27846:	e02b      	b.n	278a0 <k_mbox_get+0xf4>
	return (node == list->tail) ? NULL : node->next;
   27848:	687b      	ldr	r3, [r7, #4]
   2784a:	429d      	cmp	r5, r3
   2784c:	d0da      	beq.n	27804 <k_mbox_get+0x58>
   2784e:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->tx_msg_queue, sending_thread) {
   27850:	2d00      	cmp	r5, #0
   27852:	d0d7      	beq.n	27804 <k_mbox_get+0x58>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   27854:	4631      	mov	r1, r6
   27856:	6968      	ldr	r0, [r5, #20]
   27858:	f00b fd6d 	bl	33336 <mbox_message_match>
   2785c:	2800      	cmp	r0, #0
   2785e:	d1f3      	bne.n	27848 <k_mbox_get+0x9c>
			z_unpend_thread(sending_thread);
   27860:	4628      	mov	r0, r5
   27862:	f000 ffb3 	bl	287cc <z_unpend_thread>
   27866:	4620      	mov	r0, r4
   27868:	f002 fa48 	bl	29cfc <z_spin_unlock_valid>
   2786c:	b968      	cbnz	r0, 2788a <k_mbox_get+0xde>
   2786e:	2384      	movs	r3, #132	; 0x84
   27870:	4a14      	ldr	r2, [pc, #80]	; (278c4 <k_mbox_get+0x118>)
   27872:	4918      	ldr	r1, [pc, #96]	; (278d4 <k_mbox_get+0x128>)
   27874:	4815      	ldr	r0, [pc, #84]	; (278cc <k_mbox_get+0x120>)
   27876:	f006 fca1 	bl	2e1bc <printk>
   2787a:	4621      	mov	r1, r4
   2787c:	4816      	ldr	r0, [pc, #88]	; (278d8 <k_mbox_get+0x12c>)
   2787e:	f006 fc9d 	bl	2e1bc <printk>
   27882:	2184      	movs	r1, #132	; 0x84
   27884:	480f      	ldr	r0, [pc, #60]	; (278c4 <k_mbox_get+0x118>)
   27886:	f006 ff9a 	bl	2e7be <assert_post_action>
   2788a:	f389 8811 	msr	BASEPRI, r9
   2788e:	f3bf 8f6f 	isb	sy
	if (buffer != NULL) {
   27892:	f1b8 0f00 	cmp.w	r8, #0
   27896:	d0d1      	beq.n	2783c <k_mbox_get+0x90>
		k_mbox_data_get(rx_msg, buffer);
   27898:	4641      	mov	r1, r8
   2789a:	4630      	mov	r0, r6
   2789c:	f00b fd85 	bl	333aa <k_mbox_data_get>
			return mbox_message_data_check(rx_msg, buffer);
   278a0:	2000      	movs	r0, #0
	if (result == 0) {
		result = mbox_message_data_check(rx_msg, buffer);
	}

	return result;
}
   278a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_current->base.swap_data = rx_msg;
   278a6:	f8db 3008 	ldr.w	r3, [fp, #8]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   278aa:	f107 0208 	add.w	r2, r7, #8
	_current->base.swap_data = rx_msg;
   278ae:	615e      	str	r6, [r3, #20]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   278b0:	4649      	mov	r1, r9
   278b2:	4653      	mov	r3, sl
   278b4:	4620      	mov	r0, r4
   278b6:	f001 fcbb 	bl	29230 <z_pend_curr>
	if (result == 0) {
   278ba:	2800      	cmp	r0, #0
   278bc:	d1f1      	bne.n	278a2 <k_mbox_get+0xf6>
   278be:	e7e8      	b.n	27892 <k_mbox_get+0xe6>
   278c0:	20027320 	.word	0x20027320
   278c4:	00035cb3 	.word	0x00035cb3
   278c8:	00035cd9 	.word	0x00035cd9
   278cc:	00035920 	.word	0x00035920
   278d0:	00035cee 	.word	0x00035cee
   278d4:	00035d06 	.word	0x00035d06
   278d8:	00035d1d 	.word	0x00035d1d

000278dc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   278dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   278e0:	4d16      	ldr	r5, [pc, #88]	; (2793c <init_mem_slab_module+0x60>)
   278e2:	4c17      	ldr	r4, [pc, #92]	; (27940 <init_mem_slab_module+0x64>)
   278e4:	46a8      	mov	r8, r5
   278e6:	4e17      	ldr	r6, [pc, #92]	; (27944 <init_mem_slab_module+0x68>)
   278e8:	42ac      	cmp	r4, r5
   278ea:	d90c      	bls.n	27906 <init_mem_slab_module+0x2a>
   278ec:	4916      	ldr	r1, [pc, #88]	; (27948 <init_mem_slab_module+0x6c>)
   278ee:	2342      	movs	r3, #66	; 0x42
   278f0:	4632      	mov	r2, r6
   278f2:	4816      	ldr	r0, [pc, #88]	; (2794c <init_mem_slab_module+0x70>)
   278f4:	f006 fc62 	bl	2e1bc <printk>
   278f8:	4815      	ldr	r0, [pc, #84]	; (27950 <init_mem_slab_module+0x74>)
   278fa:	f006 fc5f 	bl	2e1bc <printk>
   278fe:	2142      	movs	r1, #66	; 0x42
   27900:	4630      	mov	r0, r6
   27902:	f006 ff5c 	bl	2e7be <assert_post_action>
   27906:	4544      	cmp	r4, r8
   27908:	d302      	bcc.n	27910 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2790a:	2000      	movs	r0, #0
	return rc;
}
   2790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27910:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   27914:	ea42 0301 	orr.w	r3, r2, r1
   27918:	f013 0303 	ands.w	r3, r3, #3
   2791c:	d10b      	bne.n	27936 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2791e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   27920:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27922:	4283      	cmp	r3, r0
   27924:	d101      	bne.n	2792a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   27926:	341c      	adds	r4, #28
   27928:	e7de      	b.n	278e8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2792a:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2792c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2792e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   27930:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   27932:	440a      	add	r2, r1
   27934:	e7f5      	b.n	27922 <init_mem_slab_module+0x46>
		return -EINVAL;
   27936:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2793a:	e7e7      	b.n	2790c <init_mem_slab_module+0x30>
   2793c:	20020594 	.word	0x20020594
   27940:	20020540 	.word	0x20020540
   27944:	000371d0 	.word	0x000371d0
   27948:	000371f5 	.word	0x000371f5
   2794c:	00035920 	.word	0x00035920
   27950:	00035dfc 	.word	0x00035dfc

00027954 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   27954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27956:	4604      	mov	r4, r0
   27958:	460d      	mov	r5, r1
   2795a:	4616      	mov	r6, r2
	__asm__ volatile(
   2795c:	f04f 0320 	mov.w	r3, #32
   27960:	f3ef 8711 	mrs	r7, BASEPRI
   27964:	f383 8811 	msr	BASEPRI, r3
   27968:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2796c:	4823      	ldr	r0, [pc, #140]	; (279fc <k_mem_slab_alloc+0xa8>)
   2796e:	f002 f9b7 	bl	29ce0 <z_spin_lock_valid>
   27972:	b968      	cbnz	r0, 27990 <k_mem_slab_alloc+0x3c>
   27974:	235c      	movs	r3, #92	; 0x5c
   27976:	4a22      	ldr	r2, [pc, #136]	; (27a00 <k_mem_slab_alloc+0xac>)
   27978:	4922      	ldr	r1, [pc, #136]	; (27a04 <k_mem_slab_alloc+0xb0>)
   2797a:	4823      	ldr	r0, [pc, #140]	; (27a08 <k_mem_slab_alloc+0xb4>)
   2797c:	f006 fc1e 	bl	2e1bc <printk>
   27980:	491e      	ldr	r1, [pc, #120]	; (279fc <k_mem_slab_alloc+0xa8>)
   27982:	4822      	ldr	r0, [pc, #136]	; (27a0c <k_mem_slab_alloc+0xb8>)
   27984:	f006 fc1a 	bl	2e1bc <printk>
   27988:	215c      	movs	r1, #92	; 0x5c
   2798a:	481d      	ldr	r0, [pc, #116]	; (27a00 <k_mem_slab_alloc+0xac>)
   2798c:	f006 ff17 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27990:	481a      	ldr	r0, [pc, #104]	; (279fc <k_mem_slab_alloc+0xa8>)
   27992:	f002 f9c3 	bl	29d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   27996:	6963      	ldr	r3, [r4, #20]
   27998:	b1eb      	cbz	r3, 279d6 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   2799a:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2799c:	681b      	ldr	r3, [r3, #0]
   2799e:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   279a0:	69a3      	ldr	r3, [r4, #24]
   279a2:	3301      	adds	r3, #1
   279a4:	61a3      	str	r3, [r4, #24]
		result = 0;
   279a6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279a8:	4814      	ldr	r0, [pc, #80]	; (279fc <k_mem_slab_alloc+0xa8>)
   279aa:	f002 f9a7 	bl	29cfc <z_spin_unlock_valid>
   279ae:	b968      	cbnz	r0, 279cc <k_mem_slab_alloc+0x78>
   279b0:	2384      	movs	r3, #132	; 0x84
   279b2:	4a13      	ldr	r2, [pc, #76]	; (27a00 <k_mem_slab_alloc+0xac>)
   279b4:	4916      	ldr	r1, [pc, #88]	; (27a10 <k_mem_slab_alloc+0xbc>)
   279b6:	4814      	ldr	r0, [pc, #80]	; (27a08 <k_mem_slab_alloc+0xb4>)
   279b8:	f006 fc00 	bl	2e1bc <printk>
   279bc:	490f      	ldr	r1, [pc, #60]	; (279fc <k_mem_slab_alloc+0xa8>)
   279be:	4815      	ldr	r0, [pc, #84]	; (27a14 <k_mem_slab_alloc+0xc0>)
   279c0:	f006 fbfc 	bl	2e1bc <printk>
   279c4:	2184      	movs	r1, #132	; 0x84
   279c6:	480e      	ldr	r0, [pc, #56]	; (27a00 <k_mem_slab_alloc+0xac>)
   279c8:	f006 fef9 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   279cc:	f387 8811 	msr	BASEPRI, r7
   279d0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   279d4:	e010      	b.n	279f8 <k_mem_slab_alloc+0xa4>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   279d6:	b91e      	cbnz	r6, 279e0 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   279d8:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   279da:	f06f 040b 	mvn.w	r4, #11
   279de:	e7e3      	b.n	279a8 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   279e0:	4622      	mov	r2, r4
   279e2:	4633      	mov	r3, r6
   279e4:	4639      	mov	r1, r7
   279e6:	4805      	ldr	r0, [pc, #20]	; (279fc <k_mem_slab_alloc+0xa8>)
   279e8:	f001 fc22 	bl	29230 <z_pend_curr>
		if (result == 0) {
   279ec:	4604      	mov	r4, r0
   279ee:	b918      	cbnz	r0, 279f8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   279f0:	4b09      	ldr	r3, [pc, #36]	; (27a18 <k_mem_slab_alloc+0xc4>)
   279f2:	689b      	ldr	r3, [r3, #8]
   279f4:	695b      	ldr	r3, [r3, #20]
   279f6:	602b      	str	r3, [r5, #0]
}
   279f8:	4620      	mov	r0, r4
   279fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279fc:	20022ab8 	.word	0x20022ab8
   27a00:	00035cb3 	.word	0x00035cb3
   27a04:	00035cd9 	.word	0x00035cd9
   27a08:	00035920 	.word	0x00035920
   27a0c:	00035cee 	.word	0x00035cee
   27a10:	00035d06 	.word	0x00035d06
   27a14:	00035d1d 	.word	0x00035d1d
   27a18:	20027320 	.word	0x20027320

00027a1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27a1c:	b570      	push	{r4, r5, r6, lr}
   27a1e:	4604      	mov	r4, r0
   27a20:	460d      	mov	r5, r1
	__asm__ volatile(
   27a22:	f04f 0320 	mov.w	r3, #32
   27a26:	f3ef 8611 	mrs	r6, BASEPRI
   27a2a:	f383 8811 	msr	BASEPRI, r3
   27a2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a32:	4822      	ldr	r0, [pc, #136]	; (27abc <k_mem_slab_free+0xa0>)
   27a34:	f002 f954 	bl	29ce0 <z_spin_lock_valid>
   27a38:	b968      	cbnz	r0, 27a56 <k_mem_slab_free+0x3a>
   27a3a:	235c      	movs	r3, #92	; 0x5c
   27a3c:	4a20      	ldr	r2, [pc, #128]	; (27ac0 <k_mem_slab_free+0xa4>)
   27a3e:	4921      	ldr	r1, [pc, #132]	; (27ac4 <k_mem_slab_free+0xa8>)
   27a40:	4821      	ldr	r0, [pc, #132]	; (27ac8 <k_mem_slab_free+0xac>)
   27a42:	f006 fbbb 	bl	2e1bc <printk>
   27a46:	491d      	ldr	r1, [pc, #116]	; (27abc <k_mem_slab_free+0xa0>)
   27a48:	4820      	ldr	r0, [pc, #128]	; (27acc <k_mem_slab_free+0xb0>)
   27a4a:	f006 fbb7 	bl	2e1bc <printk>
   27a4e:	215c      	movs	r1, #92	; 0x5c
   27a50:	481b      	ldr	r0, [pc, #108]	; (27ac0 <k_mem_slab_free+0xa4>)
   27a52:	f006 feb4 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27a56:	4819      	ldr	r0, [pc, #100]	; (27abc <k_mem_slab_free+0xa0>)
   27a58:	f002 f960 	bl	29d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27a5c:	4620      	mov	r0, r4
   27a5e:	f001 fca5 	bl	293ac <z_unpend_first_thread>

	if (pending_thread != NULL) {
   27a62:	b158      	cbz	r0, 27a7c <k_mem_slab_free+0x60>
   27a64:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   27a66:	682a      	ldr	r2, [r5, #0]
   27a68:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27a6a:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   27a6c:	f000 ffee 	bl	28a4c <z_ready_thread>
		z_reschedule(&lock, key);
   27a70:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   27a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   27a76:	4811      	ldr	r0, [pc, #68]	; (27abc <k_mem_slab_free+0xa0>)
   27a78:	f000 bdc6 	b.w	28608 <z_reschedule>
		**(char ***)mem = slab->free_list;
   27a7c:	682b      	ldr	r3, [r5, #0]
   27a7e:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a80:	480e      	ldr	r0, [pc, #56]	; (27abc <k_mem_slab_free+0xa0>)
   27a82:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   27a84:	682b      	ldr	r3, [r5, #0]
   27a86:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   27a88:	69a3      	ldr	r3, [r4, #24]
   27a8a:	3b01      	subs	r3, #1
   27a8c:	61a3      	str	r3, [r4, #24]
   27a8e:	f002 f935 	bl	29cfc <z_spin_unlock_valid>
   27a92:	b968      	cbnz	r0, 27ab0 <k_mem_slab_free+0x94>
   27a94:	2384      	movs	r3, #132	; 0x84
   27a96:	4a0a      	ldr	r2, [pc, #40]	; (27ac0 <k_mem_slab_free+0xa4>)
   27a98:	490d      	ldr	r1, [pc, #52]	; (27ad0 <k_mem_slab_free+0xb4>)
   27a9a:	480b      	ldr	r0, [pc, #44]	; (27ac8 <k_mem_slab_free+0xac>)
   27a9c:	f006 fb8e 	bl	2e1bc <printk>
   27aa0:	4906      	ldr	r1, [pc, #24]	; (27abc <k_mem_slab_free+0xa0>)
   27aa2:	480c      	ldr	r0, [pc, #48]	; (27ad4 <k_mem_slab_free+0xb8>)
   27aa4:	f006 fb8a 	bl	2e1bc <printk>
   27aa8:	2184      	movs	r1, #132	; 0x84
   27aaa:	4805      	ldr	r0, [pc, #20]	; (27ac0 <k_mem_slab_free+0xa4>)
   27aac:	f006 fe87 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27ab0:	f386 8811 	msr	BASEPRI, r6
   27ab4:	f3bf 8f6f 	isb	sy
}
   27ab8:	bd70      	pop	{r4, r5, r6, pc}
   27aba:	bf00      	nop
   27abc:	20022ab8 	.word	0x20022ab8
   27ac0:	00035cb3 	.word	0x00035cb3
   27ac4:	00035cd9 	.word	0x00035cd9
   27ac8:	00035920 	.word	0x00035920
   27acc:	00035cee 	.word	0x00035cee
   27ad0:	00035d06 	.word	0x00035d06
   27ad4:	00035d1d 	.word	0x00035d1d

00027ad8 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   27ad8:	4601      	mov	r1, r0
   27ada:	4801      	ldr	r0, [pc, #4]	; (27ae0 <k_malloc+0x8>)
   27adc:	f00b bc79 	b.w	333d2 <k_mem_pool_malloc>
   27ae0:	20020140 	.word	0x20020140

00027ae4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   27ae4:	b510      	push	{r4, lr}
   27ae6:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   27ae8:	f00b fd21 	bl	3352e <k_is_in_isr>
   27aec:	b948      	cbnz	r0, 27b02 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   27aee:	4b06      	ldr	r3, [pc, #24]	; (27b08 <z_thread_malloc+0x24>)
   27af0:	689b      	ldr	r3, [r3, #8]
   27af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   27af4:	b13b      	cbz	r3, 27b06 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   27af6:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   27af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   27afc:	4618      	mov	r0, r3
   27afe:	f00b bc68 	b.w	333d2 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   27b02:	4b02      	ldr	r3, [pc, #8]	; (27b0c <z_thread_malloc+0x28>)
   27b04:	e7f7      	b.n	27af6 <z_thread_malloc+0x12>
}
   27b06:	bd10      	pop	{r4, pc}
   27b08:	20027320 	.word	0x20027320
   27b0c:	20020140 	.word	0x20020140

00027b10 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   27b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b14:	4604      	mov	r4, r0
   27b16:	4688      	mov	r8, r1
   27b18:	4616      	mov	r6, r2
   27b1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   27b1e:	b16b      	cbz	r3, 27b3c <z_impl_k_msgq_put+0x2c>
   27b20:	b162      	cbz	r2, 27b3c <z_impl_k_msgq_put+0x2c>
   27b22:	493e      	ldr	r1, [pc, #248]	; (27c1c <z_impl_k_msgq_put+0x10c>)
   27b24:	2376      	movs	r3, #118	; 0x76
   27b26:	4a3e      	ldr	r2, [pc, #248]	; (27c20 <z_impl_k_msgq_put+0x110>)
   27b28:	483e      	ldr	r0, [pc, #248]	; (27c24 <z_impl_k_msgq_put+0x114>)
   27b2a:	f006 fb47 	bl	2e1bc <printk>
   27b2e:	483e      	ldr	r0, [pc, #248]	; (27c28 <z_impl_k_msgq_put+0x118>)
   27b30:	f006 fb44 	bl	2e1bc <printk>
   27b34:	2176      	movs	r1, #118	; 0x76
   27b36:	483a      	ldr	r0, [pc, #232]	; (27c20 <z_impl_k_msgq_put+0x110>)
   27b38:	f006 fe41 	bl	2e7be <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   27b3c:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   27b40:	f04f 0320 	mov.w	r3, #32
   27b44:	f3ef 8711 	mrs	r7, BASEPRI
   27b48:	f383 8811 	msr	BASEPRI, r3
   27b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b50:	4628      	mov	r0, r5
   27b52:	f002 f8c5 	bl	29ce0 <z_spin_lock_valid>
   27b56:	b968      	cbnz	r0, 27b74 <z_impl_k_msgq_put+0x64>
   27b58:	235c      	movs	r3, #92	; 0x5c
   27b5a:	4a34      	ldr	r2, [pc, #208]	; (27c2c <z_impl_k_msgq_put+0x11c>)
   27b5c:	4934      	ldr	r1, [pc, #208]	; (27c30 <z_impl_k_msgq_put+0x120>)
   27b5e:	4831      	ldr	r0, [pc, #196]	; (27c24 <z_impl_k_msgq_put+0x114>)
   27b60:	f006 fb2c 	bl	2e1bc <printk>
   27b64:	4629      	mov	r1, r5
   27b66:	4833      	ldr	r0, [pc, #204]	; (27c34 <z_impl_k_msgq_put+0x124>)
   27b68:	f006 fb28 	bl	2e1bc <printk>
   27b6c:	215c      	movs	r1, #92	; 0x5c
   27b6e:	482f      	ldr	r0, [pc, #188]	; (27c2c <z_impl_k_msgq_put+0x11c>)
   27b70:	f006 fe25 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27b74:	4628      	mov	r0, r5
   27b76:	f002 f8d1 	bl	29d1c <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   27b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27b7c:	6923      	ldr	r3, [r4, #16]
   27b7e:	429a      	cmp	r2, r3
   27b80:	d23c      	bcs.n	27bfc <z_impl_k_msgq_put+0xec>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   27b82:	4620      	mov	r0, r4
   27b84:	f001 fc12 	bl	293ac <z_unpend_first_thread>
		if (pending_thread != NULL) {
   27b88:	68e2      	ldr	r2, [r4, #12]
   27b8a:	4606      	mov	r6, r0
   27b8c:	4641      	mov	r1, r8
   27b8e:	b170      	cbz	r0, 27bae <z_impl_k_msgq_put+0x9e>
   27b90:	2400      	movs	r4, #0
   27b92:	6940      	ldr	r0, [r0, #20]
   27b94:	f00b fe14 	bl	337c0 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   27b98:	4630      	mov	r0, r6
   27b9a:	6734      	str	r4, [r6, #112]	; 0x70
   27b9c:	f000 ff56 	bl	28a4c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   27ba0:	4639      	mov	r1, r7
   27ba2:	4628      	mov	r0, r5
   27ba4:	f000 fd30 	bl	28608 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   27ba8:	4620      	mov	r0, r4
   27baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27bae:	6a20      	ldr	r0, [r4, #32]
   27bb0:	f00b fe06 	bl	337c0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   27bb4:	6a23      	ldr	r3, [r4, #32]
   27bb6:	68e2      	ldr	r2, [r4, #12]
   27bb8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   27bba:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   27bbc:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   27bbe:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   27bc0:	bf04      	itt	eq
   27bc2:	6963      	ldreq	r3, [r4, #20]
   27bc4:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   27bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27bc8:	3301      	adds	r3, #1
   27bca:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   27bcc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27bce:	4628      	mov	r0, r5
   27bd0:	f002 f894 	bl	29cfc <z_spin_unlock_valid>
   27bd4:	b968      	cbnz	r0, 27bf2 <z_impl_k_msgq_put+0xe2>
   27bd6:	2384      	movs	r3, #132	; 0x84
   27bd8:	4a14      	ldr	r2, [pc, #80]	; (27c2c <z_impl_k_msgq_put+0x11c>)
   27bda:	4917      	ldr	r1, [pc, #92]	; (27c38 <z_impl_k_msgq_put+0x128>)
   27bdc:	4811      	ldr	r0, [pc, #68]	; (27c24 <z_impl_k_msgq_put+0x114>)
   27bde:	f006 faed 	bl	2e1bc <printk>
   27be2:	4629      	mov	r1, r5
   27be4:	4815      	ldr	r0, [pc, #84]	; (27c3c <z_impl_k_msgq_put+0x12c>)
   27be6:	f006 fae9 	bl	2e1bc <printk>
   27bea:	2184      	movs	r1, #132	; 0x84
   27bec:	480f      	ldr	r0, [pc, #60]	; (27c2c <z_impl_k_msgq_put+0x11c>)
   27bee:	f006 fde6 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27bf2:	f387 8811 	msr	BASEPRI, r7
   27bf6:	f3bf 8f6f 	isb	sy
	return result;
   27bfa:	e7d5      	b.n	27ba8 <z_impl_k_msgq_put+0x98>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27bfc:	b15e      	cbz	r6, 27c16 <z_impl_k_msgq_put+0x106>
		_current->base.swap_data = data;
   27bfe:	4b10      	ldr	r3, [pc, #64]	; (27c40 <z_impl_k_msgq_put+0x130>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27c00:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   27c02:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27c04:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   27c06:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27c0a:	4628      	mov	r0, r5
   27c0c:	4633      	mov	r3, r6
}
   27c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27c12:	f001 bb0d 	b.w	29230 <z_pend_curr>
		result = -ENOMSG;
   27c16:	f06f 0422 	mvn.w	r4, #34	; 0x22
   27c1a:	e7d8      	b.n	27bce <z_impl_k_msgq_put+0xbe>
   27c1c:	00037170 	.word	0x00037170
   27c20:	00037212 	.word	0x00037212
   27c24:	00035920 	.word	0x00035920
   27c28:	00035d7e 	.word	0x00035d7e
   27c2c:	00035cb3 	.word	0x00035cb3
   27c30:	00035cd9 	.word	0x00035cd9
   27c34:	00035cee 	.word	0x00035cee
   27c38:	00035d06 	.word	0x00035d06
   27c3c:	00035d1d 	.word	0x00035d1d
   27c40:	20027320 	.word	0x20027320

00027c44 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   27c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c48:	4604      	mov	r4, r0
   27c4a:	4688      	mov	r8, r1
   27c4c:	4615      	mov	r5, r2
   27c4e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   27c52:	b16b      	cbz	r3, 27c70 <z_impl_k_msgq_get+0x2c>
   27c54:	b162      	cbz	r2, 27c70 <z_impl_k_msgq_get+0x2c>
   27c56:	4944      	ldr	r1, [pc, #272]	; (27d68 <z_impl_k_msgq_get+0x124>)
   27c58:	23c2      	movs	r3, #194	; 0xc2
   27c5a:	4a44      	ldr	r2, [pc, #272]	; (27d6c <z_impl_k_msgq_get+0x128>)
   27c5c:	4844      	ldr	r0, [pc, #272]	; (27d70 <z_impl_k_msgq_get+0x12c>)
   27c5e:	f006 faad 	bl	2e1bc <printk>
   27c62:	4844      	ldr	r0, [pc, #272]	; (27d74 <z_impl_k_msgq_get+0x130>)
   27c64:	f006 faaa 	bl	2e1bc <printk>
   27c68:	21c2      	movs	r1, #194	; 0xc2
   27c6a:	4840      	ldr	r0, [pc, #256]	; (27d6c <z_impl_k_msgq_get+0x128>)
   27c6c:	f006 fda7 	bl	2e7be <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   27c70:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   27c74:	f04f 0320 	mov.w	r3, #32
   27c78:	f3ef 8711 	mrs	r7, BASEPRI
   27c7c:	f383 8811 	msr	BASEPRI, r3
   27c80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c84:	4630      	mov	r0, r6
   27c86:	f002 f82b 	bl	29ce0 <z_spin_lock_valid>
   27c8a:	b968      	cbnz	r0, 27ca8 <z_impl_k_msgq_get+0x64>
   27c8c:	235c      	movs	r3, #92	; 0x5c
   27c8e:	4a3a      	ldr	r2, [pc, #232]	; (27d78 <z_impl_k_msgq_get+0x134>)
   27c90:	493a      	ldr	r1, [pc, #232]	; (27d7c <z_impl_k_msgq_get+0x138>)
   27c92:	4837      	ldr	r0, [pc, #220]	; (27d70 <z_impl_k_msgq_get+0x12c>)
   27c94:	f006 fa92 	bl	2e1bc <printk>
   27c98:	4631      	mov	r1, r6
   27c9a:	4839      	ldr	r0, [pc, #228]	; (27d80 <z_impl_k_msgq_get+0x13c>)
   27c9c:	f006 fa8e 	bl	2e1bc <printk>
   27ca0:	215c      	movs	r1, #92	; 0x5c
   27ca2:	4835      	ldr	r0, [pc, #212]	; (27d78 <z_impl_k_msgq_get+0x134>)
   27ca4:	f006 fd8b 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27ca8:	4630      	mov	r0, r6
   27caa:	f002 f837 	bl	29d1c <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   27cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27cb0:	2b00      	cmp	r3, #0
   27cb2:	d033      	beq.n	27d1c <z_impl_k_msgq_get+0xd8>
   27cb4:	68e2      	ldr	r2, [r4, #12]
   27cb6:	69e1      	ldr	r1, [r4, #28]
   27cb8:	4640      	mov	r0, r8
   27cba:	f00b fd81 	bl	337c0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   27cbe:	69e3      	ldr	r3, [r4, #28]
   27cc0:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   27cc2:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   27cc4:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   27cc6:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   27cc8:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   27cca:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   27ccc:	bf04      	itt	eq
   27cce:	6963      	ldreq	r3, [r4, #20]
   27cd0:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   27cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27cd4:	3b01      	subs	r3, #1
   27cd6:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   27cd8:	f001 fb68 	bl	293ac <z_unpend_first_thread>
		if (pending_thread != NULL) {
   27cdc:	4605      	mov	r5, r0
   27cde:	b360      	cbz	r0, 27d3a <z_impl_k_msgq_get+0xf6>
   27ce0:	6941      	ldr	r1, [r0, #20]
   27ce2:	68e2      	ldr	r2, [r4, #12]
   27ce4:	6a20      	ldr	r0, [r4, #32]
   27ce6:	f00b fd6b 	bl	337c0 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   27cea:	6a23      	ldr	r3, [r4, #32]
   27cec:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   27cee:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   27cf0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   27cf2:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   27cf4:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   27cf6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   27cf8:	bf04      	itt	eq
   27cfa:	6963      	ldreq	r3, [r4, #20]
   27cfc:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   27cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27d00:	3301      	adds	r3, #1
   27d02:	6263      	str	r3, [r4, #36]	; 0x24
   27d04:	2400      	movs	r4, #0
   27d06:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   27d08:	f000 fea0 	bl	28a4c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   27d0c:	4639      	mov	r1, r7
   27d0e:	4630      	mov	r0, r6
   27d10:	f000 fc7a 	bl	28608 <z_reschedule>
			return 0;
   27d14:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   27d16:	4628      	mov	r0, r5
   27d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27d1c:	b15d      	cbz	r5, 27d36 <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   27d1e:	4b19      	ldr	r3, [pc, #100]	; (27d84 <z_impl_k_msgq_get+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27d20:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   27d22:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27d24:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   27d26:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27d2a:	4630      	mov	r0, r6
   27d2c:	462b      	mov	r3, r5
}
   27d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   27d32:	f001 ba7d 	b.w	29230 <z_pend_curr>
		result = -ENOMSG;
   27d36:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d3a:	4630      	mov	r0, r6
   27d3c:	f001 ffde 	bl	29cfc <z_spin_unlock_valid>
   27d40:	b968      	cbnz	r0, 27d5e <z_impl_k_msgq_get+0x11a>
   27d42:	2384      	movs	r3, #132	; 0x84
   27d44:	4a0c      	ldr	r2, [pc, #48]	; (27d78 <z_impl_k_msgq_get+0x134>)
   27d46:	4910      	ldr	r1, [pc, #64]	; (27d88 <z_impl_k_msgq_get+0x144>)
   27d48:	4809      	ldr	r0, [pc, #36]	; (27d70 <z_impl_k_msgq_get+0x12c>)
   27d4a:	f006 fa37 	bl	2e1bc <printk>
   27d4e:	4631      	mov	r1, r6
   27d50:	480e      	ldr	r0, [pc, #56]	; (27d8c <z_impl_k_msgq_get+0x148>)
   27d52:	f006 fa33 	bl	2e1bc <printk>
   27d56:	2184      	movs	r1, #132	; 0x84
   27d58:	4807      	ldr	r0, [pc, #28]	; (27d78 <z_impl_k_msgq_get+0x134>)
   27d5a:	f006 fd30 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27d5e:	f387 8811 	msr	BASEPRI, r7
   27d62:	f3bf 8f6f 	isb	sy
	return result;
   27d66:	e7d6      	b.n	27d16 <z_impl_k_msgq_get+0xd2>
   27d68:	00037170 	.word	0x00037170
   27d6c:	00037212 	.word	0x00037212
   27d70:	00035920 	.word	0x00035920
   27d74:	00035d7e 	.word	0x00035d7e
   27d78:	00035cb3 	.word	0x00035cb3
   27d7c:	00035cd9 	.word	0x00035cd9
   27d80:	00035cee 	.word	0x00035cee
   27d84:	20027320 	.word	0x20027320
   27d88:	00035d06 	.word	0x00035d06
   27d8c:	00035d1d 	.word	0x00035d1d

00027d90 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   27d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d92:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   27d94:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   27d98:	f04f 0320 	mov.w	r3, #32
   27d9c:	f3ef 8611 	mrs	r6, BASEPRI
   27da0:	f383 8811 	msr	BASEPRI, r3
   27da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27da8:	4628      	mov	r0, r5
   27daa:	f001 ff99 	bl	29ce0 <z_spin_lock_valid>
   27dae:	b968      	cbnz	r0, 27dcc <z_impl_k_msgq_purge+0x3c>
   27db0:	235c      	movs	r3, #92	; 0x5c
   27db2:	4a12      	ldr	r2, [pc, #72]	; (27dfc <z_impl_k_msgq_purge+0x6c>)
   27db4:	4912      	ldr	r1, [pc, #72]	; (27e00 <z_impl_k_msgq_purge+0x70>)
   27db6:	4813      	ldr	r0, [pc, #76]	; (27e04 <z_impl_k_msgq_purge+0x74>)
   27db8:	f006 fa00 	bl	2e1bc <printk>
   27dbc:	4629      	mov	r1, r5
   27dbe:	4812      	ldr	r0, [pc, #72]	; (27e08 <z_impl_k_msgq_purge+0x78>)
   27dc0:	f006 f9fc 	bl	2e1bc <printk>
   27dc4:	215c      	movs	r1, #92	; 0x5c
   27dc6:	480d      	ldr	r0, [pc, #52]	; (27dfc <z_impl_k_msgq_purge+0x6c>)
   27dc8:	f006 fcf9 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27dcc:	4628      	mov	r0, r5
   27dce:	f001 ffa5 	bl	29d1c <z_spin_lock_set_owner>
   27dd2:	f06f 0722 	mvn.w	r7, #34	; 0x22

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   27dd6:	4620      	mov	r0, r4
   27dd8:	f001 fae8 	bl	293ac <z_unpend_first_thread>
   27ddc:	4603      	mov	r3, r0
   27dde:	b940      	cbnz	r0, 27df2 <z_impl_k_msgq_purge+0x62>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   27de0:	6a23      	ldr	r3, [r4, #32]
	msgq->used_msgs = 0;
   27de2:	6260      	str	r0, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
   27de4:	61e3      	str	r3, [r4, #28]

	z_reschedule(&msgq->lock, key);
   27de6:	4631      	mov	r1, r6
   27de8:	4628      	mov	r0, r5
}
   27dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   27dee:	f000 bc0b 	b.w	28608 <z_reschedule>
   27df2:	671f      	str	r7, [r3, #112]	; 0x70
		z_ready_thread(pending_thread);
   27df4:	f000 fe2a 	bl	28a4c <z_ready_thread>
   27df8:	e7ed      	b.n	27dd6 <z_impl_k_msgq_purge+0x46>
   27dfa:	bf00      	nop
   27dfc:	00035cb3 	.word	0x00035cb3
   27e00:	00035cd9 	.word	0x00035cd9
   27e04:	00035920 	.word	0x00035920
   27e08:	00035cee 	.word	0x00035cee

00027e0c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   27e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e0e:	4604      	mov	r4, r0
   27e10:	460e      	mov	r6, r1
   27e12:	f04f 0320 	mov.w	r3, #32
   27e16:	f3ef 8511 	mrs	r5, BASEPRI
   27e1a:	f383 8811 	msr	BASEPRI, r3
   27e1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e22:	4861      	ldr	r0, [pc, #388]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27e24:	f001 ff5c 	bl	29ce0 <z_spin_lock_valid>
   27e28:	b968      	cbnz	r0, 27e46 <z_impl_k_mutex_lock+0x3a>
   27e2a:	235c      	movs	r3, #92	; 0x5c
   27e2c:	4a5f      	ldr	r2, [pc, #380]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27e2e:	4960      	ldr	r1, [pc, #384]	; (27fb0 <z_impl_k_mutex_lock+0x1a4>)
   27e30:	4860      	ldr	r0, [pc, #384]	; (27fb4 <z_impl_k_mutex_lock+0x1a8>)
   27e32:	f006 f9c3 	bl	2e1bc <printk>
   27e36:	495c      	ldr	r1, [pc, #368]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27e38:	485f      	ldr	r0, [pc, #380]	; (27fb8 <z_impl_k_mutex_lock+0x1ac>)
   27e3a:	f006 f9bf 	bl	2e1bc <printk>
   27e3e:	215c      	movs	r1, #92	; 0x5c
   27e40:	485a      	ldr	r0, [pc, #360]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27e42:	f006 fcbc 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27e46:	4858      	ldr	r0, [pc, #352]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27e48:	f001 ff68 	bl	29d1c <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   27e4c:	68e3      	ldr	r3, [r4, #12]
   27e4e:	4a5b      	ldr	r2, [pc, #364]	; (27fbc <z_impl_k_mutex_lock+0x1b0>)
   27e50:	b1f3      	cbz	r3, 27e90 <z_impl_k_mutex_lock+0x84>
   27e52:	68a0      	ldr	r0, [r4, #8]
   27e54:	6891      	ldr	r1, [r2, #8]
   27e56:	4288      	cmp	r0, r1
   27e58:	d03a      	beq.n	27ed0 <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   27e5a:	2e00      	cmp	r6, #0
   27e5c:	d13a      	bne.n	27ed4 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e5e:	4852      	ldr	r0, [pc, #328]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27e60:	f001 ff4c 	bl	29cfc <z_spin_unlock_valid>
   27e64:	b968      	cbnz	r0, 27e82 <z_impl_k_mutex_lock+0x76>
   27e66:	2384      	movs	r3, #132	; 0x84
   27e68:	4a50      	ldr	r2, [pc, #320]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27e6a:	4955      	ldr	r1, [pc, #340]	; (27fc0 <z_impl_k_mutex_lock+0x1b4>)
   27e6c:	4851      	ldr	r0, [pc, #324]	; (27fb4 <z_impl_k_mutex_lock+0x1a8>)
   27e6e:	f006 f9a5 	bl	2e1bc <printk>
   27e72:	494d      	ldr	r1, [pc, #308]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27e74:	4853      	ldr	r0, [pc, #332]	; (27fc4 <z_impl_k_mutex_lock+0x1b8>)
   27e76:	f006 f9a1 	bl	2e1bc <printk>
   27e7a:	2184      	movs	r1, #132	; 0x84
   27e7c:	484b      	ldr	r0, [pc, #300]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27e7e:	f006 fc9e 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27e82:	f385 8811 	msr	BASEPRI, r5
   27e86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   27e8a:	f06f 000f 	mvn.w	r0, #15
   27e8e:	e01e      	b.n	27ece <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   27e90:	6891      	ldr	r1, [r2, #8]
   27e92:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   27e96:	3301      	adds	r3, #1
   27e98:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   27e9a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   27e9c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   27e9e:	60a3      	str	r3, [r4, #8]
   27ea0:	4841      	ldr	r0, [pc, #260]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27ea2:	f001 ff2b 	bl	29cfc <z_spin_unlock_valid>
   27ea6:	b968      	cbnz	r0, 27ec4 <z_impl_k_mutex_lock+0xb8>
   27ea8:	2384      	movs	r3, #132	; 0x84
   27eaa:	4a40      	ldr	r2, [pc, #256]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27eac:	4944      	ldr	r1, [pc, #272]	; (27fc0 <z_impl_k_mutex_lock+0x1b4>)
   27eae:	4841      	ldr	r0, [pc, #260]	; (27fb4 <z_impl_k_mutex_lock+0x1a8>)
   27eb0:	f006 f984 	bl	2e1bc <printk>
   27eb4:	493c      	ldr	r1, [pc, #240]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27eb6:	4843      	ldr	r0, [pc, #268]	; (27fc4 <z_impl_k_mutex_lock+0x1b8>)
   27eb8:	f006 f980 	bl	2e1bc <printk>
   27ebc:	2184      	movs	r1, #132	; 0x84
   27ebe:	483b      	ldr	r0, [pc, #236]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27ec0:	f006 fc7d 	bl	2e7be <assert_post_action>
   27ec4:	f385 8811 	msr	BASEPRI, r5
   27ec8:	f3bf 8f6f 	isb	sy
		return 0;
   27ecc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   27ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   27ed0:	6921      	ldr	r1, [r4, #16]
   27ed2:	e7e0      	b.n	27e96 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   27ed4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27ed8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   27edc:	4299      	cmp	r1, r3
   27ede:	bfa8      	it	ge
   27ee0:	4619      	movge	r1, r3
   27ee2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   27ee6:	4299      	cmp	r1, r3
   27ee8:	da40      	bge.n	27f6c <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   27eea:	f001 f9cf 	bl	2928c <z_set_prio>
   27eee:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   27ef0:	4633      	mov	r3, r6
   27ef2:	4622      	mov	r2, r4
   27ef4:	4629      	mov	r1, r5
   27ef6:	482c      	ldr	r0, [pc, #176]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27ef8:	f001 f99a 	bl	29230 <z_pend_curr>
	if (got_mutex == 0) {
   27efc:	2800      	cmp	r0, #0
   27efe:	d0e6      	beq.n	27ece <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   27f00:	f04f 0320 	mov.w	r3, #32
   27f04:	f3ef 8511 	mrs	r5, BASEPRI
   27f08:	f383 8811 	msr	BASEPRI, r3
   27f0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f10:	4825      	ldr	r0, [pc, #148]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f12:	f001 fee5 	bl	29ce0 <z_spin_lock_valid>
   27f16:	b968      	cbnz	r0, 27f34 <z_impl_k_mutex_lock+0x128>
   27f18:	235c      	movs	r3, #92	; 0x5c
   27f1a:	4a24      	ldr	r2, [pc, #144]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27f1c:	4924      	ldr	r1, [pc, #144]	; (27fb0 <z_impl_k_mutex_lock+0x1a4>)
   27f1e:	4825      	ldr	r0, [pc, #148]	; (27fb4 <z_impl_k_mutex_lock+0x1a8>)
   27f20:	f006 f94c 	bl	2e1bc <printk>
   27f24:	4920      	ldr	r1, [pc, #128]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f26:	4824      	ldr	r0, [pc, #144]	; (27fb8 <z_impl_k_mutex_lock+0x1ac>)
   27f28:	f006 f948 	bl	2e1bc <printk>
   27f2c:	215c      	movs	r1, #92	; 0x5c
   27f2e:	481f      	ldr	r0, [pc, #124]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27f30:	f006 fc45 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   27f34:	481c      	ldr	r0, [pc, #112]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f36:	f001 fef1 	bl	29d1c <z_spin_lock_set_owner>
	return list->head == list;
   27f3a:	6823      	ldr	r3, [r4, #0]
   27f3c:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f3e:	429c      	cmp	r4, r3
   27f40:	d007      	beq.n	27f52 <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   27f42:	b133      	cbz	r3, 27f52 <z_impl_k_mutex_lock+0x146>
   27f44:	f993 300e 	ldrsb.w	r3, [r3, #14]
   27f48:	4299      	cmp	r1, r3
   27f4a:	bfa8      	it	ge
   27f4c:	4619      	movge	r1, r3
   27f4e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   27f52:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   27f54:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27f58:	4299      	cmp	r1, r3
   27f5a:	d109      	bne.n	27f70 <z_impl_k_mutex_lock+0x164>
	if (resched) {
   27f5c:	b16f      	cbz	r7, 27f7a <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   27f5e:	4629      	mov	r1, r5
   27f60:	4811      	ldr	r0, [pc, #68]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f62:	f000 fb51 	bl	28608 <z_reschedule>
	return -EAGAIN;
   27f66:	f06f 000a 	mvn.w	r0, #10
   27f6a:	e7b0      	b.n	27ece <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   27f6c:	2700      	movs	r7, #0
   27f6e:	e7bf      	b.n	27ef0 <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   27f70:	f001 f98c 	bl	2928c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   27f74:	2800      	cmp	r0, #0
   27f76:	d1f2      	bne.n	27f5e <z_impl_k_mutex_lock+0x152>
   27f78:	e7f0      	b.n	27f5c <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27f7a:	480b      	ldr	r0, [pc, #44]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f7c:	f001 febe 	bl	29cfc <z_spin_unlock_valid>
   27f80:	b968      	cbnz	r0, 27f9e <z_impl_k_mutex_lock+0x192>
   27f82:	2384      	movs	r3, #132	; 0x84
   27f84:	4a09      	ldr	r2, [pc, #36]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27f86:	490e      	ldr	r1, [pc, #56]	; (27fc0 <z_impl_k_mutex_lock+0x1b4>)
   27f88:	480a      	ldr	r0, [pc, #40]	; (27fb4 <z_impl_k_mutex_lock+0x1a8>)
   27f8a:	f006 f917 	bl	2e1bc <printk>
   27f8e:	4906      	ldr	r1, [pc, #24]	; (27fa8 <z_impl_k_mutex_lock+0x19c>)
   27f90:	480c      	ldr	r0, [pc, #48]	; (27fc4 <z_impl_k_mutex_lock+0x1b8>)
   27f92:	f006 f913 	bl	2e1bc <printk>
   27f96:	2184      	movs	r1, #132	; 0x84
   27f98:	4804      	ldr	r0, [pc, #16]	; (27fac <z_impl_k_mutex_lock+0x1a0>)
   27f9a:	f006 fc10 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   27f9e:	f385 8811 	msr	BASEPRI, r5
   27fa2:	f3bf 8f6f 	isb	sy
   27fa6:	e7de      	b.n	27f66 <z_impl_k_mutex_lock+0x15a>
   27fa8:	2002731c 	.word	0x2002731c
   27fac:	00035cb3 	.word	0x00035cb3
   27fb0:	00035cd9 	.word	0x00035cd9
   27fb4:	00035920 	.word	0x00035920
   27fb8:	00035cee 	.word	0x00035cee
   27fbc:	20027320 	.word	0x20027320
   27fc0:	00035d06 	.word	0x00035d06
   27fc4:	00035d1d 	.word	0x00035d1d

00027fc8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   27fc8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   27fca:	6883      	ldr	r3, [r0, #8]
{
   27fcc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   27fce:	2b00      	cmp	r3, #0
   27fd0:	f000 8091 	beq.w	280f6 <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   27fd4:	4d4b      	ldr	r5, [pc, #300]	; (28104 <z_impl_k_mutex_unlock+0x13c>)
   27fd6:	68aa      	ldr	r2, [r5, #8]
   27fd8:	4293      	cmp	r3, r2
   27fda:	f040 808f 	bne.w	280fc <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   27fde:	68c3      	ldr	r3, [r0, #12]
   27fe0:	b94b      	cbnz	r3, 27ff6 <z_impl_k_mutex_unlock+0x2e>
   27fe2:	4949      	ldr	r1, [pc, #292]	; (28108 <z_impl_k_mutex_unlock+0x140>)
   27fe4:	4849      	ldr	r0, [pc, #292]	; (2810c <z_impl_k_mutex_unlock+0x144>)
   27fe6:	23e6      	movs	r3, #230	; 0xe6
   27fe8:	4a49      	ldr	r2, [pc, #292]	; (28110 <z_impl_k_mutex_unlock+0x148>)
   27fea:	f006 f8e7 	bl	2e1bc <printk>
   27fee:	21e6      	movs	r1, #230	; 0xe6
   27ff0:	4847      	ldr	r0, [pc, #284]	; (28110 <z_impl_k_mutex_unlock+0x148>)
   27ff2:	f006 fbe4 	bl	2e7be <assert_post_action>
   27ff6:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   27ffa:	b173      	cbz	r3, 2801a <z_impl_k_mutex_unlock+0x52>
   27ffc:	4945      	ldr	r1, [pc, #276]	; (28114 <z_impl_k_mutex_unlock+0x14c>)
   27ffe:	f240 130b 	movw	r3, #267	; 0x10b
   28002:	4a45      	ldr	r2, [pc, #276]	; (28118 <z_impl_k_mutex_unlock+0x150>)
   28004:	4841      	ldr	r0, [pc, #260]	; (2810c <z_impl_k_mutex_unlock+0x144>)
   28006:	f006 f8d9 	bl	2e1bc <printk>
   2800a:	4844      	ldr	r0, [pc, #272]	; (2811c <z_impl_k_mutex_unlock+0x154>)
   2800c:	f006 f8d6 	bl	2e1bc <printk>
   28010:	f240 110b 	movw	r1, #267	; 0x10b
   28014:	4840      	ldr	r0, [pc, #256]	; (28118 <z_impl_k_mutex_unlock+0x150>)
   28016:	f006 fbd2 	bl	2e7be <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2801a:	68ab      	ldr	r3, [r5, #8]
   2801c:	7bdb      	ldrb	r3, [r3, #15]
   2801e:	2b01      	cmp	r3, #1
   28020:	d10e      	bne.n	28040 <z_impl_k_mutex_unlock+0x78>
   28022:	493f      	ldr	r1, [pc, #252]	; (28120 <z_impl_k_mutex_unlock+0x158>)
   28024:	f44f 7386 	mov.w	r3, #268	; 0x10c
   28028:	4a3b      	ldr	r2, [pc, #236]	; (28118 <z_impl_k_mutex_unlock+0x150>)
   2802a:	4838      	ldr	r0, [pc, #224]	; (2810c <z_impl_k_mutex_unlock+0x144>)
   2802c:	f006 f8c6 	bl	2e1bc <printk>
   28030:	483a      	ldr	r0, [pc, #232]	; (2811c <z_impl_k_mutex_unlock+0x154>)
   28032:	f006 f8c3 	bl	2e1bc <printk>
   28036:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2803a:	4837      	ldr	r0, [pc, #220]	; (28118 <z_impl_k_mutex_unlock+0x150>)
   2803c:	f006 fbbf 	bl	2e7be <assert_post_action>

	--_current->base.sched_locked;
   28040:	68aa      	ldr	r2, [r5, #8]
   28042:	7bd3      	ldrb	r3, [r2, #15]
   28044:	3b01      	subs	r3, #1
   28046:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   28048:	68e3      	ldr	r3, [r4, #12]
   2804a:	2b01      	cmp	r3, #1
   2804c:	d005      	beq.n	2805a <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   2804e:	3b01      	subs	r3, #1
   28050:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   28052:	f000 fc35 	bl	288c0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   28056:	2000      	movs	r0, #0
}
   28058:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2805a:	f04f 0320 	mov.w	r3, #32
   2805e:	f3ef 8511 	mrs	r5, BASEPRI
   28062:	f383 8811 	msr	BASEPRI, r3
   28066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2806a:	482e      	ldr	r0, [pc, #184]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   2806c:	f001 fe38 	bl	29ce0 <z_spin_lock_valid>
   28070:	b968      	cbnz	r0, 2808e <z_impl_k_mutex_unlock+0xc6>
   28072:	235c      	movs	r3, #92	; 0x5c
   28074:	4a2c      	ldr	r2, [pc, #176]	; (28128 <z_impl_k_mutex_unlock+0x160>)
   28076:	492d      	ldr	r1, [pc, #180]	; (2812c <z_impl_k_mutex_unlock+0x164>)
   28078:	4824      	ldr	r0, [pc, #144]	; (2810c <z_impl_k_mutex_unlock+0x144>)
   2807a:	f006 f89f 	bl	2e1bc <printk>
   2807e:	4929      	ldr	r1, [pc, #164]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   28080:	482b      	ldr	r0, [pc, #172]	; (28130 <z_impl_k_mutex_unlock+0x168>)
   28082:	f006 f89b 	bl	2e1bc <printk>
   28086:	215c      	movs	r1, #92	; 0x5c
   28088:	4827      	ldr	r0, [pc, #156]	; (28128 <z_impl_k_mutex_unlock+0x160>)
   2808a:	f006 fb98 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2808e:	4825      	ldr	r0, [pc, #148]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   28090:	f001 fe44 	bl	29d1c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   28094:	68a0      	ldr	r0, [r4, #8]
   28096:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   28098:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2809c:	4299      	cmp	r1, r3
   2809e:	d001      	beq.n	280a4 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   280a0:	f001 f8f4 	bl	2928c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   280a4:	4620      	mov	r0, r4
   280a6:	f001 f981 	bl	293ac <z_unpend_first_thread>
	mutex->owner = new_owner;
   280aa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   280ac:	b158      	cbz	r0, 280c6 <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
   280ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
   280b2:	6122      	str	r2, [r4, #16]
   280b4:	2200      	movs	r2, #0
   280b6:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   280b8:	f000 fcc8 	bl	28a4c <z_ready_thread>
		z_reschedule(&lock, key);
   280bc:	4629      	mov	r1, r5
   280be:	4819      	ldr	r0, [pc, #100]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   280c0:	f000 faa2 	bl	28608 <z_reschedule>
   280c4:	e7c5      	b.n	28052 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   280c6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   280c8:	4816      	ldr	r0, [pc, #88]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   280ca:	f001 fe17 	bl	29cfc <z_spin_unlock_valid>
   280ce:	b968      	cbnz	r0, 280ec <z_impl_k_mutex_unlock+0x124>
   280d0:	2384      	movs	r3, #132	; 0x84
   280d2:	4a15      	ldr	r2, [pc, #84]	; (28128 <z_impl_k_mutex_unlock+0x160>)
   280d4:	4917      	ldr	r1, [pc, #92]	; (28134 <z_impl_k_mutex_unlock+0x16c>)
   280d6:	480d      	ldr	r0, [pc, #52]	; (2810c <z_impl_k_mutex_unlock+0x144>)
   280d8:	f006 f870 	bl	2e1bc <printk>
   280dc:	4911      	ldr	r1, [pc, #68]	; (28124 <z_impl_k_mutex_unlock+0x15c>)
   280de:	4816      	ldr	r0, [pc, #88]	; (28138 <z_impl_k_mutex_unlock+0x170>)
   280e0:	f006 f86c 	bl	2e1bc <printk>
   280e4:	2184      	movs	r1, #132	; 0x84
   280e6:	4810      	ldr	r0, [pc, #64]	; (28128 <z_impl_k_mutex_unlock+0x160>)
   280e8:	f006 fb69 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   280ec:	f385 8811 	msr	BASEPRI, r5
   280f0:	f3bf 8f6f 	isb	sy
   280f4:	e7ad      	b.n	28052 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   280f6:	f06f 0015 	mvn.w	r0, #21
   280fa:	e7ad      	b.n	28058 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   280fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28100:	e7aa      	b.n	28058 <z_impl_k_mutex_unlock+0x90>
   28102:	bf00      	nop
   28104:	20027320 	.word	0x20027320
   28108:	00037256 	.word	0x00037256
   2810c:	00035920 	.word	0x00035920
   28110:	00037234 	.word	0x00037234
   28114:	00037298 	.word	0x00037298
   28118:	0003726d 	.word	0x0003726d
   2811c:	00035d7e 	.word	0x00035d7e
   28120:	000372aa 	.word	0x000372aa
   28124:	2002731c 	.word	0x2002731c
   28128:	00035cb3 	.word	0x00035cb3
   2812c:	00035cd9 	.word	0x00035cd9
   28130:	00035cee 	.word	0x00035cee
   28134:	00035d06 	.word	0x00035d06
   28138:	00035d1d 	.word	0x00035d1d

0002813c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2813c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28140:	4604      	mov	r4, r0
   28142:	460e      	mov	r6, r1
   28144:	4690      	mov	r8, r2
   28146:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28148:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2814c:	f04f 0320 	mov.w	r3, #32
   28150:	f3ef 8711 	mrs	r7, BASEPRI
   28154:	f383 8811 	msr	BASEPRI, r3
   28158:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2815c:	4628      	mov	r0, r5
   2815e:	f001 fdbf 	bl	29ce0 <z_spin_lock_valid>
   28162:	b968      	cbnz	r0, 28180 <queue_insert+0x44>
   28164:	235c      	movs	r3, #92	; 0x5c
   28166:	4a39      	ldr	r2, [pc, #228]	; (2824c <queue_insert+0x110>)
   28168:	4939      	ldr	r1, [pc, #228]	; (28250 <queue_insert+0x114>)
   2816a:	483a      	ldr	r0, [pc, #232]	; (28254 <queue_insert+0x118>)
   2816c:	f006 f826 	bl	2e1bc <printk>
   28170:	4629      	mov	r1, r5
   28172:	4839      	ldr	r0, [pc, #228]	; (28258 <queue_insert+0x11c>)
   28174:	f006 f822 	bl	2e1bc <printk>
   28178:	215c      	movs	r1, #92	; 0x5c
   2817a:	4834      	ldr	r0, [pc, #208]	; (2824c <queue_insert+0x110>)
   2817c:	f006 fb1f 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28180:	4628      	mov	r0, r5
   28182:	f001 fdcb 	bl	29d1c <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28186:	f104 000c 	add.w	r0, r4, #12
   2818a:	f001 f90f 	bl	293ac <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2818e:	b158      	cbz	r0, 281a8 <queue_insert+0x6c>
   28190:	2400      	movs	r4, #0
   28192:	f8c0 8014 	str.w	r8, [r0, #20]
   28196:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   28198:	f000 fc58 	bl	28a4c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2819c:	4628      	mov	r0, r5
   2819e:	4639      	mov	r1, r7
   281a0:	f000 fa32 	bl	28608 <z_reschedule>
	return 0;
   281a4:	2000      	movs	r0, #0
   281a6:	e01e      	b.n	281e6 <queue_insert+0xaa>
	if (alloc) {
   281a8:	f1b9 0f00 	cmp.w	r9, #0
   281ac:	d02d      	beq.n	2820a <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   281ae:	2008      	movs	r0, #8
   281b0:	f7ff fc98 	bl	27ae4 <z_thread_malloc>
		if (anode == NULL) {
   281b4:	b9c8      	cbnz	r0, 281ea <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   281b6:	4628      	mov	r0, r5
   281b8:	f001 fda0 	bl	29cfc <z_spin_unlock_valid>
   281bc:	b968      	cbnz	r0, 281da <queue_insert+0x9e>
   281be:	2384      	movs	r3, #132	; 0x84
   281c0:	4a22      	ldr	r2, [pc, #136]	; (2824c <queue_insert+0x110>)
   281c2:	4926      	ldr	r1, [pc, #152]	; (2825c <queue_insert+0x120>)
   281c4:	4823      	ldr	r0, [pc, #140]	; (28254 <queue_insert+0x118>)
   281c6:	f005 fff9 	bl	2e1bc <printk>
   281ca:	4629      	mov	r1, r5
   281cc:	4824      	ldr	r0, [pc, #144]	; (28260 <queue_insert+0x124>)
   281ce:	f005 fff5 	bl	2e1bc <printk>
   281d2:	2184      	movs	r1, #132	; 0x84
   281d4:	481d      	ldr	r0, [pc, #116]	; (2824c <queue_insert+0x110>)
   281d6:	f006 faf2 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   281da:	f387 8811 	msr	BASEPRI, r7
   281de:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   281e2:	f06f 000b 	mvn.w	r0, #11
}
   281e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   281ea:	2301      	movs	r3, #1
		anode->data = data;
   281ec:	f8c0 8004 	str.w	r8, [r0, #4]
   281f0:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   281f2:	6803      	ldr	r3, [r0, #0]
   281f4:	f003 0303 	and.w	r3, r3, #3
   281f8:	b95e      	cbnz	r6, 28212 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   281fa:	6822      	ldr	r2, [r4, #0]
   281fc:	4313      	orrs	r3, r2
   281fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28200:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   28202:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28204:	b973      	cbnz	r3, 28224 <queue_insert+0xe8>
	list->tail = node;
   28206:	6060      	str	r0, [r4, #4]
   28208:	e00c      	b.n	28224 <queue_insert+0xe8>
	node->next_and_flags = flags;
   2820a:	f8c8 9000 	str.w	r9, [r8]
   2820e:	4640      	mov	r0, r8
   28210:	e7ef      	b.n	281f2 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28212:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28214:	f032 0203 	bics.w	r2, r2, #3
   28218:	d110      	bne.n	2823c <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   2821a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2821c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2821e:	b93a      	cbnz	r2, 28230 <queue_insert+0xf4>
	list->head = node;
   28220:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   28224:	2104      	movs	r1, #4
   28226:	f104 0014 	add.w	r0, r4, #20
   2822a:	f00b fa9a 	bl	33762 <z_handle_obj_poll_events>
   2822e:	e7b5      	b.n	2819c <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28230:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28232:	f003 0303 	and.w	r3, r3, #3
   28236:	4303      	orrs	r3, r0
   28238:	6013      	str	r3, [r2, #0]
   2823a:	e7e4      	b.n	28206 <queue_insert+0xca>
   2823c:	4313      	orrs	r3, r2
   2823e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28240:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28242:	f003 0303 	and.w	r3, r3, #3
   28246:	4318      	orrs	r0, r3
   28248:	6030      	str	r0, [r6, #0]
   2824a:	e7eb      	b.n	28224 <queue_insert+0xe8>
   2824c:	00035cb3 	.word	0x00035cb3
   28250:	00035cd9 	.word	0x00035cd9
   28254:	00035920 	.word	0x00035920
   28258:	00035cee 	.word	0x00035cee
   2825c:	00035d06 	.word	0x00035d06
   28260:	00035d1d 	.word	0x00035d1d

00028264 <z_impl_k_queue_cancel_wait>:
{
   28264:	b570      	push	{r4, r5, r6, lr}
   28266:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28268:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   2826c:	f04f 0320 	mov.w	r3, #32
   28270:	f3ef 8611 	mrs	r6, BASEPRI
   28274:	f383 8811 	msr	BASEPRI, r3
   28278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2827c:	4620      	mov	r0, r4
   2827e:	f001 fd2f 	bl	29ce0 <z_spin_lock_valid>
   28282:	b968      	cbnz	r0, 282a0 <z_impl_k_queue_cancel_wait+0x3c>
   28284:	235c      	movs	r3, #92	; 0x5c
   28286:	4a12      	ldr	r2, [pc, #72]	; (282d0 <z_impl_k_queue_cancel_wait+0x6c>)
   28288:	4912      	ldr	r1, [pc, #72]	; (282d4 <z_impl_k_queue_cancel_wait+0x70>)
   2828a:	4813      	ldr	r0, [pc, #76]	; (282d8 <z_impl_k_queue_cancel_wait+0x74>)
   2828c:	f005 ff96 	bl	2e1bc <printk>
   28290:	4621      	mov	r1, r4
   28292:	4812      	ldr	r0, [pc, #72]	; (282dc <z_impl_k_queue_cancel_wait+0x78>)
   28294:	f005 ff92 	bl	2e1bc <printk>
   28298:	215c      	movs	r1, #92	; 0x5c
   2829a:	480d      	ldr	r0, [pc, #52]	; (282d0 <z_impl_k_queue_cancel_wait+0x6c>)
   2829c:	f006 fa8f 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   282a0:	4620      	mov	r0, r4
   282a2:	f001 fd3b 	bl	29d1c <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   282a6:	f105 000c 	add.w	r0, r5, #12
   282aa:	f001 f87f 	bl	293ac <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   282ae:	b120      	cbz	r0, 282ba <z_impl_k_queue_cancel_wait+0x56>
   282b0:	2200      	movs	r2, #0
   282b2:	6702      	str	r2, [r0, #112]	; 0x70
   282b4:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   282b6:	f000 fbc9 	bl	28a4c <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   282ba:	f105 0014 	add.w	r0, r5, #20
   282be:	2108      	movs	r1, #8
   282c0:	f00b fa4f 	bl	33762 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   282c4:	4631      	mov	r1, r6
   282c6:	4620      	mov	r0, r4
}
   282c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   282cc:	f000 b99c 	b.w	28608 <z_reschedule>
   282d0:	00035cb3 	.word	0x00035cb3
   282d4:	00035cd9 	.word	0x00035cd9
   282d8:	00035920 	.word	0x00035920
   282dc:	00035cee 	.word	0x00035cee

000282e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   282e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   282e4:	4606      	mov	r6, r0
   282e6:	4688      	mov	r8, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   282e8:	f100 0408 	add.w	r4, r0, #8
   282ec:	f04f 0320 	mov.w	r3, #32
   282f0:	f3ef 8711 	mrs	r7, BASEPRI
   282f4:	f383 8811 	msr	BASEPRI, r3
   282f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282fc:	4620      	mov	r0, r4
   282fe:	f001 fcef 	bl	29ce0 <z_spin_lock_valid>
   28302:	b968      	cbnz	r0, 28320 <z_impl_k_queue_get+0x40>
   28304:	235c      	movs	r3, #92	; 0x5c
   28306:	4a24      	ldr	r2, [pc, #144]	; (28398 <z_impl_k_queue_get+0xb8>)
   28308:	4924      	ldr	r1, [pc, #144]	; (2839c <z_impl_k_queue_get+0xbc>)
   2830a:	4825      	ldr	r0, [pc, #148]	; (283a0 <z_impl_k_queue_get+0xc0>)
   2830c:	f005 ff56 	bl	2e1bc <printk>
   28310:	4621      	mov	r1, r4
   28312:	4824      	ldr	r0, [pc, #144]	; (283a4 <z_impl_k_queue_get+0xc4>)
   28314:	f005 ff52 	bl	2e1bc <printk>
   28318:	215c      	movs	r1, #92	; 0x5c
   2831a:	481f      	ldr	r0, [pc, #124]	; (28398 <z_impl_k_queue_get+0xb8>)
   2831c:	f006 fa4f 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28320:	4620      	mov	r0, r4
   28322:	f001 fcfb 	bl	29d1c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   28326:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   28328:	b32d      	cbz	r5, 28376 <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2832a:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2832c:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2832e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   28332:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   28334:	4628      	mov	r0, r5
	list->head = node;
   28336:	6033      	str	r3, [r6, #0]
	list->tail = node;
   28338:	bf08      	it	eq
   2833a:	6073      	streq	r3, [r6, #4]
   2833c:	2101      	movs	r1, #1
   2833e:	f00b f88e 	bl	3345e <z_queue_node_peek>
   28342:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28344:	4620      	mov	r0, r4
   28346:	f001 fcd9 	bl	29cfc <z_spin_unlock_valid>
   2834a:	b968      	cbnz	r0, 28368 <z_impl_k_queue_get+0x88>
   2834c:	2384      	movs	r3, #132	; 0x84
   2834e:	4a12      	ldr	r2, [pc, #72]	; (28398 <z_impl_k_queue_get+0xb8>)
   28350:	4915      	ldr	r1, [pc, #84]	; (283a8 <z_impl_k_queue_get+0xc8>)
   28352:	4813      	ldr	r0, [pc, #76]	; (283a0 <z_impl_k_queue_get+0xc0>)
   28354:	f005 ff32 	bl	2e1bc <printk>
   28358:	4621      	mov	r1, r4
   2835a:	4814      	ldr	r0, [pc, #80]	; (283ac <z_impl_k_queue_get+0xcc>)
   2835c:	f005 ff2e 	bl	2e1bc <printk>
   28360:	2184      	movs	r1, #132	; 0x84
   28362:	480d      	ldr	r0, [pc, #52]	; (28398 <z_impl_k_queue_get+0xb8>)
   28364:	f006 fa2b 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28368:	f387 8811 	msr	BASEPRI, r7
   2836c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   28370:	4628      	mov	r0, r5
   28372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28376:	f1b8 0f00 	cmp.w	r8, #0
   2837a:	d0e3      	beq.n	28344 <z_impl_k_queue_get+0x64>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2837c:	4643      	mov	r3, r8
   2837e:	f106 020c 	add.w	r2, r6, #12
   28382:	4639      	mov	r1, r7
   28384:	4620      	mov	r0, r4
   28386:	f000 ff53 	bl	29230 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2838a:	2800      	cmp	r0, #0
   2838c:	d1f0      	bne.n	28370 <z_impl_k_queue_get+0x90>
   2838e:	4b08      	ldr	r3, [pc, #32]	; (283b0 <z_impl_k_queue_get+0xd0>)
   28390:	689b      	ldr	r3, [r3, #8]
   28392:	695d      	ldr	r5, [r3, #20]
   28394:	e7ec      	b.n	28370 <z_impl_k_queue_get+0x90>
   28396:	bf00      	nop
   28398:	00035cb3 	.word	0x00035cb3
   2839c:	00035cd9 	.word	0x00035cd9
   283a0:	00035920 	.word	0x00035920
   283a4:	00035cee 	.word	0x00035cee
   283a8:	00035d06 	.word	0x00035d06
   283ac:	00035d1d 	.word	0x00035d1d
   283b0:	20027320 	.word	0x20027320

000283b4 <pended_on.isra.18>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   283b4:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   283b6:	b510      	push	{r4, lr}
   283b8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   283ba:	b95b      	cbnz	r3, 283d4 <pended_on.isra.18+0x20>
   283bc:	4906      	ldr	r1, [pc, #24]	; (283d8 <pended_on.isra.18+0x24>)
   283be:	4807      	ldr	r0, [pc, #28]	; (283dc <pended_on.isra.18+0x28>)
   283c0:	f240 13d9 	movw	r3, #473	; 0x1d9
   283c4:	4a06      	ldr	r2, [pc, #24]	; (283e0 <pended_on.isra.18+0x2c>)
   283c6:	f005 fef9 	bl	2e1bc <printk>
   283ca:	f240 11d9 	movw	r1, #473	; 0x1d9
   283ce:	4804      	ldr	r0, [pc, #16]	; (283e0 <pended_on.isra.18+0x2c>)
   283d0:	f006 f9f5 	bl	2e7be <assert_post_action>

	return thread->base.pended_on;
}
   283d4:	6820      	ldr	r0, [r4, #0]
   283d6:	bd10      	pop	{r4, pc}
   283d8:	0003732c 	.word	0x0003732c
   283dc:	00035920 	.word	0x00035920
   283e0:	0003730a 	.word	0x0003730a

000283e4 <z_reset_time_slice>:
{
   283e4:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   283e6:	4c08      	ldr	r4, [pc, #32]	; (28408 <z_reset_time_slice+0x24>)
   283e8:	6823      	ldr	r3, [r4, #0]
   283ea:	b15b      	cbz	r3, 28404 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   283ec:	f7f0 f822 	bl	18434 <z_clock_elapsed>
   283f0:	6823      	ldr	r3, [r4, #0]
   283f2:	4a06      	ldr	r2, [pc, #24]	; (2840c <z_reset_time_slice+0x28>)
   283f4:	4418      	add	r0, r3
   283f6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   283f8:	2100      	movs	r1, #0
}
   283fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   283fe:	4618      	mov	r0, r3
   28400:	f001 bf7a 	b.w	2a2f8 <z_set_timeout_expiry>
}
   28404:	bd10      	pop	{r4, pc}
   28406:	bf00      	nop
   28408:	20027360 	.word	0x20027360
   2840c:	20027320 	.word	0x20027320

00028410 <k_sched_time_slice_set>:
{
   28410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28412:	4607      	mov	r7, r0
   28414:	460d      	mov	r5, r1
	__asm__ volatile(
   28416:	f04f 0320 	mov.w	r3, #32
   2841a:	f3ef 8411 	mrs	r4, BASEPRI
   2841e:	f383 8811 	msr	BASEPRI, r3
   28422:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28426:	4820      	ldr	r0, [pc, #128]	; (284a8 <k_sched_time_slice_set+0x98>)
   28428:	f001 fc5a 	bl	29ce0 <z_spin_lock_valid>
   2842c:	b968      	cbnz	r0, 2844a <k_sched_time_slice_set+0x3a>
   2842e:	235c      	movs	r3, #92	; 0x5c
   28430:	4a1e      	ldr	r2, [pc, #120]	; (284ac <k_sched_time_slice_set+0x9c>)
   28432:	491f      	ldr	r1, [pc, #124]	; (284b0 <k_sched_time_slice_set+0xa0>)
   28434:	481f      	ldr	r0, [pc, #124]	; (284b4 <k_sched_time_slice_set+0xa4>)
   28436:	f005 fec1 	bl	2e1bc <printk>
   2843a:	491b      	ldr	r1, [pc, #108]	; (284a8 <k_sched_time_slice_set+0x98>)
   2843c:	481e      	ldr	r0, [pc, #120]	; (284b8 <k_sched_time_slice_set+0xa8>)
   2843e:	f005 febd 	bl	2e1bc <printk>
   28442:	215c      	movs	r1, #92	; 0x5c
   28444:	4819      	ldr	r0, [pc, #100]	; (284ac <k_sched_time_slice_set+0x9c>)
   28446:	f006 f9ba 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2844a:	4817      	ldr	r0, [pc, #92]	; (284a8 <k_sched_time_slice_set+0x98>)
   2844c:	f001 fc66 	bl	29d1c <z_spin_lock_set_owner>
   28450:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   28454:	2200      	movs	r2, #0
   28456:	f240 30e7 	movw	r0, #999	; 0x3e7
   2845a:	2100      	movs	r1, #0
   2845c:	4b17      	ldr	r3, [pc, #92]	; (284bc <k_sched_time_slice_set+0xac>)
   2845e:	fbe6 0107 	umlal	r0, r1, r6, r7
   28462:	611a      	str	r2, [r3, #16]
   28464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28468:	2300      	movs	r3, #0
   2846a:	f7e5 f981 	bl	d770 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2846e:	4b14      	ldr	r3, [pc, #80]	; (284c0 <k_sched_time_slice_set+0xb0>)
   28470:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   28472:	4b14      	ldr	r3, [pc, #80]	; (284c4 <k_sched_time_slice_set+0xb4>)
   28474:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   28476:	f7ff ffb5 	bl	283e4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2847a:	480b      	ldr	r0, [pc, #44]	; (284a8 <k_sched_time_slice_set+0x98>)
   2847c:	f001 fc3e 	bl	29cfc <z_spin_unlock_valid>
   28480:	b968      	cbnz	r0, 2849e <k_sched_time_slice_set+0x8e>
   28482:	2384      	movs	r3, #132	; 0x84
   28484:	4a09      	ldr	r2, [pc, #36]	; (284ac <k_sched_time_slice_set+0x9c>)
   28486:	4910      	ldr	r1, [pc, #64]	; (284c8 <k_sched_time_slice_set+0xb8>)
   28488:	480a      	ldr	r0, [pc, #40]	; (284b4 <k_sched_time_slice_set+0xa4>)
   2848a:	f005 fe97 	bl	2e1bc <printk>
   2848e:	4906      	ldr	r1, [pc, #24]	; (284a8 <k_sched_time_slice_set+0x98>)
   28490:	480e      	ldr	r0, [pc, #56]	; (284cc <k_sched_time_slice_set+0xbc>)
   28492:	f005 fe93 	bl	2e1bc <printk>
   28496:	2184      	movs	r1, #132	; 0x84
   28498:	4804      	ldr	r0, [pc, #16]	; (284ac <k_sched_time_slice_set+0x9c>)
   2849a:	f006 f990 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2849e:	f384 8811 	msr	BASEPRI, r4
   284a2:	f3bf 8f6f 	isb	sy
}
   284a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   284a8:	20027358 	.word	0x20027358
   284ac:	00035cb3 	.word	0x00035cb3
   284b0:	00035cd9 	.word	0x00035cd9
   284b4:	00035920 	.word	0x00035920
   284b8:	00035cee 	.word	0x00035cee
   284bc:	20027320 	.word	0x20027320
   284c0:	20027360 	.word	0x20027360
   284c4:	2002735c 	.word	0x2002735c
   284c8:	00035d06 	.word	0x00035d06
   284cc:	00035d1d 	.word	0x00035d1d

000284d0 <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   284d0:	b538      	push	{r3, r4, r5, lr}
   284d2:	4604      	mov	r4, r0
	__asm__ volatile(
   284d4:	f04f 0320 	mov.w	r3, #32
   284d8:	f3ef 8511 	mrs	r5, BASEPRI
   284dc:	f383 8811 	msr	BASEPRI, r3
   284e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   284e4:	4818      	ldr	r0, [pc, #96]	; (28548 <z_find_first_thread_to_unpend+0x78>)
   284e6:	f001 fbfb 	bl	29ce0 <z_spin_lock_valid>
   284ea:	b968      	cbnz	r0, 28508 <z_find_first_thread_to_unpend+0x38>
   284ec:	235c      	movs	r3, #92	; 0x5c
   284ee:	4a17      	ldr	r2, [pc, #92]	; (2854c <z_find_first_thread_to_unpend+0x7c>)
   284f0:	4917      	ldr	r1, [pc, #92]	; (28550 <z_find_first_thread_to_unpend+0x80>)
   284f2:	4818      	ldr	r0, [pc, #96]	; (28554 <z_find_first_thread_to_unpend+0x84>)
   284f4:	f005 fe62 	bl	2e1bc <printk>
   284f8:	4913      	ldr	r1, [pc, #76]	; (28548 <z_find_first_thread_to_unpend+0x78>)
   284fa:	4817      	ldr	r0, [pc, #92]	; (28558 <z_find_first_thread_to_unpend+0x88>)
   284fc:	f005 fe5e 	bl	2e1bc <printk>
   28500:	215c      	movs	r1, #92	; 0x5c
   28502:	4812      	ldr	r0, [pc, #72]	; (2854c <z_find_first_thread_to_unpend+0x7c>)
   28504:	f006 f95b 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28508:	480f      	ldr	r0, [pc, #60]	; (28548 <z_find_first_thread_to_unpend+0x78>)
   2850a:	f001 fc07 	bl	29d1c <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   2850e:	4620      	mov	r0, r4
   28510:	f00a ffe7 	bl	334e2 <z_priq_dumb_best>
   28514:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28516:	480c      	ldr	r0, [pc, #48]	; (28548 <z_find_first_thread_to_unpend+0x78>)
   28518:	f001 fbf0 	bl	29cfc <z_spin_unlock_valid>
   2851c:	b968      	cbnz	r0, 2853a <z_find_first_thread_to_unpend+0x6a>
   2851e:	2384      	movs	r3, #132	; 0x84
   28520:	4a0a      	ldr	r2, [pc, #40]	; (2854c <z_find_first_thread_to_unpend+0x7c>)
   28522:	490e      	ldr	r1, [pc, #56]	; (2855c <z_find_first_thread_to_unpend+0x8c>)
   28524:	480b      	ldr	r0, [pc, #44]	; (28554 <z_find_first_thread_to_unpend+0x84>)
   28526:	f005 fe49 	bl	2e1bc <printk>
   2852a:	4907      	ldr	r1, [pc, #28]	; (28548 <z_find_first_thread_to_unpend+0x78>)
   2852c:	480c      	ldr	r0, [pc, #48]	; (28560 <z_find_first_thread_to_unpend+0x90>)
   2852e:	f005 fe45 	bl	2e1bc <printk>
   28532:	2184      	movs	r1, #132	; 0x84
   28534:	4805      	ldr	r0, [pc, #20]	; (2854c <z_find_first_thread_to_unpend+0x7c>)
   28536:	f006 f942 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2853a:	f385 8811 	msr	BASEPRI, r5
   2853e:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   28542:	4620      	mov	r0, r4
   28544:	bd38      	pop	{r3, r4, r5, pc}
   28546:	bf00      	nop
   28548:	20027358 	.word	0x20027358
   2854c:	00035cb3 	.word	0x00035cb3
   28550:	00035cd9 	.word	0x00035cd9
   28554:	00035920 	.word	0x00035920
   28558:	00035cee 	.word	0x00035cee
   2855c:	00035d06 	.word	0x00035d06
   28560:	00035d1d 	.word	0x00035d1d

00028564 <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   28564:	b538      	push	{r3, r4, r5, lr}
   28566:	4604      	mov	r4, r0
	__asm__ volatile(
   28568:	f04f 0320 	mov.w	r3, #32
   2856c:	f3ef 8511 	mrs	r5, BASEPRI
   28570:	f383 8811 	msr	BASEPRI, r3
   28574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28578:	481c      	ldr	r0, [pc, #112]	; (285ec <z_unpend_thread_no_timeout+0x88>)
   2857a:	f001 fbb1 	bl	29ce0 <z_spin_lock_valid>
   2857e:	b968      	cbnz	r0, 2859c <z_unpend_thread_no_timeout+0x38>
   28580:	235c      	movs	r3, #92	; 0x5c
   28582:	4a1b      	ldr	r2, [pc, #108]	; (285f0 <z_unpend_thread_no_timeout+0x8c>)
   28584:	491b      	ldr	r1, [pc, #108]	; (285f4 <z_unpend_thread_no_timeout+0x90>)
   28586:	481c      	ldr	r0, [pc, #112]	; (285f8 <z_unpend_thread_no_timeout+0x94>)
   28588:	f005 fe18 	bl	2e1bc <printk>
   2858c:	4917      	ldr	r1, [pc, #92]	; (285ec <z_unpend_thread_no_timeout+0x88>)
   2858e:	481b      	ldr	r0, [pc, #108]	; (285fc <z_unpend_thread_no_timeout+0x98>)
   28590:	f005 fe14 	bl	2e1bc <printk>
   28594:	215c      	movs	r1, #92	; 0x5c
   28596:	4816      	ldr	r0, [pc, #88]	; (285f0 <z_unpend_thread_no_timeout+0x8c>)
   28598:	f006 f911 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2859c:	4813      	ldr	r0, [pc, #76]	; (285ec <z_unpend_thread_no_timeout+0x88>)
   2859e:	f001 fbbd 	bl	29d1c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   285a2:	f104 0008 	add.w	r0, r4, #8
   285a6:	f7ff ff05 	bl	283b4 <pended_on.isra.18>
   285aa:	4621      	mov	r1, r4
   285ac:	f000 f8e0 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   285b0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   285b2:	480e      	ldr	r0, [pc, #56]	; (285ec <z_unpend_thread_no_timeout+0x88>)
   285b4:	f023 0302 	bic.w	r3, r3, #2
   285b8:	7363      	strb	r3, [r4, #13]
		z_mark_thread_as_not_pending(thread);
		thread->base.pended_on = NULL;
   285ba:	2300      	movs	r3, #0
   285bc:	60a3      	str	r3, [r4, #8]
   285be:	f001 fb9d 	bl	29cfc <z_spin_unlock_valid>
   285c2:	b968      	cbnz	r0, 285e0 <z_unpend_thread_no_timeout+0x7c>
   285c4:	2384      	movs	r3, #132	; 0x84
   285c6:	4a0a      	ldr	r2, [pc, #40]	; (285f0 <z_unpend_thread_no_timeout+0x8c>)
   285c8:	490d      	ldr	r1, [pc, #52]	; (28600 <z_unpend_thread_no_timeout+0x9c>)
   285ca:	480b      	ldr	r0, [pc, #44]	; (285f8 <z_unpend_thread_no_timeout+0x94>)
   285cc:	f005 fdf6 	bl	2e1bc <printk>
   285d0:	4906      	ldr	r1, [pc, #24]	; (285ec <z_unpend_thread_no_timeout+0x88>)
   285d2:	480c      	ldr	r0, [pc, #48]	; (28604 <z_unpend_thread_no_timeout+0xa0>)
   285d4:	f005 fdf2 	bl	2e1bc <printk>
   285d8:	2184      	movs	r1, #132	; 0x84
   285da:	4805      	ldr	r0, [pc, #20]	; (285f0 <z_unpend_thread_no_timeout+0x8c>)
   285dc:	f006 f8ef 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   285e0:	f385 8811 	msr	BASEPRI, r5
   285e4:	f3bf 8f6f 	isb	sy
	}
}
   285e8:	bd38      	pop	{r3, r4, r5, pc}
   285ea:	bf00      	nop
   285ec:	20027358 	.word	0x20027358
   285f0:	00035cb3 	.word	0x00035cb3
   285f4:	00035cd9 	.word	0x00035cd9
   285f8:	00035920 	.word	0x00035920
   285fc:	00035cee 	.word	0x00035cee
   28600:	00035d06 	.word	0x00035d06
   28604:	00035d1d 	.word	0x00035d1d

00028608 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   28608:	b538      	push	{r3, r4, r5, lr}
   2860a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2860c:	460d      	mov	r5, r1
   2860e:	b9c1      	cbnz	r1, 28642 <z_reschedule+0x3a>
   28610:	f3ef 8305 	mrs	r3, IPSR
   28614:	b9ab      	cbnz	r3, 28642 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28616:	f001 fb71 	bl	29cfc <z_spin_unlock_valid>
   2861a:	b968      	cbnz	r0, 28638 <z_reschedule+0x30>
   2861c:	239b      	movs	r3, #155	; 0x9b
   2861e:	4a14      	ldr	r2, [pc, #80]	; (28670 <z_reschedule+0x68>)
   28620:	4914      	ldr	r1, [pc, #80]	; (28674 <z_reschedule+0x6c>)
   28622:	4815      	ldr	r0, [pc, #84]	; (28678 <z_reschedule+0x70>)
   28624:	f005 fdca 	bl	2e1bc <printk>
   28628:	4621      	mov	r1, r4
   2862a:	4814      	ldr	r0, [pc, #80]	; (2867c <z_reschedule+0x74>)
   2862c:	f005 fdc6 	bl	2e1bc <printk>
   28630:	219b      	movs	r1, #155	; 0x9b
   28632:	480f      	ldr	r0, [pc, #60]	; (28670 <z_reschedule+0x68>)
   28634:	f006 f8c3 	bl	2e7be <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   28638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2863c:	2000      	movs	r0, #0
   2863e:	f7f0 ba3f 	b.w	18ac0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28642:	4620      	mov	r0, r4
   28644:	f001 fb5a 	bl	29cfc <z_spin_unlock_valid>
   28648:	b968      	cbnz	r0, 28666 <z_reschedule+0x5e>
   2864a:	2384      	movs	r3, #132	; 0x84
   2864c:	4a08      	ldr	r2, [pc, #32]	; (28670 <z_reschedule+0x68>)
   2864e:	4909      	ldr	r1, [pc, #36]	; (28674 <z_reschedule+0x6c>)
   28650:	4809      	ldr	r0, [pc, #36]	; (28678 <z_reschedule+0x70>)
   28652:	f005 fdb3 	bl	2e1bc <printk>
   28656:	4621      	mov	r1, r4
   28658:	4808      	ldr	r0, [pc, #32]	; (2867c <z_reschedule+0x74>)
   2865a:	f005 fdaf 	bl	2e1bc <printk>
   2865e:	2184      	movs	r1, #132	; 0x84
   28660:	4803      	ldr	r0, [pc, #12]	; (28670 <z_reschedule+0x68>)
   28662:	f006 f8ac 	bl	2e7be <assert_post_action>
   28666:	f385 8811 	msr	BASEPRI, r5
   2866a:	f3bf 8f6f 	isb	sy
   2866e:	bd38      	pop	{r3, r4, r5, pc}
   28670:	00035cb3 	.word	0x00035cb3
   28674:	00035d06 	.word	0x00035d06
   28678:	00035920 	.word	0x00035920
   2867c:	00035d1d 	.word	0x00035d1d

00028680 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   28680:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28682:	f04f 0320 	mov.w	r3, #32
   28686:	f3ef 8511 	mrs	r5, BASEPRI
   2868a:	f383 8811 	msr	BASEPRI, r3
   2868e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28692:	482b      	ldr	r0, [pc, #172]	; (28740 <k_sched_lock+0xc0>)
   28694:	f001 fb24 	bl	29ce0 <z_spin_lock_valid>
   28698:	b968      	cbnz	r0, 286b6 <k_sched_lock+0x36>
   2869a:	235c      	movs	r3, #92	; 0x5c
   2869c:	4a29      	ldr	r2, [pc, #164]	; (28744 <k_sched_lock+0xc4>)
   2869e:	492a      	ldr	r1, [pc, #168]	; (28748 <k_sched_lock+0xc8>)
   286a0:	482a      	ldr	r0, [pc, #168]	; (2874c <k_sched_lock+0xcc>)
   286a2:	f005 fd8b 	bl	2e1bc <printk>
   286a6:	4926      	ldr	r1, [pc, #152]	; (28740 <k_sched_lock+0xc0>)
   286a8:	4829      	ldr	r0, [pc, #164]	; (28750 <k_sched_lock+0xd0>)
   286aa:	f005 fd87 	bl	2e1bc <printk>
   286ae:	215c      	movs	r1, #92	; 0x5c
   286b0:	4824      	ldr	r0, [pc, #144]	; (28744 <k_sched_lock+0xc4>)
   286b2:	f006 f884 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   286b6:	4822      	ldr	r0, [pc, #136]	; (28740 <k_sched_lock+0xc0>)
   286b8:	f001 fb30 	bl	29d1c <z_spin_lock_set_owner>
   286bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   286c0:	b173      	cbz	r3, 286e0 <k_sched_lock+0x60>
   286c2:	4924      	ldr	r1, [pc, #144]	; (28754 <k_sched_lock+0xd4>)
   286c4:	f240 130b 	movw	r3, #267	; 0x10b
   286c8:	4a23      	ldr	r2, [pc, #140]	; (28758 <k_sched_lock+0xd8>)
   286ca:	4820      	ldr	r0, [pc, #128]	; (2874c <k_sched_lock+0xcc>)
   286cc:	f005 fd76 	bl	2e1bc <printk>
   286d0:	4822      	ldr	r0, [pc, #136]	; (2875c <k_sched_lock+0xdc>)
   286d2:	f005 fd73 	bl	2e1bc <printk>
   286d6:	f240 110b 	movw	r1, #267	; 0x10b
   286da:	481f      	ldr	r0, [pc, #124]	; (28758 <k_sched_lock+0xd8>)
   286dc:	f006 f86f 	bl	2e7be <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   286e0:	4c1f      	ldr	r4, [pc, #124]	; (28760 <k_sched_lock+0xe0>)
   286e2:	68a2      	ldr	r2, [r4, #8]
   286e4:	7bd2      	ldrb	r2, [r2, #15]
   286e6:	2a01      	cmp	r2, #1
   286e8:	d10e      	bne.n	28708 <k_sched_lock+0x88>
   286ea:	491e      	ldr	r1, [pc, #120]	; (28764 <k_sched_lock+0xe4>)
   286ec:	f44f 7386 	mov.w	r3, #268	; 0x10c
   286f0:	4a19      	ldr	r2, [pc, #100]	; (28758 <k_sched_lock+0xd8>)
   286f2:	4816      	ldr	r0, [pc, #88]	; (2874c <k_sched_lock+0xcc>)
   286f4:	f005 fd62 	bl	2e1bc <printk>
   286f8:	4818      	ldr	r0, [pc, #96]	; (2875c <k_sched_lock+0xdc>)
   286fa:	f005 fd5f 	bl	2e1bc <printk>
   286fe:	f44f 7186 	mov.w	r1, #268	; 0x10c
   28702:	4815      	ldr	r0, [pc, #84]	; (28758 <k_sched_lock+0xd8>)
   28704:	f006 f85b 	bl	2e7be <assert_post_action>
	--_current->base.sched_locked;
   28708:	68a2      	ldr	r2, [r4, #8]
   2870a:	7bd3      	ldrb	r3, [r2, #15]
   2870c:	3b01      	subs	r3, #1
   2870e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28710:	480b      	ldr	r0, [pc, #44]	; (28740 <k_sched_lock+0xc0>)
   28712:	f001 faf3 	bl	29cfc <z_spin_unlock_valid>
   28716:	b968      	cbnz	r0, 28734 <k_sched_lock+0xb4>
   28718:	2384      	movs	r3, #132	; 0x84
   2871a:	4a0a      	ldr	r2, [pc, #40]	; (28744 <k_sched_lock+0xc4>)
   2871c:	4912      	ldr	r1, [pc, #72]	; (28768 <k_sched_lock+0xe8>)
   2871e:	480b      	ldr	r0, [pc, #44]	; (2874c <k_sched_lock+0xcc>)
   28720:	f005 fd4c 	bl	2e1bc <printk>
   28724:	4906      	ldr	r1, [pc, #24]	; (28740 <k_sched_lock+0xc0>)
   28726:	4811      	ldr	r0, [pc, #68]	; (2876c <k_sched_lock+0xec>)
   28728:	f005 fd48 	bl	2e1bc <printk>
   2872c:	2184      	movs	r1, #132	; 0x84
   2872e:	4805      	ldr	r0, [pc, #20]	; (28744 <k_sched_lock+0xc4>)
   28730:	f006 f845 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28734:	f385 8811 	msr	BASEPRI, r5
   28738:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2873c:	bd38      	pop	{r3, r4, r5, pc}
   2873e:	bf00      	nop
   28740:	20027358 	.word	0x20027358
   28744:	00035cb3 	.word	0x00035cb3
   28748:	00035cd9 	.word	0x00035cd9
   2874c:	00035920 	.word	0x00035920
   28750:	00035cee 	.word	0x00035cee
   28754:	00037298 	.word	0x00037298
   28758:	0003726d 	.word	0x0003726d
   2875c:	00035d7e 	.word	0x00035d7e
   28760:	20027320 	.word	0x20027320
   28764:	000372aa 	.word	0x000372aa
   28768:	00035d06 	.word	0x00035d06
   2876c:	00035d1d 	.word	0x00035d1d

00028770 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   28770:	4b11      	ldr	r3, [pc, #68]	; (287b8 <z_priq_dumb_remove+0x48>)
{
   28772:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   28774:	f103 0228 	add.w	r2, r3, #40	; 0x28
   28778:	4282      	cmp	r2, r0
{
   2877a:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2877c:	d105      	bne.n	2878a <z_priq_dumb_remove+0x1a>
   2877e:	689b      	ldr	r3, [r3, #8]
   28780:	428b      	cmp	r3, r1
   28782:	d102      	bne.n	2878a <z_priq_dumb_remove+0x1a>
   28784:	7b4b      	ldrb	r3, [r1, #13]
   28786:	06db      	lsls	r3, r3, #27
   28788:	d115      	bne.n	287b6 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2878a:	4b0c      	ldr	r3, [pc, #48]	; (287bc <z_priq_dumb_remove+0x4c>)
   2878c:	429c      	cmp	r4, r3
   2878e:	d10b      	bne.n	287a8 <z_priq_dumb_remove+0x38>
   28790:	490b      	ldr	r1, [pc, #44]	; (287c0 <z_priq_dumb_remove+0x50>)
   28792:	480c      	ldr	r0, [pc, #48]	; (287c4 <z_priq_dumb_remove+0x54>)
   28794:	f240 336b 	movw	r3, #875	; 0x36b
   28798:	4a0b      	ldr	r2, [pc, #44]	; (287c8 <z_priq_dumb_remove+0x58>)
   2879a:	f005 fd0f 	bl	2e1bc <printk>
   2879e:	f240 316b 	movw	r1, #875	; 0x36b
   287a2:	4809      	ldr	r0, [pc, #36]	; (287c8 <z_priq_dumb_remove+0x58>)
   287a4:	f006 f80b 	bl	2e7be <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   287a8:	e9d4 3200 	ldrd	r3, r2, [r4]
   287ac:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   287ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   287b0:	2300      	movs	r3, #0
	node->prev = NULL;
   287b2:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   287b6:	bd10      	pop	{r4, pc}
   287b8:	20027320 	.word	0x20027320
   287bc:	20022948 	.word	0x20022948
   287c0:	00037380 	.word	0x00037380
   287c4:	00035920 	.word	0x00035920
   287c8:	0003730a 	.word	0x0003730a

000287cc <z_unpend_thread>:
{
   287cc:	b538      	push	{r3, r4, r5, lr}
   287ce:	4604      	mov	r4, r0
	__asm__ volatile(
   287d0:	f04f 0320 	mov.w	r3, #32
   287d4:	f3ef 8511 	mrs	r5, BASEPRI
   287d8:	f383 8811 	msr	BASEPRI, r3
   287dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   287e0:	481e      	ldr	r0, [pc, #120]	; (2885c <z_unpend_thread+0x90>)
   287e2:	f001 fa7d 	bl	29ce0 <z_spin_lock_valid>
   287e6:	b968      	cbnz	r0, 28804 <z_unpend_thread+0x38>
   287e8:	235c      	movs	r3, #92	; 0x5c
   287ea:	4a1d      	ldr	r2, [pc, #116]	; (28860 <z_unpend_thread+0x94>)
   287ec:	491d      	ldr	r1, [pc, #116]	; (28864 <z_unpend_thread+0x98>)
   287ee:	481e      	ldr	r0, [pc, #120]	; (28868 <z_unpend_thread+0x9c>)
   287f0:	f005 fce4 	bl	2e1bc <printk>
   287f4:	4919      	ldr	r1, [pc, #100]	; (2885c <z_unpend_thread+0x90>)
   287f6:	481d      	ldr	r0, [pc, #116]	; (2886c <z_unpend_thread+0xa0>)
   287f8:	f005 fce0 	bl	2e1bc <printk>
   287fc:	215c      	movs	r1, #92	; 0x5c
   287fe:	4818      	ldr	r0, [pc, #96]	; (28860 <z_unpend_thread+0x94>)
   28800:	f005 ffdd 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28804:	4815      	ldr	r0, [pc, #84]	; (2885c <z_unpend_thread+0x90>)
   28806:	f001 fa89 	bl	29d1c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2880a:	f104 0008 	add.w	r0, r4, #8
   2880e:	f7ff fdd1 	bl	283b4 <pended_on.isra.18>
   28812:	4621      	mov	r1, r4
   28814:	f7ff ffac 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28818:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2881a:	4810      	ldr	r0, [pc, #64]	; (2885c <z_unpend_thread+0x90>)
   2881c:	f023 0302 	bic.w	r3, r3, #2
   28820:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   28822:	2300      	movs	r3, #0
   28824:	60a3      	str	r3, [r4, #8]
   28826:	f001 fa69 	bl	29cfc <z_spin_unlock_valid>
   2882a:	b968      	cbnz	r0, 28848 <z_unpend_thread+0x7c>
   2882c:	2384      	movs	r3, #132	; 0x84
   2882e:	4a0c      	ldr	r2, [pc, #48]	; (28860 <z_unpend_thread+0x94>)
   28830:	490f      	ldr	r1, [pc, #60]	; (28870 <z_unpend_thread+0xa4>)
   28832:	480d      	ldr	r0, [pc, #52]	; (28868 <z_unpend_thread+0x9c>)
   28834:	f005 fcc2 	bl	2e1bc <printk>
   28838:	4908      	ldr	r1, [pc, #32]	; (2885c <z_unpend_thread+0x90>)
   2883a:	480e      	ldr	r0, [pc, #56]	; (28874 <z_unpend_thread+0xa8>)
   2883c:	f005 fcbe 	bl	2e1bc <printk>
   28840:	2184      	movs	r1, #132	; 0x84
   28842:	4807      	ldr	r0, [pc, #28]	; (28860 <z_unpend_thread+0x94>)
   28844:	f005 ffbb 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28848:	f385 8811 	msr	BASEPRI, r5
   2884c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   28850:	f104 0018 	add.w	r0, r4, #24
}
   28854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28858:	f001 bc6e 	b.w	2a138 <z_abort_timeout>
   2885c:	20027358 	.word	0x20027358
   28860:	00035cb3 	.word	0x00035cb3
   28864:	00035cd9 	.word	0x00035cd9
   28868:	00035920 	.word	0x00035920
   2886c:	00035cee 	.word	0x00035cee
   28870:	00035d06 	.word	0x00035d06
   28874:	00035d1d 	.word	0x00035d1d

00028878 <update_cache>:
{
   28878:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2887a:	4c10      	ldr	r4, [pc, #64]	; (288bc <update_cache+0x44>)
{
   2887c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2887e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   28882:	f00a fe2e 	bl	334e2 <z_priq_dumb_best>
   28886:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   28888:	68a3      	ldr	r3, [r4, #8]
   2888a:	7b59      	ldrb	r1, [r3, #13]
   2888c:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   2888e:	bf44      	itt	mi
   28890:	f041 0108 	orrmi.w	r1, r1, #8
   28894:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   28896:	b905      	cbnz	r5, 2889a <update_cache+0x22>
   28898:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2889a:	b94e      	cbnz	r6, 288b0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   2889c:	7b5a      	ldrb	r2, [r3, #13]
   2889e:	06d2      	lsls	r2, r2, #27
   288a0:	d106      	bne.n	288b0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   288a2:	69aa      	ldr	r2, [r5, #24]
   288a4:	b922      	cbnz	r2, 288b0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   288a6:	89da      	ldrh	r2, [r3, #14]
   288a8:	2a7f      	cmp	r2, #127	; 0x7f
   288aa:	d901      	bls.n	288b0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   288ac:	6263      	str	r3, [r4, #36]	; 0x24
}
   288ae:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   288b0:	42ab      	cmp	r3, r5
   288b2:	d001      	beq.n	288b8 <update_cache+0x40>
			z_reset_time_slice();
   288b4:	f7ff fd96 	bl	283e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   288b8:	6265      	str	r5, [r4, #36]	; 0x24
}
   288ba:	e7f8      	b.n	288ae <update_cache+0x36>
   288bc:	20027320 	.word	0x20027320

000288c0 <k_sched_unlock>:
{
   288c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   288c2:	f04f 0320 	mov.w	r3, #32
   288c6:	f3ef 8511 	mrs	r5, BASEPRI
   288ca:	f383 8811 	msr	BASEPRI, r3
   288ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   288d2:	482d      	ldr	r0, [pc, #180]	; (28988 <k_sched_unlock+0xc8>)
   288d4:	f001 fa04 	bl	29ce0 <z_spin_lock_valid>
   288d8:	b968      	cbnz	r0, 288f6 <k_sched_unlock+0x36>
   288da:	235c      	movs	r3, #92	; 0x5c
   288dc:	4a2b      	ldr	r2, [pc, #172]	; (2898c <k_sched_unlock+0xcc>)
   288de:	492c      	ldr	r1, [pc, #176]	; (28990 <k_sched_unlock+0xd0>)
   288e0:	482c      	ldr	r0, [pc, #176]	; (28994 <k_sched_unlock+0xd4>)
   288e2:	f005 fc6b 	bl	2e1bc <printk>
   288e6:	4928      	ldr	r1, [pc, #160]	; (28988 <k_sched_unlock+0xc8>)
   288e8:	482b      	ldr	r0, [pc, #172]	; (28998 <k_sched_unlock+0xd8>)
   288ea:	f005 fc67 	bl	2e1bc <printk>
   288ee:	215c      	movs	r1, #92	; 0x5c
   288f0:	4826      	ldr	r0, [pc, #152]	; (2898c <k_sched_unlock+0xcc>)
   288f2:	f005 ff64 	bl	2e7be <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   288f6:	4c29      	ldr	r4, [pc, #164]	; (2899c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   288f8:	4823      	ldr	r0, [pc, #140]	; (28988 <k_sched_unlock+0xc8>)
   288fa:	f001 fa0f 	bl	29d1c <z_spin_lock_set_owner>
   288fe:	68a2      	ldr	r2, [r4, #8]
   28900:	7bd2      	ldrb	r2, [r2, #15]
   28902:	b972      	cbnz	r2, 28922 <k_sched_unlock+0x62>
   28904:	4926      	ldr	r1, [pc, #152]	; (289a0 <k_sched_unlock+0xe0>)
   28906:	f240 330a 	movw	r3, #778	; 0x30a
   2890a:	4a26      	ldr	r2, [pc, #152]	; (289a4 <k_sched_unlock+0xe4>)
   2890c:	4821      	ldr	r0, [pc, #132]	; (28994 <k_sched_unlock+0xd4>)
   2890e:	f005 fc55 	bl	2e1bc <printk>
   28912:	4825      	ldr	r0, [pc, #148]	; (289a8 <k_sched_unlock+0xe8>)
   28914:	f005 fc52 	bl	2e1bc <printk>
   28918:	f240 310a 	movw	r1, #778	; 0x30a
   2891c:	4821      	ldr	r0, [pc, #132]	; (289a4 <k_sched_unlock+0xe4>)
   2891e:	f005 ff4e 	bl	2e7be <assert_post_action>
   28922:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   28926:	b173      	cbz	r3, 28946 <k_sched_unlock+0x86>
   28928:	4920      	ldr	r1, [pc, #128]	; (289ac <k_sched_unlock+0xec>)
   2892a:	f240 330b 	movw	r3, #779	; 0x30b
   2892e:	4a1d      	ldr	r2, [pc, #116]	; (289a4 <k_sched_unlock+0xe4>)
   28930:	4818      	ldr	r0, [pc, #96]	; (28994 <k_sched_unlock+0xd4>)
   28932:	f005 fc43 	bl	2e1bc <printk>
   28936:	481c      	ldr	r0, [pc, #112]	; (289a8 <k_sched_unlock+0xe8>)
   28938:	f005 fc40 	bl	2e1bc <printk>
   2893c:	f240 310b 	movw	r1, #779	; 0x30b
   28940:	4818      	ldr	r0, [pc, #96]	; (289a4 <k_sched_unlock+0xe4>)
   28942:	f005 ff3c 	bl	2e7be <assert_post_action>
		++_current->base.sched_locked;
   28946:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   28948:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2894a:	7bd3      	ldrb	r3, [r2, #15]
   2894c:	3301      	adds	r3, #1
   2894e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   28950:	f7ff ff92 	bl	28878 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28954:	480c      	ldr	r0, [pc, #48]	; (28988 <k_sched_unlock+0xc8>)
   28956:	f001 f9d1 	bl	29cfc <z_spin_unlock_valid>
   2895a:	b968      	cbnz	r0, 28978 <k_sched_unlock+0xb8>
   2895c:	2384      	movs	r3, #132	; 0x84
   2895e:	4a0b      	ldr	r2, [pc, #44]	; (2898c <k_sched_unlock+0xcc>)
   28960:	4913      	ldr	r1, [pc, #76]	; (289b0 <k_sched_unlock+0xf0>)
   28962:	480c      	ldr	r0, [pc, #48]	; (28994 <k_sched_unlock+0xd4>)
   28964:	f005 fc2a 	bl	2e1bc <printk>
   28968:	4907      	ldr	r1, [pc, #28]	; (28988 <k_sched_unlock+0xc8>)
   2896a:	4812      	ldr	r0, [pc, #72]	; (289b4 <k_sched_unlock+0xf4>)
   2896c:	f005 fc26 	bl	2e1bc <printk>
   28970:	2184      	movs	r1, #132	; 0x84
   28972:	4806      	ldr	r0, [pc, #24]	; (2898c <k_sched_unlock+0xcc>)
   28974:	f005 ff23 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28978:	f385 8811 	msr	BASEPRI, r5
   2897c:	f3bf 8f6f 	isb	sy
}
   28980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   28984:	f00a bda3 	b.w	334ce <z_reschedule_unlocked>
   28988:	20027358 	.word	0x20027358
   2898c:	00035cb3 	.word	0x00035cb3
   28990:	00035cd9 	.word	0x00035cd9
   28994:	00035920 	.word	0x00035920
   28998:	00035cee 	.word	0x00035cee
   2899c:	20027320 	.word	0x20027320
   289a0:	000372da 	.word	0x000372da
   289a4:	0003730a 	.word	0x0003730a
   289a8:	00035d7e 	.word	0x00035d7e
   289ac:	00037298 	.word	0x00037298
   289b0:	00035d06 	.word	0x00035d06
   289b4:	00035d1d 	.word	0x00035d1d

000289b8 <ready_thread>:
{
   289b8:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   289ba:	7b43      	ldrb	r3, [r0, #13]
   289bc:	4604      	mov	r4, r0
   289be:	06db      	lsls	r3, r3, #27
   289c0:	d138      	bne.n	28a34 <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
   289c2:	6983      	ldr	r3, [r0, #24]
   289c4:	2b00      	cmp	r3, #0
   289c6:	d135      	bne.n	28a34 <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   289c8:	4b1b      	ldr	r3, [pc, #108]	; (28a38 <ready_thread+0x80>)
   289ca:	4298      	cmp	r0, r3
   289cc:	d10b      	bne.n	289e6 <ready_thread+0x2e>
   289ce:	491b      	ldr	r1, [pc, #108]	; (28a3c <ready_thread+0x84>)
   289d0:	481b      	ldr	r0, [pc, #108]	; (28a40 <ready_thread+0x88>)
   289d2:	f240 3355 	movw	r3, #853	; 0x355
   289d6:	4a1b      	ldr	r2, [pc, #108]	; (28a44 <ready_thread+0x8c>)
   289d8:	f005 fbf0 	bl	2e1bc <printk>
   289dc:	f240 3155 	movw	r1, #853	; 0x355
   289e0:	4818      	ldr	r0, [pc, #96]	; (28a44 <ready_thread+0x8c>)
   289e2:	f005 feec 	bl	2e7be <assert_post_action>
	return list->head == list;
   289e6:	4a18      	ldr	r2, [pc, #96]	; (28a48 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   289e8:	f102 0128 	add.w	r1, r2, #40	; 0x28
   289ec:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   289f0:	428b      	cmp	r3, r1
   289f2:	d019      	beq.n	28a28 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   289f4:	b1c3      	cbz	r3, 28a28 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   289f6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   289fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
   289fe:	42ae      	cmp	r6, r5
   28a00:	dd0d      	ble.n	28a1e <ready_thread+0x66>
	node->prev = successor->prev;
   28a02:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28a04:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   28a08:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   28a0a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   28a0c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   28a0e:	2000      	movs	r0, #0
   28a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
   28a14:	7363      	strb	r3, [r4, #13]
}
   28a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   28a1a:	f7ff bf2d 	b.w	28878 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   28a1e:	4298      	cmp	r0, r3
   28a20:	d002      	beq.n	28a28 <ready_thread+0x70>
   28a22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28a24:	2b00      	cmp	r3, #0
   28a26:	d1e8      	bne.n	289fa <ready_thread+0x42>
	node->prev = list->tail;
   28a28:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   28a2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   28a2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28a30:	62d4      	str	r4, [r2, #44]	; 0x2c
   28a32:	e7eb      	b.n	28a0c <ready_thread+0x54>
}
   28a34:	bd70      	pop	{r4, r5, r6, pc}
   28a36:	bf00      	nop
   28a38:	20022948 	.word	0x20022948
   28a3c:	00037380 	.word	0x00037380
   28a40:	00035920 	.word	0x00035920
   28a44:	0003730a 	.word	0x0003730a
   28a48:	20027320 	.word	0x20027320

00028a4c <z_ready_thread>:
{
   28a4c:	b538      	push	{r3, r4, r5, lr}
   28a4e:	4605      	mov	r5, r0
	__asm__ volatile(
   28a50:	f04f 0320 	mov.w	r3, #32
   28a54:	f3ef 8411 	mrs	r4, BASEPRI
   28a58:	f383 8811 	msr	BASEPRI, r3
   28a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a60:	4817      	ldr	r0, [pc, #92]	; (28ac0 <z_ready_thread+0x74>)
   28a62:	f001 f93d 	bl	29ce0 <z_spin_lock_valid>
   28a66:	b968      	cbnz	r0, 28a84 <z_ready_thread+0x38>
   28a68:	235c      	movs	r3, #92	; 0x5c
   28a6a:	4a16      	ldr	r2, [pc, #88]	; (28ac4 <z_ready_thread+0x78>)
   28a6c:	4916      	ldr	r1, [pc, #88]	; (28ac8 <z_ready_thread+0x7c>)
   28a6e:	4817      	ldr	r0, [pc, #92]	; (28acc <z_ready_thread+0x80>)
   28a70:	f005 fba4 	bl	2e1bc <printk>
   28a74:	4912      	ldr	r1, [pc, #72]	; (28ac0 <z_ready_thread+0x74>)
   28a76:	4816      	ldr	r0, [pc, #88]	; (28ad0 <z_ready_thread+0x84>)
   28a78:	f005 fba0 	bl	2e1bc <printk>
   28a7c:	215c      	movs	r1, #92	; 0x5c
   28a7e:	4811      	ldr	r0, [pc, #68]	; (28ac4 <z_ready_thread+0x78>)
   28a80:	f005 fe9d 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28a84:	480e      	ldr	r0, [pc, #56]	; (28ac0 <z_ready_thread+0x74>)
   28a86:	f001 f949 	bl	29d1c <z_spin_lock_set_owner>
		ready_thread(thread);
   28a8a:	4628      	mov	r0, r5
   28a8c:	f7ff ff94 	bl	289b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28a90:	480b      	ldr	r0, [pc, #44]	; (28ac0 <z_ready_thread+0x74>)
   28a92:	f001 f933 	bl	29cfc <z_spin_unlock_valid>
   28a96:	b968      	cbnz	r0, 28ab4 <z_ready_thread+0x68>
   28a98:	2384      	movs	r3, #132	; 0x84
   28a9a:	4a0a      	ldr	r2, [pc, #40]	; (28ac4 <z_ready_thread+0x78>)
   28a9c:	490d      	ldr	r1, [pc, #52]	; (28ad4 <z_ready_thread+0x88>)
   28a9e:	480b      	ldr	r0, [pc, #44]	; (28acc <z_ready_thread+0x80>)
   28aa0:	f005 fb8c 	bl	2e1bc <printk>
   28aa4:	4906      	ldr	r1, [pc, #24]	; (28ac0 <z_ready_thread+0x74>)
   28aa6:	480c      	ldr	r0, [pc, #48]	; (28ad8 <z_ready_thread+0x8c>)
   28aa8:	f005 fb88 	bl	2e1bc <printk>
   28aac:	2184      	movs	r1, #132	; 0x84
   28aae:	4805      	ldr	r0, [pc, #20]	; (28ac4 <z_ready_thread+0x78>)
   28ab0:	f005 fe85 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28ab4:	f384 8811 	msr	BASEPRI, r4
   28ab8:	f3bf 8f6f 	isb	sy
}
   28abc:	bd38      	pop	{r3, r4, r5, pc}
   28abe:	bf00      	nop
   28ac0:	20027358 	.word	0x20027358
   28ac4:	00035cb3 	.word	0x00035cb3
   28ac8:	00035cd9 	.word	0x00035cd9
   28acc:	00035920 	.word	0x00035920
   28ad0:	00035cee 	.word	0x00035cee
   28ad4:	00035d06 	.word	0x00035d06
   28ad8:	00035d1d 	.word	0x00035d1d

00028adc <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   28adc:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   28ae0:	b570      	push	{r4, r5, r6, lr}
   28ae2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   28ae4:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   28ae8:	2b00      	cmp	r3, #0
   28aea:	d042      	beq.n	28b72 <z_thread_timeout+0x96>
	__asm__ volatile(
   28aec:	f04f 0320 	mov.w	r3, #32
   28af0:	f3ef 8611 	mrs	r6, BASEPRI
   28af4:	f383 8811 	msr	BASEPRI, r3
   28af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28afc:	4822      	ldr	r0, [pc, #136]	; (28b88 <z_thread_timeout+0xac>)
   28afe:	f001 f8ef 	bl	29ce0 <z_spin_lock_valid>
   28b02:	b968      	cbnz	r0, 28b20 <z_thread_timeout+0x44>
   28b04:	235c      	movs	r3, #92	; 0x5c
   28b06:	4a21      	ldr	r2, [pc, #132]	; (28b8c <z_thread_timeout+0xb0>)
   28b08:	4921      	ldr	r1, [pc, #132]	; (28b90 <z_thread_timeout+0xb4>)
   28b0a:	4822      	ldr	r0, [pc, #136]	; (28b94 <z_thread_timeout+0xb8>)
   28b0c:	f005 fb56 	bl	2e1bc <printk>
   28b10:	491d      	ldr	r1, [pc, #116]	; (28b88 <z_thread_timeout+0xac>)
   28b12:	4821      	ldr	r0, [pc, #132]	; (28b98 <z_thread_timeout+0xbc>)
   28b14:	f005 fb52 	bl	2e1bc <printk>
   28b18:	215c      	movs	r1, #92	; 0x5c
   28b1a:	481c      	ldr	r0, [pc, #112]	; (28b8c <z_thread_timeout+0xb0>)
   28b1c:	f005 fe4f 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28b20:	4819      	ldr	r0, [pc, #100]	; (28b88 <z_thread_timeout+0xac>)
   28b22:	f001 f8fb 	bl	29d1c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   28b26:	f1a4 0010 	sub.w	r0, r4, #16
   28b2a:	f7ff fc43 	bl	283b4 <pended_on.isra.18>
   28b2e:	4629      	mov	r1, r5
   28b30:	f7ff fe1e 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28b34:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b38:	4813      	ldr	r0, [pc, #76]	; (28b88 <z_thread_timeout+0xac>)
   28b3a:	f023 0302 	bic.w	r3, r3, #2
   28b3e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   28b42:	2300      	movs	r3, #0
   28b44:	f844 3c10 	str.w	r3, [r4, #-16]
   28b48:	f001 f8d8 	bl	29cfc <z_spin_unlock_valid>
   28b4c:	b968      	cbnz	r0, 28b6a <z_thread_timeout+0x8e>
   28b4e:	2384      	movs	r3, #132	; 0x84
   28b50:	4a0e      	ldr	r2, [pc, #56]	; (28b8c <z_thread_timeout+0xb0>)
   28b52:	4912      	ldr	r1, [pc, #72]	; (28b9c <z_thread_timeout+0xc0>)
   28b54:	480f      	ldr	r0, [pc, #60]	; (28b94 <z_thread_timeout+0xb8>)
   28b56:	f005 fb31 	bl	2e1bc <printk>
   28b5a:	490b      	ldr	r1, [pc, #44]	; (28b88 <z_thread_timeout+0xac>)
   28b5c:	4810      	ldr	r0, [pc, #64]	; (28ba0 <z_thread_timeout+0xc4>)
   28b5e:	f005 fb2d 	bl	2e1bc <printk>
   28b62:	2184      	movs	r1, #132	; 0x84
   28b64:	4809      	ldr	r0, [pc, #36]	; (28b8c <z_thread_timeout+0xb0>)
   28b66:	f005 fe2a 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28b6a:	f386 8811 	msr	BASEPRI, r6
   28b6e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   28b72:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   28b76:	4628      	mov	r0, r5
   28b78:	f023 0314 	bic.w	r3, r3, #20
   28b7c:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   28b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   28b84:	f7ff bf62 	b.w	28a4c <z_ready_thread>
   28b88:	20027358 	.word	0x20027358
   28b8c:	00035cb3 	.word	0x00035cb3
   28b90:	00035cd9 	.word	0x00035cd9
   28b94:	00035920 	.word	0x00035920
   28b98:	00035cee 	.word	0x00035cee
   28b9c:	00035d06 	.word	0x00035d06
   28ba0:	00035d1d 	.word	0x00035d1d

00028ba4 <z_sched_start>:
{
   28ba4:	b538      	push	{r3, r4, r5, lr}
   28ba6:	4604      	mov	r4, r0
	__asm__ volatile(
   28ba8:	f04f 0320 	mov.w	r3, #32
   28bac:	f3ef 8511 	mrs	r5, BASEPRI
   28bb0:	f383 8811 	msr	BASEPRI, r3
   28bb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28bb8:	481d      	ldr	r0, [pc, #116]	; (28c30 <z_sched_start+0x8c>)
   28bba:	f001 f891 	bl	29ce0 <z_spin_lock_valid>
   28bbe:	b968      	cbnz	r0, 28bdc <z_sched_start+0x38>
   28bc0:	235c      	movs	r3, #92	; 0x5c
   28bc2:	4a1c      	ldr	r2, [pc, #112]	; (28c34 <z_sched_start+0x90>)
   28bc4:	491c      	ldr	r1, [pc, #112]	; (28c38 <z_sched_start+0x94>)
   28bc6:	481d      	ldr	r0, [pc, #116]	; (28c3c <z_sched_start+0x98>)
   28bc8:	f005 faf8 	bl	2e1bc <printk>
   28bcc:	4918      	ldr	r1, [pc, #96]	; (28c30 <z_sched_start+0x8c>)
   28bce:	481c      	ldr	r0, [pc, #112]	; (28c40 <z_sched_start+0x9c>)
   28bd0:	f005 faf4 	bl	2e1bc <printk>
   28bd4:	215c      	movs	r1, #92	; 0x5c
   28bd6:	4817      	ldr	r0, [pc, #92]	; (28c34 <z_sched_start+0x90>)
   28bd8:	f005 fdf1 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28bdc:	4814      	ldr	r0, [pc, #80]	; (28c30 <z_sched_start+0x8c>)
   28bde:	f001 f89d 	bl	29d1c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   28be2:	7b63      	ldrb	r3, [r4, #13]
   28be4:	075a      	lsls	r2, r3, #29
   28be6:	d416      	bmi.n	28c16 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28be8:	4811      	ldr	r0, [pc, #68]	; (28c30 <z_sched_start+0x8c>)
   28bea:	f001 f887 	bl	29cfc <z_spin_unlock_valid>
   28bee:	b968      	cbnz	r0, 28c0c <z_sched_start+0x68>
   28bf0:	2384      	movs	r3, #132	; 0x84
   28bf2:	4a10      	ldr	r2, [pc, #64]	; (28c34 <z_sched_start+0x90>)
   28bf4:	4913      	ldr	r1, [pc, #76]	; (28c44 <z_sched_start+0xa0>)
   28bf6:	4811      	ldr	r0, [pc, #68]	; (28c3c <z_sched_start+0x98>)
   28bf8:	f005 fae0 	bl	2e1bc <printk>
   28bfc:	490c      	ldr	r1, [pc, #48]	; (28c30 <z_sched_start+0x8c>)
   28bfe:	4812      	ldr	r0, [pc, #72]	; (28c48 <z_sched_start+0xa4>)
   28c00:	f005 fadc 	bl	2e1bc <printk>
   28c04:	2184      	movs	r1, #132	; 0x84
   28c06:	480b      	ldr	r0, [pc, #44]	; (28c34 <z_sched_start+0x90>)
   28c08:	f005 fdd9 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28c0c:	f385 8811 	msr	BASEPRI, r5
   28c10:	f3bf 8f6f 	isb	sy
}
   28c14:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28c16:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   28c1a:	4620      	mov	r0, r4
   28c1c:	7363      	strb	r3, [r4, #13]
   28c1e:	f7ff fecb 	bl	289b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   28c22:	4629      	mov	r1, r5
}
   28c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   28c28:	4801      	ldr	r0, [pc, #4]	; (28c30 <z_sched_start+0x8c>)
   28c2a:	f7ff bced 	b.w	28608 <z_reschedule>
   28c2e:	bf00      	nop
   28c30:	20027358 	.word	0x20027358
   28c34:	00035cb3 	.word	0x00035cb3
   28c38:	00035cd9 	.word	0x00035cd9
   28c3c:	00035920 	.word	0x00035920
   28c40:	00035cee 	.word	0x00035cee
   28c44:	00035d06 	.word	0x00035d06
   28c48:	00035d1d 	.word	0x00035d1d

00028c4c <z_move_thread_to_end_of_prio_q>:
{
   28c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c4e:	4604      	mov	r4, r0
	__asm__ volatile(
   28c50:	f04f 0320 	mov.w	r3, #32
   28c54:	f3ef 8511 	mrs	r5, BASEPRI
   28c58:	f383 8811 	msr	BASEPRI, r3
   28c5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c60:	4835      	ldr	r0, [pc, #212]	; (28d38 <z_move_thread_to_end_of_prio_q+0xec>)
   28c62:	f001 f83d 	bl	29ce0 <z_spin_lock_valid>
   28c66:	b968      	cbnz	r0, 28c84 <z_move_thread_to_end_of_prio_q+0x38>
   28c68:	235c      	movs	r3, #92	; 0x5c
   28c6a:	4a34      	ldr	r2, [pc, #208]	; (28d3c <z_move_thread_to_end_of_prio_q+0xf0>)
   28c6c:	4934      	ldr	r1, [pc, #208]	; (28d40 <z_move_thread_to_end_of_prio_q+0xf4>)
   28c6e:	4835      	ldr	r0, [pc, #212]	; (28d44 <z_move_thread_to_end_of_prio_q+0xf8>)
   28c70:	f005 faa4 	bl	2e1bc <printk>
   28c74:	4930      	ldr	r1, [pc, #192]	; (28d38 <z_move_thread_to_end_of_prio_q+0xec>)
   28c76:	4834      	ldr	r0, [pc, #208]	; (28d48 <z_move_thread_to_end_of_prio_q+0xfc>)
   28c78:	f005 faa0 	bl	2e1bc <printk>
   28c7c:	215c      	movs	r1, #92	; 0x5c
   28c7e:	482f      	ldr	r0, [pc, #188]	; (28d3c <z_move_thread_to_end_of_prio_q+0xf0>)
   28c80:	f005 fd9d 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28c84:	482c      	ldr	r0, [pc, #176]	; (28d38 <z_move_thread_to_end_of_prio_q+0xec>)
   28c86:	f001 f849 	bl	29d1c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   28c8a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   28c8e:	2b00      	cmp	r3, #0
   28c90:	da03      	bge.n	28c9a <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   28c92:	4621      	mov	r1, r4
   28c94:	482d      	ldr	r0, [pc, #180]	; (28d4c <z_move_thread_to_end_of_prio_q+0x100>)
   28c96:	f7ff fd6b 	bl	28770 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   28c9a:	4b2d      	ldr	r3, [pc, #180]	; (28d50 <z_move_thread_to_end_of_prio_q+0x104>)
   28c9c:	429c      	cmp	r4, r3
   28c9e:	d10b      	bne.n	28cb8 <z_move_thread_to_end_of_prio_q+0x6c>
   28ca0:	492c      	ldr	r1, [pc, #176]	; (28d54 <z_move_thread_to_end_of_prio_q+0x108>)
   28ca2:	4828      	ldr	r0, [pc, #160]	; (28d44 <z_move_thread_to_end_of_prio_q+0xf8>)
   28ca4:	f240 3355 	movw	r3, #853	; 0x355
   28ca8:	4a2b      	ldr	r2, [pc, #172]	; (28d58 <z_move_thread_to_end_of_prio_q+0x10c>)
   28caa:	f005 fa87 	bl	2e1bc <printk>
   28cae:	f240 3155 	movw	r1, #853	; 0x355
   28cb2:	4829      	ldr	r0, [pc, #164]	; (28d58 <z_move_thread_to_end_of_prio_q+0x10c>)
   28cb4:	f005 fd83 	bl	2e7be <assert_post_action>
	return list->head == list;
   28cb8:	4a28      	ldr	r2, [pc, #160]	; (28d5c <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28cba:	f102 0128 	add.w	r1, r2, #40	; 0x28
   28cbe:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   28cc2:	428b      	cmp	r3, r1
   28cc4:	d032      	beq.n	28d2c <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28cc6:	2b00      	cmp	r3, #0
   28cc8:	d030      	beq.n	28d2c <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   28cca:	f994 600e 	ldrsb.w	r6, [r4, #14]
   28cce:	f993 700e 	ldrsb.w	r7, [r3, #14]
   28cd2:	42b7      	cmp	r7, r6
   28cd4:	dd25      	ble.n	28d22 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   28cd6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   28cd8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   28cdc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   28cde:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   28ce0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   28ce2:	6890      	ldr	r0, [r2, #8]
   28ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   28ce8:	7363      	strb	r3, [r4, #13]
   28cea:	1b03      	subs	r3, r0, r4
   28cec:	4258      	negs	r0, r3
   28cee:	4158      	adcs	r0, r3
   28cf0:	f7ff fdc2 	bl	28878 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28cf4:	4810      	ldr	r0, [pc, #64]	; (28d38 <z_move_thread_to_end_of_prio_q+0xec>)
   28cf6:	f001 f801 	bl	29cfc <z_spin_unlock_valid>
   28cfa:	b968      	cbnz	r0, 28d18 <z_move_thread_to_end_of_prio_q+0xcc>
   28cfc:	2384      	movs	r3, #132	; 0x84
   28cfe:	4a0f      	ldr	r2, [pc, #60]	; (28d3c <z_move_thread_to_end_of_prio_q+0xf0>)
   28d00:	4917      	ldr	r1, [pc, #92]	; (28d60 <z_move_thread_to_end_of_prio_q+0x114>)
   28d02:	4810      	ldr	r0, [pc, #64]	; (28d44 <z_move_thread_to_end_of_prio_q+0xf8>)
   28d04:	f005 fa5a 	bl	2e1bc <printk>
   28d08:	490b      	ldr	r1, [pc, #44]	; (28d38 <z_move_thread_to_end_of_prio_q+0xec>)
   28d0a:	4816      	ldr	r0, [pc, #88]	; (28d64 <z_move_thread_to_end_of_prio_q+0x118>)
   28d0c:	f005 fa56 	bl	2e1bc <printk>
   28d10:	2184      	movs	r1, #132	; 0x84
   28d12:	480a      	ldr	r0, [pc, #40]	; (28d3c <z_move_thread_to_end_of_prio_q+0xf0>)
   28d14:	f005 fd53 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28d18:	f385 8811 	msr	BASEPRI, r5
   28d1c:	f3bf 8f6f 	isb	sy
}
   28d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   28d22:	4298      	cmp	r0, r3
   28d24:	d002      	beq.n	28d2c <z_move_thread_to_end_of_prio_q+0xe0>
   28d26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28d28:	2b00      	cmp	r3, #0
   28d2a:	d1d0      	bne.n	28cce <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   28d2c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   28d30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   28d32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28d34:	62d4      	str	r4, [r2, #44]	; 0x2c
   28d36:	e7d3      	b.n	28ce0 <z_move_thread_to_end_of_prio_q+0x94>
   28d38:	20027358 	.word	0x20027358
   28d3c:	00035cb3 	.word	0x00035cb3
   28d40:	00035cd9 	.word	0x00035cd9
   28d44:	00035920 	.word	0x00035920
   28d48:	00035cee 	.word	0x00035cee
   28d4c:	20027348 	.word	0x20027348
   28d50:	20022948 	.word	0x20022948
   28d54:	00037380 	.word	0x00037380
   28d58:	0003730a 	.word	0x0003730a
   28d5c:	20027320 	.word	0x20027320
   28d60:	00035d06 	.word	0x00035d06
   28d64:	00035d1d 	.word	0x00035d1d

00028d68 <z_time_slice>:
	if (pending_current == _current) {
   28d68:	4a15      	ldr	r2, [pc, #84]	; (28dc0 <z_time_slice+0x58>)
   28d6a:	4916      	ldr	r1, [pc, #88]	; (28dc4 <z_time_slice+0x5c>)
{
   28d6c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   28d6e:	680c      	ldr	r4, [r1, #0]
   28d70:	6893      	ldr	r3, [r2, #8]
   28d72:	42a3      	cmp	r3, r4
   28d74:	4614      	mov	r4, r2
   28d76:	d103      	bne.n	28d80 <z_time_slice+0x18>
}
   28d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   28d7c:	f7ff bb32 	b.w	283e4 <z_reset_time_slice>
	pending_current = NULL;
   28d80:	2500      	movs	r5, #0
   28d82:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   28d84:	4910      	ldr	r1, [pc, #64]	; (28dc8 <z_time_slice+0x60>)
   28d86:	6809      	ldr	r1, [r1, #0]
   28d88:	b1b9      	cbz	r1, 28dba <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   28d8a:	89d9      	ldrh	r1, [r3, #14]
   28d8c:	297f      	cmp	r1, #127	; 0x7f
   28d8e:	d814      	bhi.n	28dba <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   28d90:	490e      	ldr	r1, [pc, #56]	; (28dcc <z_time_slice+0x64>)
   28d92:	f993 500e 	ldrsb.w	r5, [r3, #14]
   28d96:	6809      	ldr	r1, [r1, #0]
   28d98:	428d      	cmp	r5, r1
   28d9a:	db0e      	blt.n	28dba <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   28d9c:	490c      	ldr	r1, [pc, #48]	; (28dd0 <z_time_slice+0x68>)
   28d9e:	428b      	cmp	r3, r1
   28da0:	d00b      	beq.n	28dba <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   28da2:	6999      	ldr	r1, [r3, #24]
   28da4:	b949      	cbnz	r1, 28dba <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   28da6:	6911      	ldr	r1, [r2, #16]
   28da8:	4281      	cmp	r1, r0
   28daa:	dc03      	bgt.n	28db4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   28dac:	4618      	mov	r0, r3
   28dae:	f7ff ff4d 	bl	28c4c <z_move_thread_to_end_of_prio_q>
   28db2:	e7e1      	b.n	28d78 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   28db4:	1a09      	subs	r1, r1, r0
   28db6:	6111      	str	r1, [r2, #16]
}
   28db8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   28dba:	2300      	movs	r3, #0
   28dbc:	6123      	str	r3, [r4, #16]
   28dbe:	e7fb      	b.n	28db8 <z_time_slice+0x50>
   28dc0:	20027320 	.word	0x20027320
   28dc4:	20027354 	.word	0x20027354
   28dc8:	20027360 	.word	0x20027360
   28dcc:	2002735c 	.word	0x2002735c
   28dd0:	20022948 	.word	0x20022948

00028dd4 <z_impl_k_thread_suspend>:
{
   28dd4:	b570      	push	{r4, r5, r6, lr}
   28dd6:	4604      	mov	r4, r0
   28dd8:	3018      	adds	r0, #24
   28dda:	f001 f9ad 	bl	2a138 <z_abort_timeout>
	__asm__ volatile(
   28dde:	f04f 0320 	mov.w	r3, #32
   28de2:	f3ef 8611 	mrs	r6, BASEPRI
   28de6:	f383 8811 	msr	BASEPRI, r3
   28dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28dee:	4825      	ldr	r0, [pc, #148]	; (28e84 <z_impl_k_thread_suspend+0xb0>)
   28df0:	f000 ff76 	bl	29ce0 <z_spin_lock_valid>
   28df4:	b968      	cbnz	r0, 28e12 <z_impl_k_thread_suspend+0x3e>
   28df6:	235c      	movs	r3, #92	; 0x5c
   28df8:	4a23      	ldr	r2, [pc, #140]	; (28e88 <z_impl_k_thread_suspend+0xb4>)
   28dfa:	4924      	ldr	r1, [pc, #144]	; (28e8c <z_impl_k_thread_suspend+0xb8>)
   28dfc:	4824      	ldr	r0, [pc, #144]	; (28e90 <z_impl_k_thread_suspend+0xbc>)
   28dfe:	f005 f9dd 	bl	2e1bc <printk>
   28e02:	4920      	ldr	r1, [pc, #128]	; (28e84 <z_impl_k_thread_suspend+0xb0>)
   28e04:	4823      	ldr	r0, [pc, #140]	; (28e94 <z_impl_k_thread_suspend+0xc0>)
   28e06:	f005 f9d9 	bl	2e1bc <printk>
   28e0a:	215c      	movs	r1, #92	; 0x5c
   28e0c:	481e      	ldr	r0, [pc, #120]	; (28e88 <z_impl_k_thread_suspend+0xb4>)
   28e0e:	f005 fcd6 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28e12:	481c      	ldr	r0, [pc, #112]	; (28e84 <z_impl_k_thread_suspend+0xb0>)
   28e14:	f000 ff82 	bl	29d1c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   28e18:	f994 300d 	ldrsb.w	r3, [r4, #13]
   28e1c:	2b00      	cmp	r3, #0
   28e1e:	da07      	bge.n	28e30 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   28e20:	4621      	mov	r1, r4
   28e22:	481d      	ldr	r0, [pc, #116]	; (28e98 <z_impl_k_thread_suspend+0xc4>)
   28e24:	f7ff fca4 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   28e28:	7b63      	ldrb	r3, [r4, #13]
   28e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28e2e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   28e30:	4d1a      	ldr	r5, [pc, #104]	; (28e9c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   28e32:	7b63      	ldrb	r3, [r4, #13]
   28e34:	68a8      	ldr	r0, [r5, #8]
   28e36:	f043 0310 	orr.w	r3, r3, #16
   28e3a:	7363      	strb	r3, [r4, #13]
   28e3c:	1b03      	subs	r3, r0, r4
   28e3e:	4258      	negs	r0, r3
   28e40:	4158      	adcs	r0, r3
   28e42:	f7ff fd19 	bl	28878 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e46:	480f      	ldr	r0, [pc, #60]	; (28e84 <z_impl_k_thread_suspend+0xb0>)
   28e48:	f000 ff58 	bl	29cfc <z_spin_unlock_valid>
   28e4c:	b968      	cbnz	r0, 28e6a <z_impl_k_thread_suspend+0x96>
   28e4e:	2384      	movs	r3, #132	; 0x84
   28e50:	4a0d      	ldr	r2, [pc, #52]	; (28e88 <z_impl_k_thread_suspend+0xb4>)
   28e52:	4913      	ldr	r1, [pc, #76]	; (28ea0 <z_impl_k_thread_suspend+0xcc>)
   28e54:	480e      	ldr	r0, [pc, #56]	; (28e90 <z_impl_k_thread_suspend+0xbc>)
   28e56:	f005 f9b1 	bl	2e1bc <printk>
   28e5a:	490a      	ldr	r1, [pc, #40]	; (28e84 <z_impl_k_thread_suspend+0xb0>)
   28e5c:	4811      	ldr	r0, [pc, #68]	; (28ea4 <z_impl_k_thread_suspend+0xd0>)
   28e5e:	f005 f9ad 	bl	2e1bc <printk>
   28e62:	2184      	movs	r1, #132	; 0x84
   28e64:	4808      	ldr	r0, [pc, #32]	; (28e88 <z_impl_k_thread_suspend+0xb4>)
   28e66:	f005 fcaa 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28e6a:	f386 8811 	msr	BASEPRI, r6
   28e6e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   28e72:	68ab      	ldr	r3, [r5, #8]
   28e74:	42a3      	cmp	r3, r4
   28e76:	d103      	bne.n	28e80 <z_impl_k_thread_suspend+0xac>
}
   28e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   28e7c:	f00a bb27 	b.w	334ce <z_reschedule_unlocked>
}
   28e80:	bd70      	pop	{r4, r5, r6, pc}
   28e82:	bf00      	nop
   28e84:	20027358 	.word	0x20027358
   28e88:	00035cb3 	.word	0x00035cb3
   28e8c:	00035cd9 	.word	0x00035cd9
   28e90:	00035920 	.word	0x00035920
   28e94:	00035cee 	.word	0x00035cee
   28e98:	20027348 	.word	0x20027348
   28e9c:	20027320 	.word	0x20027320
   28ea0:	00035d06 	.word	0x00035d06
   28ea4:	00035d1d 	.word	0x00035d1d

00028ea8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   28ea8:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   28eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28eae:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   28eb0:	b103      	cbz	r3, 28eb4 <z_thread_single_abort+0xc>
		thread->fn_abort();
   28eb2:	4798      	blx	r3
   28eb4:	f104 0018 	add.w	r0, r4, #24
   28eb8:	f001 f93e 	bl	2a138 <z_abort_timeout>
	__asm__ volatile(
   28ebc:	f04f 0320 	mov.w	r3, #32
   28ec0:	f3ef 8611 	mrs	r6, BASEPRI
   28ec4:	f383 8811 	msr	BASEPRI, r3
   28ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ecc:	4839      	ldr	r0, [pc, #228]	; (28fb4 <z_thread_single_abort+0x10c>)
   28ece:	f000 ff07 	bl	29ce0 <z_spin_lock_valid>
   28ed2:	b968      	cbnz	r0, 28ef0 <z_thread_single_abort+0x48>
   28ed4:	235c      	movs	r3, #92	; 0x5c
   28ed6:	4a38      	ldr	r2, [pc, #224]	; (28fb8 <z_thread_single_abort+0x110>)
   28ed8:	4938      	ldr	r1, [pc, #224]	; (28fbc <z_thread_single_abort+0x114>)
   28eda:	4839      	ldr	r0, [pc, #228]	; (28fc0 <z_thread_single_abort+0x118>)
   28edc:	f005 f96e 	bl	2e1bc <printk>
   28ee0:	4934      	ldr	r1, [pc, #208]	; (28fb4 <z_thread_single_abort+0x10c>)
   28ee2:	4838      	ldr	r0, [pc, #224]	; (28fc4 <z_thread_single_abort+0x11c>)
   28ee4:	f005 f96a 	bl	2e1bc <printk>
   28ee8:	215c      	movs	r1, #92	; 0x5c
   28eea:	4833      	ldr	r0, [pc, #204]	; (28fb8 <z_thread_single_abort+0x110>)
   28eec:	f005 fc67 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   28ef0:	4830      	ldr	r0, [pc, #192]	; (28fb4 <z_thread_single_abort+0x10c>)
   28ef2:	f000 ff13 	bl	29d1c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   28ef6:	7b63      	ldrb	r3, [r4, #13]
   28ef8:	06d8      	lsls	r0, r3, #27
   28efa:	d136      	bne.n	28f6a <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   28efc:	69a2      	ldr	r2, [r4, #24]
   28efe:	2a00      	cmp	r2, #0
   28f00:	d133      	bne.n	28f6a <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   28f02:	0619      	lsls	r1, r3, #24
   28f04:	d507      	bpl.n	28f16 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   28f06:	4621      	mov	r1, r4
   28f08:	482f      	ldr	r0, [pc, #188]	; (28fc8 <z_thread_single_abort+0x120>)
   28f0a:	f7ff fc31 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   28f0e:	7b63      	ldrb	r3, [r4, #13]
   28f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28f14:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   28f16:	4b2d      	ldr	r3, [pc, #180]	; (28fcc <z_thread_single_abort+0x124>)
   28f18:	6898      	ldr	r0, [r3, #8]
   28f1a:	1b02      	subs	r2, r0, r4
   28f1c:	4250      	negs	r0, r2
   28f1e:	4150      	adcs	r0, r2
   28f20:	f7ff fcaa 	bl	28878 <update_cache>
			waiter->base.pended_on = NULL;
   28f24:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   28f26:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   28f28:	f104 0828 	add.w	r8, r4, #40	; 0x28
   28f2c:	f043 0308 	orr.w	r3, r3, #8
   28f30:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   28f32:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f34:	4545      	cmp	r5, r8
   28f36:	d000      	beq.n	28f3a <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   28f38:	bb3d      	cbnz	r5, 28f8a <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f3a:	481e      	ldr	r0, [pc, #120]	; (28fb4 <z_thread_single_abort+0x10c>)
   28f3c:	f000 fede 	bl	29cfc <z_spin_unlock_valid>
   28f40:	b968      	cbnz	r0, 28f5e <z_thread_single_abort+0xb6>
   28f42:	2384      	movs	r3, #132	; 0x84
   28f44:	4a1c      	ldr	r2, [pc, #112]	; (28fb8 <z_thread_single_abort+0x110>)
   28f46:	4922      	ldr	r1, [pc, #136]	; (28fd0 <z_thread_single_abort+0x128>)
   28f48:	481d      	ldr	r0, [pc, #116]	; (28fc0 <z_thread_single_abort+0x118>)
   28f4a:	f005 f937 	bl	2e1bc <printk>
   28f4e:	4919      	ldr	r1, [pc, #100]	; (28fb4 <z_thread_single_abort+0x10c>)
   28f50:	4820      	ldr	r0, [pc, #128]	; (28fd4 <z_thread_single_abort+0x12c>)
   28f52:	f005 f933 	bl	2e1bc <printk>
   28f56:	2184      	movs	r1, #132	; 0x84
   28f58:	4817      	ldr	r0, [pc, #92]	; (28fb8 <z_thread_single_abort+0x110>)
   28f5a:	f005 fc30 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   28f5e:	f386 8811 	msr	BASEPRI, r6
   28f62:	f3bf 8f6f 	isb	sy
}
   28f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   28f6a:	079b      	lsls	r3, r3, #30
   28f6c:	d5da      	bpl.n	28f24 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   28f6e:	f104 0008 	add.w	r0, r4, #8
   28f72:	f7ff fa1f 	bl	283b4 <pended_on.isra.18>
   28f76:	4621      	mov	r1, r4
   28f78:	f7ff fbfa 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28f7c:	7b63      	ldrb	r3, [r4, #13]
   28f7e:	f023 0302 	bic.w	r3, r3, #2
   28f82:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   28f84:	2300      	movs	r3, #0
   28f86:	60a3      	str	r3, [r4, #8]
   28f88:	e7cc      	b.n	28f24 <z_thread_single_abort+0x7c>
   28f8a:	f105 0018 	add.w	r0, r5, #24
   28f8e:	f001 f8d3 	bl	2a138 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   28f92:	f105 0008 	add.w	r0, r5, #8
   28f96:	f7ff fa0d 	bl	283b4 <pended_on.isra.18>
   28f9a:	4629      	mov	r1, r5
   28f9c:	f7ff fbe8 	bl	28770 <z_priq_dumb_remove>
   28fa0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   28fa2:	60af      	str	r7, [r5, #8]
   28fa4:	f023 0302 	bic.w	r3, r3, #2
   28fa8:	736b      	strb	r3, [r5, #13]
   28faa:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   28fac:	4628      	mov	r0, r5
   28fae:	f7ff fd03 	bl	289b8 <ready_thread>
   28fb2:	e7be      	b.n	28f32 <z_thread_single_abort+0x8a>
   28fb4:	20027358 	.word	0x20027358
   28fb8:	00035cb3 	.word	0x00035cb3
   28fbc:	00035cd9 	.word	0x00035cd9
   28fc0:	00035920 	.word	0x00035920
   28fc4:	00035cee 	.word	0x00035cee
   28fc8:	20027348 	.word	0x20027348
   28fcc:	20027320 	.word	0x20027320
   28fd0:	00035d06 	.word	0x00035d06
   28fd4:	00035d1d 	.word	0x00035d1d

00028fd8 <unready_thread>:
{
   28fd8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   28fda:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   28fde:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   28fe0:	2b00      	cmp	r3, #0
   28fe2:	da07      	bge.n	28ff4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   28fe4:	4601      	mov	r1, r0
   28fe6:	4808      	ldr	r0, [pc, #32]	; (29008 <unready_thread+0x30>)
   28fe8:	f7ff fbc2 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   28fec:	7b63      	ldrb	r3, [r4, #13]
   28fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   28ff2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   28ff4:	4b05      	ldr	r3, [pc, #20]	; (2900c <unready_thread+0x34>)
   28ff6:	6898      	ldr	r0, [r3, #8]
   28ff8:	1b03      	subs	r3, r0, r4
   28ffa:	4258      	negs	r0, r3
   28ffc:	4158      	adcs	r0, r3
}
   28ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   29002:	f7ff bc39 	b.w	28878 <update_cache>
   29006:	bf00      	nop
   29008:	20027348 	.word	0x20027348
   2900c:	20027320 	.word	0x20027320

00029010 <z_remove_thread_from_ready_q>:
{
   29010:	b538      	push	{r3, r4, r5, lr}
   29012:	4605      	mov	r5, r0
	__asm__ volatile(
   29014:	f04f 0320 	mov.w	r3, #32
   29018:	f3ef 8411 	mrs	r4, BASEPRI
   2901c:	f383 8811 	msr	BASEPRI, r3
   29020:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29024:	4817      	ldr	r0, [pc, #92]	; (29084 <z_remove_thread_from_ready_q+0x74>)
   29026:	f000 fe5b 	bl	29ce0 <z_spin_lock_valid>
   2902a:	b968      	cbnz	r0, 29048 <z_remove_thread_from_ready_q+0x38>
   2902c:	235c      	movs	r3, #92	; 0x5c
   2902e:	4a16      	ldr	r2, [pc, #88]	; (29088 <z_remove_thread_from_ready_q+0x78>)
   29030:	4916      	ldr	r1, [pc, #88]	; (2908c <z_remove_thread_from_ready_q+0x7c>)
   29032:	4817      	ldr	r0, [pc, #92]	; (29090 <z_remove_thread_from_ready_q+0x80>)
   29034:	f005 f8c2 	bl	2e1bc <printk>
   29038:	4912      	ldr	r1, [pc, #72]	; (29084 <z_remove_thread_from_ready_q+0x74>)
   2903a:	4816      	ldr	r0, [pc, #88]	; (29094 <z_remove_thread_from_ready_q+0x84>)
   2903c:	f005 f8be 	bl	2e1bc <printk>
   29040:	215c      	movs	r1, #92	; 0x5c
   29042:	4811      	ldr	r0, [pc, #68]	; (29088 <z_remove_thread_from_ready_q+0x78>)
   29044:	f005 fbbb 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29048:	480e      	ldr	r0, [pc, #56]	; (29084 <z_remove_thread_from_ready_q+0x74>)
   2904a:	f000 fe67 	bl	29d1c <z_spin_lock_set_owner>
		unready_thread(thread);
   2904e:	4628      	mov	r0, r5
   29050:	f7ff ffc2 	bl	28fd8 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29054:	480b      	ldr	r0, [pc, #44]	; (29084 <z_remove_thread_from_ready_q+0x74>)
   29056:	f000 fe51 	bl	29cfc <z_spin_unlock_valid>
   2905a:	b968      	cbnz	r0, 29078 <z_remove_thread_from_ready_q+0x68>
   2905c:	2384      	movs	r3, #132	; 0x84
   2905e:	4a0a      	ldr	r2, [pc, #40]	; (29088 <z_remove_thread_from_ready_q+0x78>)
   29060:	490d      	ldr	r1, [pc, #52]	; (29098 <z_remove_thread_from_ready_q+0x88>)
   29062:	480b      	ldr	r0, [pc, #44]	; (29090 <z_remove_thread_from_ready_q+0x80>)
   29064:	f005 f8aa 	bl	2e1bc <printk>
   29068:	4906      	ldr	r1, [pc, #24]	; (29084 <z_remove_thread_from_ready_q+0x74>)
   2906a:	480c      	ldr	r0, [pc, #48]	; (2909c <z_remove_thread_from_ready_q+0x8c>)
   2906c:	f005 f8a6 	bl	2e1bc <printk>
   29070:	2184      	movs	r1, #132	; 0x84
   29072:	4805      	ldr	r0, [pc, #20]	; (29088 <z_remove_thread_from_ready_q+0x78>)
   29074:	f005 fba3 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29078:	f384 8811 	msr	BASEPRI, r4
   2907c:	f3bf 8f6f 	isb	sy
}
   29080:	bd38      	pop	{r3, r4, r5, pc}
   29082:	bf00      	nop
   29084:	20027358 	.word	0x20027358
   29088:	00035cb3 	.word	0x00035cb3
   2908c:	00035cd9 	.word	0x00035cd9
   29090:	00035920 	.word	0x00035920
   29094:	00035cee 	.word	0x00035cee
   29098:	00035d06 	.word	0x00035d06
   2909c:	00035d1d 	.word	0x00035d1d

000290a0 <add_to_waitq_locked>:
{
   290a0:	b538      	push	{r3, r4, r5, lr}
   290a2:	4604      	mov	r4, r0
   290a4:	460d      	mov	r5, r1
	unready_thread(thread);
   290a6:	f7ff ff97 	bl	28fd8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   290aa:	7b63      	ldrb	r3, [r4, #13]
   290ac:	f043 0302 	orr.w	r3, r3, #2
   290b0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   290b2:	b1f5      	cbz	r5, 290f2 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   290b4:	4b16      	ldr	r3, [pc, #88]	; (29110 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   290b6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   290b8:	429c      	cmp	r4, r3
   290ba:	d10b      	bne.n	290d4 <add_to_waitq_locked+0x34>
   290bc:	4915      	ldr	r1, [pc, #84]	; (29114 <add_to_waitq_locked+0x74>)
   290be:	4816      	ldr	r0, [pc, #88]	; (29118 <add_to_waitq_locked+0x78>)
   290c0:	f240 3355 	movw	r3, #853	; 0x355
   290c4:	4a15      	ldr	r2, [pc, #84]	; (2911c <add_to_waitq_locked+0x7c>)
   290c6:	f005 f879 	bl	2e1bc <printk>
   290ca:	f240 3155 	movw	r1, #853	; 0x355
   290ce:	4813      	ldr	r0, [pc, #76]	; (2911c <add_to_waitq_locked+0x7c>)
   290d0:	f005 fb75 	bl	2e7be <assert_post_action>
	return list->head == list;
   290d4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   290d6:	429d      	cmp	r5, r3
   290d8:	d012      	beq.n	29100 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   290da:	b18b      	cbz	r3, 29100 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   290dc:	f994 200e 	ldrsb.w	r2, [r4, #14]
   290e0:	f993 100e 	ldrsb.w	r1, [r3, #14]
   290e4:	4291      	cmp	r1, r2
   290e6:	dd05      	ble.n	290f4 <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   290e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   290ea:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   290ee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   290f0:	605c      	str	r4, [r3, #4]
}
   290f2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   290f4:	6869      	ldr	r1, [r5, #4]
   290f6:	428b      	cmp	r3, r1
   290f8:	d002      	beq.n	29100 <add_to_waitq_locked+0x60>
   290fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   290fc:	2b00      	cmp	r3, #0
   290fe:	d1ef      	bne.n	290e0 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   29100:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   29102:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   29104:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   29106:	686b      	ldr	r3, [r5, #4]
   29108:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2910a:	606c      	str	r4, [r5, #4]
}
   2910c:	e7f1      	b.n	290f2 <add_to_waitq_locked+0x52>
   2910e:	bf00      	nop
   29110:	20022948 	.word	0x20022948
   29114:	00037380 	.word	0x00037380
   29118:	00035920 	.word	0x00035920
   2911c:	0003730a 	.word	0x0003730a

00029120 <pend>:
{
   29120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29122:	4604      	mov	r4, r0
   29124:	460f      	mov	r7, r1
   29126:	4615      	mov	r5, r2
	__asm__ volatile(
   29128:	f04f 0320 	mov.w	r3, #32
   2912c:	f3ef 8611 	mrs	r6, BASEPRI
   29130:	f383 8811 	msr	BASEPRI, r3
   29134:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29138:	4822      	ldr	r0, [pc, #136]	; (291c4 <pend+0xa4>)
   2913a:	f000 fdd1 	bl	29ce0 <z_spin_lock_valid>
   2913e:	b968      	cbnz	r0, 2915c <pend+0x3c>
   29140:	235c      	movs	r3, #92	; 0x5c
   29142:	4a21      	ldr	r2, [pc, #132]	; (291c8 <pend+0xa8>)
   29144:	4921      	ldr	r1, [pc, #132]	; (291cc <pend+0xac>)
   29146:	4822      	ldr	r0, [pc, #136]	; (291d0 <pend+0xb0>)
   29148:	f005 f838 	bl	2e1bc <printk>
   2914c:	491d      	ldr	r1, [pc, #116]	; (291c4 <pend+0xa4>)
   2914e:	4821      	ldr	r0, [pc, #132]	; (291d4 <pend+0xb4>)
   29150:	f005 f834 	bl	2e1bc <printk>
   29154:	215c      	movs	r1, #92	; 0x5c
   29156:	481c      	ldr	r0, [pc, #112]	; (291c8 <pend+0xa8>)
   29158:	f005 fb31 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2915c:	4819      	ldr	r0, [pc, #100]	; (291c4 <pend+0xa4>)
   2915e:	f000 fddd 	bl	29d1c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   29162:	4620      	mov	r0, r4
   29164:	4639      	mov	r1, r7
   29166:	f7ff ff9b 	bl	290a0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2916a:	4816      	ldr	r0, [pc, #88]	; (291c4 <pend+0xa4>)
   2916c:	f000 fdc6 	bl	29cfc <z_spin_unlock_valid>
   29170:	b968      	cbnz	r0, 2918e <pend+0x6e>
   29172:	2384      	movs	r3, #132	; 0x84
   29174:	4a14      	ldr	r2, [pc, #80]	; (291c8 <pend+0xa8>)
   29176:	4918      	ldr	r1, [pc, #96]	; (291d8 <pend+0xb8>)
   29178:	4815      	ldr	r0, [pc, #84]	; (291d0 <pend+0xb0>)
   2917a:	f005 f81f 	bl	2e1bc <printk>
   2917e:	4911      	ldr	r1, [pc, #68]	; (291c4 <pend+0xa4>)
   29180:	4816      	ldr	r0, [pc, #88]	; (291dc <pend+0xbc>)
   29182:	f005 f81b 	bl	2e1bc <printk>
   29186:	2184      	movs	r1, #132	; 0x84
   29188:	480f      	ldr	r0, [pc, #60]	; (291c8 <pend+0xa8>)
   2918a:	f005 fb18 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2918e:	f386 8811 	msr	BASEPRI, r6
   29192:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29196:	1c6b      	adds	r3, r5, #1
   29198:	d013      	beq.n	291c2 <pend+0xa2>
   2919a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2919e:	f240 30e7 	movw	r0, #999	; 0x3e7
   291a2:	2100      	movs	r1, #0
   291a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   291a8:	2300      	movs	r3, #0
   291aa:	fbe6 0105 	umlal	r0, r1, r6, r5
   291ae:	f7e4 fadf 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   291b2:	490b      	ldr	r1, [pc, #44]	; (291e0 <pend+0xc0>)
   291b4:	1c42      	adds	r2, r0, #1
   291b6:	f104 0018 	add.w	r0, r4, #24
}
   291ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   291be:	f000 bf13 	b.w	29fe8 <z_add_timeout>
   291c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291c4:	20027358 	.word	0x20027358
   291c8:	00035cb3 	.word	0x00035cb3
   291cc:	00035cd9 	.word	0x00035cd9
   291d0:	00035920 	.word	0x00035920
   291d4:	00035cee 	.word	0x00035cee
   291d8:	00035d06 	.word	0x00035d06
   291dc:	00035d1d 	.word	0x00035d1d
   291e0:	00028add 	.word	0x00028add

000291e4 <z_pend_thread>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   291e4:	4b0e      	ldr	r3, [pc, #56]	; (29220 <z_pend_thread+0x3c>)
{
   291e6:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   291e8:	689b      	ldr	r3, [r3, #8]
{
   291ea:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   291ec:	4283      	cmp	r3, r0
{
   291ee:	460d      	mov	r5, r1
   291f0:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   291f2:	d00e      	beq.n	29212 <z_pend_thread+0x2e>
   291f4:	7b43      	ldrb	r3, [r0, #13]
   291f6:	07db      	lsls	r3, r3, #31
   291f8:	d40b      	bmi.n	29212 <z_pend_thread+0x2e>
   291fa:	490a      	ldr	r1, [pc, #40]	; (29224 <z_pend_thread+0x40>)
   291fc:	480a      	ldr	r0, [pc, #40]	; (29228 <z_pend_thread+0x44>)
   291fe:	f240 2361 	movw	r3, #609	; 0x261
   29202:	4a0a      	ldr	r2, [pc, #40]	; (2922c <z_pend_thread+0x48>)
   29204:	f004 ffda 	bl	2e1bc <printk>
   29208:	f240 2161 	movw	r1, #609	; 0x261
   2920c:	4807      	ldr	r0, [pc, #28]	; (2922c <z_pend_thread+0x48>)
   2920e:	f005 fad6 	bl	2e7be <assert_post_action>
	pend(thread, wait_q, timeout);
   29212:	4632      	mov	r2, r6
   29214:	4629      	mov	r1, r5
   29216:	4620      	mov	r0, r4
}
   29218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	pend(thread, wait_q, timeout);
   2921c:	f7ff bf80 	b.w	29120 <pend>
   29220:	20027320 	.word	0x20027320
   29224:	00037343 	.word	0x00037343
   29228:	00035920 	.word	0x00035920
   2922c:	0003730a 	.word	0x0003730a

00029230 <z_pend_curr>:
{
   29230:	b538      	push	{r3, r4, r5, lr}
   29232:	4604      	mov	r4, r0
   29234:	460d      	mov	r5, r1
   29236:	4611      	mov	r1, r2
	pending_current = _current;
   29238:	4a0e      	ldr	r2, [pc, #56]	; (29274 <z_pend_curr+0x44>)
   2923a:	6890      	ldr	r0, [r2, #8]
   2923c:	4a0e      	ldr	r2, [pc, #56]	; (29278 <z_pend_curr+0x48>)
   2923e:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   29240:	461a      	mov	r2, r3
   29242:	f7ff ff6d 	bl	29120 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29246:	4620      	mov	r0, r4
   29248:	f000 fd58 	bl	29cfc <z_spin_unlock_valid>
   2924c:	b968      	cbnz	r0, 2926a <z_pend_curr+0x3a>
   2924e:	239b      	movs	r3, #155	; 0x9b
   29250:	4a0a      	ldr	r2, [pc, #40]	; (2927c <z_pend_curr+0x4c>)
   29252:	490b      	ldr	r1, [pc, #44]	; (29280 <z_pend_curr+0x50>)
   29254:	480b      	ldr	r0, [pc, #44]	; (29284 <z_pend_curr+0x54>)
   29256:	f004 ffb1 	bl	2e1bc <printk>
   2925a:	4621      	mov	r1, r4
   2925c:	480a      	ldr	r0, [pc, #40]	; (29288 <z_pend_curr+0x58>)
   2925e:	f004 ffad 	bl	2e1bc <printk>
   29262:	219b      	movs	r1, #155	; 0x9b
   29264:	4805      	ldr	r0, [pc, #20]	; (2927c <z_pend_curr+0x4c>)
   29266:	f005 faaa 	bl	2e7be <assert_post_action>
   2926a:	4628      	mov	r0, r5
}
   2926c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29270:	f7ef bc26 	b.w	18ac0 <arch_swap>
   29274:	20027320 	.word	0x20027320
   29278:	20027354 	.word	0x20027354
   2927c:	00035cb3 	.word	0x00035cb3
   29280:	00035d06 	.word	0x00035d06
   29284:	00035920 	.word	0x00035920
   29288:	00035d1d 	.word	0x00035d1d

0002928c <z_set_prio>:
{
   2928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2928e:	4604      	mov	r4, r0
   29290:	460d      	mov	r5, r1
	__asm__ volatile(
   29292:	f04f 0320 	mov.w	r3, #32
   29296:	f3ef 8611 	mrs	r6, BASEPRI
   2929a:	f383 8811 	msr	BASEPRI, r3
   2929e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   292a2:	4836      	ldr	r0, [pc, #216]	; (2937c <z_set_prio+0xf0>)
   292a4:	f000 fd1c 	bl	29ce0 <z_spin_lock_valid>
   292a8:	b968      	cbnz	r0, 292c6 <z_set_prio+0x3a>
   292aa:	235c      	movs	r3, #92	; 0x5c
   292ac:	4a34      	ldr	r2, [pc, #208]	; (29380 <z_set_prio+0xf4>)
   292ae:	4935      	ldr	r1, [pc, #212]	; (29384 <z_set_prio+0xf8>)
   292b0:	4835      	ldr	r0, [pc, #212]	; (29388 <z_set_prio+0xfc>)
   292b2:	f004 ff83 	bl	2e1bc <printk>
   292b6:	4931      	ldr	r1, [pc, #196]	; (2937c <z_set_prio+0xf0>)
   292b8:	4834      	ldr	r0, [pc, #208]	; (2938c <z_set_prio+0x100>)
   292ba:	f004 ff7f 	bl	2e1bc <printk>
   292be:	215c      	movs	r1, #92	; 0x5c
   292c0:	482f      	ldr	r0, [pc, #188]	; (29380 <z_set_prio+0xf4>)
   292c2:	f005 fa7c 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   292c6:	482d      	ldr	r0, [pc, #180]	; (2937c <z_set_prio+0xf0>)
   292c8:	f000 fd28 	bl	29d1c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   292cc:	7b63      	ldrb	r3, [r4, #13]
   292ce:	b26d      	sxtb	r5, r5
   292d0:	06db      	lsls	r3, r3, #27
   292d2:	d150      	bne.n	29376 <z_set_prio+0xea>
		if (need_sched) {
   292d4:	69a3      	ldr	r3, [r4, #24]
   292d6:	2b00      	cmp	r3, #0
   292d8:	d14d      	bne.n	29376 <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   292da:	4621      	mov	r1, r4
   292dc:	482c      	ldr	r0, [pc, #176]	; (29390 <z_set_prio+0x104>)
   292de:	f7ff fa47 	bl	28770 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   292e2:	4b2c      	ldr	r3, [pc, #176]	; (29394 <z_set_prio+0x108>)
				thread->base.prio = prio;
   292e4:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   292e6:	429c      	cmp	r4, r3
   292e8:	d10b      	bne.n	29302 <z_set_prio+0x76>
   292ea:	492b      	ldr	r1, [pc, #172]	; (29398 <z_set_prio+0x10c>)
   292ec:	4826      	ldr	r0, [pc, #152]	; (29388 <z_set_prio+0xfc>)
   292ee:	f240 3355 	movw	r3, #853	; 0x355
   292f2:	4a2a      	ldr	r2, [pc, #168]	; (2939c <z_set_prio+0x110>)
   292f4:	f004 ff62 	bl	2e1bc <printk>
   292f8:	f240 3155 	movw	r1, #853	; 0x355
   292fc:	4827      	ldr	r0, [pc, #156]	; (2939c <z_set_prio+0x110>)
   292fe:	f005 fa5e 	bl	2e7be <assert_post_action>
	return list->head == list;
   29302:	4a27      	ldr	r2, [pc, #156]	; (293a0 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29304:	f102 0128 	add.w	r1, r2, #40	; 0x28
   29308:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2930c:	428b      	cmp	r3, r1
   2930e:	d02c      	beq.n	2936a <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29310:	b35b      	cbz	r3, 2936a <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   29312:	f994 500e 	ldrsb.w	r5, [r4, #14]
   29316:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2931a:	42af      	cmp	r7, r5
   2931c:	dd20      	ble.n	29360 <z_set_prio+0xd4>
	node->prev = successor->prev;
   2931e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   29320:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   29324:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   29326:	605c      	str	r4, [r3, #4]
			update_cache(1);
   29328:	2001      	movs	r0, #1
   2932a:	f7ff faa5 	bl	28878 <update_cache>
   2932e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29330:	4812      	ldr	r0, [pc, #72]	; (2937c <z_set_prio+0xf0>)
   29332:	f000 fce3 	bl	29cfc <z_spin_unlock_valid>
   29336:	b968      	cbnz	r0, 29354 <z_set_prio+0xc8>
   29338:	2384      	movs	r3, #132	; 0x84
   2933a:	4a11      	ldr	r2, [pc, #68]	; (29380 <z_set_prio+0xf4>)
   2933c:	4919      	ldr	r1, [pc, #100]	; (293a4 <z_set_prio+0x118>)
   2933e:	4812      	ldr	r0, [pc, #72]	; (29388 <z_set_prio+0xfc>)
   29340:	f004 ff3c 	bl	2e1bc <printk>
   29344:	490d      	ldr	r1, [pc, #52]	; (2937c <z_set_prio+0xf0>)
   29346:	4818      	ldr	r0, [pc, #96]	; (293a8 <z_set_prio+0x11c>)
   29348:	f004 ff38 	bl	2e1bc <printk>
   2934c:	2184      	movs	r1, #132	; 0x84
   2934e:	480c      	ldr	r0, [pc, #48]	; (29380 <z_set_prio+0xf4>)
   29350:	f005 fa35 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29354:	f386 8811 	msr	BASEPRI, r6
   29358:	f3bf 8f6f 	isb	sy
}
   2935c:	4620      	mov	r0, r4
   2935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29360:	4298      	cmp	r0, r3
   29362:	d002      	beq.n	2936a <z_set_prio+0xde>
   29364:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29366:	2b00      	cmp	r3, #0
   29368:	d1d5      	bne.n	29316 <z_set_prio+0x8a>
	node->prev = list->tail;
   2936a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2936e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   29370:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29372:	62d4      	str	r4, [r2, #44]	; 0x2c
   29374:	e7d8      	b.n	29328 <z_set_prio+0x9c>
			thread->base.prio = prio;
   29376:	73a5      	strb	r5, [r4, #14]
   29378:	2400      	movs	r4, #0
   2937a:	e7d9      	b.n	29330 <z_set_prio+0xa4>
   2937c:	20027358 	.word	0x20027358
   29380:	00035cb3 	.word	0x00035cb3
   29384:	00035cd9 	.word	0x00035cd9
   29388:	00035920 	.word	0x00035920
   2938c:	00035cee 	.word	0x00035cee
   29390:	20027348 	.word	0x20027348
   29394:	20022948 	.word	0x20022948
   29398:	00037380 	.word	0x00037380
   2939c:	0003730a 	.word	0x0003730a
   293a0:	20027320 	.word	0x20027320
   293a4:	00035d06 	.word	0x00035d06
   293a8:	00035d1d 	.word	0x00035d1d

000293ac <z_unpend_first_thread>:
{
   293ac:	b538      	push	{r3, r4, r5, lr}
   293ae:	4604      	mov	r4, r0
	__asm__ volatile(
   293b0:	f04f 0320 	mov.w	r3, #32
   293b4:	f3ef 8511 	mrs	r5, BASEPRI
   293b8:	f383 8811 	msr	BASEPRI, r3
   293bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   293c0:	483b      	ldr	r0, [pc, #236]	; (294b0 <z_unpend_first_thread+0x104>)
   293c2:	f000 fc8d 	bl	29ce0 <z_spin_lock_valid>
   293c6:	b968      	cbnz	r0, 293e4 <z_unpend_first_thread+0x38>
   293c8:	235c      	movs	r3, #92	; 0x5c
   293ca:	4a3a      	ldr	r2, [pc, #232]	; (294b4 <z_unpend_first_thread+0x108>)
   293cc:	493a      	ldr	r1, [pc, #232]	; (294b8 <z_unpend_first_thread+0x10c>)
   293ce:	483b      	ldr	r0, [pc, #236]	; (294bc <z_unpend_first_thread+0x110>)
   293d0:	f004 fef4 	bl	2e1bc <printk>
   293d4:	4936      	ldr	r1, [pc, #216]	; (294b0 <z_unpend_first_thread+0x104>)
   293d6:	483a      	ldr	r0, [pc, #232]	; (294c0 <z_unpend_first_thread+0x114>)
   293d8:	f004 fef0 	bl	2e1bc <printk>
   293dc:	215c      	movs	r1, #92	; 0x5c
   293de:	4835      	ldr	r0, [pc, #212]	; (294b4 <z_unpend_first_thread+0x108>)
   293e0:	f005 f9ed 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   293e4:	4832      	ldr	r0, [pc, #200]	; (294b0 <z_unpend_first_thread+0x104>)
   293e6:	f000 fc99 	bl	29d1c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   293ea:	4620      	mov	r0, r4
   293ec:	f00a f879 	bl	334e2 <z_priq_dumb_best>
   293f0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   293f2:	482f      	ldr	r0, [pc, #188]	; (294b0 <z_unpend_first_thread+0x104>)
   293f4:	f000 fc82 	bl	29cfc <z_spin_unlock_valid>
   293f8:	b968      	cbnz	r0, 29416 <z_unpend_first_thread+0x6a>
   293fa:	2384      	movs	r3, #132	; 0x84
   293fc:	4a2d      	ldr	r2, [pc, #180]	; (294b4 <z_unpend_first_thread+0x108>)
   293fe:	4931      	ldr	r1, [pc, #196]	; (294c4 <z_unpend_first_thread+0x118>)
   29400:	482e      	ldr	r0, [pc, #184]	; (294bc <z_unpend_first_thread+0x110>)
   29402:	f004 fedb 	bl	2e1bc <printk>
   29406:	492a      	ldr	r1, [pc, #168]	; (294b0 <z_unpend_first_thread+0x104>)
   29408:	482f      	ldr	r0, [pc, #188]	; (294c8 <z_unpend_first_thread+0x11c>)
   2940a:	f004 fed7 	bl	2e1bc <printk>
   2940e:	2184      	movs	r1, #132	; 0x84
   29410:	4828      	ldr	r0, [pc, #160]	; (294b4 <z_unpend_first_thread+0x108>)
   29412:	f005 f9d4 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29416:	f385 8811 	msr	BASEPRI, r5
   2941a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2941e:	2c00      	cmp	r4, #0
   29420:	d043      	beq.n	294aa <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   29422:	f04f 0320 	mov.w	r3, #32
   29426:	f3ef 8511 	mrs	r5, BASEPRI
   2942a:	f383 8811 	msr	BASEPRI, r3
   2942e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29432:	481f      	ldr	r0, [pc, #124]	; (294b0 <z_unpend_first_thread+0x104>)
   29434:	f000 fc54 	bl	29ce0 <z_spin_lock_valid>
   29438:	b968      	cbnz	r0, 29456 <z_unpend_first_thread+0xaa>
   2943a:	235c      	movs	r3, #92	; 0x5c
   2943c:	4a1d      	ldr	r2, [pc, #116]	; (294b4 <z_unpend_first_thread+0x108>)
   2943e:	491e      	ldr	r1, [pc, #120]	; (294b8 <z_unpend_first_thread+0x10c>)
   29440:	481e      	ldr	r0, [pc, #120]	; (294bc <z_unpend_first_thread+0x110>)
   29442:	f004 febb 	bl	2e1bc <printk>
   29446:	491a      	ldr	r1, [pc, #104]	; (294b0 <z_unpend_first_thread+0x104>)
   29448:	481d      	ldr	r0, [pc, #116]	; (294c0 <z_unpend_first_thread+0x114>)
   2944a:	f004 feb7 	bl	2e1bc <printk>
   2944e:	215c      	movs	r1, #92	; 0x5c
   29450:	4818      	ldr	r0, [pc, #96]	; (294b4 <z_unpend_first_thread+0x108>)
   29452:	f005 f9b4 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29456:	4816      	ldr	r0, [pc, #88]	; (294b0 <z_unpend_first_thread+0x104>)
   29458:	f000 fc60 	bl	29d1c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2945c:	f104 0008 	add.w	r0, r4, #8
   29460:	f7fe ffa8 	bl	283b4 <pended_on.isra.18>
   29464:	4621      	mov	r1, r4
   29466:	f7ff f983 	bl	28770 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2946a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2946c:	4810      	ldr	r0, [pc, #64]	; (294b0 <z_unpend_first_thread+0x104>)
   2946e:	f023 0302 	bic.w	r3, r3, #2
   29472:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   29474:	2300      	movs	r3, #0
   29476:	60a3      	str	r3, [r4, #8]
   29478:	f000 fc40 	bl	29cfc <z_spin_unlock_valid>
   2947c:	b968      	cbnz	r0, 2949a <z_unpend_first_thread+0xee>
   2947e:	2384      	movs	r3, #132	; 0x84
   29480:	4a0c      	ldr	r2, [pc, #48]	; (294b4 <z_unpend_first_thread+0x108>)
   29482:	4910      	ldr	r1, [pc, #64]	; (294c4 <z_unpend_first_thread+0x118>)
   29484:	480d      	ldr	r0, [pc, #52]	; (294bc <z_unpend_first_thread+0x110>)
   29486:	f004 fe99 	bl	2e1bc <printk>
   2948a:	4909      	ldr	r1, [pc, #36]	; (294b0 <z_unpend_first_thread+0x104>)
   2948c:	480e      	ldr	r0, [pc, #56]	; (294c8 <z_unpend_first_thread+0x11c>)
   2948e:	f004 fe95 	bl	2e1bc <printk>
   29492:	2184      	movs	r1, #132	; 0x84
   29494:	4807      	ldr	r0, [pc, #28]	; (294b4 <z_unpend_first_thread+0x108>)
   29496:	f005 f992 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2949a:	f385 8811 	msr	BASEPRI, r5
   2949e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   294a2:	f104 0018 	add.w	r0, r4, #24
   294a6:	f000 fe47 	bl	2a138 <z_abort_timeout>
}
   294aa:	4620      	mov	r0, r4
   294ac:	bd38      	pop	{r3, r4, r5, pc}
   294ae:	bf00      	nop
   294b0:	20027358 	.word	0x20027358
   294b4:	00035cb3 	.word	0x00035cb3
   294b8:	00035cd9 	.word	0x00035cd9
   294bc:	00035920 	.word	0x00035920
   294c0:	00035cee 	.word	0x00035cee
   294c4:	00035d06 	.word	0x00035d06
   294c8:	00035d1d 	.word	0x00035d1d

000294cc <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   294cc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   294ce:	4b04      	ldr	r3, [pc, #16]	; (294e0 <z_sched_init+0x14>)
   294d0:	4608      	mov	r0, r1
   294d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   294d6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   294da:	f7fe bf99 	b.w	28410 <k_sched_time_slice_set>
   294de:	bf00      	nop
   294e0:	20027320 	.word	0x20027320

000294e4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   294e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   294e6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   294ea:	b173      	cbz	r3, 2950a <z_impl_k_yield+0x26>
   294ec:	4945      	ldr	r1, [pc, #276]	; (29604 <z_impl_k_yield+0x120>)
   294ee:	f44f 638c 	mov.w	r3, #1120	; 0x460
   294f2:	4a45      	ldr	r2, [pc, #276]	; (29608 <z_impl_k_yield+0x124>)
   294f4:	4845      	ldr	r0, [pc, #276]	; (2960c <z_impl_k_yield+0x128>)
   294f6:	f004 fe61 	bl	2e1bc <printk>
   294fa:	4845      	ldr	r0, [pc, #276]	; (29610 <z_impl_k_yield+0x12c>)
   294fc:	f004 fe5e 	bl	2e1bc <printk>
   29500:	f44f 618c 	mov.w	r1, #1120	; 0x460
   29504:	4840      	ldr	r0, [pc, #256]	; (29608 <z_impl_k_yield+0x124>)
   29506:	f005 f95a 	bl	2e7be <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2950a:	4c42      	ldr	r4, [pc, #264]	; (29614 <z_impl_k_yield+0x130>)
   2950c:	4e42      	ldr	r6, [pc, #264]	; (29618 <z_impl_k_yield+0x134>)
   2950e:	68a2      	ldr	r2, [r4, #8]
   29510:	42b2      	cmp	r2, r6
   29512:	d05f      	beq.n	295d4 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   29514:	f04f 0320 	mov.w	r3, #32
   29518:	f3ef 8711 	mrs	r7, BASEPRI
   2951c:	f383 8811 	msr	BASEPRI, r3
   29520:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29524:	483d      	ldr	r0, [pc, #244]	; (2961c <z_impl_k_yield+0x138>)
   29526:	f000 fbdb 	bl	29ce0 <z_spin_lock_valid>
   2952a:	b968      	cbnz	r0, 29548 <z_impl_k_yield+0x64>
   2952c:	235c      	movs	r3, #92	; 0x5c
   2952e:	4a3c      	ldr	r2, [pc, #240]	; (29620 <z_impl_k_yield+0x13c>)
   29530:	493c      	ldr	r1, [pc, #240]	; (29624 <z_impl_k_yield+0x140>)
   29532:	4836      	ldr	r0, [pc, #216]	; (2960c <z_impl_k_yield+0x128>)
   29534:	f004 fe42 	bl	2e1bc <printk>
   29538:	4938      	ldr	r1, [pc, #224]	; (2961c <z_impl_k_yield+0x138>)
   2953a:	483b      	ldr	r0, [pc, #236]	; (29628 <z_impl_k_yield+0x144>)
   2953c:	f004 fe3e 	bl	2e1bc <printk>
   29540:	215c      	movs	r1, #92	; 0x5c
   29542:	4837      	ldr	r0, [pc, #220]	; (29620 <z_impl_k_yield+0x13c>)
   29544:	f005 f93b 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29548:	4834      	ldr	r0, [pc, #208]	; (2961c <z_impl_k_yield+0x138>)
   2954a:	f000 fbe7 	bl	29d1c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   2954e:	68a1      	ldr	r1, [r4, #8]
   29550:	4836      	ldr	r0, [pc, #216]	; (2962c <z_impl_k_yield+0x148>)
   29552:	f7ff f90d 	bl	28770 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   29556:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29558:	42b5      	cmp	r5, r6
   2955a:	d10b      	bne.n	29574 <z_impl_k_yield+0x90>
   2955c:	4934      	ldr	r1, [pc, #208]	; (29630 <z_impl_k_yield+0x14c>)
   2955e:	482b      	ldr	r0, [pc, #172]	; (2960c <z_impl_k_yield+0x128>)
   29560:	f240 3355 	movw	r3, #853	; 0x355
   29564:	4a28      	ldr	r2, [pc, #160]	; (29608 <z_impl_k_yield+0x124>)
   29566:	f004 fe29 	bl	2e1bc <printk>
   2956a:	f240 3155 	movw	r1, #853	; 0x355
   2956e:	4826      	ldr	r0, [pc, #152]	; (29608 <z_impl_k_yield+0x124>)
   29570:	f005 f925 	bl	2e7be <assert_post_action>
	return list->head == list;
   29574:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29578:	4a2c      	ldr	r2, [pc, #176]	; (2962c <z_impl_k_yield+0x148>)
   2957a:	4293      	cmp	r3, r2
   2957c:	d03b      	beq.n	295f6 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2957e:	2b00      	cmp	r3, #0
   29580:	d039      	beq.n	295f6 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   29582:	f995 000e 	ldrsb.w	r0, [r5, #14]
   29586:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2958a:	4286      	cmp	r6, r0
   2958c:	dd2e      	ble.n	295ec <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   2958e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   29590:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   29594:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   29596:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   29598:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2959a:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   2959c:	7b53      	ldrb	r3, [r2, #13]
   2959e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   295a2:	7353      	strb	r3, [r2, #13]
   295a4:	f7ff f968 	bl	28878 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   295a8:	481c      	ldr	r0, [pc, #112]	; (2961c <z_impl_k_yield+0x138>)
   295aa:	f000 fba7 	bl	29cfc <z_spin_unlock_valid>
   295ae:	b968      	cbnz	r0, 295cc <z_impl_k_yield+0xe8>
   295b0:	2384      	movs	r3, #132	; 0x84
   295b2:	4a1b      	ldr	r2, [pc, #108]	; (29620 <z_impl_k_yield+0x13c>)
   295b4:	491f      	ldr	r1, [pc, #124]	; (29634 <z_impl_k_yield+0x150>)
   295b6:	4815      	ldr	r0, [pc, #84]	; (2960c <z_impl_k_yield+0x128>)
   295b8:	f004 fe00 	bl	2e1bc <printk>
   295bc:	4917      	ldr	r1, [pc, #92]	; (2961c <z_impl_k_yield+0x138>)
   295be:	481e      	ldr	r0, [pc, #120]	; (29638 <z_impl_k_yield+0x154>)
   295c0:	f004 fdfc 	bl	2e1bc <printk>
   295c4:	2184      	movs	r1, #132	; 0x84
   295c6:	4816      	ldr	r0, [pc, #88]	; (29620 <z_impl_k_yield+0x13c>)
   295c8:	f005 f8f9 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   295cc:	f387 8811 	msr	BASEPRI, r7
   295d0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   295d4:	f04f 0320 	mov.w	r3, #32
   295d8:	f3ef 8011 	mrs	r0, BASEPRI
   295dc:	f383 8811 	msr	BASEPRI, r3
   295e0:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   295e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   295e8:	f7ef ba6a 	b.w	18ac0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   295ec:	4299      	cmp	r1, r3
   295ee:	d002      	beq.n	295f6 <z_impl_k_yield+0x112>
   295f0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   295f2:	2b00      	cmp	r3, #0
   295f4:	d1c7      	bne.n	29586 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   295f6:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   295fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   295fc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   295fe:	62e5      	str	r5, [r4, #44]	; 0x2c
   29600:	e7ca      	b.n	29598 <z_impl_k_yield+0xb4>
   29602:	bf00      	nop
   29604:	00037298 	.word	0x00037298
   29608:	0003730a 	.word	0x0003730a
   2960c:	00035920 	.word	0x00035920
   29610:	00035d7e 	.word	0x00035d7e
   29614:	20027320 	.word	0x20027320
   29618:	20022948 	.word	0x20022948
   2961c:	20027358 	.word	0x20027358
   29620:	00035cb3 	.word	0x00035cb3
   29624:	00035cd9 	.word	0x00035cd9
   29628:	00035cee 	.word	0x00035cee
   2962c:	20027348 	.word	0x20027348
   29630:	00037380 	.word	0x00037380
   29634:	00035d06 	.word	0x00035d06
   29638:	00035d1d 	.word	0x00035d1d

0002963c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   2963c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2963e:	4604      	mov	r4, r0
   29640:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   29644:	b173      	cbz	r3, 29664 <z_tick_sleep+0x28>
   29646:	493b      	ldr	r1, [pc, #236]	; (29734 <z_tick_sleep+0xf8>)
   29648:	f240 437e 	movw	r3, #1150	; 0x47e
   2964c:	4a3a      	ldr	r2, [pc, #232]	; (29738 <z_tick_sleep+0xfc>)
   2964e:	483b      	ldr	r0, [pc, #236]	; (2973c <z_tick_sleep+0x100>)
   29650:	f004 fdb4 	bl	2e1bc <printk>
   29654:	483a      	ldr	r0, [pc, #232]	; (29740 <z_tick_sleep+0x104>)
   29656:	f004 fdb1 	bl	2e1bc <printk>
   2965a:	f240 417e 	movw	r1, #1150	; 0x47e
   2965e:	4836      	ldr	r0, [pc, #216]	; (29738 <z_tick_sleep+0xfc>)
   29660:	f005 f8ad 	bl	2e7be <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   29664:	b924      	cbnz	r4, 29670 <z_tick_sleep+0x34>
	z_impl_k_yield();
   29666:	f7ff ff3d 	bl	294e4 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   2966a:	4620      	mov	r0, r4
   2966c:	b003      	add	sp, #12
   2966e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   29670:	f009 ffd4 	bl	3361c <z_tick_get_32>
	struct k_spinlock local_lock = {};
   29674:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   29676:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   29678:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   2967a:	9301      	str	r3, [sp, #4]
   2967c:	f04f 0320 	mov.w	r3, #32
   29680:	f3ef 8711 	mrs	r7, BASEPRI
   29684:	f383 8811 	msr	BASEPRI, r3
   29688:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2968c:	a801      	add	r0, sp, #4
   2968e:	f000 fb27 	bl	29ce0 <z_spin_lock_valid>
   29692:	b968      	cbnz	r0, 296b0 <z_tick_sleep+0x74>
   29694:	235c      	movs	r3, #92	; 0x5c
   29696:	4a2b      	ldr	r2, [pc, #172]	; (29744 <z_tick_sleep+0x108>)
   29698:	492b      	ldr	r1, [pc, #172]	; (29748 <z_tick_sleep+0x10c>)
   2969a:	4828      	ldr	r0, [pc, #160]	; (2973c <z_tick_sleep+0x100>)
   2969c:	f004 fd8e 	bl	2e1bc <printk>
   296a0:	a901      	add	r1, sp, #4
   296a2:	482a      	ldr	r0, [pc, #168]	; (2974c <z_tick_sleep+0x110>)
   296a4:	f004 fd8a 	bl	2e1bc <printk>
   296a8:	215c      	movs	r1, #92	; 0x5c
   296aa:	4826      	ldr	r0, [pc, #152]	; (29744 <z_tick_sleep+0x108>)
   296ac:	f005 f887 	bl	2e7be <assert_post_action>
	pending_current = _current;
   296b0:	4d27      	ldr	r5, [pc, #156]	; (29750 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   296b2:	a801      	add	r0, sp, #4
   296b4:	f000 fb32 	bl	29d1c <z_spin_lock_set_owner>
   296b8:	4b26      	ldr	r3, [pc, #152]	; (29754 <z_tick_sleep+0x118>)
   296ba:	68a8      	ldr	r0, [r5, #8]
   296bc:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   296be:	f7ff fca7 	bl	29010 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   296c2:	68a8      	ldr	r0, [r5, #8]
   296c4:	4632      	mov	r2, r6
   296c6:	3018      	adds	r0, #24
   296c8:	4923      	ldr	r1, [pc, #140]	; (29758 <z_tick_sleep+0x11c>)
   296ca:	f000 fc8d 	bl	29fe8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   296ce:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   296d0:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   296d2:	7b53      	ldrb	r3, [r2, #13]
   296d4:	f043 0310 	orr.w	r3, r3, #16
   296d8:	7353      	strb	r3, [r2, #13]
   296da:	f000 fb0f 	bl	29cfc <z_spin_unlock_valid>
   296de:	b968      	cbnz	r0, 296fc <z_tick_sleep+0xc0>
   296e0:	239b      	movs	r3, #155	; 0x9b
   296e2:	4a18      	ldr	r2, [pc, #96]	; (29744 <z_tick_sleep+0x108>)
   296e4:	491d      	ldr	r1, [pc, #116]	; (2975c <z_tick_sleep+0x120>)
   296e6:	4815      	ldr	r0, [pc, #84]	; (2973c <z_tick_sleep+0x100>)
   296e8:	f004 fd68 	bl	2e1bc <printk>
   296ec:	a901      	add	r1, sp, #4
   296ee:	481c      	ldr	r0, [pc, #112]	; (29760 <z_tick_sleep+0x124>)
   296f0:	f004 fd64 	bl	2e1bc <printk>
   296f4:	219b      	movs	r1, #155	; 0x9b
   296f6:	4813      	ldr	r0, [pc, #76]	; (29744 <z_tick_sleep+0x108>)
   296f8:	f005 f861 	bl	2e7be <assert_post_action>
   296fc:	4638      	mov	r0, r7
   296fe:	f7ef f9df 	bl	18ac0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   29702:	68ab      	ldr	r3, [r5, #8]
   29704:	7b5b      	ldrb	r3, [r3, #13]
   29706:	06db      	lsls	r3, r3, #27
   29708:	d50e      	bpl.n	29728 <z_tick_sleep+0xec>
   2970a:	4916      	ldr	r1, [pc, #88]	; (29764 <z_tick_sleep+0x128>)
   2970c:	f240 43a3 	movw	r3, #1187	; 0x4a3
   29710:	4a09      	ldr	r2, [pc, #36]	; (29738 <z_tick_sleep+0xfc>)
   29712:	480a      	ldr	r0, [pc, #40]	; (2973c <z_tick_sleep+0x100>)
   29714:	f004 fd52 	bl	2e1bc <printk>
   29718:	4809      	ldr	r0, [pc, #36]	; (29740 <z_tick_sleep+0x104>)
   2971a:	f004 fd4f 	bl	2e1bc <printk>
   2971e:	f240 41a3 	movw	r1, #1187	; 0x4a3
   29722:	4805      	ldr	r0, [pc, #20]	; (29738 <z_tick_sleep+0xfc>)
   29724:	f005 f84b 	bl	2e7be <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   29728:	f009 ff78 	bl	3361c <z_tick_get_32>
   2972c:	1a24      	subs	r4, r4, r0
   2972e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   29732:	e79a      	b.n	2966a <z_tick_sleep+0x2e>
   29734:	00037298 	.word	0x00037298
   29738:	0003730a 	.word	0x0003730a
   2973c:	00035920 	.word	0x00035920
   29740:	00035d7e 	.word	0x00035d7e
   29744:	00035cb3 	.word	0x00035cb3
   29748:	00035cd9 	.word	0x00035cd9
   2974c:	00035cee 	.word	0x00035cee
   29750:	20027320 	.word	0x20027320
   29754:	20027354 	.word	0x20027354
   29758:	00028add 	.word	0x00028add
   2975c:	00035d06 	.word	0x00035d06
   29760:	00035d1d 	.word	0x00035d1d
   29764:	000373a1 	.word	0x000373a1

00029768 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   29768:	b538      	push	{r3, r4, r5, lr}
   2976a:	4604      	mov	r4, r0
   2976c:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   29770:	b173      	cbz	r3, 29790 <z_impl_k_sleep+0x28>
   29772:	4916      	ldr	r1, [pc, #88]	; (297cc <z_impl_k_sleep+0x64>)
   29774:	f240 43b2 	movw	r3, #1202	; 0x4b2
   29778:	4a15      	ldr	r2, [pc, #84]	; (297d0 <z_impl_k_sleep+0x68>)
   2977a:	4816      	ldr	r0, [pc, #88]	; (297d4 <z_impl_k_sleep+0x6c>)
   2977c:	f004 fd1e 	bl	2e1bc <printk>
   29780:	4815      	ldr	r0, [pc, #84]	; (297d8 <z_impl_k_sleep+0x70>)
   29782:	f004 fd1b 	bl	2e1bc <printk>
   29786:	f240 41b2 	movw	r1, #1202	; 0x4b2
   2978a:	4811      	ldr	r0, [pc, #68]	; (297d0 <z_impl_k_sleep+0x68>)
   2978c:	f005 f817 	bl	2e7be <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29790:	1c63      	adds	r3, r4, #1
   29792:	d105      	bne.n	297a0 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   29794:	4b11      	ldr	r3, [pc, #68]	; (297dc <z_impl_k_sleep+0x74>)
   29796:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   29798:	f7ff fb1c 	bl	28dd4 <z_impl_k_thread_suspend>
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   2979c:	4620      	mov	r0, r4
   2979e:	bd38      	pop	{r3, r4, r5, pc}
   297a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   297a4:	f240 30e7 	movw	r0, #999	; 0x3e7
   297a8:	2100      	movs	r1, #0
   297aa:	2300      	movs	r3, #0
   297ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   297b0:	fbe5 0104 	umlal	r0, r1, r5, r4
   297b4:	f7e3 ffdc 	bl	d770 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   297b8:	f7ff ff40 	bl	2963c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   297bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   297c0:	fba0 0103 	umull	r0, r1, r0, r3
   297c4:	0bc4      	lsrs	r4, r0, #15
   297c6:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   297ca:	e7e7      	b.n	2979c <z_impl_k_sleep+0x34>
   297cc:	00037298 	.word	0x00037298
   297d0:	0003730a 	.word	0x0003730a
   297d4:	00035920 	.word	0x00035920
   297d8:	00035d7e 	.word	0x00035d7e
   297dc:	20027320 	.word	0x20027320

000297e0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   297e0:	4b01      	ldr	r3, [pc, #4]	; (297e8 <z_impl_k_current_get+0x8>)
   297e2:	6898      	ldr	r0, [r3, #8]
   297e4:	4770      	bx	lr
   297e6:	bf00      	nop
   297e8:	20027320 	.word	0x20027320

000297ec <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   297ec:	b538      	push	{r3, r4, r5, lr}
   297ee:	4604      	mov	r4, r0
   297f0:	f04f 0320 	mov.w	r3, #32
   297f4:	f3ef 8511 	mrs	r5, BASEPRI
   297f8:	f383 8811 	msr	BASEPRI, r3
   297fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29800:	4817      	ldr	r0, [pc, #92]	; (29860 <z_impl_k_sem_give+0x74>)
   29802:	f000 fa6d 	bl	29ce0 <z_spin_lock_valid>
   29806:	b968      	cbnz	r0, 29824 <z_impl_k_sem_give+0x38>
   29808:	235c      	movs	r3, #92	; 0x5c
   2980a:	4a16      	ldr	r2, [pc, #88]	; (29864 <z_impl_k_sem_give+0x78>)
   2980c:	4916      	ldr	r1, [pc, #88]	; (29868 <z_impl_k_sem_give+0x7c>)
   2980e:	4817      	ldr	r0, [pc, #92]	; (2986c <z_impl_k_sem_give+0x80>)
   29810:	f004 fcd4 	bl	2e1bc <printk>
   29814:	4912      	ldr	r1, [pc, #72]	; (29860 <z_impl_k_sem_give+0x74>)
   29816:	4816      	ldr	r0, [pc, #88]	; (29870 <z_impl_k_sem_give+0x84>)
   29818:	f004 fcd0 	bl	2e1bc <printk>
   2981c:	215c      	movs	r1, #92	; 0x5c
   2981e:	4811      	ldr	r0, [pc, #68]	; (29864 <z_impl_k_sem_give+0x78>)
   29820:	f004 ffcd 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29824:	480e      	ldr	r0, [pc, #56]	; (29860 <z_impl_k_sem_give+0x74>)
   29826:	f000 fa79 	bl	29d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2982a:	4620      	mov	r0, r4
   2982c:	f7ff fdbe 	bl	293ac <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   29830:	b148      	cbz	r0, 29846 <z_impl_k_sem_give+0x5a>
   29832:	2200      	movs	r2, #0
   29834:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   29836:	f7ff f909 	bl	28a4c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2983a:	4629      	mov	r1, r5
}
   2983c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   29840:	4807      	ldr	r0, [pc, #28]	; (29860 <z_impl_k_sem_give+0x74>)
   29842:	f7fe bee1 	b.w	28608 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   29846:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2984a:	429a      	cmp	r2, r3
   2984c:	bf18      	it	ne
   2984e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   29850:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   29852:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   29854:	f104 0010 	add.w	r0, r4, #16
   29858:	f009 ff83 	bl	33762 <z_handle_obj_poll_events>
   2985c:	e7ed      	b.n	2983a <z_impl_k_sem_give+0x4e>
   2985e:	bf00      	nop
   29860:	20027364 	.word	0x20027364
   29864:	00035cb3 	.word	0x00035cb3
   29868:	00035cd9 	.word	0x00035cd9
   2986c:	00035920 	.word	0x00035920
   29870:	00035cee 	.word	0x00035cee

00029874 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   29874:	b570      	push	{r4, r5, r6, lr}
   29876:	4605      	mov	r5, r0
   29878:	460e      	mov	r6, r1
   2987a:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2987e:	b16b      	cbz	r3, 2989c <z_impl_k_sem_take+0x28>
   29880:	b161      	cbz	r1, 2989c <z_impl_k_sem_take+0x28>
   29882:	4934      	ldr	r1, [pc, #208]	; (29954 <z_impl_k_sem_take+0xe0>)
   29884:	238d      	movs	r3, #141	; 0x8d
   29886:	4a34      	ldr	r2, [pc, #208]	; (29958 <z_impl_k_sem_take+0xe4>)
   29888:	4834      	ldr	r0, [pc, #208]	; (2995c <z_impl_k_sem_take+0xe8>)
   2988a:	f004 fc97 	bl	2e1bc <printk>
   2988e:	4834      	ldr	r0, [pc, #208]	; (29960 <z_impl_k_sem_take+0xec>)
   29890:	f004 fc94 	bl	2e1bc <printk>
   29894:	218d      	movs	r1, #141	; 0x8d
   29896:	4830      	ldr	r0, [pc, #192]	; (29958 <z_impl_k_sem_take+0xe4>)
   29898:	f004 ff91 	bl	2e7be <assert_post_action>
   2989c:	f04f 0320 	mov.w	r3, #32
   298a0:	f3ef 8411 	mrs	r4, BASEPRI
   298a4:	f383 8811 	msr	BASEPRI, r3
   298a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   298ac:	482d      	ldr	r0, [pc, #180]	; (29964 <z_impl_k_sem_take+0xf0>)
   298ae:	f000 fa17 	bl	29ce0 <z_spin_lock_valid>
   298b2:	b968      	cbnz	r0, 298d0 <z_impl_k_sem_take+0x5c>
   298b4:	235c      	movs	r3, #92	; 0x5c
   298b6:	4a2c      	ldr	r2, [pc, #176]	; (29968 <z_impl_k_sem_take+0xf4>)
   298b8:	492c      	ldr	r1, [pc, #176]	; (2996c <z_impl_k_sem_take+0xf8>)
   298ba:	4828      	ldr	r0, [pc, #160]	; (2995c <z_impl_k_sem_take+0xe8>)
   298bc:	f004 fc7e 	bl	2e1bc <printk>
   298c0:	4928      	ldr	r1, [pc, #160]	; (29964 <z_impl_k_sem_take+0xf0>)
   298c2:	482b      	ldr	r0, [pc, #172]	; (29970 <z_impl_k_sem_take+0xfc>)
   298c4:	f004 fc7a 	bl	2e1bc <printk>
   298c8:	215c      	movs	r1, #92	; 0x5c
   298ca:	4827      	ldr	r0, [pc, #156]	; (29968 <z_impl_k_sem_take+0xf4>)
   298cc:	f004 ff77 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   298d0:	4824      	ldr	r0, [pc, #144]	; (29964 <z_impl_k_sem_take+0xf0>)
   298d2:	f000 fa23 	bl	29d1c <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   298d6:	68ab      	ldr	r3, [r5, #8]
   298d8:	b1cb      	cbz	r3, 2990e <z_impl_k_sem_take+0x9a>
		sem->count--;
   298da:	3b01      	subs	r3, #1
   298dc:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298de:	4821      	ldr	r0, [pc, #132]	; (29964 <z_impl_k_sem_take+0xf0>)
   298e0:	f000 fa0c 	bl	29cfc <z_spin_unlock_valid>
   298e4:	b968      	cbnz	r0, 29902 <z_impl_k_sem_take+0x8e>
   298e6:	2384      	movs	r3, #132	; 0x84
   298e8:	4a1f      	ldr	r2, [pc, #124]	; (29968 <z_impl_k_sem_take+0xf4>)
   298ea:	4922      	ldr	r1, [pc, #136]	; (29974 <z_impl_k_sem_take+0x100>)
   298ec:	481b      	ldr	r0, [pc, #108]	; (2995c <z_impl_k_sem_take+0xe8>)
   298ee:	f004 fc65 	bl	2e1bc <printk>
   298f2:	491c      	ldr	r1, [pc, #112]	; (29964 <z_impl_k_sem_take+0xf0>)
   298f4:	4820      	ldr	r0, [pc, #128]	; (29978 <z_impl_k_sem_take+0x104>)
   298f6:	f004 fc61 	bl	2e1bc <printk>
   298fa:	2184      	movs	r1, #132	; 0x84
   298fc:	481a      	ldr	r0, [pc, #104]	; (29968 <z_impl_k_sem_take+0xf4>)
   298fe:	f004 ff5e 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29902:	f384 8811 	msr	BASEPRI, r4
   29906:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2990a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2990c:	bd70      	pop	{r4, r5, r6, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2990e:	b9c6      	cbnz	r6, 29942 <z_impl_k_sem_take+0xce>
   29910:	4814      	ldr	r0, [pc, #80]	; (29964 <z_impl_k_sem_take+0xf0>)
   29912:	f000 f9f3 	bl	29cfc <z_spin_unlock_valid>
   29916:	b968      	cbnz	r0, 29934 <z_impl_k_sem_take+0xc0>
   29918:	2384      	movs	r3, #132	; 0x84
   2991a:	4a13      	ldr	r2, [pc, #76]	; (29968 <z_impl_k_sem_take+0xf4>)
   2991c:	4915      	ldr	r1, [pc, #84]	; (29974 <z_impl_k_sem_take+0x100>)
   2991e:	480f      	ldr	r0, [pc, #60]	; (2995c <z_impl_k_sem_take+0xe8>)
   29920:	f004 fc4c 	bl	2e1bc <printk>
   29924:	490f      	ldr	r1, [pc, #60]	; (29964 <z_impl_k_sem_take+0xf0>)
   29926:	4814      	ldr	r0, [pc, #80]	; (29978 <z_impl_k_sem_take+0x104>)
   29928:	f004 fc48 	bl	2e1bc <printk>
   2992c:	2184      	movs	r1, #132	; 0x84
   2992e:	480e      	ldr	r0, [pc, #56]	; (29968 <z_impl_k_sem_take+0xf4>)
   29930:	f004 ff45 	bl	2e7be <assert_post_action>
   29934:	f384 8811 	msr	BASEPRI, r4
   29938:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2993c:	f06f 000f 	mvn.w	r0, #15
		goto out;
   29940:	e7e4      	b.n	2990c <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   29942:	4633      	mov	r3, r6
   29944:	462a      	mov	r2, r5
   29946:	4621      	mov	r1, r4
}
   29948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2994c:	4805      	ldr	r0, [pc, #20]	; (29964 <z_impl_k_sem_take+0xf0>)
   2994e:	f7ff bc6f 	b.w	29230 <z_pend_curr>
   29952:	bf00      	nop
   29954:	00037401 	.word	0x00037401
   29958:	000373e1 	.word	0x000373e1
   2995c:	00035920 	.word	0x00035920
   29960:	00035d7e 	.word	0x00035d7e
   29964:	20027364 	.word	0x20027364
   29968:	00035cb3 	.word	0x00035cb3
   2996c:	00035cd9 	.word	0x00035cd9
   29970:	00035cee 	.word	0x00035cee
   29974:	00035d06 	.word	0x00035d06
   29978:	00035d1d 	.word	0x00035d1d

0002997c <z_impl_k_stack_push>:
int z_impl_k_stack_push(struct k_stack *stack, stack_data_t data)
{
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key;

	CHECKIF(stack->next == stack->top) {
   2997c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   29980:	429a      	cmp	r2, r3
{
   29982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29986:	4604      	mov	r4, r0
   29988:	460f      	mov	r7, r1
	CHECKIF(stack->next == stack->top) {
   2998a:	d04c      	beq.n	29a26 <z_impl_k_stack_push+0xaa>
		return -ENOMEM;
	}

	key = k_spin_lock(&stack->lock);
   2998c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   29990:	f04f 0320 	mov.w	r3, #32
   29994:	f3ef 8611 	mrs	r6, BASEPRI
   29998:	f383 8811 	msr	BASEPRI, r3
   2999c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   299a0:	4628      	mov	r0, r5
   299a2:	f000 f99d 	bl	29ce0 <z_spin_lock_valid>
   299a6:	b968      	cbnz	r0, 299c4 <z_impl_k_stack_push+0x48>
   299a8:	235c      	movs	r3, #92	; 0x5c
   299aa:	4a20      	ldr	r2, [pc, #128]	; (29a2c <z_impl_k_stack_push+0xb0>)
   299ac:	4920      	ldr	r1, [pc, #128]	; (29a30 <z_impl_k_stack_push+0xb4>)
   299ae:	4821      	ldr	r0, [pc, #132]	; (29a34 <z_impl_k_stack_push+0xb8>)
   299b0:	f004 fc04 	bl	2e1bc <printk>
   299b4:	4629      	mov	r1, r5
   299b6:	4820      	ldr	r0, [pc, #128]	; (29a38 <z_impl_k_stack_push+0xbc>)
   299b8:	f004 fc00 	bl	2e1bc <printk>
   299bc:	215c      	movs	r1, #92	; 0x5c
   299be:	481b      	ldr	r0, [pc, #108]	; (29a2c <z_impl_k_stack_push+0xb0>)
   299c0:	f004 fefd 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   299c4:	4628      	mov	r0, r5
   299c6:	f000 f9a9 	bl	29d1c <z_spin_lock_set_owner>

	first_pending_thread = z_unpend_first_thread(&stack->wait_q);
   299ca:	4620      	mov	r0, r4
   299cc:	f7ff fcee 	bl	293ac <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   299d0:	4680      	mov	r8, r0
   299d2:	b168      	cbz	r0, 299f0 <z_impl_k_stack_push+0x74>
   299d4:	2400      	movs	r4, #0
		z_ready_thread(first_pending_thread);
   299d6:	f7ff f839 	bl	28a4c <z_ready_thread>
   299da:	f8c8 4070 	str.w	r4, [r8, #112]	; 0x70
   299de:	f8c8 7014 	str.w	r7, [r8, #20]

		z_thread_return_value_set_with_data(first_pending_thread,
						   0, (void *)data);
		z_reschedule(&stack->lock, key);
   299e2:	4631      	mov	r1, r6
   299e4:	4628      	mov	r0, r5
   299e6:	f7fe fe0f 	bl	28608 <z_reschedule>
		*(stack->next) = data;
		stack->next++;
		k_spin_unlock(&stack->lock, key);
	}

	return 0;
   299ea:	2000      	movs	r0, #0
}
   299ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(stack->next) = data;
   299f0:	6923      	ldr	r3, [r4, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   299f2:	4628      	mov	r0, r5
   299f4:	f843 7b04 	str.w	r7, [r3], #4
		stack->next++;
   299f8:	6123      	str	r3, [r4, #16]
   299fa:	f000 f97f 	bl	29cfc <z_spin_unlock_valid>
   299fe:	b968      	cbnz	r0, 29a1c <z_impl_k_stack_push+0xa0>
   29a00:	2384      	movs	r3, #132	; 0x84
   29a02:	4a0a      	ldr	r2, [pc, #40]	; (29a2c <z_impl_k_stack_push+0xb0>)
   29a04:	490d      	ldr	r1, [pc, #52]	; (29a3c <z_impl_k_stack_push+0xc0>)
   29a06:	480b      	ldr	r0, [pc, #44]	; (29a34 <z_impl_k_stack_push+0xb8>)
   29a08:	f004 fbd8 	bl	2e1bc <printk>
   29a0c:	4629      	mov	r1, r5
   29a0e:	480c      	ldr	r0, [pc, #48]	; (29a40 <z_impl_k_stack_push+0xc4>)
   29a10:	f004 fbd4 	bl	2e1bc <printk>
   29a14:	2184      	movs	r1, #132	; 0x84
   29a16:	4805      	ldr	r0, [pc, #20]	; (29a2c <z_impl_k_stack_push+0xb0>)
   29a18:	f004 fed1 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29a1c:	f386 8811 	msr	BASEPRI, r6
   29a20:	f3bf 8f6f 	isb	sy
   29a24:	e7e1      	b.n	299ea <z_impl_k_stack_push+0x6e>
		return -ENOMEM;
   29a26:	f06f 000b 	mvn.w	r0, #11
   29a2a:	e7df      	b.n	299ec <z_impl_k_stack_push+0x70>
   29a2c:	00035cb3 	.word	0x00035cb3
   29a30:	00035cd9 	.word	0x00035cd9
   29a34:	00035920 	.word	0x00035920
   29a38:	00035cee 	.word	0x00035cee
   29a3c:	00035d06 	.word	0x00035d06
   29a40:	00035d1d 	.word	0x00035d1d

00029a44 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   29a44:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   29a46:	4c08      	ldr	r4, [pc, #32]	; (29a68 <k_sys_work_q_init+0x24>)
   29a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   29a50:	4906      	ldr	r1, [pc, #24]	; (29a6c <k_sys_work_q_init+0x28>)
   29a52:	4620      	mov	r0, r4
   29a54:	f000 f96a 	bl	29d2c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   29a58:	4905      	ldr	r1, [pc, #20]	; (29a70 <k_sys_work_q_init+0x2c>)
   29a5a:	f104 001c 	add.w	r0, r4, #28
   29a5e:	f009 fd6e 	bl	3353e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   29a62:	2000      	movs	r0, #0
   29a64:	bd10      	pop	{r4, pc}
   29a66:	bf00      	nop
   29a68:	20027368 	.word	0x20027368
   29a6c:	20034fd8 	.word	0x20034fd8
   29a70:	00037431 	.word	0x00037431

00029a74 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   29a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29a78:	b086      	sub	sp, #24
   29a7a:	e9dd 6811 	ldrd	r6, r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   29a7e:	2e0f      	cmp	r6, #15
{
   29a80:	4604      	mov	r4, r0
   29a82:	4689      	mov	r9, r1
   29a84:	4692      	mov	sl, r2
   29a86:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   29a88:	d127      	bne.n	29ada <z_setup_new_thread+0x66>
   29a8a:	4b20      	ldr	r3, [pc, #128]	; (29b0c <z_setup_new_thread+0x98>)
   29a8c:	429f      	cmp	r7, r3
   29a8e:	d128      	bne.n	29ae2 <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
   29a90:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   29a94:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   29a98:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   29a9a:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
   29a9c:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->user_options = (u8_t)options;
   29aa0:	f884 800c 	strb.w	r8, [r4, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29aa4:	9302      	str	r3, [sp, #8]
   29aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	thread_base->prio = priority;
   29aa8:	73a6      	strb	r6, [r4, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29aaa:	9301      	str	r3, [sp, #4]
   29aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->sched_locked = 0U;
   29aae:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29ab0:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
   29ab2:	e9c4 5506 	strd	r5, r5, [r4, #24]
   29ab6:	463b      	mov	r3, r7
   29ab8:	e9cd 6803 	strd	r6, r8, [sp, #12]
   29abc:	4652      	mov	r2, sl
   29abe:	4649      	mov	r1, r9
   29ac0:	4620      	mov	r0, r4
   29ac2:	f7ef f8cf 	bl	18c64 <arch_new_thread>
	if (!_current) {
   29ac6:	4b12      	ldr	r3, [pc, #72]	; (29b10 <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
   29ac8:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   29acc:	689b      	ldr	r3, [r3, #8]
   29ace:	b103      	cbz	r3, 29ad2 <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   29ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   29ad2:	66a3      	str	r3, [r4, #104]	; 0x68
}
   29ad4:	b006      	add	sp, #24
   29ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   29ada:	f106 0310 	add.w	r3, r6, #16
   29ade:	2b1e      	cmp	r3, #30
   29ae0:	d9d6      	bls.n	29a90 <z_setup_new_thread+0x1c>
   29ae2:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   29ae6:	4a0b      	ldr	r2, [pc, #44]	; (29b14 <z_setup_new_thread+0xa0>)
   29ae8:	490b      	ldr	r1, [pc, #44]	; (29b18 <z_setup_new_thread+0xa4>)
   29aea:	480c      	ldr	r0, [pc, #48]	; (29b1c <z_setup_new_thread+0xa8>)
   29aec:	f004 fb66 	bl	2e1bc <printk>
   29af0:	4631      	mov	r1, r6
   29af2:	f06f 030f 	mvn.w	r3, #15
   29af6:	220e      	movs	r2, #14
   29af8:	4809      	ldr	r0, [pc, #36]	; (29b20 <z_setup_new_thread+0xac>)
   29afa:	f004 fb5f 	bl	2e1bc <printk>
   29afe:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   29b02:	4804      	ldr	r0, [pc, #16]	; (29b14 <z_setup_new_thread+0xa0>)
   29b04:	f004 fe5b 	bl	2e7be <assert_post_action>
   29b08:	e7c2      	b.n	29a90 <z_setup_new_thread+0x1c>
   29b0a:	bf00      	nop
   29b0c:	00027195 	.word	0x00027195
   29b10:	20027320 	.word	0x20027320
   29b14:	0003748c 	.word	0x0003748c
   29b18:	000374af 	.word	0x000374af
   29b1c:	00035920 	.word	0x00035920
   29b20:	0003752f 	.word	0x0003752f

00029b24 <z_impl_k_thread_create>:
{
   29b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b28:	b086      	sub	sp, #24
   29b2a:	4604      	mov	r4, r0
   29b2c:	460e      	mov	r6, r1
   29b2e:	4617      	mov	r7, r2
   29b30:	4698      	mov	r8, r3
   29b32:	9d11      	ldr	r5, [sp, #68]	; 0x44
   29b34:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   29b38:	b173      	cbz	r3, 29b58 <z_impl_k_thread_create+0x34>
   29b3a:	491f      	ldr	r1, [pc, #124]	; (29bb8 <z_impl_k_thread_create+0x94>)
   29b3c:	f240 2343 	movw	r3, #579	; 0x243
   29b40:	4a1e      	ldr	r2, [pc, #120]	; (29bbc <z_impl_k_thread_create+0x98>)
   29b42:	481f      	ldr	r0, [pc, #124]	; (29bc0 <z_impl_k_thread_create+0x9c>)
   29b44:	f004 fb3a 	bl	2e1bc <printk>
   29b48:	481e      	ldr	r0, [pc, #120]	; (29bc4 <z_impl_k_thread_create+0xa0>)
   29b4a:	f004 fb37 	bl	2e1bc <printk>
   29b4e:	f240 2143 	movw	r1, #579	; 0x243
   29b52:	481a      	ldr	r0, [pc, #104]	; (29bbc <z_impl_k_thread_create+0x98>)
   29b54:	f004 fe33 	bl	2e7be <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29b58:	2300      	movs	r3, #0
   29b5a:	9305      	str	r3, [sp, #20]
   29b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29b5e:	463a      	mov	r2, r7
   29b60:	9304      	str	r3, [sp, #16]
   29b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29b64:	4631      	mov	r1, r6
   29b66:	9303      	str	r3, [sp, #12]
   29b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29b6a:	4620      	mov	r0, r4
   29b6c:	9302      	str	r3, [sp, #8]
   29b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29b70:	9301      	str	r3, [sp, #4]
   29b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29b74:	9300      	str	r3, [sp, #0]
   29b76:	4643      	mov	r3, r8
   29b78:	f7ff ff7c 	bl	29a74 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   29b7c:	1c6b      	adds	r3, r5, #1
   29b7e:	d003      	beq.n	29b88 <z_impl_k_thread_create+0x64>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   29b80:	b935      	cbnz	r5, 29b90 <z_impl_k_thread_create+0x6c>
	z_sched_start(thread);
   29b82:	4620      	mov	r0, r4
   29b84:	f7ff f80e 	bl	28ba4 <z_sched_start>
}
   29b88:	4620      	mov	r0, r4
   29b8a:	b006      	add	sp, #24
   29b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   29b90:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29b94:	f240 30e7 	movw	r0, #999	; 0x3e7
   29b98:	2100      	movs	r1, #0
   29b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29b9e:	2300      	movs	r3, #0
   29ba0:	fbe6 0105 	umlal	r0, r1, r6, r5
   29ba4:	f7e3 fde4 	bl	d770 <__aeabi_uldivmod>
   29ba8:	4907      	ldr	r1, [pc, #28]	; (29bc8 <z_impl_k_thread_create+0xa4>)
   29baa:	1c42      	adds	r2, r0, #1
   29bac:	f104 0018 	add.w	r0, r4, #24
   29bb0:	f000 fa1a 	bl	29fe8 <z_add_timeout>
   29bb4:	e7e8      	b.n	29b88 <z_impl_k_thread_create+0x64>
   29bb6:	bf00      	nop
   29bb8:	00037298 	.word	0x00037298
   29bbc:	0003748c 	.word	0x0003748c
   29bc0:	00035920 	.word	0x00035920
   29bc4:	0003743a 	.word	0x0003743a
   29bc8:	00028add 	.word	0x00028add

00029bcc <z_init_static_threads>:
{
   29bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   29bd0:	4f3c      	ldr	r7, [pc, #240]	; (29cc4 <z_init_static_threads+0xf8>)
   29bd2:	4d3d      	ldr	r5, [pc, #244]	; (29cc8 <z_init_static_threads+0xfc>)
   29bd4:	463e      	mov	r6, r7
   29bd6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 29cd8 <z_init_static_threads+0x10c>
{
   29bda:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   29bdc:	42bd      	cmp	r5, r7
   29bde:	d90e      	bls.n	29bfe <z_init_static_threads+0x32>
   29be0:	493a      	ldr	r1, [pc, #232]	; (29ccc <z_init_static_threads+0x100>)
   29be2:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   29be6:	4642      	mov	r2, r8
   29be8:	4839      	ldr	r0, [pc, #228]	; (29cd0 <z_init_static_threads+0x104>)
   29bea:	f004 fae7 	bl	2e1bc <printk>
   29bee:	4839      	ldr	r0, [pc, #228]	; (29cd4 <z_init_static_threads+0x108>)
   29bf0:	f004 fae4 	bl	2e1bc <printk>
   29bf4:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   29bf8:	4640      	mov	r0, r8
   29bfa:	f004 fde0 	bl	2e7be <assert_post_action>
   29bfe:	42b5      	cmp	r5, r6
   29c00:	f105 0430 	add.w	r4, r5, #48	; 0x30
   29c04:	d31f      	bcc.n	29c46 <z_init_static_threads+0x7a>
	k_sched_lock();
   29c06:	f7fe fd3b 	bl	28680 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   29c0a:	4c2f      	ldr	r4, [pc, #188]	; (29cc8 <z_init_static_threads+0xfc>)
   29c0c:	4d32      	ldr	r5, [pc, #200]	; (29cd8 <z_init_static_threads+0x10c>)
   29c0e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 29ccc <z_init_static_threads+0x100>
   29c12:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 29cd0 <z_init_static_threads+0x104>
   29c16:	42b4      	cmp	r4, r6
   29c18:	d90e      	bls.n	29c38 <z_init_static_threads+0x6c>
   29c1a:	4641      	mov	r1, r8
   29c1c:	f240 23c7 	movw	r3, #711	; 0x2c7
   29c20:	462a      	mov	r2, r5
   29c22:	4648      	mov	r0, r9
   29c24:	f004 faca 	bl	2e1bc <printk>
   29c28:	482a      	ldr	r0, [pc, #168]	; (29cd4 <z_init_static_threads+0x108>)
   29c2a:	f004 fac7 	bl	2e1bc <printk>
   29c2e:	f240 21c7 	movw	r1, #711	; 0x2c7
   29c32:	4628      	mov	r0, r5
   29c34:	f004 fdc3 	bl	2e7be <assert_post_action>
   29c38:	42b4      	cmp	r4, r6
   29c3a:	d321      	bcc.n	29c80 <z_init_static_threads+0xb4>
}
   29c3c:	b007      	add	sp, #28
   29c3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   29c42:	f7fe be3d 	b.w	288c0 <k_sched_unlock>
		z_setup_new_thread(
   29c46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29c4a:	9305      	str	r3, [sp, #20]
   29c4c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   29c50:	9304      	str	r3, [sp, #16]
   29c52:	f854 3c14 	ldr.w	r3, [r4, #-20]
   29c56:	9303      	str	r3, [sp, #12]
   29c58:	f854 3c18 	ldr.w	r3, [r4, #-24]
   29c5c:	9302      	str	r3, [sp, #8]
   29c5e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   29c62:	9301      	str	r3, [sp, #4]
   29c64:	f854 3c20 	ldr.w	r3, [r4, #-32]
   29c68:	9300      	str	r3, [sp, #0]
   29c6a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   29c6e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   29c72:	f7ff feff 	bl	29a74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   29c76:	f854 3c30 	ldr.w	r3, [r4, #-48]
   29c7a:	655d      	str	r5, [r3, #84]	; 0x54
   29c7c:	4625      	mov	r5, r4
   29c7e:	e7ad      	b.n	29bdc <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   29c80:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   29c84:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   29c88:	d006      	beq.n	29c98 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   29c8a:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   29c8c:	f1bc 0f00 	cmp.w	ip, #0
   29c90:	d104      	bne.n	29c9c <z_init_static_threads+0xd0>
	z_sched_start(thread);
   29c92:	4638      	mov	r0, r7
   29c94:	f7fe ff86 	bl	28ba4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   29c98:	3430      	adds	r4, #48	; 0x30
   29c9a:	e7bc      	b.n	29c16 <z_init_static_threads+0x4a>
   29c9c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   29ca0:	f240 30e7 	movw	r0, #999	; 0x3e7
   29ca4:	2100      	movs	r1, #0
   29ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29caa:	2300      	movs	r3, #0
   29cac:	fbee 010c 	umlal	r0, r1, lr, ip
   29cb0:	f7e3 fd5e 	bl	d770 <__aeabi_uldivmod>
   29cb4:	4909      	ldr	r1, [pc, #36]	; (29cdc <z_init_static_threads+0x110>)
   29cb6:	1c42      	adds	r2, r0, #1
   29cb8:	f107 0018 	add.w	r0, r7, #24
   29cbc:	f000 f994 	bl	29fe8 <z_add_timeout>
   29cc0:	e7ea      	b.n	29c98 <z_init_static_threads+0xcc>
   29cc2:	bf00      	nop
   29cc4:	200204bc 	.word	0x200204bc
   29cc8:	2002048c 	.word	0x2002048c
   29ccc:	0003745f 	.word	0x0003745f
   29cd0:	00035920 	.word	0x00035920
   29cd4:	00035dfc 	.word	0x00035dfc
   29cd8:	0003748c 	.word	0x0003748c
   29cdc:	00028add 	.word	0x00028add

00029ce0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   29ce0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   29ce2:	b138      	cbz	r0, 29cf4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   29ce4:	4b04      	ldr	r3, [pc, #16]	; (29cf8 <z_spin_lock_valid+0x18>)
   29ce6:	f000 0003 	and.w	r0, r0, #3
   29cea:	7d1b      	ldrb	r3, [r3, #20]
   29cec:	1ac0      	subs	r0, r0, r3
   29cee:	bf18      	it	ne
   29cf0:	2001      	movne	r0, #1
   29cf2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   29cf4:	2001      	movs	r0, #1
}
   29cf6:	4770      	bx	lr
   29cf8:	20027320 	.word	0x20027320

00029cfc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   29cfc:	4a06      	ldr	r2, [pc, #24]	; (29d18 <z_spin_unlock_valid+0x1c>)
   29cfe:	7d11      	ldrb	r1, [r2, #20]
   29d00:	6893      	ldr	r3, [r2, #8]
   29d02:	6802      	ldr	r2, [r0, #0]
   29d04:	430b      	orrs	r3, r1
   29d06:	429a      	cmp	r2, r3
   29d08:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   29d0c:	bf06      	itte	eq
   29d0e:	6003      	streq	r3, [r0, #0]
	return true;
   29d10:	2001      	moveq	r0, #1
		return false;
   29d12:	4618      	movne	r0, r3
}
   29d14:	4770      	bx	lr
   29d16:	bf00      	nop
   29d18:	20027320 	.word	0x20027320

00029d1c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   29d1c:	4a02      	ldr	r2, [pc, #8]	; (29d28 <z_spin_lock_set_owner+0xc>)
   29d1e:	7d11      	ldrb	r1, [r2, #20]
   29d20:	6893      	ldr	r3, [r2, #8]
   29d22:	430b      	orrs	r3, r1
   29d24:	6003      	str	r3, [r0, #0]
}
   29d26:	4770      	bx	lr
   29d28:	20027320 	.word	0x20027320

00029d2c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   29d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d30:	4605      	mov	r5, r0
   29d32:	b086      	sub	sp, #24
   29d34:	460e      	mov	r6, r1
   29d36:	4617      	mov	r7, r2
   29d38:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   29d3a:	f009 fb9c 	bl	33476 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   29d3e:	f105 041c 	add.w	r4, r5, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   29d42:	2000      	movs	r0, #0
   29d44:	4b09      	ldr	r3, [pc, #36]	; (29d6c <k_work_q_start+0x40>)
   29d46:	e9cd 0004 	strd	r0, r0, [sp, #16]
   29d4a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   29d4e:	e9cd 5000 	strd	r5, r0, [sp]
   29d52:	463a      	mov	r2, r7
   29d54:	4631      	mov	r1, r6
   29d56:	4620      	mov	r0, r4
   29d58:	f7ff fee4 	bl	29b24 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   29d5c:	4620      	mov	r0, r4
   29d5e:	4904      	ldr	r1, [pc, #16]	; (29d70 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   29d60:	b006      	add	sp, #24
   29d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29d66:	f009 bbea 	b.w	3353e <z_impl_k_thread_name_set>
   29d6a:	bf00      	nop
   29d6c:	0002e22d 	.word	0x0002e22d
   29d70:	00037560 	.word	0x00037560

00029d74 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   29d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d78:	4606      	mov	r6, r0
   29d7a:	460d      	mov	r5, r1
   29d7c:	4690      	mov	r8, r2
	__asm__ volatile(
   29d7e:	f04f 0320 	mov.w	r3, #32
   29d82:	f3ef 8711 	mrs	r7, BASEPRI
   29d86:	f383 8811 	msr	BASEPRI, r3
   29d8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29d8e:	483a      	ldr	r0, [pc, #232]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29d90:	f7ff ffa6 	bl	29ce0 <z_spin_lock_valid>
   29d94:	b968      	cbnz	r0, 29db2 <k_delayed_work_submit_to_queue+0x3e>
   29d96:	235c      	movs	r3, #92	; 0x5c
   29d98:	4a38      	ldr	r2, [pc, #224]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29d9a:	4939      	ldr	r1, [pc, #228]	; (29e80 <k_delayed_work_submit_to_queue+0x10c>)
   29d9c:	4839      	ldr	r0, [pc, #228]	; (29e84 <k_delayed_work_submit_to_queue+0x110>)
   29d9e:	f004 fa0d 	bl	2e1bc <printk>
   29da2:	4935      	ldr	r1, [pc, #212]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29da4:	4838      	ldr	r0, [pc, #224]	; (29e88 <k_delayed_work_submit_to_queue+0x114>)
   29da6:	f004 fa09 	bl	2e1bc <printk>
   29daa:	215c      	movs	r1, #92	; 0x5c
   29dac:	4833      	ldr	r0, [pc, #204]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29dae:	f004 fd06 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29db2:	4831      	ldr	r0, [pc, #196]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29db4:	f7ff ffb2 	bl	29d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   29db8:	69eb      	ldr	r3, [r5, #28]
   29dba:	b30b      	cbz	r3, 29e00 <k_delayed_work_submit_to_queue+0x8c>
   29dbc:	42b3      	cmp	r3, r6
   29dbe:	d157      	bne.n	29e70 <k_delayed_work_submit_to_queue+0xfc>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   29dc0:	4628      	mov	r0, r5
   29dc2:	f009 fbe0 	bl	33586 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   29dc6:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   29dca:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   29dcc:	d01a      	beq.n	29e04 <k_delayed_work_submit_to_queue+0x90>
			err = 0;
		} else if (err < 0) {
   29dce:	2800      	cmp	r0, #0
   29dd0:	da19      	bge.n	29e06 <k_delayed_work_submit_to_queue+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29dd2:	4829      	ldr	r0, [pc, #164]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29dd4:	f7ff ff92 	bl	29cfc <z_spin_unlock_valid>
   29dd8:	b968      	cbnz	r0, 29df6 <k_delayed_work_submit_to_queue+0x82>
   29dda:	2384      	movs	r3, #132	; 0x84
   29ddc:	4a27      	ldr	r2, [pc, #156]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29dde:	492b      	ldr	r1, [pc, #172]	; (29e8c <k_delayed_work_submit_to_queue+0x118>)
   29de0:	4828      	ldr	r0, [pc, #160]	; (29e84 <k_delayed_work_submit_to_queue+0x110>)
   29de2:	f004 f9eb 	bl	2e1bc <printk>
   29de6:	4924      	ldr	r1, [pc, #144]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29de8:	4829      	ldr	r0, [pc, #164]	; (29e90 <k_delayed_work_submit_to_queue+0x11c>)
   29dea:	f004 f9e7 	bl	2e1bc <printk>
   29dee:	2184      	movs	r1, #132	; 0x84
   29df0:	4822      	ldr	r0, [pc, #136]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29df2:	f004 fce4 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29df6:	f387 8811 	msr	BASEPRI, r7
   29dfa:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   29dfe:	e021      	b.n	29e44 <k_delayed_work_submit_to_queue+0xd0>
	if (work->work_q == work_q) {
   29e00:	2e00      	cmp	r6, #0
   29e02:	d0dd      	beq.n	29dc0 <k_delayed_work_submit_to_queue+0x4c>
	int err = 0;
   29e04:	2400      	movs	r4, #0
	work->work_q = work_q;
   29e06:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   29e08:	f1b8 0f00 	cmp.w	r8, #0
   29e0c:	d11d      	bne.n	29e4a <k_delayed_work_submit_to_queue+0xd6>
   29e0e:	481a      	ldr	r0, [pc, #104]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29e10:	f7ff ff74 	bl	29cfc <z_spin_unlock_valid>
   29e14:	b968      	cbnz	r0, 29e32 <k_delayed_work_submit_to_queue+0xbe>
   29e16:	2384      	movs	r3, #132	; 0x84
   29e18:	4a18      	ldr	r2, [pc, #96]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29e1a:	491c      	ldr	r1, [pc, #112]	; (29e8c <k_delayed_work_submit_to_queue+0x118>)
   29e1c:	4819      	ldr	r0, [pc, #100]	; (29e84 <k_delayed_work_submit_to_queue+0x110>)
   29e1e:	f004 f9cd 	bl	2e1bc <printk>
   29e22:	4915      	ldr	r1, [pc, #84]	; (29e78 <k_delayed_work_submit_to_queue+0x104>)
   29e24:	481a      	ldr	r0, [pc, #104]	; (29e90 <k_delayed_work_submit_to_queue+0x11c>)
   29e26:	f004 f9c9 	bl	2e1bc <printk>
   29e2a:	2184      	movs	r1, #132	; 0x84
   29e2c:	4813      	ldr	r0, [pc, #76]	; (29e7c <k_delayed_work_submit_to_queue+0x108>)
   29e2e:	f004 fcc6 	bl	2e7be <assert_post_action>
   29e32:	f387 8811 	msr	BASEPRI, r7
   29e36:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   29e3a:	4629      	mov	r1, r5
   29e3c:	4630      	mov	r0, r6
   29e3e:	f009 fb89 	bl	33554 <k_work_submit_to_queue>
		return 0;
   29e42:	2400      	movs	r4, #0
}
   29e44:	4620      	mov	r0, r4
   29e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29e4a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29e4e:	f240 30e7 	movw	r0, #999	; 0x3e7
   29e52:	2100      	movs	r1, #0
   29e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29e58:	2300      	movs	r3, #0
   29e5a:	fbe6 0108 	umlal	r0, r1, r6, r8
   29e5e:	f7e3 fc87 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout, delay);
   29e62:	490c      	ldr	r1, [pc, #48]	; (29e94 <k_delayed_work_submit_to_queue+0x120>)
   29e64:	1c42      	adds	r2, r0, #1
   29e66:	f105 000c 	add.w	r0, r5, #12
   29e6a:	f000 f8bd 	bl	29fe8 <z_add_timeout>
   29e6e:	e7b0      	b.n	29dd2 <k_delayed_work_submit_to_queue+0x5e>
		err = -EADDRINUSE;
   29e70:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   29e74:	e7ad      	b.n	29dd2 <k_delayed_work_submit_to_queue+0x5e>
   29e76:	bf00      	nop
   29e78:	2002743c 	.word	0x2002743c
   29e7c:	00035cb3 	.word	0x00035cb3
   29e80:	00035cd9 	.word	0x00035cd9
   29e84:	00035920 	.word	0x00035920
   29e88:	00035cee 	.word	0x00035cee
   29e8c:	00035d06 	.word	0x00035d06
   29e90:	00035d1d 	.word	0x00035d1d
   29e94:	0003357d 	.word	0x0003357d

00029e98 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29e98:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   29e9a:	69c3      	ldr	r3, [r0, #28]
{
   29e9c:	4604      	mov	r4, r0
	if (!work->work_q) {
   29e9e:	2b00      	cmp	r3, #0
   29ea0:	d038      	beq.n	29f14 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   29ea2:	f04f 0320 	mov.w	r3, #32
   29ea6:	f3ef 8511 	mrs	r5, BASEPRI
   29eaa:	f383 8811 	msr	BASEPRI, r3
   29eae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29eb2:	481a      	ldr	r0, [pc, #104]	; (29f1c <k_delayed_work_cancel+0x84>)
   29eb4:	f7ff ff14 	bl	29ce0 <z_spin_lock_valid>
   29eb8:	b968      	cbnz	r0, 29ed6 <k_delayed_work_cancel+0x3e>
   29eba:	235c      	movs	r3, #92	; 0x5c
   29ebc:	4a18      	ldr	r2, [pc, #96]	; (29f20 <k_delayed_work_cancel+0x88>)
   29ebe:	4919      	ldr	r1, [pc, #100]	; (29f24 <k_delayed_work_cancel+0x8c>)
   29ec0:	4819      	ldr	r0, [pc, #100]	; (29f28 <k_delayed_work_cancel+0x90>)
   29ec2:	f004 f97b 	bl	2e1bc <printk>
   29ec6:	4915      	ldr	r1, [pc, #84]	; (29f1c <k_delayed_work_cancel+0x84>)
   29ec8:	4818      	ldr	r0, [pc, #96]	; (29f2c <k_delayed_work_cancel+0x94>)
   29eca:	f004 f977 	bl	2e1bc <printk>
   29ece:	215c      	movs	r1, #92	; 0x5c
   29ed0:	4813      	ldr	r0, [pc, #76]	; (29f20 <k_delayed_work_cancel+0x88>)
   29ed2:	f004 fc74 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   29ed6:	4811      	ldr	r0, [pc, #68]	; (29f1c <k_delayed_work_cancel+0x84>)
   29ed8:	f7ff ff20 	bl	29d1c <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   29edc:	4620      	mov	r0, r4
   29ede:	f009 fb52 	bl	33586 <work_cancel>
   29ee2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29ee4:	480d      	ldr	r0, [pc, #52]	; (29f1c <k_delayed_work_cancel+0x84>)
   29ee6:	f7ff ff09 	bl	29cfc <z_spin_unlock_valid>
   29eea:	b968      	cbnz	r0, 29f08 <k_delayed_work_cancel+0x70>
   29eec:	2384      	movs	r3, #132	; 0x84
   29eee:	4a0c      	ldr	r2, [pc, #48]	; (29f20 <k_delayed_work_cancel+0x88>)
   29ef0:	490f      	ldr	r1, [pc, #60]	; (29f30 <k_delayed_work_cancel+0x98>)
   29ef2:	480d      	ldr	r0, [pc, #52]	; (29f28 <k_delayed_work_cancel+0x90>)
   29ef4:	f004 f962 	bl	2e1bc <printk>
   29ef8:	4908      	ldr	r1, [pc, #32]	; (29f1c <k_delayed_work_cancel+0x84>)
   29efa:	480e      	ldr	r0, [pc, #56]	; (29f34 <k_delayed_work_cancel+0x9c>)
   29efc:	f004 f95e 	bl	2e1bc <printk>
   29f00:	2184      	movs	r1, #132	; 0x84
   29f02:	4807      	ldr	r0, [pc, #28]	; (29f20 <k_delayed_work_cancel+0x88>)
   29f04:	f004 fc5b 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   29f08:	f385 8811 	msr	BASEPRI, r5
   29f0c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   29f10:	4620      	mov	r0, r4
   29f12:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   29f14:	f06f 0415 	mvn.w	r4, #21
   29f18:	e7fa      	b.n	29f10 <k_delayed_work_cancel+0x78>
   29f1a:	bf00      	nop
   29f1c:	2002743c 	.word	0x2002743c
   29f20:	00035cb3 	.word	0x00035cb3
   29f24:	00035cd9 	.word	0x00035cd9
   29f28:	00035920 	.word	0x00035920
   29f2c:	00035cee 	.word	0x00035cee
   29f30:	00035d06 	.word	0x00035d06
   29f34:	00035d1d 	.word	0x00035d1d

00029f38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   29f38:	4b03      	ldr	r3, [pc, #12]	; (29f48 <elapsed+0x10>)
   29f3a:	681b      	ldr	r3, [r3, #0]
   29f3c:	b90b      	cbnz	r3, 29f42 <elapsed+0xa>
   29f3e:	f7ee ba79 	b.w	18434 <z_clock_elapsed>
}
   29f42:	2000      	movs	r0, #0
   29f44:	4770      	bx	lr
   29f46:	bf00      	nop
   29f48:	20027440 	.word	0x20027440

00029f4c <next_timeout>:
	return list->head == list;
   29f4c:	4b0b      	ldr	r3, [pc, #44]	; (29f7c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   29f4e:	b510      	push	{r4, lr}
   29f50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29f52:	429c      	cmp	r4, r3
   29f54:	bf08      	it	eq
   29f56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   29f58:	f7ff ffee 	bl	29f38 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   29f5c:	b154      	cbz	r4, 29f74 <next_timeout+0x28>
   29f5e:	68a3      	ldr	r3, [r4, #8]
   29f60:	1a18      	subs	r0, r3, r0
   29f62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   29f66:	4b06      	ldr	r3, [pc, #24]	; (29f80 <next_timeout+0x34>)
   29f68:	691b      	ldr	r3, [r3, #16]
   29f6a:	b113      	cbz	r3, 29f72 <next_timeout+0x26>
   29f6c:	4298      	cmp	r0, r3
   29f6e:	bfa8      	it	ge
   29f70:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   29f72:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   29f74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   29f78:	e7f5      	b.n	29f66 <next_timeout+0x1a>
   29f7a:	bf00      	nop
   29f7c:	20020144 	.word	0x20020144
   29f80:	20027320 	.word	0x20027320

00029f84 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   29f84:	b510      	push	{r4, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   29f86:	6804      	ldr	r4, [r0, #0]
   29f88:	b1b4      	cbz	r4, 29fb8 <timeout_rem+0x34>
	return list->head == list;
   29f8a:	4a0c      	ldr	r2, [pc, #48]	; (29fbc <timeout_rem+0x38>)
   29f8c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29f8e:	4293      	cmp	r3, r2
   29f90:	d010      	beq.n	29fb4 <timeout_rem+0x30>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f92:	2400      	movs	r4, #0
   29f94:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   29f96:	b91b      	cbnz	r3, 29fa0 <timeout_rem+0x1c>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   29f98:	f7ff ffce 	bl	29f38 <elapsed>
   29f9c:	1a20      	subs	r0, r4, r0
}
   29f9e:	bd10      	pop	{r4, pc}
		ticks += t->dticks;
   29fa0:	6899      	ldr	r1, [r3, #8]
		if (timeout == t) {
   29fa2:	4283      	cmp	r3, r0
		ticks += t->dticks;
   29fa4:	440c      	add	r4, r1
		if (timeout == t) {
   29fa6:	d0f7      	beq.n	29f98 <timeout_rem+0x14>
   29fa8:	2b00      	cmp	r3, #0
   29faa:	d0f5      	beq.n	29f98 <timeout_rem+0x14>
	return (node == list->tail) ? NULL : node->next;
   29fac:	4293      	cmp	r3, r2
   29fae:	d0f3      	beq.n	29f98 <timeout_rem+0x14>
   29fb0:	681b      	ldr	r3, [r3, #0]
   29fb2:	e7f0      	b.n	29f96 <timeout_rem+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29fb4:	2400      	movs	r4, #0
   29fb6:	e7ef      	b.n	29f98 <timeout_rem+0x14>
		return 0;
   29fb8:	4620      	mov	r0, r4
   29fba:	e7f0      	b.n	29f9e <timeout_rem+0x1a>
   29fbc:	20020144 	.word	0x20020144

00029fc0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fc0:	6803      	ldr	r3, [r0, #0]
   29fc2:	b140      	cbz	r0, 29fd6 <remove_timeout+0x16>
   29fc4:	4a07      	ldr	r2, [pc, #28]	; (29fe4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   29fc6:	6852      	ldr	r2, [r2, #4]
   29fc8:	4290      	cmp	r0, r2
   29fca:	d004      	beq.n	29fd6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   29fcc:	b11b      	cbz	r3, 29fd6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   29fce:	689a      	ldr	r2, [r3, #8]
   29fd0:	6881      	ldr	r1, [r0, #8]
   29fd2:	440a      	add	r2, r1
   29fd4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   29fd6:	6842      	ldr	r2, [r0, #4]
   29fd8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   29fda:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29fdc:	2300      	movs	r3, #0
	node->prev = NULL;
   29fde:	e9c0 3300 	strd	r3, r3, [r0]
}
   29fe2:	4770      	bx	lr
   29fe4:	20020144 	.word	0x20020144

00029fe8 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29fe8:	1c53      	adds	r3, r2, #1
{
   29fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29fee:	4604      	mov	r4, r0
   29ff0:	460e      	mov	r6, r1
   29ff2:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29ff4:	d07f      	beq.n	2a0f6 <z_add_timeout+0x10e>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   29ff6:	6803      	ldr	r3, [r0, #0]
   29ff8:	b163      	cbz	r3, 2a014 <z_add_timeout+0x2c>
   29ffa:	4943      	ldr	r1, [pc, #268]	; (2a108 <z_add_timeout+0x120>)
   29ffc:	2367      	movs	r3, #103	; 0x67
   29ffe:	4a43      	ldr	r2, [pc, #268]	; (2a10c <z_add_timeout+0x124>)
   2a000:	4843      	ldr	r0, [pc, #268]	; (2a110 <z_add_timeout+0x128>)
   2a002:	f004 f8db 	bl	2e1bc <printk>
   2a006:	4843      	ldr	r0, [pc, #268]	; (2a114 <z_add_timeout+0x12c>)
   2a008:	f004 f8d8 	bl	2e1bc <printk>
   2a00c:	2167      	movs	r1, #103	; 0x67
   2a00e:	483f      	ldr	r0, [pc, #252]	; (2a10c <z_add_timeout+0x124>)
   2a010:	f004 fbd5 	bl	2e7be <assert_post_action>
	ticks = MAX(1, ticks);
   2a014:	2d00      	cmp	r5, #0
   2a016:	bf08      	it	eq
   2a018:	2501      	moveq	r5, #1
	to->fn = fn;
   2a01a:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2a01c:	f04f 0320 	mov.w	r3, #32
   2a020:	f3ef 8811 	mrs	r8, BASEPRI
   2a024:	f383 8811 	msr	BASEPRI, r3
   2a028:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a02c:	483a      	ldr	r0, [pc, #232]	; (2a118 <z_add_timeout+0x130>)
   2a02e:	f7ff fe57 	bl	29ce0 <z_spin_lock_valid>
   2a032:	b968      	cbnz	r0, 2a050 <z_add_timeout+0x68>
   2a034:	235c      	movs	r3, #92	; 0x5c
   2a036:	4a39      	ldr	r2, [pc, #228]	; (2a11c <z_add_timeout+0x134>)
   2a038:	4939      	ldr	r1, [pc, #228]	; (2a120 <z_add_timeout+0x138>)
   2a03a:	4835      	ldr	r0, [pc, #212]	; (2a110 <z_add_timeout+0x128>)
   2a03c:	f004 f8be 	bl	2e1bc <printk>
   2a040:	4935      	ldr	r1, [pc, #212]	; (2a118 <z_add_timeout+0x130>)
   2a042:	4838      	ldr	r0, [pc, #224]	; (2a124 <z_add_timeout+0x13c>)
   2a044:	f004 f8ba 	bl	2e1bc <printk>
   2a048:	215c      	movs	r1, #92	; 0x5c
   2a04a:	4834      	ldr	r0, [pc, #208]	; (2a11c <z_add_timeout+0x134>)
   2a04c:	f004 fbb7 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a050:	4831      	ldr	r0, [pc, #196]	; (2a118 <z_add_timeout+0x130>)
   2a052:	f7ff fe63 	bl	29d1c <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   2a056:	f7ff ff6f 	bl	29f38 <elapsed>
   2a05a:	4405      	add	r5, r0
   2a05c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2a05e:	4d32      	ldr	r5, [pc, #200]	; (2a128 <z_add_timeout+0x140>)
   2a060:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a062:	42ae      	cmp	r6, r5
   2a064:	d005      	beq.n	2a072 <z_add_timeout+0x8a>
			__ASSERT(t->dticks >= 0, "");
   2a066:	4f29      	ldr	r7, [pc, #164]	; (2a10c <z_add_timeout+0x124>)
   2a068:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2a134 <z_add_timeout+0x14c>
   2a06c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2a110 <z_add_timeout+0x128>
		for (t = first(); t != NULL; t = next(t)) {
   2a070:	b936      	cbnz	r6, 2a080 <z_add_timeout+0x98>
	node->prev = list->tail;
   2a072:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2a074:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2a076:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2a078:	686b      	ldr	r3, [r5, #4]
   2a07a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a07c:	606c      	str	r4, [r5, #4]
   2a07e:	e01a      	b.n	2a0b6 <z_add_timeout+0xce>
			__ASSERT(t->dticks >= 0, "");
   2a080:	68b3      	ldr	r3, [r6, #8]
   2a082:	2b00      	cmp	r3, #0
   2a084:	da0c      	bge.n	2a0a0 <z_add_timeout+0xb8>
   2a086:	4649      	mov	r1, r9
   2a088:	2370      	movs	r3, #112	; 0x70
   2a08a:	463a      	mov	r2, r7
   2a08c:	4650      	mov	r0, sl
   2a08e:	f004 f895 	bl	2e1bc <printk>
   2a092:	4820      	ldr	r0, [pc, #128]	; (2a114 <z_add_timeout+0x12c>)
   2a094:	f004 f892 	bl	2e1bc <printk>
   2a098:	2170      	movs	r1, #112	; 0x70
   2a09a:	4638      	mov	r0, r7
   2a09c:	f004 fb8f 	bl	2e7be <assert_post_action>
			if (t->dticks > to->dticks) {
   2a0a0:	68b2      	ldr	r2, [r6, #8]
   2a0a2:	68a3      	ldr	r3, [r4, #8]
   2a0a4:	429a      	cmp	r2, r3
   2a0a6:	dd28      	ble.n	2a0fa <z_add_timeout+0x112>
				t->dticks -= to->dticks;
   2a0a8:	1ad3      	subs	r3, r2, r3
   2a0aa:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   2a0ac:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2a0ae:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   2a0b2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2a0b4:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2a0b6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a0b8:	42ab      	cmp	r3, r5
   2a0ba:	d006      	beq.n	2a0ca <z_add_timeout+0xe2>
		if (to == first()) {
   2a0bc:	429c      	cmp	r4, r3
   2a0be:	d104      	bne.n	2a0ca <z_add_timeout+0xe2>
			z_clock_set_timeout(next_timeout(), false);
   2a0c0:	f7ff ff44 	bl	29f4c <next_timeout>
   2a0c4:	2100      	movs	r1, #0
   2a0c6:	f7ee f951 	bl	1836c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a0ca:	4813      	ldr	r0, [pc, #76]	; (2a118 <z_add_timeout+0x130>)
   2a0cc:	f7ff fe16 	bl	29cfc <z_spin_unlock_valid>
   2a0d0:	b968      	cbnz	r0, 2a0ee <z_add_timeout+0x106>
   2a0d2:	2384      	movs	r3, #132	; 0x84
   2a0d4:	4a11      	ldr	r2, [pc, #68]	; (2a11c <z_add_timeout+0x134>)
   2a0d6:	4915      	ldr	r1, [pc, #84]	; (2a12c <z_add_timeout+0x144>)
   2a0d8:	480d      	ldr	r0, [pc, #52]	; (2a110 <z_add_timeout+0x128>)
   2a0da:	f004 f86f 	bl	2e1bc <printk>
   2a0de:	490e      	ldr	r1, [pc, #56]	; (2a118 <z_add_timeout+0x130>)
   2a0e0:	4813      	ldr	r0, [pc, #76]	; (2a130 <z_add_timeout+0x148>)
   2a0e2:	f004 f86b 	bl	2e1bc <printk>
   2a0e6:	2184      	movs	r1, #132	; 0x84
   2a0e8:	480c      	ldr	r0, [pc, #48]	; (2a11c <z_add_timeout+0x134>)
   2a0ea:	f004 fb68 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a0ee:	f388 8811 	msr	BASEPRI, r8
   2a0f2:	f3bf 8f6f 	isb	sy
}
   2a0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2a0fa:	1a9b      	subs	r3, r3, r2
   2a0fc:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2a0fe:	686b      	ldr	r3, [r5, #4]
   2a100:	42b3      	cmp	r3, r6
   2a102:	d0b6      	beq.n	2a072 <z_add_timeout+0x8a>
   2a104:	6836      	ldr	r6, [r6, #0]
   2a106:	e7b3      	b.n	2a070 <z_add_timeout+0x88>
   2a108:	0003758e 	.word	0x0003758e
   2a10c:	0003756a 	.word	0x0003756a
   2a110:	00035920 	.word	0x00035920
   2a114:	00035d7e 	.word	0x00035d7e
   2a118:	20027444 	.word	0x20027444
   2a11c:	00035cb3 	.word	0x00035cb3
   2a120:	00035cd9 	.word	0x00035cd9
   2a124:	00035cee 	.word	0x00035cee
   2a128:	20020144 	.word	0x20020144
   2a12c:	00035d06 	.word	0x00035d06
   2a130:	00035d1d 	.word	0x00035d1d
   2a134:	000375ae 	.word	0x000375ae

0002a138 <z_abort_timeout>:
{
   2a138:	b538      	push	{r3, r4, r5, lr}
   2a13a:	4604      	mov	r4, r0
	__asm__ volatile(
   2a13c:	f04f 0320 	mov.w	r3, #32
   2a140:	f3ef 8511 	mrs	r5, BASEPRI
   2a144:	f383 8811 	msr	BASEPRI, r3
   2a148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a14c:	481a      	ldr	r0, [pc, #104]	; (2a1b8 <z_abort_timeout+0x80>)
   2a14e:	f7ff fdc7 	bl	29ce0 <z_spin_lock_valid>
   2a152:	b968      	cbnz	r0, 2a170 <z_abort_timeout+0x38>
   2a154:	235c      	movs	r3, #92	; 0x5c
   2a156:	4a19      	ldr	r2, [pc, #100]	; (2a1bc <z_abort_timeout+0x84>)
   2a158:	4919      	ldr	r1, [pc, #100]	; (2a1c0 <z_abort_timeout+0x88>)
   2a15a:	481a      	ldr	r0, [pc, #104]	; (2a1c4 <z_abort_timeout+0x8c>)
   2a15c:	f004 f82e 	bl	2e1bc <printk>
   2a160:	4915      	ldr	r1, [pc, #84]	; (2a1b8 <z_abort_timeout+0x80>)
   2a162:	4819      	ldr	r0, [pc, #100]	; (2a1c8 <z_abort_timeout+0x90>)
   2a164:	f004 f82a 	bl	2e1bc <printk>
   2a168:	215c      	movs	r1, #92	; 0x5c
   2a16a:	4814      	ldr	r0, [pc, #80]	; (2a1bc <z_abort_timeout+0x84>)
   2a16c:	f004 fb27 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a170:	4811      	ldr	r0, [pc, #68]	; (2a1b8 <z_abort_timeout+0x80>)
   2a172:	f7ff fdd3 	bl	29d1c <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2a176:	6823      	ldr	r3, [r4, #0]
   2a178:	b1db      	cbz	r3, 2a1b2 <z_abort_timeout+0x7a>
			remove_timeout(to);
   2a17a:	4620      	mov	r0, r4
   2a17c:	f7ff ff20 	bl	29fc0 <remove_timeout>
			ret = 0;
   2a180:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a182:	480d      	ldr	r0, [pc, #52]	; (2a1b8 <z_abort_timeout+0x80>)
   2a184:	f7ff fdba 	bl	29cfc <z_spin_unlock_valid>
   2a188:	b968      	cbnz	r0, 2a1a6 <z_abort_timeout+0x6e>
   2a18a:	2384      	movs	r3, #132	; 0x84
   2a18c:	4a0b      	ldr	r2, [pc, #44]	; (2a1bc <z_abort_timeout+0x84>)
   2a18e:	490f      	ldr	r1, [pc, #60]	; (2a1cc <z_abort_timeout+0x94>)
   2a190:	480c      	ldr	r0, [pc, #48]	; (2a1c4 <z_abort_timeout+0x8c>)
   2a192:	f004 f813 	bl	2e1bc <printk>
   2a196:	4908      	ldr	r1, [pc, #32]	; (2a1b8 <z_abort_timeout+0x80>)
   2a198:	480d      	ldr	r0, [pc, #52]	; (2a1d0 <z_abort_timeout+0x98>)
   2a19a:	f004 f80f 	bl	2e1bc <printk>
   2a19e:	2184      	movs	r1, #132	; 0x84
   2a1a0:	4806      	ldr	r0, [pc, #24]	; (2a1bc <z_abort_timeout+0x84>)
   2a1a2:	f004 fb0c 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a1a6:	f385 8811 	msr	BASEPRI, r5
   2a1aa:	f3bf 8f6f 	isb	sy
}
   2a1ae:	4620      	mov	r0, r4
   2a1b0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2a1b2:	f06f 0415 	mvn.w	r4, #21
   2a1b6:	e7e4      	b.n	2a182 <z_abort_timeout+0x4a>
   2a1b8:	20027444 	.word	0x20027444
   2a1bc:	00035cb3 	.word	0x00035cb3
   2a1c0:	00035cd9 	.word	0x00035cd9
   2a1c4:	00035920 	.word	0x00035920
   2a1c8:	00035cee 	.word	0x00035cee
   2a1cc:	00035d06 	.word	0x00035d06
   2a1d0:	00035d1d 	.word	0x00035d1d

0002a1d4 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   2a1d4:	b538      	push	{r3, r4, r5, lr}
   2a1d6:	4604      	mov	r4, r0
	__asm__ volatile(
   2a1d8:	f04f 0320 	mov.w	r3, #32
   2a1dc:	f3ef 8511 	mrs	r5, BASEPRI
   2a1e0:	f383 8811 	msr	BASEPRI, r3
   2a1e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1e8:	4818      	ldr	r0, [pc, #96]	; (2a24c <z_timeout_remaining+0x78>)
   2a1ea:	f7ff fd79 	bl	29ce0 <z_spin_lock_valid>
   2a1ee:	b968      	cbnz	r0, 2a20c <z_timeout_remaining+0x38>
   2a1f0:	235c      	movs	r3, #92	; 0x5c
   2a1f2:	4a17      	ldr	r2, [pc, #92]	; (2a250 <z_timeout_remaining+0x7c>)
   2a1f4:	4917      	ldr	r1, [pc, #92]	; (2a254 <z_timeout_remaining+0x80>)
   2a1f6:	4818      	ldr	r0, [pc, #96]	; (2a258 <z_timeout_remaining+0x84>)
   2a1f8:	f003 ffe0 	bl	2e1bc <printk>
   2a1fc:	4913      	ldr	r1, [pc, #76]	; (2a24c <z_timeout_remaining+0x78>)
   2a1fe:	4817      	ldr	r0, [pc, #92]	; (2a25c <z_timeout_remaining+0x88>)
   2a200:	f003 ffdc 	bl	2e1bc <printk>
   2a204:	215c      	movs	r1, #92	; 0x5c
   2a206:	4812      	ldr	r0, [pc, #72]	; (2a250 <z_timeout_remaining+0x7c>)
   2a208:	f004 fad9 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a20c:	480f      	ldr	r0, [pc, #60]	; (2a24c <z_timeout_remaining+0x78>)
   2a20e:	f7ff fd85 	bl	29d1c <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   2a212:	4620      	mov	r0, r4
   2a214:	f7ff feb6 	bl	29f84 <timeout_rem>
   2a218:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a21a:	480c      	ldr	r0, [pc, #48]	; (2a24c <z_timeout_remaining+0x78>)
   2a21c:	f7ff fd6e 	bl	29cfc <z_spin_unlock_valid>
   2a220:	b968      	cbnz	r0, 2a23e <z_timeout_remaining+0x6a>
   2a222:	2384      	movs	r3, #132	; 0x84
   2a224:	4a0a      	ldr	r2, [pc, #40]	; (2a250 <z_timeout_remaining+0x7c>)
   2a226:	490e      	ldr	r1, [pc, #56]	; (2a260 <z_timeout_remaining+0x8c>)
   2a228:	480b      	ldr	r0, [pc, #44]	; (2a258 <z_timeout_remaining+0x84>)
   2a22a:	f003 ffc7 	bl	2e1bc <printk>
   2a22e:	4907      	ldr	r1, [pc, #28]	; (2a24c <z_timeout_remaining+0x78>)
   2a230:	480c      	ldr	r0, [pc, #48]	; (2a264 <z_timeout_remaining+0x90>)
   2a232:	f003 ffc3 	bl	2e1bc <printk>
   2a236:	2184      	movs	r1, #132	; 0x84
   2a238:	4805      	ldr	r0, [pc, #20]	; (2a250 <z_timeout_remaining+0x7c>)
   2a23a:	f004 fac0 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a23e:	f385 8811 	msr	BASEPRI, r5
   2a242:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   2a246:	4620      	mov	r0, r4
   2a248:	bd38      	pop	{r3, r4, r5, pc}
   2a24a:	bf00      	nop
   2a24c:	20027444 	.word	0x20027444
   2a250:	00035cb3 	.word	0x00035cb3
   2a254:	00035cd9 	.word	0x00035cd9
   2a258:	00035920 	.word	0x00035920
   2a25c:	00035cee 	.word	0x00035cee
   2a260:	00035d06 	.word	0x00035d06
   2a264:	00035d1d 	.word	0x00035d1d

0002a268 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   2a268:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a26a:	f04f 0320 	mov.w	r3, #32
   2a26e:	f3ef 8511 	mrs	r5, BASEPRI
   2a272:	f383 8811 	msr	BASEPRI, r3
   2a276:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a27a:	4818      	ldr	r0, [pc, #96]	; (2a2dc <z_get_next_timeout_expiry+0x74>)
   2a27c:	f7ff fd30 	bl	29ce0 <z_spin_lock_valid>
   2a280:	b968      	cbnz	r0, 2a29e <z_get_next_timeout_expiry+0x36>
   2a282:	235c      	movs	r3, #92	; 0x5c
   2a284:	4a16      	ldr	r2, [pc, #88]	; (2a2e0 <z_get_next_timeout_expiry+0x78>)
   2a286:	4917      	ldr	r1, [pc, #92]	; (2a2e4 <z_get_next_timeout_expiry+0x7c>)
   2a288:	4817      	ldr	r0, [pc, #92]	; (2a2e8 <z_get_next_timeout_expiry+0x80>)
   2a28a:	f003 ff97 	bl	2e1bc <printk>
   2a28e:	4913      	ldr	r1, [pc, #76]	; (2a2dc <z_get_next_timeout_expiry+0x74>)
   2a290:	4816      	ldr	r0, [pc, #88]	; (2a2ec <z_get_next_timeout_expiry+0x84>)
   2a292:	f003 ff93 	bl	2e1bc <printk>
   2a296:	215c      	movs	r1, #92	; 0x5c
   2a298:	4811      	ldr	r0, [pc, #68]	; (2a2e0 <z_get_next_timeout_expiry+0x78>)
   2a29a:	f004 fa90 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a29e:	480f      	ldr	r0, [pc, #60]	; (2a2dc <z_get_next_timeout_expiry+0x74>)
   2a2a0:	f7ff fd3c 	bl	29d1c <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2a2a4:	f7ff fe52 	bl	29f4c <next_timeout>
   2a2a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a2aa:	480c      	ldr	r0, [pc, #48]	; (2a2dc <z_get_next_timeout_expiry+0x74>)
   2a2ac:	f7ff fd26 	bl	29cfc <z_spin_unlock_valid>
   2a2b0:	b968      	cbnz	r0, 2a2ce <z_get_next_timeout_expiry+0x66>
   2a2b2:	2384      	movs	r3, #132	; 0x84
   2a2b4:	4a0a      	ldr	r2, [pc, #40]	; (2a2e0 <z_get_next_timeout_expiry+0x78>)
   2a2b6:	490e      	ldr	r1, [pc, #56]	; (2a2f0 <z_get_next_timeout_expiry+0x88>)
   2a2b8:	480b      	ldr	r0, [pc, #44]	; (2a2e8 <z_get_next_timeout_expiry+0x80>)
   2a2ba:	f003 ff7f 	bl	2e1bc <printk>
   2a2be:	4907      	ldr	r1, [pc, #28]	; (2a2dc <z_get_next_timeout_expiry+0x74>)
   2a2c0:	480c      	ldr	r0, [pc, #48]	; (2a2f4 <z_get_next_timeout_expiry+0x8c>)
   2a2c2:	f003 ff7b 	bl	2e1bc <printk>
   2a2c6:	2184      	movs	r1, #132	; 0x84
   2a2c8:	4805      	ldr	r0, [pc, #20]	; (2a2e0 <z_get_next_timeout_expiry+0x78>)
   2a2ca:	f004 fa78 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a2ce:	f385 8811 	msr	BASEPRI, r5
   2a2d2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2a2d6:	4620      	mov	r0, r4
   2a2d8:	bd38      	pop	{r3, r4, r5, pc}
   2a2da:	bf00      	nop
   2a2dc:	20027444 	.word	0x20027444
   2a2e0:	00035cb3 	.word	0x00035cb3
   2a2e4:	00035cd9 	.word	0x00035cd9
   2a2e8:	00035920 	.word	0x00035920
   2a2ec:	00035cee 	.word	0x00035cee
   2a2f0:	00035d06 	.word	0x00035d06
   2a2f4:	00035d1d 	.word	0x00035d1d

0002a2f8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2a2f8:	b570      	push	{r4, r5, r6, lr}
   2a2fa:	4604      	mov	r4, r0
   2a2fc:	460e      	mov	r6, r1
	__asm__ volatile(
   2a2fe:	f04f 0320 	mov.w	r3, #32
   2a302:	f3ef 8511 	mrs	r5, BASEPRI
   2a306:	f383 8811 	msr	BASEPRI, r3
   2a30a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a30e:	481b      	ldr	r0, [pc, #108]	; (2a37c <z_set_timeout_expiry+0x84>)
   2a310:	f7ff fce6 	bl	29ce0 <z_spin_lock_valid>
   2a314:	b968      	cbnz	r0, 2a332 <z_set_timeout_expiry+0x3a>
   2a316:	235c      	movs	r3, #92	; 0x5c
   2a318:	4a19      	ldr	r2, [pc, #100]	; (2a380 <z_set_timeout_expiry+0x88>)
   2a31a:	491a      	ldr	r1, [pc, #104]	; (2a384 <z_set_timeout_expiry+0x8c>)
   2a31c:	481a      	ldr	r0, [pc, #104]	; (2a388 <z_set_timeout_expiry+0x90>)
   2a31e:	f003 ff4d 	bl	2e1bc <printk>
   2a322:	4916      	ldr	r1, [pc, #88]	; (2a37c <z_set_timeout_expiry+0x84>)
   2a324:	4819      	ldr	r0, [pc, #100]	; (2a38c <z_set_timeout_expiry+0x94>)
   2a326:	f003 ff49 	bl	2e1bc <printk>
   2a32a:	215c      	movs	r1, #92	; 0x5c
   2a32c:	4814      	ldr	r0, [pc, #80]	; (2a380 <z_set_timeout_expiry+0x88>)
   2a32e:	f004 fa46 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a332:	4812      	ldr	r0, [pc, #72]	; (2a37c <z_set_timeout_expiry+0x84>)
   2a334:	f7ff fcf2 	bl	29d1c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   2a338:	f7ff fe08 	bl	29f4c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2a33c:	2801      	cmp	r0, #1
   2a33e:	dd05      	ble.n	2a34c <z_set_timeout_expiry+0x54>
   2a340:	42a0      	cmp	r0, r4
   2a342:	dd03      	ble.n	2a34c <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   2a344:	4631      	mov	r1, r6
   2a346:	4620      	mov	r0, r4
   2a348:	f7ee f810 	bl	1836c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a34c:	480b      	ldr	r0, [pc, #44]	; (2a37c <z_set_timeout_expiry+0x84>)
   2a34e:	f7ff fcd5 	bl	29cfc <z_spin_unlock_valid>
   2a352:	b968      	cbnz	r0, 2a370 <z_set_timeout_expiry+0x78>
   2a354:	2384      	movs	r3, #132	; 0x84
   2a356:	4a0a      	ldr	r2, [pc, #40]	; (2a380 <z_set_timeout_expiry+0x88>)
   2a358:	490d      	ldr	r1, [pc, #52]	; (2a390 <z_set_timeout_expiry+0x98>)
   2a35a:	480b      	ldr	r0, [pc, #44]	; (2a388 <z_set_timeout_expiry+0x90>)
   2a35c:	f003 ff2e 	bl	2e1bc <printk>
   2a360:	4906      	ldr	r1, [pc, #24]	; (2a37c <z_set_timeout_expiry+0x84>)
   2a362:	480c      	ldr	r0, [pc, #48]	; (2a394 <z_set_timeout_expiry+0x9c>)
   2a364:	f003 ff2a 	bl	2e1bc <printk>
   2a368:	2184      	movs	r1, #132	; 0x84
   2a36a:	4805      	ldr	r0, [pc, #20]	; (2a380 <z_set_timeout_expiry+0x88>)
   2a36c:	f004 fa27 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a370:	f385 8811 	msr	BASEPRI, r5
   2a374:	f3bf 8f6f 	isb	sy
		}
	}
}
   2a378:	bd70      	pop	{r4, r5, r6, pc}
   2a37a:	bf00      	nop
   2a37c:	20027444 	.word	0x20027444
   2a380:	00035cb3 	.word	0x00035cb3
   2a384:	00035cd9 	.word	0x00035cd9
   2a388:	00035920 	.word	0x00035920
   2a38c:	00035cee 	.word	0x00035cee
   2a390:	00035d06 	.word	0x00035d06
   2a394:	00035d1d 	.word	0x00035d1d

0002a398 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   2a398:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2a39c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2a39e:	f7fe fce3 	bl	28d68 <z_time_slice>
	__asm__ volatile(
   2a3a2:	f04f 0320 	mov.w	r3, #32
   2a3a6:	f3ef 8511 	mrs	r5, BASEPRI
   2a3aa:	f383 8811 	msr	BASEPRI, r3
   2a3ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a3b2:	4848      	ldr	r0, [pc, #288]	; (2a4d4 <z_clock_announce+0x13c>)
   2a3b4:	f7ff fc94 	bl	29ce0 <z_spin_lock_valid>
   2a3b8:	b968      	cbnz	r0, 2a3d6 <z_clock_announce+0x3e>
   2a3ba:	235c      	movs	r3, #92	; 0x5c
   2a3bc:	4a46      	ldr	r2, [pc, #280]	; (2a4d8 <z_clock_announce+0x140>)
   2a3be:	4947      	ldr	r1, [pc, #284]	; (2a4dc <z_clock_announce+0x144>)
   2a3c0:	4847      	ldr	r0, [pc, #284]	; (2a4e0 <z_clock_announce+0x148>)
   2a3c2:	f003 fefb 	bl	2e1bc <printk>
   2a3c6:	4943      	ldr	r1, [pc, #268]	; (2a4d4 <z_clock_announce+0x13c>)
   2a3c8:	4846      	ldr	r0, [pc, #280]	; (2a4e4 <z_clock_announce+0x14c>)
   2a3ca:	f003 fef7 	bl	2e1bc <printk>
   2a3ce:	215c      	movs	r1, #92	; 0x5c
   2a3d0:	4841      	ldr	r0, [pc, #260]	; (2a4d8 <z_clock_announce+0x140>)
   2a3d2:	f004 f9f4 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a3d6:	4f44      	ldr	r7, [pc, #272]	; (2a4e8 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2a3d8:	4e44      	ldr	r6, [pc, #272]	; (2a4ec <z_clock_announce+0x154>)
   2a3da:	46b9      	mov	r9, r7
   2a3dc:	483d      	ldr	r0, [pc, #244]	; (2a4d4 <z_clock_announce+0x13c>)
	return list->head == list;
   2a3de:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2a4f8 <z_clock_announce+0x160>
   2a3e2:	f7ff fc9b 	bl	29d1c <z_spin_lock_set_owner>
   2a3e6:	6034      	str	r4, [r6, #0]
   2a3e8:	f8d8 4000 	ldr.w	r4, [r8]
   2a3ec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a3ee:	4544      	cmp	r4, r8
   2a3f0:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2a3f4:	d005      	beq.n	2a402 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2a3f6:	b124      	cbz	r4, 2a402 <z_clock_announce+0x6a>
   2a3f8:	68a3      	ldr	r3, [r4, #8]
   2a3fa:	4293      	cmp	r3, r2
   2a3fc:	dd26      	ble.n	2a44c <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2a3fe:	1a9b      	subs	r3, r3, r2
   2a400:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2a402:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2a404:	eb1b 0002 	adds.w	r0, fp, r2
   2a408:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2a40c:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2a410:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2a412:	f7ff fd9b 	bl	29f4c <next_timeout>
   2a416:	4621      	mov	r1, r4
   2a418:	f7ed ffa8 	bl	1836c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a41c:	482d      	ldr	r0, [pc, #180]	; (2a4d4 <z_clock_announce+0x13c>)
   2a41e:	f7ff fc6d 	bl	29cfc <z_spin_unlock_valid>
   2a422:	b968      	cbnz	r0, 2a440 <z_clock_announce+0xa8>
   2a424:	2384      	movs	r3, #132	; 0x84
   2a426:	4a2c      	ldr	r2, [pc, #176]	; (2a4d8 <z_clock_announce+0x140>)
   2a428:	4931      	ldr	r1, [pc, #196]	; (2a4f0 <z_clock_announce+0x158>)
   2a42a:	482d      	ldr	r0, [pc, #180]	; (2a4e0 <z_clock_announce+0x148>)
   2a42c:	f003 fec6 	bl	2e1bc <printk>
   2a430:	4928      	ldr	r1, [pc, #160]	; (2a4d4 <z_clock_announce+0x13c>)
   2a432:	4830      	ldr	r0, [pc, #192]	; (2a4f4 <z_clock_announce+0x15c>)
   2a434:	f003 fec2 	bl	2e1bc <printk>
   2a438:	2184      	movs	r1, #132	; 0x84
   2a43a:	4827      	ldr	r0, [pc, #156]	; (2a4d8 <z_clock_announce+0x140>)
   2a43c:	f004 f9bf 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a440:	f385 8811 	msr	BASEPRI, r5
   2a444:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2a448:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   2a44c:	eb1b 0003 	adds.w	r0, fp, r3
   2a450:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2a454:	1ad3      	subs	r3, r2, r3
   2a456:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2a458:	2300      	movs	r3, #0
		curr_tick += dt;
   2a45a:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   2a45e:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   2a460:	4620      	mov	r0, r4
   2a462:	f7ff fdad 	bl	29fc0 <remove_timeout>
   2a466:	481b      	ldr	r0, [pc, #108]	; (2a4d4 <z_clock_announce+0x13c>)
   2a468:	f7ff fc48 	bl	29cfc <z_spin_unlock_valid>
   2a46c:	b968      	cbnz	r0, 2a48a <z_clock_announce+0xf2>
   2a46e:	2384      	movs	r3, #132	; 0x84
   2a470:	4a19      	ldr	r2, [pc, #100]	; (2a4d8 <z_clock_announce+0x140>)
   2a472:	491f      	ldr	r1, [pc, #124]	; (2a4f0 <z_clock_announce+0x158>)
   2a474:	481a      	ldr	r0, [pc, #104]	; (2a4e0 <z_clock_announce+0x148>)
   2a476:	f003 fea1 	bl	2e1bc <printk>
   2a47a:	4916      	ldr	r1, [pc, #88]	; (2a4d4 <z_clock_announce+0x13c>)
   2a47c:	481d      	ldr	r0, [pc, #116]	; (2a4f4 <z_clock_announce+0x15c>)
   2a47e:	f003 fe9d 	bl	2e1bc <printk>
   2a482:	2184      	movs	r1, #132	; 0x84
   2a484:	4814      	ldr	r0, [pc, #80]	; (2a4d8 <z_clock_announce+0x140>)
   2a486:	f004 f99a 	bl	2e7be <assert_post_action>
   2a48a:	f385 8811 	msr	BASEPRI, r5
   2a48e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2a492:	68e3      	ldr	r3, [r4, #12]
   2a494:	4620      	mov	r0, r4
   2a496:	4798      	blx	r3
	__asm__ volatile(
   2a498:	f04f 0320 	mov.w	r3, #32
   2a49c:	f3ef 8511 	mrs	r5, BASEPRI
   2a4a0:	f383 8811 	msr	BASEPRI, r3
   2a4a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a4a8:	480a      	ldr	r0, [pc, #40]	; (2a4d4 <z_clock_announce+0x13c>)
   2a4aa:	f7ff fc19 	bl	29ce0 <z_spin_lock_valid>
   2a4ae:	b968      	cbnz	r0, 2a4cc <z_clock_announce+0x134>
   2a4b0:	235c      	movs	r3, #92	; 0x5c
   2a4b2:	4a09      	ldr	r2, [pc, #36]	; (2a4d8 <z_clock_announce+0x140>)
   2a4b4:	4909      	ldr	r1, [pc, #36]	; (2a4dc <z_clock_announce+0x144>)
   2a4b6:	480a      	ldr	r0, [pc, #40]	; (2a4e0 <z_clock_announce+0x148>)
   2a4b8:	f003 fe80 	bl	2e1bc <printk>
   2a4bc:	4905      	ldr	r1, [pc, #20]	; (2a4d4 <z_clock_announce+0x13c>)
   2a4be:	4809      	ldr	r0, [pc, #36]	; (2a4e4 <z_clock_announce+0x14c>)
   2a4c0:	f003 fe7c 	bl	2e1bc <printk>
   2a4c4:	215c      	movs	r1, #92	; 0x5c
   2a4c6:	4804      	ldr	r0, [pc, #16]	; (2a4d8 <z_clock_announce+0x140>)
   2a4c8:	f004 f979 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a4cc:	4801      	ldr	r0, [pc, #4]	; (2a4d4 <z_clock_announce+0x13c>)
   2a4ce:	f7ff fc25 	bl	29d1c <z_spin_lock_set_owner>
	return k;
   2a4d2:	e789      	b.n	2a3e8 <z_clock_announce+0x50>
   2a4d4:	20027444 	.word	0x20027444
   2a4d8:	00035cb3 	.word	0x00035cb3
   2a4dc:	00035cd9 	.word	0x00035cd9
   2a4e0:	00035920 	.word	0x00035920
   2a4e4:	00035cee 	.word	0x00035cee
   2a4e8:	200208c8 	.word	0x200208c8
   2a4ec:	20027440 	.word	0x20027440
   2a4f0:	00035d06 	.word	0x00035d06
   2a4f4:	00035d1d 	.word	0x00035d1d
   2a4f8:	20020144 	.word	0x20020144

0002a4fc <z_tick_get>:

s64_t z_tick_get(void)
{
   2a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a500:	f04f 0320 	mov.w	r3, #32
   2a504:	f3ef 8611 	mrs	r6, BASEPRI
   2a508:	f383 8811 	msr	BASEPRI, r3
   2a50c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a510:	481b      	ldr	r0, [pc, #108]	; (2a580 <z_tick_get+0x84>)
   2a512:	f7ff fbe5 	bl	29ce0 <z_spin_lock_valid>
   2a516:	b968      	cbnz	r0, 2a534 <z_tick_get+0x38>
   2a518:	235c      	movs	r3, #92	; 0x5c
   2a51a:	4a1a      	ldr	r2, [pc, #104]	; (2a584 <z_tick_get+0x88>)
   2a51c:	491a      	ldr	r1, [pc, #104]	; (2a588 <z_tick_get+0x8c>)
   2a51e:	481b      	ldr	r0, [pc, #108]	; (2a58c <z_tick_get+0x90>)
   2a520:	f003 fe4c 	bl	2e1bc <printk>
   2a524:	4916      	ldr	r1, [pc, #88]	; (2a580 <z_tick_get+0x84>)
   2a526:	481a      	ldr	r0, [pc, #104]	; (2a590 <z_tick_get+0x94>)
   2a528:	f003 fe48 	bl	2e1bc <printk>
   2a52c:	215c      	movs	r1, #92	; 0x5c
   2a52e:	4815      	ldr	r0, [pc, #84]	; (2a584 <z_tick_get+0x88>)
   2a530:	f004 f945 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a534:	4812      	ldr	r0, [pc, #72]	; (2a580 <z_tick_get+0x84>)
   2a536:	f7ff fbf1 	bl	29d1c <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2a53a:	f7ed ff7b 	bl	18434 <z_clock_elapsed>
   2a53e:	4b15      	ldr	r3, [pc, #84]	; (2a594 <z_tick_get+0x98>)
   2a540:	e9d3 4500 	ldrd	r4, r5, [r3]
   2a544:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a546:	480e      	ldr	r0, [pc, #56]	; (2a580 <z_tick_get+0x84>)
   2a548:	f145 0800 	adc.w	r8, r5, #0
   2a54c:	f7ff fbd6 	bl	29cfc <z_spin_unlock_valid>
   2a550:	b968      	cbnz	r0, 2a56e <z_tick_get+0x72>
   2a552:	2384      	movs	r3, #132	; 0x84
   2a554:	4a0b      	ldr	r2, [pc, #44]	; (2a584 <z_tick_get+0x88>)
   2a556:	4910      	ldr	r1, [pc, #64]	; (2a598 <z_tick_get+0x9c>)
   2a558:	480c      	ldr	r0, [pc, #48]	; (2a58c <z_tick_get+0x90>)
   2a55a:	f003 fe2f 	bl	2e1bc <printk>
   2a55e:	4908      	ldr	r1, [pc, #32]	; (2a580 <z_tick_get+0x84>)
   2a560:	480e      	ldr	r0, [pc, #56]	; (2a59c <z_tick_get+0xa0>)
   2a562:	f003 fe2b 	bl	2e1bc <printk>
   2a566:	2184      	movs	r1, #132	; 0x84
   2a568:	4806      	ldr	r0, [pc, #24]	; (2a584 <z_tick_get+0x88>)
   2a56a:	f004 f928 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a56e:	f386 8811 	msr	BASEPRI, r6
   2a572:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2a576:	4638      	mov	r0, r7
   2a578:	4641      	mov	r1, r8
   2a57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a57e:	bf00      	nop
   2a580:	20027444 	.word	0x20027444
   2a584:	00035cb3 	.word	0x00035cb3
   2a588:	00035cd9 	.word	0x00035cd9
   2a58c:	00035920 	.word	0x00035920
   2a590:	00035cee 	.word	0x00035cee
   2a594:	200208c8 	.word	0x200208c8
   2a598:	00035d06 	.word	0x00035d06
   2a59c:	00035d1d 	.word	0x00035d1d

0002a5a0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2a5a0:	6a02      	ldr	r2, [r0, #32]
{
   2a5a2:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2a5a4:	1c53      	adds	r3, r2, #1
   2a5a6:	2b01      	cmp	r3, #1
{
   2a5a8:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2a5aa:	d902      	bls.n	2a5b2 <z_timer_expiration_handler+0x12>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2a5ac:	490b      	ldr	r1, [pc, #44]	; (2a5dc <z_timer_expiration_handler+0x3c>)
   2a5ae:	f7ff fd1b 	bl	29fe8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2a5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a5b4:	3301      	adds	r3, #1
   2a5b6:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2a5b8:	69a3      	ldr	r3, [r4, #24]
   2a5ba:	b10b      	cbz	r3, 2a5c0 <z_timer_expiration_handler+0x20>
		timer->expiry_fn(timer);
   2a5bc:	4620      	mov	r0, r4
   2a5be:	4798      	blx	r3
	return list->head == list;
   2a5c0:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a5c4:	42a5      	cmp	r5, r4
   2a5c6:	d008      	beq.n	2a5da <z_timer_expiration_handler+0x3a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2a5c8:	b13d      	cbz	r5, 2a5da <z_timer_expiration_handler+0x3a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2a5ca:	4628      	mov	r0, r5
   2a5cc:	f7fd ffca 	bl	28564 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2a5d0:	4628      	mov	r0, r5
   2a5d2:	f7fe fa3b 	bl	28a4c <z_ready_thread>
   2a5d6:	2300      	movs	r3, #0
   2a5d8:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   2a5da:	bd38      	pop	{r3, r4, r5, pc}
   2a5dc:	0002a5a1 	.word	0x0002a5a1

0002a5e0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2a5e0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2a5e4:	f240 36e7 	movw	r6, #999	; 0x3e7
   2a5e8:	2700      	movs	r7, #0
   2a5ea:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2a5ee:	46b3      	mov	fp, r6
   2a5f0:	46bc      	mov	ip, r7
   2a5f2:	fbe5 bc01 	umlal	fp, ip, r5, r1
   2a5f6:	4604      	mov	r4, r0
   2a5f8:	4691      	mov	r9, r2
   2a5fa:	4661      	mov	r1, ip
   2a5fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a600:	2300      	movs	r3, #0
   2a602:	4658      	mov	r0, fp
   2a604:	f7e3 f8b4 	bl	d770 <__aeabi_uldivmod>
   2a608:	4639      	mov	r1, r7
   2a60a:	4680      	mov	r8, r0
   2a60c:	4630      	mov	r0, r6
   2a60e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a612:	2300      	movs	r3, #0
   2a614:	fbe5 0109 	umlal	r0, r1, r5, r9
   2a618:	f7e3 f8aa 	bl	d770 <__aeabi_uldivmod>
   2a61c:	4605      	mov	r5, r0
	if (Z_TICK_ABS(duration.ticks) < 0) {
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   2a61e:	4620      	mov	r0, r4
   2a620:	f7ff fd8a 	bl	2a138 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2a624:	2300      	movs	r3, #0
	period = k_ms_to_ticks_ceil32(period);
   2a626:	6225      	str	r5, [r4, #32]
	timer->status = 0U;
   2a628:	6263      	str	r3, [r4, #36]	; 0x24

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2a62a:	4642      	mov	r2, r8
   2a62c:	4620      	mov	r0, r4
		     duration);
}
   2a62e:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2a632:	4901      	ldr	r1, [pc, #4]	; (2a638 <z_impl_k_timer_start+0x58>)
   2a634:	f7ff bcd8 	b.w	29fe8 <z_add_timeout>
   2a638:	0002a5a1 	.word	0x0002a5a1

0002a63c <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   2a63c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2a63e:	6883      	ldr	r3, [r0, #8]
{
   2a640:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2a642:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2a644:	b964      	cbnz	r4, 2a660 <k_poll_poller_cb+0x24>
   2a646:	4915      	ldr	r1, [pc, #84]	; (2a69c <k_poll_poller_cb+0x60>)
   2a648:	23e0      	movs	r3, #224	; 0xe0
   2a64a:	4a15      	ldr	r2, [pc, #84]	; (2a6a0 <k_poll_poller_cb+0x64>)
   2a64c:	4815      	ldr	r0, [pc, #84]	; (2a6a4 <k_poll_poller_cb+0x68>)
   2a64e:	f003 fdb5 	bl	2e1bc <printk>
   2a652:	4815      	ldr	r0, [pc, #84]	; (2a6a8 <k_poll_poller_cb+0x6c>)
   2a654:	f003 fdb2 	bl	2e1bc <printk>
   2a658:	21e0      	movs	r1, #224	; 0xe0
   2a65a:	4811      	ldr	r0, [pc, #68]	; (2a6a0 <k_poll_poller_cb+0x64>)
   2a65c:	f004 f8af 	bl	2e7be <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2a660:	7b63      	ldrb	r3, [r4, #13]
   2a662:	079a      	lsls	r2, r3, #30
   2a664:	d401      	bmi.n	2a66a <k_poll_poller_cb+0x2e>
		return 0;
   2a666:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2a668:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   2a66a:	6a23      	ldr	r3, [r4, #32]
   2a66c:	3302      	adds	r3, #2
   2a66e:	d012      	beq.n	2a696 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   2a670:	4620      	mov	r0, r4
   2a672:	f7fe f8ab 	bl	287cc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2a676:	2d08      	cmp	r5, #8
   2a678:	bf0c      	ite	eq
   2a67a:	f06f 0303 	mvneq.w	r3, #3
   2a67e:	2300      	movne	r3, #0
   2a680:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a682:	7b63      	ldrb	r3, [r4, #13]
   2a684:	06db      	lsls	r3, r3, #27
   2a686:	d1ee      	bne.n	2a666 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   2a688:	69a5      	ldr	r5, [r4, #24]
   2a68a:	2d00      	cmp	r5, #0
   2a68c:	d1eb      	bne.n	2a666 <k_poll_poller_cb+0x2a>
	z_ready_thread(thread);
   2a68e:	4620      	mov	r0, r4
   2a690:	f7fe f9dc 	bl	28a4c <z_ready_thread>
	return 0;
   2a694:	e7e7      	b.n	2a666 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   2a696:	f06f 000a 	mvn.w	r0, #10
   2a69a:	e7e5      	b.n	2a668 <k_poll_poller_cb+0x2c>
   2a69c:	00037684 	.word	0x00037684
   2a6a0:	00037663 	.word	0x00037663
   2a6a4:	00035920 	.word	0x00035920
   2a6a8:	0003769a 	.word	0x0003769a

0002a6ac <clear_event_registrations>:
{
   2a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a6b0:	2414      	movs	r4, #20
   2a6b2:	4680      	mov	r8, r0
   2a6b4:	4617      	mov	r7, r2
	while (num_events--) {
   2a6b6:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2a6ba:	4d48      	ldr	r5, [pc, #288]	; (2a7dc <clear_event_registrations+0x130>)
   2a6bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2a818 <clear_event_registrations+0x16c>
   2a6c0:	4e47      	ldr	r6, [pc, #284]	; (2a7e0 <clear_event_registrations+0x134>)
	while (num_events--) {
   2a6c2:	4544      	cmp	r4, r8
   2a6c4:	d101      	bne.n	2a6ca <clear_event_registrations+0x1e>
}
   2a6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2a6ca:	2300      	movs	r3, #0
   2a6cc:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2a6d0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2a6d4:	f003 030f 	and.w	r3, r3, #15
   2a6d8:	2b04      	cmp	r3, #4
   2a6da:	d83d      	bhi.n	2a758 <clear_event_registrations+0xac>
   2a6dc:	e8df f003 	tbb	[pc, r3]
   2a6e0:	3c032d49 	.word	0x3c032d49
   2a6e4:	1e          	.byte	0x1e
   2a6e5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2a6e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a6ea:	b963      	cbnz	r3, 2a706 <clear_event_registrations+0x5a>
   2a6ec:	493d      	ldr	r1, [pc, #244]	; (2a7e4 <clear_event_registrations+0x138>)
   2a6ee:	2396      	movs	r3, #150	; 0x96
   2a6f0:	462a      	mov	r2, r5
   2a6f2:	4630      	mov	r0, r6
   2a6f4:	f003 fd62 	bl	2e1bc <printk>
   2a6f8:	483b      	ldr	r0, [pc, #236]	; (2a7e8 <clear_event_registrations+0x13c>)
   2a6fa:	f003 fd5f 	bl	2e1bc <printk>
   2a6fe:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2a700:	4628      	mov	r0, r5
   2a702:	f004 f85c 	bl	2e7be <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2a706:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2a70a:	b393      	cbz	r3, 2a772 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   2a70c:	f854 2c10 	ldr.w	r2, [r4, #-16]
   2a710:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2a712:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a714:	2300      	movs	r3, #0
	node->prev = NULL;
   2a716:	e944 3305 	strd	r3, r3, [r4, #-20]
   2a71a:	e02a      	b.n	2a772 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2a71c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a720:	2b00      	cmp	r3, #0
   2a722:	d1f0      	bne.n	2a706 <clear_event_registrations+0x5a>
   2a724:	4931      	ldr	r1, [pc, #196]	; (2a7ec <clear_event_registrations+0x140>)
   2a726:	239a      	movs	r3, #154	; 0x9a
   2a728:	462a      	mov	r2, r5
   2a72a:	4630      	mov	r0, r6
   2a72c:	f003 fd46 	bl	2e1bc <printk>
   2a730:	482f      	ldr	r0, [pc, #188]	; (2a7f0 <clear_event_registrations+0x144>)
   2a732:	f003 fd43 	bl	2e1bc <printk>
   2a736:	219a      	movs	r1, #154	; 0x9a
   2a738:	e7e2      	b.n	2a700 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2a73a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a73e:	2b00      	cmp	r3, #0
   2a740:	d1e1      	bne.n	2a706 <clear_event_registrations+0x5a>
   2a742:	492c      	ldr	r1, [pc, #176]	; (2a7f4 <clear_event_registrations+0x148>)
   2a744:	239e      	movs	r3, #158	; 0x9e
   2a746:	462a      	mov	r2, r5
   2a748:	4630      	mov	r0, r6
   2a74a:	f003 fd37 	bl	2e1bc <printk>
   2a74e:	482a      	ldr	r0, [pc, #168]	; (2a7f8 <clear_event_registrations+0x14c>)
   2a750:	f003 fd34 	bl	2e1bc <printk>
   2a754:	219e      	movs	r1, #158	; 0x9e
   2a756:	e7d3      	b.n	2a700 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   2a758:	4649      	mov	r1, r9
   2a75a:	23a5      	movs	r3, #165	; 0xa5
   2a75c:	462a      	mov	r2, r5
   2a75e:	4630      	mov	r0, r6
   2a760:	f003 fd2c 	bl	2e1bc <printk>
   2a764:	4825      	ldr	r0, [pc, #148]	; (2a7fc <clear_event_registrations+0x150>)
   2a766:	f003 fd29 	bl	2e1bc <printk>
   2a76a:	21a5      	movs	r1, #165	; 0xa5
   2a76c:	4628      	mov	r0, r5
   2a76e:	f004 f826 	bl	2e7be <assert_post_action>
   2a772:	4823      	ldr	r0, [pc, #140]	; (2a800 <clear_event_registrations+0x154>)
   2a774:	f7ff fac2 	bl	29cfc <z_spin_unlock_valid>
   2a778:	b968      	cbnz	r0, 2a796 <clear_event_registrations+0xea>
   2a77a:	2384      	movs	r3, #132	; 0x84
   2a77c:	4a21      	ldr	r2, [pc, #132]	; (2a804 <clear_event_registrations+0x158>)
   2a77e:	4922      	ldr	r1, [pc, #136]	; (2a808 <clear_event_registrations+0x15c>)
   2a780:	4630      	mov	r0, r6
   2a782:	f003 fd1b 	bl	2e1bc <printk>
   2a786:	491e      	ldr	r1, [pc, #120]	; (2a800 <clear_event_registrations+0x154>)
   2a788:	4820      	ldr	r0, [pc, #128]	; (2a80c <clear_event_registrations+0x160>)
   2a78a:	f003 fd17 	bl	2e1bc <printk>
   2a78e:	2184      	movs	r1, #132	; 0x84
   2a790:	481c      	ldr	r0, [pc, #112]	; (2a804 <clear_event_registrations+0x158>)
   2a792:	f004 f814 	bl	2e7be <assert_post_action>
   2a796:	f387 8811 	msr	BASEPRI, r7
   2a79a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2a79e:	f04f 0320 	mov.w	r3, #32
   2a7a2:	f3ef 8711 	mrs	r7, BASEPRI
   2a7a6:	f383 8811 	msr	BASEPRI, r3
   2a7aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a7ae:	4814      	ldr	r0, [pc, #80]	; (2a800 <clear_event_registrations+0x154>)
   2a7b0:	f7ff fa96 	bl	29ce0 <z_spin_lock_valid>
   2a7b4:	b968      	cbnz	r0, 2a7d2 <clear_event_registrations+0x126>
   2a7b6:	235c      	movs	r3, #92	; 0x5c
   2a7b8:	4a12      	ldr	r2, [pc, #72]	; (2a804 <clear_event_registrations+0x158>)
   2a7ba:	4915      	ldr	r1, [pc, #84]	; (2a810 <clear_event_registrations+0x164>)
   2a7bc:	4630      	mov	r0, r6
   2a7be:	f003 fcfd 	bl	2e1bc <printk>
   2a7c2:	490f      	ldr	r1, [pc, #60]	; (2a800 <clear_event_registrations+0x154>)
   2a7c4:	4813      	ldr	r0, [pc, #76]	; (2a814 <clear_event_registrations+0x168>)
   2a7c6:	f003 fcf9 	bl	2e1bc <printk>
   2a7ca:	215c      	movs	r1, #92	; 0x5c
   2a7cc:	480d      	ldr	r0, [pc, #52]	; (2a804 <clear_event_registrations+0x158>)
   2a7ce:	f003 fff6 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a7d2:	480b      	ldr	r0, [pc, #44]	; (2a800 <clear_event_registrations+0x154>)
   2a7d4:	f7ff faa2 	bl	29d1c <z_spin_lock_set_owner>
	return k;
   2a7d8:	3c14      	subs	r4, #20
   2a7da:	e772      	b.n	2a6c2 <clear_event_registrations+0x16>
   2a7dc:	00037663 	.word	0x00037663
   2a7e0:	00035920 	.word	0x00035920
   2a7e4:	000375bd 	.word	0x000375bd
   2a7e8:	000375d7 	.word	0x000375d7
   2a7ec:	000375ec 	.word	0x000375ec
   2a7f0:	00037608 	.word	0x00037608
   2a7f4:	00037619 	.word	0x00037619
   2a7f8:	00037636 	.word	0x00037636
   2a7fc:	0003764d 	.word	0x0003764d
   2a800:	20027448 	.word	0x20027448
   2a804:	00035cb3 	.word	0x00035cb3
   2a808:	00035d06 	.word	0x00035d06
   2a80c:	00035d1d 	.word	0x00035d1d
   2a810:	00035cd9 	.word	0x00035cd9
   2a814:	00035cee 	.word	0x00035cee
   2a818:	00037308 	.word	0x00037308

0002a81c <register_events>:
{
   2a81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2a820:	2700      	movs	r7, #0
{
   2a822:	468a      	mov	sl, r1
   2a824:	4615      	mov	r5, r2
   2a826:	4604      	mov	r4, r0
	int events_registered = 0;
   2a828:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a82a:	4e69      	ldr	r6, [pc, #420]	; (2a9d0 <register_events+0x1b4>)
   2a82c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2aa10 <register_events+0x1f4>
{
   2a830:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2a832:	4557      	cmp	r7, sl
   2a834:	db03      	blt.n	2a83e <register_events+0x22>
}
   2a836:	4648      	mov	r0, r9
   2a838:	b003      	add	sp, #12
   2a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a83e:	f04f 0320 	mov.w	r3, #32
   2a842:	f3ef 8b11 	mrs	fp, BASEPRI
   2a846:	f383 8811 	msr	BASEPRI, r3
   2a84a:	f3bf 8f6f 	isb	sy
   2a84e:	4630      	mov	r0, r6
   2a850:	f7ff fa46 	bl	29ce0 <z_spin_lock_valid>
   2a854:	b968      	cbnz	r0, 2a872 <register_events+0x56>
   2a856:	235c      	movs	r3, #92	; 0x5c
   2a858:	4642      	mov	r2, r8
   2a85a:	495e      	ldr	r1, [pc, #376]	; (2a9d4 <register_events+0x1b8>)
   2a85c:	485e      	ldr	r0, [pc, #376]	; (2a9d8 <register_events+0x1bc>)
   2a85e:	f003 fcad 	bl	2e1bc <printk>
   2a862:	4631      	mov	r1, r6
   2a864:	485d      	ldr	r0, [pc, #372]	; (2a9dc <register_events+0x1c0>)
   2a866:	f003 fca9 	bl	2e1bc <printk>
   2a86a:	215c      	movs	r1, #92	; 0x5c
   2a86c:	4640      	mov	r0, r8
   2a86e:	f003 ffa6 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2a872:	4630      	mov	r0, r6
   2a874:	f7ff fa52 	bl	29d1c <z_spin_lock_set_owner>
	switch (event->type) {
   2a878:	7b63      	ldrb	r3, [r4, #13]
   2a87a:	f003 030f 	and.w	r3, r3, #15
   2a87e:	2b04      	cmp	r3, #4
   2a880:	d844      	bhi.n	2a90c <register_events+0xf0>
   2a882:	e8df f003 	tbb	[pc, r3]
   2a886:	3d2d      	.short	0x3d2d
   2a888:	4303      	.short	0x4303
   2a88a:	2a          	.byte	0x2a
   2a88b:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2a88c:	6923      	ldr	r3, [r4, #16]
   2a88e:	689b      	ldr	r3, [r3, #8]
   2a890:	b333      	cbz	r3, 2a8e0 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2a892:	2202      	movs	r2, #2
	event->poller = NULL;
   2a894:	2100      	movs	r1, #0
	event->state |= state;
   2a896:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2a898:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2a89a:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2a89e:	4302      	orrs	r2, r0
   2a8a0:	f362 3310 	bfi	r3, r2, #12, #5
   2a8a4:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2a8a6:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a8a8:	4630      	mov	r0, r6
   2a8aa:	f7ff fa27 	bl	29cfc <z_spin_unlock_valid>
   2a8ae:	b968      	cbnz	r0, 2a8cc <register_events+0xb0>
   2a8b0:	2384      	movs	r3, #132	; 0x84
   2a8b2:	4642      	mov	r2, r8
   2a8b4:	494a      	ldr	r1, [pc, #296]	; (2a9e0 <register_events+0x1c4>)
   2a8b6:	4848      	ldr	r0, [pc, #288]	; (2a9d8 <register_events+0x1bc>)
   2a8b8:	f003 fc80 	bl	2e1bc <printk>
   2a8bc:	4631      	mov	r1, r6
   2a8be:	4849      	ldr	r0, [pc, #292]	; (2a9e4 <register_events+0x1c8>)
   2a8c0:	f003 fc7c 	bl	2e1bc <printk>
   2a8c4:	2184      	movs	r1, #132	; 0x84
   2a8c6:	4640      	mov	r0, r8
   2a8c8:	f003 ff79 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2a8cc:	f38b 8811 	msr	BASEPRI, fp
   2a8d0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2a8d4:	3701      	adds	r7, #1
   2a8d6:	3414      	adds	r4, #20
   2a8d8:	e7ab      	b.n	2a832 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   2a8da:	6923      	ldr	r3, [r4, #16]
   2a8dc:	681b      	ldr	r3, [r3, #0]
   2a8de:	bb33      	cbnz	r3, 2a92e <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   2a8e0:	9b01      	ldr	r3, [sp, #4]
   2a8e2:	2b00      	cmp	r3, #0
   2a8e4:	d1e0      	bne.n	2a8a8 <register_events+0x8c>
   2a8e6:	782b      	ldrb	r3, [r5, #0]
   2a8e8:	2b00      	cmp	r3, #0
   2a8ea:	d0dd      	beq.n	2a8a8 <register_events+0x8c>
	switch (event->type) {
   2a8ec:	7b63      	ldrb	r3, [r4, #13]
   2a8ee:	f003 030f 	and.w	r3, r3, #15
   2a8f2:	2b04      	cmp	r3, #4
   2a8f4:	d85d      	bhi.n	2a9b2 <register_events+0x196>
   2a8f6:	e8df f003 	tbb	[pc, r3]
   2a8fa:	4931      	.short	0x4931
   2a8fc:	5c1c      	.short	0x5c1c
   2a8fe:	35          	.byte	0x35
   2a8ff:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2a900:	6923      	ldr	r3, [r4, #16]
   2a902:	689b      	ldr	r3, [r3, #8]
   2a904:	2b00      	cmp	r3, #0
   2a906:	d0eb      	beq.n	2a8e0 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   2a908:	2201      	movs	r2, #1
   2a90a:	e7c3      	b.n	2a894 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2a90c:	2350      	movs	r3, #80	; 0x50
   2a90e:	4a36      	ldr	r2, [pc, #216]	; (2a9e8 <register_events+0x1cc>)
   2a910:	4936      	ldr	r1, [pc, #216]	; (2a9ec <register_events+0x1d0>)
   2a912:	4831      	ldr	r0, [pc, #196]	; (2a9d8 <register_events+0x1bc>)
   2a914:	f003 fc52 	bl	2e1bc <printk>
   2a918:	7b61      	ldrb	r1, [r4, #13]
   2a91a:	4835      	ldr	r0, [pc, #212]	; (2a9f0 <register_events+0x1d4>)
   2a91c:	f001 010f 	and.w	r1, r1, #15
   2a920:	f003 fc4c 	bl	2e1bc <printk>
   2a924:	2150      	movs	r1, #80	; 0x50
   2a926:	4830      	ldr	r0, [pc, #192]	; (2a9e8 <register_events+0x1cc>)
   2a928:	f003 ff49 	bl	2e7be <assert_post_action>
		break;
   2a92c:	e7d8      	b.n	2a8e0 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2a92e:	2204      	movs	r2, #4
   2a930:	e7b0      	b.n	2a894 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2a932:	6923      	ldr	r3, [r4, #16]
   2a934:	b963      	cbnz	r3, 2a950 <register_events+0x134>
   2a936:	492f      	ldr	r1, [pc, #188]	; (2a9f4 <register_events+0x1d8>)
   2a938:	2375      	movs	r3, #117	; 0x75
   2a93a:	4a2b      	ldr	r2, [pc, #172]	; (2a9e8 <register_events+0x1cc>)
   2a93c:	4826      	ldr	r0, [pc, #152]	; (2a9d8 <register_events+0x1bc>)
   2a93e:	f003 fc3d 	bl	2e1bc <printk>
   2a942:	482d      	ldr	r0, [pc, #180]	; (2a9f8 <register_events+0x1dc>)
   2a944:	f003 fc3a 	bl	2e1bc <printk>
   2a948:	2175      	movs	r1, #117	; 0x75
   2a94a:	4827      	ldr	r0, [pc, #156]	; (2a9e8 <register_events+0x1cc>)
   2a94c:	f003 ff37 	bl	2e7be <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2a950:	462a      	mov	r2, r5
   2a952:	4621      	mov	r1, r4
   2a954:	6920      	ldr	r0, [r4, #16]
   2a956:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2a958:	f008 fed5 	bl	33706 <add_event>
	event->poller = poller;
   2a95c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2a95e:	f109 0901 	add.w	r9, r9, #1
   2a962:	e7a1      	b.n	2a8a8 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2a964:	6923      	ldr	r3, [r4, #16]
   2a966:	b963      	cbnz	r3, 2a982 <register_events+0x166>
   2a968:	4924      	ldr	r1, [pc, #144]	; (2a9fc <register_events+0x1e0>)
   2a96a:	2379      	movs	r3, #121	; 0x79
   2a96c:	4a1e      	ldr	r2, [pc, #120]	; (2a9e8 <register_events+0x1cc>)
   2a96e:	481a      	ldr	r0, [pc, #104]	; (2a9d8 <register_events+0x1bc>)
   2a970:	f003 fc24 	bl	2e1bc <printk>
   2a974:	4822      	ldr	r0, [pc, #136]	; (2aa00 <register_events+0x1e4>)
   2a976:	f003 fc21 	bl	2e1bc <printk>
   2a97a:	2179      	movs	r1, #121	; 0x79
   2a97c:	481a      	ldr	r0, [pc, #104]	; (2a9e8 <register_events+0x1cc>)
   2a97e:	f003 ff1e 	bl	2e7be <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2a982:	6920      	ldr	r0, [r4, #16]
   2a984:	462a      	mov	r2, r5
   2a986:	4621      	mov	r1, r4
   2a988:	3014      	adds	r0, #20
   2a98a:	e7e5      	b.n	2a958 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2a98c:	6923      	ldr	r3, [r4, #16]
   2a98e:	b963      	cbnz	r3, 2a9aa <register_events+0x18e>
   2a990:	491c      	ldr	r1, [pc, #112]	; (2aa04 <register_events+0x1e8>)
   2a992:	237d      	movs	r3, #125	; 0x7d
   2a994:	4a14      	ldr	r2, [pc, #80]	; (2a9e8 <register_events+0x1cc>)
   2a996:	4810      	ldr	r0, [pc, #64]	; (2a9d8 <register_events+0x1bc>)
   2a998:	f003 fc10 	bl	2e1bc <printk>
   2a99c:	481a      	ldr	r0, [pc, #104]	; (2aa08 <register_events+0x1ec>)
   2a99e:	f003 fc0d 	bl	2e1bc <printk>
   2a9a2:	217d      	movs	r1, #125	; 0x7d
   2a9a4:	4810      	ldr	r0, [pc, #64]	; (2a9e8 <register_events+0x1cc>)
   2a9a6:	f003 ff0a 	bl	2e7be <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2a9aa:	462a      	mov	r2, r5
   2a9ac:	4621      	mov	r1, r4
   2a9ae:	6920      	ldr	r0, [r4, #16]
   2a9b0:	e7d2      	b.n	2a958 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   2a9b2:	2384      	movs	r3, #132	; 0x84
   2a9b4:	4a0c      	ldr	r2, [pc, #48]	; (2a9e8 <register_events+0x1cc>)
   2a9b6:	490d      	ldr	r1, [pc, #52]	; (2a9ec <register_events+0x1d0>)
   2a9b8:	4807      	ldr	r0, [pc, #28]	; (2a9d8 <register_events+0x1bc>)
   2a9ba:	f003 fbff 	bl	2e1bc <printk>
   2a9be:	4813      	ldr	r0, [pc, #76]	; (2aa0c <register_events+0x1f0>)
   2a9c0:	f003 fbfc 	bl	2e1bc <printk>
   2a9c4:	2184      	movs	r1, #132	; 0x84
   2a9c6:	4808      	ldr	r0, [pc, #32]	; (2a9e8 <register_events+0x1cc>)
   2a9c8:	f003 fef9 	bl	2e7be <assert_post_action>
		break;
   2a9cc:	e7c6      	b.n	2a95c <register_events+0x140>
   2a9ce:	bf00      	nop
   2a9d0:	20027448 	.word	0x20027448
   2a9d4:	00035cd9 	.word	0x00035cd9
   2a9d8:	00035920 	.word	0x00035920
   2a9dc:	00035cee 	.word	0x00035cee
   2a9e0:	00035d06 	.word	0x00035d06
   2a9e4:	00035d1d 	.word	0x00035d1d
   2a9e8:	00037663 	.word	0x00037663
   2a9ec:	00037308 	.word	0x00037308
   2a9f0:	000376b9 	.word	0x000376b9
   2a9f4:	000375bd 	.word	0x000375bd
   2a9f8:	000375d7 	.word	0x000375d7
   2a9fc:	000375ec 	.word	0x000375ec
   2aa00:	00037608 	.word	0x00037608
   2aa04:	00037619 	.word	0x00037619
   2aa08:	00037636 	.word	0x00037636
   2aa0c:	0003764d 	.word	0x0003764d
   2aa10:	00035cb3 	.word	0x00035cb3

0002aa14 <z_impl_k_poll>:
int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2aa14:	2301      	movs	r3, #1
{
   2aa16:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa18:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   2aa1a:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   2aa1e:	4b71      	ldr	r3, [pc, #452]	; (2abe4 <z_impl_k_poll+0x1d0>)
{
   2aa20:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2aa22:	689b      	ldr	r3, [r3, #8]
{
   2aa24:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2aa26:	9304      	str	r3, [sp, #16]
   2aa28:	4b6f      	ldr	r3, [pc, #444]	; (2abe8 <z_impl_k_poll+0x1d4>)
{
   2aa2a:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   2aa2c:	9305      	str	r3, [sp, #20]
   2aa2e:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   2aa32:	b173      	cbz	r3, 2aa52 <z_impl_k_poll+0x3e>
   2aa34:	496d      	ldr	r1, [pc, #436]	; (2abec <z_impl_k_poll+0x1d8>)
   2aa36:	f44f 7380 	mov.w	r3, #256	; 0x100
   2aa3a:	4a6d      	ldr	r2, [pc, #436]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa3c:	486d      	ldr	r0, [pc, #436]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2aa3e:	f003 fbbd 	bl	2e1bc <printk>
   2aa42:	486d      	ldr	r0, [pc, #436]	; (2abf8 <z_impl_k_poll+0x1e4>)
   2aa44:	f003 fbba 	bl	2e1bc <printk>
   2aa48:	f44f 7180 	mov.w	r1, #256	; 0x100
   2aa4c:	4868      	ldr	r0, [pc, #416]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa4e:	f003 feb6 	bl	2e7be <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2aa52:	b974      	cbnz	r4, 2aa72 <z_impl_k_poll+0x5e>
   2aa54:	4969      	ldr	r1, [pc, #420]	; (2abfc <z_impl_k_poll+0x1e8>)
   2aa56:	f240 1301 	movw	r3, #257	; 0x101
   2aa5a:	4a65      	ldr	r2, [pc, #404]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa5c:	4865      	ldr	r0, [pc, #404]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2aa5e:	f003 fbad 	bl	2e1bc <printk>
   2aa62:	4867      	ldr	r0, [pc, #412]	; (2ac00 <z_impl_k_poll+0x1ec>)
   2aa64:	f003 fbaa 	bl	2e1bc <printk>
   2aa68:	f240 1101 	movw	r1, #257	; 0x101
   2aa6c:	4860      	ldr	r0, [pc, #384]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa6e:	f003 fea6 	bl	2e7be <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2aa72:	2d00      	cmp	r5, #0
   2aa74:	da0e      	bge.n	2aa94 <z_impl_k_poll+0x80>
   2aa76:	4963      	ldr	r1, [pc, #396]	; (2ac04 <z_impl_k_poll+0x1f0>)
   2aa78:	f44f 7381 	mov.w	r3, #258	; 0x102
   2aa7c:	4a5c      	ldr	r2, [pc, #368]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa7e:	485d      	ldr	r0, [pc, #372]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2aa80:	f003 fb9c 	bl	2e1bc <printk>
   2aa84:	4860      	ldr	r0, [pc, #384]	; (2ac08 <z_impl_k_poll+0x1f4>)
   2aa86:	f003 fb99 	bl	2e1bc <printk>
   2aa8a:	f44f 7181 	mov.w	r1, #258	; 0x102
   2aa8e:	4858      	ldr	r0, [pc, #352]	; (2abf0 <z_impl_k_poll+0x1dc>)
   2aa90:	f003 fe95 	bl	2e7be <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   2aa94:	fab6 f386 	clz	r3, r6
   2aa98:	aa03      	add	r2, sp, #12
   2aa9a:	095b      	lsrs	r3, r3, #5
   2aa9c:	4629      	mov	r1, r5
   2aa9e:	4620      	mov	r0, r4
   2aaa0:	f7ff febc 	bl	2a81c <register_events>
   2aaa4:	4607      	mov	r7, r0
	__asm__ volatile(
   2aaa6:	f04f 0320 	mov.w	r3, #32
   2aaaa:	f3ef 8511 	mrs	r5, BASEPRI
   2aaae:	f383 8811 	msr	BASEPRI, r3
   2aab2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aab6:	4855      	ldr	r0, [pc, #340]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2aab8:	f7ff f912 	bl	29ce0 <z_spin_lock_valid>
   2aabc:	b968      	cbnz	r0, 2aada <z_impl_k_poll+0xc6>
   2aabe:	235c      	movs	r3, #92	; 0x5c
   2aac0:	4a53      	ldr	r2, [pc, #332]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2aac2:	4954      	ldr	r1, [pc, #336]	; (2ac14 <z_impl_k_poll+0x200>)
   2aac4:	484b      	ldr	r0, [pc, #300]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2aac6:	f003 fb79 	bl	2e1bc <printk>
   2aaca:	4950      	ldr	r1, [pc, #320]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2aacc:	4852      	ldr	r0, [pc, #328]	; (2ac18 <z_impl_k_poll+0x204>)
   2aace:	f003 fb75 	bl	2e1bc <printk>
   2aad2:	215c      	movs	r1, #92	; 0x5c
   2aad4:	484e      	ldr	r0, [pc, #312]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2aad6:	f003 fe72 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2aada:	484c      	ldr	r0, [pc, #304]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2aadc:	f7ff f91e 	bl	29d1c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2aae0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2aae4:	b9f3      	cbnz	r3, 2ab24 <z_impl_k_poll+0x110>
		clear_event_registrations(events, events_registered, key);
   2aae6:	4620      	mov	r0, r4
   2aae8:	462a      	mov	r2, r5
   2aaea:	4639      	mov	r1, r7
   2aaec:	f7ff fdde 	bl	2a6ac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aaf0:	4846      	ldr	r0, [pc, #280]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2aaf2:	f7ff f903 	bl	29cfc <z_spin_unlock_valid>
   2aaf6:	b968      	cbnz	r0, 2ab14 <z_impl_k_poll+0x100>
   2aaf8:	2384      	movs	r3, #132	; 0x84
   2aafa:	4a45      	ldr	r2, [pc, #276]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2aafc:	4947      	ldr	r1, [pc, #284]	; (2ac1c <z_impl_k_poll+0x208>)
   2aafe:	483d      	ldr	r0, [pc, #244]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2ab00:	f003 fb5c 	bl	2e1bc <printk>
   2ab04:	4941      	ldr	r1, [pc, #260]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2ab06:	4846      	ldr	r0, [pc, #280]	; (2ac20 <z_impl_k_poll+0x20c>)
   2ab08:	f003 fb58 	bl	2e1bc <printk>
   2ab0c:	2184      	movs	r1, #132	; 0x84
   2ab0e:	4840      	ldr	r0, [pc, #256]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2ab10:	f003 fe55 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2ab14:	f385 8811 	msr	BASEPRI, r5
   2ab18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   2ab1c:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2ab1e:	4628      	mov	r0, r5
   2ab20:	b007      	add	sp, #28
   2ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   2ab24:	2300      	movs	r3, #0
   2ab26:	f88d 300c 	strb.w	r3, [sp, #12]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ab2a:	b9c6      	cbnz	r6, 2ab5e <z_impl_k_poll+0x14a>
   2ab2c:	4837      	ldr	r0, [pc, #220]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2ab2e:	f7ff f8e5 	bl	29cfc <z_spin_unlock_valid>
   2ab32:	b968      	cbnz	r0, 2ab50 <z_impl_k_poll+0x13c>
   2ab34:	2384      	movs	r3, #132	; 0x84
   2ab36:	4a36      	ldr	r2, [pc, #216]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2ab38:	4938      	ldr	r1, [pc, #224]	; (2ac1c <z_impl_k_poll+0x208>)
   2ab3a:	482e      	ldr	r0, [pc, #184]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2ab3c:	f003 fb3e 	bl	2e1bc <printk>
   2ab40:	4932      	ldr	r1, [pc, #200]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2ab42:	4837      	ldr	r0, [pc, #220]	; (2ac20 <z_impl_k_poll+0x20c>)
   2ab44:	f003 fb3a 	bl	2e1bc <printk>
   2ab48:	2184      	movs	r1, #132	; 0x84
   2ab4a:	4831      	ldr	r0, [pc, #196]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2ab4c:	f003 fe37 	bl	2e7be <assert_post_action>
   2ab50:	f385 8811 	msr	BASEPRI, r5
   2ab54:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2ab58:	f06f 050a 	mvn.w	r5, #10
   2ab5c:	e7df      	b.n	2ab1e <z_impl_k_poll+0x10a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2ab5e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2ab60:	4629      	mov	r1, r5
   2ab62:	4633      	mov	r3, r6
   2ab64:	4829      	ldr	r0, [pc, #164]	; (2ac0c <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2ab66:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2ab6a:	f7fe fb61 	bl	29230 <z_pend_curr>
   2ab6e:	4605      	mov	r5, r0
	__asm__ volatile(
   2ab70:	f04f 0320 	mov.w	r3, #32
   2ab74:	f3ef 8611 	mrs	r6, BASEPRI
   2ab78:	f383 8811 	msr	BASEPRI, r3
   2ab7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ab80:	4822      	ldr	r0, [pc, #136]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2ab82:	f7ff f8ad 	bl	29ce0 <z_spin_lock_valid>
   2ab86:	b968      	cbnz	r0, 2aba4 <z_impl_k_poll+0x190>
   2ab88:	235c      	movs	r3, #92	; 0x5c
   2ab8a:	4a21      	ldr	r2, [pc, #132]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2ab8c:	4921      	ldr	r1, [pc, #132]	; (2ac14 <z_impl_k_poll+0x200>)
   2ab8e:	4819      	ldr	r0, [pc, #100]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2ab90:	f003 fb14 	bl	2e1bc <printk>
   2ab94:	491d      	ldr	r1, [pc, #116]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2ab96:	4820      	ldr	r0, [pc, #128]	; (2ac18 <z_impl_k_poll+0x204>)
   2ab98:	f003 fb10 	bl	2e1bc <printk>
   2ab9c:	215c      	movs	r1, #92	; 0x5c
   2ab9e:	481c      	ldr	r0, [pc, #112]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2aba0:	f003 fe0d 	bl	2e7be <assert_post_action>
	z_spin_lock_set_owner(l);
   2aba4:	4819      	ldr	r0, [pc, #100]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2aba6:	f7ff f8b9 	bl	29d1c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2abaa:	4620      	mov	r0, r4
   2abac:	4632      	mov	r2, r6
   2abae:	4639      	mov	r1, r7
   2abb0:	f7ff fd7c 	bl	2a6ac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2abb4:	4815      	ldr	r0, [pc, #84]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2abb6:	f7ff f8a1 	bl	29cfc <z_spin_unlock_valid>
   2abba:	b968      	cbnz	r0, 2abd8 <z_impl_k_poll+0x1c4>
   2abbc:	2384      	movs	r3, #132	; 0x84
   2abbe:	4a14      	ldr	r2, [pc, #80]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2abc0:	4916      	ldr	r1, [pc, #88]	; (2ac1c <z_impl_k_poll+0x208>)
   2abc2:	480c      	ldr	r0, [pc, #48]	; (2abf4 <z_impl_k_poll+0x1e0>)
   2abc4:	f003 fafa 	bl	2e1bc <printk>
   2abc8:	4910      	ldr	r1, [pc, #64]	; (2ac0c <z_impl_k_poll+0x1f8>)
   2abca:	4815      	ldr	r0, [pc, #84]	; (2ac20 <z_impl_k_poll+0x20c>)
   2abcc:	f003 faf6 	bl	2e1bc <printk>
   2abd0:	2184      	movs	r1, #132	; 0x84
   2abd2:	480f      	ldr	r0, [pc, #60]	; (2ac10 <z_impl_k_poll+0x1fc>)
   2abd4:	f003 fdf3 	bl	2e7be <assert_post_action>
	__asm__ volatile(
   2abd8:	f386 8811 	msr	BASEPRI, r6
   2abdc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2abe0:	e79d      	b.n	2ab1e <z_impl_k_poll+0x10a>
   2abe2:	bf00      	nop
   2abe4:	20027320 	.word	0x20027320
   2abe8:	0002a63d 	.word	0x0002a63d
   2abec:	00037298 	.word	0x00037298
   2abf0:	00037663 	.word	0x00037663
   2abf4:	00035920 	.word	0x00035920
   2abf8:	00035d7e 	.word	0x00035d7e
   2abfc:	000376d6 	.word	0x000376d6
   2ac00:	000376ec 	.word	0x000376ec
   2ac04:	000376fb 	.word	0x000376fb
   2ac08:	0003770b 	.word	0x0003770b
   2ac0c:	20027448 	.word	0x20027448
   2ac10:	00035cb3 	.word	0x00035cb3
   2ac14:	00035cd9 	.word	0x00035cd9
   2ac18:	00035cee 	.word	0x00035cee
   2ac1c:	00035d06 	.word	0x00035d06
   2ac20:	00035d1d 	.word	0x00035d1d

0002ac24 <fabs>:
   2ac24:	ec51 0b10 	vmov	r0, r1, d0
   2ac28:	ee10 2a10 	vmov	r2, s0
   2ac2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2ac30:	ec43 2b10 	vmov	d0, r2, r3
   2ac34:	4770      	bx	lr
   2ac36:	bf00      	nop

0002ac38 <fabsf>:
   2ac38:	ee10 3a10 	vmov	r3, s0
   2ac3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2ac40:	ee00 3a10 	vmov	s0, r3
   2ac44:	4770      	bx	lr
   2ac46:	bf00      	nop

0002ac48 <floorf>:
   2ac48:	febb 0a40 	vrintm.f32	s0, s0
   2ac4c:	4770      	bx	lr
   2ac4e:	bf00      	nop

0002ac50 <fmaxf>:
   2ac50:	b508      	push	{r3, lr}
   2ac52:	ed2d 8b02 	vpush	{d8}
   2ac56:	eeb0 8a60 	vmov.f32	s16, s1
   2ac5a:	eef0 8a40 	vmov.f32	s17, s0
   2ac5e:	f000 f833 	bl	2acc8 <__fpclassifyf>
   2ac62:	b920      	cbnz	r0, 2ac6e <fmaxf+0x1e>
   2ac64:	eeb0 0a48 	vmov.f32	s0, s16
   2ac68:	ecbd 8b02 	vpop	{d8}
   2ac6c:	bd08      	pop	{r3, pc}
   2ac6e:	eeb0 0a48 	vmov.f32	s0, s16
   2ac72:	f000 f829 	bl	2acc8 <__fpclassifyf>
   2ac76:	b120      	cbz	r0, 2ac82 <fmaxf+0x32>
   2ac78:	eef4 8ac8 	vcmpe.f32	s17, s16
   2ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ac80:	ddf0      	ble.n	2ac64 <fmaxf+0x14>
   2ac82:	eeb0 0a68 	vmov.f32	s0, s17
   2ac86:	ecbd 8b02 	vpop	{d8}
   2ac8a:	bd08      	pop	{r3, pc}

0002ac8c <fminf>:
   2ac8c:	b508      	push	{r3, lr}
   2ac8e:	ed2d 8b02 	vpush	{d8}
   2ac92:	eeb0 8a60 	vmov.f32	s16, s1
   2ac96:	eef0 8a40 	vmov.f32	s17, s0
   2ac9a:	f000 f815 	bl	2acc8 <__fpclassifyf>
   2ac9e:	b920      	cbnz	r0, 2acaa <fminf+0x1e>
   2aca0:	eeb0 0a48 	vmov.f32	s0, s16
   2aca4:	ecbd 8b02 	vpop	{d8}
   2aca8:	bd08      	pop	{r3, pc}
   2acaa:	eeb0 0a48 	vmov.f32	s0, s16
   2acae:	f000 f80b 	bl	2acc8 <__fpclassifyf>
   2acb2:	b120      	cbz	r0, 2acbe <fminf+0x32>
   2acb4:	eef4 8ac8 	vcmpe.f32	s17, s16
   2acb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2acbc:	d5f0      	bpl.n	2aca0 <fminf+0x14>
   2acbe:	eeb0 0a68 	vmov.f32	s0, s17
   2acc2:	ecbd 8b02 	vpop	{d8}
   2acc6:	bd08      	pop	{r3, pc}

0002acc8 <__fpclassifyf>:
   2acc8:	ee10 3a10 	vmov	r3, s0
   2accc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   2acd0:	d00e      	beq.n	2acf0 <__fpclassifyf+0x28>
   2acd2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   2acd6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   2acda:	d30d      	bcc.n	2acf8 <__fpclassifyf+0x30>
   2acdc:	1e42      	subs	r2, r0, #1
   2acde:	4b07      	ldr	r3, [pc, #28]	; (2acfc <__fpclassifyf+0x34>)
   2ace0:	429a      	cmp	r2, r3
   2ace2:	d907      	bls.n	2acf4 <__fpclassifyf+0x2c>
   2ace4:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   2ace8:	fab0 f080 	clz	r0, r0
   2acec:	0940      	lsrs	r0, r0, #5
   2acee:	4770      	bx	lr
   2acf0:	2002      	movs	r0, #2
   2acf2:	4770      	bx	lr
   2acf4:	2003      	movs	r0, #3
   2acf6:	4770      	bx	lr
   2acf8:	2004      	movs	r0, #4
   2acfa:	4770      	bx	lr
   2acfc:	007ffffe 	.word	0x007ffffe

0002ad00 <roundf>:
   2ad00:	feb8 0a40 	vrinta.f32	s0, s0
   2ad04:	4770      	bx	lr
   2ad06:	bf00      	nop

0002ad08 <sinf>:
   2ad08:	ee10 3a10 	vmov	r3, s0
   2ad0c:	4a21      	ldr	r2, [pc, #132]	; (2ad94 <sinf+0x8c>)
   2ad0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2ad12:	4293      	cmp	r3, r2
   2ad14:	b500      	push	{lr}
   2ad16:	b083      	sub	sp, #12
   2ad18:	dd1a      	ble.n	2ad50 <sinf+0x48>
   2ad1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2ad1e:	db04      	blt.n	2ad2a <sinf+0x22>
   2ad20:	ee30 0a40 	vsub.f32	s0, s0, s0
   2ad24:	b003      	add	sp, #12
   2ad26:	f85d fb04 	ldr.w	pc, [sp], #4
   2ad2a:	4668      	mov	r0, sp
   2ad2c:	f000 ffc0 	bl	2bcb0 <__ieee754_rem_pio2f>
   2ad30:	f000 0003 	and.w	r0, r0, #3
   2ad34:	2801      	cmp	r0, #1
   2ad36:	d013      	beq.n	2ad60 <sinf+0x58>
   2ad38:	2802      	cmp	r0, #2
   2ad3a:	d020      	beq.n	2ad7e <sinf+0x76>
   2ad3c:	b1b8      	cbz	r0, 2ad6e <sinf+0x66>
   2ad3e:	eddd 0a01 	vldr	s1, [sp, #4]
   2ad42:	ed9d 0a00 	vldr	s0, [sp]
   2ad46:	f001 f8ed 	bl	2bf24 <__kernel_cosf>
   2ad4a:	eeb1 0a40 	vneg.f32	s0, s0
   2ad4e:	e7e9      	b.n	2ad24 <sinf+0x1c>
   2ad50:	2000      	movs	r0, #0
   2ad52:	eddf 0a11 	vldr	s1, [pc, #68]	; 2ad98 <sinf+0x90>
   2ad56:	f001 fcb9 	bl	2c6cc <__kernel_sinf>
   2ad5a:	b003      	add	sp, #12
   2ad5c:	f85d fb04 	ldr.w	pc, [sp], #4
   2ad60:	eddd 0a01 	vldr	s1, [sp, #4]
   2ad64:	ed9d 0a00 	vldr	s0, [sp]
   2ad68:	f001 f8dc 	bl	2bf24 <__kernel_cosf>
   2ad6c:	e7da      	b.n	2ad24 <sinf+0x1c>
   2ad6e:	2001      	movs	r0, #1
   2ad70:	eddd 0a01 	vldr	s1, [sp, #4]
   2ad74:	ed9d 0a00 	vldr	s0, [sp]
   2ad78:	f001 fca8 	bl	2c6cc <__kernel_sinf>
   2ad7c:	e7d2      	b.n	2ad24 <sinf+0x1c>
   2ad7e:	2001      	movs	r0, #1
   2ad80:	eddd 0a01 	vldr	s1, [sp, #4]
   2ad84:	ed9d 0a00 	vldr	s0, [sp]
   2ad88:	f001 fca0 	bl	2c6cc <__kernel_sinf>
   2ad8c:	eeb1 0a40 	vneg.f32	s0, s0
   2ad90:	e7c8      	b.n	2ad24 <sinf+0x1c>
   2ad92:	bf00      	nop
   2ad94:	3f490fd8 	.word	0x3f490fd8
   2ad98:	00000000 	.word	0x00000000

0002ad9c <expf>:
   2ad9c:	b508      	push	{r3, lr}
   2ad9e:	ed2d 8b02 	vpush	{d8}
   2ada2:	eeb0 8a40 	vmov.f32	s16, s0
   2ada6:	f000 fa37 	bl	2b218 <__ieee754_expf>
   2adaa:	4b16      	ldr	r3, [pc, #88]	; (2ae04 <expf+0x68>)
   2adac:	eef0 8a40 	vmov.f32	s17, s0
   2adb0:	f993 3000 	ldrsb.w	r3, [r3]
   2adb4:	3301      	adds	r3, #1
   2adb6:	d012      	beq.n	2adde <expf+0x42>
   2adb8:	eeb0 0a48 	vmov.f32	s0, s16
   2adbc:	f001 fd6e 	bl	2c89c <finitef>
   2adc0:	b168      	cbz	r0, 2adde <expf+0x42>
   2adc2:	eddf 7a11 	vldr	s15, [pc, #68]	; 2ae08 <expf+0x6c>
   2adc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2adca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2adce:	dc12      	bgt.n	2adf6 <expf+0x5a>
   2add0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2ae0c <expf+0x70>
   2add4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2add8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2addc:	d404      	bmi.n	2ade8 <expf+0x4c>
   2adde:	eeb0 0a68 	vmov.f32	s0, s17
   2ade2:	ecbd 8b02 	vpop	{d8}
   2ade6:	bd08      	pop	{r3, pc}
   2ade8:	f005 f919 	bl	3001e <__errno>
   2adec:	2322      	movs	r3, #34	; 0x22
   2adee:	eddf 8a08 	vldr	s17, [pc, #32]	; 2ae10 <expf+0x74>
   2adf2:	6003      	str	r3, [r0, #0]
   2adf4:	e7f3      	b.n	2adde <expf+0x42>
   2adf6:	f005 f912 	bl	3001e <__errno>
   2adfa:	2322      	movs	r3, #34	; 0x22
   2adfc:	eddf 8a05 	vldr	s17, [pc, #20]	; 2ae14 <expf+0x78>
   2ae00:	6003      	str	r3, [r0, #0]
   2ae02:	e7ec      	b.n	2adde <expf+0x42>
   2ae04:	2002041a 	.word	0x2002041a
   2ae08:	42b17180 	.word	0x42b17180
   2ae0c:	c2cff1b5 	.word	0xc2cff1b5
   2ae10:	00000000 	.word	0x00000000
   2ae14:	7f800000 	.word	0x7f800000

0002ae18 <logf>:
   2ae18:	b508      	push	{r3, lr}
   2ae1a:	ed2d 8b02 	vpush	{d8}
   2ae1e:	eeb0 8a40 	vmov.f32	s16, s0
   2ae22:	f000 faf1 	bl	2b408 <__ieee754_logf>
   2ae26:	4b14      	ldr	r3, [pc, #80]	; (2ae78 <logf+0x60>)
   2ae28:	f993 3000 	ldrsb.w	r3, [r3]
   2ae2c:	3301      	adds	r3, #1
   2ae2e:	d014      	beq.n	2ae5a <logf+0x42>
   2ae30:	eeb4 8a48 	vcmp.f32	s16, s16
   2ae34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ae38:	d60f      	bvs.n	2ae5a <logf+0x42>
   2ae3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ae42:	dc0a      	bgt.n	2ae5a <logf+0x42>
   2ae44:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2ae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ae4c:	d108      	bne.n	2ae60 <logf+0x48>
   2ae4e:	f005 f8e6 	bl	3001e <__errno>
   2ae52:	2322      	movs	r3, #34	; 0x22
   2ae54:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2ae7c <logf+0x64>
   2ae58:	6003      	str	r3, [r0, #0]
   2ae5a:	ecbd 8b02 	vpop	{d8}
   2ae5e:	bd08      	pop	{r3, pc}
   2ae60:	f005 f8dd 	bl	3001e <__errno>
   2ae64:	2321      	movs	r3, #33	; 0x21
   2ae66:	ecbd 8b02 	vpop	{d8}
   2ae6a:	6003      	str	r3, [r0, #0]
   2ae6c:	4804      	ldr	r0, [pc, #16]	; (2ae80 <logf+0x68>)
   2ae6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ae72:	f001 bd1d 	b.w	2c8b0 <nanf>
   2ae76:	bf00      	nop
   2ae78:	2002041a 	.word	0x2002041a
   2ae7c:	ff800000 	.word	0xff800000
   2ae80:	00034e3c 	.word	0x00034e3c

0002ae84 <log10f>:
   2ae84:	b508      	push	{r3, lr}
   2ae86:	ed2d 8b02 	vpush	{d8}
   2ae8a:	eeb0 8a40 	vmov.f32	s16, s0
   2ae8e:	f000 fbb7 	bl	2b600 <__ieee754_log10f>
   2ae92:	4b14      	ldr	r3, [pc, #80]	; (2aee4 <log10f+0x60>)
   2ae94:	f993 3000 	ldrsb.w	r3, [r3]
   2ae98:	3301      	adds	r3, #1
   2ae9a:	d014      	beq.n	2aec6 <log10f+0x42>
   2ae9c:	eeb4 8a48 	vcmp.f32	s16, s16
   2aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2aea4:	d60f      	bvs.n	2aec6 <log10f+0x42>
   2aea6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2aeae:	d80a      	bhi.n	2aec6 <log10f+0x42>
   2aeb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2aeb8:	d108      	bne.n	2aecc <log10f+0x48>
   2aeba:	f005 f8b0 	bl	3001e <__errno>
   2aebe:	2322      	movs	r3, #34	; 0x22
   2aec0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2aee8 <log10f+0x64>
   2aec4:	6003      	str	r3, [r0, #0]
   2aec6:	ecbd 8b02 	vpop	{d8}
   2aeca:	bd08      	pop	{r3, pc}
   2aecc:	f005 f8a7 	bl	3001e <__errno>
   2aed0:	2321      	movs	r3, #33	; 0x21
   2aed2:	ecbd 8b02 	vpop	{d8}
   2aed6:	6003      	str	r3, [r0, #0]
   2aed8:	4804      	ldr	r0, [pc, #16]	; (2aeec <log10f+0x68>)
   2aeda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2aede:	f001 bce7 	b.w	2c8b0 <nanf>
   2aee2:	bf00      	nop
   2aee4:	2002041a 	.word	0x2002041a
   2aee8:	ff800000 	.word	0xff800000
   2aeec:	00034e3c 	.word	0x00034e3c

0002aef0 <powf>:
   2aef0:	b508      	push	{r3, lr}
   2aef2:	ed2d 8b04 	vpush	{d8-d9}
   2aef6:	eef0 8a40 	vmov.f32	s17, s0
   2aefa:	eeb0 8a60 	vmov.f32	s16, s1
   2aefe:	f000 fbdf 	bl	2b6c0 <__ieee754_powf>
   2af02:	4b47      	ldr	r3, [pc, #284]	; (2b020 <powf+0x130>)
   2af04:	eeb0 9a40 	vmov.f32	s18, s0
   2af08:	f993 3000 	ldrsb.w	r3, [r3]
   2af0c:	3301      	adds	r3, #1
   2af0e:	d01f      	beq.n	2af50 <powf+0x60>
   2af10:	eeb4 8a48 	vcmp.f32	s16, s16
   2af14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af18:	d61a      	bvs.n	2af50 <powf+0x60>
   2af1a:	eef4 8a68 	vcmp.f32	s17, s17
   2af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af22:	d659      	bvs.n	2afd8 <powf+0xe8>
   2af24:	eddf 9a3f 	vldr	s19, [pc, #252]	; 2b024 <powf+0x134>
   2af28:	eef4 8a69 	vcmp.f32	s17, s19
   2af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af30:	d113      	bne.n	2af5a <powf+0x6a>
   2af32:	eeb4 8a69 	vcmp.f32	s16, s19
   2af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af3a:	d029      	beq.n	2af90 <powf+0xa0>
   2af3c:	eeb0 0a48 	vmov.f32	s0, s16
   2af40:	f001 fcac 	bl	2c89c <finitef>
   2af44:	b120      	cbz	r0, 2af50 <powf+0x60>
   2af46:	eeb4 8ae9 	vcmpe.f32	s16, s19
   2af4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af4e:	d44c      	bmi.n	2afea <powf+0xfa>
   2af50:	eeb0 0a49 	vmov.f32	s0, s18
   2af54:	ecbd 8b04 	vpop	{d8-d9}
   2af58:	bd08      	pop	{r3, pc}
   2af5a:	f001 fc9f 	bl	2c89c <finitef>
   2af5e:	b1f0      	cbz	r0, 2af9e <powf+0xae>
   2af60:	eeb5 9a40 	vcmp.f32	s18, #0.0
   2af64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2af68:	d1f2      	bne.n	2af50 <powf+0x60>
   2af6a:	eeb0 0a68 	vmov.f32	s0, s17
   2af6e:	f001 fc95 	bl	2c89c <finitef>
   2af72:	2800      	cmp	r0, #0
   2af74:	d0ec      	beq.n	2af50 <powf+0x60>
   2af76:	eeb0 0a48 	vmov.f32	s0, s16
   2af7a:	f001 fc8f 	bl	2c89c <finitef>
   2af7e:	2800      	cmp	r0, #0
   2af80:	d0e6      	beq.n	2af50 <powf+0x60>
   2af82:	f005 f84c 	bl	3001e <__errno>
   2af86:	2322      	movs	r3, #34	; 0x22
   2af88:	ed9f 9a26 	vldr	s18, [pc, #152]	; 2b024 <powf+0x134>
   2af8c:	6003      	str	r3, [r0, #0]
   2af8e:	e7df      	b.n	2af50 <powf+0x60>
   2af90:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   2af94:	eeb0 0a49 	vmov.f32	s0, s18
   2af98:	ecbd 8b04 	vpop	{d8-d9}
   2af9c:	bd08      	pop	{r3, pc}
   2af9e:	eeb0 0a68 	vmov.f32	s0, s17
   2afa2:	f001 fc7b 	bl	2c89c <finitef>
   2afa6:	2800      	cmp	r0, #0
   2afa8:	d0da      	beq.n	2af60 <powf+0x70>
   2afaa:	eeb0 0a48 	vmov.f32	s0, s16
   2afae:	f001 fc75 	bl	2c89c <finitef>
   2afb2:	2800      	cmp	r0, #0
   2afb4:	d0d4      	beq.n	2af60 <powf+0x70>
   2afb6:	eeb4 9a49 	vcmp.f32	s18, s18
   2afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2afbe:	d627      	bvs.n	2b010 <powf+0x120>
   2afc0:	f005 f82d 	bl	3001e <__errno>
   2afc4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   2afc8:	2322      	movs	r3, #34	; 0x22
   2afca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2afce:	6003      	str	r3, [r0, #0]
   2afd0:	d412      	bmi.n	2aff8 <powf+0x108>
   2afd2:	ed9f 9a15 	vldr	s18, [pc, #84]	; 2b028 <powf+0x138>
   2afd6:	e7bb      	b.n	2af50 <powf+0x60>
   2afd8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2afdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2afe4:	fe07 9a80 	vseleq.f32	s18, s15, s0
   2afe8:	e7b2      	b.n	2af50 <powf+0x60>
   2afea:	f005 f818 	bl	3001e <__errno>
   2afee:	2321      	movs	r3, #33	; 0x21
   2aff0:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 2b02c <powf+0x13c>
   2aff4:	6003      	str	r3, [r0, #0]
   2aff6:	e7ab      	b.n	2af50 <powf+0x60>
   2aff8:	eeb0 0a48 	vmov.f32	s0, s16
   2affc:	f001 fc5e 	bl	2c8bc <rintf>
   2b000:	eeb4 0a48 	vcmp.f32	s0, s16
   2b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b008:	d0e3      	beq.n	2afd2 <powf+0xe2>
   2b00a:	ed9f 9a08 	vldr	s18, [pc, #32]	; 2b02c <powf+0x13c>
   2b00e:	e79f      	b.n	2af50 <powf+0x60>
   2b010:	f005 f805 	bl	3001e <__errno>
   2b014:	2321      	movs	r3, #33	; 0x21
   2b016:	ee89 9aa9 	vdiv.f32	s18, s19, s19
   2b01a:	6003      	str	r3, [r0, #0]
   2b01c:	e798      	b.n	2af50 <powf+0x60>
   2b01e:	bf00      	nop
   2b020:	2002041a 	.word	0x2002041a
   2b024:	00000000 	.word	0x00000000
   2b028:	7f800000 	.word	0x7f800000
   2b02c:	ff800000 	.word	0xff800000

0002b030 <sqrtf>:
   2b030:	b508      	push	{r3, lr}
   2b032:	ed2d 8b02 	vpush	{d8}
   2b036:	eeb0 8a40 	vmov.f32	s16, s0
   2b03a:	f000 ff6f 	bl	2bf1c <__ieee754_sqrtf>
   2b03e:	4b0e      	ldr	r3, [pc, #56]	; (2b078 <sqrtf+0x48>)
   2b040:	f993 3000 	ldrsb.w	r3, [r3]
   2b044:	3301      	adds	r3, #1
   2b046:	d00b      	beq.n	2b060 <sqrtf+0x30>
   2b048:	eeb4 8a48 	vcmp.f32	s16, s16
   2b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b050:	d606      	bvs.n	2b060 <sqrtf+0x30>
   2b052:	eddf 8a0a 	vldr	s17, [pc, #40]	; 2b07c <sqrtf+0x4c>
   2b056:	eeb4 8ae8 	vcmpe.f32	s16, s17
   2b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b05e:	d402      	bmi.n	2b066 <sqrtf+0x36>
   2b060:	ecbd 8b02 	vpop	{d8}
   2b064:	bd08      	pop	{r3, pc}
   2b066:	f004 ffda 	bl	3001e <__errno>
   2b06a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   2b06e:	2321      	movs	r3, #33	; 0x21
   2b070:	6003      	str	r3, [r0, #0]
   2b072:	ecbd 8b02 	vpop	{d8}
   2b076:	bd08      	pop	{r3, pc}
   2b078:	2002041a 	.word	0x2002041a
   2b07c:	00000000 	.word	0x00000000

0002b080 <__ieee754_sqrt>:
   2b080:	4a63      	ldr	r2, [pc, #396]	; (2b210 <__ieee754_sqrt+0x190>)
   2b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b086:	ec55 4b10 	vmov	r4, r5, d0
   2b08a:	43aa      	bics	r2, r5
   2b08c:	f000 8098 	beq.w	2b1c0 <__ieee754_sqrt+0x140>
   2b090:	2d00      	cmp	r5, #0
   2b092:	462b      	mov	r3, r5
   2b094:	ee10 0a10 	vmov	r0, s0
   2b098:	dd5a      	ble.n	2b150 <__ieee754_sqrt+0xd0>
   2b09a:	ea5f 5e25 	movs.w	lr, r5, asr #20
   2b09e:	f000 80ab 	beq.w	2b1f8 <__ieee754_sqrt+0x178>
   2b0a2:	f3c3 0113 	ubfx	r1, r3, #0, #20
   2b0a6:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
   2b0aa:	0fc3      	lsrs	r3, r0, #31
   2b0ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2b0b0:	f01e 0f01 	tst.w	lr, #1
   2b0b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   2b0b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   2b0bc:	d003      	beq.n	2b0c6 <__ieee754_sqrt+0x46>
   2b0be:	0fd1      	lsrs	r1, r2, #31
   2b0c0:	0082      	lsls	r2, r0, #2
   2b0c2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2b0c6:	f04f 0c00 	mov.w	ip, #0
   2b0ca:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   2b0ce:	2416      	movs	r4, #22
   2b0d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   2b0d4:	4665      	mov	r5, ip
   2b0d6:	1868      	adds	r0, r5, r1
   2b0d8:	4298      	cmp	r0, r3
   2b0da:	dc02      	bgt.n	2b0e2 <__ieee754_sqrt+0x62>
   2b0dc:	1a1b      	subs	r3, r3, r0
   2b0de:	1845      	adds	r5, r0, r1
   2b0e0:	448c      	add	ip, r1
   2b0e2:	005b      	lsls	r3, r3, #1
   2b0e4:	3c01      	subs	r4, #1
   2b0e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2b0ea:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   2b0ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2b0f2:	d1f0      	bne.n	2b0d6 <__ieee754_sqrt+0x56>
   2b0f4:	4627      	mov	r7, r4
   2b0f6:	2620      	movs	r6, #32
   2b0f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   2b0fc:	e014      	b.n	2b128 <__ieee754_sqrt+0xa8>
   2b0fe:	d10a      	bne.n	2b116 <__ieee754_sqrt+0x96>
   2b100:	4290      	cmp	r0, r2
   2b102:	d808      	bhi.n	2b116 <__ieee754_sqrt+0x96>
   2b104:	2800      	cmp	r0, #0
   2b106:	eb00 0401 	add.w	r4, r0, r1
   2b10a:	db1c      	blt.n	2b146 <__ieee754_sqrt+0xc6>
   2b10c:	46a8      	mov	r8, r5
   2b10e:	2300      	movs	r3, #0
   2b110:	1a12      	subs	r2, r2, r0
   2b112:	440f      	add	r7, r1
   2b114:	4645      	mov	r5, r8
   2b116:	0fd0      	lsrs	r0, r2, #31
   2b118:	3e01      	subs	r6, #1
   2b11a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2b11e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   2b122:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2b126:	d034      	beq.n	2b192 <__ieee754_sqrt+0x112>
   2b128:	42ab      	cmp	r3, r5
   2b12a:	eb01 0004 	add.w	r0, r1, r4
   2b12e:	dde6      	ble.n	2b0fe <__ieee754_sqrt+0x7e>
   2b130:	2800      	cmp	r0, #0
   2b132:	eb00 0401 	add.w	r4, r0, r1
   2b136:	db06      	blt.n	2b146 <__ieee754_sqrt+0xc6>
   2b138:	46a8      	mov	r8, r5
   2b13a:	1b5b      	subs	r3, r3, r5
   2b13c:	4290      	cmp	r0, r2
   2b13e:	bf88      	it	hi
   2b140:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   2b144:	e7e4      	b.n	2b110 <__ieee754_sqrt+0x90>
   2b146:	2c00      	cmp	r4, #0
   2b148:	dbf6      	blt.n	2b138 <__ieee754_sqrt+0xb8>
   2b14a:	f105 0801 	add.w	r8, r5, #1
   2b14e:	e7f4      	b.n	2b13a <__ieee754_sqrt+0xba>
   2b150:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2b154:	4322      	orrs	r2, r4
   2b156:	d02c      	beq.n	2b1b2 <__ieee754_sqrt+0x132>
   2b158:	2d00      	cmp	r5, #0
   2b15a:	d141      	bne.n	2b1e0 <__ieee754_sqrt+0x160>
   2b15c:	0ac4      	lsrs	r4, r0, #11
   2b15e:	3b15      	subs	r3, #21
   2b160:	0540      	lsls	r0, r0, #21
   2b162:	4622      	mov	r2, r4
   2b164:	2c00      	cmp	r4, #0
   2b166:	d0f9      	beq.n	2b15c <__ieee754_sqrt+0xdc>
   2b168:	02e5      	lsls	r5, r4, #11
   2b16a:	d44b      	bmi.n	2b204 <__ieee754_sqrt+0x184>
   2b16c:	2100      	movs	r1, #0
   2b16e:	e000      	b.n	2b172 <__ieee754_sqrt+0xf2>
   2b170:	4629      	mov	r1, r5
   2b172:	0052      	lsls	r2, r2, #1
   2b174:	1c4d      	adds	r5, r1, #1
   2b176:	02d4      	lsls	r4, r2, #11
   2b178:	d5fa      	bpl.n	2b170 <__ieee754_sqrt+0xf0>
   2b17a:	4614      	mov	r4, r2
   2b17c:	4602      	mov	r2, r0
   2b17e:	40a8      	lsls	r0, r5
   2b180:	f1c5 0520 	rsb	r5, r5, #32
   2b184:	fa22 f505 	lsr.w	r5, r2, r5
   2b188:	eba3 0e01 	sub.w	lr, r3, r1
   2b18c:	ea45 0304 	orr.w	r3, r5, r4
   2b190:	e787      	b.n	2b0a2 <__ieee754_sqrt+0x22>
   2b192:	4313      	orrs	r3, r2
   2b194:	d10f      	bne.n	2b1b6 <__ieee754_sqrt+0x136>
   2b196:	087e      	lsrs	r6, r7, #1
   2b198:	491e      	ldr	r1, [pc, #120]	; (2b214 <__ieee754_sqrt+0x194>)
   2b19a:	f01c 0f01 	tst.w	ip, #1
   2b19e:	eb01 016c 	add.w	r1, r1, ip, asr #1
   2b1a2:	bf18      	it	ne
   2b1a4:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   2b1a8:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   2b1ac:	4632      	mov	r2, r6
   2b1ae:	ec43 2b10 	vmov	d0, r2, r3
   2b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b1b6:	1c7b      	adds	r3, r7, #1
   2b1b8:	d021      	beq.n	2b1fe <__ieee754_sqrt+0x17e>
   2b1ba:	1c7e      	adds	r6, r7, #1
   2b1bc:	0876      	lsrs	r6, r6, #1
   2b1be:	e7eb      	b.n	2b198 <__ieee754_sqrt+0x118>
   2b1c0:	ee10 2a10 	vmov	r2, s0
   2b1c4:	462b      	mov	r3, r5
   2b1c6:	ee10 0a10 	vmov	r0, s0
   2b1ca:	4629      	mov	r1, r5
   2b1cc:	f7e1 ff6e 	bl	d0ac <__aeabi_dmul>
   2b1d0:	4622      	mov	r2, r4
   2b1d2:	462b      	mov	r3, r5
   2b1d4:	f7e1 fdb4 	bl	cd40 <__adddf3>
   2b1d8:	ec41 0b10 	vmov	d0, r0, r1
   2b1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b1e0:	ee10 2a10 	vmov	r2, s0
   2b1e4:	4629      	mov	r1, r5
   2b1e6:	f7e1 fda9 	bl	cd3c <__aeabi_dsub>
   2b1ea:	4602      	mov	r2, r0
   2b1ec:	460b      	mov	r3, r1
   2b1ee:	f7e2 f887 	bl	d300 <__aeabi_ddiv>
   2b1f2:	ec41 0b10 	vmov	d0, r0, r1
   2b1f6:	e7dc      	b.n	2b1b2 <__ieee754_sqrt+0x132>
   2b1f8:	462a      	mov	r2, r5
   2b1fa:	4673      	mov	r3, lr
   2b1fc:	e7b6      	b.n	2b16c <__ieee754_sqrt+0xec>
   2b1fe:	f10c 0c01 	add.w	ip, ip, #1
   2b202:	e7c9      	b.n	2b198 <__ieee754_sqrt+0x118>
   2b204:	4602      	mov	r2, r0
   2b206:	2520      	movs	r5, #32
   2b208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b20c:	e7ba      	b.n	2b184 <__ieee754_sqrt+0x104>
   2b20e:	bf00      	nop
   2b210:	7ff00000 	.word	0x7ff00000
   2b214:	3fe00000 	.word	0x3fe00000

0002b218 <__ieee754_expf>:
   2b218:	ee10 3a10 	vmov	r3, s0
   2b21c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2b220:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2b224:	d85d      	bhi.n	2b2e2 <__ieee754_expf+0xca>
   2b226:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   2b22a:	f000 8099 	beq.w	2b360 <__ieee754_expf+0x148>
   2b22e:	4864      	ldr	r0, [pc, #400]	; (2b3c0 <__ieee754_expf+0x1a8>)
   2b230:	4283      	cmp	r3, r0
   2b232:	dc59      	bgt.n	2b2e8 <__ieee754_expf+0xd0>
   2b234:	b129      	cbz	r1, 2b242 <__ieee754_expf+0x2a>
   2b236:	4b63      	ldr	r3, [pc, #396]	; (2b3c4 <__ieee754_expf+0x1ac>)
   2b238:	429a      	cmp	r2, r3
   2b23a:	d902      	bls.n	2b242 <__ieee754_expf+0x2a>
   2b23c:	ed9f 0a62 	vldr	s0, [pc, #392]	; 2b3c8 <__ieee754_expf+0x1b0>
   2b240:	4770      	bx	lr
   2b242:	4b62      	ldr	r3, [pc, #392]	; (2b3cc <__ieee754_expf+0x1b4>)
   2b244:	429a      	cmp	r2, r3
   2b246:	b410      	push	{r4}
   2b248:	d953      	bls.n	2b2f2 <__ieee754_expf+0xda>
   2b24a:	4b61      	ldr	r3, [pc, #388]	; (2b3d0 <__ieee754_expf+0x1b8>)
   2b24c:	429a      	cmp	r2, r3
   2b24e:	f200 8099 	bhi.w	2b384 <__ieee754_expf+0x16c>
   2b252:	008c      	lsls	r4, r1, #2
   2b254:	485f      	ldr	r0, [pc, #380]	; (2b3d4 <__ieee754_expf+0x1bc>)
   2b256:	4a60      	ldr	r2, [pc, #384]	; (2b3d8 <__ieee754_expf+0x1c0>)
   2b258:	f1c1 0301 	rsb	r3, r1, #1
   2b25c:	4420      	add	r0, r4
   2b25e:	4422      	add	r2, r4
   2b260:	1a59      	subs	r1, r3, r1
   2b262:	edd0 4a00 	vldr	s9, [r0]
   2b266:	edd2 7a00 	vldr	s15, [r2]
   2b26a:	ee70 4a64 	vsub.f32	s9, s0, s9
   2b26e:	ee34 0ae7 	vsub.f32	s0, s9, s15
   2b272:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 2b3dc <__ieee754_expf+0x1c4>
   2b276:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 2b3e0 <__ieee754_expf+0x1c8>
   2b27a:	eddf 5a5a 	vldr	s11, [pc, #360]	; 2b3e4 <__ieee754_expf+0x1cc>
   2b27e:	ee20 7a00 	vmul.f32	s14, s0, s0
   2b282:	ed9f 6a59 	vldr	s12, [pc, #356]	; 2b3e8 <__ieee754_expf+0x1d0>
   2b286:	eddf 6a59 	vldr	s13, [pc, #356]	; 2b3ec <__ieee754_expf+0x1d4>
   2b28a:	eea7 5a04 	vfma.f32	s10, s14, s8
   2b28e:	eee5 5a07 	vfma.f32	s11, s10, s14
   2b292:	eea5 6a87 	vfma.f32	s12, s11, s14
   2b296:	eee6 6a07 	vfma.f32	s13, s12, s14
   2b29a:	eeb0 6a40 	vmov.f32	s12, s0
   2b29e:	eea6 6ac7 	vfms.f32	s12, s13, s14
   2b2a2:	eeb0 7a46 	vmov.f32	s14, s12
   2b2a6:	ee20 6a06 	vmul.f32	s12, s0, s12
   2b2aa:	2900      	cmp	r1, #0
   2b2ac:	d04b      	beq.n	2b346 <__ieee754_expf+0x12e>
   2b2ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   2b2b2:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
   2b2b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2b2ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
   2b2be:	eec6 6a07 	vdiv.f32	s13, s12, s14
   2b2c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2b2c6:	ee77 7ae4 	vsub.f32	s15, s15, s9
   2b2ca:	ee30 0a67 	vsub.f32	s0, s0, s15
   2b2ce:	db4d      	blt.n	2b36c <__ieee754_expf+0x154>
   2b2d0:	ee10 3a10 	vmov	r3, s0
   2b2d4:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2b2d8:	ee00 3a10 	vmov	s0, r3
   2b2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b2e0:	4770      	bx	lr
   2b2e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   2b2e6:	4770      	bx	lr
   2b2e8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 2b3f0 <__ieee754_expf+0x1d8>
   2b2ec:	ee20 0a00 	vmul.f32	s0, s0, s0
   2b2f0:	4770      	bx	lr
   2b2f2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   2b2f6:	d20a      	bcs.n	2b30e <__ieee754_expf+0xf6>
   2b2f8:	eddf 7a3d 	vldr	s15, [pc, #244]	; 2b3f0 <__ieee754_expf+0x1d8>
   2b2fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2b300:	ee70 7a27 	vadd.f32	s15, s0, s15
   2b304:	eef4 7ac7 	vcmpe.f32	s15, s14
   2b308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b30c:	dc54      	bgt.n	2b3b8 <__ieee754_expf+0x1a0>
   2b30e:	ee60 7a00 	vmul.f32	s15, s0, s0
   2b312:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2b3dc <__ieee754_expf+0x1c4>
   2b316:	eddf 5a32 	vldr	s11, [pc, #200]	; 2b3e0 <__ieee754_expf+0x1c8>
   2b31a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 2b3e4 <__ieee754_expf+0x1cc>
   2b31e:	eee7 5a87 	vfma.f32	s11, s15, s14
   2b322:	eddf 6a31 	vldr	s13, [pc, #196]	; 2b3e8 <__ieee754_expf+0x1d0>
   2b326:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2b3ec <__ieee754_expf+0x1d4>
   2b32a:	eea7 6aa5 	vfma.f32	s12, s15, s11
   2b32e:	eee7 6a86 	vfma.f32	s13, s15, s12
   2b332:	eea7 7aa6 	vfma.f32	s14, s15, s13
   2b336:	eef0 6a40 	vmov.f32	s13, s0
   2b33a:	eee7 6ac7 	vfms.f32	s13, s15, s14
   2b33e:	eeb0 7a66 	vmov.f32	s14, s13
   2b342:	ee20 6a26 	vmul.f32	s12, s0, s13
   2b346:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2b34a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2b34e:	ee37 7a67 	vsub.f32	s14, s14, s15
   2b352:	eec6 7a07 	vdiv.f32	s15, s12, s14
   2b356:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2b35a:	ee36 0ac0 	vsub.f32	s0, s13, s0
   2b35e:	e7bd      	b.n	2b2dc <__ieee754_expf+0xc4>
   2b360:	2900      	cmp	r1, #0
   2b362:	eddf 7a19 	vldr	s15, [pc, #100]	; 2b3c8 <__ieee754_expf+0x1b0>
   2b366:	fe00 0a27 	vseleq.f32	s0, s0, s15
   2b36a:	4770      	bx	lr
   2b36c:	ee10 3a10 	vmov	r3, s0
   2b370:	3164      	adds	r1, #100	; 0x64
   2b372:	eddf 7a20 	vldr	s15, [pc, #128]	; 2b3f4 <__ieee754_expf+0x1dc>
   2b376:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2b37a:	ee00 3a10 	vmov	s0, r3
   2b37e:	ee20 0a27 	vmul.f32	s0, s0, s15
   2b382:	e7ab      	b.n	2b2dc <__ieee754_expf+0xc4>
   2b384:	4b1c      	ldr	r3, [pc, #112]	; (2b3f8 <__ieee754_expf+0x1e0>)
   2b386:	eef0 4a40 	vmov.f32	s9, s0
   2b38a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2b3fc <__ieee754_expf+0x1e4>
   2b38e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b392:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 2b400 <__ieee754_expf+0x1e8>
   2b396:	eddf 6a1b 	vldr	s13, [pc, #108]	; 2b404 <__ieee754_expf+0x1ec>
   2b39a:	ed91 7a00 	vldr	s14, [r1]
   2b39e:	eea0 7a27 	vfma.f32	s14, s0, s15
   2b3a2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2b3a6:	ee17 1a90 	vmov	r1, s15
   2b3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b3ae:	eee7 4ac6 	vfms.f32	s9, s15, s12
   2b3b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2b3b6:	e75a      	b.n	2b26e <__ieee754_expf+0x56>
   2b3b8:	ee30 0a07 	vadd.f32	s0, s0, s14
   2b3bc:	e78e      	b.n	2b2dc <__ieee754_expf+0xc4>
   2b3be:	bf00      	nop
   2b3c0:	42b17217 	.word	0x42b17217
   2b3c4:	42cff1b5 	.word	0x42cff1b5
   2b3c8:	00000000 	.word	0x00000000
   2b3cc:	3eb17218 	.word	0x3eb17218
   2b3d0:	3f851591 	.word	0x3f851591
   2b3d4:	000353b0 	.word	0x000353b0
   2b3d8:	000353b8 	.word	0x000353b8
   2b3dc:	3331bb4c 	.word	0x3331bb4c
   2b3e0:	b5ddea0e 	.word	0xb5ddea0e
   2b3e4:	388ab355 	.word	0x388ab355
   2b3e8:	bb360b61 	.word	0xbb360b61
   2b3ec:	3e2aaaab 	.word	0x3e2aaaab
   2b3f0:	7149f2ca 	.word	0x7149f2ca
   2b3f4:	0d800000 	.word	0x0d800000
   2b3f8:	000353a8 	.word	0x000353a8
   2b3fc:	3fb8aa3b 	.word	0x3fb8aa3b
   2b400:	3f317180 	.word	0x3f317180
   2b404:	3717f7d1 	.word	0x3717f7d1

0002b408 <__ieee754_logf>:
   2b408:	ee10 3a10 	vmov	r3, s0
   2b40c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2b410:	d02e      	beq.n	2b470 <__ieee754_logf+0x68>
   2b412:	2b00      	cmp	r3, #0
   2b414:	db33      	blt.n	2b47e <__ieee754_logf+0x76>
   2b416:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2b41a:	da40      	bge.n	2b49e <__ieee754_logf+0x96>
   2b41c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2b420:	b430      	push	{r4, r5}
   2b422:	db33      	blt.n	2b48c <__ieee754_logf+0x84>
   2b424:	2500      	movs	r5, #0
   2b426:	f3c3 0416 	ubfx	r4, r3, #0, #23
   2b42a:	4a64      	ldr	r2, [pc, #400]	; (2b5bc <__ieee754_logf+0x1b4>)
   2b42c:	15db      	asrs	r3, r3, #23
   2b42e:	4964      	ldr	r1, [pc, #400]	; (2b5c0 <__ieee754_logf+0x1b8>)
   2b430:	4422      	add	r2, r4
   2b432:	f104 000f 	add.w	r0, r4, #15
   2b436:	3b7f      	subs	r3, #127	; 0x7f
   2b438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2b43c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
   2b440:	4001      	ands	r1, r0
   2b442:	442b      	add	r3, r5
   2b444:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
   2b448:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
   2b44c:	ea40 0204 	orr.w	r2, r0, r4
   2b450:	ee00 2a10 	vmov	s0, r2
   2b454:	ee30 7a47 	vsub.f32	s14, s0, s14
   2b458:	bb21      	cbnz	r1, 2b4a4 <__ieee754_logf+0x9c>
   2b45a:	eeb5 7a40 	vcmp.f32	s14, #0.0
   2b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b462:	d160      	bne.n	2b526 <__ieee754_logf+0x11e>
   2b464:	2b00      	cmp	r3, #0
   2b466:	f040 808d 	bne.w	2b584 <__ieee754_logf+0x17c>
   2b46a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 2b5c4 <__ieee754_logf+0x1bc>
   2b46e:	e069      	b.n	2b544 <__ieee754_logf+0x13c>
   2b470:	ed9f 7a55 	vldr	s14, [pc, #340]	; 2b5c8 <__ieee754_logf+0x1c0>
   2b474:	eddf 7a53 	vldr	s15, [pc, #332]	; 2b5c4 <__ieee754_logf+0x1bc>
   2b478:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2b47c:	4770      	bx	lr
   2b47e:	ee70 7a40 	vsub.f32	s15, s0, s0
   2b482:	ed9f 7a50 	vldr	s14, [pc, #320]	; 2b5c4 <__ieee754_logf+0x1bc>
   2b486:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2b48a:	4770      	bx	lr
   2b48c:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2b5cc <__ieee754_logf+0x1c4>
   2b490:	f06f 0518 	mvn.w	r5, #24
   2b494:	ee60 7a27 	vmul.f32	s15, s0, s15
   2b498:	ee17 3a90 	vmov	r3, s15
   2b49c:	e7c3      	b.n	2b426 <__ieee754_logf+0x1e>
   2b49e:	ee30 0a00 	vadd.f32	s0, s0, s0
   2b4a2:	4770      	bx	lr
   2b4a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2b4a8:	eddf 2a49 	vldr	s5, [pc, #292]	; 2b5d0 <__ieee754_logf+0x1c8>
   2b4ac:	eddf 4a49 	vldr	s9, [pc, #292]	; 2b5d4 <__ieee754_logf+0x1cc>
   2b4b0:	ee06 3a90 	vmov	s13, r3
   2b4b4:	eddf 5a48 	vldr	s11, [pc, #288]	; 2b5d8 <__ieee754_logf+0x1d0>
   2b4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
   2b4bc:	eddf 3a47 	vldr	s7, [pc, #284]	; 2b5dc <__ieee754_logf+0x1d4>
   2b4c0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 2b5e0 <__ieee754_logf+0x1d8>
   2b4c4:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
   2b4c8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 2b5e4 <__ieee754_logf+0x1dc>
   2b4cc:	ee87 4a27 	vdiv.f32	s8, s14, s15
   2b4d0:	eddf 6a45 	vldr	s13, [pc, #276]	; 2b5e8 <__ieee754_logf+0x1e0>
   2b4d4:	4945      	ldr	r1, [pc, #276]	; (2b5ec <__ieee754_logf+0x1e4>)
   2b4d6:	4a46      	ldr	r2, [pc, #280]	; (2b5f0 <__ieee754_logf+0x1e8>)
   2b4d8:	4421      	add	r1, r4
   2b4da:	1b12      	subs	r2, r2, r4
   2b4dc:	430a      	orrs	r2, r1
   2b4de:	2a00      	cmp	r2, #0
   2b4e0:	ee24 6a04 	vmul.f32	s12, s8, s8
   2b4e4:	ee66 7a06 	vmul.f32	s15, s12, s12
   2b4e8:	eee7 4aa2 	vfma.f32	s9, s15, s5
   2b4ec:	eea7 5aa3 	vfma.f32	s10, s15, s7
   2b4f0:	eee4 5aa7 	vfma.f32	s11, s9, s15
   2b4f4:	eee5 6a27 	vfma.f32	s13, s10, s15
   2b4f8:	eea5 0aa7 	vfma.f32	s0, s11, s15
   2b4fc:	ee20 0a06 	vmul.f32	s0, s0, s12
   2b500:	eea6 0aa7 	vfma.f32	s0, s13, s15
   2b504:	dd20      	ble.n	2b548 <__ieee754_logf+0x140>
   2b506:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2b50a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2b50e:	ee67 7a87 	vmul.f32	s15, s15, s14
   2b512:	ee30 0a27 	vadd.f32	s0, s0, s15
   2b516:	ee20 0a04 	vmul.f32	s0, s0, s8
   2b51a:	bb33      	cbnz	r3, 2b56a <__ieee754_logf+0x162>
   2b51c:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2b520:	ee37 0a40 	vsub.f32	s0, s14, s0
   2b524:	e00e      	b.n	2b544 <__ieee754_logf+0x13c>
   2b526:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   2b52a:	eddf 7a32 	vldr	s15, [pc, #200]	; 2b5f4 <__ieee754_logf+0x1ec>
   2b52e:	ee67 6a07 	vmul.f32	s13, s14, s14
   2b532:	eea7 0a67 	vfms.f32	s0, s14, s15
   2b536:	eef0 7a40 	vmov.f32	s15, s0
   2b53a:	ee27 0aa6 	vmul.f32	s0, s15, s13
   2b53e:	bb73      	cbnz	r3, 2b59e <__ieee754_logf+0x196>
   2b540:	ee37 0a40 	vsub.f32	s0, s14, s0
   2b544:	bc30      	pop	{r4, r5}
   2b546:	4770      	bx	lr
   2b548:	ee37 0a40 	vsub.f32	s0, s14, s0
   2b54c:	ee20 0a04 	vmul.f32	s0, s0, s8
   2b550:	2b00      	cmp	r3, #0
   2b552:	d0f5      	beq.n	2b540 <__ieee754_logf+0x138>
   2b554:	eddf 6a28 	vldr	s13, [pc, #160]	; 2b5f8 <__ieee754_logf+0x1f0>
   2b558:	eddf 7a28 	vldr	s15, [pc, #160]	; 2b5fc <__ieee754_logf+0x1f4>
   2b55c:	eea3 0a66 	vfms.f32	s0, s6, s13
   2b560:	ee30 0a47 	vsub.f32	s0, s0, s14
   2b564:	ee93 0a27 	vfnms.f32	s0, s6, s15
   2b568:	e7ec      	b.n	2b544 <__ieee754_logf+0x13c>
   2b56a:	ed9f 6a23 	vldr	s12, [pc, #140]	; 2b5f8 <__ieee754_logf+0x1f0>
   2b56e:	eddf 6a23 	vldr	s13, [pc, #140]	; 2b5fc <__ieee754_logf+0x1f4>
   2b572:	eea3 0a06 	vfma.f32	s0, s6, s12
   2b576:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2b57a:	ee30 0a47 	vsub.f32	s0, s0, s14
   2b57e:	ee93 0a26 	vfnms.f32	s0, s6, s13
   2b582:	e7df      	b.n	2b544 <__ieee754_logf+0x13c>
   2b584:	ee07 3a90 	vmov	s15, r3
   2b588:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 2b5f8 <__ieee754_logf+0x1f0>
   2b58c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 2b5fc <__ieee754_logf+0x1f4>
   2b590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b594:	ee27 0a80 	vmul.f32	s0, s15, s0
   2b598:	eea7 0a87 	vfma.f32	s0, s15, s14
   2b59c:	e7d2      	b.n	2b544 <__ieee754_logf+0x13c>
   2b59e:	ee07 3a90 	vmov	s15, r3
   2b5a2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2b5f8 <__ieee754_logf+0x1f0>
   2b5a6:	eddf 6a15 	vldr	s13, [pc, #84]	; 2b5fc <__ieee754_logf+0x1f4>
   2b5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b5ae:	eea7 0ac6 	vfms.f32	s0, s15, s12
   2b5b2:	ee30 0a47 	vsub.f32	s0, s0, s14
   2b5b6:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   2b5ba:	e7c3      	b.n	2b544 <__ieee754_logf+0x13c>
   2b5bc:	004afb20 	.word	0x004afb20
   2b5c0:	007ffff0 	.word	0x007ffff0
   2b5c4:	00000000 	.word	0x00000000
   2b5c8:	cc000000 	.word	0xcc000000
   2b5cc:	4c000000 	.word	0x4c000000
   2b5d0:	3e178897 	.word	0x3e178897
   2b5d4:	3e3a3325 	.word	0x3e3a3325
   2b5d8:	3e924925 	.word	0x3e924925
   2b5dc:	3e1cd04f 	.word	0x3e1cd04f
   2b5e0:	3e638e29 	.word	0x3e638e29
   2b5e4:	3f2aaaab 	.word	0x3f2aaaab
   2b5e8:	3ecccccd 	.word	0x3ecccccd
   2b5ec:	ffcf5c30 	.word	0xffcf5c30
   2b5f0:	0035c288 	.word	0x0035c288
   2b5f4:	3eaaaaab 	.word	0x3eaaaaab
   2b5f8:	3717f7d1 	.word	0x3717f7d1
   2b5fc:	3f317180 	.word	0x3f317180

0002b600 <__ieee754_log10f>:
   2b600:	b508      	push	{r3, lr}
   2b602:	ee10 3a10 	vmov	r3, s0
   2b606:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2b60a:	ed2d 8b02 	vpush	{d8}
   2b60e:	d02a      	beq.n	2b666 <__ieee754_log10f+0x66>
   2b610:	2b00      	cmp	r3, #0
   2b612:	db31      	blt.n	2b678 <__ieee754_log10f+0x78>
   2b614:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2b618:	da40      	bge.n	2b69c <__ieee754_log10f+0x9c>
   2b61a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2b61e:	db34      	blt.n	2b68a <__ieee754_log10f+0x8a>
   2b620:	2100      	movs	r1, #0
   2b622:	15da      	asrs	r2, r3, #23
   2b624:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2b628:	3a7f      	subs	r2, #127	; 0x7f
   2b62a:	440a      	add	r2, r1
   2b62c:	0fd1      	lsrs	r1, r2, #31
   2b62e:	f1c1 007f 	rsb	r0, r1, #127	; 0x7f
   2b632:	440a      	add	r2, r1
   2b634:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
   2b638:	ee07 2a90 	vmov	s15, r2
   2b63c:	ee00 3a10 	vmov	s0, r3
   2b640:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2b644:	f7ff fee0 	bl	2b408 <__ieee754_logf>
   2b648:	eddf 7a17 	vldr	s15, [pc, #92]	; 2b6a8 <__ieee754_log10f+0xa8>
   2b64c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2b6ac <__ieee754_log10f+0xac>
   2b650:	ee20 0a27 	vmul.f32	s0, s0, s15
   2b654:	eddf 7a16 	vldr	s15, [pc, #88]	; 2b6b0 <__ieee754_log10f+0xb0>
   2b658:	eea8 0a07 	vfma.f32	s0, s16, s14
   2b65c:	eea8 0a27 	vfma.f32	s0, s16, s15
   2b660:	ecbd 8b02 	vpop	{d8}
   2b664:	bd08      	pop	{r3, pc}
   2b666:	ed9f 7a13 	vldr	s14, [pc, #76]	; 2b6b4 <__ieee754_log10f+0xb4>
   2b66a:	eddf 7a13 	vldr	s15, [pc, #76]	; 2b6b8 <__ieee754_log10f+0xb8>
   2b66e:	ecbd 8b02 	vpop	{d8}
   2b672:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2b676:	bd08      	pop	{r3, pc}
   2b678:	ee70 7a40 	vsub.f32	s15, s0, s0
   2b67c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2b6b8 <__ieee754_log10f+0xb8>
   2b680:	ecbd 8b02 	vpop	{d8}
   2b684:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2b688:	bd08      	pop	{r3, pc}
   2b68a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2b6bc <__ieee754_log10f+0xbc>
   2b68e:	f06f 0118 	mvn.w	r1, #24
   2b692:	ee60 7a27 	vmul.f32	s15, s0, s15
   2b696:	ee17 3a90 	vmov	r3, s15
   2b69a:	e7c2      	b.n	2b622 <__ieee754_log10f+0x22>
   2b69c:	ecbd 8b02 	vpop	{d8}
   2b6a0:	ee30 0a00 	vadd.f32	s0, s0, s0
   2b6a4:	bd08      	pop	{r3, pc}
   2b6a6:	bf00      	nop
   2b6a8:	3ede5bd9 	.word	0x3ede5bd9
   2b6ac:	355427db 	.word	0x355427db
   2b6b0:	3e9a2080 	.word	0x3e9a2080
   2b6b4:	cc000000 	.word	0xcc000000
   2b6b8:	00000000 	.word	0x00000000
   2b6bc:	4c000000 	.word	0x4c000000

0002b6c0 <__ieee754_powf>:
   2b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b6c4:	ed2d 8b06 	vpush	{d8-d10}
   2b6c8:	b082      	sub	sp, #8
   2b6ca:	edcd 0a00 	vstr	s1, [sp]
   2b6ce:	9c00      	ldr	r4, [sp, #0]
   2b6d0:	ed8d 0a01 	vstr	s0, [sp, #4]
   2b6d4:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   2b6d8:	f000 8109 	beq.w	2b8ee <__ieee754_powf+0x22e>
   2b6dc:	9f01      	ldr	r7, [sp, #4]
   2b6de:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   2b6e2:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
   2b6e6:	f300 80ff 	bgt.w	2b8e8 <__ieee754_powf+0x228>
   2b6ea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2b6ee:	bfd4      	ite	le
   2b6f0:	2300      	movle	r3, #0
   2b6f2:	2301      	movgt	r3, #1
   2b6f4:	2b00      	cmp	r3, #0
   2b6f6:	f040 80f7 	bne.w	2b8e8 <__ieee754_powf+0x228>
   2b6fa:	2f00      	cmp	r7, #0
   2b6fc:	f2c0 8106 	blt.w	2b90c <__ieee754_powf+0x24c>
   2b700:	4698      	mov	r8, r3
   2b702:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2b706:	f000 8117 	beq.w	2b938 <__ieee754_powf+0x278>
   2b70a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2b70e:	f000 811c 	beq.w	2b94a <__ieee754_powf+0x28a>
   2b712:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   2b716:	f000 814f 	beq.w	2b9b8 <__ieee754_powf+0x2f8>
   2b71a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   2b71e:	d102      	bne.n	2b726 <__ieee754_powf+0x66>
   2b720:	2f00      	cmp	r7, #0
   2b722:	f280 812d 	bge.w	2b980 <__ieee754_powf+0x2c0>
   2b726:	f8dd 9004 	ldr.w	r9, [sp, #4]
   2b72a:	9d00      	ldr	r5, [sp, #0]
   2b72c:	ee00 9a10 	vmov	s0, r9
   2b730:	f7ff fa82 	bl	2ac38 <fabsf>
   2b734:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   2b738:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   2b73c:	f000 8129 	beq.w	2b992 <__ieee754_powf+0x2d2>
   2b740:	faba f38a 	clz	r3, sl
   2b744:	095b      	lsrs	r3, r3, #5
   2b746:	2b00      	cmp	r3, #0
   2b748:	f040 8123 	bne.w	2b992 <__ieee754_powf+0x2d2>
   2b74c:	0ffa      	lsrs	r2, r7, #31
   2b74e:	3a01      	subs	r2, #1
   2b750:	ea58 0102 	orrs.w	r1, r8, r2
   2b754:	f000 810d 	beq.w	2b972 <__ieee754_powf+0x2b2>
   2b758:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   2b75c:	f340 8158 	ble.w	2ba10 <__ieee754_powf+0x350>
   2b760:	4b9a      	ldr	r3, [pc, #616]	; (2b9cc <__ieee754_powf+0x30c>)
   2b762:	459a      	cmp	sl, r3
   2b764:	f340 825e 	ble.w	2bc24 <__ieee754_powf+0x564>
   2b768:	4b99      	ldr	r3, [pc, #612]	; (2b9d0 <__ieee754_powf+0x310>)
   2b76a:	459a      	cmp	sl, r3
   2b76c:	f300 8272 	bgt.w	2bc54 <__ieee754_powf+0x594>
   2b770:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   2b774:	eddf 6a97 	vldr	s13, [pc, #604]	; 2b9d4 <__ieee754_powf+0x314>
   2b778:	eeb5 4a00 	vmov.f32	s8, #80	; 0x3e800000  0.250
   2b77c:	eddf 7a96 	vldr	s15, [pc, #600]	; 2b9d8 <__ieee754_powf+0x318>
   2b780:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2b784:	ed9f 6a95 	vldr	s12, [pc, #596]	; 2b9dc <__ieee754_powf+0x31c>
   2b788:	ee30 0a65 	vsub.f32	s0, s0, s11
   2b78c:	eddf 5a94 	vldr	s11, [pc, #592]	; 2b9e0 <__ieee754_powf+0x320>
   2b790:	eeb1 5a40 	vneg.f32	s10, s0
   2b794:	ee60 4a00 	vmul.f32	s9, s0, s0
   2b798:	eee5 6a04 	vfma.f32	s13, s10, s8
   2b79c:	eea6 7ac0 	vfms.f32	s14, s13, s0
   2b7a0:	ee27 7a24 	vmul.f32	s14, s14, s9
   2b7a4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   2b7a8:	eee0 7a06 	vfma.f32	s15, s0, s12
   2b7ac:	eeb0 6a67 	vmov.f32	s12, s15
   2b7b0:	eea0 6a25 	vfma.f32	s12, s0, s11
   2b7b4:	ee16 3a10 	vmov	r3, s12
   2b7b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2b7bc:	f023 030f 	bic.w	r3, r3, #15
   2b7c0:	ee07 3a10 	vmov	s14, r3
   2b7c4:	ee06 3a10 	vmov	s12, r3
   2b7c8:	eea5 7a25 	vfma.f32	s14, s10, s11
   2b7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2b7d0:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   2b7d4:	ee07 5a10 	vmov	s14, r5
   2b7d8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b7dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2b7e0:	f024 040f 	bic.w	r4, r4, #15
   2b7e4:	ee67 7a87 	vmul.f32	s15, s15, s14
   2b7e8:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
   2b7ec:	4313      	orrs	r3, r2
   2b7ee:	ee06 4a90 	vmov	s13, r4
   2b7f2:	ee77 6a66 	vsub.f32	s13, s14, s13
   2b7f6:	ee07 4a10 	vmov	s14, r4
   2b7fa:	fe05 8a80 	vseleq.f32	s16, s11, s0
   2b7fe:	ee26 7a07 	vmul.f32	s14, s12, s14
   2b802:	eee6 7a86 	vfma.f32	s15, s13, s12
   2b806:	ee77 6a87 	vadd.f32	s13, s15, s14
   2b80a:	ee16 3a90 	vmov	r3, s13
   2b80e:	2b00      	cmp	r3, #0
   2b810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2b814:	f340 81b3 	ble.w	2bb7e <__ieee754_powf+0x4be>
   2b818:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
   2b81c:	f300 81fb 	bgt.w	2bc16 <__ieee754_powf+0x556>
   2b820:	f000 81ee 	beq.w	2bc00 <__ieee754_powf+0x540>
   2b824:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
   2b828:	f300 81b5 	bgt.w	2bb96 <__ieee754_powf+0x4d6>
   2b82c:	2200      	movs	r2, #0
   2b82e:	4610      	mov	r0, r2
   2b830:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2b834:	eddf 6a6b 	vldr	s13, [pc, #428]	; 2b9e4 <__ieee754_powf+0x324>
   2b838:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 2b9e8 <__ieee754_powf+0x328>
   2b83c:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
   2b840:	f023 030f 	bic.w	r3, r3, #15
   2b844:	eddf 3a69 	vldr	s7, [pc, #420]	; 2b9ec <__ieee754_powf+0x32c>
   2b848:	ed9f 4a69 	vldr	s8, [pc, #420]	; 2b9f0 <__ieee754_powf+0x330>
   2b84c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2b850:	ee06 3a10 	vmov	s12, r3
   2b854:	eddf 2a67 	vldr	s5, [pc, #412]	; 2b9f4 <__ieee754_powf+0x334>
   2b858:	eddf 4a67 	vldr	s9, [pc, #412]	; 2b9f8 <__ieee754_powf+0x338>
   2b85c:	ee36 7a47 	vsub.f32	s14, s12, s14
   2b860:	ed9f 5a66 	vldr	s10, [pc, #408]	; 2b9fc <__ieee754_powf+0x33c>
   2b864:	ee66 6a26 	vmul.f32	s13, s12, s13
   2b868:	eddf 5a65 	vldr	s11, [pc, #404]	; 2ba00 <__ieee754_powf+0x340>
   2b86c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2b870:	eee7 6a82 	vfma.f32	s13, s15, s4
   2b874:	eeb0 7a66 	vmov.f32	s14, s13
   2b878:	eef0 7a66 	vmov.f32	s15, s13
   2b87c:	eea6 7a23 	vfma.f32	s14, s12, s7
   2b880:	eeb0 2a47 	vmov.f32	s4, s14
   2b884:	ee67 6a07 	vmul.f32	s13, s14, s14
   2b888:	eea6 2a63 	vfms.f32	s4, s12, s7
   2b88c:	eeb0 6a44 	vmov.f32	s12, s8
   2b890:	eea6 6aa2 	vfma.f32	s12, s13, s5
   2b894:	ee77 7ac2 	vsub.f32	s15, s15, s4
   2b898:	eee7 7a27 	vfma.f32	s15, s14, s15
   2b89c:	eee6 4a26 	vfma.f32	s9, s12, s13
   2b8a0:	eea4 5aa6 	vfma.f32	s10, s9, s13
   2b8a4:	eee5 5a26 	vfma.f32	s11, s10, s13
   2b8a8:	eeb0 6a65 	vmov.f32	s12, s11
   2b8ac:	eef0 5a47 	vmov.f32	s11, s14
   2b8b0:	eee6 5a66 	vfms.f32	s11, s12, s13
   2b8b4:	eef0 6a65 	vmov.f32	s13, s11
   2b8b8:	ee67 5a25 	vmul.f32	s11, s14, s11
   2b8bc:	ee36 6ac3 	vsub.f32	s12, s13, s6
   2b8c0:	eec5 6a86 	vdiv.f32	s13, s11, s12
   2b8c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
   2b8c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
   2b8cc:	ee30 0a47 	vsub.f32	s0, s0, s14
   2b8d0:	ee10 3a10 	vmov	r3, s0
   2b8d4:	4413      	add	r3, r2
   2b8d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2b8da:	f2c0 81be 	blt.w	2bc5a <__ieee754_powf+0x59a>
   2b8de:	ee00 3a10 	vmov	s0, r3
   2b8e2:	ee20 0a08 	vmul.f32	s0, s0, s16
   2b8e6:	e004      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b8e8:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   2b8ec:	d106      	bne.n	2b8fc <__ieee754_powf+0x23c>
   2b8ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2b8f2:	b002      	add	sp, #8
   2b8f4:	ecbd 8b06 	vpop	{d8-d10}
   2b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b8fc:	4841      	ldr	r0, [pc, #260]	; (2ba04 <__ieee754_powf+0x344>)
   2b8fe:	b002      	add	sp, #8
   2b900:	ecbd 8b06 	vpop	{d8-d10}
   2b904:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b908:	f000 bfd2 	b.w	2c8b0 <nanf>
   2b90c:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   2b910:	da20      	bge.n	2b954 <__ieee754_powf+0x294>
   2b912:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2b916:	db0d      	blt.n	2b934 <__ieee754_powf+0x274>
   2b918:	15f2      	asrs	r2, r6, #23
   2b91a:	f1c2 0296 	rsb	r2, r2, #150	; 0x96
   2b91e:	fa46 f102 	asr.w	r1, r6, r2
   2b922:	fa01 f202 	lsl.w	r2, r1, r2
   2b926:	42b2      	cmp	r2, r6
   2b928:	d104      	bne.n	2b934 <__ieee754_powf+0x274>
   2b92a:	f001 0301 	and.w	r3, r1, #1
   2b92e:	f1c3 0802 	rsb	r8, r3, #2
   2b932:	e6ea      	b.n	2b70a <__ieee754_powf+0x4a>
   2b934:	4698      	mov	r8, r3
   2b936:	e6e8      	b.n	2b70a <__ieee754_powf+0x4a>
   2b938:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   2b93c:	d0d7      	beq.n	2b8ee <__ieee754_powf+0x22e>
   2b93e:	dd0c      	ble.n	2b95a <__ieee754_powf+0x29a>
   2b940:	2c00      	cmp	r4, #0
   2b942:	db0c      	blt.n	2b95e <__ieee754_powf+0x29e>
   2b944:	ed9d 0a00 	vldr	s0, [sp]
   2b948:	e7d3      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b94a:	2c00      	cmp	r4, #0
   2b94c:	db0a      	blt.n	2b964 <__ieee754_powf+0x2a4>
   2b94e:	ed9d 0a01 	vldr	s0, [sp, #4]
   2b952:	e7ce      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b954:	f04f 0802 	mov.w	r8, #2
   2b958:	e6d3      	b.n	2b702 <__ieee754_powf+0x42>
   2b95a:	2c00      	cmp	r4, #0
   2b95c:	db31      	blt.n	2b9c2 <__ieee754_powf+0x302>
   2b95e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 2ba08 <__ieee754_powf+0x348>
   2b962:	e7c6      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b964:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2b968:	ed9d 7a01 	vldr	s14, [sp, #4]
   2b96c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2b970:	e7bf      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b972:	ee07 9a90 	vmov	s15, r9
   2b976:	ee77 7ae7 	vsub.f32	s15, s15, s15
   2b97a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   2b97e:	e7b8      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b980:	ed9d 0a01 	vldr	s0, [sp, #4]
   2b984:	b002      	add	sp, #8
   2b986:	ecbd 8b06 	vpop	{d8-d10}
   2b98a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b98e:	f000 bac5 	b.w	2bf1c <__ieee754_sqrtf>
   2b992:	2c00      	cmp	r4, #0
   2b994:	da03      	bge.n	2b99e <__ieee754_powf+0x2de>
   2b996:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2b99a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   2b99e:	2f00      	cmp	r7, #0
   2b9a0:	daa7      	bge.n	2b8f2 <__ieee754_powf+0x232>
   2b9a2:	f1aa 5a7e 	sub.w	sl, sl, #1065353216	; 0x3f800000
   2b9a6:	ea5a 0308 	orrs.w	r3, sl, r8
   2b9aa:	f040 811a 	bne.w	2bbe2 <__ieee754_powf+0x522>
   2b9ae:	ee70 7a40 	vsub.f32	s15, s0, s0
   2b9b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   2b9b6:	e79c      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b9b8:	eddd 7a01 	vldr	s15, [sp, #4]
   2b9bc:	ee27 0aa7 	vmul.f32	s0, s15, s15
   2b9c0:	e797      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b9c2:	eddd 7a00 	vldr	s15, [sp]
   2b9c6:	eeb1 0a67 	vneg.f32	s0, s15
   2b9ca:	e792      	b.n	2b8f2 <__ieee754_powf+0x232>
   2b9cc:	3f7ffff7 	.word	0x3f7ffff7
   2b9d0:	3f800007 	.word	0x3f800007
   2b9d4:	3eaaaaab 	.word	0x3eaaaaab
   2b9d8:	3fb8aa3b 	.word	0x3fb8aa3b
   2b9dc:	36eca570 	.word	0x36eca570
   2b9e0:	3fb8aa00 	.word	0x3fb8aa00
   2b9e4:	35bfbe8c 	.word	0x35bfbe8c
   2b9e8:	3f317218 	.word	0x3f317218
   2b9ec:	3f317200 	.word	0x3f317200
   2b9f0:	b5ddea0e 	.word	0xb5ddea0e
   2b9f4:	3331bb4c 	.word	0x3331bb4c
   2b9f8:	388ab355 	.word	0x388ab355
   2b9fc:	bb360b61 	.word	0xbb360b61
   2ba00:	3e2aaaab 	.word	0x3e2aaaab
   2ba04:	00034e3c 	.word	0x00034e3c
   2ba08:	00000000 	.word	0x00000000
   2ba0c:	4b800000 	.word	0x4b800000
   2ba10:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
   2ba14:	d107      	bne.n	2ba26 <__ieee754_powf+0x366>
   2ba16:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 2ba0c <__ieee754_powf+0x34c>
   2ba1a:	f06f 0317 	mvn.w	r3, #23
   2ba1e:	ee60 7a27 	vmul.f32	s15, s0, s15
   2ba22:	ee17 aa90 	vmov	sl, s15
   2ba26:	ea4f 50ea 	mov.w	r0, sl, asr #23
   2ba2a:	4e8d      	ldr	r6, [pc, #564]	; (2bc60 <__ieee754_powf+0x5a0>)
   2ba2c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
   2ba30:	387f      	subs	r0, #127	; 0x7f
   2ba32:	45b2      	cmp	sl, r6
   2ba34:	f04a 517e 	orr.w	r1, sl, #1065353216	; 0x3f800000
   2ba38:	4403      	add	r3, r0
   2ba3a:	f340 80d9 	ble.w	2bbf0 <__ieee754_powf+0x530>
   2ba3e:	4889      	ldr	r0, [pc, #548]	; (2bc64 <__ieee754_powf+0x5a4>)
   2ba40:	4582      	cmp	sl, r0
   2ba42:	f340 80f7 	ble.w	2bc34 <__ieee754_powf+0x574>
   2ba46:	ed9f 3a88 	vldr	s6, [pc, #544]	; 2bc68 <__ieee754_powf+0x5a8>
   2ba4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2ba4e:	3301      	adds	r3, #1
   2ba50:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
   2ba54:	eeb0 2a43 	vmov.f32	s4, s6
   2ba58:	2600      	movs	r6, #0
   2ba5a:	ee07 1a90 	vmov	s15, r1
   2ba5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2ba62:	1048      	asrs	r0, r1, #1
   2ba64:	ed9f aa81 	vldr	s20, [pc, #516]	; 2bc6c <__ieee754_powf+0x5ac>
   2ba68:	ee77 6a87 	vadd.f32	s13, s15, s14
   2ba6c:	ed9f 9a80 	vldr	s18, [pc, #512]	; 2bc70 <__ieee754_powf+0x5b0>
   2ba70:	ee77 5ac7 	vsub.f32	s11, s15, s14
   2ba74:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
   2ba78:	497e      	ldr	r1, [pc, #504]	; (2bc74 <__ieee754_powf+0x5b4>)
   2ba7a:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
   2ba7e:	eec6 9a26 	vdiv.f32	s19, s12, s13
   2ba82:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   2ba86:	eddf 8a7c 	vldr	s17, [pc, #496]	; 2bc78 <__ieee754_powf+0x5b8>
   2ba8a:	4430      	add	r0, r6
   2ba8c:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 2bc7c <__ieee754_powf+0x5bc>
   2ba90:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 2bc80 <__ieee754_powf+0x5c0>
   2ba94:	ee06 0a10 	vmov	s12, r0
   2ba98:	eddf 0a7a 	vldr	s1, [pc, #488]	; 2bc84 <__ieee754_powf+0x5c4>
   2ba9c:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 2bc88 <__ieee754_powf+0x5c8>
   2baa0:	ee36 7a47 	vsub.f32	s14, s12, s14
   2baa4:	eddf 1a79 	vldr	s3, [pc, #484]	; 2bc8c <__ieee754_powf+0x5cc>
   2baa8:	eddf 3a79 	vldr	s7, [pc, #484]	; 2bc90 <__ieee754_powf+0x5d0>
   2baac:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2bab0:	ee07 3a10 	vmov	s14, r3
   2bab4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   2bab8:	ee65 2aa9 	vmul.f32	s5, s11, s19
   2babc:	ee22 5aa2 	vmul.f32	s10, s5, s5
   2bac0:	ee12 3a90 	vmov	r3, s5
   2bac4:	400b      	ands	r3, r1
   2bac6:	eea5 9a0a 	vfma.f32	s18, s10, s20
   2baca:	ee04 3a90 	vmov	s9, r3
   2bace:	eeb1 7a64 	vneg.f32	s14, s9
   2bad2:	eee9 8a05 	vfma.f32	s17, s18, s10
   2bad6:	eee7 5a06 	vfma.f32	s11, s14, s12
   2bada:	eea8 8a85 	vfma.f32	s16, s17, s10
   2bade:	eee7 5a27 	vfma.f32	s11, s14, s15
   2bae2:	ee72 7aa4 	vadd.f32	s15, s5, s9
   2bae6:	ee65 8a05 	vmul.f32	s17, s10, s10
   2baea:	eea8 0a05 	vfma.f32	s0, s16, s10
   2baee:	ee25 6aa9 	vmul.f32	s12, s11, s19
   2baf2:	eef0 5a44 	vmov.f32	s11, s8
   2baf6:	ee67 7a86 	vmul.f32	s15, s15, s12
   2bafa:	eee4 5aa4 	vfma.f32	s11, s9, s9
   2bafe:	eee0 0a05 	vfma.f32	s1, s0, s10
   2bb02:	eee8 7aa0 	vfma.f32	s15, s17, s1
   2bb06:	ee75 5aa7 	vadd.f32	s11, s11, s15
   2bb0a:	ee15 3a90 	vmov	r3, s11
   2bb0e:	400b      	ands	r3, r1
   2bb10:	ee05 3a90 	vmov	s11, r3
   2bb14:	ee35 5ac4 	vsub.f32	s10, s11, s8
   2bb18:	eea7 5a24 	vfma.f32	s10, s14, s9
   2bb1c:	ee77 7ac5 	vsub.f32	s15, s15, s10
   2bb20:	ee67 7aa2 	vmul.f32	s15, s15, s5
   2bb24:	eee6 7a25 	vfma.f32	s15, s12, s11
   2bb28:	eeb0 5a67 	vmov.f32	s10, s15
   2bb2c:	eea4 5aa5 	vfma.f32	s10, s9, s11
   2bb30:	ee15 3a10 	vmov	r3, s10
   2bb34:	400b      	ands	r3, r1
   2bb36:	ee06 3a10 	vmov	s12, r3
   2bb3a:	ee05 3a10 	vmov	s10, r3
   2bb3e:	eea7 6a25 	vfma.f32	s12, s14, s11
   2bb42:	ee37 7ac6 	vsub.f32	s14, s15, s12
   2bb46:	ee27 7a01 	vmul.f32	s14, s14, s2
   2bb4a:	eea5 7a21 	vfma.f32	s14, s10, s3
   2bb4e:	ee37 7a02 	vadd.f32	s14, s14, s4
   2bb52:	eeb0 6a47 	vmov.f32	s12, s14
   2bb56:	eea5 6a23 	vfma.f32	s12, s10, s7
   2bb5a:	ee36 6a03 	vadd.f32	s12, s12, s6
   2bb5e:	ee36 6a26 	vadd.f32	s12, s12, s13
   2bb62:	ee16 3a10 	vmov	r3, s12
   2bb66:	400b      	ands	r3, r1
   2bb68:	ee06 3a10 	vmov	s12, r3
   2bb6c:	ee76 7a66 	vsub.f32	s15, s12, s13
   2bb70:	ee77 7ac3 	vsub.f32	s15, s15, s6
   2bb74:	eee5 7a63 	vfms.f32	s15, s10, s7
   2bb78:	ee77 7a67 	vsub.f32	s15, s14, s15
   2bb7c:	e628      	b.n	2b7d0 <__ieee754_powf+0x110>
   2bb7e:	4945      	ldr	r1, [pc, #276]	; (2bc94 <__ieee754_powf+0x5d4>)
   2bb80:	428a      	cmp	r2, r1
   2bb82:	dc60      	bgt.n	2bc46 <__ieee754_powf+0x586>
   2bb84:	f47f ae4e 	bne.w	2b824 <__ieee754_powf+0x164>
   2bb88:	ee76 6ac7 	vsub.f32	s13, s13, s14
   2bb8c:	eef4 6ae7 	vcmpe.f32	s13, s15
   2bb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bb94:	da57      	bge.n	2bc46 <__ieee754_powf+0x586>
   2bb96:	15d2      	asrs	r2, r2, #23
   2bb98:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2bb9c:	4c3e      	ldr	r4, [pc, #248]	; (2bc98 <__ieee754_powf+0x5d8>)
   2bb9e:	2b00      	cmp	r3, #0
   2bba0:	f1a2 027e 	sub.w	r2, r2, #126	; 0x7e
   2bba4:	fa41 f202 	asr.w	r2, r1, r2
   2bba8:	441a      	add	r2, r3
   2bbaa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   2bbae:	f3c2 0016 	ubfx	r0, r2, #0, #23
   2bbb2:	f1a1 017f 	sub.w	r1, r1, #127	; 0x7f
   2bbb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2bbba:	fa44 f401 	asr.w	r4, r4, r1
   2bbbe:	f1c1 0117 	rsb	r1, r1, #23
   2bbc2:	ea22 0204 	bic.w	r2, r2, r4
   2bbc6:	fa40 f001 	asr.w	r0, r0, r1
   2bbca:	ee06 2a90 	vmov	s13, r2
   2bbce:	bfb8      	it	lt
   2bbd0:	4240      	neglt	r0, r0
   2bbd2:	ee37 7a66 	vsub.f32	s14, s14, s13
   2bbd6:	05c2      	lsls	r2, r0, #23
   2bbd8:	ee77 6a87 	vadd.f32	s13, s15, s14
   2bbdc:	ee16 3a90 	vmov	r3, s13
   2bbe0:	e626      	b.n	2b830 <__ieee754_powf+0x170>
   2bbe2:	f1b8 0f01 	cmp.w	r8, #1
   2bbe6:	f47f ae84 	bne.w	2b8f2 <__ieee754_powf+0x232>
   2bbea:	eeb1 0a40 	vneg.f32	s0, s0
   2bbee:	e680      	b.n	2b8f2 <__ieee754_powf+0x232>
   2bbf0:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 2bc68 <__ieee754_powf+0x5a8>
   2bbf4:	2600      	movs	r6, #0
   2bbf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2bbfa:	eeb0 2a43 	vmov.f32	s4, s6
   2bbfe:	e72c      	b.n	2ba5a <__ieee754_powf+0x39a>
   2bc00:	ed9f 6a26 	vldr	s12, [pc, #152]	; 2bc9c <__ieee754_powf+0x5dc>
   2bc04:	ee76 6ac7 	vsub.f32	s13, s13, s14
   2bc08:	ee37 6a86 	vadd.f32	s12, s15, s12
   2bc0c:	eeb4 6ae6 	vcmpe.f32	s12, s13
   2bc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bc14:	ddbf      	ble.n	2bb96 <__ieee754_powf+0x4d6>
   2bc16:	eddf 7a22 	vldr	s15, [pc, #136]	; 2bca0 <__ieee754_powf+0x5e0>
   2bc1a:	ee28 0a27 	vmul.f32	s0, s16, s15
   2bc1e:	ee20 0a27 	vmul.f32	s0, s0, s15
   2bc22:	e666      	b.n	2b8f2 <__ieee754_powf+0x232>
   2bc24:	2c00      	cmp	r4, #0
   2bc26:	f6bf ae9a 	bge.w	2b95e <__ieee754_powf+0x29e>
   2bc2a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 2bca0 <__ieee754_powf+0x5e0>
   2bc2e:	ee20 0a00 	vmul.f32	s0, s0, s0
   2bc32:	e65e      	b.n	2b8f2 <__ieee754_powf+0x232>
   2bc34:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   2bc38:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 2bca4 <__ieee754_powf+0x5e4>
   2bc3c:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 2bca8 <__ieee754_powf+0x5e8>
   2bc40:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   2bc44:	e709      	b.n	2ba5a <__ieee754_powf+0x39a>
   2bc46:	eddf 7a19 	vldr	s15, [pc, #100]	; 2bcac <__ieee754_powf+0x5ec>
   2bc4a:	ee28 0a27 	vmul.f32	s0, s16, s15
   2bc4e:	ee20 0a27 	vmul.f32	s0, s0, s15
   2bc52:	e64e      	b.n	2b8f2 <__ieee754_powf+0x232>
   2bc54:	2c00      	cmp	r4, #0
   2bc56:	dce8      	bgt.n	2bc2a <__ieee754_powf+0x56a>
   2bc58:	e681      	b.n	2b95e <__ieee754_powf+0x29e>
   2bc5a:	f000 fe33 	bl	2c8c4 <scalbnf>
   2bc5e:	e640      	b.n	2b8e2 <__ieee754_powf+0x222>
   2bc60:	001cc471 	.word	0x001cc471
   2bc64:	005db3d6 	.word	0x005db3d6
   2bc68:	00000000 	.word	0x00000000
   2bc6c:	3e53f142 	.word	0x3e53f142
   2bc70:	3e6c3255 	.word	0x3e6c3255
   2bc74:	fffff000 	.word	0xfffff000
   2bc78:	3e8ba305 	.word	0x3e8ba305
   2bc7c:	3eaaaaab 	.word	0x3eaaaaab
   2bc80:	3edb6db7 	.word	0x3edb6db7
   2bc84:	3f19999a 	.word	0x3f19999a
   2bc88:	3f76384f 	.word	0x3f76384f
   2bc8c:	369dc3a0 	.word	0x369dc3a0
   2bc90:	3f763800 	.word	0x3f763800
   2bc94:	43160000 	.word	0x43160000
   2bc98:	007fffff 	.word	0x007fffff
   2bc9c:	3338aa3c 	.word	0x3338aa3c
   2bca0:	7149f2ca 	.word	0x7149f2ca
   2bca4:	3f15c000 	.word	0x3f15c000
   2bca8:	35d1cfdc 	.word	0x35d1cfdc
   2bcac:	0da24260 	.word	0x0da24260

0002bcb0 <__ieee754_rem_pio2f>:
   2bcb0:	ee10 3a10 	vmov	r3, s0
   2bcb4:	4a8b      	ldr	r2, [pc, #556]	; (2bee4 <__ieee754_rem_pio2f+0x234>)
   2bcb6:	b570      	push	{r4, r5, r6, lr}
   2bcb8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bcbc:	b086      	sub	sp, #24
   2bcbe:	4605      	mov	r5, r0
   2bcc0:	4294      	cmp	r4, r2
   2bcc2:	dd68      	ble.n	2bd96 <__ieee754_rem_pio2f+0xe6>
   2bcc4:	4a88      	ldr	r2, [pc, #544]	; (2bee8 <__ieee754_rem_pio2f+0x238>)
   2bcc6:	ee10 6a10 	vmov	r6, s0
   2bcca:	4294      	cmp	r4, r2
   2bccc:	dc1a      	bgt.n	2bd04 <__ieee754_rem_pio2f+0x54>
   2bcce:	2b00      	cmp	r3, #0
   2bcd0:	f024 040f 	bic.w	r4, r4, #15
   2bcd4:	eddf 7a85 	vldr	s15, [pc, #532]	; 2beec <__ieee754_rem_pio2f+0x23c>
   2bcd8:	4a85      	ldr	r2, [pc, #532]	; (2bef0 <__ieee754_rem_pio2f+0x240>)
   2bcda:	f340 80e7 	ble.w	2beac <__ieee754_rem_pio2f+0x1fc>
   2bcde:	4294      	cmp	r4, r2
   2bce0:	ee70 7a67 	vsub.f32	s15, s0, s15
   2bce4:	d066      	beq.n	2bdb4 <__ieee754_rem_pio2f+0x104>
   2bce6:	ed9f 7a83 	vldr	s14, [pc, #524]	; 2bef4 <__ieee754_rem_pio2f+0x244>
   2bcea:	2001      	movs	r0, #1
   2bcec:	ee77 6ac7 	vsub.f32	s13, s15, s14
   2bcf0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2bcf4:	edc5 6a00 	vstr	s13, [r5]
   2bcf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2bcfc:	edc5 7a01 	vstr	s15, [r5, #4]
   2bd00:	b006      	add	sp, #24
   2bd02:	bd70      	pop	{r4, r5, r6, pc}
   2bd04:	4a7c      	ldr	r2, [pc, #496]	; (2bef8 <__ieee754_rem_pio2f+0x248>)
   2bd06:	4294      	cmp	r4, r2
   2bd08:	dd5c      	ble.n	2bdc4 <__ieee754_rem_pio2f+0x114>
   2bd0a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   2bd0e:	da49      	bge.n	2bda4 <__ieee754_rem_pio2f+0xf4>
   2bd10:	15e2      	asrs	r2, r4, #23
   2bd12:	eddf 6a7a 	vldr	s13, [pc, #488]	; 2befc <__ieee754_rem_pio2f+0x24c>
   2bd16:	3a86      	subs	r2, #134	; 0x86
   2bd18:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   2bd1c:	ee07 3a90 	vmov	s15, r3
   2bd20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2bd24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2bd28:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2bd2c:	ed8d 7a03 	vstr	s14, [sp, #12]
   2bd30:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2bd34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2bd38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2bd3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2bd40:	ed8d 7a04 	vstr	s14, [sp, #16]
   2bd44:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2bd48:	eef5 7a40 	vcmp.f32	s15, #0.0
   2bd4c:	edcd 7a05 	vstr	s15, [sp, #20]
   2bd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bd54:	f040 8097 	bne.w	2be86 <__ieee754_rem_pio2f+0x1d6>
   2bd58:	eeb5 7a40 	vcmp.f32	s14, #0.0
   2bd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bd60:	bf14      	ite	ne
   2bd62:	2302      	movne	r3, #2
   2bd64:	2301      	moveq	r3, #1
   2bd66:	4966      	ldr	r1, [pc, #408]	; (2bf00 <__ieee754_rem_pio2f+0x250>)
   2bd68:	2002      	movs	r0, #2
   2bd6a:	9101      	str	r1, [sp, #4]
   2bd6c:	4629      	mov	r1, r5
   2bd6e:	9000      	str	r0, [sp, #0]
   2bd70:	a803      	add	r0, sp, #12
   2bd72:	f000 f959 	bl	2c028 <__kernel_rem_pio2f>
   2bd76:	2e00      	cmp	r6, #0
   2bd78:	dac2      	bge.n	2bd00 <__ieee754_rem_pio2f+0x50>
   2bd7a:	ed95 7a00 	vldr	s14, [r5]
   2bd7e:	4240      	negs	r0, r0
   2bd80:	edd5 7a01 	vldr	s15, [r5, #4]
   2bd84:	eeb1 7a47 	vneg.f32	s14, s14
   2bd88:	eef1 7a67 	vneg.f32	s15, s15
   2bd8c:	ed85 7a00 	vstr	s14, [r5]
   2bd90:	edc5 7a01 	vstr	s15, [r5, #4]
   2bd94:	e7b4      	b.n	2bd00 <__ieee754_rem_pio2f+0x50>
   2bd96:	2200      	movs	r2, #0
   2bd98:	2000      	movs	r0, #0
   2bd9a:	ed85 0a00 	vstr	s0, [r5]
   2bd9e:	606a      	str	r2, [r5, #4]
   2bda0:	b006      	add	sp, #24
   2bda2:	bd70      	pop	{r4, r5, r6, pc}
   2bda4:	ee70 7a40 	vsub.f32	s15, s0, s0
   2bda8:	2000      	movs	r0, #0
   2bdaa:	edc5 7a01 	vstr	s15, [r5, #4]
   2bdae:	edc5 7a00 	vstr	s15, [r5]
   2bdb2:	e7a5      	b.n	2bd00 <__ieee754_rem_pio2f+0x50>
   2bdb4:	eddf 6a53 	vldr	s13, [pc, #332]	; 2bf04 <__ieee754_rem_pio2f+0x254>
   2bdb8:	2001      	movs	r0, #1
   2bdba:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2bf08 <__ieee754_rem_pio2f+0x258>
   2bdbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2bdc2:	e793      	b.n	2bcec <__ieee754_rem_pio2f+0x3c>
   2bdc4:	f7fe ff38 	bl	2ac38 <fabsf>
   2bdc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2bdcc:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2bf0c <__ieee754_rem_pio2f+0x25c>
   2bdd0:	eddf 5a46 	vldr	s11, [pc, #280]	; 2beec <__ieee754_rem_pio2f+0x23c>
   2bdd4:	eea0 7a26 	vfma.f32	s14, s0, s13
   2bdd8:	eddf 7a46 	vldr	s15, [pc, #280]	; 2bef4 <__ieee754_rem_pio2f+0x244>
   2bddc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2bde0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   2bde4:	ee17 0a10 	vmov	r0, s14
   2bde8:	281f      	cmp	r0, #31
   2bdea:	eeb1 6a66 	vneg.f32	s12, s13
   2bdee:	ee66 7aa7 	vmul.f32	s15, s13, s15
   2bdf2:	eea6 0a25 	vfma.f32	s0, s12, s11
   2bdf6:	dc1e      	bgt.n	2be36 <__ieee754_rem_pio2f+0x186>
   2bdf8:	4a45      	ldr	r2, [pc, #276]	; (2bf10 <__ieee754_rem_pio2f+0x260>)
   2bdfa:	1e41      	subs	r1, r0, #1
   2bdfc:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   2be00:	ee30 7a67 	vsub.f32	s14, s0, s15
   2be04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2be08:	4293      	cmp	r3, r2
   2be0a:	d016      	beq.n	2be3a <__ieee754_rem_pio2f+0x18a>
   2be0c:	ed85 7a00 	vstr	s14, [r5]
   2be10:	ee30 0a47 	vsub.f32	s0, s0, s14
   2be14:	2e00      	cmp	r6, #0
   2be16:	ee30 0a67 	vsub.f32	s0, s0, s15
   2be1a:	ed85 0a01 	vstr	s0, [r5, #4]
   2be1e:	f6bf af6f 	bge.w	2bd00 <__ieee754_rem_pio2f+0x50>
   2be22:	eeb1 7a47 	vneg.f32	s14, s14
   2be26:	4240      	negs	r0, r0
   2be28:	eeb1 0a40 	vneg.f32	s0, s0
   2be2c:	ed85 7a00 	vstr	s14, [r5]
   2be30:	ed85 0a01 	vstr	s0, [r5, #4]
   2be34:	e764      	b.n	2bd00 <__ieee754_rem_pio2f+0x50>
   2be36:	ee30 7a67 	vsub.f32	s14, s0, s15
   2be3a:	ee17 3a10 	vmov	r3, s14
   2be3e:	15e4      	asrs	r4, r4, #23
   2be40:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   2be44:	1ae3      	subs	r3, r4, r3
   2be46:	2b08      	cmp	r3, #8
   2be48:	dde0      	ble.n	2be0c <__ieee754_rem_pio2f+0x15c>
   2be4a:	eef0 5a40 	vmov.f32	s11, s0
   2be4e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 2bf04 <__ieee754_rem_pio2f+0x254>
   2be52:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 2bf08 <__ieee754_rem_pio2f+0x258>
   2be56:	eee6 5a27 	vfma.f32	s11, s12, s15
   2be5a:	ee30 0a65 	vsub.f32	s0, s0, s11
   2be5e:	eea6 0a27 	vfma.f32	s0, s12, s15
   2be62:	eef0 7a40 	vmov.f32	s15, s0
   2be66:	eed6 7a87 	vfnms.f32	s15, s13, s14
   2be6a:	ee35 7ae7 	vsub.f32	s14, s11, s15
   2be6e:	ee17 3a10 	vmov	r3, s14
   2be72:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   2be76:	1ae4      	subs	r4, r4, r3
   2be78:	2c19      	cmp	r4, #25
   2be7a:	dc06      	bgt.n	2be8a <__ieee754_rem_pio2f+0x1da>
   2be7c:	ed85 7a00 	vstr	s14, [r5]
   2be80:	eeb0 0a65 	vmov.f32	s0, s11
   2be84:	e7c4      	b.n	2be10 <__ieee754_rem_pio2f+0x160>
   2be86:	2303      	movs	r3, #3
   2be88:	e76d      	b.n	2bd66 <__ieee754_rem_pio2f+0xb6>
   2be8a:	eeb0 0a65 	vmov.f32	s0, s11
   2be8e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2bf14 <__ieee754_rem_pio2f+0x264>
   2be92:	ed9f 5a21 	vldr	s10, [pc, #132]	; 2bf18 <__ieee754_rem_pio2f+0x268>
   2be96:	eea6 0a07 	vfma.f32	s0, s12, s14
   2be9a:	ee75 7ac0 	vsub.f32	s15, s11, s0
   2be9e:	eee6 7a07 	vfma.f32	s15, s12, s14
   2bea2:	eed6 7a85 	vfnms.f32	s15, s13, s10
   2bea6:	ee30 7a67 	vsub.f32	s14, s0, s15
   2beaa:	e7af      	b.n	2be0c <__ieee754_rem_pio2f+0x15c>
   2beac:	4294      	cmp	r4, r2
   2beae:	ee70 7a27 	vadd.f32	s15, s0, s15
   2beb2:	d00e      	beq.n	2bed2 <__ieee754_rem_pio2f+0x222>
   2beb4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2bef4 <__ieee754_rem_pio2f+0x244>
   2beb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bebc:	ee77 6a87 	vadd.f32	s13, s15, s14
   2bec0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2bec4:	edc5 6a00 	vstr	s13, [r5]
   2bec8:	ee77 7a87 	vadd.f32	s15, s15, s14
   2becc:	edc5 7a01 	vstr	s15, [r5, #4]
   2bed0:	e716      	b.n	2bd00 <__ieee754_rem_pio2f+0x50>
   2bed2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2bf04 <__ieee754_rem_pio2f+0x254>
   2bed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2beda:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2bf08 <__ieee754_rem_pio2f+0x258>
   2bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2bee2:	e7eb      	b.n	2bebc <__ieee754_rem_pio2f+0x20c>
   2bee4:	3f490fd8 	.word	0x3f490fd8
   2bee8:	4016cbe3 	.word	0x4016cbe3
   2beec:	3fc90f80 	.word	0x3fc90f80
   2bef0:	3fc90fd0 	.word	0x3fc90fd0
   2bef4:	37354443 	.word	0x37354443
   2bef8:	43490f80 	.word	0x43490f80
   2befc:	43800000 	.word	0x43800000
   2bf00:	00035440 	.word	0x00035440
   2bf04:	37354400 	.word	0x37354400
   2bf08:	2e85a308 	.word	0x2e85a308
   2bf0c:	3f22f984 	.word	0x3f22f984
   2bf10:	000353c0 	.word	0x000353c0
   2bf14:	2e85a300 	.word	0x2e85a300
   2bf18:	248d3132 	.word	0x248d3132

0002bf1c <__ieee754_sqrtf>:
   2bf1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   2bf20:	4770      	bx	lr
   2bf22:	bf00      	nop

0002bf24 <__kernel_cosf>:
   2bf24:	ee10 3a10 	vmov	r3, s0
   2bf28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2bf2c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2bf30:	da2c      	bge.n	2bf8c <__kernel_cosf+0x68>
   2bf32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2bf36:	ee17 3a90 	vmov	r3, s15
   2bf3a:	2b00      	cmp	r3, #0
   2bf3c:	d060      	beq.n	2c000 <__kernel_cosf+0xdc>
   2bf3e:	ee20 7a00 	vmul.f32	s14, s0, s0
   2bf42:	eddf 7a31 	vldr	s15, [pc, #196]	; 2c008 <__kernel_cosf+0xe4>
   2bf46:	ed9f 5a31 	vldr	s10, [pc, #196]	; 2c00c <__kernel_cosf+0xe8>
   2bf4a:	eddf 5a31 	vldr	s11, [pc, #196]	; 2c010 <__kernel_cosf+0xec>
   2bf4e:	eea7 5a27 	vfma.f32	s10, s14, s15
   2bf52:	ed9f 6a30 	vldr	s12, [pc, #192]	; 2c014 <__kernel_cosf+0xf0>
   2bf56:	eddf 7a30 	vldr	s15, [pc, #192]	; 2c018 <__kernel_cosf+0xf4>
   2bf5a:	eddf 6a30 	vldr	s13, [pc, #192]	; 2c01c <__kernel_cosf+0xf8>
   2bf5e:	eee7 5a05 	vfma.f32	s11, s14, s10
   2bf62:	eea7 6a25 	vfma.f32	s12, s14, s11
   2bf66:	eee7 7a06 	vfma.f32	s15, s14, s12
   2bf6a:	eee7 6a27 	vfma.f32	s13, s14, s15
   2bf6e:	ee66 6a87 	vmul.f32	s13, s13, s14
   2bf72:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2bf76:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   2bf7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2bf7e:	eee7 0a26 	vfma.f32	s1, s14, s13
   2bf82:	eed7 0a06 	vfnms.f32	s1, s14, s12
   2bf86:	ee37 0ae0 	vsub.f32	s0, s15, s1
   2bf8a:	4770      	bx	lr
   2bf8c:	ee20 7a00 	vmul.f32	s14, s0, s0
   2bf90:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2c008 <__kernel_cosf+0xe4>
   2bf94:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 2c00c <__kernel_cosf+0xe8>
   2bf98:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2c010 <__kernel_cosf+0xec>
   2bf9c:	eea7 5a27 	vfma.f32	s10, s14, s15
   2bfa0:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 2c014 <__kernel_cosf+0xf0>
   2bfa4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2c018 <__kernel_cosf+0xf4>
   2bfa8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 2c01c <__kernel_cosf+0xf8>
   2bfac:	4a1c      	ldr	r2, [pc, #112]	; (2c020 <__kernel_cosf+0xfc>)
   2bfae:	4293      	cmp	r3, r2
   2bfb0:	eee5 5a07 	vfma.f32	s11, s10, s14
   2bfb4:	eea5 6a87 	vfma.f32	s12, s11, s14
   2bfb8:	eee6 7a07 	vfma.f32	s15, s12, s14
   2bfbc:	eee7 6a87 	vfma.f32	s13, s15, s14
   2bfc0:	ee66 6a87 	vmul.f32	s13, s13, s14
   2bfc4:	ddd5      	ble.n	2bf72 <__kernel_cosf+0x4e>
   2bfc6:	4a17      	ldr	r2, [pc, #92]	; (2c024 <__kernel_cosf+0x100>)
   2bfc8:	4293      	cmp	r3, r2
   2bfca:	dc14      	bgt.n	2bff6 <__kernel_cosf+0xd2>
   2bfcc:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   2bfd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2bfd4:	ee07 3a90 	vmov	s15, r3
   2bfd8:	ee36 6a67 	vsub.f32	s12, s12, s15
   2bfdc:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2bfe0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   2bfe4:	eee7 0a26 	vfma.f32	s1, s14, s13
   2bfe8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   2bfec:	ee77 7ae0 	vsub.f32	s15, s15, s1
   2bff0:	ee36 0a67 	vsub.f32	s0, s12, s15
   2bff4:	4770      	bx	lr
   2bff6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   2bffa:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   2bffe:	e7ed      	b.n	2bfdc <__kernel_cosf+0xb8>
   2c000:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c004:	4770      	bx	lr
   2c006:	bf00      	nop
   2c008:	ad47d74e 	.word	0xad47d74e
   2c00c:	310f74f6 	.word	0x310f74f6
   2c010:	b493f27c 	.word	0xb493f27c
   2c014:	37d00d01 	.word	0x37d00d01
   2c018:	bab60b61 	.word	0xbab60b61
   2c01c:	3d2aaaab 	.word	0x3d2aaaab
   2c020:	3e999999 	.word	0x3e999999
   2c024:	3f480000 	.word	0x3f480000

0002c028 <__kernel_rem_pio2f>:
   2c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c02c:	ed2d 8b04 	vpush	{d8-d9}
   2c030:	b0db      	sub	sp, #364	; 0x16c
   2c032:	461c      	mov	r4, r3
   2c034:	4681      	mov	r9, r0
   2c036:	9304      	str	r3, [sp, #16]
   2c038:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   2c03c:	4bd4      	ldr	r3, [pc, #848]	; (2c390 <_flash_used+0x330>)
   2c03e:	9107      	str	r1, [sp, #28]
   2c040:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   2c042:	9209      	str	r2, [sp, #36]	; 0x24
   2c044:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   2c048:	1d11      	adds	r1, r2, #4
   2c04a:	f2c0 8274 	blt.w	2c536 <_flash_used+0x4d6>
   2c04e:	1ed3      	subs	r3, r2, #3
   2c050:	f100 82f1 	bmi.w	2c636 <_flash_used+0x5d6>
   2c054:	10db      	asrs	r3, r3, #3
   2c056:	9303      	str	r3, [sp, #12]
   2c058:	3301      	adds	r3, #1
   2c05a:	00db      	lsls	r3, r3, #3
   2c05c:	9308      	str	r3, [sp, #32]
   2c05e:	eb15 0108 	adds.w	r1, r5, r8
   2c062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2c066:	eba3 0302 	sub.w	r3, r3, r2
   2c06a:	9306      	str	r3, [sp, #24]
   2c06c:	9b03      	ldr	r3, [sp, #12]
   2c06e:	eba3 0308 	sub.w	r3, r3, r8
   2c072:	d414      	bmi.n	2c09e <_flash_used+0x3e>
   2c074:	3101      	adds	r1, #1
   2c076:	aa1e      	add	r2, sp, #120	; 0x78
   2c078:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 2c39c <_flash_used+0x33c>
   2c07c:	4419      	add	r1, r3
   2c07e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   2c080:	2b00      	cmp	r3, #0
   2c082:	eef0 7a47 	vmov.f32	s15, s14
   2c086:	db05      	blt.n	2c094 <_flash_used+0x34>
   2c088:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2c08c:	ee07 4a90 	vmov	s15, r4
   2c090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c094:	3301      	adds	r3, #1
   2c096:	ece2 7a01 	vstmia	r2!, {s15}
   2c09a:	428b      	cmp	r3, r1
   2c09c:	d1f0      	bne.n	2c080 <_flash_used+0x20>
   2c09e:	9b04      	ldr	r3, [sp, #16]
   2c0a0:	2d00      	cmp	r5, #0
   2c0a2:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   2c0a6:	ea4f 0483 	mov.w	r4, r3, lsl #2
   2c0aa:	db1d      	blt.n	2c0e8 <_flash_used+0x88>
   2c0ac:	ab1e      	add	r3, sp, #120	; 0x78
   2c0ae:	eb09 0104 	add.w	r1, r9, r4
   2c0b2:	a846      	add	r0, sp, #280	; 0x118
   2c0b4:	191e      	adds	r6, r3, r4
   2c0b6:	ab47      	add	r3, sp, #284	; 0x11c
   2c0b8:	eb03 070a 	add.w	r7, r3, sl
   2c0bc:	f1b8 0f00 	cmp.w	r8, #0
   2c0c0:	f2c0 8187 	blt.w	2c3d2 <_flash_used+0x372>
   2c0c4:	4632      	mov	r2, r6
   2c0c6:	464b      	mov	r3, r9
   2c0c8:	eddf 7ab4 	vldr	s15, [pc, #720]	; 2c39c <_flash_used+0x33c>
   2c0cc:	ecf3 6a01 	vldmia	r3!, {s13}
   2c0d0:	ed32 7a01 	vldmdb	r2!, {s14}
   2c0d4:	428b      	cmp	r3, r1
   2c0d6:	eee6 7a87 	vfma.f32	s15, s13, s14
   2c0da:	d1f7      	bne.n	2c0cc <_flash_used+0x6c>
   2c0dc:	ece0 7a01 	vstmia	r0!, {s15}
   2c0e0:	42b8      	cmp	r0, r7
   2c0e2:	f106 0604 	add.w	r6, r6, #4
   2c0e6:	d1e9      	bne.n	2c0bc <_flash_used+0x5c>
   2c0e8:	f1aa 0308 	sub.w	r3, sl, #8
   2c0ec:	af0a      	add	r7, sp, #40	; 0x28
   2c0ee:	aa09      	add	r2, sp, #36	; 0x24
   2c0f0:	9500      	str	r5, [sp, #0]
   2c0f2:	18fb      	adds	r3, r7, r3
   2c0f4:	444c      	add	r4, r9
   2c0f6:	4492      	add	sl, r2
   2c0f8:	ae46      	add	r6, sp, #280	; 0x118
   2c0fa:	9305      	str	r3, [sp, #20]
   2c0fc:	462b      	mov	r3, r5
   2c0fe:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 2c394 <_flash_used+0x334>
   2c102:	eddf 8aa5 	vldr	s17, [pc, #660]	; 2c398 <_flash_used+0x338>
   2c106:	9d06      	ldr	r5, [sp, #24]
   2c108:	0099      	lsls	r1, r3, #2
   2c10a:	aa5a      	add	r2, sp, #360	; 0x168
   2c10c:	2b00      	cmp	r3, #0
   2c10e:	440a      	add	r2, r1
   2c110:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   2c114:	dd16      	ble.n	2c144 <_flash_used+0xe4>
   2c116:	eb06 0283 	add.w	r2, r6, r3, lsl #2
   2c11a:	4638      	mov	r0, r7
   2c11c:	ee60 7a09 	vmul.f32	s15, s0, s18
   2c120:	ed72 6a01 	vldmdb	r2!, {s13}
   2c124:	eeb0 7a40 	vmov.f32	s14, s0
   2c128:	42b2      	cmp	r2, r6
   2c12a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2c12e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c132:	eea7 7ae8 	vfms.f32	s14, s15, s17
   2c136:	ee37 0aa6 	vadd.f32	s0, s15, s13
   2c13a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2c13e:	eca0 7a01 	vstmia	r0!, {s14}
   2c142:	d1eb      	bne.n	2c11c <_flash_used+0xbc>
   2c144:	4628      	mov	r0, r5
   2c146:	e9cd 1301 	strd	r1, r3, [sp, #4]
   2c14a:	f000 fbbb 	bl	2c8c4 <scalbnf>
   2c14e:	eeb0 8a40 	vmov.f32	s16, s0
   2c152:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   2c156:	ee28 0a00 	vmul.f32	s0, s16, s0
   2c15a:	f7fe fd75 	bl	2ac48 <floorf>
   2c15e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   2c162:	2d00      	cmp	r5, #0
   2c164:	eea0 8a67 	vfms.f32	s16, s0, s15
   2c168:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   2c16c:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   2c170:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   2c174:	ee38 8a67 	vsub.f32	s16, s16, s15
   2c178:	f340 8081 	ble.w	2c27e <_flash_used+0x21e>
   2c17c:	1e58      	subs	r0, r3, #1
   2c17e:	f1c5 0208 	rsb	r2, r5, #8
   2c182:	f1c5 0b07 	rsb	fp, r5, #7
   2c186:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
   2c18a:	fa4c fe02 	asr.w	lr, ip, r2
   2c18e:	fa0e f202 	lsl.w	r2, lr, r2
   2c192:	9201      	str	r2, [sp, #4]
   2c194:	ee19 2a90 	vmov	r2, s19
   2c198:	4472      	add	r2, lr
   2c19a:	ee09 2a90 	vmov	s19, r2
   2c19e:	9a01      	ldr	r2, [sp, #4]
   2c1a0:	ebac 0202 	sub.w	r2, ip, r2
   2c1a4:	fa42 fb0b 	asr.w	fp, r2, fp
   2c1a8:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   2c1ac:	f1bb 0f00 	cmp.w	fp, #0
   2c1b0:	dc6f      	bgt.n	2c292 <_flash_used+0x232>
   2c1b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2c1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c1ba:	f040 80aa 	bne.w	2c312 <_flash_used+0x2b2>
   2c1be:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   2c1c2:	9a00      	ldr	r2, [sp, #0]
   2c1c4:	4562      	cmp	r2, ip
   2c1c6:	dc0e      	bgt.n	2c1e6 <_flash_used+0x186>
   2c1c8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   2c1cc:	2100      	movs	r1, #0
   2c1ce:	441a      	add	r2, r3
   2c1d0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2c1d4:	f852 0904 	ldr.w	r0, [r2], #-4
   2c1d8:	4552      	cmp	r2, sl
   2c1da:	ea41 0100 	orr.w	r1, r1, r0
   2c1de:	d1f9      	bne.n	2c1d4 <_flash_used+0x174>
   2c1e0:	2900      	cmp	r1, #0
   2c1e2:	f040 80ff 	bne.w	2c3e4 <_flash_used+0x384>
   2c1e6:	9a00      	ldr	r2, [sp, #0]
   2c1e8:	3a01      	subs	r2, #1
   2c1ea:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   2c1ee:	2a00      	cmp	r2, #0
   2c1f0:	f040 80ea 	bne.w	2c3c8 <_flash_used+0x368>
   2c1f4:	9a05      	ldr	r2, [sp, #20]
   2c1f6:	2001      	movs	r0, #1
   2c1f8:	f852 1904 	ldr.w	r1, [r2], #-4
   2c1fc:	3001      	adds	r0, #1
   2c1fe:	2900      	cmp	r1, #0
   2c200:	d0fa      	beq.n	2c1f8 <_flash_used+0x198>
   2c202:	f103 0e01 	add.w	lr, r3, #1
   2c206:	4418      	add	r0, r3
   2c208:	46f4      	mov	ip, lr
   2c20a:	9a03      	ldr	r2, [sp, #12]
   2c20c:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
   2c210:	9904      	ldr	r1, [sp, #16]
   2c212:	4472      	add	r2, lr
   2c214:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   2c218:	440b      	add	r3, r1
   2c21a:	4493      	add	fp, r2
   2c21c:	aa1e      	add	r2, sp, #120	; 0x78
   2c21e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2c222:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
   2c224:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
   2c228:	f85b 3f04 	ldr.w	r3, [fp, #4]!
   2c22c:	4611      	mov	r1, r2
   2c22e:	f1b8 0f00 	cmp.w	r8, #0
   2c232:	ee07 3a90 	vmov	s15, r3
   2c236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c23a:	ece1 7a01 	vstmia	r1!, {s15}
   2c23e:	db14      	blt.n	2c26a <_flash_used+0x20a>
   2c240:	464b      	mov	r3, r9
   2c242:	ed9f 7a56 	vldr	s14, [pc, #344]	; 2c39c <_flash_used+0x33c>
   2c246:	e001      	b.n	2c24c <_flash_used+0x1ec>
   2c248:	ed72 7a01 	vldmdb	r2!, {s15}
   2c24c:	ecf3 6a01 	vldmia	r3!, {s13}
   2c250:	42a3      	cmp	r3, r4
   2c252:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2c256:	d1f7      	bne.n	2c248 <_flash_used+0x1e8>
   2c258:	f10c 0c01 	add.w	ip, ip, #1
   2c25c:	ecae 7a01 	vstmia	lr!, {s14}
   2c260:	460a      	mov	r2, r1
   2c262:	4584      	cmp	ip, r0
   2c264:	dde0      	ble.n	2c228 <_flash_used+0x1c8>
   2c266:	4603      	mov	r3, r0
   2c268:	e74e      	b.n	2c108 <_flash_used+0xa8>
   2c26a:	f10c 0c01 	add.w	ip, ip, #1
   2c26e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2c39c <_flash_used+0x33c>
   2c272:	460a      	mov	r2, r1
   2c274:	4584      	cmp	ip, r0
   2c276:	ecae 7a01 	vstmia	lr!, {s14}
   2c27a:	ddd5      	ble.n	2c228 <_flash_used+0x1c8>
   2c27c:	e7f3      	b.n	2c266 <_flash_used+0x206>
   2c27e:	f040 8098 	bne.w	2c3b2 <_flash_used+0x352>
   2c282:	1e5a      	subs	r2, r3, #1
   2c284:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   2c288:	ea4f 2b22 	mov.w	fp, r2, asr #8
   2c28c:	f1bb 0f00 	cmp.w	fp, #0
   2c290:	dd8f      	ble.n	2c1b2 <_flash_used+0x152>
   2c292:	ee19 2a90 	vmov	r2, s19
   2c296:	2b00      	cmp	r3, #0
   2c298:	f102 0201 	add.w	r2, r2, #1
   2c29c:	ee09 2a90 	vmov	s19, r2
   2c2a0:	f340 81cc 	ble.w	2c63c <_flash_used+0x5dc>
   2c2a4:	6838      	ldr	r0, [r7, #0]
   2c2a6:	2800      	cmp	r0, #0
   2c2a8:	d162      	bne.n	2c370 <_flash_used+0x310>
   2c2aa:	2b01      	cmp	r3, #1
   2c2ac:	d00b      	beq.n	2c2c6 <_flash_used+0x266>
   2c2ae:	46be      	mov	lr, r7
   2c2b0:	f04f 0c01 	mov.w	ip, #1
   2c2b4:	f85e 0f04 	ldr.w	r0, [lr, #4]!
   2c2b8:	f10c 0201 	add.w	r2, ip, #1
   2c2bc:	2800      	cmp	r0, #0
   2c2be:	d15a      	bne.n	2c376 <_flash_used+0x316>
   2c2c0:	4293      	cmp	r3, r2
   2c2c2:	4694      	mov	ip, r2
   2c2c4:	d1f6      	bne.n	2c2b4 <_flash_used+0x254>
   2c2c6:	2d00      	cmp	r5, #0
   2c2c8:	dd0b      	ble.n	2c2e2 <_flash_used+0x282>
   2c2ca:	2d01      	cmp	r5, #1
   2c2cc:	f000 811f 	beq.w	2c50e <_flash_used+0x4ae>
   2c2d0:	2d02      	cmp	r5, #2
   2c2d2:	d106      	bne.n	2c2e2 <_flash_used+0x282>
   2c2d4:	1e59      	subs	r1, r3, #1
   2c2d6:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   2c2da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2c2de:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   2c2e2:	f1bb 0f02 	cmp.w	fp, #2
   2c2e6:	f47f af64 	bne.w	2c1b2 <_flash_used+0x152>
   2c2ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c2ee:	ee30 8a48 	vsub.f32	s16, s0, s16
   2c2f2:	2800      	cmp	r0, #0
   2c2f4:	f43f af5d 	beq.w	2c1b2 <_flash_used+0x152>
   2c2f8:	4628      	mov	r0, r5
   2c2fa:	9301      	str	r3, [sp, #4]
   2c2fc:	f000 fae2 	bl	2c8c4 <scalbnf>
   2c300:	ee38 8a40 	vsub.f32	s16, s16, s0
   2c304:	9b01      	ldr	r3, [sp, #4]
   2c306:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2c30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c30e:	f43f af56 	beq.w	2c1be <_flash_used+0x15e>
   2c312:	9301      	str	r3, [sp, #4]
   2c314:	eeb0 0a48 	vmov.f32	s0, s16
   2c318:	9d00      	ldr	r5, [sp, #0]
   2c31a:	46d8      	mov	r8, fp
   2c31c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2c320:	1a98      	subs	r0, r3, r2
   2c322:	f000 facf 	bl	2c8c4 <scalbnf>
   2c326:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 2c398 <_flash_used+0x338>
   2c32a:	9b01      	ldr	r3, [sp, #4]
   2c32c:	eeb4 0ac7 	vcmpe.f32	s0, s14
   2c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c334:	f2c0 8184 	blt.w	2c640 <_flash_used+0x5e0>
   2c338:	eddf 7a16 	vldr	s15, [pc, #88]	; 2c394 <_flash_used+0x334>
   2c33c:	f103 0b01 	add.w	fp, r3, #1
   2c340:	9a06      	ldr	r2, [sp, #24]
   2c342:	ee60 7a27 	vmul.f32	s15, s0, s15
   2c346:	3208      	adds	r2, #8
   2c348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2c34c:	9206      	str	r2, [sp, #24]
   2c34e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c352:	eea7 0ac7 	vfms.f32	s0, s15, s14
   2c356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2c35a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2c35e:	ee10 2a10 	vmov	r2, s0
   2c362:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   2c366:	ee17 3a90 	vmov	r3, s15
   2c36a:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   2c36e:	e04f      	b.n	2c410 <_flash_used+0x3b0>
   2c370:	2201      	movs	r2, #1
   2c372:	f04f 0c00 	mov.w	ip, #0
   2c376:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
   2c37a:	4293      	cmp	r3, r2
   2c37c:	f847 002c 	str.w	r0, [r7, ip, lsl #2]
   2c380:	dd15      	ble.n	2c3ae <_flash_used+0x34e>
   2c382:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   2c386:	4439      	add	r1, r7
   2c388:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2c38c:	e009      	b.n	2c3a2 <_flash_used+0x342>
   2c38e:	bf00      	nop
   2c390:	00035784 	.word	0x00035784
   2c394:	3b800000 	.word	0x3b800000
   2c398:	43800000 	.word	0x43800000
   2c39c:	00000000 	.word	0x00000000
   2c3a0:	6810      	ldr	r0, [r2, #0]
   2c3a2:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
   2c3a6:	f842 0b04 	str.w	r0, [r2], #4
   2c3aa:	428a      	cmp	r2, r1
   2c3ac:	d1f8      	bne.n	2c3a0 <_flash_used+0x340>
   2c3ae:	2001      	movs	r0, #1
   2c3b0:	e789      	b.n	2c2c6 <_flash_used+0x266>
   2c3b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2c3b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2c3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c3be:	f280 80ae 	bge.w	2c51e <_flash_used+0x4be>
   2c3c2:	f04f 0b00 	mov.w	fp, #0
   2c3c6:	e6f4      	b.n	2c1b2 <_flash_used+0x152>
   2c3c8:	f103 0e01 	add.w	lr, r3, #1
   2c3cc:	46f4      	mov	ip, lr
   2c3ce:	4670      	mov	r0, lr
   2c3d0:	e71b      	b.n	2c20a <_flash_used+0x1aa>
   2c3d2:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 2c39c <_flash_used+0x33c>
   2c3d6:	3604      	adds	r6, #4
   2c3d8:	ece0 7a01 	vstmia	r0!, {s15}
   2c3dc:	42b8      	cmp	r0, r7
   2c3de:	f47f ae6d 	bne.w	2c0bc <_flash_used+0x5c>
   2c3e2:	e681      	b.n	2c0e8 <_flash_used+0x88>
   2c3e4:	9906      	ldr	r1, [sp, #24]
   2c3e6:	46d8      	mov	r8, fp
   2c3e8:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
   2c3ec:	46e3      	mov	fp, ip
   2c3ee:	3908      	subs	r1, #8
   2c3f0:	9d00      	ldr	r5, [sp, #0]
   2c3f2:	9106      	str	r1, [sp, #24]
   2c3f4:	b962      	cbnz	r2, 2c410 <_flash_used+0x3b0>
   2c3f6:	4ab0      	ldr	r2, [pc, #704]	; (2c6b8 <_flash_used+0x658>)
   2c3f8:	441a      	add	r2, r3
   2c3fa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   2c3fe:	460a      	mov	r2, r1
   2c400:	f853 1904 	ldr.w	r1, [r3], #-4
   2c404:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2c408:	3a08      	subs	r2, #8
   2c40a:	2900      	cmp	r1, #0
   2c40c:	d0f8      	beq.n	2c400 <_flash_used+0x3a0>
   2c40e:	9206      	str	r2, [sp, #24]
   2c410:	9806      	ldr	r0, [sp, #24]
   2c412:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c416:	f000 fa55 	bl	2c8c4 <scalbnf>
   2c41a:	f1bb 0f00 	cmp.w	fp, #0
   2c41e:	f2c0 8136 	blt.w	2c68e <_flash_used+0x62e>
   2c422:	ea4f 048b 	mov.w	r4, fp, lsl #2
   2c426:	ab46      	add	r3, sp, #280	; 0x118
   2c428:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 2c6bc <_flash_used+0x65c>
   2c42c:	1d26      	adds	r6, r4, #4
   2c42e:	441c      	add	r4, r3
   2c430:	19bb      	adds	r3, r7, r6
   2c432:	1d22      	adds	r2, r4, #4
   2c434:	ed73 7a01 	vldmdb	r3!, {s15}
   2c438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c43c:	42bb      	cmp	r3, r7
   2c43e:	ee67 7a80 	vmul.f32	s15, s15, s0
   2c442:	ee20 0a07 	vmul.f32	s0, s0, s14
   2c446:	ed62 7a01 	vstmdb	r2!, {s15}
   2c44a:	d1f3      	bne.n	2c434 <_flash_used+0x3d4>
   2c44c:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   2c450:	2d00      	cmp	r5, #0
   2c452:	f04f 0000 	mov.w	r0, #0
   2c456:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 2c6c0 <_flash_used+0x660>
   2c45a:	4667      	mov	r7, ip
   2c45c:	db1d      	blt.n	2c49a <_flash_used+0x43a>
   2c45e:	4999      	ldr	r1, [pc, #612]	; (2c6c4 <_flash_used+0x664>)
   2c460:	4622      	mov	r2, r4
   2c462:	eeb0 7a46 	vmov.f32	s14, s12
   2c466:	eddf 7a98 	vldr	s15, [pc, #608]	; 2c6c8 <_flash_used+0x668>
   2c46a:	2300      	movs	r3, #0
   2c46c:	e003      	b.n	2c476 <_flash_used+0x416>
   2c46e:	4283      	cmp	r3, r0
   2c470:	dc08      	bgt.n	2c484 <_flash_used+0x424>
   2c472:	ecb1 7a01 	vldmia	r1!, {s14}
   2c476:	3301      	adds	r3, #1
   2c478:	ecf2 6a01 	vldmia	r2!, {s13}
   2c47c:	429d      	cmp	r5, r3
   2c47e:	eee6 7a87 	vfma.f32	s15, s13, s14
   2c482:	daf4      	bge.n	2c46e <_flash_used+0x40e>
   2c484:	4558      	cmp	r0, fp
   2c486:	ece7 7a01 	vstmia	r7!, {s15}
   2c48a:	f1a4 0404 	sub.w	r4, r4, #4
   2c48e:	f100 0301 	add.w	r3, r0, #1
   2c492:	d00c      	beq.n	2c4ae <_flash_used+0x44e>
   2c494:	2d00      	cmp	r5, #0
   2c496:	4618      	mov	r0, r3
   2c498:	dae1      	bge.n	2c45e <_flash_used+0x3fe>
   2c49a:	eddf 7a8b 	vldr	s15, [pc, #556]	; 2c6c8 <_flash_used+0x668>
   2c49e:	4558      	cmp	r0, fp
   2c4a0:	f1a4 0404 	sub.w	r4, r4, #4
   2c4a4:	f100 0301 	add.w	r3, r0, #1
   2c4a8:	ece7 7a01 	vstmia	r7!, {s15}
   2c4ac:	d1f2      	bne.n	2c494 <_flash_used+0x434>
   2c4ae:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2c4b0:	2b03      	cmp	r3, #3
   2c4b2:	d823      	bhi.n	2c4fc <_flash_used+0x49c>
   2c4b4:	e8df f003 	tbb	[pc, r3]
   2c4b8:	449c9cae 	.word	0x449c9cae
   2c4bc:	eddf 7a82 	vldr	s15, [pc, #520]	; 2c6c8 <_flash_used+0x668>
   2c4c0:	4643      	mov	r3, r8
   2c4c2:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   2c4c6:	ee37 7a67 	vsub.f32	s14, s14, s15
   2c4ca:	2b00      	cmp	r3, #0
   2c4cc:	f040 80c0 	bne.w	2c650 <_flash_used+0x5f0>
   2c4d0:	9b07      	ldr	r3, [sp, #28]
   2c4d2:	f1bb 0f00 	cmp.w	fp, #0
   2c4d6:	edc3 7a00 	vstr	s15, [r3]
   2c4da:	dd0c      	ble.n	2c4f6 <_flash_used+0x496>
   2c4dc:	aa33      	add	r2, sp, #204	; 0xcc
   2c4de:	2301      	movs	r3, #1
   2c4e0:	3301      	adds	r3, #1
   2c4e2:	ecf2 7a01 	vldmia	r2!, {s15}
   2c4e6:	459b      	cmp	fp, r3
   2c4e8:	ee37 7a27 	vadd.f32	s14, s14, s15
   2c4ec:	daf8      	bge.n	2c4e0 <_flash_used+0x480>
   2c4ee:	4643      	mov	r3, r8
   2c4f0:	b10b      	cbz	r3, 2c4f6 <_flash_used+0x496>
   2c4f2:	eeb1 7a47 	vneg.f32	s14, s14
   2c4f6:	9b07      	ldr	r3, [sp, #28]
   2c4f8:	ed83 7a01 	vstr	s14, [r3, #4]
   2c4fc:	ee19 3a90 	vmov	r3, s19
   2c500:	f003 0007 	and.w	r0, r3, #7
   2c504:	b05b      	add	sp, #364	; 0x16c
   2c506:	ecbd 8b04 	vpop	{d8-d9}
   2c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c50e:	1e59      	subs	r1, r3, #1
   2c510:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   2c514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2c518:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   2c51c:	e6e1      	b.n	2c2e2 <_flash_used+0x282>
   2c51e:	ee19 2a90 	vmov	r2, s19
   2c522:	2b00      	cmp	r3, #0
   2c524:	f102 0201 	add.w	r2, r2, #1
   2c528:	ee09 2a90 	vmov	s19, r2
   2c52c:	f340 80a8 	ble.w	2c680 <_flash_used+0x620>
   2c530:	f04f 0b02 	mov.w	fp, #2
   2c534:	e6b6      	b.n	2c2a4 <_flash_used+0x244>
   2c536:	2308      	movs	r3, #8
   2c538:	9308      	str	r3, [sp, #32]
   2c53a:	2300      	movs	r3, #0
   2c53c:	9303      	str	r3, [sp, #12]
   2c53e:	e58e      	b.n	2c05e <__kernel_rem_pio2f+0x36>
   2c540:	f1bb 0f00 	cmp.w	fp, #0
   2c544:	f340 80b5 	ble.w	2c6b2 <_flash_used+0x652>
   2c548:	ab5a      	add	r3, sp, #360	; 0x168
   2c54a:	ea4f 028b 	mov.w	r2, fp, lsl #2
   2c54e:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   2c552:	1899      	adds	r1, r3, r2
   2c554:	eb0c 038b 	add.w	r3, ip, fp, lsl #2
   2c558:	ed51 6a28 	vldr	s13, [r1, #-160]	; 0xffffff60
   2c55c:	ed73 7a01 	vldmdb	r3!, {s15}
   2c560:	ee37 7aa6 	vadd.f32	s14, s15, s13
   2c564:	459c      	cmp	ip, r3
   2c566:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2c56a:	ed83 7a00 	vstr	s14, [r3]
   2c56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2c572:	eef0 6a47 	vmov.f32	s13, s14
   2c576:	edc3 7a01 	vstr	s15, [r3, #4]
   2c57a:	d1ef      	bne.n	2c55c <_flash_used+0x4fc>
   2c57c:	f1bb 0f01 	cmp.w	fp, #1
   2c580:	f340 8097 	ble.w	2c6b2 <_flash_used+0x652>
   2c584:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   2c588:	a95a      	add	r1, sp, #360	; 0x168
   2c58a:	445b      	add	r3, fp
   2c58c:	440a      	add	r2, r1
   2c58e:	a933      	add	r1, sp, #204	; 0xcc
   2c590:	009b      	lsls	r3, r3, #2
   2c592:	ed52 6a28 	vldr	s13, [r2, #-160]	; 0xffffff60
   2c596:	1d1a      	adds	r2, r3, #4
   2c598:	4462      	add	r2, ip
   2c59a:	ed72 7a01 	vldmdb	r2!, {s15}
   2c59e:	ee37 7aa6 	vadd.f32	s14, s15, s13
   2c5a2:	4291      	cmp	r1, r2
   2c5a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2c5a8:	ed82 7a00 	vstr	s14, [r2]
   2c5ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2c5b0:	eef0 6a47 	vmov.f32	s13, s14
   2c5b4:	edc2 7a01 	vstr	s15, [r2, #4]
   2c5b8:	d1ef      	bne.n	2c59a <_flash_used+0x53a>
   2c5ba:	3308      	adds	r3, #8
   2c5bc:	f10c 0208 	add.w	r2, ip, #8
   2c5c0:	eddf 7a41 	vldr	s15, [pc, #260]	; 2c6c8 <_flash_used+0x668>
   2c5c4:	449c      	add	ip, r3
   2c5c6:	ed3c 7a01 	vldmdb	ip!, {s14}
   2c5ca:	4562      	cmp	r2, ip
   2c5cc:	ee77 7a87 	vadd.f32	s15, s15, s14
   2c5d0:	d1f9      	bne.n	2c5c6 <_flash_used+0x566>
   2c5d2:	4643      	mov	r3, r8
   2c5d4:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   2c5d8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   2c5dc:	2b00      	cmp	r3, #0
   2c5de:	d141      	bne.n	2c664 <_flash_used+0x604>
   2c5e0:	9b07      	ldr	r3, [sp, #28]
   2c5e2:	edc3 6a00 	vstr	s13, [r3]
   2c5e6:	ed83 7a01 	vstr	s14, [r3, #4]
   2c5ea:	edc3 7a02 	vstr	s15, [r3, #8]
   2c5ee:	e785      	b.n	2c4fc <_flash_used+0x49c>
   2c5f0:	4466      	add	r6, ip
   2c5f2:	eddf 7a35 	vldr	s15, [pc, #212]	; 2c6c8 <_flash_used+0x668>
   2c5f6:	ed36 7a01 	vldmdb	r6!, {s14}
   2c5fa:	45b4      	cmp	ip, r6
   2c5fc:	ee77 7a87 	vadd.f32	s15, s15, s14
   2c600:	d1f9      	bne.n	2c5f6 <_flash_used+0x596>
   2c602:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   2c606:	4643      	mov	r3, r8
   2c608:	ee37 7a67 	vsub.f32	s14, s14, s15
   2c60c:	2b00      	cmp	r3, #0
   2c60e:	f43f af5f 	beq.w	2c4d0 <_flash_used+0x470>
   2c612:	e01d      	b.n	2c650 <_flash_used+0x5f0>
   2c614:	4466      	add	r6, ip
   2c616:	eddf 7a2c 	vldr	s15, [pc, #176]	; 2c6c8 <_flash_used+0x668>
   2c61a:	ed36 7a01 	vldmdb	r6!, {s14}
   2c61e:	45b4      	cmp	ip, r6
   2c620:	ee77 7a87 	vadd.f32	s15, s15, s14
   2c624:	d1f9      	bne.n	2c61a <_flash_used+0x5ba>
   2c626:	4643      	mov	r3, r8
   2c628:	b10b      	cbz	r3, 2c62e <_flash_used+0x5ce>
   2c62a:	eef1 7a67 	vneg.f32	s15, s15
   2c62e:	9b07      	ldr	r3, [sp, #28]
   2c630:	edc3 7a00 	vstr	s15, [r3]
   2c634:	e762      	b.n	2c4fc <_flash_used+0x49c>
   2c636:	4613      	mov	r3, r2
   2c638:	3304      	adds	r3, #4
   2c63a:	e50b      	b.n	2c054 <__kernel_rem_pio2f+0x2c>
   2c63c:	2000      	movs	r0, #0
   2c63e:	e642      	b.n	2c2c6 <_flash_used+0x266>
   2c640:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2c644:	469b      	mov	fp, r3
   2c646:	ee10 2a10 	vmov	r2, s0
   2c64a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   2c64e:	e6df      	b.n	2c410 <_flash_used+0x3b0>
   2c650:	eef1 7a67 	vneg.f32	s15, s15
   2c654:	9b07      	ldr	r3, [sp, #28]
   2c656:	f1bb 0f00 	cmp.w	fp, #0
   2c65a:	edc3 7a00 	vstr	s15, [r3]
   2c65e:	f73f af3d 	bgt.w	2c4dc <_flash_used+0x47c>
   2c662:	e746      	b.n	2c4f2 <_flash_used+0x492>
   2c664:	eef1 6a66 	vneg.f32	s13, s13
   2c668:	9b07      	ldr	r3, [sp, #28]
   2c66a:	eeb1 7a47 	vneg.f32	s14, s14
   2c66e:	eef1 7a67 	vneg.f32	s15, s15
   2c672:	edc3 6a00 	vstr	s13, [r3]
   2c676:	ed83 7a01 	vstr	s14, [r3, #4]
   2c67a:	edc3 7a02 	vstr	s15, [r3, #8]
   2c67e:	e73d      	b.n	2c4fc <_flash_used+0x49c>
   2c680:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2c684:	f04f 0b02 	mov.w	fp, #2
   2c688:	ee37 8ac8 	vsub.f32	s16, s15, s16
   2c68c:	e591      	b.n	2c1b2 <_flash_used+0x152>
   2c68e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2c690:	2b03      	cmp	r3, #3
   2c692:	f63f af33 	bhi.w	2c4fc <_flash_used+0x49c>
   2c696:	a201      	add	r2, pc, #4	; (adr r2, 2c69c <_flash_used+0x63c>)
   2c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2c69c:	0002c6ad 	.word	0x0002c6ad
   2c6a0:	0002c4bd 	.word	0x0002c4bd
   2c6a4:	0002c4bd 	.word	0x0002c4bd
   2c6a8:	0002c541 	.word	0x0002c541
   2c6ac:	eddf 7a06 	vldr	s15, [pc, #24]	; 2c6c8 <_flash_used+0x668>
   2c6b0:	e7b9      	b.n	2c626 <_flash_used+0x5c6>
   2c6b2:	eddf 7a05 	vldr	s15, [pc, #20]	; 2c6c8 <_flash_used+0x668>
   2c6b6:	e78c      	b.n	2c5d2 <_flash_used+0x572>
   2c6b8:	3ffffffe 	.word	0x3ffffffe
   2c6bc:	3b800000 	.word	0x3b800000
   2c6c0:	3fc90000 	.word	0x3fc90000
   2c6c4:	0003575c 	.word	0x0003575c
   2c6c8:	00000000 	.word	0x00000000

0002c6cc <__kernel_sinf>:
   2c6cc:	ee10 3a10 	vmov	r3, s0
   2c6d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2c6d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2c6d8:	da04      	bge.n	2c6e4 <__kernel_sinf+0x18>
   2c6da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2c6de:	ee17 3a90 	vmov	r3, s15
   2c6e2:	b35b      	cbz	r3, 2c73c <__kernel_sinf+0x70>
   2c6e4:	ee60 7a00 	vmul.f32	s15, s0, s0
   2c6e8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2c740 <__kernel_sinf+0x74>
   2c6ec:	eddf 5a15 	vldr	s11, [pc, #84]	; 2c744 <__kernel_sinf+0x78>
   2c6f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2c748 <__kernel_sinf+0x7c>
   2c6f4:	eee7 5a87 	vfma.f32	s11, s15, s14
   2c6f8:	eddf 6a14 	vldr	s13, [pc, #80]	; 2c74c <__kernel_sinf+0x80>
   2c6fc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 2c750 <__kernel_sinf+0x84>
   2c700:	ee20 5a27 	vmul.f32	s10, s0, s15
   2c704:	eea5 6aa7 	vfma.f32	s12, s11, s15
   2c708:	eee6 6a27 	vfma.f32	s13, s12, s15
   2c70c:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2c710:	b930      	cbnz	r0, 2c720 <__kernel_sinf+0x54>
   2c712:	eddf 6a10 	vldr	s13, [pc, #64]	; 2c754 <__kernel_sinf+0x88>
   2c716:	eee7 6a87 	vfma.f32	s13, s15, s14
   2c71a:	eea6 0a85 	vfma.f32	s0, s13, s10
   2c71e:	4770      	bx	lr
   2c720:	ee27 7a45 	vnmul.f32	s14, s14, s10
   2c724:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2c758 <__kernel_sinf+0x8c>
   2c728:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   2c72c:	eea0 7a86 	vfma.f32	s14, s1, s12
   2c730:	eed7 0a27 	vfnms.f32	s1, s14, s15
   2c734:	eee5 0a26 	vfma.f32	s1, s10, s13
   2c738:	ee30 0a60 	vsub.f32	s0, s0, s1
   2c73c:	4770      	bx	lr
   2c73e:	bf00      	nop
   2c740:	2f2ec9d3 	.word	0x2f2ec9d3
   2c744:	b2d72f34 	.word	0xb2d72f34
   2c748:	3638ef1b 	.word	0x3638ef1b
   2c74c:	b9500d01 	.word	0xb9500d01
   2c750:	3c088889 	.word	0x3c088889
   2c754:	be2aaaab 	.word	0xbe2aaaab
   2c758:	3e2aaaab 	.word	0x3e2aaaab

0002c75c <finite>:
   2c75c:	ee10 3a90 	vmov	r3, s1
   2c760:	4802      	ldr	r0, [pc, #8]	; (2c76c <finite+0x10>)
   2c762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2c766:	4418      	add	r0, r3
   2c768:	0fc0      	lsrs	r0, r0, #31
   2c76a:	4770      	bx	lr
   2c76c:	80100000 	.word	0x80100000

0002c770 <rint>:
   2c770:	ec53 2b10 	vmov	r2, r3, d0
   2c774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c778:	f3c3 560a 	ubfx	r6, r3, #20, #11
   2c77c:	b083      	sub	sp, #12
   2c77e:	4619      	mov	r1, r3
   2c780:	ee10 5a10 	vmov	r5, s0
   2c784:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   2c788:	0fdc      	lsrs	r4, r3, #31
   2c78a:	2813      	cmp	r0, #19
   2c78c:	dc38      	bgt.n	2c800 <rint+0x90>
   2c78e:	2800      	cmp	r0, #0
   2c790:	db2d      	blt.n	2c7ee <rint+0x7e>
   2c792:	4e3f      	ldr	r6, [pc, #252]	; (2c890 <rint+0x120>)
   2c794:	4106      	asrs	r6, r0
   2c796:	ea03 0706 	and.w	r7, r3, r6
   2c79a:	4317      	orrs	r7, r2
   2c79c:	d02b      	beq.n	2c7f6 <rint+0x86>
   2c79e:	0876      	lsrs	r6, r6, #1
   2c7a0:	4033      	ands	r3, r6
   2c7a2:	431d      	orrs	r5, r3
   2c7a4:	d00b      	beq.n	2c7be <rint+0x4e>
   2c7a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2c7aa:	2813      	cmp	r0, #19
   2c7ac:	ea21 0606 	bic.w	r6, r1, r6
   2c7b0:	fa43 f100 	asr.w	r1, r3, r0
   2c7b4:	bf0c      	ite	eq
   2c7b6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   2c7ba:	2500      	movne	r5, #0
   2c7bc:	4331      	orrs	r1, r6
   2c7be:	4835      	ldr	r0, [pc, #212]	; (2c894 <rint+0x124>)
   2c7c0:	462a      	mov	r2, r5
   2c7c2:	460b      	mov	r3, r1
   2c7c4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   2c7c8:	e9d4 4500 	ldrd	r4, r5, [r4]
   2c7cc:	4620      	mov	r0, r4
   2c7ce:	4629      	mov	r1, r5
   2c7d0:	f7e0 fab6 	bl	cd40 <__adddf3>
   2c7d4:	4622      	mov	r2, r4
   2c7d6:	462b      	mov	r3, r5
   2c7d8:	e9cd 0100 	strd	r0, r1, [sp]
   2c7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   2c7e0:	f7e0 faac 	bl	cd3c <__aeabi_dsub>
   2c7e4:	ec41 0b10 	vmov	d0, r0, r1
   2c7e8:	b003      	add	sp, #12
   2c7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c7ee:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2c7f2:	4310      	orrs	r0, r2
   2c7f4:	d123      	bne.n	2c83e <rint+0xce>
   2c7f6:	ec43 2b10 	vmov	d0, r2, r3
   2c7fa:	b003      	add	sp, #12
   2c7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c800:	2833      	cmp	r0, #51	; 0x33
   2c802:	dd09      	ble.n	2c818 <rint+0xa8>
   2c804:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   2c808:	d1f5      	bne.n	2c7f6 <rint+0x86>
   2c80a:	ee10 0a10 	vmov	r0, s0
   2c80e:	f7e0 fa97 	bl	cd40 <__adddf3>
   2c812:	ec41 0b10 	vmov	d0, r0, r1
   2c816:	e7f0      	b.n	2c7fa <rint+0x8a>
   2c818:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   2c81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c820:	40f0      	lsrs	r0, r6
   2c822:	4202      	tst	r2, r0
   2c824:	d0e7      	beq.n	2c7f6 <rint+0x86>
   2c826:	0840      	lsrs	r0, r0, #1
   2c828:	4202      	tst	r2, r0
   2c82a:	d0c8      	beq.n	2c7be <rint+0x4e>
   2c82c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c830:	ea25 0000 	bic.w	r0, r5, r0
   2c834:	fa43 f606 	asr.w	r6, r3, r6
   2c838:	ea40 0506 	orr.w	r5, r0, r6
   2c83c:	e7bf      	b.n	2c7be <rint+0x4e>
   2c83e:	f3c3 0613 	ubfx	r6, r3, #0, #20
   2c842:	4815      	ldr	r0, [pc, #84]	; (2c898 <rint+0x128>)
   2c844:	4a13      	ldr	r2, [pc, #76]	; (2c894 <rint+0x124>)
   2c846:	4335      	orrs	r5, r6
   2c848:	4018      	ands	r0, r3
   2c84a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   2c84e:	426b      	negs	r3, r5
   2c850:	432b      	orrs	r3, r5
   2c852:	0b1b      	lsrs	r3, r3, #12
   2c854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   2c858:	e9d2 6700 	ldrd	r6, r7, [r2]
   2c85c:	ea43 0900 	orr.w	r9, r3, r0
   2c860:	ee10 2a10 	vmov	r2, s0
   2c864:	4630      	mov	r0, r6
   2c866:	4639      	mov	r1, r7
   2c868:	464b      	mov	r3, r9
   2c86a:	f7e0 fa69 	bl	cd40 <__adddf3>
   2c86e:	463b      	mov	r3, r7
   2c870:	4632      	mov	r2, r6
   2c872:	e9cd 0100 	strd	r0, r1, [sp]
   2c876:	e9dd 0100 	ldrd	r0, r1, [sp]
   2c87a:	f7e0 fa5f 	bl	cd3c <__aeabi_dsub>
   2c87e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2c882:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   2c886:	ec41 0b10 	vmov	d0, r0, r1
   2c88a:	b003      	add	sp, #12
   2c88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c890:	000fffff 	.word	0x000fffff
   2c894:	00034668 	.word	0x00034668
   2c898:	fffe0000 	.word	0xfffe0000

0002c89c <finitef>:
   2c89c:	ee10 3a10 	vmov	r3, s0
   2c8a0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2c8a4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   2c8a8:	bfac      	ite	ge
   2c8aa:	2000      	movge	r0, #0
   2c8ac:	2001      	movlt	r0, #1
   2c8ae:	4770      	bx	lr

0002c8b0 <nanf>:
   2c8b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2c8b8 <nanf+0x8>
   2c8b4:	4770      	bx	lr
   2c8b6:	bf00      	nop
   2c8b8:	7fc00000 	.word	0x7fc00000

0002c8bc <rintf>:
   2c8bc:	eeb7 0a40 	vrintx.f32	s0, s0
   2c8c0:	4770      	bx	lr
   2c8c2:	bf00      	nop

0002c8c4 <scalbnf>:
   2c8c4:	b082      	sub	sp, #8
   2c8c6:	ed8d 0a01 	vstr	s0, [sp, #4]
   2c8ca:	9b01      	ldr	r3, [sp, #4]
   2c8cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2c8d0:	d029      	beq.n	2c926 <scalbnf+0x62>
   2c8d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2c8d6:	d222      	bcs.n	2c91e <scalbnf+0x5a>
   2c8d8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   2c8dc:	d127      	bne.n	2c92e <scalbnf+0x6a>
   2c8de:	ed9d 7a01 	vldr	s14, [sp, #4]
   2c8e2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 2c998 <scalbnf+0xd4>
   2c8e6:	4b2d      	ldr	r3, [pc, #180]	; (2c99c <scalbnf+0xd8>)
   2c8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
   2c8ec:	4298      	cmp	r0, r3
   2c8ee:	edcd 7a01 	vstr	s15, [sp, #4]
   2c8f2:	db3e      	blt.n	2c972 <scalbnf+0xae>
   2c8f4:	9b01      	ldr	r3, [sp, #4]
   2c8f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   2c8fa:	3a19      	subs	r2, #25
   2c8fc:	4402      	add	r2, r0
   2c8fe:	2afe      	cmp	r2, #254	; 0xfe
   2c900:	dd19      	ble.n	2c936 <scalbnf+0x72>
   2c902:	9b01      	ldr	r3, [sp, #4]
   2c904:	ed9f 0a26 	vldr	s0, [pc, #152]	; 2c9a0 <scalbnf+0xdc>
   2c908:	2b00      	cmp	r3, #0
   2c90a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 2c9a4 <scalbnf+0xe0>
   2c90e:	eef0 7a40 	vmov.f32	s15, s0
   2c912:	fe20 0a07 	vselge.f32	s0, s0, s14
   2c916:	ee20 0a27 	vmul.f32	s0, s0, s15
   2c91a:	b002      	add	sp, #8
   2c91c:	4770      	bx	lr
   2c91e:	ee30 0a00 	vadd.f32	s0, s0, s0
   2c922:	b002      	add	sp, #8
   2c924:	4770      	bx	lr
   2c926:	ed9d 0a01 	vldr	s0, [sp, #4]
   2c92a:	b002      	add	sp, #8
   2c92c:	4770      	bx	lr
   2c92e:	0dd2      	lsrs	r2, r2, #23
   2c930:	4402      	add	r2, r0
   2c932:	2afe      	cmp	r2, #254	; 0xfe
   2c934:	dce5      	bgt.n	2c902 <scalbnf+0x3e>
   2c936:	2a00      	cmp	r2, #0
   2c938:	dc13      	bgt.n	2c962 <scalbnf+0x9e>
   2c93a:	f112 0f16 	cmn.w	r2, #22
   2c93e:	da1f      	bge.n	2c980 <scalbnf+0xbc>
   2c940:	f24c 3350 	movw	r3, #50000	; 0xc350
   2c944:	4298      	cmp	r0, r3
   2c946:	9b01      	ldr	r3, [sp, #4]
   2c948:	dcdc      	bgt.n	2c904 <scalbnf+0x40>
   2c94a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 2c9a8 <scalbnf+0xe4>
   2c94e:	2b00      	cmp	r3, #0
   2c950:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2c9ac <scalbnf+0xe8>
   2c954:	eef0 7a40 	vmov.f32	s15, s0
   2c958:	fe20 0a07 	vselge.f32	s0, s0, s14
   2c95c:	ee20 0a27 	vmul.f32	s0, s0, s15
   2c960:	e7df      	b.n	2c922 <scalbnf+0x5e>
   2c962:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2c966:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2c96a:	ee00 3a10 	vmov	s0, r3
   2c96e:	b002      	add	sp, #8
   2c970:	4770      	bx	lr
   2c972:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 2c9a8 <scalbnf+0xe4>
   2c976:	eddd 7a01 	vldr	s15, [sp, #4]
   2c97a:	ee27 0a80 	vmul.f32	s0, s15, s0
   2c97e:	e7d0      	b.n	2c922 <scalbnf+0x5e>
   2c980:	3219      	adds	r2, #25
   2c982:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2c986:	eddf 7a0a 	vldr	s15, [pc, #40]	; 2c9b0 <scalbnf+0xec>
   2c98a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2c98e:	ee07 3a10 	vmov	s14, r3
   2c992:	ee27 0a27 	vmul.f32	s0, s14, s15
   2c996:	e7c4      	b.n	2c922 <scalbnf+0x5e>
   2c998:	4c000000 	.word	0x4c000000
   2c99c:	ffff3cb0 	.word	0xffff3cb0
   2c9a0:	7149f2ca 	.word	0x7149f2ca
   2c9a4:	f149f2ca 	.word	0xf149f2ca
   2c9a8:	0da24260 	.word	0x0da24260
   2c9ac:	8da24260 	.word	0x8da24260
   2c9b0:	33000000 	.word	0x33000000

0002c9b4 <calloc>:
   2c9b4:	4b02      	ldr	r3, [pc, #8]	; (2c9c0 <calloc+0xc>)
   2c9b6:	460a      	mov	r2, r1
   2c9b8:	4601      	mov	r1, r0
   2c9ba:	6818      	ldr	r0, [r3, #0]
   2c9bc:	f006 bf42 	b.w	33844 <_calloc_r>
   2c9c0:	2002014c 	.word	0x2002014c

0002c9c4 <malloc>:
   2c9c4:	4b02      	ldr	r3, [pc, #8]	; (2c9d0 <malloc+0xc>)
   2c9c6:	4601      	mov	r1, r0
   2c9c8:	6818      	ldr	r0, [r3, #0]
   2c9ca:	f000 b859 	b.w	2ca80 <_malloc_r>
   2c9ce:	bf00      	nop
   2c9d0:	2002014c 	.word	0x2002014c

0002c9d4 <free>:
   2c9d4:	4b02      	ldr	r3, [pc, #8]	; (2c9e0 <free+0xc>)
   2c9d6:	4601      	mov	r1, r0
   2c9d8:	6818      	ldr	r0, [r3, #0]
   2c9da:	f000 b803 	b.w	2c9e4 <_free_r>
   2c9de:	bf00      	nop
   2c9e0:	2002014c 	.word	0x2002014c

0002c9e4 <_free_r>:
   2c9e4:	b538      	push	{r3, r4, r5, lr}
   2c9e6:	4605      	mov	r5, r0
   2c9e8:	2900      	cmp	r1, #0
   2c9ea:	d045      	beq.n	2ca78 <_free_r+0x94>
   2c9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2c9f0:	1f0c      	subs	r4, r1, #4
   2c9f2:	2b00      	cmp	r3, #0
   2c9f4:	bfb8      	it	lt
   2c9f6:	18e4      	addlt	r4, r4, r3
   2c9f8:	f000 fd66 	bl	2d4c8 <__malloc_lock>
   2c9fc:	4a1f      	ldr	r2, [pc, #124]	; (2ca7c <_free_r+0x98>)
   2c9fe:	6813      	ldr	r3, [r2, #0]
   2ca00:	4610      	mov	r0, r2
   2ca02:	b933      	cbnz	r3, 2ca12 <_free_r+0x2e>
   2ca04:	6063      	str	r3, [r4, #4]
   2ca06:	6014      	str	r4, [r2, #0]
   2ca08:	4628      	mov	r0, r5
   2ca0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ca0e:	f000 bd61 	b.w	2d4d4 <__malloc_unlock>
   2ca12:	42a3      	cmp	r3, r4
   2ca14:	d90c      	bls.n	2ca30 <_free_r+0x4c>
   2ca16:	6821      	ldr	r1, [r4, #0]
   2ca18:	1862      	adds	r2, r4, r1
   2ca1a:	4293      	cmp	r3, r2
   2ca1c:	bf02      	ittt	eq
   2ca1e:	681a      	ldreq	r2, [r3, #0]
   2ca20:	685b      	ldreq	r3, [r3, #4]
   2ca22:	1852      	addeq	r2, r2, r1
   2ca24:	6063      	str	r3, [r4, #4]
   2ca26:	bf08      	it	eq
   2ca28:	6022      	streq	r2, [r4, #0]
   2ca2a:	6004      	str	r4, [r0, #0]
   2ca2c:	e7ec      	b.n	2ca08 <_free_r+0x24>
   2ca2e:	4613      	mov	r3, r2
   2ca30:	685a      	ldr	r2, [r3, #4]
   2ca32:	b10a      	cbz	r2, 2ca38 <_free_r+0x54>
   2ca34:	42a2      	cmp	r2, r4
   2ca36:	d9fa      	bls.n	2ca2e <_free_r+0x4a>
   2ca38:	6819      	ldr	r1, [r3, #0]
   2ca3a:	1858      	adds	r0, r3, r1
   2ca3c:	42a0      	cmp	r0, r4
   2ca3e:	d10b      	bne.n	2ca58 <_free_r+0x74>
   2ca40:	6820      	ldr	r0, [r4, #0]
   2ca42:	4401      	add	r1, r0
   2ca44:	1858      	adds	r0, r3, r1
   2ca46:	6019      	str	r1, [r3, #0]
   2ca48:	4282      	cmp	r2, r0
   2ca4a:	d1dd      	bne.n	2ca08 <_free_r+0x24>
   2ca4c:	6810      	ldr	r0, [r2, #0]
   2ca4e:	6852      	ldr	r2, [r2, #4]
   2ca50:	4401      	add	r1, r0
   2ca52:	605a      	str	r2, [r3, #4]
   2ca54:	6019      	str	r1, [r3, #0]
   2ca56:	e7d7      	b.n	2ca08 <_free_r+0x24>
   2ca58:	d902      	bls.n	2ca60 <_free_r+0x7c>
   2ca5a:	230c      	movs	r3, #12
   2ca5c:	602b      	str	r3, [r5, #0]
   2ca5e:	e7d3      	b.n	2ca08 <_free_r+0x24>
   2ca60:	6820      	ldr	r0, [r4, #0]
   2ca62:	1821      	adds	r1, r4, r0
   2ca64:	428a      	cmp	r2, r1
   2ca66:	bf02      	ittt	eq
   2ca68:	6811      	ldreq	r1, [r2, #0]
   2ca6a:	6852      	ldreq	r2, [r2, #4]
   2ca6c:	1809      	addeq	r1, r1, r0
   2ca6e:	6062      	str	r2, [r4, #4]
   2ca70:	bf08      	it	eq
   2ca72:	6021      	streq	r1, [r4, #0]
   2ca74:	605c      	str	r4, [r3, #4]
   2ca76:	e7c7      	b.n	2ca08 <_free_r+0x24>
   2ca78:	bd38      	pop	{r3, r4, r5, pc}
   2ca7a:	bf00      	nop
   2ca7c:	2002744c 	.word	0x2002744c

0002ca80 <_malloc_r>:
   2ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca82:	1ccd      	adds	r5, r1, #3
   2ca84:	4606      	mov	r6, r0
   2ca86:	f025 0503 	bic.w	r5, r5, #3
   2ca8a:	3508      	adds	r5, #8
   2ca8c:	2d0c      	cmp	r5, #12
   2ca8e:	bf38      	it	cc
   2ca90:	250c      	movcc	r5, #12
   2ca92:	2d00      	cmp	r5, #0
   2ca94:	db01      	blt.n	2ca9a <_malloc_r+0x1a>
   2ca96:	42a9      	cmp	r1, r5
   2ca98:	d903      	bls.n	2caa2 <_malloc_r+0x22>
   2ca9a:	230c      	movs	r3, #12
   2ca9c:	6033      	str	r3, [r6, #0]
   2ca9e:	2000      	movs	r0, #0
   2caa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2caa2:	f000 fd11 	bl	2d4c8 <__malloc_lock>
   2caa6:	4921      	ldr	r1, [pc, #132]	; (2cb2c <_malloc_r+0xac>)
   2caa8:	680a      	ldr	r2, [r1, #0]
   2caaa:	4614      	mov	r4, r2
   2caac:	b99c      	cbnz	r4, 2cad6 <_malloc_r+0x56>
   2caae:	4f20      	ldr	r7, [pc, #128]	; (2cb30 <_malloc_r+0xb0>)
   2cab0:	683b      	ldr	r3, [r7, #0]
   2cab2:	b923      	cbnz	r3, 2cabe <_malloc_r+0x3e>
   2cab4:	4621      	mov	r1, r4
   2cab6:	4630      	mov	r0, r6
   2cab8:	f000 fb7a 	bl	2d1b0 <_sbrk_r>
   2cabc:	6038      	str	r0, [r7, #0]
   2cabe:	4629      	mov	r1, r5
   2cac0:	4630      	mov	r0, r6
   2cac2:	f000 fb75 	bl	2d1b0 <_sbrk_r>
   2cac6:	1c43      	adds	r3, r0, #1
   2cac8:	d123      	bne.n	2cb12 <_malloc_r+0x92>
   2caca:	230c      	movs	r3, #12
   2cacc:	4630      	mov	r0, r6
   2cace:	6033      	str	r3, [r6, #0]
   2cad0:	f000 fd00 	bl	2d4d4 <__malloc_unlock>
   2cad4:	e7e3      	b.n	2ca9e <_malloc_r+0x1e>
   2cad6:	6823      	ldr	r3, [r4, #0]
   2cad8:	1b5b      	subs	r3, r3, r5
   2cada:	d417      	bmi.n	2cb0c <_malloc_r+0x8c>
   2cadc:	2b0b      	cmp	r3, #11
   2cade:	d903      	bls.n	2cae8 <_malloc_r+0x68>
   2cae0:	6023      	str	r3, [r4, #0]
   2cae2:	441c      	add	r4, r3
   2cae4:	6025      	str	r5, [r4, #0]
   2cae6:	e004      	b.n	2caf2 <_malloc_r+0x72>
   2cae8:	6863      	ldr	r3, [r4, #4]
   2caea:	42a2      	cmp	r2, r4
   2caec:	bf0c      	ite	eq
   2caee:	600b      	streq	r3, [r1, #0]
   2caf0:	6053      	strne	r3, [r2, #4]
   2caf2:	4630      	mov	r0, r6
   2caf4:	f000 fcee 	bl	2d4d4 <__malloc_unlock>
   2caf8:	f104 000b 	add.w	r0, r4, #11
   2cafc:	1d23      	adds	r3, r4, #4
   2cafe:	f020 0007 	bic.w	r0, r0, #7
   2cb02:	1ac2      	subs	r2, r0, r3
   2cb04:	d0cc      	beq.n	2caa0 <_malloc_r+0x20>
   2cb06:	1a1b      	subs	r3, r3, r0
   2cb08:	50a3      	str	r3, [r4, r2]
   2cb0a:	e7c9      	b.n	2caa0 <_malloc_r+0x20>
   2cb0c:	4622      	mov	r2, r4
   2cb0e:	6864      	ldr	r4, [r4, #4]
   2cb10:	e7cc      	b.n	2caac <_malloc_r+0x2c>
   2cb12:	1cc4      	adds	r4, r0, #3
   2cb14:	f024 0403 	bic.w	r4, r4, #3
   2cb18:	42a0      	cmp	r0, r4
   2cb1a:	d0e3      	beq.n	2cae4 <_malloc_r+0x64>
   2cb1c:	1a21      	subs	r1, r4, r0
   2cb1e:	4630      	mov	r0, r6
   2cb20:	f000 fb46 	bl	2d1b0 <_sbrk_r>
   2cb24:	3001      	adds	r0, #1
   2cb26:	d1dd      	bne.n	2cae4 <_malloc_r+0x64>
   2cb28:	e7cf      	b.n	2caca <_malloc_r+0x4a>
   2cb2a:	bf00      	nop
   2cb2c:	2002744c 	.word	0x2002744c
   2cb30:	20027450 	.word	0x20027450

0002cb34 <_printf_float>:
   2cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb38:	b08d      	sub	sp, #52	; 0x34
   2cb3a:	460c      	mov	r4, r1
   2cb3c:	4616      	mov	r6, r2
   2cb3e:	461f      	mov	r7, r3
   2cb40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2cb44:	4605      	mov	r5, r0
   2cb46:	f000 fcbb 	bl	2d4c0 <_localeconv_r>
   2cb4a:	6803      	ldr	r3, [r0, #0]
   2cb4c:	4618      	mov	r0, r3
   2cb4e:	9306      	str	r3, [sp, #24]
   2cb50:	f7e5 fa96 	bl	12080 <strlen>
   2cb54:	2300      	movs	r3, #0
   2cb56:	9007      	str	r0, [sp, #28]
   2cb58:	930a      	str	r3, [sp, #40]	; 0x28
   2cb5a:	f8d8 3000 	ldr.w	r3, [r8]
   2cb5e:	f894 a018 	ldrb.w	sl, [r4, #24]
   2cb62:	3307      	adds	r3, #7
   2cb64:	f8d4 b000 	ldr.w	fp, [r4]
   2cb68:	f023 0307 	bic.w	r3, r3, #7
   2cb6c:	f103 0208 	add.w	r2, r3, #8
   2cb70:	f8c8 2000 	str.w	r2, [r8]
   2cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cb78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2cb7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   2cb80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cb84:	ed8d 7b04 	vstr	d7, [sp, #16]
   2cb88:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   2cb8c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   2cb90:	4640      	mov	r0, r8
   2cb92:	4ba6      	ldr	r3, [pc, #664]	; (2ce2c <_printf_float+0x2f8>)
   2cb94:	4649      	mov	r1, r9
   2cb96:	f7e5 f8ef 	bl	11d78 <__aeabi_dcmpun>
   2cb9a:	bb70      	cbnz	r0, 2cbfa <_printf_float+0xc6>
   2cb9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cba0:	4ba2      	ldr	r3, [pc, #648]	; (2ce2c <_printf_float+0x2f8>)
   2cba2:	4640      	mov	r0, r8
   2cba4:	4649      	mov	r1, r9
   2cba6:	f7e0 fcfd 	bl	d5a4 <__aeabi_dcmple>
   2cbaa:	bb30      	cbnz	r0, 2cbfa <_printf_float+0xc6>
   2cbac:	2200      	movs	r2, #0
   2cbae:	2300      	movs	r3, #0
   2cbb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cbb4:	f7e0 fcec 	bl	d590 <__aeabi_dcmplt>
   2cbb8:	b110      	cbz	r0, 2cbc0 <_printf_float+0x8c>
   2cbba:	232d      	movs	r3, #45	; 0x2d
   2cbbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2cbc0:	4a9b      	ldr	r2, [pc, #620]	; (2ce30 <_printf_float+0x2fc>)
   2cbc2:	4b9c      	ldr	r3, [pc, #624]	; (2ce34 <_printf_float+0x300>)
   2cbc4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2cbc8:	bf94      	ite	ls
   2cbca:	4690      	movls	r8, r2
   2cbcc:	4698      	movhi	r8, r3
   2cbce:	f04f 0900 	mov.w	r9, #0
   2cbd2:	2303      	movs	r3, #3
   2cbd4:	f02b 0204 	bic.w	r2, fp, #4
   2cbd8:	6123      	str	r3, [r4, #16]
   2cbda:	6022      	str	r2, [r4, #0]
   2cbdc:	9700      	str	r7, [sp, #0]
   2cbde:	4633      	mov	r3, r6
   2cbe0:	aa0b      	add	r2, sp, #44	; 0x2c
   2cbe2:	4621      	mov	r1, r4
   2cbe4:	4628      	mov	r0, r5
   2cbe6:	f006 fecb 	bl	33980 <_printf_common>
   2cbea:	3001      	adds	r0, #1
   2cbec:	f040 808c 	bne.w	2cd08 <_printf_float+0x1d4>
   2cbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cbf4:	b00d      	add	sp, #52	; 0x34
   2cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2cbfe:	4610      	mov	r0, r2
   2cc00:	4619      	mov	r1, r3
   2cc02:	f7e5 f8b9 	bl	11d78 <__aeabi_dcmpun>
   2cc06:	b140      	cbz	r0, 2cc1a <_printf_float+0xe6>
   2cc08:	9b05      	ldr	r3, [sp, #20]
   2cc0a:	4a8b      	ldr	r2, [pc, #556]	; (2ce38 <_printf_float+0x304>)
   2cc0c:	2b00      	cmp	r3, #0
   2cc0e:	bfbc      	itt	lt
   2cc10:	232d      	movlt	r3, #45	; 0x2d
   2cc12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2cc16:	4b89      	ldr	r3, [pc, #548]	; (2ce3c <_printf_float+0x308>)
   2cc18:	e7d4      	b.n	2cbc4 <_printf_float+0x90>
   2cc1a:	6863      	ldr	r3, [r4, #4]
   2cc1c:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   2cc20:	1c5a      	adds	r2, r3, #1
   2cc22:	d13e      	bne.n	2cca2 <_printf_float+0x16e>
   2cc24:	2306      	movs	r3, #6
   2cc26:	6063      	str	r3, [r4, #4]
   2cc28:	2300      	movs	r3, #0
   2cc2a:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   2cc2e:	6861      	ldr	r1, [r4, #4]
   2cc30:	4628      	mov	r0, r5
   2cc32:	9303      	str	r3, [sp, #12]
   2cc34:	ab0a      	add	r3, sp, #40	; 0x28
   2cc36:	6022      	str	r2, [r4, #0]
   2cc38:	e9cd a301 	strd	sl, r3, [sp, #4]
   2cc3c:	ab09      	add	r3, sp, #36	; 0x24
   2cc3e:	ed9d 0b04 	vldr	d0, [sp, #16]
   2cc42:	9300      	str	r3, [sp, #0]
   2cc44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2cc48:	f006 fe0a 	bl	33860 <__cvt>
   2cc4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2cc50:	4680      	mov	r8, r0
   2cc52:	9909      	ldr	r1, [sp, #36]	; 0x24
   2cc54:	d108      	bne.n	2cc68 <_printf_float+0x134>
   2cc56:	1cc8      	adds	r0, r1, #3
   2cc58:	db02      	blt.n	2cc60 <_printf_float+0x12c>
   2cc5a:	6863      	ldr	r3, [r4, #4]
   2cc5c:	4299      	cmp	r1, r3
   2cc5e:	dd41      	ble.n	2cce4 <_printf_float+0x1b0>
   2cc60:	f1aa 0a02 	sub.w	sl, sl, #2
   2cc64:	fa5f fa8a 	uxtb.w	sl, sl
   2cc68:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2cc6c:	d820      	bhi.n	2ccb0 <_printf_float+0x17c>
   2cc6e:	3901      	subs	r1, #1
   2cc70:	4652      	mov	r2, sl
   2cc72:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2cc76:	9109      	str	r1, [sp, #36]	; 0x24
   2cc78:	f006 fe4f 	bl	3391a <__exponent>
   2cc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2cc7e:	4681      	mov	r9, r0
   2cc80:	1813      	adds	r3, r2, r0
   2cc82:	2a01      	cmp	r2, #1
   2cc84:	6123      	str	r3, [r4, #16]
   2cc86:	dc02      	bgt.n	2cc8e <_printf_float+0x15a>
   2cc88:	6822      	ldr	r2, [r4, #0]
   2cc8a:	07d2      	lsls	r2, r2, #31
   2cc8c:	d501      	bpl.n	2cc92 <_printf_float+0x15e>
   2cc8e:	3301      	adds	r3, #1
   2cc90:	6123      	str	r3, [r4, #16]
   2cc92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2cc96:	2b00      	cmp	r3, #0
   2cc98:	d0a0      	beq.n	2cbdc <_printf_float+0xa8>
   2cc9a:	232d      	movs	r3, #45	; 0x2d
   2cc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2cca0:	e79c      	b.n	2cbdc <_printf_float+0xa8>
   2cca2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2cca6:	d1bf      	bne.n	2cc28 <_printf_float+0xf4>
   2cca8:	2b00      	cmp	r3, #0
   2ccaa:	d1bd      	bne.n	2cc28 <_printf_float+0xf4>
   2ccac:	2301      	movs	r3, #1
   2ccae:	e7ba      	b.n	2cc26 <_printf_float+0xf2>
   2ccb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2ccb4:	d118      	bne.n	2cce8 <_printf_float+0x1b4>
   2ccb6:	2900      	cmp	r1, #0
   2ccb8:	6863      	ldr	r3, [r4, #4]
   2ccba:	dd0b      	ble.n	2ccd4 <_printf_float+0x1a0>
   2ccbc:	6121      	str	r1, [r4, #16]
   2ccbe:	b913      	cbnz	r3, 2ccc6 <_printf_float+0x192>
   2ccc0:	6822      	ldr	r2, [r4, #0]
   2ccc2:	07d0      	lsls	r0, r2, #31
   2ccc4:	d502      	bpl.n	2cccc <_printf_float+0x198>
   2ccc6:	3301      	adds	r3, #1
   2ccc8:	440b      	add	r3, r1
   2ccca:	6123      	str	r3, [r4, #16]
   2cccc:	65a1      	str	r1, [r4, #88]	; 0x58
   2ccce:	f04f 0900 	mov.w	r9, #0
   2ccd2:	e7de      	b.n	2cc92 <_printf_float+0x15e>
   2ccd4:	b913      	cbnz	r3, 2ccdc <_printf_float+0x1a8>
   2ccd6:	6822      	ldr	r2, [r4, #0]
   2ccd8:	07d2      	lsls	r2, r2, #31
   2ccda:	d501      	bpl.n	2cce0 <_printf_float+0x1ac>
   2ccdc:	3302      	adds	r3, #2
   2ccde:	e7f4      	b.n	2ccca <_printf_float+0x196>
   2cce0:	2301      	movs	r3, #1
   2cce2:	e7f2      	b.n	2ccca <_printf_float+0x196>
   2cce4:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2cce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ccea:	4299      	cmp	r1, r3
   2ccec:	db05      	blt.n	2ccfa <_printf_float+0x1c6>
   2ccee:	6823      	ldr	r3, [r4, #0]
   2ccf0:	6121      	str	r1, [r4, #16]
   2ccf2:	07d8      	lsls	r0, r3, #31
   2ccf4:	d5ea      	bpl.n	2cccc <_printf_float+0x198>
   2ccf6:	1c4b      	adds	r3, r1, #1
   2ccf8:	e7e7      	b.n	2ccca <_printf_float+0x196>
   2ccfa:	2900      	cmp	r1, #0
   2ccfc:	bfd4      	ite	le
   2ccfe:	f1c1 0202 	rsble	r2, r1, #2
   2cd02:	2201      	movgt	r2, #1
   2cd04:	4413      	add	r3, r2
   2cd06:	e7e0      	b.n	2ccca <_printf_float+0x196>
   2cd08:	6823      	ldr	r3, [r4, #0]
   2cd0a:	055a      	lsls	r2, r3, #21
   2cd0c:	d407      	bmi.n	2cd1e <_printf_float+0x1ea>
   2cd0e:	6923      	ldr	r3, [r4, #16]
   2cd10:	4642      	mov	r2, r8
   2cd12:	4631      	mov	r1, r6
   2cd14:	4628      	mov	r0, r5
   2cd16:	47b8      	blx	r7
   2cd18:	3001      	adds	r0, #1
   2cd1a:	d12b      	bne.n	2cd74 <_printf_float+0x240>
   2cd1c:	e768      	b.n	2cbf0 <_printf_float+0xbc>
   2cd1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2cd22:	f240 80dc 	bls.w	2cede <_printf_float+0x3aa>
   2cd26:	2200      	movs	r2, #0
   2cd28:	2300      	movs	r3, #0
   2cd2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2cd2e:	f7e0 fc25 	bl	d57c <__aeabi_dcmpeq>
   2cd32:	2800      	cmp	r0, #0
   2cd34:	d033      	beq.n	2cd9e <_printf_float+0x26a>
   2cd36:	2301      	movs	r3, #1
   2cd38:	4a41      	ldr	r2, [pc, #260]	; (2ce40 <_printf_float+0x30c>)
   2cd3a:	4631      	mov	r1, r6
   2cd3c:	4628      	mov	r0, r5
   2cd3e:	47b8      	blx	r7
   2cd40:	3001      	adds	r0, #1
   2cd42:	f43f af55 	beq.w	2cbf0 <_printf_float+0xbc>
   2cd46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2cd4a:	429a      	cmp	r2, r3
   2cd4c:	db02      	blt.n	2cd54 <_printf_float+0x220>
   2cd4e:	6823      	ldr	r3, [r4, #0]
   2cd50:	07d8      	lsls	r0, r3, #31
   2cd52:	d50f      	bpl.n	2cd74 <_printf_float+0x240>
   2cd54:	4631      	mov	r1, r6
   2cd56:	4628      	mov	r0, r5
   2cd58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2cd5c:	47b8      	blx	r7
   2cd5e:	3001      	adds	r0, #1
   2cd60:	f43f af46 	beq.w	2cbf0 <_printf_float+0xbc>
   2cd64:	f04f 0800 	mov.w	r8, #0
   2cd68:	f104 091a 	add.w	r9, r4, #26
   2cd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cd6e:	3b01      	subs	r3, #1
   2cd70:	4543      	cmp	r3, r8
   2cd72:	dc09      	bgt.n	2cd88 <_printf_float+0x254>
   2cd74:	6823      	ldr	r3, [r4, #0]
   2cd76:	079b      	lsls	r3, r3, #30
   2cd78:	f100 8101 	bmi.w	2cf7e <_printf_float+0x44a>
   2cd7c:	68e0      	ldr	r0, [r4, #12]
   2cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cd80:	4298      	cmp	r0, r3
   2cd82:	bfb8      	it	lt
   2cd84:	4618      	movlt	r0, r3
   2cd86:	e735      	b.n	2cbf4 <_printf_float+0xc0>
   2cd88:	2301      	movs	r3, #1
   2cd8a:	464a      	mov	r2, r9
   2cd8c:	4631      	mov	r1, r6
   2cd8e:	4628      	mov	r0, r5
   2cd90:	47b8      	blx	r7
   2cd92:	3001      	adds	r0, #1
   2cd94:	f43f af2c 	beq.w	2cbf0 <_printf_float+0xbc>
   2cd98:	f108 0801 	add.w	r8, r8, #1
   2cd9c:	e7e6      	b.n	2cd6c <_printf_float+0x238>
   2cd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cda0:	2b00      	cmp	r3, #0
   2cda2:	dc2b      	bgt.n	2cdfc <_printf_float+0x2c8>
   2cda4:	2301      	movs	r3, #1
   2cda6:	4a26      	ldr	r2, [pc, #152]	; (2ce40 <_printf_float+0x30c>)
   2cda8:	4631      	mov	r1, r6
   2cdaa:	4628      	mov	r0, r5
   2cdac:	47b8      	blx	r7
   2cdae:	3001      	adds	r0, #1
   2cdb0:	f43f af1e 	beq.w	2cbf0 <_printf_float+0xbc>
   2cdb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2cdb8:	4313      	orrs	r3, r2
   2cdba:	d102      	bne.n	2cdc2 <_printf_float+0x28e>
   2cdbc:	6823      	ldr	r3, [r4, #0]
   2cdbe:	07d9      	lsls	r1, r3, #31
   2cdc0:	d5d8      	bpl.n	2cd74 <_printf_float+0x240>
   2cdc2:	4631      	mov	r1, r6
   2cdc4:	4628      	mov	r0, r5
   2cdc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2cdca:	47b8      	blx	r7
   2cdcc:	3001      	adds	r0, #1
   2cdce:	f43f af0f 	beq.w	2cbf0 <_printf_float+0xbc>
   2cdd2:	f04f 0900 	mov.w	r9, #0
   2cdd6:	f104 0a1a 	add.w	sl, r4, #26
   2cdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cddc:	425b      	negs	r3, r3
   2cdde:	454b      	cmp	r3, r9
   2cde0:	dc01      	bgt.n	2cde6 <_printf_float+0x2b2>
   2cde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cde4:	e794      	b.n	2cd10 <_printf_float+0x1dc>
   2cde6:	2301      	movs	r3, #1
   2cde8:	4652      	mov	r2, sl
   2cdea:	4631      	mov	r1, r6
   2cdec:	4628      	mov	r0, r5
   2cdee:	47b8      	blx	r7
   2cdf0:	3001      	adds	r0, #1
   2cdf2:	f43f aefd 	beq.w	2cbf0 <_printf_float+0xbc>
   2cdf6:	f109 0901 	add.w	r9, r9, #1
   2cdfa:	e7ee      	b.n	2cdda <_printf_float+0x2a6>
   2cdfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2cdfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2ce00:	429a      	cmp	r2, r3
   2ce02:	bfa8      	it	ge
   2ce04:	461a      	movge	r2, r3
   2ce06:	2a00      	cmp	r2, #0
   2ce08:	4691      	mov	r9, r2
   2ce0a:	dd07      	ble.n	2ce1c <_printf_float+0x2e8>
   2ce0c:	4613      	mov	r3, r2
   2ce0e:	4631      	mov	r1, r6
   2ce10:	4642      	mov	r2, r8
   2ce12:	4628      	mov	r0, r5
   2ce14:	47b8      	blx	r7
   2ce16:	3001      	adds	r0, #1
   2ce18:	f43f aeea 	beq.w	2cbf0 <_printf_float+0xbc>
   2ce1c:	f104 031a 	add.w	r3, r4, #26
   2ce20:	f04f 0b00 	mov.w	fp, #0
   2ce24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2ce28:	9304      	str	r3, [sp, #16]
   2ce2a:	e015      	b.n	2ce58 <_printf_float+0x324>
   2ce2c:	7fefffff 	.word	0x7fefffff
   2ce30:	00037819 	.word	0x00037819
   2ce34:	0003781d 	.word	0x0003781d
   2ce38:	00037821 	.word	0x00037821
   2ce3c:	00037825 	.word	0x00037825
   2ce40:	00037308 	.word	0x00037308
   2ce44:	2301      	movs	r3, #1
   2ce46:	9a04      	ldr	r2, [sp, #16]
   2ce48:	4631      	mov	r1, r6
   2ce4a:	4628      	mov	r0, r5
   2ce4c:	47b8      	blx	r7
   2ce4e:	3001      	adds	r0, #1
   2ce50:	f43f aece 	beq.w	2cbf0 <_printf_float+0xbc>
   2ce54:	f10b 0b01 	add.w	fp, fp, #1
   2ce58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2ce5c:	ebaa 0309 	sub.w	r3, sl, r9
   2ce60:	455b      	cmp	r3, fp
   2ce62:	dcef      	bgt.n	2ce44 <_printf_float+0x310>
   2ce64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2ce68:	429a      	cmp	r2, r3
   2ce6a:	db1b      	blt.n	2cea4 <_printf_float+0x370>
   2ce6c:	6823      	ldr	r3, [r4, #0]
   2ce6e:	07da      	lsls	r2, r3, #31
   2ce70:	d418      	bmi.n	2cea4 <_printf_float+0x370>
   2ce72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2ce76:	4592      	cmp	sl, r2
   2ce78:	db1c      	blt.n	2ceb4 <_printf_float+0x380>
   2ce7a:	eba3 090a 	sub.w	r9, r3, sl
   2ce7e:	f1b9 0f00 	cmp.w	r9, #0
   2ce82:	dd08      	ble.n	2ce96 <_printf_float+0x362>
   2ce84:	464b      	mov	r3, r9
   2ce86:	eb08 020a 	add.w	r2, r8, sl
   2ce8a:	4631      	mov	r1, r6
   2ce8c:	4628      	mov	r0, r5
   2ce8e:	47b8      	blx	r7
   2ce90:	3001      	adds	r0, #1
   2ce92:	f43f aead 	beq.w	2cbf0 <_printf_float+0xbc>
   2ce96:	f04f 0800 	mov.w	r8, #0
   2ce9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2ce9e:	f104 0a1a 	add.w	sl, r4, #26
   2cea2:	e014      	b.n	2cece <_printf_float+0x39a>
   2cea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2cea8:	4631      	mov	r1, r6
   2ceaa:	4628      	mov	r0, r5
   2ceac:	47b8      	blx	r7
   2ceae:	3001      	adds	r0, #1
   2ceb0:	d1df      	bne.n	2ce72 <_printf_float+0x33e>
   2ceb2:	e69d      	b.n	2cbf0 <_printf_float+0xbc>
   2ceb4:	eba3 0902 	sub.w	r9, r3, r2
   2ceb8:	e7e1      	b.n	2ce7e <_printf_float+0x34a>
   2ceba:	2301      	movs	r3, #1
   2cebc:	4652      	mov	r2, sl
   2cebe:	4631      	mov	r1, r6
   2cec0:	4628      	mov	r0, r5
   2cec2:	47b8      	blx	r7
   2cec4:	3001      	adds	r0, #1
   2cec6:	f43f ae93 	beq.w	2cbf0 <_printf_float+0xbc>
   2ceca:	f108 0801 	add.w	r8, r8, #1
   2cece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2ced2:	1a9b      	subs	r3, r3, r2
   2ced4:	eba3 0309 	sub.w	r3, r3, r9
   2ced8:	4543      	cmp	r3, r8
   2ceda:	dcee      	bgt.n	2ceba <_printf_float+0x386>
   2cedc:	e74a      	b.n	2cd74 <_printf_float+0x240>
   2cede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2cee0:	2a01      	cmp	r2, #1
   2cee2:	dc01      	bgt.n	2cee8 <_printf_float+0x3b4>
   2cee4:	07db      	lsls	r3, r3, #31
   2cee6:	d537      	bpl.n	2cf58 <_printf_float+0x424>
   2cee8:	2301      	movs	r3, #1
   2ceea:	4642      	mov	r2, r8
   2ceec:	4631      	mov	r1, r6
   2ceee:	4628      	mov	r0, r5
   2cef0:	47b8      	blx	r7
   2cef2:	3001      	adds	r0, #1
   2cef4:	f43f ae7c 	beq.w	2cbf0 <_printf_float+0xbc>
   2cef8:	4631      	mov	r1, r6
   2cefa:	4628      	mov	r0, r5
   2cefc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2cf00:	47b8      	blx	r7
   2cf02:	3001      	adds	r0, #1
   2cf04:	f43f ae74 	beq.w	2cbf0 <_printf_float+0xbc>
   2cf08:	2200      	movs	r2, #0
   2cf0a:	2300      	movs	r3, #0
   2cf0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2cf10:	f7e0 fb34 	bl	d57c <__aeabi_dcmpeq>
   2cf14:	b9d8      	cbnz	r0, 2cf4e <_printf_float+0x41a>
   2cf16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf18:	f108 0201 	add.w	r2, r8, #1
   2cf1c:	3b01      	subs	r3, #1
   2cf1e:	4631      	mov	r1, r6
   2cf20:	4628      	mov	r0, r5
   2cf22:	47b8      	blx	r7
   2cf24:	3001      	adds	r0, #1
   2cf26:	d10e      	bne.n	2cf46 <_printf_float+0x412>
   2cf28:	e662      	b.n	2cbf0 <_printf_float+0xbc>
   2cf2a:	2301      	movs	r3, #1
   2cf2c:	4652      	mov	r2, sl
   2cf2e:	4631      	mov	r1, r6
   2cf30:	4628      	mov	r0, r5
   2cf32:	47b8      	blx	r7
   2cf34:	3001      	adds	r0, #1
   2cf36:	f43f ae5b 	beq.w	2cbf0 <_printf_float+0xbc>
   2cf3a:	f108 0801 	add.w	r8, r8, #1
   2cf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf40:	3b01      	subs	r3, #1
   2cf42:	4543      	cmp	r3, r8
   2cf44:	dcf1      	bgt.n	2cf2a <_printf_float+0x3f6>
   2cf46:	464b      	mov	r3, r9
   2cf48:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2cf4c:	e6e1      	b.n	2cd12 <_printf_float+0x1de>
   2cf4e:	f04f 0800 	mov.w	r8, #0
   2cf52:	f104 0a1a 	add.w	sl, r4, #26
   2cf56:	e7f2      	b.n	2cf3e <_printf_float+0x40a>
   2cf58:	2301      	movs	r3, #1
   2cf5a:	4642      	mov	r2, r8
   2cf5c:	e7df      	b.n	2cf1e <_printf_float+0x3ea>
   2cf5e:	2301      	movs	r3, #1
   2cf60:	464a      	mov	r2, r9
   2cf62:	4631      	mov	r1, r6
   2cf64:	4628      	mov	r0, r5
   2cf66:	47b8      	blx	r7
   2cf68:	3001      	adds	r0, #1
   2cf6a:	f43f ae41 	beq.w	2cbf0 <_printf_float+0xbc>
   2cf6e:	f108 0801 	add.w	r8, r8, #1
   2cf72:	68e3      	ldr	r3, [r4, #12]
   2cf74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cf76:	1a9b      	subs	r3, r3, r2
   2cf78:	4543      	cmp	r3, r8
   2cf7a:	dcf0      	bgt.n	2cf5e <_printf_float+0x42a>
   2cf7c:	e6fe      	b.n	2cd7c <_printf_float+0x248>
   2cf7e:	f04f 0800 	mov.w	r8, #0
   2cf82:	f104 0919 	add.w	r9, r4, #25
   2cf86:	e7f4      	b.n	2cf72 <_printf_float+0x43e>

0002cf88 <_printf_i>:
   2cf88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cf8c:	4606      	mov	r6, r0
   2cf8e:	460c      	mov	r4, r1
   2cf90:	f101 0043 	add.w	r0, r1, #67	; 0x43
   2cf94:	7e09      	ldrb	r1, [r1, #24]
   2cf96:	b085      	sub	sp, #20
   2cf98:	4698      	mov	r8, r3
   2cf9a:	296e      	cmp	r1, #110	; 0x6e
   2cf9c:	4617      	mov	r7, r2
   2cf9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cfa0:	f000 80ba 	beq.w	2d118 <_printf_i+0x190>
   2cfa4:	d824      	bhi.n	2cff0 <_printf_i+0x68>
   2cfa6:	2963      	cmp	r1, #99	; 0x63
   2cfa8:	d039      	beq.n	2d01e <_printf_i+0x96>
   2cfaa:	d80a      	bhi.n	2cfc2 <_printf_i+0x3a>
   2cfac:	2900      	cmp	r1, #0
   2cfae:	f000 80c3 	beq.w	2d138 <_printf_i+0x1b0>
   2cfb2:	2958      	cmp	r1, #88	; 0x58
   2cfb4:	f000 8091 	beq.w	2d0da <_printf_i+0x152>
   2cfb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2cfbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   2cfc0:	e035      	b.n	2d02e <_printf_i+0xa6>
   2cfc2:	2964      	cmp	r1, #100	; 0x64
   2cfc4:	d001      	beq.n	2cfca <_printf_i+0x42>
   2cfc6:	2969      	cmp	r1, #105	; 0x69
   2cfc8:	d1f6      	bne.n	2cfb8 <_printf_i+0x30>
   2cfca:	6825      	ldr	r5, [r4, #0]
   2cfcc:	681a      	ldr	r2, [r3, #0]
   2cfce:	f015 0f80 	tst.w	r5, #128	; 0x80
   2cfd2:	f102 0104 	add.w	r1, r2, #4
   2cfd6:	d02c      	beq.n	2d032 <_printf_i+0xaa>
   2cfd8:	6812      	ldr	r2, [r2, #0]
   2cfda:	6019      	str	r1, [r3, #0]
   2cfdc:	2a00      	cmp	r2, #0
   2cfde:	da03      	bge.n	2cfe8 <_printf_i+0x60>
   2cfe0:	232d      	movs	r3, #45	; 0x2d
   2cfe2:	4252      	negs	r2, r2
   2cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2cfe8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 2d1a8 <_printf_i+0x220>
   2cfec:	230a      	movs	r3, #10
   2cfee:	e03f      	b.n	2d070 <_printf_i+0xe8>
   2cff0:	2973      	cmp	r1, #115	; 0x73
   2cff2:	f000 80a5 	beq.w	2d140 <_printf_i+0x1b8>
   2cff6:	d808      	bhi.n	2d00a <_printf_i+0x82>
   2cff8:	296f      	cmp	r1, #111	; 0x6f
   2cffa:	d021      	beq.n	2d040 <_printf_i+0xb8>
   2cffc:	2970      	cmp	r1, #112	; 0x70
   2cffe:	d1db      	bne.n	2cfb8 <_printf_i+0x30>
   2d000:	6822      	ldr	r2, [r4, #0]
   2d002:	f042 0220 	orr.w	r2, r2, #32
   2d006:	6022      	str	r2, [r4, #0]
   2d008:	e003      	b.n	2d012 <_printf_i+0x8a>
   2d00a:	2975      	cmp	r1, #117	; 0x75
   2d00c:	d018      	beq.n	2d040 <_printf_i+0xb8>
   2d00e:	2978      	cmp	r1, #120	; 0x78
   2d010:	d1d2      	bne.n	2cfb8 <_printf_i+0x30>
   2d012:	2278      	movs	r2, #120	; 0x78
   2d014:	f8df c194 	ldr.w	ip, [pc, #404]	; 2d1ac <_printf_i+0x224>
   2d018:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   2d01c:	e061      	b.n	2d0e2 <_printf_i+0x15a>
   2d01e:	681a      	ldr	r2, [r3, #0]
   2d020:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2d024:	1d11      	adds	r1, r2, #4
   2d026:	6019      	str	r1, [r3, #0]
   2d028:	6813      	ldr	r3, [r2, #0]
   2d02a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2d02e:	2301      	movs	r3, #1
   2d030:	e093      	b.n	2d15a <_printf_i+0x1d2>
   2d032:	6812      	ldr	r2, [r2, #0]
   2d034:	f015 0f40 	tst.w	r5, #64	; 0x40
   2d038:	6019      	str	r1, [r3, #0]
   2d03a:	bf18      	it	ne
   2d03c:	b212      	sxthne	r2, r2
   2d03e:	e7cd      	b.n	2cfdc <_printf_i+0x54>
   2d040:	f8d4 c000 	ldr.w	ip, [r4]
   2d044:	681a      	ldr	r2, [r3, #0]
   2d046:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2d04a:	f102 0504 	add.w	r5, r2, #4
   2d04e:	601d      	str	r5, [r3, #0]
   2d050:	d001      	beq.n	2d056 <_printf_i+0xce>
   2d052:	6812      	ldr	r2, [r2, #0]
   2d054:	e003      	b.n	2d05e <_printf_i+0xd6>
   2d056:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2d05a:	d0fa      	beq.n	2d052 <_printf_i+0xca>
   2d05c:	8812      	ldrh	r2, [r2, #0]
   2d05e:	296f      	cmp	r1, #111	; 0x6f
   2d060:	f8df c144 	ldr.w	ip, [pc, #324]	; 2d1a8 <_printf_i+0x220>
   2d064:	bf0c      	ite	eq
   2d066:	2308      	moveq	r3, #8
   2d068:	230a      	movne	r3, #10
   2d06a:	2100      	movs	r1, #0
   2d06c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2d070:	6865      	ldr	r5, [r4, #4]
   2d072:	2d00      	cmp	r5, #0
   2d074:	60a5      	str	r5, [r4, #8]
   2d076:	bfa2      	ittt	ge
   2d078:	6821      	ldrge	r1, [r4, #0]
   2d07a:	f021 0104 	bicge.w	r1, r1, #4
   2d07e:	6021      	strge	r1, [r4, #0]
   2d080:	b90a      	cbnz	r2, 2d086 <_printf_i+0xfe>
   2d082:	2d00      	cmp	r5, #0
   2d084:	d046      	beq.n	2d114 <_printf_i+0x18c>
   2d086:	4605      	mov	r5, r0
   2d088:	4293      	cmp	r3, r2
   2d08a:	fbb2 f1f3 	udiv	r1, r2, r3
   2d08e:	fb03 2e11 	mls	lr, r3, r1, r2
   2d092:	f81c e00e 	ldrb.w	lr, [ip, lr]
   2d096:	f805 ed01 	strb.w	lr, [r5, #-1]!
   2d09a:	d939      	bls.n	2d110 <_printf_i+0x188>
   2d09c:	2b08      	cmp	r3, #8
   2d09e:	d10b      	bne.n	2d0b8 <_printf_i+0x130>
   2d0a0:	6823      	ldr	r3, [r4, #0]
   2d0a2:	07da      	lsls	r2, r3, #31
   2d0a4:	d508      	bpl.n	2d0b8 <_printf_i+0x130>
   2d0a6:	6923      	ldr	r3, [r4, #16]
   2d0a8:	6862      	ldr	r2, [r4, #4]
   2d0aa:	429a      	cmp	r2, r3
   2d0ac:	bfde      	ittt	le
   2d0ae:	2330      	movle	r3, #48	; 0x30
   2d0b0:	f805 3c01 	strble.w	r3, [r5, #-1]
   2d0b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   2d0b8:	1b40      	subs	r0, r0, r5
   2d0ba:	6120      	str	r0, [r4, #16]
   2d0bc:	f8cd 8000 	str.w	r8, [sp]
   2d0c0:	463b      	mov	r3, r7
   2d0c2:	aa03      	add	r2, sp, #12
   2d0c4:	4621      	mov	r1, r4
   2d0c6:	4630      	mov	r0, r6
   2d0c8:	f006 fc5a 	bl	33980 <_printf_common>
   2d0cc:	3001      	adds	r0, #1
   2d0ce:	d149      	bne.n	2d164 <_printf_i+0x1dc>
   2d0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d0d4:	b005      	add	sp, #20
   2d0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d0da:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2d1a8 <_printf_i+0x220>
   2d0de:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   2d0e2:	681d      	ldr	r5, [r3, #0]
   2d0e4:	6821      	ldr	r1, [r4, #0]
   2d0e6:	f855 2b04 	ldr.w	r2, [r5], #4
   2d0ea:	601d      	str	r5, [r3, #0]
   2d0ec:	060d      	lsls	r5, r1, #24
   2d0ee:	d50b      	bpl.n	2d108 <_printf_i+0x180>
   2d0f0:	07cd      	lsls	r5, r1, #31
   2d0f2:	bf44      	itt	mi
   2d0f4:	f041 0120 	orrmi.w	r1, r1, #32
   2d0f8:	6021      	strmi	r1, [r4, #0]
   2d0fa:	b91a      	cbnz	r2, 2d104 <_printf_i+0x17c>
   2d0fc:	6823      	ldr	r3, [r4, #0]
   2d0fe:	f023 0320 	bic.w	r3, r3, #32
   2d102:	6023      	str	r3, [r4, #0]
   2d104:	2310      	movs	r3, #16
   2d106:	e7b0      	b.n	2d06a <_printf_i+0xe2>
   2d108:	064b      	lsls	r3, r1, #25
   2d10a:	bf48      	it	mi
   2d10c:	b292      	uxthmi	r2, r2
   2d10e:	e7ef      	b.n	2d0f0 <_printf_i+0x168>
   2d110:	460a      	mov	r2, r1
   2d112:	e7b9      	b.n	2d088 <_printf_i+0x100>
   2d114:	4605      	mov	r5, r0
   2d116:	e7c1      	b.n	2d09c <_printf_i+0x114>
   2d118:	681a      	ldr	r2, [r3, #0]
   2d11a:	f8d4 c000 	ldr.w	ip, [r4]
   2d11e:	1d15      	adds	r5, r2, #4
   2d120:	6961      	ldr	r1, [r4, #20]
   2d122:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2d126:	601d      	str	r5, [r3, #0]
   2d128:	6813      	ldr	r3, [r2, #0]
   2d12a:	d001      	beq.n	2d130 <_printf_i+0x1a8>
   2d12c:	6019      	str	r1, [r3, #0]
   2d12e:	e003      	b.n	2d138 <_printf_i+0x1b0>
   2d130:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2d134:	d0fa      	beq.n	2d12c <_printf_i+0x1a4>
   2d136:	8019      	strh	r1, [r3, #0]
   2d138:	2300      	movs	r3, #0
   2d13a:	4605      	mov	r5, r0
   2d13c:	6123      	str	r3, [r4, #16]
   2d13e:	e7bd      	b.n	2d0bc <_printf_i+0x134>
   2d140:	681a      	ldr	r2, [r3, #0]
   2d142:	1d11      	adds	r1, r2, #4
   2d144:	6019      	str	r1, [r3, #0]
   2d146:	2100      	movs	r1, #0
   2d148:	6815      	ldr	r5, [r2, #0]
   2d14a:	6862      	ldr	r2, [r4, #4]
   2d14c:	4628      	mov	r0, r5
   2d14e:	f006 fb1b 	bl	33788 <memchr>
   2d152:	b108      	cbz	r0, 2d158 <_printf_i+0x1d0>
   2d154:	1b40      	subs	r0, r0, r5
   2d156:	6060      	str	r0, [r4, #4]
   2d158:	6863      	ldr	r3, [r4, #4]
   2d15a:	6123      	str	r3, [r4, #16]
   2d15c:	2300      	movs	r3, #0
   2d15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d162:	e7ab      	b.n	2d0bc <_printf_i+0x134>
   2d164:	6923      	ldr	r3, [r4, #16]
   2d166:	462a      	mov	r2, r5
   2d168:	4639      	mov	r1, r7
   2d16a:	4630      	mov	r0, r6
   2d16c:	47c0      	blx	r8
   2d16e:	3001      	adds	r0, #1
   2d170:	d0ae      	beq.n	2d0d0 <_printf_i+0x148>
   2d172:	6823      	ldr	r3, [r4, #0]
   2d174:	079b      	lsls	r3, r3, #30
   2d176:	d413      	bmi.n	2d1a0 <_printf_i+0x218>
   2d178:	68e0      	ldr	r0, [r4, #12]
   2d17a:	9b03      	ldr	r3, [sp, #12]
   2d17c:	4298      	cmp	r0, r3
   2d17e:	bfb8      	it	lt
   2d180:	4618      	movlt	r0, r3
   2d182:	e7a7      	b.n	2d0d4 <_printf_i+0x14c>
   2d184:	2301      	movs	r3, #1
   2d186:	464a      	mov	r2, r9
   2d188:	4639      	mov	r1, r7
   2d18a:	4630      	mov	r0, r6
   2d18c:	47c0      	blx	r8
   2d18e:	3001      	adds	r0, #1
   2d190:	d09e      	beq.n	2d0d0 <_printf_i+0x148>
   2d192:	3501      	adds	r5, #1
   2d194:	68e3      	ldr	r3, [r4, #12]
   2d196:	9a03      	ldr	r2, [sp, #12]
   2d198:	1a9b      	subs	r3, r3, r2
   2d19a:	42ab      	cmp	r3, r5
   2d19c:	dcf2      	bgt.n	2d184 <_printf_i+0x1fc>
   2d19e:	e7eb      	b.n	2d178 <_printf_i+0x1f0>
   2d1a0:	2500      	movs	r5, #0
   2d1a2:	f104 0919 	add.w	r9, r4, #25
   2d1a6:	e7f5      	b.n	2d194 <_printf_i+0x20c>
   2d1a8:	00037829 	.word	0x00037829
   2d1ac:	0003783a 	.word	0x0003783a

0002d1b0 <_sbrk_r>:
   2d1b0:	b538      	push	{r3, r4, r5, lr}
   2d1b2:	2300      	movs	r3, #0
   2d1b4:	4c05      	ldr	r4, [pc, #20]	; (2d1cc <_sbrk_r+0x1c>)
   2d1b6:	4605      	mov	r5, r0
   2d1b8:	4608      	mov	r0, r1
   2d1ba:	6023      	str	r3, [r4, #0]
   2d1bc:	f7ec f98c 	bl	194d8 <_sbrk>
   2d1c0:	1c43      	adds	r3, r0, #1
   2d1c2:	d102      	bne.n	2d1ca <_sbrk_r+0x1a>
   2d1c4:	6823      	ldr	r3, [r4, #0]
   2d1c6:	b103      	cbz	r3, 2d1ca <_sbrk_r+0x1a>
   2d1c8:	602b      	str	r3, [r5, #0]
   2d1ca:	bd38      	pop	{r3, r4, r5, pc}
   2d1cc:	20028ff8 	.word	0x20028ff8

0002d1d0 <sniprintf>:
   2d1d0:	b40c      	push	{r2, r3}
   2d1d2:	4b18      	ldr	r3, [pc, #96]	; (2d234 <sniprintf+0x64>)
   2d1d4:	b530      	push	{r4, r5, lr}
   2d1d6:	1e0c      	subs	r4, r1, #0
   2d1d8:	b09d      	sub	sp, #116	; 0x74
   2d1da:	681d      	ldr	r5, [r3, #0]
   2d1dc:	da08      	bge.n	2d1f0 <sniprintf+0x20>
   2d1de:	238b      	movs	r3, #139	; 0x8b
   2d1e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d1e4:	602b      	str	r3, [r5, #0]
   2d1e6:	b01d      	add	sp, #116	; 0x74
   2d1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2d1ec:	b002      	add	sp, #8
   2d1ee:	4770      	bx	lr
   2d1f0:	f44f 7302 	mov.w	r3, #520	; 0x208
   2d1f4:	9002      	str	r0, [sp, #8]
   2d1f6:	9006      	str	r0, [sp, #24]
   2d1f8:	a902      	add	r1, sp, #8
   2d1fa:	f8ad 3014 	strh.w	r3, [sp, #20]
   2d1fe:	bf14      	ite	ne
   2d200:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2d204:	4623      	moveq	r3, r4
   2d206:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2d208:	4628      	mov	r0, r5
   2d20a:	9304      	str	r3, [sp, #16]
   2d20c:	9307      	str	r3, [sp, #28]
   2d20e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d212:	f8ad 3016 	strh.w	r3, [sp, #22]
   2d216:	ab21      	add	r3, sp, #132	; 0x84
   2d218:	9301      	str	r3, [sp, #4]
   2d21a:	f000 f9af 	bl	2d57c <_svfiprintf_r>
   2d21e:	1c43      	adds	r3, r0, #1
   2d220:	bfbc      	itt	lt
   2d222:	238b      	movlt	r3, #139	; 0x8b
   2d224:	602b      	strlt	r3, [r5, #0]
   2d226:	2c00      	cmp	r4, #0
   2d228:	d0dd      	beq.n	2d1e6 <sniprintf+0x16>
   2d22a:	9b02      	ldr	r3, [sp, #8]
   2d22c:	2200      	movs	r2, #0
   2d22e:	701a      	strb	r2, [r3, #0]
   2d230:	e7d9      	b.n	2d1e6 <sniprintf+0x16>
   2d232:	bf00      	nop
   2d234:	2002014c 	.word	0x2002014c

0002d238 <siprintf>:
   2d238:	b40e      	push	{r1, r2, r3}
   2d23a:	b500      	push	{lr}
   2d23c:	b09c      	sub	sp, #112	; 0x70
   2d23e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2d242:	ab1d      	add	r3, sp, #116	; 0x74
   2d244:	9002      	str	r0, [sp, #8]
   2d246:	9006      	str	r0, [sp, #24]
   2d248:	9107      	str	r1, [sp, #28]
   2d24a:	9104      	str	r1, [sp, #16]
   2d24c:	4808      	ldr	r0, [pc, #32]	; (2d270 <siprintf+0x38>)
   2d24e:	4909      	ldr	r1, [pc, #36]	; (2d274 <siprintf+0x3c>)
   2d250:	f853 2b04 	ldr.w	r2, [r3], #4
   2d254:	9105      	str	r1, [sp, #20]
   2d256:	a902      	add	r1, sp, #8
   2d258:	6800      	ldr	r0, [r0, #0]
   2d25a:	9301      	str	r3, [sp, #4]
   2d25c:	f000 f98e 	bl	2d57c <_svfiprintf_r>
   2d260:	9b02      	ldr	r3, [sp, #8]
   2d262:	2200      	movs	r2, #0
   2d264:	701a      	strb	r2, [r3, #0]
   2d266:	b01c      	add	sp, #112	; 0x70
   2d268:	f85d eb04 	ldr.w	lr, [sp], #4
   2d26c:	b003      	add	sp, #12
   2d26e:	4770      	bx	lr
   2d270:	2002014c 	.word	0x2002014c
   2d274:	ffff0208 	.word	0xffff0208

0002d278 <_strtol_l.isra.0>:
   2d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d27c:	4686      	mov	lr, r0
   2d27e:	4f39      	ldr	r7, [pc, #228]	; (2d364 <_strtol_l.isra.0+0xec>)
   2d280:	4608      	mov	r0, r1
   2d282:	4605      	mov	r5, r0
   2d284:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d288:	5de6      	ldrb	r6, [r4, r7]
   2d28a:	f016 0608 	ands.w	r6, r6, #8
   2d28e:	d135      	bne.n	2d2fc <_strtol_l.isra.0+0x84>
   2d290:	2c2d      	cmp	r4, #45	; 0x2d
   2d292:	d135      	bne.n	2d300 <_strtol_l.isra.0+0x88>
   2d294:	782c      	ldrb	r4, [r5, #0]
   2d296:	f04f 0801 	mov.w	r8, #1
   2d29a:	1c85      	adds	r5, r0, #2
   2d29c:	2b00      	cmp	r3, #0
   2d29e:	d05c      	beq.n	2d35a <_strtol_l.isra.0+0xe2>
   2d2a0:	2b10      	cmp	r3, #16
   2d2a2:	d109      	bne.n	2d2b8 <_strtol_l.isra.0+0x40>
   2d2a4:	2c30      	cmp	r4, #48	; 0x30
   2d2a6:	d107      	bne.n	2d2b8 <_strtol_l.isra.0+0x40>
   2d2a8:	7828      	ldrb	r0, [r5, #0]
   2d2aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2d2ae:	2858      	cmp	r0, #88	; 0x58
   2d2b0:	d14e      	bne.n	2d350 <_strtol_l.isra.0+0xd8>
   2d2b2:	786c      	ldrb	r4, [r5, #1]
   2d2b4:	2310      	movs	r3, #16
   2d2b6:	3502      	adds	r5, #2
   2d2b8:	f1b8 0f00 	cmp.w	r8, #0
   2d2bc:	f04f 0700 	mov.w	r7, #0
   2d2c0:	bf14      	ite	ne
   2d2c2:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   2d2c6:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   2d2ca:	4638      	mov	r0, r7
   2d2cc:	fbbc f9f3 	udiv	r9, ip, r3
   2d2d0:	fb03 ca19 	mls	sl, r3, r9, ip
   2d2d4:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2d2d8:	2e09      	cmp	r6, #9
   2d2da:	d817      	bhi.n	2d30c <_strtol_l.isra.0+0x94>
   2d2dc:	4634      	mov	r4, r6
   2d2de:	42a3      	cmp	r3, r4
   2d2e0:	dd23      	ble.n	2d32a <_strtol_l.isra.0+0xb2>
   2d2e2:	1c7e      	adds	r6, r7, #1
   2d2e4:	d007      	beq.n	2d2f6 <_strtol_l.isra.0+0x7e>
   2d2e6:	4581      	cmp	r9, r0
   2d2e8:	d31c      	bcc.n	2d324 <_strtol_l.isra.0+0xac>
   2d2ea:	d101      	bne.n	2d2f0 <_strtol_l.isra.0+0x78>
   2d2ec:	45a2      	cmp	sl, r4
   2d2ee:	db19      	blt.n	2d324 <_strtol_l.isra.0+0xac>
   2d2f0:	fb00 4003 	mla	r0, r0, r3, r4
   2d2f4:	2701      	movs	r7, #1
   2d2f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d2fa:	e7eb      	b.n	2d2d4 <_strtol_l.isra.0+0x5c>
   2d2fc:	4628      	mov	r0, r5
   2d2fe:	e7c0      	b.n	2d282 <_strtol_l.isra.0+0xa>
   2d300:	2c2b      	cmp	r4, #43	; 0x2b
   2d302:	46b0      	mov	r8, r6
   2d304:	bf04      	itt	eq
   2d306:	782c      	ldrbeq	r4, [r5, #0]
   2d308:	1c85      	addeq	r5, r0, #2
   2d30a:	e7c7      	b.n	2d29c <_strtol_l.isra.0+0x24>
   2d30c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2d310:	2e19      	cmp	r6, #25
   2d312:	d801      	bhi.n	2d318 <_strtol_l.isra.0+0xa0>
   2d314:	3c37      	subs	r4, #55	; 0x37
   2d316:	e7e2      	b.n	2d2de <_strtol_l.isra.0+0x66>
   2d318:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2d31c:	2e19      	cmp	r6, #25
   2d31e:	d804      	bhi.n	2d32a <_strtol_l.isra.0+0xb2>
   2d320:	3c57      	subs	r4, #87	; 0x57
   2d322:	e7dc      	b.n	2d2de <_strtol_l.isra.0+0x66>
   2d324:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2d328:	e7e5      	b.n	2d2f6 <_strtol_l.isra.0+0x7e>
   2d32a:	1c7b      	adds	r3, r7, #1
   2d32c:	d106      	bne.n	2d33c <_strtol_l.isra.0+0xc4>
   2d32e:	2322      	movs	r3, #34	; 0x22
   2d330:	4660      	mov	r0, ip
   2d332:	f8ce 3000 	str.w	r3, [lr]
   2d336:	b942      	cbnz	r2, 2d34a <_strtol_l.isra.0+0xd2>
   2d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d33c:	f1b8 0f00 	cmp.w	r8, #0
   2d340:	d000      	beq.n	2d344 <_strtol_l.isra.0+0xcc>
   2d342:	4240      	negs	r0, r0
   2d344:	2a00      	cmp	r2, #0
   2d346:	d0f7      	beq.n	2d338 <_strtol_l.isra.0+0xc0>
   2d348:	b107      	cbz	r7, 2d34c <_strtol_l.isra.0+0xd4>
   2d34a:	1e69      	subs	r1, r5, #1
   2d34c:	6011      	str	r1, [r2, #0]
   2d34e:	e7f3      	b.n	2d338 <_strtol_l.isra.0+0xc0>
   2d350:	2430      	movs	r4, #48	; 0x30
   2d352:	2b00      	cmp	r3, #0
   2d354:	d1b0      	bne.n	2d2b8 <_strtol_l.isra.0+0x40>
   2d356:	2308      	movs	r3, #8
   2d358:	e7ae      	b.n	2d2b8 <_strtol_l.isra.0+0x40>
   2d35a:	2c30      	cmp	r4, #48	; 0x30
   2d35c:	d0a4      	beq.n	2d2a8 <_strtol_l.isra.0+0x30>
   2d35e:	230a      	movs	r3, #10
   2d360:	e7aa      	b.n	2d2b8 <_strtol_l.isra.0+0x40>
   2d362:	bf00      	nop
   2d364:	00037719 	.word	0x00037719

0002d368 <strtol>:
   2d368:	4613      	mov	r3, r2
   2d36a:	460a      	mov	r2, r1
   2d36c:	4601      	mov	r1, r0
   2d36e:	4802      	ldr	r0, [pc, #8]	; (2d378 <strtol+0x10>)
   2d370:	6800      	ldr	r0, [r0, #0]
   2d372:	f7ff bf81 	b.w	2d278 <_strtol_l.isra.0>
   2d376:	bf00      	nop
   2d378:	2002014c 	.word	0x2002014c

0002d37c <_strtoul_l.isra.0>:
   2d37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d380:	4686      	mov	lr, r0
   2d382:	4f37      	ldr	r7, [pc, #220]	; (2d460 <_strtoul_l.isra.0+0xe4>)
   2d384:	4608      	mov	r0, r1
   2d386:	4605      	mov	r5, r0
   2d388:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d38c:	5de6      	ldrb	r6, [r4, r7]
   2d38e:	f016 0608 	ands.w	r6, r6, #8
   2d392:	d131      	bne.n	2d3f8 <_strtoul_l.isra.0+0x7c>
   2d394:	2c2d      	cmp	r4, #45	; 0x2d
   2d396:	d131      	bne.n	2d3fc <_strtoul_l.isra.0+0x80>
   2d398:	782c      	ldrb	r4, [r5, #0]
   2d39a:	f04f 0801 	mov.w	r8, #1
   2d39e:	1c85      	adds	r5, r0, #2
   2d3a0:	2b00      	cmp	r3, #0
   2d3a2:	d059      	beq.n	2d458 <_strtoul_l.isra.0+0xdc>
   2d3a4:	2b10      	cmp	r3, #16
   2d3a6:	d109      	bne.n	2d3bc <_strtoul_l.isra.0+0x40>
   2d3a8:	2c30      	cmp	r4, #48	; 0x30
   2d3aa:	d107      	bne.n	2d3bc <_strtoul_l.isra.0+0x40>
   2d3ac:	7828      	ldrb	r0, [r5, #0]
   2d3ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2d3b2:	2858      	cmp	r0, #88	; 0x58
   2d3b4:	d14b      	bne.n	2d44e <_strtoul_l.isra.0+0xd2>
   2d3b6:	786c      	ldrb	r4, [r5, #1]
   2d3b8:	2310      	movs	r3, #16
   2d3ba:	3502      	adds	r5, #2
   2d3bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2d3c0:	2600      	movs	r6, #0
   2d3c2:	fbbc fcf3 	udiv	ip, ip, r3
   2d3c6:	fb03 f90c 	mul.w	r9, r3, ip
   2d3ca:	4630      	mov	r0, r6
   2d3cc:	ea6f 0909 	mvn.w	r9, r9
   2d3d0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2d3d4:	2f09      	cmp	r7, #9
   2d3d6:	d817      	bhi.n	2d408 <_strtoul_l.isra.0+0x8c>
   2d3d8:	463c      	mov	r4, r7
   2d3da:	42a3      	cmp	r3, r4
   2d3dc:	dd23      	ble.n	2d426 <_strtoul_l.isra.0+0xaa>
   2d3de:	2e00      	cmp	r6, #0
   2d3e0:	db1e      	blt.n	2d420 <_strtoul_l.isra.0+0xa4>
   2d3e2:	4584      	cmp	ip, r0
   2d3e4:	d31c      	bcc.n	2d420 <_strtoul_l.isra.0+0xa4>
   2d3e6:	d101      	bne.n	2d3ec <_strtoul_l.isra.0+0x70>
   2d3e8:	45a1      	cmp	r9, r4
   2d3ea:	db19      	blt.n	2d420 <_strtoul_l.isra.0+0xa4>
   2d3ec:	fb00 4003 	mla	r0, r0, r3, r4
   2d3f0:	2601      	movs	r6, #1
   2d3f2:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d3f6:	e7eb      	b.n	2d3d0 <_strtoul_l.isra.0+0x54>
   2d3f8:	4628      	mov	r0, r5
   2d3fa:	e7c4      	b.n	2d386 <_strtoul_l.isra.0+0xa>
   2d3fc:	2c2b      	cmp	r4, #43	; 0x2b
   2d3fe:	46b0      	mov	r8, r6
   2d400:	bf04      	itt	eq
   2d402:	782c      	ldrbeq	r4, [r5, #0]
   2d404:	1c85      	addeq	r5, r0, #2
   2d406:	e7cb      	b.n	2d3a0 <_strtoul_l.isra.0+0x24>
   2d408:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   2d40c:	2f19      	cmp	r7, #25
   2d40e:	d801      	bhi.n	2d414 <_strtoul_l.isra.0+0x98>
   2d410:	3c37      	subs	r4, #55	; 0x37
   2d412:	e7e2      	b.n	2d3da <_strtoul_l.isra.0+0x5e>
   2d414:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   2d418:	2f19      	cmp	r7, #25
   2d41a:	d804      	bhi.n	2d426 <_strtoul_l.isra.0+0xaa>
   2d41c:	3c57      	subs	r4, #87	; 0x57
   2d41e:	e7dc      	b.n	2d3da <_strtoul_l.isra.0+0x5e>
   2d420:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2d424:	e7e5      	b.n	2d3f2 <_strtoul_l.isra.0+0x76>
   2d426:	2e00      	cmp	r6, #0
   2d428:	da07      	bge.n	2d43a <_strtoul_l.isra.0+0xbe>
   2d42a:	2322      	movs	r3, #34	; 0x22
   2d42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d430:	f8ce 3000 	str.w	r3, [lr]
   2d434:	b942      	cbnz	r2, 2d448 <_strtoul_l.isra.0+0xcc>
   2d436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d43a:	f1b8 0f00 	cmp.w	r8, #0
   2d43e:	d000      	beq.n	2d442 <_strtoul_l.isra.0+0xc6>
   2d440:	4240      	negs	r0, r0
   2d442:	2a00      	cmp	r2, #0
   2d444:	d0f7      	beq.n	2d436 <_strtoul_l.isra.0+0xba>
   2d446:	b106      	cbz	r6, 2d44a <_strtoul_l.isra.0+0xce>
   2d448:	1e69      	subs	r1, r5, #1
   2d44a:	6011      	str	r1, [r2, #0]
   2d44c:	e7f3      	b.n	2d436 <_strtoul_l.isra.0+0xba>
   2d44e:	2430      	movs	r4, #48	; 0x30
   2d450:	2b00      	cmp	r3, #0
   2d452:	d1b3      	bne.n	2d3bc <_strtoul_l.isra.0+0x40>
   2d454:	2308      	movs	r3, #8
   2d456:	e7b1      	b.n	2d3bc <_strtoul_l.isra.0+0x40>
   2d458:	2c30      	cmp	r4, #48	; 0x30
   2d45a:	d0a7      	beq.n	2d3ac <_strtoul_l.isra.0+0x30>
   2d45c:	230a      	movs	r3, #10
   2d45e:	e7ad      	b.n	2d3bc <_strtoul_l.isra.0+0x40>
   2d460:	00037719 	.word	0x00037719

0002d464 <strtoul>:
   2d464:	4613      	mov	r3, r2
   2d466:	460a      	mov	r2, r1
   2d468:	4601      	mov	r1, r0
   2d46a:	4802      	ldr	r0, [pc, #8]	; (2d474 <strtoul+0x10>)
   2d46c:	6800      	ldr	r0, [r0, #0]
   2d46e:	f7ff bf85 	b.w	2d37c <_strtoul_l.isra.0>
   2d472:	bf00      	nop
   2d474:	2002014c 	.word	0x2002014c

0002d478 <__chk_fail>:
   2d478:	b500      	push	{lr}
   2d47a:	b08d      	sub	sp, #52	; 0x34
   2d47c:	4b0f      	ldr	r3, [pc, #60]	; (2d4bc <__chk_fail+0x44>)
   2d47e:	466a      	mov	r2, sp
   2d480:	f103 0628 	add.w	r6, r3, #40	; 0x28
   2d484:	4615      	mov	r5, r2
   2d486:	6818      	ldr	r0, [r3, #0]
   2d488:	3308      	adds	r3, #8
   2d48a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   2d48e:	4614      	mov	r4, r2
   2d490:	42b3      	cmp	r3, r6
   2d492:	c403      	stmia	r4!, {r0, r1}
   2d494:	4622      	mov	r2, r4
   2d496:	d1f6      	bne.n	2d486 <__chk_fail+0xe>
   2d498:	6818      	ldr	r0, [r3, #0]
   2d49a:	889b      	ldrh	r3, [r3, #4]
   2d49c:	6020      	str	r0, [r4, #0]
   2d49e:	4628      	mov	r0, r5
   2d4a0:	80a3      	strh	r3, [r4, #4]
   2d4a2:	f7e4 fded 	bl	12080 <strlen>
   2d4a6:	4629      	mov	r1, r5
   2d4a8:	4602      	mov	r2, r0
   2d4aa:	2002      	movs	r0, #2
   2d4ac:	f002 fdaf 	bl	3000e <_write>
   2d4b0:	2006      	movs	r0, #6
   2d4b2:	f000 f95b 	bl	2d76c <raise>
   2d4b6:	207f      	movs	r0, #127	; 0x7f
   2d4b8:	f7ec f806 	bl	194c8 <_exit>
   2d4bc:	0003784b 	.word	0x0003784b

0002d4c0 <_localeconv_r>:
   2d4c0:	4800      	ldr	r0, [pc, #0]	; (2d4c4 <_localeconv_r+0x4>)
   2d4c2:	4770      	bx	lr
   2d4c4:	200202a0 	.word	0x200202a0

0002d4c8 <__malloc_lock>:
   2d4c8:	4801      	ldr	r0, [pc, #4]	; (2d4d0 <__malloc_lock+0x8>)
   2d4ca:	f006 bb9d 	b.w	33c08 <__retarget_lock_acquire_recursive>
   2d4ce:	bf00      	nop
   2d4d0:	20029000 	.word	0x20029000

0002d4d4 <__malloc_unlock>:
   2d4d4:	4801      	ldr	r0, [pc, #4]	; (2d4dc <__malloc_unlock+0x8>)
   2d4d6:	f006 bb98 	b.w	33c0a <__retarget_lock_release_recursive>
   2d4da:	bf00      	nop
   2d4dc:	20029000 	.word	0x20029000

0002d4e0 <__pow5mult>:
   2d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d4e4:	4615      	mov	r5, r2
   2d4e6:	f012 0203 	ands.w	r2, r2, #3
   2d4ea:	4606      	mov	r6, r0
   2d4ec:	460f      	mov	r7, r1
   2d4ee:	d007      	beq.n	2d500 <__pow5mult+0x20>
   2d4f0:	3a01      	subs	r2, #1
   2d4f2:	4c21      	ldr	r4, [pc, #132]	; (2d578 <__pow5mult+0x98>)
   2d4f4:	2300      	movs	r3, #0
   2d4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2d4fa:	f006 fbd2 	bl	33ca2 <__multadd>
   2d4fe:	4607      	mov	r7, r0
   2d500:	10ad      	asrs	r5, r5, #2
   2d502:	d035      	beq.n	2d570 <__pow5mult+0x90>
   2d504:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2d506:	b93c      	cbnz	r4, 2d518 <__pow5mult+0x38>
   2d508:	2010      	movs	r0, #16
   2d50a:	f7ff fa5b 	bl	2c9c4 <malloc>
   2d50e:	6270      	str	r0, [r6, #36]	; 0x24
   2d510:	6004      	str	r4, [r0, #0]
   2d512:	60c4      	str	r4, [r0, #12]
   2d514:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2d518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2d51c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2d520:	b94c      	cbnz	r4, 2d536 <__pow5mult+0x56>
   2d522:	f240 2171 	movw	r1, #625	; 0x271
   2d526:	4630      	mov	r0, r6
   2d528:	f006 fc48 	bl	33dbc <__i2b>
   2d52c:	2300      	movs	r3, #0
   2d52e:	4604      	mov	r4, r0
   2d530:	f8c8 0008 	str.w	r0, [r8, #8]
   2d534:	6003      	str	r3, [r0, #0]
   2d536:	f04f 0800 	mov.w	r8, #0
   2d53a:	07eb      	lsls	r3, r5, #31
   2d53c:	d50a      	bpl.n	2d554 <__pow5mult+0x74>
   2d53e:	4639      	mov	r1, r7
   2d540:	4622      	mov	r2, r4
   2d542:	4630      	mov	r0, r6
   2d544:	f006 fc43 	bl	33dce <__multiply>
   2d548:	4681      	mov	r9, r0
   2d54a:	4639      	mov	r1, r7
   2d54c:	4630      	mov	r0, r6
   2d54e:	464f      	mov	r7, r9
   2d550:	f006 fb90 	bl	33c74 <_Bfree>
   2d554:	106d      	asrs	r5, r5, #1
   2d556:	d00b      	beq.n	2d570 <__pow5mult+0x90>
   2d558:	6820      	ldr	r0, [r4, #0]
   2d55a:	b938      	cbnz	r0, 2d56c <__pow5mult+0x8c>
   2d55c:	4622      	mov	r2, r4
   2d55e:	4621      	mov	r1, r4
   2d560:	4630      	mov	r0, r6
   2d562:	f006 fc34 	bl	33dce <__multiply>
   2d566:	6020      	str	r0, [r4, #0]
   2d568:	f8c0 8000 	str.w	r8, [r0]
   2d56c:	4604      	mov	r4, r0
   2d56e:	e7e4      	b.n	2d53a <__pow5mult+0x5a>
   2d570:	4638      	mov	r0, r7
   2d572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d576:	bf00      	nop
   2d578:	000357f0 	.word	0x000357f0

0002d57c <_svfiprintf_r>:
   2d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d580:	461e      	mov	r6, r3
   2d582:	898b      	ldrh	r3, [r1, #12]
   2d584:	b09d      	sub	sp, #116	; 0x74
   2d586:	4607      	mov	r7, r0
   2d588:	061b      	lsls	r3, r3, #24
   2d58a:	460d      	mov	r5, r1
   2d58c:	4614      	mov	r4, r2
   2d58e:	d50e      	bpl.n	2d5ae <_svfiprintf_r+0x32>
   2d590:	690b      	ldr	r3, [r1, #16]
   2d592:	b963      	cbnz	r3, 2d5ae <_svfiprintf_r+0x32>
   2d594:	2140      	movs	r1, #64	; 0x40
   2d596:	f7ff fa73 	bl	2ca80 <_malloc_r>
   2d59a:	6028      	str	r0, [r5, #0]
   2d59c:	6128      	str	r0, [r5, #16]
   2d59e:	b920      	cbnz	r0, 2d5aa <_svfiprintf_r+0x2e>
   2d5a0:	230c      	movs	r3, #12
   2d5a2:	603b      	str	r3, [r7, #0]
   2d5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d5a8:	e0c9      	b.n	2d73e <_svfiprintf_r+0x1c2>
   2d5aa:	2340      	movs	r3, #64	; 0x40
   2d5ac:	616b      	str	r3, [r5, #20]
   2d5ae:	2300      	movs	r3, #0
   2d5b0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2d758 <_svfiprintf_r+0x1dc>
   2d5b4:	f04f 0a01 	mov.w	sl, #1
   2d5b8:	9603      	str	r6, [sp, #12]
   2d5ba:	9309      	str	r3, [sp, #36]	; 0x24
   2d5bc:	2320      	movs	r3, #32
   2d5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2d5c2:	2330      	movs	r3, #48	; 0x30
   2d5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2d5c8:	4623      	mov	r3, r4
   2d5ca:	461e      	mov	r6, r3
   2d5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d5d0:	b10a      	cbz	r2, 2d5d6 <_svfiprintf_r+0x5a>
   2d5d2:	2a25      	cmp	r2, #37	; 0x25
   2d5d4:	d1f9      	bne.n	2d5ca <_svfiprintf_r+0x4e>
   2d5d6:	ebb6 0b04 	subs.w	fp, r6, r4
   2d5da:	d00b      	beq.n	2d5f4 <_svfiprintf_r+0x78>
   2d5dc:	465b      	mov	r3, fp
   2d5de:	4622      	mov	r2, r4
   2d5e0:	4629      	mov	r1, r5
   2d5e2:	4638      	mov	r0, r7
   2d5e4:	f006 fdc3 	bl	3416e <__ssputs_r>
   2d5e8:	3001      	adds	r0, #1
   2d5ea:	f000 80a3 	beq.w	2d734 <_svfiprintf_r+0x1b8>
   2d5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d5f0:	445b      	add	r3, fp
   2d5f2:	9309      	str	r3, [sp, #36]	; 0x24
   2d5f4:	7833      	ldrb	r3, [r6, #0]
   2d5f6:	2b00      	cmp	r3, #0
   2d5f8:	f000 809c 	beq.w	2d734 <_svfiprintf_r+0x1b8>
   2d5fc:	2300      	movs	r3, #0
   2d5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d602:	3601      	adds	r6, #1
   2d604:	9304      	str	r3, [sp, #16]
   2d606:	9307      	str	r3, [sp, #28]
   2d608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2d60c:	931a      	str	r3, [sp, #104]	; 0x68
   2d60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d612:	4634      	mov	r4, r6
   2d614:	2205      	movs	r2, #5
   2d616:	4850      	ldr	r0, [pc, #320]	; (2d758 <_svfiprintf_r+0x1dc>)
   2d618:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d61c:	f006 f8b4 	bl	33788 <memchr>
   2d620:	9b04      	ldr	r3, [sp, #16]
   2d622:	b9c0      	cbnz	r0, 2d656 <_svfiprintf_r+0xda>
   2d624:	06d9      	lsls	r1, r3, #27
   2d626:	bf44      	itt	mi
   2d628:	2220      	movmi	r2, #32
   2d62a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2d62e:	071a      	lsls	r2, r3, #28
   2d630:	bf44      	itt	mi
   2d632:	222b      	movmi	r2, #43	; 0x2b
   2d634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2d638:	7832      	ldrb	r2, [r6, #0]
   2d63a:	2a2a      	cmp	r2, #42	; 0x2a
   2d63c:	d013      	beq.n	2d666 <_svfiprintf_r+0xea>
   2d63e:	4634      	mov	r4, r6
   2d640:	9a07      	ldr	r2, [sp, #28]
   2d642:	2000      	movs	r0, #0
   2d644:	260a      	movs	r6, #10
   2d646:	4621      	mov	r1, r4
   2d648:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d64c:	3b30      	subs	r3, #48	; 0x30
   2d64e:	2b09      	cmp	r3, #9
   2d650:	d94b      	bls.n	2d6ea <_svfiprintf_r+0x16e>
   2d652:	b970      	cbnz	r0, 2d672 <_svfiprintf_r+0xf6>
   2d654:	e014      	b.n	2d680 <_svfiprintf_r+0x104>
   2d656:	eba0 0009 	sub.w	r0, r0, r9
   2d65a:	4626      	mov	r6, r4
   2d65c:	fa0a f000 	lsl.w	r0, sl, r0
   2d660:	4318      	orrs	r0, r3
   2d662:	9004      	str	r0, [sp, #16]
   2d664:	e7d5      	b.n	2d612 <_svfiprintf_r+0x96>
   2d666:	9a03      	ldr	r2, [sp, #12]
   2d668:	1d11      	adds	r1, r2, #4
   2d66a:	6812      	ldr	r2, [r2, #0]
   2d66c:	2a00      	cmp	r2, #0
   2d66e:	9103      	str	r1, [sp, #12]
   2d670:	db01      	blt.n	2d676 <_svfiprintf_r+0xfa>
   2d672:	9207      	str	r2, [sp, #28]
   2d674:	e004      	b.n	2d680 <_svfiprintf_r+0x104>
   2d676:	4252      	negs	r2, r2
   2d678:	f043 0302 	orr.w	r3, r3, #2
   2d67c:	9207      	str	r2, [sp, #28]
   2d67e:	9304      	str	r3, [sp, #16]
   2d680:	7823      	ldrb	r3, [r4, #0]
   2d682:	2b2e      	cmp	r3, #46	; 0x2e
   2d684:	d10c      	bne.n	2d6a0 <_svfiprintf_r+0x124>
   2d686:	7863      	ldrb	r3, [r4, #1]
   2d688:	2b2a      	cmp	r3, #42	; 0x2a
   2d68a:	d133      	bne.n	2d6f4 <_svfiprintf_r+0x178>
   2d68c:	9b03      	ldr	r3, [sp, #12]
   2d68e:	3402      	adds	r4, #2
   2d690:	1d1a      	adds	r2, r3, #4
   2d692:	681b      	ldr	r3, [r3, #0]
   2d694:	2b00      	cmp	r3, #0
   2d696:	9203      	str	r2, [sp, #12]
   2d698:	bfb8      	it	lt
   2d69a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2d69e:	9305      	str	r3, [sp, #20]
   2d6a0:	4e2e      	ldr	r6, [pc, #184]	; (2d75c <_svfiprintf_r+0x1e0>)
   2d6a2:	2203      	movs	r2, #3
   2d6a4:	7821      	ldrb	r1, [r4, #0]
   2d6a6:	4630      	mov	r0, r6
   2d6a8:	f006 f86e 	bl	33788 <memchr>
   2d6ac:	b138      	cbz	r0, 2d6be <_svfiprintf_r+0x142>
   2d6ae:	2340      	movs	r3, #64	; 0x40
   2d6b0:	1b80      	subs	r0, r0, r6
   2d6b2:	3401      	adds	r4, #1
   2d6b4:	fa03 f000 	lsl.w	r0, r3, r0
   2d6b8:	9b04      	ldr	r3, [sp, #16]
   2d6ba:	4303      	orrs	r3, r0
   2d6bc:	9304      	str	r3, [sp, #16]
   2d6be:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d6c2:	2206      	movs	r2, #6
   2d6c4:	4826      	ldr	r0, [pc, #152]	; (2d760 <_svfiprintf_r+0x1e4>)
   2d6c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2d6ca:	f006 f85d 	bl	33788 <memchr>
   2d6ce:	2800      	cmp	r0, #0
   2d6d0:	d038      	beq.n	2d744 <_svfiprintf_r+0x1c8>
   2d6d2:	4b24      	ldr	r3, [pc, #144]	; (2d764 <_svfiprintf_r+0x1e8>)
   2d6d4:	bb13      	cbnz	r3, 2d71c <_svfiprintf_r+0x1a0>
   2d6d6:	9b03      	ldr	r3, [sp, #12]
   2d6d8:	3307      	adds	r3, #7
   2d6da:	f023 0307 	bic.w	r3, r3, #7
   2d6de:	3308      	adds	r3, #8
   2d6e0:	9303      	str	r3, [sp, #12]
   2d6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d6e4:	4443      	add	r3, r8
   2d6e6:	9309      	str	r3, [sp, #36]	; 0x24
   2d6e8:	e76e      	b.n	2d5c8 <_svfiprintf_r+0x4c>
   2d6ea:	fb06 3202 	mla	r2, r6, r2, r3
   2d6ee:	2001      	movs	r0, #1
   2d6f0:	460c      	mov	r4, r1
   2d6f2:	e7a8      	b.n	2d646 <_svfiprintf_r+0xca>
   2d6f4:	2300      	movs	r3, #0
   2d6f6:	3401      	adds	r4, #1
   2d6f8:	260a      	movs	r6, #10
   2d6fa:	4619      	mov	r1, r3
   2d6fc:	9305      	str	r3, [sp, #20]
   2d6fe:	4620      	mov	r0, r4
   2d700:	f810 2b01 	ldrb.w	r2, [r0], #1
   2d704:	3a30      	subs	r2, #48	; 0x30
   2d706:	2a09      	cmp	r2, #9
   2d708:	d903      	bls.n	2d712 <_svfiprintf_r+0x196>
   2d70a:	2b00      	cmp	r3, #0
   2d70c:	d0c8      	beq.n	2d6a0 <_svfiprintf_r+0x124>
   2d70e:	9105      	str	r1, [sp, #20]
   2d710:	e7c6      	b.n	2d6a0 <_svfiprintf_r+0x124>
   2d712:	fb06 2101 	mla	r1, r6, r1, r2
   2d716:	2301      	movs	r3, #1
   2d718:	4604      	mov	r4, r0
   2d71a:	e7f0      	b.n	2d6fe <_svfiprintf_r+0x182>
   2d71c:	ab03      	add	r3, sp, #12
   2d71e:	462a      	mov	r2, r5
   2d720:	a904      	add	r1, sp, #16
   2d722:	4638      	mov	r0, r7
   2d724:	9300      	str	r3, [sp, #0]
   2d726:	4b10      	ldr	r3, [pc, #64]	; (2d768 <_svfiprintf_r+0x1ec>)
   2d728:	f7ff fa04 	bl	2cb34 <_printf_float>
   2d72c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d730:	4680      	mov	r8, r0
   2d732:	d1d6      	bne.n	2d6e2 <_svfiprintf_r+0x166>
   2d734:	89ab      	ldrh	r3, [r5, #12]
   2d736:	065b      	lsls	r3, r3, #25
   2d738:	f53f af34 	bmi.w	2d5a4 <_svfiprintf_r+0x28>
   2d73c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d73e:	b01d      	add	sp, #116	; 0x74
   2d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d744:	ab03      	add	r3, sp, #12
   2d746:	462a      	mov	r2, r5
   2d748:	a904      	add	r1, sp, #16
   2d74a:	4638      	mov	r0, r7
   2d74c:	9300      	str	r3, [sp, #0]
   2d74e:	4b06      	ldr	r3, [pc, #24]	; (2d768 <_svfiprintf_r+0x1ec>)
   2d750:	f7ff fc1a 	bl	2cf88 <_printf_i>
   2d754:	e7ea      	b.n	2d72c <_svfiprintf_r+0x1b0>
   2d756:	bf00      	nop
   2d758:	00037886 	.word	0x00037886
   2d75c:	0003788c 	.word	0x0003788c
   2d760:	00037890 	.word	0x00037890
   2d764:	0002cb35 	.word	0x0002cb35
   2d768:	0003416f 	.word	0x0003416f

0002d76c <raise>:
   2d76c:	4b02      	ldr	r3, [pc, #8]	; (2d778 <raise+0xc>)
   2d76e:	4601      	mov	r1, r0
   2d770:	6818      	ldr	r0, [r3, #0]
   2d772:	f006 bd57 	b.w	34224 <_raise_r>
   2d776:	bf00      	nop
   2d778:	2002014c 	.word	0x2002014c

0002d77c <_kill_r>:
   2d77c:	b538      	push	{r3, r4, r5, lr}
   2d77e:	2300      	movs	r3, #0
   2d780:	4c06      	ldr	r4, [pc, #24]	; (2d79c <_kill_r+0x20>)
   2d782:	4605      	mov	r5, r0
   2d784:	4608      	mov	r0, r1
   2d786:	4611      	mov	r1, r2
   2d788:	6023      	str	r3, [r4, #0]
   2d78a:	f002 fc44 	bl	30016 <_kill>
   2d78e:	1c43      	adds	r3, r0, #1
   2d790:	d102      	bne.n	2d798 <_kill_r+0x1c>
   2d792:	6823      	ldr	r3, [r4, #0]
   2d794:	b103      	cbz	r3, 2d798 <_kill_r+0x1c>
   2d796:	602b      	str	r3, [r5, #0]
   2d798:	bd38      	pop	{r3, r4, r5, pc}
   2d79a:	bf00      	nop
   2d79c:	20028ff8 	.word	0x20028ff8

0002d7a0 <received_config_handler>:
void received_config_handler(const struct mqtt_publish_message *message) {
   2d7a0:	b508      	push	{r3, lr}
	cJSON * data_json = cJSON_Parse(message->payload.data);
   2d7a2:	68c0      	ldr	r0, [r0, #12]
   2d7a4:	f000 f8f7 	bl	2d996 <cJSON_Parse>
}
   2d7a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cJSON_Delete(data_json);
   2d7ac:	f7e8 b89e 	b.w	158ec <cJSON_Delete>

0002d7b0 <calculate_avg_val>:
{
   2d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(s32_t i=0; i<sz; i++) {
   2d7b2:	2500      	movs	r5, #0
        } else if (is_qual && a[i] != EXCLUDE) {
   2d7b4:	f240 3ce7 	movw	ip, #999	; 0x3e7
    s32_t excl_cnt = 0;
   2d7b8:	462e      	mov	r6, r5
    s32_t sum = 0;
   2d7ba:	462c      	mov	r4, r5
    for(s32_t i=0; i<sz; i++) {
   2d7bc:	428d      	cmp	r5, r1
   2d7be:	db08      	blt.n	2d7d2 <calculate_avg_val+0x22>
    (*val_cnt) = (sz-excl_cnt);
   2d7c0:	1b88      	subs	r0, r1, r6
    if (excl_cnt == sz) {
   2d7c2:	428e      	cmp	r6, r1
    (*val_cnt) = (sz-excl_cnt);
   2d7c4:	6018      	str	r0, [r3, #0]
        return (sum/(sz-excl_cnt));
   2d7c6:	bf14      	ite	ne
   2d7c8:	fb94 f0f0 	sdivne	r0, r4, r0
        return (EXCLUDE);
   2d7cc:	f240 30e7 	movweq	r0, #999	; 0x3e7
}
   2d7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!is_qual) {
   2d7d2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
   2d7d6:	b912      	cbnz	r2, 2d7de <calculate_avg_val+0x2e>
            sum += a[i];
   2d7d8:	443c      	add	r4, r7
    for(s32_t i=0; i<sz; i++) {
   2d7da:	3501      	adds	r5, #1
   2d7dc:	e7ee      	b.n	2d7bc <calculate_avg_val+0xc>
        } else if (is_qual && a[i] != EXCLUDE) {
   2d7de:	4567      	cmp	r7, ip
   2d7e0:	d1fa      	bne.n	2d7d8 <calculate_avg_val+0x28>
            excl_cnt += 1;
   2d7e2:	3601      	adds	r6, #1
   2d7e4:	e7f9      	b.n	2d7da <calculate_avg_val+0x2a>

0002d7e6 <calculate_min_val>:
    for(i=0; i<sz; i++) {
   2d7e6:	2300      	movs	r3, #0
{
   2d7e8:	b510      	push	{r4, lr}
 	min=a[0];
   2d7ea:	6802      	ldr	r2, [r0, #0]
    for(i=0; i<sz; i++) {
   2d7ec:	428b      	cmp	r3, r1
   2d7ee:	db01      	blt.n	2d7f4 <calculate_min_val+0xe>
}
   2d7f0:	4610      	mov	r0, r2
   2d7f2:	bd10      	pop	{r4, pc}
        if(min>a[i]) {
   2d7f4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    for(i=0; i<sz; i++) {
   2d7f8:	3301      	adds	r3, #1
   2d7fa:	42a2      	cmp	r2, r4
   2d7fc:	bfa8      	it	ge
   2d7fe:	4622      	movge	r2, r4
   2d800:	e7f4      	b.n	2d7ec <calculate_min_val+0x6>

0002d802 <calculate_max_val>:
{
   2d802:	b570      	push	{r4, r5, r6, lr}
    for(i=0; i<sz; i++) 
   2d804:	2500      	movs	r5, #0
            if(max==EXCLUDE || max<a[i]) {
   2d806:	f240 36e7 	movw	r6, #999	; 0x3e7
    max=a[0];
   2d80a:	6803      	ldr	r3, [r0, #0]
    for(i=0; i<sz; i++) 
   2d80c:	428d      	cmp	r5, r1
   2d80e:	db01      	blt.n	2d814 <calculate_max_val+0x12>
}
   2d810:	4618      	mov	r0, r3
   2d812:	bd70      	pop	{r4, r5, r6, pc}
        if (is_qual) {
   2d814:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
   2d818:	b10a      	cbz	r2, 2d81e <calculate_max_val+0x1c>
            if(max==EXCLUDE || max<a[i]) {
   2d81a:	42b3      	cmp	r3, r6
   2d81c:	d002      	beq.n	2d824 <calculate_max_val+0x22>
            if(max<a[i]) {
   2d81e:	429c      	cmp	r4, r3
   2d820:	bfb8      	it	lt
   2d822:	461c      	movlt	r4, r3
    for(i=0; i<sz; i++) 
   2d824:	3501      	adds	r5, #1
   2d826:	4623      	mov	r3, r4
   2d828:	e7f0      	b.n	2d80c <calculate_max_val+0xa>

0002d82a <get_modem_info>:
{
   2d82a:	b510      	push	{r4, lr}
    modem_info_string_get(MODEM_INFO_CELLID, info->cid, sizeof(info->cid));
   2d82c:	4601      	mov	r1, r0
{
   2d82e:	4604      	mov	r4, r0
    modem_info_string_get(MODEM_INFO_CELLID, info->cid, sizeof(info->cid));
   2d830:	221e      	movs	r2, #30
   2d832:	2008      	movs	r0, #8
   2d834:	f7f0 fd4a 	bl	1e2cc <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_AREA_CODE, info->tac, sizeof(info->tac));
   2d838:	221e      	movs	r2, #30
   2d83a:	2003      	movs	r0, #3
   2d83c:	18a1      	adds	r1, r4, r2
   2d83e:	f7f0 fd45 	bl	1e2cc <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_RSRP, info->rssi, sizeof(info->rssi));
   2d842:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   2d846:	221e      	movs	r2, #30
   2d848:	2000      	movs	r0, #0
   2d84a:	f7f0 fd3f 	bl	1e2cc <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_APN, info->apn, sizeof(info->apn));
   2d84e:	f104 015a 	add.w	r1, r4, #90	; 0x5a
   2d852:	223c      	movs	r2, #60	; 0x3c
   2d854:	2015      	movs	r0, #21
   2d856:	f7f0 fd39 	bl	1e2cc <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_FW_VERSION, info->fwv, sizeof(info->fwv));
   2d85a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2d85e:	223c      	movs	r2, #60	; 0x3c
   2d860:	200d      	movs	r0, #13
   2d862:	f7f0 fd33 	bl	1e2cc <modem_info_string_get>
	modem_info_short_get(MODEM_INFO_BATTERY, &info->vltg);
   2d866:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
   2d86a:	200b      	movs	r0, #11
   2d86c:	f7f0 fcfc 	bl	1e268 <modem_info_short_get>
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   2d870:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
   2d874:	200c      	movs	r0, #12
}
   2d876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   2d87a:	f7f0 bcf5 	b.w	1e268 <modem_info_short_get>

0002d87e <k_msgq_get_atomic>:
int k_msgq_get_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2d87e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d880:	f04f 0320 	mov.w	r3, #32
   2d884:	f3ef 8411 	mrs	r4, BASEPRI
   2d888:	f383 8811 	msr	BASEPRI, r3
   2d88c:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_get(msgq, data, timeout);
   2d890:	f7fa f9d8 	bl	27c44 <z_impl_k_msgq_get>
	__asm__ volatile(
   2d894:	f384 8811 	msr	BASEPRI, r4
   2d898:	f3bf 8f6f 	isb	sy
}
   2d89c:	bd10      	pop	{r4, pc}

0002d89e <k_msgq_put_atomic>:
int k_msgq_put_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2d89e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d8a0:	f04f 0320 	mov.w	r3, #32
   2d8a4:	f3ef 8411 	mrs	r4, BASEPRI
   2d8a8:	f383 8811 	msr	BASEPRI, r3
   2d8ac:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_put(msgq, data, timeout);
   2d8b0:	f7fa f92e 	bl	27b10 <z_impl_k_msgq_put>
	__asm__ volatile(
   2d8b4:	f384 8811 	msr	BASEPRI, r4
   2d8b8:	f3bf 8f6f 	isb	sy
}
   2d8bc:	bd10      	pop	{r4, pc}

0002d8be <parse_hex4>:
{
   2d8be:	b510      	push	{r4, lr}
	if (*str >= '0' && *str <= '9')
   2d8c0:	7802      	ldrb	r2, [r0, #0]
   2d8c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   2d8c6:	b2d9      	uxtb	r1, r3
   2d8c8:	2909      	cmp	r1, #9
   2d8ca:	d905      	bls.n	2d8d8 <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2d8cc:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   2d8d0:	2b05      	cmp	r3, #5
   2d8d2:	d81a      	bhi.n	2d90a <parse_hex4+0x4c>
		h += 10 + (*str) - 'A';
   2d8d4:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
	if (*str >= '0' && *str <= '9')
   2d8d8:	7842      	ldrb	r2, [r0, #1]
	h = h << 4;
   2d8da:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2d8dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2d8e0:	b2cc      	uxtb	r4, r1
   2d8e2:	2c09      	cmp	r4, #9
   2d8e4:	d818      	bhi.n	2d918 <parse_hex4+0x5a>
		h += (*str) - '0';
   2d8e6:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2d8e8:	7882      	ldrb	r2, [r0, #2]
	h = h << 4;
   2d8ea:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2d8ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2d8f0:	b2cc      	uxtb	r4, r1
   2d8f2:	2c09      	cmp	r4, #9
   2d8f4:	d81d      	bhi.n	2d932 <parse_hex4+0x74>
		h += (*str) - '0';
   2d8f6:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2d8f8:	78c0      	ldrb	r0, [r0, #3]
	h = h << 4;
   2d8fa:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2d8fc:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   2d900:	b2d1      	uxtb	r1, r2
   2d902:	2909      	cmp	r1, #9
   2d904:	d822      	bhi.n	2d94c <parse_hex4+0x8e>
		h += (*str) - '0';
   2d906:	18d0      	adds	r0, r2, r3
}
   2d908:	bd10      	pop	{r4, pc}
	else if (*str >= 'a' && *str <= 'f')
   2d90a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   2d90e:	2b05      	cmp	r3, #5
   2d910:	d829      	bhi.n	2d966 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2d912:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   2d916:	e7df      	b.n	2d8d8 <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2d918:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2d91c:	2905      	cmp	r1, #5
   2d91e:	d802      	bhi.n	2d926 <parse_hex4+0x68>
		h += 10 + (*str) - 'A';
   2d920:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2d922:	4413      	add	r3, r2
   2d924:	e7e0      	b.n	2d8e8 <parse_hex4+0x2a>
	else if (*str >= 'a' && *str <= 'f')
   2d926:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2d92a:	2905      	cmp	r1, #5
   2d92c:	d81b      	bhi.n	2d966 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2d92e:	3a57      	subs	r2, #87	; 0x57
   2d930:	e7f7      	b.n	2d922 <parse_hex4+0x64>
	else if (*str >= 'A' && *str <= 'F')
   2d932:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2d936:	2905      	cmp	r1, #5
   2d938:	d802      	bhi.n	2d940 <parse_hex4+0x82>
		h += 10 + (*str) - 'A';
   2d93a:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2d93c:	4413      	add	r3, r2
   2d93e:	e7db      	b.n	2d8f8 <parse_hex4+0x3a>
	else if (*str >= 'a' && *str <= 'f')
   2d940:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2d944:	2905      	cmp	r1, #5
   2d946:	d80e      	bhi.n	2d966 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2d948:	3a57      	subs	r2, #87	; 0x57
   2d94a:	e7f7      	b.n	2d93c <parse_hex4+0x7e>
	else if (*str >= 'A' && *str <= 'F')
   2d94c:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
   2d950:	2a05      	cmp	r2, #5
   2d952:	d802      	bhi.n	2d95a <parse_hex4+0x9c>
		h += 10 + (*str) - 'A';
   2d954:	3837      	subs	r0, #55	; 0x37
		h += 10 + (*str) - 'a';
   2d956:	4418      	add	r0, r3
   2d958:	e7d6      	b.n	2d908 <parse_hex4+0x4a>
	else if (*str >= 'a' && *str <= 'f')
   2d95a:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
   2d95e:	2a05      	cmp	r2, #5
   2d960:	d801      	bhi.n	2d966 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2d962:	3857      	subs	r0, #87	; 0x57
   2d964:	e7f7      	b.n	2d956 <parse_hex4+0x98>
		return 0;
   2d966:	2000      	movs	r0, #0
   2d968:	e7ce      	b.n	2d908 <parse_hex4+0x4a>

0002d96a <skip>:
{
   2d96a:	4603      	mov	r3, r0
	while (in && *in && (unsigned char)*in <= 32)
   2d96c:	4618      	mov	r0, r3
   2d96e:	b123      	cbz	r3, 2d97a <skip+0x10>
   2d970:	7802      	ldrb	r2, [r0, #0]
   2d972:	3301      	adds	r3, #1
   2d974:	3a01      	subs	r2, #1
   2d976:	2a1f      	cmp	r2, #31
   2d978:	d9f8      	bls.n	2d96c <skip+0x2>
}
   2d97a:	4770      	bx	lr

0002d97c <update>:
{
   2d97c:	b510      	push	{r4, lr}
	if (!p || !p->buffer)
   2d97e:	b138      	cbz	r0, 2d990 <update+0x14>
   2d980:	6803      	ldr	r3, [r0, #0]
   2d982:	b133      	cbz	r3, 2d992 <update+0x16>
	str = p->buffer + p->offset;
   2d984:	6884      	ldr	r4, [r0, #8]
	return p->offset + strlens(str);
   2d986:	1918      	adds	r0, r3, r4
   2d988:	d001      	beq.n	2d98e <update+0x12>
   2d98a:	f7e4 fb79 	bl	12080 <strlen>
   2d98e:	4420      	add	r0, r4
}
   2d990:	bd10      	pop	{r4, pc}
		return 0;
   2d992:	4618      	mov	r0, r3
   2d994:	e7fc      	b.n	2d990 <update+0x14>

0002d996 <cJSON_Parse>:
	return cJSON_ParseWithOpts(value, 0, 0);
   2d996:	2200      	movs	r2, #0
   2d998:	4611      	mov	r1, r2
   2d99a:	f7e7 bfcb 	b.w	15934 <cJSON_ParseWithOpts>

0002d99e <cJSON_Print>:
char *cJSON_Print(cJSON *item) { return print_value(item, 0, 1, 0); }
   2d99e:	2300      	movs	r3, #0
   2d9a0:	2201      	movs	r2, #1
   2d9a2:	4619      	mov	r1, r3
   2d9a4:	f7e7 bd52 	b.w	1544c <print_value>

0002d9a8 <cJSON_AddItemToArray>:
	if (!item)
   2d9a8:	b149      	cbz	r1, 2d9be <cJSON_AddItemToArray+0x16>
	cJSON *c = array->child;
   2d9aa:	6883      	ldr	r3, [r0, #8]
	if (!c) {
   2d9ac:	b913      	cbnz	r3, 2d9b4 <cJSON_AddItemToArray+0xc>
		array->child = item;
   2d9ae:	6081      	str	r1, [r0, #8]
   2d9b0:	4770      	bx	lr
   2d9b2:	4613      	mov	r3, r2
		while (c && c->next)
   2d9b4:	681a      	ldr	r2, [r3, #0]
   2d9b6:	2a00      	cmp	r2, #0
   2d9b8:	d1fb      	bne.n	2d9b2 <cJSON_AddItemToArray+0xa>
	prev->next = item;
   2d9ba:	6019      	str	r1, [r3, #0]
	item->prev = prev;
   2d9bc:	604b      	str	r3, [r1, #4]
}
   2d9be:	4770      	bx	lr

0002d9c0 <cJSON_CreateNumber>:
	if (item)
		item->type = b ? cJSON_True : cJSON_False;
	return item;
}
cJSON *cJSON_CreateNumber(double num)
{
   2d9c0:	b513      	push	{r0, r1, r4, lr}
   2d9c2:	ed8d 0b00 	vstr	d0, [sp]
	cJSON *item = cJSON_New_Item();
   2d9c6:	f7e7 fa2f 	bl	14e28 <cJSON_New_Item>
	if (item) {
   2d9ca:	4604      	mov	r4, r0
   2d9cc:	b150      	cbz	r0, 2d9e4 <cJSON_CreateNumber+0x24>
		item->type = cJSON_Number;
		item->valuedouble = num;
   2d9ce:	ed9d 0b00 	vldr	d0, [sp]
		item->type = cJSON_Number;
   2d9d2:	2303      	movs	r3, #3
		item->valuedouble = num;
   2d9d4:	ed80 0b06 	vstr	d0, [r0, #24]
		item->type = cJSON_Number;
   2d9d8:	60c3      	str	r3, [r0, #12]
		item->valueint = (int)num;
   2d9da:	ec51 0b10 	vmov	r0, r1, d0
   2d9de:	f7df fdff 	bl	d5e0 <__aeabi_d2iz>
   2d9e2:	6160      	str	r0, [r4, #20]
	}
	return item;
}
   2d9e4:	4620      	mov	r0, r4
   2d9e6:	b002      	add	sp, #8
   2d9e8:	bd10      	pop	{r4, pc}

0002d9ea <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)
{
   2d9ea:	b538      	push	{r3, r4, r5, lr}
   2d9ec:	4605      	mov	r5, r0
	cJSON *item = cJSON_New_Item();
   2d9ee:	f7e7 fa1b 	bl	14e28 <cJSON_New_Item>
	if (item) {
   2d9f2:	4604      	mov	r4, r0
   2d9f4:	b128      	cbz	r0, 2da02 <cJSON_CreateString+0x18>
		item->type = cJSON_String;
   2d9f6:	2304      	movs	r3, #4
   2d9f8:	60c3      	str	r3, [r0, #12]
		item->valuestring = cJSON_strdup(string);
   2d9fa:	4628      	mov	r0, r5
   2d9fc:	f7e7 fb56 	bl	150ac <cJSON_strdup>
   2da00:	6120      	str	r0, [r4, #16]
	}
	return item;
}
   2da02:	4620      	mov	r0, r4
   2da04:	bd38      	pop	{r3, r4, r5, pc}

0002da06 <cJSON_CreateObject>:
	if (item)
		item->type = cJSON_Array;
	return item;
}
cJSON *cJSON_CreateObject(void)
{
   2da06:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   2da08:	f7e7 fa0e 	bl	14e28 <cJSON_New_Item>
	if (item)
   2da0c:	b108      	cbz	r0, 2da12 <cJSON_CreateObject+0xc>
		item->type = cJSON_Object;
   2da0e:	2306      	movs	r3, #6
   2da10:	60c3      	str	r3, [r0, #12]
	return item;
}
   2da12:	bd08      	pop	{r3, pc}

0002da14 <config_load>:
}
   2da14:	2000      	movs	r0, #0
   2da16:	4770      	bx	lr

0002da18 <get_timestamp_us>:
{
   2da18:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
   2da1a:	f005 fe03 	bl	33624 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   2da1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2da22:	fba0 4502 	umull	r4, r5, r0, r2
   2da26:	fb02 5501 	mla	r5, r2, r1, r5
   2da2a:	0be3      	lsrs	r3, r4, #15
   2da2c:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
	return k_uptime_get()*1000;
   2da30:	fba3 0102 	umull	r0, r1, r3, r2
   2da34:	0bec      	lsrs	r4, r5, #15
   2da36:	fb02 1104 	mla	r1, r2, r4, r1
}
   2da3a:	bd38      	pop	{r3, r4, r5, pc}

0002da3c <k_sleep>:
	return z_impl_k_sleep(timeout);
   2da3c:	f7fb be94 	b.w	29768 <z_impl_k_sleep>

0002da40 <delay_ms>:
	k_sleep(K_MSEC(period));
   2da40:	f7ff bffc 	b.w	2da3c <k_sleep>

0002da44 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   2da44:	b148      	cbz	r0, 2da5a <null_ptr_check+0x16>
   2da46:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2da48:	b13b      	cbz	r3, 2da5a <null_ptr_check+0x16>
   2da4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2da4c:	b12b      	cbz	r3, 2da5a <null_ptr_check+0x16>
   2da4e:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2da50:	fab0 f080 	clz	r0, r0
   2da54:	0940      	lsrs	r0, r0, #5
   2da56:	4240      	negs	r0, r0
   2da58:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   2da5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   2da5e:	4770      	bx	lr

0002da60 <set_mem_page>:
{
   2da60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2da62:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
   2da64:	4608      	mov	r0, r1
{
   2da66:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   2da68:	f7ff ffec 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2da6c:	4605      	mov	r5, r0
   2da6e:	bb40      	cbnz	r0, 2dac2 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
   2da70:	f012 0f80 	tst.w	r2, #128	; 0x80
   2da74:	bf14      	ite	ne
   2da76:	2300      	movne	r3, #0
   2da78:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
   2da7a:	78ca      	ldrb	r2, [r1, #3]
   2da7c:	429a      	cmp	r2, r3
   2da7e:	d020      	beq.n	2dac2 <set_mem_page+0x62>
			dev->mem_page = mem_page;
   2da80:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2da82:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   2da84:	2301      	movs	r3, #1
   2da86:	f10d 0207 	add.w	r2, sp, #7
   2da8a:	21f3      	movs	r1, #243	; 0xf3
   2da8c:	7860      	ldrb	r0, [r4, #1]
   2da8e:	47b0      	blx	r6
   2da90:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   2da94:	b998      	cbnz	r0, 2dabe <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   2da96:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   2da9a:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
   2da9c:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   2daa0:	f003 0310 	and.w	r3, r3, #16
   2daa4:	4313      	orrs	r3, r2
   2daa6:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   2daaa:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   2daac:	2301      	movs	r3, #1
   2daae:	f10d 0207 	add.w	r2, sp, #7
   2dab2:	2173      	movs	r1, #115	; 0x73
   2dab4:	7860      	ldrb	r0, [r4, #1]
   2dab6:	47b0      	blx	r6
   2dab8:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
   2dabc:	b108      	cbz	r0, 2dac2 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
   2dabe:	f06f 0501 	mvn.w	r5, #1
}
   2dac2:	4628      	mov	r0, r5
   2dac4:	b002      	add	sp, #8
   2dac6:	bd70      	pop	{r4, r5, r6, pc}

0002dac8 <get_mem_page.part.3>:
static int8_t get_mem_page(struct bme680_dev *dev)
   2dac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2daca:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
   2dacc:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2dace:	6c85      	ldr	r5, [r0, #72]	; 0x48
   2dad0:	f10d 0207 	add.w	r2, sp, #7
   2dad4:	21f3      	movs	r1, #243	; 0xf3
   2dad6:	7840      	ldrb	r0, [r0, #1]
   2dad8:	47a8      	blx	r5
   2dada:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   2dade:	b930      	cbnz	r0, 2daee <get_mem_page.part.3+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   2dae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dae4:	f003 0310 	and.w	r3, r3, #16
   2dae8:	70e3      	strb	r3, [r4, #3]
}
   2daea:	b003      	add	sp, #12
   2daec:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
   2daee:	f06f 0001 	mvn.w	r0, #1
   2daf2:	e7fa      	b.n	2daea <get_mem_page.part.3+0x22>

0002daf4 <boundary_check.isra.1.constprop.6>:
		if (*value > max) {
   2daf4:	7803      	ldrb	r3, [r0, #0]
   2daf6:	428b      	cmp	r3, r1
			*value = max;
   2daf8:	bf84      	itt	hi
   2dafa:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   2dafc:	7813      	ldrbhi	r3, [r2, #0]
}
   2dafe:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   2db02:	bf84      	itt	hi
   2db04:	f043 0302 	orrhi.w	r3, r3, #2
   2db08:	7013      	strbhi	r3, [r2, #0]
}
   2db0a:	4770      	bx	lr

0002db0c <bme680_get_regs>:
{
   2db0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2db10:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
   2db12:	4618      	mov	r0, r3
{
   2db14:	4688      	mov	r8, r1
   2db16:	4691      	mov	r9, r2
   2db18:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
   2db1a:	f7ff ff93 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2db1e:	4604      	mov	r4, r0
   2db20:	b9a8      	cbnz	r0, 2db4e <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   2db22:	78ab      	ldrb	r3, [r5, #2]
   2db24:	b93b      	cbnz	r3, 2db36 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
   2db26:	4629      	mov	r1, r5
   2db28:	4630      	mov	r0, r6
   2db2a:	f7ff ff99 	bl	2da60 <set_mem_page>
			if (rslt == BME680_OK)
   2db2e:	4604      	mov	r4, r0
   2db30:	b908      	cbnz	r0, 2db36 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   2db32:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   2db36:	6caf      	ldr	r7, [r5, #72]	; 0x48
   2db38:	464b      	mov	r3, r9
   2db3a:	4642      	mov	r2, r8
   2db3c:	4631      	mov	r1, r6
   2db3e:	7868      	ldrb	r0, [r5, #1]
   2db40:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   2db42:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
   2db44:	bf18      	it	ne
   2db46:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   2db4a:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
   2db4e:	4620      	mov	r0, r4
   2db50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002db54 <bme680_set_regs>:
{
   2db54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2db58:	461e      	mov	r6, r3
   2db5a:	b08a      	sub	sp, #40	; 0x28
   2db5c:	4680      	mov	r8, r0
   2db5e:	4689      	mov	r9, r1
   2db60:	4615      	mov	r5, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   2db62:	2100      	movs	r1, #0
   2db64:	2228      	movs	r2, #40	; 0x28
   2db66:	4668      	mov	r0, sp
   2db68:	f005 fe64 	bl	33834 <memset>
	rslt = null_ptr_check(dev);
   2db6c:	4630      	mov	r0, r6
   2db6e:	f7ff ff69 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2db72:	bb68      	cbnz	r0, 2dbd0 <bme680_set_regs+0x7c>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   2db74:	1e6b      	subs	r3, r5, #1
   2db76:	2b12      	cmp	r3, #18
   2db78:	d82d      	bhi.n	2dbd6 <bme680_set_regs+0x82>
   2db7a:	466c      	mov	r4, sp
   2db7c:	4607      	mov	r7, r0
			for (index = 0; index < len; index++) {
   2db7e:	fa1f fa85 	uxth.w	sl, r5
				if (dev->intf == BME680_SPI_INTF) {
   2db82:	78b2      	ldrb	r2, [r6, #2]
   2db84:	f818 3007 	ldrb.w	r3, [r8, r7]
   2db88:	b93a      	cbnz	r2, 2db9a <bme680_set_regs+0x46>
					rslt = set_mem_page(reg_addr[index], dev);
   2db8a:	4618      	mov	r0, r3
   2db8c:	4631      	mov	r1, r6
   2db8e:	f7ff ff67 	bl	2da60 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   2db92:	f818 3007 	ldrb.w	r3, [r8, r7]
   2db96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
					tmp_buff[(2 * index)] = reg_addr[index];
   2db9a:	7023      	strb	r3, [r4, #0]
				tmp_buff[(2 * index) + 1] = reg_data[index];
   2db9c:	f819 3007 	ldrb.w	r3, [r9, r7]
   2dba0:	3701      	adds	r7, #1
   2dba2:	7063      	strb	r3, [r4, #1]
			for (index = 0; index < len; index++) {
   2dba4:	b2bb      	uxth	r3, r7
   2dba6:	4553      	cmp	r3, sl
   2dba8:	f104 0402 	add.w	r4, r4, #2
   2dbac:	d3e9      	bcc.n	2db82 <bme680_set_regs+0x2e>
			if (rslt == BME680_OK) {
   2dbae:	b978      	cbnz	r0, 2dbd0 <bme680_set_regs+0x7c>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   2dbb0:	006b      	lsls	r3, r5, #1
   2dbb2:	3b01      	subs	r3, #1
   2dbb4:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   2dbb6:	b29b      	uxth	r3, r3
   2dbb8:	f10d 0201 	add.w	r2, sp, #1
   2dbbc:	f89d 1000 	ldrb.w	r1, [sp]
   2dbc0:	7870      	ldrb	r0, [r6, #1]
   2dbc2:	47a0      	blx	r4
					rslt = BME680_E_COM_FAIL;
   2dbc4:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   2dbc6:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
   2dbca:	bf18      	it	ne
   2dbcc:	f06f 0001 	mvnne.w	r0, #1
}
   2dbd0:	b00a      	add	sp, #40	; 0x28
   2dbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rslt = BME680_E_INVALID_LENGTH;
   2dbd6:	f06f 0003 	mvn.w	r0, #3
   2dbda:	e7f9      	b.n	2dbd0 <bme680_set_regs+0x7c>

0002dbdc <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   2dbdc:	23e0      	movs	r3, #224	; 0xe0
{
   2dbde:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   2dbe0:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   2dbe4:	23b6      	movs	r3, #182	; 0xb6
{
   2dbe6:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   2dbe8:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   2dbec:	f7ff ff2a 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2dbf0:	4604      	mov	r4, r0
   2dbf2:	b970      	cbnz	r0, 2dc12 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
   2dbf4:	78ab      	ldrb	r3, [r5, #2]
   2dbf6:	b17b      	cbz	r3, 2dc18 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   2dbf8:	462b      	mov	r3, r5
   2dbfa:	2201      	movs	r2, #1
   2dbfc:	f10d 0107 	add.w	r1, sp, #7
   2dc00:	f10d 0006 	add.w	r0, sp, #6
   2dc04:	f7ff ffa6 	bl	2db54 <bme680_set_regs>
   2dc08:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
   2dc0a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2dc0c:	200a      	movs	r0, #10
   2dc0e:	4798      	blx	r3
			if (rslt == BME680_OK) {
   2dc10:	b14c      	cbz	r4, 2dc26 <bme680_soft_reset+0x4a>
}
   2dc12:	4620      	mov	r0, r4
   2dc14:	b003      	add	sp, #12
   2dc16:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
   2dc18:	4628      	mov	r0, r5
   2dc1a:	f7ff ff55 	bl	2dac8 <get_mem_page.part.3>
		if (rslt == BME680_OK) {
   2dc1e:	4604      	mov	r4, r0
   2dc20:	2800      	cmp	r0, #0
   2dc22:	d1f6      	bne.n	2dc12 <bme680_soft_reset+0x36>
   2dc24:	e7e8      	b.n	2dbf8 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
   2dc26:	78ab      	ldrb	r3, [r5, #2]
   2dc28:	2b00      	cmp	r3, #0
   2dc2a:	d1f2      	bne.n	2dc12 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
   2dc2c:	4628      	mov	r0, r5
   2dc2e:	f7ff ff09 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2dc32:	4604      	mov	r4, r0
   2dc34:	2800      	cmp	r0, #0
   2dc36:	d1ec      	bne.n	2dc12 <bme680_soft_reset+0x36>
   2dc38:	4628      	mov	r0, r5
   2dc3a:	f7ff ff45 	bl	2dac8 <get_mem_page.part.3>
   2dc3e:	4604      	mov	r4, r0
   2dc40:	e7e7      	b.n	2dc12 <bme680_soft_reset+0x36>

0002dc42 <bme680_init>:
{
   2dc42:	b530      	push	{r4, r5, lr}
   2dc44:	b08d      	sub	sp, #52	; 0x34
   2dc46:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   2dc48:	f7ff fefc 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2dc4c:	4605      	mov	r5, r0
   2dc4e:	2800      	cmp	r0, #0
   2dc50:	f040 80c8 	bne.w	2dde4 <bme680_init+0x1a2>
		rslt = bme680_soft_reset(dev);
   2dc54:	4620      	mov	r0, r4
   2dc56:	f7ff ffc1 	bl	2dbdc <bme680_soft_reset>
		if (rslt == BME680_OK) {
   2dc5a:	4605      	mov	r5, r0
   2dc5c:	2800      	cmp	r0, #0
   2dc5e:	f040 80c1 	bne.w	2dde4 <bme680_init+0x1a2>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   2dc62:	4623      	mov	r3, r4
   2dc64:	2201      	movs	r2, #1
   2dc66:	4621      	mov	r1, r4
   2dc68:	20d0      	movs	r0, #208	; 0xd0
   2dc6a:	f7ff ff4f 	bl	2db0c <bme680_get_regs>
			if (rslt == BME680_OK) {
   2dc6e:	4605      	mov	r5, r0
   2dc70:	2800      	cmp	r0, #0
   2dc72:	f040 80b7 	bne.w	2dde4 <bme680_init+0x1a2>
				if (dev->chip_id == BME680_CHIP_ID) {
   2dc76:	7823      	ldrb	r3, [r4, #0]
   2dc78:	2b61      	cmp	r3, #97	; 0x61
   2dc7a:	f040 80b6 	bne.w	2ddea <bme680_init+0x1a8>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   2dc7e:	4601      	mov	r1, r0
   2dc80:	2229      	movs	r2, #41	; 0x29
   2dc82:	a801      	add	r0, sp, #4
   2dc84:	f005 fdd6 	bl	33834 <memset>
	rslt = null_ptr_check(dev);
   2dc88:	4620      	mov	r0, r4
	uint8_t temp_var = 0; /* Temporary variable */
   2dc8a:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
   2dc8e:	f7ff fed9 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2dc92:	4605      	mov	r5, r0
   2dc94:	2800      	cmp	r0, #0
   2dc96:	f040 80a5 	bne.w	2dde4 <bme680_init+0x1a2>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   2dc9a:	4623      	mov	r3, r4
   2dc9c:	2219      	movs	r2, #25
   2dc9e:	a901      	add	r1, sp, #4
   2dca0:	2089      	movs	r0, #137	; 0x89
   2dca2:	f7ff ff33 	bl	2db0c <bme680_get_regs>
		if (rslt == BME680_OK)
   2dca6:	4605      	mov	r5, r0
   2dca8:	b938      	cbnz	r0, 2dcba <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   2dcaa:	4623      	mov	r3, r4
   2dcac:	2210      	movs	r2, #16
   2dcae:	f10d 011d 	add.w	r1, sp, #29
   2dcb2:	20e1      	movs	r0, #225	; 0xe1
   2dcb4:	f7ff ff2a 	bl	2db0c <bme680_get_regs>
   2dcb8:	4605      	mov	r5, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   2dcba:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   2dcbe:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   2dcc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dcc6:	82e3      	strh	r3, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   2dcc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2dccc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2dcd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dcd4:	8323      	strh	r3, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   2dcd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   2dcda:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   2dcde:	76a3      	strb	r3, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   2dce0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2dce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dce8:	83a3      	strh	r3, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   2dcea:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2dcee:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2dcf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dcf6:	83e3      	strh	r3, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   2dcf8:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   2dcfc:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   2dd00:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   2dd04:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2dd08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dd0c:	8463      	strh	r3, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   2dd0e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   2dd12:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2dd16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dd1a:	84a3      	strh	r3, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   2dd1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   2dd20:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   2dd24:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   2dd28:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2dd2c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   2dd30:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2dd34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dd38:	8523      	strh	r3, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   2dd3a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2dd3e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2dd42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dd46:	8563      	strh	r3, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   2dd48:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2dd4c:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   2dd50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   2dd54:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2dd58:	f003 020f 	and.w	r2, r3, #15
   2dd5c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2dd60:	8122      	strh	r2, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2dd62:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   2dd66:	091b      	lsrs	r3, r3, #4
   2dd68:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2dd6c:	8163      	strh	r3, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   2dd6e:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   2dd70:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   2dd74:	60e3      	str	r3, [r4, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   2dd76:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2dd7a:	7423      	strb	r3, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   2dd7c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   2dd80:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   2dd82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2dd86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dd8a:	8263      	strh	r3, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   2dd8c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   2dd90:	7523      	strb	r3, [r4, #20]
		if (rslt == BME680_OK) {
   2dd92:	bb15      	cbnz	r5, 2ddda <bme680_init+0x198>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   2dd94:	4623      	mov	r3, r4
   2dd96:	2201      	movs	r2, #1
   2dd98:	f10d 0103 	add.w	r1, sp, #3
   2dd9c:	2002      	movs	r0, #2
   2dd9e:	f7ff feb5 	bl	2db0c <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   2dda2:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
   2dda6:	4605      	mov	r5, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   2dda8:	f3c3 1301 	ubfx	r3, r3, #4, #2
   2ddac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   2ddb0:	b998      	cbnz	r0, 2ddda <bme680_init+0x198>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   2ddb2:	4623      	mov	r3, r4
   2ddb4:	2201      	movs	r2, #1
   2ddb6:	f10d 0103 	add.w	r1, sp, #3
   2ddba:	f7ff fea7 	bl	2db0c <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
   2ddbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
   2ddc2:	4605      	mov	r5, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
   2ddc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   2ddc8:	b938      	cbnz	r0, 2ddda <bme680_init+0x198>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   2ddca:	4623      	mov	r3, r4
   2ddcc:	2201      	movs	r2, #1
   2ddce:	f10d 0103 	add.w	r1, sp, #3
   2ddd2:	2004      	movs	r0, #4
   2ddd4:	f7ff fe9a 	bl	2db0c <bme680_get_regs>
   2ddd8:	4605      	mov	r5, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   2ddda:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   2ddde:	111b      	asrs	r3, r3, #4
   2dde0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
   2dde4:	4628      	mov	r0, r5
   2dde6:	b00d      	add	sp, #52	; 0x34
   2dde8:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
   2ddea:	f06f 0502 	mvn.w	r5, #2
   2ddee:	e7f9      	b.n	2dde4 <bme680_init+0x1a2>

0002ddf0 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   2ddf0:	2374      	movs	r3, #116	; 0x74
{
   2ddf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ddf4:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   2ddf6:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   2ddfa:	f7ff fe23 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2ddfe:	bba0      	cbnz	r0, 2de6a <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
   2de00:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   2de02:	4623      	mov	r3, r4
   2de04:	2201      	movs	r2, #1
   2de06:	f10d 0106 	add.w	r1, sp, #6
   2de0a:	2074      	movs	r0, #116	; 0x74
   2de0c:	f7ff fe7e 	bl	2db0c <bme680_get_regs>
			if (rslt == BME680_OK) {
   2de10:	b9a0      	cbnz	r0, 2de3c <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   2de12:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
   2de16:	f013 0503 	ands.w	r5, r3, #3
   2de1a:	d011      	beq.n	2de40 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   2de1c:	f023 0303 	bic.w	r3, r3, #3
   2de20:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   2de24:	2201      	movs	r2, #1
   2de26:	4623      	mov	r3, r4
   2de28:	f10d 0106 	add.w	r1, sp, #6
   2de2c:	f10d 0007 	add.w	r0, sp, #7
   2de30:	f7ff fe90 	bl	2db54 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   2de34:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2de36:	200a      	movs	r0, #10
   2de38:	4798      	blx	r3
   2de3a:	e7e2      	b.n	2de02 <bme680_set_sensor_mode+0x12>
		} while (pow_mode != BME680_SLEEP_MODE);
   2de3c:	2d00      	cmp	r5, #0
   2de3e:	d1e0      	bne.n	2de02 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
   2de40:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   2de44:	b18a      	cbz	r2, 2de6a <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   2de46:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2de4a:	f002 0203 	and.w	r2, r2, #3
   2de4e:	f023 0303 	bic.w	r3, r3, #3
   2de52:	4313      	orrs	r3, r2
   2de54:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   2de58:	b938      	cbnz	r0, 2de6a <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   2de5a:	4623      	mov	r3, r4
   2de5c:	2201      	movs	r2, #1
   2de5e:	f10d 0106 	add.w	r1, sp, #6
   2de62:	f10d 0007 	add.w	r0, sp, #7
   2de66:	f7ff fe75 	bl	2db54 <bme680_set_regs>
}
   2de6a:	b003      	add	sp, #12
   2de6c:	bd30      	pop	{r4, r5, pc}

0002de6e <bme680_get_sensor_mode>:
{
   2de6e:	b513      	push	{r0, r1, r4, lr}
   2de70:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   2de72:	f7ff fde7 	bl	2da44 <null_ptr_check>
	if (rslt == BME680_OK) {
   2de76:	b960      	cbnz	r0, 2de92 <bme680_get_sensor_mode+0x24>
		rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &mode, 1, dev);
   2de78:	4623      	mov	r3, r4
   2de7a:	2201      	movs	r2, #1
   2de7c:	f10d 0107 	add.w	r1, sp, #7
   2de80:	2074      	movs	r0, #116	; 0x74
   2de82:	f7ff fe43 	bl	2db0c <bme680_get_regs>
		dev->power_mode = mode & BME680_MODE_MSK;
   2de86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2de8a:	f003 0303 	and.w	r3, r3, #3
   2de8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
   2de92:	b002      	add	sp, #8
   2de94:	bd10      	pop	{r4, pc}

0002de96 <arch_printk_char_out>:
}
   2de96:	2000      	movs	r0, #0
   2de98:	4770      	bx	lr

0002de9a <print_err>:
{
   2de9a:	b570      	push	{r4, r5, r6, lr}
   2de9c:	460d      	mov	r5, r1
   2de9e:	4604      	mov	r4, r0
	out('E', ctx);
   2dea0:	2045      	movs	r0, #69	; 0x45
   2dea2:	47a0      	blx	r4
	out('R', ctx);
   2dea4:	4629      	mov	r1, r5
   2dea6:	2052      	movs	r0, #82	; 0x52
   2dea8:	47a0      	blx	r4
	out('R', ctx);
   2deaa:	4629      	mov	r1, r5
   2deac:	4623      	mov	r3, r4
}
   2deae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2deb2:	2052      	movs	r0, #82	; 0x52
   2deb4:	4718      	bx	r3

0002deb6 <str_out>:
{
   2deb6:	b530      	push	{r4, r5, lr}
   2deb8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2deba:	680c      	ldr	r4, [r1, #0]
   2debc:	1c55      	adds	r5, r2, #1
   2debe:	b114      	cbz	r4, 2dec6 <str_out+0x10>
   2dec0:	684b      	ldr	r3, [r1, #4]
   2dec2:	4293      	cmp	r3, r2
   2dec4:	dc01      	bgt.n	2deca <str_out+0x14>
		ctx->count++;
   2dec6:	608d      	str	r5, [r1, #8]
}
   2dec8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2deca:	3b01      	subs	r3, #1
   2decc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2dece:	bf08      	it	eq
   2ded0:	2200      	moveq	r2, #0
   2ded2:	608d      	str	r5, [r1, #8]
   2ded4:	bf0c      	ite	eq
   2ded6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2ded8:	54a0      	strbne	r0, [r4, r2]
   2deda:	e7f5      	b.n	2dec8 <str_out+0x12>

0002dedc <z_vprintk>:
{
   2dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   2dee0:	f04f 0800 	mov.w	r8, #0
{
   2dee4:	4606      	mov	r6, r0
   2dee6:	460f      	mov	r7, r1
	int min_width = -1;
   2dee8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   2deec:	46c1      	mov	r9, r8
{
   2deee:	b08b      	sub	sp, #44	; 0x2c
   2def0:	461c      	mov	r4, r3
	while (*fmt) {
   2def2:	1e53      	subs	r3, r2, #1
   2def4:	9302      	str	r3, [sp, #8]
			might_format = 0;
   2def6:	2500      	movs	r5, #0
					break;
   2def8:	e005      	b.n	2df06 <z_vprintk+0x2a>
		if (!might_format) {
   2defa:	b96d      	cbnz	r5, 2df18 <z_vprintk+0x3c>
			if (*fmt != '%') {
   2defc:	2825      	cmp	r0, #37	; 0x25
   2defe:	f000 814f 	beq.w	2e1a0 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   2df02:	4639      	mov	r1, r7
   2df04:	47b0      	blx	r6
	while (*fmt) {
   2df06:	9b02      	ldr	r3, [sp, #8]
   2df08:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2df0c:	9302      	str	r3, [sp, #8]
   2df0e:	2800      	cmp	r0, #0
   2df10:	d1f3      	bne.n	2defa <z_vprintk+0x1e>
}
   2df12:	b00b      	add	sp, #44	; 0x2c
   2df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   2df18:	2864      	cmp	r0, #100	; 0x64
   2df1a:	d06e      	beq.n	2dffa <z_vprintk+0x11e>
   2df1c:	d81a      	bhi.n	2df54 <z_vprintk+0x78>
   2df1e:	2839      	cmp	r0, #57	; 0x39
   2df20:	d80a      	bhi.n	2df38 <z_vprintk+0x5c>
   2df22:	2831      	cmp	r0, #49	; 0x31
   2df24:	d260      	bcs.n	2dfe8 <z_vprintk+0x10c>
   2df26:	282d      	cmp	r0, #45	; 0x2d
   2df28:	f000 8140 	beq.w	2e1ac <z_vprintk+0x2d0>
   2df2c:	2830      	cmp	r0, #48	; 0x30
   2df2e:	d04c      	beq.n	2dfca <z_vprintk+0xee>
   2df30:	2825      	cmp	r0, #37	; 0x25
   2df32:	d107      	bne.n	2df44 <z_vprintk+0x68>
				out((int)'%', ctx);
   2df34:	4639      	mov	r1, r7
   2df36:	e00b      	b.n	2df50 <z_vprintk+0x74>
			switch (*fmt) {
   2df38:	2858      	cmp	r0, #88	; 0x58
   2df3a:	f000 80bb 	beq.w	2e0b4 <z_vprintk+0x1d8>
   2df3e:	2863      	cmp	r0, #99	; 0x63
   2df40:	f000 812a 	beq.w	2e198 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   2df44:	4639      	mov	r1, r7
   2df46:	2025      	movs	r0, #37	; 0x25
   2df48:	47b0      	blx	r6
					out((int)*fmt, ctx);
   2df4a:	4639      	mov	r1, r7
   2df4c:	9b02      	ldr	r3, [sp, #8]
   2df4e:	7818      	ldrb	r0, [r3, #0]
   2df50:	47b0      	blx	r6
   2df52:	e7d0      	b.n	2def6 <z_vprintk+0x1a>
			switch (*fmt) {
   2df54:	2870      	cmp	r0, #112	; 0x70
   2df56:	f000 80a3 	beq.w	2e0a0 <z_vprintk+0x1c4>
   2df5a:	d811      	bhi.n	2df80 <z_vprintk+0xa4>
   2df5c:	2869      	cmp	r0, #105	; 0x69
   2df5e:	d04c      	beq.n	2dffa <z_vprintk+0x11e>
   2df60:	286c      	cmp	r0, #108	; 0x6c
   2df62:	d105      	bne.n	2df70 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   2df64:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2df68:	d12a      	bne.n	2dfc0 <z_vprintk+0xe4>
					length_mod = 'L';
   2df6a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   2df6e:	e7ca      	b.n	2df06 <z_vprintk+0x2a>
			switch (*fmt) {
   2df70:	2868      	cmp	r0, #104	; 0x68
   2df72:	d1e7      	bne.n	2df44 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   2df74:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   2df78:	d122      	bne.n	2dfc0 <z_vprintk+0xe4>
					length_mod = 'H';
   2df7a:	f04f 0848 	mov.w	r8, #72	; 0x48
   2df7e:	e7c2      	b.n	2df06 <z_vprintk+0x2a>
			switch (*fmt) {
   2df80:	2875      	cmp	r0, #117	; 0x75
   2df82:	d071      	beq.n	2e068 <z_vprintk+0x18c>
   2df84:	d818      	bhi.n	2dfb8 <z_vprintk+0xdc>
   2df86:	2873      	cmp	r0, #115	; 0x73
   2df88:	d1dc      	bne.n	2df44 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   2df8a:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   2df8e:	46ab      	mov	fp, r5
   2df90:	465b      	mov	r3, fp
   2df92:	f81b 0b01 	ldrb.w	r0, [fp], #1
   2df96:	2800      	cmp	r0, #0
   2df98:	f040 80fb 	bne.w	2e192 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   2df9c:	f1b9 0f03 	cmp.w	r9, #3
   2dfa0:	f040 810a 	bne.w	2e1b8 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   2dfa4:	1b5d      	subs	r5, r3, r5
   2dfa6:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   2dfaa:	2d00      	cmp	r5, #0
   2dfac:	dda3      	ble.n	2def6 <z_vprintk+0x1a>
						out(' ', ctx);
   2dfae:	4639      	mov	r1, r7
   2dfb0:	2020      	movs	r0, #32
   2dfb2:	47b0      	blx	r6
   2dfb4:	3d01      	subs	r5, #1
   2dfb6:	e7f8      	b.n	2dfaa <z_vprintk+0xce>
			switch (*fmt) {
   2dfb8:	2878      	cmp	r0, #120	; 0x78
   2dfba:	d07b      	beq.n	2e0b4 <z_vprintk+0x1d8>
   2dfbc:	287a      	cmp	r0, #122	; 0x7a
   2dfbe:	d1c1      	bne.n	2df44 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   2dfc0:	f1b8 0f00 	cmp.w	r8, #0
   2dfc4:	d1be      	bne.n	2df44 <z_vprintk+0x68>
   2dfc6:	4680      	mov	r8, r0
   2dfc8:	e79d      	b.n	2df06 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   2dfca:	f1ba 0f00 	cmp.w	sl, #0
   2dfce:	da0e      	bge.n	2dfee <z_vprintk+0x112>
   2dfd0:	f1b9 0f00 	cmp.w	r9, #0
   2dfd4:	f000 80ed 	beq.w	2e1b2 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   2dfd8:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   2dfdc:	f1b9 0f00 	cmp.w	r9, #0
   2dfe0:	bf08      	it	eq
   2dfe2:	f04f 0902 	moveq.w	r9, #2
   2dfe6:	e78e      	b.n	2df06 <z_vprintk+0x2a>
				if (min_width < 0) {
   2dfe8:	f1ba 0f00 	cmp.w	sl, #0
   2dfec:	dbf4      	blt.n	2dfd8 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   2dfee:	230a      	movs	r3, #10
   2dff0:	fb03 0a0a 	mla	sl, r3, sl, r0
   2dff4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   2dff8:	e7f0      	b.n	2dfdc <z_vprintk+0x100>
				if (length_mod == 'z') {
   2dffa:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2dffe:	d102      	bne.n	2e006 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   2e000:	f854 5b04 	ldr.w	r5, [r4], #4
   2e004:	e01f      	b.n	2e046 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   2e006:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2e00a:	d0f9      	beq.n	2e000 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   2e00c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2e010:	d1f6      	bne.n	2e000 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   2e012:	3407      	adds	r4, #7
   2e014:	f024 0407 	bic.w	r4, r4, #7
   2e018:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   2e01c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   2e020:	9106      	str	r1, [sp, #24]
   2e022:	f143 0100 	adc.w	r1, r3, #0
   2e026:	9107      	str	r1, [sp, #28]
   2e028:	2100      	movs	r1, #0
   2e02a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   2e02e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e032:	4561      	cmp	r1, ip
   2e034:	bf08      	it	eq
   2e036:	4558      	cmpeq	r0, fp
   2e038:	d204      	bcs.n	2e044 <z_vprintk+0x168>
						print_err(out, ctx);
   2e03a:	4639      	mov	r1, r7
   2e03c:	4630      	mov	r0, r6
   2e03e:	f7ff ff2c 	bl	2de9a <print_err>
						break;
   2e042:	e758      	b.n	2def6 <z_vprintk+0x1a>
					d = lld;
   2e044:	4615      	mov	r5, r2
				if (d < 0) {
   2e046:	2d00      	cmp	r5, #0
   2e048:	da05      	bge.n	2e056 <z_vprintk+0x17a>
					out((int)'-', ctx);
   2e04a:	4639      	mov	r1, r7
   2e04c:	202d      	movs	r0, #45	; 0x2d
   2e04e:	47b0      	blx	r6
					d = -d;
   2e050:	426d      	negs	r5, r5
					min_width--;
   2e052:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   2e056:	464b      	mov	r3, r9
   2e058:	462a      	mov	r2, r5
   2e05a:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   2e05e:	4639      	mov	r1, r7
   2e060:	4630      	mov	r0, r6
   2e062:	f7e8 ff49 	bl	16ef8 <_printk_dec_ulong>
				break;
   2e066:	e746      	b.n	2def6 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   2e068:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2e06c:	d102      	bne.n	2e074 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   2e06e:	f854 2b04 	ldr.w	r2, [r4], #4
   2e072:	e011      	b.n	2e098 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   2e074:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2e078:	d0f9      	beq.n	2e06e <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   2e07a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2e07e:	d1f6      	bne.n	2e06e <z_vprintk+0x192>
					if (llu > ~0UL) {
   2e080:	2100      	movs	r1, #0
   2e082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   2e086:	3407      	adds	r4, #7
   2e088:	f024 0407 	bic.w	r4, r4, #7
   2e08c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   2e090:	4299      	cmp	r1, r3
   2e092:	bf08      	it	eq
   2e094:	4290      	cmpeq	r0, r2
   2e096:	d3d0      	bcc.n	2e03a <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   2e098:	f8cd a000 	str.w	sl, [sp]
   2e09c:	464b      	mov	r3, r9
   2e09e:	e7de      	b.n	2e05e <z_vprintk+0x182>
				out('0', ctx);
   2e0a0:	4639      	mov	r1, r7
   2e0a2:	2030      	movs	r0, #48	; 0x30
   2e0a4:	47b0      	blx	r6
				out('x', ctx);
   2e0a6:	4639      	mov	r1, r7
   2e0a8:	2078      	movs	r0, #120	; 0x78
   2e0aa:	47b0      	blx	r6
					min_width = 8;
   2e0ac:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   2e0b0:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   2e0b4:	9b02      	ldr	r3, [sp, #8]
   2e0b6:	781b      	ldrb	r3, [r3, #0]
   2e0b8:	2b70      	cmp	r3, #112	; 0x70
   2e0ba:	d104      	bne.n	2e0c6 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   2e0bc:	f854 3b04 	ldr.w	r3, [r4], #4
   2e0c0:	9304      	str	r3, [sp, #16]
   2e0c2:	2300      	movs	r3, #0
   2e0c4:	e00d      	b.n	2e0e2 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   2e0c6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2e0ca:	d0f7      	beq.n	2e0bc <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   2e0cc:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2e0d0:	d1f4      	bne.n	2e0bc <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   2e0d2:	3407      	adds	r4, #7
   2e0d4:	f024 0307 	bic.w	r3, r4, #7
   2e0d8:	461c      	mov	r4, r3
   2e0da:	f854 2b08 	ldr.w	r2, [r4], #8
   2e0de:	685b      	ldr	r3, [r3, #4]
   2e0e0:	9204      	str	r2, [sp, #16]
	int digits = 0;
   2e0e2:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   2e0e4:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   2e0e6:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   2e0ea:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   2e0ec:	9105      	str	r1, [sp, #20]
		shift -= 4;
   2e0ee:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   2e0f2:	9804      	ldr	r0, [sp, #16]
   2e0f4:	f1cb 0c20 	rsb	ip, fp, #32
   2e0f8:	f1ab 0120 	sub.w	r1, fp, #32
   2e0fc:	fa20 f00b 	lsr.w	r0, r0, fp
   2e100:	fa03 fc0c 	lsl.w	ip, r3, ip
   2e104:	ea40 000c 	orr.w	r0, r0, ip
   2e108:	fa23 f101 	lsr.w	r1, r3, r1
   2e10c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   2e10e:	f010 000f 	ands.w	r0, r0, #15
   2e112:	d106      	bne.n	2e122 <z_vprintk+0x246>
   2e114:	9905      	ldr	r1, [sp, #20]
   2e116:	b911      	cbnz	r1, 2e11e <z_vprintk+0x242>
   2e118:	f1bb 0f00 	cmp.w	fp, #0
   2e11c:	d122      	bne.n	2e164 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   2e11e:	2130      	movs	r1, #48	; 0x30
   2e120:	e003      	b.n	2e12a <z_vprintk+0x24e>
   2e122:	2809      	cmp	r0, #9
   2e124:	bf8c      	ite	hi
   2e126:	2157      	movhi	r1, #87	; 0x57
   2e128:	2130      	movls	r1, #48	; 0x30
   2e12a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   2e12c:	b240      	sxtb	r0, r0
   2e12e:	4639      	mov	r1, r7
   2e130:	9308      	str	r3, [sp, #32]
   2e132:	9205      	str	r2, [sp, #20]
   2e134:	47b0      	blx	r6
			digits++;
   2e136:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   2e138:	9a05      	ldr	r2, [sp, #20]
			digits++;
   2e13a:	3301      	adds	r3, #1
   2e13c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   2e13e:	9b08      	ldr	r3, [sp, #32]
   2e140:	f1bb 0f00 	cmp.w	fp, #0
   2e144:	d123      	bne.n	2e18e <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   2e146:	f1b9 0f03 	cmp.w	r9, #3
   2e14a:	f47f aed4 	bne.w	2def6 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   2e14e:	9b03      	ldr	r3, [sp, #12]
   2e150:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   2e154:	2d00      	cmp	r5, #0
   2e156:	f77f aece 	ble.w	2def6 <z_vprintk+0x1a>
			out(' ', ctx);
   2e15a:	4639      	mov	r1, r7
   2e15c:	2020      	movs	r0, #32
   2e15e:	47b0      	blx	r6
   2e160:	3d01      	subs	r5, #1
   2e162:	e7f7      	b.n	2e154 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   2e164:	1e51      	subs	r1, r2, #1
   2e166:	4592      	cmp	sl, r2
   2e168:	9108      	str	r1, [sp, #32]
   2e16a:	db07      	blt.n	2e17c <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   2e16c:	f1b9 0f01 	cmp.w	r9, #1
   2e170:	d106      	bne.n	2e180 <z_vprintk+0x2a4>
				out('0', ctx);
   2e172:	4639      	mov	r1, r7
   2e174:	2030      	movs	r0, #48	; 0x30
   2e176:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2e178:	47b0      	blx	r6
   2e17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   2e17c:	9a08      	ldr	r2, [sp, #32]
   2e17e:	e7b6      	b.n	2e0ee <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   2e180:	f1b9 0f02 	cmp.w	r9, #2
   2e184:	d1fa      	bne.n	2e17c <z_vprintk+0x2a0>
   2e186:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2e188:	4639      	mov	r1, r7
   2e18a:	2020      	movs	r0, #32
   2e18c:	e7f4      	b.n	2e178 <z_vprintk+0x29c>
			found_largest_digit = 1;
   2e18e:	9505      	str	r5, [sp, #20]
   2e190:	e7ad      	b.n	2e0ee <z_vprintk+0x212>
					out((int)(*s++), ctx);
   2e192:	4639      	mov	r1, r7
   2e194:	47b0      	blx	r6
   2e196:	e6fb      	b.n	2df90 <z_vprintk+0xb4>
				out(c, ctx);
   2e198:	4639      	mov	r1, r7
   2e19a:	f854 0b04 	ldr.w	r0, [r4], #4
   2e19e:	e6d7      	b.n	2df50 <z_vprintk+0x74>
				length_mod = 0;
   2e1a0:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   2e1a2:	46a9      	mov	r9, r5
				min_width = -1;
   2e1a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   2e1a8:	2501      	movs	r5, #1
   2e1aa:	e6ac      	b.n	2df06 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   2e1ac:	f04f 0903 	mov.w	r9, #3
   2e1b0:	e6a9      	b.n	2df06 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   2e1b2:	f04f 0901 	mov.w	r9, #1
   2e1b6:	e6a6      	b.n	2df06 <z_vprintk+0x2a>
			might_format = 0;
   2e1b8:	4605      	mov	r5, r0
		++fmt;
   2e1ba:	e6a4      	b.n	2df06 <z_vprintk+0x2a>

0002e1bc <printk>:
{
   2e1bc:	b40f      	push	{r0, r1, r2, r3}
   2e1be:	b507      	push	{r0, r1, r2, lr}
   2e1c0:	a904      	add	r1, sp, #16
   2e1c2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2e1c6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2e1c8:	f7e8 fee2 	bl	16f90 <vprintk>
}
   2e1cc:	b003      	add	sp, #12
   2e1ce:	f85d eb04 	ldr.w	lr, [sp], #4
   2e1d2:	b004      	add	sp, #16
   2e1d4:	4770      	bx	lr

0002e1d6 <snprintk>:
{
   2e1d6:	b40c      	push	{r2, r3}
   2e1d8:	b507      	push	{r0, r1, r2, lr}
   2e1da:	ab04      	add	r3, sp, #16
   2e1dc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2e1e0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2e1e2:	f7e8 fee3 	bl	16fac <vsnprintk>
}
   2e1e6:	b003      	add	sp, #12
   2e1e8:	f85d eb04 	ldr.w	lr, [sp], #4
   2e1ec:	b002      	add	sp, #8
   2e1ee:	4770      	bx	lr

0002e1f0 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2e1f0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2e1f2:	f7fb fafb 	bl	297ec <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2e1f6:	2000      	movs	r0, #0
   2e1f8:	bd08      	pop	{r3, pc}

0002e1fa <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2e1fa:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2e1fc:	f7fb fb3a 	bl	29874 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2e200:	f110 0f0b 	cmn.w	r0, #11
   2e204:	d005      	beq.n	2e212 <sys_sem_take+0x18>
   2e206:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2e20a:	bf08      	it	eq
   2e20c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2e210:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2e212:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2e216:	e7fb      	b.n	2e210 <sys_sem_take+0x16>

0002e218 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2e218:	4604      	mov	r4, r0
   2e21a:	b508      	push	{r3, lr}
   2e21c:	4608      	mov	r0, r1
   2e21e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2e220:	461a      	mov	r2, r3
   2e222:	47a0      	blx	r4
	return z_impl_k_current_get();
   2e224:	f7fb fadc 	bl	297e0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2e228:	f7ea ff1e 	bl	19068 <z_impl_k_thread_abort>

0002e22c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2e22c:	b510      	push	{r4, lr}
   2e22e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2e230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e234:	4620      	mov	r0, r4
   2e236:	f7fa f853 	bl	282e0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2e23a:	4603      	mov	r3, r0
   2e23c:	2800      	cmp	r0, #0
   2e23e:	d0f7      	beq.n	2e230 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2e240:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e242:	3308      	adds	r3, #8
   2e244:	e8d3 1fef 	ldaex	r1, [r3]
   2e248:	f021 0c01 	bic.w	ip, r1, #1
   2e24c:	e8c3 cfee 	stlex	lr, ip, [r3]
   2e250:	f1be 0f00 	cmp.w	lr, #0
   2e254:	d1f6      	bne.n	2e244 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2e256:	07cb      	lsls	r3, r1, #31
   2e258:	d500      	bpl.n	2e25c <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2e25a:	4790      	blx	r2
	z_impl_k_yield();
   2e25c:	f7fb f942 	bl	294e4 <z_impl_k_yield>
   2e260:	e7e6      	b.n	2e230 <z_work_q_main+0x4>

0002e262 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   2e262:	6803      	ldr	r3, [r0, #0]
   2e264:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   2e268:	6883      	ldr	r3, [r0, #8]
   2e26a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   2e26e:	bf2c      	ite	cs
   2e270:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   2e274:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   2e278:	4770      	bx	lr

0002e27a <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   2e27a:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   2e27c:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   2e27e:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   2e280:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   2e284:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   2e288:	bf2c      	ite	cs
   2e28a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   2e28e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2e292:	bd10      	pop	{r4, pc}

0002e294 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   2e294:	b538      	push	{r3, r4, r5, lr}
   2e296:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e298:	2200      	movs	r2, #0
{
   2e29a:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e29c:	f7ff ffe1 	bl	2e262 <chunk_field>
   2e2a0:	68eb      	ldr	r3, [r5, #12]
   2e2a2:	4018      	ands	r0, r3
	return c + size(h, c);
}
   2e2a4:	4420      	add	r0, r4
   2e2a6:	bd38      	pop	{r3, r4, r5, pc}

0002e2a8 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   2e2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   2e2ac:	6847      	ldr	r7, [r0, #4]
{
   2e2ae:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   2e2b0:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   2e2b4:	6853      	ldr	r3, [r2, #4]
{
   2e2b6:	4604      	mov	r4, r0
	b->list_size--;
   2e2b8:	3b01      	subs	r3, #1
{
   2e2ba:	460d      	mov	r5, r1
	b->list_size--;
   2e2bc:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   2e2be:	b953      	cbnz	r3, 2e2d6 <free_list_remove+0x2e>
		h->avail_buckets &= ~(1 << bidx);
   2e2c0:	2201      	movs	r2, #1
   2e2c2:	fa02 f101 	lsl.w	r1, r2, r1
   2e2c6:	6942      	ldr	r2, [r0, #20]
   2e2c8:	ea22 0201 	bic.w	r2, r2, r1
   2e2cc:	6142      	str	r2, [r0, #20]
		b->next = 0;
   2e2ce:	f847 3035 	str.w	r3, [r7, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   2e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2e2d6:	4631      	mov	r1, r6
   2e2d8:	2202      	movs	r2, #2
   2e2da:	f7ff ffc2 	bl	2e262 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   2e2de:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   2e2e0:	4680      	mov	r8, r0
	return chunk_field(h, c, FREE_NEXT);
   2e2e2:	2203      	movs	r2, #3
   2e2e4:	4620      	mov	r0, r4
   2e2e6:	f7ff ffbc 	bl	2e262 <chunk_field>
   2e2ea:	4606      	mov	r6, r0
		b->next = second;
   2e2ec:	f847 0035 	str.w	r0, [r7, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   2e2f0:	4603      	mov	r3, r0
   2e2f2:	4641      	mov	r1, r8
   2e2f4:	4620      	mov	r0, r4
   2e2f6:	2203      	movs	r2, #3
   2e2f8:	f7ff ffbf 	bl	2e27a <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   2e2fc:	4643      	mov	r3, r8
   2e2fe:	4631      	mov	r1, r6
   2e300:	4620      	mov	r0, r4
}
   2e302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   2e306:	2202      	movs	r2, #2
   2e308:	f7ff bfb7 	b.w	2e27a <chunk_set>

0002e30c <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e310:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e312:	2200      	movs	r2, #0
   2e314:	460d      	mov	r5, r1
   2e316:	f7ff ffa4 	bl	2e262 <chunk_field>
   2e31a:	68e3      	ldr	r3, [r4, #12]
   2e31c:	4018      	ands	r0, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e31e:	68a3      	ldr	r3, [r4, #8]
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e320:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e328:	bf34      	ite	cc
   2e32a:	2000      	movcc	r0, #0
   2e32c:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   2e32e:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e330:	f1c0 001f 	rsb	r0, r0, #31
   2e334:	1a80      	subs	r0, r0, r2
   2e336:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2e33a:	684a      	ldr	r2, [r1, #4]
   2e33c:	1c56      	adds	r6, r2, #1
   2e33e:	604e      	str	r6, [r1, #4]
   2e340:	b9a2      	cbnz	r2, 2e36c <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   2e342:	2201      	movs	r2, #1
   2e344:	fa02 f100 	lsl.w	r1, r2, r0
   2e348:	6962      	ldr	r2, [r4, #20]
   2e34a:	430a      	orrs	r2, r1
   2e34c:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   2e34e:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   2e350:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   2e354:	2202      	movs	r2, #2
   2e356:	462b      	mov	r3, r5
   2e358:	4620      	mov	r0, r4
   2e35a:	f7ff ff8e 	bl	2e27a <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   2e35e:	2203      	movs	r2, #3
   2e360:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   2e362:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   2e364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   2e368:	f7ff bf87 	b.w	2e27a <chunk_set>
		chunkid_t second = h->buckets[b].next;
   2e36c:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   2e370:	2202      	movs	r2, #2
   2e372:	4631      	mov	r1, r6
   2e374:	4620      	mov	r0, r4
   2e376:	f7ff ff74 	bl	2e262 <chunk_field>
   2e37a:	4607      	mov	r7, r0
		chunk_set(h, c, FREE_PREV, first);
   2e37c:	4603      	mov	r3, r0
   2e37e:	2202      	movs	r2, #2
   2e380:	4629      	mov	r1, r5
   2e382:	4620      	mov	r0, r4
   2e384:	f7ff ff79 	bl	2e27a <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   2e388:	4633      	mov	r3, r6
   2e38a:	2203      	movs	r2, #3
   2e38c:	4629      	mov	r1, r5
   2e38e:	4620      	mov	r0, r4
   2e390:	f7ff ff73 	bl	2e27a <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   2e394:	2203      	movs	r2, #3
   2e396:	4639      	mov	r1, r7
   2e398:	462b      	mov	r3, r5
   2e39a:	4620      	mov	r0, r4
   2e39c:	f7ff ff6d 	bl	2e27a <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   2e3a0:	2202      	movs	r2, #2
   2e3a2:	4631      	mov	r1, r6
   2e3a4:	e7dd      	b.n	2e362 <free_list_add+0x56>

0002e3a6 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   2e3a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e3aa:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   2e3ac:	6843      	ldr	r3, [r0, #4]
{
   2e3ae:	4691      	mov	r9, r2
	chunkid_t c = h->buckets[bidx].next;
   2e3b0:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   2e3b4:	462a      	mov	r2, r5
   2e3b6:	f7ff ff77 	bl	2e2a8 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e3ba:	2200      	movs	r2, #0
   2e3bc:	4629      	mov	r1, r5
   2e3be:	4620      	mov	r0, r4
   2e3c0:	f7ff ff4f 	bl	2e262 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   2e3c4:	68a3      	ldr	r3, [r4, #8]
   2e3c6:	68e6      	ldr	r6, [r4, #12]
   2e3c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e3cc:	bf2c      	ite	cs
   2e3ce:	2302      	movcs	r3, #2
   2e3d0:	2301      	movcc	r3, #1
   2e3d2:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   2e3d4:	eba6 0609 	sub.w	r6, r6, r9
	if (rem >= (big_heap(h) ? 2 : 1)) {
   2e3d8:	42b3      	cmp	r3, r6
   2e3da:	d82d      	bhi.n	2e438 <split_alloc+0x92>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   2e3dc:	4629      	mov	r1, r5
   2e3de:	4620      	mov	r0, r4
   2e3e0:	f7ff ff58 	bl	2e294 <right_chunk>
		chunkid_t c2 = c + sz;
   2e3e4:	eb05 0709 	add.w	r7, r5, r9

		chunk_set(h, c, SIZE_AND_USED, sz);
   2e3e8:	464b      	mov	r3, r9
   2e3ea:	2200      	movs	r2, #0
   2e3ec:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   2e3ee:	4680      	mov	r8, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   2e3f0:	4620      	mov	r0, r4
   2e3f2:	f7ff ff42 	bl	2e27a <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   2e3f6:	4633      	mov	r3, r6
   2e3f8:	2200      	movs	r2, #0
   2e3fa:	4639      	mov	r1, r7
   2e3fc:	4620      	mov	r0, r4
   2e3fe:	f7ff ff3c 	bl	2e27a <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   2e402:	464b      	mov	r3, r9
   2e404:	2201      	movs	r2, #1
   2e406:	4639      	mov	r1, r7
   2e408:	4620      	mov	r0, r4
   2e40a:	f7ff ff36 	bl	2e27a <chunk_set>
   2e40e:	2200      	movs	r2, #0
   2e410:	4639      	mov	r1, r7
   2e412:	4620      	mov	r0, r4
   2e414:	f7ff ff25 	bl	2e262 <chunk_field>
   2e418:	68e3      	ldr	r3, [r4, #12]
   2e41a:	4018      	ands	r0, r3
		if (!last_chunk(h, c2)) {
   2e41c:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2e41e:	4438      	add	r0, r7
		if (!last_chunk(h, c2)) {
   2e420:	4298      	cmp	r0, r3
   2e422:	d005      	beq.n	2e430 <split_alloc+0x8a>
			chunk_set(h, c3, LEFT_SIZE, rem);
   2e424:	4633      	mov	r3, r6
   2e426:	2201      	movs	r2, #1
   2e428:	4641      	mov	r1, r8
   2e42a:	4620      	mov	r0, r4
   2e42c:	f7ff ff25 	bl	2e27a <chunk_set>
		}
		free_list_add(h, c2);
   2e430:	4639      	mov	r1, r7
   2e432:	4620      	mov	r0, r4
   2e434:	f7ff ff6a 	bl	2e30c <free_list_add>
   2e438:	4629      	mov	r1, r5
   2e43a:	2200      	movs	r2, #0
   2e43c:	4620      	mov	r0, r4
   2e43e:	f7ff ff10 	bl	2e262 <chunk_field>
   2e442:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   2e444:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e446:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   2e44a:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   2e44c:	4313      	orrs	r3, r2
   2e44e:	4620      	mov	r0, r4
   2e450:	2200      	movs	r2, #0
   2e452:	f7ff ff12 	bl	2e27a <chunk_set>
	return big_heap(h) ? 8 : 4;
   2e456:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   2e458:	6820      	ldr	r0, [r4, #0]
   2e45a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e45e:	bf2c      	ite	cs
   2e460:	2308      	movcs	r3, #8
   2e462:	2304      	movcc	r3, #4
   2e464:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   2e468:	4428      	add	r0, r5
   2e46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e46e <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   2e46e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   2e472:	2900      	cmp	r1, #0
   2e474:	f000 80ab 	beq.w	2e5ce <sys_heap_free+0x160>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   2e478:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e47a:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   2e47c:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e47e:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   2e480:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2e484:	bf2c      	ite	cs
   2e486:	2508      	movcs	r5, #8
   2e488:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   2e48a:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   2e48c:	6821      	ldr	r1, [r4, #0]
   2e48e:	1a6d      	subs	r5, r5, r1
   2e490:	bf48      	it	mi
   2e492:	3507      	addmi	r5, #7
   2e494:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e496:	4629      	mov	r1, r5
   2e498:	f7ff fee3 	bl	2e262 <chunk_field>
   2e49c:	68e6      	ldr	r6, [r4, #12]
   2e49e:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   2e4a2:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   2e4a6:	42bb      	cmp	r3, r7
   2e4a8:	d036      	beq.n	2e518 <sys_heap_free+0xaa>
   2e4aa:	4629      	mov	r1, r5
   2e4ac:	4620      	mov	r0, r4
   2e4ae:	f7ff fef1 	bl	2e294 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   2e4b2:	2200      	movs	r2, #0
   2e4b4:	4601      	mov	r1, r0
   2e4b6:	4682      	mov	sl, r0
   2e4b8:	4620      	mov	r0, r4
   2e4ba:	f7ff fed2 	bl	2e262 <chunk_field>
   2e4be:	ea30 0906 	bics.w	r9, r0, r6
   2e4c2:	d129      	bne.n	2e518 <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e4c4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2e4c8:	bf34      	ite	cc
   2e4ca:	2100      	movcc	r1, #0
   2e4cc:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e4ce:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   2e4d0:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e4d2:	fab6 f686 	clz	r6, r6
   2e4d6:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   2e4da:	4652      	mov	r2, sl
   2e4dc:	1b89      	subs	r1, r1, r6
   2e4de:	4620      	mov	r0, r4
   2e4e0:	f7ff fee2 	bl	2e2a8 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   2e4e4:	4643      	mov	r3, r8
   2e4e6:	464a      	mov	r2, r9
   2e4e8:	4629      	mov	r1, r5
   2e4ea:	4620      	mov	r0, r4
   2e4ec:	f7ff fec5 	bl	2e27a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e4f0:	4629      	mov	r1, r5
   2e4f2:	4620      	mov	r0, r4
   2e4f4:	f7ff feb5 	bl	2e262 <chunk_field>
   2e4f8:	68e3      	ldr	r3, [r4, #12]
   2e4fa:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   2e4fc:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2e4fe:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   2e500:	4283      	cmp	r3, r0
   2e502:	d009      	beq.n	2e518 <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   2e504:	4629      	mov	r1, r5
   2e506:	4620      	mov	r0, r4
   2e508:	f7ff fec4 	bl	2e294 <right_chunk>
   2e50c:	4643      	mov	r3, r8
   2e50e:	4601      	mov	r1, r0
   2e510:	2201      	movs	r2, #1
   2e512:	4620      	mov	r0, r4
   2e514:	f7ff feb1 	bl	2e27a <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   2e518:	6923      	ldr	r3, [r4, #16]
   2e51a:	42ab      	cmp	r3, r5
   2e51c:	d045      	beq.n	2e5aa <sys_heap_free+0x13c>
	return chunk_field(h, c, LEFT_SIZE);
   2e51e:	2201      	movs	r2, #1
   2e520:	4629      	mov	r1, r5
   2e522:	4620      	mov	r0, r4
   2e524:	f7ff fe9d 	bl	2e262 <chunk_field>
	return c - left_size(h, c);
   2e528:	eba5 0800 	sub.w	r8, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   2e52c:	2200      	movs	r2, #0
   2e52e:	4641      	mov	r1, r8
   2e530:	4620      	mov	r0, r4
   2e532:	f7ff fe96 	bl	2e262 <chunk_field>
   2e536:	68e7      	ldr	r7, [r4, #12]
   2e538:	4606      	mov	r6, r0
   2e53a:	ea30 0907 	bics.w	r9, r0, r7
   2e53e:	d134      	bne.n	2e5aa <sys_heap_free+0x13c>
   2e540:	464a      	mov	r2, r9
   2e542:	4629      	mov	r1, r5
   2e544:	4620      	mov	r0, r4
   2e546:	f7ff fe8c 	bl	2e262 <chunk_field>
   2e54a:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   2e54c:	4629      	mov	r1, r5
   2e54e:	4620      	mov	r0, r4
   2e550:	f7ff fea0 	bl	2e294 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e554:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e556:	403e      	ands	r6, r7
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e558:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2e55c:	bf34      	ite	cc
   2e55e:	2100      	movcc	r1, #0
   2e560:	2101      	movcs	r1, #1
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   2e562:	ea07 070a 	and.w	r7, r7, sl
   2e566:	4437      	add	r7, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e568:	fab6 f686 	clz	r6, r6
   2e56c:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   2e570:	4642      	mov	r2, r8
   2e572:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   2e574:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   2e576:	4620      	mov	r0, r4
   2e578:	f7ff fe96 	bl	2e2a8 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   2e57c:	463b      	mov	r3, r7
   2e57e:	464a      	mov	r2, r9
   2e580:	4641      	mov	r1, r8
   2e582:	4620      	mov	r0, r4
   2e584:	f7ff fe79 	bl	2e27a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e588:	4641      	mov	r1, r8
   2e58a:	4620      	mov	r0, r4
   2e58c:	f7ff fe69 	bl	2e262 <chunk_field>
   2e590:	68e3      	ldr	r3, [r4, #12]
   2e592:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   2e594:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2e596:	4440      	add	r0, r8
		if (!last_chunk(h, lc)) {
   2e598:	4298      	cmp	r0, r3
   2e59a:	d005      	beq.n	2e5a8 <sys_heap_free+0x13a>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   2e59c:	463b      	mov	r3, r7
   2e59e:	2201      	movs	r2, #1
   2e5a0:	4629      	mov	r1, r5
   2e5a2:	4620      	mov	r0, r4
   2e5a4:	f7ff fe69 	bl	2e27a <chunk_set>
		}

		c = lc;
   2e5a8:	4645      	mov	r5, r8
   2e5aa:	4629      	mov	r1, r5
   2e5ac:	2200      	movs	r2, #0
   2e5ae:	4620      	mov	r0, r4
   2e5b0:	f7ff fe57 	bl	2e262 <chunk_field>
   2e5b4:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   2e5b6:	4629      	mov	r1, r5
   2e5b8:	4003      	ands	r3, r0
   2e5ba:	2200      	movs	r2, #0
   2e5bc:	4620      	mov	r0, r4
   2e5be:	f7ff fe5c 	bl	2e27a <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   2e5c2:	4629      	mov	r1, r5
   2e5c4:	4620      	mov	r0, r4
}
   2e5c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   2e5ca:	f7ff be9f 	b.w	2e30c <free_list_add>
}
   2e5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e5d2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2e5d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   2e5d6:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2e5d8:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   2e5da:	68a2      	ldr	r2, [r4, #8]
   2e5dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2e5e0:	bf2c      	ite	cs
   2e5e2:	2308      	movcs	r3, #8
   2e5e4:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2e5e6:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e5e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2e5ec:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e5f0:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e5f4:	bf34      	ite	cc
   2e5f6:	2300      	movcc	r3, #0
   2e5f8:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e5fa:	441e      	add	r6, r3
   2e5fc:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   2e600:	2900      	cmp	r1, #0
   2e602:	d03b      	beq.n	2e67c <sys_heap_alloc+0xaa>
   2e604:	fab2 f282 	clz	r2, r2
   2e608:	f1c3 031f 	rsb	r3, r3, #31
   2e60c:	1a9b      	subs	r3, r3, r2
   2e60e:	4598      	cmp	r8, r3
   2e610:	dc34      	bgt.n	2e67c <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   2e612:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   2e614:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   2e618:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   2e61c:	687b      	ldr	r3, [r7, #4]
   2e61e:	2b03      	cmp	r3, #3
   2e620:	bf28      	it	cs
   2e622:	2303      	movcs	r3, #3
   2e624:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   2e626:	45ca      	cmp	sl, r9
   2e628:	db0d      	blt.n	2e646 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2e62a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e62e:	f1c6 0620 	rsb	r6, r6, #32
   2e632:	6963      	ldr	r3, [r4, #20]
   2e634:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   2e636:	4019      	ands	r1, r3
   2e638:	d020      	beq.n	2e67c <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   2e63a:	fa91 f1a1 	rbit	r1, r1
   2e63e:	462a      	mov	r2, r5
   2e640:	fab1 f181 	clz	r1, r1
   2e644:	e00c      	b.n	2e660 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   2e646:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2e64a:	2200      	movs	r2, #0
   2e64c:	4659      	mov	r1, fp
   2e64e:	4620      	mov	r0, r4
   2e650:	f7ff fe07 	bl	2e262 <chunk_field>
   2e654:	68e3      	ldr	r3, [r4, #12]
   2e656:	4018      	ands	r0, r3
   2e658:	42a8      	cmp	r0, r5
   2e65a:	d306      	bcc.n	2e66a <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   2e65c:	462a      	mov	r2, r5
   2e65e:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   2e660:	4620      	mov	r0, r4
	}

	return NULL;
}
   2e662:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   2e666:	f7ff be9e 	b.w	2e3a6 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   2e66a:	2203      	movs	r2, #3
   2e66c:	4659      	mov	r1, fp
   2e66e:	4620      	mov	r0, r4
   2e670:	f7ff fdf7 	bl	2e262 <chunk_field>
	for (int i = 0; i < loops; i++) {
   2e674:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   2e678:	6038      	str	r0, [r7, #0]
   2e67a:	e7d4      	b.n	2e626 <sys_heap_alloc+0x54>
}
   2e67c:	2000      	movs	r0, #0
   2e67e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e682 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2e682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   2e684:	1dcc      	adds	r4, r1, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2e686:	4411      	add	r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2e688:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   2e68c:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2e690:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2e694:	1b09      	subs	r1, r1, r4
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2e696:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2e69a:	ea4f 03d1 	mov.w	r3, r1, lsr #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2e69e:	bf2c      	ite	cs
   2e6a0:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   2e6a4:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   2e6a6:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   2e6a8:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e6aa:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2e6ac:	60e1      	str	r1, [r4, #12]
   2e6ae:	bf94      	ite	ls
   2e6b0:	2100      	movls	r1, #0
   2e6b2:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e6b4:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e6b8:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   2e6ba:	4684      	mov	ip, r0
				* sizeof(struct z_heap_bucket));
   2e6bc:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   2e6c0:	f104 0518 	add.w	r5, r4, #24
				* sizeof(struct z_heap_bucket));
   2e6c4:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2e6c6:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   2e6ca:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2e6ce:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   2e6d0:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   2e6d2:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2e6d4:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2e6d6:	68a2      	ldr	r2, [r4, #8]
   2e6d8:	42ba      	cmp	r2, r7
   2e6da:	bf94      	ite	ls
   2e6dc:	2200      	movls	r2, #0
   2e6de:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2e6e0:	f1c2 021f 	rsb	r2, r2, #31
   2e6e4:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2e6e6:	4290      	cmp	r0, r2
   2e6e8:	dd0a      	ble.n	2e700 <sys_heap_init+0x7e>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   2e6ea:	1a5b      	subs	r3, r3, r1
   2e6ec:	4620      	mov	r0, r4
   2e6ee:	2200      	movs	r2, #0
   2e6f0:	f7ff fdc3 	bl	2e27a <chunk_set>
	free_list_add(h, h->chunk0);
   2e6f4:	6921      	ldr	r1, [r4, #16]
   2e6f6:	4620      	mov	r0, r4
}
   2e6f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   2e6fc:	f7ff be06 	b.w	2e30c <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   2e700:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2e704:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   2e706:	f845 cb08 	str.w	ip, [r5], #8
   2e70a:	e7e4      	b.n	2e6d6 <sys_heap_init+0x54>

0002e70c <get_elem_size>:
{
   2e70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e710:	4605      	mov	r5, r0
   2e712:	2701      	movs	r7, #1
	switch (descr->type) {
   2e714:	796b      	ldrb	r3, [r5, #5]
   2e716:	085b      	lsrs	r3, r3, #1
   2e718:	2b5b      	cmp	r3, #91	; 0x5b
   2e71a:	d02d      	beq.n	2e778 <get_elem_size+0x6c>
   2e71c:	d80b      	bhi.n	2e736 <get_elem_size+0x2a>
   2e71e:	2b22      	cmp	r3, #34	; 0x22
   2e720:	d02e      	beq.n	2e780 <get_elem_size+0x74>
		return -EINVAL;
   2e722:	2b30      	cmp	r3, #48	; 0x30
   2e724:	bf08      	it	eq
   2e726:	2404      	moveq	r4, #4
   2e728:	bf18      	it	ne
   2e72a:	f06f 0415 	mvnne.w	r4, #21
}
   2e72e:	fb07 f004 	mul.w	r0, r7, r4
   2e732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   2e736:	2b74      	cmp	r3, #116	; 0x74
   2e738:	d024      	beq.n	2e784 <get_elem_size+0x78>
   2e73a:	2b7b      	cmp	r3, #123	; 0x7b
   2e73c:	d003      	beq.n	2e746 <get_elem_size+0x3a>
		return -EINVAL;
   2e73e:	2b66      	cmp	r3, #102	; 0x66
   2e740:	bf08      	it	eq
   2e742:	2401      	moveq	r4, #1
   2e744:	e7f0      	b.n	2e728 <get_elem_size+0x1c>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e746:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e748:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   2e74c:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e74e:	f8d5 800c 	ldr.w	r8, [r5, #12]
   2e752:	45b0      	cmp	r8, r6
   2e754:	d0eb      	beq.n	2e72e <get_elem_size+0x22>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   2e756:	68a8      	ldr	r0, [r5, #8]
   2e758:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   2e75c:	f7ff ffd6 	bl	2e70c <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e760:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e762:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e764:	f003 0303 	and.w	r3, r3, #3
   2e768:	fa09 f303 	lsl.w	r3, r9, r3
   2e76c:	1e5a      	subs	r2, r3, #1
   2e76e:	4410      	add	r0, r2
   2e770:	425b      	negs	r3, r3
   2e772:	4003      	ands	r3, r0
   2e774:	441c      	add	r4, r3
   2e776:	e7ec      	b.n	2e752 <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   2e778:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   2e77c:	435f      	muls	r7, r3
   2e77e:	e7c9      	b.n	2e714 <get_elem_size+0x8>
		return sizeof(s32_t);
   2e780:	2404      	movs	r4, #4
   2e782:	e7d4      	b.n	2e72e <get_elem_size+0x22>
		return sizeof(bool);
   2e784:	2401      	movs	r4, #1
   2e786:	e7d2      	b.n	2e72e <get_elem_size+0x22>

0002e788 <escape_as>:
	switch (chr) {
   2e788:	280c      	cmp	r0, #12
   2e78a:	d012      	beq.n	2e7b2 <escape_as+0x2a>
   2e78c:	d809      	bhi.n	2e7a2 <escape_as+0x1a>
   2e78e:	2809      	cmp	r0, #9
   2e790:	d011      	beq.n	2e7b6 <escape_as+0x2e>
   2e792:	280a      	cmp	r0, #10
   2e794:	d011      	beq.n	2e7ba <escape_as+0x32>
	return 0;
   2e796:	2808      	cmp	r0, #8
   2e798:	bf08      	it	eq
   2e79a:	2062      	moveq	r0, #98	; 0x62
   2e79c:	bf18      	it	ne
   2e79e:	2000      	movne	r0, #0
   2e7a0:	4770      	bx	lr
	switch (chr) {
   2e7a2:	2822      	cmp	r0, #34	; 0x22
   2e7a4:	d00a      	beq.n	2e7bc <escape_as+0x34>
   2e7a6:	285c      	cmp	r0, #92	; 0x5c
   2e7a8:	d008      	beq.n	2e7bc <escape_as+0x34>
	return 0;
   2e7aa:	280d      	cmp	r0, #13
   2e7ac:	bf08      	it	eq
   2e7ae:	2072      	moveq	r0, #114	; 0x72
   2e7b0:	e7f4      	b.n	2e79c <escape_as+0x14>
		return 'f';
   2e7b2:	2066      	movs	r0, #102	; 0x66
   2e7b4:	4770      	bx	lr
		return 't';
   2e7b6:	2074      	movs	r0, #116	; 0x74
   2e7b8:	4770      	bx	lr
		return 'n';
   2e7ba:	206e      	movs	r0, #110	; 0x6e
}
   2e7bc:	4770      	bx	lr

0002e7be <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2e7be:	4040      	eors	r0, r0
   2e7c0:	f380 8811 	msr	BASEPRI, r0
   2e7c4:	f04f 0004 	mov.w	r0, #4
   2e7c8:	df02      	svc	2
}
   2e7ca:	4770      	bx	lr

0002e7cc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2e7cc:	4770      	bx	lr

0002e7ce <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2e7ce:	f7f8 bb51 	b.w	26e74 <SystemInit>

0002e7d2 <sntp_init>:
{
   2e7d2:	b570      	push	{r4, r5, r6, lr}
   2e7d4:	460d      	mov	r5, r1
   2e7d6:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2e7d8:	4604      	mov	r4, r0
   2e7da:	b330      	cbz	r0, 2e82a <sntp_init+0x58>
   2e7dc:	b329      	cbz	r1, 2e82a <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2e7de:	2214      	movs	r2, #20
   2e7e0:	2100      	movs	r1, #0
   2e7e2:	f005 f827 	bl	33834 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2e7e6:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2e7e8:	2211      	movs	r2, #17
   2e7ea:	2102      	movs	r1, #2
   2e7ec:	f7e8 fe1e 	bl	1742c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2e7f0:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2e7f2:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2e7f4:	da04      	bge.n	2e800 <sntp_init+0x2e>
		return -errno;
   2e7f6:	f001 fc12 	bl	3001e <__errno>
   2e7fa:	6800      	ldr	r0, [r0, #0]
   2e7fc:	4240      	negs	r0, r0
}
   2e7fe:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2e800:	4632      	mov	r2, r6
   2e802:	4629      	mov	r1, r5
   2e804:	f000 f8c7 	bl	2e996 <z_impl_zsock_connect>
	if (ret < 0) {
   2e808:	2800      	cmp	r0, #0
   2e80a:	68e0      	ldr	r0, [r4, #12]
   2e80c:	da02      	bge.n	2e814 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2e80e:	f000 f8a9 	bl	2e964 <z_impl_zsock_close>
   2e812:	e7f0      	b.n	2e7f6 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e814:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2e816:	68a3      	ldr	r3, [r4, #8]
   2e818:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e81c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2e820:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e822:	8091      	strh	r1, [r2, #4]
	return 0;
   2e824:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2e826:	60a3      	str	r3, [r4, #8]
	return 0;
   2e828:	e7e9      	b.n	2e7fe <sntp_init+0x2c>
		return -EFAULT;
   2e82a:	f06f 000d 	mvn.w	r0, #13
   2e82e:	e7e6      	b.n	2e7fe <sntp_init+0x2c>

0002e830 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2e830:	b110      	cbz	r0, 2e838 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2e832:	68c0      	ldr	r0, [r0, #12]
   2e834:	f000 b896 	b.w	2e964 <z_impl_zsock_close>
	}
}
   2e838:	4770      	bx	lr

0002e83a <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2e83a:	f7e9 b9cf 	b.w	17bdc <socket_offload_getaddrinfo>

0002e83e <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2e83e:	f7e9 ba01 	b.w	17c44 <socket_offload_freeaddrinfo>

0002e842 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2e842:	b40c      	push	{r2, r3}
   2e844:	b513      	push	{r0, r1, r4, lr}
   2e846:	460c      	mov	r4, r1
   2e848:	aa04      	add	r2, sp, #16
   2e84a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2e84e:	6883      	ldr	r3, [r0, #8]
   2e850:	4620      	mov	r0, r4
	va_start(args, request);
   2e852:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2e854:	4798      	blx	r3
	va_end(args);

	return res;
}
   2e856:	b002      	add	sp, #8
   2e858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e85c:	b002      	add	sp, #8
   2e85e:	4770      	bx	lr

0002e860 <sock_getsockopt_vmeth>:
   2e860:	b508      	push	{r3, lr}
   2e862:	f001 fbdc 	bl	3001e <__errno>
   2e866:	236d      	movs	r3, #109	; 0x6d
   2e868:	6003      	str	r3, [r0, #0]
   2e86a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e86e:	bd08      	pop	{r3, pc}

0002e870 <k_fifo_wait_non_empty>:
{
   2e870:	b530      	push	{r4, r5, lr}
   2e872:	b087      	sub	sp, #28
   2e874:	4605      	mov	r5, r0
   2e876:	460c      	mov	r4, r1
	struct k_poll_event events[] = {
   2e878:	2210      	movs	r2, #16
   2e87a:	2100      	movs	r1, #0
   2e87c:	a801      	add	r0, sp, #4
   2e87e:	f004 ffd9 	bl	33834 <memset>
   2e882:	2304      	movs	r3, #4
   2e884:	9505      	str	r5, [sp, #20]
   2e886:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   2e88a:	2101      	movs	r1, #1
   2e88c:	4622      	mov	r2, r4
   2e88e:	eb0d 0003 	add.w	r0, sp, r3
   2e892:	f7fc f8bf 	bl	2aa14 <z_impl_k_poll>
}
   2e896:	b007      	add	sp, #28
   2e898:	bd30      	pop	{r4, r5, pc}

0002e89a <zsock_received_cb>:
{
   2e89a:	b570      	push	{r4, r5, r6, lr}
   2e89c:	4604      	mov	r4, r0
   2e89e:	f100 065c 	add.w	r6, r0, #92	; 0x5c
	if (!pkt) {
   2e8a2:	460d      	mov	r5, r1
   2e8a4:	b999      	cbnz	r1, 2e8ce <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   2e8a6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2e8a8:	f004 fdd9 	bl	3345e <z_queue_node_peek>
		if (!last_pkt) {
   2e8ac:	b940      	cbnz	r0, 2e8c0 <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
   2e8ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2e8b0:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   2e8b4:	65a3      	str	r3, [r4, #88]	; 0x58
	z_impl_k_queue_cancel_wait(queue);
   2e8b6:	4630      	mov	r0, r6
}
   2e8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e8bc:	f7f9 bcd2 	b.w	28264 <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
   2e8c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   2e8c4:	f043 0302 	orr.w	r3, r3, #2
   2e8c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   2e8cc:	bd70      	pop	{r4, r5, r6, pc}
   2e8ce:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   2e8d2:	f36f 0341 	bfc	r3, #1, #1
   2e8d6:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   2e8da:	f7e8 fd35 	bl	17348 <net_context_get_type>
   2e8de:	2801      	cmp	r0, #1
   2e8e0:	d106      	bne.n	2e8f0 <zsock_received_cb+0x56>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   2e8e2:	4628      	mov	r0, r5
   2e8e4:	f002 f8f9 	bl	30ada <net_pkt_remaining_data>
   2e8e8:	4241      	negs	r1, r0
   2e8ea:	4620      	mov	r0, r4
   2e8ec:	f001 fea8 	bl	30640 <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   2e8f0:	4629      	mov	r1, r5
   2e8f2:	4630      	mov	r0, r6
}
   2e8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   2e8f8:	f004 bdca 	b.w	33490 <k_queue_append>

0002e8fc <zsock_close_ctx>:
{
   2e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e8fe:	4604      	mov	r4, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2e900:	f7e8 fd02 	bl	17308 <net_context_get_state>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2e904:	2300      	movs	r3, #0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2e906:	2803      	cmp	r0, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2e908:	461a      	mov	r2, r3
   2e90a:	4619      	mov	r1, r3
   2e90c:	4620      	mov	r0, r4
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2e90e:	d11c      	bne.n	2e94a <zsock_close_ctx+0x4e>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2e910:	f7eb ffc4 	bl	1a89c <net_context_accept>
	bool is_listen = net_context_get_state(ctx) == NET_CONTEXT_LISTENING;
   2e914:	4620      	mov	r0, r4
   2e916:	f7e8 fcf7 	bl	17308 <net_context_get_state>
   2e91a:	4607      	mov	r7, r0
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   2e91c:	f104 065c 	add.w	r6, r4, #92	; 0x5c
	return z_impl_k_queue_get(queue, timeout);
   2e920:	2100      	movs	r1, #0
   2e922:	4630      	mov	r0, r6
   2e924:	f7f9 fcdc 	bl	282e0 <z_impl_k_queue_get>
   2e928:	4605      	mov	r5, r0
   2e92a:	b988      	cbnz	r0, 2e950 <zsock_close_ctx+0x54>
	z_impl_k_queue_cancel_wait(queue);
   2e92c:	4630      	mov	r0, r6
   2e92e:	f7f9 fc99 	bl	28264 <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   2e932:	4620      	mov	r0, r4
   2e934:	f7eb fc94 	bl	1a260 <net_context_put>
   2e938:	1e04      	subs	r4, r0, #0
   2e93a:	da11      	bge.n	2e960 <zsock_close_ctx+0x64>
   2e93c:	f001 fb6f 	bl	3001e <__errno>
   2e940:	4264      	negs	r4, r4
   2e942:	6004      	str	r4, [r0, #0]
   2e944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2e948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   2e94a:	f7eb fff7 	bl	1a93c <net_context_recv>
   2e94e:	e7e1      	b.n	2e914 <zsock_close_ctx+0x18>
		if (is_listen) {
   2e950:	2f03      	cmp	r7, #3
   2e952:	d102      	bne.n	2e95a <zsock_close_ctx+0x5e>
			net_context_put(p);
   2e954:	f7eb fc84 	bl	1a260 <net_context_put>
   2e958:	e7e2      	b.n	2e920 <zsock_close_ctx+0x24>
			net_pkt_unref(p);
   2e95a:	f001 ff56 	bl	3080a <net_pkt_unref>
   2e95e:	e7df      	b.n	2e920 <zsock_close_ctx+0x24>
	return 0;
   2e960:	4628      	mov	r0, r5
   2e962:	e7f1      	b.n	2e948 <zsock_close_ctx+0x4c>

0002e964 <z_impl_zsock_close>:
{
   2e964:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   2e966:	a901      	add	r1, sp, #4
{
   2e968:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   2e96a:	f7e8 fa75 	bl	16e58 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2e96e:	4604      	mov	r4, r0
   2e970:	b150      	cbz	r0, 2e988 <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   2e972:	4628      	mov	r0, r5
   2e974:	f7e8 fab0 	bl	16ed8 <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   2e978:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e97c:	4621      	mov	r1, r4
   2e97e:	9801      	ldr	r0, [sp, #4]
   2e980:	f7ff ff5f 	bl	2e842 <z_fdtable_call_ioctl>
}
   2e984:	b003      	add	sp, #12
   2e986:	bd30      	pop	{r4, r5, pc}
		return -1;
   2e988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e98c:	e7fa      	b.n	2e984 <z_impl_zsock_close+0x20>

0002e98e <sock_bind_vmeth>:
}

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   2e98e:	f7e8 bda1 	b.w	174d4 <zsock_bind_ctx>

0002e992 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   2e992:	f7e8 bdc3 	b.w	1751c <zsock_connect_ctx>

0002e996 <z_impl_zsock_connect>:
{
   2e996:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e998:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   2e99a:	a901      	add	r1, sp, #4
{
   2e99c:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   2e99e:	f7e8 fa5b 	bl	16e58 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2e9a2:	b138      	cbz	r0, 2e9b4 <z_impl_zsock_connect+0x1e>
   2e9a4:	9b01      	ldr	r3, [sp, #4]
   2e9a6:	691b      	ldr	r3, [r3, #16]
   2e9a8:	b123      	cbz	r3, 2e9b4 <z_impl_zsock_connect+0x1e>
   2e9aa:	462a      	mov	r2, r5
   2e9ac:	4621      	mov	r1, r4
   2e9ae:	4798      	blx	r3
}
   2e9b0:	b003      	add	sp, #12
   2e9b2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2e9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e9b8:	e7fa      	b.n	2e9b0 <z_impl_zsock_connect+0x1a>

0002e9ba <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   2e9ba:	f7e8 bdcf 	b.w	1755c <zsock_listen_ctx>

0002e9be <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   2e9be:	f7e8 bde7 	b.w	17590 <zsock_accept_ctx>

0002e9c2 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   2e9c2:	f7e8 be4d 	b.w	17660 <zsock_sendto_ctx>

0002e9c6 <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   2e9c6:	2300      	movs	r3, #0
{
   2e9c8:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   2e9ca:	e9cd 3300 	strd	r3, r3, [sp]
   2e9ce:	f7e8 fe47 	bl	17660 <zsock_sendto_ctx>
}
   2e9d2:	b003      	add	sp, #12
   2e9d4:	f85d fb04 	ldr.w	pc, [sp], #4

0002e9d8 <z_impl_zsock_sendto>:
{
   2e9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e9da:	b085      	sub	sp, #20
   2e9dc:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2e9de:	a903      	add	r1, sp, #12
{
   2e9e0:	4616      	mov	r6, r2
   2e9e2:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2e9e4:	f7e8 fa38 	bl	16e58 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2e9e8:	b160      	cbz	r0, 2ea04 <z_impl_zsock_sendto+0x2c>
   2e9ea:	9b03      	ldr	r3, [sp, #12]
   2e9ec:	69dc      	ldr	r4, [r3, #28]
   2e9ee:	b14c      	cbz	r4, 2ea04 <z_impl_zsock_sendto+0x2c>
   2e9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e9f2:	4632      	mov	r2, r6
   2e9f4:	9301      	str	r3, [sp, #4]
   2e9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e9f8:	4629      	mov	r1, r5
   2e9fa:	9300      	str	r3, [sp, #0]
   2e9fc:	463b      	mov	r3, r7
   2e9fe:	47a0      	blx	r4
}
   2ea00:	b005      	add	sp, #20
   2ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ea04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ea08:	e7fa      	b.n	2ea00 <z_impl_zsock_sendto+0x28>

0002ea0a <zsock_sendmsg_ctx>:
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2ea0a:	0653      	lsls	r3, r2, #25
{
   2ea0c:	b513      	push	{r0, r1, r4, lr}
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   2ea0e:	f04f 0300 	mov.w	r3, #0
		timeout = K_NO_WAIT;
   2ea12:	bf4f      	iteee	mi
   2ea14:	2400      	movmi	r4, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2ea16:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
   2ea18:	f084 0402 	eorpl.w	r4, r4, #2
   2ea1c:	f344 0440 	sbfxpl	r4, r4, #1, #1
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   2ea20:	e9cd 4300 	strd	r4, r3, [sp]
   2ea24:	f001 fdce 	bl	305c4 <net_context_sendmsg>
	if (status < 0) {
   2ea28:	1e04      	subs	r4, r0, #0
   2ea2a:	da05      	bge.n	2ea38 <zsock_sendmsg_ctx+0x2e>
		errno = -status;
   2ea2c:	f001 faf7 	bl	3001e <__errno>
   2ea30:	4264      	negs	r4, r4
   2ea32:	6004      	str	r4, [r0, #0]
		return -1;
   2ea34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2ea38:	4620      	mov	r0, r4
   2ea3a:	b002      	add	sp, #8
   2ea3c:	bd10      	pop	{r4, pc}

0002ea3e <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
   2ea3e:	f7ff bfe4 	b.w	2ea0a <zsock_sendmsg_ctx>

0002ea42 <z_impl_zsock_sendmsg>:
{
   2ea42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ea44:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   2ea46:	a901      	add	r1, sp, #4
{
   2ea48:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   2ea4a:	f7e8 fa05 	bl	16e58 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ea4e:	b138      	cbz	r0, 2ea60 <z_impl_zsock_sendmsg+0x1e>
   2ea50:	9b01      	ldr	r3, [sp, #4]
   2ea52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ea54:	b123      	cbz	r3, 2ea60 <z_impl_zsock_sendmsg+0x1e>
   2ea56:	462a      	mov	r2, r5
   2ea58:	4621      	mov	r1, r4
   2ea5a:	4798      	blx	r3
}
   2ea5c:	b003      	add	sp, #12
   2ea5e:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ea60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ea64:	e7fa      	b.n	2ea5c <z_impl_zsock_sendmsg+0x1a>

0002ea66 <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   2ea66:	f7e8 be3f 	b.w	176e8 <zsock_recvfrom_ctx>

0002ea6a <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   2ea6a:	2300      	movs	r3, #0
{
   2ea6c:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   2ea6e:	e9cd 3300 	strd	r3, r3, [sp]
   2ea72:	f7e8 fe39 	bl	176e8 <zsock_recvfrom_ctx>
}
   2ea76:	b003      	add	sp, #12
   2ea78:	f85d fb04 	ldr.w	pc, [sp], #4

0002ea7c <z_impl_zsock_recvfrom>:
{
   2ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea7e:	b085      	sub	sp, #20
   2ea80:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2ea82:	a903      	add	r1, sp, #12
{
   2ea84:	4616      	mov	r6, r2
   2ea86:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2ea88:	f7e8 f9e6 	bl	16e58 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2ea8c:	b160      	cbz	r0, 2eaa8 <z_impl_zsock_recvfrom+0x2c>
   2ea8e:	9b03      	ldr	r3, [sp, #12]
   2ea90:	6a1c      	ldr	r4, [r3, #32]
   2ea92:	b14c      	cbz	r4, 2eaa8 <z_impl_zsock_recvfrom+0x2c>
   2ea94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ea96:	4632      	mov	r2, r6
   2ea98:	9301      	str	r3, [sp, #4]
   2ea9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ea9c:	4629      	mov	r1, r5
   2ea9e:	9300      	str	r3, [sp, #0]
   2eaa0:	463b      	mov	r3, r7
   2eaa2:	47a0      	blx	r4
}
   2eaa4:	b005      	add	sp, #20
   2eaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2eaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eaac:	e7fa      	b.n	2eaa4 <z_impl_zsock_recvfrom+0x28>

0002eaae <zsock_setsockopt_ctx>:
	switch (level) {
   2eaae:	2906      	cmp	r1, #6
{
   2eab0:	b508      	push	{r3, lr}
	switch (level) {
   2eab2:	d00c      	beq.n	2eace <zsock_setsockopt_ctx+0x20>
   2eab4:	2929      	cmp	r1, #41	; 0x29
   2eab6:	d00c      	beq.n	2ead2 <zsock_setsockopt_ctx+0x24>
   2eab8:	2901      	cmp	r1, #1
   2eaba:	d101      	bne.n	2eac0 <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   2eabc:	2a02      	cmp	r2, #2
   2eabe:	d00a      	beq.n	2ead6 <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   2eac0:	f001 faad 	bl	3001e <__errno>
   2eac4:	236d      	movs	r3, #109	; 0x6d
   2eac6:	6003      	str	r3, [r0, #0]
   2eac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2eacc:	bd08      	pop	{r3, pc}
		switch (optname) {
   2eace:	2a01      	cmp	r2, #1
   2ead0:	e7f5      	b.n	2eabe <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   2ead2:	2a1a      	cmp	r2, #26
   2ead4:	e7f3      	b.n	2eabe <zsock_setsockopt_ctx+0x10>
			return 0;
   2ead6:	2000      	movs	r0, #0
   2ead8:	e7f8      	b.n	2eacc <zsock_setsockopt_ctx+0x1e>

0002eada <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   2eada:	f7ff bfe8 	b.w	2eaae <zsock_setsockopt_ctx>

0002eade <z_impl_zsock_setsockopt>:
{
   2eade:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eae0:	b085      	sub	sp, #20
   2eae2:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2eae4:	a903      	add	r1, sp, #12
{
   2eae6:	4616      	mov	r6, r2
   2eae8:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2eaea:	f7e8 f9b5 	bl	16e58 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2eaee:	b150      	cbz	r0, 2eb06 <z_impl_zsock_setsockopt+0x28>
   2eaf0:	9b03      	ldr	r3, [sp, #12]
   2eaf2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2eaf4:	b13c      	cbz	r4, 2eb06 <z_impl_zsock_setsockopt+0x28>
   2eaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eaf8:	4632      	mov	r2, r6
   2eafa:	9300      	str	r3, [sp, #0]
   2eafc:	4629      	mov	r1, r5
   2eafe:	463b      	mov	r3, r7
   2eb00:	47a0      	blx	r4
}
   2eb02:	b005      	add	sp, #20
   2eb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2eb06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eb0a:	e7fa      	b.n	2eb02 <z_impl_zsock_setsockopt+0x24>

0002eb0c <zsock_getsockname_ctx>:
{
   2eb0c:	4603      	mov	r3, r0
   2eb0e:	b513      	push	{r0, r1, r4, lr}
   2eb10:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   2eb12:	8b9a      	ldrh	r2, [r3, #28]
{
   2eb14:	4608      	mov	r0, r1
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   2eb16:	2a01      	cmp	r2, #1
   2eb18:	d113      	bne.n	2eb42 <zsock_getsockname_ctx+0x36>
		addr4.sin_family = AF_INET;
   2eb1a:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   2eb1e:	8bda      	ldrh	r2, [r3, #30]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   2eb20:	6a1b      	ldr	r3, [r3, #32]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   2eb22:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   2eb26:	6822      	ldr	r2, [r4, #0]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   2eb28:	681b      	ldr	r3, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2eb2a:	2a08      	cmp	r2, #8
   2eb2c:	bf28      	it	cs
   2eb2e:	2208      	movcs	r2, #8
   2eb30:	4669      	mov	r1, sp
   2eb32:	9301      	str	r3, [sp, #4]
   2eb34:	f004 fe44 	bl	337c0 <memcpy>
		newlen = sizeof(struct sockaddr_in);
   2eb38:	2308      	movs	r3, #8
}
   2eb3a:	2000      	movs	r0, #0
	*addrlen = newlen;
   2eb3c:	6023      	str	r3, [r4, #0]
}
   2eb3e:	b002      	add	sp, #8
   2eb40:	bd10      	pop	{r4, pc}
	socklen_t newlen = 0;
   2eb42:	2300      	movs	r3, #0
   2eb44:	e7f9      	b.n	2eb3a <zsock_getsockname_ctx+0x2e>

0002eb46 <sock_ioctl_vmeth>:
	switch (request) {
   2eb46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
   2eb4a:	b538      	push	{r3, r4, r5, lr}
   2eb4c:	4604      	mov	r4, r0
   2eb4e:	4613      	mov	r3, r2
	switch (request) {
   2eb50:	d04e      	beq.n	2ebf0 <sock_ioctl_vmeth+0xaa>
   2eb52:	d80a      	bhi.n	2eb6a <sock_ioctl_vmeth+0x24>
   2eb54:	2903      	cmp	r1, #3
   2eb56:	d039      	beq.n	2ebcc <sock_ioctl_vmeth+0x86>
   2eb58:	2904      	cmp	r1, #4
   2eb5a:	d03c      	beq.n	2ebd6 <sock_ioctl_vmeth+0x90>
		errno = EOPNOTSUPP;
   2eb5c:	f001 fa5f 	bl	3001e <__errno>
   2eb60:	235f      	movs	r3, #95	; 0x5f
   2eb62:	6003      	str	r3, [r0, #0]
		return -1;
   2eb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eb68:	e034      	b.n	2ebd4 <sock_ioctl_vmeth+0x8e>
	switch (request) {
   2eb6a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   2eb6e:	d043      	beq.n	2ebf8 <sock_ioctl_vmeth+0xb2>
   2eb70:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
   2eb74:	d05a      	beq.n	2ec2c <sock_ioctl_vmeth+0xe6>
   2eb76:	f240 1203 	movw	r2, #259	; 0x103
   2eb7a:	4291      	cmp	r1, r2
   2eb7c:	d1ee      	bne.n	2eb5c <sock_ioctl_vmeth+0x16>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   2eb7e:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   2eb80:	8891      	ldrh	r1, [r2, #4]
   2eb82:	07c8      	lsls	r0, r1, #31
   2eb84:	d51a      	bpl.n	2ebbc <sock_ioctl_vmeth+0x76>
		pev = va_arg(args, struct k_poll_event **);
   2eb86:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
   2eb88:	689b      	ldr	r3, [r3, #8]
   2eb8a:	6810      	ldr	r0, [r2, #0]
   2eb8c:	4283      	cmp	r3, r0
   2eb8e:	d056      	beq.n	2ec3e <sock_ioctl_vmeth+0xf8>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   2eb90:	2504      	movs	r5, #4
		(*pev)->obj = &ctx->recv_q;
   2eb92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   2eb96:	6103      	str	r3, [r0, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   2eb98:	6813      	ldr	r3, [r2, #0]
   2eb9a:	7b58      	ldrb	r0, [r3, #13]
   2eb9c:	f365 0003 	bfi	r0, r5, #0, #4
   2eba0:	7358      	strb	r0, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   2eba2:	6813      	ldr	r3, [r2, #0]
   2eba4:	7b98      	ldrb	r0, [r3, #14]
   2eba6:	f36f 0041 	bfc	r0, #1, #1
   2ebaa:	7398      	strb	r0, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   2ebac:	6813      	ldr	r3, [r2, #0]
   2ebae:	68d8      	ldr	r0, [r3, #12]
   2ebb0:	f36f 3010 	bfc	r0, #12, #5
   2ebb4:	60d8      	str	r0, [r3, #12]
		(*pev)++;
   2ebb6:	6813      	ldr	r3, [r2, #0]
   2ebb8:	3314      	adds	r3, #20
   2ebba:	6013      	str	r3, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   2ebbc:	0749      	lsls	r1, r1, #29
   2ebbe:	d402      	bmi.n	2ebc6 <sock_ioctl_vmeth+0x80>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   2ebc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
	if (sock_is_eof(ctx)) {
   2ebc2:	07da      	lsls	r2, r3, #31
   2ebc4:	d505      	bpl.n	2ebd2 <sock_ioctl_vmeth+0x8c>
		return -EALREADY;
   2ebc6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2ebca:	e003      	b.n	2ebd4 <sock_ioctl_vmeth+0x8e>
   2ebcc:	6d83      	ldr	r3, [r0, #88]	; 0x58
		if (sock_is_nonblock(obj)) {
   2ebce:	079c      	lsls	r4, r3, #30
   2ebd0:	d432      	bmi.n	2ec38 <sock_ioctl_vmeth+0xf2>
		return 0;
   2ebd2:	2000      	movs	r0, #0
}
   2ebd4:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
   2ebd6:	6810      	ldr	r0, [r2, #0]
   2ebd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2ebda:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2ebde:	f023 0302 	bic.w	r3, r3, #2
   2ebe2:	d003      	beq.n	2ebec <sock_ioctl_vmeth+0xa6>
	val = (val & ~mask) | flag;
   2ebe4:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   2ebe8:	65a3      	str	r3, [r4, #88]	; 0x58
   2ebea:	e7f2      	b.n	2ebd2 <sock_ioctl_vmeth+0x8c>
   2ebec:	65a3      	str	r3, [r4, #88]	; 0x58
   2ebee:	e7f1      	b.n	2ebd4 <sock_ioctl_vmeth+0x8e>
}
   2ebf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_close_ctx(obj);
   2ebf4:	f7ff be82 	b.w	2e8fc <zsock_close_ctx>
		pev = va_arg(args, struct k_poll_event **);
   2ebf8:	e9d2 2000 	ldrd	r2, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
   2ebfc:	8891      	ldrh	r1, [r2, #4]
   2ebfe:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
   2ec00:	bf42      	ittt	mi
   2ec02:	88d3      	ldrhmi	r3, [r2, #6]
   2ec04:	f043 0304 	orrmi.w	r3, r3, #4
   2ec08:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
   2ec0a:	07cd      	lsls	r5, r1, #31
   2ec0c:	d5e1      	bpl.n	2ebd2 <sock_ioctl_vmeth+0x8c>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   2ec0e:	6803      	ldr	r3, [r0, #0]
   2ec10:	68d9      	ldr	r1, [r3, #12]
   2ec12:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
   2ec16:	d102      	bne.n	2ec1e <sock_ioctl_vmeth+0xd8>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   2ec18:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2ec1a:	07c9      	lsls	r1, r1, #31
   2ec1c:	d503      	bpl.n	2ec26 <sock_ioctl_vmeth+0xe0>
			pfd->revents |= ZSOCK_POLLIN;
   2ec1e:	88d1      	ldrh	r1, [r2, #6]
   2ec20:	f041 0101 	orr.w	r1, r1, #1
   2ec24:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
   2ec26:	3314      	adds	r3, #20
   2ec28:	6003      	str	r3, [r0, #0]
   2ec2a:	e7d2      	b.n	2ebd2 <sock_ioctl_vmeth+0x8c>
		return zsock_getsockname_ctx(obj, addr, addrlen);
   2ec2c:	e9d2 1200 	ldrd	r1, r2, [r2]
}
   2ec30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
   2ec34:	f7ff bf6a 	b.w	2eb0c <zsock_getsockname_ctx>
		    return O_NONBLOCK;
   2ec38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   2ec3c:	e7ca      	b.n	2ebd4 <sock_ioctl_vmeth+0x8e>
			return -ENOMEM;
   2ec3e:	f06f 000b 	mvn.w	r0, #11
   2ec42:	e7c7      	b.n	2ebd4 <sock_ioctl_vmeth+0x8e>

0002ec44 <settings_load>:
	return settings_load_subtree(NULL);
   2ec44:	2000      	movs	r0, #0
   2ec46:	f7e9 b84b 	b.w	17ce0 <settings_load_subtree>

0002ec4a <settings_name_steq>:
{
   2ec4a:	b530      	push	{r4, r5, lr}
	if (next) {
   2ec4c:	b10a      	cbz	r2, 2ec52 <settings_name_steq+0x8>
		*next = NULL;
   2ec4e:	2300      	movs	r3, #0
   2ec50:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   2ec52:	b190      	cbz	r0, 2ec7a <settings_name_steq+0x30>
   2ec54:	b151      	cbz	r1, 2ec6c <settings_name_steq+0x22>
   2ec56:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   2ec58:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   2ec5c:	4603      	mov	r3, r0
   2ec5e:	f810 1b01 	ldrb.w	r1, [r0], #1
   2ec62:	b15c      	cbz	r4, 2ec7c <settings_name_steq+0x32>
   2ec64:	428c      	cmp	r4, r1
   2ec66:	d101      	bne.n	2ec6c <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2ec68:	2c3d      	cmp	r4, #61	; 0x3d
   2ec6a:	d1f5      	bne.n	2ec58 <settings_name_steq+0xe>
	return 0;
   2ec6c:	2000      	movs	r0, #0
   2ec6e:	e004      	b.n	2ec7a <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2ec70:	293d      	cmp	r1, #61	; 0x3d
   2ec72:	d008      	beq.n	2ec86 <settings_name_steq+0x3c>
   2ec74:	fab1 f081 	clz	r0, r1
   2ec78:	0940      	lsrs	r0, r0, #5
}
   2ec7a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2ec7c:	292f      	cmp	r1, #47	; 0x2f
   2ec7e:	d1f7      	bne.n	2ec70 <settings_name_steq+0x26>
		if (next) {
   2ec80:	b10a      	cbz	r2, 2ec86 <settings_name_steq+0x3c>
			*next = name + 1;
   2ec82:	3301      	adds	r3, #1
   2ec84:	6013      	str	r3, [r2, #0]
		return 1;
   2ec86:	2001      	movs	r0, #1
   2ec88:	e7f7      	b.n	2ec7a <settings_name_steq+0x30>

0002ec8a <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   2ec8a:	2000      	movs	r0, #0
   2ec8c:	4770      	bx	lr

0002ec8e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   2ec8e:	2200      	movs	r2, #0
   2ec90:	f7e9 b952 	b.w	17f38 <clock_async_start>

0002ec94 <wdt_nrf_disable>:
}
   2ec94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ec98:	4770      	bx	lr

0002ec9a <wdt_nrf_feed>:
{
   2ec9a:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   2ec9c:	68c3      	ldr	r3, [r0, #12]
   2ec9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2eca2:	428b      	cmp	r3, r1
   2eca4:	db05      	blt.n	2ecb2 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   2eca6:	6840      	ldr	r0, [r0, #4]
   2eca8:	b2c9      	uxtb	r1, r1
   2ecaa:	f7f8 f9cf 	bl	2704c <nrfx_wdt_channel_feed>
	return 0;
   2ecae:	2000      	movs	r0, #0
}
   2ecb0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2ecb2:	f06f 0015 	mvn.w	r0, #21
   2ecb6:	e7fb      	b.n	2ecb0 <wdt_nrf_feed+0x16>

0002ecb8 <wdt_nrf_setup>:
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   2ecb8:	f011 0f01 	tst.w	r1, #1
{
   2ecbc:	b538      	push	{r3, r4, r5, lr}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   2ecbe:	bf0c      	ite	eq
   2ecc0:	2309      	moveq	r3, #9
   2ecc2:	2308      	movne	r3, #8
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   2ecc4:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   2ecc6:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   2ecc8:	6825      	ldr	r5, [r4, #0]
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   2ecca:	bf48      	it	mi
   2eccc:	f003 0301 	andmi.w	r3, r3, #1
    p_reg->CONFIG = behaviour;
   2ecd0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   2ecd4:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   2ecd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   2ecda:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   2ecdc:	2300      	movs	r3, #0
   2ecde:	03c8      	lsls	r0, r1, #15
   2ece0:	0c49      	lsrs	r1, r1, #17
   2ece2:	f7de fd45 	bl	d770 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   2ece6:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   2ecea:	4620      	mov	r0, r4
   2ecec:	f7f8 f930 	bl	26f50 <nrfx_wdt_enable>
}
   2ecf0:	2000      	movs	r0, #0
   2ecf2:	bd38      	pop	{r3, r4, r5, pc}

0002ecf4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2ecf4:	4770      	bx	lr

0002ecf6 <sys_clock_disable>:
   2ecf6:	4770      	bx	lr

0002ecf8 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2ecf8:	428b      	cmp	r3, r1
{
   2ecfa:	b538      	push	{r3, r4, r5, lr}
   2ecfc:	4615      	mov	r5, r2
   2ecfe:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2ed00:	d805      	bhi.n	2ed0e <_copy+0x16>
   2ed02:	461a      	mov	r2, r3
   2ed04:	4629      	mov	r1, r5
   2ed06:	f004 fd5b 	bl	337c0 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2ed0a:	4620      	mov	r0, r4
   2ed0c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2ed0e:	2400      	movs	r4, #0
   2ed10:	e7fb      	b.n	2ed0a <_copy+0x12>

0002ed12 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2ed12:	f004 bd8f 	b.w	33834 <memset>

0002ed16 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2ed16:	09c3      	lsrs	r3, r0, #7
   2ed18:	005a      	lsls	r2, r3, #1
   2ed1a:	4413      	add	r3, r2
   2ed1c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2ed20:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2ed24:	b2c0      	uxtb	r0, r0
   2ed26:	4770      	bx	lr

0002ed28 <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
   2ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ed2c:	461f      	mov	r7, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2ed2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2ed32:	4689      	mov	r9, r1
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2ed34:	f113 011f 	adds.w	r1, r3, #31
   2ed38:	bf48      	it	mi
   2ed3a:	f103 013e 	addmi.w	r1, r3, #62	; 0x3e
   2ed3e:	114d      	asrs	r5, r1, #5
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2ed40:	1dd9      	adds	r1, r3, #7
   2ed42:	bf48      	it	mi
   2ed44:	f103 010e 	addmi.w	r1, r3, #14
   2ed48:	10cc      	asrs	r4, r1, #3
   2ed4a:	4294      	cmp	r4, r2
   2ed4c:	bf28      	it	cs
   2ed4e:	4614      	movcs	r4, r2
{
   2ed50:	4606      	mov	r6, r0

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
   2ed52:	fa4f f885 	sxtb.w	r8, r5
   2ed56:	4641      	mov	r1, r8
   2ed58:	f000 f9c2 	bl	2f0e0 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
   2ed5c:	4622      	mov	r2, r4
   2ed5e:	4649      	mov	r1, r9
   2ed60:	4630      	mov	r0, r6
   2ed62:	f000 febd 	bl	2fae0 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
   2ed66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   2ed6a:	00e4      	lsls	r4, r4, #3
   2ed6c:	4294      	cmp	r4, r2
   2ed6e:	d920      	bls.n	2edb2 <bits2int+0x8a>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
   2ed70:	1aa4      	subs	r4, r4, r2
	carry = 0;
   2ed72:	2200      	movs	r2, #0
	ptr = native + num_n_words;
   2ed74:	eb06 0185 	add.w	r1, r6, r5, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
   2ed78:	f1c4 0520 	rsb	r5, r4, #32
	while (ptr-- > native) {
   2ed7c:	428e      	cmp	r6, r1
   2ed7e:	d30f      	bcc.n	2eda0 <bits2int+0x78>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
   2ed80:	3724      	adds	r7, #36	; 0x24
   2ed82:	4642      	mov	r2, r8
   2ed84:	4631      	mov	r1, r6
   2ed86:	4638      	mov	r0, r7
   2ed88:	f000 f9fb 	bl	2f182 <uECC_vli_cmp_unsafe>
   2ed8c:	2801      	cmp	r0, #1
   2ed8e:	d010      	beq.n	2edb2 <bits2int+0x8a>
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2ed90:	4643      	mov	r3, r8
   2ed92:	463a      	mov	r2, r7
   2ed94:	4631      	mov	r1, r6
   2ed96:	4630      	mov	r0, r6
	}
}
   2ed98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2ed9c:	f000 ba08 	b.w	2f1b0 <uECC_vli_sub>
		uECC_word_t temp = *ptr;
   2eda0:	f851 0d04 	ldr.w	r0, [r1, #-4]!
		*ptr = (temp >> shift) | carry;
   2eda4:	fa20 f304 	lsr.w	r3, r0, r4
   2eda8:	4313      	orrs	r3, r2
   2edaa:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - shift);
   2edac:	fa00 f205 	lsl.w	r2, r0, r5
   2edb0:	e7e4      	b.n	2ed7c <bits2int+0x54>
}
   2edb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002edb6 <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
   2edb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2edba:	461e      	mov	r6, r3
   2edbc:	b0a9      	sub	sp, #164	; 0xa4
   2edbe:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   2edc0:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   2edc4:	f995 a000 	ldrsb.w	sl, [r5]
	uECC_word_t *k2[2] = {tmp, s};
   2edc8:	f10d 0920 	add.w	r9, sp, #32
   2edcc:	ab10      	add	r3, sp, #64	; 0x40
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
   2edce:	4651      	mov	r1, sl
   2edd0:	4630      	mov	r0, r6
{
   2edd2:	9205      	str	r2, [sp, #20]
	uECC_word_t *k2[2] = {tmp, s};
   2edd4:	f8cd 9018 	str.w	r9, [sp, #24]
   2edd8:	9307      	str	r3, [sp, #28]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2edda:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
  	if (uECC_vli_isZero(k, num_words) ||
   2edde:	f000 f98a 	bl	2f0f6 <uECC_vli_isZero>
   2ede2:	b118      	cbz	r0, 2edec <uECC_sign_with_k+0x36>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
   2ede4:	2000      	movs	r0, #0
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
   2ede6:	b029      	add	sp, #164	; 0xa4
   2ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2edec:	f117 041f 	adds.w	r4, r7, #31
   2edf0:	bf48      	it	mi
   2edf2:	f107 043e 	addmi.w	r4, r7, #62	; 0x3e
   2edf6:	f344 1447 	sbfx	r4, r4, #5, #8
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2edfa:	f105 0824 	add.w	r8, r5, #36	; 0x24
   2edfe:	4622      	mov	r2, r4
   2ee00:	4631      	mov	r1, r6
   2ee02:	4640      	mov	r0, r8
   2ee04:	f000 f9ed 	bl	2f1e2 <uECC_vli_cmp>
  	if (uECC_vli_isZero(k, num_words) ||
   2ee08:	2801      	cmp	r0, #1
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2ee0a:	4683      	mov	fp, r0
  	if (uECC_vli_isZero(k, num_words) ||
   2ee0c:	d1ea      	bne.n	2ede4 <uECC_sign_with_k+0x2e>
	carry = regularize_k(k, tmp, s, curve);
   2ee0e:	462b      	mov	r3, r5
   2ee10:	aa10      	add	r2, sp, #64	; 0x40
   2ee12:	4649      	mov	r1, r9
   2ee14:	4630      	mov	r0, r6
   2ee16:	f000 fe22 	bl	2fa5e <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
   2ee1a:	fab0 f080 	clz	r0, r0
   2ee1e:	3701      	adds	r7, #1
   2ee20:	ab28      	add	r3, sp, #160	; 0xa0
   2ee22:	0940      	lsrs	r0, r0, #5
   2ee24:	b23f      	sxth	r7, r7
   2ee26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2ee2a:	9501      	str	r5, [sp, #4]
   2ee2c:	9700      	str	r7, [sp, #0]
   2ee2e:	f850 2c88 	ldr.w	r2, [r0, #-136]
   2ee32:	f105 0144 	add.w	r1, r5, #68	; 0x44
   2ee36:	a818      	add	r0, sp, #96	; 0x60
   2ee38:	2300      	movs	r3, #0
   2ee3a:	f000 fd41 	bl	2f8c0 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
   2ee3e:	4651      	mov	r1, sl
   2ee40:	a818      	add	r0, sp, #96	; 0x60
   2ee42:	f000 f958 	bl	2f0f6 <uECC_vli_isZero>
   2ee46:	2800      	cmp	r0, #0
   2ee48:	d1cc      	bne.n	2ede4 <uECC_sign_with_k+0x2e>
		uECC_vli_clear(tmp, num_n_words);
   2ee4a:	4621      	mov	r1, r4
   2ee4c:	4648      	mov	r0, r9
   2ee4e:	f000 f947 	bl	2f0e0 <uECC_vli_clear>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2ee52:	4643      	mov	r3, r8
   2ee54:	464a      	mov	r2, r9
   2ee56:	4631      	mov	r1, r6
   2ee58:	4630      	mov	r0, r6
   2ee5a:	9400      	str	r4, [sp, #0]
		tmp[0] = 1;
   2ee5c:	f8cd b020 	str.w	fp, [sp, #32]
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2ee60:	f000 faa0 	bl	2f3a4 <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
   2ee64:	4623      	mov	r3, r4
   2ee66:	4642      	mov	r2, r8
   2ee68:	4631      	mov	r1, r6
   2ee6a:	4630      	mov	r0, r6
   2ee6c:	f000 fc21 	bl	2f6b2 <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
   2ee70:	4643      	mov	r3, r8
   2ee72:	464a      	mov	r2, r9
   2ee74:	4631      	mov	r1, r6
   2ee76:	4630      	mov	r0, r6
   2ee78:	9400      	str	r4, [sp, #0]
   2ee7a:	f000 fa93 	bl	2f3a4 <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
   2ee7e:	aa18      	add	r2, sp, #96	; 0x60
   2ee80:	f995 1001 	ldrsb.w	r1, [r5, #1]
   2ee84:	9832      	ldr	r0, [sp, #200]	; 0xc8
   2ee86:	f000 fe17 	bl	2fab8 <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
   2ee8a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   2ee8e:	9903      	ldr	r1, [sp, #12]
   2ee90:	1dda      	adds	r2, r3, #7
   2ee92:	bf48      	it	mi
   2ee94:	f103 020e 	addmi.w	r2, r3, #14
   2ee98:	10d2      	asrs	r2, r2, #3
   2ee9a:	a808      	add	r0, sp, #32
   2ee9c:	f000 fe20 	bl	2fae0 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
   2eea0:	aa28      	add	r2, sp, #160	; 0xa0
   2eea2:	1e63      	subs	r3, r4, #1
   2eea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2eea8:	2200      	movs	r2, #0
	uECC_vli_set(s, p, num_words);
   2eeaa:	a918      	add	r1, sp, #96	; 0x60
	s[num_n_words - 1] = 0;
   2eeac:	f843 2c60 	str.w	r2, [r3, #-96]
	uECC_vli_set(s, p, num_words);
   2eeb0:	a810      	add	r0, sp, #64	; 0x40
   2eeb2:	4652      	mov	r2, sl
   2eeb4:	f000 f959 	bl	2f16a <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
   2eeb8:	aa10      	add	r2, sp, #64	; 0x40
   2eeba:	4610      	mov	r0, r2
   2eebc:	4643      	mov	r3, r8
   2eebe:	a908      	add	r1, sp, #32
   2eec0:	9400      	str	r4, [sp, #0]
   2eec2:	f000 fa6f 	bl	2f3a4 <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
   2eec6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2eeca:	462b      	mov	r3, r5
   2eecc:	a808      	add	r0, sp, #32
   2eece:	f7ff ff2b 	bl	2ed28 <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
   2eed2:	aa10      	add	r2, sp, #64	; 0x40
   2eed4:	4610      	mov	r0, r2
   2eed6:	4643      	mov	r3, r8
   2eed8:	a908      	add	r1, sp, #32
   2eeda:	9400      	str	r4, [sp, #0]
   2eedc:	f000 f99a 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
   2eee0:	a910      	add	r1, sp, #64	; 0x40
   2eee2:	4608      	mov	r0, r1
   2eee4:	4643      	mov	r3, r8
   2eee6:	4632      	mov	r2, r6
   2eee8:	9400      	str	r4, [sp, #0]
   2eeea:	f000 fa5b 	bl	2f3a4 <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
   2eeee:	4621      	mov	r1, r4
   2eef0:	a810      	add	r0, sp, #64	; 0x40
   2eef2:	f000 f919 	bl	2f128 <uECC_vli_numBits>
   2eef6:	f995 1001 	ldrsb.w	r1, [r5, #1]
   2eefa:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   2eefe:	f73f af71 	bgt.w	2ede4 <uECC_sign_with_k+0x2e>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
   2ef02:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   2ef04:	aa10      	add	r2, sp, #64	; 0x40
   2ef06:	1858      	adds	r0, r3, r1
   2ef08:	f000 fdd6 	bl	2fab8 <uECC_vli_nativeToBytes>
	return 1;
   2ef0c:	2001      	movs	r0, #1
   2ef0e:	e76a      	b.n	2ede6 <uECC_sign_with_k+0x30>

0002ef10 <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
   2ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ef14:	4606      	mov	r6, r0
   2ef16:	460f      	mov	r7, r1
   2ef18:	4690      	mov	r8, r2
   2ef1a:	4699      	mov	r9, r3
   2ef1c:	2440      	movs	r4, #64	; 0x40
   2ef1e:	b09a      	sub	sp, #104	; 0x68
   2ef20:	9d22      	ldr	r5, [sp, #136]	; 0x88
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2ef22:	f105 0a24 	add.w	sl, r5, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2ef26:	f7e9 fb2d 	bl	18584 <uECC_get_rng>
		if (!rng_function ||
   2ef2a:	4603      	mov	r3, r0
   2ef2c:	b1e0      	cbz	r0, 2ef68 <uECC_sign+0x58>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2ef2e:	2140      	movs	r1, #64	; 0x40
   2ef30:	a80a      	add	r0, sp, #40	; 0x28
   2ef32:	4798      	blx	r3
		if (!rng_function ||
   2ef34:	b1c0      	cbz	r0, 2ef68 <uECC_sign+0x58>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2ef36:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   2ef3a:	a90a      	add	r1, sp, #40	; 0x28
   2ef3c:	f112 031f 	adds.w	r3, r2, #31
   2ef40:	bf48      	it	mi
   2ef42:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2ef46:	f343 1347 	sbfx	r3, r3, #5, #8
   2ef4a:	4652      	mov	r2, sl
   2ef4c:	a802      	add	r0, sp, #8
   2ef4e:	f000 f98c 	bl	2f26a <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
   2ef52:	e9cd 9500 	strd	r9, r5, [sp]
   2ef56:	ab02      	add	r3, sp, #8
   2ef58:	4642      	mov	r2, r8
   2ef5a:	4639      	mov	r1, r7
   2ef5c:	4630      	mov	r0, r6
   2ef5e:	f7ff ff2a 	bl	2edb6 <uECC_sign_with_k>
   2ef62:	b928      	cbnz	r0, 2ef70 <uECC_sign+0x60>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2ef64:	3c01      	subs	r4, #1
   2ef66:	d1de      	bne.n	2ef26 <uECC_sign+0x16>
			return 0;
   2ef68:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
   2ef6a:	b01a      	add	sp, #104	; 0x68
   2ef6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return 1;
   2ef70:	2001      	movs	r0, #1
   2ef72:	e7fa      	b.n	2ef6a <uECC_sign+0x5a>

0002ef74 <uECC_vli_add>:
{
   2ef74:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2ef76:	2400      	movs	r4, #0
{
   2ef78:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   2ef7a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2ef7c:	b265      	sxtb	r5, r4
   2ef7e:	42ab      	cmp	r3, r5
   2ef80:	dc00      	bgt.n	2ef84 <uECC_vli_add+0x10>
}
   2ef82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2ef84:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   2ef88:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2ef8c:	4435      	add	r5, r6
   2ef8e:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   2ef90:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   2ef92:	bf8c      	ite	hi
   2ef94:	2601      	movhi	r6, #1
   2ef96:	2600      	movls	r6, #0
		result[i] = sum;
   2ef98:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2ef9c:	bf18      	it	ne
   2ef9e:	4630      	movne	r0, r6
		result[i] = sum;
   2efa0:	3401      	adds	r4, #1
   2efa2:	e7eb      	b.n	2ef7c <uECC_vli_add+0x8>

0002efa4 <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
   2efa4:	2300      	movs	r3, #0
	vli += num_words;
   2efa6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
   2efaa:	4288      	cmp	r0, r1
   2efac:	d300      	bcc.n	2efb0 <uECC_vli_rshift1+0xc>
}
   2efae:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2efb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2efb4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2efb8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2efba:	07d3      	lsls	r3, r2, #31
   2efbc:	e7f5      	b.n	2efaa <uECC_vli_rshift1+0x6>

0002efbe <vli_modInv_update>:
	if (!EVEN(uv)) {
   2efbe:	6803      	ldr	r3, [r0, #0]
{
   2efc0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2efc2:	f013 0601 	ands.w	r6, r3, #1
{
   2efc6:	4605      	mov	r5, r0
   2efc8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2efca:	d005      	beq.n	2efd8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2efcc:	4613      	mov	r3, r2
   2efce:	460a      	mov	r2, r1
   2efd0:	4601      	mov	r1, r0
   2efd2:	f7ff ffcf 	bl	2ef74 <uECC_vli_add>
   2efd6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2efd8:	4621      	mov	r1, r4
   2efda:	4628      	mov	r0, r5
   2efdc:	f7ff ffe2 	bl	2efa4 <uECC_vli_rshift1>
	if (carry) {
   2efe0:	b146      	cbz	r6, 2eff4 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2efe2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2efe6:	3a01      	subs	r2, #1
   2efe8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2efec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2eff0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2eff4:	bd70      	pop	{r4, r5, r6, pc}

0002eff6 <uECC_vli_mult>:
{
   2eff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   2effa:	2500      	movs	r5, #0
{
   2effc:	b087      	sub	sp, #28
   2effe:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   2f002:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   2f004:	462a      	mov	r2, r5
   2f006:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   2f00a:	4543      	cmp	r3, r8
   2f00c:	dc16      	bgt.n	2f03c <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2f00e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f012:	f04f 0a00 	mov.w	sl, #0
   2f016:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2f01a:	9502      	str	r5, [sp, #8]
   2f01c:	fa5f f58a 	uxtb.w	r5, sl
   2f020:	eb05 0c03 	add.w	ip, r5, r3
   2f024:	9e02      	ldr	r6, [sp, #8]
   2f026:	fa4f fc8c 	sxtb.w	ip, ip
   2f02a:	45b4      	cmp	ip, r6
   2f02c:	db2d      	blt.n	2f08a <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   2f02e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2f032:	f840 2c04 	str.w	r2, [r0, #-4]
}
   2f036:	b007      	add	sp, #28
   2f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   2f03c:	f04f 0c00 	mov.w	ip, #0
   2f040:	46e6      	mov	lr, ip
   2f042:	9e01      	ldr	r6, [sp, #4]
   2f044:	eb06 0985 	add.w	r9, r6, r5, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
   2f048:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2f04a:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2f04e:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2f052:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2f056:	fba7 ab06 	umull	sl, fp, r7, r6
   2f05a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2f05e:	eb1a 0601 	adds.w	r6, sl, r1
   2f062:	eb5b 0702 	adcs.w	r7, fp, r2
   2f066:	bf2c      	ite	cs
   2f068:	2201      	movcs	r2, #1
   2f06a:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   2f06c:	f10c 0c01 	add.w	ip, ip, #1
		for (i = 0; i <= k; ++i) {
   2f070:	fa4f fa8c 	sxtb.w	sl, ip
   2f074:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   2f076:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2f078:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   2f07a:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2f07c:	dde4      	ble.n	2f048 <uECC_vli_mult+0x52>
		result[k] = r0;
   2f07e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2f082:	463a      	mov	r2, r7
   2f084:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   2f086:	4674      	mov	r4, lr
   2f088:	e7bd      	b.n	2f006 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f08a:	3501      	adds	r5, #1
   2f08c:	b26d      	sxtb	r5, r5
   2f08e:	9e01      	ldr	r6, [sp, #4]
   2f090:	ebac 0e05 	sub.w	lr, ip, r5
   2f094:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   2f098:	4626      	mov	r6, r4
   2f09a:	2400      	movs	r4, #0
   2f09c:	9900      	ldr	r1, [sp, #0]
   2f09e:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   2f0a2:	429d      	cmp	r5, r3
   2f0a4:	db05      	blt.n	2f0b2 <uECC_vli_mult+0xbc>
		result[k] = r0;
   2f0a6:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   2f0aa:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   2f0ae:	4632      	mov	r2, r6
   2f0b0:	e7b4      	b.n	2f01c <uECC_vli_mult+0x26>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2f0b2:	f85e 7904 	ldr.w	r7, [lr], #-4
   2f0b6:	f85b 8b04 	ldr.w	r8, [fp], #4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2f0ba:	e9cd 2604 	strd	r2, r6, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2f0be:	fba8 8907 	umull	r8, r9, r8, r7
   2f0c2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2f0c6:	eb18 0601 	adds.w	r6, r8, r1
   2f0ca:	eb59 0702 	adcs.w	r7, r9, r2
   2f0ce:	bf2c      	ite	cs
   2f0d0:	2201      	movcs	r2, #1
   2f0d2:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f0d4:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   2f0d6:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f0d8:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   2f0da:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   2f0dc:	463e      	mov	r6, r7
   2f0de:	e7e0      	b.n	2f0a2 <uECC_vli_mult+0xac>

0002f0e0 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2f0e0:	2300      	movs	r3, #0
{
   2f0e2:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2f0e4:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2f0e6:	b25a      	sxtb	r2, r3
   2f0e8:	4291      	cmp	r1, r2
   2f0ea:	dc00      	bgt.n	2f0ee <uECC_vli_clear+0xe>
}
   2f0ec:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2f0ee:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   2f0f2:	3301      	adds	r3, #1
   2f0f4:	e7f7      	b.n	2f0e6 <uECC_vli_clear+0x6>

0002f0f6 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   2f0f6:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2f0f8:	461a      	mov	r2, r3
{
   2f0fa:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2f0fc:	b25c      	sxtb	r4, r3
   2f0fe:	42a1      	cmp	r1, r4
   2f100:	dc03      	bgt.n	2f10a <uECC_vli_isZero+0x14>
}
   2f102:	fab2 f082 	clz	r0, r2
   2f106:	0940      	lsrs	r0, r0, #5
   2f108:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2f10a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2f10e:	3301      	adds	r3, #1
   2f110:	4322      	orrs	r2, r4
   2f112:	e7f3      	b.n	2f0fc <uECC_vli_isZero+0x6>

0002f114 <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2f114:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f116:	114a      	asrs	r2, r1, #5
   2f118:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2f11c:	f001 011f 	and.w	r1, r1, #31
   2f120:	fa03 f101 	lsl.w	r1, r3, r1
}
   2f124:	4008      	ands	r0, r1
   2f126:	4770      	bx	lr

0002f128 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2f128:	3901      	subs	r1, #1
   2f12a:	b249      	sxtb	r1, r1
   2f12c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   2f130:	2900      	cmp	r1, #0
   2f132:	da04      	bge.n	2f13e <uECC_vli_numBits+0x16>
	return (i + 1);
   2f134:	3101      	adds	r1, #1
   2f136:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   2f138:	b941      	cbnz	r1, 2f14c <uECC_vli_numBits+0x24>
		return 0;
   2f13a:	4608      	mov	r0, r1
}
   2f13c:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2f13e:	f853 2904 	ldr.w	r2, [r3], #-4
   2f142:	2a00      	cmp	r2, #0
   2f144:	d1f6      	bne.n	2f134 <uECC_vli_numBits+0xc>
   2f146:	3901      	subs	r1, #1
   2f148:	b249      	sxtb	r1, r1
   2f14a:	e7f1      	b.n	2f130 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   2f14c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   2f150:	3b01      	subs	r3, #1
   2f152:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2f156:	2000      	movs	r0, #0
   2f158:	b923      	cbnz	r3, 2f164 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2f15a:	3901      	subs	r1, #1
   2f15c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   2f160:	b208      	sxth	r0, r1
   2f162:	4770      	bx	lr
		digit >>= 1;
   2f164:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   2f166:	3001      	adds	r0, #1
   2f168:	e7f6      	b.n	2f158 <uECC_vli_numBits+0x30>

0002f16a <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   2f16a:	2300      	movs	r3, #0
{
   2f16c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2f16e:	b25c      	sxtb	r4, r3
   2f170:	42a2      	cmp	r2, r4
   2f172:	dc00      	bgt.n	2f176 <uECC_vli_set+0xc>
}
   2f174:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2f176:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2f17a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   2f17e:	3301      	adds	r3, #1
   2f180:	e7f5      	b.n	2f16e <uECC_vli_set+0x4>

0002f182 <uECC_vli_cmp_unsafe>:
{
   2f182:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2f184:	3a01      	subs	r2, #1
   2f186:	b252      	sxtb	r2, r2
   2f188:	0093      	lsls	r3, r2, #2
   2f18a:	2a00      	cmp	r2, #0
   2f18c:	da01      	bge.n	2f192 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   2f18e:	2000      	movs	r0, #0
}
   2f190:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   2f192:	58c5      	ldr	r5, [r0, r3]
   2f194:	58cc      	ldr	r4, [r1, r3]
   2f196:	42a5      	cmp	r5, r4
   2f198:	d805      	bhi.n	2f1a6 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   2f19a:	f1a3 0304 	sub.w	r3, r3, #4
   2f19e:	d304      	bcc.n	2f1aa <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   2f1a0:	3a01      	subs	r2, #1
   2f1a2:	b252      	sxtb	r2, r2
   2f1a4:	e7f1      	b.n	2f18a <uECC_vli_cmp_unsafe+0x8>
			return 1;
   2f1a6:	2001      	movs	r0, #1
   2f1a8:	e7f2      	b.n	2f190 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   2f1aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f1ae:	e7ef      	b.n	2f190 <uECC_vli_cmp_unsafe+0xe>

0002f1b0 <uECC_vli_sub>:
{
   2f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2f1b2:	2400      	movs	r4, #0
{
   2f1b4:	4607      	mov	r7, r0
   2f1b6:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2f1b8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2f1ba:	b265      	sxtb	r5, r4
   2f1bc:	45ac      	cmp	ip, r5
   2f1be:	dc00      	bgt.n	2f1c2 <uECC_vli_sub+0x12>
}
   2f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2f1c2:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   2f1c6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2f1ca:	1a35      	subs	r5, r6, r0
   2f1cc:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   2f1ce:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   2f1d0:	bf34      	ite	cc
   2f1d2:	2601      	movcc	r6, #1
   2f1d4:	2600      	movcs	r6, #0
		result[i] = diff;
   2f1d6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2f1da:	bf18      	it	ne
   2f1dc:	4630      	movne	r0, r6
		result[i] = diff;
   2f1de:	3401      	adds	r4, #1
   2f1e0:	e7eb      	b.n	2f1ba <uECC_vli_sub+0xa>

0002f1e2 <uECC_vli_cmp>:
{
   2f1e2:	b530      	push	{r4, r5, lr}
   2f1e4:	b089      	sub	sp, #36	; 0x24
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f1e6:	4613      	mov	r3, r2
{
   2f1e8:	4615      	mov	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f1ea:	460a      	mov	r2, r1
   2f1ec:	4601      	mov	r1, r0
   2f1ee:	4668      	mov	r0, sp
   2f1f0:	f7ff ffde 	bl	2f1b0 <uECC_vli_sub>
   2f1f4:	4604      	mov	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
   2f1f6:	4629      	mov	r1, r5
   2f1f8:	4668      	mov	r0, sp
   2f1fa:	f7ff ff7c 	bl	2f0f6 <uECC_vli_isZero>
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f1fe:	3400      	adds	r4, #0
   2f200:	bf18      	it	ne
   2f202:	2401      	movne	r4, #1
	return (!equal - 2 * neg);
   2f204:	0064      	lsls	r4, r4, #1
}
   2f206:	2800      	cmp	r0, #0
   2f208:	bf14      	ite	ne
   2f20a:	4260      	negne	r0, r4
   2f20c:	f1c4 0001 	rsbeq	r0, r4, #1
   2f210:	b009      	add	sp, #36	; 0x24
   2f212:	bd30      	pop	{r4, r5, pc}

0002f214 <uECC_vli_modAdd>:
{
   2f214:	b570      	push	{r4, r5, r6, lr}
   2f216:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   2f21a:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2f21c:	4623      	mov	r3, r4
{
   2f21e:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2f220:	f7ff fea8 	bl	2ef74 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2f224:	b930      	cbnz	r0, 2f234 <uECC_vli_modAdd+0x20>
   2f226:	4622      	mov	r2, r4
   2f228:	4629      	mov	r1, r5
   2f22a:	4630      	mov	r0, r6
   2f22c:	f7ff ffa9 	bl	2f182 <uECC_vli_cmp_unsafe>
   2f230:	2801      	cmp	r0, #1
   2f232:	d007      	beq.n	2f244 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   2f234:	4623      	mov	r3, r4
   2f236:	4632      	mov	r2, r6
   2f238:	4629      	mov	r1, r5
   2f23a:	4628      	mov	r0, r5
}
   2f23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2f240:	f7ff bfb6 	b.w	2f1b0 <uECC_vli_sub>
}
   2f244:	bd70      	pop	{r4, r5, r6, pc}

0002f246 <uECC_vli_modSub>:
{
   2f246:	b570      	push	{r4, r5, r6, lr}
   2f248:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   2f24c:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2f24e:	4623      	mov	r3, r4
{
   2f250:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2f252:	f7ff ffad 	bl	2f1b0 <uECC_vli_sub>
	if (l_borrow) {
   2f256:	b138      	cbz	r0, 2f268 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2f258:	4623      	mov	r3, r4
   2f25a:	4632      	mov	r2, r6
   2f25c:	4629      	mov	r1, r5
   2f25e:	4628      	mov	r0, r5
}
   2f260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   2f264:	f7ff be86 	b.w	2ef74 <uECC_vli_add>
}
   2f268:	bd70      	pop	{r4, r5, r6, pc}

0002f26a <uECC_vli_mmod>:
{
   2f26a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f26e:	461d      	mov	r5, r3
   2f270:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
   2f272:	ab14      	add	r3, sp, #80	; 0x50
   2f274:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2f278:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   2f27a:	4629      	mov	r1, r5
   2f27c:	4610      	mov	r0, r2
{
   2f27e:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   2f280:	f7ff ff52 	bl	2f128 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2f284:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   2f288:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2f28a:	4626      	mov	r6, r4
   2f28c:	2c00      	cmp	r4, #0
   2f28e:	bfb8      	it	lt
   2f290:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f294:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2f296:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f29a:	f003 031f 	and.w	r3, r3, #31
   2f29e:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2f2a2:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f2a4:	bf58      	it	pl
   2f2a6:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   2f2aa:	4631      	mov	r1, r6
   2f2ac:	f7ff ff18 	bl	2f0e0 <uECC_vli_clear>
	if (bit_shift > 0) {
   2f2b0:	f1b8 0f00 	cmp.w	r8, #0
   2f2b4:	b230      	sxth	r0, r6
   2f2b6:	dd2d      	ble.n	2f314 <uECC_vli_mmod+0xaa>
	uECC_word_t carry = 0;
   2f2b8:	2200      	movs	r2, #0
   2f2ba:	ab04      	add	r3, sp, #16
   2f2bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f2c0:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2f2c2:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f2c6:	429d      	cmp	r5, r3
   2f2c8:	d819      	bhi.n	2f2fe <uECC_vli_mmod+0x94>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f2ca:	2601      	movs	r6, #1
		for (i = 0; i < num_words * 2; ++i) {
   2f2cc:	b22f      	sxth	r7, r5
   2f2ce:	007b      	lsls	r3, r7, #1
   2f2d0:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f2d2:	ab04      	add	r3, sp, #16
   2f2d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f2d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   2f2dc:	ab24      	add	r3, sp, #144	; 0x90
   2f2de:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2f2e2:	2c00      	cmp	r4, #0
   2f2e4:	da54      	bge.n	2f390 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   2f2e6:	ab24      	add	r3, sp, #144	; 0x90
   2f2e8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2f2ec:	462a      	mov	r2, r5
   2f2ee:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2f2f2:	4648      	mov	r0, r9
   2f2f4:	f7ff ff39 	bl	2f16a <uECC_vli_set>
}
   2f2f8:	b025      	add	sp, #148	; 0x94
   2f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2f2fe:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f302:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2f304:	fa06 f108 	lsl.w	r1, r6, r8
   2f308:	430a      	orrs	r2, r1
   2f30a:	f840 2b04 	str.w	r2, [r0], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2f30e:	fa26 f20c 	lsr.w	r2, r6, ip
   2f312:	e7d8      	b.n	2f2c6 <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2f314:	ab04      	add	r3, sp, #16
   2f316:	462a      	mov	r2, r5
   2f318:	4639      	mov	r1, r7
   2f31a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f31e:	f7ff ff24 	bl	2f16a <uECC_vli_set>
   2f322:	e7d2      	b.n	2f2ca <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f324:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2f328:	fa0f fe82 	sxth.w	lr, r2
   2f32c:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   2f330:	ab24      	add	r3, sp, #144	; 0x90
   2f332:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2f336:	f852 3c80 	ldr.w	r3, [r2, #-128]
   2f33a:	3001      	adds	r0, #1
   2f33c:	440b      	add	r3, r1
   2f33e:	ebbb 0303 	subs.w	r3, fp, r3
   2f342:	bf34      	ite	cc
   2f344:	2201      	movcc	r2, #1
   2f346:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2f348:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   2f34a:	bf18      	it	ne
   2f34c:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   2f34e:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   2f352:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2f356:	9b01      	ldr	r3, [sp, #4]
   2f358:	b242      	sxtb	r2, r0
   2f35a:	429a      	cmp	r2, r3
   2f35c:	dbe2      	blt.n	2f324 <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   2f35e:	1a73      	subs	r3, r6, r1
   2f360:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2f362:	4629      	mov	r1, r5
   2f364:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2f366:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2f368:	f7ff fe1c 	bl	2efa4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f36c:	ab24      	add	r3, sp, #144	; 0x90
   2f36e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2f372:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2f376:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f37a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f37c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f380:	4638      	mov	r0, r7
	for (index = 1; shift >= 0; --shift) {
   2f382:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f384:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   2f388:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f38a:	f7ff fe0b 	bl	2efa4 <uECC_vli_rshift1>
   2f38e:	e7a8      	b.n	2f2e2 <uECC_vli_mmod+0x78>
   2f390:	2000      	movs	r0, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f392:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
   2f394:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2f398:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f39a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2f39e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2f3a2:	e7d8      	b.n	2f356 <uECC_vli_mmod+0xec>

0002f3a4 <uECC_vli_modMult>:
{
   2f3a4:	b570      	push	{r4, r5, r6, lr}
   2f3a6:	4605      	mov	r5, r0
   2f3a8:	461e      	mov	r6, r3
   2f3aa:	b090      	sub	sp, #64	; 0x40
   2f3ac:	f99d 4050 	ldrsb.w	r4, [sp, #80]	; 0x50
	uECC_vli_mult(product, left, right, num_words);
   2f3b0:	4668      	mov	r0, sp
   2f3b2:	4623      	mov	r3, r4
   2f3b4:	f7ff fe1f 	bl	2eff6 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
   2f3b8:	4632      	mov	r2, r6
   2f3ba:	4669      	mov	r1, sp
   2f3bc:	4628      	mov	r0, r5
   2f3be:	f7ff ff54 	bl	2f26a <uECC_vli_mmod>
}
   2f3c2:	b010      	add	sp, #64	; 0x40
   2f3c4:	bd70      	pop	{r4, r5, r6, pc}

0002f3c6 <uECC_vli_modMult_fast>:
{
   2f3c6:	b530      	push	{r4, r5, lr}
   2f3c8:	4605      	mov	r5, r0
   2f3ca:	461c      	mov	r4, r3
   2f3cc:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
   2f3ce:	4668      	mov	r0, sp
   2f3d0:	f993 3000 	ldrsb.w	r3, [r3]
   2f3d4:	f7ff fe0f 	bl	2eff6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2f3d8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2f3dc:	4669      	mov	r1, sp
   2f3de:	4628      	mov	r0, r5
   2f3e0:	4798      	blx	r3
}
   2f3e2:	b011      	add	sp, #68	; 0x44
   2f3e4:	bd30      	pop	{r4, r5, pc}

0002f3e6 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   2f3e6:	4613      	mov	r3, r2
   2f3e8:	460a      	mov	r2, r1
   2f3ea:	f7ff bfec 	b.w	2f3c6 <uECC_vli_modMult_fast>

0002f3ee <double_jacobian_default>:
{
   2f3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2f3f2:	f993 6000 	ldrsb.w	r6, [r3]
{
   2f3f6:	b092      	sub	sp, #72	; 0x48
   2f3f8:	4604      	mov	r4, r0
   2f3fa:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2f3fc:	4610      	mov	r0, r2
   2f3fe:	4631      	mov	r1, r6
{
   2f400:	4615      	mov	r5, r2
   2f402:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2f404:	f7ff fe77 	bl	2f0f6 <uECC_vli_isZero>
   2f408:	2800      	cmp	r0, #0
   2f40a:	f040 8091 	bne.w	2f530 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2f40e:	4642      	mov	r2, r8
   2f410:	4649      	mov	r1, r9
   2f412:	a802      	add	r0, sp, #8
   2f414:	f7ff ffe7 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2f418:	4643      	mov	r3, r8
   2f41a:	aa02      	add	r2, sp, #8
   2f41c:	4621      	mov	r1, r4
   2f41e:	a80a      	add	r0, sp, #40	; 0x28
   2f420:	f7ff ffd1 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2f424:	a902      	add	r1, sp, #8
   2f426:	4608      	mov	r0, r1
   2f428:	4642      	mov	r2, r8
   2f42a:	f7ff ffdc 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2f42e:	4643      	mov	r3, r8
   2f430:	462a      	mov	r2, r5
   2f432:	4649      	mov	r1, r9
   2f434:	4648      	mov	r0, r9
   2f436:	f7ff ffc6 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2f43a:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2f43e:	4642      	mov	r2, r8
   2f440:	4629      	mov	r1, r5
   2f442:	4628      	mov	r0, r5
   2f444:	f7ff ffcf 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2f448:	463b      	mov	r3, r7
   2f44a:	462a      	mov	r2, r5
   2f44c:	4621      	mov	r1, r4
   2f44e:	4620      	mov	r0, r4
   2f450:	9600      	str	r6, [sp, #0]
   2f452:	f7ff fedf 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2f456:	463b      	mov	r3, r7
   2f458:	462a      	mov	r2, r5
   2f45a:	4629      	mov	r1, r5
   2f45c:	4628      	mov	r0, r5
   2f45e:	9600      	str	r6, [sp, #0]
   2f460:	f7ff fed8 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2f464:	463b      	mov	r3, r7
   2f466:	462a      	mov	r2, r5
   2f468:	4621      	mov	r1, r4
   2f46a:	4628      	mov	r0, r5
   2f46c:	9600      	str	r6, [sp, #0]
   2f46e:	f7ff feea 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2f472:	4643      	mov	r3, r8
   2f474:	462a      	mov	r2, r5
   2f476:	4621      	mov	r1, r4
   2f478:	4620      	mov	r0, r4
   2f47a:	f7ff ffa4 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2f47e:	463b      	mov	r3, r7
   2f480:	4622      	mov	r2, r4
   2f482:	4621      	mov	r1, r4
   2f484:	4628      	mov	r0, r5
   2f486:	9600      	str	r6, [sp, #0]
   2f488:	f7ff fec4 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2f48c:	463b      	mov	r3, r7
   2f48e:	9600      	str	r6, [sp, #0]
   2f490:	462a      	mov	r2, r5
   2f492:	4621      	mov	r1, r4
   2f494:	4620      	mov	r0, r4
   2f496:	f7ff febd 	bl	2f214 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f49a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2f49c:	07db      	lsls	r3, r3, #31
   2f49e:	d54a      	bpl.n	2f536 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2f4a0:	4633      	mov	r3, r6
   2f4a2:	463a      	mov	r2, r7
   2f4a4:	4621      	mov	r1, r4
   2f4a6:	4620      	mov	r0, r4
   2f4a8:	f7ff fd64 	bl	2ef74 <uECC_vli_add>
   2f4ac:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2f4ae:	4631      	mov	r1, r6
   2f4b0:	4620      	mov	r0, r4
   2f4b2:	f7ff fd77 	bl	2efa4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2f4b6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2f4ba:	3b01      	subs	r3, #1
   2f4bc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   2f4c0:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   2f4c4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2f4c8:	4642      	mov	r2, r8
   2f4ca:	4621      	mov	r1, r4
   2f4cc:	4628      	mov	r0, r5
   2f4ce:	f7ff ff8a 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2f4d2:	463b      	mov	r3, r7
   2f4d4:	aa0a      	add	r2, sp, #40	; 0x28
   2f4d6:	4629      	mov	r1, r5
   2f4d8:	4628      	mov	r0, r5
   2f4da:	9600      	str	r6, [sp, #0]
   2f4dc:	f7ff feb3 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2f4e0:	463b      	mov	r3, r7
   2f4e2:	aa0a      	add	r2, sp, #40	; 0x28
   2f4e4:	4629      	mov	r1, r5
   2f4e6:	4628      	mov	r0, r5
   2f4e8:	9600      	str	r6, [sp, #0]
   2f4ea:	f7ff feac 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2f4ee:	a90a      	add	r1, sp, #40	; 0x28
   2f4f0:	4608      	mov	r0, r1
   2f4f2:	463b      	mov	r3, r7
   2f4f4:	462a      	mov	r2, r5
   2f4f6:	9600      	str	r6, [sp, #0]
   2f4f8:	f7ff fea5 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2f4fc:	4643      	mov	r3, r8
   2f4fe:	aa0a      	add	r2, sp, #40	; 0x28
   2f500:	4621      	mov	r1, r4
   2f502:	4620      	mov	r0, r4
   2f504:	f7ff ff5f 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2f508:	aa02      	add	r2, sp, #8
   2f50a:	463b      	mov	r3, r7
   2f50c:	4610      	mov	r0, r2
   2f50e:	4621      	mov	r1, r4
   2f510:	9600      	str	r6, [sp, #0]
   2f512:	f7ff fe98 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2f516:	4632      	mov	r2, r6
   2f518:	4629      	mov	r1, r5
   2f51a:	4620      	mov	r0, r4
   2f51c:	f7ff fe25 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2f520:	4649      	mov	r1, r9
   2f522:	4628      	mov	r0, r5
   2f524:	f7ff fe21 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2f528:	a902      	add	r1, sp, #8
   2f52a:	4648      	mov	r0, r9
   2f52c:	f7ff fe1d 	bl	2f16a <uECC_vli_set>
}
   2f530:	b012      	add	sp, #72	; 0x48
   2f532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2f536:	4631      	mov	r1, r6
   2f538:	4620      	mov	r0, r4
   2f53a:	f7ff fd33 	bl	2efa4 <uECC_vli_rshift1>
   2f53e:	e7c3      	b.n	2f4c8 <double_jacobian_default+0xda>

0002f540 <x_side_default>:
{
   2f540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f544:	4615      	mov	r5, r2
   2f546:	b08a      	sub	sp, #40	; 0x28
   2f548:	4604      	mov	r4, r0
   2f54a:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2f54c:	221c      	movs	r2, #28
   2f54e:	2100      	movs	r1, #0
   2f550:	a803      	add	r0, sp, #12
   2f552:	f004 f96f 	bl	33834 <memset>
   2f556:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
   2f558:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2f55c:	462a      	mov	r2, r5
   2f55e:	4641      	mov	r1, r8
   2f560:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2f562:	1d2e      	adds	r6, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2f564:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2f566:	f7ff ff3e 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2f56a:	4633      	mov	r3, r6
   2f56c:	aa02      	add	r2, sp, #8
   2f56e:	4621      	mov	r1, r4
   2f570:	4620      	mov	r0, r4
   2f572:	9700      	str	r7, [sp, #0]
   2f574:	f7ff fe67 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2f578:	462b      	mov	r3, r5
   2f57a:	4642      	mov	r2, r8
   2f57c:	4621      	mov	r1, r4
   2f57e:	4620      	mov	r0, r4
   2f580:	f7ff ff21 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2f584:	9700      	str	r7, [sp, #0]
   2f586:	4633      	mov	r3, r6
   2f588:	f105 0284 	add.w	r2, r5, #132	; 0x84
   2f58c:	4621      	mov	r1, r4
   2f58e:	4620      	mov	r0, r4
   2f590:	f7ff fe40 	bl	2f214 <uECC_vli_modAdd>
}
   2f594:	b00a      	add	sp, #40	; 0x28
   2f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f59a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2f59a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f59e:	4616      	mov	r6, r2
   2f5a0:	4607      	mov	r7, r0
   2f5a2:	4698      	mov	r8, r3
   2f5a4:	4689      	mov	r9, r1
   2f5a6:	b09b      	sub	sp, #108	; 0x6c
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2f5a8:	9c22      	ldr	r4, [sp, #136]	; 0x88

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f5aa:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   2f5ac:	f914 5b04 	ldrsb.w	r5, [r4], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f5b0:	4631      	mov	r1, r6
   2f5b2:	4623      	mov	r3, r4
   2f5b4:	a802      	add	r0, sp, #8
   2f5b6:	9500      	str	r5, [sp, #0]
   2f5b8:	f7ff fe45 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2f5bc:	a902      	add	r1, sp, #8
   2f5be:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2f5c0:	4608      	mov	r0, r1
   2f5c2:	f7ff ff10 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2f5c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2f5c8:	aa02      	add	r2, sp, #8
   2f5ca:	4639      	mov	r1, r7
   2f5cc:	4638      	mov	r0, r7
   2f5ce:	f7ff fefa 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2f5d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2f5d4:	aa02      	add	r2, sp, #8
   2f5d6:	4631      	mov	r1, r6
   2f5d8:	4630      	mov	r0, r6
   2f5da:	f7ff fef4 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2f5de:	4623      	mov	r3, r4
   2f5e0:	464a      	mov	r2, r9
   2f5e2:	4641      	mov	r1, r8
   2f5e4:	a802      	add	r0, sp, #8
   2f5e6:	9500      	str	r5, [sp, #0]
   2f5e8:	f7ff fe14 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2f5ec:	4623      	mov	r3, r4
   2f5ee:	464a      	mov	r2, r9
   2f5f0:	4641      	mov	r1, r8
   2f5f2:	4640      	mov	r0, r8
   2f5f4:	9500      	str	r5, [sp, #0]
   2f5f6:	f7ff fe26 	bl	2f246 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2f5fa:	4623      	mov	r3, r4
   2f5fc:	463a      	mov	r2, r7
   2f5fe:	4631      	mov	r1, r6
   2f600:	a80a      	add	r0, sp, #40	; 0x28
   2f602:	9500      	str	r5, [sp, #0]
   2f604:	f7ff fe1f 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2f608:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2f60a:	aa0a      	add	r2, sp, #40	; 0x28
   2f60c:	4649      	mov	r1, r9
   2f60e:	4648      	mov	r0, r9
   2f610:	f7ff fed9 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2f614:	4623      	mov	r3, r4
   2f616:	4632      	mov	r2, r6
   2f618:	4639      	mov	r1, r7
   2f61a:	a80a      	add	r0, sp, #40	; 0x28
   2f61c:	9500      	str	r5, [sp, #0]
   2f61e:	f7ff fdf9 	bl	2f214 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2f622:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2f624:	4641      	mov	r1, r8
   2f626:	4630      	mov	r0, r6
   2f628:	f7ff fedd 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2f62c:	4623      	mov	r3, r4
   2f62e:	aa0a      	add	r2, sp, #40	; 0x28
   2f630:	4631      	mov	r1, r6
   2f632:	4630      	mov	r0, r6
   2f634:	9500      	str	r5, [sp, #0]
   2f636:	f7ff fe06 	bl	2f246 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2f63a:	4623      	mov	r3, r4
   2f63c:	4632      	mov	r2, r6
   2f63e:	4639      	mov	r1, r7
   2f640:	a812      	add	r0, sp, #72	; 0x48
   2f642:	9500      	str	r5, [sp, #0]
   2f644:	f7ff fdff 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2f648:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2f64a:	aa12      	add	r2, sp, #72	; 0x48
   2f64c:	4641      	mov	r1, r8
   2f64e:	4640      	mov	r0, r8
   2f650:	f7ff feb9 	bl	2f3c6 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2f654:	4623      	mov	r3, r4
   2f656:	464a      	mov	r2, r9
   2f658:	4641      	mov	r1, r8
   2f65a:	4640      	mov	r0, r8
   2f65c:	9500      	str	r5, [sp, #0]
   2f65e:	f7ff fdf2 	bl	2f246 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2f662:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2f664:	a902      	add	r1, sp, #8
   2f666:	a812      	add	r0, sp, #72	; 0x48
   2f668:	f7ff febd 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2f66c:	a912      	add	r1, sp, #72	; 0x48
   2f66e:	4623      	mov	r3, r4
   2f670:	aa0a      	add	r2, sp, #40	; 0x28
   2f672:	4608      	mov	r0, r1
   2f674:	9500      	str	r5, [sp, #0]
   2f676:	f7ff fde6 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2f67a:	4623      	mov	r3, r4
   2f67c:	463a      	mov	r2, r7
   2f67e:	a912      	add	r1, sp, #72	; 0x48
   2f680:	a80a      	add	r0, sp, #40	; 0x28
   2f682:	9500      	str	r5, [sp, #0]
   2f684:	f7ff fddf 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2f688:	a90a      	add	r1, sp, #40	; 0x28
   2f68a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2f68c:	aa02      	add	r2, sp, #8
   2f68e:	4608      	mov	r0, r1
   2f690:	f7ff fe99 	bl	2f3c6 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2f694:	4623      	mov	r3, r4
   2f696:	464a      	mov	r2, r9
   2f698:	a90a      	add	r1, sp, #40	; 0x28
   2f69a:	4648      	mov	r0, r9
   2f69c:	9500      	str	r5, [sp, #0]
   2f69e:	f7ff fdd2 	bl	2f246 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2f6a2:	462a      	mov	r2, r5
   2f6a4:	a912      	add	r1, sp, #72	; 0x48
   2f6a6:	4638      	mov	r0, r7
   2f6a8:	f7ff fd5f 	bl	2f16a <uECC_vli_set>
}
   2f6ac:	b01b      	add	sp, #108	; 0x6c
   2f6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f6b2 <uECC_vli_modInv>:
{
   2f6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f6b4:	460f      	mov	r7, r1
   2f6b6:	b0a1      	sub	sp, #132	; 0x84
   2f6b8:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2f6ba:	4619      	mov	r1, r3
   2f6bc:	4638      	mov	r0, r7
{
   2f6be:	4615      	mov	r5, r2
   2f6c0:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2f6c2:	f7ff fd18 	bl	2f0f6 <uECC_vli_isZero>
   2f6c6:	b120      	cbz	r0, 2f6d2 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   2f6c8:	4630      	mov	r0, r6
   2f6ca:	f7ff fd09 	bl	2f0e0 <uECC_vli_clear>
}
   2f6ce:	b021      	add	sp, #132	; 0x84
   2f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   2f6d2:	4622      	mov	r2, r4
   2f6d4:	4639      	mov	r1, r7
   2f6d6:	4668      	mov	r0, sp
   2f6d8:	f7ff fd47 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2f6dc:	4629      	mov	r1, r5
   2f6de:	a808      	add	r0, sp, #32
   2f6e0:	f7ff fd43 	bl	2f16a <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2f6e4:	a810      	add	r0, sp, #64	; 0x40
   2f6e6:	4621      	mov	r1, r4
   2f6e8:	f7ff fcfa 	bl	2f0e0 <uECC_vli_clear>
	u[0] = 1;
   2f6ec:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2f6ee:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2f6f0:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2f6f2:	f7ff fcf5 	bl	2f0e0 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2f6f6:	4622      	mov	r2, r4
   2f6f8:	a908      	add	r1, sp, #32
   2f6fa:	4668      	mov	r0, sp
   2f6fc:	f7ff fd41 	bl	2f182 <uECC_vli_cmp_unsafe>
   2f700:	b928      	cbnz	r0, 2f70e <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   2f702:	4622      	mov	r2, r4
   2f704:	a910      	add	r1, sp, #64	; 0x40
   2f706:	4630      	mov	r0, r6
   2f708:	f7ff fd2f 	bl	2f16a <uECC_vli_set>
   2f70c:	e7df      	b.n	2f6ce <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   2f70e:	9b00      	ldr	r3, [sp, #0]
   2f710:	07da      	lsls	r2, r3, #31
   2f712:	d409      	bmi.n	2f728 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2f714:	4621      	mov	r1, r4
   2f716:	4668      	mov	r0, sp
   2f718:	f7ff fc44 	bl	2efa4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2f71c:	4622      	mov	r2, r4
   2f71e:	4629      	mov	r1, r5
   2f720:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2f722:	f7ff fc4c 	bl	2efbe <vli_modInv_update>
   2f726:	e7e6      	b.n	2f6f6 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2f728:	9b08      	ldr	r3, [sp, #32]
   2f72a:	07db      	lsls	r3, r3, #31
   2f72c:	d407      	bmi.n	2f73e <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   2f72e:	4621      	mov	r1, r4
   2f730:	a808      	add	r0, sp, #32
   2f732:	f7ff fc37 	bl	2efa4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2f736:	4622      	mov	r2, r4
   2f738:	4629      	mov	r1, r5
   2f73a:	a818      	add	r0, sp, #96	; 0x60
   2f73c:	e7f1      	b.n	2f722 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   2f73e:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2f740:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2f742:	dd1c      	ble.n	2f77e <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   2f744:	aa08      	add	r2, sp, #32
   2f746:	4669      	mov	r1, sp
   2f748:	4668      	mov	r0, sp
   2f74a:	f7ff fd31 	bl	2f1b0 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2f74e:	4621      	mov	r1, r4
   2f750:	4668      	mov	r0, sp
   2f752:	f7ff fc27 	bl	2efa4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2f756:	4622      	mov	r2, r4
   2f758:	a918      	add	r1, sp, #96	; 0x60
   2f75a:	a810      	add	r0, sp, #64	; 0x40
   2f75c:	f7ff fd11 	bl	2f182 <uECC_vli_cmp_unsafe>
   2f760:	2800      	cmp	r0, #0
   2f762:	da05      	bge.n	2f770 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   2f764:	a910      	add	r1, sp, #64	; 0x40
   2f766:	4623      	mov	r3, r4
   2f768:	462a      	mov	r2, r5
   2f76a:	4608      	mov	r0, r1
   2f76c:	f7ff fc02 	bl	2ef74 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2f770:	a910      	add	r1, sp, #64	; 0x40
   2f772:	4623      	mov	r3, r4
   2f774:	aa18      	add	r2, sp, #96	; 0x60
   2f776:	4608      	mov	r0, r1
   2f778:	f7ff fd1a 	bl	2f1b0 <uECC_vli_sub>
   2f77c:	e7ce      	b.n	2f71c <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2f77e:	a908      	add	r1, sp, #32
   2f780:	466a      	mov	r2, sp
   2f782:	4608      	mov	r0, r1
   2f784:	f7ff fd14 	bl	2f1b0 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2f788:	4621      	mov	r1, r4
   2f78a:	a808      	add	r0, sp, #32
   2f78c:	f7ff fc0a 	bl	2efa4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2f790:	4622      	mov	r2, r4
   2f792:	a910      	add	r1, sp, #64	; 0x40
   2f794:	a818      	add	r0, sp, #96	; 0x60
   2f796:	f7ff fcf4 	bl	2f182 <uECC_vli_cmp_unsafe>
   2f79a:	2800      	cmp	r0, #0
   2f79c:	da05      	bge.n	2f7aa <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2f79e:	a918      	add	r1, sp, #96	; 0x60
   2f7a0:	4623      	mov	r3, r4
   2f7a2:	462a      	mov	r2, r5
   2f7a4:	4608      	mov	r0, r1
   2f7a6:	f7ff fbe5 	bl	2ef74 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2f7aa:	a918      	add	r1, sp, #96	; 0x60
   2f7ac:	4623      	mov	r3, r4
   2f7ae:	aa10      	add	r2, sp, #64	; 0x40
   2f7b0:	4608      	mov	r0, r1
   2f7b2:	f7ff fcfd 	bl	2f1b0 <uECC_vli_sub>
   2f7b6:	e7be      	b.n	2f736 <uECC_vli_modInv+0x84>

0002f7b8 <apply_z>:
{
   2f7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f7ba:	4615      	mov	r5, r2
   2f7bc:	461c      	mov	r4, r3
   2f7be:	4607      	mov	r7, r0
   2f7c0:	460e      	mov	r6, r1
   2f7c2:	b089      	sub	sp, #36	; 0x24
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2f7c4:	461a      	mov	r2, r3
   2f7c6:	4629      	mov	r1, r5
   2f7c8:	4668      	mov	r0, sp
   2f7ca:	f7ff fe0c 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2f7ce:	4623      	mov	r3, r4
   2f7d0:	466a      	mov	r2, sp
   2f7d2:	4639      	mov	r1, r7
   2f7d4:	4638      	mov	r0, r7
   2f7d6:	f7ff fdf6 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2f7da:	4623      	mov	r3, r4
   2f7dc:	462a      	mov	r2, r5
   2f7de:	4669      	mov	r1, sp
   2f7e0:	4668      	mov	r0, sp
   2f7e2:	f7ff fdf0 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2f7e6:	4623      	mov	r3, r4
   2f7e8:	466a      	mov	r2, sp
   2f7ea:	4631      	mov	r1, r6
   2f7ec:	4630      	mov	r0, r6
   2f7ee:	f7ff fdea 	bl	2f3c6 <uECC_vli_modMult_fast>
}
   2f7f2:	b009      	add	sp, #36	; 0x24
   2f7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f7f6 <XYcZ_add>:
{
   2f7f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f7fa:	4614      	mov	r4, r2
   2f7fc:	4680      	mov	r8, r0
   2f7fe:	461f      	mov	r7, r3
   2f800:	4689      	mov	r9, r1
   2f802:	b08b      	sub	sp, #44	; 0x2c
	wordcount_t num_words = curve->num_words;
   2f804:	9d12      	ldr	r5, [sp, #72]	; 0x48
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f806:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   2f808:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f80c:	4621      	mov	r1, r4
   2f80e:	462b      	mov	r3, r5
   2f810:	a802      	add	r0, sp, #8
   2f812:	9600      	str	r6, [sp, #0]
   2f814:	f7ff fd17 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2f818:	a902      	add	r1, sp, #8
   2f81a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2f81c:	4608      	mov	r0, r1
   2f81e:	f7ff fde2 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2f822:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2f824:	aa02      	add	r2, sp, #8
   2f826:	4641      	mov	r1, r8
   2f828:	4640      	mov	r0, r8
   2f82a:	f7ff fdcc 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2f82e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2f830:	aa02      	add	r2, sp, #8
   2f832:	4621      	mov	r1, r4
   2f834:	4620      	mov	r0, r4
   2f836:	f7ff fdc6 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2f83a:	462b      	mov	r3, r5
   2f83c:	464a      	mov	r2, r9
   2f83e:	4639      	mov	r1, r7
   2f840:	4638      	mov	r0, r7
   2f842:	9600      	str	r6, [sp, #0]
   2f844:	f7ff fcff 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2f848:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2f84a:	4639      	mov	r1, r7
   2f84c:	a802      	add	r0, sp, #8
   2f84e:	f7ff fdca 	bl	2f3e6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2f852:	a902      	add	r1, sp, #8
   2f854:	462b      	mov	r3, r5
   2f856:	4642      	mov	r2, r8
   2f858:	4608      	mov	r0, r1
   2f85a:	9600      	str	r6, [sp, #0]
   2f85c:	f7ff fcf3 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2f860:	a902      	add	r1, sp, #8
   2f862:	462b      	mov	r3, r5
   2f864:	4622      	mov	r2, r4
   2f866:	4608      	mov	r0, r1
   2f868:	9600      	str	r6, [sp, #0]
   2f86a:	f7ff fcec 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2f86e:	462b      	mov	r3, r5
   2f870:	4642      	mov	r2, r8
   2f872:	4621      	mov	r1, r4
   2f874:	4620      	mov	r0, r4
   2f876:	9600      	str	r6, [sp, #0]
   2f878:	f7ff fce5 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2f87c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2f87e:	4622      	mov	r2, r4
   2f880:	4649      	mov	r1, r9
   2f882:	4648      	mov	r0, r9
   2f884:	f7ff fd9f 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2f888:	462b      	mov	r3, r5
   2f88a:	aa02      	add	r2, sp, #8
   2f88c:	4641      	mov	r1, r8
   2f88e:	4620      	mov	r0, r4
   2f890:	9600      	str	r6, [sp, #0]
   2f892:	f7ff fcd8 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2f896:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2f898:	4622      	mov	r2, r4
   2f89a:	4639      	mov	r1, r7
   2f89c:	4638      	mov	r0, r7
   2f89e:	f7ff fd92 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2f8a2:	462b      	mov	r3, r5
   2f8a4:	464a      	mov	r2, r9
   2f8a6:	4639      	mov	r1, r7
   2f8a8:	4638      	mov	r0, r7
   2f8aa:	9600      	str	r6, [sp, #0]
   2f8ac:	f7ff fccb 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2f8b0:	4632      	mov	r2, r6
   2f8b2:	a902      	add	r1, sp, #8
   2f8b4:	4620      	mov	r0, r4
   2f8b6:	f7ff fc58 	bl	2f16a <uECC_vli_set>
}
   2f8ba:	b00b      	add	sp, #44	; 0x2c
   2f8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f8c0 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8c4:	461e      	mov	r6, r3
   2f8c6:	b0b1      	sub	sp, #196	; 0xc4
   2f8c8:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   2f8ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2f8ce:	f994 7000 	ldrsb.w	r7, [r4]
{
   2f8d2:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
   2f8d4:	a818      	add	r0, sp, #96	; 0x60
   2f8d6:	463a      	mov	r2, r7
   2f8d8:	f7ff fc47 	bl	2f16a <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2f8dc:	00bb      	lsls	r3, r7, #2
   2f8de:	9307      	str	r3, [sp, #28]
   2f8e0:	9b05      	ldr	r3, [sp, #20]
   2f8e2:	00ba      	lsls	r2, r7, #2
   2f8e4:	4413      	add	r3, r2
   2f8e6:	4619      	mov	r1, r3
   2f8e8:	463a      	mov	r2, r7
   2f8ea:	a828      	add	r0, sp, #160	; 0xa0
   2f8ec:	9302      	str	r3, [sp, #8]
   2f8ee:	f7ff fc3c 	bl	2f16a <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2f8f2:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2f8f6:	2e00      	cmp	r6, #0
   2f8f8:	f000 8087 	beq.w	2fa0a <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2f8fc:	462a      	mov	r2, r5
   2f8fe:	4631      	mov	r1, r6
   2f900:	a808      	add	r0, sp, #32
   2f902:	f7ff fc32 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2f906:	ae10      	add	r6, sp, #64	; 0x40
   2f908:	462a      	mov	r2, r5
   2f90a:	a918      	add	r1, sp, #96	; 0x60
   2f90c:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   2f90e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2f912:	f7ff fc2a 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2f916:	a928      	add	r1, sp, #160	; 0xa0
   2f918:	4648      	mov	r0, r9
   2f91a:	f7ff fc26 	bl	2f16a <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2f91e:	4623      	mov	r3, r4
   2f920:	aa08      	add	r2, sp, #32
   2f922:	a928      	add	r1, sp, #160	; 0xa0
   2f924:	a818      	add	r0, sp, #96	; 0x60
   2f926:	f7ff ff47 	bl	2f7b8 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2f92a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2f92e:	4623      	mov	r3, r4
   2f930:	aa08      	add	r2, sp, #32
   2f932:	a928      	add	r1, sp, #160	; 0xa0
   2f934:	a818      	add	r0, sp, #96	; 0x60
   2f936:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2f938:	4623      	mov	r3, r4
   2f93a:	aa08      	add	r2, sp, #32
   2f93c:	4649      	mov	r1, r9
   2f93e:	4630      	mov	r0, r6
   2f940:	f7ff ff3a 	bl	2f7b8 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2f944:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2f948:	3d02      	subs	r5, #2
   2f94a:	b22d      	sxth	r5, r5
   2f94c:	2d00      	cmp	r5, #0
   2f94e:	dc63      	bgt.n	2fa18 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f950:	9b06      	ldr	r3, [sp, #24]

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2f952:	f104 0a04 	add.w	sl, r4, #4
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f956:	681d      	ldr	r5, [r3, #0]
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f958:	ab10      	add	r3, sp, #64	; 0x40
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f95a:	f005 0601 	and.w	r6, r5, #1
   2f95e:	43ed      	mvns	r5, r5
   2f960:	0176      	lsls	r6, r6, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f962:	eb03 0806 	add.w	r8, r3, r6
   2f966:	f005 0501 	and.w	r5, r5, #1
   2f96a:	ab20      	add	r3, sp, #128	; 0x80
   2f96c:	441e      	add	r6, r3
   2f96e:	016d      	lsls	r5, r5, #5
   2f970:	ab10      	add	r3, sp, #64	; 0x40
   2f972:	eb03 0905 	add.w	r9, r3, r5
   2f976:	ab20      	add	r3, sp, #128	; 0x80
   2f978:	441d      	add	r5, r3
   2f97a:	9400      	str	r4, [sp, #0]
   2f97c:	462b      	mov	r3, r5
   2f97e:	464a      	mov	r2, r9
   2f980:	4631      	mov	r1, r6
   2f982:	4640      	mov	r0, r8
   2f984:	f7ff fe09 	bl	2f59a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2f988:	4653      	mov	r3, sl
   2f98a:	aa10      	add	r2, sp, #64	; 0x40
   2f98c:	a918      	add	r1, sp, #96	; 0x60
   2f98e:	a808      	add	r0, sp, #32
   2f990:	9700      	str	r7, [sp, #0]
   2f992:	f7ff fc58 	bl	2f246 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2f996:	a908      	add	r1, sp, #32
   2f998:	4623      	mov	r3, r4
   2f99a:	4632      	mov	r2, r6
   2f99c:	4608      	mov	r0, r1
   2f99e:	f7ff fd12 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2f9a2:	a908      	add	r1, sp, #32
   2f9a4:	4623      	mov	r3, r4
   2f9a6:	9a05      	ldr	r2, [sp, #20]
   2f9a8:	4608      	mov	r0, r1
   2f9aa:	f7ff fd0c 	bl	2f3c6 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2f9ae:	a908      	add	r1, sp, #32
   2f9b0:	463b      	mov	r3, r7
   2f9b2:	4652      	mov	r2, sl
   2f9b4:	4608      	mov	r0, r1
   2f9b6:	f7ff fe7c 	bl	2f6b2 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2f9ba:	a908      	add	r1, sp, #32
   2f9bc:	4623      	mov	r3, r4
   2f9be:	9a02      	ldr	r2, [sp, #8]
   2f9c0:	4608      	mov	r0, r1
   2f9c2:	f7ff fd00 	bl	2f3c6 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2f9c6:	a908      	add	r1, sp, #32
   2f9c8:	4623      	mov	r3, r4
   2f9ca:	4642      	mov	r2, r8
   2f9cc:	4608      	mov	r0, r1
   2f9ce:	f7ff fcfa 	bl	2f3c6 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2f9d2:	9400      	str	r4, [sp, #0]
   2f9d4:	4633      	mov	r3, r6
   2f9d6:	4642      	mov	r2, r8
   2f9d8:	4629      	mov	r1, r5
   2f9da:	4648      	mov	r0, r9
   2f9dc:	f7ff ff0b 	bl	2f7f6 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2f9e0:	4623      	mov	r3, r4
   2f9e2:	aa08      	add	r2, sp, #32
   2f9e4:	a920      	add	r1, sp, #128	; 0x80
   2f9e6:	a810      	add	r0, sp, #64	; 0x40
   2f9e8:	f7ff fee6 	bl	2f7b8 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2f9ec:	463a      	mov	r2, r7
   2f9ee:	a910      	add	r1, sp, #64	; 0x40
   2f9f0:	9804      	ldr	r0, [sp, #16]
   2f9f2:	f7ff fbba 	bl	2f16a <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2f9f6:	9b04      	ldr	r3, [sp, #16]
   2f9f8:	9c07      	ldr	r4, [sp, #28]
   2f9fa:	a920      	add	r1, sp, #128	; 0x80
   2f9fc:	4423      	add	r3, r4
   2f9fe:	4618      	mov	r0, r3
   2fa00:	f7ff fbb3 	bl	2f16a <uECC_vli_set>
}
   2fa04:	b031      	add	sp, #196	; 0xc4
   2fa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2fa0a:	4629      	mov	r1, r5
   2fa0c:	a808      	add	r0, sp, #32
   2fa0e:	f7ff fb67 	bl	2f0e0 <uECC_vli_clear>
		z[0] = 1;
   2fa12:	2301      	movs	r3, #1
   2fa14:	9308      	str	r3, [sp, #32]
   2fa16:	e776      	b.n	2f906 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   2fa18:	4629      	mov	r1, r5
   2fa1a:	9806      	ldr	r0, [sp, #24]
   2fa1c:	f7ff fb7a 	bl	2f114 <uECC_vli_testBit>
   2fa20:	fab0 f080 	clz	r0, r0
   2fa24:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2fa26:	f1c0 0801 	rsb	r8, r0, #1
   2fa2a:	ea4f 1848 	mov.w	r8, r8, lsl #5
   2fa2e:	0140      	lsls	r0, r0, #5
   2fa30:	eb06 0b08 	add.w	fp, r6, r8
   2fa34:	eb06 0a00 	add.w	sl, r6, r0
   2fa38:	44c8      	add	r8, r9
   2fa3a:	eb09 0300 	add.w	r3, r9, r0
   2fa3e:	4652      	mov	r2, sl
   2fa40:	4641      	mov	r1, r8
   2fa42:	4658      	mov	r0, fp
   2fa44:	9400      	str	r4, [sp, #0]
   2fa46:	9303      	str	r3, [sp, #12]
   2fa48:	f7ff fda7 	bl	2f59a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2fa4c:	9400      	str	r4, [sp, #0]
   2fa4e:	4643      	mov	r3, r8
   2fa50:	465a      	mov	r2, fp
   2fa52:	9903      	ldr	r1, [sp, #12]
   2fa54:	4650      	mov	r0, sl
   2fa56:	f7ff fece 	bl	2f7f6 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2fa5a:	3d01      	subs	r5, #1
   2fa5c:	e775      	b.n	2f94a <EccPoint_mult+0x8a>

0002fa5e <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2fa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fa62:	460f      	mov	r7, r1

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2fa64:	f9b3 4002 	ldrsh.w	r4, [r3, #2]

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2fa68:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2fa6c:	f114 051f 	adds.w	r5, r4, #31
   2fa70:	bf48      	it	mi
   2fa72:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
   2fa76:	f345 1547 	sbfx	r5, r5, #5, #8
{
   2fa7a:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2fa7c:	4601      	mov	r1, r0
   2fa7e:	462b      	mov	r3, r5
   2fa80:	4632      	mov	r2, r6
   2fa82:	4638      	mov	r0, r7
   2fa84:	f7ff fa76 	bl	2ef74 <uECC_vli_add>
   2fa88:	b990      	cbnz	r0, 2fab0 <regularize_k+0x52>
   2fa8a:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   2fa8e:	da11      	bge.n	2fab4 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2fa90:	4621      	mov	r1, r4
   2fa92:	4638      	mov	r0, r7
   2fa94:	f7ff fb3e 	bl	2f114 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2fa98:	1c04      	adds	r4, r0, #0
   2fa9a:	bf18      	it	ne
   2fa9c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2fa9e:	462b      	mov	r3, r5
   2faa0:	4632      	mov	r2, r6
   2faa2:	4639      	mov	r1, r7
   2faa4:	4640      	mov	r0, r8
   2faa6:	f7ff fa65 	bl	2ef74 <uECC_vli_add>

	return carry;
}
   2faaa:	4620      	mov	r0, r4
   2faac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2fab0:	2401      	movs	r4, #1
   2fab2:	e7f4      	b.n	2fa9e <regularize_k+0x40>
   2fab4:	4604      	mov	r4, r0
   2fab6:	e7f2      	b.n	2fa9e <regularize_k+0x40>

0002fab8 <uECC_vli_nativeToBytes>:
}

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2fab8:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2faba:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2fabc:	1e4f      	subs	r7, r1, #1
   2fabe:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2fac0:	428c      	cmp	r4, r1
   2fac2:	f105 0501 	add.w	r5, r5, #1
   2fac6:	db00      	blt.n	2faca <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2fac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2faca:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2facc:	f023 0603 	bic.w	r6, r3, #3
   2fad0:	5996      	ldr	r6, [r2, r6]
   2fad2:	f003 0303 	and.w	r3, r3, #3
   2fad6:	00db      	lsls	r3, r3, #3
   2fad8:	fa26 f303 	lsr.w	r3, r6, r3
   2fadc:	5503      	strb	r3, [r0, r4]
   2fade:	e7ee      	b.n	2fabe <uECC_vli_nativeToBytes+0x6>

0002fae0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fae2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2fae4:	1cd1      	adds	r1, r2, #3
   2fae6:	bf48      	it	mi
   2fae8:	1d91      	addmi	r1, r2, #6
{
   2faea:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2faec:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2faf0:	4605      	mov	r5, r0
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2faf2:	f7ff faf5 	bl	2f0e0 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2faf6:	2100      	movs	r1, #0
		unsigned b = num_bytes - 1 - i;
   2faf8:	1e67      	subs	r7, r4, #1
   2fafa:	b24a      	sxtb	r2, r1
	for (i = 0; i < num_bytes; ++i) {
   2fafc:	42a2      	cmp	r2, r4
   2fafe:	f101 0101 	add.w	r1, r1, #1
   2fb02:	db00      	blt.n	2fb06 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2fb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2fb06:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2fb08:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2fb0c:	5cb2      	ldrb	r2, [r6, r2]
   2fb0e:	f003 0303 	and.w	r3, r3, #3
   2fb12:	00db      	lsls	r3, r3, #3
   2fb14:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2fb18:	582a      	ldr	r2, [r5, r0]
   2fb1a:	431a      	orrs	r2, r3
   2fb1c:	502a      	str	r2, [r5, r0]
   2fb1e:	e7ec      	b.n	2fafa <uECC_vli_bytesToNative+0x1a>

0002fb20 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2fb20:	78cb      	ldrb	r3, [r1, #3]
   2fb22:	7802      	ldrb	r2, [r0, #0]
   2fb24:	4053      	eors	r3, r2
   2fb26:	7003      	strb	r3, [r0, #0]
   2fb28:	884b      	ldrh	r3, [r1, #2]
   2fb2a:	7842      	ldrb	r2, [r0, #1]
   2fb2c:	4053      	eors	r3, r2
   2fb2e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2fb30:	680a      	ldr	r2, [r1, #0]
   2fb32:	7883      	ldrb	r3, [r0, #2]
   2fb34:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fb38:	7083      	strb	r3, [r0, #2]
   2fb3a:	680a      	ldr	r2, [r1, #0]
   2fb3c:	78c3      	ldrb	r3, [r0, #3]
   2fb3e:	4053      	eors	r3, r2
   2fb40:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2fb42:	79cb      	ldrb	r3, [r1, #7]
   2fb44:	7902      	ldrb	r2, [r0, #4]
   2fb46:	4053      	eors	r3, r2
   2fb48:	7103      	strb	r3, [r0, #4]
   2fb4a:	88cb      	ldrh	r3, [r1, #6]
   2fb4c:	7942      	ldrb	r2, [r0, #5]
   2fb4e:	4053      	eors	r3, r2
   2fb50:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2fb52:	684a      	ldr	r2, [r1, #4]
   2fb54:	7983      	ldrb	r3, [r0, #6]
   2fb56:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fb5a:	7183      	strb	r3, [r0, #6]
   2fb5c:	684a      	ldr	r2, [r1, #4]
   2fb5e:	79c3      	ldrb	r3, [r0, #7]
   2fb60:	4053      	eors	r3, r2
   2fb62:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2fb64:	7acb      	ldrb	r3, [r1, #11]
   2fb66:	7a02      	ldrb	r2, [r0, #8]
   2fb68:	4053      	eors	r3, r2
   2fb6a:	7203      	strb	r3, [r0, #8]
   2fb6c:	7a42      	ldrb	r2, [r0, #9]
   2fb6e:	894b      	ldrh	r3, [r1, #10]
   2fb70:	4053      	eors	r3, r2
   2fb72:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2fb74:	688a      	ldr	r2, [r1, #8]
   2fb76:	7a83      	ldrb	r3, [r0, #10]
   2fb78:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fb7c:	7283      	strb	r3, [r0, #10]
   2fb7e:	688a      	ldr	r2, [r1, #8]
   2fb80:	7ac3      	ldrb	r3, [r0, #11]
   2fb82:	4053      	eors	r3, r2
   2fb84:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2fb86:	7bcb      	ldrb	r3, [r1, #15]
   2fb88:	7b02      	ldrb	r2, [r0, #12]
   2fb8a:	4053      	eors	r3, r2
   2fb8c:	7303      	strb	r3, [r0, #12]
   2fb8e:	89cb      	ldrh	r3, [r1, #14]
   2fb90:	7b42      	ldrb	r2, [r0, #13]
   2fb92:	4053      	eors	r3, r2
   2fb94:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2fb96:	68ca      	ldr	r2, [r1, #12]
   2fb98:	7b83      	ldrb	r3, [r0, #14]
   2fb9a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fb9e:	7383      	strb	r3, [r0, #14]
   2fba0:	68ca      	ldr	r2, [r1, #12]
   2fba2:	7bc3      	ldrb	r3, [r0, #15]
   2fba4:	4053      	eors	r3, r2
   2fba6:	73c3      	strb	r3, [r0, #15]
}
   2fba8:	4770      	bx	lr

0002fbaa <shift_rows>:
{
   2fbaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2fbac:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2fbae:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2fbb0:	f88d 2000 	strb.w	r2, [sp]
   2fbb4:	7942      	ldrb	r2, [r0, #5]
   2fbb6:	f88d 2001 	strb.w	r2, [sp, #1]
   2fbba:	7a82      	ldrb	r2, [r0, #10]
   2fbbc:	f88d 2002 	strb.w	r2, [sp, #2]
   2fbc0:	7bc2      	ldrb	r2, [r0, #15]
   2fbc2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2fbc6:	7902      	ldrb	r2, [r0, #4]
   2fbc8:	f88d 2004 	strb.w	r2, [sp, #4]
   2fbcc:	7a42      	ldrb	r2, [r0, #9]
   2fbce:	f88d 2005 	strb.w	r2, [sp, #5]
   2fbd2:	7b82      	ldrb	r2, [r0, #14]
   2fbd4:	f88d 2006 	strb.w	r2, [sp, #6]
   2fbd8:	78c2      	ldrb	r2, [r0, #3]
   2fbda:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2fbde:	7a02      	ldrb	r2, [r0, #8]
   2fbe0:	f88d 2008 	strb.w	r2, [sp, #8]
   2fbe4:	7b42      	ldrb	r2, [r0, #13]
   2fbe6:	f88d 2009 	strb.w	r2, [sp, #9]
   2fbea:	7882      	ldrb	r2, [r0, #2]
   2fbec:	f88d 200a 	strb.w	r2, [sp, #10]
   2fbf0:	79c2      	ldrb	r2, [r0, #7]
   2fbf2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2fbf6:	7b02      	ldrb	r2, [r0, #12]
   2fbf8:	f88d 200c 	strb.w	r2, [sp, #12]
   2fbfc:	7842      	ldrb	r2, [r0, #1]
   2fbfe:	f88d 200d 	strb.w	r2, [sp, #13]
   2fc02:	7982      	ldrb	r2, [r0, #6]
   2fc04:	f88d 200e 	strb.w	r2, [sp, #14]
   2fc08:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2fc0c:	2310      	movs	r3, #16
   2fc0e:	466a      	mov	r2, sp
   2fc10:	4619      	mov	r1, r3
   2fc12:	f7ff f871 	bl	2ecf8 <_copy>
}
   2fc16:	b005      	add	sp, #20
   2fc18:	f85d fb04 	ldr.w	pc, [sp], #4

0002fc1c <mult_row_column>:
{
   2fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fc1e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2fc20:	7808      	ldrb	r0, [r1, #0]
{
   2fc22:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2fc24:	f7ff f877 	bl	2ed16 <_double_byte>
   2fc28:	4605      	mov	r5, r0
   2fc2a:	7860      	ldrb	r0, [r4, #1]
   2fc2c:	f7ff f873 	bl	2ed16 <_double_byte>
   2fc30:	78a2      	ldrb	r2, [r4, #2]
   2fc32:	7863      	ldrb	r3, [r4, #1]
   2fc34:	4053      	eors	r3, r2
   2fc36:	78e2      	ldrb	r2, [r4, #3]
   2fc38:	4053      	eors	r3, r2
   2fc3a:	405d      	eors	r5, r3
   2fc3c:	4045      	eors	r5, r0
   2fc3e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2fc40:	7860      	ldrb	r0, [r4, #1]
   2fc42:	7827      	ldrb	r7, [r4, #0]
   2fc44:	f7ff f867 	bl	2ed16 <_double_byte>
   2fc48:	4605      	mov	r5, r0
   2fc4a:	78a0      	ldrb	r0, [r4, #2]
   2fc4c:	f7ff f863 	bl	2ed16 <_double_byte>
   2fc50:	78a3      	ldrb	r3, [r4, #2]
   2fc52:	405f      	eors	r7, r3
   2fc54:	78e3      	ldrb	r3, [r4, #3]
   2fc56:	405f      	eors	r7, r3
   2fc58:	407d      	eors	r5, r7
   2fc5a:	4045      	eors	r5, r0
   2fc5c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2fc5e:	78a0      	ldrb	r0, [r4, #2]
   2fc60:	7865      	ldrb	r5, [r4, #1]
   2fc62:	7827      	ldrb	r7, [r4, #0]
   2fc64:	f7ff f857 	bl	2ed16 <_double_byte>
   2fc68:	406f      	eors	r7, r5
   2fc6a:	4605      	mov	r5, r0
   2fc6c:	78e0      	ldrb	r0, [r4, #3]
   2fc6e:	f7ff f852 	bl	2ed16 <_double_byte>
   2fc72:	78e3      	ldrb	r3, [r4, #3]
   2fc74:	405f      	eors	r7, r3
   2fc76:	407d      	eors	r5, r7
   2fc78:	4045      	eors	r5, r0
   2fc7a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2fc7c:	7820      	ldrb	r0, [r4, #0]
   2fc7e:	f7ff f84a 	bl	2ed16 <_double_byte>
   2fc82:	7863      	ldrb	r3, [r4, #1]
   2fc84:	7825      	ldrb	r5, [r4, #0]
   2fc86:	405d      	eors	r5, r3
   2fc88:	78a3      	ldrb	r3, [r4, #2]
   2fc8a:	405d      	eors	r5, r3
   2fc8c:	4045      	eors	r5, r0
   2fc8e:	78e0      	ldrb	r0, [r4, #3]
   2fc90:	f7ff f841 	bl	2ed16 <_double_byte>
   2fc94:	b2ed      	uxtb	r5, r5
   2fc96:	4068      	eors	r0, r5
   2fc98:	70f0      	strb	r0, [r6, #3]
}
   2fc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fc9c <tc_sha256_update>:
{
   2fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fca0:	460d      	mov	r5, r1
	if (s == (TCSha256State_t) 0 ||
   2fca2:	4604      	mov	r4, r0
   2fca4:	b110      	cbz	r0, 2fcac <tc_sha256_update+0x10>
   2fca6:	b319      	cbz	r1, 2fcf0 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
   2fca8:	b912      	cbnz	r2, 2fcb0 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
   2fcaa:	2001      	movs	r0, #1
}
   2fcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
   2fcb0:	f04f 0800 	mov.w	r8, #0
   2fcb4:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
   2fcb6:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   2fcba:	42ae      	cmp	r6, r5
   2fcbc:	d0f5      	beq.n	2fcaa <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
   2fcbe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2fcc0:	1c5a      	adds	r2, r3, #1
   2fcc2:	66a2      	str	r2, [r4, #104]	; 0x68
   2fcc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   2fcc8:	4423      	add	r3, r4
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2fcca:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2fccc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2fcd0:	d9f3      	bls.n	2fcba <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
   2fcd2:	4639      	mov	r1, r7
   2fcd4:	4620      	mov	r0, r4
   2fcd6:	f7e8 fdeb 	bl	188b0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2fcda:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   2fcde:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2fce2:	f142 0200 	adc.w	r2, r2, #0
			s->leftover_offset = 0;
   2fce6:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2fcea:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2fcee:	e7e4      	b.n	2fcba <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
   2fcf0:	4608      	mov	r0, r1
   2fcf2:	e7db      	b.n	2fcac <tc_sha256_update+0x10>

0002fcf4 <tc_sha256_final>:
{
   2fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fcf6:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2fcf8:	4605      	mov	r5, r0
   2fcfa:	2800      	cmp	r0, #0
   2fcfc:	d054      	beq.n	2fda8 <tc_sha256_final+0xb4>
   2fcfe:	2900      	cmp	r1, #0
   2fd00:	d053      	beq.n	2fdaa <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2fd02:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   2fd06:	6e89      	ldr	r1, [r1, #104]	; 0x68
   2fd08:	00c8      	lsls	r0, r1, #3
   2fd0a:	1816      	adds	r6, r2, r0
   2fd0c:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2fd10:	2380      	movs	r3, #128	; 0x80
   2fd12:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2fd14:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2fd16:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
   2fd18:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2fd1c:	66a0      	str	r0, [r4, #104]	; 0x68
   2fd1e:	f104 0628 	add.w	r6, r4, #40	; 0x28
   2fd22:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2fd26:	d90b      	bls.n	2fd40 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   2fd28:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2fd2c:	2100      	movs	r1, #0
   2fd2e:	4430      	add	r0, r6
   2fd30:	f7fe ffef 	bl	2ed12 <_set>
		compress(s->iv, s->leftover);
   2fd34:	4631      	mov	r1, r6
   2fd36:	4620      	mov	r0, r4
   2fd38:	f7e8 fdba 	bl	188b0 <compress>
		s->leftover_offset = 0;
   2fd3c:	2300      	movs	r3, #0
   2fd3e:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2fd40:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2fd42:	2100      	movs	r1, #0
   2fd44:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2fd48:	4430      	add	r0, r6
   2fd4a:	f7fe ffe2 	bl	2ed12 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2fd4e:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2fd50:	4631      	mov	r1, r6
   2fd52:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2fd54:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2fd56:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2fd58:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2fd5a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2fd5e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2fd62:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2fd64:	0e1b      	lsrs	r3, r3, #24
   2fd66:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2fd6a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2fd6c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2fd70:	f7e8 fd9e 	bl	188b0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2fd74:	1d2b      	adds	r3, r5, #4
   2fd76:	1f21      	subs	r1, r4, #4
   2fd78:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2fd7c:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
   2fd80:	3304      	adds	r3, #4
   2fd82:	0e15      	lsrs	r5, r2, #24
   2fd84:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2fd88:	0c15      	lsrs	r5, r2, #16
   2fd8a:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2fd8e:	0a15      	lsrs	r5, r2, #8
   2fd90:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2fd94:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2fd98:	4283      	cmp	r3, r0
   2fd9a:	d1ef      	bne.n	2fd7c <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2fd9c:	4620      	mov	r0, r4
   2fd9e:	2270      	movs	r2, #112	; 0x70
   2fda0:	2100      	movs	r1, #0
   2fda2:	f7fe ffb6 	bl	2ed12 <_set>
	return TC_CRYPTO_SUCCESS;
   2fda6:	2001      	movs	r0, #1
}
   2fda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2fdaa:	4608      	mov	r0, r1
   2fdac:	e7fc      	b.n	2fda8 <tc_sha256_final+0xb4>

0002fdae <tc_ctr_prng_update.part.1>:
 *  @return none
 *  @note Assumes: providedData is (TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE) bytes long
 *  @param ctx IN/OUT -- CTR PRNG state
 *  @param providedData IN -- data used when updating the internal state
 */
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   2fdae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fdb2:	4604      	mov	r4, r0
   2fdb4:	460e      	mov	r6, r1
{
	if (0 != ctx) {
		/* 10.2.1.2 step 1 */
		uint8_t temp[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
		unsigned int len = 0U;
   2fdb6:	2500      	movs	r5, #0
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   2fdb8:	b08c      	sub	sp, #48	; 0x30
   2fdba:	f100 0810 	add.w	r8, r0, #16

		/* 10.2.1.2 step 2 */
		while (len < sizeof temp) {
			unsigned int blocklen = sizeof(temp) - len;
   2fdbe:	f1c5 0720 	rsb	r7, r5, #32
	if (0 != arr) {
   2fdc2:	b144      	cbz	r4, 2fdd6 <tc_ctr_prng_update.part.1+0x28>
   2fdc4:	4642      	mov	r2, r8
			if (++arr[i-1] != 0U) {
   2fdc6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   2fdca:	3301      	adds	r3, #1
   2fdcc:	b2db      	uxtb	r3, r3
   2fdce:	7013      	strb	r3, [r2, #0]
   2fdd0:	b90b      	cbnz	r3, 2fdd6 <tc_ctr_prng_update.part.1+0x28>
		for (i = len; i > 0U; i--) {
   2fdd2:	42a2      	cmp	r2, r4
   2fdd4:	d1f7      	bne.n	2fdc6 <tc_ctr_prng_update.part.1+0x18>

			/* 10.2.1.2 step 2.1 */
			arrInc(ctx->V, sizeof ctx->V);

			/* 10.2.1.2 step 2.2 */
			if (blocklen > TC_AES_BLOCK_SIZE) {
   2fdd6:	2f10      	cmp	r7, #16
   2fdd8:	bf28      	it	cs
   2fdda:	2710      	movcs	r7, #16
				blocklen = TC_AES_BLOCK_SIZE;
			}
			(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   2fddc:	4642      	mov	r2, r8
   2fdde:	4621      	mov	r1, r4
   2fde0:	4668      	mov	r0, sp
   2fde2:	f7e8 fcfb 	bl	187dc <tc_aes_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fde6:	ab04      	add	r3, sp, #16
   2fde8:	1958      	adds	r0, r3, r5
   2fdea:	463a      	mov	r2, r7
   2fdec:	4669      	mov	r1, sp

			/* 10.2.1.2 step 2.3/step 3 */
			memcpy(&(temp[len]), output_block, blocklen);

			len += blocklen;
   2fdee:	443d      	add	r5, r7
   2fdf0:	f003 fce6 	bl	337c0 <memcpy>
		while (len < sizeof temp) {
   2fdf4:	2d1f      	cmp	r5, #31
   2fdf6:	d9e2      	bls.n	2fdbe <tc_ctr_prng_update.part.1+0x10>
   2fdf8:	1e73      	subs	r3, r6, #1
   2fdfa:	aa04      	add	r2, sp, #16
   2fdfc:	361f      	adds	r6, #31

		/* 10.2.1.2 step 4 */
		if (0 != providedData) {
			unsigned int i;
			for (i = 0U; i < sizeof temp; i++) {
				temp[i] ^= providedData[i];
   2fdfe:	7811      	ldrb	r1, [r2, #0]
   2fe00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2fe04:	4041      	eors	r1, r0
			for (i = 0U; i < sizeof temp; i++) {
   2fe06:	42b3      	cmp	r3, r6
				temp[i] ^= providedData[i];
   2fe08:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0U; i < sizeof temp; i++) {
   2fe0c:	d1f7      	bne.n	2fdfe <tc_ctr_prng_update.part.1+0x50>
			}
		}

		/* 10.2.1.2 step 5 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, temp);
   2fe0e:	a904      	add	r1, sp, #16
   2fe10:	4640      	mov	r0, r8
   2fe12:	f7e8 fc8d 	bl	18730 <tc_aes128_set_encrypt_key>
   2fe16:	ad0c      	add	r5, sp, #48	; 0x30
   2fe18:	aa08      	add	r2, sp, #32
   2fe1a:	4613      	mov	r3, r2
   2fe1c:	cb03      	ldmia	r3!, {r0, r1}
   2fe1e:	42ab      	cmp	r3, r5
   2fe20:	6020      	str	r0, [r4, #0]
   2fe22:	6061      	str	r1, [r4, #4]
   2fe24:	461a      	mov	r2, r3
   2fe26:	f104 0408 	add.w	r4, r4, #8
   2fe2a:	d1f6      	bne.n	2fe1a <tc_ctr_prng_update.part.1+0x6c>
    
		/* 10.2.1.2 step 6 */
		memcpy(ctx->V, &(temp[TC_AES_KEY_SIZE]), TC_AES_BLOCK_SIZE);
	}
}
   2fe2c:	b00c      	add	sp, #48	; 0x30
   2fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fe32 <tc_ctr_prng_init>:
int tc_ctr_prng_init(TCCtrPrng_t * const ctx, 
		     uint8_t const * const entropy,
		     unsigned int entropyLen, 
		     uint8_t const * const personalization,
		     unsigned int pLen)
{
   2fe32:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fe34:	461e      	mov	r6, r3
   2fe36:	b095      	sub	sp, #84	; 0x54
   2fe38:	4605      	mov	r5, r0
   2fe3a:	460c      	mov	r4, r1
   2fe3c:	4617      	mov	r7, r2
	int result = TC_CRYPTO_FAIL;	
	unsigned int i;
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   2fe3e:	2100      	movs	r1, #0
   2fe40:	2220      	movs	r2, #32
   2fe42:	a804      	add	r0, sp, #16
   2fe44:	f003 fcf6 	bl	33834 <memset>
	uint8_t seed_material[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
	uint8_t zeroArr[TC_AES_BLOCK_SIZE] = {0U};
   2fe48:	2210      	movs	r2, #16
   2fe4a:	2100      	movs	r1, #0
   2fe4c:	4668      	mov	r0, sp
   2fe4e:	f003 fcf1 	bl	33834 <memset>
  
	if (0 != personalization) {
   2fe52:	b146      	cbz	r6, 2fe66 <tc_ctr_prng_init+0x34>
		if (len > sizeof personalization_buf) {
			len = sizeof personalization_buf;
		}

		/* 10.2.1.3.1 step 2 */
		memcpy(personalization_buf, personalization, len);
   2fe54:	2320      	movs	r3, #32
   2fe56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2fe58:	4631      	mov	r1, r6
   2fe5a:	429a      	cmp	r2, r3
   2fe5c:	bf28      	it	cs
   2fe5e:	461a      	movcs	r2, r3
   2fe60:	a804      	add	r0, sp, #16
   2fe62:	f003 fcba 	bl	337da <__memcpy_chk>
	}

	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   2fe66:	b385      	cbz	r5, 2feca <tc_ctr_prng_init+0x98>
   2fe68:	b37c      	cbz	r4, 2feca <tc_ctr_prng_init+0x98>
   2fe6a:	2f1f      	cmp	r7, #31
   2fe6c:	d92d      	bls.n	2feca <tc_ctr_prng_init+0x98>
		/* 10.2.1.3.1 step 3 */
		memcpy(seed_material, entropy, sizeof seed_material);
   2fe6e:	aa0c      	add	r2, sp, #48	; 0x30
   2fe70:	4623      	mov	r3, r4
   2fe72:	4616      	mov	r6, r2
   2fe74:	f104 0720 	add.w	r7, r4, #32
   2fe78:	4614      	mov	r4, r2
   2fe7a:	6818      	ldr	r0, [r3, #0]
   2fe7c:	6859      	ldr	r1, [r3, #4]
   2fe7e:	3308      	adds	r3, #8
   2fe80:	c403      	stmia	r4!, {r0, r1}
   2fe82:	42bb      	cmp	r3, r7
   2fe84:	4622      	mov	r2, r4
   2fe86:	d1f7      	bne.n	2fe78 <tc_ctr_prng_init+0x46>
		for (i = 0U; i < sizeof seed_material; i++) {
   2fe88:	4632      	mov	r2, r6
		memcpy(seed_material, entropy, sizeof seed_material);
   2fe8a:	2420      	movs	r4, #32
   2fe8c:	ab04      	add	r3, sp, #16
			seed_material[i] ^= personalization_buf[i];
   2fe8e:	7811      	ldrb	r1, [r2, #0]
   2fe90:	f813 0b01 	ldrb.w	r0, [r3], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   2fe94:	3c01      	subs	r4, #1
			seed_material[i] ^= personalization_buf[i];
   2fe96:	ea81 0100 	eor.w	r1, r1, r0
   2fe9a:	f802 1b01 	strb.w	r1, [r2], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   2fe9e:	d1f6      	bne.n	2fe8e <tc_ctr_prng_init+0x5c>
		}

		/* 10.2.1.3.1 step 4 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, zeroArr);
   2fea0:	4669      	mov	r1, sp
   2fea2:	f105 0010 	add.w	r0, r5, #16
   2fea6:	f7e8 fc43 	bl	18730 <tc_aes128_set_encrypt_key>
__ssp_bos_icheck3(memset, void *, int)
   2feaa:	2210      	movs	r2, #16
   2feac:	4621      	mov	r1, r4
   2feae:	4628      	mov	r0, r5
   2feb0:	f003 fcc0 	bl	33834 <memset>
	if (0 != ctx) {
   2feb4:	4628      	mov	r0, r5
   2feb6:	4631      	mov	r1, r6
   2feb8:	f7ff ff79 	bl	2fdae <tc_ctr_prng_update.part.1>
    
		/* 10.2.1.3.1 step 6 */    
		tc_ctr_prng_update(ctx, seed_material);

		/* 10.2.1.3.1 step 7 */
		ctx->reseedCount = 1U;
   2febc:	2201      	movs	r2, #1
   2febe:	2300      	movs	r3, #0

		result = TC_CRYPTO_SUCCESS;
   2fec0:	2001      	movs	r0, #1
		ctx->reseedCount = 1U;
   2fec2:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
	}
	return result;
}
   2fec6:	b015      	add	sp, #84	; 0x54
   2fec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int result = TC_CRYPTO_FAIL;	
   2feca:	2000      	movs	r0, #0
	return result;
   2fecc:	e7fb      	b.n	2fec6 <tc_ctr_prng_init+0x94>

0002fece <tc_ctr_prng_generate>:
int tc_ctr_prng_generate(TCCtrPrng_t * const ctx,
			uint8_t const * const additional_input,
			unsigned int additionallen,
			uint8_t * const out,
			unsigned int outlen)
{
   2fece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fed2:	b08c      	sub	sp, #48	; 0x30
   2fed4:	460e      	mov	r6, r1
   2fed6:	4690      	mov	r8, r2
   2fed8:	461d      	mov	r5, r3
   2feda:	9f12      	ldr	r7, [sp, #72]	; 0x48
	/* 2^19 bits - see section 10.2.1 */ 
	static const unsigned int MAX_BYTES_PER_REQ = 65536U; 

	unsigned int result = TC_CRYPTO_FAIL;

	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   2fedc:	4604      	mov	r4, r0
   2fede:	2800      	cmp	r0, #0
   2fee0:	d04d      	beq.n	2ff7e <tc_ctr_prng_generate+0xb0>
   2fee2:	2b00      	cmp	r3, #0
   2fee4:	d04b      	beq.n	2ff7e <tc_ctr_prng_generate+0xb0>
   2fee6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2feea:	d248      	bcs.n	2ff7e <tc_ctr_prng_generate+0xb0>
		/* 10.2.1.5.1 step 1 */
		if (ctx->reseedCount > MAX_REQS_BEFORE_RESEED) {
   2feec:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
   2fef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2fef4:	bf08      	it	eq
   2fef6:	2a01      	cmpeq	r2, #1
   2fef8:	d243      	bcs.n	2ff82 <tc_ctr_prng_generate+0xb4>
			result = TC_CTR_PRNG_RESEED_REQ;
		} else {
			uint8_t additional_input_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   2fefa:	2220      	movs	r2, #32
   2fefc:	2100      	movs	r1, #0
   2fefe:	a804      	add	r0, sp, #16
   2ff00:	f003 fc98 	bl	33834 <memset>
			if (0 != additional_input) {
   2ff04:	b166      	cbz	r6, 2ff20 <tc_ctr_prng_generate+0x52>
				/* 10.2.1.5.1 step 2  */
				unsigned int len = additionallen;
				if (len > sizeof additional_input_buf) {
					len = sizeof additional_input_buf;
				}
				memcpy(additional_input_buf, additional_input, len);
   2ff06:	2320      	movs	r3, #32
   2ff08:	4598      	cmp	r8, r3
   2ff0a:	4642      	mov	r2, r8
   2ff0c:	4631      	mov	r1, r6
   2ff0e:	bf28      	it	cs
   2ff10:	461a      	movcs	r2, r3
   2ff12:	a804      	add	r0, sp, #16
   2ff14:	f003 fc61 	bl	337da <__memcpy_chk>
	if (0 != ctx) {
   2ff18:	a904      	add	r1, sp, #16
   2ff1a:	4620      	mov	r0, r4
   2ff1c:	f7ff ff47 	bl	2fdae <tc_ctr_prng_update.part.1>
{
   2ff20:	2600      	movs	r6, #0
   2ff22:	e01b      	b.n	2ff5c <tc_ctr_prng_generate+0x8e>
			/* 10.2.1.5.1 step 3 - implicit */

			/* 10.2.1.5.1 step 4 */
			unsigned int len = 0U;      
			while (len < outlen) {
				unsigned int blocklen = outlen - len;
   2ff24:	f104 0110 	add.w	r1, r4, #16
   2ff28:	460a      	mov	r2, r1
   2ff2a:	eba7 0806 	sub.w	r8, r7, r6
			if (++arr[i-1] != 0U) {
   2ff2e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   2ff32:	3301      	adds	r3, #1
   2ff34:	b2db      	uxtb	r3, r3
   2ff36:	700b      	strb	r3, [r1, #0]
   2ff38:	b90b      	cbnz	r3, 2ff3e <tc_ctr_prng_generate+0x70>
		for (i = len; i > 0U; i--) {
   2ff3a:	42a1      	cmp	r1, r4
   2ff3c:	d1f7      	bne.n	2ff2e <tc_ctr_prng_generate+0x60>

				/* 10.2.1.5.1 step 4.1 */
				arrInc(ctx->V, sizeof ctx->V);

				/* 10.2.1.5.1 step 4.2 */
				(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   2ff3e:	4621      	mov	r1, r4
   2ff40:	4668      	mov	r0, sp
   2ff42:	f7e8 fc4b 	bl	187dc <tc_aes_encrypt>
      
				/* 10.2.1.5.1 step 4.3/step 5 */
				if (blocklen > TC_AES_BLOCK_SIZE) {
   2ff46:	f1b8 0f10 	cmp.w	r8, #16
   2ff4a:	bf28      	it	cs
   2ff4c:	f04f 0810 	movcs.w	r8, #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ff50:	19a8      	adds	r0, r5, r6
   2ff52:	4642      	mov	r2, r8
   2ff54:	4669      	mov	r1, sp
   2ff56:	f003 fc33 	bl	337c0 <memcpy>
					blocklen = TC_AES_BLOCK_SIZE;
				}
				memcpy(&(out[len]), output_block, blocklen);

				len += blocklen;
   2ff5a:	4446      	add	r6, r8
			while (len < outlen) {
   2ff5c:	42be      	cmp	r6, r7
   2ff5e:	d3e1      	bcc.n	2ff24 <tc_ctr_prng_generate+0x56>
	if (0 != ctx) {
   2ff60:	4620      	mov	r0, r4
   2ff62:	a904      	add	r1, sp, #16
   2ff64:	f7ff ff23 	bl	2fdae <tc_ctr_prng_update.part.1>
      
			/* 10.2.1.5.1 step 6 */
			tc_ctr_prng_update(ctx, additional_input_buf);

			/* 10.2.1.5.1 step 7 */
			ctx->reseedCount++;
   2ff68:	e9d4 3230 	ldrd	r3, r2, [r4, #192]	; 0xc0

			/* 10.2.1.5.1 step 8 */
			result = TC_CRYPTO_SUCCESS;
   2ff6c:	2001      	movs	r0, #1
			ctx->reseedCount++;
   2ff6e:	3301      	adds	r3, #1
   2ff70:	f142 0200 	adc.w	r2, r2, #0
   2ff74:	e9c4 3230 	strd	r3, r2, [r4, #192]	; 0xc0
		}
	}

	return result;
}
   2ff78:	b00c      	add	sp, #48	; 0x30
   2ff7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	unsigned int result = TC_CRYPTO_FAIL;
   2ff7e:	2000      	movs	r0, #0
   2ff80:	e7fa      	b.n	2ff78 <tc_ctr_prng_generate+0xaa>
			result = TC_CTR_PRNG_RESEED_REQ;
   2ff82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ff86:	e7f7      	b.n	2ff78 <tc_ctr_prng_generate+0xaa>

0002ff88 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2ff88:	2100      	movs	r1, #0
   2ff8a:	2001      	movs	r0, #1
   2ff8c:	f000 b804 	b.w	2ff98 <z_arm_fatal_error>

0002ff90 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2ff90:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2ff92:	f383 880b 	msr	PSPLIM, r3
}
   2ff96:	4770      	bx	lr

0002ff98 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2ff98:	f7f7 b8ca 	b.w	27130 <z_fatal_error>

0002ff9c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2ff9c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2ff9e:	6800      	ldr	r0, [r0, #0]
   2ffa0:	f7f7 b8c6 	b.w	27130 <z_fatal_error>

0002ffa4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2ffa4:	b508      	push	{r3, lr}
	handler();
   2ffa6:	f7e8 feb5 	bl	18d14 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2ffaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2ffae:	f7e9 b82f 	b.w	19010 <z_arm_exc_exit>

0002ffb2 <mpu_configure_region>:
{
   2ffb2:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   2ffb4:	680b      	ldr	r3, [r1, #0]
{
   2ffb6:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2ffb8:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   2ffba:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2ffbe:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ffc0:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   2ffc2:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   2ffc4:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ffc6:	f023 031f 	bic.w	r3, r3, #31
   2ffca:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2ffcc:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   2ffd0:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ffd4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2ffd8:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   2ffda:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ffde:	9303      	str	r3, [sp, #12]
   2ffe0:	4604      	mov	r4, r0
   2ffe2:	d805      	bhi.n	2fff0 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   2ffe4:	4669      	mov	r1, sp
   2ffe6:	f7e9 f8a7 	bl	19138 <region_init>
}
   2ffea:	4620      	mov	r0, r4
   2ffec:	b005      	add	sp, #20
   2ffee:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2fff0:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   2fff4:	e7f9      	b.n	2ffea <mpu_configure_region+0x38>

0002fff6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2fff6:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2fffa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2fffe:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   30000:	bf08      	it	eq
   30002:	f06f 0015 	mvneq.w	r0, #21
   30006:	4770      	bx	lr

00030008 <_stdout_hook_default>:
}
   30008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3000c:	4770      	bx	lr

0003000e <_write>:
{
   3000e:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   30010:	4611      	mov	r1, r2
   30012:	f7e9 ba41 	b.w	19498 <z_impl_zephyr_write_stdout>

00030016 <_kill>:
}
   30016:	2000      	movs	r0, #0
   30018:	4770      	bx	lr

0003001a <_getpid>:
}
   3001a:	2000      	movs	r0, #0
   3001c:	4770      	bx	lr

0003001e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3001e:	f7f7 b881 	b.w	27124 <z_impl_z_errno>

00030022 <fixed_data_unref>:
}
   30022:	4770      	bx	lr

00030024 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   30024:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   30026:	460a      	mov	r2, r1
   30028:	685b      	ldr	r3, [r3, #4]
   3002a:	6819      	ldr	r1, [r3, #0]
   3002c:	f7e9 bac6 	b.w	195bc <net_buf_alloc_len>

00030030 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   30030:	8883      	ldrh	r3, [r0, #4]
   30032:	88c2      	ldrh	r2, [r0, #6]
   30034:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   30036:	6803      	ldr	r3, [r0, #0]
   30038:	6880      	ldr	r0, [r0, #8]
   3003a:	1a18      	subs	r0, r3, r0
}
   3003c:	1a10      	subs	r0, r2, r0
   3003e:	4770      	bx	lr

00030040 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   30040:	6903      	ldr	r3, [r0, #16]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   30042:	b510      	push	{r4, lr}
   30044:	4604      	mov	r4, r0
	if (!pkt->frags) {
   30046:	b923      	cbnz	r3, 30052 <processing_data+0x12>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   30048:	4620      	mov	r0, r4
		break;
	}
}
   3004a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   3004e:	f000 bbdc 	b.w	3080a <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   30052:	b169      	cbz	r1, 30070 <processing_data+0x30>
	net_pkt_cursor_init(pkt);
   30054:	4620      	mov	r0, r4
   30056:	f000 fc3c 	bl	308d2 <net_pkt_cursor_init>
	return pkt->frags->data;
   3005a:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   3005c:	689b      	ldr	r3, [r3, #8]
   3005e:	781b      	ldrb	r3, [r3, #0]
   30060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   30064:	2b40      	cmp	r3, #64	; 0x40
   30066:	d1ef      	bne.n	30048 <processing_data+0x8>
		return net_ipv4_input(pkt);
   30068:	4620      	mov	r0, r4
   3006a:	f000 ffd9 	bl	31020 <net_ipv4_input>
   3006e:	e005      	b.n	3007c <processing_data+0x3c>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   30070:	4601      	mov	r1, r0
   30072:	6a00      	ldr	r0, [r0, #32]
   30074:	f000 f908 	bl	30288 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   30078:	2801      	cmp	r0, #1
   3007a:	d0eb      	beq.n	30054 <processing_data+0x14>
	switch (process_data(pkt, is_loopback)) {
   3007c:	2800      	cmp	r0, #0
   3007e:	d1e3      	bne.n	30048 <processing_data+0x8>
}
   30080:	bd10      	pop	{r4, pc}

00030082 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   30082:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   30084:	f000 fe28 	bl	30cd8 <net_pkt_init>

	net_context_init();
   30088:	f7ea fcf4 	bl	1aa74 <net_context_init>
	net_icmpv4_init();
   3008c:	f7ea fe64 	bl	1ad58 <net_icmpv4_init>
		net_conn_init();
   30090:	f7eb f858 	bl	1b144 <net_conn_init>
	net_tcp_init();
   30094:	f001 fa73 	bl	3157e <net_tcp_init>
	net_if_init();
   30098:	f7e9 fe94 	bl	19dc4 <net_if_init>
	net_tc_rx_init();
   3009c:	f7ea fdf8 	bl	1ac90 <net_tc_rx_init>
	net_if_post_init();
   300a0:	f7e9 febe 	bl	19e20 <net_if_post_init>
	dns_init_resolver();
   300a4:	f002 fbac 	bl	32800 <dns_init_resolver>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   300a8:	2000      	movs	r0, #0
   300aa:	bd08      	pop	{r3, pc}

000300ac <net_send_data>:
{
   300ac:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
   300ae:	4604      	mov	r4, r0
   300b0:	2800      	cmp	r0, #0
   300b2:	d065      	beq.n	30180 <net_send_data+0xd4>
   300b4:	6903      	ldr	r3, [r0, #16]
   300b6:	2b00      	cmp	r3, #0
   300b8:	d062      	beq.n	30180 <net_send_data+0xd4>
	if (!net_pkt_iface(pkt)) {
   300ba:	6a03      	ldr	r3, [r0, #32]
   300bc:	2b00      	cmp	r3, #0
   300be:	d062      	beq.n	30186 <net_send_data+0xda>
	net_pkt_trim_buffer(pkt);
   300c0:	f000 fbed 	bl	3089e <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   300c4:	4620      	mov	r0, r4
   300c6:	f000 fc04 	bl	308d2 <net_pkt_cursor_init>
	return pkt->family;
   300ca:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (net_pkt_family(pkt) == AF_INET) {
   300ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
   300d2:	2b01      	cmp	r3, #1
   300d4:	d14a      	bne.n	3016c <net_send_data+0xc0>
	return pkt->frags->data;
   300d6:	6923      	ldr	r3, [r4, #16]
   300d8:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp(&NET_IPV4_HDR(pkt)->dst,
   300da:	f7e9 feb5 	bl	19e48 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   300de:	692a      	ldr	r2, [r5, #16]
   300e0:	6803      	ldr	r3, [r0, #0]
   300e2:	429a      	cmp	r2, r3
   300e4:	d102      	bne.n	300ec <net_send_data+0x40>
			return -EADDRNOTAVAIL;
   300e6:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   300ea:	bd70      	pop	{r4, r5, r6, pc}
   300ec:	6923      	ldr	r3, [r4, #16]
   300ee:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   300f0:	7c2b      	ldrb	r3, [r5, #16]
   300f2:	2b7f      	cmp	r3, #127	; 0x7f
   300f4:	d10f      	bne.n	30116 <net_send_data+0x6a>
   300f6:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&addr, &NET_IPV4_HDR(pkt)->src);
   300f8:	689b      	ldr	r3, [r3, #8]
   300fa:	68da      	ldr	r2, [r3, #12]
   300fc:	6923      	ldr	r3, [r4, #16]
   300fe:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->src,
   30100:	6919      	ldr	r1, [r3, #16]
   30102:	60d9      	str	r1, [r3, #12]
   30104:	6923      	ldr	r3, [r4, #16]
   30106:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->dst, &addr);
   30108:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
   3010a:	2101      	movs	r1, #1
   3010c:	4620      	mov	r0, r4
   3010e:	f7ff ff97 	bl	30040 <processing_data>
		return 0;
   30112:	2000      	movs	r0, #0
   30114:	e7e9      	b.n	300ea <net_send_data+0x3e>
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   30116:	6a26      	ldr	r6, [r4, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   30118:	f7e9 fe9a 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   3011c:	692a      	ldr	r2, [r5, #16]
   3011e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   30120:	429a      	cmp	r2, r3
   30122:	d01e      	beq.n	30162 <net_send_data+0xb6>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   30124:	f105 0110 	add.w	r1, r5, #16
   30128:	4630      	mov	r0, r6
   3012a:	f7e9 fcc5 	bl	19ab8 <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   3012e:	4601      	mov	r1, r0
   30130:	b9b8      	cbnz	r0, 30162 <net_send_data+0xb6>
   30132:	6923      	ldr	r3, [r4, #16]
   30134:	689e      	ldr	r6, [r3, #8]
		     net_ipv4_is_my_addr(&NET_IPV4_HDR(pkt)->dst))) {
   30136:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   3013a:	4628      	mov	r0, r5
   3013c:	f7e9 fd3c 	bl	19bb8 <net_if_ipv4_addr_lookup>
   30140:	2800      	cmp	r0, #0
   30142:	bf14      	ite	ne
   30144:	2001      	movne	r0, #1
   30146:	2000      	moveq	r0, #0
	if (!ret) {
   30148:	d109      	bne.n	3015e <net_send_data+0xb2>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   3014a:	f7e9 fe81 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   3014e:	6932      	ldr	r2, [r6, #16]
   30150:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   30152:	429a      	cmp	r2, r3
   30154:	d0cf      	beq.n	300f6 <net_send_data+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   30156:	4629      	mov	r1, r5
   30158:	2000      	movs	r0, #0
   3015a:	f7e9 fcad 	bl	19ab8 <net_if_ipv4_is_addr_bcast>
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   3015e:	2800      	cmp	r0, #0
   30160:	d1c9      	bne.n	300f6 <net_send_data+0x4a>
   30162:	6923      	ldr	r3, [r4, #16]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->src)) {
   30164:	689b      	ldr	r3, [r3, #8]
   30166:	7b1b      	ldrb	r3, [r3, #12]
   30168:	2b7f      	cmp	r3, #127	; 0x7f
   3016a:	d0bc      	beq.n	300e6 <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   3016c:	4621      	mov	r1, r4
   3016e:	6a20      	ldr	r0, [r4, #32]
   30170:	f000 f893 	bl	3029a <net_if_send_data>
		return -EIO;
   30174:	2802      	cmp	r0, #2
   30176:	bf14      	ite	ne
   30178:	2000      	movne	r0, #0
   3017a:	f06f 0004 	mvneq.w	r0, #4
   3017e:	e7b4      	b.n	300ea <net_send_data+0x3e>
		return -ENODATA;
   30180:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   30184:	e7b1      	b.n	300ea <net_send_data+0x3e>
		return -EINVAL;
   30186:	f06f 0015 	mvn.w	r0, #21
   3018a:	e7ae      	b.n	300ea <net_send_data+0x3e>

0003018c <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   3018c:	6800      	ldr	r0, [r0, #0]
   3018e:	ba00      	rev	r0, r0
   30190:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   30194:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   30198:	4258      	negs	r0, r3
   3019a:	4158      	adcs	r0, r3
   3019c:	4770      	bx	lr

0003019e <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3019e:	b110      	cbz	r0, 301a6 <net_if_l2+0x8>
   301a0:	6800      	ldr	r0, [r0, #0]
   301a2:	b100      	cbz	r0, 301a6 <net_if_l2+0x8>
	return iface->if_dev->l2;
   301a4:	6840      	ldr	r0, [r0, #4]
}
   301a6:	4770      	bx	lr

000301a8 <net_context_send_cb>:
	if (!context) {
   301a8:	b118      	cbz	r0, 301b2 <net_context_send_cb+0xa>
	if (context->send_cb) {
   301aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   301ac:	b10b      	cbz	r3, 301b2 <net_context_send_cb+0xa>
		context->send_cb(context, status, context->user_data);
   301ae:	6802      	ldr	r2, [r0, #0]
   301b0:	4718      	bx	r3
}
   301b2:	4770      	bx	lr

000301b4 <l2_flags_get>:
{
   301b4:	b510      	push	{r4, lr}
   301b6:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   301b8:	f7ff fff1 	bl	3019e <net_if_l2>
   301bc:	b128      	cbz	r0, 301ca <l2_flags_get+0x16>
   301be:	68c3      	ldr	r3, [r0, #12]
   301c0:	b11b      	cbz	r3, 301ca <l2_flags_get+0x16>
}
   301c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   301c6:	4610      	mov	r0, r2
   301c8:	4718      	bx	r3
}
   301ca:	2000      	movs	r0, #0
   301cc:	bd10      	pop	{r4, pc}

000301ce <if_ipv4_get_addr>:
{
   301ce:	b538      	push	{r3, r4, r5, lr}
   301d0:	4615      	mov	r5, r2
	if (!iface) {
   301d2:	4604      	mov	r4, r0
   301d4:	b1c0      	cbz	r0, 30208 <if_ipv4_get_addr+0x3a>
	ipv4 = iface->config.ip.ipv4;
   301d6:	6844      	ldr	r4, [r0, #4]
	if (!ipv4) {
   301d8:	b1b4      	cbz	r4, 30208 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   301da:	7da3      	ldrb	r3, [r4, #22]
   301dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
   301e0:	b90b      	cbnz	r3, 301e6 <if_ipv4_get_addr+0x18>
	return NULL;
   301e2:	461c      	mov	r4, r3
   301e4:	e010      	b.n	30208 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   301e6:	1c4b      	adds	r3, r1, #1
   301e8:	d003      	beq.n	301f2 <if_ipv4_get_addr+0x24>
		    (addr_state != NET_ADDR_ANY_STATE &&
   301ea:	f994 3015 	ldrsb.w	r3, [r4, #21]
   301ee:	428b      	cmp	r3, r1
   301f0:	d110      	bne.n	30214 <if_ipv4_get_addr+0x46>
		     ipv4->unicast[i].addr_state != addr_state) ||
   301f2:	8823      	ldrh	r3, [r4, #0]
   301f4:	2b01      	cmp	r3, #1
   301f6:	d10d      	bne.n	30214 <if_ipv4_get_addr+0x46>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   301f8:	3404      	adds	r4, #4
   301fa:	4620      	mov	r0, r4
   301fc:	f7e9 fb42 	bl	19884 <net_ipv4_is_ll_addr>
   30200:	b120      	cbz	r0, 3020c <if_ipv4_get_addr+0x3e>
	return NULL;
   30202:	2d00      	cmp	r5, #0
   30204:	bf08      	it	eq
   30206:	2400      	moveq	r4, #0
}
   30208:	4620      	mov	r0, r4
   3020a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   3020c:	2d00      	cmp	r5, #0
   3020e:	bf18      	it	ne
   30210:	2400      	movne	r4, #0
   30212:	e7f9      	b.n	30208 <if_ipv4_get_addr+0x3a>
   30214:	2400      	movs	r4, #0
   30216:	e7f7      	b.n	30208 <if_ipv4_get_addr+0x3a>

00030218 <k_uptime_get_32>:
{
   30218:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3021a:	f003 fa03 	bl	33624 <z_impl_k_uptime_ticks>
   3021e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   30222:	fba0 2304 	umull	r2, r3, r0, r4
   30226:	fb04 3301 	mla	r3, r4, r1, r3
   3022a:	0bd0      	lsrs	r0, r2, #15
}
   3022c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   30230:	bd10      	pop	{r4, pc}

00030232 <net_if_ipv4_addr_mask_cmp>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   30232:	6843      	ldr	r3, [r0, #4]
	if (!ipv4) {
   30234:	b17b      	cbz	r3, 30256 <net_if_ipv4_addr_mask_cmp+0x24>
		if (!ipv4->unicast[i].is_used ||
   30236:	7d98      	ldrb	r0, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   30238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3023a:	6809      	ldr	r1, [r1, #0]
		if (!ipv4->unicast[i].is_used ||
   3023c:	f3c0 0040 	ubfx	r0, r0, #1, #1
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   30240:	4011      	ands	r1, r2
		if (!ipv4->unicast[i].is_used ||
   30242:	b148      	cbz	r0, 30258 <net_if_ipv4_addr_mask_cmp+0x26>
   30244:	8818      	ldrh	r0, [r3, #0]
   30246:	2801      	cmp	r0, #1
   30248:	d105      	bne.n	30256 <net_if_ipv4_addr_mask_cmp+0x24>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   3024a:	6858      	ldr	r0, [r3, #4]
   3024c:	4010      	ands	r0, r2
   3024e:	1a43      	subs	r3, r0, r1
   30250:	4258      	negs	r0, r3
   30252:	4158      	adcs	r0, r3
   30254:	4770      	bx	lr
		return false;
   30256:	2000      	movs	r0, #0
}
   30258:	4770      	bx	lr

0003025a <ipv4_is_broadcast_address>:
{
   3025a:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   3025c:	6844      	ldr	r4, [r0, #4]
{
   3025e:	460d      	mov	r5, r1
	if (!ipv4) {
   30260:	b154      	cbz	r4, 30278 <ipv4_is_broadcast_address+0x1e>
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   30262:	f7ff ffe6 	bl	30232 <net_if_ipv4_addr_mask_cmp>
   30266:	b130      	cbz	r0, 30276 <ipv4_is_broadcast_address+0x1c>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   30268:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3026a:	682a      	ldr	r2, [r5, #0]
   3026c:	43db      	mvns	r3, r3
   3026e:	4393      	bics	r3, r2
   30270:	bf0c      	ite	eq
   30272:	2001      	moveq	r0, #1
   30274:	2000      	movne	r0, #0
}
   30276:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   30278:	4620      	mov	r0, r4
   3027a:	e7fc      	b.n	30276 <ipv4_is_broadcast_address+0x1c>

0003027c <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
   3027c:	2201      	movs	r2, #1
   3027e:	f7ff bfa6 	b.w	301ce <if_ipv4_get_addr>

00030282 <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
   30282:	2200      	movs	r2, #0
   30284:	f7ff bfa3 	b.w	301ce <if_ipv4_get_addr>

00030288 <net_if_recv_data>:
{
   30288:	b510      	push	{r4, lr}
   3028a:	4602      	mov	r2, r0
	return net_if_l2(iface)->recv(iface, pkt);
   3028c:	f7ff ff87 	bl	3019e <net_if_l2>
}
   30290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   30294:	6803      	ldr	r3, [r0, #0]
   30296:	4610      	mov	r0, r2
   30298:	4718      	bx	r3

0003029a <net_if_send_data>:
{
   3029a:	b570      	push	{r4, r5, r6, lr}
   3029c:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   3029e:	69ce      	ldr	r6, [r1, #28]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   302a0:	2100      	movs	r1, #0
{
   302a2:	4605      	mov	r5, r0
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   302a4:	f7e9 fafa 	bl	1989c <net_if_flag_is_set>
   302a8:	b958      	cbnz	r0, 302c2 <net_if_send_data+0x28>
		if (context) {
   302aa:	bb26      	cbnz	r6, 302f6 <net_if_send_data+0x5c>
		if (dst->addr) {
   302ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   302ae:	b133      	cbz	r3, 302be <net_if_send_data+0x24>
			net_if_call_link_cb(iface, dst, status);
   302b0:	f06f 0272 	mvn.w	r2, #114	; 0x72
   302b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   302b8:	4628      	mov	r0, r5
   302ba:	f7e9 fcbf 	bl	19c3c <net_if_call_link_cb>
		verdict = NET_DROP;
   302be:	2002      	movs	r0, #2
   302c0:	e018      	b.n	302f4 <net_if_send_data+0x5a>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
   302c2:	2104      	movs	r1, #4
   302c4:	4628      	mov	r0, r5
   302c6:	f7e9 fae9 	bl	1989c <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   302ca:	2800      	cmp	r0, #0
   302cc:	d1ed      	bne.n	302aa <net_if_send_data+0x10>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   302ce:	2101      	movs	r1, #1
   302d0:	4628      	mov	r0, r5
   302d2:	f7e9 fae3 	bl	1989c <net_if_flag_is_set>
   302d6:	b940      	cbnz	r0, 302ea <net_if_send_data+0x50>
   302d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   302da:	b933      	cbnz	r3, 302ea <net_if_send_data+0x50>
	return net_if_get_link_addr(pkt->iface);
   302dc:	6a23      	ldr	r3, [r4, #32]
   302de:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   302e0:	691a      	ldr	r2, [r3, #16]
   302e2:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   302e4:	7d1b      	ldrb	r3, [r3, #20]
   302e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
   302ea:	4628      	mov	r0, r5
   302ec:	4621      	mov	r1, r4
   302ee:	f7e9 fbc7 	bl	19a80 <net_if_queue_tx>
   302f2:	2000      	movs	r0, #0
}
   302f4:	bd70      	pop	{r4, r5, r6, pc}
			net_context_send_cb(context, status);
   302f6:	f06f 0172 	mvn.w	r1, #114	; 0x72
   302fa:	4630      	mov	r0, r6
   302fc:	f7ff ff54 	bl	301a8 <net_context_send_cb>
   30300:	e7d4      	b.n	302ac <net_if_send_data+0x12>

00030302 <net_if_need_calc_tx_checksum>:
   30302:	2001      	movs	r0, #1
   30304:	4770      	bx	lr

00030306 <net_if_need_calc_rx_checksum>:
}
   30306:	2001      	movs	r0, #1
   30308:	4770      	bx	lr

0003030a <calc_chksum>:
{
   3030a:	b510      	push	{r4, lr}
	end = data + len - 1;
   3030c:	3a01      	subs	r2, #1
   3030e:	440a      	add	r2, r1
	while (data < end) {
   30310:	4291      	cmp	r1, r2
   30312:	d309      	bcc.n	30328 <calc_chksum+0x1e>
	if (data == end) {
   30314:	d107      	bne.n	30326 <calc_chksum+0x1c>
		tmp = data[0] << 8;
   30316:	780b      	ldrb	r3, [r1, #0]
   30318:	021b      	lsls	r3, r3, #8
		sum += tmp;
   3031a:	4418      	add	r0, r3
   3031c:	b280      	uxth	r0, r0
		if (sum < tmp) {
   3031e:	4283      	cmp	r3, r0
			sum++;
   30320:	bf84      	itt	hi
   30322:	3001      	addhi	r0, #1
   30324:	b280      	uxthhi	r0, r0
}
   30326:	bd10      	pop	{r4, pc}
		tmp = (data[0] << 8) + data[1];
   30328:	780c      	ldrb	r4, [r1, #0]
   3032a:	784b      	ldrb	r3, [r1, #1]
		data += 2;
   3032c:	3102      	adds	r1, #2
		tmp = (data[0] << 8) + data[1];
   3032e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   30332:	b29b      	uxth	r3, r3
		sum += tmp;
   30334:	4418      	add	r0, r3
   30336:	b280      	uxth	r0, r0
		if (sum < tmp) {
   30338:	4283      	cmp	r3, r0
			sum++;
   3033a:	bf84      	itt	hi
   3033c:	3001      	addhi	r0, #1
   3033e:	b280      	uxthhi	r0, r0
		data += 2;
   30340:	e7e6      	b.n	30310 <calc_chksum+0x6>

00030342 <net_calc_chksum>:
	return pkt->family;
   30342:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
{
   30346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   3034a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   3034e:	2b01      	cmp	r3, #1
{
   30350:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   30352:	d179      	bne.n	30448 <net_calc_chksum+0x106>
		if (proto != IPPROTO_ICMP) {
   30354:	2901      	cmp	r1, #1
   30356:	d050      	beq.n	303fa <net_calc_chksum+0xb8>
	size_t bytes = 0;
   30358:	2200      	movs	r2, #0
			sum = net_pkt_get_len(pkt) -
   3035a:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   3035c:	2b00      	cmp	r3, #0
   3035e:	d148      	bne.n	303f2 <net_calc_chksum+0xb0>
			len = 2 * sizeof(struct in_addr);
   30360:	f04f 0908 	mov.w	r9, #8
				net_pkt_ip_hdr_len(pkt) -
   30364:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
				net_pkt_ipv4_opts_len(pkt) + proto;
   30368:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
			sum = net_pkt_get_len(pkt) -
   3036c:	441d      	add	r5, r3
   3036e:	1b4d      	subs	r5, r1, r5
   30370:	4415      	add	r5, r2
   30372:	b2ad      	uxth	r5, r5
	net_pkt_cursor_init(pkt);
   30374:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
   30376:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
   3037a:	f000 faaa 	bl	308d2 <net_pkt_cursor_init>
	return pkt->overwrite;
   3037e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   30382:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   30386:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   3038a:	f043 0301 	orr.w	r3, r3, #1
   3038e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   30392:	eba1 0109 	sub.w	r1, r1, r9
   30396:	4620      	mov	r0, r4
   30398:	f000 fb25 	bl	309e6 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   3039c:	464a      	mov	r2, r9
   3039e:	69a1      	ldr	r1, [r4, #24]
   303a0:	4628      	mov	r0, r5
   303a2:	f7ff ffb2 	bl	3030a <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   303a6:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   303aa:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   303ac:	4449      	add	r1, r9
   303ae:	4620      	mov	r0, r4
   303b0:	f000 fb19 	bl	309e6 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   303b4:	6962      	ldr	r2, [r4, #20]
   303b6:	b162      	cbz	r2, 303d2 <net_calc_chksum+0x90>
   303b8:	69a3      	ldr	r3, [r4, #24]
   303ba:	b153      	cbz	r3, 303d2 <net_calc_chksum+0x90>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   303bc:	f8b2 900c 	ldrh.w	r9, [r2, #12]
   303c0:	6892      	ldr	r2, [r2, #8]
   303c2:	1a9b      	subs	r3, r3, r2
   303c4:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   303c8:	f8d4 a014 	ldr.w	sl, [r4, #20]
   303cc:	f1ba 0f00 	cmp.w	sl, #0
   303d0:	d116      	bne.n	30400 <net_calc_chksum+0xbe>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   303d2:	2d00      	cmp	r5, #0
   303d4:	d035      	beq.n	30442 <net_calc_chksum+0x100>
   303d6:	ba68      	rev16	r0, r5
   303d8:	b280      	uxth	r0, r0
	return ~sum;
   303da:	43c0      	mvns	r0, r0
   303dc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	pkt->cursor.pos = backup->pos;
   303e0:	e9c4 8705 	strd	r8, r7, [r4, #20]
	pkt->overwrite = overwrite;
   303e4:	f366 0300 	bfi	r3, r6, #0, #1
   303e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   303ec:	b280      	uxth	r0, r0
}
   303ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   303f2:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   303f4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   303f6:	4402      	add	r2, r0
		buf = buf->frags;
   303f8:	e7b0      	b.n	3035c <net_calc_chksum+0x1a>
	u16_t sum = 0U;
   303fa:	2500      	movs	r5, #0
	size_t len = 0U;
   303fc:	46a9      	mov	r9, r5
   303fe:	e7b9      	b.n	30374 <net_calc_chksum+0x32>
		sum = calc_chksum(sum, cur->pos, len);
   30400:	4628      	mov	r0, r5
   30402:	464a      	mov	r2, r9
   30404:	69a1      	ldr	r1, [r4, #24]
   30406:	f7ff ff80 	bl	3030a <calc_chksum>
		cur->buf = cur->buf->frags;
   3040a:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   3040e:	4605      	mov	r5, r0
		cur->buf = cur->buf->frags;
   30410:	6163      	str	r3, [r4, #20]
		if (!cur->buf || !cur->buf->len) {
   30412:	2b00      	cmp	r3, #0
   30414:	d0dd      	beq.n	303d2 <net_calc_chksum+0x90>
   30416:	899a      	ldrh	r2, [r3, #12]
   30418:	2a00      	cmp	r2, #0
   3041a:	d0da      	beq.n	303d2 <net_calc_chksum+0x90>
		cur->pos = cur->buf->data;
   3041c:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   3041e:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   30422:	61a3      	str	r3, [r4, #24]
		if (len % 2) {
   30424:	d00b      	beq.n	3043e <net_calc_chksum+0xfc>
			sum += *cur->pos;
   30426:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   30428:	3301      	adds	r3, #1
			sum += *cur->pos;
   3042a:	440d      	add	r5, r1
   3042c:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
   3042e:	42a9      	cmp	r1, r5
				sum++;
   30430:	bf84      	itt	hi
   30432:	3501      	addhi	r5, #1
   30434:	b2ad      	uxthhi	r5, r5
			cur->pos++;
   30436:	61a3      	str	r3, [r4, #24]
			len = cur->buf->len - 1;
   30438:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   3043c:	e7c4      	b.n	303c8 <net_calc_chksum+0x86>
			len = cur->buf->len;
   3043e:	4691      	mov	r9, r2
   30440:	e7c2      	b.n	303c8 <net_calc_chksum+0x86>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   30442:	f64f 70ff 	movw	r0, #65535	; 0xffff
   30446:	e7c8      	b.n	303da <net_calc_chksum+0x98>
		return 0;
   30448:	2000      	movs	r0, #0
   3044a:	e7d0      	b.n	303ee <net_calc_chksum+0xac>

0003044c <net_calc_chksum_ipv4>:
{
   3044c:	b508      	push	{r3, lr}
			  net_pkt_ipv4_opts_len(pkt));
   3044e:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
			  net_pkt_ip_hdr_len(pkt) +
   30452:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	sum = calc_chksum(0, pkt->buffer->data,
   30456:	6903      	ldr	r3, [r0, #16]
   30458:	440a      	add	r2, r1
   3045a:	2000      	movs	r0, #0
   3045c:	6899      	ldr	r1, [r3, #8]
   3045e:	f7ff ff54 	bl	3030a <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   30462:	b120      	cbz	r0, 3046e <net_calc_chksum_ipv4+0x22>
   30464:	ba40      	rev16	r0, r0
   30466:	b280      	uxth	r0, r0
	return ~sum;
   30468:	43c0      	mvns	r0, r0
}
   3046a:	b280      	uxth	r0, r0
   3046c:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
   3046e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   30472:	e7f9      	b.n	30468 <net_calc_chksum_ipv4+0x1c>

00030474 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   30474:	6800      	ldr	r0, [r0, #0]
   30476:	ba00      	rev	r0, r0
   30478:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   3047c:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   30480:	4258      	negs	r0, r3
   30482:	4158      	adcs	r0, r3
   30484:	4770      	bx	lr

00030486 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   30486:	f7f7 bd9f 	b.w	27fc8 <z_impl_k_mutex_unlock>

0003048a <context_write_data>:
{
   3048a:	b570      	push	{r4, r5, r6, lr}
   3048c:	4606      	mov	r6, r0
	if (msghdr) {
   3048e:	461d      	mov	r5, r3
   30490:	b99b      	cbnz	r3, 304ba <context_write_data+0x30>
}
   30492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
   30496:	f000 bbdf 	b.w	30c58 <net_pkt_write>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   3049a:	68ab      	ldr	r3, [r5, #8]
   3049c:	4630      	mov	r0, r6
   3049e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   304a2:	6852      	ldr	r2, [r2, #4]
   304a4:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   304a8:	f000 fbd6 	bl	30c58 <net_pkt_write>
			if (ret < 0) {
   304ac:	2800      	cmp	r0, #0
   304ae:	db03      	blt.n	304b8 <context_write_data+0x2e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   304b0:	3401      	adds	r4, #1
   304b2:	68eb      	ldr	r3, [r5, #12]
   304b4:	42a3      	cmp	r3, r4
   304b6:	d8f0      	bhi.n	3049a <context_write_data+0x10>
}
   304b8:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   304ba:	2400      	movs	r4, #0
	int ret = 0;
   304bc:	4620      	mov	r0, r4
   304be:	e7f8      	b.n	304b2 <context_write_data+0x28>

000304c0 <k_mutex_lock.constprop.28>:
	return z_impl_k_mutex_lock(mutex, timeout);
   304c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   304c4:	f7f7 bca2 	b.w	27e0c <z_impl_k_mutex_lock>

000304c8 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   304c8:	1d03      	adds	r3, r0, #4
   304ca:	e8d3 0fef 	ldaex	r0, [r3]
   304ce:	1c42      	adds	r2, r0, #1
   304d0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   304d4:	2900      	cmp	r1, #0
   304d6:	d1f8      	bne.n	304ca <net_context_ref+0x2>
}
   304d8:	3001      	adds	r0, #1
   304da:	4770      	bx	lr

000304dc <net_context_unref>:
{
   304dc:	b538      	push	{r3, r4, r5, lr}
   304de:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   304e0:	1d03      	adds	r3, r0, #4
   304e2:	e8d3 0fef 	ldaex	r0, [r3]
   304e6:	1e42      	subs	r2, r0, #1
   304e8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   304ec:	2900      	cmp	r1, #0
   304ee:	d1f8      	bne.n	304e2 <net_context_unref+0x6>
	if (old_rc != 1) {
   304f0:	2801      	cmp	r0, #1
   304f2:	d001      	beq.n	304f8 <net_context_unref+0x1c>
		return old_rc - 1;
   304f4:	3801      	subs	r0, #1
}
   304f6:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   304f8:	f104 0508 	add.w	r5, r4, #8
   304fc:	4628      	mov	r0, r5
   304fe:	f7ff ffdf 	bl	304c0 <k_mutex_lock.constprop.28>
	net_tcp_unref(context);
   30502:	4620      	mov	r0, r4
   30504:	f7eb fdf0 	bl	1c0e8 <net_tcp_unref>
	if (context->conn_handler) {
   30508:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   3050a:	b118      	cbz	r0, 30514 <net_context_unref+0x38>
			net_conn_unregister(context->conn_handler);
   3050c:	f7ea fcfc 	bl	1af08 <net_conn_unregister>
		context->conn_handler = NULL;
   30510:	2300      	movs	r3, #0
   30512:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   30514:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   30518:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   3051a:	f023 0307 	bic.w	r3, r3, #7
   3051e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   30522:	f7ff ffb0 	bl	30486 <k_mutex_unlock>
   30526:	2000      	movs	r0, #0
   30528:	e7e5      	b.n	304f6 <net_context_unref+0x1a>

0003052a <bind_default>:
{
   3052a:	b513      	push	{r0, r1, r4, lr}
   3052c:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(context);
   3052e:	f7e9 fcf9 	bl	19f24 <net_context_get_family>
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   30532:	2801      	cmp	r0, #1
   30534:	d113      	bne.n	3055e <bind_default+0x34>
		if (net_sin_ptr(&context->local)->sin_addr) {
   30536:	6a23      	ldr	r3, [r4, #32]
   30538:	b97b      	cbnz	r3, 3055a <bind_default+0x30>
		addr4.sin_family = AF_INET;
   3053a:	f8ad 0000 	strh.w	r0, [sp]
			find_available_port(context,
   3053e:	4669      	mov	r1, sp
   30540:	4620      	mov	r0, r4
		addr4.sin_addr.s_addr = INADDR_ANY;
   30542:	9301      	str	r3, [sp, #4]
			find_available_port(context,
   30544:	f7e9 fd2e 	bl	19fa4 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
   30548:	2208      	movs	r2, #8
		addr4.sin_port =
   3054a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
   3054e:	4669      	mov	r1, sp
   30550:	4620      	mov	r0, r4
   30552:	f7e9 febf 	bl	1a2d4 <net_context_bind>
}
   30556:	b002      	add	sp, #8
   30558:	bd10      	pop	{r4, pc}
			return 0;
   3055a:	2000      	movs	r0, #0
   3055c:	e7fb      	b.n	30556 <bind_default+0x2c>
	return -EINVAL;
   3055e:	f06f 0015 	mvn.w	r0, #21
   30562:	e7f8      	b.n	30556 <bind_default+0x2c>

00030564 <net_context_send>:
{
   30564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30568:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   3056a:	f100 0508 	add.w	r5, r0, #8
   3056e:	4628      	mov	r0, r5
{
   30570:	4698      	mov	r8, r3
   30572:	460e      	mov	r6, r1
   30574:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   30576:	f7ff ffa3 	bl	304c0 <k_mutex_lock.constprop.28>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   3057a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   3057e:	05db      	lsls	r3, r3, #23
   30580:	d51d      	bpl.n	305be <net_context_send+0x5a>
   30582:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   30584:	b1db      	cbz	r3, 305be <net_context_send+0x5a>
		   net_context_get_family(context) == AF_INET) {
   30586:	4620      	mov	r0, r4
   30588:	f7e9 fccc 	bl	19f24 <net_context_get_family>
	ret = context_sendto(context, buf, len, &context->remote,
   3058c:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   3058e:	2801      	cmp	r0, #1
		addrlen = 0;
   30590:	bf0c      	ite	eq
   30592:	2308      	moveq	r3, #8
   30594:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
   30596:	9203      	str	r2, [sp, #12]
   30598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3059a:	9300      	str	r3, [sp, #0]
   3059c:	e9cd 8201 	strd	r8, r2, [sp, #4]
   305a0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   305a4:	4620      	mov	r0, r4
   305a6:	463a      	mov	r2, r7
   305a8:	4631      	mov	r1, r6
   305aa:	f7e9 ff95 	bl	1a4d8 <context_sendto.isra.21>
   305ae:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   305b0:	4628      	mov	r0, r5
   305b2:	f7ff ff68 	bl	30486 <k_mutex_unlock>
}
   305b6:	4620      	mov	r0, r4
   305b8:	b004      	add	sp, #16
   305ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
   305be:	f06f 0478 	mvn.w	r4, #120	; 0x78
   305c2:	e7f5      	b.n	305b0 <net_context_send+0x4c>

000305c4 <net_context_sendmsg>:
{
   305c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   305c6:	f100 0408 	add.w	r4, r0, #8
{
   305ca:	b085      	sub	sp, #20
   305cc:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   305ce:	4620      	mov	r0, r4
{
   305d0:	461f      	mov	r7, r3
   305d2:	460e      	mov	r6, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   305d4:	f7ff ff74 	bl	304c0 <k_mutex_lock.constprop.28>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   305d8:	2301      	movs	r3, #1
   305da:	9303      	str	r3, [sp, #12]
   305dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   305de:	4631      	mov	r1, r6
   305e0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   305e4:	2300      	movs	r3, #0
   305e6:	4628      	mov	r0, r5
   305e8:	9300      	str	r3, [sp, #0]
   305ea:	461a      	mov	r2, r3
   305ec:	f7e9 ff74 	bl	1a4d8 <context_sendto.isra.21>
   305f0:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   305f2:	4620      	mov	r0, r4
   305f4:	f7ff ff47 	bl	30486 <k_mutex_unlock>
}
   305f8:	4628      	mov	r0, r5
   305fa:	b005      	add	sp, #20
   305fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000305fe <net_context_sendto>:
{
   305fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   30602:	f100 0408 	add.w	r4, r0, #8
{
   30606:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   30608:	4620      	mov	r0, r4
{
   3060a:	4698      	mov	r8, r3
   3060c:	460e      	mov	r6, r1
   3060e:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   30610:	f7ff ff56 	bl	304c0 <k_mutex_lock.constprop.28>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   30614:	2301      	movs	r3, #1
   30616:	9303      	str	r3, [sp, #12]
   30618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3061a:	463a      	mov	r2, r7
   3061c:	9302      	str	r3, [sp, #8]
   3061e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30620:	4631      	mov	r1, r6
   30622:	9301      	str	r3, [sp, #4]
   30624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30626:	4628      	mov	r0, r5
   30628:	9300      	str	r3, [sp, #0]
   3062a:	4643      	mov	r3, r8
   3062c:	f7e9 ff54 	bl	1a4d8 <context_sendto.isra.21>
   30630:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   30632:	4620      	mov	r0, r4
   30634:	f7ff ff27 	bl	30486 <k_mutex_unlock>
}
   30638:	4628      	mov	r0, r5
   3063a:	b004      	add	sp, #16
   3063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030640 <net_context_update_recv_wnd>:

int net_context_update_recv_wnd(struct net_context *context,
				s32_t delta)
{
   30640:	b570      	push	{r4, r5, r6, lr}
   30642:	4605      	mov	r5, r0
   30644:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
		return 0;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   30646:	f100 0408 	add.w	r4, r0, #8
   3064a:	4620      	mov	r0, r4
   3064c:	f7ff ff38 	bl	304c0 <k_mutex_lock.constprop.28>

	ret = net_tcp_update_recv_wnd(context, delta);
   30650:	4631      	mov	r1, r6
   30652:	4628      	mov	r0, r5
   30654:	f001 fa54 	bl	31b00 <net_tcp_update_recv_wnd>
   30658:	4605      	mov	r5, r0

	k_mutex_unlock(&context->lock);
   3065a:	4620      	mov	r0, r4
   3065c:	f7ff ff13 	bl	30486 <k_mutex_unlock>

	return ret;
}
   30660:	4628      	mov	r0, r5
   30662:	bd70      	pop	{r4, r5, r6, pc}

00030664 <net_buf_frags_len>:
{
   30664:	4603      	mov	r3, r0
	size_t bytes = 0;
   30666:	2000      	movs	r0, #0
	while (buf) {
   30668:	b903      	cbnz	r3, 3066c <net_buf_frags_len+0x8>
	}

	return bytes;
}
   3066a:	4770      	bx	lr
		bytes += buf->len;
   3066c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   3066e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   30670:	4410      	add	r0, r2
		buf = buf->frags;
   30672:	e7f9      	b.n	30668 <net_buf_frags_len+0x4>

00030674 <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   30674:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   30676:	681b      	ldr	r3, [r3, #0]
   30678:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   3067a:	6943      	ldr	r3, [r0, #20]
   3067c:	b90b      	cbnz	r3, 30682 <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   3067e:	6183      	str	r3, [r0, #24]
	}
}
   30680:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   30682:	b121      	cbz	r1, 3068e <pkt_cursor_jump+0x1a>
   30684:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   30686:	2a00      	cmp	r2, #0
   30688:	d0f5      	beq.n	30676 <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   3068a:	689b      	ldr	r3, [r3, #8]
   3068c:	e7f7      	b.n	3067e <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   3068e:	899a      	ldrh	r2, [r3, #12]
   30690:	e7f9      	b.n	30686 <pkt_cursor_jump+0x12>

00030692 <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   30692:	6943      	ldr	r3, [r0, #20]
{
   30694:	b410      	push	{r4}
	if (!cursor->buf) {
   30696:	b163      	cbz	r3, 306b2 <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   30698:	b149      	cbz	r1, 306ae <pkt_cursor_advance+0x1c>
   3069a:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   3069c:	6982      	ldr	r2, [r0, #24]
   3069e:	689b      	ldr	r3, [r3, #8]
   306a0:	1ad2      	subs	r2, r2, r3
   306a2:	42a2      	cmp	r2, r4
   306a4:	d105      	bne.n	306b2 <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   306a6:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   306aa:	f7ff bfe3 	b.w	30674 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   306ae:	899c      	ldrh	r4, [r3, #12]
   306b0:	e7f4      	b.n	3069c <pkt_cursor_advance+0xa>
}
   306b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   306b6:	4770      	bx	lr

000306b8 <pkt_cursor_update>:
	return pkt->overwrite;
   306b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   306bc:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   306be:	f013 0601 	ands.w	r6, r3, #1
   306c2:	6945      	ldr	r5, [r0, #20]
   306c4:	d10f      	bne.n	306e6 <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   306c6:	b172      	cbz	r2, 306e6 <pkt_cursor_update+0x2e>
   306c8:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   306ca:	6984      	ldr	r4, [r0, #24]
   306cc:	68ab      	ldr	r3, [r5, #8]
   306ce:	1ae3      	subs	r3, r4, r3
   306d0:	440b      	add	r3, r1
   306d2:	42bb      	cmp	r3, r7
   306d4:	d10a      	bne.n	306ec <pkt_cursor_update+0x34>
   306d6:	b116      	cbz	r6, 306de <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   306d8:	89eb      	ldrh	r3, [r5, #14]
   306da:	42bb      	cmp	r3, r7
   306dc:	d806      	bhi.n	306ec <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   306de:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   306e0:	4611      	mov	r1, r2
   306e2:	f7ff bfc7 	b.w	30674 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   306e6:	89af      	ldrh	r7, [r5, #12]
   306e8:	2200      	movs	r2, #0
   306ea:	e7ee      	b.n	306ca <pkt_cursor_update+0x12>
		cursor->pos += length;
   306ec:	440c      	add	r4, r1
   306ee:	6184      	str	r4, [r0, #24]
}
   306f0:	bcf0      	pop	{r4, r5, r6, r7}
   306f2:	4770      	bx	lr

000306f4 <pkt_estimate_headers_length.isra.19.part.20>:
		hdr_len += NET_IPV4H_LEN;
   306f4:	2801      	cmp	r0, #1
   306f6:	bf14      	ite	ne
   306f8:	2000      	movne	r0, #0
   306fa:	2014      	moveq	r0, #20
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   306fc:	2906      	cmp	r1, #6
   306fe:	d101      	bne.n	30704 <pkt_estimate_headers_length.isra.19.part.20+0x10>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
   30700:	301c      	adds	r0, #28
   30702:	4770      	bx	lr
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   30704:	2911      	cmp	r1, #17
   30706:	d101      	bne.n	3070c <pkt_estimate_headers_length.isra.19.part.20+0x18>
		hdr_len += NET_UDPH_LEN;
   30708:	3008      	adds	r0, #8
   3070a:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   3070c:	2901      	cmp	r1, #1
   3070e:	d001      	beq.n	30714 <pkt_estimate_headers_length.isra.19.part.20+0x20>
   30710:	293a      	cmp	r1, #58	; 0x3a
   30712:	d100      	bne.n	30716 <pkt_estimate_headers_length.isra.19.part.20+0x22>
		hdr_len += NET_ICMPH_LEN;
   30714:	3004      	adds	r0, #4
}
   30716:	4770      	bx	lr

00030718 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   30718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3071c:	4606      	mov	r6, r0
   3071e:	460f      	mov	r7, r1
   30720:	4615      	mov	r5, r2
   30722:	4699      	mov	r9, r3
   30724:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   30728:	6973      	ldr	r3, [r6, #20]
   3072a:	2b00      	cmp	r3, #0
   3072c:	d051      	beq.n	307d2 <net_pkt_cursor_operate+0xba>
   3072e:	b90d      	cbnz	r5, 30734 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   30730:	4628      	mov	r0, r5
   30732:	e00d      	b.n	30750 <net_pkt_cursor_operate+0x38>
   30734:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   30738:	4630      	mov	r0, r6
   3073a:	f013 0f01 	tst.w	r3, #1
   3073e:	bf0c      	ite	eq
   30740:	4641      	moveq	r1, r8
   30742:	2100      	movne	r1, #0
   30744:	f7ff ffa5 	bl	30692 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   30748:	6973      	ldr	r3, [r6, #20]
   3074a:	b91b      	cbnz	r3, 30754 <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   3074c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   30750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   30754:	69b0      	ldr	r0, [r6, #24]
   30756:	689c      	ldr	r4, [r3, #8]
   30758:	1b04      	subs	r4, r0, r4
   3075a:	f1b8 0f00 	cmp.w	r8, #0
   3075e:	d02d      	beq.n	307bc <net_pkt_cursor_operate+0xa4>
   30760:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   30764:	07d2      	lsls	r2, r2, #31
   30766:	d429      	bmi.n	307bc <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   30768:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   3076a:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   3076c:	2c00      	cmp	r4, #0
   3076e:	d0ed      	beq.n	3074c <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   30770:	42ac      	cmp	r4, r5
   30772:	bf28      	it	cs
   30774:	462c      	movcs	r4, r5
		if (copy) {
   30776:	f1b9 0f00 	cmp.w	r9, #0
   3077a:	d023      	beq.n	307c4 <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   3077c:	f1b8 0f00 	cmp.w	r8, #0
   30780:	d11e      	bne.n	307c0 <net_pkt_cursor_operate+0xa8>
   30782:	4601      	mov	r1, r0
   30784:	4638      	mov	r0, r7
   30786:	4622      	mov	r2, r4
   30788:	f003 f81a 	bl	337c0 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   3078c:	f1b8 0f00 	cmp.w	r8, #0
   30790:	d008      	beq.n	307a4 <net_pkt_cursor_operate+0x8c>
   30792:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
   30796:	07db      	lsls	r3, r3, #31
   30798:	d404      	bmi.n	307a4 <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   3079a:	6970      	ldr	r0, [r6, #20]
   3079c:	4621      	mov	r1, r4
   3079e:	3008      	adds	r0, #8
   307a0:	f7e9 f84e 	bl	19840 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   307a4:	4642      	mov	r2, r8
   307a6:	4621      	mov	r1, r4
   307a8:	4630      	mov	r0, r6
   307aa:	f7ff ff85 	bl	306b8 <pkt_cursor_update>
		if (copy && data) {
   307ae:	f1b9 0f00 	cmp.w	r9, #0
   307b2:	d001      	beq.n	307b8 <net_pkt_cursor_operate+0xa0>
   307b4:	b107      	cbz	r7, 307b8 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   307b6:	4427      	add	r7, r4
		length -= len;
   307b8:	1b2d      	subs	r5, r5, r4
   307ba:	e7b5      	b.n	30728 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   307bc:	899b      	ldrh	r3, [r3, #12]
   307be:	e7d4      	b.n	3076a <net_pkt_cursor_operate+0x52>
   307c0:	4639      	mov	r1, r7
   307c2:	e7e0      	b.n	30786 <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   307c4:	2f00      	cmp	r7, #0
   307c6:	d0e1      	beq.n	3078c <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
   307c8:	4622      	mov	r2, r4
   307ca:	6839      	ldr	r1, [r7, #0]
   307cc:	f003 f832 	bl	33834 <memset>
   307d0:	e7dc      	b.n	3078c <net_pkt_cursor_operate+0x74>
	if (length) {
   307d2:	2d00      	cmp	r5, #0
   307d4:	d0ac      	beq.n	30730 <net_pkt_cursor_operate+0x18>
   307d6:	e7b9      	b.n	3074c <net_pkt_cursor_operate+0x34>

000307d8 <net_pkt_ref>:
{
   307d8:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   307da:	f100 0324 	add.w	r3, r0, #36	; 0x24
   307de:	b170      	cbz	r0, 307fe <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   307e0:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   307e4:	b15a      	cbz	r2, 307fe <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   307e6:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   307e8:	e8d3 4fef 	ldaex	r4, [r3]
   307ec:	4294      	cmp	r4, r2
   307ee:	d104      	bne.n	307fa <net_pkt_ref+0x22>
   307f0:	e8c3 1fec 	stlex	ip, r1, [r3]
   307f4:	f1bc 0f00 	cmp.w	ip, #0
   307f8:	d1f6      	bne.n	307e8 <net_pkt_ref+0x10>
   307fa:	d1f0      	bne.n	307de <net_pkt_ref+0x6>
}
   307fc:	bd10      	pop	{r4, pc}
			return NULL;
   307fe:	2000      	movs	r0, #0
   30800:	e7fc      	b.n	307fc <net_pkt_ref+0x24>

00030802 <net_pkt_frag_unref>:
	if (!frag) {
   30802:	b108      	cbz	r0, 30808 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   30804:	f7e8 bf8c 	b.w	19720 <net_buf_unref>
}
   30808:	4770      	bx	lr

0003080a <net_pkt_unref>:
{
   3080a:	b507      	push	{r0, r1, r2, lr}
   3080c:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   3080e:	b1e8      	cbz	r0, 3084c <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30810:	9b01      	ldr	r3, [sp, #4]
   30812:	3324      	adds	r3, #36	; 0x24
   30814:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   30818:	b1c3      	cbz	r3, 3084c <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3081a:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   3081c:	1e59      	subs	r1, r3, #1
   3081e:	3224      	adds	r2, #36	; 0x24
   30820:	e8d2 0fef 	ldaex	r0, [r2]
   30824:	4298      	cmp	r0, r3
   30826:	d104      	bne.n	30832 <net_pkt_unref+0x28>
   30828:	e8c2 1fec 	stlex	ip, r1, [r2]
   3082c:	f1bc 0f00 	cmp.w	ip, #0
   30830:	d1f6      	bne.n	30820 <net_pkt_unref+0x16>
   30832:	d1ed      	bne.n	30810 <net_pkt_unref+0x6>
	if (ref > 1) {
   30834:	2b01      	cmp	r3, #1
   30836:	dc09      	bgt.n	3084c <net_pkt_unref+0x42>
	if (pkt->frags) {
   30838:	9b01      	ldr	r3, [sp, #4]
   3083a:	6918      	ldr	r0, [r3, #16]
   3083c:	b108      	cbz	r0, 30842 <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   3083e:	f7ff ffe0 	bl	30802 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   30842:	9b01      	ldr	r3, [sp, #4]
   30844:	a901      	add	r1, sp, #4
   30846:	68d8      	ldr	r0, [r3, #12]
   30848:	f7f7 f8e8 	bl	27a1c <k_mem_slab_free>
}
   3084c:	b003      	add	sp, #12
   3084e:	f85d fb04 	ldr.w	pc, [sp], #4

00030852 <net_pkt_available_buffer>:
{
   30852:	b508      	push	{r3, lr}
	if (!pkt) {
   30854:	b130      	cbz	r0, 30864 <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   30856:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   30858:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   3085a:	4603      	mov	r3, r0
	while (buf) {
   3085c:	b91b      	cbnz	r3, 30866 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   3085e:	f7ff ff01 	bl	30664 <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   30862:	1a08      	subs	r0, r1, r0
}
   30864:	bd08      	pop	{r3, pc}
		size += buf->size;
   30866:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   30868:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   3086a:	4411      	add	r1, r2
		buf = buf->frags;
   3086c:	e7f6      	b.n	3085c <net_pkt_available_buffer+0xa>

0003086e <net_pkt_available_payload_buffer>:
{
   3086e:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   30870:	4605      	mov	r5, r0
   30872:	b198      	cbz	r0, 3089c <net_pkt_available_payload_buffer+0x2e>
	return pkt->family;
   30874:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   30878:	f3c3 0042 	ubfx	r0, r3, #1, #3
	if (family == AF_UNSPEC) {
   3087c:	b108      	cbz	r0, 30882 <net_pkt_available_payload_buffer+0x14>
   3087e:	f7ff ff39 	bl	306f4 <pkt_estimate_headers_length.isra.19.part.20>
		return  0;
   30882:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   30884:	6928      	ldr	r0, [r5, #16]
   30886:	f7ff feed 	bl	30664 <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   3088a:	42a0      	cmp	r0, r4
   3088c:	bf38      	it	cc
   3088e:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   30890:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   30892:	bf28      	it	cs
   30894:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   30896:	f7ff ffdc 	bl	30852 <net_pkt_available_buffer>
   3089a:	1b00      	subs	r0, r0, r4
}
   3089c:	bd38      	pop	{r3, r4, r5, pc}

0003089e <net_pkt_trim_buffer>:
{
   3089e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   308a0:	4605      	mov	r5, r0
	buf = pkt->buffer;
   308a2:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   308a4:	2700      	movs	r7, #0
	prev = buf;
   308a6:	4604      	mov	r4, r0
	while (buf) {
   308a8:	b900      	cbnz	r0, 308ac <net_pkt_trim_buffer+0xe>
}
   308aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   308ac:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   308ae:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   308b0:	b93b      	cbnz	r3, 308c2 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   308b2:	692b      	ldr	r3, [r5, #16]
   308b4:	4283      	cmp	r3, r0
   308b6:	d107      	bne.n	308c8 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   308b8:	612e      	str	r6, [r5, #16]
			buf->frags = NULL;
   308ba:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   308bc:	f7e8 ff30 	bl	19720 <net_buf_unref>
   308c0:	4620      	mov	r0, r4
   308c2:	4604      	mov	r4, r0
   308c4:	4630      	mov	r0, r6
   308c6:	e7ef      	b.n	308a8 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   308c8:	6823      	ldr	r3, [r4, #0]
   308ca:	4283      	cmp	r3, r0
				prev->frags = next;
   308cc:	bf08      	it	eq
   308ce:	6026      	streq	r6, [r4, #0]
   308d0:	e7f3      	b.n	308ba <net_pkt_trim_buffer+0x1c>

000308d2 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   308d2:	6903      	ldr	r3, [r0, #16]
   308d4:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   308d6:	b103      	cbz	r3, 308da <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   308d8:	689b      	ldr	r3, [r3, #8]
   308da:	6183      	str	r3, [r0, #24]
}
   308dc:	4770      	bx	lr

000308de <pkt_alloc>:
{
   308de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   308e0:	460d      	mov	r5, r1
   308e2:	4604      	mov	r4, r0
	if (k_is_in_isr()) {
   308e4:	f002 fe23 	bl	3352e <k_is_in_isr>
   308e8:	2800      	cmp	r0, #0
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   308ea:	a901      	add	r1, sp, #4
   308ec:	bf0c      	ite	eq
   308ee:	462a      	moveq	r2, r5
   308f0:	2200      	movne	r2, #0
   308f2:	4620      	mov	r0, r4
   308f4:	f7f7 f82e 	bl	27954 <k_mem_slab_alloc>
	if (ret) {
   308f8:	4601      	mov	r1, r0
   308fa:	b960      	cbnz	r0, 30916 <pkt_alloc+0x38>
   308fc:	2244      	movs	r2, #68	; 0x44
   308fe:	9801      	ldr	r0, [sp, #4]
   30900:	f002 ff98 	bl	33834 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   30904:	2301      	movs	r3, #1
   30906:	9801      	ldr	r0, [sp, #4]
   30908:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->slab = slab;
   3090a:	60c4      	str	r4, [r0, #12]
	net_pkt_cursor_init(pkt);
   3090c:	f7ff ffe1 	bl	308d2 <net_pkt_cursor_init>
	return pkt;
   30910:	9801      	ldr	r0, [sp, #4]
}
   30912:	b003      	add	sp, #12
   30914:	bd30      	pop	{r4, r5, pc}
		return NULL;
   30916:	2000      	movs	r0, #0
   30918:	e7fb      	b.n	30912 <pkt_alloc+0x34>

0003091a <pkt_alloc_on_iface>:
{
   3091a:	b510      	push	{r4, lr}
   3091c:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   3091e:	4611      	mov	r1, r2
   30920:	f7ff ffdd 	bl	308de <pkt_alloc>
	if (pkt) {
   30924:	b148      	cbz	r0, 3093a <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
   30926:	6204      	str	r4, [r0, #32]
	if (iface) {
   30928:	b13c      	cbz	r4, 3093a <pkt_alloc_on_iface+0x20>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   3092a:	6823      	ldr	r3, [r4, #0]
   3092c:	7d5b      	ldrb	r3, [r3, #21]
   3092e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   30932:	6823      	ldr	r3, [r4, #0]
   30934:	7d5b      	ldrb	r3, [r3, #21]
   30936:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   3093a:	bd10      	pop	{r4, pc}

0003093c <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   3093c:	6903      	ldr	r3, [r0, #16]
{
   3093e:	b510      	push	{r4, lr}
   30940:	4602      	mov	r2, r0
   30942:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   30944:	b923      	cbnz	r3, 30950 <net_pkt_append_buffer+0x14>
}
   30946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   3094a:	6111      	str	r1, [r2, #16]
		net_pkt_cursor_init(pkt);
   3094c:	f7ff bfc1 	b.w	308d2 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   30950:	4618      	mov	r0, r3
   30952:	f7e8 ff2b 	bl	197ac <net_buf_frag_last>
   30956:	4621      	mov	r1, r4
}
   30958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   3095c:	f7e8 bf42 	b.w	197e4 <net_buf_frag_insert>

00030960 <pkt_alloc_with_buffer>:
{
   30960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30964:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   30966:	4682      	mov	sl, r0
	u64_t end = z_timeout_end_calc(timeout);
   30968:	4620      	mov	r0, r4
{
   3096a:	468b      	mov	fp, r1
   3096c:	4690      	mov	r8, r2
   3096e:	9301      	str	r3, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   30970:	f002 fe5a 	bl	33628 <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   30974:	4622      	mov	r2, r4
	u64_t end = z_timeout_end_calc(timeout);
   30976:	4605      	mov	r5, r0
   30978:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   3097a:	4650      	mov	r0, sl
   3097c:	4659      	mov	r1, fp
   3097e:	f7ff ffcc 	bl	3091a <pkt_alloc_on_iface>
	if (!pkt) {
   30982:	4682      	mov	sl, r0
   30984:	b358      	cbz	r0, 309de <pkt_alloc_with_buffer+0x7e>
	pkt->family = family;
   30986:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   3098a:	9b01      	ldr	r3, [sp, #4]
   3098c:	f363 0243 	bfi	r2, r3, #1, #3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   30990:	1c63      	adds	r3, r4, #1
   30992:	2b01      	cmp	r3, #1
   30994:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
   30998:	d914      	bls.n	309c4 <pkt_alloc_with_buffer+0x64>
		s64_t remaining = end - z_tick_get();
   3099a:	f7f9 fdaf 	bl	2a4fc <z_tick_get>
   3099e:	1a2e      	subs	r6, r5, r0
   309a0:	eb69 0701 	sbc.w	r7, r9, r1
		if (remaining <= 0) {
   309a4:	2e01      	cmp	r6, #1
   309a6:	f177 0300 	sbcs.w	r3, r7, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   309aa:	bfa3      	ittte	ge
   309ac:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   309b0:	2300      	movge	r3, #0
   309b2:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   309b6:	2400      	movlt	r4, #0
   309b8:	bfa2      	ittt	ge
   309ba:	fbe1 2306 	umlalge	r2, r3, r1, r6
   309be:	0bd4      	lsrge	r4, r2, #15
   309c0:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   309c4:	4623      	mov	r3, r4
   309c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   309ca:	4641      	mov	r1, r8
   309cc:	4650      	mov	r0, sl
   309ce:	f7ea f859 	bl	1aa84 <net_pkt_alloc_buffer>
	if (ret) {
   309d2:	b120      	cbz	r0, 309de <pkt_alloc_with_buffer+0x7e>
		net_pkt_unref(pkt);
   309d4:	4650      	mov	r0, sl
   309d6:	f7ff ff18 	bl	3080a <net_pkt_unref>
		return NULL;
   309da:	f04f 0a00 	mov.w	sl, #0
}
   309de:	4650      	mov	r0, sl
   309e0:	b003      	add	sp, #12
   309e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000309e6 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   309e6:	2301      	movs	r3, #1
{
   309e8:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   309ea:	9300      	str	r3, [sp, #0]
   309ec:	2300      	movs	r3, #0
   309ee:	460a      	mov	r2, r1
   309f0:	4619      	mov	r1, r3
   309f2:	f7ff fe91 	bl	30718 <net_pkt_cursor_operate>
}
   309f6:	b003      	add	sp, #12
   309f8:	f85d fb04 	ldr.w	pc, [sp], #4

000309fc <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   309fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   309fe:	2301      	movs	r3, #1
{
   30a00:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   30a02:	9300      	str	r3, [sp, #0]
   30a04:	a903      	add	r1, sp, #12
   30a06:	2300      	movs	r3, #0
   30a08:	f7ff fe86 	bl	30718 <net_pkt_cursor_operate>
}
   30a0c:	b005      	add	sp, #20
   30a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00030a12 <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   30a12:	2300      	movs	r3, #0
{
   30a14:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   30a16:	9300      	str	r3, [sp, #0]
   30a18:	2301      	movs	r3, #1
   30a1a:	f7ff fe7d 	bl	30718 <net_pkt_cursor_operate>
}
   30a1e:	b003      	add	sp, #12
   30a20:	f85d fb04 	ldr.w	pc, [sp], #4

00030a24 <net_pkt_read_be16>:

int net_pkt_read_be16(struct net_pkt *pkt, u16_t *data)
{
   30a24:	b513      	push	{r0, r1, r4, lr}
	u8_t d16[2];
	int ret;

	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   30a26:	2202      	movs	r2, #2
{
   30a28:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   30a2a:	a901      	add	r1, sp, #4
   30a2c:	f7ff fff1 	bl	30a12 <net_pkt_read>

	*data = d16[0] << 8 | d16[1];
   30a30:	f89d 2004 	ldrb.w	r2, [sp, #4]
   30a34:	f89d 3005 	ldrb.w	r3, [sp, #5]
   30a38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   30a3c:	8023      	strh	r3, [r4, #0]

	return ret;
}
   30a3e:	b002      	add	sp, #8
   30a40:	bd10      	pop	{r4, pc}

00030a42 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   30a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30a44:	4606      	mov	r6, r0
   30a46:	460f      	mov	r7, r1
   30a48:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   30a4a:	6973      	ldr	r3, [r6, #20]
   30a4c:	2b00      	cmp	r3, #0
   30a4e:	d041      	beq.n	30ad4 <net_pkt_copy+0x92>
   30a50:	697b      	ldr	r3, [r7, #20]
   30a52:	2b00      	cmp	r3, #0
   30a54:	d03e      	beq.n	30ad4 <net_pkt_copy+0x92>
   30a56:	b90c      	cbnz	r4, 30a5c <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   30a58:	4620      	mov	r0, r4
   30a5a:	e021      	b.n	30aa0 <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   30a5c:	2101      	movs	r1, #1
   30a5e:	4630      	mov	r0, r6
   30a60:	f7ff fe17 	bl	30692 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   30a64:	2100      	movs	r1, #0
   30a66:	4638      	mov	r0, r7
   30a68:	f7ff fe13 	bl	30692 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   30a6c:	6972      	ldr	r2, [r6, #20]
   30a6e:	b1aa      	cbz	r2, 30a9c <net_pkt_copy+0x5a>
   30a70:	697b      	ldr	r3, [r7, #20]
   30a72:	b19b      	cbz	r3, 30a9c <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   30a74:	899d      	ldrh	r5, [r3, #12]
   30a76:	69b9      	ldr	r1, [r7, #24]
   30a78:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   30a7a:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   30a7c:	1acb      	subs	r3, r1, r3
   30a7e:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   30a80:	89d3      	ldrh	r3, [r2, #14]
   30a82:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   30a84:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   30a86:	eba0 0202 	sub.w	r2, r0, r2
   30a8a:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   30a8e:	d201      	bcs.n	30a94 <net_pkt_copy+0x52>
   30a90:	429c      	cmp	r4, r3
   30a92:	d306      	bcc.n	30aa2 <net_pkt_copy+0x60>
			if (d_len < s_len) {
   30a94:	429d      	cmp	r5, r3
   30a96:	bf28      	it	cs
   30a98:	461d      	movcs	r5, r3
		if (!len) {
   30a9a:	b91d      	cbnz	r5, 30aa4 <net_pkt_copy+0x62>
		return -ENOBUFS;
   30a9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   30aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30aa2:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30aa4:	462a      	mov	r2, r5
   30aa6:	f002 fe8b 	bl	337c0 <memcpy>
	return pkt->overwrite;
   30aaa:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   30aae:	07db      	lsls	r3, r3, #31
   30ab0:	d404      	bmi.n	30abc <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   30ab2:	6970      	ldr	r0, [r6, #20]
   30ab4:	4629      	mov	r1, r5
   30ab6:	3008      	adds	r0, #8
   30ab8:	f7e8 fec2 	bl	19840 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   30abc:	2201      	movs	r2, #1
   30abe:	4629      	mov	r1, r5
   30ac0:	4630      	mov	r0, r6
   30ac2:	f7ff fdf9 	bl	306b8 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   30ac6:	2200      	movs	r2, #0
   30ac8:	4629      	mov	r1, r5
   30aca:	4638      	mov	r0, r7
   30acc:	f7ff fdf4 	bl	306b8 <pkt_cursor_update>
		length -= len;
   30ad0:	1b64      	subs	r4, r4, r5
   30ad2:	e7ba      	b.n	30a4a <net_pkt_copy+0x8>
	if (length) {
   30ad4:	2c00      	cmp	r4, #0
   30ad6:	d0bf      	beq.n	30a58 <net_pkt_copy+0x16>
   30ad8:	e7e0      	b.n	30a9c <net_pkt_copy+0x5a>

00030ada <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   30ada:	b170      	cbz	r0, 30afa <net_pkt_remaining_data+0x20>
   30adc:	6943      	ldr	r3, [r0, #20]
   30ade:	b15b      	cbz	r3, 30af8 <net_pkt_remaining_data+0x1e>
   30ae0:	6980      	ldr	r0, [r0, #24]
   30ae2:	b150      	cbz	r0, 30afa <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   30ae4:	6899      	ldr	r1, [r3, #8]
   30ae6:	899a      	ldrh	r2, [r3, #12]
   30ae8:	1a40      	subs	r0, r0, r1
   30aea:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   30aec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   30aee:	b903      	cbnz	r3, 30af2 <net_pkt_remaining_data+0x18>
   30af0:	4770      	bx	lr
		data_length += buf->len;
   30af2:	899a      	ldrh	r2, [r3, #12]
   30af4:	4410      	add	r0, r2
   30af6:	e7f9      	b.n	30aec <net_pkt_remaining_data+0x12>
		return 0;
   30af8:	4618      	mov	r0, r3
	}

	return data_length;
}
   30afa:	4770      	bx	lr

00030afc <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   30afc:	6903      	ldr	r3, [r0, #16]
   30afe:	b92b      	cbnz	r3, 30b0c <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   30b00:	2900      	cmp	r1, #0
}
   30b02:	bf14      	ite	ne
   30b04:	f06f 0015 	mvnne.w	r0, #21
   30b08:	2000      	moveq	r0, #0
   30b0a:	4770      	bx	lr
		if (buf->len < length) {
   30b0c:	899a      	ldrh	r2, [r3, #12]
   30b0e:	428a      	cmp	r2, r1
			buf->len = length;
   30b10:	bf2a      	itet	cs
   30b12:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   30b14:	1a89      	subcc	r1, r1, r2
			length = 0;
   30b16:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   30b18:	681b      	ldr	r3, [r3, #0]
   30b1a:	e7f0      	b.n	30afe <net_pkt_update_length+0x2>

00030b1c <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   30b1c:	6941      	ldr	r1, [r0, #20]
{
   30b1e:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   30b20:	b179      	cbz	r1, 30b42 <net_pkt_get_current_offset+0x26>
   30b22:	6983      	ldr	r3, [r0, #24]
   30b24:	b17b      	cbz	r3, 30b46 <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   30b26:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   30b28:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   30b2a:	42a1      	cmp	r1, r4
   30b2c:	d104      	bne.n	30b38 <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   30b2e:	6888      	ldr	r0, [r1, #8]
   30b30:	1a1b      	subs	r3, r3, r0
   30b32:	4413      	add	r3, r2
   30b34:	b298      	uxth	r0, r3

	return offset;
}
   30b36:	bd10      	pop	{r4, pc}
		offset += buf->len;
   30b38:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   30b3a:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   30b3c:	4402      	add	r2, r0
   30b3e:	b292      	uxth	r2, r2
		buf = buf->frags;
   30b40:	e7f3      	b.n	30b2a <net_pkt_get_current_offset+0xe>
		return 0;
   30b42:	4608      	mov	r0, r1
   30b44:	e7f7      	b.n	30b36 <net_pkt_get_current_offset+0x1a>
   30b46:	4618      	mov	r0, r3
   30b48:	e7f5      	b.n	30b36 <net_pkt_get_current_offset+0x1a>

00030b4a <net_pkt_clone>:
{
   30b4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30b4e:	460c      	mov	r4, r1
   30b50:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   30b52:	f7ff ffe3 	bl	30b1c <net_pkt_get_current_offset>
   30b56:	4680      	mov	r8, r0
	return net_buf_frags_len(pkt->frags);
   30b58:	6928      	ldr	r0, [r5, #16]
   30b5a:	f7ff fd83 	bl	30664 <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   30b5e:	2300      	movs	r3, #0
   30b60:	9400      	str	r4, [sp, #0]
   30b62:	4601      	mov	r1, r0
   30b64:	461a      	mov	r2, r3
   30b66:	6a28      	ldr	r0, [r5, #32]
   30b68:	f7ea f84e 	bl	1ac08 <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   30b6c:	4604      	mov	r4, r0
   30b6e:	b198      	cbz	r0, 30b98 <net_pkt_clone+0x4e>
	backup->pos = pkt->cursor.pos;
   30b70:	e9d5 7605 	ldrd	r7, r6, [r5, #20]
	net_pkt_cursor_init(pkt);
   30b74:	4628      	mov	r0, r5
   30b76:	f7ff feac 	bl	308d2 <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   30b7a:	6928      	ldr	r0, [r5, #16]
   30b7c:	f7ff fd72 	bl	30664 <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   30b80:	4629      	mov	r1, r5
   30b82:	4602      	mov	r2, r0
   30b84:	4620      	mov	r0, r4
   30b86:	f7ff ff5c 	bl	30a42 <net_pkt_copy>
   30b8a:	b148      	cbz	r0, 30ba0 <net_pkt_clone+0x56>
		net_pkt_unref(clone_pkt);
   30b8c:	4620      	mov	r0, r4
		return NULL;
   30b8e:	2400      	movs	r4, #0
		net_pkt_unref(clone_pkt);
   30b90:	f7ff fe3b 	bl	3080a <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   30b94:	e9c5 7605 	strd	r7, r6, [r5, #20]
}
   30b98:	4620      	mov	r0, r4
   30b9a:	b002      	add	sp, #8
   30b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   30ba0:	6923      	ldr	r3, [r4, #16]
   30ba2:	b15b      	cbz	r3, 30bbc <net_pkt_clone+0x72>
   30ba4:	462a      	mov	r2, r5
   30ba6:	f852 3f28 	ldr.w	r3, [r2, #40]!
   30baa:	62a3      	str	r3, [r4, #40]	; 0x28
   30bac:	6853      	ldr	r3, [r2, #4]
   30bae:	462a      	mov	r2, r5
   30bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
   30bb2:	f852 3f30 	ldr.w	r3, [r2, #48]!
   30bb6:	6323      	str	r3, [r4, #48]	; 0x30
   30bb8:	6853      	ldr	r3, [r2, #4]
   30bba:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
   30bbc:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	pkt->family = family;
   30bc0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	return pkt->family;
   30bc4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   30bc8:	f363 0243 	bfi	r2, r3, #1, #3
   30bcc:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   30bd0:	69eb      	ldr	r3, [r5, #28]
	net_pkt_cursor_init(clone_pkt);
   30bd2:	4620      	mov	r0, r4
	pkt->context = ctx;
   30bd4:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   30bd6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   30bda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return pkt->family;
   30bde:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   30be2:	f3c3 0342 	ubfx	r3, r3, #1, #3
   30be6:	2b01      	cmp	r3, #1
		net_pkt_set_ipv4_ttl(clone_pkt, net_pkt_ipv4_ttl(pkt));
   30be8:	bf01      	itttt	eq
   30bea:	f895 3042 	ldrbeq.w	r3, [r5, #66]	; 0x42
	pkt->ipv4_ttl = ttl;
   30bee:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv4_opts_len(clone_pkt,
   30bf2:	f895 3043 	ldrbeq.w	r3, [r5, #67]	; 0x43
	pkt->ipv4_opts_len = opts_len;
   30bf6:	f884 3043 	strbeq.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   30bfa:	f7ff fe6a 	bl	308d2 <net_pkt_cursor_init>
	if (cursor_offset) {
   30bfe:	f1b8 0f00 	cmp.w	r8, #0
   30c02:	d008      	beq.n	30c16 <net_pkt_clone+0xcc>
	pkt->overwrite = overwrite;
   30c04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		net_pkt_skip(clone_pkt, cursor_offset);
   30c08:	4641      	mov	r1, r8
   30c0a:	f043 0301 	orr.w	r3, r3, #1
   30c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   30c12:	f7ff fee8 	bl	309e6 <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   30c16:	e9c5 7605 	strd	r7, r6, [r5, #20]
	return clone_pkt;
   30c1a:	e7bd      	b.n	30b98 <net_pkt_clone+0x4e>

00030c1c <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   30c1c:	b538      	push	{r3, r4, r5, lr}
   30c1e:	460d      	mov	r5, r1
	return pkt->overwrite;
   30c20:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
   30c24:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   30c26:	43c9      	mvns	r1, r1
   30c28:	f001 0101 	and.w	r1, r1, #1
   30c2c:	f7ff fd31 	bl	30692 <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   30c30:	6943      	ldr	r3, [r0, #20]
   30c32:	b17b      	cbz	r3, 30c54 <net_pkt_is_contiguous+0x38>
   30c34:	6980      	ldr	r0, [r0, #24]
   30c36:	b160      	cbz	r0, 30c52 <net_pkt_is_contiguous+0x36>
   30c38:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   30c3c:	07d2      	lsls	r2, r2, #31
   30c3e:	bf4c      	ite	mi
   30c40:	899a      	ldrhmi	r2, [r3, #12]
   30c42:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   30c44:	689b      	ldr	r3, [r3, #8]
   30c46:	1ac0      	subs	r0, r0, r3
   30c48:	1a10      	subs	r0, r2, r0
		if (len >= size) {
   30c4a:	42a8      	cmp	r0, r5
   30c4c:	bf34      	ite	cc
   30c4e:	2000      	movcc	r0, #0
   30c50:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   30c52:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   30c54:	4618      	mov	r0, r3
   30c56:	e7fc      	b.n	30c52 <net_pkt_is_contiguous+0x36>

00030c58 <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   30c58:	6983      	ldr	r3, [r0, #24]
{
   30c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   30c5c:	4299      	cmp	r1, r3
{
   30c5e:	4604      	mov	r4, r0
   30c60:	460e      	mov	r6, r1
   30c62:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   30c64:	d10a      	bne.n	30c7c <net_pkt_write+0x24>
   30c66:	4611      	mov	r1, r2
   30c68:	f7ff ffd8 	bl	30c1c <net_pkt_is_contiguous>
   30c6c:	b130      	cbz	r0, 30c7c <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
   30c6e:	4629      	mov	r1, r5
   30c70:	4620      	mov	r0, r4
}
   30c72:	b002      	add	sp, #8
   30c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
   30c78:	f7ff beb5 	b.w	309e6 <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   30c7c:	2301      	movs	r3, #1
   30c7e:	462a      	mov	r2, r5
   30c80:	9300      	str	r3, [sp, #0]
   30c82:	4631      	mov	r1, r6
   30c84:	4620      	mov	r0, r4
   30c86:	f7ff fd47 	bl	30718 <net_pkt_cursor_operate>
}
   30c8a:	b002      	add	sp, #8
   30c8c:	bd70      	pop	{r4, r5, r6, pc}

00030c8e <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   30c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30c92:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   30c94:	6849      	ldr	r1, [r1, #4]
{
   30c96:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   30c98:	f7ff ffc0 	bl	30c1c <net_pkt_is_contiguous>
   30c9c:	4680      	mov	r8, r0
   30c9e:	b118      	cbz	r0, 30ca8 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   30ca0:	69a3      	ldr	r3, [r4, #24]
   30ca2:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   30ca4:	6829      	ldr	r1, [r5, #0]
   30ca6:	e010      	b.n	30cca <net_pkt_get_data+0x3c>
   30ca8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		} else if (net_pkt_is_being_overwritten(pkt)) {
   30cac:	07db      	lsls	r3, r3, #31
   30cae:	d5f9      	bpl.n	30ca4 <net_pkt_get_data+0x16>
   30cb0:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   30cb2:	b151      	cbz	r1, 30cca <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   30cb4:	e9d4 7605 	ldrd	r7, r6, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   30cb8:	686a      	ldr	r2, [r5, #4]
   30cba:	4620      	mov	r0, r4
   30cbc:	f7ff fea9 	bl	30a12 <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   30cc0:	e9c4 7605 	strd	r7, r6, [r4, #20]
   30cc4:	2800      	cmp	r0, #0
   30cc6:	d0ed      	beq.n	30ca4 <net_pkt_get_data+0x16>
				return NULL;
   30cc8:	4641      	mov	r1, r8
	}

	return NULL;
}
   30cca:	4608      	mov	r0, r1
   30ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030cd0 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   30cd0:	e9d1 1200 	ldrd	r1, r2, [r1]
   30cd4:	f7ff bfc0 	b.w	30c58 <net_pkt_write>

00030cd8 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   30cd8:	4770      	bx	lr

00030cda <k_work_submit_to_queue>:
{
   30cda:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30cdc:	f101 0308 	add.w	r3, r1, #8
   30ce0:	e8d3 2fef 	ldaex	r2, [r3]
   30ce4:	f042 0c01 	orr.w	ip, r2, #1
   30ce8:	e8c3 cfee 	stlex	lr, ip, [r3]
   30cec:	f1be 0f00 	cmp.w	lr, #0
   30cf0:	d1f6      	bne.n	30ce0 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   30cf2:	07d3      	lsls	r3, r2, #31
   30cf4:	d403      	bmi.n	30cfe <k_work_submit_to_queue+0x24>
}
   30cf6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   30cfa:	f002 bbc9 	b.w	33490 <k_queue_append>
}
   30cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00030d02 <icmpv4_create>:
{
   30d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30d04:	2304      	movs	r3, #4
   30d06:	2400      	movs	r4, #0
{
   30d08:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   30d0a:	4669      	mov	r1, sp
{
   30d0c:	4605      	mov	r5, r0
   30d0e:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30d10:	e9cd 4300 	strd	r4, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   30d14:	f7ff ffbb 	bl	30c8e <net_pkt_get_data>
	if (!icmp_hdr) {
   30d18:	b148      	cbz	r0, 30d2e <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
   30d1a:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   30d1c:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   30d1e:	7084      	strb	r4, [r0, #2]
   30d20:	70c4      	strb	r4, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   30d22:	4669      	mov	r1, sp
   30d24:	4628      	mov	r0, r5
   30d26:	f7ff ffd3 	bl	30cd0 <net_pkt_set_data>
}
   30d2a:	b003      	add	sp, #12
   30d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   30d2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30d32:	e7fa      	b.n	30d2a <icmpv4_create+0x28>

00030d34 <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
   30d34:	68cb      	ldr	r3, [r1, #12]
{
   30d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30d38:	4606      	mov	r6, r0
   30d3a:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified(&ip_hdr->src)) {
   30d3c:	b90b      	cbnz	r3, 30d42 <icmpv4_handle_echo_request+0xe>
	return NET_DROP;
   30d3e:	2002      	movs	r0, #2
   30d40:	e04b      	b.n	30dda <icmpv4_handle_echo_request+0xa6>
	size_t bytes = 0;
   30d42:	2200      	movs	r2, #0
	payload_len = net_pkt_get_len(pkt) -
   30d44:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   30d46:	2b00      	cmp	r3, #0
   30d48:	d149      	bne.n	30dde <icmpv4_handle_echo_request+0xaa>
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   30d4a:	f896 1043 	ldrb.w	r1, [r6, #67]	; 0x43
		      net_pkt_ip_hdr_len(pkt) -
   30d4e:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   30d52:	440c      	add	r4, r1
   30d54:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
   30d58:	34fc      	adds	r4, #252	; 0xfc
   30d5a:	4414      	add	r4, r2
	payload_len = net_pkt_get_len(pkt) -
   30d5c:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   30d5e:	2c03      	cmp	r4, #3
   30d60:	dded      	ble.n	30d3e <icmpv4_handle_echo_request+0xa>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   30d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   30d66:	9300      	str	r3, [sp, #0]
   30d68:	2301      	movs	r3, #1
   30d6a:	4421      	add	r1, r4
   30d6c:	461a      	mov	r2, r3
   30d6e:	6a30      	ldr	r0, [r6, #32]
   30d70:	f7e9 ff4a 	bl	1ac08 <net_pkt_alloc_with_buffer>
	if (!reply) {
   30d74:	4605      	mov	r5, r0
   30d76:	2800      	cmp	r0, #0
   30d78:	d0e1      	beq.n	30d3e <icmpv4_handle_echo_request+0xa>
	if (net_ipv4_is_addr_mcast(&ip_hdr->dst)) {
   30d7a:	693b      	ldr	r3, [r7, #16]
   30d7c:	f107 0110 	add.w	r1, r7, #16
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   30d80:	ba1b      	rev	r3, r3
   30d82:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   30d86:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   30d8a:	d103      	bne.n	30d94 <icmpv4_handle_echo_request+0x60>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   30d8c:	6a30      	ldr	r0, [r6, #32]
   30d8e:	f7e8 fec5 	bl	19b1c <net_if_ipv4_select_src_addr>
   30d92:	4601      	mov	r1, r0
	if (net_ipv4_create(reply, src, &ip_hdr->src)) {
   30d94:	f107 020c 	add.w	r2, r7, #12
   30d98:	4628      	mov	r0, r5
   30d9a:	f000 f8ce 	bl	30f3a <net_ipv4_create>
   30d9e:	4602      	mov	r2, r0
   30da0:	bb08      	cbnz	r0, 30de6 <icmpv4_handle_echo_request+0xb2>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   30da2:	4601      	mov	r1, r0
   30da4:	4628      	mov	r0, r5
   30da6:	f7ff ffac 	bl	30d02 <icmpv4_create>
   30daa:	b9e0      	cbnz	r0, 30de6 <icmpv4_handle_echo_request+0xb2>
	    net_pkt_copy(reply, pkt, payload_len)) {
   30dac:	4622      	mov	r2, r4
   30dae:	4631      	mov	r1, r6
   30db0:	4628      	mov	r0, r5
   30db2:	f7ff fe46 	bl	30a42 <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   30db6:	4604      	mov	r4, r0
   30db8:	b9a8      	cbnz	r0, 30de6 <icmpv4_handle_echo_request+0xb2>
	net_pkt_cursor_init(reply);
   30dba:	4628      	mov	r0, r5
   30dbc:	f7ff fd89 	bl	308d2 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   30dc0:	2101      	movs	r1, #1
   30dc2:	4628      	mov	r0, r5
   30dc4:	f000 f8ec 	bl	30fa0 <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
   30dc8:	4628      	mov	r0, r5
   30dca:	f7ff f96f 	bl	300ac <net_send_data>
   30dce:	2800      	cmp	r0, #0
   30dd0:	db09      	blt.n	30de6 <icmpv4_handle_echo_request+0xb2>
	net_pkt_unref(pkt);
   30dd2:	4630      	mov	r0, r6
   30dd4:	f7ff fd19 	bl	3080a <net_pkt_unref>
	return NET_OK;
   30dd8:	4620      	mov	r0, r4
}
   30dda:	b003      	add	sp, #12
   30ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   30dde:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
   30de0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   30de2:	440a      	add	r2, r1
		buf = buf->frags;
   30de4:	e7af      	b.n	30d46 <icmpv4_handle_echo_request+0x12>
		net_pkt_unref(reply);
   30de6:	4628      	mov	r0, r5
   30de8:	f7ff fd0f 	bl	3080a <net_pkt_unref>
   30dec:	e7a7      	b.n	30d3e <icmpv4_handle_echo_request+0xa>

00030dee <net_icmpv4_finalize>:
{
   30dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30df0:	2304      	movs	r3, #4
   30df2:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   30df4:	4669      	mov	r1, sp
{
   30df6:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30df8:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   30dfc:	f7ff ff47 	bl	30c8e <net_pkt_get_data>
	if (!icmp_hdr) {
   30e00:	4605      	mov	r5, r0
   30e02:	b150      	cbz	r0, 30e1a <net_icmpv4_finalize+0x2c>
   30e04:	2101      	movs	r1, #1
   30e06:	4620      	mov	r0, r4
   30e08:	f7ff fa9b 	bl	30342 <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmpv4_access);
   30e0c:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   30e0e:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
   30e10:	4620      	mov	r0, r4
   30e12:	f7ff ff5d 	bl	30cd0 <net_pkt_set_data>
}
   30e16:	b003      	add	sp, #12
   30e18:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   30e1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30e1e:	e7fa      	b.n	30e16 <net_icmpv4_finalize+0x28>

00030e20 <net_icmpv4_send_error>:
{
   30e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30e24:	2314      	movs	r3, #20
{
   30e26:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30e28:	2400      	movs	r4, #0
{
   30e2a:	b087      	sub	sp, #28
   30e2c:	4688      	mov	r8, r1
   30e2e:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30e30:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   30e34:	f7ff fd4d 	bl	308d2 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   30e38:	a902      	add	r1, sp, #8
   30e3a:	4630      	mov	r0, r6
   30e3c:	f7ff ff27 	bl	30c8e <net_pkt_get_data>
	if (!ip_hdr) {
   30e40:	4605      	mov	r5, r0
   30e42:	b378      	cbz	r0, 30ea4 <net_icmpv4_send_error+0x84>
	if (ip_hdr->proto == IPPROTO_ICMP) {
   30e44:	7a43      	ldrb	r3, [r0, #9]
   30e46:	2b01      	cmp	r3, #1
   30e48:	d110      	bne.n	30e6c <net_icmpv4_send_error+0x4c>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30e4a:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   30e4c:	a904      	add	r1, sp, #16
   30e4e:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   30e50:	9404      	str	r4, [sp, #16]
   30e52:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   30e54:	f7ff ff1b 	bl	30c8e <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
   30e58:	b110      	cbz	r0, 30e60 <net_icmpv4_send_error+0x40>
   30e5a:	7843      	ldrb	r3, [r0, #1]
   30e5c:	2b07      	cmp	r3, #7
   30e5e:	d805      	bhi.n	30e6c <net_icmpv4_send_error+0x4c>
			err = -EINVAL;
   30e60:	f06f 0515 	mvn.w	r5, #21
}
   30e64:	4628      	mov	r0, r5
   30e66:	b007      	add	sp, #28
   30e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ip_hdr->proto == IPPROTO_UDP) {
   30e6c:	7a6b      	ldrb	r3, [r5, #9]
   30e6e:	2b11      	cmp	r3, #17
   30e70:	d01b      	beq.n	30eaa <net_icmpv4_send_error+0x8a>
		copy_len = 0;
   30e72:	2b06      	cmp	r3, #6
   30e74:	bf0c      	ite	eq
   30e76:	2728      	moveq	r7, #40	; 0x28
   30e78:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   30e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   30e7e:	9300      	str	r3, [sp, #0]
   30e80:	2301      	movs	r3, #1
   30e82:	1d39      	adds	r1, r7, #4
   30e84:	461a      	mov	r2, r3
   30e86:	6a30      	ldr	r0, [r6, #32]
   30e88:	f7e9 febe 	bl	1ac08 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   30e8c:	4604      	mov	r4, r0
   30e8e:	b3b8      	cbz	r0, 30f00 <net_icmpv4_send_error+0xe0>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   30e90:	f105 020c 	add.w	r2, r5, #12
   30e94:	f105 0110 	add.w	r1, r5, #16
   30e98:	f000 f84f 	bl	30f3a <net_ipv4_create>
   30e9c:	b138      	cbz	r0, 30eae <net_icmpv4_send_error+0x8e>
	net_pkt_unref(pkt);
   30e9e:	4620      	mov	r0, r4
   30ea0:	f7ff fcb3 	bl	3080a <net_pkt_unref>
	int err = -EIO;
   30ea4:	f06f 0504 	mvn.w	r5, #4
   30ea8:	e7dc      	b.n	30e64 <net_icmpv4_send_error+0x44>
		copy_len = sizeof(struct net_ipv4_hdr) +
   30eaa:	271c      	movs	r7, #28
   30eac:	e7e5      	b.n	30e7a <net_icmpv4_send_error+0x5a>
	    icmpv4_create(pkt, type, code) ||
   30eae:	4641      	mov	r1, r8
   30eb0:	464a      	mov	r2, r9
   30eb2:	4620      	mov	r0, r4
   30eb4:	f7ff ff25 	bl	30d02 <icmpv4_create>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   30eb8:	4601      	mov	r1, r0
   30eba:	2800      	cmp	r0, #0
   30ebc:	d1ef      	bne.n	30e9e <net_icmpv4_send_error+0x7e>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   30ebe:	2204      	movs	r2, #4
   30ec0:	4620      	mov	r0, r4
   30ec2:	f7ff fd9b 	bl	309fc <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
   30ec6:	2800      	cmp	r0, #0
   30ec8:	d1e9      	bne.n	30e9e <net_icmpv4_send_error+0x7e>
	    net_pkt_copy(pkt, orig, copy_len)) {
   30eca:	463a      	mov	r2, r7
   30ecc:	4631      	mov	r1, r6
   30ece:	4620      	mov	r0, r4
   30ed0:	f7ff fdb7 	bl	30a42 <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   30ed4:	4605      	mov	r5, r0
   30ed6:	2800      	cmp	r0, #0
   30ed8:	d1e1      	bne.n	30e9e <net_icmpv4_send_error+0x7e>
	net_pkt_cursor_init(pkt);
   30eda:	4620      	mov	r0, r4
   30edc:	f7ff fcf9 	bl	308d2 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   30ee0:	2101      	movs	r1, #1
   30ee2:	4620      	mov	r0, r4
   30ee4:	f000 f85c 	bl	30fa0 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   30ee8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	if (net_send_data(pkt) >= 0) {
   30eea:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   30eec:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   30eee:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   30ef2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (net_send_data(pkt) >= 0) {
   30ef6:	f7ff f8d9 	bl	300ac <net_send_data>
   30efa:	2800      	cmp	r0, #0
   30efc:	dab2      	bge.n	30e64 <net_icmpv4_send_error+0x44>
   30efe:	e7ce      	b.n	30e9e <net_icmpv4_send_error+0x7e>
		err =  -ENOMEM;
   30f00:	f06f 050b 	mvn.w	r5, #11
   30f04:	e7ae      	b.n	30e64 <net_icmpv4_send_error+0x44>

00030f06 <net_ipv4_is_addr_mcast>:
   30f06:	6800      	ldr	r0, [r0, #0]
   30f08:	ba00      	rev	r0, r0
   30f0a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   30f0e:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   30f12:	4258      	negs	r0, r3
   30f14:	4158      	adcs	r0, r3
   30f16:	4770      	bx	lr

00030f18 <net_ipv4_is_addr_bcast>:
{
   30f18:	b538      	push	{r3, r4, r5, lr}
   30f1a:	460c      	mov	r4, r1
   30f1c:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   30f1e:	f7e8 ff97 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   30f22:	6822      	ldr	r2, [r4, #0]
   30f24:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   30f26:	429a      	cmp	r2, r3
   30f28:	d005      	beq.n	30f36 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   30f2a:	4621      	mov	r1, r4
   30f2c:	4628      	mov	r0, r5
}
   30f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
   30f32:	f7e8 bdc1 	b.w	19ab8 <net_if_ipv4_is_addr_bcast>
}
   30f36:	2001      	movs	r0, #1
   30f38:	bd38      	pop	{r3, r4, r5, pc}

00030f3a <net_ipv4_create>:
#define NET_BUF_TIMEOUT K_MSEC(50)

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
   30f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30f3c:	2314      	movs	r3, #20
   30f3e:	2400      	movs	r4, #0
{
   30f40:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   30f42:	4669      	mov	r1, sp
{
   30f44:	4605      	mov	r5, r0
   30f46:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30f48:	e9cd 4300 	strd	r4, r3, [sp]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   30f4c:	f7ff fe9f 	bl	30c8e <net_pkt_get_data>
	if (!ipv4_hdr) {
   30f50:	b318      	cbz	r0, 30f9a <net_ipv4_create+0x60>
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
   30f52:	2345      	movs	r3, #69	; 0x45
	ipv4_hdr->tos       = 0x00;
   30f54:	7044      	strb	r4, [r0, #1]
	ipv4_hdr->vhl       = 0x45;
   30f56:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = 0U;
   30f58:	7104      	strb	r4, [r0, #4]
	ipv4_hdr->id[1]     = 0U;
   30f5a:	7144      	strb	r4, [r0, #5]
	ipv4_hdr->offset[0] = 0U;
   30f5c:	7184      	strb	r4, [r0, #6]
	ipv4_hdr->offset[1] = 0U;
   30f5e:	71c4      	strb	r4, [r0, #7]

	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   30f60:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	ipv4_hdr->len       = 0U;
   30f64:	7084      	strb	r4, [r0, #2]
   30f66:	70c4      	strb	r4, [r0, #3]
	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   30f68:	7203      	strb	r3, [r0, #8]
	if (ipv4_hdr->ttl == 0U) {
   30f6a:	b92b      	cbnz	r3, 30f78 <net_ipv4_create+0x3e>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   30f6c:	6a2a      	ldr	r2, [r5, #32]
   30f6e:	6851      	ldr	r1, [r2, #4]
 * @return Time-to-live
 */
static inline u8_t net_if_ipv4_get_ttl(struct net_if *iface)
{
#if defined(CONFIG_NET_NATIVE_IPV4)
	if (!iface->config.ip.ipv4) {
   30f70:	b109      	cbz	r1, 30f76 <net_ipv4_create+0x3c>
		return 0;
	}

	return iface->config.ip.ipv4->ttl;
   30f72:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   30f76:	7203      	strb	r3, [r0, #8]
	}

	ipv4_hdr->proto     = 0U;
   30f78:	2300      	movs	r3, #0
   30f7a:	7243      	strb	r3, [r0, #9]
	ipv4_hdr->chksum    = 0U;
   30f7c:	7283      	strb	r3, [r0, #10]
   30f7e:	72c3      	strb	r3, [r0, #11]

	net_ipaddr_copy(&ipv4_hdr->dst, dst);
   30f80:	683b      	ldr	r3, [r7, #0]
   30f82:	6103      	str	r3, [r0, #16]
	net_ipaddr_copy(&ipv4_hdr->src, src);
   30f84:	6833      	ldr	r3, [r6, #0]
   30f86:	60c3      	str	r3, [r0, #12]
	pkt->ip_hdr_len = len;
   30f88:	2314      	movs	r3, #20

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
   30f8a:	4669      	mov	r1, sp
   30f8c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   30f90:	4628      	mov	r0, r5
   30f92:	f7ff fe9d 	bl	30cd0 <net_pkt_set_data>
}
   30f96:	b003      	add	sp, #12
   30f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   30f9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30f9e:	e7fa      	b.n	30f96 <net_ipv4_create+0x5c>

00030fa0 <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   30fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   30fa2:	2314      	movs	r3, #20
   30fa4:	2500      	movs	r5, #0
   30fa6:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   30faa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
   30fae:	460e      	mov	r6, r1
   30fb0:	f043 0301 	orr.w	r3, r3, #1
   30fb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   30fb8:	4669      	mov	r1, sp
{
   30fba:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   30fbc:	f7ff fe67 	bl	30c8e <net_pkt_get_data>
	if (!ipv4_hdr) {
   30fc0:	4607      	mov	r7, r0
   30fc2:	b340      	cbz	r0, 31016 <net_ipv4_finalize+0x76>
	size_t bytes = 0;
   30fc4:	462b      	mov	r3, r5
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   30fc6:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   30fc8:	b9aa      	cbnz	r2, 30ff6 <net_ipv4_finalize+0x56>
   30fca:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
   30fcc:	727e      	strb	r6, [r7, #9]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   30fce:	807b      	strh	r3, [r7, #2]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   30fd0:	6a20      	ldr	r0, [r4, #32]
   30fd2:	f7ff f996 	bl	30302 <net_if_need_calc_tx_checksum>
   30fd6:	b118      	cbz	r0, 30fe0 <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   30fd8:	4620      	mov	r0, r4
   30fda:	f7ff fa37 	bl	3044c <net_calc_chksum_ipv4>
   30fde:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
   30fe0:	4669      	mov	r1, sp
   30fe2:	4620      	mov	r0, r4
   30fe4:	f7ff fe74 	bl	30cd0 <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   30fe8:	2e11      	cmp	r6, #17
   30fea:	d108      	bne.n	30ffe <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
   30fec:	4620      	mov	r0, r4
   30fee:	f000 fdd4 	bl	31b9a <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
   30ff2:	b003      	add	sp, #12
   30ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   30ff6:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   30ff8:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   30ffa:	440b      	add	r3, r1
		buf = buf->frags;
   30ffc:	e7e4      	b.n	30fc8 <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   30ffe:	2e06      	cmp	r6, #6
   31000:	d103      	bne.n	3100a <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
   31002:	4620      	mov	r0, r4
   31004:	f000 fcb5 	bl	31972 <net_tcp_finalize>
   31008:	e7f3      	b.n	30ff2 <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
   3100a:	2e01      	cmp	r6, #1
   3100c:	d106      	bne.n	3101c <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
   3100e:	4620      	mov	r0, r4
   31010:	f7ff feed 	bl	30dee <net_icmpv4_finalize>
   31014:	e7ed      	b.n	30ff2 <net_ipv4_finalize+0x52>
		return -ENOBUFS;
   31016:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3101a:	e7ea      	b.n	30ff2 <net_ipv4_finalize+0x52>
	return 0;
   3101c:	2000      	movs	r0, #0
   3101e:	e7e8      	b.n	30ff2 <net_ipv4_finalize+0x52>

00031020 <net_ipv4_input>:
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31020:	2314      	movs	r3, #20
{
   31022:	b5f0      	push	{r4, r5, r6, r7, lr}
   31024:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31026:	eb0d 0203 	add.w	r2, sp, r3
   3102a:	9207      	str	r2, [sp, #28]
   3102c:	2208      	movs	r2, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   3102e:	2700      	movs	r7, #0
{
   31030:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31032:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   31034:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31036:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   3103a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
   3103e:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   31040:	b943      	cbnz	r3, 31054 <net_ipv4_input+0x34>
	u8_t opts_len;
	int pkt_len;

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   31042:	a903      	add	r1, sp, #12
   31044:	4620      	mov	r0, r4
   31046:	f7ff fe22 	bl	30c8e <net_pkt_get_data>
	if (!hdr) {
   3104a:	4605      	mov	r5, r0
   3104c:	b930      	cbnz	r0, 3105c <net_ipv4_input+0x3c>
	if (verdict != NET_DROP) {
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   3104e:	2002      	movs	r0, #2
}
   31050:	b011      	add	sp, #68	; 0x44
   31052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   31054:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   31056:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   31058:	4417      	add	r7, r2
		buf = buf->frags;
   3105a:	e7f1      	b.n	31040 <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   3105c:	7806      	ldrb	r6, [r0, #0]
   3105e:	f006 060f 	and.w	r6, r6, #15
   31062:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   31064:	2e13      	cmp	r6, #19
   31066:	d9f2      	bls.n	3104e <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
   31068:	2314      	movs	r3, #20
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   3106a:	3e14      	subs	r6, #20
   3106c:	b2f6      	uxtb	r6, r6
   3106e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ipv4_opts_len = opts_len;
   31072:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	pkt_len = ntohs(hdr->len);
   31076:	8843      	ldrh	r3, [r0, #2]
   31078:	0219      	lsls	r1, r3, #8
   3107a:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   3107e:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
   31080:	428f      	cmp	r7, r1
   31082:	dbe4      	blt.n	3104e <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
   31084:	dd02      	ble.n	3108c <net_ipv4_input+0x6c>
		net_pkt_update_length(pkt, pkt_len);
   31086:	4620      	mov	r0, r4
   31088:	f7ff fd38 	bl	30afc <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast(&hdr->src)) {
   3108c:	f105 010c 	add.w	r1, r5, #12
   31090:	4608      	mov	r0, r1
   31092:	f7ff ff38 	bl	30f06 <net_ipv4_is_addr_mcast>
   31096:	2800      	cmp	r0, #0
   31098:	d1d9      	bne.n	3104e <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->src)) {
   3109a:	6a20      	ldr	r0, [r4, #32]
   3109c:	f7ff ff3c 	bl	30f18 <net_ipv4_is_addr_bcast>
   310a0:	2800      	cmp	r0, #0
   310a2:	d1d4      	bne.n	3104e <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   310a4:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified(&hdr->src)) {
   310a6:	2b00      	cmp	r3, #0
   310a8:	d0d1      	beq.n	3104e <net_ipv4_input+0x2e>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   310aa:	6a20      	ldr	r0, [r4, #32]
   310ac:	f7ff f92b 	bl	30306 <net_if_need_calc_rx_checksum>
   310b0:	2800      	cmp	r0, #0
   310b2:	d145      	bne.n	31140 <net_ipv4_input+0x120>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   310b4:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   310b8:	2100      	movs	r1, #0
   310ba:	4638      	mov	r0, r7
   310bc:	f7e8 fd7c 	bl	19bb8 <net_if_ipv4_addr_lookup>
   310c0:	2800      	cmp	r0, #0
   310c2:	bf14      	ite	ne
   310c4:	2301      	movne	r3, #1
   310c6:	2300      	moveq	r3, #0
	if (!ret) {
   310c8:	d103      	bne.n	310d2 <net_ipv4_input+0xb2>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   310ca:	4639      	mov	r1, r7
   310cc:	f7ff ff24 	bl	30f18 <net_ipv4_is_addr_bcast>
   310d0:	4603      	mov	r3, r0
   310d2:	2b00      	cmp	r3, #0
   310d4:	d03a      	beq.n	3114c <net_ipv4_input+0x12c>
				   net_ipv4_unspecified_address()))))) ||
   310d6:	7a6b      	ldrb	r3, [r5, #9]
   310d8:	2b06      	cmp	r3, #6
   310da:	d105      	bne.n	310e8 <net_ipv4_input+0xc8>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->dst))) {
   310dc:	4639      	mov	r1, r7
   310de:	6a20      	ldr	r0, [r4, #32]
   310e0:	f7ff ff1a 	bl	30f18 <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
   310e4:	2800      	cmp	r0, #0
   310e6:	d1b2      	bne.n	3104e <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   310e8:	9904      	ldr	r1, [sp, #16]
   310ea:	4620      	mov	r0, r4
   310ec:	f7ff fc7b 	bl	309e6 <net_pkt_skip>
	if (opts_len) {
   310f0:	b12e      	cbz	r6, 310fe <net_ipv4_input+0xde>
		if (net_pkt_skip(pkt, opts_len)) {
   310f2:	4631      	mov	r1, r6
   310f4:	4620      	mov	r0, r4
   310f6:	f7ff fc76 	bl	309e6 <net_pkt_skip>
   310fa:	2800      	cmp	r0, #0
   310fc:	d1a7      	bne.n	3104e <net_ipv4_input+0x2e>
	pkt->family = family;
   310fe:	2201      	movs	r2, #1
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   31100:	7a2b      	ldrb	r3, [r5, #8]
	pkt->ipv4_ttl = ttl;
   31102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	pkt->family = family;
   31106:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   3110a:	f362 0343 	bfi	r3, r2, #1, #3
   3110e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	switch (hdr->proto) {
   31112:	7a6b      	ldrb	r3, [r5, #9]
   31114:	2b06      	cmp	r3, #6
   31116:	d029      	beq.n	3116c <net_ipv4_input+0x14c>
   31118:	2b11      	cmp	r3, #17
   3111a:	d031      	beq.n	31180 <net_ipv4_input+0x160>
   3111c:	4293      	cmp	r3, r2
   3111e:	d196      	bne.n	3104e <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
   31120:	4629      	mov	r1, r5
   31122:	4620      	mov	r0, r4
   31124:	f7e9 fdd8 	bl	1acd8 <net_icmpv4_input>
	if (verdict == NET_DROP) {
   31128:	2802      	cmp	r0, #2
   3112a:	d090      	beq.n	3104e <net_ipv4_input+0x2e>
	} else if (hdr->proto == IPPROTO_ICMP) {
   3112c:	7a6a      	ldrb	r2, [r5, #9]
   3112e:	2a01      	cmp	r2, #1
   31130:	d08e      	beq.n	31050 <net_ipv4_input+0x30>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   31132:	ab01      	add	r3, sp, #4
   31134:	a902      	add	r1, sp, #8
   31136:	4620      	mov	r0, r4
	ip.ipv4 = hdr;
   31138:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   3113a:	f7e9 ff15 	bl	1af68 <net_conn_input>
	if (verdict != NET_DROP) {
   3113e:	e787      	b.n	31050 <net_ipv4_input+0x30>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   31140:	4620      	mov	r0, r4
   31142:	f7ff f983 	bl	3044c <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   31146:	2800      	cmp	r0, #0
   31148:	d0b4      	beq.n	310b4 <net_ipv4_input+0x94>
   3114a:	e780      	b.n	3104e <net_ipv4_input+0x2e>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   3114c:	4638      	mov	r0, r7
   3114e:	f7ff feda 	bl	30f06 <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   31152:	2800      	cmp	r0, #0
   31154:	d1bf      	bne.n	310d6 <net_ipv4_input+0xb6>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   31156:	7a6b      	ldrb	r3, [r5, #9]
   31158:	2b11      	cmp	r3, #17
   3115a:	f47f af78 	bne.w	3104e <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp(&hdr->dst, net_ipv4_broadcast_address()) ||
   3115e:	f7e8 fe77 	bl	19e50 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   31162:	692b      	ldr	r3, [r5, #16]
   31164:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
   31166:	429a      	cmp	r2, r3
   31168:	d0b5      	beq.n	310d6 <net_ipv4_input+0xb6>
   3116a:	e770      	b.n	3104e <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   3116c:	a909      	add	r1, sp, #36	; 0x24
   3116e:	4620      	mov	r0, r4
   31170:	f000 fcd8 	bl	31b24 <net_tcp_input>
   31174:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
   31176:	2800      	cmp	r0, #0
   31178:	f43f af69 	beq.w	3104e <net_ipv4_input+0x2e>
			verdict = NET_OK;
   3117c:	2000      	movs	r0, #0
   3117e:	e7d5      	b.n	3112c <net_ipv4_input+0x10c>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   31180:	a907      	add	r1, sp, #28
   31182:	4620      	mov	r0, r4
   31184:	f000 fd3c 	bl	31c00 <net_udp_input>
   31188:	e7f4      	b.n	31174 <net_ipv4_input+0x154>

0003118a <sys_get_be32>:
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_be16(const u8_t src[2])
{
	return ((u16_t)src[0] << 8) | src[1];
   3118a:	7803      	ldrb	r3, [r0, #0]
   3118c:	7842      	ldrb	r2, [r0, #1]
   3118e:	7881      	ldrb	r1, [r0, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline u32_t sys_get_be32(const u8_t src[4])
{
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   31190:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   31194:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   31196:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   3119a:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   3119e:	4770      	bx	lr

000311a0 <handle_fin_timeout>:
	net_context_unref(tcp->context);
   311a0:	f850 0c28 	ldr.w	r0, [r0, #-40]
   311a4:	f7ff b99a 	b.w	304dc <net_context_unref>

000311a8 <net_tcp_is_used>:
	return tcp->flags & NET_TCP_IN_USE;
   311a8:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	; 0xbc
}
   311ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
   311b0:	4770      	bx	lr

000311b2 <net_tcp_queue_pkt.isra.22>:
	parent->next = child;
   311b2:	2200      	movs	r2, #0
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   311b4:	b538      	push	{r3, r4, r5, lr}
   311b6:	4605      	mov	r5, r0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   311b8:	6800      	ldr	r0, [r0, #0]
   311ba:	638a      	str	r2, [r1, #56]	; 0x38
Z_GENLIST_APPEND(slist, snode)
   311bc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   311c0:	460c      	mov	r4, r1
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   311c2:	f101 0338 	add.w	r3, r1, #56	; 0x38
   311c6:	b9da      	cbnz	r2, 31200 <net_tcp_queue_pkt.isra.22+0x4e>
	list->head = node;
   311c8:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   311cc:	3054      	adds	r0, #84	; 0x54
   311ce:	f7f9 f801 	bl	2a1d4 <z_timeout_remaining>
   311d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   311d6:	fba0 0103 	umull	r0, r1, r0, r3
   311da:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   311dc:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   311e0:	d109      	bne.n	311f6 <net_tcp_queue_pkt.isra.22+0x44>
		k_delayed_work_submit(&context->tcp->retry_timer,
   311e2:	21c8      	movs	r1, #200	; 0xc8
   311e4:	6828      	ldr	r0, [r5, #0]
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   311e6:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
		k_delayed_work_submit(&context->tcp->retry_timer,
   311ea:	3048      	adds	r0, #72	; 0x48
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   311ec:	f003 031f 	and.w	r3, r3, #31
		k_delayed_work_submit(&context->tcp->retry_timer,
   311f0:	4099      	lsls	r1, r3
   311f2:	f7e9 ffc1 	bl	1b178 <k_delayed_work_submit>
	do_ref_if_needed(context->tcp, pkt);
   311f6:	4620      	mov	r0, r4
   311f8:	f7ff faee 	bl	307d8 <net_pkt_ref>
}
   311fc:	2000      	movs	r0, #0
   311fe:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   31200:	6013      	str	r3, [r2, #0]
	list->tail = node;
   31202:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   31206:	e7e1      	b.n	311cc <net_tcp_queue_pkt.isra.22+0x1a>

00031208 <net_tcp_get_recv_mss>:
{
   31208:	b510      	push	{r4, lr}
   3120a:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(tcp->context);
   3120c:	6800      	ldr	r0, [r0, #0]
   3120e:	f7e9 ffbb 	bl	1b188 <net_context_get_family>
	if (family == AF_INET) {
   31212:	2801      	cmp	r0, #1
   31214:	d001      	beq.n	3121a <net_tcp_get_recv_mss+0x12>
	return 0;
   31216:	2000      	movs	r0, #0
}
   31218:	bd10      	pop	{r4, pc}
		struct net_if *iface = net_context_get_iface(tcp->context);
   3121a:	6820      	ldr	r0, [r4, #0]
   3121c:	f7ea f818 	bl	1b250 <net_context_get_iface>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
   31220:	2800      	cmp	r0, #0
   31222:	d0f8      	beq.n	31216 <net_tcp_get_recv_mss+0xe>
	return iface->if_dev->mtu;
   31224:	6803      	ldr	r3, [r0, #0]
   31226:	8b18      	ldrh	r0, [r3, #24]
   31228:	2827      	cmp	r0, #39	; 0x27
   3122a:	d9f4      	bls.n	31216 <net_tcp_get_recv_mss+0xe>
			return net_if_get_mtu(iface) - NET_IPV4TCPH_LEN;
   3122c:	3828      	subs	r0, #40	; 0x28
   3122e:	b280      	uxth	r0, r0
   31230:	e7f2      	b.n	31218 <net_tcp_get_recv_mss+0x10>

00031232 <net_tcp_set_syn_opt>:
	*optionlen = 0U;
   31232:	2300      	movs	r3, #0
{
   31234:	b570      	push	{r4, r5, r6, lr}
	*optionlen = 0U;
   31236:	7013      	strb	r3, [r2, #0]
{
   31238:	4614      	mov	r4, r2
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   3123a:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
{
   3123e:	4605      	mov	r5, r0
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   31240:	0552      	lsls	r2, r2, #21
{
   31242:	460e      	mov	r6, r1
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   31244:	d418      	bmi.n	31278 <net_tcp_set_syn_opt+0x46>
		recv_mss = net_tcp_get_recv_mss(tcp);
   31246:	f7ff ffdf 	bl	31208 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   3124a:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   3124e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   31252:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   31256:	f040 7301 	orr.w	r3, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   3125a:	0218      	lsls	r0, r3, #8
   3125c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   31260:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   31264:	7822      	ldrb	r2, [r4, #0]
   31266:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   3126a:	f040 0002 	orr.w	r0, r0, #2
   3126e:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   31270:	7823      	ldrb	r3, [r4, #0]
   31272:	3304      	adds	r3, #4
   31274:	7023      	strb	r3, [r4, #0]
}
   31276:	bd70      	pop	{r4, r5, r6, pc}
		recv_mss = 0U;
   31278:	4618      	mov	r0, r3
   3127a:	e7ec      	b.n	31256 <net_tcp_set_syn_opt+0x24>

0003127c <net_tcp_prepare_reset>:
{
   3127c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3127e:	4605      	mov	r5, r0
   31280:	b089      	sub	sp, #36	; 0x24
   31282:	460c      	mov	r4, r1
   31284:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   31286:	2100      	movs	r1, #0
   31288:	2218      	movs	r2, #24
   3128a:	a802      	add	r0, sp, #8
{
   3128c:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   3128e:	f002 fad1 	bl	33834 <memset>
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   31292:	6828      	ldr	r0, [r5, #0]
   31294:	f7e9 ff98 	bl	1b1c8 <net_context_get_state>
   31298:	b300      	cbz	r0, 312dc <net_tcp_prepare_reset+0x60>
	return (enum net_tcp_state)tcp->state;
   3129a:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   3129e:	f3c2 3243 	ubfx	r2, r2, #13, #4
   312a2:	2a02      	cmp	r2, #2
   312a4:	d02c      	beq.n	31300 <net_tcp_prepare_reset+0x84>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   312a6:	2a09      	cmp	r2, #9
   312a8:	d02a      	beq.n	31300 <net_tcp_prepare_reset+0x84>
		segment.ack = tcp->send_ack;
   312aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   312ae:	6828      	ldr	r0, [r5, #0]
   312b0:	9303      	str	r3, [sp, #12]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   312b2:	2314      	movs	r3, #20
   312b4:	f88d 3012 	strb.w	r3, [sp, #18]
		segment.seq = tcp->send_seq;
   312b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   312bc:	9302      	str	r3, [sp, #8]
		if (!local) {
   312be:	b97c      	cbnz	r4, 312e0 <net_tcp_prepare_reset+0x64>
			segment.src_addr = &tcp->context->local;
   312c0:	f100 031c 	add.w	r3, r0, #28
   312c4:	9306      	str	r3, [sp, #24]
		segment.wnd = 0U;
   312c6:	2200      	movs	r2, #0
		status = prepare_segment(tcp, &segment, NULL, pkt);
   312c8:	4633      	mov	r3, r6
   312ca:	a902      	add	r1, sp, #8
		segment.dst_addr = remote;
   312cc:	9707      	str	r7, [sp, #28]
		segment.wnd = 0U;
   312ce:	f8ad 2010 	strh.w	r2, [sp, #16]
		segment.options = NULL;
   312d2:	9205      	str	r2, [sp, #20]
		segment.optlen = 0U;
   312d4:	f88d 2013 	strb.w	r2, [sp, #19]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   312d8:	f7ea f822 	bl	1b320 <prepare_segment.isra.21>
}
   312dc:	b009      	add	sp, #36	; 0x24
   312de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(addr, 0, sizeof(struct sockaddr_ptr));
   312e0:	2300      	movs	r3, #0
   312e2:	e9cd 3300 	strd	r3, r3, [sp]
	if (local->sa_family == AF_INET) {
   312e6:	8823      	ldrh	r3, [r4, #0]
   312e8:	2b01      	cmp	r3, #1
   312ea:	d106      	bne.n	312fa <net_tcp_prepare_reset+0x7e>
		net_sin_ptr(addr)->sin_family = AF_INET;
   312ec:	f8ad 3000 	strh.w	r3, [sp]
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   312f0:	8863      	ldrh	r3, [r4, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   312f2:	3404      	adds	r4, #4
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   312f4:	f8ad 3002 	strh.w	r3, [sp, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   312f8:	9401      	str	r4, [sp, #4]
			segment.src_addr = &src_addr_ptr;
   312fa:	f8cd d018 	str.w	sp, [sp, #24]
   312fe:	e7e2      	b.n	312c6 <net_tcp_prepare_reset+0x4a>
	int status = 0;
   31300:	2000      	movs	r0, #0
	return status;
   31302:	e7eb      	b.n	312dc <net_tcp_prepare_reset+0x60>

00031304 <send_reset.isra.29>:
	struct net_pkt *pkt = NULL;
   31304:	2300      	movs	r3, #0
static int send_reset(struct net_context *context,
   31306:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   31308:	9301      	str	r3, [sp, #4]
	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   3130a:	ab01      	add	r3, sp, #4
   3130c:	f7ff ffb6 	bl	3127c <net_tcp_prepare_reset>
	if (ret || !pkt) {
   31310:	4604      	mov	r4, r0
   31312:	b978      	cbnz	r0, 31334 <send_reset.isra.29+0x30>
   31314:	9801      	ldr	r0, [sp, #4]
   31316:	b168      	cbz	r0, 31334 <send_reset.isra.29+0x30>
	ret = net_send_data(pkt);
   31318:	f7fe fec8 	bl	300ac <net_send_data>
	if (ret < 0) {
   3131c:	1e04      	subs	r4, r0, #0
   3131e:	da02      	bge.n	31326 <send_reset.isra.29+0x22>
		net_pkt_unref(pkt);
   31320:	9801      	ldr	r0, [sp, #4]
   31322:	f7ff fa72 	bl	3080a <net_pkt_unref>
	pkt->sent_or_eof = sent;
   31326:	9a01      	ldr	r2, [sp, #4]
   31328:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   3132c:	f043 0302 	orr.w	r3, r3, #2
   31330:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   31334:	4620      	mov	r0, r4
   31336:	b002      	add	sp, #8
   31338:	bd10      	pop	{r4, pc}

0003133a <backlog_ack_timeout>:
{
   3133a:	b510      	push	{r4, lr}
	send_reset(backlog->tcp->context, NULL, &backlog->remote);
   3133c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   31340:	f1a0 040c 	sub.w	r4, r0, #12
   31344:	681b      	ldr	r3, [r3, #0]
   31346:	f100 0220 	add.w	r2, r0, #32
   3134a:	2100      	movs	r1, #0
   3134c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   3134e:	f7ff ffd9 	bl	31304 <send_reset.isra.29>
__ssp_bos_icheck3(memset, void *, int)
   31352:	4620      	mov	r0, r4
}
   31354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31358:	2238      	movs	r2, #56	; 0x38
   3135a:	2100      	movs	r1, #0
   3135c:	f002 ba6a 	b.w	33834 <memset>

00031360 <net_tcp_send_pkt>:
{
   31360:	b5f0      	push	{r4, r5, r6, r7, lr}
   31362:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   31364:	ab03      	add	r3, sp, #12
   31366:	9301      	str	r3, [sp, #4]
   31368:	2314      	movs	r3, #20
	struct net_context *ctx = net_pkt_context(pkt);
   3136a:	69c7      	ldr	r7, [r0, #28]
{
   3136c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   3136e:	9302      	str	r3, [sp, #8]
	if (!ctx || !ctx->tcp) {
   31370:	2f00      	cmp	r7, #0
   31372:	d075      	beq.n	31460 <net_tcp_send_pkt+0x100>
   31374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31376:	2b00      	cmp	r3, #0
   31378:	d072      	beq.n	31460 <net_tcp_send_pkt+0x100>
	net_pkt_cursor_init(pkt);
   3137a:	f7ff faaa 	bl	308d2 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   3137e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   31382:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   31386:	f043 0301 	orr.w	r3, r3, #1
   3138a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			 net_pkt_ip_opts_len(pkt))) {
   3138e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   31392:	4620      	mov	r0, r4
   31394:	4419      	add	r1, r3
   31396:	f7ff fb26 	bl	309e6 <net_pkt_skip>
   3139a:	4606      	mov	r6, r0
   3139c:	b118      	cbz	r0, 313a6 <net_tcp_send_pkt+0x46>
		return -EMSGSIZE;
   3139e:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   313a2:	b009      	add	sp, #36	; 0x24
   313a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   313a6:	a901      	add	r1, sp, #4
   313a8:	4620      	mov	r0, r4
   313aa:	f7ff fc70 	bl	30c8e <net_pkt_get_data>
	if (!tcp_hdr) {
   313ae:	4605      	mov	r5, r0
   313b0:	2800      	cmp	r0, #0
   313b2:	d0f4      	beq.n	3139e <net_tcp_send_pkt+0x3e>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   313b4:	3008      	adds	r0, #8
   313b6:	f7ff fee8 	bl	3118a <sys_get_be32>
   313ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   313bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   313c0:	4298      	cmp	r0, r3
   313c2:	d00a      	beq.n	313da <net_tcp_send_pkt+0x7a>
		tcp_hdr->chksum = 0U;
   313c4:	742e      	strb	r6, [r5, #16]
   313c6:	746e      	strb	r6, [r5, #17]
		calc_chksum = true;
   313c8:	2601      	movs	r6, #1
	sys_put_be16(val >> 16, dst);
   313ca:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   313cc:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   313ce:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   313d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   313d4:	7229      	strb	r1, [r5, #8]
   313d6:	72aa      	strb	r2, [r5, #10]
	dst[1] = val;
   313d8:	72eb      	strb	r3, [r5, #11]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   313da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   313dc:	e9d3 3225 	ldrd	r3, r2, [r3, #148]	; 0x94
   313e0:	429a      	cmp	r2, r3
   313e2:	d009      	beq.n	313f8 <net_tcp_send_pkt+0x98>
		(tcp_hdr->flags & NET_TCP_ACK) == 0U) {
   313e4:	7b6b      	ldrb	r3, [r5, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   313e6:	f013 0210 	ands.w	r2, r3, #16
   313ea:	d105      	bne.n	313f8 <net_tcp_send_pkt+0x98>
		calc_chksum = true;
   313ec:	2601      	movs	r6, #1
		tcp_hdr->flags |= NET_TCP_ACK;
   313ee:	f043 0310 	orr.w	r3, r3, #16
   313f2:	736b      	strb	r3, [r5, #13]
		tcp_hdr->chksum = 0U;
   313f4:	742a      	strb	r2, [r5, #16]
   313f6:	746a      	strb	r2, [r5, #17]
	net_pkt_set_data(pkt, &tcp_access);
   313f8:	a901      	add	r1, sp, #4
   313fa:	4620      	mov	r0, r4
   313fc:	f7ff fc68 	bl	30cd0 <net_pkt_set_data>
	if (calc_chksum) {
   31400:	b19e      	cbz	r6, 3142a <net_tcp_send_pkt+0xca>
		net_pkt_cursor_init(pkt);
   31402:	4620      	mov	r0, r4
   31404:	f7ff fa65 	bl	308d2 <net_pkt_cursor_init>
			     net_pkt_ip_opts_len(pkt));
   31408:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   3140c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   31410:	4620      	mov	r0, r4
   31412:	4419      	add	r1, r3
   31414:	f7ff fae7 	bl	309e6 <net_pkt_skip>
	return net_calc_chksum(pkt, IPPROTO_UDP);
}

static inline u16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   31418:	2106      	movs	r1, #6
   3141a:	4620      	mov	r0, r4
   3141c:	f7fe ff91 	bl	30342 <net_calc_chksum>
		net_pkt_set_data(pkt, &tcp_access);
   31420:	a901      	add	r1, sp, #4
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   31422:	8228      	strh	r0, [r5, #16]
		net_pkt_set_data(pkt, &tcp_access);
   31424:	4620      	mov	r0, r4
   31426:	f7ff fc53 	bl	30cd0 <net_pkt_set_data>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   3142a:	7b6a      	ldrb	r2, [r5, #13]
   3142c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3142e:	07d2      	lsls	r2, r2, #31
		ctx->tcp->fin_sent = 1U;
   31430:	bf48      	it	mi
   31432:	f893 20be 	ldrbmi.w	r2, [r3, #190]	; 0xbe
	ret = net_send_data(pkt);
   31436:	4620      	mov	r0, r4
		ctx->tcp->fin_sent = 1U;
   31438:	bf44      	itt	mi
   3143a:	f042 0202 	orrmi.w	r2, r2, #2
   3143e:	f883 20be 	strbmi.w	r2, [r3, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   31442:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   31446:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ret = net_send_data(pkt);
   3144a:	f7fe fe2f 	bl	300ac <net_send_data>
	if (ret == 0) {
   3144e:	2800      	cmp	r0, #0
   31450:	d1a7      	bne.n	313a2 <net_tcp_send_pkt+0x42>
	pkt->sent_or_eof = sent;
   31452:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   31456:	f043 0302 	orr.w	r3, r3, #2
   3145a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   3145e:	e7a0      	b.n	313a2 <net_tcp_send_pkt+0x42>
		return -EINVAL;
   31460:	f06f 0015 	mvn.w	r0, #21
   31464:	e79d      	b.n	313a2 <net_tcp_send_pkt+0x42>

00031466 <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   31466:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   31468:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3146a:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   3146c:	2b00      	cmp	r3, #0
   3146e:	d043      	beq.n	314f8 <tcp_retry_expired+0x92>
		tcp->retry_timeout_shift++;
   31470:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   31474:	1c53      	adds	r3, r2, #1
   31476:	f003 031f 	and.w	r3, r3, #31
   3147a:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   3147e:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   31480:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   31484:	d914      	bls.n	314b0 <tcp_retry_expired+0x4a>
	struct net_context *ctx = tcp->context;
   31486:	f850 5c48 	ldr.w	r5, [r0, #-72]
	if (ctx->recv_cb) {
   3148a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   3148c:	b156      	cbz	r6, 314a4 <tcp_retry_expired+0x3e>
		ctx->recv_cb(ctx, NULL, NULL, NULL, -ECONNRESET,
   3148e:	f850 3c44 	ldr.w	r3, [r0, #-68]
   31492:	4628      	mov	r0, r5
   31494:	9301      	str	r3, [sp, #4]
   31496:	f06f 0367 	mvn.w	r3, #103	; 0x67
   3149a:	9300      	str	r3, [sp, #0]
   3149c:	2300      	movs	r3, #0
   3149e:	461a      	mov	r2, r3
   314a0:	4619      	mov	r1, r3
   314a2:	47b0      	blx	r6
	net_context_unref(ctx);
   314a4:	4628      	mov	r0, r5
}
   314a6:	b002      	add	sp, #8
   314a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_context_unref(tcp->context);
   314ac:	f7ff b816 	b.w	304dc <net_context_unref>
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   314b0:	21c8      	movs	r1, #200	; 0xc8
   314b2:	4099      	lsls	r1, r3
   314b4:	f7e9 fe60 	bl	1b178 <k_delayed_work_submit>
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   314b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   314ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   314be:	e8d2 2faf 	lda	r2, [r2]
		if (k_work_pending(net_pkt_work(pkt))) {
   314c2:	f012 0201 	ands.w	r2, r2, #1
   314c6:	d120      	bne.n	3150a <tcp_retry_expired+0xa4>
	pkt->pkt_queued = send;
   314c8:	7999      	ldrb	r1, [r3, #6]
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   314ca:	f1a3 0438 	sub.w	r4, r3, #56	; 0x38
   314ce:	f041 0101 	orr.w	r1, r1, #1
   314d2:	7199      	strb	r1, [r3, #6]
	pkt->tcp_first_msg = is_1st;
   314d4:	7a59      	ldrb	r1, [r3, #9]
			net_pkt_ref(pkt);
   314d6:	4620      	mov	r0, r4
   314d8:	f362 0100 	bfi	r1, r2, #0, #1
   314dc:	7259      	strb	r1, [r3, #9]
   314de:	f7ff f97b 	bl	307d8 <net_pkt_ref>
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   314e2:	4620      	mov	r0, r4
   314e4:	f7ff ff3c 	bl	31360 <net_tcp_send_pkt>
   314e8:	2800      	cmp	r0, #0
   314ea:	da0e      	bge.n	3150a <tcp_retry_expired+0xa4>
			net_pkt_unref(pkt);
   314ec:	4620      	mov	r0, r4
}
   314ee:	b002      	add	sp, #8
   314f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   314f4:	f7ff b989 	b.w	3080a <net_pkt_unref>
		if (tcp->fin_sent && tcp->fin_rcvd) {
   314f8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   314fc:	f003 0306 	and.w	r3, r3, #6
   31500:	2b06      	cmp	r3, #6
   31502:	d102      	bne.n	3150a <tcp_retry_expired+0xa4>
			net_context_unref(tcp->context);
   31504:	f850 0c48 	ldr.w	r0, [r0, #-72]
   31508:	e7cd      	b.n	314a6 <tcp_retry_expired+0x40>
}
   3150a:	b002      	add	sp, #8
   3150c:	bd70      	pop	{r4, r5, r6, pc}

0003150e <net_tcp_send_data>:
{
   3150e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31512:	4680      	mov	r8, r0
   31514:	460e      	mov	r6, r1
   31516:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   31518:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   3151a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
   3151e:	b984      	cbnz	r4, 31542 <net_tcp_send_data+0x34>
	if (cb) {
   31520:	bb46      	cbnz	r6, 31574 <net_tcp_send_data+0x66>
		cb(context, 0, user_data);
   31522:	2500      	movs	r5, #0
   31524:	e023      	b.n	3156e <net_tcp_send_data+0x60>
	pkt->pkt_queued = send;
   31526:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   3152a:	f043 0301 	orr.w	r3, r3, #1
   3152e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	pkt->tcp_first_msg = is_1st;
   31532:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   31536:	f36f 0300 	bfc	r3, #0, #1
   3153a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3153e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	return node->next;
   31540:	e7ed      	b.n	3151e <net_tcp_send_data+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   31542:	3c38      	subs	r4, #56	; 0x38
   31544:	2c00      	cmp	r4, #0
   31546:	d0eb      	beq.n	31520 <net_tcp_send_data+0x12>
	return pkt->pkt_queued;
   31548:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (net_pkt_queued(pkt)) {
   3154c:	07da      	lsls	r2, r3, #31
   3154e:	d4f6      	bmi.n	3153e <net_tcp_send_data+0x30>
	return pkt->tcp_first_msg;
   31550:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			if (!net_pkt_tcp_1st_msg(pkt)) {
   31554:	07db      	lsls	r3, r3, #31
   31556:	d402      	bmi.n	3155e <net_tcp_send_data+0x50>
				net_pkt_ref(pkt);
   31558:	4620      	mov	r0, r4
   3155a:	f7ff f93d 	bl	307d8 <net_pkt_ref>
		ret = net_tcp_send_pkt(pkt);
   3155e:	4620      	mov	r0, r4
   31560:	f7ff fefe 	bl	31360 <net_tcp_send_pkt>
		if (ret < 0) {
   31564:	1e05      	subs	r5, r0, #0
   31566:	dade      	bge.n	31526 <net_tcp_send_data+0x18>
				net_pkt_unref(pkt);
   31568:	4620      	mov	r0, r4
   3156a:	f7ff f94e 	bl	3080a <net_pkt_unref>
}
   3156e:	4628      	mov	r0, r5
   31570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cb(context, 0, user_data);
   31574:	463a      	mov	r2, r7
   31576:	2100      	movs	r1, #0
   31578:	4640      	mov	r0, r8
   3157a:	47b0      	blx	r6
   3157c:	e7d1      	b.n	31522 <net_tcp_send_data+0x14>

0003157e <net_tcp_init>:
}
   3157e:	4770      	bx	lr

00031580 <net_tcp_prepare_segment>:
{
   31580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31584:	b087      	sub	sp, #28
   31586:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   31588:	4604      	mov	r4, r0
   3158a:	460d      	mov	r5, r1
   3158c:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   3158e:	2100      	movs	r1, #0
   31590:	2218      	movs	r2, #24
   31592:	4668      	mov	r0, sp
{
   31594:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   31596:	f002 f94d 	bl	33834 <memset>
	if (!local) {
   3159a:	b90e      	cbnz	r6, 315a0 <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   3159c:	6826      	ldr	r6, [r4, #0]
   3159e:	361c      	adds	r6, #28
	if (flags & NET_TCP_ACK) {
   315a0:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   315a2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
	if (flags & NET_TCP_ACK) {
   315a6:	d50f      	bpl.n	315c8 <net_tcp_prepare_segment+0x48>
   315a8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   315ac:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   315b0:	2b07      	cmp	r3, #7
   315b2:	d13d      	bne.n	31630 <net_tcp_prepare_segment+0xb0>
			if (flags & NET_TCP_FIN) {
   315b4:	07ea      	lsls	r2, r5, #31
   315b6:	d503      	bpl.n	315c0 <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   315b8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   315bc:	2109      	movs	r1, #9
   315be:	e000      	b.n	315c2 <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   315c0:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   315c2:	4620      	mov	r0, r4
   315c4:	f7ea f808 	bl	1b5d8 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   315c8:	07eb      	lsls	r3, r5, #31
   315ca:	d510      	bpl.n	315ee <net_tcp_prepare_segment+0x6e>
   315cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		flags |= NET_TCP_ACK;
   315d0:	f045 0510 	orr.w	r5, r5, #16
   315d4:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   315d8:	330d      	adds	r3, #13
   315da:	f003 030f 	and.w	r3, r3, #15
   315de:	2b01      	cmp	r3, #1
		seq++;
   315e0:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   315e4:	d803      	bhi.n	315ee <net_tcp_prepare_segment+0x6e>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   315e6:	2107      	movs	r1, #7
   315e8:	4620      	mov	r0, r4
   315ea:	f7e9 fff5 	bl	1b5d8 <net_tcp_change_state>
	segment.dst_addr = remote;
   315ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	return tcp->recv_wnd;
   315f0:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
	segment.dst_addr = remote;
   315f4:	9205      	str	r2, [sp, #20]
	segment.seq = tcp->send_seq;
   315f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	segment.wnd = wnd;
   315fa:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   315fe:	9200      	str	r2, [sp, #0]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   31600:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.ack = tcp->send_ack;
   31602:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   31606:	4669      	mov	r1, sp
	segment.ack = tcp->send_ack;
   31608:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   3160a:	6820      	ldr	r0, [r4, #0]
   3160c:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   3160e:	9604      	str	r6, [sp, #16]
	segment.flags = flags;
   31610:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   31614:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   31618:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   3161c:	f7e9 fe80 	bl	1b320 <prepare_segment.isra.21>
	if (status < 0) {
   31620:	2800      	cmp	r0, #0
	return 0;
   31622:	bfa4      	itt	ge
   31624:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   31626:	f8c4 7090 	strge.w	r7, [r4, #144]	; 0x90
}
   3162a:	b007      	add	sp, #28
   3162c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   31630:	2b08      	cmp	r3, #8
   31632:	d0c3      	beq.n	315bc <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   31634:	2b05      	cmp	r3, #5
   31636:	d1c7      	bne.n	315c8 <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   31638:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   3163c:	f045 0501 	orr.w	r5, r5, #1
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   31640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   31644:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   31648:	2106      	movs	r1, #6
   3164a:	e7ba      	b.n	315c2 <net_tcp_prepare_segment+0x42>

0003164c <net_tcp_prepare_ack>:
{
   3164c:	b570      	push	{r4, r5, r6, lr}
   3164e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   31652:	b088      	sub	sp, #32
   31654:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   31658:	2b03      	cmp	r3, #3
{
   3165a:	4604      	mov	r4, r0
   3165c:	460d      	mov	r5, r1
   3165e:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   31660:	d00c      	beq.n	3167c <net_tcp_prepare_ack+0x30>
   31662:	d304      	bcc.n	3166e <net_tcp_prepare_ack+0x22>
   31664:	330a      	adds	r3, #10
   31666:	f003 030f 	and.w	r3, r3, #15
   3166a:	2b01      	cmp	r3, #1
   3166c:	d915      	bls.n	3169a <net_tcp_prepare_ack+0x4e>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   3166e:	2300      	movs	r3, #0
   31670:	e9cd 5601 	strd	r5, r6, [sp, #4]
   31674:	9300      	str	r3, [sp, #0]
   31676:	461a      	mov	r2, r3
   31678:	2110      	movs	r1, #16
   3167a:	e00c      	b.n	31696 <net_tcp_prepare_ack+0x4a>
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   3167c:	f10d 0217 	add.w	r2, sp, #23
   31680:	a906      	add	r1, sp, #24
   31682:	f7ff fdd6 	bl	31232 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   31686:	2300      	movs	r3, #0
   31688:	2112      	movs	r1, #18
   3168a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   3168e:	9300      	str	r3, [sp, #0]
   31690:	f89d 3017 	ldrb.w	r3, [sp, #23]
   31694:	aa06      	add	r2, sp, #24
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   31696:	4620      	mov	r0, r4
   31698:	e005      	b.n	316a6 <net_tcp_prepare_ack+0x5a>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   3169a:	2300      	movs	r3, #0
   3169c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   316a0:	461a      	mov	r2, r3
   316a2:	2111      	movs	r1, #17
   316a4:	9300      	str	r3, [sp, #0]
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   316a6:	f7ff ff6b 	bl	31580 <net_tcp_prepare_segment>
}
   316aa:	b008      	add	sp, #32
   316ac:	bd70      	pop	{r4, r5, r6, pc}

000316ae <send_ack.isra.34>:
	struct net_pkt *pkt = NULL;
   316ae:	2300      	movs	r3, #0
static int send_ack(struct net_context *context,
   316b0:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   316b2:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   316b4:	b91a      	cbnz	r2, 316be <send_ack.isra.34+0x10>
   316b6:	e9d0 4325 	ldrd	r4, r3, [r0, #148]	; 0x94
   316ba:	429c      	cmp	r4, r3
   316bc:	d00f      	beq.n	316de <send_ack.isra.34+0x30>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   316be:	aa01      	add	r2, sp, #4
   316c0:	f7ff ffc4 	bl	3164c <net_tcp_prepare_ack>
	if (ret) {
   316c4:	4604      	mov	r4, r0
   316c6:	b938      	cbnz	r0, 316d8 <send_ack.isra.34+0x2a>
	ret = net_tcp_send_pkt(pkt);
   316c8:	9801      	ldr	r0, [sp, #4]
   316ca:	f7ff fe49 	bl	31360 <net_tcp_send_pkt>
	if (ret < 0) {
   316ce:	1e04      	subs	r4, r0, #0
   316d0:	da02      	bge.n	316d8 <send_ack.isra.34+0x2a>
		net_pkt_unref(pkt);
   316d2:	9801      	ldr	r0, [sp, #4]
   316d4:	f7ff f899 	bl	3080a <net_pkt_unref>
}
   316d8:	4620      	mov	r0, r4
   316da:	b002      	add	sp, #8
   316dc:	bd10      	pop	{r4, pc}
		return 0;
   316de:	4614      	mov	r4, r2
   316e0:	e7fa      	b.n	316d8 <send_ack.isra.34+0x2a>

000316e2 <send_syn_segment.isra.35>:
static inline int send_syn_segment(struct net_context *context,
   316e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   316e4:	461c      	mov	r4, r3
	struct net_pkt *pkt = NULL;
   316e6:	2300      	movs	r3, #0
static inline int send_syn_segment(struct net_context *context,
   316e8:	b089      	sub	sp, #36	; 0x24
	if (flags == NET_TCP_SYN) {
   316ea:	2c02      	cmp	r4, #2
static inline int send_syn_segment(struct net_context *context,
   316ec:	4605      	mov	r5, r0
   316ee:	460e      	mov	r6, r1
   316f0:	4617      	mov	r7, r2
	struct net_pkt *pkt = NULL;
   316f2:	9305      	str	r3, [sp, #20]
	u8_t optionlen = 0U;
   316f4:	f88d 3013 	strb.w	r3, [sp, #19]
	if (flags == NET_TCP_SYN) {
   316f8:	d105      	bne.n	31706 <send_syn_segment.isra.35+0x24>
		net_tcp_set_syn_opt(context->tcp, options, &optionlen);
   316fa:	f10d 0213 	add.w	r2, sp, #19
   316fe:	a906      	add	r1, sp, #24
   31700:	6800      	ldr	r0, [r0, #0]
   31702:	f7ff fd96 	bl	31232 <net_tcp_set_syn_opt>
	ret = net_tcp_prepare_segment(context->tcp, flags, options, optionlen,
   31706:	ab05      	add	r3, sp, #20
   31708:	e9cd 7301 	strd	r7, r3, [sp, #4]
   3170c:	b2e1      	uxtb	r1, r4
   3170e:	9600      	str	r6, [sp, #0]
   31710:	f89d 3013 	ldrb.w	r3, [sp, #19]
   31714:	aa06      	add	r2, sp, #24
   31716:	6828      	ldr	r0, [r5, #0]
   31718:	f7ff ff32 	bl	31580 <net_tcp_prepare_segment>
	if (ret) {
   3171c:	4604      	mov	r4, r0
   3171e:	b938      	cbnz	r0, 31730 <send_syn_segment.isra.35+0x4e>
	ret = net_send_data(pkt);
   31720:	9805      	ldr	r0, [sp, #20]
   31722:	f7fe fcc3 	bl	300ac <net_send_data>
	if (ret < 0) {
   31726:	1e04      	subs	r4, r0, #0
   31728:	da05      	bge.n	31736 <send_syn_segment.isra.35+0x54>
		net_pkt_unref(pkt);
   3172a:	9805      	ldr	r0, [sp, #20]
   3172c:	f7ff f86d 	bl	3080a <net_pkt_unref>
}
   31730:	4620      	mov	r0, r4
   31732:	b009      	add	sp, #36	; 0x24
   31734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pkt->sent_or_eof = sent;
   31736:	9a05      	ldr	r2, [sp, #20]
   31738:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   3173c:	f043 0302 	orr.w	r3, r3, #2
   31740:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
	context->tcp->send_seq++;
   31744:	682a      	ldr	r2, [r5, #0]
   31746:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   3174a:	3301      	adds	r3, #1
   3174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	return ret;
   31750:	e7ee      	b.n	31730 <send_syn_segment.isra.35+0x4e>

00031752 <net_tcp_ack_received>:
{
   31752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   31756:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
   31758:	b08b      	sub	sp, #44	; 0x2c
	return (s32_t)(seq1 - seq2);
   3175a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   3175e:	4680      	mov	r8, r0
   31760:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   31762:	2b00      	cmp	r3, #0
{
   31764:	4689      	mov	r9, r1
		return false;
   31766:	f04f 0700 	mov.w	r7, #0
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   3176a:	dc22      	bgt.n	317b2 <net_tcp_ack_received+0x60>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   3176c:	f04f 0b14 	mov.w	fp, #20
Z_GENLIST_IS_EMPTY(slist)
   31770:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
	while (!sys_slist_is_empty(list)) {
   31774:	bb0c      	cbnz	r4, 317ba <net_tcp_ack_received+0x68>
	if (valid_ack) {
   31776:	2f00      	cmp	r7, #0
   31778:	f000 80a6 	beq.w	318c8 <net_tcp_ack_received+0x176>
		restart_timer(ctx->tcp);
   3177c:	f8d8 403c 	ldr.w	r4, [r8, #60]	; 0x3c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   31780:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   31784:	f104 0048 	add.w	r0, r4, #72	; 0x48
   31788:	2b00      	cmp	r3, #0
   3178a:	f000 8083 	beq.w	31894 <net_tcp_ack_received+0x142>
		tcp->flags |= NET_TCP_RETRYING;
   3178e:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   31792:	21c8      	movs	r1, #200	; 0xc8
		tcp->flags |= NET_TCP_RETRYING;
   31794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   31798:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
		tcp->retry_timeout_shift = 0U;
   3179c:	f36f 0304 	bfc	r3, #0, #5
   317a0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   317a4:	f7e9 fce8 	bl	1b178 <k_delayed_work_submit>
	(void)net_tcp_send_data(context, NULL, NULL);
   317a8:	2200      	movs	r2, #0
   317aa:	4640      	mov	r0, r8
   317ac:	4611      	mov	r1, r2
   317ae:	f7ff feae 	bl	3150e <net_tcp_send_data>
}
   317b2:	4638      	mov	r0, r7
   317b4:	b00b      	add	sp, #44	; 0x2c
   317b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   317ba:	f1a4 0638 	sub.w	r6, r4, #56	; 0x38
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   317be:	ab05      	add	r3, sp, #20
		net_pkt_cursor_init(pkt);
   317c0:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   317c2:	e9cd 3b03 	strd	r3, fp, [sp, #12]
		net_pkt_cursor_init(pkt);
   317c6:	f7ff f884 	bl	308d2 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   317ca:	7963      	ldrb	r3, [r4, #5]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   317cc:	7921      	ldrb	r1, [r4, #4]
   317ce:	f043 0301 	orr.w	r3, r3, #1
   317d2:	7163      	strb	r3, [r4, #5]
				 net_pkt_ip_opts_len(pkt))) {
   317d4:	7ae3      	ldrb	r3, [r4, #11]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   317d6:	4630      	mov	r0, r6
   317d8:	4419      	add	r1, r3
   317da:	f7ff f904 	bl	309e6 <net_pkt_skip>
   317de:	b170      	cbz	r0, 317fe <net_tcp_ack_received+0xac>
Z_GENLIST_REMOVE(slist, snode)
   317e0:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   317e4:	6823      	ldr	r3, [r4, #0]
   317e6:	4294      	cmp	r4, r2
	list->head = node;
   317e8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   317ec:	bf08      	it	eq
   317ee:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   317f2:	2300      	movs	r3, #0
			net_pkt_unref(pkt);
   317f4:	4630      	mov	r0, r6
   317f6:	6023      	str	r3, [r4, #0]
   317f8:	f7ff f807 	bl	3080a <net_pkt_unref>
			continue;
   317fc:	e7b8      	b.n	31770 <net_tcp_ack_received+0x1e>
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   317fe:	a903      	add	r1, sp, #12
   31800:	4630      	mov	r0, r6
   31802:	f7ff fa44 	bl	30c8e <net_pkt_get_data>
		if (!tcp_hdr) {
   31806:	2800      	cmp	r0, #0
   31808:	d0ea      	beq.n	317e0 <net_tcp_ack_received+0x8e>
	return net_pkt_skip(pkt, access->size);
   3180a:	9904      	ldr	r1, [sp, #16]
   3180c:	9001      	str	r0, [sp, #4]
   3180e:	4630      	mov	r0, r6
   31810:	f7ff f8e9 	bl	309e6 <net_pkt_skip>
		seq_len = net_pkt_remaining_data(pkt);
   31814:	4630      	mov	r0, r6
   31816:	f7ff f960 	bl	30ada <net_pkt_remaining_data>
   3181a:	4682      	mov	sl, r0
		if (tcp_hdr->flags & NET_TCP_SYN) {
   3181c:	9a01      	ldr	r2, [sp, #4]
   3181e:	7b53      	ldrb	r3, [r2, #13]
   31820:	0799      	lsls	r1, r3, #30
			seq_len += 1U;
   31822:	bf48      	it	mi
   31824:	f100 0a01 	addmi.w	sl, r0, #1
		if (tcp_hdr->flags & NET_TCP_FIN) {
   31828:	f013 0301 	ands.w	r3, r3, #1
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   3182c:	f102 0004 	add.w	r0, r2, #4
			seq_len += 1U;
   31830:	bf18      	it	ne
   31832:	f10a 0a01 	addne.w	sl, sl, #1
   31836:	9301      	str	r3, [sp, #4]
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   31838:	f7ff fca7 	bl	3118a <sys_get_be32>
   3183c:	f109 0201 	add.w	r2, r9, #1
   31840:	1a10      	subs	r0, r2, r0
   31842:	eba0 010a 	sub.w	r1, r0, sl
		if (!net_tcp_seq_greater(ack, last_seq)) {
   31846:	2900      	cmp	r1, #0
   31848:	dd95      	ble.n	31776 <net_tcp_ack_received+0x24>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   3184a:	9b01      	ldr	r3, [sp, #4]
   3184c:	b14b      	cbz	r3, 31862 <net_tcp_ack_received+0x110>
   3184e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   31852:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   31856:	2b07      	cmp	r3, #7
   31858:	d118      	bne.n	3188c <net_tcp_ack_received+0x13a>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   3185a:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   3185c:	4628      	mov	r0, r5
   3185e:	f7e9 febb 	bl	1b5d8 <net_tcp_change_state>
Z_GENLIST_REMOVE(slist, snode)
   31862:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   31866:	6823      	ldr	r3, [r4, #0]
   31868:	4294      	cmp	r4, r2
	parent->next = child;
   3186a:	f04f 0200 	mov.w	r2, #0
	list->head = node;
   3186e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   31872:	bf08      	it	eq
   31874:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	pkt->sent_or_eof = sent;
   31878:	7963      	ldrb	r3, [r4, #5]
	parent->next = child;
   3187a:	6022      	str	r2, [r4, #0]
   3187c:	f362 0341 	bfi	r3, r2, #1, #1
   31880:	7163      	strb	r3, [r4, #5]
		net_pkt_unref(pkt);
   31882:	4630      	mov	r0, r6
   31884:	f7fe ffc1 	bl	3080a <net_pkt_unref>
		valid_ack = true;
   31888:	2701      	movs	r7, #1
   3188a:	e771      	b.n	31770 <net_tcp_ack_received+0x1e>
			} else if (s == NET_TCP_CLOSING) {
   3188c:	2b0a      	cmp	r3, #10
   3188e:	d1e8      	bne.n	31862 <net_tcp_ack_received+0x110>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   31890:	2109      	movs	r1, #9
   31892:	e7e3      	b.n	3185c <net_tcp_ack_received+0x10a>
			(tcp->fin_sent && tcp->fin_rcvd)) {
   31894:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
	} else if (CONFIG_NET_TCP_TIME_WAIT_DELAY != 0 &&
   31898:	f003 0306 	and.w	r3, r3, #6
   3189c:	2b06      	cmp	r3, #6
   3189e:	d106      	bne.n	318ae <net_tcp_ack_received+0x15c>
		k_delayed_work_submit(&tcp->retry_timer,
   318a0:	21fa      	movs	r1, #250	; 0xfa
   318a2:	f7e9 fc69 	bl	1b178 <k_delayed_work_submit>
		net_context_ref(tcp->context);
   318a6:	6820      	ldr	r0, [r4, #0]
   318a8:	f7fe fe0e 	bl	304c8 <net_context_ref>
   318ac:	e77c      	b.n	317a8 <net_tcp_ack_received+0x56>
		k_delayed_work_cancel(&tcp->retry_timer);
   318ae:	f7f8 faf3 	bl	29e98 <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   318b2:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   318b6:	f3c3 1247 	ubfx	r2, r3, #5, #8
   318ba:	f022 0210 	bic.w	r2, r2, #16
   318be:	f362 134c 	bfi	r3, r2, #5, #8
   318c2:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   318c6:	e76f      	b.n	317a8 <net_tcp_ack_received+0x56>
	return true;
   318c8:	2701      	movs	r7, #1
   318ca:	e772      	b.n	317b2 <net_tcp_ack_received+0x60>

000318cc <handle_timewait_timeout>:
   318cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   318ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   318d0:	f3c3 3343 	ubfx	r3, r3, #13, #4
   318d4:	2b09      	cmp	r3, #9
{
   318d6:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   318d8:	d116      	bne.n	31908 <handle_timewait_timeout+0x3c>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   318da:	3868      	subs	r0, #104	; 0x68
   318dc:	2100      	movs	r1, #0
   318de:	f7e9 fe7b 	bl	1b5d8 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   318e2:	f854 0c68 	ldr.w	r0, [r4, #-104]
   318e6:	6b05      	ldr	r5, [r0, #48]	; 0x30
   318e8:	b13d      	cbz	r5, 318fa <handle_timewait_timeout+0x2e>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   318ea:	f854 3c64 	ldr.w	r3, [r4, #-100]
   318ee:	9301      	str	r3, [sp, #4]
   318f0:	2300      	movs	r3, #0
   318f2:	9300      	str	r3, [sp, #0]
   318f4:	461a      	mov	r2, r3
   318f6:	4619      	mov	r1, r3
   318f8:	47a8      	blx	r5
		net_context_unref(tcp->context);
   318fa:	f854 0c68 	ldr.w	r0, [r4, #-104]
}
   318fe:	b003      	add	sp, #12
   31900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   31904:	f7fe bdea 	b.w	304dc <net_context_unref>
}
   31908:	b003      	add	sp, #12
   3190a:	bd30      	pop	{r4, r5, pc}

0003190c <handle_ack_timeout>:
   3190c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
   31910:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   31912:	f3c3 3343 	ubfx	r3, r3, #13, #4
   31916:	2b06      	cmp	r3, #6
{
   31918:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   3191a:	d116      	bne.n	3194a <handle_ack_timeout+0x3e>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   3191c:	3808      	subs	r0, #8
   3191e:	2100      	movs	r1, #0
   31920:	f7e9 fe5a 	bl	1b5d8 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   31924:	f854 0c08 	ldr.w	r0, [r4, #-8]
   31928:	6b05      	ldr	r5, [r0, #48]	; 0x30
   3192a:	b13d      	cbz	r5, 3193c <handle_ack_timeout+0x30>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   3192c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   31930:	9301      	str	r3, [sp, #4]
   31932:	2300      	movs	r3, #0
   31934:	9300      	str	r3, [sp, #0]
   31936:	461a      	mov	r2, r3
   31938:	4619      	mov	r1, r3
   3193a:	47a8      	blx	r5
		net_context_unref(tcp->context);
   3193c:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   31940:	b003      	add	sp, #12
   31942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   31946:	f7fe bdc9 	b.w	304dc <net_context_unref>
}
   3194a:	b003      	add	sp, #12
   3194c:	bd30      	pop	{r4, r5, pc}

0003194e <net_tcp_validate_seq>:
{
   3194e:	b510      	push	{r4, lr}
   31950:	4604      	mov	r4, r0
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   31952:	1d08      	adds	r0, r1, #4
   31954:	f7ff fc19 	bl	3118a <sys_get_be32>
   31958:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   3195c:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   3195e:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   31960:	bfa9      	itett	ge
   31962:	f8b4 30b8 	ldrhge.w	r3, [r4, #184]	; 0xb8
				tcp->send_ack) >= 0) &&
   31966:	2000      	movlt	r0, #0
   31968:	189b      	addge	r3, r3, r2
   3196a:	1ac0      	subge	r0, r0, r3
   3196c:	bfa8      	it	ge
   3196e:	0fc0      	lsrge	r0, r0, #31
}
   31970:	bd10      	pop	{r4, pc}

00031972 <net_tcp_finalize>:
{
   31972:	b530      	push	{r4, r5, lr}
   31974:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   31976:	ab03      	add	r3, sp, #12
   31978:	9301      	str	r3, [sp, #4]
   3197a:	2314      	movs	r3, #20
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   3197c:	a901      	add	r1, sp, #4
{
   3197e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   31980:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   31982:	f7ff f984 	bl	30c8e <net_pkt_get_data>
	if (!tcp_hdr) {
   31986:	4604      	mov	r4, r0
   31988:	b188      	cbz	r0, 319ae <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
   3198a:	2300      	movs	r3, #0
   3198c:	7403      	strb	r3, [r0, #16]
   3198e:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   31990:	6a28      	ldr	r0, [r5, #32]
   31992:	f7fe fcb6 	bl	30302 <net_if_need_calc_tx_checksum>
   31996:	b120      	cbz	r0, 319a2 <net_tcp_finalize+0x30>
   31998:	2106      	movs	r1, #6
   3199a:	4628      	mov	r0, r5
   3199c:	f7fe fcd1 	bl	30342 <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   319a0:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
   319a2:	a901      	add	r1, sp, #4
   319a4:	4628      	mov	r0, r5
   319a6:	f7ff f993 	bl	30cd0 <net_pkt_set_data>
}
   319aa:	b009      	add	sp, #36	; 0x24
   319ac:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   319ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   319b2:	e7fa      	b.n	319aa <net_tcp_finalize+0x38>

000319b4 <net_tcp_parse_opts>:
{
   319b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   319b6:	4605      	mov	r5, r0
   319b8:	460c      	mov	r4, r1
   319ba:	4616      	mov	r6, r2
	while (opt_totlen) {
   319bc:	b174      	cbz	r4, 319dc <net_tcp_parse_opts+0x28>
	return net_pkt_read(pkt, data, 1);
   319be:	2201      	movs	r2, #1
   319c0:	f10d 0106 	add.w	r1, sp, #6
   319c4:	4628      	mov	r0, r5
   319c6:	f7ff f824 	bl	30a12 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt)) {
   319ca:	b118      	cbz	r0, 319d4 <net_tcp_parse_opts+0x20>
	return -EINVAL;
   319cc:	f06f 0015 	mvn.w	r0, #21
}
   319d0:	b002      	add	sp, #8
   319d2:	bd70      	pop	{r4, r5, r6, pc}
		if (opt == NET_TCP_END_OPT) {
   319d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
		opt_totlen--;
   319d8:	1e63      	subs	r3, r4, #1
		if (opt == NET_TCP_END_OPT) {
   319da:	b90a      	cbnz	r2, 319e0 <net_tcp_parse_opts+0x2c>
	return 0;
   319dc:	2000      	movs	r0, #0
   319de:	e7f7      	b.n	319d0 <net_tcp_parse_opts+0x1c>
		} else if (opt == NET_TCP_NOP_OPT) {
   319e0:	2a01      	cmp	r2, #1
   319e2:	d028      	beq.n	31a36 <net_tcp_parse_opts+0x82>
		if (!opt_totlen) {
   319e4:	2b00      	cmp	r3, #0
   319e6:	d0f1      	beq.n	319cc <net_tcp_parse_opts+0x18>
   319e8:	2201      	movs	r2, #1
   319ea:	f10d 0107 	add.w	r1, sp, #7
   319ee:	4628      	mov	r0, r5
   319f0:	f7ff f80f 	bl	30a12 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &optlen) || optlen < 2) {
   319f4:	2800      	cmp	r0, #0
   319f6:	d1e9      	bne.n	319cc <net_tcp_parse_opts+0x18>
   319f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   319fc:	2901      	cmp	r1, #1
   319fe:	d9e5      	bls.n	319cc <net_tcp_parse_opts+0x18>
		optlen -= 2U;
   31a00:	3902      	subs	r1, #2
   31a02:	b2c9      	uxtb	r1, r1
		opt_totlen--;
   31a04:	3c02      	subs	r4, #2
		if (opt_totlen < optlen) {
   31a06:	42a1      	cmp	r1, r4
		optlen -= 2U;
   31a08:	f88d 1007 	strb.w	r1, [sp, #7]
		if (opt_totlen < optlen) {
   31a0c:	dcde      	bgt.n	319cc <net_tcp_parse_opts+0x18>
		switch (opt) {
   31a0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   31a12:	2b02      	cmp	r3, #2
   31a14:	d10b      	bne.n	31a2e <net_tcp_parse_opts+0x7a>
			if (optlen != 2U) {
   31a16:	2902      	cmp	r1, #2
   31a18:	d1d8      	bne.n	319cc <net_tcp_parse_opts+0x18>
			if (net_pkt_read_be16(pkt, &opts->mss)) {
   31a1a:	4631      	mov	r1, r6
   31a1c:	4628      	mov	r0, r5
   31a1e:	f7ff f801 	bl	30a24 <net_pkt_read_be16>
			if (net_pkt_skip(pkt, optlen)) {
   31a22:	2800      	cmp	r0, #0
   31a24:	d1d2      	bne.n	319cc <net_tcp_parse_opts+0x18>
		opt_totlen -= optlen;
   31a26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   31a2a:	1ae4      	subs	r4, r4, r3
   31a2c:	e7c6      	b.n	319bc <net_tcp_parse_opts+0x8>
			if (net_pkt_skip(pkt, optlen)) {
   31a2e:	4628      	mov	r0, r5
   31a30:	f7fe ffd9 	bl	309e6 <net_pkt_skip>
   31a34:	e7f5      	b.n	31a22 <net_tcp_parse_opts+0x6e>
		opt_totlen--;
   31a36:	461c      	mov	r4, r3
   31a38:	e7c0      	b.n	319bc <net_tcp_parse_opts+0x8>

00031a3a <net_tcp_put>:
{
   31a3a:	b530      	push	{r4, r5, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31a3c:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   31a40:	b087      	sub	sp, #28
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31a42:	2b06      	cmp	r3, #6
{
   31a44:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31a46:	d145      	bne.n	31ad4 <net_tcp_put+0x9a>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   31a48:	f7e9 fbbe 	bl	1b1c8 <net_context_get_state>
   31a4c:	2802      	cmp	r0, #2
   31a4e:	d10f      	bne.n	31a70 <net_tcp_put+0x36>
		    && context->tcp
   31a50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   31a52:	b998      	cbnz	r0, 31a7c <net_tcp_put+0x42>
		if (context->tcp &&
   31a54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   31a56:	b143      	cbz	r3, 31a6a <net_tcp_put+0x30>
   31a58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   31a5c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   31a60:	2b02      	cmp	r3, #2
   31a62:	d102      	bne.n	31a6a <net_tcp_put+0x30>
			net_context_unref(context);
   31a64:	4620      	mov	r0, r4
   31a66:	f7fe fd39 	bl	304dc <net_context_unref>
		return -ENOTCONN;
   31a6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31a6e:	e020      	b.n	31ab2 <net_tcp_put+0x78>
		     net_context_get_state(context) == NET_CONTEXT_LISTENING)
   31a70:	4620      	mov	r0, r4
   31a72:	f7e9 fba9 	bl	1b1c8 <net_context_get_state>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   31a76:	2803      	cmp	r0, #3
   31a78:	d0ea      	beq.n	31a50 <net_tcp_put+0x16>
   31a7a:	e7eb      	b.n	31a54 <net_tcp_put+0x1a>
		    && !context->tcp->fin_rcvd) {
   31a7c:	f890 50be 	ldrb.w	r5, [r0, #190]	; 0xbe
   31a80:	f015 0504 	ands.w	r5, r5, #4
   31a84:	d1e6      	bne.n	31a54 <net_tcp_put+0x1a>
			k_delayed_work_submit(&context->tcp->fin_timer,
   31a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   31a8a:	3028      	adds	r0, #40	; 0x28
   31a8c:	f7e9 fb74 	bl	1b178 <k_delayed_work_submit>
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   31a90:	ab05      	add	r3, sp, #20
   31a92:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   31a94:	f104 0324 	add.w	r3, r4, #36	; 0x24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   31a98:	e9cd 5300 	strd	r5, r3, [sp]
   31a9c:	462a      	mov	r2, r5
   31a9e:	462b      	mov	r3, r5
   31aa0:	2101      	movs	r1, #1
   31aa2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	struct net_pkt *pkt = NULL;
   31aa4:	9505      	str	r5, [sp, #20]
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   31aa6:	f7ff fd6b 	bl	31580 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   31aaa:	b908      	cbnz	r0, 31ab0 <net_tcp_put+0x76>
   31aac:	9905      	ldr	r1, [sp, #20]
   31aae:	b911      	cbnz	r1, 31ab6 <net_tcp_put+0x7c>
			return 0;
   31ab0:	2000      	movs	r0, #0
}
   31ab2:	b007      	add	sp, #28
   31ab4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_IS_EMPTY(slist)
   31ab6:	4620      	mov	r0, r4
   31ab8:	f850 3f3c 	ldr.w	r3, [r0, #60]!
   31abc:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
	net_tcp_queue_pkt(ctx, pkt);
   31ac0:	f7ff fb77 	bl	311b2 <net_tcp_queue_pkt.isra.22>
	if (flush) {
   31ac4:	2d00      	cmp	r5, #0
   31ac6:	d1f3      	bne.n	31ab0 <net_tcp_put+0x76>
	(void)net_tcp_send_data(context, NULL, NULL);
   31ac8:	462a      	mov	r2, r5
   31aca:	4629      	mov	r1, r5
   31acc:	4620      	mov	r0, r4
   31ace:	f7ff fd1e 	bl	3150e <net_tcp_send_data>
   31ad2:	e7ed      	b.n	31ab0 <net_tcp_put+0x76>
	return -EOPNOTSUPP;
   31ad4:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   31ad8:	e7eb      	b.n	31ab2 <net_tcp_put+0x78>

00031ada <net_tcp_listen>:
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31ada:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   31ade:	b510      	push	{r4, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31ae0:	2b06      	cmp	r3, #6
{
   31ae2:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   31ae4:	d109      	bne.n	31afa <net_tcp_listen+0x20>
		net_tcp_change_state(context->tcp, NET_TCP_LISTEN);
   31ae6:	2101      	movs	r1, #1
   31ae8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   31aea:	f7e9 fd75 	bl	1b5d8 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_LISTENING);
   31aee:	4620      	mov	r0, r4
   31af0:	2103      	movs	r1, #3
   31af2:	f7e9 fb89 	bl	1b208 <net_context_set_state>
		return 0;
   31af6:	2000      	movs	r0, #0
}
   31af8:	bd10      	pop	{r4, pc}
	return -EOPNOTSUPP;
   31afa:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   31afe:	e7fb      	b.n	31af8 <net_tcp_listen+0x1e>

00031b00 <net_tcp_update_recv_wnd>:
	if (!context->tcp) {
   31b00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   31b02:	b14a      	cbz	r2, 31b18 <net_tcp_update_recv_wnd+0x18>
	new_win = context->tcp->recv_wnd + delta;
   31b04:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
   31b08:	4419      	add	r1, r3
	if (new_win < 0 || new_win > UINT16_MAX) {
   31b0a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   31b0e:	d206      	bcs.n	31b1e <net_tcp_update_recv_wnd+0x1e>
	context->tcp->recv_wnd = new_win;
   31b10:	f8a2 10b8 	strh.w	r1, [r2, #184]	; 0xb8
	return 0;
   31b14:	2000      	movs	r0, #0
   31b16:	4770      	bx	lr
		return -EPROTOTYPE;
   31b18:	f06f 006a 	mvn.w	r0, #106	; 0x6a
   31b1c:	4770      	bx	lr
		return -EINVAL;
   31b1e:	f06f 0015 	mvn.w	r0, #21
}
   31b22:	4770      	bx	lr

00031b24 <net_tcp_input>:

struct net_tcp_hdr *net_tcp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *tcp_access)
{
   31b24:	b570      	push	{r4, r5, r6, lr}
   31b26:	4604      	mov	r4, r0
	struct net_tcp_hdr *tcp_hdr;

	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   31b28:	6a00      	ldr	r0, [r0, #32]
{
   31b2a:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   31b2c:	f7fe fbeb 	bl	30306 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   31b30:	b940      	cbnz	r0, 31b44 <net_tcp_input+0x20>
	    net_calc_chksum_tcp(pkt) != 0U) {
		NET_DBG("DROP: checksum mismatch");
		goto drop;
	}

	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
   31b32:	4631      	mov	r1, r6
   31b34:	4620      	mov	r0, r4
   31b36:	f7ff f8aa 	bl	30c8e <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   31b3a:	4605      	mov	r5, r0
   31b3c:	b948      	cbnz	r0, 31b52 <net_tcp_input+0x2e>
		return tcp_hdr;
	}

drop:
	net_stats_update_tcp_seg_chkerr(net_pkt_iface(pkt));
	return NULL;
   31b3e:	2500      	movs	r5, #0
}
   31b40:	4628      	mov	r0, r5
   31b42:	bd70      	pop	{r4, r5, r6, pc}
   31b44:	2106      	movs	r1, #6
   31b46:	4620      	mov	r0, r4
   31b48:	f7fe fbfb 	bl	30342 <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   31b4c:	2800      	cmp	r0, #0
   31b4e:	d0f0      	beq.n	31b32 <net_tcp_input+0xe>
   31b50:	e7f5      	b.n	31b3e <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   31b52:	4631      	mov	r1, r6
   31b54:	4620      	mov	r0, r4
   31b56:	f7ff f8bb 	bl	30cd0 <net_pkt_set_data>
   31b5a:	2800      	cmp	r0, #0
   31b5c:	d0f0      	beq.n	31b40 <net_tcp_input+0x1c>
drop:
   31b5e:	e7ee      	b.n	31b3e <net_tcp_input+0x1a>

00031b60 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   31b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31b62:	2308      	movs	r3, #8
{
   31b64:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   31b66:	eb0d 0103 	add.w	r1, sp, r3
{
   31b6a:	4604      	mov	r4, r0
   31b6c:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31b6e:	f8cd d008 	str.w	sp, [sp, #8]
   31b72:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   31b74:	f7ff f88b 	bl	30c8e <net_pkt_get_data>
	if (!udp_hdr) {
   31b78:	b160      	cbz	r0, 31b94 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   31b7a:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   31b7c:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   31b7e:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   31b80:	7103      	strb	r3, [r0, #4]
   31b82:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   31b84:	7183      	strb	r3, [r0, #6]
   31b86:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   31b88:	a902      	add	r1, sp, #8
   31b8a:	4620      	mov	r0, r4
   31b8c:	f7ff f8a0 	bl	30cd0 <net_pkt_set_data>
}
   31b90:	b004      	add	sp, #16
   31b92:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   31b94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31b98:	e7fa      	b.n	31b90 <net_udp_create+0x30>

00031b9a <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31b9a:	2308      	movs	r3, #8
{
   31b9c:	b530      	push	{r4, r5, lr}
   31b9e:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   31ba0:	eb0d 0103 	add.w	r1, sp, r3
{
   31ba4:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   31ba6:	f8cd d008 	str.w	sp, [sp, #8]
   31baa:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   31bac:	f7ff f86f 	bl	30c8e <net_pkt_get_data>
	if (!udp_hdr) {
   31bb0:	4605      	mov	r5, r0
   31bb2:	b310      	cbz	r0, 31bfa <net_udp_finalize+0x60>
	size_t bytes = 0;
   31bb4:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   31bb6:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   31bb8:	b9da      	cbnz	r2, 31bf2 <net_udp_finalize+0x58>
   31bba:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	return pkt->ipv4_opts_len;
   31bbe:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   31bc2:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   31bc4:	440a      	add	r2, r1
   31bc6:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   31bc8:	ba5b      	rev16	r3, r3
   31bca:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   31bcc:	f7fe fb99 	bl	30302 <net_if_need_calc_tx_checksum>
   31bd0:	b148      	cbz	r0, 31be6 <net_udp_finalize+0x4c>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   31bd2:	2111      	movs	r1, #17
   31bd4:	4620      	mov	r0, r4
   31bd6:	f7fe fbb4 	bl	30342 <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   31bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31bde:	2800      	cmp	r0, #0
   31be0:	bf08      	it	eq
   31be2:	4618      	moveq	r0, r3
   31be4:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   31be6:	a902      	add	r1, sp, #8
   31be8:	4620      	mov	r0, r4
   31bea:	f7ff f871 	bl	30cd0 <net_pkt_set_data>
}
   31bee:	b005      	add	sp, #20
   31bf0:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   31bf2:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   31bf4:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   31bf6:	440b      	add	r3, r1
		buf = buf->frags;
   31bf8:	e7de      	b.n	31bb8 <net_udp_finalize+0x1e>
		return -ENOBUFS;
   31bfa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31bfe:	e7f6      	b.n	31bee <net_udp_finalize+0x54>

00031c00 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   31c00:	b570      	push	{r4, r5, r6, lr}
   31c02:	4604      	mov	r4, r0
   31c04:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   31c06:	f7ff f842 	bl	30c8e <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   31c0a:	4605      	mov	r5, r0
   31c0c:	b1f0      	cbz	r0, 31c4c <net_udp_input+0x4c>
   31c0e:	4631      	mov	r1, r6
   31c10:	4620      	mov	r0, r4
   31c12:	f7ff f85d 	bl	30cd0 <net_pkt_set_data>
   31c16:	b9c8      	cbnz	r0, 31c4c <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   31c18:	88aa      	ldrh	r2, [r5, #4]
   31c1a:	0213      	lsls	r3, r2, #8
   31c1c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   31c20:	6922      	ldr	r2, [r4, #16]
   31c22:	b29b      	uxth	r3, r3
	while (buf) {
   31c24:	b9aa      	cbnz	r2, 31c52 <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   31c26:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
				    net_pkt_ip_opts_len(pkt))) {
   31c2a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
				    net_pkt_ip_hdr_len(pkt) -
   31c2e:	440a      	add	r2, r1
   31c30:	1a80      	subs	r0, r0, r2
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   31c32:	4283      	cmp	r3, r0
   31c34:	d10a      	bne.n	31c4c <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   31c36:	6a20      	ldr	r0, [r4, #32]
   31c38:	f7fe fb65 	bl	30306 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   31c3c:	b138      	cbz	r0, 31c4e <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   31c3e:	88eb      	ldrh	r3, [r5, #6]
   31c40:	b123      	cbz	r3, 31c4c <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   31c42:	2111      	movs	r1, #17
   31c44:	4620      	mov	r0, r4
   31c46:	f7fe fb7c 	bl	30342 <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   31c4a:	b100      	cbz	r0, 31c4e <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   31c4c:	2500      	movs	r5, #0
}
   31c4e:	4628      	mov	r0, r5
   31c50:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   31c52:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   31c54:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   31c56:	4408      	add	r0, r1
		buf = buf->frags;
   31c58:	e7e4      	b.n	31c24 <net_udp_input+0x24>

00031c5a <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   31c5a:	e9d0 2300 	ldrd	r2, r3, [r0]
   31c5e:	1a9b      	subs	r3, r3, r2
   31c60:	2b01      	cmp	r3, #1
{
   31c62:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   31c64:	d90c      	bls.n	31c80 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   31c66:	4614      	mov	r4, r2
   31c68:	1c53      	adds	r3, r2, #1
   31c6a:	6003      	str	r3, [r0, #0]
   31c6c:	f814 3b02 	ldrb.w	r3, [r4], #2
   31c70:	021b      	lsls	r3, r3, #8
   31c72:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   31c74:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   31c76:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   31c78:	7852      	ldrb	r2, [r2, #1]
   31c7a:	4313      	orrs	r3, r2
   31c7c:	800b      	strh	r3, [r1, #0]
}
   31c7e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   31c80:	f06f 0015 	mvn.w	r0, #21
   31c84:	e7fb      	b.n	31c7e <unpack_uint16+0x24>

00031c86 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   31c86:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31c88:	e9d0 3400 	ldrd	r3, r4, [r0]
   31c8c:	429c      	cmp	r4, r3
   31c8e:	d01f      	beq.n	31cd0 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   31c90:	1c5c      	adds	r4, r3, #1
   31c92:	6004      	str	r4, [r0, #0]
   31c94:	781b      	ldrb	r3, [r3, #0]
   31c96:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   31c98:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   31c9a:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   31c9c:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   31c9e:	6804      	ldr	r4, [r0, #0]
   31ca0:	42bc      	cmp	r4, r7
   31ca2:	d218      	bcs.n	31cd6 <fixed_header_decode+0x50>
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   31ca4:	4625      	mov	r5, r4
   31ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
   31caa:	6816      	ldr	r6, [r2, #0]
   31cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   31cb0:	408b      	lsls	r3, r1
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   31cb2:	4433      	add	r3, r6
   31cb4:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   31cb6:	6005      	str	r5, [r0, #0]
   31cb8:	f994 4000 	ldrsb.w	r4, [r4]
   31cbc:	2c00      	cmp	r4, #0
   31cbe:	db04      	blt.n	31cca <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   31cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   31cc4:	d204      	bcs.n	31cd0 <fixed_header_decode+0x4a>
	return 0;
   31cc6:	2000      	movs	r0, #0
   31cc8:	e004      	b.n	31cd4 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   31cca:	3107      	adds	r1, #7
   31ccc:	291c      	cmp	r1, #28
   31cce:	d1e6      	bne.n	31c9e <fixed_header_decode+0x18>
		return -EINVAL;
   31cd0:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   31cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   31cd6:	f06f 000a 	mvn.w	r0, #10
   31cda:	e7fb      	b.n	31cd4 <fixed_header_decode+0x4e>

00031cdc <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   31cdc:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31cde:	e9d1 3500 	ldrd	r3, r5, [r1]
   31ce2:	429d      	cmp	r5, r3
   31ce4:	d102      	bne.n	31cec <connect_ack_decode+0x10>
		return -EINVAL;
   31ce6:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   31cea:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   31cec:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31cee:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   31cf0:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31cf2:	d0f8      	beq.n	31ce6 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   31cf4:	461d      	mov	r5, r3
   31cf6:	f815 4b02 	ldrb.w	r4, [r5], #2
   31cfa:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   31cfc:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
	*val = *(buf->cur++);
   31d00:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   31d02:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   31d04:	bf04      	itt	eq
   31d06:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   31d0a:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   31d0c:	7053      	strb	r3, [r2, #1]
	return 0;
   31d0e:	2000      	movs	r0, #0
   31d10:	e7eb      	b.n	31cea <connect_ack_decode+0xe>

00031d12 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   31d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31d16:	461d      	mov	r5, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   31d18:	7d9b      	ldrb	r3, [r3, #22]
{
   31d1a:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   31d1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   31d20:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   31d24:	f3c0 0041 	ubfx	r0, r0, #1, #2
   31d28:	7228      	strb	r0, [r5, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   31d2a:	75ab      	strb	r3, [r5, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   31d2c:	f10d 0106 	add.w	r1, sp, #6
   31d30:	4610      	mov	r0, r2
{
   31d32:	4617      	mov	r7, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   31d34:	f7ff ff91 	bl	31c5a <unpack_uint16>
	if (err_code != 0) {
   31d38:	4606      	mov	r6, r0
   31d3a:	b9c0      	cbnz	r0, 31d6e <publish_decode+0x5c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   31d3c:	683b      	ldr	r3, [r7, #0]
   31d3e:	687a      	ldr	r2, [r7, #4]
   31d40:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   31d44:	1ad2      	subs	r2, r2, r3
   31d46:	42a2      	cmp	r2, r4
   31d48:	da02      	bge.n	31d50 <publish_decode+0x3e>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   31d4a:	f06f 0615 	mvn.w	r6, #21
   31d4e:	e00e      	b.n	31d6e <publish_decode+0x5c>
	str->size = utf8_strlen;
   31d50:	606c      	str	r4, [r5, #4]
	if (utf8_strlen) {
   31d52:	b184      	cbz	r4, 31d76 <publish_decode+0x64>
		str->utf8 = buf->cur;
   31d54:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   31d56:	4423      	add	r3, r4
   31d58:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   31d5a:	7a2b      	ldrb	r3, [r5, #8]
   31d5c:	b96b      	cbnz	r3, 31d7a <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   31d5e:	3402      	adds	r4, #2
	if (var_length < var_header_length) {
   31d60:	4544      	cmp	r4, r8
   31d62:	d8f2      	bhi.n	31d4a <publish_decode+0x38>
	}

	param->message.payload.data = NULL;
   31d64:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   31d66:	eba8 0404 	sub.w	r4, r8, r4
	param->message.payload.data = NULL;
   31d6a:	60eb      	str	r3, [r5, #12]
	param->message.payload.len = var_length - var_header_length;
   31d6c:	612c      	str	r4, [r5, #16]

	return 0;
}
   31d6e:	4630      	mov	r0, r6
   31d70:	b002      	add	sp, #8
   31d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   31d76:	602c      	str	r4, [r5, #0]
	if (err_code != 0) {
   31d78:	e7ef      	b.n	31d5a <publish_decode+0x48>
		err_code = unpack_uint16(buf, &param->message_id);
   31d7a:	f105 0114 	add.w	r1, r5, #20
   31d7e:	4638      	mov	r0, r7
   31d80:	f7ff ff6b 	bl	31c5a <unpack_uint16>
		if (err_code != 0) {
   31d84:	b908      	cbnz	r0, 31d8a <publish_decode+0x78>
		var_header_length += sizeof(u16_t);
   31d86:	3404      	adds	r4, #4
   31d88:	e7ea      	b.n	31d60 <publish_decode+0x4e>
   31d8a:	4606      	mov	r6, r0
   31d8c:	e7ef      	b.n	31d6e <publish_decode+0x5c>

00031d8e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31d8e:	f7ff bf64 	b.w	31c5a <unpack_uint16>

00031d92 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31d92:	f7ff bf62 	b.w	31c5a <unpack_uint16>

00031d96 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31d96:	f7ff bf60 	b.w	31c5a <unpack_uint16>

00031d9a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31d9a:	f7ff bf5e 	b.w	31c5a <unpack_uint16>

00031d9e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   31d9e:	b538      	push	{r3, r4, r5, lr}
   31da0:	4605      	mov	r5, r0
   31da2:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   31da4:	f7ff ff59 	bl	31c5a <unpack_uint16>
	if (err_code != 0) {
   31da8:	b930      	cbnz	r0, 31db8 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   31daa:	e9d5 2300 	ldrd	r2, r3, [r5]
   31dae:	1a99      	subs	r1, r3, r2
	str->len = length;
   31db0:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   31db2:	b111      	cbz	r1, 31dba <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   31db4:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   31db6:	602b      	str	r3, [r5, #0]
}
   31db8:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   31dba:	6060      	str	r0, [r4, #4]
   31dbc:	e7fc      	b.n	31db8 <subscribe_ack_decode+0x1a>

00031dbe <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31dbe:	f7ff bf4c 	b.w	31c5a <unpack_uint16>

00031dc2 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   31dc2:	e9d1 3200 	ldrd	r3, r2, [r1]
   31dc6:	1ad2      	subs	r2, r2, r3
   31dc8:	2a01      	cmp	r2, #1
   31dca:	d909      	bls.n	31de0 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   31dcc:	1c5a      	adds	r2, r3, #1
   31dce:	600a      	str	r2, [r1, #0]
   31dd0:	0a02      	lsrs	r2, r0, #8
   31dd2:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   31dd4:	680b      	ldr	r3, [r1, #0]
   31dd6:	1c5a      	adds	r2, r3, #1
   31dd8:	600a      	str	r2, [r1, #0]
   31dda:	7018      	strb	r0, [r3, #0]
	return 0;
   31ddc:	2000      	movs	r0, #0
   31dde:	4770      	bx	lr
		return -ENOMEM;
   31de0:	f06f 000b 	mvn.w	r0, #11
}
   31de4:	4770      	bx	lr

00031de6 <pack_utf8_str>:
{
   31de6:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   31de8:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   31dec:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   31dee:	6840      	ldr	r0, [r0, #4]
   31df0:	1a9b      	subs	r3, r3, r2
   31df2:	1c82      	adds	r2, r0, #2
   31df4:	4293      	cmp	r3, r2
{
   31df6:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   31df8:	d30d      	bcc.n	31e16 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   31dfa:	b280      	uxth	r0, r0
   31dfc:	f7ff ffe1 	bl	31dc2 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31e00:	e9d5 1200 	ldrd	r1, r2, [r5]
   31e04:	6820      	ldr	r0, [r4, #0]
   31e06:	f001 fcdb 	bl	337c0 <memcpy>
	return 0;
   31e0a:	2000      	movs	r0, #0
	buf->cur += str->size;
   31e0c:	6823      	ldr	r3, [r4, #0]
   31e0e:	686a      	ldr	r2, [r5, #4]
   31e10:	4413      	add	r3, r2
   31e12:	6023      	str	r3, [r4, #0]
}
   31e14:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   31e16:	f06f 000b 	mvn.w	r0, #11
   31e1a:	e7fb      	b.n	31e14 <pack_utf8_str+0x2e>

00031e1c <mqtt_encode_fixed_header>:
{
   31e1c:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   31e1e:	6815      	ldr	r5, [r2, #0]
   31e20:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   31e22:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   31e26:	d227      	bcs.n	31e78 <mqtt_encode_fixed_header+0x5c>
   31e28:	462c      	mov	r4, r5
   31e2a:	2600      	movs	r6, #0
	} while (length > 0);
   31e2c:	09e4      	lsrs	r4, r4, #7
   31e2e:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   31e30:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   31e34:	d1fa      	bne.n	31e2c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   31e36:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   31e38:	b2db      	uxtb	r3, r3
   31e3a:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31e3c:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   31e3e:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31e40:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   31e42:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   31e44:	bf1e      	ittt	ne
   31e46:	3401      	addne	r4, #1
   31e48:	6014      	strne	r4, [r2, #0]
   31e4a:	54c8      	strbne	r0, [r1, r3]
	return 0;
   31e4c:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   31e4e:	6811      	ldr	r1, [r2, #0]
   31e50:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   31e54:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   31e56:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   31e58:	bf1f      	itttt	ne
   31e5a:	6814      	ldrne	r4, [r2, #0]
   31e5c:	7821      	ldrbne	r1, [r4, #0]
   31e5e:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   31e62:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   31e64:	6811      	ldr	r1, [r2, #0]
   31e66:	3101      	adds	r1, #1
   31e68:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   31e6a:	2800      	cmp	r0, #0
   31e6c:	d1ef      	bne.n	31e4e <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   31e6e:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   31e70:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   31e72:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   31e74:	6051      	str	r1, [r2, #4]
}
   31e76:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   31e78:	f06f 0079 	mvn.w	r0, #121	; 0x79
   31e7c:	e7fb      	b.n	31e76 <mqtt_encode_fixed_header+0x5a>

00031e7e <mqtt_message_id_only_enc>:
{
   31e7e:	b570      	push	{r4, r5, r6, lr}
   31e80:	4606      	mov	r6, r0
   31e82:	4615      	mov	r5, r2
	if (message_id == 0U) {
   31e84:	4608      	mov	r0, r1
   31e86:	b169      	cbz	r1, 31ea4 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31e88:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   31e8a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31e8c:	3405      	adds	r4, #5
   31e8e:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   31e90:	f7ff ff97 	bl	31dc2 <pack_uint16>
	if (err_code != 0) {
   31e94:	b940      	cbnz	r0, 31ea8 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31e96:	462a      	mov	r2, r5
   31e98:	4621      	mov	r1, r4
   31e9a:	4630      	mov	r0, r6
}
   31e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31ea0:	f7ff bfbc 	b.w	31e1c <mqtt_encode_fixed_header>
		return -EINVAL;
   31ea4:	f06f 0015 	mvn.w	r0, #21
}
   31ea8:	bd70      	pop	{r4, r5, r6, pc}

00031eaa <publish_encode>:
{
   31eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31eae:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   31eb0:	7d80      	ldrb	r0, [r0, #22]
   31eb2:	7a3c      	ldrb	r4, [r7, #8]
{
   31eb4:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   31eb6:	f000 0801 	and.w	r8, r0, #1
   31eba:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   31ebe:	b10c      	cbz	r4, 31ec4 <publish_encode+0x1a>
   31ec0:	8abb      	ldrh	r3, [r7, #20]
   31ec2:	b35b      	cbz	r3, 31f1c <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31ec4:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   31ec6:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31ec8:	3605      	adds	r6, #5
   31eca:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   31ecc:	4638      	mov	r0, r7
   31ece:	f7ff ff8a 	bl	31de6 <pack_utf8_str>
	if (err_code != 0) {
   31ed2:	b9a8      	cbnz	r0, 31f00 <publish_encode+0x56>
	if (param->message.topic.qos) {
   31ed4:	7a3b      	ldrb	r3, [r7, #8]
   31ed6:	b9ab      	cbnz	r3, 31f04 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   31ed8:	0060      	lsls	r0, r4, #1
   31eda:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   31ede:	693a      	ldr	r2, [r7, #16]
   31ee0:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   31ee2:	ea40 0009 	orr.w	r0, r0, r9
   31ee6:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   31eea:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   31eec:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   31ef0:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   31ef2:	462a      	mov	r2, r5
   31ef4:	4631      	mov	r1, r6
   31ef6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   31efa:	f7ff ff8f 	bl	31e1c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   31efe:	b140      	cbz	r0, 31f12 <publish_encode+0x68>
}
   31f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   31f04:	4629      	mov	r1, r5
   31f06:	8ab8      	ldrh	r0, [r7, #20]
   31f08:	f7ff ff5b 	bl	31dc2 <pack_uint16>
		if (err_code != 0) {
   31f0c:	2800      	cmp	r0, #0
   31f0e:	d0e3      	beq.n	31ed8 <publish_encode+0x2e>
   31f10:	e7f6      	b.n	31f00 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   31f12:	686b      	ldr	r3, [r5, #4]
   31f14:	693a      	ldr	r2, [r7, #16]
   31f16:	1a9b      	subs	r3, r3, r2
   31f18:	606b      	str	r3, [r5, #4]
	return 0;
   31f1a:	e7f1      	b.n	31f00 <publish_encode+0x56>
		return -EINVAL;
   31f1c:	f06f 0015 	mvn.w	r0, #21
   31f20:	e7ee      	b.n	31f00 <publish_encode+0x56>

00031f22 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   31f22:	460a      	mov	r2, r1
   31f24:	8801      	ldrh	r1, [r0, #0]
   31f26:	2040      	movs	r0, #64	; 0x40
   31f28:	f7ff bfa9 	b.w	31e7e <mqtt_message_id_only_enc>

00031f2c <publish_release_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   31f2c:	460a      	mov	r2, r1
   31f2e:	8801      	ldrh	r1, [r0, #0]
   31f30:	2062      	movs	r0, #98	; 0x62
   31f32:	f7ff bfa4 	b.w	31e7e <mqtt_message_id_only_enc>

00031f36 <subscribe_encode>:
{
   31f36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31f3a:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   31f3c:	88c0      	ldrh	r0, [r0, #6]
{
   31f3e:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   31f40:	b330      	cbz	r0, 31f90 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31f42:	680e      	ldr	r6, [r1, #0]
   31f44:	3605      	adds	r6, #5
   31f46:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   31f48:	f7ff ff3b 	bl	31dc2 <pack_uint16>
	if (err_code != 0) {
   31f4c:	4604      	mov	r4, r0
   31f4e:	bb08      	cbnz	r0, 31f94 <subscribe_encode+0x5e>
   31f50:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   31f54:	88bb      	ldrh	r3, [r7, #4]
   31f56:	42a3      	cmp	r3, r4
   31f58:	dc06      	bgt.n	31f68 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31f5a:	462a      	mov	r2, r5
   31f5c:	4631      	mov	r1, r6
}
   31f5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31f62:	2082      	movs	r0, #130	; 0x82
   31f64:	f7ff bf5a 	b.w	31e1c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31f68:	fb09 f804 	mul.w	r8, r9, r4
   31f6c:	6838      	ldr	r0, [r7, #0]
   31f6e:	4629      	mov	r1, r5
   31f70:	4440      	add	r0, r8
   31f72:	f7ff ff38 	bl	31de6 <pack_utf8_str>
		if (err_code != 0) {
   31f76:	b980      	cbnz	r0, 31f9a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   31f78:	683b      	ldr	r3, [r7, #0]
   31f7a:	4443      	add	r3, r8
   31f7c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   31f7e:	e9d5 3100 	ldrd	r3, r1, [r5]
   31f82:	4299      	cmp	r1, r3
   31f84:	d00b      	beq.n	31f9e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   31f86:	1c59      	adds	r1, r3, #1
   31f88:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   31f8a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   31f8c:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   31f8e:	e7e1      	b.n	31f54 <subscribe_encode+0x1e>
		return -EINVAL;
   31f90:	f06f 0415 	mvn.w	r4, #21
}
   31f94:	4620      	mov	r0, r4
   31f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31f9a:	4604      	mov	r4, r0
   31f9c:	e7fa      	b.n	31f94 <subscribe_encode+0x5e>
		return -ENOMEM;
   31f9e:	f06f 040b 	mvn.w	r4, #11
   31fa2:	e7f7      	b.n	31f94 <subscribe_encode+0x5e>

00031fa4 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   31fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31fa6:	460d      	mov	r5, r1
	u32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   31fa8:	e9d1 3100 	ldrd	r3, r1, [r1]
   31fac:	1acb      	subs	r3, r1, r3
   31fae:	4293      	cmp	r3, r2
{
   31fb0:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   31fb2:	d301      	bcc.n	31fb8 <mqtt_read_message_chunk+0x14>
		return 0;
   31fb4:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   31fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   31fb8:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   31fba:	190f      	adds	r7, r1, r4
   31fbc:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   31fc0:	4413      	add	r3, r2
   31fc2:	429f      	cmp	r7, r3
   31fc4:	d813      	bhi.n	31fee <mqtt_read_message_chunk+0x4a>
   31fc6:	4297      	cmp	r7, r2
   31fc8:	d311      	bcc.n	31fee <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   31fca:	2300      	movs	r3, #0
   31fcc:	4622      	mov	r2, r4
   31fce:	f7ea fa51 	bl	1c474 <mqtt_transport_read>
	if (len < 0) {
   31fd2:	2800      	cmp	r0, #0
   31fd4:	dbef      	blt.n	31fb6 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   31fd6:	d00d      	beq.n	31ff4 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   31fd8:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   31fda:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   31fdc:	4403      	add	r3, r0
   31fde:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   31fe0:	686b      	ldr	r3, [r5, #4]
   31fe2:	4403      	add	r3, r0
   31fe4:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   31fe6:	d2e5      	bcs.n	31fb4 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   31fe8:	f06f 000a 	mvn.w	r0, #10
   31fec:	e7e3      	b.n	31fb6 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   31fee:	f06f 000b 	mvn.w	r0, #11
   31ff2:	e7e0      	b.n	31fb6 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   31ff4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31ff8:	e7dd      	b.n	31fb6 <mqtt_read_message_chunk+0x12>

00031ffa <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   31ffa:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   31ffc:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   31ffe:	69c2      	ldr	r2, [r0, #28]
{
   32000:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   32002:	9302      	str	r3, [sp, #8]
{
   32004:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   32006:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   32008:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3200a:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3200c:	a902      	add	r1, sp, #8
   3200e:	4628      	mov	r0, r5
   32010:	f7ff ffc8 	bl	31fa4 <mqtt_read_message_chunk>
		if (err_code < 0) {
   32014:	1e04      	subs	r4, r0, #0
   32016:	db2b      	blt.n	32070 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   32018:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3201a:	aa01      	add	r2, sp, #4
   3201c:	f10d 0103 	add.w	r1, sp, #3
   32020:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   32022:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   32024:	f7ff fe2f 	bl	31c86 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   32028:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3202c:	4604      	mov	r4, r0
		chunk_size = 1U;
   3202e:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   32032:	d0eb      	beq.n	3200c <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   32034:	2800      	cmp	r0, #0
   32036:	db1f      	blt.n	32078 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   32038:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3203c:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   32040:	2b30      	cmp	r3, #48	; 0x30
   32042:	d11c      	bne.n	3207e <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   32044:	2202      	movs	r2, #2
   32046:	a902      	add	r1, sp, #8
   32048:	4628      	mov	r0, r5
   3204a:	f7ff ffab 	bl	31fa4 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3204e:	1e04      	subs	r4, r0, #0
   32050:	db0e      	blt.n	32070 <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   32052:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   32054:	f016 0f06 	tst.w	r6, #6
   32058:	881a      	ldrh	r2, [r3, #0]
   3205a:	ba52      	rev16	r2, r2
   3205c:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   3205e:	bf0c      	ite	eq
   32060:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   32062:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   32064:	a902      	add	r1, sp, #8
   32066:	4628      	mov	r0, r5
   32068:	f7ff ff9c 	bl	31fa4 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   3206c:	1e04      	subs	r4, r0, #0
   3206e:	da08      	bge.n	32082 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   32070:	f114 0f0b 	cmn.w	r4, #11
   32074:	d100      	bne.n	32078 <mqtt_handle_rx+0x7e>
   32076:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   32078:	4620      	mov	r0, r4
   3207a:	b00c      	add	sp, #48	; 0x30
   3207c:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3207e:	9a01      	ldr	r2, [sp, #4]
   32080:	e7f0      	b.n	32064 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   32082:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   32084:	f89d 0003 	ldrb.w	r0, [sp, #3]
   32088:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3208a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3208e:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   32090:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   32092:	d063      	beq.n	3215c <mqtt_handle_rx+0x162>
   32094:	d813      	bhi.n	320be <mqtt_handle_rx+0xc4>
   32096:	2b30      	cmp	r3, #48	; 0x30
   32098:	d04a      	beq.n	32130 <mqtt_handle_rx+0x136>
   3209a:	d804      	bhi.n	320a6 <mqtt_handle_rx+0xac>
   3209c:	2b20      	cmp	r3, #32
   3209e:	d02f      	beq.n	32100 <mqtt_handle_rx+0x106>
	client->internal.rx_buf_datalen = 0U;
   320a0:	2400      	movs	r4, #0
   320a2:	61ec      	str	r4, [r5, #28]
	return 0;
   320a4:	e7e8      	b.n	32078 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   320a6:	2b40      	cmp	r3, #64	; 0x40
   320a8:	d04e      	beq.n	32148 <mqtt_handle_rx+0x14e>
   320aa:	2b50      	cmp	r3, #80	; 0x50
   320ac:	d1f8      	bne.n	320a0 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   320ae:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   320b0:	a905      	add	r1, sp, #20
   320b2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   320b4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   320b8:	f7ff fe6b 	bl	31d92 <publish_receive_decode>
   320bc:	e04b      	b.n	32156 <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   320be:	2b90      	cmp	r3, #144	; 0x90
   320c0:	d054      	beq.n	3216c <mqtt_handle_rx+0x172>
   320c2:	d809      	bhi.n	320d8 <mqtt_handle_rx+0xde>
   320c4:	2b70      	cmp	r3, #112	; 0x70
   320c6:	d1eb      	bne.n	320a0 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   320c8:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   320ca:	a905      	add	r1, sp, #20
   320cc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   320ce:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   320d2:	f7ff fe62 	bl	31d9a <publish_complete_decode>
   320d6:	e03e      	b.n	32156 <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   320d8:	2bb0      	cmp	r3, #176	; 0xb0
   320da:	d04f      	beq.n	3217c <mqtt_handle_rx+0x182>
   320dc:	2bd0      	cmp	r3, #208	; 0xd0
   320de:	d1df      	bne.n	320a0 <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   320e0:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   320e4:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   320e6:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   320e8:	bfc8      	it	gt
   320ea:	f103 32ff 	addgt.w	r2, r3, #4294967295	; 0xffffffff
		evt.type = MQTT_EVT_PINGRESP;
   320ee:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   320f2:	bfc8      	it	gt
   320f4:	b252      	sxtbgt	r2, r2
   320f6:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   320fa:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   320fe:	e010      	b.n	32122 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_CONNACK;
   32100:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   32104:	a902      	add	r1, sp, #8
   32106:	aa05      	add	r2, sp, #20
   32108:	4628      	mov	r0, r5
   3210a:	f7ff fde7 	bl	31cdc <connect_ack_decode>
		if (err_code == 0) {
   3210e:	4604      	mov	r4, r0
   32110:	bb10      	cbnz	r0, 32158 <mqtt_handle_rx+0x15e>
			if (evt.param.connack.return_code ==
   32112:	f89d 2015 	ldrb.w	r2, [sp, #21]
   32116:	b91a      	cbnz	r2, 32120 <mqtt_handle_rx+0x126>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   32118:	69ab      	ldr	r3, [r5, #24]
   3211a:	f043 0304 	orr.w	r3, r3, #4
   3211e:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   32120:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   32122:	a904      	add	r1, sp, #16
   32124:	4628      	mov	r0, r5
   32126:	f000 f8bb 	bl	322a0 <event_notify>
	if (err_code < 0) {
   3212a:	2c00      	cmp	r4, #0
   3212c:	dab8      	bge.n	320a0 <mqtt_handle_rx+0xa6>
   3212e:	e7a3      	b.n	32078 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   32130:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   32132:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   32134:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   32138:	ab05      	add	r3, sp, #20
   3213a:	f7ff fdea 	bl	31d12 <publish_decode>
		client->internal.remaining_payload =
   3213e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   32140:	4604      	mov	r4, r0
		evt.result = err_code;
   32142:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   32144:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   32146:	e7ec      	b.n	32122 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBACK;
   32148:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3214a:	a905      	add	r1, sp, #20
   3214c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3214e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   32152:	f7ff fe1c 	bl	31d8e <publish_ack_decode>
   32156:	4604      	mov	r4, r0
		evt.result = err_code;
   32158:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3215a:	e7e2      	b.n	32122 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBREL;
   3215c:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3215e:	a905      	add	r1, sp, #20
   32160:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   32162:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   32166:	f7ff fe16 	bl	31d96 <publish_release_decode>
   3216a:	e7f4      	b.n	32156 <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_SUBACK;
   3216c:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3216e:	a905      	add	r1, sp, #20
   32170:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   32172:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   32176:	f7ff fe12 	bl	31d9e <subscribe_ack_decode>
   3217a:	e7ec      	b.n	32156 <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_UNSUBACK;
   3217c:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3217e:	a905      	add	r1, sp, #20
   32180:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   32184:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   32188:	f7ff fe19 	bl	31dbe <unsubscribe_ack_decode>
   3218c:	e7e3      	b.n	32156 <mqtt_handle_rx+0x15c>

0003218e <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3218e:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   32190:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   32192:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   32194:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   32196:	2206      	movs	r2, #6
   32198:	2101      	movs	r1, #1
   3219a:	f7e5 f947 	bl	1742c <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3219e:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   321a0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   321a2:	da04      	bge.n	321ae <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   321a4:	f7fd ff3b 	bl	3001e <__errno>
   321a8:	6800      	ldr	r0, [r0, #0]
   321aa:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   321ac:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   321ae:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   321b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   321b2:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   321b4:	bf14      	ite	ne
   321b6:	2218      	movne	r2, #24
   321b8:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   321ba:	f7fc fbec 	bl	2e996 <z_impl_zsock_connect>
	if (ret < 0) {
   321be:	2800      	cmp	r0, #0
   321c0:	da03      	bge.n	321ca <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   321c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   321c4:	f7fc fbce 	bl	2e964 <z_impl_zsock_close>
   321c8:	e7ec      	b.n	321a4 <mqtt_client_tcp_connect+0x16>
	return 0;
   321ca:	2000      	movs	r0, #0
   321cc:	e7ee      	b.n	321ac <mqtt_client_tcp_connect+0x1e>

000321ce <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   321ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   321d2:	2400      	movs	r4, #0
{
   321d4:	4607      	mov	r7, r0
   321d6:	4688      	mov	r8, r1
   321d8:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   321da:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   321dc:	42ac      	cmp	r4, r5
   321de:	d301      	bcc.n	321e4 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   321e0:	2000      	movs	r0, #0
   321e2:	e00e      	b.n	32202 <mqtt_client_tcp_write+0x34>
		ret = send(client->transport.tcp.sock, data + offset,
   321e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   321e6:	2300      	movs	r3, #0
   321e8:	e9cd 6600 	strd	r6, r6, [sp]
   321ec:	1b2a      	subs	r2, r5, r4
   321ee:	eb08 0104 	add.w	r1, r8, r4
   321f2:	f7fc fbf1 	bl	2e9d8 <z_impl_zsock_sendto>
		if (ret < 0) {
   321f6:	2800      	cmp	r0, #0
   321f8:	da06      	bge.n	32208 <mqtt_client_tcp_write+0x3a>
			return -errno;
   321fa:	f7fd ff10 	bl	3001e <__errno>
   321fe:	6800      	ldr	r0, [r0, #0]
   32200:	4240      	negs	r0, r0
}
   32202:	b002      	add	sp, #8
   32204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   32208:	4404      	add	r4, r0
   3220a:	e7e7      	b.n	321dc <mqtt_client_tcp_write+0xe>

0003220c <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3220c:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   3220e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   32210:	2200      	movs	r2, #0
   32212:	f7fc fc16 	bl	2ea42 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   32216:	2800      	cmp	r0, #0
   32218:	da04      	bge.n	32224 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   3221a:	f7fd ff00 	bl	3001e <__errno>
   3221e:	6800      	ldr	r0, [r0, #0]
   32220:	4240      	negs	r0, r0
	}

	return 0;
}
   32222:	bd08      	pop	{r3, pc}
	return 0;
   32224:	2000      	movs	r0, #0
   32226:	e7fc      	b.n	32222 <mqtt_client_tcp_write_msg+0x16>

00032228 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   32228:	b513      	push	{r0, r1, r4, lr}
   3222a:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3222c:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   3222e:	bf14      	ite	ne
   32230:	4623      	movne	r3, r4
   32232:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   32234:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   32236:	e9cd 4400 	strd	r4, r4, [sp]
   3223a:	f7fc fc1f 	bl	2ea7c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3223e:	2800      	cmp	r0, #0
   32240:	da03      	bge.n	3224a <mqtt_client_tcp_read+0x22>
		return -errno;
   32242:	f7fd feec 	bl	3001e <__errno>
   32246:	6800      	ldr	r0, [r0, #0]
   32248:	4240      	negs	r0, r0
	}

	return ret;
}
   3224a:	b002      	add	sp, #8
   3224c:	bd10      	pop	{r4, pc}

0003224e <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3224e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   32250:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   32252:	f7fc fb87 	bl	2e964 <z_impl_zsock_close>
	if (ret < 0) {
   32256:	2800      	cmp	r0, #0
   32258:	da04      	bge.n	32264 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3225a:	f7fd fee0 	bl	3001e <__errno>
   3225e:	6800      	ldr	r0, [r0, #0]
   32260:	4240      	negs	r0, r0
	}

	return 0;
}
   32262:	bd08      	pop	{r3, pc}
	return 0;
   32264:	2000      	movs	r0, #0
   32266:	e7fc      	b.n	32262 <mqtt_client_tcp_disconnect+0x14>

00032268 <k_uptime_get>:
{
   32268:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3226a:	f001 f9db 	bl	33624 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   3226e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   32272:	fba0 2304 	umull	r2, r3, r0, r4
   32276:	fb04 3301 	mla	r3, r4, r1, r3
   3227a:	0bd0      	lsrs	r0, r2, #15
}
   3227c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   32280:	0bd9      	lsrs	r1, r3, #15
   32282:	bd10      	pop	{r4, pc}

00032284 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   32284:	b538      	push	{r3, r4, r5, lr}
   32286:	4604      	mov	r4, r0
   32288:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3228a:	6f42      	ldr	r2, [r0, #116]	; 0x74
   3228c:	2100      	movs	r1, #0
   3228e:	6f00      	ldr	r0, [r0, #112]	; 0x70
   32290:	f001 fad0 	bl	33834 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   32294:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   32296:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   32298:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3229a:	4413      	add	r3, r2
   3229c:	606b      	str	r3, [r5, #4]
}
   3229e:	bd38      	pop	{r3, r4, r5, pc}

000322a0 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   322a0:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   322a2:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   322a4:	4604      	mov	r4, r0
   322a6:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   322a8:	b153      	cbz	r3, 322c0 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   322aa:	f7ea f8fb 	bl	1c4a4 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   322ae:	4620      	mov	r0, r4
   322b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   322b2:	4629      	mov	r1, r5
   322b4:	4798      	blx	r3

		mqtt_mutex_lock(client);
   322b6:	4620      	mov	r0, r4
	}
}
   322b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   322bc:	f7ea b91e 	b.w	1c4fc <mqtt_mutex_lock>
}
   322c0:	bd38      	pop	{r3, r4, r5, pc}

000322c2 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   322c2:	b530      	push	{r4, r5, lr}
   322c4:	4604      	mov	r4, r0
   322c6:	b089      	sub	sp, #36	; 0x24
   322c8:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   322ca:	f7ea f8e1 	bl	1c490 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   322ce:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   322d0:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   322d2:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   322d6:	bf12      	itee	ne
   322d8:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   322da:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   322de:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   322e2:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   322e4:	bf16      	itet	ne
   322e6:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   322ea:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   322ec:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   322ee:	f7ff ffd7 	bl	322a0 <event_notify>
	MQTT_STATE_INIT(client);
   322f2:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   322f4:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   322f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   322fc:	b009      	add	sp, #36	; 0x24
   322fe:	bd30      	pop	{r4, r5, pc}

00032300 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   32300:	b538      	push	{r3, r4, r5, lr}
   32302:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   32304:	f7ea f89c 	bl	1c440 <mqtt_transport_write>
	if (err_code < 0) {
   32308:	1e04      	subs	r4, r0, #0
   3230a:	da05      	bge.n	32318 <client_write+0x18>
		MQTT_TRC("Transport write failed, err_code = %d, "
			 "closing connection", err_code);
		client_disconnect(client, err_code);
   3230c:	4621      	mov	r1, r4
   3230e:	4628      	mov	r0, r5
   32310:	f7ff ffd7 	bl	322c2 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   32314:	4620      	mov	r0, r4
   32316:	bd38      	pop	{r3, r4, r5, pc}
	return (u32_t)k_uptime_get();
   32318:	f7ff ffa6 	bl	32268 <k_uptime_get>
	return 0;
   3231c:	2400      	movs	r4, #0
   3231e:	6168      	str	r0, [r5, #20]
   32320:	e7f8      	b.n	32314 <client_write+0x14>

00032322 <mqtt_client_init>:

	return 0;
}

void mqtt_client_init(struct mqtt_client *client)
{
   32322:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   32324:	4604      	mov	r4, r0
   32326:	b1a0      	cbz	r0, 32352 <mqtt_client_init+0x30>
   32328:	2280      	movs	r2, #128	; 0x80
   3232a:	2100      	movs	r1, #0
   3232c:	f001 fa82 	bl	33834 <memset>

	memset(client, 0, sizeof(*client));

	MQTT_STATE_INIT(client);
   32330:	2300      	movs	r3, #0
   32332:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   32334:	4620      	mov	r0, r4
   32336:	f001 f88b 	bl	33450 <z_impl_k_mutex_init>
	mqtt_mutex_init(client);

	client->protocol_version = MQTT_VERSION_3_1_1;
   3233a:	2304      	movs	r3, #4
   3233c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = 1U;
   32340:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   32344:	f043 0302 	orr.w	r3, r3, #2
   32348:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   3234c:	233c      	movs	r3, #60	; 0x3c
   3234e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   32352:	bd10      	pop	{r4, pc}

00032354 <mqtt_connect>:
	return -ENOTSUP;
}
#endif

int mqtt_connect(struct mqtt_client *client)
{
   32354:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;

	NULL_PARAM_CHECK(client);
   32356:	4604      	mov	r4, r0
   32358:	2800      	cmp	r0, #0
   3235a:	d03c      	beq.n	323d6 <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3235c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3235e:	2b00      	cmp	r3, #0
   32360:	d039      	beq.n	323d6 <mqtt_connect+0x82>

	mqtt_mutex_lock(client);
   32362:	f7ea f8cb 	bl	1c4fc <mqtt_mutex_lock>

	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   32366:	6f23      	ldr	r3, [r4, #112]	; 0x70
   32368:	b393      	cbz	r3, 323d0 <mqtt_connect+0x7c>
   3236a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   3236c:	b383      	cbz	r3, 323d0 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   3236e:	4620      	mov	r0, r4
   32370:	f7ea f85c 	bl	1c42c <mqtt_transport_connect>
	if (err_code < 0) {
   32374:	1e05      	subs	r5, r0, #0
   32376:	db25      	blt.n	323c4 <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   32378:	4669      	mov	r1, sp
   3237a:	4620      	mov	r0, r4
   3237c:	f7ff ff82 	bl	32284 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   32380:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   32382:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   32384:	f043 0302 	orr.w	r3, r3, #2
   32388:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3238a:	4620      	mov	r0, r4
   3238c:	f7e9 ffaa 	bl	1c2e4 <connect_request_encode>
	if (err_code < 0) {
   32390:	1e05      	subs	r5, r0, #0
   32392:	db13      	blt.n	323bc <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   32394:	e9dd 1200 	ldrd	r1, r2, [sp]
   32398:	4620      	mov	r0, r4
   3239a:	1a52      	subs	r2, r2, r1
   3239c:	f7ea f850 	bl	1c440 <mqtt_transport_write>
	if (err_code < 0) {
   323a0:	1e05      	subs	r5, r0, #0
   323a2:	db0b      	blt.n	323bc <mqtt_connect+0x68>
   323a4:	f7ff ff60 	bl	32268 <k_uptime_get>
	client->unacked_ping = 0;
   323a8:	2500      	movs	r5, #0
   323aa:	6160      	str	r0, [r4, #20]
   323ac:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
error:
	if (err_code < 0) {
		client_reset(client);
	}

	mqtt_mutex_unlock(client);
   323b0:	4620      	mov	r0, r4
   323b2:	f7ea f877 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   323b6:	4628      	mov	r0, r5
   323b8:	b003      	add	sp, #12
   323ba:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   323bc:	4629      	mov	r1, r5
   323be:	4620      	mov	r0, r4
   323c0:	f7ff ff7f 	bl	322c2 <client_disconnect>
	MQTT_STATE_INIT(client);
   323c4:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   323c6:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   323ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
   323ce:	e7ef      	b.n	323b0 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   323d0:	f06f 050b 	mvn.w	r5, #11
   323d4:	e7f6      	b.n	323c4 <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   323d6:	f06f 0515 	mvn.w	r5, #21
   323da:	e7ec      	b.n	323b6 <mqtt_connect+0x62>

000323dc <mqtt_publish>:
	return 0;
}

int mqtt_publish(struct mqtt_client *client,
		 const struct mqtt_publish_param *param)
{
   323dc:	b570      	push	{r4, r5, r6, lr}
   323de:	460e      	mov	r6, r1
   323e0:	b08e      	sub	sp, #56	; 0x38
	int err_code;
	struct buf_ctx packet;
	struct iovec io_vector[2];
	struct msghdr msg;

	NULL_PARAM_CHECK(client);
   323e2:	4605      	mov	r5, r0
   323e4:	2800      	cmp	r0, #0
   323e6:	d03b      	beq.n	32460 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   323e8:	2900      	cmp	r1, #0
   323ea:	d039      	beq.n	32460 <mqtt_publish+0x84>
	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Topic size 0x%08x, "
		 "Data size 0x%08x", client, client->internal.state,
		 param->message.topic.topic.size,
		 param->message.payload.len);

	mqtt_mutex_lock(client);
   323ec:	f7ea f886 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   323f0:	a901      	add	r1, sp, #4
   323f2:	4628      	mov	r0, r5
   323f4:	f7ff ff46 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   323f8:	69ab      	ldr	r3, [r5, #24]
   323fa:	075b      	lsls	r3, r3, #29
   323fc:	d52d      	bpl.n	3245a <mqtt_publish+0x7e>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_encode(param, &packet);
   323fe:	a901      	add	r1, sp, #4
   32400:	4630      	mov	r0, r6
   32402:	f7ff fd52 	bl	31eaa <publish_encode>
	if (err_code < 0) {
   32406:	1e04      	subs	r4, r0, #0
   32408:	db1c      	blt.n	32444 <mqtt_publish+0x68>
		goto error;
	}

	io_vector[0].iov_base = packet.cur;
   3240a:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3240c:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3240e:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   32410:	1a9b      	subs	r3, r3, r2
	io_vector[1].iov_base = param->message.payload.data;
	io_vector[1].iov_len = param->message.payload.len;

	memset(&msg, 0, sizeof(msg));
   32412:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   32414:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   32416:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   32418:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3241a:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3241c:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3241e:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   32422:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   32424:	f001 fa06 	bl	33834 <memset>

	msg.msg_iov = io_vector;
   32428:	ab03      	add	r3, sp, #12
   3242a:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3242c:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3242e:	a907      	add	r1, sp, #28
   32430:	4628      	mov	r0, r5
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   32432:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   32434:	f7ea f810 	bl	1c458 <mqtt_transport_write_msg>
	if (err_code < 0) {
   32438:	1e04      	subs	r4, r0, #0
   3243a:	da09      	bge.n	32450 <mqtt_publish+0x74>
		client_disconnect(client, err_code);
   3243c:	4621      	mov	r1, r4
   3243e:	4628      	mov	r0, r5
   32440:	f7ff ff3f 	bl	322c2 <client_disconnect>

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
			 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   32444:	4628      	mov	r0, r5
   32446:	f7ea f82d 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   3244a:	4620      	mov	r0, r4
   3244c:	b00e      	add	sp, #56	; 0x38
   3244e:	bd70      	pop	{r4, r5, r6, pc}
   32450:	f7ff ff0a 	bl	32268 <k_uptime_get>
	return 0;
   32454:	2400      	movs	r4, #0
   32456:	6168      	str	r0, [r5, #20]
   32458:	e7f4      	b.n	32444 <mqtt_publish+0x68>
		return -ENOTCONN;
   3245a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3245e:	e7f1      	b.n	32444 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   32460:	f06f 0415 	mvn.w	r4, #21
   32464:	e7f1      	b.n	3244a <mqtt_publish+0x6e>

00032466 <mqtt_publish_qos1_ack>:

int mqtt_publish_qos1_ack(struct mqtt_client *client,
			  const struct mqtt_puback_param *param)
{
   32466:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32468:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   3246a:	4605      	mov	r5, r0
   3246c:	b1f8      	cbz	r0, 324ae <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3246e:	b1f1      	cbz	r1, 324ae <mqtt_publish_qos1_ack+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   32470:	f7ea f844 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   32474:	4669      	mov	r1, sp
   32476:	4628      	mov	r0, r5
   32478:	f7ff ff04 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3247c:	69ab      	ldr	r3, [r5, #24]
   3247e:	075b      	lsls	r3, r3, #29
   32480:	d512      	bpl.n	324a8 <mqtt_publish_qos1_ack+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_ack_encode(param, &packet);
   32482:	4620      	mov	r0, r4
   32484:	4669      	mov	r1, sp
   32486:	f7ff fd4c 	bl	31f22 <publish_ack_encode>
	if (err_code < 0) {
   3248a:	1e04      	subs	r4, r0, #0
   3248c:	db06      	blt.n	3249c <mqtt_publish_qos1_ack+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3248e:	e9dd 1200 	ldrd	r1, r2, [sp]
   32492:	4628      	mov	r0, r5
   32494:	1a52      	subs	r2, r2, r1
   32496:	f7ff ff33 	bl	32300 <client_write>
   3249a:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   3249c:	4628      	mov	r0, r5
   3249e:	f7ea f801 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   324a2:	4620      	mov	r0, r4
   324a4:	b003      	add	sp, #12
   324a6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   324a8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   324ac:	e7f6      	b.n	3249c <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   324ae:	f06f 0415 	mvn.w	r4, #21
   324b2:	e7f6      	b.n	324a2 <mqtt_publish_qos1_ack+0x3c>

000324b4 <mqtt_publish_qos2_release>:
	return err_code;
}

int mqtt_publish_qos2_release(struct mqtt_client *client,
			      const struct mqtt_pubrel_param *param)
{
   324b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   324b6:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   324b8:	4605      	mov	r5, r0
   324ba:	b1f8      	cbz	r0, 324fc <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   324bc:	b1f1      	cbz	r1, 324fc <mqtt_publish_qos2_release+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   324be:	f7ea f81d 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   324c2:	4669      	mov	r1, sp
   324c4:	4628      	mov	r0, r5
   324c6:	f7ff fedd 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   324ca:	69ab      	ldr	r3, [r5, #24]
   324cc:	075b      	lsls	r3, r3, #29
   324ce:	d512      	bpl.n	324f6 <mqtt_publish_qos2_release+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_release_encode(param, &packet);
   324d0:	4620      	mov	r0, r4
   324d2:	4669      	mov	r1, sp
   324d4:	f7ff fd2a 	bl	31f2c <publish_release_encode>
	if (err_code < 0) {
   324d8:	1e04      	subs	r4, r0, #0
   324da:	db06      	blt.n	324ea <mqtt_publish_qos2_release+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   324dc:	e9dd 1200 	ldrd	r1, r2, [sp]
   324e0:	4628      	mov	r0, r5
   324e2:	1a52      	subs	r2, r2, r1
   324e4:	f7ff ff0c 	bl	32300 <client_write>
   324e8:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   324ea:	4628      	mov	r0, r5
   324ec:	f7e9 ffda 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   324f0:	4620      	mov	r0, r4
   324f2:	b003      	add	sp, #12
   324f4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   324f6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   324fa:	e7f6      	b.n	324ea <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   324fc:	f06f 0415 	mvn.w	r4, #21
   32500:	e7f6      	b.n	324f0 <mqtt_publish_qos2_release+0x3c>

00032502 <mqtt_disconnect>:

	return err_code;
}

int mqtt_disconnect(struct mqtt_client *client)
{
   32502:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   32504:	4604      	mov	r4, r0
   32506:	b310      	cbz	r0, 3254e <mqtt_disconnect+0x4c>

	mqtt_mutex_lock(client);
   32508:	f7e9 fff8 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3250c:	4669      	mov	r1, sp
   3250e:	4620      	mov	r0, r4
   32510:	f7ff feb8 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   32514:	69a3      	ldr	r3, [r4, #24]
   32516:	075b      	lsls	r3, r3, #29
   32518:	d516      	bpl.n	32548 <mqtt_disconnect+0x46>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = disconnect_encode(&packet);
   3251a:	4668      	mov	r0, sp
   3251c:	f7e9 ff62 	bl	1c3e4 <disconnect_encode>
	if (err_code < 0) {
   32520:	1e05      	subs	r5, r0, #0
   32522:	db0b      	blt.n	3253c <mqtt_disconnect+0x3a>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   32524:	e9dd 1200 	ldrd	r1, r2, [sp]
   32528:	4620      	mov	r0, r4
   3252a:	1a52      	subs	r2, r2, r1
   3252c:	f7ff fee8 	bl	32300 <client_write>
	if (err_code < 0) {
   32530:	1e05      	subs	r5, r0, #0
   32532:	db03      	blt.n	3253c <mqtt_disconnect+0x3a>
		goto error;
	}

	client_disconnect(client, 0);
   32534:	2100      	movs	r1, #0
   32536:	4620      	mov	r0, r4
   32538:	f7ff fec3 	bl	322c2 <client_disconnect>

error:
	mqtt_mutex_unlock(client);
   3253c:	4620      	mov	r0, r4
   3253e:	f7e9 ffb1 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   32542:	4628      	mov	r0, r5
   32544:	b003      	add	sp, #12
   32546:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   32548:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3254c:	e7f6      	b.n	3253c <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3254e:	f06f 0515 	mvn.w	r5, #21
   32552:	e7f6      	b.n	32542 <mqtt_disconnect+0x40>

00032554 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_client *client,
		   const struct mqtt_subscription_list *param)
{
   32554:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32556:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   32558:	4605      	mov	r5, r0
   3255a:	b1f8      	cbz	r0, 3259c <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3255c:	b1f1      	cbz	r1, 3259c <mqtt_subscribe+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> message id 0x%04x "
		 "topic count 0x%04x", client, client->internal.state,
		 param->message_id, param->list_count);

	mqtt_mutex_lock(client);
   3255e:	f7e9 ffcd 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   32562:	4669      	mov	r1, sp
   32564:	4628      	mov	r0, r5
   32566:	f7ff fe8d 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3256a:	69ab      	ldr	r3, [r5, #24]
   3256c:	075b      	lsls	r3, r3, #29
   3256e:	d512      	bpl.n	32596 <mqtt_subscribe+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = subscribe_encode(param, &packet);
   32570:	4620      	mov	r0, r4
   32572:	4669      	mov	r1, sp
   32574:	f7ff fcdf 	bl	31f36 <subscribe_encode>
	if (err_code < 0) {
   32578:	1e04      	subs	r4, r0, #0
   3257a:	db06      	blt.n	3258a <mqtt_subscribe+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3257c:	e9dd 1200 	ldrd	r1, r2, [sp]
   32580:	4628      	mov	r0, r5
   32582:	1a52      	subs	r2, r2, r1
   32584:	f7ff febc 	bl	32300 <client_write>
   32588:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   3258a:	4628      	mov	r0, r5
   3258c:	f7e9 ff8a 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   32590:	4620      	mov	r0, r4
   32592:	b003      	add	sp, #12
   32594:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   32596:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3259a:	e7f6      	b.n	3258a <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3259c:	f06f 0415 	mvn.w	r4, #21
   325a0:	e7f6      	b.n	32590 <mqtt_subscribe+0x3c>

000325a2 <mqtt_ping>:

	return err_code;
}

int mqtt_ping(struct mqtt_client *client)
{
   325a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   325a4:	4604      	mov	r4, r0
   325a6:	b320      	cbz	r0, 325f2 <mqtt_ping+0x50>

	mqtt_mutex_lock(client);
   325a8:	f7e9 ffa8 	bl	1c4fc <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   325ac:	4669      	mov	r1, sp
   325ae:	4620      	mov	r0, r4
   325b0:	f7ff fe68 	bl	32284 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   325b4:	69a3      	ldr	r3, [r4, #24]
   325b6:	075b      	lsls	r3, r3, #29
   325b8:	d518      	bpl.n	325ec <mqtt_ping+0x4a>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = ping_request_encode(&packet);
   325ba:	4668      	mov	r0, sp
   325bc:	f7e9 ff24 	bl	1c408 <ping_request_encode>
	if (err_code < 0) {
   325c0:	1e05      	subs	r5, r0, #0
   325c2:	db0d      	blt.n	325e0 <mqtt_ping+0x3e>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   325c4:	e9dd 1200 	ldrd	r1, r2, [sp]
   325c8:	4620      	mov	r0, r4
   325ca:	1a52      	subs	r2, r2, r1
   325cc:	f7ff fe98 	bl	32300 <client_write>

	if (client->unacked_ping >= INT8_MAX) {
   325d0:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   325d4:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   325d6:	2b7f      	cmp	r3, #127	; 0x7f
   325d8:	d002      	beq.n	325e0 <mqtt_ping+0x3e>
		MQTT_TRC("PING count overflow!");
	} else {
		client->unacked_ping++;
   325da:	3301      	adds	r3, #1
   325dc:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
	}

error:
	mqtt_mutex_unlock(client);
   325e0:	4620      	mov	r0, r4
   325e2:	f7e9 ff5f 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   325e6:	4628      	mov	r0, r5
   325e8:	b003      	add	sp, #12
   325ea:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   325ec:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   325f0:	e7f6      	b.n	325e0 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   325f2:	f06f 0515 	mvn.w	r5, #21
   325f6:	e7f6      	b.n	325e6 <mqtt_ping+0x44>

000325f8 <mqtt_live>:

	return 0;
}

int mqtt_live(struct mqtt_client *client)
{
   325f8:	b570      	push	{r4, r5, r6, lr}
	int err_code = 0;
	u32_t elapsed_time;
	bool ping_sent = false;

	NULL_PARAM_CHECK(client);
   325fa:	4606      	mov	r6, r0
   325fc:	b300      	cbz	r0, 32640 <mqtt_live+0x48>

	mqtt_mutex_lock(client);
   325fe:	f7e9 ff7d 	bl	1c4fc <mqtt_mutex_lock>

	elapsed_time = mqtt_elapsed_time_in_ms_get(
   32602:	6974      	ldr	r4, [r6, #20]
   32604:	f7ff fe30 	bl	32268 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   32608:	1b00      	subs	r0, r0, r4
				client->internal.last_activity);
	if ((client->keepalive > 0) &&
   3260a:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   3260e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   32612:	b19c      	cbz	r4, 3263c <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   32614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   32618:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3261a:	4284      	cmp	r4, r0
   3261c:	d80d      	bhi.n	3263a <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3261e:	4630      	mov	r0, r6
   32620:	f7ff ffbf 	bl	325a2 <mqtt_ping>
		ping_sent = true;
   32624:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   32626:	4605      	mov	r5, r0
	}

	mqtt_mutex_unlock(client);
   32628:	4630      	mov	r0, r6
   3262a:	f7e9 ff3b 	bl	1c4a4 <mqtt_mutex_unlock>

	if (ping_sent) {
		return err_code;
	} else {
		return -EAGAIN;
   3262e:	2c00      	cmp	r4, #0
   32630:	bf08      	it	eq
   32632:	f06f 050a 	mvneq.w	r5, #10
	}
}
   32636:	4628      	mov	r0, r5
   32638:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3263a:	2400      	movs	r4, #0
	int err_code = 0;
   3263c:	4625      	mov	r5, r4
   3263e:	e7f3      	b.n	32628 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   32640:	f06f 0515 	mvn.w	r5, #21
   32644:	e7f7      	b.n	32636 <mqtt_live+0x3e>

00032646 <mqtt_input>:

	return keepalive_ms - elapsed_time;
}

int mqtt_input(struct mqtt_client *client)
{
   32646:	b538      	push	{r3, r4, r5, lr}
	int err_code = 0;

	NULL_PARAM_CHECK(client);
   32648:	4605      	mov	r5, r0
   3264a:	b1d0      	cbz	r0, 32682 <mqtt_input+0x3c>

	mqtt_mutex_lock(client);
   3264c:	f7e9 ff56 	bl	1c4fc <mqtt_mutex_lock>

	MQTT_TRC("state:0x%08x", client->internal.state);

	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   32650:	69ab      	ldr	r3, [r5, #24]
   32652:	079b      	lsls	r3, r3, #30
   32654:	d50f      	bpl.n	32676 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   32656:	6a2b      	ldr	r3, [r5, #32]
   32658:	b983      	cbnz	r3, 3267c <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3265a:	4628      	mov	r0, r5
   3265c:	f7ff fccd 	bl	31ffa <mqtt_handle_rx>
	if (err_code < 0) {
   32660:	1e04      	subs	r4, r0, #0
   32662:	da03      	bge.n	3266c <mqtt_input+0x26>
		client_disconnect(client, err_code);
   32664:	4621      	mov	r1, r4
   32666:	4628      	mov	r0, r5
   32668:	f7ff fe2b 	bl	322c2 <client_disconnect>
		err_code = client_read(client);
	} else {
		err_code = -EACCES;
	}

	mqtt_mutex_unlock(client);
   3266c:	4628      	mov	r0, r5
   3266e:	f7e9 ff19 	bl	1c4a4 <mqtt_mutex_unlock>

	return err_code;
}
   32672:	4620      	mov	r0, r4
   32674:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   32676:	f06f 040c 	mvn.w	r4, #12
   3267a:	e7f7      	b.n	3266c <mqtt_input+0x26>
		return -EBUSY;
   3267c:	f06f 040f 	mvn.w	r4, #15
   32680:	e7f4      	b.n	3266c <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   32682:	f06f 0415 	mvn.w	r4, #21
   32686:	e7f4      	b.n	32672 <mqtt_input+0x2c>

00032688 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   32688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   3268a:	6d06      	ldr	r6, [r0, #80]	; 0x50
{
   3268c:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   3268e:	8830      	ldrh	r0, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   32690:	f44f 7281 	mov.w	r2, #258	; 0x102
   32694:	2101      	movs	r1, #1
   32696:	f7e4 fec9 	bl	1742c <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   3269a:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   3269c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   3269e:	da05      	bge.n	326ac <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   326a0:	f7fd fcbd 	bl	3001e <__errno>
   326a4:	6800      	ldr	r0, [r0, #0]
   326a6:	4240      	negs	r0, r0
}
   326a8:	b003      	add	sp, #12
   326aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   326ac:	2304      	movs	r3, #4
   326ae:	2205      	movs	r2, #5
   326b0:	9300      	str	r3, [sp, #0]
   326b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   326b6:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   326ba:	f7fc fa10 	bl	2eade <z_impl_zsock_setsockopt>
	if (ret < 0) {
   326be:	2800      	cmp	r0, #0
   326c0:	da03      	bge.n	326ca <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   326c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   326c4:	f7fc f94e 	bl	2e964 <z_impl_zsock_close>
   326c8:	e7ea      	b.n	326a0 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   326ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   326cc:	bb03      	cbnz	r3, 32710 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   326ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   326d0:	bb63      	cbnz	r3, 3272c <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   326d2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   326d4:	2d00      	cmp	r5, #0
   326d6:	d137      	bne.n	32748 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   326d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   326da:	2b01      	cmp	r3, #1
   326dc:	d10b      	bne.n	326f6 <mqtt_client_tls_connect+0x6e>
   326de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   326e0:	2304      	movs	r3, #4
   326e2:	2207      	movs	r2, #7
   326e4:	9300      	str	r3, [sp, #0]
   326e6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   326ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   326ee:	f7fc f9f6 	bl	2eade <z_impl_zsock_setsockopt>
		if (ret < 0) {
   326f2:	2800      	cmp	r0, #0
   326f4:	dbe5      	blt.n	326c2 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   326f6:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   326f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   326fa:	2b01      	cmp	r3, #1
   326fc:	bf0c      	ite	eq
   326fe:	2208      	moveq	r2, #8
   32700:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   32702:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   32704:	f7fc f947 	bl	2e996 <z_impl_zsock_connect>
	if (ret < 0) {
   32708:	2800      	cmp	r0, #0
   3270a:	dbda      	blt.n	326c2 <mqtt_client_tls_connect+0x3a>
	return 0;
   3270c:	2000      	movs	r0, #0
   3270e:	e7cb      	b.n	326a8 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   32710:	6b22      	ldr	r2, [r4, #48]	; 0x30
   32712:	2a00      	cmp	r2, #0
   32714:	d0db      	beq.n	326ce <mqtt_client_tls_connect+0x46>
   32716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   32718:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3271a:	9200      	str	r2, [sp, #0]
   3271c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   32720:	2203      	movs	r2, #3
   32722:	f7fc f9dc 	bl	2eade <z_impl_zsock_setsockopt>
		if (ret < 0) {
   32726:	2800      	cmp	r0, #0
   32728:	dad1      	bge.n	326ce <mqtt_client_tls_connect+0x46>
   3272a:	e7ca      	b.n	326c2 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   3272c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3272e:	2a00      	cmp	r2, #0
   32730:	d0cf      	beq.n	326d2 <mqtt_client_tls_connect+0x4a>
   32732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   32734:	0092      	lsls	r2, r2, #2
   32736:	9200      	str	r2, [sp, #0]
   32738:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3273c:	2201      	movs	r2, #1
   3273e:	f7fc f9ce 	bl	2eade <z_impl_zsock_setsockopt>
		if (ret < 0) {
   32742:	2800      	cmp	r0, #0
   32744:	dac5      	bge.n	326d2 <mqtt_client_tls_connect+0x4a>
   32746:	e7bc      	b.n	326c2 <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   32748:	4628      	mov	r0, r5
   3274a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   3274c:	f7df fc98 	bl	12080 <strlen>
   32750:	2202      	movs	r2, #2
   32752:	9000      	str	r0, [sp, #0]
   32754:	462b      	mov	r3, r5
   32756:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3275a:	4638      	mov	r0, r7
   3275c:	f7fc f9bf 	bl	2eade <z_impl_zsock_setsockopt>
		if (ret < 0) {
   32760:	2800      	cmp	r0, #0
   32762:	dab9      	bge.n	326d8 <mqtt_client_tls_connect+0x50>
   32764:	e7ad      	b.n	326c2 <mqtt_client_tls_connect+0x3a>

00032766 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   32766:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   3276a:	2400      	movs	r4, #0
{
   3276c:	4607      	mov	r7, r0
   3276e:	4688      	mov	r8, r1
   32770:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   32772:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   32774:	42ac      	cmp	r4, r5
   32776:	d301      	bcc.n	3277c <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   32778:	2000      	movs	r0, #0
   3277a:	e00e      	b.n	3279a <mqtt_client_tls_write+0x34>
		ret = send(client->transport.tls.sock, data + offset,
   3277c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3277e:	2300      	movs	r3, #0
   32780:	e9cd 6600 	strd	r6, r6, [sp]
   32784:	1b2a      	subs	r2, r5, r4
   32786:	eb08 0104 	add.w	r1, r8, r4
   3278a:	f7fc f925 	bl	2e9d8 <z_impl_zsock_sendto>
		if (ret < 0) {
   3278e:	2800      	cmp	r0, #0
   32790:	da06      	bge.n	327a0 <mqtt_client_tls_write+0x3a>
			return -errno;
   32792:	f7fd fc44 	bl	3001e <__errno>
   32796:	6800      	ldr	r0, [r0, #0]
   32798:	4240      	negs	r0, r0
}
   3279a:	b002      	add	sp, #8
   3279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   327a0:	4404      	add	r4, r0
   327a2:	e7e7      	b.n	32774 <mqtt_client_tls_write+0xe>

000327a4 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   327a4:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   327a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   327a8:	2200      	movs	r2, #0
   327aa:	f7fc f94a 	bl	2ea42 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   327ae:	2800      	cmp	r0, #0
   327b0:	da04      	bge.n	327bc <mqtt_client_tls_write_msg+0x18>
		return -errno;
   327b2:	f7fd fc34 	bl	3001e <__errno>
   327b6:	6800      	ldr	r0, [r0, #0]
   327b8:	4240      	negs	r0, r0
	}

	return 0;
}
   327ba:	bd08      	pop	{r3, pc}
	return 0;
   327bc:	2000      	movs	r0, #0
   327be:	e7fc      	b.n	327ba <mqtt_client_tls_write_msg+0x16>

000327c0 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   327c0:	b513      	push	{r0, r1, r4, lr}
   327c2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   327c4:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   327c6:	bf14      	ite	ne
   327c8:	4623      	movne	r3, r4
   327ca:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   327cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   327ce:	e9cd 4400 	strd	r4, r4, [sp]
   327d2:	f7fc f953 	bl	2ea7c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   327d6:	2800      	cmp	r0, #0
   327d8:	da03      	bge.n	327e2 <mqtt_client_tls_read+0x22>
		return -errno;
   327da:	f7fd fc20 	bl	3001e <__errno>
   327de:	6800      	ldr	r0, [r0, #0]
   327e0:	4240      	negs	r0, r0
	}

	return ret;
}
   327e2:	b002      	add	sp, #8
   327e4:	bd10      	pop	{r4, pc}

000327e6 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   327e6:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   327e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   327ea:	f7fc f8bb 	bl	2e964 <z_impl_zsock_close>
	if (ret < 0) {
   327ee:	2800      	cmp	r0, #0
   327f0:	da04      	bge.n	327fc <mqtt_client_tls_disconnect+0x16>
		return -errno;
   327f2:	f7fd fc14 	bl	3001e <__errno>
   327f6:	6800      	ldr	r0, [r0, #0]
   327f8:	4240      	negs	r0, r0
	}

	return 0;
}
   327fa:	bd08      	pop	{r3, pc}
	return 0;
   327fc:	2000      	movs	r0, #0
   327fe:	e7fc      	b.n	327fa <mqtt_client_tls_disconnect+0x14>

00032800 <dns_init_resolver>:
	ret = dns_resolve_init(dns_resolve_get_default(), dns_servers, NULL);
	if (ret < 0) {
		NET_WARN("Cannot initialize DNS resolver (%d)", ret);
	}
#endif
}
   32800:	4770      	bx	lr

00032802 <base64_char>:
	if (value < 26) {
   32802:	2819      	cmp	r0, #25
   32804:	dc01      	bgt.n	3280a <base64_char+0x8>
		return value + 'A';
   32806:	3041      	adds	r0, #65	; 0x41
   32808:	4770      	bx	lr
	} else if (value < 52) {
   3280a:	2833      	cmp	r0, #51	; 0x33
   3280c:	dc01      	bgt.n	32812 <base64_char+0x10>
		return value + 'a' - 26;
   3280e:	3047      	adds	r0, #71	; 0x47
   32810:	4770      	bx	lr
	} else if (value < 62) {
   32812:	283d      	cmp	r0, #61	; 0x3d
   32814:	dc01      	bgt.n	3281a <base64_char+0x18>
		return value + '0' - 52;
   32816:	3804      	subs	r0, #4
   32818:	4770      	bx	lr
	} else if (value == 62) {
   3281a:	283e      	cmp	r0, #62	; 0x3e
		return '_';
   3281c:	bf0c      	ite	eq
   3281e:	202d      	moveq	r0, #45	; 0x2d
   32820:	205f      	movne	r0, #95	; 0x5f
}
   32822:	4770      	bx	lr

00032824 <base64_outch>:
	if (st->overflowed) {
   32824:	7b02      	ldrb	r2, [r0, #12]
{
   32826:	b510      	push	{r4, lr}
	if (st->overflowed) {
   32828:	b922      	cbnz	r2, 32834 <base64_outch+0x10>
	if (st->len < 2) {
   3282a:	6883      	ldr	r3, [r0, #8]
   3282c:	2b01      	cmp	r3, #1
   3282e:	d802      	bhi.n	32836 <base64_outch+0x12>
		st->overflowed = true;
   32830:	2301      	movs	r3, #1
   32832:	7303      	strb	r3, [r0, #12]
}
   32834:	bd10      	pop	{r4, pc}
	*st->buf++ = ch;
   32836:	6843      	ldr	r3, [r0, #4]
   32838:	1c5c      	adds	r4, r3, #1
   3283a:	6044      	str	r4, [r0, #4]
   3283c:	7019      	strb	r1, [r3, #0]
	st->len--;
   3283e:	6883      	ldr	r3, [r0, #8]
   32840:	3b01      	subs	r3, #1
   32842:	6083      	str	r3, [r0, #8]
	*st->buf = 0;
   32844:	6843      	ldr	r3, [r0, #4]
   32846:	701a      	strb	r2, [r3, #0]
   32848:	e7f4      	b.n	32834 <base64_outch+0x10>

0003284a <base64_flush>:
	if (st->pending < 1) {
   3284a:	6903      	ldr	r3, [r0, #16]
{
   3284c:	b510      	push	{r4, lr}
	if (st->pending < 1) {
   3284e:	2b00      	cmp	r3, #0
{
   32850:	4604      	mov	r4, r0
	if (st->pending < 1) {
   32852:	dd35      	ble.n	328c0 <base64_flush+0x76>
	base64_outch(st, base64_char(st->wip[0] >> 2));
   32854:	7b40      	ldrb	r0, [r0, #13]
   32856:	0880      	lsrs	r0, r0, #2
   32858:	f7ff ffd3 	bl	32802 <base64_char>
   3285c:	b2c1      	uxtb	r1, r0
   3285e:	4620      	mov	r0, r4
   32860:	f7ff ffe0 	bl	32824 <base64_outch>
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   32864:	7b63      	ldrb	r3, [r4, #13]
				(st->wip[1] >> 4)));
   32866:	7ba0      	ldrb	r0, [r4, #14]
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   32868:	011b      	lsls	r3, r3, #4
   3286a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   3286e:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   32872:	f7ff ffc6 	bl	32802 <base64_char>
   32876:	b2c1      	uxtb	r1, r0
   32878:	4620      	mov	r0, r4
   3287a:	f7ff ffd3 	bl	32824 <base64_outch>
	if (st->pending >= 2) {
   3287e:	6923      	ldr	r3, [r4, #16]
   32880:	2b01      	cmp	r3, #1
   32882:	dd0c      	ble.n	3289e <base64_flush+0x54>
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   32884:	7ba3      	ldrb	r3, [r4, #14]
				(st->wip[2] >> 6)));
   32886:	7be0      	ldrb	r0, [r4, #15]
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   32888:	009b      	lsls	r3, r3, #2
   3288a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   3288e:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
   32892:	f7ff ffb6 	bl	32802 <base64_char>
   32896:	b2c1      	uxtb	r1, r0
   32898:	4620      	mov	r0, r4
   3289a:	f7ff ffc3 	bl	32824 <base64_outch>
	if (st->pending >= 3) {
   3289e:	6923      	ldr	r3, [r4, #16]
   328a0:	2b02      	cmp	r3, #2
   328a2:	dd08      	ble.n	328b6 <base64_flush+0x6c>
		base64_outch(st, base64_char(st->wip[2] & 0x3f));
   328a4:	7be0      	ldrb	r0, [r4, #15]
   328a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   328aa:	f7ff ffaa 	bl	32802 <base64_char>
   328ae:	b2c1      	uxtb	r1, r0
   328b0:	4620      	mov	r0, r4
   328b2:	f7ff ffb7 	bl	32824 <base64_outch>
	st->pending = 0;
   328b6:	2300      	movs	r3, #0
   328b8:	6123      	str	r3, [r4, #16]
   328ba:	f8a4 300d 	strh.w	r3, [r4, #13]
   328be:	73e3      	strb	r3, [r4, #15]
}
   328c0:	bd10      	pop	{r4, pc}

000328c2 <base64_append_bytes>:
{
   328c2:	b570      	push	{r4, r5, r6, lr}
   328c4:	4604      	mov	r4, r0
   328c6:	4615      	mov	r5, r2
	while (len-- > 0) {
   328c8:	1846      	adds	r6, r0, r1
   328ca:	42b4      	cmp	r4, r6
   328cc:	d101      	bne.n	328d2 <base64_append_bytes+0x10>
}
   328ce:	2000      	movs	r0, #0
   328d0:	bd70      	pop	{r4, r5, r6, pc}
	st->wip[st->pending++] = byte;
   328d2:	692b      	ldr	r3, [r5, #16]
		base64_addbyte(st, *bytes++);
   328d4:	f814 1b01 	ldrb.w	r1, [r4], #1
	st->wip[st->pending++] = byte;
   328d8:	1c5a      	adds	r2, r3, #1
	if (st->pending == 3) {
   328da:	2a03      	cmp	r2, #3
	st->wip[st->pending++] = byte;
   328dc:	442b      	add	r3, r5
   328de:	612a      	str	r2, [r5, #16]
   328e0:	7359      	strb	r1, [r3, #13]
	if (st->pending == 3) {
   328e2:	d1f2      	bne.n	328ca <base64_append_bytes+0x8>
		base64_flush(st);
   328e4:	4628      	mov	r0, r5
   328e6:	f7ff ffb0 	bl	3284a <base64_flush>
   328ea:	e7ee      	b.n	328ca <base64_append_bytes+0x8>

000328ec <nrf_gpio_pin_present_check>:
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   328ec:	0943      	lsrs	r3, r0, #5
   328ee:	bf0c      	ite	eq
   328f0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   328f4:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   328f6:	f000 001f 	and.w	r0, r0, #31

    return (mask & (1UL << pin_number)) ? true : false;
   328fa:	fa23 f000 	lsr.w	r0, r3, r0
}
   328fe:	f000 0001 	and.w	r0, r0, #1
   32902:	4770      	bx	lr

00032904 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32904:	6843      	ldr	r3, [r0, #4]
}
   32906:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32908:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3290a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3290c:	600b      	str	r3, [r1, #0]
}
   3290e:	4770      	bx	lr

00032910 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32910:	6843      	ldr	r3, [r0, #4]
   32912:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   32914:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   32916:	4042      	eors	r2, r0
   32918:	400a      	ands	r2, r1
   3291a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3291c:	605a      	str	r2, [r3, #4]
}
   3291e:	2000      	movs	r0, #0
   32920:	4770      	bx	lr

00032922 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32922:	6843      	ldr	r3, [r0, #4]
}
   32924:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32926:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   32928:	6099      	str	r1, [r3, #8]
}
   3292a:	4770      	bx	lr

0003292c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3292c:	6843      	ldr	r3, [r0, #4]
}
   3292e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32930:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   32932:	60d9      	str	r1, [r3, #12]
}
   32934:	4770      	bx	lr

00032936 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32936:	6843      	ldr	r3, [r0, #4]
}
   32938:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3293a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3293c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3293e:	4059      	eors	r1, r3
    p_reg->OUT = value;
   32940:	6051      	str	r1, [r2, #4]
}
   32942:	4770      	bx	lr

00032944 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   32944:	2301      	movs	r3, #1
{
   32946:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   32948:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   3294a:	fa03 f201 	lsl.w	r2, r3, r1
   3294e:	6923      	ldr	r3, [r4, #16]
   32950:	ea23 0302 	bic.w	r3, r3, r2
   32954:	6123      	str	r3, [r4, #16]
}
   32956:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   3295a:	f7e9 bfdd 	b.w	1c918 <gpiote_pin_int_cfg>

0003295e <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   3295e:	2301      	movs	r3, #1
{
   32960:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   32962:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   32964:	fa03 f201 	lsl.w	r2, r3, r1
   32968:	6923      	ldr	r3, [r4, #16]
   3296a:	4313      	orrs	r3, r2
   3296c:	6123      	str	r3, [r4, #16]
}
   3296e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   32972:	f7e9 bfd1 	b.w	1c918 <gpiote_pin_int_cfg>

00032976 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   32976:	2000      	movs	r0, #0
   32978:	4770      	bx	lr

0003297a <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3297a:	4668      	mov	r0, sp
   3297c:	f020 0107 	bic.w	r1, r0, #7
   32980:	468d      	mov	sp, r1
   32982:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   32984:	f7ec fb86 	bl	1f094 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   32988:	f7e6 f95e 	bl	18c48 <_arch_isr_direct_pm>
   3298c:	f7e6 fb40 	bl	19010 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   32990:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   32994:	4685      	mov	sp, r0
   32996:	4770      	bx	lr

00032998 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   32998:	4668      	mov	r0, sp
   3299a:	f020 0107 	bic.w	r1, r0, #7
   3299e:	468d      	mov	sp, r1
   329a0:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   329a2:	f7ec fea1 	bl	1f6e8 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   329a6:	f7e6 f94f 	bl	18c48 <_arch_isr_direct_pm>
   329aa:	f7e6 fb31 	bl	19010 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   329ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   329b2:	4685      	mov	sp, r0
   329b4:	4770      	bx	lr

000329b6 <trace_task_create>:
{
   329b6:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   329b8:	201d      	movs	r0, #29
   329ba:	2200      	movs	r2, #0
   329bc:	2106      	movs	r1, #6
   329be:	f7e6 f911 	bl	18be4 <z_arm_irq_priority_set>
}
   329c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   329c6:	201d      	movs	r0, #29
   329c8:	f7e6 b8fc 	b.w	18bc4 <arch_irq_enable>

000329cc <read_task_create>:
{
   329cc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   329ce:	201c      	movs	r0, #28
   329d0:	2200      	movs	r2, #0
   329d2:	2106      	movs	r1, #6
   329d4:	f7e6 f906 	bl	18be4 <z_arm_irq_priority_set>
}
   329d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   329dc:	201c      	movs	r0, #28
   329de:	f7e6 b8f1 	b.w	18bc4 <arch_irq_enable>

000329e2 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   329e2:	2000      	movs	r0, #0
   329e4:	4770      	bx	lr

000329e6 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   329e6:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   329ea:	bf18      	it	ne
   329ec:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   329ee:	0781      	lsls	r1, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   329f0:	bf48      	it	mi
   329f2:	f043 0308 	orrmi.w	r3, r3, #8
	if (z_flags & MSG_TRUNC) {
   329f6:	06c2      	lsls	r2, r0, #27
		nrf_flags |= NRF_MSG_TRUNC;
   329f8:	bf48      	it	mi
   329fa:	f043 0320 	orrmi.w	r3, r3, #32
}
   329fe:	4618      	mov	r0, r3
   32a00:	4770      	bx	lr

00032a02 <z_to_nrf_family>:
	switch (z_family) {
   32a02:	2803      	cmp	r0, #3
   32a04:	d00f      	beq.n	32a26 <z_to_nrf_family+0x24>
   32a06:	d808      	bhi.n	32a1a <z_to_nrf_family+0x18>
   32a08:	2801      	cmp	r0, #1
   32a0a:	d00e      	beq.n	32a2a <z_to_nrf_family+0x28>
   32a0c:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   32a0e:	bf08      	it	eq
   32a10:	200a      	moveq	r0, #10
   32a12:	bf18      	it	ne
   32a14:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   32a18:	4770      	bx	lr
	switch (z_family) {
   32a1a:	2806      	cmp	r0, #6
   32a1c:	d007      	beq.n	32a2e <z_to_nrf_family+0x2c>
   32a1e:	2866      	cmp	r0, #102	; 0x66
		return -EAFNOSUPPORT;
   32a20:	bf08      	it	eq
   32a22:	2066      	moveq	r0, #102	; 0x66
   32a24:	e7f5      	b.n	32a12 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   32a26:	2005      	movs	r0, #5
   32a28:	4770      	bx	lr
		return NRF_AF_INET;
   32a2a:	2002      	movs	r0, #2
   32a2c:	4770      	bx	lr
		return NRF_AF_LOCAL;
   32a2e:	2001      	movs	r0, #1
}
   32a30:	4770      	bx	lr

00032a32 <z_to_nrf_protocol>:
	switch (proto) {
   32a32:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   32a36:	d01d      	beq.n	32a74 <z_to_nrf_protocol+0x42>
   32a38:	dc08      	bgt.n	32a4c <z_to_nrf_protocol+0x1a>
   32a3a:	2806      	cmp	r0, #6
   32a3c:	d01d      	beq.n	32a7a <z_to_nrf_protocol+0x48>
   32a3e:	2811      	cmp	r0, #17
   32a40:	d01d      	beq.n	32a7e <z_to_nrf_protocol+0x4c>
   32a42:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   32a44:	bf18      	it	ne
   32a46:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   32a4a:	4770      	bx	lr
	switch (proto) {
   32a4c:	f240 2301 	movw	r3, #513	; 0x201
   32a50:	4298      	cmp	r0, r3
   32a52:	d015      	beq.n	32a80 <z_to_nrf_protocol+0x4e>
   32a54:	dc06      	bgt.n	32a64 <z_to_nrf_protocol+0x32>
   32a56:	f240 1311 	movw	r3, #273	; 0x111
   32a5a:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   32a5c:	bf08      	it	eq
   32a5e:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   32a62:	e7ef      	b.n	32a44 <z_to_nrf_protocol+0x12>
	switch (proto) {
   32a64:	f240 2302 	movw	r3, #514	; 0x202
   32a68:	4298      	cmp	r0, r3
   32a6a:	d009      	beq.n	32a80 <z_to_nrf_protocol+0x4e>
   32a6c:	f240 2303 	movw	r3, #515	; 0x203
   32a70:	4298      	cmp	r0, r3
   32a72:	e7e7      	b.n	32a44 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   32a74:	f44f 7082 	mov.w	r0, #260	; 0x104
   32a78:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   32a7a:	2001      	movs	r0, #1
   32a7c:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   32a7e:	2002      	movs	r0, #2
}
   32a80:	4770      	bx	lr

00032a82 <nrf91_socket_is_supported>:
}
   32a82:	2001      	movs	r0, #1
   32a84:	4770      	bx	lr

00032a86 <nrf91_bsdlib_socket_offload_init>:
}
   32a86:	2000      	movs	r0, #0
   32a88:	4770      	bx	lr

00032a8a <nrf91_socket_offload_getsockopt>:
{
   32a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32a8e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   32a90:	2300      	movs	r3, #0
{
   32a92:	b086      	sub	sp, #24
   32a94:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   32a98:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   32a9c:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   32aa0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   32aa4:	460c      	mov	r4, r1
   32aa6:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   32aa8:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   32aac:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   32aae:	d002      	beq.n	32ab6 <nrf91_socket_offload_getsockopt+0x2c>
   32ab0:	dc2d      	bgt.n	32b0e <nrf91_socket_offload_getsockopt+0x84>
   32ab2:	2901      	cmp	r1, #1
   32ab4:	d140      	bne.n	32b38 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   32ab6:	aa02      	add	r2, sp, #8
   32ab8:	4631      	mov	r1, r6
   32aba:	4620      	mov	r0, r4
   32abc:	f7ea fb26 	bl	1d10c <z_to_nrf_optname>
   32ac0:	2800      	cmp	r0, #0
   32ac2:	db39      	blt.n	32b38 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   32ac4:	2c01      	cmp	r4, #1
   32ac6:	d12a      	bne.n	32b1e <nrf91_socket_offload_getsockopt+0x94>
   32ac8:	f1a6 0314 	sub.w	r3, r6, #20
   32acc:	2b01      	cmp	r3, #1
   32ace:	d826      	bhi.n	32b1e <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   32ad0:	2308      	movs	r3, #8
   32ad2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   32ad4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   32ad6:	aa03      	add	r2, sp, #12
   32ad8:	9200      	str	r2, [sp, #0]
   32ada:	4638      	mov	r0, r7
   32adc:	9a02      	ldr	r2, [sp, #8]
   32ade:	4621      	mov	r1, r4
   32ae0:	f7f2 fcba 	bl	25458 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   32ae4:	4607      	mov	r7, r0
   32ae6:	b970      	cbnz	r0, 32b06 <nrf91_socket_offload_getsockopt+0x7c>
   32ae8:	b16d      	cbz	r5, 32b06 <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   32aea:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   32aec:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   32aee:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   32af2:	d108      	bne.n	32b06 <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   32af4:	2e04      	cmp	r6, #4
   32af6:	d114      	bne.n	32b22 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   32af8:	6828      	ldr	r0, [r5, #0]
   32afa:	f7ea f9ed 	bl	1ced8 <bsd_os_errno_set>
				*(int *)optval = errno;
   32afe:	f7fd fa8e 	bl	3001e <__errno>
   32b02:	6803      	ldr	r3, [r0, #0]
   32b04:	602b      	str	r3, [r5, #0]
}
   32b06:	4638      	mov	r0, r7
   32b08:	b006      	add	sp, #24
   32b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   32b0e:	f240 2302 	movw	r3, #514	; 0x202
   32b12:	4299      	cmp	r1, r3
   32b14:	d0cf      	beq.n	32ab6 <nrf91_socket_offload_getsockopt+0x2c>
   32b16:	f240 2303 	movw	r3, #515	; 0x203
   32b1a:	4299      	cmp	r1, r3
   32b1c:	e7ca      	b.n	32ab4 <nrf91_socket_offload_getsockopt+0x2a>
   32b1e:	462b      	mov	r3, r5
   32b20:	e7d9      	b.n	32ad6 <nrf91_socket_offload_getsockopt+0x4c>
			} else if ((optname == SO_RCVTIMEO) ||
   32b22:	3e14      	subs	r6, #20
   32b24:	2e01      	cmp	r6, #1
   32b26:	d8ee      	bhi.n	32b06 <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   32b28:	9b04      	ldr	r3, [sp, #16]
   32b2a:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   32b2c:	9b05      	ldr	r3, [sp, #20]
   32b2e:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   32b30:	2308      	movs	r3, #8
   32b32:	f8c8 3000 	str.w	r3, [r8]
   32b36:	e7e6      	b.n	32b06 <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   32b38:	f7fd fa71 	bl	3001e <__errno>
   32b3c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   32b3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   32b42:	6003      	str	r3, [r0, #0]
	return retval;
   32b44:	e7df      	b.n	32b06 <nrf91_socket_offload_getsockopt+0x7c>

00032b46 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   32b46:	3801      	subs	r0, #1
   32b48:	f7f2 bc32 	b.w	253b0 <nrf_listen>

00032b4c <nrf91_socket_offload_freeaddrinfo>:
{
   32b4c:	b538      	push	{r3, r4, r5, lr}
   32b4e:	4604      	mov	r4, r0
	while (next != NULL) {
   32b50:	b904      	cbnz	r4, 32b54 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   32b52:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   32b54:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   32b56:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   32b58:	f000 fc50 	bl	333fc <k_free>
		k_free(this);
   32b5c:	4620      	mov	r0, r4
   32b5e:	f000 fc4d 	bl	333fc <k_free>
		next = next->ai_next;
   32b62:	462c      	mov	r4, r5
   32b64:	e7f4      	b.n	32b50 <nrf91_socket_offload_freeaddrinfo+0x4>

00032b66 <z_to_nrf_addrinfo_hints>:
{
   32b66:	b538      	push	{r3, r4, r5, lr}
   32b68:	460c      	mov	r4, r1
   32b6a:	4605      	mov	r5, r0
   32b6c:	221c      	movs	r2, #28
   32b6e:	2100      	movs	r1, #0
   32b70:	1d20      	adds	r0, r4, #4
   32b72:	f000 fe5f 	bl	33834 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   32b76:	2300      	movs	r3, #0
   32b78:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   32b7a:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   32b7c:	2b03      	cmp	r3, #3
   32b7e:	d003      	beq.n	32b88 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   32b80:	2b04      	cmp	r3, #4
   32b82:	bf08      	it	eq
   32b84:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   32b88:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   32b8a:	8928      	ldrh	r0, [r5, #8]
   32b8c:	f7ff ff39 	bl	32a02 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   32b90:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   32b94:	d00b      	beq.n	32bae <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   32b96:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   32b98:	6928      	ldr	r0, [r5, #16]
   32b9a:	f7ff ff4a 	bl	32a32 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   32b9e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   32ba2:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   32ba4:	d003      	beq.n	32bae <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   32ba6:	69e8      	ldr	r0, [r5, #28]
   32ba8:	b108      	cbz	r0, 32bae <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   32baa:	61a0      	str	r0, [r4, #24]
	return 0;
   32bac:	2000      	movs	r0, #0
}
   32bae:	bd38      	pop	{r3, r4, r5, pc}

00032bb0 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   32bb0:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   32bb2:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   32bb4:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   32bb6:	4603      	mov	r3, r0
{
   32bb8:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   32bba:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32bbe:	f101 0210 	add.w	r2, r1, #16
   32bc2:	f102 0410 	add.w	r4, r2, #16
   32bc6:	f852 5b04 	ldr.w	r5, [r2], #4
   32bca:	42a2      	cmp	r2, r4
   32bcc:	f843 5b04 	str.w	r5, [r3], #4
   32bd0:	d1f9      	bne.n	32bc6 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   32bd2:	6a0b      	ldr	r3, [r1, #32]
   32bd4:	7503      	strb	r3, [r0, #20]
}
   32bd6:	bd30      	pop	{r4, r5, pc}

00032bd8 <nrf91_socket_offload_recvfrom>:
{
   32bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int sd = OBJ_TO_SD(obj);
   32bdc:	1e45      	subs	r5, r0, #1
{
   32bde:	b08d      	sub	sp, #52	; 0x34
   32be0:	4618      	mov	r0, r3
   32be2:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   32be6:	4688      	mov	r8, r1
   32be8:	4691      	mov	r9, r2
   32bea:	f7ff fefc 	bl	329e6 <z_to_nrf_flags>
   32bee:	4603      	mov	r3, r0
	if (from == NULL) {
   32bf0:	b95c      	cbnz	r4, 32c0a <nrf91_socket_offload_recvfrom+0x32>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   32bf2:	4628      	mov	r0, r5
   32bf4:	e9cd 4400 	strd	r4, r4, [sp]
   32bf8:	464a      	mov	r2, r9
   32bfa:	4641      	mov	r1, r8
   32bfc:	f7f2 fbaa 	bl	25354 <nrf_recvfrom>
   32c00:	4605      	mov	r5, r0
}
   32c02:	4628      	mov	r0, r5
   32c04:	b00d      	add	sp, #52	; 0x34
   32c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   32c0a:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   32c0c:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   32c0e:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   32c10:	aa02      	add	r2, sp, #8
   32c12:	9201      	str	r2, [sp, #4]
   32c14:	4628      	mov	r0, r5
   32c16:	9700      	str	r7, [sp, #0]
   32c18:	464a      	mov	r2, r9
   32c1a:	4641      	mov	r1, r8
   32c1c:	f7f2 fb9a 	bl	25354 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   32c20:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   32c22:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   32c24:	2b02      	cmp	r3, #2
   32c26:	d109      	bne.n	32c3c <nrf91_socket_offload_recvfrom+0x64>
	ptr->sin_port = nrf_in->sin_port;
   32c28:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   32c2c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   32c2e:	2301      	movs	r3, #1
   32c30:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32c32:	9b06      	ldr	r3, [sp, #24]
   32c34:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   32c36:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   32c38:	6033      	str	r3, [r6, #0]
	return retval;
   32c3a:	e7e2      	b.n	32c02 <nrf91_socket_offload_recvfrom+0x2a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   32c3c:	2b0a      	cmp	r3, #10
   32c3e:	d1e0      	bne.n	32c02 <nrf91_socket_offload_recvfrom+0x2a>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   32c40:	4639      	mov	r1, r7
   32c42:	4620      	mov	r0, r4
   32c44:	f7ff ffb4 	bl	32bb0 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   32c48:	2318      	movs	r3, #24
   32c4a:	e7f5      	b.n	32c38 <nrf91_socket_offload_recvfrom+0x60>

00032c4c <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   32c4c:	2300      	movs	r3, #0
{
   32c4e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   32c50:	e9cd 3300 	strd	r3, r3, [sp]
   32c54:	f7ff ffc0 	bl	32bd8 <nrf91_socket_offload_recvfrom>
}
   32c58:	b003      	add	sp, #12
   32c5a:	f85d fb04 	ldr.w	pc, [sp], #4

00032c5e <nrf91_socket_offload_getaddrinfo>:
{
   32c5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32c62:	4614      	mov	r4, r2
   32c64:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   32c66:	2100      	movs	r1, #0
{
   32c68:	b093      	sub	sp, #76	; 0x4c
   32c6a:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   32c6c:	2220      	movs	r2, #32
   32c6e:	a802      	add	r0, sp, #8
{
   32c70:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   32c72:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   32c74:	f000 fdde 	bl	33834 <memset>
	if (hints != NULL) {
   32c78:	b194      	cbz	r4, 32ca0 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   32c7a:	a902      	add	r1, sp, #8
   32c7c:	4620      	mov	r0, r4
   32c7e:	f7ff ff72 	bl	32b66 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   32c82:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   32c86:	f000 80c1 	beq.w	32e0c <nrf91_socket_offload_getaddrinfo+0x1ae>
		} else if (error == -EAFNOSUPPORT) {
   32c8a:	306a      	adds	r0, #106	; 0x6a
   32c8c:	f000 80c1 	beq.w	32e12 <nrf91_socket_offload_getaddrinfo+0x1b4>
		if (hints->ai_next != NULL) {
   32c90:	6820      	ldr	r0, [r4, #0]
   32c92:	b120      	cbz	r0, 32c9e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   32c94:	ac0a      	add	r4, sp, #40	; 0x28
   32c96:	4621      	mov	r1, r4
   32c98:	f7ff ff65 	bl	32b66 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   32c9c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   32c9e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   32ca0:	4628      	mov	r0, r5
   32ca2:	ab01      	add	r3, sp, #4
   32ca4:	4622      	mov	r2, r4
   32ca6:	4631      	mov	r1, r6
   32ca8:	f7f2 fbf2 	bl	25490 <nrf_getaddrinfo>
	if (retval != 0) {
   32cac:	4605      	mov	r5, r0
   32cae:	b1b0      	cbz	r0, 32cde <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   32cb0:	2823      	cmp	r0, #35	; 0x23
   32cb2:	f000 80b1 	beq.w	32e18 <nrf91_socket_offload_getaddrinfo+0x1ba>
   32cb6:	dc0a      	bgt.n	32cce <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   32cb8:	280c      	cmp	r0, #12
   32cba:	bf08      	it	eq
   32cbc:	f06f 0509 	mvneq.w	r5, #9
   32cc0:	bf18      	it	ne
   32cc2:	f06f 050a 	mvnne.w	r5, #10
}
   32cc6:	4628      	mov	r0, r5
   32cc8:	b013      	add	sp, #76	; 0x4c
   32cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   32cce:	282f      	cmp	r0, #47	; 0x2f
   32cd0:	f000 80a5 	beq.w	32e1e <nrf91_socket_offload_getaddrinfo+0x1c0>
		return DNS_EAI_SYSTEM;
   32cd4:	2873      	cmp	r0, #115	; 0x73
   32cd6:	bf08      	it	eq
   32cd8:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   32cdc:	e7f0      	b.n	32cc0 <nrf91_socket_offload_getaddrinfo+0x62>
	struct zsock_addrinfo *latest_z_res = NULL;
   32cde:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   32ce0:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   32ce2:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   32ce4:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   32ce6:	b91e      	cbnz	r6, 32cf0 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   32ce8:	9801      	ldr	r0, [sp, #4]
   32cea:	f7f2 fbd3 	bl	25494 <nrf_freeaddrinfo>
	return retval;
   32cee:	e7ea      	b.n	32cc6 <nrf91_socket_offload_getaddrinfo+0x68>
					k_malloc(sizeof(struct zsock_addrinfo));
   32cf0:	2040      	movs	r0, #64	; 0x40
   32cf2:	f7f4 fef1 	bl	27ad8 <k_malloc>
		if (next_z_res == NULL) {
   32cf6:	4604      	mov	r4, r0
   32cf8:	2800      	cmp	r0, #0
   32cfa:	d07c      	beq.n	32df6 <nrf91_socket_offload_getaddrinfo+0x198>
	family = nrf_to_z_family(nrf_in->ai_family);
   32cfc:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   32cfe:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   32d00:	2a05      	cmp	r2, #5
	z_out->ai_next = NULL;
   32d02:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   32d06:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   32d0a:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   32d0e:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   32d10:	d033      	beq.n	32d7a <nrf91_socket_offload_getaddrinfo+0x11c>
   32d12:	dc09      	bgt.n	32d28 <nrf91_socket_offload_getaddrinfo+0xca>
   32d14:	2a01      	cmp	r2, #1
   32d16:	d032      	beq.n	32d7e <nrf91_socket_offload_getaddrinfo+0x120>
   32d18:	2a02      	cmp	r2, #2
   32d1a:	d032      	beq.n	32d82 <nrf91_socket_offload_getaddrinfo+0x124>
			k_free(next_z_res);
   32d1c:	4620      	mov	r0, r4
   32d1e:	f000 fb6d 	bl	333fc <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   32d22:	f06f 0508 	mvn.w	r5, #8
   32d26:	e068      	b.n	32dfa <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (nrf_family) {
   32d28:	2a0a      	cmp	r2, #10
   32d2a:	d02c      	beq.n	32d86 <nrf91_socket_offload_getaddrinfo+0x128>
   32d2c:	2a66      	cmp	r2, #102	; 0x66
   32d2e:	d1f5      	bne.n	32d1c <nrf91_socket_offload_getaddrinfo+0xbe>
		return AF_LTE;
   32d30:	4613      	mov	r3, r2
	z_out->ai_family = family;
   32d32:	60a3      	str	r3, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32d34:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   32d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   32d3a:	d045      	beq.n	32dc8 <nrf91_socket_offload_getaddrinfo+0x16a>
   32d3c:	dc25      	bgt.n	32d8a <nrf91_socket_offload_getaddrinfo+0x12c>
   32d3e:	2b01      	cmp	r3, #1
   32d40:	d047      	beq.n	32dd2 <nrf91_socket_offload_getaddrinfo+0x174>
   32d42:	2b02      	cmp	r3, #2
   32d44:	d043      	beq.n	32dce <nrf91_socket_offload_getaddrinfo+0x170>
   32d46:	bb43      	cbnz	r3, 32d9a <nrf91_socket_offload_getaddrinfo+0x13c>
	if (nrf_in->ai_family == NRF_AF_INET) {
   32d48:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32d4a:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   32d4c:	d143      	bne.n	32dd6 <nrf91_socket_offload_getaddrinfo+0x178>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   32d4e:	2008      	movs	r0, #8
   32d50:	f7f4 fec2 	bl	27ad8 <k_malloc>
   32d54:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   32d56:	2800      	cmp	r0, #0
   32d58:	d04a      	beq.n	32df0 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   32d5a:	2308      	movs	r3, #8
   32d5c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   32d5e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   32d60:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32d62:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   32d64:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   32d66:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32d68:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   32d6a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   32d6c:	f1b8 0f00 	cmp.w	r8, #0
   32d70:	d149      	bne.n	32e06 <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   32d72:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   32d74:	69f6      	ldr	r6, [r6, #28]
   32d76:	46a0      	mov	r8, r4
   32d78:	e7b5      	b.n	32ce6 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   32d7a:	2303      	movs	r3, #3
   32d7c:	e7d9      	b.n	32d32 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_LOCAL;
   32d7e:	2306      	movs	r3, #6
   32d80:	e7d7      	b.n	32d32 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET;
   32d82:	2301      	movs	r3, #1
   32d84:	e7d5      	b.n	32d32 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET6;
   32d86:	2302      	movs	r3, #2
   32d88:	e7d3      	b.n	32d32 <nrf91_socket_offload_getaddrinfo+0xd4>
	switch (proto) {
   32d8a:	f240 2101 	movw	r1, #513	; 0x201
   32d8e:	428b      	cmp	r3, r1
   32d90:	d0da      	beq.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32d92:	dc0d      	bgt.n	32db0 <nrf91_socket_offload_getaddrinfo+0x152>
   32d94:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   32d98:	d013      	beq.n	32dc2 <nrf91_socket_offload_getaddrinfo+0x164>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32d9a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   32d9e:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   32da0:	2300      	movs	r3, #0
   32da2:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   32da4:	4620      	mov	r0, r4
   32da6:	f000 fb29 	bl	333fc <k_free>
			retval = DNS_EAI_SOCKTYPE;
   32daa:	f06f 0506 	mvn.w	r5, #6
   32dae:	e024      	b.n	32dfa <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (proto) {
   32db0:	f240 2102 	movw	r1, #514	; 0x202
   32db4:	428b      	cmp	r3, r1
   32db6:	d0c7      	beq.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32db8:	f240 2103 	movw	r1, #515	; 0x203
   32dbc:	428b      	cmp	r3, r1
   32dbe:	d0c3      	beq.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32dc0:	e7eb      	b.n	32d9a <nrf91_socket_offload_getaddrinfo+0x13c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   32dc2:	f240 1311 	movw	r3, #273	; 0x111
   32dc6:	e7bf      	b.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32dc8:	f44f 7381 	mov.w	r3, #258	; 0x102
   32dcc:	e7bc      	b.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32dce:	2311      	movs	r3, #17
   32dd0:	e7ba      	b.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
   32dd2:	2306      	movs	r3, #6
   32dd4:	e7b8      	b.n	32d48 <nrf91_socket_offload_getaddrinfo+0xea>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   32dd6:	2a0a      	cmp	r2, #10
   32dd8:	d1e4      	bne.n	32da4 <nrf91_socket_offload_getaddrinfo+0x146>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   32dda:	2018      	movs	r0, #24
   32ddc:	f7f4 fe7c 	bl	27ad8 <k_malloc>
   32de0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   32de2:	b128      	cbz	r0, 32df0 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   32de4:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   32de6:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   32de8:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   32dea:	f7ff fee1 	bl	32bb0 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   32dee:	e7bd      	b.n	32d6c <nrf91_socket_offload_getaddrinfo+0x10e>
			k_free(next_z_res);
   32df0:	4620      	mov	r0, r4
   32df2:	f000 fb03 	bl	333fc <k_free>
			retval = DNS_EAI_MEMORY;
   32df6:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   32dfa:	6838      	ldr	r0, [r7, #0]
   32dfc:	f7ff fea6 	bl	32b4c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   32e00:	2300      	movs	r3, #0
   32e02:	603b      	str	r3, [r7, #0]
   32e04:	e770      	b.n	32ce8 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   32e06:	f8c8 4000 	str.w	r4, [r8]
   32e0a:	e7b3      	b.n	32d74 <nrf91_socket_offload_getaddrinfo+0x116>
			return DNS_EAI_SOCKTYPE;
   32e0c:	f06f 0506 	mvn.w	r5, #6
   32e10:	e759      	b.n	32cc6 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   32e12:	f06f 0508 	mvn.w	r5, #8
   32e16:	e756      	b.n	32cc6 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   32e18:	f06f 0502 	mvn.w	r5, #2
   32e1c:	e753      	b.n	32cc6 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   32e1e:	f06f 0501 	mvn.w	r5, #1
   32e22:	e750      	b.n	32cc6 <nrf91_socket_offload_getaddrinfo+0x68>

00032e24 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32e24:	2224      	movs	r2, #36	; 0x24
{
   32e26:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32e28:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   32e2a:	8842      	ldrh	r2, [r0, #2]
{
   32e2c:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   32e2e:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   32e30:	220a      	movs	r2, #10
{
   32e32:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   32e34:	604a      	str	r2, [r1, #4]
   32e36:	f101 0610 	add.w	r6, r1, #16
   32e3a:	1d02      	adds	r2, r0, #4
   32e3c:	f100 0714 	add.w	r7, r0, #20
   32e40:	4635      	mov	r5, r6
   32e42:	6810      	ldr	r0, [r2, #0]
   32e44:	6851      	ldr	r1, [r2, #4]
   32e46:	3208      	adds	r2, #8
   32e48:	c503      	stmia	r5!, {r0, r1}
   32e4a:	42ba      	cmp	r2, r7
   32e4c:	462e      	mov	r6, r5
   32e4e:	d1f7      	bne.n	32e40 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   32e50:	7d22      	ldrb	r2, [r4, #20]
   32e52:	621a      	str	r2, [r3, #32]
}
   32e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032e56 <nrf91_socket_offload_sendto>:
{
   32e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32e5a:	b08d      	sub	sp, #52	; 0x34
   32e5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   32e5e:	460e      	mov	r6, r1
   32e60:	4617      	mov	r7, r2
   32e62:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   32e64:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   32e66:	b96c      	cbnz	r4, 32e84 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   32e68:	4618      	mov	r0, r3
   32e6a:	f7ff fdbc 	bl	329e6 <z_to_nrf_flags>
   32e6e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   32e72:	4603      	mov	r3, r0
   32e74:	463a      	mov	r2, r7
   32e76:	4631      	mov	r1, r6
   32e78:	4628      	mov	r0, r5
   32e7a:	f7f2 fa4f 	bl	2531c <nrf_sendto>
}
   32e7e:	b00d      	add	sp, #52	; 0x34
   32e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   32e84:	8823      	ldrh	r3, [r4, #0]
   32e86:	2b01      	cmp	r3, #1
   32e88:	d112      	bne.n	32eb0 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   32e8a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32e8c:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   32e90:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   32e94:	2302      	movs	r3, #2
   32e96:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32e98:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   32e9a:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32e9c:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32e9e:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   32ea2:	f7ff fda0 	bl	329e6 <z_to_nrf_flags>
   32ea6:	ab03      	add	r3, sp, #12
   32ea8:	f8cd 9004 	str.w	r9, [sp, #4]
   32eac:	9300      	str	r3, [sp, #0]
   32eae:	e7e0      	b.n	32e72 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   32eb0:	2b02      	cmp	r3, #2
   32eb2:	d10c      	bne.n	32ece <nrf91_socket_offload_sendto+0x78>
		z_to_nrf_ipv6(to, &ipv6);
   32eb4:	f10d 090c 	add.w	r9, sp, #12
   32eb8:	4649      	mov	r1, r9
   32eba:	4620      	mov	r0, r4
   32ebc:	f7ff ffb2 	bl	32e24 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   32ec0:	4640      	mov	r0, r8
   32ec2:	f7ff fd90 	bl	329e6 <z_to_nrf_flags>
   32ec6:	2324      	movs	r3, #36	; 0x24
   32ec8:	e9cd 9300 	strd	r9, r3, [sp]
   32ecc:	e7d1      	b.n	32e72 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   32ece:	f7fd f8a6 	bl	3001e <__errno>
   32ed2:	2386      	movs	r3, #134	; 0x86
   32ed4:	6003      	str	r3, [r0, #0]
	return retval;
   32ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32eda:	e7d0      	b.n	32e7e <nrf91_socket_offload_sendto+0x28>

00032edc <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   32edc:	2300      	movs	r3, #0
{
   32ede:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   32ee0:	e9cd 3300 	strd	r3, r3, [sp]
   32ee4:	f7ff ffb7 	bl	32e56 <nrf91_socket_offload_sendto>
}
   32ee8:	b003      	add	sp, #12
   32eea:	f85d fb04 	ldr.w	pc, [sp], #4

00032eee <nrf91_socket_offload_connect>:
{
   32eee:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   32ef0:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   32ef2:	8808      	ldrh	r0, [r1, #0]
{
   32ef4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   32ef6:	2801      	cmp	r0, #1
{
   32ef8:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   32efa:	d10f      	bne.n	32f1c <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   32efc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32efe:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32f00:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   32f04:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32f06:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32f08:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   32f0c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32f0e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   32f10:	a901      	add	r1, sp, #4
   32f12:	4620      	mov	r0, r4
   32f14:	f7f2 fa3a 	bl	2538c <nrf_connect>
}
   32f18:	b00a      	add	sp, #40	; 0x28
   32f1a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   32f1c:	2802      	cmp	r0, #2
   32f1e:	d105      	bne.n	32f2c <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   32f20:	a901      	add	r1, sp, #4
   32f22:	4618      	mov	r0, r3
   32f24:	f7ff ff7e 	bl	32e24 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   32f28:	2224      	movs	r2, #36	; 0x24
   32f2a:	e7f1      	b.n	32f10 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   32f2c:	4620      	mov	r0, r4
   32f2e:	f7f2 fa2d 	bl	2538c <nrf_connect>
		if (retval < 0) {
   32f32:	2800      	cmp	r0, #0
   32f34:	daf0      	bge.n	32f18 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   32f36:	f7fd f872 	bl	3001e <__errno>
   32f3a:	2386      	movs	r3, #134	; 0x86
   32f3c:	6003      	str	r3, [r0, #0]
   32f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32f42:	e7e9      	b.n	32f18 <nrf91_socket_offload_connect+0x2a>

00032f44 <nrf91_socket_offload_setsockopt>:
{
   32f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   32f48:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   32f4c:	b086      	sub	sp, #24
   32f4e:	460c      	mov	r4, r1
   32f50:	4615      	mov	r5, r2
   32f52:	461e      	mov	r6, r3
   32f54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   32f56:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   32f5a:	d002      	beq.n	32f62 <nrf91_socket_offload_setsockopt+0x1e>
   32f5c:	dc1d      	bgt.n	32f9a <nrf91_socket_offload_setsockopt+0x56>
   32f5e:	2901      	cmp	r1, #1
   32f60:	d12a      	bne.n	32fb8 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   32f62:	aa03      	add	r2, sp, #12
   32f64:	4629      	mov	r1, r5
   32f66:	4620      	mov	r0, r4
   32f68:	f7ea f8d0 	bl	1d10c <z_to_nrf_optname>
   32f6c:	2800      	cmp	r0, #0
   32f6e:	db23      	blt.n	32fb8 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   32f70:	2c01      	cmp	r4, #1
   32f72:	d11a      	bne.n	32faa <nrf91_socket_offload_setsockopt+0x66>
   32f74:	3d14      	subs	r5, #20
   32f76:	2d01      	cmp	r5, #1
   32f78:	d805      	bhi.n	32f86 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(struct nrf_timeval);
   32f7a:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   32f7c:	6833      	ldr	r3, [r6, #0]
   32f7e:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   32f80:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   32f82:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   32f84:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   32f86:	9700      	str	r7, [sp, #0]
   32f88:	4633      	mov	r3, r6
   32f8a:	9a03      	ldr	r2, [sp, #12]
   32f8c:	4621      	mov	r1, r4
   32f8e:	4640      	mov	r0, r8
   32f90:	f7f2 fa46 	bl	25420 <nrf_setsockopt>
}
   32f94:	b006      	add	sp, #24
   32f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   32f9a:	f240 2302 	movw	r3, #514	; 0x202
   32f9e:	4299      	cmp	r1, r3
   32fa0:	d0df      	beq.n	32f62 <nrf91_socket_offload_setsockopt+0x1e>
   32fa2:	f240 2303 	movw	r3, #515	; 0x203
   32fa6:	4299      	cmp	r1, r3
   32fa8:	e7da      	b.n	32f60 <nrf91_socket_offload_setsockopt+0x1c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   32faa:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   32fae:	d1ea      	bne.n	32f86 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   32fb0:	2d07      	cmp	r5, #7
   32fb2:	bf08      	it	eq
   32fb4:	2701      	moveq	r7, #1
   32fb6:	e7e6      	b.n	32f86 <nrf91_socket_offload_setsockopt+0x42>
	errno = ENOPROTOOPT;
   32fb8:	f7fd f831 	bl	3001e <__errno>
   32fbc:	236d      	movs	r3, #109	; 0x6d
   32fbe:	6003      	str	r3, [r0, #0]
   32fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32fc4:	e7e6      	b.n	32f94 <nrf91_socket_offload_setsockopt+0x50>

00032fc6 <nrf91_socket_offload_bind>:
{
   32fc6:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   32fc8:	880a      	ldrh	r2, [r1, #0]
{
   32fca:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   32fcc:	2a01      	cmp	r2, #1
{
   32fce:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   32fd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   32fd4:	d10f      	bne.n	32ff6 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   32fd6:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32fd8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32fda:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   32fde:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32fe0:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32fe2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   32fe6:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32fe8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   32fea:	a901      	add	r1, sp, #4
   32fec:	4620      	mov	r0, r4
   32fee:	f7f2 fa05 	bl	253fc <nrf_bind>
}
   32ff2:	b00a      	add	sp, #40	; 0x28
   32ff4:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   32ff6:	2a02      	cmp	r2, #2
   32ff8:	d105      	bne.n	33006 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   32ffa:	a901      	add	r1, sp, #4
   32ffc:	4618      	mov	r0, r3
   32ffe:	f7ff ff11 	bl	32e24 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   33002:	2224      	movs	r2, #36	; 0x24
   33004:	e7f1      	b.n	32fea <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   33006:	f7fd f80a 	bl	3001e <__errno>
   3300a:	2386      	movs	r3, #134	; 0x86
   3300c:	6003      	str	r3, [r0, #0]
   3300e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33012:	e7ee      	b.n	32ff2 <nrf91_socket_offload_bind+0x2c>

00033014 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   33014:	280d      	cmp	r0, #13
   33016:	d004      	beq.n	33022 <is_lfcr+0xe>
   33018:	f1a0 030a 	sub.w	r3, r0, #10
   3301c:	4258      	negs	r0, r3
   3301e:	4158      	adcs	r0, r3
   33020:	4770      	bx	lr
		return true;
   33022:	2001      	movs	r0, #1
}
   33024:	4770      	bx	lr

00033026 <skip_command_prefix>:
{
   33026:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   33028:	6802      	ldr	r2, [r0, #0]
{
   3302a:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   3302c:	1c93      	adds	r3, r2, #2
   3302e:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   33030:	7894      	ldrb	r4, [r2, #2]
   33032:	4620      	mov	r0, r4
   33034:	f7ff ffee 	bl	33014 <is_lfcr>
   33038:	b910      	cbnz	r0, 33040 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3303a:	b10c      	cbz	r4, 33040 <skip_command_prefix+0x1a>
	(*cmd)++;
   3303c:	3203      	adds	r2, #3
   3303e:	600a      	str	r2, [r1, #0]
}
   33040:	bd10      	pop	{r4, pc}

00033042 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   33042:	6813      	ldr	r3, [r2, #0]
   33044:	f7ea be18 	b.w	1dc78 <at_parser_max_params_from_str>

00033048 <at_params_list_init>:
{
   33048:	b538      	push	{r3, r4, r5, lr}
   3304a:	460d      	mov	r5, r1
	if (list == NULL) {
   3304c:	4604      	mov	r4, r0
   3304e:	b140      	cbz	r0, 33062 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   33050:	210c      	movs	r1, #12
   33052:	4628      	mov	r0, r5
   33054:	f000 f9d7 	bl	33406 <k_calloc>
   33058:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3305a:	b128      	cbz	r0, 33068 <at_params_list_init+0x20>
	return 0;
   3305c:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3305e:	6025      	str	r5, [r4, #0]
}
   33060:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   33062:	f06f 0015 	mvn.w	r0, #21
   33066:	e7fb      	b.n	33060 <at_params_list_init+0x18>
		return -ENOMEM;
   33068:	f06f 000b 	mvn.w	r0, #11
   3306c:	e7f8      	b.n	33060 <at_params_list_init+0x18>

0003306e <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3306e:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   33070:	4604      	mov	r4, r0
   33072:	b148      	cbz	r0, 33088 <at_params_list_free+0x1a>
   33074:	6843      	ldr	r3, [r0, #4]
   33076:	b13b      	cbz	r3, 33088 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   33078:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3307a:	f7ea fef9 	bl	1de70 <at_params_list_clear>
	list->param_count = 0;
   3307e:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   33080:	6860      	ldr	r0, [r4, #4]
   33082:	f000 f9bb 	bl	333fc <k_free>
	list->params = NULL;
   33086:	6065      	str	r5, [r4, #4]
}
   33088:	bd38      	pop	{r3, r4, r5, pc}

0003308a <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   3308a:	b538      	push	{r3, r4, r5, lr}
   3308c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3308e:	b910      	cbnz	r0, 33096 <at_params_short_put+0xc>
		return -EINVAL;
   33090:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   33094:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   33096:	6843      	ldr	r3, [r0, #4]
   33098:	2b00      	cmp	r3, #0
   3309a:	d0f9      	beq.n	33090 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3309c:	f7ea fe7c 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   330a0:	4604      	mov	r4, r0
   330a2:	2800      	cmp	r0, #0
   330a4:	d0f4      	beq.n	33090 <at_params_short_put+0x6>
	at_param_clear(param);
   330a6:	f7ea fec1 	bl	1de2c <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   330aa:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   330ac:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   330ae:	7023      	strb	r3, [r4, #0]
	return 0;
   330b0:	2000      	movs	r0, #0
   330b2:	e7ef      	b.n	33094 <at_params_short_put+0xa>

000330b4 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   330b4:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   330b6:	b910      	cbnz	r0, 330be <at_params_empty_put+0xa>
		return -EINVAL;
   330b8:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   330bc:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   330be:	6843      	ldr	r3, [r0, #4]
   330c0:	2b00      	cmp	r3, #0
   330c2:	d0f9      	beq.n	330b8 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   330c4:	f7ea fe68 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   330c8:	4604      	mov	r4, r0
   330ca:	2800      	cmp	r0, #0
   330cc:	d0f4      	beq.n	330b8 <at_params_empty_put+0x4>
	at_param_clear(param);
   330ce:	f7ea fead 	bl	1de2c <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   330d2:	2305      	movs	r3, #5
	param->value.int_val = 0;
   330d4:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   330d6:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   330d8:	60a0      	str	r0, [r4, #8]
	return 0;
   330da:	e7ef      	b.n	330bc <at_params_empty_put+0x8>

000330dc <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   330dc:	b538      	push	{r3, r4, r5, lr}
   330de:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   330e0:	b910      	cbnz	r0, 330e8 <at_params_int_put+0xc>
		return -EINVAL;
   330e2:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   330e6:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   330e8:	6843      	ldr	r3, [r0, #4]
   330ea:	2b00      	cmp	r3, #0
   330ec:	d0f9      	beq.n	330e2 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   330ee:	f7ea fe53 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   330f2:	4604      	mov	r4, r0
   330f4:	2800      	cmp	r0, #0
   330f6:	d0f4      	beq.n	330e2 <at_params_int_put+0x6>
	at_param_clear(param);
   330f8:	f7ea fe98 	bl	1de2c <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   330fc:	2302      	movs	r3, #2
	param->value.int_val = value;
   330fe:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   33100:	7023      	strb	r3, [r4, #0]
	return 0;
   33102:	2000      	movs	r0, #0
   33104:	e7ef      	b.n	330e6 <at_params_int_put+0xa>

00033106 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   33106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33108:	4616      	mov	r6, r2
   3310a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3310c:	b910      	cbnz	r0, 33114 <at_params_string_put+0xe>
		return -EINVAL;
   3310e:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   33112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   33114:	6843      	ldr	r3, [r0, #4]
   33116:	2b00      	cmp	r3, #0
   33118:	d0f9      	beq.n	3310e <at_params_string_put+0x8>
   3311a:	2a00      	cmp	r2, #0
   3311c:	d0f7      	beq.n	3310e <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3311e:	f7ea fe3b 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   33122:	4604      	mov	r4, r0
   33124:	2800      	cmp	r0, #0
   33126:	d0f2      	beq.n	3310e <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   33128:	1c68      	adds	r0, r5, #1
   3312a:	f7f4 fcd5 	bl	27ad8 <k_malloc>
	if (param_value == NULL) {
   3312e:	4607      	mov	r7, r0
   33130:	b160      	cbz	r0, 3314c <at_params_string_put+0x46>
   33132:	462a      	mov	r2, r5
   33134:	4631      	mov	r1, r6
   33136:	f000 fb43 	bl	337c0 <memcpy>
	at_param_clear(param);
   3313a:	4620      	mov	r0, r4
   3313c:	f7ea fe76 	bl	1de2c <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   33140:	2303      	movs	r3, #3
	param->size = str_len;
   33142:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   33144:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   33146:	60a7      	str	r7, [r4, #8]
	return 0;
   33148:	2000      	movs	r0, #0
   3314a:	e7e2      	b.n	33112 <at_params_string_put+0xc>
		return -ENOMEM;
   3314c:	f06f 000b 	mvn.w	r0, #11
   33150:	e7df      	b.n	33112 <at_params_string_put+0xc>

00033152 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   33152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33154:	4616      	mov	r6, r2
   33156:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   33158:	b910      	cbnz	r0, 33160 <at_params_array_put+0xe>
		return -EINVAL;
   3315a:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3315e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   33160:	6843      	ldr	r3, [r0, #4]
   33162:	2b00      	cmp	r3, #0
   33164:	d0f9      	beq.n	3315a <at_params_array_put+0x8>
   33166:	2a00      	cmp	r2, #0
   33168:	d0f7      	beq.n	3315a <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3316a:	f7ea fe15 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   3316e:	4604      	mov	r4, r0
   33170:	2800      	cmp	r0, #0
   33172:	d0f2      	beq.n	3315a <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   33174:	4628      	mov	r0, r5
   33176:	f7f4 fcaf 	bl	27ad8 <k_malloc>
	if (param_value == NULL) {
   3317a:	4607      	mov	r7, r0
   3317c:	b160      	cbz	r0, 33198 <at_params_array_put+0x46>
   3317e:	462a      	mov	r2, r5
   33180:	4631      	mov	r1, r6
   33182:	f000 fb1d 	bl	337c0 <memcpy>
	at_param_clear(param);
   33186:	4620      	mov	r0, r4
   33188:	f7ea fe50 	bl	1de2c <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3318c:	2304      	movs	r3, #4
	param->size = array_len;
   3318e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   33190:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   33192:	60a7      	str	r7, [r4, #8]
	return 0;
   33194:	2000      	movs	r0, #0
   33196:	e7e2      	b.n	3315e <at_params_array_put+0xc>
		return -ENOMEM;
   33198:	f06f 000b 	mvn.w	r0, #11
   3319c:	e7df      	b.n	3315e <at_params_array_put+0xc>

0003319e <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   3319e:	b510      	push	{r4, lr}
   331a0:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   331a2:	b910      	cbnz	r0, 331aa <at_params_short_get+0xc>
		return -EINVAL;
   331a4:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   331a8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   331aa:	6843      	ldr	r3, [r0, #4]
   331ac:	2b00      	cmp	r3, #0
   331ae:	d0f9      	beq.n	331a4 <at_params_short_get+0x6>
   331b0:	2a00      	cmp	r2, #0
   331b2:	d0f7      	beq.n	331a4 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   331b4:	f7ea fdf0 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   331b8:	2800      	cmp	r0, #0
   331ba:	d0f3      	beq.n	331a4 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   331bc:	7803      	ldrb	r3, [r0, #0]
   331be:	2b01      	cmp	r3, #1
   331c0:	d1f0      	bne.n	331a4 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   331c2:	6883      	ldr	r3, [r0, #8]
	return 0;
   331c4:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   331c6:	8023      	strh	r3, [r4, #0]
	return 0;
   331c8:	e7ee      	b.n	331a8 <at_params_short_get+0xa>

000331ca <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   331ca:	b510      	push	{r4, lr}
   331cc:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   331ce:	b910      	cbnz	r0, 331d6 <at_params_int_get+0xc>
		return -EINVAL;
   331d0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   331d4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   331d6:	6843      	ldr	r3, [r0, #4]
   331d8:	2b00      	cmp	r3, #0
   331da:	d0f9      	beq.n	331d0 <at_params_int_get+0x6>
   331dc:	2a00      	cmp	r2, #0
   331de:	d0f7      	beq.n	331d0 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   331e0:	f7ea fdda 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   331e4:	2800      	cmp	r0, #0
   331e6:	d0f3      	beq.n	331d0 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   331e8:	7803      	ldrb	r3, [r0, #0]
   331ea:	3b01      	subs	r3, #1
   331ec:	2b01      	cmp	r3, #1
   331ee:	d8ef      	bhi.n	331d0 <at_params_int_get+0x6>
	*value = param->value.int_val;
   331f0:	6883      	ldr	r3, [r0, #8]
	return 0;
   331f2:	2000      	movs	r0, #0
	*value = param->value.int_val;
   331f4:	6023      	str	r3, [r4, #0]
	return 0;
   331f6:	e7ed      	b.n	331d4 <at_params_int_get+0xa>

000331f8 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   331f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   331fa:	4616      	mov	r6, r2
   331fc:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   331fe:	b910      	cbnz	r0, 33206 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   33200:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   33204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   33206:	6843      	ldr	r3, [r0, #4]
   33208:	2b00      	cmp	r3, #0
   3320a:	d0f9      	beq.n	33200 <at_params_string_get+0x8>
   3320c:	2a00      	cmp	r2, #0
   3320e:	d0f7      	beq.n	33200 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   33210:	2c00      	cmp	r4, #0
   33212:	d0f5      	beq.n	33200 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   33214:	f7ea fdc0 	bl	1dd98 <at_params_get>
	if (param == NULL) {
   33218:	4607      	mov	r7, r0
   3321a:	2800      	cmp	r0, #0
   3321c:	d0f0      	beq.n	33200 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3321e:	7803      	ldrb	r3, [r0, #0]
   33220:	2b03      	cmp	r3, #3
   33222:	d1ed      	bne.n	33200 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   33224:	f7ea fdda 	bl	1dddc <at_param_size>
	if (*len < param_len) {
   33228:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3322a:	4605      	mov	r5, r0
	if (*len < param_len) {
   3322c:	4283      	cmp	r3, r0
   3322e:	d307      	bcc.n	33240 <at_params_string_get+0x48>
   33230:	4602      	mov	r2, r0
   33232:	68b9      	ldr	r1, [r7, #8]
   33234:	4630      	mov	r0, r6
   33236:	f000 fac3 	bl	337c0 <memcpy>
	*len = param_len;
   3323a:	6025      	str	r5, [r4, #0]
	return 0;
   3323c:	2000      	movs	r0, #0
   3323e:	e7e1      	b.n	33204 <at_params_string_get+0xc>
		return -ENOMEM;
   33240:	f06f 000b 	mvn.w	r0, #11
   33244:	e7de      	b.n	33204 <at_params_string_get+0xc>

00033246 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   33246:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   33248:	4605      	mov	r5, r0
   3324a:	b180      	cbz	r0, 3326e <at_params_valid_count_get+0x28>
   3324c:	6843      	ldr	r3, [r0, #4]
   3324e:	b173      	cbz	r3, 3326e <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   33250:	2100      	movs	r1, #0
   33252:	f7ea fda1 	bl	1dd98 <at_params_get>
	size_t valid_i = 0;
   33256:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   33258:	b108      	cbz	r0, 3325e <at_params_valid_count_get+0x18>
   3325a:	7803      	ldrb	r3, [r0, #0]
   3325c:	b90b      	cbnz	r3, 33262 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3325e:	4620      	mov	r0, r4
   33260:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   33262:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   33264:	4621      	mov	r1, r4
   33266:	4628      	mov	r0, r5
   33268:	f7ea fd96 	bl	1dd98 <at_params_get>
   3326c:	e7f4      	b.n	33258 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3326e:	f06f 0415 	mvn.w	r4, #21
   33272:	e7f4      	b.n	3325e <at_params_valid_count_get+0x18>

00033274 <response_is_valid.part.0>:
static bool response_is_valid(const char *response, size_t response_len,
   33274:	b570      	push	{r4, r5, r6, lr}
   33276:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   33278:	4610      	mov	r0, r2
static bool response_is_valid(const char *response, size_t response_len,
   3327a:	460d      	mov	r5, r1
   3327c:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   3327e:	f7de feff 	bl	12080 <strlen>
   33282:	42a8      	cmp	r0, r5
   33284:	d808      	bhi.n	33298 <response_is_valid.part.0+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   33286:	462a      	mov	r2, r5
   33288:	4621      	mov	r1, r4
   3328a:	4630      	mov	r0, r6
   3328c:	f000 fa8a 	bl	337a4 <memcmp>
	if ((response_len < strlen(check)) ||
   33290:	fab0 f080 	clz	r0, r0
   33294:	0940      	lsrs	r0, r0, #5
}
   33296:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   33298:	2000      	movs	r0, #0
   3329a:	e7fc      	b.n	33296 <response_is_valid.part.0+0x22>

0003329c <lte_lc_init_and_connect>:
{
   3329c:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   3329e:	f7ea fedd 	bl	1e05c <w_lte_lc_init>
	if (ret) {
   332a2:	b920      	cbnz	r0, 332ae <lte_lc_init_and_connect+0x12>
}
   332a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   332a8:	2001      	movs	r0, #1
   332aa:	f7ea bf25 	b.w	1e0f8 <w_lte_lc_connect>
}
   332ae:	bd08      	pop	{r3, pc}

000332b0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   332b0:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   332b2:	2000      	movs	r0, #0
   332b4:	f7e5 feba 	bl	1902c <sys_arch_reboot>

000332b8 <k_uptime_get>:
{
   332b8:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   332ba:	f000 f9b3 	bl	33624 <z_impl_k_uptime_ticks>
   332be:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   332c2:	fba0 2304 	umull	r2, r3, r0, r4
   332c6:	fb04 3301 	mla	r3, r4, r1, r3
   332ca:	0bd0      	lsrs	r0, r2, #15
}
   332cc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   332d0:	0bd9      	lsrs	r1, r3, #15
   332d2:	bd10      	pop	{r4, pc}

000332d4 <date_time_now>:

int date_time_now(s64_t *unix_time_ms)
{
   332d4:	b510      	push	{r4, lr}
   332d6:	4604      	mov	r4, r0
	*unix_time_ms = k_uptime_get();
   332d8:	f7ff ffee 	bl	332b8 <k_uptime_get>
   332dc:	e9c4 0100 	strd	r0, r1, [r4]

	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   332e0:	4620      	mov	r0, r4
}
   332e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   332e6:	f7eb ba97 	b.w	1e818 <date_time_uptime_to_unix_time_ms>

000332ea <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   332ea:	4700      	bx	r0

000332ec <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   332ec:	f7fb bd02 	b.w	2ecf4 <z_clock_idle_exit>

000332f0 <k_heap_init>:
{
   332f0:	b410      	push	{r4}
   332f2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   332f6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   332fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   332fe:	f7fb b9c0 	b.w	2e682 <sys_heap_init>

00033302 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   33302:	b570      	push	{r4, r5, r6, lr}
   33304:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   33306:	6800      	ldr	r0, [r0, #0]
{
   33308:	460e      	mov	r6, r1
	block->id.heap = p->heap;
   3330a:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   3330c:	461a      	mov	r2, r3
   3330e:	4621      	mov	r1, r4
{
   33310:	461d      	mov	r5, r3
	block->data = k_heap_alloc(p->heap, size, timeout);
   33312:	f7f4 f845 	bl	273a0 <k_heap_alloc>
   33316:	6030      	str	r0, [r6, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   33318:	b13c      	cbz	r4, 3332a <k_mem_pool_alloc+0x28>
   3331a:	b930      	cbnz	r0, 3332a <k_mem_pool_alloc+0x28>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   3331c:	2d00      	cmp	r5, #0
   3331e:	bf0c      	ite	eq
   33320:	f06f 000b 	mvneq.w	r0, #11
   33324:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   33328:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   3332a:	2000      	movs	r0, #0
   3332c:	e7fc      	b.n	33328 <k_mem_pool_alloc+0x26>

0003332e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   3332e:	e9d0 1000 	ldrd	r1, r0, [r0]
   33332:	f7f4 b8e5 	b.w	27500 <k_heap_free>

00033336 <mbox_message_match>:
{
   33336:	460b      	mov	r3, r1
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   33338:	6a01      	ldr	r1, [r0, #32]
{
   3333a:	b530      	push	{r4, r5, lr}
   3333c:	4602      	mov	r2, r0
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   3333e:	b111      	cbz	r1, 33346 <mbox_message_match+0x10>
   33340:	6a18      	ldr	r0, [r3, #32]
   33342:	4281      	cmp	r1, r0
   33344:	d125      	bne.n	33392 <mbox_message_match+0x5c>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   33346:	69d8      	ldr	r0, [r3, #28]
   33348:	69d1      	ldr	r1, [r2, #28]
	     (tx_msg->tx_target_thread == rx_msg->tx_target_thread)) &&
   3334a:	b108      	cbz	r0, 33350 <mbox_message_match+0x1a>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   3334c:	4288      	cmp	r0, r1
   3334e:	d120      	bne.n	33392 <mbox_message_match+0x5c>
		rx_msg->rx_source_thread = tx_msg->rx_source_thread;
   33350:	61d9      	str	r1, [r3, #28]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   33352:	6a19      	ldr	r1, [r3, #32]
		rx_msg->info = tx_msg->info;
   33354:	6890      	ldr	r0, [r2, #8]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   33356:	6211      	str	r1, [r2, #32]
		temp_info = rx_msg->info;
   33358:	6899      	ldr	r1, [r3, #8]
		rx_msg->info = tx_msg->info;
   3335a:	6098      	str	r0, [r3, #8]
		tx_msg->info = temp_info;
   3335c:	6091      	str	r1, [r2, #8]
		if (rx_msg->size > tx_msg->size) {
   3335e:	6858      	ldr	r0, [r3, #4]
   33360:	6851      	ldr	r1, [r2, #4]
		rx_msg->tx_data = tx_msg->tx_data;
   33362:	68d5      	ldr	r5, [r2, #12]
		if (rx_msg->size > tx_msg->size) {
   33364:	4288      	cmp	r0, r1
			rx_msg->size = tx_msg->size;
   33366:	bf88      	it	hi
   33368:	6059      	strhi	r1, [r3, #4]
		rx_msg->tx_block = tx_msg->tx_block;
   3336a:	f103 0414 	add.w	r4, r3, #20
   3336e:	f102 0114 	add.w	r1, r2, #20
		rx_msg->tx_data = tx_msg->tx_data;
   33372:	60dd      	str	r5, [r3, #12]
		rx_msg->tx_block = tx_msg->tx_block;
   33374:	c903      	ldmia	r1, {r0, r1}
   33376:	e884 0003 	stmia.w	r4, {r0, r1}
		if (rx_msg->tx_data != NULL) {
   3337a:	b12d      	cbz	r5, 33388 <mbox_message_match+0x52>
			rx_msg->tx_block.data = NULL;
   3337c:	2100      	movs	r1, #0
   3337e:	6159      	str	r1, [r3, #20]
		return 0;
   33380:	2000      	movs	r0, #0
		rx_msg->_syncing_thread = tx_msg->_syncing_thread;
   33382:	6a52      	ldr	r2, [r2, #36]	; 0x24
   33384:	625a      	str	r2, [r3, #36]	; 0x24
}
   33386:	bd30      	pop	{r4, r5, pc}
		} else if (rx_msg->tx_block.data != NULL) {
   33388:	6959      	ldr	r1, [r3, #20]
   3338a:	2900      	cmp	r1, #0
   3338c:	d0f8      	beq.n	33380 <mbox_message_match+0x4a>
			rx_msg->tx_data = rx_msg->tx_block.data;
   3338e:	60d9      	str	r1, [r3, #12]
   33390:	e7f6      	b.n	33380 <mbox_message_match+0x4a>
	return -1;
   33392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33396:	e7f6      	b.n	33386 <mbox_message_match+0x50>

00033398 <k_mbox_init>:
   33398:	f100 0308 	add.w	r3, r0, #8
   3339c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	mbox_ptr->lock = (struct k_spinlock) {};
   333a0:	2300      	movs	r3, #0
   333a2:	e9c0 0000 	strd	r0, r0, [r0]
   333a6:	6103      	str	r3, [r0, #16]
}
   333a8:	4770      	bx	lr

000333aa <k_mbox_data_get>:
{
   333aa:	b510      	push	{r4, lr}
	if (buffer == NULL) {
   333ac:	460b      	mov	r3, r1
{
   333ae:	4604      	mov	r4, r0
	if (buffer == NULL) {
   333b0:	b921      	cbnz	r1, 333bc <k_mbox_data_get+0x12>
		rx_msg->size = 0;
   333b2:	6061      	str	r1, [r4, #4]
}
   333b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mbox_message_dispose(rx_msg);
   333b8:	f7f4 b9a0 	b.w	276fc <mbox_message_dispose>
	if ((rx_msg->tx_data != NULL) && (rx_msg->size > 0)) {
   333bc:	68c1      	ldr	r1, [r0, #12]
   333be:	b121      	cbz	r1, 333ca <k_mbox_data_get+0x20>
   333c0:	6842      	ldr	r2, [r0, #4]
   333c2:	b112      	cbz	r2, 333ca <k_mbox_data_get+0x20>
   333c4:	4618      	mov	r0, r3
   333c6:	f000 f9fb 	bl	337c0 <memcpy>
	mbox_message_dispose(rx_msg);
   333ca:	4620      	mov	r0, r4
   333cc:	e7f2      	b.n	333b4 <k_mbox_data_get+0xa>

000333ce <k_mem_pool_free>:
	k_mem_pool_free_id(&block->id);
   333ce:	f7ff bfae 	b.w	3332e <k_mem_pool_free_id>

000333d2 <k_mem_pool_malloc>:
{
   333d2:	b507      	push	{r0, r1, r2, lr}
   333d4:	2208      	movs	r2, #8
   333d6:	188a      	adds	r2, r1, r2
   333d8:	d204      	bcs.n	333e4 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   333da:	2300      	movs	r3, #0
   333dc:	4669      	mov	r1, sp
   333de:	f7ff ff90 	bl	33302 <k_mem_pool_alloc>
   333e2:	b118      	cbz	r0, 333ec <k_mem_pool_malloc+0x1a>
		return NULL;
   333e4:	2000      	movs	r0, #0
}
   333e6:	b003      	add	sp, #12
   333e8:	f85d fb04 	ldr.w	pc, [sp], #4
   333ec:	466b      	mov	r3, sp
   333ee:	9a00      	ldr	r2, [sp, #0]
   333f0:	cb03      	ldmia	r3!, {r0, r1}
   333f2:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   333f4:	9800      	ldr	r0, [sp, #0]
   333f6:	6051      	str	r1, [r2, #4]
   333f8:	3008      	adds	r0, #8
   333fa:	e7f4      	b.n	333e6 <k_mem_pool_malloc+0x14>

000333fc <k_free>:
	if (ptr != NULL) {
   333fc:	b110      	cbz	r0, 33404 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   333fe:	3808      	subs	r0, #8
   33400:	f7ff bf95 	b.w	3332e <k_mem_pool_free_id>
}
   33404:	4770      	bx	lr

00033406 <k_calloc>:
{
   33406:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   33408:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3340c:	b118      	cbz	r0, 33416 <k_calloc+0x10>
   3340e:	fbb4 f0f0 	udiv	r0, r4, r0
   33412:	4281      	cmp	r1, r0
   33414:	d10a      	bne.n	3342c <k_calloc+0x26>
	ret = k_malloc(bounds);
   33416:	4620      	mov	r0, r4
   33418:	f7f4 fb5e 	bl	27ad8 <k_malloc>
	if (ret != NULL) {
   3341c:	4605      	mov	r5, r0
   3341e:	b118      	cbz	r0, 33428 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   33420:	4622      	mov	r2, r4
   33422:	2100      	movs	r1, #0
   33424:	f000 fa06 	bl	33834 <memset>
}
   33428:	4628      	mov	r0, r5
   3342a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3342c:	2500      	movs	r5, #0
   3342e:	e7fb      	b.n	33428 <k_calloc+0x22>

00033430 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   33430:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   33434:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   33438:	2300      	movs	r3, #0
	msgq->buffer_start = buffer;
   3343a:	6141      	str	r1, [r0, #20]
	msgq->read_ptr = buffer;
   3343c:	e9c0 2106 	strd	r2, r1, [r0, #24]
	msgq->write_ptr = buffer;
   33440:	6201      	str	r1, [r0, #32]
	msgq->used_msgs = 0;
   33442:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
   33444:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   33448:	e9c0 0000 	strd	r0, r0, [r0]
	msgq->lock = (struct k_spinlock) {};
   3344c:	6083      	str	r3, [r0, #8]
}
   3344e:	4770      	bx	lr

00033450 <z_impl_k_mutex_init>:
{
   33450:	4603      	mov	r3, r0
	mutex->owner = NULL;
   33452:	2000      	movs	r0, #0
   33454:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   33458:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3345c:	4770      	bx	lr

0003345e <z_queue_node_peek>:
{
   3345e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   33460:	4604      	mov	r4, r0
   33462:	b130      	cbz	r0, 33472 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   33464:	6802      	ldr	r2, [r0, #0]
   33466:	0793      	lsls	r3, r2, #30
   33468:	d003      	beq.n	33472 <z_queue_node_peek+0x14>
		ret = anode->data;
   3346a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3346c:	b109      	cbz	r1, 33472 <z_queue_node_peek+0x14>
			k_free(anode);
   3346e:	f7ff ffc5 	bl	333fc <k_free>
}
   33472:	4620      	mov	r0, r4
   33474:	bd10      	pop	{r4, pc}

00033476 <z_impl_k_queue_init>:
	list->head = NULL;
   33476:	2300      	movs	r3, #0
	list->tail = NULL;
   33478:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3347c:	6083      	str	r3, [r0, #8]
   3347e:	f100 030c 	add.w	r3, r0, #12
   33482:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   33486:	f100 0314 	add.w	r3, r0, #20
   3348a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   3348e:	4770      	bx	lr

00033490 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   33490:	460a      	mov	r2, r1
   33492:	2300      	movs	r3, #0
   33494:	6841      	ldr	r1, [r0, #4]
   33496:	f7f4 be51 	b.w	2813c <queue_insert>

0003349a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   3349a:	2300      	movs	r3, #0
   3349c:	460a      	mov	r2, r1
   3349e:	4619      	mov	r1, r3
   334a0:	f7f4 be4c 	b.w	2813c <queue_insert>

000334a4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   334a4:	f990 000e 	ldrsb.w	r0, [r0, #14]
   334a8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   334ac:	4298      	cmp	r0, r3
   334ae:	bfac      	ite	ge
   334b0:	2000      	movge	r0, #0
   334b2:	2001      	movlt	r0, #1
   334b4:	4770      	bx	lr

000334b6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   334b6:	4603      	mov	r3, r0
   334b8:	b920      	cbnz	r0, 334c4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   334ba:	f3ef 8205 	mrs	r2, IPSR
   334be:	b90a      	cbnz	r2, 334c4 <z_reschedule_irqlock+0xe>
   334c0:	f7e5 bafe 	b.w	18ac0 <arch_swap>
   334c4:	f383 8811 	msr	BASEPRI, r3
   334c8:	f3bf 8f6f 	isb	sy
}
   334cc:	4770      	bx	lr

000334ce <z_reschedule_unlocked>:
	__asm__ volatile(
   334ce:	f04f 0320 	mov.w	r3, #32
   334d2:	f3ef 8011 	mrs	r0, BASEPRI
   334d6:	f383 8811 	msr	BASEPRI, r3
   334da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   334de:	f7ff bfea 	b.w	334b6 <z_reschedule_irqlock>

000334e2 <z_priq_dumb_best>:
	return list->head == list;
   334e2:	6803      	ldr	r3, [r0, #0]
}
   334e4:	4298      	cmp	r0, r3
   334e6:	bf14      	ite	ne
   334e8:	4618      	movne	r0, r3
   334ea:	2000      	moveq	r0, #0
   334ec:	4770      	bx	lr

000334ee <z_unpend_all>:
{
   334ee:	b538      	push	{r3, r4, r5, lr}
   334f0:	4605      	mov	r5, r0
	int need_sched = 0;
   334f2:	2000      	movs	r0, #0
   334f4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   334f6:	42a5      	cmp	r5, r4
   334f8:	d000      	beq.n	334fc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   334fa:	b904      	cbnz	r4, 334fe <z_unpend_all+0x10>
}
   334fc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   334fe:	4620      	mov	r0, r4
   33500:	f7f5 f964 	bl	287cc <z_unpend_thread>
		z_ready_thread(thread);
   33504:	4620      	mov	r0, r4
   33506:	f7f5 faa1 	bl	28a4c <z_ready_thread>
		need_sched = 1;
   3350a:	2001      	movs	r0, #1
   3350c:	e7f2      	b.n	334f4 <z_unpend_all+0x6>

0003350e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   3350e:	b15a      	cbz	r2, 33528 <z_impl_k_sem_init+0x1a>
   33510:	428a      	cmp	r2, r1
   33512:	d309      	bcc.n	33528 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   33514:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   33518:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   3351c:	e9c0 0000 	strd	r0, r0, [r0]
   33520:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   33524:	2000      	movs	r0, #0
   33526:	4770      	bx	lr
		return -EINVAL;
   33528:	f06f 0015 	mvn.w	r0, #21
}
   3352c:	4770      	bx	lr

0003352e <k_is_in_isr>:
   3352e:	f3ef 8005 	mrs	r0, IPSR
}
   33532:	3000      	adds	r0, #0
   33534:	bf18      	it	ne
   33536:	2001      	movne	r0, #1
   33538:	4770      	bx	lr

0003353a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   3353a:	f7e3 bedb 	b.w	172f4 <arch_busy_wait>

0003353e <z_impl_k_thread_name_set>:
}
   3353e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   33542:	4770      	bx	lr

00033544 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   33544:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   33546:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   33548:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   3354a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   3354c:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   3354e:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   33552:	4770      	bx	lr

00033554 <k_work_submit_to_queue>:
{
   33554:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   33556:	f101 0308 	add.w	r3, r1, #8
   3355a:	e8d3 2fef 	ldaex	r2, [r3]
   3355e:	f042 0c01 	orr.w	ip, r2, #1
   33562:	e8c3 cfee 	stlex	lr, ip, [r3]
   33566:	f1be 0f00 	cmp.w	lr, #0
   3356a:	d1f6      	bne.n	3355a <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   3356c:	07d3      	lsls	r3, r2, #31
   3356e:	d403      	bmi.n	33578 <k_work_submit_to_queue+0x24>
}
   33570:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   33574:	f7ff bf8c 	b.w	33490 <k_queue_append>
}
   33578:	f85d fb04 	ldr.w	pc, [sp], #4

0003357c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   3357c:	f1a0 010c 	sub.w	r1, r0, #12
   33580:	6900      	ldr	r0, [r0, #16]
   33582:	f7ff bfe7 	b.w	33554 <k_work_submit_to_queue>

00033586 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   33586:	69c3      	ldr	r3, [r0, #28]
{
   33588:	b570      	push	{r4, r5, r6, lr}
   3358a:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   3358c:	b913      	cbnz	r3, 33594 <work_cancel+0xe>
		return -EALREADY;
   3358e:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   33592:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   33594:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   33598:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   3359c:	07db      	lsls	r3, r3, #31
   3359e:	d52f      	bpl.n	33600 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   335a0:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   335a2:	69c2      	ldr	r2, [r0, #28]
   335a4:	6813      	ldr	r3, [r2, #0]
   335a6:	b913      	cbnz	r3, 335ae <work_cancel+0x28>
			return -EINVAL;
   335a8:	f06f 0015 	mvn.w	r0, #21
   335ac:	e7f1      	b.n	33592 <work_cancel+0xc>
   335ae:	429c      	cmp	r4, r3
   335b0:	d121      	bne.n	335f6 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   335b2:	6823      	ldr	r3, [r4, #0]
   335b4:	6856      	ldr	r6, [r2, #4]
   335b6:	f023 0003 	bic.w	r0, r3, #3
   335ba:	b991      	cbnz	r1, 335e2 <work_cancel+0x5c>
   335bc:	42b4      	cmp	r4, r6
	list->head = node;
   335be:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   335c0:	d100      	bne.n	335c4 <work_cancel+0x3e>
	list->tail = node;
   335c2:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   335c4:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   335c6:	f003 0303 	and.w	r3, r3, #3
   335ca:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   335cc:	2000      	movs	r0, #0
   335ce:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   335d0:	e8d5 3fef 	ldaex	r3, [r5]
   335d4:	f023 0301 	bic.w	r3, r3, #1
   335d8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   335dc:	2a00      	cmp	r2, #0
   335de:	d0d8      	beq.n	33592 <work_cancel+0xc>
   335e0:	e7f6      	b.n	335d0 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   335e2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   335e4:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   335e6:	f003 0303 	and.w	r3, r3, #3
   335ea:	ea43 0300 	orr.w	r3, r3, r0
   335ee:	600b      	str	r3, [r1, #0]
	list->tail = node;
   335f0:	bf08      	it	eq
   335f2:	6051      	streq	r1, [r2, #4]
   335f4:	e7e6      	b.n	335c4 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   335f6:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   335f8:	4619      	mov	r1, r3
   335fa:	f020 0303 	bic.w	r3, r0, #3
   335fe:	e7d2      	b.n	335a6 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   33600:	300c      	adds	r0, #12
   33602:	f7f6 fd99 	bl	2a138 <z_abort_timeout>
		if (err) {
   33606:	2800      	cmp	r0, #0
   33608:	d0e0      	beq.n	335cc <work_cancel+0x46>
   3360a:	e7c0      	b.n	3358e <work_cancel+0x8>

0003360c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3360c:	2300      	movs	r3, #0
   3360e:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   33612:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   33616:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   33618:	61c3      	str	r3, [r0, #28]
}
   3361a:	4770      	bx	lr

0003361c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   3361c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   3361e:	f7f6 ff6d 	bl	2a4fc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   33622:	bd08      	pop	{r3, pc}

00033624 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   33624:	f7f6 bf6a 	b.w	2a4fc <z_tick_get>

00033628 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   33628:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3362a:	1c43      	adds	r3, r0, #1
   3362c:	d01e      	beq.n	3366c <z_timeout_end_calc+0x44>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3362e:	b918      	cbnz	r0, 33638 <z_timeout_end_calc+0x10>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   33630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   33634:	f7f6 bf62 	b.w	2a4fc <z_tick_get>
			return (u32_t)((t * to_hz + off) / from_hz);
   33638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3363c:	f240 34e7 	movw	r4, #999	; 0x3e7
   33640:	2500      	movs	r5, #0
   33642:	fbe1 4500 	umlal	r4, r5, r1, r0
   33646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3364a:	4620      	mov	r0, r4
   3364c:	2300      	movs	r3, #0
   3364e:	4629      	mov	r1, r5
   33650:	f7da f88e 	bl	d770 <__aeabi_uldivmod>
   33654:	4604      	mov	r4, r0
	return z_tick_get() + MAX(1, dt);
   33656:	f7f6 ff51 	bl	2a4fc <z_tick_get>
   3365a:	b12c      	cbz	r4, 33668 <z_timeout_end_calc+0x40>
   3365c:	4623      	mov	r3, r4
   3365e:	2200      	movs	r2, #0
   33660:	18c0      	adds	r0, r0, r3
   33662:	eb42 0101 	adc.w	r1, r2, r1
}
   33666:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   33668:	2301      	movs	r3, #1
   3366a:	e7f8      	b.n	3365e <z_timeout_end_calc+0x36>
		return UINT64_MAX;
   3366c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33670:	4601      	mov	r1, r0
   33672:	e7f8      	b.n	33666 <z_timeout_end_calc+0x3e>

00033674 <k_timer_init>:
	timer->status = 0U;
   33674:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   33676:	e9c0 1206 	strd	r1, r2, [r0, #24]
   3367a:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   3367e:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   33680:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   33684:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   33688:	6283      	str	r3, [r0, #40]	; 0x28
}
   3368a:	4770      	bx	lr

0003368c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3368c:	b510      	push	{r4, lr}
   3368e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   33690:	f7f6 fd52 	bl	2a138 <z_abort_timeout>

	if (inactive) {
   33694:	b9d8      	cbnz	r0, 336ce <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   33696:	69e3      	ldr	r3, [r4, #28]
   33698:	b10b      	cbz	r3, 3369e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3369a:	4620      	mov	r0, r4
   3369c:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   3369e:	f104 0010 	add.w	r0, r4, #16
   336a2:	2100      	movs	r1, #0
   336a4:	f7f4 ff14 	bl	284d0 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   336a8:	4604      	mov	r4, r0
   336aa:	b180      	cbz	r0, 336ce <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   336ac:	f7f4 ff5a 	bl	28564 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   336b0:	4620      	mov	r0, r4
   336b2:	f7f5 f9cb 	bl	28a4c <z_ready_thread>
   336b6:	f04f 0320 	mov.w	r3, #32
   336ba:	f3ef 8011 	mrs	r0, BASEPRI
   336be:	f383 8811 	msr	BASEPRI, r3
   336c2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   336c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   336ca:	f7ff bef4 	b.w	334b6 <z_reschedule_irqlock>
   336ce:	bd10      	pop	{r4, pc}

000336d0 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   336d0:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   336d2:	6884      	ldr	r4, [r0, #8]
{
   336d4:	4605      	mov	r5, r0
   336d6:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   336d8:	b19c      	cbz	r4, 33702 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   336da:	68a3      	ldr	r3, [r4, #8]
   336dc:	b95b      	cbnz	r3, 336f6 <signal_poll_event+0x26>
	int retcode = 0;
   336de:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   336e0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   336e2:	2300      	movs	r3, #0
   336e4:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   336e6:	68eb      	ldr	r3, [r5, #12]
   336e8:	f3c3 3204 	ubfx	r2, r3, #12, #5
   336ec:	4316      	orrs	r6, r2
   336ee:	f366 3310 	bfi	r3, r6, #12, #5
   336f2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   336f4:	e004      	b.n	33700 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   336f6:	4798      	blx	r3
		poller->is_polling = false;
   336f8:	2300      	movs	r3, #0
		if (retcode < 0) {
   336fa:	2800      	cmp	r0, #0
		poller->is_polling = false;
   336fc:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   336fe:	daf0      	bge.n	336e2 <signal_poll_event+0x12>
}
   33700:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   33702:	4620      	mov	r0, r4
   33704:	e7ed      	b.n	336e2 <signal_poll_event+0x12>

00033706 <add_event>:
{
   33706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33708:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3370a:	e9d0 2300 	ldrd	r2, r3, [r0]
   3370e:	4290      	cmp	r0, r2
   33710:	4604      	mov	r4, r0
   33712:	460d      	mov	r5, r1
   33714:	d106      	bne.n	33724 <add_event+0x1e>
	node->prev = list->tail;
   33716:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   33718:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   3371a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   3371c:	6863      	ldr	r3, [r4, #4]
   3371e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   33720:	6065      	str	r5, [r4, #4]
}
   33722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   33724:	2b00      	cmp	r3, #0
   33726:	d0f6      	beq.n	33716 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   33728:	689b      	ldr	r3, [r3, #8]
   3372a:	6879      	ldr	r1, [r7, #4]
   3372c:	6858      	ldr	r0, [r3, #4]
   3372e:	f7ff feb9 	bl	334a4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   33732:	2800      	cmp	r0, #0
   33734:	d1ef      	bne.n	33716 <add_event+0x10>
	return list->head == list;
   33736:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33738:	42b4      	cmp	r4, r6
   3373a:	d0ec      	beq.n	33716 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3373c:	2e00      	cmp	r6, #0
   3373e:	d0ea      	beq.n	33716 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   33740:	68b3      	ldr	r3, [r6, #8]
   33742:	6878      	ldr	r0, [r7, #4]
   33744:	6859      	ldr	r1, [r3, #4]
   33746:	f7ff fead 	bl	334a4 <z_is_t1_higher_prio_than_t2>
   3374a:	b128      	cbz	r0, 33758 <add_event+0x52>
	node->prev = successor->prev;
   3374c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3374e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   33752:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   33754:	6075      	str	r5, [r6, #4]
			return;
   33756:	e7e4      	b.n	33722 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   33758:	6863      	ldr	r3, [r4, #4]
   3375a:	429e      	cmp	r6, r3
   3375c:	d0db      	beq.n	33716 <add_event+0x10>
   3375e:	6836      	ldr	r6, [r6, #0]
   33760:	e7ec      	b.n	3373c <add_event+0x36>

00033762 <z_handle_obj_poll_events>:
	return list->head == list;
   33762:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   33764:	4298      	cmp	r0, r3
   33766:	d009      	beq.n	3377c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   33768:	e9d3 2000 	ldrd	r2, r0, [r3]
   3376c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   3376e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   33770:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   33772:	4618      	mov	r0, r3
	node->prev = NULL;
   33774:	e9c3 2200 	strd	r2, r2, [r3]
   33778:	f7ff bfaa 	b.w	336d0 <signal_poll_event>
	}
}
   3377c:	4770      	bx	lr

0003377e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   3377e:	4770      	bx	lr

00033780 <atoi>:
   33780:	220a      	movs	r2, #10
   33782:	2100      	movs	r1, #0
   33784:	f7f9 bdf0 	b.w	2d368 <strtol>

00033788 <memchr>:
   33788:	b2c9      	uxtb	r1, r1
   3378a:	4402      	add	r2, r0
   3378c:	b510      	push	{r4, lr}
   3378e:	4290      	cmp	r0, r2
   33790:	4603      	mov	r3, r0
   33792:	d101      	bne.n	33798 <memchr+0x10>
   33794:	2300      	movs	r3, #0
   33796:	e003      	b.n	337a0 <memchr+0x18>
   33798:	781c      	ldrb	r4, [r3, #0]
   3379a:	3001      	adds	r0, #1
   3379c:	428c      	cmp	r4, r1
   3379e:	d1f6      	bne.n	3378e <memchr+0x6>
   337a0:	4618      	mov	r0, r3
   337a2:	bd10      	pop	{r4, pc}

000337a4 <memcmp>:
   337a4:	b530      	push	{r4, r5, lr}
   337a6:	3901      	subs	r1, #1
   337a8:	2400      	movs	r4, #0
   337aa:	42a2      	cmp	r2, r4
   337ac:	d101      	bne.n	337b2 <memcmp+0xe>
   337ae:	2000      	movs	r0, #0
   337b0:	e005      	b.n	337be <memcmp+0x1a>
   337b2:	5d03      	ldrb	r3, [r0, r4]
   337b4:	3401      	adds	r4, #1
   337b6:	5d0d      	ldrb	r5, [r1, r4]
   337b8:	42ab      	cmp	r3, r5
   337ba:	d0f6      	beq.n	337aa <memcmp+0x6>
   337bc:	1b58      	subs	r0, r3, r5
   337be:	bd30      	pop	{r4, r5, pc}

000337c0 <memcpy>:
   337c0:	440a      	add	r2, r1
   337c2:	1e43      	subs	r3, r0, #1
   337c4:	4291      	cmp	r1, r2
   337c6:	d100      	bne.n	337ca <memcpy+0xa>
   337c8:	4770      	bx	lr
   337ca:	b510      	push	{r4, lr}
   337cc:	f811 4b01 	ldrb.w	r4, [r1], #1
   337d0:	4291      	cmp	r1, r2
   337d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   337d6:	d1f9      	bne.n	337cc <memcpy+0xc>
   337d8:	bd10      	pop	{r4, pc}

000337da <__memcpy_chk>:
   337da:	429a      	cmp	r2, r3
   337dc:	b508      	push	{r3, lr}
   337de:	d901      	bls.n	337e4 <__memcpy_chk+0xa>
   337e0:	f7f9 fe4a 	bl	2d478 <__chk_fail>
   337e4:	4281      	cmp	r1, r0
   337e6:	d804      	bhi.n	337f2 <__memcpy_chk+0x18>
   337e8:	188b      	adds	r3, r1, r2
   337ea:	4298      	cmp	r0, r3
   337ec:	d3f8      	bcc.n	337e0 <__memcpy_chk+0x6>
   337ee:	4281      	cmp	r1, r0
   337f0:	d102      	bne.n	337f8 <__memcpy_chk+0x1e>
   337f2:	1883      	adds	r3, r0, r2
   337f4:	4299      	cmp	r1, r3
   337f6:	d3f3      	bcc.n	337e0 <__memcpy_chk+0x6>
   337f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   337fc:	f7ff bfe0 	b.w	337c0 <memcpy>

00033800 <memmove>:
   33800:	4288      	cmp	r0, r1
   33802:	eb01 0302 	add.w	r3, r1, r2
   33806:	b510      	push	{r4, lr}
   33808:	d902      	bls.n	33810 <memmove+0x10>
   3380a:	4283      	cmp	r3, r0
   3380c:	461c      	mov	r4, r3
   3380e:	d807      	bhi.n	33820 <memmove+0x20>
   33810:	1e42      	subs	r2, r0, #1
   33812:	4299      	cmp	r1, r3
   33814:	d008      	beq.n	33828 <memmove+0x28>
   33816:	f811 4b01 	ldrb.w	r4, [r1], #1
   3381a:	f802 4f01 	strb.w	r4, [r2, #1]!
   3381e:	e7f8      	b.n	33812 <memmove+0x12>
   33820:	1883      	adds	r3, r0, r2
   33822:	1a9a      	subs	r2, r3, r2
   33824:	429a      	cmp	r2, r3
   33826:	d100      	bne.n	3382a <memmove+0x2a>
   33828:	bd10      	pop	{r4, pc}
   3382a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   3382e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   33832:	e7f7      	b.n	33824 <memmove+0x24>

00033834 <memset>:
   33834:	4402      	add	r2, r0
   33836:	4603      	mov	r3, r0
   33838:	4293      	cmp	r3, r2
   3383a:	d100      	bne.n	3383e <memset+0xa>
   3383c:	4770      	bx	lr
   3383e:	f803 1b01 	strb.w	r1, [r3], #1
   33842:	e7f9      	b.n	33838 <memset+0x4>

00033844 <_calloc_r>:
   33844:	b538      	push	{r3, r4, r5, lr}
   33846:	fb02 f401 	mul.w	r4, r2, r1
   3384a:	4621      	mov	r1, r4
   3384c:	f7f9 f918 	bl	2ca80 <_malloc_r>
   33850:	4605      	mov	r5, r0
   33852:	b118      	cbz	r0, 3385c <_calloc_r+0x18>
   33854:	4622      	mov	r2, r4
   33856:	2100      	movs	r1, #0
   33858:	f7ff ffec 	bl	33834 <memset>
   3385c:	4628      	mov	r0, r5
   3385e:	bd38      	pop	{r3, r4, r5, pc}

00033860 <__cvt>:
   33860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   33864:	ec55 4b10 	vmov	r4, r5, d0
   33868:	2d00      	cmp	r5, #0
   3386a:	460e      	mov	r6, r1
   3386c:	4691      	mov	r9, r2
   3386e:	4619      	mov	r1, r3
   33870:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   33874:	f04f 0200 	mov.w	r2, #0
   33878:	da03      	bge.n	33882 <__cvt+0x22>
   3387a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   3387e:	222d      	movs	r2, #45	; 0x2d
   33880:	461d      	mov	r5, r3
   33882:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   33884:	700a      	strb	r2, [r1, #0]
   33886:	f027 0720 	bic.w	r7, r7, #32
   3388a:	2f46      	cmp	r7, #70	; 0x46
   3388c:	d004      	beq.n	33898 <__cvt+0x38>
   3388e:	2f45      	cmp	r7, #69	; 0x45
   33890:	d100      	bne.n	33894 <__cvt+0x34>
   33892:	3601      	adds	r6, #1
   33894:	2102      	movs	r1, #2
   33896:	e000      	b.n	3389a <__cvt+0x3a>
   33898:	2103      	movs	r1, #3
   3389a:	ab03      	add	r3, sp, #12
   3389c:	4632      	mov	r2, r6
   3389e:	9301      	str	r3, [sp, #4]
   338a0:	ab02      	add	r3, sp, #8
   338a2:	ec45 4b10 	vmov	d0, r4, r5
   338a6:	9300      	str	r3, [sp, #0]
   338a8:	4653      	mov	r3, sl
   338aa:	f7e0 f889 	bl	139c0 <_dtoa_r>
   338ae:	2f47      	cmp	r7, #71	; 0x47
   338b0:	4680      	mov	r8, r0
   338b2:	d102      	bne.n	338ba <__cvt+0x5a>
   338b4:	f019 0f01 	tst.w	r9, #1
   338b8:	d022      	beq.n	33900 <__cvt+0xa0>
   338ba:	2f46      	cmp	r7, #70	; 0x46
   338bc:	eb08 0906 	add.w	r9, r8, r6
   338c0:	d111      	bne.n	338e6 <__cvt+0x86>
   338c2:	f898 3000 	ldrb.w	r3, [r8]
   338c6:	2b30      	cmp	r3, #48	; 0x30
   338c8:	d10a      	bne.n	338e0 <__cvt+0x80>
   338ca:	2200      	movs	r2, #0
   338cc:	2300      	movs	r3, #0
   338ce:	4620      	mov	r0, r4
   338d0:	4629      	mov	r1, r5
   338d2:	f7d9 fe53 	bl	d57c <__aeabi_dcmpeq>
   338d6:	b918      	cbnz	r0, 338e0 <__cvt+0x80>
   338d8:	f1c6 0601 	rsb	r6, r6, #1
   338dc:	f8ca 6000 	str.w	r6, [sl]
   338e0:	f8da 3000 	ldr.w	r3, [sl]
   338e4:	4499      	add	r9, r3
   338e6:	2200      	movs	r2, #0
   338e8:	2300      	movs	r3, #0
   338ea:	4620      	mov	r0, r4
   338ec:	4629      	mov	r1, r5
   338ee:	f7d9 fe45 	bl	d57c <__aeabi_dcmpeq>
   338f2:	b108      	cbz	r0, 338f8 <__cvt+0x98>
   338f4:	f8cd 900c 	str.w	r9, [sp, #12]
   338f8:	2230      	movs	r2, #48	; 0x30
   338fa:	9b03      	ldr	r3, [sp, #12]
   338fc:	454b      	cmp	r3, r9
   338fe:	d308      	bcc.n	33912 <__cvt+0xb2>
   33900:	9b03      	ldr	r3, [sp, #12]
   33902:	4640      	mov	r0, r8
   33904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   33906:	eba3 0308 	sub.w	r3, r3, r8
   3390a:	6013      	str	r3, [r2, #0]
   3390c:	b004      	add	sp, #16
   3390e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33912:	1c59      	adds	r1, r3, #1
   33914:	9103      	str	r1, [sp, #12]
   33916:	701a      	strb	r2, [r3, #0]
   33918:	e7ef      	b.n	338fa <__cvt+0x9a>

0003391a <__exponent>:
   3391a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3391c:	2900      	cmp	r1, #0
   3391e:	7002      	strb	r2, [r0, #0]
   33920:	bfba      	itte	lt
   33922:	4249      	neglt	r1, r1
   33924:	232d      	movlt	r3, #45	; 0x2d
   33926:	232b      	movge	r3, #43	; 0x2b
   33928:	2909      	cmp	r1, #9
   3392a:	7043      	strb	r3, [r0, #1]
   3392c:	dd22      	ble.n	33974 <__exponent+0x5a>
   3392e:	f10d 0307 	add.w	r3, sp, #7
   33932:	260a      	movs	r6, #10
   33934:	461f      	mov	r7, r3
   33936:	2963      	cmp	r1, #99	; 0x63
   33938:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   3393c:	fb91 f2f6 	sdiv	r2, r1, r6
   33940:	fb06 1412 	mls	r4, r6, r2, r1
   33944:	f104 0430 	add.w	r4, r4, #48	; 0x30
   33948:	f803 4c01 	strb.w	r4, [r3, #-1]
   3394c:	dc0a      	bgt.n	33964 <__exponent+0x4a>
   3394e:	3230      	adds	r2, #48	; 0x30
   33950:	3b02      	subs	r3, #2
   33952:	f805 2c01 	strb.w	r2, [r5, #-1]
   33956:	1c82      	adds	r2, r0, #2
   33958:	42bb      	cmp	r3, r7
   3395a:	4614      	mov	r4, r2
   3395c:	d305      	bcc.n	3396a <__exponent+0x50>
   3395e:	1a20      	subs	r0, r4, r0
   33960:	b003      	add	sp, #12
   33962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33964:	462b      	mov	r3, r5
   33966:	4611      	mov	r1, r2
   33968:	e7e5      	b.n	33936 <__exponent+0x1c>
   3396a:	f813 1b01 	ldrb.w	r1, [r3], #1
   3396e:	f802 1b01 	strb.w	r1, [r2], #1
   33972:	e7f1      	b.n	33958 <__exponent+0x3e>
   33974:	2330      	movs	r3, #48	; 0x30
   33976:	1d04      	adds	r4, r0, #4
   33978:	4419      	add	r1, r3
   3397a:	7083      	strb	r3, [r0, #2]
   3397c:	70c1      	strb	r1, [r0, #3]
   3397e:	e7ee      	b.n	3395e <__exponent+0x44>

00033980 <_printf_common>:
   33980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33984:	4691      	mov	r9, r2
   33986:	461f      	mov	r7, r3
   33988:	688a      	ldr	r2, [r1, #8]
   3398a:	4606      	mov	r6, r0
   3398c:	690b      	ldr	r3, [r1, #16]
   3398e:	460c      	mov	r4, r1
   33990:	f8dd 8020 	ldr.w	r8, [sp, #32]
   33994:	4293      	cmp	r3, r2
   33996:	bfb8      	it	lt
   33998:	4613      	movlt	r3, r2
   3399a:	f8c9 3000 	str.w	r3, [r9]
   3399e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   339a2:	b112      	cbz	r2, 339aa <_printf_common+0x2a>
   339a4:	3301      	adds	r3, #1
   339a6:	f8c9 3000 	str.w	r3, [r9]
   339aa:	6823      	ldr	r3, [r4, #0]
   339ac:	0699      	lsls	r1, r3, #26
   339ae:	bf42      	ittt	mi
   339b0:	f8d9 3000 	ldrmi.w	r3, [r9]
   339b4:	3302      	addmi	r3, #2
   339b6:	f8c9 3000 	strmi.w	r3, [r9]
   339ba:	6825      	ldr	r5, [r4, #0]
   339bc:	f015 0506 	ands.w	r5, r5, #6
   339c0:	d107      	bne.n	339d2 <_printf_common+0x52>
   339c2:	f104 0a19 	add.w	sl, r4, #25
   339c6:	68e3      	ldr	r3, [r4, #12]
   339c8:	f8d9 2000 	ldr.w	r2, [r9]
   339cc:	1a9b      	subs	r3, r3, r2
   339ce:	42ab      	cmp	r3, r5
   339d0:	dc2b      	bgt.n	33a2a <_printf_common+0xaa>
   339d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   339d6:	6822      	ldr	r2, [r4, #0]
   339d8:	3300      	adds	r3, #0
   339da:	bf18      	it	ne
   339dc:	2301      	movne	r3, #1
   339de:	0692      	lsls	r2, r2, #26
   339e0:	d430      	bmi.n	33a44 <_printf_common+0xc4>
   339e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   339e6:	4639      	mov	r1, r7
   339e8:	4630      	mov	r0, r6
   339ea:	47c0      	blx	r8
   339ec:	3001      	adds	r0, #1
   339ee:	d023      	beq.n	33a38 <_printf_common+0xb8>
   339f0:	6823      	ldr	r3, [r4, #0]
   339f2:	341a      	adds	r4, #26
   339f4:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   339f8:	f003 0306 	and.w	r3, r3, #6
   339fc:	f8d9 2000 	ldr.w	r2, [r9]
   33a00:	f04f 0900 	mov.w	r9, #0
   33a04:	2b04      	cmp	r3, #4
   33a06:	f854 3c12 	ldr.w	r3, [r4, #-18]
   33a0a:	bf08      	it	eq
   33a0c:	1aad      	subeq	r5, r5, r2
   33a0e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   33a12:	bf14      	ite	ne
   33a14:	2500      	movne	r5, #0
   33a16:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   33a1a:	4293      	cmp	r3, r2
   33a1c:	bfc4      	itt	gt
   33a1e:	1a9b      	subgt	r3, r3, r2
   33a20:	18ed      	addgt	r5, r5, r3
   33a22:	454d      	cmp	r5, r9
   33a24:	d11a      	bne.n	33a5c <_printf_common+0xdc>
   33a26:	2000      	movs	r0, #0
   33a28:	e008      	b.n	33a3c <_printf_common+0xbc>
   33a2a:	2301      	movs	r3, #1
   33a2c:	4652      	mov	r2, sl
   33a2e:	4639      	mov	r1, r7
   33a30:	4630      	mov	r0, r6
   33a32:	47c0      	blx	r8
   33a34:	3001      	adds	r0, #1
   33a36:	d103      	bne.n	33a40 <_printf_common+0xc0>
   33a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33a40:	3501      	adds	r5, #1
   33a42:	e7c0      	b.n	339c6 <_printf_common+0x46>
   33a44:	18e1      	adds	r1, r4, r3
   33a46:	1c5a      	adds	r2, r3, #1
   33a48:	2030      	movs	r0, #48	; 0x30
   33a4a:	3302      	adds	r3, #2
   33a4c:	4422      	add	r2, r4
   33a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   33a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   33a56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   33a5a:	e7c2      	b.n	339e2 <_printf_common+0x62>
   33a5c:	2301      	movs	r3, #1
   33a5e:	4622      	mov	r2, r4
   33a60:	4639      	mov	r1, r7
   33a62:	4630      	mov	r0, r6
   33a64:	47c0      	blx	r8
   33a66:	3001      	adds	r0, #1
   33a68:	d0e6      	beq.n	33a38 <_printf_common+0xb8>
   33a6a:	f109 0901 	add.w	r9, r9, #1
   33a6e:	e7d8      	b.n	33a22 <_printf_common+0xa2>

00033a70 <strchr>:
   33a70:	b2c9      	uxtb	r1, r1
   33a72:	4603      	mov	r3, r0
   33a74:	f810 2b01 	ldrb.w	r2, [r0], #1
   33a78:	b11a      	cbz	r2, 33a82 <strchr+0x12>
   33a7a:	428a      	cmp	r2, r1
   33a7c:	d1f9      	bne.n	33a72 <strchr+0x2>
   33a7e:	4618      	mov	r0, r3
   33a80:	4770      	bx	lr
   33a82:	2900      	cmp	r1, #0
   33a84:	bf18      	it	ne
   33a86:	2300      	movne	r3, #0
   33a88:	e7f9      	b.n	33a7e <strchr+0xe>

00033a8a <strcpy>:
   33a8a:	4603      	mov	r3, r0
   33a8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   33a90:	f803 2b01 	strb.w	r2, [r3], #1
   33a94:	2a00      	cmp	r2, #0
   33a96:	d1f9      	bne.n	33a8c <strcpy+0x2>
   33a98:	4770      	bx	lr

00033a9a <strncmp>:
   33a9a:	b510      	push	{r4, lr}
   33a9c:	b16a      	cbz	r2, 33aba <strncmp+0x20>
   33a9e:	3901      	subs	r1, #1
   33aa0:	1884      	adds	r4, r0, r2
   33aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
   33aa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   33aaa:	4293      	cmp	r3, r2
   33aac:	d103      	bne.n	33ab6 <strncmp+0x1c>
   33aae:	42a0      	cmp	r0, r4
   33ab0:	d001      	beq.n	33ab6 <strncmp+0x1c>
   33ab2:	2b00      	cmp	r3, #0
   33ab4:	d1f5      	bne.n	33aa2 <strncmp+0x8>
   33ab6:	1a98      	subs	r0, r3, r2
   33ab8:	bd10      	pop	{r4, pc}
   33aba:	4610      	mov	r0, r2
   33abc:	e7fc      	b.n	33ab8 <strncmp+0x1e>

00033abe <strstr>:
   33abe:	b5f0      	push	{r4, r5, r6, r7, lr}
   33ac0:	780c      	ldrb	r4, [r1, #0]
   33ac2:	b164      	cbz	r4, 33ade <strstr+0x20>
   33ac4:	4603      	mov	r3, r0
   33ac6:	781a      	ldrb	r2, [r3, #0]
   33ac8:	4618      	mov	r0, r3
   33aca:	1c5e      	adds	r6, r3, #1
   33acc:	b90a      	cbnz	r2, 33ad2 <strstr+0x14>
   33ace:	4610      	mov	r0, r2
   33ad0:	e005      	b.n	33ade <strstr+0x20>
   33ad2:	4294      	cmp	r4, r2
   33ad4:	d108      	bne.n	33ae8 <strstr+0x2a>
   33ad6:	460d      	mov	r5, r1
   33ad8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   33adc:	b902      	cbnz	r2, 33ae0 <strstr+0x22>
   33ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ae0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   33ae4:	4297      	cmp	r7, r2
   33ae6:	d0f7      	beq.n	33ad8 <strstr+0x1a>
   33ae8:	4633      	mov	r3, r6
   33aea:	e7ec      	b.n	33ac6 <strstr+0x8>

00033aec <quorem>:
   33aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33af0:	6903      	ldr	r3, [r0, #16]
   33af2:	4680      	mov	r8, r0
   33af4:	690c      	ldr	r4, [r1, #16]
   33af6:	42a3      	cmp	r3, r4
   33af8:	f2c0 8084 	blt.w	33c04 <quorem+0x118>
   33afc:	3c01      	subs	r4, #1
   33afe:	f108 0514 	add.w	r5, r8, #20
   33b02:	f101 0714 	add.w	r7, r1, #20
   33b06:	00a0      	lsls	r0, r4, #2
   33b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   33b0c:	182b      	adds	r3, r5, r0
   33b0e:	eb07 0900 	add.w	r9, r7, r0
   33b12:	9301      	str	r3, [sp, #4]
   33b14:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   33b18:	3301      	adds	r3, #1
   33b1a:	429a      	cmp	r2, r3
   33b1c:	fbb2 f6f3 	udiv	r6, r2, r3
   33b20:	d333      	bcc.n	33b8a <quorem+0x9e>
   33b22:	f04f 0a00 	mov.w	sl, #0
   33b26:	46bc      	mov	ip, r7
   33b28:	46ae      	mov	lr, r5
   33b2a:	46d3      	mov	fp, sl
   33b2c:	f85c 2b04 	ldr.w	r2, [ip], #4
   33b30:	b293      	uxth	r3, r2
   33b32:	45e1      	cmp	r9, ip
   33b34:	ea4f 4212 	mov.w	r2, r2, lsr #16
   33b38:	fb06 a303 	mla	r3, r6, r3, sl
   33b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   33b40:	b29b      	uxth	r3, r3
   33b42:	fb06 a202 	mla	r2, r6, r2, sl
   33b46:	ebab 0303 	sub.w	r3, fp, r3
   33b4a:	f8de b000 	ldr.w	fp, [lr]
   33b4e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   33b52:	fa1f fb8b 	uxth.w	fp, fp
   33b56:	445b      	add	r3, fp
   33b58:	fa1f fb82 	uxth.w	fp, r2
   33b5c:	f8de 2000 	ldr.w	r2, [lr]
   33b60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   33b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
   33b68:	b29b      	uxth	r3, r3
   33b6a:	ea4f 4b22 	mov.w	fp, r2, asr #16
   33b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   33b72:	f84e 3b04 	str.w	r3, [lr], #4
   33b76:	d2d9      	bcs.n	33b2c <quorem+0x40>
   33b78:	582b      	ldr	r3, [r5, r0]
   33b7a:	b933      	cbnz	r3, 33b8a <quorem+0x9e>
   33b7c:	9b01      	ldr	r3, [sp, #4]
   33b7e:	3b04      	subs	r3, #4
   33b80:	429d      	cmp	r5, r3
   33b82:	461a      	mov	r2, r3
   33b84:	d332      	bcc.n	33bec <quorem+0x100>
   33b86:	f8c8 4010 	str.w	r4, [r8, #16]
   33b8a:	4640      	mov	r0, r8
   33b8c:	f000 fa01 	bl	33f92 <__mcmp>
   33b90:	2800      	cmp	r0, #0
   33b92:	db27      	blt.n	33be4 <quorem+0xf8>
   33b94:	3601      	adds	r6, #1
   33b96:	4628      	mov	r0, r5
   33b98:	f04f 0c00 	mov.w	ip, #0
   33b9c:	f857 1b04 	ldr.w	r1, [r7], #4
   33ba0:	f8d0 e000 	ldr.w	lr, [r0]
   33ba4:	b28b      	uxth	r3, r1
   33ba6:	45b9      	cmp	r9, r7
   33ba8:	fa1f f28e 	uxth.w	r2, lr
   33bac:	ebac 0303 	sub.w	r3, ip, r3
   33bb0:	4413      	add	r3, r2
   33bb2:	ea4f 4211 	mov.w	r2, r1, lsr #16
   33bb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   33bba:	eb02 4223 	add.w	r2, r2, r3, asr #16
   33bbe:	b29b      	uxth	r3, r3
   33bc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
   33bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   33bc8:	f840 3b04 	str.w	r3, [r0], #4
   33bcc:	d2e6      	bcs.n	33b9c <quorem+0xb0>
   33bce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   33bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   33bd6:	b92a      	cbnz	r2, 33be4 <quorem+0xf8>
   33bd8:	3b04      	subs	r3, #4
   33bda:	429d      	cmp	r5, r3
   33bdc:	461a      	mov	r2, r3
   33bde:	d30b      	bcc.n	33bf8 <quorem+0x10c>
   33be0:	f8c8 4010 	str.w	r4, [r8, #16]
   33be4:	4630      	mov	r0, r6
   33be6:	b003      	add	sp, #12
   33be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bec:	6812      	ldr	r2, [r2, #0]
   33bee:	3b04      	subs	r3, #4
   33bf0:	2a00      	cmp	r2, #0
   33bf2:	d1c8      	bne.n	33b86 <quorem+0x9a>
   33bf4:	3c01      	subs	r4, #1
   33bf6:	e7c3      	b.n	33b80 <quorem+0x94>
   33bf8:	6812      	ldr	r2, [r2, #0]
   33bfa:	3b04      	subs	r3, #4
   33bfc:	2a00      	cmp	r2, #0
   33bfe:	d1ef      	bne.n	33be0 <quorem+0xf4>
   33c00:	3c01      	subs	r4, #1
   33c02:	e7ea      	b.n	33bda <quorem+0xee>
   33c04:	2000      	movs	r0, #0
   33c06:	e7ee      	b.n	33be6 <quorem+0xfa>

00033c08 <__retarget_lock_acquire_recursive>:
   33c08:	4770      	bx	lr

00033c0a <__retarget_lock_release_recursive>:
   33c0a:	4770      	bx	lr

00033c0c <_Balloc>:
   33c0c:	b570      	push	{r4, r5, r6, lr}
   33c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   33c10:	4604      	mov	r4, r0
   33c12:	460e      	mov	r6, r1
   33c14:	b93d      	cbnz	r5, 33c26 <_Balloc+0x1a>
   33c16:	2010      	movs	r0, #16
   33c18:	f7f8 fed4 	bl	2c9c4 <malloc>
   33c1c:	6260      	str	r0, [r4, #36]	; 0x24
   33c1e:	6005      	str	r5, [r0, #0]
   33c20:	60c5      	str	r5, [r0, #12]
   33c22:	e9c0 5501 	strd	r5, r5, [r0, #4]
   33c26:	6a65      	ldr	r5, [r4, #36]	; 0x24
   33c28:	68eb      	ldr	r3, [r5, #12]
   33c2a:	b183      	cbz	r3, 33c4e <_Balloc+0x42>
   33c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33c2e:	68db      	ldr	r3, [r3, #12]
   33c30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   33c34:	b9b8      	cbnz	r0, 33c66 <_Balloc+0x5a>
   33c36:	2101      	movs	r1, #1
   33c38:	4620      	mov	r0, r4
   33c3a:	fa01 f506 	lsl.w	r5, r1, r6
   33c3e:	1d6a      	adds	r2, r5, #5
   33c40:	0092      	lsls	r2, r2, #2
   33c42:	f7ff fdff 	bl	33844 <_calloc_r>
   33c46:	b160      	cbz	r0, 33c62 <_Balloc+0x56>
   33c48:	e9c0 6501 	strd	r6, r5, [r0, #4]
   33c4c:	e00e      	b.n	33c6c <_Balloc+0x60>
   33c4e:	2221      	movs	r2, #33	; 0x21
   33c50:	2104      	movs	r1, #4
   33c52:	4620      	mov	r0, r4
   33c54:	f7ff fdf6 	bl	33844 <_calloc_r>
   33c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33c5a:	60e8      	str	r0, [r5, #12]
   33c5c:	68db      	ldr	r3, [r3, #12]
   33c5e:	2b00      	cmp	r3, #0
   33c60:	d1e4      	bne.n	33c2c <_Balloc+0x20>
   33c62:	2000      	movs	r0, #0
   33c64:	bd70      	pop	{r4, r5, r6, pc}
   33c66:	6802      	ldr	r2, [r0, #0]
   33c68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   33c6c:	2300      	movs	r3, #0
   33c6e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   33c72:	e7f7      	b.n	33c64 <_Balloc+0x58>

00033c74 <_Bfree>:
   33c74:	b570      	push	{r4, r5, r6, lr}
   33c76:	6a44      	ldr	r4, [r0, #36]	; 0x24
   33c78:	4606      	mov	r6, r0
   33c7a:	460d      	mov	r5, r1
   33c7c:	b93c      	cbnz	r4, 33c8e <_Bfree+0x1a>
   33c7e:	2010      	movs	r0, #16
   33c80:	f7f8 fea0 	bl	2c9c4 <malloc>
   33c84:	6270      	str	r0, [r6, #36]	; 0x24
   33c86:	6004      	str	r4, [r0, #0]
   33c88:	60c4      	str	r4, [r0, #12]
   33c8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   33c8e:	b13d      	cbz	r5, 33ca0 <_Bfree+0x2c>
   33c90:	6a73      	ldr	r3, [r6, #36]	; 0x24
   33c92:	686a      	ldr	r2, [r5, #4]
   33c94:	68db      	ldr	r3, [r3, #12]
   33c96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   33c9a:	6029      	str	r1, [r5, #0]
   33c9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   33ca0:	bd70      	pop	{r4, r5, r6, pc}

00033ca2 <__multadd>:
   33ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33ca6:	f101 0c14 	add.w	ip, r1, #20
   33caa:	461f      	mov	r7, r3
   33cac:	4606      	mov	r6, r0
   33cae:	460c      	mov	r4, r1
   33cb0:	690d      	ldr	r5, [r1, #16]
   33cb2:	2300      	movs	r3, #0
   33cb4:	f8dc 0000 	ldr.w	r0, [ip]
   33cb8:	3301      	adds	r3, #1
   33cba:	b281      	uxth	r1, r0
   33cbc:	429d      	cmp	r5, r3
   33cbe:	ea4f 4010 	mov.w	r0, r0, lsr #16
   33cc2:	fb02 7101 	mla	r1, r2, r1, r7
   33cc6:	ea4f 4711 	mov.w	r7, r1, lsr #16
   33cca:	b289      	uxth	r1, r1
   33ccc:	fb02 7000 	mla	r0, r2, r0, r7
   33cd0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   33cd4:	ea4f 4710 	mov.w	r7, r0, lsr #16
   33cd8:	f84c 1b04 	str.w	r1, [ip], #4
   33cdc:	dcea      	bgt.n	33cb4 <__multadd+0x12>
   33cde:	b1d7      	cbz	r7, 33d16 <__multadd+0x74>
   33ce0:	68a3      	ldr	r3, [r4, #8]
   33ce2:	42ab      	cmp	r3, r5
   33ce4:	dc12      	bgt.n	33d0c <__multadd+0x6a>
   33ce6:	6861      	ldr	r1, [r4, #4]
   33ce8:	4630      	mov	r0, r6
   33cea:	3101      	adds	r1, #1
   33cec:	f7ff ff8e 	bl	33c0c <_Balloc>
   33cf0:	6922      	ldr	r2, [r4, #16]
   33cf2:	4680      	mov	r8, r0
   33cf4:	f104 010c 	add.w	r1, r4, #12
   33cf8:	3202      	adds	r2, #2
   33cfa:	300c      	adds	r0, #12
   33cfc:	0092      	lsls	r2, r2, #2
   33cfe:	f7ff fd5f 	bl	337c0 <memcpy>
   33d02:	4621      	mov	r1, r4
   33d04:	4644      	mov	r4, r8
   33d06:	4630      	mov	r0, r6
   33d08:	f7ff ffb4 	bl	33c74 <_Bfree>
   33d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   33d10:	3501      	adds	r5, #1
   33d12:	615f      	str	r7, [r3, #20]
   33d14:	6125      	str	r5, [r4, #16]
   33d16:	4620      	mov	r0, r4
   33d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033d1c <__hi0bits>:
   33d1c:	0c02      	lsrs	r2, r0, #16
   33d1e:	4603      	mov	r3, r0
   33d20:	0412      	lsls	r2, r2, #16
   33d22:	b9ca      	cbnz	r2, 33d58 <__hi0bits+0x3c>
   33d24:	0403      	lsls	r3, r0, #16
   33d26:	2010      	movs	r0, #16
   33d28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   33d2c:	bf04      	itt	eq
   33d2e:	021b      	lsleq	r3, r3, #8
   33d30:	3008      	addeq	r0, #8
   33d32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   33d36:	bf04      	itt	eq
   33d38:	011b      	lsleq	r3, r3, #4
   33d3a:	3004      	addeq	r0, #4
   33d3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   33d40:	bf04      	itt	eq
   33d42:	009b      	lsleq	r3, r3, #2
   33d44:	3002      	addeq	r0, #2
   33d46:	2b00      	cmp	r3, #0
   33d48:	db05      	blt.n	33d56 <__hi0bits+0x3a>
   33d4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   33d4e:	f100 0001 	add.w	r0, r0, #1
   33d52:	bf08      	it	eq
   33d54:	2020      	moveq	r0, #32
   33d56:	4770      	bx	lr
   33d58:	2000      	movs	r0, #0
   33d5a:	e7e5      	b.n	33d28 <__hi0bits+0xc>

00033d5c <__lo0bits>:
   33d5c:	6803      	ldr	r3, [r0, #0]
   33d5e:	4601      	mov	r1, r0
   33d60:	f013 0207 	ands.w	r2, r3, #7
   33d64:	d00b      	beq.n	33d7e <__lo0bits+0x22>
   33d66:	07da      	lsls	r2, r3, #31
   33d68:	d424      	bmi.n	33db4 <__lo0bits+0x58>
   33d6a:	0798      	lsls	r0, r3, #30
   33d6c:	bf47      	ittee	mi
   33d6e:	085b      	lsrmi	r3, r3, #1
   33d70:	2001      	movmi	r0, #1
   33d72:	089b      	lsrpl	r3, r3, #2
   33d74:	2002      	movpl	r0, #2
   33d76:	bf4c      	ite	mi
   33d78:	600b      	strmi	r3, [r1, #0]
   33d7a:	600b      	strpl	r3, [r1, #0]
   33d7c:	4770      	bx	lr
   33d7e:	b298      	uxth	r0, r3
   33d80:	b9b0      	cbnz	r0, 33db0 <__lo0bits+0x54>
   33d82:	0c1b      	lsrs	r3, r3, #16
   33d84:	2010      	movs	r0, #16
   33d86:	f013 0fff 	tst.w	r3, #255	; 0xff
   33d8a:	bf04      	itt	eq
   33d8c:	0a1b      	lsreq	r3, r3, #8
   33d8e:	3008      	addeq	r0, #8
   33d90:	071a      	lsls	r2, r3, #28
   33d92:	bf04      	itt	eq
   33d94:	091b      	lsreq	r3, r3, #4
   33d96:	3004      	addeq	r0, #4
   33d98:	079a      	lsls	r2, r3, #30
   33d9a:	bf04      	itt	eq
   33d9c:	089b      	lsreq	r3, r3, #2
   33d9e:	3002      	addeq	r0, #2
   33da0:	07da      	lsls	r2, r3, #31
   33da2:	d403      	bmi.n	33dac <__lo0bits+0x50>
   33da4:	085b      	lsrs	r3, r3, #1
   33da6:	f100 0001 	add.w	r0, r0, #1
   33daa:	d005      	beq.n	33db8 <__lo0bits+0x5c>
   33dac:	600b      	str	r3, [r1, #0]
   33dae:	4770      	bx	lr
   33db0:	4610      	mov	r0, r2
   33db2:	e7e8      	b.n	33d86 <__lo0bits+0x2a>
   33db4:	2000      	movs	r0, #0
   33db6:	4770      	bx	lr
   33db8:	2020      	movs	r0, #32
   33dba:	4770      	bx	lr

00033dbc <__i2b>:
   33dbc:	b510      	push	{r4, lr}
   33dbe:	460c      	mov	r4, r1
   33dc0:	2101      	movs	r1, #1
   33dc2:	f7ff ff23 	bl	33c0c <_Balloc>
   33dc6:	2201      	movs	r2, #1
   33dc8:	6144      	str	r4, [r0, #20]
   33dca:	6102      	str	r2, [r0, #16]
   33dcc:	bd10      	pop	{r4, pc}

00033dce <__multiply>:
   33dce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33dd2:	4690      	mov	r8, r2
   33dd4:	690a      	ldr	r2, [r1, #16]
   33dd6:	460c      	mov	r4, r1
   33dd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   33ddc:	429a      	cmp	r2, r3
   33dde:	bfbe      	ittt	lt
   33de0:	460b      	movlt	r3, r1
   33de2:	4644      	movlt	r4, r8
   33de4:	4698      	movlt	r8, r3
   33de6:	6927      	ldr	r7, [r4, #16]
   33de8:	68a3      	ldr	r3, [r4, #8]
   33dea:	f8d8 9010 	ldr.w	r9, [r8, #16]
   33dee:	6861      	ldr	r1, [r4, #4]
   33df0:	eb07 0609 	add.w	r6, r7, r9
   33df4:	42b3      	cmp	r3, r6
   33df6:	bfb8      	it	lt
   33df8:	3101      	addlt	r1, #1
   33dfa:	f7ff ff07 	bl	33c0c <_Balloc>
   33dfe:	f100 0514 	add.w	r5, r0, #20
   33e02:	2200      	movs	r2, #0
   33e04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   33e08:	462b      	mov	r3, r5
   33e0a:	4573      	cmp	r3, lr
   33e0c:	d316      	bcc.n	33e3c <__multiply+0x6e>
   33e0e:	f104 0314 	add.w	r3, r4, #20
   33e12:	f108 0214 	add.w	r2, r8, #20
   33e16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   33e1a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   33e1e:	9300      	str	r3, [sp, #0]
   33e20:	9b00      	ldr	r3, [sp, #0]
   33e22:	9201      	str	r2, [sp, #4]
   33e24:	4293      	cmp	r3, r2
   33e26:	d80c      	bhi.n	33e42 <__multiply+0x74>
   33e28:	2e00      	cmp	r6, #0
   33e2a:	dd03      	ble.n	33e34 <__multiply+0x66>
   33e2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   33e30:	2b00      	cmp	r3, #0
   33e32:	d059      	beq.n	33ee8 <__multiply+0x11a>
   33e34:	6106      	str	r6, [r0, #16]
   33e36:	b003      	add	sp, #12
   33e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e3c:	f843 2b04 	str.w	r2, [r3], #4
   33e40:	e7e3      	b.n	33e0a <__multiply+0x3c>
   33e42:	f8b2 a000 	ldrh.w	sl, [r2]
   33e46:	f1ba 0f00 	cmp.w	sl, #0
   33e4a:	d023      	beq.n	33e94 <__multiply+0xc6>
   33e4c:	f104 0914 	add.w	r9, r4, #20
   33e50:	46ac      	mov	ip, r5
   33e52:	f04f 0800 	mov.w	r8, #0
   33e56:	f859 1b04 	ldr.w	r1, [r9], #4
   33e5a:	f8dc b000 	ldr.w	fp, [ip]
   33e5e:	b28b      	uxth	r3, r1
   33e60:	454f      	cmp	r7, r9
   33e62:	fa1f fb8b 	uxth.w	fp, fp
   33e66:	fb0a b303 	mla	r3, sl, r3, fp
   33e6a:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   33e6e:	f8dc 1000 	ldr.w	r1, [ip]
   33e72:	4443      	add	r3, r8
   33e74:	ea4f 4811 	mov.w	r8, r1, lsr #16
   33e78:	fb0a 810b 	mla	r1, sl, fp, r8
   33e7c:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   33e80:	b29b      	uxth	r3, r3
   33e82:	ea4f 4811 	mov.w	r8, r1, lsr #16
   33e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   33e8a:	f84c 3b04 	str.w	r3, [ip], #4
   33e8e:	d8e2      	bhi.n	33e56 <__multiply+0x88>
   33e90:	f8cc 8000 	str.w	r8, [ip]
   33e94:	9b01      	ldr	r3, [sp, #4]
   33e96:	3204      	adds	r2, #4
   33e98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   33e9c:	f1b9 0f00 	cmp.w	r9, #0
   33ea0:	d020      	beq.n	33ee4 <__multiply+0x116>
   33ea2:	682b      	ldr	r3, [r5, #0]
   33ea4:	f104 0814 	add.w	r8, r4, #20
   33ea8:	46ac      	mov	ip, r5
   33eaa:	f04f 0a00 	mov.w	sl, #0
   33eae:	f8b8 1000 	ldrh.w	r1, [r8]
   33eb2:	b29b      	uxth	r3, r3
   33eb4:	f8bc b002 	ldrh.w	fp, [ip, #2]
   33eb8:	fb09 b101 	mla	r1, r9, r1, fp
   33ebc:	448a      	add	sl, r1
   33ebe:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   33ec2:	f84c 3b04 	str.w	r3, [ip], #4
   33ec6:	f858 3b04 	ldr.w	r3, [r8], #4
   33eca:	f8bc 1000 	ldrh.w	r1, [ip]
   33ece:	0c1b      	lsrs	r3, r3, #16
   33ed0:	4547      	cmp	r7, r8
   33ed2:	fb09 1303 	mla	r3, r9, r3, r1
   33ed6:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   33eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   33ede:	d8e6      	bhi.n	33eae <__multiply+0xe0>
   33ee0:	f8cc 3000 	str.w	r3, [ip]
   33ee4:	3504      	adds	r5, #4
   33ee6:	e79b      	b.n	33e20 <__multiply+0x52>
   33ee8:	3e01      	subs	r6, #1
   33eea:	e79d      	b.n	33e28 <__multiply+0x5a>

00033eec <__lshift>:
   33eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33ef0:	460c      	mov	r4, r1
   33ef2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   33ef6:	4607      	mov	r7, r0
   33ef8:	4616      	mov	r6, r2
   33efa:	6923      	ldr	r3, [r4, #16]
   33efc:	6849      	ldr	r1, [r1, #4]
   33efe:	eb0a 0903 	add.w	r9, sl, r3
   33f02:	68a3      	ldr	r3, [r4, #8]
   33f04:	f109 0501 	add.w	r5, r9, #1
   33f08:	42ab      	cmp	r3, r5
   33f0a:	db33      	blt.n	33f74 <__lshift+0x88>
   33f0c:	4638      	mov	r0, r7
   33f0e:	f7ff fe7d 	bl	33c0c <_Balloc>
   33f12:	2300      	movs	r3, #0
   33f14:	4680      	mov	r8, r0
   33f16:	f100 0114 	add.w	r1, r0, #20
   33f1a:	f100 0210 	add.w	r2, r0, #16
   33f1e:	4618      	mov	r0, r3
   33f20:	4553      	cmp	r3, sl
   33f22:	db2a      	blt.n	33f7a <__lshift+0x8e>
   33f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   33f28:	f104 0314 	add.w	r3, r4, #20
   33f2c:	6920      	ldr	r0, [r4, #16]
   33f2e:	f016 021f 	ands.w	r2, r6, #31
   33f32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   33f36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   33f3a:	d022      	beq.n	33f82 <__lshift+0x96>
   33f3c:	f1c2 0e20 	rsb	lr, r2, #32
   33f40:	2000      	movs	r0, #0
   33f42:	681e      	ldr	r6, [r3, #0]
   33f44:	4096      	lsls	r6, r2
   33f46:	4330      	orrs	r0, r6
   33f48:	f841 0b04 	str.w	r0, [r1], #4
   33f4c:	f853 0b04 	ldr.w	r0, [r3], #4
   33f50:	459c      	cmp	ip, r3
   33f52:	fa20 f00e 	lsr.w	r0, r0, lr
   33f56:	d8f4      	bhi.n	33f42 <__lshift+0x56>
   33f58:	6008      	str	r0, [r1, #0]
   33f5a:	b108      	cbz	r0, 33f60 <__lshift+0x74>
   33f5c:	f109 0502 	add.w	r5, r9, #2
   33f60:	3d01      	subs	r5, #1
   33f62:	4638      	mov	r0, r7
   33f64:	4621      	mov	r1, r4
   33f66:	f8c8 5010 	str.w	r5, [r8, #16]
   33f6a:	f7ff fe83 	bl	33c74 <_Bfree>
   33f6e:	4640      	mov	r0, r8
   33f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33f74:	3101      	adds	r1, #1
   33f76:	005b      	lsls	r3, r3, #1
   33f78:	e7c6      	b.n	33f08 <__lshift+0x1c>
   33f7a:	f842 0f04 	str.w	r0, [r2, #4]!
   33f7e:	3301      	adds	r3, #1
   33f80:	e7ce      	b.n	33f20 <__lshift+0x34>
   33f82:	3904      	subs	r1, #4
   33f84:	f853 2b04 	ldr.w	r2, [r3], #4
   33f88:	459c      	cmp	ip, r3
   33f8a:	f841 2f04 	str.w	r2, [r1, #4]!
   33f8e:	d8f9      	bhi.n	33f84 <__lshift+0x98>
   33f90:	e7e6      	b.n	33f60 <__lshift+0x74>

00033f92 <__mcmp>:
   33f92:	6903      	ldr	r3, [r0, #16]
   33f94:	690a      	ldr	r2, [r1, #16]
   33f96:	1a9b      	subs	r3, r3, r2
   33f98:	b530      	push	{r4, r5, lr}
   33f9a:	d10c      	bne.n	33fb6 <__mcmp+0x24>
   33f9c:	0092      	lsls	r2, r2, #2
   33f9e:	3014      	adds	r0, #20
   33fa0:	3114      	adds	r1, #20
   33fa2:	1884      	adds	r4, r0, r2
   33fa4:	4411      	add	r1, r2
   33fa6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   33faa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   33fae:	4295      	cmp	r5, r2
   33fb0:	d003      	beq.n	33fba <__mcmp+0x28>
   33fb2:	d305      	bcc.n	33fc0 <__mcmp+0x2e>
   33fb4:	2301      	movs	r3, #1
   33fb6:	4618      	mov	r0, r3
   33fb8:	bd30      	pop	{r4, r5, pc}
   33fba:	42a0      	cmp	r0, r4
   33fbc:	d3f3      	bcc.n	33fa6 <__mcmp+0x14>
   33fbe:	e7fa      	b.n	33fb6 <__mcmp+0x24>
   33fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33fc4:	e7f7      	b.n	33fb6 <__mcmp+0x24>

00033fc6 <__mdiff>:
   33fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33fca:	460d      	mov	r5, r1
   33fcc:	4607      	mov	r7, r0
   33fce:	4611      	mov	r1, r2
   33fd0:	4614      	mov	r4, r2
   33fd2:	4628      	mov	r0, r5
   33fd4:	f7ff ffdd 	bl	33f92 <__mcmp>
   33fd8:	1e06      	subs	r6, r0, #0
   33fda:	d108      	bne.n	33fee <__mdiff+0x28>
   33fdc:	4631      	mov	r1, r6
   33fde:	4638      	mov	r0, r7
   33fe0:	f7ff fe14 	bl	33c0c <_Balloc>
   33fe4:	2301      	movs	r3, #1
   33fe6:	e9c0 3604 	strd	r3, r6, [r0, #16]
   33fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33fee:	bfa3      	ittte	ge
   33ff0:	4623      	movge	r3, r4
   33ff2:	462c      	movge	r4, r5
   33ff4:	2600      	movge	r6, #0
   33ff6:	2601      	movlt	r6, #1
   33ff8:	bfa8      	it	ge
   33ffa:	461d      	movge	r5, r3
   33ffc:	6861      	ldr	r1, [r4, #4]
   33ffe:	4638      	mov	r0, r7
   34000:	f7ff fe04 	bl	33c0c <_Balloc>
   34004:	f105 0914 	add.w	r9, r5, #20
   34008:	60c6      	str	r6, [r0, #12]
   3400a:	f104 0214 	add.w	r2, r4, #20
   3400e:	6926      	ldr	r6, [r4, #16]
   34010:	f100 0114 	add.w	r1, r0, #20
   34014:	692b      	ldr	r3, [r5, #16]
   34016:	f04f 0e00 	mov.w	lr, #0
   3401a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   3401e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   34022:	f852 ab04 	ldr.w	sl, [r2], #4
   34026:	f859 5b04 	ldr.w	r5, [r9], #4
   3402a:	fa1f f38a 	uxth.w	r3, sl
   3402e:	4694      	mov	ip, r2
   34030:	b2ac      	uxth	r4, r5
   34032:	45c8      	cmp	r8, r9
   34034:	4473      	add	r3, lr
   34036:	eba3 0304 	sub.w	r3, r3, r4
   3403a:	ea4f 4415 	mov.w	r4, r5, lsr #16
   3403e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   34042:	eb04 4423 	add.w	r4, r4, r3, asr #16
   34046:	b29b      	uxth	r3, r3
   34048:	ea4f 4e24 	mov.w	lr, r4, asr #16
   3404c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   34050:	f841 4b04 	str.w	r4, [r1], #4
   34054:	d8e5      	bhi.n	34022 <__mdiff+0x5c>
   34056:	45bc      	cmp	ip, r7
   34058:	d304      	bcc.n	34064 <__mdiff+0x9e>
   3405a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   3405e:	b183      	cbz	r3, 34082 <__mdiff+0xbc>
   34060:	6106      	str	r6, [r0, #16]
   34062:	e7c2      	b.n	33fea <__mdiff+0x24>
   34064:	f85c 4b04 	ldr.w	r4, [ip], #4
   34068:	b2a2      	uxth	r2, r4
   3406a:	4472      	add	r2, lr
   3406c:	1413      	asrs	r3, r2, #16
   3406e:	b292      	uxth	r2, r2
   34070:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   34074:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   34078:	ea4f 4e23 	mov.w	lr, r3, asr #16
   3407c:	f841 2b04 	str.w	r2, [r1], #4
   34080:	e7e9      	b.n	34056 <__mdiff+0x90>
   34082:	3e01      	subs	r6, #1
   34084:	e7e9      	b.n	3405a <__mdiff+0x94>

00034086 <__d2b>:
   34086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3408a:	ec59 8b10 	vmov	r8, r9, d0
   3408e:	f3c9 540a 	ubfx	r4, r9, #20, #11
   34092:	460e      	mov	r6, r1
   34094:	2101      	movs	r1, #1
   34096:	4615      	mov	r5, r2
   34098:	f7ff fdb8 	bl	33c0c <_Balloc>
   3409c:	f3c9 0313 	ubfx	r3, r9, #0, #20
   340a0:	4607      	mov	r7, r0
   340a2:	bb2c      	cbnz	r4, 340f0 <__d2b+0x6a>
   340a4:	9301      	str	r3, [sp, #4]
   340a6:	f1b8 0300 	subs.w	r3, r8, #0
   340aa:	d026      	beq.n	340fa <__d2b+0x74>
   340ac:	4668      	mov	r0, sp
   340ae:	9300      	str	r3, [sp, #0]
   340b0:	f7ff fe54 	bl	33d5c <__lo0bits>
   340b4:	9900      	ldr	r1, [sp, #0]
   340b6:	b1f0      	cbz	r0, 340f6 <__d2b+0x70>
   340b8:	9a01      	ldr	r2, [sp, #4]
   340ba:	f1c0 0320 	rsb	r3, r0, #32
   340be:	fa02 f303 	lsl.w	r3, r2, r3
   340c2:	40c2      	lsrs	r2, r0
   340c4:	430b      	orrs	r3, r1
   340c6:	9201      	str	r2, [sp, #4]
   340c8:	617b      	str	r3, [r7, #20]
   340ca:	9b01      	ldr	r3, [sp, #4]
   340cc:	2b00      	cmp	r3, #0
   340ce:	61bb      	str	r3, [r7, #24]
   340d0:	bf14      	ite	ne
   340d2:	2102      	movne	r1, #2
   340d4:	2101      	moveq	r1, #1
   340d6:	6139      	str	r1, [r7, #16]
   340d8:	b1c4      	cbz	r4, 3410c <__d2b+0x86>
   340da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   340de:	4404      	add	r4, r0
   340e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   340e4:	6034      	str	r4, [r6, #0]
   340e6:	6028      	str	r0, [r5, #0]
   340e8:	4638      	mov	r0, r7
   340ea:	b003      	add	sp, #12
   340ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   340f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   340f4:	e7d6      	b.n	340a4 <__d2b+0x1e>
   340f6:	6179      	str	r1, [r7, #20]
   340f8:	e7e7      	b.n	340ca <__d2b+0x44>
   340fa:	a801      	add	r0, sp, #4
   340fc:	f7ff fe2e 	bl	33d5c <__lo0bits>
   34100:	9b01      	ldr	r3, [sp, #4]
   34102:	2101      	movs	r1, #1
   34104:	3020      	adds	r0, #32
   34106:	617b      	str	r3, [r7, #20]
   34108:	6139      	str	r1, [r7, #16]
   3410a:	e7e5      	b.n	340d8 <__d2b+0x52>
   3410c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   34110:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   34114:	6030      	str	r0, [r6, #0]
   34116:	6918      	ldr	r0, [r3, #16]
   34118:	f7ff fe00 	bl	33d1c <__hi0bits>
   3411c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   34120:	e7e1      	b.n	340e6 <__d2b+0x60>

00034122 <_realloc_r>:
   34122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34124:	4607      	mov	r7, r0
   34126:	4614      	mov	r4, r2
   34128:	460e      	mov	r6, r1
   3412a:	b921      	cbnz	r1, 34136 <_realloc_r+0x14>
   3412c:	4611      	mov	r1, r2
   3412e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   34132:	f7f8 bca5 	b.w	2ca80 <_malloc_r>
   34136:	b922      	cbnz	r2, 34142 <_realloc_r+0x20>
   34138:	4625      	mov	r5, r4
   3413a:	f7f8 fc53 	bl	2c9e4 <_free_r>
   3413e:	4628      	mov	r0, r5
   34140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34142:	f000 f8ab 	bl	3429c <_malloc_usable_size_r>
   34146:	42a0      	cmp	r0, r4
   34148:	d20f      	bcs.n	3416a <_realloc_r+0x48>
   3414a:	4621      	mov	r1, r4
   3414c:	4638      	mov	r0, r7
   3414e:	f7f8 fc97 	bl	2ca80 <_malloc_r>
   34152:	4605      	mov	r5, r0
   34154:	2800      	cmp	r0, #0
   34156:	d0f2      	beq.n	3413e <_realloc_r+0x1c>
   34158:	4631      	mov	r1, r6
   3415a:	4622      	mov	r2, r4
   3415c:	f7ff fb30 	bl	337c0 <memcpy>
   34160:	4631      	mov	r1, r6
   34162:	4638      	mov	r0, r7
   34164:	f7f8 fc3e 	bl	2c9e4 <_free_r>
   34168:	e7e9      	b.n	3413e <_realloc_r+0x1c>
   3416a:	4635      	mov	r5, r6
   3416c:	e7e7      	b.n	3413e <_realloc_r+0x1c>

0003416e <__ssputs_r>:
   3416e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34172:	688e      	ldr	r6, [r1, #8]
   34174:	4682      	mov	sl, r0
   34176:	460c      	mov	r4, r1
   34178:	4691      	mov	r9, r2
   3417a:	429e      	cmp	r6, r3
   3417c:	4698      	mov	r8, r3
   3417e:	d838      	bhi.n	341f2 <__ssputs_r+0x84>
   34180:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   34184:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   34188:	d031      	beq.n	341ee <__ssputs_r+0x80>
   3418a:	6962      	ldr	r2, [r4, #20]
   3418c:	3301      	adds	r3, #1
   3418e:	6825      	ldr	r5, [r4, #0]
   34190:	6909      	ldr	r1, [r1, #16]
   34192:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34196:	1a6f      	subs	r7, r5, r1
   34198:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   3419c:	443b      	add	r3, r7
   3419e:	1055      	asrs	r5, r2, #1
   341a0:	429d      	cmp	r5, r3
   341a2:	bf38      	it	cc
   341a4:	461d      	movcc	r5, r3
   341a6:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   341aa:	d030      	beq.n	3420e <__ssputs_r+0xa0>
   341ac:	4629      	mov	r1, r5
   341ae:	f7f8 fc67 	bl	2ca80 <_malloc_r>
   341b2:	4606      	mov	r6, r0
   341b4:	b950      	cbnz	r0, 341cc <__ssputs_r+0x5e>
   341b6:	230c      	movs	r3, #12
   341b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   341bc:	f8ca 3000 	str.w	r3, [sl]
   341c0:	89a3      	ldrh	r3, [r4, #12]
   341c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   341c6:	81a3      	strh	r3, [r4, #12]
   341c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   341cc:	463a      	mov	r2, r7
   341ce:	6921      	ldr	r1, [r4, #16]
   341d0:	f7ff faf6 	bl	337c0 <memcpy>
   341d4:	89a3      	ldrh	r3, [r4, #12]
   341d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   341da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   341de:	81a3      	strh	r3, [r4, #12]
   341e0:	6126      	str	r6, [r4, #16]
   341e2:	443e      	add	r6, r7
   341e4:	6165      	str	r5, [r4, #20]
   341e6:	1bed      	subs	r5, r5, r7
   341e8:	6026      	str	r6, [r4, #0]
   341ea:	4646      	mov	r6, r8
   341ec:	60a5      	str	r5, [r4, #8]
   341ee:	4546      	cmp	r6, r8
   341f0:	d900      	bls.n	341f4 <__ssputs_r+0x86>
   341f2:	4646      	mov	r6, r8
   341f4:	4632      	mov	r2, r6
   341f6:	4649      	mov	r1, r9
   341f8:	6820      	ldr	r0, [r4, #0]
   341fa:	f7ff fb01 	bl	33800 <memmove>
   341fe:	68a3      	ldr	r3, [r4, #8]
   34200:	2000      	movs	r0, #0
   34202:	1b9b      	subs	r3, r3, r6
   34204:	60a3      	str	r3, [r4, #8]
   34206:	6823      	ldr	r3, [r4, #0]
   34208:	441e      	add	r6, r3
   3420a:	6026      	str	r6, [r4, #0]
   3420c:	e7dc      	b.n	341c8 <__ssputs_r+0x5a>
   3420e:	462a      	mov	r2, r5
   34210:	f7ff ff87 	bl	34122 <_realloc_r>
   34214:	4606      	mov	r6, r0
   34216:	2800      	cmp	r0, #0
   34218:	d1e2      	bne.n	341e0 <__ssputs_r+0x72>
   3421a:	6921      	ldr	r1, [r4, #16]
   3421c:	4650      	mov	r0, sl
   3421e:	f7f8 fbe1 	bl	2c9e4 <_free_r>
   34222:	e7c8      	b.n	341b6 <__ssputs_r+0x48>

00034224 <_raise_r>:
   34224:	291f      	cmp	r1, #31
   34226:	b538      	push	{r3, r4, r5, lr}
   34228:	4604      	mov	r4, r0
   3422a:	460d      	mov	r5, r1
   3422c:	d904      	bls.n	34238 <_raise_r+0x14>
   3422e:	2316      	movs	r3, #22
   34230:	6003      	str	r3, [r0, #0]
   34232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34236:	bd38      	pop	{r3, r4, r5, pc}
   34238:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3423a:	b112      	cbz	r2, 34242 <_raise_r+0x1e>
   3423c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   34240:	b94b      	cbnz	r3, 34256 <_raise_r+0x32>
   34242:	4620      	mov	r0, r4
   34244:	f000 f816 	bl	34274 <_getpid_r>
   34248:	462a      	mov	r2, r5
   3424a:	4601      	mov	r1, r0
   3424c:	4620      	mov	r0, r4
   3424e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   34252:	f7f9 ba93 	b.w	2d77c <_kill_r>
   34256:	2b01      	cmp	r3, #1
   34258:	d00a      	beq.n	34270 <_raise_r+0x4c>
   3425a:	1c59      	adds	r1, r3, #1
   3425c:	d103      	bne.n	34266 <_raise_r+0x42>
   3425e:	2316      	movs	r3, #22
   34260:	6003      	str	r3, [r0, #0]
   34262:	2001      	movs	r0, #1
   34264:	e7e7      	b.n	34236 <_raise_r+0x12>
   34266:	2400      	movs	r4, #0
   34268:	4628      	mov	r0, r5
   3426a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   3426e:	4798      	blx	r3
   34270:	2000      	movs	r0, #0
   34272:	e7e0      	b.n	34236 <_raise_r+0x12>

00034274 <_getpid_r>:
   34274:	f7fb bed1 	b.w	3001a <_getpid>

00034278 <__ascii_mbtowc>:
   34278:	b082      	sub	sp, #8
   3427a:	b901      	cbnz	r1, 3427e <__ascii_mbtowc+0x6>
   3427c:	a901      	add	r1, sp, #4
   3427e:	b142      	cbz	r2, 34292 <__ascii_mbtowc+0x1a>
   34280:	b14b      	cbz	r3, 34296 <__ascii_mbtowc+0x1e>
   34282:	7813      	ldrb	r3, [r2, #0]
   34284:	600b      	str	r3, [r1, #0]
   34286:	7812      	ldrb	r2, [r2, #0]
   34288:	1c10      	adds	r0, r2, #0
   3428a:	bf18      	it	ne
   3428c:	2001      	movne	r0, #1
   3428e:	b002      	add	sp, #8
   34290:	4770      	bx	lr
   34292:	4610      	mov	r0, r2
   34294:	e7fb      	b.n	3428e <__ascii_mbtowc+0x16>
   34296:	f06f 0001 	mvn.w	r0, #1
   3429a:	e7f8      	b.n	3428e <__ascii_mbtowc+0x16>

0003429c <_malloc_usable_size_r>:
   3429c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   342a0:	1f18      	subs	r0, r3, #4
   342a2:	2b00      	cmp	r3, #0
   342a4:	bfbc      	itt	lt
   342a6:	580b      	ldrlt	r3, [r1, r0]
   342a8:	18c0      	addlt	r0, r0, r3
   342aa:	4770      	bx	lr

000342ac <__ascii_wctomb>:
   342ac:	b149      	cbz	r1, 342c2 <__ascii_wctomb+0x16>
   342ae:	2aff      	cmp	r2, #255	; 0xff
   342b0:	bf8d      	iteet	hi
   342b2:	238a      	movhi	r3, #138	; 0x8a
   342b4:	700a      	strbls	r2, [r1, #0]
   342b6:	2001      	movls	r0, #1
   342b8:	6003      	strhi	r3, [r0, #0]
   342ba:	bf88      	it	hi
   342bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   342c0:	4770      	bx	lr
   342c2:	4608      	mov	r0, r1
   342c4:	4770      	bx	lr
