
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20034790 	.word	0x20034790
    c004:	00018dc5 	.word	0x00018dc5
    c008:	0003103b 	.word	0x0003103b
    c00c:	00018df5 	.word	0x00018df5
    c010:	00018df5 	.word	0x00018df5
    c014:	00018df5 	.word	0x00018df5
    c018:	00018df5 	.word	0x00018df5
    c01c:	00018df5 	.word	0x00018df5
	...
    c02c:	00018bb1 	.word	0x00018bb1
    c030:	00018df5 	.word	0x00018df5
    c034:	00000000 	.word	0x00000000
    c038:	00018b01 	.word	0x00018b01
    c03c:	0001829d 	.word	0x0001829d

0000c040 <_irq_vector_table>:
    c040:	00018d85 00018d85 00018d85 00018d85     ................
    c050:	00018d85 00018d85 00018d85 00018d85     ................
    c060:	00018d85 00018d85 00018d85 00018d85     ................
    c070:	00018d85 00018d85 00018d85 00018d85     ................
    c080:	00018d85 00018d85 00018d85 00018d85     ................
    c090:	00018d85 00018d85 00018d85 00018d85     ................
    c0a0:	00018d85 00018d85 00018d85 00018d85     ................
    c0b0:	0001d2d5 00033b5b 00018d85 00018d85     ....[;..........
    c0c0:	00018d85 00018d85 00018d85 00018d85     ................
    c0d0:	00018d85 00018d85 00018d85 00018d85     ................
    c0e0:	00018d85 00018d85 00033b79 00018d85     ........y;......
    c0f0:	00018d85 00018d85 00018d85 00018d85     ................
    c100:	00018d85 00018d85 00018d85 00018d85     ................
    c110:	00018d85 00018d85 00018d85 00018d85     ................
    c120:	00018d85 00018d85 00018d85 00018d85     ................
    c130:	00018d85 00018d85 00018d85 00018d85     ................
    c140:	00018d85                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0002d8e0 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <bsec_codegen_sensor_control>:
    c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c244:	ed2d 8b02 	vpush	{d8}
    c248:	b087      	sub	sp, #28
    c24a:	2100      	movs	r1, #0
    c24c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c24e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c250:	6121      	str	r1, [r4, #16]
    c252:	e9c4 1102 	strd	r1, r1, [r4, #8]
    c256:	7521      	strb	r1, [r4, #20]
    c258:	461f      	mov	r7, r3
    c25a:	7031      	strb	r1, [r6, #0]
    c25c:	f500 793c 	add.w	r9, r0, #752	; 0x2f0
    c260:	4616      	mov	r6, r2
    c262:	4605      	mov	r5, r0
    c264:	e9cd 6702 	strd	r6, r7, [sp, #8]
    c268:	f8b0 840e 	ldrh.w	r8, [r0, #1038]	; 0x40e
    c26c:	f001 ffe0 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    c270:	e9d9 2300 	ldrd	r2, r3, [r9]
    c274:	ea52 0103 	orrs.w	r1, r2, r3
    c278:	d02d      	beq.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c27a:	1ab6      	subs	r6, r6, r2
    c27c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; c590 <bsec_codegen_sensor_control+0x350>
    c280:	ed9f 0bc5 	vldr	d0, [pc, #788]	; c598 <bsec_codegen_sensor_control+0x358>
    c284:	eb67 0703 	sbc.w	r7, r7, r3
    c288:	f8b5 a40c 	ldrh.w	sl, [r5, #1036]	; 0x40c
    c28c:	f006 fcac 	bl	12be8 <pow>
    c290:	f000 fd0e 	bl	ccb0 <bsec_rt_roundd>
    c294:	ec51 0b10 	vmov	r0, r1, d0
    c298:	f005 feb2 	bl	12000 <__aeabi_d2lz>
    c29c:	fba0 230a 	umull	r2, r3, r0, sl
    c2a0:	fb01 330a 	mla	r3, r1, sl, r3
    c2a4:	ea4f 1a12 	mov.w	sl, r2, lsr #4
    c2a8:	1b90      	subs	r0, r2, r6
    c2aa:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
    c2ae:	eb63 0107 	sbc.w	r1, r3, r7
    c2b2:	ea4f 1b23 	mov.w	fp, r3, asr #4
    c2b6:	4582      	cmp	sl, r0
    c2b8:	eb7b 0101 	sbcs.w	r1, fp, r1
    c2bc:	f2c0 8144 	blt.w	c548 <bsec_codegen_sensor_control+0x308>
    c2c0:	1ab0      	subs	r0, r6, r2
    c2c2:	eb67 0103 	sbc.w	r1, r7, r3
    c2c6:	460b      	mov	r3, r1
    c2c8:	4582      	cmp	sl, r0
    c2ca:	eb7b 0303 	sbcs.w	r3, fp, r3
    c2ce:	da02      	bge.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c2d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c2d2:	2364      	movs	r3, #100	; 0x64
    c2d4:	7013      	strb	r3, [r2, #0]
    c2d6:	2300      	movs	r3, #0
    c2d8:	f10d 0b16 	add.w	fp, sp, #22
    c2dc:	e9c4 3300 	strd	r3, r3, [r4]
    c2e0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    c2e4:	6123      	str	r3, [r4, #16]
    c2e6:	7523      	strb	r3, [r4, #20]
    c2e8:	4622      	mov	r2, r4
    c2ea:	f10d 0315 	add.w	r3, sp, #21
    c2ee:	f8cd b000 	str.w	fp, [sp]
    c2f2:	2101      	movs	r1, #1
    c2f4:	4628      	mov	r0, r5
    c2f6:	f001 ffa1 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c2fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c2fe:	f8bd a016 	ldrh.w	sl, [sp, #22]
    c302:	b12b      	cbz	r3, c310 <bsec_codegen_sensor_control+0xd0>
    c304:	f895 3459 	ldrb.w	r3, [r5, #1113]	; 0x459
    c308:	7463      	strb	r3, [r4, #17]
    c30a:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c30e:	74a3      	strb	r3, [r4, #18]
    c310:	f10d 0315 	add.w	r3, sp, #21
    c314:	4622      	mov	r2, r4
    c316:	f8cd b000 	str.w	fp, [sp]
    c31a:	2102      	movs	r1, #2
    c31c:	4628      	mov	r0, r5
    c31e:	f001 ff8d 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c322:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c326:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c32a:	4592      	cmp	sl, r2
    c32c:	bf28      	it	cs
    c32e:	4692      	movcs	sl, r2
    c330:	b12b      	cbz	r3, c33e <bsec_codegen_sensor_control+0xfe>
    c332:	f895 3458 	ldrb.w	r3, [r5, #1112]	; 0x458
    c336:	74e3      	strb	r3, [r4, #19]
    c338:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c33c:	74a3      	strb	r3, [r4, #18]
    c33e:	f10d 0315 	add.w	r3, sp, #21
    c342:	4622      	mov	r2, r4
    c344:	f8cd b000 	str.w	fp, [sp]
    c348:	2103      	movs	r1, #3
    c34a:	4628      	mov	r0, r5
    c34c:	f001 ff76 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c350:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c354:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c358:	4592      	cmp	sl, r2
    c35a:	bf28      	it	cs
    c35c:	4692      	movcs	sl, r2
    c35e:	b113      	cbz	r3, c366 <bsec_codegen_sensor_control+0x126>
    c360:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c364:	74a3      	strb	r3, [r4, #18]
    c366:	f10d 0315 	add.w	r3, sp, #21
    c36a:	4622      	mov	r2, r4
    c36c:	f8cd b000 	str.w	fp, [sp]
    c370:	2104      	movs	r1, #4
    c372:	4628      	mov	r0, r5
    c374:	f001 ff62 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c378:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c37c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c380:	459a      	cmp	sl, r3
    c382:	bf28      	it	cs
    c384:	469a      	movcs	sl, r3
    c386:	45c2      	cmp	sl, r8
    c388:	bf28      	it	cs
    c38a:	46c2      	movcs	sl, r8
    c38c:	2a00      	cmp	r2, #0
    c38e:	d16d      	bne.n	c46c <bsec_codegen_sensor_control+0x22c>
    c390:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c394:	f8b5 3454 	ldrh.w	r3, [r5, #1108]	; 0x454
    c398:	fbb3 f2fa 	udiv	r2, r3, sl
    c39c:	fb0a 3212 	mls	r2, sl, r2, r3
    c3a0:	ebaa 0a02 	sub.w	sl, sl, r2
    c3a4:	fa1f fa8a 	uxth.w	sl, sl
    c3a8:	f8b5 1410 	ldrh.w	r1, [r5, #1040]	; 0x410
    c3ac:	f8ad 1016 	strh.w	r1, [sp, #22]
    c3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c3b4:	4453      	add	r3, sl
    c3b6:	b29b      	uxth	r3, r3
    c3b8:	fbb3 f2f1 	udiv	r2, r3, r1
    c3bc:	fb01 3312 	mls	r3, r1, r2, r3
    c3c0:	e9c9 6700 	strd	r6, r7, [r9]
    c3c4:	ed9f 1b72 	vldr	d1, [pc, #456]	; c590 <bsec_codegen_sensor_control+0x350>
    c3c8:	f8a5 3454 	strh.w	r3, [r5, #1108]	; 0x454
    c3cc:	f8a5 a40c 	strh.w	sl, [r5, #1036]	; 0x40c
    c3d0:	ed9f 0b71 	vldr	d0, [pc, #452]	; c598 <bsec_codegen_sensor_control+0x358>
    c3d4:	f006 fc08 	bl	12be8 <pow>
    c3d8:	f000 fc6a 	bl	ccb0 <bsec_rt_roundd>
    c3dc:	ec51 0b10 	vmov	r0, r1, d0
    c3e0:	f005 fe0e 	bl	12000 <__aeabi_d2lz>
    c3e4:	e9d8 8900 	ldrd	r8, r9, [r8]
    c3e8:	fba0 230a 	umull	r2, r3, r0, sl
    c3ec:	fb01 330a 	mla	r3, r1, sl, r3
    c3f0:	18b6      	adds	r6, r6, r2
    c3f2:	415f      	adcs	r7, r3
    c3f4:	f04f 0a00 	mov.w	sl, #0
    c3f8:	ebb6 0008 	subs.w	r0, r6, r8
    c3fc:	e9c4 6700 	strd	r6, r7, [r4]
    c400:	eb67 0109 	sbc.w	r1, r7, r9
    c404:	f885 a45b 	strb.w	sl, [r5, #1115]	; 0x45b
    c408:	f005 fdbc 	bl	11f84 <__aeabi_l2f>
    c40c:	eddf 8a64 	vldr	s17, [pc, #400]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c410:	ed9f 8a64 	vldr	s16, [pc, #400]	; c5a4 <bsec_codegen_sensor_control+0x364>
    c414:	ee07 0a90 	vmov	s15, r0
    c418:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c41c:	eef4 7ac8 	vcmpe.f32	s15, s16
    c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c424:	d47b      	bmi.n	c51e <bsec_codegen_sensor_control+0x2de>
    c426:	ed9f 7a60 	vldr	s14, [pc, #384]	; c5a8 <bsec_codegen_sensor_control+0x368>
    c42a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c432:	dc74      	bgt.n	c51e <bsec_codegen_sensor_control+0x2de>
    c434:	f505 7340 	add.w	r3, r5, #768	; 0x300
    c438:	e9d3 3400 	ldrd	r3, r4, [r3]
    c43c:	1af0      	subs	r0, r6, r3
    c43e:	eb67 0104 	sbc.w	r1, r7, r4
    c442:	f005 fd9f 	bl	11f84 <__aeabi_l2f>
    c446:	ee07 0a90 	vmov	s15, r0
    c44a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c44e:	eef4 7ac8 	vcmpe.f32	s15, s16
    c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c456:	bf46      	itte	mi
    c458:	2366      	movmi	r3, #102	; 0x66
    c45a:	f885 345c 	strbmi.w	r3, [r5, #1116]	; 0x45c
    c45e:	f885 a45c 	strbpl.w	sl, [r5, #1116]	; 0x45c
    c462:	b007      	add	sp, #28
    c464:	ecbd 8b02 	vpop	{d8}
    c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c46c:	2301      	movs	r3, #1
    c46e:	7423      	strb	r3, [r4, #16]
    c470:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
    c474:	4a4d      	ldr	r2, [pc, #308]	; (c5ac <bsec_codegen_sensor_control+0x36c>)
    c476:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    c47a:	7d52      	ldrb	r2, [r2, #21]
    c47c:	f8b3 1420 	ldrh.w	r1, [r3, #1056]	; 0x420
    c480:	81a1      	strh	r1, [r4, #12]
    c482:	f895 1458 	ldrb.w	r1, [r5, #1112]	; 0x458
    c486:	74e1      	strb	r1, [r4, #19]
    c488:	f895 1457 	ldrb.w	r1, [r5, #1111]	; 0x457
    c48c:	74a1      	strb	r1, [r4, #18]
    c48e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    c492:	edd2 7a89 	vldr	s15, [r2, #548]	; 0x224
    c496:	eef5 7a40 	vcmp.f32	s15, #0.0
    c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c49e:	d10c      	bne.n	c4ba <bsec_codegen_sensor_control+0x27a>
    c4a0:	f895 245b 	ldrb.w	r2, [r5, #1115]	; 0x45b
    c4a4:	b94a      	cbnz	r2, c4ba <bsec_codegen_sensor_control+0x27a>
    c4a6:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
    c4aa:	81e3      	strh	r3, [r4, #14]
    c4ac:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c4b4:	e9c8 2300 	strd	r2, r3, [r8]
    c4b8:	e76c      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c4ba:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4be:	f505 7b40 	add.w	fp, r5, #768	; 0x300
    c4c2:	e9d8 6700 	ldrd	r6, r7, [r8]
    c4c6:	e9db 2300 	ldrd	r2, r3, [fp]
    c4ca:	4296      	cmp	r6, r2
    c4cc:	eb77 0103 	sbcs.w	r1, r7, r3
    c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4d4:	bfbc      	itt	lt
    c4d6:	4616      	movlt	r6, r2
    c4d8:	461f      	movlt	r7, r3
    c4da:	1b80      	subs	r0, r0, r6
    c4dc:	eb61 0107 	sbc.w	r1, r1, r7
    c4e0:	f005 fd50 	bl	11f84 <__aeabi_l2f>
    c4e4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c4e8:	ee07 0a90 	vmov	s15, r0
    c4ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
    c4f0:	f002 f884 	bl	e5fc <bsec_Bsec_getModHeatingDuration>
    c4f4:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c4f8:	81e0      	strh	r0, [r4, #14]
    c4fa:	b9c3      	cbnz	r3, c52e <bsec_codegen_sensor_control+0x2ee>
    c4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c500:	2116      	movs	r1, #22
    c502:	4628      	mov	r0, r5
    c504:	ed9f 0a2a 	vldr	s0, [pc, #168]	; c5b0 <bsec_codegen_sensor_control+0x370>
    c508:	f003 f98a 	bl	f820 <bsec_ChannelHub_setInput>
    c50c:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c510:	2b00      	cmp	r3, #0
    c512:	d0cd      	beq.n	c4b0 <bsec_codegen_sensor_control+0x270>
    c514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c518:	e9cb 2300 	strd	r2, r3, [fp]
    c51c:	e73a      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c51e:	2365      	movs	r3, #101	; 0x65
    c520:	f885 345c 	strb.w	r3, [r5, #1116]	; 0x45c
    c524:	b007      	add	sp, #28
    c526:	ecbd 8b02 	vpop	{d8}
    c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c532:	2116      	movs	r1, #22
    c534:	4628      	mov	r0, r5
    c536:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    c53a:	f003 f971 	bl	f820 <bsec_ChannelHub_setInput>
    c53e:	68a3      	ldr	r3, [r4, #8]
    c540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    c544:	60a3      	str	r3, [r4, #8]
    c546:	e7e1      	b.n	c50c <bsec_codegen_sensor_control+0x2cc>
    c548:	ed9f 1b11 	vldr	d1, [pc, #68]	; c590 <bsec_codegen_sensor_control+0x350>
    c54c:	ed9f 0b12 	vldr	d0, [pc, #72]	; c598 <bsec_codegen_sensor_control+0x358>
    c550:	e9d9 ab00 	ldrd	sl, fp, [r9]
    c554:	f8b5 840c 	ldrh.w	r8, [r5, #1036]	; 0x40c
    c558:	f006 fb46 	bl	12be8 <pow>
    c55c:	f000 fba8 	bl	ccb0 <bsec_rt_roundd>
    c560:	ec51 0b10 	vmov	r0, r1, d0
    c564:	f005 fd4c 	bl	12000 <__aeabi_d2lz>
    c568:	fba0 2308 	umull	r2, r3, r0, r8
    c56c:	eb1a 0602 	adds.w	r6, sl, r2
    c570:	fb01 3308 	mla	r3, r1, r8, r3
    c574:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c576:	eb4b 0703 	adc.w	r7, fp, r3
    c57a:	2364      	movs	r3, #100	; 0x64
    c57c:	e9c4 6700 	strd	r6, r7, [r4]
    c580:	7013      	strb	r3, [r2, #0]
    c582:	b007      	add	sp, #28
    c584:	ecbd 8b02 	vpop	{d8}
    c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c58c:	f3af 8000 	nop.w
    c590:	00000000 	.word	0x00000000
    c594:	401c0000 	.word	0x401c0000
    c598:	00000000 	.word	0x00000000
    c59c:	40240000 	.word	0x40240000
    c5a0:	4e6e6b28 	.word	0x4e6e6b28
    c5a4:	42700000 	.word	0x42700000
    c5a8:	43700000 	.word	0x43700000
    c5ac:	00036450 	.word	0x00036450
	...

0000c5b8 <bsec_codegen_update_subscription>:
    c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5bc:	ed2d 8b04 	vpush	{d8-d9}
    c5c0:	b08d      	sub	sp, #52	; 0x34
    c5c2:	e9dd 9a1a 	ldrd	r9, sl, [sp, #104]	; 0x68
    c5c6:	2500      	movs	r5, #0
    c5c8:	4616      	mov	r6, r2
    c5ca:	4604      	mov	r4, r0
    c5cc:	460f      	mov	r7, r1
    c5ce:	f889 5000 	strb.w	r5, [r9]
    c5d2:	f200 412a 	addw	r1, r0, #1066	; 0x42a
    c5d6:	221c      	movs	r2, #28
    c5d8:	a805      	add	r0, sp, #20
    c5da:	469b      	mov	fp, r3
    c5dc:	f028 fa20 	bl	34a20 <memcpy>
    c5e0:	2e00      	cmp	r6, #0
    c5e2:	f000 8097 	beq.w	c714 <bsec_codegen_update_subscription+0x15c>
    c5e6:	793b      	ldrb	r3, [r7, #4]
    c5e8:	3b01      	subs	r3, #1
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	2a01      	cmp	r2, #1
    c5ee:	f240 8106 	bls.w	c7fe <bsec_codegen_update_subscription+0x246>
    c5f2:	9501      	str	r5, [sp, #4]
    c5f4:	ed9f 8abe 	vldr	s16, [pc, #760]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c5f8:	ed9f 9abe 	vldr	s18, [pc, #760]	; c8f4 <bsec_codegen_update_subscription+0x33c>
    c5fc:	eddf 8abe 	vldr	s17, [pc, #760]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c600:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    c604:	2501      	movs	r5, #1
    c606:	e016      	b.n	c636 <bsec_codegen_update_subscription+0x7e>
    c608:	4abc      	ldr	r2, [pc, #752]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c60a:	411a      	asrs	r2, r3
    c60c:	07d1      	lsls	r1, r2, #31
    c60e:	d515      	bpl.n	c63c <bsec_codegen_update_subscription+0x84>
    c610:	2201      	movs	r2, #1
    c612:	fa02 f303 	lsl.w	r3, r2, r3
    c616:	9a01      	ldr	r2, [sp, #4]
    c618:	4213      	tst	r3, r2
    c61a:	f000 80b4 	beq.w	c786 <bsec_codegen_update_subscription+0x1ce>
    c61e:	23f3      	movs	r3, #243	; 0xf3
    c620:	f889 3000 	strb.w	r3, [r9]
    c624:	3501      	adds	r5, #1
    c626:	b2ed      	uxtb	r5, r5
    c628:	42ae      	cmp	r6, r5
    c62a:	d30e      	bcc.n	c64a <bsec_codegen_update_subscription+0x92>
    c62c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
    c630:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c634:	3b01      	subs	r3, #1
    c636:	b2db      	uxtb	r3, r3
    c638:	2b14      	cmp	r3, #20
    c63a:	d9e5      	bls.n	c608 <bsec_codegen_update_subscription+0x50>
    c63c:	3501      	adds	r5, #1
    c63e:	b2ed      	uxtb	r5, r5
    c640:	230a      	movs	r3, #10
    c642:	42ae      	cmp	r6, r5
    c644:	f889 3000 	strb.w	r3, [r9]
    c648:	d2f0      	bcs.n	c62c <bsec_codegen_update_subscription+0x74>
    c64a:	f999 3000 	ldrsb.w	r3, [r9]
    c64e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
    c652:	2b00      	cmp	r3, #0
    c654:	da61      	bge.n	c71a <bsec_codegen_update_subscription+0x162>
    c656:	f89b 3000 	ldrb.w	r3, [fp]
    c65a:	2b07      	cmp	r3, #7
    c65c:	f240 8087 	bls.w	c76e <bsec_codegen_update_subscription+0x1b6>
    c660:	2300      	movs	r3, #0
    c662:	f8df 92a4 	ldr.w	r9, [pc, #676]	; c908 <bsec_codegen_update_subscription+0x350>
    c666:	ed9f 6aa2 	vldr	s12, [pc, #648]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c66a:	49a4      	ldr	r1, [pc, #656]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c66c:	4ea4      	ldr	r6, [pc, #656]	; (c900 <bsec_codegen_update_subscription+0x348>)
    c66e:	f8df e294 	ldr.w	lr, [pc, #660]	; c904 <bsec_codegen_update_subscription+0x34c>
    c672:	eddf 5aa1 	vldr	s11, [pc, #644]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c676:	469c      	mov	ip, r3
    c678:	e002      	b.n	c680 <bsec_codegen_update_subscription+0xc8>
    c67a:	2f18      	cmp	r7, #24
    c67c:	463b      	mov	r3, r7
    c67e:	d07b      	beq.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c680:	fa49 f203 	asr.w	r2, r9, r3
    c684:	1c5f      	adds	r7, r3, #1
    c686:	07d0      	lsls	r0, r2, #31
    c688:	fa5f f887 	uxtb.w	r8, r7
    c68c:	d5f5      	bpl.n	c67a <bsec_codegen_update_subscription+0xc2>
    c68e:	f10c 0c01 	add.w	ip, ip, #1
    c692:	fa5f fc8c 	uxtb.w	ip, ip
    c696:	f10c 5000 	add.w	r0, ip, #536870912	; 0x20000000
    c69a:	3801      	subs	r0, #1
    c69c:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    c6a0:	2501      	movs	r5, #1
    c6a2:	f880 8004 	strb.w	r8, [r0, #4]
    c6a6:	409d      	lsls	r5, r3
    c6a8:	ed80 6a00 	vstr	s12, [r0]
    c6ac:	2300      	movs	r3, #0
    c6ae:	f64f 78ff 	movw	r8, #65535	; 0xffff
    c6b2:	e00c      	b.n	c6ce <bsec_codegen_update_subscription+0x116>
    c6b4:	4542      	cmp	r2, r8
    c6b6:	d007      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6b8:	ee07 2a90 	vmov	s15, r2
    c6bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c6c0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    c6c4:	ed80 7a00 	vstr	s14, [r0]
    c6c8:	3301      	adds	r3, #1
    c6ca:	2b15      	cmp	r3, #21
    c6cc:	d0d5      	beq.n	c67a <bsec_codegen_update_subscription+0xc2>
    c6ce:	fa41 f203 	asr.w	r2, r1, r3
    c6d2:	07d2      	lsls	r2, r2, #31
    c6d4:	d5f8      	bpl.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6d6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    c6da:	4215      	tst	r5, r2
    c6dc:	d0f4      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6de:	f813 200e 	ldrb.w	r2, [r3, lr]
    c6e2:	ed90 7a00 	vldr	s14, [r0]
    c6e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    c6ea:	eeb4 7a46 	vcmp.f32	s14, s12
    c6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6f2:	f8b2 2428 	ldrh.w	r2, [r2, #1064]	; 0x428
    c6f6:	d0dd      	beq.n	c6b4 <bsec_codegen_update_subscription+0xfc>
    c6f8:	ee07 2a90 	vmov	s15, r2
    c6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c700:	eec5 6aa7 	vdiv.f32	s13, s11, s15
    c704:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c70c:	bf48      	it	mi
    c70e:	edc0 6a00 	vstrmi	s13, [r0]
    c712:	e7d9      	b.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c714:	230c      	movs	r3, #12
    c716:	f889 3000 	strb.w	r3, [r9]
    c71a:	a905      	add	r1, sp, #20
    c71c:	4620      	mov	r0, r4
    c71e:	f001 fdb9 	bl	e294 <bsec_Bsec_checkSamplIntvlCompatibilty>
    c722:	2800      	cmp	r0, #0
    c724:	d168      	bne.n	c7f8 <bsec_codegen_update_subscription+0x240>
    c726:	f999 0000 	ldrsb.w	r0, [r9]
    c72a:	2800      	cmp	r0, #0
    c72c:	db93      	blt.n	c656 <bsec_codegen_update_subscription+0x9e>
    c72e:	4e73      	ldr	r6, [pc, #460]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c730:	4f74      	ldr	r7, [pc, #464]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c732:	2300      	movs	r3, #0
    c734:	fa46 f203 	asr.w	r2, r6, r3
    c738:	1c5d      	adds	r5, r3, #1
    c73a:	07d2      	lsls	r2, r2, #31
    c73c:	b2e9      	uxtb	r1, r5
    c73e:	d50e      	bpl.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c740:	5ddb      	ldrb	r3, [r3, r7]
    c742:	aa0c      	add	r2, sp, #48	; 0x30
    c744:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    c748:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c74c:	f832 2c1e 	ldrh.w	r2, [r2, #-30]
    c750:	f8b3 3428 	ldrh.w	r3, [r3, #1064]	; 0x428
    c754:	4293      	cmp	r3, r2
    c756:	4620      	mov	r0, r4
    c758:	d001      	beq.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c75a:	f001 ffd7 	bl	e70c <bsec_Bsec_requestOutput>
    c75e:	2d15      	cmp	r5, #21
    c760:	462b      	mov	r3, r5
    c762:	d1e7      	bne.n	c734 <bsec_codegen_update_subscription+0x17c>
    c764:	f89b 3000 	ldrb.w	r3, [fp]
    c768:	2b07      	cmp	r3, #7
    c76a:	f63f af79 	bhi.w	c660 <bsec_codegen_update_subscription+0xa8>
    c76e:	23f1      	movs	r3, #241	; 0xf1
    c770:	f889 3000 	strb.w	r3, [r9]
    c774:	f04f 0c00 	mov.w	ip, #0
    c778:	f88b c000 	strb.w	ip, [fp]
    c77c:	b00d      	add	sp, #52	; 0x34
    c77e:	ecbd 8b04 	vpop	{d8-d9}
    c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c786:	f105 5200 	add.w	r2, r5, #536870912	; 0x20000000
    c78a:	3a01      	subs	r2, #1
    c78c:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
    c790:	ed98 0a00 	vldr	s0, [r8]
    c794:	9a01      	ldr	r2, [sp, #4]
    c796:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c79a:	431a      	orrs	r2, r3
    c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7a0:	9201      	str	r2, [sp, #4]
    c7a2:	d143      	bne.n	c82c <bsec_codegen_update_subscription+0x274>
    c7a4:	23f6      	movs	r3, #246	; 0xf6
    c7a6:	f889 3000 	strb.w	r3, [r9]
    c7aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7b2:	dd04      	ble.n	c7be <bsec_codegen_update_subscription+0x206>
    c7b4:	eeb4 0ac8 	vcmpe.f32	s0, s16
    c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7bc:	d454      	bmi.n	c868 <bsec_codegen_update_subscription+0x2b0>
    c7be:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7c6:	bf14      	ite	ne
    c7c8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    c7cc:	2300      	moveq	r3, #0
    c7ce:	b29b      	uxth	r3, r3
    c7d0:	9302      	str	r3, [sp, #8]
    c7d2:	f999 3000 	ldrsb.w	r3, [r9]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	f47f af24 	bne.w	c624 <bsec_codegen_update_subscription+0x6c>
    c7dc:	4a49      	ldr	r2, [pc, #292]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c7de:	f898 3004 	ldrb.w	r3, [r8, #4]
    c7e2:	4413      	add	r3, r2
    c7e4:	aa0c      	add	r2, sp, #48	; 0x30
    c7e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c7ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    c7ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    c7f2:	f823 2c1e 	strh.w	r2, [r3, #-30]
    c7f6:	e715      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c7f8:	f889 0000 	strb.w	r0, [r9]
    c7fc:	e795      	b.n	c72a <bsec_codegen_update_subscription+0x172>
    c7fe:	edd7 7a00 	vldr	s15, [r7]
    c802:	eef5 7a40 	vcmp.f32	s15, #0.0
    c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c80a:	f47f aef2 	bne.w	c5f2 <bsec_codegen_update_subscription+0x3a>
    c80e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    c812:	f247 5330 	movw	r3, #30000	; 0x7530
    c816:	429a      	cmp	r2, r3
    c818:	d01d      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c81a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c81e:	429a      	cmp	r2, r3
    c820:	d019      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c822:	230b      	movs	r3, #11
    c824:	46ac      	mov	ip, r5
    c826:	f889 3000 	strb.w	r3, [r9]
    c82a:	e7a5      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c82c:	eeb4 0a48 	vcmp.f32	s0, s16
    c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c834:	d0c3      	beq.n	c7be <bsec_codegen_update_subscription+0x206>
    c836:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    c83a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c842:	dc04      	bgt.n	c84e <bsec_codegen_update_subscription+0x296>
    c844:	eeb4 0ac9 	vcmpe.f32	s0, s18
    c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c84c:	d5ad      	bpl.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c84e:	23f2      	movs	r3, #242	; 0xf2
    c850:	f889 3000 	strb.w	r3, [r9]
    c854:	e7a9      	b.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c856:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
    c85a:	2b00      	cmp	r3, #0
    c85c:	d188      	bne.n	c770 <bsec_codegen_update_subscription+0x1b8>
    c85e:	2201      	movs	r2, #1
    c860:	469c      	mov	ip, r3
    c862:	f884 245b 	strb.w	r2, [r4, #1115]	; 0x45b
    c866:	e787      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c868:	ee88 0a80 	vdiv.f32	s0, s17, s0
    c86c:	f01f fa9a 	bl	2bda4 <roundf>
    c870:	f04f 0a00 	mov.w	sl, #0
    c874:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c878:	ee10 3a10 	vmov	r3, s0
    c87c:	b29b      	uxth	r3, r3
    c87e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    c882:	4a20      	ldr	r2, [pc, #128]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c884:	f898 3004 	ldrb.w	r3, [r8, #4]
    c888:	4413      	add	r3, r2
    c88a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c88e:	4453      	add	r3, sl
    c890:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
    c894:	f10a 0a0e 	add.w	sl, sl, #14
    c898:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
    c89c:	4628      	mov	r0, r5
    c89e:	f000 fb8b 	bl	cfb8 <__aeabi_ui2d>
    c8a2:	a311      	add	r3, pc, #68	; (adr r3, c8e8 <bsec_codegen_update_subscription+0x330>)
    c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8a8:	f000 fc00 	bl	d0ac <__aeabi_dmul>
    c8ac:	ec41 0b10 	vmov	d0, r0, r1
    c8b0:	f000 f9fe 	bl	ccb0 <bsec_rt_roundd>
    c8b4:	ec51 0b10 	vmov	r0, r1, d0
    c8b8:	f005 fa74 	bl	11da4 <__aeabi_d2uiz>
    c8bc:	b280      	uxth	r0, r0
    c8be:	1a2b      	subs	r3, r5, r0
    c8c0:	9a02      	ldr	r2, [sp, #8]
    c8c2:	b29b      	uxth	r3, r3
    c8c4:	4405      	add	r5, r0
    c8c6:	4293      	cmp	r3, r2
    c8c8:	b2ad      	uxth	r5, r5
    c8ca:	d803      	bhi.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8cc:	4295      	cmp	r5, r2
    c8ce:	d301      	bcc.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8d0:	9d03      	ldr	r5, [sp, #12]
    c8d2:	e77e      	b.n	c7d2 <bsec_codegen_update_subscription+0x21a>
    c8d4:	f1ba 0f54 	cmp.w	sl, #84	; 0x54
    c8d8:	d1d3      	bne.n	c882 <bsec_codegen_update_subscription+0x2ca>
    c8da:	23f4      	movs	r3, #244	; 0xf4
    c8dc:	9d03      	ldr	r5, [sp, #12]
    c8de:	f889 3000 	strb.w	r3, [r9]
    c8e2:	e69f      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c8e4:	f3af 8000 	nop.w
    c8e8:	47ae147b 	.word	0x47ae147b
    c8ec:	3f847ae1 	.word	0x3f847ae1
    c8f0:	477fff00 	.word	0x477fff00
    c8f4:	3ada740e 	.word	0x3ada740e
    c8f8:	42c80000 	.word	0x42c80000
    c8fc:	001279ef 	.word	0x001279ef
    c900:	000363e4 	.word	0x000363e4
    c904:	00036438 	.word	0x00036438
    c908:	00e0200f 	.word	0x00e0200f
    c90c:	00000000 	.word	0x00000000

0000c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>:
    c910:	4916      	ldr	r1, [pc, #88]	; (c96c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x5c>)
    c912:	6041      	str	r1, [r0, #4]
    c914:	b430      	push	{r4, r5}
    c916:	2109      	movs	r1, #9
    c918:	4d15      	ldr	r5, [pc, #84]	; (c970 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x60>)
    c91a:	4c16      	ldr	r4, [pc, #88]	; (c974 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x64>)
    c91c:	7001      	strb	r1, [r0, #0]
    c91e:	4916      	ldr	r1, [pc, #88]	; (c978 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x68>)
    c920:	4a16      	ldr	r2, [pc, #88]	; (c97c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x6c>)
    c922:	6181      	str	r1, [r0, #24]
    c924:	62c5      	str	r5, [r0, #44]	; 0x2c
    c926:	4916      	ldr	r1, [pc, #88]	; (c980 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x70>)
    c928:	4d16      	ldr	r5, [pc, #88]	; (c984 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x74>)
    c92a:	6404      	str	r4, [r0, #64]	; 0x40
    c92c:	4c16      	ldr	r4, [pc, #88]	; (c988 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x78>)
    c92e:	6102      	str	r2, [r0, #16]
    c930:	6241      	str	r1, [r0, #36]	; 0x24
    c932:	4a16      	ldr	r2, [pc, #88]	; (c98c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x7c>)
    c934:	4916      	ldr	r1, [pc, #88]	; (c990 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x80>)
    c936:	6385      	str	r5, [r0, #56]	; 0x38
    c938:	64c4      	str	r4, [r0, #76]	; 0x4c
    c93a:	4d16      	ldr	r5, [pc, #88]	; (c994 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x84>)
    c93c:	4c16      	ldr	r4, [pc, #88]	; (c998 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x88>)
    c93e:	6142      	str	r2, [r0, #20]
    c940:	6281      	str	r1, [r0, #40]	; 0x28
    c942:	2200      	movs	r2, #0
    c944:	4915      	ldr	r1, [pc, #84]	; (c99c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x8c>)
    c946:	63c5      	str	r5, [r0, #60]	; 0x3c
    c948:	6504      	str	r4, [r0, #80]	; 0x50
    c94a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c94e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c952:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
    c956:	6601      	str	r1, [r0, #96]	; 0x60
    c958:	6082      	str	r2, [r0, #8]
    c95a:	61c2      	str	r2, [r0, #28]
    c95c:	6302      	str	r2, [r0, #48]	; 0x30
    c95e:	6442      	str	r2, [r0, #68]	; 0x44
    c960:	60c2      	str	r2, [r0, #12]
    c962:	6202      	str	r2, [r0, #32]
    c964:	6342      	str	r2, [r0, #52]	; 0x34
    c966:	6482      	str	r2, [r0, #72]	; 0x48
    c968:	bc30      	pop	{r4, r5}
    c96a:	4770      	bx	lr
    c96c:	3d96f007 	.word	0x3d96f007
    c970:	c04c3fe6 	.word	0xc04c3fe6
    c974:	408350b1 	.word	0x408350b1
    c978:	40a00000 	.word	0x40a00000
    c97c:	3de17c1c 	.word	0x3de17c1c
    c980:	3e0ccccd 	.word	0x3e0ccccd
    c984:	bf3ced91 	.word	0xbf3ced91
    c988:	3ee3fe5d 	.word	0x3ee3fe5d
    c98c:	3fd78034 	.word	0x3fd78034
    c990:	3e27d567 	.word	0x3e27d567
    c994:	3f403afb 	.word	0x3f403afb
    c998:	bf853c36 	.word	0xbf853c36
    c99c:	40400000 	.word	0x40400000

0000c9a0 <bsec_SensorHeatCompensator_configure>:
    c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9a4:	b086      	sub	sp, #24
    c9a6:	ab04      	add	r3, sp, #16
    c9a8:	ae05      	add	r6, sp, #20
    c9aa:	4605      	mov	r5, r0
    c9ac:	7800      	ldrb	r0, [r0, #0]
    c9ae:	9300      	str	r3, [sp, #0]
    c9b0:	9601      	str	r6, [sp, #4]
    c9b2:	f10d 030f 	add.w	r3, sp, #15
    c9b6:	460f      	mov	r7, r1
    c9b8:	f005 f83a 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    c9bc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9c0:	b9f8      	cbnz	r0, ca02 <bsec_SensorHeatCompensator_configure+0x62>
    c9c2:	2401      	movs	r4, #1
    c9c4:	f105 0a40 	add.w	sl, r5, #64	; 0x40
    c9c8:	f105 092c 	add.w	r9, r5, #44	; 0x2c
    c9cc:	f105 0818 	add.w	r8, r5, #24
    c9d0:	1ea3      	subs	r3, r4, #2
    c9d2:	2b03      	cmp	r3, #3
    c9d4:	d803      	bhi.n	c9de <bsec_SensorHeatCompensator_configure+0x3e>
    c9d6:	e8df f003 	tbb	[pc, r3]
    c9da:	1d23      	.short	0x1d23
    c9dc:	0c17      	.short	0x0c17
    c9de:	1d2a      	adds	r2, r5, #4
    c9e0:	4631      	mov	r1, r6
    c9e2:	4638      	mov	r0, r7
    c9e4:	f003 fb8e 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    c9e8:	2c05      	cmp	r4, #5
    c9ea:	d01f      	beq.n	ca2c <bsec_SensorHeatCompensator_configure+0x8c>
    c9ec:	3401      	adds	r4, #1
    c9ee:	b2e4      	uxtb	r4, r4
    c9f0:	e7ee      	b.n	c9d0 <bsec_SensorHeatCompensator_configure+0x30>
    c9f2:	4638      	mov	r0, r7
    c9f4:	4631      	mov	r1, r6
    c9f6:	f003 f8e7 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
    c9fa:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9fe:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
    ca02:	b006      	add	sp, #24
    ca04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca08:	4652      	mov	r2, sl
    ca0a:	4631      	mov	r1, r6
    ca0c:	4638      	mov	r0, r7
    ca0e:	f003 fb79 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca12:	e7eb      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca14:	464a      	mov	r2, r9
    ca16:	4631      	mov	r1, r6
    ca18:	4638      	mov	r0, r7
    ca1a:	f003 fb73 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca1e:	e7e5      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca20:	4642      	mov	r2, r8
    ca22:	4631      	mov	r1, r6
    ca24:	4638      	mov	r0, r7
    ca26:	f003 fb6d 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca2a:	e7df      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca2c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    ca30:	e7e7      	b.n	ca02 <bsec_SensorHeatCompensator_configure+0x62>
    ca32:	bf00      	nop

0000ca34 <bsec_SensorHeatCompensator_doStep>:
    ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca38:	ed2d 8b04 	vpush	{d8-d9}
    ca3c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    ca40:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
    ca44:	4606      	mov	r6, r0
    ca46:	eeb0 8a40 	vmov.f32	s16, s0
    ca4a:	4614      	mov	r4, r2
    ca4c:	461d      	mov	r5, r3
    ca4e:	eef0 8a60 	vmov.f32	s17, s1
    ca52:	d06a      	beq.n	cb2a <bsec_SensorHeatCompensator_doStep+0xf6>
    ca54:	d846      	bhi.n	cae4 <bsec_SensorHeatCompensator_doStep+0xb0>
    ca56:	2964      	cmp	r1, #100	; 0x64
    ca58:	d065      	beq.n	cb26 <bsec_SensorHeatCompensator_doStep+0xf2>
    ca5a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    ca5e:	d14b      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca60:	2704      	movs	r7, #4
    ca62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ca66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ca6a:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca6e:	f005 f8a7 	bl	11bc0 <bsec_isequal>
    ca72:	2800      	cmp	r0, #0
    ca74:	d140      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca76:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca7e:	1a12      	subs	r2, r2, r0
    ca80:	eb63 0301 	sbc.w	r3, r3, r1
    ca84:	4610      	mov	r0, r2
    ca86:	4619      	mov	r1, r3
    ca88:	f000 fae2 	bl	d050 <__aeabi_l2d>
    ca8c:	a329      	add	r3, pc, #164	; (adr r3, cb34 <bsec_SensorHeatCompensator_doStep+0x100>)
    ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca92:	f000 fc35 	bl	d300 <__aeabi_ddiv>
    ca96:	4680      	mov	r8, r0
    ca98:	4689      	mov	r9, r1
    ca9a:	f000 fdc9 	bl	d630 <__aeabi_d2f>
    ca9e:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    caa2:	ee07 0a90 	vmov	s15, r0
    caa6:	edd7 9a00 	vldr	s19, [r7]
    caaa:	ed97 7a05 	vldr	s14, [r7, #20]
    caae:	ed97 9a0a 	vldr	s18, [r7, #40]	; 0x28
    cab2:	ee67 9aa9 	vmul.f32	s19, s15, s19
    cab6:	4642      	mov	r2, r8
    cab8:	464b      	mov	r3, r9
    caba:	4640      	mov	r0, r8
    cabc:	4649      	mov	r1, r9
    cabe:	ee27 9a89 	vmul.f32	s18, s15, s18
    cac2:	ee79 9a87 	vadd.f32	s19, s19, s14
    cac6:	f000 faf1 	bl	d0ac <__aeabi_dmul>
    caca:	f000 fdb1 	bl	d630 <__aeabi_d2f>
    cace:	ee07 0a90 	vmov	s15, r0
    cad2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    cad6:	ee79 7a27 	vadd.f32	s15, s18, s15
    cada:	ee77 7a87 	vadd.f32	s15, s15, s14
    cade:	ee89 9aa7 	vdiv.f32	s18, s19, s15
    cae2:	e00b      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
    cae4:	f241 7370 	movw	r3, #6000	; 0x1770
    cae8:	4299      	cmp	r1, r3
    caea:	d01a      	beq.n	cb22 <bsec_SensorHeatCompensator_doStep+0xee>
    caec:	f247 5330 	movw	r3, #30000	; 0x7530
    caf0:	4299      	cmp	r1, r3
    caf2:	d101      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    caf4:	2701      	movs	r7, #1
    caf6:	e7b4      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    caf8:	ed9f 9a0d 	vldr	s18, [pc, #52]	; cb30 <bsec_SensorHeatCompensator_doStep+0xfc>
    cafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    cb04:	4620      	mov	r0, r4
    cb06:	4629      	mov	r1, r5
    cb08:	f005 f85a 	bl	11bc0 <bsec_isequal>
    cb0c:	b908      	cbnz	r0, cb12 <bsec_SensorHeatCompensator_doStep+0xde>
    cb0e:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
    cb12:	ee38 0a49 	vsub.f32	s0, s16, s18
    cb16:	ee30 0a68 	vsub.f32	s0, s0, s17
    cb1a:	ecbd 8b04 	vpop	{d8-d9}
    cb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb22:	2702      	movs	r7, #2
    cb24:	e79d      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb26:	2705      	movs	r7, #5
    cb28:	e79b      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb2a:	ed90 9a18 	vldr	s18, [r0, #96]	; 0x60
    cb2e:	e7e5      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
	...
    cb38:	41cdcd65 	.word	0x41cdcd65

0000cb3c <bsec_SensorHeatCompensator_getConfiguration>:
    cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb40:	b085      	sub	sp, #20
    cb42:	ac04      	add	r4, sp, #16
    cb44:	2505      	movs	r5, #5
    cb46:	f804 5d09 	strb.w	r5, [r4, #-9]!
    cb4a:	4606      	mov	r6, r0
    cb4c:	4617      	mov	r7, r2
    cb4e:	7800      	ldrb	r0, [r0, #0]
    cb50:	4622      	mov	r2, r4
    cb52:	460d      	mov	r5, r1
    cb54:	f004 ff9a 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cb58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb5c:	9003      	str	r0, [sp, #12]
    cb5e:	b1d2      	cbz	r2, cb96 <bsec_SensorHeatCompensator_getConfiguration+0x5a>
    cb60:	2401      	movs	r4, #1
    cb62:	f106 0940 	add.w	r9, r6, #64	; 0x40
    cb66:	f106 082c 	add.w	r8, r6, #44	; 0x2c
    cb6a:	1e63      	subs	r3, r4, #1
    cb6c:	2b04      	cmp	r3, #4
    cb6e:	d80d      	bhi.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cb70:	e8df f003 	tbb	[pc, r3]
    cb74:	2c35223e 	.word	0x2c35223e
    cb78:	03          	.byte	0x03
    cb79:	00          	.byte	0x00
    cb7a:	aa03      	add	r2, sp, #12
    cb7c:	4639      	mov	r1, r7
    cb7e:	4628      	mov	r0, r5
    cb80:	ed96 0a18 	vldr	s0, [r6, #96]	; 0x60
    cb84:	f003 f83a 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
    cb88:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb8c:	3401      	adds	r4, #1
    cb8e:	b2e4      	uxtb	r4, r4
    cb90:	42a2      	cmp	r2, r4
    cb92:	d2ea      	bcs.n	cb6a <bsec_SensorHeatCompensator_getConfiguration+0x2e>
    cb94:	9803      	ldr	r0, [sp, #12]
    cb96:	a904      	add	r1, sp, #16
    cb98:	2202      	movs	r2, #2
    cb9a:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cb9e:	a802      	add	r0, sp, #8
    cba0:	f027 ff3e 	bl	34a20 <memcpy>
    cba4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cba8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    cbac:	9803      	ldr	r0, [sp, #12]
    cbae:	702a      	strb	r2, [r5, #0]
    cbb0:	706b      	strb	r3, [r5, #1]
    cbb2:	b005      	add	sp, #20
    cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbb8:	463a      	mov	r2, r7
    cbba:	ab03      	add	r3, sp, #12
    cbbc:	4629      	mov	r1, r5
    cbbe:	f106 0018 	add.w	r0, r6, #24
    cbc2:	f003 fa11 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbca:	e7df      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbcc:	463a      	mov	r2, r7
    cbce:	ab03      	add	r3, sp, #12
    cbd0:	4629      	mov	r1, r5
    cbd2:	4648      	mov	r0, r9
    cbd4:	f003 fa08 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbdc:	e7d6      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbde:	463a      	mov	r2, r7
    cbe0:	ab03      	add	r3, sp, #12
    cbe2:	4629      	mov	r1, r5
    cbe4:	4640      	mov	r0, r8
    cbe6:	f003 f9ff 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbee:	e7cd      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbf0:	463a      	mov	r2, r7
    cbf2:	ab03      	add	r3, sp, #12
    cbf4:	4629      	mov	r1, r5
    cbf6:	1d30      	adds	r0, r6, #4
    cbf8:	f003 f9f6 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbfc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cc00:	e7c4      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cc02:	bf00      	nop

0000cc04 <bsec_SensorHeatCompensator_getState>:
    cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc08:	b086      	sub	sp, #24
    cc0a:	ad06      	add	r5, sp, #24
    cc0c:	2401      	movs	r4, #1
    cc0e:	f805 4d09 	strb.w	r4, [r5, #-9]!
    cc12:	4607      	mov	r7, r0
    cc14:	4690      	mov	r8, r2
    cc16:	7800      	ldrb	r0, [r0, #0]
    cc18:	462a      	mov	r2, r5
    cc1a:	460e      	mov	r6, r1
    cc1c:	f004 ff36 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cc20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc24:	9005      	str	r0, [sp, #20]
    cc26:	b1ab      	cbz	r3, cc54 <bsec_SensorHeatCompensator_getState+0x50>
    cc28:	ad05      	add	r5, sp, #20
    cc2a:	e003      	b.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc2c:	3401      	adds	r4, #1
    cc2e:	b2e4      	uxtb	r4, r4
    cc30:	42a3      	cmp	r3, r4
    cc32:	d30e      	bcc.n	cc52 <bsec_SensorHeatCompensator_getState+0x4e>
    cc34:	2c01      	cmp	r4, #1
    cc36:	d1f9      	bne.n	cc2c <bsec_SensorHeatCompensator_getState+0x28>
    cc38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
    cc3c:	4643      	mov	r3, r8
    cc3e:	9500      	str	r5, [sp, #0]
    cc40:	4632      	mov	r2, r6
    cc42:	f003 f84d 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
    cc46:	3401      	adds	r4, #1
    cc48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc4c:	b2e4      	uxtb	r4, r4
    cc4e:	42a3      	cmp	r3, r4
    cc50:	d2f0      	bcs.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc52:	9805      	ldr	r0, [sp, #20]
    cc54:	a906      	add	r1, sp, #24
    cc56:	2202      	movs	r2, #2
    cc58:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cc5c:	a804      	add	r0, sp, #16
    cc5e:	f027 fedf 	bl	34a20 <memcpy>
    cc62:	f89d 2010 	ldrb.w	r2, [sp, #16]
    cc66:	f89d 3011 	ldrb.w	r3, [sp, #17]
    cc6a:	9805      	ldr	r0, [sp, #20]
    cc6c:	7032      	strb	r2, [r6, #0]
    cc6e:	7073      	strb	r3, [r6, #1]
    cc70:	b006      	add	sp, #24
    cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc76:	bf00      	nop

0000cc78 <bsec_SensorHeatCompensator_setState>:
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	b086      	sub	sp, #24
    cc7c:	ab04      	add	r3, sp, #16
    cc7e:	ad05      	add	r5, sp, #20
    cc80:	4604      	mov	r4, r0
    cc82:	7800      	ldrb	r0, [r0, #0]
    cc84:	9300      	str	r3, [sp, #0]
    cc86:	9501      	str	r5, [sp, #4]
    cc88:	f10d 030f 	add.w	r3, sp, #15
    cc8c:	460e      	mov	r6, r1
    cc8e:	f004 fecf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    cc92:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cc96:	b938      	cbnz	r0, cca8 <bsec_SensorHeatCompensator_setState+0x30>
    cc98:	4629      	mov	r1, r5
    cc9a:	4630      	mov	r0, r6
    cc9c:	f003 f804 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
    cca0:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    cca4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cca8:	b006      	add	sp, #24
    ccaa:	bd70      	pop	{r4, r5, r6, pc}
    ccac:	0000      	movs	r0, r0
	...

0000ccb0 <bsec_rt_roundd>:
    ccb0:	b538      	push	{r3, r4, r5, lr}
    ccb2:	ec55 4b10 	vmov	r4, r5, d0
    ccb6:	f01f f807 	bl	2bcc8 <fabs>
    ccba:	2200      	movs	r2, #0
    ccbc:	4b1a      	ldr	r3, [pc, #104]	; (cd28 <bsec_rt_roundd+0x78>)
    ccbe:	ec51 0b10 	vmov	r0, r1, d0
    ccc2:	f000 fc65 	bl	d590 <__aeabi_dcmplt>
    ccc6:	b180      	cbz	r0, ccea <bsec_rt_roundd+0x3a>
    ccc8:	2200      	movs	r2, #0
    ccca:	4b18      	ldr	r3, [pc, #96]	; (cd2c <bsec_rt_roundd+0x7c>)
    cccc:	4620      	mov	r0, r4
    ccce:	4629      	mov	r1, r5
    ccd0:	f000 fc72 	bl	d5b8 <__aeabi_dcmpge>
    ccd4:	b960      	cbnz	r0, ccf0 <bsec_rt_roundd+0x40>
    ccd6:	2200      	movs	r2, #0
    ccd8:	4b15      	ldr	r3, [pc, #84]	; (cd30 <bsec_rt_roundd+0x80>)
    ccda:	4620      	mov	r0, r4
    ccdc:	4629      	mov	r1, r5
    ccde:	f000 fc75 	bl	d5cc <__aeabi_dcmpgt>
    cce2:	b188      	cbz	r0, cd08 <bsec_rt_roundd+0x58>
    cce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; cd20 <bsec_rt_roundd+0x70>
    cce8:	bd38      	pop	{r3, r4, r5, pc}
    ccea:	ec45 4b10 	vmov	d0, r4, r5
    ccee:	bd38      	pop	{r3, r4, r5, pc}
    ccf0:	4620      	mov	r0, r4
    ccf2:	4629      	mov	r1, r5
    ccf4:	4b0d      	ldr	r3, [pc, #52]	; (cd2c <bsec_rt_roundd+0x7c>)
    ccf6:	2200      	movs	r2, #0
    ccf8:	f000 f822 	bl	cd40 <__adddf3>
    ccfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd00:	ec41 0b10 	vmov	d0, r0, r1
    cd04:	f005 beec 	b.w	12ae0 <floor>
    cd08:	4620      	mov	r0, r4
    cd0a:	4629      	mov	r1, r5
    cd0c:	4b07      	ldr	r3, [pc, #28]	; (cd2c <bsec_rt_roundd+0x7c>)
    cd0e:	2200      	movs	r2, #0
    cd10:	f000 f814 	bl	cd3c <__aeabi_dsub>
    cd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd18:	ec41 0b10 	vmov	d0, r0, r1
    cd1c:	f005 be60 	b.w	129e0 <ceil>
	...
    cd28:	43300000 	.word	0x43300000
    cd2c:	3fe00000 	.word	0x3fe00000
    cd30:	bfe00000 	.word	0xbfe00000

0000cd34 <__aeabi_drsub>:
    cd34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cd38:	e002      	b.n	cd40 <__adddf3>
    cd3a:	bf00      	nop

0000cd3c <__aeabi_dsub>:
    cd3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cd40 <__adddf3>:
    cd40:	b530      	push	{r4, r5, lr}
    cd42:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cd46:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cd4a:	ea94 0f05 	teq	r4, r5
    cd4e:	bf08      	it	eq
    cd50:	ea90 0f02 	teqeq	r0, r2
    cd54:	bf1f      	itttt	ne
    cd56:	ea54 0c00 	orrsne.w	ip, r4, r0
    cd5a:	ea55 0c02 	orrsne.w	ip, r5, r2
    cd5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cd62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cd66:	f000 80e2 	beq.w	cf2e <__adddf3+0x1ee>
    cd6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cd6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cd72:	bfb8      	it	lt
    cd74:	426d      	neglt	r5, r5
    cd76:	dd0c      	ble.n	cd92 <__adddf3+0x52>
    cd78:	442c      	add	r4, r5
    cd7a:	ea80 0202 	eor.w	r2, r0, r2
    cd7e:	ea81 0303 	eor.w	r3, r1, r3
    cd82:	ea82 0000 	eor.w	r0, r2, r0
    cd86:	ea83 0101 	eor.w	r1, r3, r1
    cd8a:	ea80 0202 	eor.w	r2, r0, r2
    cd8e:	ea81 0303 	eor.w	r3, r1, r3
    cd92:	2d36      	cmp	r5, #54	; 0x36
    cd94:	bf88      	it	hi
    cd96:	bd30      	pophi	{r4, r5, pc}
    cd98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cd9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cda0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    cda4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    cda8:	d002      	beq.n	cdb0 <__adddf3+0x70>
    cdaa:	4240      	negs	r0, r0
    cdac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cdb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cdb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    cdbc:	d002      	beq.n	cdc4 <__adddf3+0x84>
    cdbe:	4252      	negs	r2, r2
    cdc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cdc4:	ea94 0f05 	teq	r4, r5
    cdc8:	f000 80a7 	beq.w	cf1a <__adddf3+0x1da>
    cdcc:	f1a4 0401 	sub.w	r4, r4, #1
    cdd0:	f1d5 0e20 	rsbs	lr, r5, #32
    cdd4:	db0d      	blt.n	cdf2 <__adddf3+0xb2>
    cdd6:	fa02 fc0e 	lsl.w	ip, r2, lr
    cdda:	fa22 f205 	lsr.w	r2, r2, r5
    cdde:	1880      	adds	r0, r0, r2
    cde0:	f141 0100 	adc.w	r1, r1, #0
    cde4:	fa03 f20e 	lsl.w	r2, r3, lr
    cde8:	1880      	adds	r0, r0, r2
    cdea:	fa43 f305 	asr.w	r3, r3, r5
    cdee:	4159      	adcs	r1, r3
    cdf0:	e00e      	b.n	ce10 <__adddf3+0xd0>
    cdf2:	f1a5 0520 	sub.w	r5, r5, #32
    cdf6:	f10e 0e20 	add.w	lr, lr, #32
    cdfa:	2a01      	cmp	r2, #1
    cdfc:	fa03 fc0e 	lsl.w	ip, r3, lr
    ce00:	bf28      	it	cs
    ce02:	f04c 0c02 	orrcs.w	ip, ip, #2
    ce06:	fa43 f305 	asr.w	r3, r3, r5
    ce0a:	18c0      	adds	r0, r0, r3
    ce0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ce10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ce14:	d507      	bpl.n	ce26 <__adddf3+0xe6>
    ce16:	f04f 0e00 	mov.w	lr, #0
    ce1a:	f1dc 0c00 	rsbs	ip, ip, #0
    ce1e:	eb7e 0000 	sbcs.w	r0, lr, r0
    ce22:	eb6e 0101 	sbc.w	r1, lr, r1
    ce26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ce2a:	d31b      	bcc.n	ce64 <__adddf3+0x124>
    ce2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ce30:	d30c      	bcc.n	ce4c <__adddf3+0x10c>
    ce32:	0849      	lsrs	r1, r1, #1
    ce34:	ea5f 0030 	movs.w	r0, r0, rrx
    ce38:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ce3c:	f104 0401 	add.w	r4, r4, #1
    ce40:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ce44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ce48:	f080 809a 	bcs.w	cf80 <__adddf3+0x240>
    ce4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ce50:	bf08      	it	eq
    ce52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ce56:	f150 0000 	adcs.w	r0, r0, #0
    ce5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ce5e:	ea41 0105 	orr.w	r1, r1, r5
    ce62:	bd30      	pop	{r4, r5, pc}
    ce64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ce68:	4140      	adcs	r0, r0
    ce6a:	eb41 0101 	adc.w	r1, r1, r1
    ce6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce72:	f1a4 0401 	sub.w	r4, r4, #1
    ce76:	d1e9      	bne.n	ce4c <__adddf3+0x10c>
    ce78:	f091 0f00 	teq	r1, #0
    ce7c:	bf04      	itt	eq
    ce7e:	4601      	moveq	r1, r0
    ce80:	2000      	moveq	r0, #0
    ce82:	fab1 f381 	clz	r3, r1
    ce86:	bf08      	it	eq
    ce88:	3320      	addeq	r3, #32
    ce8a:	f1a3 030b 	sub.w	r3, r3, #11
    ce8e:	f1b3 0220 	subs.w	r2, r3, #32
    ce92:	da0c      	bge.n	ceae <__adddf3+0x16e>
    ce94:	320c      	adds	r2, #12
    ce96:	dd08      	ble.n	ceaa <__adddf3+0x16a>
    ce98:	f102 0c14 	add.w	ip, r2, #20
    ce9c:	f1c2 020c 	rsb	r2, r2, #12
    cea0:	fa01 f00c 	lsl.w	r0, r1, ip
    cea4:	fa21 f102 	lsr.w	r1, r1, r2
    cea8:	e00c      	b.n	cec4 <__adddf3+0x184>
    ceaa:	f102 0214 	add.w	r2, r2, #20
    ceae:	bfd8      	it	le
    ceb0:	f1c2 0c20 	rsble	ip, r2, #32
    ceb4:	fa01 f102 	lsl.w	r1, r1, r2
    ceb8:	fa20 fc0c 	lsr.w	ip, r0, ip
    cebc:	bfdc      	itt	le
    cebe:	ea41 010c 	orrle.w	r1, r1, ip
    cec2:	4090      	lslle	r0, r2
    cec4:	1ae4      	subs	r4, r4, r3
    cec6:	bfa2      	ittt	ge
    cec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cecc:	4329      	orrge	r1, r5
    cece:	bd30      	popge	{r4, r5, pc}
    ced0:	ea6f 0404 	mvn.w	r4, r4
    ced4:	3c1f      	subs	r4, #31
    ced6:	da1c      	bge.n	cf12 <__adddf3+0x1d2>
    ced8:	340c      	adds	r4, #12
    ceda:	dc0e      	bgt.n	cefa <__adddf3+0x1ba>
    cedc:	f104 0414 	add.w	r4, r4, #20
    cee0:	f1c4 0220 	rsb	r2, r4, #32
    cee4:	fa20 f004 	lsr.w	r0, r0, r4
    cee8:	fa01 f302 	lsl.w	r3, r1, r2
    ceec:	ea40 0003 	orr.w	r0, r0, r3
    cef0:	fa21 f304 	lsr.w	r3, r1, r4
    cef4:	ea45 0103 	orr.w	r1, r5, r3
    cef8:	bd30      	pop	{r4, r5, pc}
    cefa:	f1c4 040c 	rsb	r4, r4, #12
    cefe:	f1c4 0220 	rsb	r2, r4, #32
    cf02:	fa20 f002 	lsr.w	r0, r0, r2
    cf06:	fa01 f304 	lsl.w	r3, r1, r4
    cf0a:	ea40 0003 	orr.w	r0, r0, r3
    cf0e:	4629      	mov	r1, r5
    cf10:	bd30      	pop	{r4, r5, pc}
    cf12:	fa21 f004 	lsr.w	r0, r1, r4
    cf16:	4629      	mov	r1, r5
    cf18:	bd30      	pop	{r4, r5, pc}
    cf1a:	f094 0f00 	teq	r4, #0
    cf1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cf22:	bf06      	itte	eq
    cf24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cf28:	3401      	addeq	r4, #1
    cf2a:	3d01      	subne	r5, #1
    cf2c:	e74e      	b.n	cdcc <__adddf3+0x8c>
    cf2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf32:	bf18      	it	ne
    cf34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cf38:	d029      	beq.n	cf8e <__adddf3+0x24e>
    cf3a:	ea94 0f05 	teq	r4, r5
    cf3e:	bf08      	it	eq
    cf40:	ea90 0f02 	teqeq	r0, r2
    cf44:	d005      	beq.n	cf52 <__adddf3+0x212>
    cf46:	ea54 0c00 	orrs.w	ip, r4, r0
    cf4a:	bf04      	itt	eq
    cf4c:	4619      	moveq	r1, r3
    cf4e:	4610      	moveq	r0, r2
    cf50:	bd30      	pop	{r4, r5, pc}
    cf52:	ea91 0f03 	teq	r1, r3
    cf56:	bf1e      	ittt	ne
    cf58:	2100      	movne	r1, #0
    cf5a:	2000      	movne	r0, #0
    cf5c:	bd30      	popne	{r4, r5, pc}
    cf5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cf62:	d105      	bne.n	cf70 <__adddf3+0x230>
    cf64:	0040      	lsls	r0, r0, #1
    cf66:	4149      	adcs	r1, r1
    cf68:	bf28      	it	cs
    cf6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cf6e:	bd30      	pop	{r4, r5, pc}
    cf70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cf74:	bf3c      	itt	cc
    cf76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    cf7a:	bd30      	popcc	{r4, r5, pc}
    cf7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cf80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cf84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cf88:	f04f 0000 	mov.w	r0, #0
    cf8c:	bd30      	pop	{r4, r5, pc}
    cf8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf92:	bf1a      	itte	ne
    cf94:	4619      	movne	r1, r3
    cf96:	4610      	movne	r0, r2
    cf98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cf9c:	bf1c      	itt	ne
    cf9e:	460b      	movne	r3, r1
    cfa0:	4602      	movne	r2, r0
    cfa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cfa6:	bf06      	itte	eq
    cfa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cfac:	ea91 0f03 	teqeq	r1, r3
    cfb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cfb4:	bd30      	pop	{r4, r5, pc}
    cfb6:	bf00      	nop

0000cfb8 <__aeabi_ui2d>:
    cfb8:	f090 0f00 	teq	r0, #0
    cfbc:	bf04      	itt	eq
    cfbe:	2100      	moveq	r1, #0
    cfc0:	4770      	bxeq	lr
    cfc2:	b530      	push	{r4, r5, lr}
    cfc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfcc:	f04f 0500 	mov.w	r5, #0
    cfd0:	f04f 0100 	mov.w	r1, #0
    cfd4:	e750      	b.n	ce78 <__adddf3+0x138>
    cfd6:	bf00      	nop

0000cfd8 <__aeabi_i2d>:
    cfd8:	f090 0f00 	teq	r0, #0
    cfdc:	bf04      	itt	eq
    cfde:	2100      	moveq	r1, #0
    cfe0:	4770      	bxeq	lr
    cfe2:	b530      	push	{r4, r5, lr}
    cfe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cff0:	bf48      	it	mi
    cff2:	4240      	negmi	r0, r0
    cff4:	f04f 0100 	mov.w	r1, #0
    cff8:	e73e      	b.n	ce78 <__adddf3+0x138>
    cffa:	bf00      	nop

0000cffc <__aeabi_f2d>:
    cffc:	0042      	lsls	r2, r0, #1
    cffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d002:	ea4f 0131 	mov.w	r1, r1, rrx
    d006:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d00a:	bf1f      	itttt	ne
    d00c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d018:	4770      	bxne	lr
    d01a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    d01e:	bf08      	it	eq
    d020:	4770      	bxeq	lr
    d022:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    d026:	bf04      	itt	eq
    d028:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    d02c:	4770      	bxeq	lr
    d02e:	b530      	push	{r4, r5, lr}
    d030:	f44f 7460 	mov.w	r4, #896	; 0x380
    d034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d03c:	e71c      	b.n	ce78 <__adddf3+0x138>
    d03e:	bf00      	nop

0000d040 <__aeabi_ul2d>:
    d040:	ea50 0201 	orrs.w	r2, r0, r1
    d044:	bf08      	it	eq
    d046:	4770      	bxeq	lr
    d048:	b530      	push	{r4, r5, lr}
    d04a:	f04f 0500 	mov.w	r5, #0
    d04e:	e00a      	b.n	d066 <__aeabi_l2d+0x16>

0000d050 <__aeabi_l2d>:
    d050:	ea50 0201 	orrs.w	r2, r0, r1
    d054:	bf08      	it	eq
    d056:	4770      	bxeq	lr
    d058:	b530      	push	{r4, r5, lr}
    d05a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d05e:	d502      	bpl.n	d066 <__aeabi_l2d+0x16>
    d060:	4240      	negs	r0, r0
    d062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d066:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d06a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d06e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d072:	f43f aed8 	beq.w	ce26 <__adddf3+0xe6>
    d076:	f04f 0203 	mov.w	r2, #3
    d07a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d07e:	bf18      	it	ne
    d080:	3203      	addne	r2, #3
    d082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d086:	bf18      	it	ne
    d088:	3203      	addne	r2, #3
    d08a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d08e:	f1c2 0320 	rsb	r3, r2, #32
    d092:	fa00 fc03 	lsl.w	ip, r0, r3
    d096:	fa20 f002 	lsr.w	r0, r0, r2
    d09a:	fa01 fe03 	lsl.w	lr, r1, r3
    d09e:	ea40 000e 	orr.w	r0, r0, lr
    d0a2:	fa21 f102 	lsr.w	r1, r1, r2
    d0a6:	4414      	add	r4, r2
    d0a8:	e6bd      	b.n	ce26 <__adddf3+0xe6>
    d0aa:	bf00      	nop

0000d0ac <__aeabi_dmul>:
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d0b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d0b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d0ba:	bf1d      	ittte	ne
    d0bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d0c0:	ea94 0f0c 	teqne	r4, ip
    d0c4:	ea95 0f0c 	teqne	r5, ip
    d0c8:	f000 f8de 	bleq	d288 <__aeabi_dmul+0x1dc>
    d0cc:	442c      	add	r4, r5
    d0ce:	ea81 0603 	eor.w	r6, r1, r3
    d0d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d0d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d0da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d0de:	bf18      	it	ne
    d0e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d0e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d0ec:	d038      	beq.n	d160 <__aeabi_dmul+0xb4>
    d0ee:	fba0 ce02 	umull	ip, lr, r0, r2
    d0f2:	f04f 0500 	mov.w	r5, #0
    d0f6:	fbe1 e502 	umlal	lr, r5, r1, r2
    d0fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d0fe:	fbe0 e503 	umlal	lr, r5, r0, r3
    d102:	f04f 0600 	mov.w	r6, #0
    d106:	fbe1 5603 	umlal	r5, r6, r1, r3
    d10a:	f09c 0f00 	teq	ip, #0
    d10e:	bf18      	it	ne
    d110:	f04e 0e01 	orrne.w	lr, lr, #1
    d114:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d118:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d11c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d120:	d204      	bcs.n	d12c <__aeabi_dmul+0x80>
    d122:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d126:	416d      	adcs	r5, r5
    d128:	eb46 0606 	adc.w	r6, r6, r6
    d12c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d130:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d134:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d138:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d13c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d140:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d144:	bf88      	it	hi
    d146:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d14a:	d81e      	bhi.n	d18a <__aeabi_dmul+0xde>
    d14c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d150:	bf08      	it	eq
    d152:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d156:	f150 0000 	adcs.w	r0, r0, #0
    d15a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    d160:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d164:	ea46 0101 	orr.w	r1, r6, r1
    d168:	ea40 0002 	orr.w	r0, r0, r2
    d16c:	ea81 0103 	eor.w	r1, r1, r3
    d170:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d174:	bfc2      	ittt	gt
    d176:	ebd4 050c 	rsbsgt	r5, r4, ip
    d17a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d17e:	bd70      	popgt	{r4, r5, r6, pc}
    d180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d184:	f04f 0e00 	mov.w	lr, #0
    d188:	3c01      	subs	r4, #1
    d18a:	f300 80ab 	bgt.w	d2e4 <__aeabi_dmul+0x238>
    d18e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d192:	bfde      	ittt	le
    d194:	2000      	movle	r0, #0
    d196:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d19a:	bd70      	pople	{r4, r5, r6, pc}
    d19c:	f1c4 0400 	rsb	r4, r4, #0
    d1a0:	3c20      	subs	r4, #32
    d1a2:	da35      	bge.n	d210 <__aeabi_dmul+0x164>
    d1a4:	340c      	adds	r4, #12
    d1a6:	dc1b      	bgt.n	d1e0 <__aeabi_dmul+0x134>
    d1a8:	f104 0414 	add.w	r4, r4, #20
    d1ac:	f1c4 0520 	rsb	r5, r4, #32
    d1b0:	fa00 f305 	lsl.w	r3, r0, r5
    d1b4:	fa20 f004 	lsr.w	r0, r0, r4
    d1b8:	fa01 f205 	lsl.w	r2, r1, r5
    d1bc:	ea40 0002 	orr.w	r0, r0, r2
    d1c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d1c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d1c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d1cc:	fa21 f604 	lsr.w	r6, r1, r4
    d1d0:	eb42 0106 	adc.w	r1, r2, r6
    d1d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d1d8:	bf08      	it	eq
    d1da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d1de:	bd70      	pop	{r4, r5, r6, pc}
    d1e0:	f1c4 040c 	rsb	r4, r4, #12
    d1e4:	f1c4 0520 	rsb	r5, r4, #32
    d1e8:	fa00 f304 	lsl.w	r3, r0, r4
    d1ec:	fa20 f005 	lsr.w	r0, r0, r5
    d1f0:	fa01 f204 	lsl.w	r2, r1, r4
    d1f4:	ea40 0002 	orr.w	r0, r0, r2
    d1f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d1fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d200:	f141 0100 	adc.w	r1, r1, #0
    d204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d208:	bf08      	it	eq
    d20a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d20e:	bd70      	pop	{r4, r5, r6, pc}
    d210:	f1c4 0520 	rsb	r5, r4, #32
    d214:	fa00 f205 	lsl.w	r2, r0, r5
    d218:	ea4e 0e02 	orr.w	lr, lr, r2
    d21c:	fa20 f304 	lsr.w	r3, r0, r4
    d220:	fa01 f205 	lsl.w	r2, r1, r5
    d224:	ea43 0302 	orr.w	r3, r3, r2
    d228:	fa21 f004 	lsr.w	r0, r1, r4
    d22c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d230:	fa21 f204 	lsr.w	r2, r1, r4
    d234:	ea20 0002 	bic.w	r0, r0, r2
    d238:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d23c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d240:	bf08      	it	eq
    d242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d246:	bd70      	pop	{r4, r5, r6, pc}
    d248:	f094 0f00 	teq	r4, #0
    d24c:	d10f      	bne.n	d26e <__aeabi_dmul+0x1c2>
    d24e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d252:	0040      	lsls	r0, r0, #1
    d254:	eb41 0101 	adc.w	r1, r1, r1
    d258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d25c:	bf08      	it	eq
    d25e:	3c01      	subeq	r4, #1
    d260:	d0f7      	beq.n	d252 <__aeabi_dmul+0x1a6>
    d262:	ea41 0106 	orr.w	r1, r1, r6
    d266:	f095 0f00 	teq	r5, #0
    d26a:	bf18      	it	ne
    d26c:	4770      	bxne	lr
    d26e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d272:	0052      	lsls	r2, r2, #1
    d274:	eb43 0303 	adc.w	r3, r3, r3
    d278:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d27c:	bf08      	it	eq
    d27e:	3d01      	subeq	r5, #1
    d280:	d0f7      	beq.n	d272 <__aeabi_dmul+0x1c6>
    d282:	ea43 0306 	orr.w	r3, r3, r6
    d286:	4770      	bx	lr
    d288:	ea94 0f0c 	teq	r4, ip
    d28c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d290:	bf18      	it	ne
    d292:	ea95 0f0c 	teqne	r5, ip
    d296:	d00c      	beq.n	d2b2 <__aeabi_dmul+0x206>
    d298:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d29c:	bf18      	it	ne
    d29e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2a2:	d1d1      	bne.n	d248 <__aeabi_dmul+0x19c>
    d2a4:	ea81 0103 	eor.w	r1, r1, r3
    d2a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2ac:	f04f 0000 	mov.w	r0, #0
    d2b0:	bd70      	pop	{r4, r5, r6, pc}
    d2b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d2b6:	bf06      	itte	eq
    d2b8:	4610      	moveq	r0, r2
    d2ba:	4619      	moveq	r1, r3
    d2bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2c0:	d019      	beq.n	d2f6 <__aeabi_dmul+0x24a>
    d2c2:	ea94 0f0c 	teq	r4, ip
    d2c6:	d102      	bne.n	d2ce <__aeabi_dmul+0x222>
    d2c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d2cc:	d113      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2ce:	ea95 0f0c 	teq	r5, ip
    d2d2:	d105      	bne.n	d2e0 <__aeabi_dmul+0x234>
    d2d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d2d8:	bf1c      	itt	ne
    d2da:	4610      	movne	r0, r2
    d2dc:	4619      	movne	r1, r3
    d2de:	d10a      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2e0:	ea81 0103 	eor.w	r1, r1, r3
    d2e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2f0:	f04f 0000 	mov.w	r0, #0
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
    d2f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d2fe:	bd70      	pop	{r4, r5, r6, pc}

0000d300 <__aeabi_ddiv>:
    d300:	b570      	push	{r4, r5, r6, lr}
    d302:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d30a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d30e:	bf1d      	ittte	ne
    d310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d314:	ea94 0f0c 	teqne	r4, ip
    d318:	ea95 0f0c 	teqne	r5, ip
    d31c:	f000 f8a7 	bleq	d46e <__aeabi_ddiv+0x16e>
    d320:	eba4 0405 	sub.w	r4, r4, r5
    d324:	ea81 0e03 	eor.w	lr, r1, r3
    d328:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d32c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d330:	f000 8088 	beq.w	d444 <__aeabi_ddiv+0x144>
    d334:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d338:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d33c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d340:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d344:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d348:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d34c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d350:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d354:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d358:	429d      	cmp	r5, r3
    d35a:	bf08      	it	eq
    d35c:	4296      	cmpeq	r6, r2
    d35e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d362:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d366:	d202      	bcs.n	d36e <__aeabi_ddiv+0x6e>
    d368:	085b      	lsrs	r3, r3, #1
    d36a:	ea4f 0232 	mov.w	r2, r2, rrx
    d36e:	1ab6      	subs	r6, r6, r2
    d370:	eb65 0503 	sbc.w	r5, r5, r3
    d374:	085b      	lsrs	r3, r3, #1
    d376:	ea4f 0232 	mov.w	r2, r2, rrx
    d37a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d37e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d382:	ebb6 0e02 	subs.w	lr, r6, r2
    d386:	eb75 0e03 	sbcs.w	lr, r5, r3
    d38a:	bf22      	ittt	cs
    d38c:	1ab6      	subcs	r6, r6, r2
    d38e:	4675      	movcs	r5, lr
    d390:	ea40 000c 	orrcs.w	r0, r0, ip
    d394:	085b      	lsrs	r3, r3, #1
    d396:	ea4f 0232 	mov.w	r2, r2, rrx
    d39a:	ebb6 0e02 	subs.w	lr, r6, r2
    d39e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3a2:	bf22      	ittt	cs
    d3a4:	1ab6      	subcs	r6, r6, r2
    d3a6:	4675      	movcs	r5, lr
    d3a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d3ac:	085b      	lsrs	r3, r3, #1
    d3ae:	ea4f 0232 	mov.w	r2, r2, rrx
    d3b2:	ebb6 0e02 	subs.w	lr, r6, r2
    d3b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3ba:	bf22      	ittt	cs
    d3bc:	1ab6      	subcs	r6, r6, r2
    d3be:	4675      	movcs	r5, lr
    d3c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d3c4:	085b      	lsrs	r3, r3, #1
    d3c6:	ea4f 0232 	mov.w	r2, r2, rrx
    d3ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3d2:	bf22      	ittt	cs
    d3d4:	1ab6      	subcs	r6, r6, r2
    d3d6:	4675      	movcs	r5, lr
    d3d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d3dc:	ea55 0e06 	orrs.w	lr, r5, r6
    d3e0:	d018      	beq.n	d414 <__aeabi_ddiv+0x114>
    d3e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d3e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d3ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d3ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d3f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d3f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d3fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d3fe:	d1c0      	bne.n	d382 <__aeabi_ddiv+0x82>
    d400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d404:	d10b      	bne.n	d41e <__aeabi_ddiv+0x11e>
    d406:	ea41 0100 	orr.w	r1, r1, r0
    d40a:	f04f 0000 	mov.w	r0, #0
    d40e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d412:	e7b6      	b.n	d382 <__aeabi_ddiv+0x82>
    d414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d418:	bf04      	itt	eq
    d41a:	4301      	orreq	r1, r0
    d41c:	2000      	moveq	r0, #0
    d41e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d422:	bf88      	it	hi
    d424:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d428:	f63f aeaf 	bhi.w	d18a <__aeabi_dmul+0xde>
    d42c:	ebb5 0c03 	subs.w	ip, r5, r3
    d430:	bf04      	itt	eq
    d432:	ebb6 0c02 	subseq.w	ip, r6, r2
    d436:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d43a:	f150 0000 	adcs.w	r0, r0, #0
    d43e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d442:	bd70      	pop	{r4, r5, r6, pc}
    d444:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d448:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d44c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d450:	bfc2      	ittt	gt
    d452:	ebd4 050c 	rsbsgt	r5, r4, ip
    d456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d45a:	bd70      	popgt	{r4, r5, r6, pc}
    d45c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d460:	f04f 0e00 	mov.w	lr, #0
    d464:	3c01      	subs	r4, #1
    d466:	e690      	b.n	d18a <__aeabi_dmul+0xde>
    d468:	ea45 0e06 	orr.w	lr, r5, r6
    d46c:	e68d      	b.n	d18a <__aeabi_dmul+0xde>
    d46e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d472:	ea94 0f0c 	teq	r4, ip
    d476:	bf08      	it	eq
    d478:	ea95 0f0c 	teqeq	r5, ip
    d47c:	f43f af3b 	beq.w	d2f6 <__aeabi_dmul+0x24a>
    d480:	ea94 0f0c 	teq	r4, ip
    d484:	d10a      	bne.n	d49c <__aeabi_ddiv+0x19c>
    d486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d48a:	f47f af34 	bne.w	d2f6 <__aeabi_dmul+0x24a>
    d48e:	ea95 0f0c 	teq	r5, ip
    d492:	f47f af25 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d496:	4610      	mov	r0, r2
    d498:	4619      	mov	r1, r3
    d49a:	e72c      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d49c:	ea95 0f0c 	teq	r5, ip
    d4a0:	d106      	bne.n	d4b0 <__aeabi_ddiv+0x1b0>
    d4a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d4a6:	f43f aefd 	beq.w	d2a4 <__aeabi_dmul+0x1f8>
    d4aa:	4610      	mov	r0, r2
    d4ac:	4619      	mov	r1, r3
    d4ae:	e722      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d4b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d4b4:	bf18      	it	ne
    d4b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d4ba:	f47f aec5 	bne.w	d248 <__aeabi_dmul+0x19c>
    d4be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d4c2:	f47f af0d 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d4c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d4ca:	f47f aeeb 	bne.w	d2a4 <__aeabi_dmul+0x1f8>
    d4ce:	e712      	b.n	d2f6 <__aeabi_dmul+0x24a>

0000d4d0 <__gedf2>:
    d4d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d4d4:	e006      	b.n	d4e4 <__cmpdf2+0x4>
    d4d6:	bf00      	nop

0000d4d8 <__ledf2>:
    d4d8:	f04f 0c01 	mov.w	ip, #1
    d4dc:	e002      	b.n	d4e4 <__cmpdf2+0x4>
    d4de:	bf00      	nop

0000d4e0 <__cmpdf2>:
    d4e0:	f04f 0c01 	mov.w	ip, #1
    d4e4:	f84d cd04 	str.w	ip, [sp, #-4]!
    d4e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d4ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d4f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d4f4:	bf18      	it	ne
    d4f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    d4fa:	d01b      	beq.n	d534 <__cmpdf2+0x54>
    d4fc:	b001      	add	sp, #4
    d4fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    d502:	bf0c      	ite	eq
    d504:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    d508:	ea91 0f03 	teqne	r1, r3
    d50c:	bf02      	ittt	eq
    d50e:	ea90 0f02 	teqeq	r0, r2
    d512:	2000      	moveq	r0, #0
    d514:	4770      	bxeq	lr
    d516:	f110 0f00 	cmn.w	r0, #0
    d51a:	ea91 0f03 	teq	r1, r3
    d51e:	bf58      	it	pl
    d520:	4299      	cmppl	r1, r3
    d522:	bf08      	it	eq
    d524:	4290      	cmpeq	r0, r2
    d526:	bf2c      	ite	cs
    d528:	17d8      	asrcs	r0, r3, #31
    d52a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d52e:	f040 0001 	orr.w	r0, r0, #1
    d532:	4770      	bx	lr
    d534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d53c:	d102      	bne.n	d544 <__cmpdf2+0x64>
    d53e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d542:	d107      	bne.n	d554 <__cmpdf2+0x74>
    d544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d54c:	d1d6      	bne.n	d4fc <__cmpdf2+0x1c>
    d54e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d552:	d0d3      	beq.n	d4fc <__cmpdf2+0x1c>
    d554:	f85d 0b04 	ldr.w	r0, [sp], #4
    d558:	4770      	bx	lr
    d55a:	bf00      	nop

0000d55c <__aeabi_cdrcmple>:
    d55c:	4684      	mov	ip, r0
    d55e:	4610      	mov	r0, r2
    d560:	4662      	mov	r2, ip
    d562:	468c      	mov	ip, r1
    d564:	4619      	mov	r1, r3
    d566:	4663      	mov	r3, ip
    d568:	e000      	b.n	d56c <__aeabi_cdcmpeq>
    d56a:	bf00      	nop

0000d56c <__aeabi_cdcmpeq>:
    d56c:	b501      	push	{r0, lr}
    d56e:	f7ff ffb7 	bl	d4e0 <__cmpdf2>
    d572:	2800      	cmp	r0, #0
    d574:	bf48      	it	mi
    d576:	f110 0f00 	cmnmi.w	r0, #0
    d57a:	bd01      	pop	{r0, pc}

0000d57c <__aeabi_dcmpeq>:
    d57c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d580:	f7ff fff4 	bl	d56c <__aeabi_cdcmpeq>
    d584:	bf0c      	ite	eq
    d586:	2001      	moveq	r0, #1
    d588:	2000      	movne	r0, #0
    d58a:	f85d fb08 	ldr.w	pc, [sp], #8
    d58e:	bf00      	nop

0000d590 <__aeabi_dcmplt>:
    d590:	f84d ed08 	str.w	lr, [sp, #-8]!
    d594:	f7ff ffea 	bl	d56c <__aeabi_cdcmpeq>
    d598:	bf34      	ite	cc
    d59a:	2001      	movcc	r0, #1
    d59c:	2000      	movcs	r0, #0
    d59e:	f85d fb08 	ldr.w	pc, [sp], #8
    d5a2:	bf00      	nop

0000d5a4 <__aeabi_dcmple>:
    d5a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5a8:	f7ff ffe0 	bl	d56c <__aeabi_cdcmpeq>
    d5ac:	bf94      	ite	ls
    d5ae:	2001      	movls	r0, #1
    d5b0:	2000      	movhi	r0, #0
    d5b2:	f85d fb08 	ldr.w	pc, [sp], #8
    d5b6:	bf00      	nop

0000d5b8 <__aeabi_dcmpge>:
    d5b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5bc:	f7ff ffce 	bl	d55c <__aeabi_cdrcmple>
    d5c0:	bf94      	ite	ls
    d5c2:	2001      	movls	r0, #1
    d5c4:	2000      	movhi	r0, #0
    d5c6:	f85d fb08 	ldr.w	pc, [sp], #8
    d5ca:	bf00      	nop

0000d5cc <__aeabi_dcmpgt>:
    d5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5d0:	f7ff ffc4 	bl	d55c <__aeabi_cdrcmple>
    d5d4:	bf34      	ite	cc
    d5d6:	2001      	movcc	r0, #1
    d5d8:	2000      	movcs	r0, #0
    d5da:	f85d fb08 	ldr.w	pc, [sp], #8
    d5de:	bf00      	nop

0000d5e0 <__aeabi_d2iz>:
    d5e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d5e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d5e8:	d215      	bcs.n	d616 <__aeabi_d2iz+0x36>
    d5ea:	d511      	bpl.n	d610 <__aeabi_d2iz+0x30>
    d5ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d5f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d5f4:	d912      	bls.n	d61c <__aeabi_d2iz+0x3c>
    d5f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d5fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d5fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d606:	fa23 f002 	lsr.w	r0, r3, r2
    d60a:	bf18      	it	ne
    d60c:	4240      	negne	r0, r0
    d60e:	4770      	bx	lr
    d610:	f04f 0000 	mov.w	r0, #0
    d614:	4770      	bx	lr
    d616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d61a:	d105      	bne.n	d628 <__aeabi_d2iz+0x48>
    d61c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d620:	bf08      	it	eq
    d622:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d626:	4770      	bx	lr
    d628:	f04f 0000 	mov.w	r0, #0
    d62c:	4770      	bx	lr
    d62e:	bf00      	nop

0000d630 <__aeabi_d2f>:
    d630:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    d638:	bf24      	itt	cs
    d63a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    d63e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    d642:	d90d      	bls.n	d660 <__aeabi_d2f+0x30>
    d644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d64c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    d650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    d658:	bf08      	it	eq
    d65a:	f020 0001 	biceq.w	r0, r0, #1
    d65e:	4770      	bx	lr
    d660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    d664:	d121      	bne.n	d6aa <__aeabi_d2f+0x7a>
    d666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    d66a:	bfbc      	itt	lt
    d66c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    d670:	4770      	bxlt	lr
    d672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d676:	ea4f 5252 	mov.w	r2, r2, lsr #21
    d67a:	f1c2 0218 	rsb	r2, r2, #24
    d67e:	f1c2 0c20 	rsb	ip, r2, #32
    d682:	fa10 f30c 	lsls.w	r3, r0, ip
    d686:	fa20 f002 	lsr.w	r0, r0, r2
    d68a:	bf18      	it	ne
    d68c:	f040 0001 	orrne.w	r0, r0, #1
    d690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    d698:	fa03 fc0c 	lsl.w	ip, r3, ip
    d69c:	ea40 000c 	orr.w	r0, r0, ip
    d6a0:	fa23 f302 	lsr.w	r3, r3, r2
    d6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d6a8:	e7cc      	b.n	d644 <__aeabi_d2f+0x14>
    d6aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    d6ae:	d107      	bne.n	d6c0 <__aeabi_d2f+0x90>
    d6b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    d6b4:	bf1e      	ittt	ne
    d6b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    d6ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    d6be:	4770      	bxne	lr
    d6c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    d6c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d6c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d6cc:	4770      	bx	lr
    d6ce:	bf00      	nop

0000d6d0 <__aeabi_ldivmod>:
    d6d0:	b97b      	cbnz	r3, d6f2 <__aeabi_ldivmod+0x22>
    d6d2:	b972      	cbnz	r2, d6f2 <__aeabi_ldivmod+0x22>
    d6d4:	2900      	cmp	r1, #0
    d6d6:	bfbe      	ittt	lt
    d6d8:	2000      	movlt	r0, #0
    d6da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    d6de:	e006      	blt.n	d6ee <__aeabi_ldivmod+0x1e>
    d6e0:	bf08      	it	eq
    d6e2:	2800      	cmpeq	r0, #0
    d6e4:	bf1c      	itt	ne
    d6e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    d6ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d6ee:	f000 b9bb 	b.w	da68 <__aeabi_idiv0>
    d6f2:	f1ad 0c08 	sub.w	ip, sp, #8
    d6f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d6fa:	2900      	cmp	r1, #0
    d6fc:	db09      	blt.n	d712 <__aeabi_ldivmod+0x42>
    d6fe:	2b00      	cmp	r3, #0
    d700:	db1a      	blt.n	d738 <__aeabi_ldivmod+0x68>
    d702:	f000 f84d 	bl	d7a0 <__udivmoddi4>
    d706:	f8dd e004 	ldr.w	lr, [sp, #4]
    d70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d70e:	b004      	add	sp, #16
    d710:	4770      	bx	lr
    d712:	4240      	negs	r0, r0
    d714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d718:	2b00      	cmp	r3, #0
    d71a:	db1b      	blt.n	d754 <__aeabi_ldivmod+0x84>
    d71c:	f000 f840 	bl	d7a0 <__udivmoddi4>
    d720:	f8dd e004 	ldr.w	lr, [sp, #4]
    d724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d728:	b004      	add	sp, #16
    d72a:	4240      	negs	r0, r0
    d72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d730:	4252      	negs	r2, r2
    d732:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d736:	4770      	bx	lr
    d738:	4252      	negs	r2, r2
    d73a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d73e:	f000 f82f 	bl	d7a0 <__udivmoddi4>
    d742:	f8dd e004 	ldr.w	lr, [sp, #4]
    d746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d74a:	b004      	add	sp, #16
    d74c:	4240      	negs	r0, r0
    d74e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d752:	4770      	bx	lr
    d754:	4252      	negs	r2, r2
    d756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d75a:	f000 f821 	bl	d7a0 <__udivmoddi4>
    d75e:	f8dd e004 	ldr.w	lr, [sp, #4]
    d762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d766:	b004      	add	sp, #16
    d768:	4252      	negs	r2, r2
    d76a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d76e:	4770      	bx	lr

0000d770 <__aeabi_uldivmod>:
    d770:	b953      	cbnz	r3, d788 <__aeabi_uldivmod+0x18>
    d772:	b94a      	cbnz	r2, d788 <__aeabi_uldivmod+0x18>
    d774:	2900      	cmp	r1, #0
    d776:	bf08      	it	eq
    d778:	2800      	cmpeq	r0, #0
    d77a:	bf1c      	itt	ne
    d77c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    d780:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d784:	f000 b970 	b.w	da68 <__aeabi_idiv0>
    d788:	f1ad 0c08 	sub.w	ip, sp, #8
    d78c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d790:	f000 f806 	bl	d7a0 <__udivmoddi4>
    d794:	f8dd e004 	ldr.w	lr, [sp, #4]
    d798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d79c:	b004      	add	sp, #16
    d79e:	4770      	bx	lr

0000d7a0 <__udivmoddi4>:
    d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7a6:	4604      	mov	r4, r0
    d7a8:	4689      	mov	r9, r1
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	f040 8083 	bne.w	d8b6 <__udivmoddi4+0x116>
    d7b0:	428a      	cmp	r2, r1
    d7b2:	4615      	mov	r5, r2
    d7b4:	d945      	bls.n	d842 <__udivmoddi4+0xa2>
    d7b6:	fab2 f282 	clz	r2, r2
    d7ba:	b14a      	cbz	r2, d7d0 <__udivmoddi4+0x30>
    d7bc:	f1c2 0720 	rsb	r7, r2, #32
    d7c0:	fa01 f302 	lsl.w	r3, r1, r2
    d7c4:	4095      	lsls	r5, r2
    d7c6:	4094      	lsls	r4, r2
    d7c8:	fa20 f707 	lsr.w	r7, r0, r7
    d7cc:	ea47 0903 	orr.w	r9, r7, r3
    d7d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d7d4:	0c23      	lsrs	r3, r4, #16
    d7d6:	fa1f f885 	uxth.w	r8, r5
    d7da:	fbb9 fcfe 	udiv	ip, r9, lr
    d7de:	fb0e 991c 	mls	r9, lr, ip, r9
    d7e2:	fb0c f108 	mul.w	r1, ip, r8
    d7e6:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    d7ea:	4299      	cmp	r1, r3
    d7ec:	d90a      	bls.n	d804 <__udivmoddi4+0x64>
    d7ee:	18eb      	adds	r3, r5, r3
    d7f0:	bf2c      	ite	cs
    d7f2:	2001      	movcs	r0, #1
    d7f4:	2000      	movcc	r0, #0
    d7f6:	4299      	cmp	r1, r3
    d7f8:	d902      	bls.n	d800 <__udivmoddi4+0x60>
    d7fa:	2800      	cmp	r0, #0
    d7fc:	f000 811d 	beq.w	da3a <__udivmoddi4+0x29a>
    d800:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d804:	1a59      	subs	r1, r3, r1
    d806:	b2a3      	uxth	r3, r4
    d808:	fbb1 f0fe 	udiv	r0, r1, lr
    d80c:	fb0e 1110 	mls	r1, lr, r0, r1
    d810:	fb00 f808 	mul.w	r8, r0, r8
    d814:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d818:	45a0      	cmp	r8, r4
    d81a:	d905      	bls.n	d828 <__udivmoddi4+0x88>
    d81c:	192c      	adds	r4, r5, r4
    d81e:	d202      	bcs.n	d826 <__udivmoddi4+0x86>
    d820:	45a0      	cmp	r8, r4
    d822:	f200 810e 	bhi.w	da42 <__udivmoddi4+0x2a2>
    d826:	3801      	subs	r0, #1
    d828:	eba4 0408 	sub.w	r4, r4, r8
    d82c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d830:	2700      	movs	r7, #0
    d832:	b11e      	cbz	r6, d83c <__udivmoddi4+0x9c>
    d834:	40d4      	lsrs	r4, r2
    d836:	2300      	movs	r3, #0
    d838:	e9c6 4300 	strd	r4, r3, [r6]
    d83c:	4639      	mov	r1, r7
    d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d842:	2a00      	cmp	r2, #0
    d844:	d051      	beq.n	d8ea <__udivmoddi4+0x14a>
    d846:	fab2 f282 	clz	r2, r2
    d84a:	2a00      	cmp	r2, #0
    d84c:	f040 80af 	bne.w	d9ae <__udivmoddi4+0x20e>
    d850:	1b49      	subs	r1, r1, r5
    d852:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d856:	fa1f f885 	uxth.w	r8, r5
    d85a:	2701      	movs	r7, #1
    d85c:	0c23      	lsrs	r3, r4, #16
    d85e:	fbb1 fcfe 	udiv	ip, r1, lr
    d862:	fb0e 111c 	mls	r1, lr, ip, r1
    d866:	fb08 f00c 	mul.w	r0, r8, ip
    d86a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d86e:	4298      	cmp	r0, r3
    d870:	d90a      	bls.n	d888 <__udivmoddi4+0xe8>
    d872:	18eb      	adds	r3, r5, r3
    d874:	bf2c      	ite	cs
    d876:	2101      	movcs	r1, #1
    d878:	2100      	movcc	r1, #0
    d87a:	4298      	cmp	r0, r3
    d87c:	d902      	bls.n	d884 <__udivmoddi4+0xe4>
    d87e:	2900      	cmp	r1, #0
    d880:	f000 80d7 	beq.w	da32 <__udivmoddi4+0x292>
    d884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d888:	1a19      	subs	r1, r3, r0
    d88a:	b2a3      	uxth	r3, r4
    d88c:	fbb1 f0fe 	udiv	r0, r1, lr
    d890:	fb0e 1110 	mls	r1, lr, r0, r1
    d894:	fb08 f800 	mul.w	r8, r8, r0
    d898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d89c:	45a0      	cmp	r8, r4
    d89e:	d905      	bls.n	d8ac <__udivmoddi4+0x10c>
    d8a0:	192c      	adds	r4, r5, r4
    d8a2:	d202      	bcs.n	d8aa <__udivmoddi4+0x10a>
    d8a4:	45a0      	cmp	r8, r4
    d8a6:	f200 80c1 	bhi.w	da2c <__udivmoddi4+0x28c>
    d8aa:	3801      	subs	r0, #1
    d8ac:	eba4 0408 	sub.w	r4, r4, r8
    d8b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d8b4:	e7bd      	b.n	d832 <__udivmoddi4+0x92>
    d8b6:	428b      	cmp	r3, r1
    d8b8:	d908      	bls.n	d8cc <__udivmoddi4+0x12c>
    d8ba:	2e00      	cmp	r6, #0
    d8bc:	d074      	beq.n	d9a8 <__udivmoddi4+0x208>
    d8be:	2700      	movs	r7, #0
    d8c0:	e9c6 0100 	strd	r0, r1, [r6]
    d8c4:	4638      	mov	r0, r7
    d8c6:	4639      	mov	r1, r7
    d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8cc:	fab3 f783 	clz	r7, r3
    d8d0:	b967      	cbnz	r7, d8ec <__udivmoddi4+0x14c>
    d8d2:	428b      	cmp	r3, r1
    d8d4:	f0c0 80a4 	bcc.w	da20 <__udivmoddi4+0x280>
    d8d8:	4282      	cmp	r2, r0
    d8da:	f240 80a1 	bls.w	da20 <__udivmoddi4+0x280>
    d8de:	4638      	mov	r0, r7
    d8e0:	2e00      	cmp	r6, #0
    d8e2:	d0ab      	beq.n	d83c <__udivmoddi4+0x9c>
    d8e4:	e9c6 4900 	strd	r4, r9, [r6]
    d8e8:	e7a8      	b.n	d83c <__udivmoddi4+0x9c>
    d8ea:	deff      	udf	#255	; 0xff
    d8ec:	f1c7 0520 	rsb	r5, r7, #32
    d8f0:	40bb      	lsls	r3, r7
    d8f2:	fa02 fc07 	lsl.w	ip, r2, r7
    d8f6:	fa01 f407 	lsl.w	r4, r1, r7
    d8fa:	40ea      	lsrs	r2, r5
    d8fc:	fa20 f805 	lsr.w	r8, r0, r5
    d900:	40e9      	lsrs	r1, r5
    d902:	fa00 fe07 	lsl.w	lr, r0, r7
    d906:	431a      	orrs	r2, r3
    d908:	ea48 0404 	orr.w	r4, r8, r4
    d90c:	ea4f 4812 	mov.w	r8, r2, lsr #16
    d910:	0c20      	lsrs	r0, r4, #16
    d912:	fa1f f982 	uxth.w	r9, r2
    d916:	fbb1 faf8 	udiv	sl, r1, r8
    d91a:	fb08 111a 	mls	r1, r8, sl, r1
    d91e:	fb0a fb09 	mul.w	fp, sl, r9
    d922:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    d926:	458b      	cmp	fp, r1
    d928:	d90a      	bls.n	d940 <__udivmoddi4+0x1a0>
    d92a:	1851      	adds	r1, r2, r1
    d92c:	bf2c      	ite	cs
    d92e:	2301      	movcs	r3, #1
    d930:	2300      	movcc	r3, #0
    d932:	458b      	cmp	fp, r1
    d934:	d902      	bls.n	d93c <__udivmoddi4+0x19c>
    d936:	2b00      	cmp	r3, #0
    d938:	f000 8088 	beq.w	da4c <__udivmoddi4+0x2ac>
    d93c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d940:	eba1 010b 	sub.w	r1, r1, fp
    d944:	b2a4      	uxth	r4, r4
    d946:	fbb1 f0f8 	udiv	r0, r1, r8
    d94a:	fb08 1110 	mls	r1, r8, r0, r1
    d94e:	fb00 f909 	mul.w	r9, r0, r9
    d952:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    d956:	4589      	cmp	r9, r1
    d958:	d904      	bls.n	d964 <__udivmoddi4+0x1c4>
    d95a:	1851      	adds	r1, r2, r1
    d95c:	d201      	bcs.n	d962 <__udivmoddi4+0x1c2>
    d95e:	4589      	cmp	r9, r1
    d960:	d87b      	bhi.n	da5a <__udivmoddi4+0x2ba>
    d962:	3801      	subs	r0, #1
    d964:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    d968:	eba1 0109 	sub.w	r1, r1, r9
    d96c:	fba0 890c 	umull	r8, r9, r0, ip
    d970:	4549      	cmp	r1, r9
    d972:	4644      	mov	r4, r8
    d974:	464b      	mov	r3, r9
    d976:	d302      	bcc.n	d97e <__udivmoddi4+0x1de>
    d978:	d106      	bne.n	d988 <__udivmoddi4+0x1e8>
    d97a:	45c6      	cmp	lr, r8
    d97c:	d204      	bcs.n	d988 <__udivmoddi4+0x1e8>
    d97e:	3801      	subs	r0, #1
    d980:	ebb8 040c 	subs.w	r4, r8, ip
    d984:	eb69 0302 	sbc.w	r3, r9, r2
    d988:	2e00      	cmp	r6, #0
    d98a:	d05d      	beq.n	da48 <__udivmoddi4+0x2a8>
    d98c:	ebbe 0204 	subs.w	r2, lr, r4
    d990:	eb61 0103 	sbc.w	r1, r1, r3
    d994:	fa01 f505 	lsl.w	r5, r1, r5
    d998:	fa22 f307 	lsr.w	r3, r2, r7
    d99c:	40f9      	lsrs	r1, r7
    d99e:	2700      	movs	r7, #0
    d9a0:	431d      	orrs	r5, r3
    d9a2:	e9c6 5100 	strd	r5, r1, [r6]
    d9a6:	e749      	b.n	d83c <__udivmoddi4+0x9c>
    d9a8:	4637      	mov	r7, r6
    d9aa:	4630      	mov	r0, r6
    d9ac:	e746      	b.n	d83c <__udivmoddi4+0x9c>
    d9ae:	f1c2 0020 	rsb	r0, r2, #32
    d9b2:	4095      	lsls	r5, r2
    d9b4:	fa01 f702 	lsl.w	r7, r1, r2
    d9b8:	fa21 f300 	lsr.w	r3, r1, r0
    d9bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d9c0:	fa24 f100 	lsr.w	r1, r4, r0
    d9c4:	fa1f f885 	uxth.w	r8, r5
    d9c8:	4094      	lsls	r4, r2
    d9ca:	4339      	orrs	r1, r7
    d9cc:	fbb3 f0fe 	udiv	r0, r3, lr
    d9d0:	0c0f      	lsrs	r7, r1, #16
    d9d2:	fb0e 3310 	mls	r3, lr, r0, r3
    d9d6:	fb00 fc08 	mul.w	ip, r0, r8
    d9da:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    d9de:	459c      	cmp	ip, r3
    d9e0:	d907      	bls.n	d9f2 <__udivmoddi4+0x252>
    d9e2:	18eb      	adds	r3, r5, r3
    d9e4:	bf2c      	ite	cs
    d9e6:	2701      	movcs	r7, #1
    d9e8:	2700      	movcc	r7, #0
    d9ea:	459c      	cmp	ip, r3
    d9ec:	d900      	bls.n	d9f0 <__udivmoddi4+0x250>
    d9ee:	b38f      	cbz	r7, da54 <__udivmoddi4+0x2b4>
    d9f0:	3801      	subs	r0, #1
    d9f2:	eba3 030c 	sub.w	r3, r3, ip
    d9f6:	b289      	uxth	r1, r1
    d9f8:	fbb3 f7fe 	udiv	r7, r3, lr
    d9fc:	fb0e 3317 	mls	r3, lr, r7, r3
    da00:	fb07 fc08 	mul.w	ip, r7, r8
    da04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    da08:	458c      	cmp	ip, r1
    da0a:	d904      	bls.n	da16 <__udivmoddi4+0x276>
    da0c:	1869      	adds	r1, r5, r1
    da0e:	d201      	bcs.n	da14 <__udivmoddi4+0x274>
    da10:	458c      	cmp	ip, r1
    da12:	d825      	bhi.n	da60 <__udivmoddi4+0x2c0>
    da14:	3f01      	subs	r7, #1
    da16:	eba1 010c 	sub.w	r1, r1, ip
    da1a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    da1e:	e71d      	b.n	d85c <__udivmoddi4+0xbc>
    da20:	1a84      	subs	r4, r0, r2
    da22:	eb61 0303 	sbc.w	r3, r1, r3
    da26:	2001      	movs	r0, #1
    da28:	4699      	mov	r9, r3
    da2a:	e759      	b.n	d8e0 <__udivmoddi4+0x140>
    da2c:	3802      	subs	r0, #2
    da2e:	442c      	add	r4, r5
    da30:	e73c      	b.n	d8ac <__udivmoddi4+0x10c>
    da32:	f1ac 0c02 	sub.w	ip, ip, #2
    da36:	442b      	add	r3, r5
    da38:	e726      	b.n	d888 <__udivmoddi4+0xe8>
    da3a:	f1ac 0c02 	sub.w	ip, ip, #2
    da3e:	442b      	add	r3, r5
    da40:	e6e0      	b.n	d804 <__udivmoddi4+0x64>
    da42:	3802      	subs	r0, #2
    da44:	442c      	add	r4, r5
    da46:	e6ef      	b.n	d828 <__udivmoddi4+0x88>
    da48:	4637      	mov	r7, r6
    da4a:	e6f7      	b.n	d83c <__udivmoddi4+0x9c>
    da4c:	f1aa 0a02 	sub.w	sl, sl, #2
    da50:	4411      	add	r1, r2
    da52:	e775      	b.n	d940 <__udivmoddi4+0x1a0>
    da54:	3802      	subs	r0, #2
    da56:	442b      	add	r3, r5
    da58:	e7cb      	b.n	d9f2 <__udivmoddi4+0x252>
    da5a:	3802      	subs	r0, #2
    da5c:	4411      	add	r1, r2
    da5e:	e781      	b.n	d964 <__udivmoddi4+0x1c4>
    da60:	3f02      	subs	r7, #2
    da62:	4429      	add	r1, r5
    da64:	e7d7      	b.n	da16 <__udivmoddi4+0x276>
    da66:	bf00      	nop

0000da68 <__aeabi_idiv0>:
    da68:	4770      	bx	lr
    da6a:	bf00      	nop

0000da6c <bsec_get_version>:
    da6c:	b508      	push	{r3, lr}
    da6e:	4601      	mov	r1, r0
    da70:	4802      	ldr	r0, [pc, #8]	; (da7c <bsec_get_version+0x10>)
    da72:	f000 fa7b 	bl	df6c <bsec_codegen_get_version>
    da76:	2000      	movs	r0, #0
    da78:	bd08      	pop	{r3, pc}
    da7a:	bf00      	nop
    da7c:	20020970 	.word	0x20020970

0000da80 <bsec_init>:
    da80:	b508      	push	{r3, lr}
    da82:	4802      	ldr	r0, [pc, #8]	; (da8c <bsec_init+0xc>)
    da84:	f000 fa7a 	bl	df7c <bsec_codegen_init>
    da88:	2000      	movs	r0, #0
    da8a:	bd08      	pop	{r3, pc}
    da8c:	20020970 	.word	0x20020970

0000da90 <bsec_reset_output>:
    da90:	4601      	mov	r1, r0
    da92:	4801      	ldr	r0, [pc, #4]	; (da98 <bsec_reset_output+0x8>)
    da94:	f000 ba74 	b.w	df80 <bsec_codegen_reset_output>
    da98:	20020970 	.word	0x20020970

0000da9c <bsec_update_subscription>:
    da9c:	b510      	push	{r4, lr}
    da9e:	b084      	sub	sp, #16
    daa0:	f10d 040f 	add.w	r4, sp, #15
    daa4:	e9cd 4200 	strd	r4, r2, [sp]
    daa8:	460a      	mov	r2, r1
    daaa:	4601      	mov	r1, r0
    daac:	4803      	ldr	r0, [pc, #12]	; (dabc <bsec_update_subscription+0x20>)
    daae:	f7fe fd83 	bl	c5b8 <bsec_codegen_update_subscription>
    dab2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dab6:	b004      	add	sp, #16
    dab8:	bd10      	pop	{r4, pc}
    daba:	bf00      	nop
    dabc:	20020970 	.word	0x20020970

0000dac0 <bsec_do_steps>:
    dac0:	b510      	push	{r4, lr}
    dac2:	b084      	sub	sp, #16
    dac4:	f10d 040f 	add.w	r4, sp, #15
    dac8:	e9cd 4200 	strd	r4, r2, [sp]
    dacc:	460a      	mov	r2, r1
    dace:	4601      	mov	r1, r0
    dad0:	4803      	ldr	r0, [pc, #12]	; (dae0 <bsec_do_steps+0x20>)
    dad2:	f000 f869 	bl	dba8 <bsec_codegen_do_steps>
    dad6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dada:	b004      	add	sp, #16
    dadc:	bd10      	pop	{r4, pc}
    dade:	bf00      	nop
    dae0:	20020970 	.word	0x20020970

0000dae4 <bsec_set_configuration>:
    dae4:	b500      	push	{lr}
    dae6:	b083      	sub	sp, #12
    dae8:	9300      	str	r3, [sp, #0]
    daea:	4613      	mov	r3, r2
    daec:	460a      	mov	r2, r1
    daee:	4601      	mov	r1, r0
    daf0:	4802      	ldr	r0, [pc, #8]	; (dafc <bsec_set_configuration+0x18>)
    daf2:	f000 fa5f 	bl	dfb4 <bsec_codegen_set_configuration>
    daf6:	b003      	add	sp, #12
    daf8:	f85d fb04 	ldr.w	pc, [sp], #4
    dafc:	20020970 	.word	0x20020970

0000db00 <bsec_set_state>:
    db00:	b500      	push	{lr}
    db02:	b083      	sub	sp, #12
    db04:	9300      	str	r3, [sp, #0]
    db06:	4613      	mov	r3, r2
    db08:	460a      	mov	r2, r1
    db0a:	4601      	mov	r1, r0
    db0c:	4802      	ldr	r0, [pc, #8]	; (db18 <bsec_set_state+0x18>)
    db0e:	f000 fa9f 	bl	e050 <bsec_codegen_set_state>
    db12:	b003      	add	sp, #12
    db14:	f85d fb04 	ldr.w	pc, [sp], #4
    db18:	20020970 	.word	0x20020970

0000db1c <bsec_get_configuration>:
    db1c:	b570      	push	{r4, r5, r6, lr}
    db1e:	b086      	sub	sp, #24
    db20:	f10d 0413 	add.w	r4, sp, #19
    db24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db26:	9300      	str	r3, [sp, #0]
    db28:	ad05      	add	r5, sp, #20
    db2a:	4613      	mov	r3, r2
    db2c:	9402      	str	r4, [sp, #8]
    db2e:	460a      	mov	r2, r1
    db30:	9601      	str	r6, [sp, #4]
    db32:	4601      	mov	r1, r0
    db34:	9503      	str	r5, [sp, #12]
    db36:	4805      	ldr	r0, [pc, #20]	; (db4c <bsec_get_configuration+0x30>)
    db38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db3a:	f000 f95d 	bl	ddf8 <bsec_codegen_get_configuration>
    db3e:	9b05      	ldr	r3, [sp, #20]
    db40:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db44:	6023      	str	r3, [r4, #0]
    db46:	b006      	add	sp, #24
    db48:	bd70      	pop	{r4, r5, r6, pc}
    db4a:	bf00      	nop
    db4c:	20020970 	.word	0x20020970

0000db50 <bsec_get_state>:
    db50:	b570      	push	{r4, r5, r6, lr}
    db52:	b086      	sub	sp, #24
    db54:	f10d 0413 	add.w	r4, sp, #19
    db58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db5a:	9300      	str	r3, [sp, #0]
    db5c:	ad05      	add	r5, sp, #20
    db5e:	4613      	mov	r3, r2
    db60:	9402      	str	r4, [sp, #8]
    db62:	460a      	mov	r2, r1
    db64:	9601      	str	r6, [sp, #4]
    db66:	4601      	mov	r1, r0
    db68:	9503      	str	r5, [sp, #12]
    db6a:	4805      	ldr	r0, [pc, #20]	; (db80 <bsec_get_state+0x30>)
    db6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db6e:	f000 f9a1 	bl	deb4 <bsec_codegen_get_state>
    db72:	9b05      	ldr	r3, [sp, #20]
    db74:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db78:	6023      	str	r3, [r4, #0]
    db7a:	b006      	add	sp, #24
    db7c:	bd70      	pop	{r4, r5, r6, pc}
    db7e:	bf00      	nop
    db80:	20020970 	.word	0x20020970

0000db84 <bsec_sensor_control>:
    db84:	b500      	push	{lr}
    db86:	b085      	sub	sp, #20
    db88:	f10d 030f 	add.w	r3, sp, #15
    db8c:	e9cd 3200 	strd	r3, r2, [sp]
    db90:	4602      	mov	r2, r0
    db92:	460b      	mov	r3, r1
    db94:	4803      	ldr	r0, [pc, #12]	; (dba4 <bsec_sensor_control+0x20>)
    db96:	f7fe fb53 	bl	c240 <bsec_codegen_sensor_control>
    db9a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    db9e:	b005      	add	sp, #20
    dba0:	f85d fb04 	ldr.w	pc, [sp], #4
    dba4:	20020970 	.word	0x20020970

0000dba8 <bsec_codegen_do_steps>:
    dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbac:	b089      	sub	sp, #36	; 0x24
    dbae:	461e      	mov	r6, r3
    dbb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dbb2:	f04f 0c00 	mov.w	ip, #0
    dbb6:	f883 c000 	strb.w	ip, [r3]
    dbba:	7835      	ldrb	r5, [r6, #0]
    dbbc:	4604      	mov	r4, r0
    dbbe:	460b      	mov	r3, r1
    dbc0:	b1dd      	cbz	r5, dbfa <bsec_codegen_do_steps+0x52>
    dbc2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    dbc6:	f04f 0800 	mov.w	r8, #0
    dbca:	2701      	movs	r7, #1
    dbcc:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
    dbd0:	2000      	movs	r0, #0
    dbd2:	2100      	movs	r1, #0
    dbd4:	eb07 050e 	add.w	r5, r7, lr
    dbd8:	eb09 1505 	add.w	r5, r9, r5, lsl #4
    dbdc:	e9c5 0100 	strd	r0, r1, [r5]
    dbe0:	f885 c00d 	strb.w	ip, [r5, #13]
    dbe4:	f8c5 8008 	str.w	r8, [r5, #8]
    dbe8:	f885 c00c 	strb.w	ip, [r5, #12]
    dbec:	f885 c00e 	strb.w	ip, [r5, #14]
    dbf0:	3701      	adds	r7, #1
    dbf2:	7835      	ldrb	r5, [r6, #0]
    dbf4:	b2ff      	uxtb	r7, r7
    dbf6:	42bd      	cmp	r5, r7
    dbf8:	d2ec      	bcs.n	dbd4 <bsec_codegen_do_steps+0x2c>
    dbfa:	2a00      	cmp	r2, #0
    dbfc:	d075      	beq.n	dcea <bsec_codegen_do_steps+0x142>
    dbfe:	7b59      	ldrb	r1, [r3, #13]
    dc00:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    dc04:	fa5f f58a 	uxtb.w	r5, sl
    dc08:	2d17      	cmp	r5, #23
    dc0a:	f200 809f 	bhi.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc0e:	4f76      	ldr	r7, [pc, #472]	; (dde8 <bsec_codegen_do_steps+0x240>)
    dc10:	fa47 f005 	asr.w	r0, r7, r5
    dc14:	07c0      	lsls	r0, r0, #31
    dc16:	f140 8099 	bpl.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc1a:	f04f 0a01 	mov.w	sl, #1
    dc1e:	4650      	mov	r0, sl
    dc20:	46bc      	mov	ip, r7
    dc22:	fa0a fa05 	lsl.w	sl, sl, r5
    dc26:	4686      	mov	lr, r0
    dc28:	4689      	mov	r9, r1
    dc2a:	461d      	mov	r5, r3
    dc2c:	2700      	movs	r7, #0
    dc2e:	9103      	str	r1, [sp, #12]
    dc30:	e013      	b.n	dc5a <bsec_codegen_do_steps+0xb2>
    dc32:	f895 900d 	ldrb.w	r9, [r5, #13]
    dc36:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
    dc3a:	fa5f f888 	uxtb.w	r8, r8
    dc3e:	f1b8 0f17 	cmp.w	r8, #23
    dc42:	fa4c fb08 	asr.w	fp, ip, r8
    dc46:	fa0e fa08 	lsl.w	sl, lr, r8
    dc4a:	d87f      	bhi.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc4c:	f01b 0f01 	tst.w	fp, #1
    dc50:	d07c      	beq.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc52:	ea1a 0f07 	tst.w	sl, r7
    dc56:	f040 80b6 	bne.w	ddc6 <bsec_codegen_do_steps+0x21e>
    dc5a:	4964      	ldr	r1, [pc, #400]	; (ddec <bsec_codegen_do_steps+0x244>)
    dc5c:	edd5 7a02 	vldr	s15, [r5, #8]
    dc60:	4489      	add	r9, r1
    dc62:	3001      	adds	r0, #1
    dc64:	f819 8c01 	ldrb.w	r8, [r9, #-1]
    dc68:	eb04 0b88 	add.w	fp, r4, r8, lsl #2
    dc6c:	ed9b 7ac1 	vldr	s14, [fp, #772]	; 0x304
    dc70:	b2c0      	uxtb	r0, r0
    dc72:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc76:	f108 092e 	add.w	r9, r8, #46	; 0x2e
    dc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc7e:	f100 5880 	add.w	r8, r0, #268435456	; 0x10000000
    dc82:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    dc86:	ea47 070a 	orr.w	r7, r7, sl
    dc8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    dc8e:	f100 8094 	bmi.w	ddba <bsec_codegen_do_steps+0x212>
    dc92:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
    dc96:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc9e:	f300 808c 	bgt.w	ddba <bsec_codegen_do_steps+0x212>
    dca2:	e9d5 ab00 	ldrd	sl, fp, [r5]
    dca6:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    dcaa:	e9d9 8900 	ldrd	r8, r9, [r9]
    dcae:	45cb      	cmp	fp, r9
    dcb0:	bf08      	it	eq
    dcb2:	45c2      	cmpeq	sl, r8
    dcb4:	d104      	bne.n	dcc0 <bsec_codegen_do_steps+0x118>
    dcb6:	9912      	ldr	r1, [sp, #72]	; 0x48
    dcb8:	f04f 0804 	mov.w	r8, #4
    dcbc:	f881 8000 	strb.w	r8, [r1]
    dcc0:	4282      	cmp	r2, r0
    dcc2:	d2b6      	bcs.n	dc32 <bsec_codegen_do_steps+0x8a>
    dcc4:	3a01      	subs	r2, #1
    dcc6:	b2d2      	uxtb	r2, r2
    dcc8:	f103 0710 	add.w	r7, r3, #16
    dccc:	9903      	ldr	r1, [sp, #12]
    dcce:	461d      	mov	r5, r3
    dcd0:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    dcd4:	e000      	b.n	dcd8 <bsec_codegen_do_steps+0x130>
    dcd6:	7b69      	ldrb	r1, [r5, #13]
    dcd8:	ed95 0a02 	vldr	s0, [r5, #8]
    dcdc:	e8f5 2304 	ldrd	r2, r3, [r5], #16
    dce0:	4620      	mov	r0, r4
    dce2:	f001 fd9d 	bl	f820 <bsec_ChannelHub_setInput>
    dce6:	42bd      	cmp	r5, r7
    dce8:	d1f5      	bne.n	dcd6 <bsec_codegen_do_steps+0x12e>
    dcea:	4620      	mov	r0, r4
    dcec:	f001 f8a2 	bl	ee34 <bsec_ChannelHub_do>
    dcf0:	f896 9000 	ldrb.w	r9, [r6]
    dcf4:	f1b9 0f00 	cmp.w	r9, #0
    dcf8:	d06b      	beq.n	ddd2 <bsec_codegen_do_steps+0x22a>
    dcfa:	2300      	movs	r3, #0
    dcfc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ddf0 <bsec_codegen_do_steps+0x248>
    dd00:	f8df b0f0 	ldr.w	fp, [pc, #240]	; ddf4 <bsec_codegen_do_steps+0x24c>
    dd04:	4699      	mov	r9, r3
    dd06:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd0a:	fa48 f203 	asr.w	r2, r8, r3
    dd0e:	1c5d      	adds	r5, r3, #1
    dd10:	07d2      	lsls	r2, r2, #31
    dd12:	b2ef      	uxtb	r7, r5
    dd14:	d50c      	bpl.n	dd30 <bsec_codegen_do_steps+0x188>
    dd16:	f813 300b 	ldrb.w	r3, [r3, fp]
    dd1a:	f203 135b 	addw	r3, r3, #347	; 0x15b
    dd1e:	4639      	mov	r1, r7
    dd20:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    dd24:	4553      	cmp	r3, sl
    dd26:	4620      	mov	r0, r4
    dd28:	d002      	beq.n	dd30 <bsec_codegen_do_steps+0x188>
    dd2a:	f001 fc9d 	bl	f668 <bsec_ChannelHub_isOutputValid>
    dd2e:	b9b8      	cbnz	r0, dd60 <bsec_codegen_do_steps+0x1b8>
    dd30:	2d15      	cmp	r5, #21
    dd32:	462b      	mov	r3, r5
    dd34:	d1e9      	bne.n	dd0a <bsec_codegen_do_steps+0x162>
    dd36:	2300      	movs	r3, #0
    dd38:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd3c:	4620      	mov	r0, r4
    dd3e:	f000 fa77 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd42:	f886 9000 	strb.w	r9, [r6]
    dd46:	b009      	add	sp, #36	; 0x24
    dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd4e:	23ff      	movs	r3, #255	; 0xff
    dd50:	7013      	strb	r3, [r2, #0]
    dd52:	f04f 0900 	mov.w	r9, #0
    dd56:	f886 9000 	strb.w	r9, [r6]
    dd5a:	b009      	add	sp, #36	; 0x24
    dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd60:	f10d 0313 	add.w	r3, sp, #19
    dd64:	9300      	str	r3, [sp, #0]
    dd66:	aa05      	add	r2, sp, #20
    dd68:	ab06      	add	r3, sp, #24
    dd6a:	4639      	mov	r1, r7
    dd6c:	4620      	mov	r0, r4
    dd6e:	f001 fc57 	bl	f620 <bsec_ChannelHub_getOutput>
    dd72:	7833      	ldrb	r3, [r6, #0]
    dd74:	454b      	cmp	r3, r9
    dd76:	f109 0201 	add.w	r2, r9, #1
    dd7a:	d809      	bhi.n	dd90 <bsec_codegen_do_steps+0x1e8>
    dd7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd7e:	2303      	movs	r3, #3
    dd80:	7013      	strb	r3, [r2, #0]
    dd82:	2300      	movs	r3, #0
    dd84:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd88:	4620      	mov	r0, r4
    dd8a:	f000 fa51 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd8e:	e7d8      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dd90:	fa5f f982 	uxtb.w	r9, r2
    dd94:	9813      	ldr	r0, [sp, #76]	; 0x4c
    dd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dd9a:	f109 5180 	add.w	r1, r9, #268435456	; 0x10000000
    dd9e:	3901      	subs	r1, #1
    dda0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    dda4:	e9c1 2300 	strd	r2, r3, [r1]
    dda8:	9805      	ldr	r0, [sp, #20]
    ddaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ddae:	734f      	strb	r7, [r1, #13]
    ddb0:	2201      	movs	r2, #1
    ddb2:	6088      	str	r0, [r1, #8]
    ddb4:	730a      	strb	r2, [r1, #12]
    ddb6:	738b      	strb	r3, [r1, #14]
    ddb8:	e7ba      	b.n	dd30 <bsec_codegen_do_steps+0x188>
    ddba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddbc:	23fe      	movs	r3, #254	; 0xfe
    ddbe:	7013      	strb	r3, [r2, #0]
    ddc0:	f04f 0900 	mov.w	r9, #0
    ddc4:	e7c7      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddc8:	23fa      	movs	r3, #250	; 0xfa
    ddca:	7013      	strb	r3, [r2, #0]
    ddcc:	f04f 0900 	mov.w	r9, #0
    ddd0:	e7c1      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddd4:	2302      	movs	r3, #2
    ddd6:	7013      	strb	r3, [r2, #0]
    ddd8:	2300      	movs	r3, #0
    ddda:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    ddde:	4620      	mov	r0, r4
    dde0:	f000 fa26 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dde4:	e7ad      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dde6:	bf00      	nop
    dde8:	00e0200f 	.word	0x00e0200f
    ddec:	00036450 	.word	0x00036450
    ddf0:	001279ef 	.word	0x001279ef
    ddf4:	00036438 	.word	0x00036438

0000ddf8 <bsec_codegen_get_configuration>:
    ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddfc:	b085      	sub	sp, #20
    ddfe:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    de02:	24df      	movs	r4, #223	; 0xdf
    de04:	702c      	strb	r4, [r5, #0]
    de06:	2600      	movs	r6, #0
    de08:	2410      	movs	r4, #16
    de0a:	2b17      	cmp	r3, #23
    de0c:	603e      	str	r6, [r7, #0]
    de0e:	9403      	str	r4, [sp, #12]
    de10:	d928      	bls.n	de64 <bsec_codegen_get_configuration+0x6c>
    de12:	bb39      	cbnz	r1, de64 <bsec_codegen_get_configuration+0x6c>
    de14:	461e      	mov	r6, r3
    de16:	4691      	mov	r9, r2
    de18:	4680      	mov	r8, r0
    de1a:	460b      	mov	r3, r1
    de1c:	7029      	strb	r1, [r5, #0]
    de1e:	468b      	mov	fp, r1
    de20:	f240 3a17 	movw	sl, #791	; 0x317
    de24:	e002      	b.n	de2c <bsec_codegen_get_configuration+0x34>
    de26:	2c0a      	cmp	r4, #10
    de28:	4623      	mov	r3, r4
    de2a:	d01e      	beq.n	de6a <bsec_codegen_get_configuration+0x72>
    de2c:	1c5c      	adds	r4, r3, #1
    de2e:	fa4a f303 	asr.w	r3, sl, r3
    de32:	07db      	lsls	r3, r3, #31
    de34:	b2e1      	uxtb	r1, r4
    de36:	d5f6      	bpl.n	de26 <bsec_codegen_get_configuration+0x2e>
    de38:	f8cd b000 	str.w	fp, [sp]
    de3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    de40:	4640      	mov	r0, r8
    de42:	f001 fb15 	bl	f470 <bsec_ChannelHub_getChannelConfiguration>
    de46:	2800      	cmp	r0, #0
    de48:	d0ed      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de4c:	9301      	str	r3, [sp, #4]
    de4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de50:	9300      	str	r3, [sp, #0]
    de52:	aa03      	add	r2, sp, #12
    de54:	4603      	mov	r3, r0
    de56:	4631      	mov	r1, r6
    de58:	4648      	mov	r0, r9
    de5a:	f000 f9c5 	bl	e1e8 <bsec_Bsec_append>
    de5e:	7028      	strb	r0, [r5, #0]
    de60:	2800      	cmp	r0, #0
    de62:	d0e0      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de64:	b005      	add	sp, #20
    de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de6a:	f995 3000 	ldrsb.w	r3, [r5]
    de6e:	2b00      	cmp	r3, #0
    de70:	d1f8      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de72:	4640      	mov	r0, r8
    de74:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    de78:	f000 fb44 	bl	e504 <bsec_Bsec_getHyperConfiguration>
    de7c:	b968      	cbnz	r0, de9a <bsec_codegen_get_configuration+0xa2>
    de7e:	f995 4000 	ldrsb.w	r4, [r5]
    de82:	2c00      	cmp	r4, #0
    de84:	d1ee      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de86:	9b03      	ldr	r3, [sp, #12]
    de88:	603b      	str	r3, [r7, #0]
    de8a:	4648      	mov	r0, r9
    de8c:	4639      	mov	r1, r7
    de8e:	f000 fae3 	bl	e458 <bsec_Bsec_frameSerializedData>
    de92:	702c      	strb	r4, [r5, #0]
    de94:	b005      	add	sp, #20
    de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de9c:	9301      	str	r3, [sp, #4]
    de9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dea0:	9300      	str	r3, [sp, #0]
    dea2:	4631      	mov	r1, r6
    dea4:	4603      	mov	r3, r0
    dea6:	aa03      	add	r2, sp, #12
    dea8:	4648      	mov	r0, r9
    deaa:	f000 f99d 	bl	e1e8 <bsec_Bsec_append>
    deae:	4604      	mov	r4, r0
    deb0:	7028      	strb	r0, [r5, #0]
    deb2:	e7e6      	b.n	de82 <bsec_codegen_get_configuration+0x8a>

0000deb4 <bsec_codegen_get_state>:
    deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    deb8:	b085      	sub	sp, #20
    deba:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    debe:	24df      	movs	r4, #223	; 0xdf
    dec0:	702c      	strb	r4, [r5, #0]
    dec2:	2600      	movs	r6, #0
    dec4:	2410      	movs	r4, #16
    dec6:	2b18      	cmp	r3, #24
    dec8:	603e      	str	r6, [r7, #0]
    deca:	9403      	str	r4, [sp, #12]
    decc:	d928      	bls.n	df20 <bsec_codegen_get_state+0x6c>
    dece:	bb39      	cbnz	r1, df20 <bsec_codegen_get_state+0x6c>
    ded0:	461e      	mov	r6, r3
    ded2:	4691      	mov	r9, r2
    ded4:	4680      	mov	r8, r0
    ded6:	460b      	mov	r3, r1
    ded8:	7029      	strb	r1, [r5, #0]
    deda:	468b      	mov	fp, r1
    dedc:	f240 3a17 	movw	sl, #791	; 0x317
    dee0:	e002      	b.n	dee8 <bsec_codegen_get_state+0x34>
    dee2:	2c0a      	cmp	r4, #10
    dee4:	4623      	mov	r3, r4
    dee6:	d01e      	beq.n	df26 <bsec_codegen_get_state+0x72>
    dee8:	1c5c      	adds	r4, r3, #1
    deea:	fa4a f303 	asr.w	r3, sl, r3
    deee:	07db      	lsls	r3, r3, #31
    def0:	b2e1      	uxtb	r1, r4
    def2:	d5f6      	bpl.n	dee2 <bsec_codegen_get_state+0x2e>
    def4:	f8cd b000 	str.w	fp, [sp]
    def8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    defc:	4640      	mov	r0, r8
    defe:	f001 fb23 	bl	f548 <bsec_ChannelHub_getChannelState>
    df02:	2800      	cmp	r0, #0
    df04:	d0ed      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df08:	9301      	str	r3, [sp, #4]
    df0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df0c:	9300      	str	r3, [sp, #0]
    df0e:	aa03      	add	r2, sp, #12
    df10:	4603      	mov	r3, r0
    df12:	4631      	mov	r1, r6
    df14:	4648      	mov	r0, r9
    df16:	f000 f967 	bl	e1e8 <bsec_Bsec_append>
    df1a:	7028      	strb	r0, [r5, #0]
    df1c:	2800      	cmp	r0, #0
    df1e:	d0e0      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df20:	b005      	add	sp, #20
    df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df26:	f995 3000 	ldrsb.w	r3, [r5]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d1f8      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df2e:	f000 fb63 	bl	e5f8 <bsec_Bsec_getHyperState>
    df32:	b968      	cbnz	r0, df50 <bsec_codegen_get_state+0x9c>
    df34:	f995 4000 	ldrsb.w	r4, [r5]
    df38:	2c00      	cmp	r4, #0
    df3a:	d1f1      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df3c:	9b03      	ldr	r3, [sp, #12]
    df3e:	603b      	str	r3, [r7, #0]
    df40:	4648      	mov	r0, r9
    df42:	4639      	mov	r1, r7
    df44:	f000 fa88 	bl	e458 <bsec_Bsec_frameSerializedData>
    df48:	702c      	strb	r4, [r5, #0]
    df4a:	b005      	add	sp, #20
    df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df52:	9301      	str	r3, [sp, #4]
    df54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df56:	9300      	str	r3, [sp, #0]
    df58:	4631      	mov	r1, r6
    df5a:	4603      	mov	r3, r0
    df5c:	aa03      	add	r2, sp, #12
    df5e:	4648      	mov	r0, r9
    df60:	f000 f942 	bl	e1e8 <bsec_Bsec_append>
    df64:	4604      	mov	r4, r0
    df66:	7028      	strb	r0, [r5, #0]
    df68:	e7e6      	b.n	df38 <bsec_codegen_get_state+0x84>
    df6a:	bf00      	nop

0000df6c <bsec_codegen_get_version>:
    df6c:	2304      	movs	r3, #4
    df6e:	2001      	movs	r0, #1
    df70:	2207      	movs	r2, #7
    df72:	7008      	strb	r0, [r1, #0]
    df74:	708a      	strb	r2, [r1, #2]
    df76:	704b      	strb	r3, [r1, #1]
    df78:	70cb      	strb	r3, [r1, #3]
    df7a:	4770      	bx	lr

0000df7c <bsec_codegen_init>:
    df7c:	f000 b8b8 	b.w	e0f0 <bsec_constructor_bsec>

0000df80 <bsec_codegen_reset_output>:
    df80:	3901      	subs	r1, #1
    df82:	2903      	cmp	r1, #3
    df84:	d901      	bls.n	df8a <bsec_codegen_reset_output+0xa>
    df86:	2000      	movs	r0, #0
    df88:	4770      	bx	lr
    df8a:	b510      	push	{r4, lr}
    df8c:	4604      	mov	r4, r0
    df8e:	3068      	adds	r0, #104	; 0x68
    df90:	f002 fd90 	bl	10ab4 <bsec_GasHumidityBaselineTracker_setState>
    df94:	4620      	mov	r0, r4
    df96:	2101      	movs	r1, #1
    df98:	f001 fce6 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    df9c:	4b04      	ldr	r3, [pc, #16]	; (dfb0 <bsec_codegen_reset_output+0x30>)
    df9e:	6623      	str	r3, [r4, #96]	; 0x60
    dfa0:	4620      	mov	r0, r4
    dfa2:	6663      	str	r3, [r4, #100]	; 0x64
    dfa4:	2102      	movs	r1, #2
    dfa6:	f001 fcdf 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    dfaa:	2000      	movs	r0, #0
    dfac:	bd10      	pop	{r4, pc}
    dfae:	bf00      	nop
    dfb0:	41c80000 	.word	0x41c80000

0000dfb4 <bsec_codegen_set_configuration>:
    dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfb8:	b089      	sub	sp, #36	; 0x24
    dfba:	4688      	mov	r8, r1
    dfbc:	4616      	mov	r6, r2
    dfbe:	f10d 0a16 	add.w	sl, sp, #22
    dfc2:	f10d 0918 	add.w	r9, sp, #24
    dfc6:	4607      	mov	r7, r0
    dfc8:	461c      	mov	r4, r3
    dfca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dfcc:	f8cd 9000 	str.w	r9, [sp]
    dfd0:	4653      	mov	r3, sl
    dfd2:	4631      	mov	r1, r6
    dfd4:	4640      	mov	r0, r8
    dfd6:	f000 fd03 	bl	e9e0 <bsec_Bsec_validateSerialization>
    dfda:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    dfde:	bb1b      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    dfe0:	3e08      	subs	r6, #8
    dfe2:	f10d 0b1c 	add.w	fp, sp, #28
    dfe6:	9d06      	ldr	r5, [sp, #24]
    dfe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dfea:	42b5      	cmp	r5, r6
    dfec:	4622      	mov	r2, r4
    dfee:	4649      	mov	r1, r9
    dff0:	4640      	mov	r0, r8
    dff2:	d227      	bcs.n	e044 <bsec_codegen_set_configuration+0x90>
    dff4:	f10d 0517 	add.w	r5, sp, #23
    dff8:	f8cd b008 	str.w	fp, [sp, #8]
    dffc:	e9cd a500 	strd	sl, r5, [sp]
    e000:	f000 fb44 	bl	e68c <bsec_Bsec_parse>
    e004:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e008:	4621      	mov	r1, r4
    e00a:	4638      	mov	r0, r7
    e00c:	b963      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    e00e:	f89d 5017 	ldrb.w	r5, [sp, #23]
    e012:	9b07      	ldr	r3, [sp, #28]
    e014:	2dfe      	cmp	r5, #254	; 0xfe
    e016:	461a      	mov	r2, r3
    e018:	d10a      	bne.n	e030 <bsec_codegen_set_configuration+0x7c>
    e01a:	f000 fd5f 	bl	eadc <bsec_b_Bsec_setHyperConfiguration>
    e01e:	4603      	mov	r3, r0
    e020:	f88d 0016 	strb.w	r0, [sp, #22]
    e024:	2b00      	cmp	r3, #0
    e026:	d0de      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e028:	4618      	mov	r0, r3
    e02a:	b009      	add	sp, #36	; 0x24
    e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e030:	4629      	mov	r1, r5
    e032:	4622      	mov	r2, r4
    e034:	f000 fec8 	bl	edc8 <bsec_ChannelHub_configureChannel>
    e038:	4603      	mov	r3, r0
    e03a:	f88d 0016 	strb.w	r0, [sp, #22]
    e03e:	2b00      	cmp	r3, #0
    e040:	d0d1      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e042:	e7f1      	b.n	e028 <bsec_codegen_set_configuration+0x74>
    e044:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e048:	4618      	mov	r0, r3
    e04a:	b009      	add	sp, #36	; 0x24
    e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e050 <bsec_codegen_set_state>:
    e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e054:	b08b      	sub	sp, #44	; 0x2c
    e056:	460f      	mov	r7, r1
    e058:	4616      	mov	r6, r2
    e05a:	f10d 091e 	add.w	r9, sp, #30
    e05e:	f10d 0820 	add.w	r8, sp, #32
    e062:	4682      	mov	sl, r0
    e064:	461c      	mov	r4, r3
    e066:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e068:	f8cd 8000 	str.w	r8, [sp]
    e06c:	464b      	mov	r3, r9
    e06e:	4631      	mov	r1, r6
    e070:	4638      	mov	r0, r7
    e072:	f000 fcb5 	bl	e9e0 <bsec_Bsec_validateSerialization>
    e076:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e07a:	bb23      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e07c:	f10d 031f 	add.w	r3, sp, #31
    e080:	3e08      	subs	r6, #8
    e082:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    e086:	9305      	str	r3, [sp, #20]
    e088:	9d08      	ldr	r5, [sp, #32]
    e08a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e08c:	42b5      	cmp	r5, r6
    e08e:	4622      	mov	r2, r4
    e090:	4641      	mov	r1, r8
    e092:	4638      	mov	r0, r7
    e094:	d226      	bcs.n	e0e4 <bsec_codegen_set_state+0x94>
    e096:	9d05      	ldr	r5, [sp, #20]
    e098:	f8cd b008 	str.w	fp, [sp, #8]
    e09c:	e9cd 9500 	strd	r9, r5, [sp]
    e0a0:	f000 faf4 	bl	e68c <bsec_Bsec_parse>
    e0a4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0a8:	4620      	mov	r0, r4
    e0aa:	b963      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e0ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0b2:	2afe      	cmp	r2, #254	; 0xfe
    e0b4:	4619      	mov	r1, r3
    e0b6:	d10a      	bne.n	e0ce <bsec_codegen_set_state+0x7e>
    e0b8:	f000 fdc4 	bl	ec44 <bsec_b_Bsec_setHyperState>
    e0bc:	4603      	mov	r3, r0
    e0be:	f88d 001e 	strb.w	r0, [sp, #30]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d0e0      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0c6:	4618      	mov	r0, r3
    e0c8:	b00b      	add	sp, #44	; 0x2c
    e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0ce:	4611      	mov	r1, r2
    e0d0:	4650      	mov	r0, sl
    e0d2:	4622      	mov	r2, r4
    e0d4:	f001 fb6e 	bl	f7b4 <bsec_ChannelHub_setChannelState>
    e0d8:	4603      	mov	r3, r0
    e0da:	f88d 001e 	strb.w	r0, [sp, #30]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d0d2      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0e2:	e7f0      	b.n	e0c6 <bsec_codegen_set_state+0x76>
    e0e4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0e8:	4618      	mov	r0, r3
    e0ea:	b00b      	add	sp, #44	; 0x2c
    e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e0f0 <bsec_constructor_bsec>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4604      	mov	r4, r0
    e0f4:	f000 fdfc 	bl	ecf0 <bsec_ChannelHub_ChannelHub>
    e0f8:	4620      	mov	r0, r4
    e0fa:	f000 fc41 	bl	e980 <bsec_Bsec_setHyperState>
    e0fe:	4620      	mov	r0, r4
    e100:	f000 fb1e 	bl	e740 <bsec_Bsec_setHyperConfiguration>
    e104:	4620      	mov	r0, r4
    e106:	bd10      	pop	{r4, pc}

0000e108 <bsec_Bsec_applyUpdateSubscription.part.0>:
    e108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e10c:	4606      	mov	r6, r0
    e10e:	4f32      	ldr	r7, [pc, #200]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e110:	4d32      	ldr	r5, [pc, #200]	; (e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>)
    e112:	f001 fb23 	bl	f75c <bsec_ChannelHub_resetSamplIntvls>
    e116:	2300      	movs	r3, #0
    e118:	e002      	b.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e11a:	2c15      	cmp	r4, #21
    e11c:	4623      	mov	r3, r4
    e11e:	d010      	beq.n	e142 <bsec_Bsec_applyUpdateSubscription.part.0+0x3a>
    e120:	fa47 f203 	asr.w	r2, r7, r3
    e124:	1c5c      	adds	r4, r3, #1
    e126:	07d0      	lsls	r0, r2, #31
    e128:	b2e1      	uxtb	r1, r4
    e12a:	d5f6      	bpl.n	e11a <bsec_Bsec_applyUpdateSubscription.part.0+0x12>
    e12c:	5d5b      	ldrb	r3, [r3, r5]
    e12e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e132:	4630      	mov	r0, r6
    e134:	f8b3 2428 	ldrh.w	r2, [r3, #1064]	; 0x428
    e138:	f001 fbca 	bl	f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>
    e13c:	2c15      	cmp	r4, #21
    e13e:	4623      	mov	r3, r4
    e140:	d1ee      	bne.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e142:	4630      	mov	r0, r6
    e144:	f001 fa98 	bl	f678 <bsec_ChannelHub_recalculateDownsampling>
    e148:	4f23      	ldr	r7, [pc, #140]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e14a:	f8df 8090 	ldr.w	r8, [pc, #144]	; e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>
    e14e:	f8df 9094 	ldr.w	r9, [pc, #148]	; e1e4 <bsec_Bsec_applyUpdateSubscription.part.0+0xdc>
    e152:	2500      	movs	r5, #0
    e154:	e002      	b.n	e15c <bsec_Bsec_applyUpdateSubscription.part.0+0x54>
    e156:	3501      	adds	r5, #1
    e158:	2d15      	cmp	r5, #21
    e15a:	d01b      	beq.n	e194 <bsec_Bsec_applyUpdateSubscription.part.0+0x8c>
    e15c:	fa47 f305 	asr.w	r3, r7, r5
    e160:	07da      	lsls	r2, r3, #31
    e162:	d5f8      	bpl.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e164:	f815 3008 	ldrb.w	r3, [r5, r8]
    e168:	4433      	add	r3, r6
    e16a:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
    e16e:	2b00      	cmp	r3, #0
    e170:	d0f1      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e172:	f939 a015 	ldrsh.w	sl, [r9, r5, lsl #1]
    e176:	2300      	movs	r3, #0
    e178:	e002      	b.n	e180 <bsec_Bsec_applyUpdateSubscription.part.0+0x78>
    e17a:	2c0a      	cmp	r4, #10
    e17c:	4623      	mov	r3, r4
    e17e:	d0ea      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e180:	1c5c      	adds	r4, r3, #1
    e182:	fa4a f303 	asr.w	r3, sl, r3
    e186:	07db      	lsls	r3, r3, #31
    e188:	b2e1      	uxtb	r1, r4
    e18a:	d5f6      	bpl.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e18c:	4630      	mov	r0, r6
    e18e:	f001 fb67 	bl	f860 <bsec_ChannelHub_updateChannelInterfaceDependency>
    e192:	e7f2      	b.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e194:	2400      	movs	r4, #0
    e196:	4621      	mov	r1, r4
    e198:	f886 445a 	strb.w	r4, [r6, #1114]	; 0x45a
    e19c:	220e      	movs	r2, #14
    e19e:	f206 4046 	addw	r0, r6, #1094	; 0x446
    e1a2:	f026 fc77 	bl	34a94 <memset>
    e1a6:	4b0e      	ldr	r3, [pc, #56]	; (e1e0 <bsec_Bsec_applyUpdateSubscription.part.0+0xd8>)
    e1a8:	f886 4456 	strb.w	r4, [r6, #1110]	; 0x456
    e1ac:	78db      	ldrb	r3, [r3, #3]
    e1ae:	f203 1353 	addw	r3, r3, #339	; 0x153
    e1b2:	4621      	mov	r1, r4
    e1b4:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
    e1b8:	f206 4312 	addw	r3, r6, #1042	; 0x412
    e1bc:	f833 2b02 	ldrh.w	r2, [r3], #2
    e1c0:	4290      	cmp	r0, r2
    e1c2:	f101 0101 	add.w	r1, r1, #1
    e1c6:	d003      	beq.n	e1d0 <bsec_Bsec_applyUpdateSubscription.part.0+0xc8>
    e1c8:	2904      	cmp	r1, #4
    e1ca:	d1f7      	bne.n	e1bc <bsec_Bsec_applyUpdateSubscription.part.0+0xb4>
    e1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d0:	f886 1456 	strb.w	r1, [r6, #1110]	; 0x456
    e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d8:	001279ef 	.word	0x001279ef
    e1dc:	00036438 	.word	0x00036438
    e1e0:	00036450 	.word	0x00036450
    e1e4:	000363b8 	.word	0x000363b8

0000e1e8 <bsec_Bsec_append>:
    e1e8:	b4f0      	push	{r4, r5, r6, r7}
    e1ea:	6816      	ldr	r6, [r2, #0]
    e1ec:	18f4      	adds	r4, r6, r3
    e1ee:	428c      	cmp	r4, r1
    e1f0:	d818      	bhi.n	e224 <bsec_Bsec_append+0x3c>
    e1f2:	9905      	ldr	r1, [sp, #20]
    e1f4:	428b      	cmp	r3, r1
    e1f6:	d818      	bhi.n	e22a <bsec_Bsec_append+0x42>
    e1f8:	b183      	cbz	r3, e21c <bsec_Bsec_append+0x34>
    e1fa:	9904      	ldr	r1, [sp, #16]
    e1fc:	1c5f      	adds	r7, r3, #1
    e1fe:	1e4d      	subs	r5, r1, #1
    e200:	2101      	movs	r1, #1
    e202:	e000      	b.n	e206 <bsec_Bsec_append+0x1e>
    e204:	6816      	ldr	r6, [r2, #0]
    e206:	1844      	adds	r4, r0, r1
    e208:	4434      	add	r4, r6
    e20a:	3101      	adds	r1, #1
    e20c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    e210:	f804 6c01 	strb.w	r6, [r4, #-1]
    e214:	428f      	cmp	r7, r1
    e216:	d1f5      	bne.n	e204 <bsec_Bsec_append+0x1c>
    e218:	6814      	ldr	r4, [r2, #0]
    e21a:	441c      	add	r4, r3
    e21c:	6014      	str	r4, [r2, #0]
    e21e:	2000      	movs	r0, #0
    e220:	bcf0      	pop	{r4, r5, r6, r7}
    e222:	4770      	bx	lr
    e224:	f06f 0028 	mvn.w	r0, #40	; 0x28
    e228:	e7fa      	b.n	e220 <bsec_Bsec_append+0x38>
    e22a:	f06f 0025 	mvn.w	r0, #37	; 0x25
    e22e:	e7f7      	b.n	e220 <bsec_Bsec_append+0x38>

0000e230 <bsec_Bsec_applyUpdateSubscription>:
    e230:	f890 345a 	ldrb.w	r3, [r0, #1114]	; 0x45a
    e234:	b903      	cbnz	r3, e238 <bsec_Bsec_applyUpdateSubscription+0x8>
    e236:	4770      	bx	lr
    e238:	e766      	b.n	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e23a:	bf00      	nop

0000e23c <bsec_Bsec_checkIfSensorRequired>:
    e23c:	b470      	push	{r4, r5, r6}
    e23e:	3901      	subs	r1, #1
    e240:	4c13      	ldr	r4, [pc, #76]	; (e290 <bsec_Bsec_checkIfSensorRequired+0x54>)
    e242:	9d03      	ldr	r5, [sp, #12]
    e244:	5c64      	ldrb	r4, [r4, r1]
    e246:	f204 1453 	addw	r4, r4, #339	; 0x153
    e24a:	2600      	movs	r6, #0
    e24c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    e250:	701e      	strb	r6, [r3, #0]
    e252:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e256:	42b4      	cmp	r4, r6
    e258:	802c      	strh	r4, [r5, #0]
    e25a:	d010      	beq.n	e27e <bsec_Bsec_checkIfSensorRequired+0x42>
    e25c:	f8b0 6454 	ldrh.w	r6, [r0, #1108]	; 0x454
    e260:	fbb6 f5f4 	udiv	r5, r6, r4
    e264:	fb04 6415 	mls	r4, r4, r5, r6
    e268:	b2a4      	uxth	r4, r4
    e26a:	b954      	cbnz	r4, e282 <bsec_Bsec_checkIfSensorRequired+0x46>
    e26c:	2401      	movs	r4, #1
    e26e:	6890      	ldr	r0, [r2, #8]
    e270:	701c      	strb	r4, [r3, #0]
    e272:	b2c9      	uxtb	r1, r1
    e274:	fa04 f101 	lsl.w	r1, r4, r1
    e278:	4301      	orrs	r1, r0
    e27a:	7514      	strb	r4, [r2, #20]
    e27c:	6091      	str	r1, [r2, #8]
    e27e:	bc70      	pop	{r4, r5, r6}
    e280:	4770      	bx	lr
    e282:	f890 045b 	ldrb.w	r0, [r0, #1115]	; 0x45b
    e286:	2800      	cmp	r0, #0
    e288:	d1f0      	bne.n	e26c <bsec_Bsec_checkIfSensorRequired+0x30>
    e28a:	bc70      	pop	{r4, r5, r6}
    e28c:	4770      	bx	lr
    e28e:	bf00      	nop
    e290:	00036450 	.word	0x00036450

0000e294 <bsec_Bsec_checkSamplIntvlCompatibilty>:
    e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e298:	4c6a      	ldr	r4, [pc, #424]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e29a:	4e6b      	ldr	r6, [pc, #428]	; (e448 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b4>)
    e29c:	2300      	movs	r3, #0
    e29e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e2a2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e2a6:	fa44 f203 	asr.w	r2, r4, r3
    e2aa:	07d2      	lsls	r2, r2, #31
    e2ac:	f140 80b0 	bpl.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2b0:	5cf2      	ldrb	r2, [r6, r3]
    e2b2:	442a      	add	r2, r5
    e2b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2b8:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
    e2bc:	f000 80a8 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c0:	42ba      	cmp	r2, r7
    e2c2:	f000 80a5 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c6:	f8b0 c40e 	ldrh.w	ip, [r0, #1038]	; 0x40e
    e2ca:	4d5e      	ldr	r5, [pc, #376]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e2cc:	4664      	mov	r4, ip
    e2ce:	2300      	movs	r3, #0
    e2d0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e2d4:	fa45 f203 	asr.w	r2, r5, r3
    e2d8:	07d2      	lsls	r2, r2, #31
    e2da:	d506      	bpl.n	e2ea <bsec_Bsec_checkSamplIntvlCompatibilty+0x56>
    e2dc:	5cf2      	ldrb	r2, [r6, r3]
    e2de:	443a      	add	r2, r7
    e2e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2e4:	4294      	cmp	r4, r2
    e2e6:	bf28      	it	cs
    e2e8:	4614      	movcs	r4, r2
    e2ea:	3301      	adds	r3, #1
    e2ec:	2b15      	cmp	r3, #21
    e2ee:	d1f1      	bne.n	e2d4 <bsec_Bsec_checkSamplIntvlCompatibilty+0x40>
    e2f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e2f4:	4294      	cmp	r4, r2
    e2f6:	d01f      	beq.n	e338 <bsec_Bsec_checkSamplIntvlCompatibilty+0xa4>
    e2f8:	fbbc f3f4 	udiv	r3, ip, r4
    e2fc:	fb04 c313 	mls	r3, r4, r3, ip
    e300:	b29b      	uxth	r3, r3
    e302:	2b00      	cmp	r3, #0
    e304:	f040 809b 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e308:	4f4e      	ldr	r7, [pc, #312]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e30a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    e30e:	fa47 f503 	asr.w	r5, r7, r3
    e312:	07ed      	lsls	r5, r5, #31
    e314:	d50d      	bpl.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e316:	5cf5      	ldrb	r5, [r6, r3]
    e318:	4465      	add	r5, ip
    e31a:	f831 e015 	ldrh.w	lr, [r1, r5, lsl #1]
    e31e:	4596      	cmp	lr, r2
    e320:	d007      	beq.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e322:	fbbe f5f4 	udiv	r5, lr, r4
    e326:	fb04 e515 	mls	r5, r4, r5, lr
    e32a:	b2ad      	uxth	r5, r5
    e32c:	2d00      	cmp	r5, #0
    e32e:	f040 8086 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e332:	3301      	adds	r3, #1
    e334:	2b15      	cmp	r3, #21
    e336:	d1ea      	bne.n	e30e <bsec_Bsec_checkSamplIntvlCompatibilty+0x7a>
    e338:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e33c:	4a43      	ldr	r2, [pc, #268]	; (e44c <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b8>)
    e33e:	4f41      	ldr	r7, [pc, #260]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e340:	46ae      	mov	lr, r5
    e342:	2300      	movs	r3, #0
    e344:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    e348:	f852 4b04 	ldr.w	r4, [r2], #4
    e34c:	0724      	lsls	r4, r4, #28
    e34e:	fa47 fc03 	asr.w	ip, r7, r3
    e352:	d502      	bpl.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e354:	f01c 0f01 	tst.w	ip, #1
    e358:	d15f      	bne.n	e41a <bsec_Bsec_checkSamplIntvlCompatibilty+0x186>
    e35a:	3301      	adds	r3, #1
    e35c:	2b15      	cmp	r3, #21
    e35e:	d1f3      	bne.n	e348 <bsec_Bsec_checkSamplIntvlCompatibilty+0xb4>
    e360:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e364:	429d      	cmp	r5, r3
    e366:	d066      	beq.n	e436 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a2>
    e368:	f200 4212 	addw	r2, r0, #1042	; 0x412
    e36c:	2300      	movs	r3, #0
    e36e:	e002      	b.n	e376 <bsec_Bsec_checkSamplIntvlCompatibilty+0xe2>
    e370:	3301      	adds	r3, #1
    e372:	2b04      	cmp	r3, #4
    e374:	d009      	beq.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e376:	f832 4b02 	ldrh.w	r4, [r2], #2
    e37a:	42ac      	cmp	r4, r5
    e37c:	d1f8      	bne.n	e370 <bsec_Bsec_checkSamplIntvlCompatibilty+0xdc>
    e37e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e382:	f8b3 341a 	ldrh.w	r3, [r3, #1050]	; 0x41a
    e386:	3304      	adds	r3, #4
    e388:	b29b      	uxth	r3, r3
    e38a:	4d2e      	ldr	r5, [pc, #184]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e38c:	ed9f 6a30 	vldr	s12, [pc, #192]	; e450 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1bc>
    e390:	eddf 6a30 	vldr	s13, [pc, #192]	; e454 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1c0>
    e394:	2400      	movs	r4, #0
    e396:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e39a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    e39e:	fa45 f204 	asr.w	r2, r5, r4
    e3a2:	07d2      	lsls	r2, r2, #31
    e3a4:	d52e      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3a6:	f890 e457 	ldrb.w	lr, [r0, #1111]	; 0x457
    e3aa:	f890 8459 	ldrb.w	r8, [r0, #1113]	; 0x459
    e3ae:	f890 2458 	ldrb.w	r2, [r0, #1112]	; 0x458
    e3b2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    e3b6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    e3ba:	fa5f fe8e 	uxtb.w	lr, lr
    e3be:	fa5f f888 	uxtb.w	r8, r8
    e3c2:	0052      	lsls	r2, r2, #1
    e3c4:	44c6      	add	lr, r8
    e3c6:	b2d2      	uxtb	r2, r2
    e3c8:	4472      	add	r2, lr
    e3ca:	441a      	add	r2, r3
    e3cc:	b292      	uxth	r2, r2
    e3ce:	ee07 2a90 	vmov	s15, r2
    e3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    e3d6:	5d32      	ldrb	r2, [r6, r4]
    e3d8:	ee67 7a86 	vmul.f32	s15, s15, s12
    e3dc:	443a      	add	r2, r7
    e3de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    e3e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e3e6:	ee07 2a90 	vmov	s15, r2
    e3ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e3ee:	eef4 7ac7 	vcmpe.f32	s15, s14
    e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3f6:	d505      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3f8:	4562      	cmp	r2, ip
    e3fa:	d003      	beq.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3fc:	f06f 0011 	mvn.w	r0, #17
    e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e404:	3401      	adds	r4, #1
    e406:	2c15      	cmp	r4, #21
    e408:	d1c9      	bne.n	e39e <bsec_Bsec_checkSamplIntvlCompatibilty+0x10a>
    e40a:	2000      	movs	r0, #0
    e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e410:	3301      	adds	r3, #1
    e412:	2b15      	cmp	r3, #21
    e414:	f47f af47 	bne.w	e2a6 <bsec_Bsec_checkSamplIntvlCompatibilty+0x12>
    e418:	e7f7      	b.n	e40a <bsec_Bsec_checkSamplIntvlCompatibilty+0x176>
    e41a:	5cf4      	ldrb	r4, [r6, r3]
    e41c:	4444      	add	r4, r8
    e41e:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
    e422:	4574      	cmp	r4, lr
    e424:	d099      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e426:	4575      	cmp	r5, lr
    e428:	d007      	beq.n	e43a <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a6>
    e42a:	42ac      	cmp	r4, r5
    e42c:	d095      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e42e:	f06f 0010 	mvn.w	r0, #16
    e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e436:	2304      	movs	r3, #4
    e438:	e7a7      	b.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e43a:	4625      	mov	r5, r4
    e43c:	e78d      	b.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e43e:	f06f 000f 	mvn.w	r0, #15
    e442:	e7e3      	b.n	e40c <bsec_Bsec_checkSamplIntvlCompatibilty+0x178>
    e444:	001279ef 	.word	0x001279ef
    e448:	00036438 	.word	0x00036438
    e44c:	000363e4 	.word	0x000363e4
    e450:	42c80000 	.word	0x42c80000
    e454:	447a0000 	.word	0x447a0000

0000e458 <bsec_Bsec_frameSerializedData>:
    e458:	b570      	push	{r4, r5, r6, lr}
    e45a:	b088      	sub	sp, #32
    e45c:	ae08      	add	r6, sp, #32
    e45e:	4b28      	ldr	r3, [pc, #160]	; (e500 <bsec_Bsec_frameSerializedData+0xa8>)
    e460:	f846 3d18 	str.w	r3, [r6, #-24]!
    e464:	4604      	mov	r4, r0
    e466:	2204      	movs	r2, #4
    e468:	460d      	mov	r5, r1
    e46a:	a803      	add	r0, sp, #12
    e46c:	4631      	mov	r1, r6
    e46e:	f026 fad7 	bl	34a20 <memcpy>
    e472:	aa03      	add	r2, sp, #12
    e474:	1e63      	subs	r3, r4, #1
    e476:	1ce0      	adds	r0, r4, #3
    e478:	f812 1b01 	ldrb.w	r1, [r2], #1
    e47c:	f803 1f01 	strb.w	r1, [r3, #1]!
    e480:	4283      	cmp	r3, r0
    e482:	d1f9      	bne.n	e478 <bsec_Bsec_frameSerializedData+0x20>
    e484:	2300      	movs	r3, #0
    e486:	a908      	add	r1, sp, #32
    e488:	223d      	movs	r2, #61	; 0x3d
    e48a:	e961 2304 	strd	r2, r3, [r1, #-16]!
    e48e:	a806      	add	r0, sp, #24
    e490:	2208      	movs	r2, #8
    e492:	f026 fac5 	bl	34a20 <memcpy>
    e496:	a906      	add	r1, sp, #24
    e498:	2208      	movs	r2, #8
    e49a:	1d20      	adds	r0, r4, #4
    e49c:	f026 fac0 	bl	34a20 <memcpy>
    e4a0:	682b      	ldr	r3, [r5, #0]
    e4a2:	4631      	mov	r1, r6
    e4a4:	3b10      	subs	r3, #16
    e4a6:	a803      	add	r0, sp, #12
    e4a8:	2204      	movs	r2, #4
    e4aa:	9302      	str	r3, [sp, #8]
    e4ac:	f026 fab8 	bl	34a20 <memcpy>
    e4b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    e4b4:	f89d 100d 	ldrb.w	r1, [sp, #13]
    e4b8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    e4bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4c0:	7320      	strb	r0, [r4, #12]
    e4c2:	73a2      	strb	r2, [r4, #14]
    e4c4:	73e3      	strb	r3, [r4, #15]
    e4c6:	7361      	strb	r1, [r4, #13]
    e4c8:	6829      	ldr	r1, [r5, #0]
    e4ca:	aa01      	add	r2, sp, #4
    e4cc:	4620      	mov	r0, r4
    e4ce:	f003 fb59 	bl	11b84 <bsec_crcCcitt2>
    e4d2:	682b      	ldr	r3, [r5, #0]
    e4d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e4d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    e4dc:	4423      	add	r3, r4
    e4de:	2200      	movs	r2, #0
    e4e0:	7118      	strb	r0, [r3, #4]
    e4e2:	682b      	ldr	r3, [r5, #0]
    e4e4:	4423      	add	r3, r4
    e4e6:	7159      	strb	r1, [r3, #5]
    e4e8:	682b      	ldr	r3, [r5, #0]
    e4ea:	4423      	add	r3, r4
    e4ec:	719a      	strb	r2, [r3, #6]
    e4ee:	682b      	ldr	r3, [r5, #0]
    e4f0:	441c      	add	r4, r3
    e4f2:	71e2      	strb	r2, [r4, #7]
    e4f4:	682b      	ldr	r3, [r5, #0]
    e4f6:	3308      	adds	r3, #8
    e4f8:	602b      	str	r3, [r5, #0]
    e4fa:	b008      	add	sp, #32
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    e4fe:	bf00      	nop
    e500:	01040704 	.word	0x01040704

0000e504 <bsec_Bsec_getHyperConfiguration>:
    e504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e508:	b085      	sub	sp, #20
    e50a:	ac04      	add	r4, sp, #16
    e50c:	2507      	movs	r5, #7
    e50e:	f804 5d09 	strb.w	r5, [r4, #-9]!
    e512:	4606      	mov	r6, r0
    e514:	4617      	mov	r7, r2
    e516:	20fe      	movs	r0, #254	; 0xfe
    e518:	4622      	mov	r2, r4
    e51a:	460d      	mov	r5, r1
    e51c:	f003 fab6 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    e520:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e524:	9003      	str	r0, [sp, #12]
    e526:	b1da      	cbz	r2, e560 <bsec_Bsec_getHyperConfiguration+0x5c>
    e528:	2401      	movs	r4, #1
    e52a:	f506 797c 	add.w	r9, r6, #1008	; 0x3f0
    e52e:	f506 7852 	add.w	r8, r6, #840	; 0x348
    e532:	1e63      	subs	r3, r4, #1
    e534:	2b06      	cmp	r3, #6
    e536:	d80e      	bhi.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e538:	e8df f003 	tbb	[pc, r3]
    e53c:	4953353f 	.word	0x4953353f
    e540:	232c      	.short	0x232c
    e542:	04          	.byte	0x04
    e543:	00          	.byte	0x00
    e544:	463a      	mov	r2, r7
    e546:	ab03      	add	r3, sp, #12
    e548:	4629      	mov	r1, r5
    e54a:	f8b6 040e 	ldrh.w	r0, [r6, #1038]	; 0x40e
    e54e:	f001 fadd 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
    e552:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e556:	3401      	adds	r4, #1
    e558:	b2e4      	uxtb	r4, r4
    e55a:	42a2      	cmp	r2, r4
    e55c:	d2e9      	bcs.n	e532 <bsec_Bsec_getHyperConfiguration+0x2e>
    e55e:	9803      	ldr	r0, [sp, #12]
    e560:	a904      	add	r1, sp, #16
    e562:	2202      	movs	r2, #2
    e564:	f821 0d06 	strh.w	r0, [r1, #-6]!
    e568:	a802      	add	r0, sp, #8
    e56a:	f026 fa59 	bl	34a20 <memcpy>
    e56e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e572:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e576:	9803      	ldr	r0, [sp, #12]
    e578:	702a      	strb	r2, [r5, #0]
    e57a:	706b      	strb	r3, [r5, #1]
    e57c:	b005      	add	sp, #20
    e57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e582:	463a      	mov	r2, r7
    e584:	ab03      	add	r3, sp, #12
    e586:	4629      	mov	r1, r5
    e588:	4648      	mov	r0, r9
    e58a:	f001 fdd5 	bl	10138 <bsec_q_Entity_serializeAndAdd>
    e58e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e592:	e7e0      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e594:	463a      	mov	r2, r7
    e596:	ab03      	add	r3, sp, #12
    e598:	4629      	mov	r1, r5
    e59a:	4640      	mov	r0, r8
    e59c:	f001 fd8a 	bl	100b4 <bsec_p_Entity_serializeAndAdd>
    e5a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5a4:	e7d7      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5a6:	463a      	mov	r2, r7
    e5a8:	ab03      	add	r3, sp, #12
    e5aa:	4629      	mov	r1, r5
    e5ac:	f896 0458 	ldrb.w	r0, [r6, #1112]	; 0x458
    e5b0:	f001 fb5c 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5b8:	e7cd      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ba:	463a      	mov	r2, r7
    e5bc:	ab03      	add	r3, sp, #12
    e5be:	4629      	mov	r1, r5
    e5c0:	f896 0457 	ldrb.w	r0, [r6, #1111]	; 0x457
    e5c4:	f001 fb52 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5cc:	e7c3      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ce:	463a      	mov	r2, r7
    e5d0:	ab03      	add	r3, sp, #12
    e5d2:	4629      	mov	r1, r5
    e5d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
    e5d8:	f001 fd42 	bl	10060 <bsec_o_Entity_serializeAndAdd>
    e5dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5e0:	e7b9      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5e2:	463a      	mov	r2, r7
    e5e4:	ab03      	add	r3, sp, #12
    e5e6:	4629      	mov	r1, r5
    e5e8:	f896 0459 	ldrb.w	r0, [r6, #1113]	; 0x459
    e5ec:	f001 fb3e 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5f4:	e7af      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5f6:	bf00      	nop

0000e5f8 <bsec_Bsec_getHyperState>:
    e5f8:	2000      	movs	r0, #0
    e5fa:	4770      	bx	lr

0000e5fc <bsec_Bsec_getModHeatingDuration>:
    e5fc:	b508      	push	{r3, lr}
    e5fe:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
    e602:	ed2d 8b02 	vpush	{d8}
    e606:	eef0 8a40 	vmov.f32	s17, s0
    e60a:	f01d fcc3 	bl	2bf94 <powf>
    e60e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
    e612:	eeb0 8a40 	vmov.f32	s16, s0
    e616:	eeb0 0a68 	vmov.f32	s0, s17
    e61a:	f01d fcbb 	bl	2bf94 <powf>
    e61e:	ed9f 5a15 	vldr	s10, [pc, #84]	; e674 <bsec_Bsec_getModHeatingDuration+0x78>
    e622:	eddf 7a15 	vldr	s15, [pc, #84]	; e678 <bsec_Bsec_getModHeatingDuration+0x7c>
    e626:	eddf 5a15 	vldr	s11, [pc, #84]	; e67c <bsec_Bsec_getModHeatingDuration+0x80>
    e62a:	ed9f 6a15 	vldr	s12, [pc, #84]	; e680 <bsec_Bsec_getModHeatingDuration+0x84>
    e62e:	eddf 6a15 	vldr	s13, [pc, #84]	; e684 <bsec_Bsec_getModHeatingDuration+0x88>
    e632:	ed9f 7a15 	vldr	s14, [pc, #84]	; e688 <bsec_Bsec_getModHeatingDuration+0x8c>
    e636:	ee60 7a27 	vmul.f32	s15, s0, s15
    e63a:	ee28 8a05 	vmul.f32	s16, s16, s10
    e63e:	ee28 0aa8 	vmul.f32	s0, s17, s17
    e642:	ee38 8a27 	vadd.f32	s16, s16, s15
    e646:	ee20 0a25 	vmul.f32	s0, s0, s11
    e64a:	ee68 8a86 	vmul.f32	s17, s17, s12
    e64e:	ee38 0a00 	vadd.f32	s0, s16, s0
    e652:	ee30 0a28 	vadd.f32	s0, s0, s17
    e656:	ee30 0a26 	vadd.f32	s0, s0, s13
    e65a:	ee20 0a07 	vmul.f32	s0, s0, s14
    e65e:	f01d fba1 	bl	2bda4 <roundf>
    e662:	ecbd 8b02 	vpop	{d8}
    e666:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    e66a:	ee10 3a10 	vmov	r3, s0
    e66e:	b298      	uxth	r0, r3
    e670:	bd08      	pop	{r3, pc}
    e672:	bf00      	nop
    e674:	b0078259 	.word	0xb0078259
    e678:	34c2e0df 	.word	0x34c2e0df
    e67c:	b8d96737 	.word	0xb8d96737
    e680:	3c868e5a 	.word	0x3c868e5a
    e684:	3ee4926a 	.word	0x3ee4926a
    e688:	447a0000 	.word	0x447a0000

0000e68c <bsec_Bsec_parse>:
    e68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e690:	b082      	sub	sp, #8
    e692:	e9dd 790a 	ldrd	r7, r9, [sp, #40]	; 0x28
    e696:	460c      	mov	r4, r1
    e698:	2100      	movs	r1, #0
    e69a:	7039      	strb	r1, [r7, #0]
    e69c:	f889 1000 	strb.w	r1, [r9]
    e6a0:	6821      	ldr	r1, [r4, #0]
    e6a2:	4605      	mov	r5, r0
    e6a4:	4408      	add	r0, r1
    e6a6:	4690      	mov	r8, r2
    e6a8:	7842      	ldrb	r2, [r0, #1]
    e6aa:	f815 c001 	ldrb.w	ip, [r5, r1]
    e6ae:	f88d 2005 	strb.w	r2, [sp, #5]
    e6b2:	a901      	add	r1, sp, #4
    e6b4:	2202      	movs	r2, #2
    e6b6:	f10d 0006 	add.w	r0, sp, #6
    e6ba:	469a      	mov	sl, r3
    e6bc:	f88d c004 	strb.w	ip, [sp, #4]
    e6c0:	f026 f9ae 	bl	34a20 <memcpy>
    e6c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    e6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6ca:	4550      	cmp	r0, sl
    e6cc:	6018      	str	r0, [r3, #0]
    e6ce:	d818      	bhi.n	e702 <bsec_Bsec_parse+0x76>
    e6d0:	b168      	cbz	r0, e6ee <bsec_Bsec_parse+0x62>
    e6d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    e6d6:	1c47      	adds	r7, r0, #1
    e6d8:	2301      	movs	r3, #1
    e6da:	6826      	ldr	r6, [r4, #0]
    e6dc:	18ea      	adds	r2, r5, r3
    e6de:	4432      	add	r2, r6
    e6e0:	3301      	adds	r3, #1
    e6e2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    e6e6:	f801 2f01 	strb.w	r2, [r1, #1]!
    e6ea:	429f      	cmp	r7, r3
    e6ec:	d1f5      	bne.n	e6da <bsec_Bsec_parse+0x4e>
    e6ee:	f898 3002 	ldrb.w	r3, [r8, #2]
    e6f2:	f889 3000 	strb.w	r3, [r9]
    e6f6:	6823      	ldr	r3, [r4, #0]
    e6f8:	4403      	add	r3, r0
    e6fa:	6023      	str	r3, [r4, #0]
    e6fc:	b002      	add	sp, #8
    e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e702:	23e0      	movs	r3, #224	; 0xe0
    e704:	703b      	strb	r3, [r7, #0]
    e706:	b002      	add	sp, #8
    e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e70c <bsec_Bsec_requestOutput>:
    e70c:	4b0b      	ldr	r3, [pc, #44]	; (e73c <bsec_Bsec_requestOutput+0x30>)
    e70e:	4419      	add	r1, r3
    e710:	b410      	push	{r4}
    e712:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    e716:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    e71a:	f8b1 4428 	ldrh.w	r4, [r1, #1064]	; 0x428
    e71e:	4294      	cmp	r4, r2
    e720:	d004      	beq.n	e72c <bsec_Bsec_requestOutput+0x20>
    e722:	3b01      	subs	r3, #1
    e724:	4403      	add	r3, r0
    e726:	2401      	movs	r4, #1
    e728:	f883 4446 	strb.w	r4, [r3, #1094]	; 0x446
    e72c:	2301      	movs	r3, #1
    e72e:	f8a1 2428 	strh.w	r2, [r1, #1064]	; 0x428
    e732:	f85d 4b04 	ldr.w	r4, [sp], #4
    e736:	f880 345a 	strb.w	r3, [r0, #1114]	; 0x45a
    e73a:	4770      	bx	lr
    e73c:	00036438 	.word	0x00036438

0000e740 <bsec_Bsec_setHyperConfiguration>:
    e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e744:	2305      	movs	r3, #5
    e746:	4606      	mov	r6, r0
    e748:	2102      	movs	r1, #2
    e74a:	2201      	movs	r2, #1
    e74c:	f880 1457 	strb.w	r1, [r0, #1111]	; 0x457
    e750:	f880 2458 	strb.w	r2, [r0, #1112]	; 0x458
    e754:	f880 3459 	strb.w	r3, [r0, #1113]	; 0x459
    e758:	2218      	movs	r2, #24
    e75a:	f200 4012 	addw	r0, r0, #1042	; 0x412
    e75e:	4975      	ldr	r1, [pc, #468]	; (e934 <bsec_Bsec_setHyperConfiguration+0x1f4>)
    e760:	f206 3546 	addw	r5, r6, #838	; 0x346
    e764:	f026 f95c 	bl	34a20 <memcpy>
    e768:	462c      	mov	r4, r5
    e76a:	f206 32ee 	addw	r2, r6, #1006	; 0x3ee
    e76e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e772:	f824 3f02 	strh.w	r3, [r4, #2]!
    e776:	42a2      	cmp	r2, r4
    e778:	d1fb      	bne.n	e772 <bsec_Bsec_setHyperConfiguration+0x32>
    e77a:	f240 51dc 	movw	r1, #1500	; 0x5dc
    e77e:	4b6e      	ldr	r3, [pc, #440]	; (e938 <bsec_Bsec_setHyperConfiguration+0x1f8>)
    e780:	f8df c1e4 	ldr.w	ip, [pc, #484]	; e968 <bsec_Bsec_setHyperConfiguration+0x228>
    e784:	4f6d      	ldr	r7, [pc, #436]	; (e93c <bsec_Bsec_setHyperConfiguration+0x1fc>)
    e786:	486e      	ldr	r0, [pc, #440]	; (e940 <bsec_Bsec_setHyperConfiguration+0x200>)
    e788:	f8df e1e0 	ldr.w	lr, [pc, #480]	; e96c <bsec_Bsec_setHyperConfiguration+0x22c>
    e78c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; e970 <bsec_Bsec_setHyperConfiguration+0x230>
    e790:	4a6c      	ldr	r2, [pc, #432]	; (e944 <bsec_Bsec_setHyperConfiguration+0x204>)
    e792:	f8a6 13e0 	strh.w	r1, [r6, #992]	; 0x3e0
    e796:	f04f 1164 	mov.w	r1, #6553700	; 0x640064
    e79a:	f8c6 e3dc 	str.w	lr, [r6, #988]	; 0x3dc
    e79e:	f8c6 c360 	str.w	ip, [r6, #864]	; 0x360
    e7a2:	f8c6 c36c 	str.w	ip, [r6, #876]	; 0x36c
    e7a6:	f8c6 c348 	str.w	ip, [r6, #840]	; 0x348
    e7aa:	f8c6 c34c 	str.w	ip, [r6, #844]	; 0x34c
    e7ae:	f8c6 c358 	str.w	ip, [r6, #856]	; 0x358
    e7b2:	f8c6 33b8 	str.w	r3, [r6, #952]	; 0x3b8
    e7b6:	f8c6 33bc 	str.w	r3, [r6, #956]	; 0x3bc
    e7ba:	f8c6 33c0 	str.w	r3, [r6, #960]	; 0x3c0
    e7be:	f8c6 33c4 	str.w	r3, [r6, #964]	; 0x3c4
    e7c2:	f8c6 33c8 	str.w	r3, [r6, #968]	; 0x3c8
    e7c6:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    e7ca:	f8c6 1364 	str.w	r1, [r6, #868]	; 0x364
    e7ce:	f8c6 1368 	str.w	r1, [r6, #872]	; 0x368
    e7d2:	f8c6 1374 	str.w	r1, [r6, #884]	; 0x374
    e7d6:	f8c6 137c 	str.w	r1, [r6, #892]	; 0x37c
    e7da:	f8c6 1350 	str.w	r1, [r6, #848]	; 0x350
    e7de:	f8c6 8370 	str.w	r8, [r6, #880]	; 0x370
    e7e2:	f8c6 7380 	str.w	r7, [r6, #896]	; 0x380
    e7e6:	f8c6 7384 	str.w	r7, [r6, #900]	; 0x384
    e7ea:	f8c6 7388 	str.w	r7, [r6, #904]	; 0x388
    e7ee:	f8c6 738c 	str.w	r7, [r6, #908]	; 0x38c
    e7f2:	f8c6 7390 	str.w	r7, [r6, #912]	; 0x390
    e7f6:	f8c6 7398 	str.w	r7, [r6, #920]	; 0x398
    e7fa:	f8c6 039c 	str.w	r0, [r6, #924]	; 0x39c
    e7fe:	f8c6 03a0 	str.w	r0, [r6, #928]	; 0x3a0
    e802:	f8c6 03a4 	str.w	r0, [r6, #932]	; 0x3a4
    e806:	f8c6 03a8 	str.w	r0, [r6, #936]	; 0x3a8
    e80a:	f8c6 03ac 	str.w	r0, [r6, #940]	; 0x3ac
    e80e:	f8c6 03b4 	str.w	r0, [r6, #948]	; 0x3b4
    e812:	f8c6 2354 	str.w	r2, [r6, #852]	; 0x354
    e816:	f8c6 135c 	str.w	r1, [r6, #860]	; 0x35c
    e81a:	2240      	movs	r2, #64	; 0x40
    e81c:	494a      	ldr	r1, [pc, #296]	; (e948 <bsec_Bsec_setHyperConfiguration+0x208>)
    e81e:	f8c6 e3e8 	str.w	lr, [r6, #1000]	; 0x3e8
    e822:	f8c6 c378 	str.w	ip, [r6, #888]	; 0x378
    e826:	f8c6 7394 	str.w	r7, [r6, #916]	; 0x394
    e82a:	f8c6 03b0 	str.w	r0, [r6, #944]	; 0x3b0
    e82e:	f8c6 33cc 	str.w	r3, [r6, #972]	; 0x3cc
    e832:	f506 7042 	add.w	r0, r6, #776	; 0x308
    e836:	f026 f8f3 	bl	34a20 <memcpy>
    e83a:	4a44      	ldr	r2, [pc, #272]	; (e94c <bsec_Bsec_setHyperConfiguration+0x20c>)
    e83c:	4944      	ldr	r1, [pc, #272]	; (e950 <bsec_Bsec_setHyperConfiguration+0x210>)
    e83e:	f8df 8134 	ldr.w	r8, [pc, #308]	; e974 <bsec_Bsec_setHyperConfiguration+0x234>
    e842:	f8df e134 	ldr.w	lr, [pc, #308]	; e978 <bsec_Bsec_setHyperConfiguration+0x238>
    e846:	f8df c134 	ldr.w	ip, [pc, #308]	; e97c <bsec_Bsec_setHyperConfiguration+0x23c>
    e84a:	4f42      	ldr	r7, [pc, #264]	; (e954 <bsec_Bsec_setHyperConfiguration+0x214>)
    e84c:	4842      	ldr	r0, [pc, #264]	; (e958 <bsec_Bsec_setHyperConfiguration+0x218>)
    e84e:	f8c6 2310 	str.w	r2, [r6, #784]	; 0x310
    e852:	2300      	movs	r3, #0
    e854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e858:	f8c6 330c 	str.w	r3, [r6, #780]	; 0x30c
    e85c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    e860:	f8c6 331c 	str.w	r3, [r6, #796]	; 0x31c
    e864:	f8c6 3320 	str.w	r3, [r6, #800]	; 0x320
    e868:	f8c6 3324 	str.w	r3, [r6, #804]	; 0x324
    e86c:	f8c6 233c 	str.w	r2, [r6, #828]	; 0x33c
    e870:	f8c6 2340 	str.w	r2, [r6, #832]	; 0x340
    e874:	f8c6 1344 	str.w	r1, [r6, #836]	; 0x344
    e878:	f8c6 8314 	str.w	r8, [r6, #788]	; 0x314
    e87c:	f8c6 e330 	str.w	lr, [r6, #816]	; 0x330
    e880:	f8c6 c32c 	str.w	ip, [r6, #812]	; 0x32c
    e884:	f8c6 7328 	str.w	r7, [r6, #808]	; 0x328
    e888:	f8c6 0334 	str.w	r0, [r6, #820]	; 0x334
    e88c:	4623      	mov	r3, r4
    e88e:	f206 410a 	addw	r1, r6, #1034	; 0x40a
    e892:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e896:	f823 2f02 	strh.w	r2, [r3, #2]!
    e89a:	4299      	cmp	r1, r3
    e89c:	d1fb      	bne.n	e896 <bsec_Bsec_setHyperConfiguration+0x156>
    e89e:	f247 5230 	movw	r2, #30000	; 0x7530
    e8a2:	2300      	movs	r3, #0
    e8a4:	f8a6 240e 	strh.w	r2, [r6, #1038]	; 0x40e
    e8a8:	f8a6 3410 	strh.w	r3, [r6, #1040]	; 0x410
    e8ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8b0:	f835 3f02 	ldrh.w	r3, [r5, #2]!
    e8b4:	428b      	cmp	r3, r1
    e8b6:	d005      	beq.n	e8c4 <bsec_Bsec_setHyperConfiguration+0x184>
    e8b8:	f8b6 2410 	ldrh.w	r2, [r6, #1040]	; 0x410
    e8bc:	429a      	cmp	r2, r3
    e8be:	bf38      	it	cc
    e8c0:	f8a6 3410 	strhcc.w	r3, [r6, #1040]	; 0x410
    e8c4:	42a5      	cmp	r5, r4
    e8c6:	d1f3      	bne.n	e8b0 <bsec_Bsec_setHyperConfiguration+0x170>
    e8c8:	4824      	ldr	r0, [pc, #144]	; (e95c <bsec_Bsec_setHyperConfiguration+0x21c>)
    e8ca:	4c25      	ldr	r4, [pc, #148]	; (e960 <bsec_Bsec_setHyperConfiguration+0x220>)
    e8cc:	4f25      	ldr	r7, [pc, #148]	; (e964 <bsec_Bsec_setHyperConfiguration+0x224>)
    e8ce:	2300      	movs	r3, #0
    e8d0:	2501      	movs	r5, #1
    e8d2:	fa40 f203 	asr.w	r2, r0, r3
    e8d6:	07d2      	lsls	r2, r2, #31
    e8d8:	d516      	bpl.n	e908 <bsec_Bsec_setHyperConfiguration+0x1c8>
    e8da:	5dd9      	ldrb	r1, [r3, r7]
    e8dc:	5d1a      	ldrb	r2, [r3, r4]
    e8de:	4421      	add	r1, r4
    e8e0:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    e8e4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    e8e8:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
    e8ec:	eb06 0241 	add.w	r2, r6, r1, lsl #1
    e8f0:	3901      	subs	r1, #1
    e8f2:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    e8f6:	45e6      	cmp	lr, ip
    e8f8:	bf1c      	itt	ne
    e8fa:	1989      	addne	r1, r1, r6
    e8fc:	f881 5446 	strbne.w	r5, [r1, #1094]	; 0x446
    e900:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    e904:	f886 545a 	strb.w	r5, [r6, #1114]	; 0x45a
    e908:	3301      	adds	r3, #1
    e90a:	2b15      	cmp	r3, #21
    e90c:	d1e1      	bne.n	e8d2 <bsec_Bsec_setHyperConfiguration+0x192>
    e90e:	f206 4345 	addw	r3, r6, #1093	; 0x445
    e912:	f206 4153 	addw	r1, r6, #1107	; 0x453
    e916:	2201      	movs	r2, #1
    e918:	f803 2f01 	strb.w	r2, [r3, #1]!
    e91c:	428b      	cmp	r3, r1
    e91e:	d1fb      	bne.n	e918 <bsec_Bsec_setHyperConfiguration+0x1d8>
    e920:	f896 345a 	ldrb.w	r3, [r6, #1114]	; 0x45a
    e924:	b90b      	cbnz	r3, e92a <bsec_Bsec_setHyperConfiguration+0x1ea>
    e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e92a:	4630      	mov	r0, r6
    e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e930:	f7ff bbea 	b.w	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e934:	00036374 	.word	0x00036374
    e938:	17701770 	.word	0x17701770
    e93c:	012c012c 	.word	0x012c012c
    e940:	07080708 	.word	0x07080708
    e944:	75300064 	.word	0x75300064
    e948:	00036334 	.word	0x00036334
    e94c:	c2820000 	.word	0xc2820000
    e950:	41100000 	.word	0x41100000
    e954:	49f42400 	.word	0x49f42400
    e958:	4b496a80 	.word	0x4b496a80
    e95c:	001279ef 	.word	0x001279ef
    e960:	00036438 	.word	0x00036438
    e964:	0003631c 	.word	0x0003631c
    e968:	75307530 	.word	0x75307530
    e96c:	05dc05dc 	.word	0x05dc05dc
    e970:	00647530 	.word	0x00647530
    e974:	432a0000 	.word	0x432a0000
    e978:	42fa0000 	.word	0x42fa0000
    e97c:	42c80000 	.word	0x42c80000

0000e980 <bsec_Bsec_setHyperState>:
    e980:	b470      	push	{r4, r5, r6}
    e982:	2200      	movs	r2, #0
    e984:	2300      	movs	r3, #0
    e986:	f500 743c 	add.w	r4, r0, #752	; 0x2f0
    e98a:	2100      	movs	r1, #0
    e98c:	f880 1456 	strb.w	r1, [r0, #1110]	; 0x456
    e990:	f8a0 1454 	strh.w	r1, [r0, #1108]	; 0x454
    e994:	f500 7540 	add.w	r5, r0, #768	; 0x300
    e998:	e9c4 2300 	strd	r2, r3, [r4]
    e99c:	f500 763e 	add.w	r6, r0, #760	; 0x2f8
    e9a0:	f247 5430 	movw	r4, #30000	; 0x7530
    e9a4:	e9c6 2300 	strd	r2, r3, [r6]
    e9a8:	e9c5 2300 	strd	r2, r3, [r5]
    e9ac:	f8a0 440c 	strh.w	r4, [r0, #1036]	; 0x40c
    e9b0:	f500 6385 	add.w	r3, r0, #1064	; 0x428
    e9b4:	f200 4245 	addw	r2, r0, #1093	; 0x445
    e9b8:	f200 4544 	addw	r5, r0, #1092	; 0x444
    e9bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    e9c0:	f823 4f02 	strh.w	r4, [r3, #2]!
    e9c4:	42ab      	cmp	r3, r5
    e9c6:	f802 1f01 	strb.w	r1, [r2, #1]!
    e9ca:	d1f9      	bne.n	e9c0 <bsec_Bsec_setHyperState+0x40>
    e9cc:	2366      	movs	r3, #102	; 0x66
    e9ce:	f880 145a 	strb.w	r1, [r0, #1114]	; 0x45a
    e9d2:	f880 145b 	strb.w	r1, [r0, #1115]	; 0x45b
    e9d6:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
    e9da:	bc70      	pop	{r4, r5, r6}
    e9dc:	4770      	bx	lr
    e9de:	bf00      	nop

0000e9e0 <bsec_Bsec_validateSerialization>:
    e9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9e2:	b089      	sub	sp, #36	; 0x24
    e9e4:	2400      	movs	r4, #0
    e9e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    e9e8:	2917      	cmp	r1, #23
    e9ea:	602c      	str	r4, [r5, #0]
    e9ec:	d920      	bls.n	ea30 <bsec_Bsec_validateSerialization+0x50>
    e9ee:	4291      	cmp	r1, r2
    e9f0:	d81a      	bhi.n	ea28 <bsec_Bsec_validateSerialization+0x48>
    e9f2:	ac03      	add	r4, sp, #12
    e9f4:	1e42      	subs	r2, r0, #1
    e9f6:	1cc7      	adds	r7, r0, #3
    e9f8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
    e9fc:	f804 6b01 	strb.w	r6, [r4], #1
    ea00:	42ba      	cmp	r2, r7
    ea02:	d1f9      	bne.n	e9f8 <bsec_Bsec_validateSerialization+0x18>
    ea04:	2204      	movs	r2, #4
    ea06:	4604      	mov	r4, r0
    ea08:	460f      	mov	r7, r1
    ea0a:	a802      	add	r0, sp, #8
    ea0c:	a903      	add	r1, sp, #12
    ea0e:	461e      	mov	r6, r3
    ea10:	f026 f806 	bl	34a20 <memcpy>
    ea14:	9b02      	ldr	r3, [sp, #8]
    ea16:	4a30      	ldr	r2, [pc, #192]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea18:	4293      	cmp	r3, r2
    ea1a:	d00d      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea1c:	3301      	adds	r3, #1
    ea1e:	d00b      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea20:	23de      	movs	r3, #222	; 0xde
    ea22:	7033      	strb	r3, [r6, #0]
    ea24:	b009      	add	sp, #36	; 0x24
    ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea28:	22da      	movs	r2, #218	; 0xda
    ea2a:	701a      	strb	r2, [r3, #0]
    ea2c:	b009      	add	sp, #36	; 0x24
    ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea30:	22db      	movs	r2, #219	; 0xdb
    ea32:	701a      	strb	r2, [r3, #0]
    ea34:	b009      	add	sp, #36	; 0x24
    ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea38:	2208      	movs	r2, #8
    ea3a:	1d21      	adds	r1, r4, #4
    ea3c:	a806      	add	r0, sp, #24
    ea3e:	f025 ffef 	bl	34a20 <memcpy>
    ea42:	2208      	movs	r2, #8
    ea44:	a906      	add	r1, sp, #24
    ea46:	a804      	add	r0, sp, #16
    ea48:	f025 ffea 	bl	34a20 <memcpy>
    ea4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea50:	2b00      	cmp	r3, #0
    ea52:	bf08      	it	eq
    ea54:	2a3d      	cmpeq	r2, #61	; 0x3d
    ea56:	d007      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea58:	2b00      	cmp	r3, #0
    ea5a:	bf08      	it	eq
    ea5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ea60:	d002      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea62:	23dd      	movs	r3, #221	; 0xdd
    ea64:	7033      	strb	r3, [r6, #0]
    ea66:	e7e1      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea68:	7b22      	ldrb	r2, [r4, #12]
    ea6a:	7b63      	ldrb	r3, [r4, #13]
    ea6c:	f88d 200c 	strb.w	r2, [sp, #12]
    ea70:	7ba2      	ldrb	r2, [r4, #14]
    ea72:	f88d 300d 	strb.w	r3, [sp, #13]
    ea76:	f88d 200e 	strb.w	r2, [sp, #14]
    ea7a:	7be3      	ldrb	r3, [r4, #15]
    ea7c:	f88d 300f 	strb.w	r3, [sp, #15]
    ea80:	a903      	add	r1, sp, #12
    ea82:	a802      	add	r0, sp, #8
    ea84:	2204      	movs	r2, #4
    ea86:	f025 ffcb 	bl	34a20 <memcpy>
    ea8a:	9d02      	ldr	r5, [sp, #8]
    ea8c:	f105 0318 	add.w	r3, r5, #24
    ea90:	42bb      	cmp	r3, r7
    ea92:	d002      	beq.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea94:	23d8      	movs	r3, #216	; 0xd8
    ea96:	7033      	strb	r3, [r6, #0]
    ea98:	e7c8      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea9a:	aa01      	add	r2, sp, #4
    ea9c:	4620      	mov	r0, r4
    ea9e:	f105 0110 	add.w	r1, r5, #16
    eaa2:	f003 f86f 	bl	11b84 <bsec_crcCcitt2>
    eaa6:	1960      	adds	r0, r4, r5
    eaa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    eaac:	7d03      	ldrb	r3, [r0, #20]
    eaae:	429a      	cmp	r2, r3
    eab0:	d002      	beq.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    eab2:	23dc      	movs	r3, #220	; 0xdc
    eab4:	7033      	strb	r3, [r6, #0]
    eab6:	e7b9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    eab8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    eabc:	7d43      	ldrb	r3, [r0, #21]
    eabe:	429a      	cmp	r2, r3
    eac0:	d1f7      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac2:	7d83      	ldrb	r3, [r0, #22]
    eac4:	2b00      	cmp	r3, #0
    eac6:	d1f4      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac8:	7dc3      	ldrb	r3, [r0, #23]
    eaca:	2b00      	cmp	r3, #0
    eacc:	d1f1      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eace:	990e      	ldr	r1, [sp, #56]	; 0x38
    ead0:	2210      	movs	r2, #16
    ead2:	600a      	str	r2, [r1, #0]
    ead4:	7033      	strb	r3, [r6, #0]
    ead6:	e7a9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ead8:	01040704 	.word	0x01040704

0000eadc <bsec_b_Bsec_setHyperConfiguration>:
    eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eae0:	b0bc      	sub	sp, #240	; 0xf0
    eae2:	ab03      	add	r3, sp, #12
    eae4:	ae04      	add	r6, sp, #16
    eae6:	e9cd 3600 	strd	r3, r6, [sp]
    eaea:	4604      	mov	r4, r0
    eaec:	f10d 030b 	add.w	r3, sp, #11
    eaf0:	20fe      	movs	r0, #254	; 0xfe
    eaf2:	460f      	mov	r7, r1
    eaf4:	f002 ff9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    eaf8:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    eafc:	2800      	cmp	r0, #0
    eafe:	d166      	bne.n	ebce <bsec_b_Bsec_setHyperConfiguration+0xf2>
    eb00:	2502      	movs	r5, #2
    eb02:	f504 787c 	add.w	r8, r4, #1008	; 0x3f0
    eb06:	1e6b      	subs	r3, r5, #1
    eb08:	b2db      	uxtb	r3, r3
    eb0a:	3b02      	subs	r3, #2
    eb0c:	2b05      	cmp	r3, #5
    eb0e:	d804      	bhi.n	eb1a <bsec_b_Bsec_setHyperConfiguration+0x3e>
    eb10:	e8df f003 	tbb	[pc, r3]
    eb14:	6b77838a 	.word	0x6b77838a
    eb18:	0e60      	.short	0x0e60
    eb1a:	4631      	mov	r1, r6
    eb1c:	4638      	mov	r0, r7
    eb1e:	f001 f891 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    eb22:	2d08      	cmp	r5, #8
    eb24:	f884 0457 	strb.w	r0, [r4, #1111]	; 0x457
    eb28:	d008      	beq.n	eb3c <bsec_b_Bsec_setHyperConfiguration+0x60>
    eb2a:	3501      	adds	r5, #1
    eb2c:	b2ed      	uxtb	r5, r5
    eb2e:	e7ea      	b.n	eb06 <bsec_b_Bsec_setHyperConfiguration+0x2a>
    eb30:	4631      	mov	r1, r6
    eb32:	4638      	mov	r0, r7
    eb34:	f000 ffd2 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
    eb38:	f8a4 040e 	strh.w	r0, [r4, #1038]	; 0x40e
    eb3c:	2300      	movs	r3, #0
    eb3e:	f8a4 3410 	strh.w	r3, [r4, #1040]	; 0x410
    eb42:	f204 35ee 	addw	r5, r4, #1006	; 0x3ee
    eb46:	f204 3346 	addw	r3, r4, #838	; 0x346
    eb4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    eb4e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    eb52:	4282      	cmp	r2, r0
    eb54:	d005      	beq.n	eb62 <bsec_b_Bsec_setHyperConfiguration+0x86>
    eb56:	f8b4 1410 	ldrh.w	r1, [r4, #1040]	; 0x410
    eb5a:	4291      	cmp	r1, r2
    eb5c:	bf38      	it	cc
    eb5e:	f8a4 2410 	strhcc.w	r2, [r4, #1040]	; 0x410
    eb62:	42ab      	cmp	r3, r5
    eb64:	d1f3      	bne.n	eb4e <bsec_b_Bsec_setHyperConfiguration+0x72>
    eb66:	4834      	ldr	r0, [pc, #208]	; (ec38 <bsec_b_Bsec_setHyperConfiguration+0x15c>)
    eb68:	4d34      	ldr	r5, [pc, #208]	; (ec3c <bsec_b_Bsec_setHyperConfiguration+0x160>)
    eb6a:	4f35      	ldr	r7, [pc, #212]	; (ec40 <bsec_b_Bsec_setHyperConfiguration+0x164>)
    eb6c:	2300      	movs	r3, #0
    eb6e:	2601      	movs	r6, #1
    eb70:	fa40 f203 	asr.w	r2, r0, r3
    eb74:	07d2      	lsls	r2, r2, #31
    eb76:	d516      	bpl.n	eba6 <bsec_b_Bsec_setHyperConfiguration+0xca>
    eb78:	5dd9      	ldrb	r1, [r3, r7]
    eb7a:	5d5a      	ldrb	r2, [r3, r5]
    eb7c:	4429      	add	r1, r5
    eb7e:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    eb82:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    eb86:	f834 c012 	ldrh.w	ip, [r4, r2, lsl #1]
    eb8a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    eb8e:	3901      	subs	r1, #1
    eb90:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    eb94:	45e6      	cmp	lr, ip
    eb96:	bf1c      	itt	ne
    eb98:	1909      	addne	r1, r1, r4
    eb9a:	f881 6446 	strbne.w	r6, [r1, #1094]	; 0x446
    eb9e:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    eba2:	f884 645a 	strb.w	r6, [r4, #1114]	; 0x45a
    eba6:	3301      	adds	r3, #1
    eba8:	2b15      	cmp	r3, #21
    ebaa:	d1e1      	bne.n	eb70 <bsec_b_Bsec_setHyperConfiguration+0x94>
    ebac:	f204 4345 	addw	r3, r4, #1093	; 0x445
    ebb0:	f204 4153 	addw	r1, r4, #1107	; 0x453
    ebb4:	2201      	movs	r2, #1
    ebb6:	f803 2f01 	strb.w	r2, [r3, #1]!
    ebba:	428b      	cmp	r3, r1
    ebbc:	d1fb      	bne.n	ebb6 <bsec_b_Bsec_setHyperConfiguration+0xda>
    ebbe:	f894 345a 	ldrb.w	r3, [r4, #1114]	; 0x45a
    ebc2:	b113      	cbz	r3, ebca <bsec_b_Bsec_setHyperConfiguration+0xee>
    ebc4:	4620      	mov	r0, r4
    ebc6:	f7ff fa9f 	bl	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    ebca:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    ebce:	b03c      	add	sp, #240	; 0xf0
    ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd4:	aa0b      	add	r2, sp, #44	; 0x2c
    ebd6:	4631      	mov	r1, r6
    ebd8:	4638      	mov	r0, r7
    ebda:	f001 f93d 	bl	fe58 <bsec_k_Entity_parseAndDeserialize>
    ebde:	221c      	movs	r2, #28
    ebe0:	a90b      	add	r1, sp, #44	; 0x2c
    ebe2:	4640      	mov	r0, r8
    ebe4:	f025 ff1c 	bl	34a20 <memcpy>
    ebe8:	e79f      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ebea:	aa12      	add	r2, sp, #72	; 0x48
    ebec:	4631      	mov	r1, r6
    ebee:	4638      	mov	r0, r7
    ebf0:	f001 f8f0 	bl	fdd4 <bsec_j_Entity_parseAndDeserialize>
    ebf4:	a912      	add	r1, sp, #72	; 0x48
    ebf6:	22a8      	movs	r2, #168	; 0xa8
    ebf8:	f504 7052 	add.w	r0, r4, #840	; 0x348
    ebfc:	f025 ff10 	bl	34a20 <memcpy>
    ec00:	e793      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec02:	aa05      	add	r2, sp, #20
    ec04:	4631      	mov	r1, r6
    ec06:	4638      	mov	r0, r7
    ec08:	f001 f8a2 	bl	fd50 <bsec_i_Entity_parseAndDeserialize>
    ec0c:	a905      	add	r1, sp, #20
    ec0e:	2218      	movs	r2, #24
    ec10:	f204 4012 	addw	r0, r4, #1042	; 0x412
    ec14:	f025 ff04 	bl	34a20 <memcpy>
    ec18:	e787      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec1a:	4631      	mov	r1, r6
    ec1c:	4638      	mov	r0, r7
    ec1e:	f001 f811 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec22:	f884 0459 	strb.w	r0, [r4, #1113]	; 0x459
    ec26:	e780      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec28:	4631      	mov	r1, r6
    ec2a:	4638      	mov	r0, r7
    ec2c:	f001 f80a 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec30:	f884 0458 	strb.w	r0, [r4, #1112]	; 0x458
    ec34:	e779      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec36:	bf00      	nop
    ec38:	001279ef 	.word	0x001279ef
    ec3c:	00036438 	.word	0x00036438
    ec40:	0003631c 	.word	0x0003631c

0000ec44 <bsec_b_Bsec_setHyperState>:
    ec44:	2903      	cmp	r1, #3
    ec46:	d916      	bls.n	ec76 <bsec_b_Bsec_setHyperState+0x32>
    ec48:	b510      	push	{r4, lr}
    ec4a:	b082      	sub	sp, #8
    ec4c:	7802      	ldrb	r2, [r0, #0]
    ec4e:	7843      	ldrb	r3, [r0, #1]
    ec50:	f88d 2004 	strb.w	r2, [sp, #4]
    ec54:	4604      	mov	r4, r0
    ec56:	2202      	movs	r2, #2
    ec58:	a901      	add	r1, sp, #4
    ec5a:	f10d 0006 	add.w	r0, sp, #6
    ec5e:	f88d 3005 	strb.w	r3, [sp, #5]
    ec62:	f025 fedd 	bl	34a20 <memcpy>
    ec66:	78a3      	ldrb	r3, [r4, #2]
    ec68:	2bfe      	cmp	r3, #254	; 0xfe
    ec6a:	bf0c      	ite	eq
    ec6c:	2000      	moveq	r0, #0
    ec6e:	f06f 0063 	mvnne.w	r0, #99	; 0x63
    ec72:	b002      	add	sp, #8
    ec74:	bd10      	pop	{r4, pc}
    ec76:	f06f 0067 	mvn.w	r0, #103	; 0x67
    ec7a:	4770      	bx	lr

0000ec7c <bsec_ChannelHub_isChannelReady.part.0>:
    ec7c:	3901      	subs	r1, #1
    ec7e:	4b19      	ldr	r3, [pc, #100]	; (ece4 <bsec_ChannelHub_isChannelReady.part.0+0x68>)
    ec80:	5c5b      	ldrb	r3, [r3, r1]
    ec82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ec86:	b470      	push	{r4, r5, r6}
    ec88:	f8b3 429a 	ldrh.w	r4, [r3, #666]	; 0x29a
    ec8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec90:	4294      	cmp	r4, r2
    ec92:	d006      	beq.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ec94:	4a14      	ldr	r2, [pc, #80]	; (ece8 <bsec_ChannelHub_isChannelReady.part.0+0x6c>)
    ec96:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
    ec9a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
    ec9e:	43a2      	bics	r2, r4
    eca0:	d002      	beq.n	eca8 <bsec_ChannelHub_isChannelReady.part.0+0x2c>
    eca2:	2000      	movs	r0, #0
    eca4:	bc70      	pop	{r4, r5, r6}
    eca6:	4770      	bx	lr
    eca8:	4a10      	ldr	r2, [pc, #64]	; (ecec <bsec_ChannelHub_isChannelReady.part.0+0x70>)
    ecaa:	f8d0 5280 	ldr.w	r5, [r0, #640]	; 0x280
    ecae:	5652      	ldrsb	r2, [r2, r1]
    ecb0:	43aa      	bics	r2, r5
    ecb2:	d1f6      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecb4:	f8b3 52de 	ldrh.w	r5, [r3, #734]	; 0x2de
    ecb8:	f8b3 62d2 	ldrh.w	r6, [r3, #722]	; 0x2d2
    ecbc:	1c6a      	adds	r2, r5, #1
    ecbe:	b295      	uxth	r5, r2
    ecc0:	fbb5 f2f6 	udiv	r2, r5, r6
    ecc4:	fb06 5212 	mls	r2, r6, r2, r5
    ecc8:	b292      	uxth	r2, r2
    ecca:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
    ecce:	2a00      	cmp	r2, #0
    ecd0:	d1e7      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecd2:	2201      	movs	r2, #1
    ecd4:	fa02 f301 	lsl.w	r3, r2, r1
    ecd8:	4323      	orrs	r3, r4
    ecda:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ecde:	4610      	mov	r0, r2
    ece0:	e7e0      	b.n	eca4 <bsec_ChannelHub_isChannelReady.part.0+0x28>
    ece2:	bf00      	nop
    ece4:	000363ac 	.word	0x000363ac
    ece8:	0003638c 	.word	0x0003638c
    ecec:	000363a0 	.word	0x000363a0

0000ecf0 <bsec_ChannelHub_ChannelHub>:
    ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	f001 fff6 	bl	10ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>
    ecf8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    ecfc:	f002 fcbc 	bl	11678 <bsec_SensorStatusTracker_SensorStatusTracker>
    ed00:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ed04:	f002 fa02 	bl	1110c <bsec_IaqEstimator_IaqEstimator>
    ed08:	f104 0068 	add.w	r0, r4, #104	; 0x68
    ed0c:	f001 faaa 	bl	10264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>
    ed10:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    ed14:	f7fd fdfc 	bl	c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>
    ed18:	210a      	movs	r1, #10
    ed1a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    ed1e:	f002 f8b9 	bl	10e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>
    ed22:	2600      	movs	r6, #0
    ed24:	f504 730a 	add.w	r3, r4, #552	; 0x228
    ed28:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    ed2c:	f504 7512 	add.w	r5, r4, #584	; 0x248
    ed30:	2000      	movs	r0, #0
    ed32:	2100      	movs	r1, #0
    ed34:	f843 6b04 	str.w	r6, [r3], #4
    ed38:	42ab      	cmp	r3, r5
    ed3a:	e8e2 0102 	strd	r0, r1, [r2], #8
    ed3e:	d1f9      	bne.n	ed34 <bsec_ChannelHub_ChannelHub+0x44>
    ed40:	2000      	movs	r0, #0
    ed42:	f04f 0c00 	mov.w	ip, #0
    ed46:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    ed4a:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    ed4e:	f204 2283 	addw	r2, r4, #643	; 0x283
    ed52:	f504 7520 	add.w	r5, r4, #640	; 0x280
    ed56:	2600      	movs	r6, #0
    ed58:	2700      	movs	r7, #0
    ed5a:	f843 cb04 	str.w	ip, [r3], #4
    ed5e:	42ab      	cmp	r3, r5
    ed60:	e9e1 6702 	strd	r6, r7, [r1, #8]!
    ed64:	f802 0f01 	strb.w	r0, [r2, #1]!
    ed68:	d1f7      	bne.n	ed5a <bsec_ChannelHub_ChannelHub+0x6a>
    ed6a:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
    ed6e:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
    ed72:	f504 7327 	add.w	r3, r4, #668	; 0x29c
    ed76:	f504 752a 	add.w	r5, r4, #680	; 0x2a8
    ed7a:	2001      	movs	r0, #1
    ed7c:	2100      	movs	r1, #0
    ed7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed82:	8718      	strh	r0, [r3, #56]	; 0x38
    ed84:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    ed88:	f823 2b02 	strh.w	r2, [r3], #2
    ed8c:	429d      	cmp	r5, r3
    ed8e:	d1f8      	bne.n	ed82 <bsec_ChannelHub_ChannelHub+0x92>
    ed90:	f8a4 22a8 	strh.w	r2, [r4, #680]	; 0x2a8
    ed94:	f8a4 22aa 	strh.w	r2, [r4, #682]	; 0x2aa
    ed98:	f8a4 22ac 	strh.w	r2, [r4, #684]	; 0x2ac
    ed9c:	f8a4 22ae 	strh.w	r2, [r4, #686]	; 0x2ae
    eda0:	f8a4 22b0 	strh.w	r2, [r4, #688]	; 0x2b0
    eda4:	f8a4 22b2 	strh.w	r2, [r4, #690]	; 0x2b2
    eda8:	f8a4 22b4 	strh.w	r2, [r4, #692]	; 0x2b4
    edac:	f8a4 22b6 	strh.w	r2, [r4, #694]	; 0x2b6
    edb0:	f204 23b6 	addw	r3, r4, #694	; 0x2b6
    edb4:	f204 21d2 	addw	r1, r4, #722	; 0x2d2
    edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    edbc:	f823 2f02 	strh.w	r2, [r3, #2]!
    edc0:	428b      	cmp	r3, r1
    edc2:	d1fb      	bne.n	edbc <bsec_ChannelHub_ChannelHub+0xcc>
    edc4:	4620      	mov	r0, r4
    edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000edc8 <bsec_ChannelHub_configureChannel>:
    edc8:	b410      	push	{r4}
    edca:	1e4c      	subs	r4, r1, #1
    edcc:	4611      	mov	r1, r2
    edce:	2c09      	cmp	r4, #9
    edd0:	d82b      	bhi.n	ee2a <bsec_ChannelHub_configureChannel+0x62>
    edd2:	e8df f004 	tbb	[pc, r4]
    edd6:	110b      	.short	0x110b
    edd8:	2a232a17 	.word	0x2a232a17
    eddc:	1c052a2a 	.word	0x1c052a2a
    ede0:	461a      	mov	r2, r3
    ede2:	30c8      	adds	r0, #200	; 0xc8
    ede4:	f85d 4b04 	ldr.w	r4, [sp], #4
    ede8:	f7fd bdda 	b.w	c9a0 <bsec_SensorHeatCompensator_configure>
    edec:	461a      	mov	r2, r3
    edee:	3068      	adds	r0, #104	; 0x68
    edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    edf4:	f001 ba72 	b.w	102dc <bsec_GasHumidityBaselineTracker_configure>
    edf8:	461a      	mov	r2, r3
    edfa:	302c      	adds	r0, #44	; 0x2c
    edfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee00:	f002 bbda 	b.w	115b8 <bsec_b_IaqEstimator_configure>
    ee04:	461a      	mov	r2, r3
    ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee0a:	f001 bf77 	b.w	10cfc <bsec_GasHumidityPreProcessor_configure>
    ee0e:	461a      	mov	r2, r3
    ee10:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    ee14:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee18:	f002 b848 	b.w	10eac <bsec_HumidityTemperatureCorrector_configure>
    ee1c:	461a      	mov	r2, r3
    ee1e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    ee22:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee26:	f002 bde1 	b.w	119ec <bsec_b_SensorStatusTracker_configure>
    ee2a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    ee2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee32:	4770      	bx	lr

0000ee34 <bsec_ChannelHub_do>:
    ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee38:	ed2d 8b02 	vpush	{d8}
    ee3c:	2300      	movs	r3, #0
    ee3e:	b09b      	sub	sp, #108	; 0x6c
    ee40:	ed9f 8aae 	vldr	s16, [pc, #696]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ee44:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ee48:	2105      	movs	r1, #5
    ee4a:	4604      	mov	r4, r0
    ee4c:	f88d 3012 	strb.w	r3, [sp, #18]
    ee50:	f88d 3013 	strb.w	r3, [sp, #19]
    ee54:	ed8d 8a05 	vstr	s16, [sp, #20]
    ee58:	ed8d 8a06 	vstr	s16, [sp, #24]
    ee5c:	ed8d 8a07 	vstr	s16, [sp, #28]
    ee60:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
    ee64:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
    ee68:	ed8d 8a16 	vstr	s16, [sp, #88]	; 0x58
    ee6c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
    ee70:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
    ee74:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
    ee78:	ed8d 8a08 	vstr	s16, [sp, #32]
    ee7c:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
    ee80:	f7ff fefc 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ee84:	2800      	cmp	r0, #0
    ee86:	f000 8090 	beq.w	efaa <bsec_ChannelHub_do+0x176>
    ee8a:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ee8e:	eef4 7a48 	vcmp.f32	s15, s16
    ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee96:	f000 8135 	beq.w	f104 <bsec_ChannelHub_do+0x2d0>
    ee9a:	2103      	movs	r1, #3
    ee9c:	4620      	mov	r0, r4
    ee9e:	4d98      	ldr	r5, [pc, #608]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    eea0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    eea4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    eea8:	f7ff fee8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeac:	2800      	cmp	r0, #0
    eeae:	f040 8088 	bne.w	efc2 <bsec_ChannelHub_do+0x18e>
    eeb2:	2101      	movs	r1, #1
    eeb4:	4620      	mov	r0, r4
    eeb6:	f7ff fee1 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeba:	b138      	cbz	r0, eecc <bsec_ChannelHub_do+0x98>
    eebc:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eec0:	eef5 7a40 	vcmp.f32	s15, #0.0
    eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eec8:	f000 8179 	beq.w	f1be <bsec_ChannelHub_do+0x38a>
    eecc:	2102      	movs	r1, #2
    eece:	4620      	mov	r0, r4
    eed0:	f7ff fed4 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eed4:	b138      	cbz	r0, eee6 <bsec_ChannelHub_do+0xb2>
    eed6:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eeda:	eef5 7a40 	vcmp.f32	s15, #0.0
    eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eee2:	f000 81ab 	beq.w	f23c <bsec_ChannelHub_do+0x408>
    eee6:	2109      	movs	r1, #9
    eee8:	4620      	mov	r0, r4
    eeea:	f7ff fec7 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeee:	b138      	cbz	r0, ef00 <bsec_ChannelHub_do+0xcc>
    eef0:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eef4:	eef5 7a40 	vcmp.f32	s15, #0.0
    eef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eefc:	f000 8250 	beq.w	f3a0 <bsec_ChannelHub_do+0x56c>
    ef00:	ed9f 8a7e 	vldr	s16, [pc, #504]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ef04:	210a      	movs	r1, #10
    ef06:	4620      	mov	r0, r4
    ef08:	f7ff feb8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ef0c:	b138      	cbz	r0, ef1e <bsec_ChannelHub_do+0xea>
    ef0e:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ef12:	eef5 7a40 	vcmp.f32	s15, #0.0
    ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef1a:	f000 8274 	beq.w	f406 <bsec_ChannelHub_do+0x5d2>
    ef1e:	796b      	ldrb	r3, [r5, #5]
    ef20:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef24:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef28:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef2c:	4291      	cmp	r1, r2
    ef2e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef32:	d004      	beq.n	ef3e <bsec_ChannelHub_do+0x10a>
    ef34:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef38:	0757      	lsls	r7, r2, #29
    ef3a:	f100 80bd 	bmi.w	f0b8 <bsec_ChannelHub_do+0x284>
    ef3e:	79ab      	ldrb	r3, [r5, #6]
    ef40:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef44:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef48:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef4c:	4291      	cmp	r1, r2
    ef4e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef52:	d004      	beq.n	ef5e <bsec_ChannelHub_do+0x12a>
    ef54:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef58:	07d0      	lsls	r0, r2, #31
    ef5a:	f100 808b 	bmi.w	f074 <bsec_ChannelHub_do+0x240>
    ef5e:	79eb      	ldrb	r3, [r5, #7]
    ef60:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef64:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef68:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef6c:	4291      	cmp	r1, r2
    ef6e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef72:	d003      	beq.n	ef7c <bsec_ChannelHub_do+0x148>
    ef74:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef78:	0791      	lsls	r1, r2, #30
    ef7a:	d459      	bmi.n	f030 <bsec_ChannelHub_do+0x1fc>
    ef7c:	7a2b      	ldrb	r3, [r5, #8]
    ef7e:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef86:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef8a:	4291      	cmp	r1, r2
    ef8c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    ef90:	d003      	beq.n	ef9a <bsec_ChannelHub_do+0x166>
    ef92:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef96:	0712      	lsls	r2, r2, #28
    ef98:	d428      	bmi.n	efec <bsec_ChannelHub_do+0x1b8>
    ef9a:	2300      	movs	r3, #0
    ef9c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    efa0:	b01b      	add	sp, #108	; 0x6c
    efa2:	ecbd 8b02 	vpop	{d8}
    efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efaa:	4d55      	ldr	r5, [pc, #340]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    efac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    efb0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    efb4:	2103      	movs	r1, #3
    efb6:	4620      	mov	r0, r4
    efb8:	f7ff fe60 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    efbc:	2800      	cmp	r0, #0
    efbe:	f43f af78 	beq.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efc2:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    efc6:	eef5 7a40 	vcmp.f32	s15, #0.0
    efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efce:	f47f af70 	bne.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efd2:	ab07      	add	r3, sp, #28
    efd4:	aa06      	add	r2, sp, #24
    efd6:	a905      	add	r1, sp, #20
    efd8:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    efdc:	edd4 0a8c 	vldr	s1, [r4, #560]	; 0x230
    efe0:	ed94 0a8d 	vldr	s0, [r4, #564]	; 0x234
    efe4:	4620      	mov	r0, r4
    efe6:	f001 fea3 	bl	10d30 <bsec_GasHumidityPreProcessor_doStep>
    efea:	e762      	b.n	eeb2 <bsec_ChannelHub_do+0x7e>
    efec:	f504 72c8 	add.w	r2, r4, #400	; 0x190
    eff0:	e9d2 0100 	ldrd	r0, r1, [r2]
    eff4:	f103 0236 	add.w	r2, r3, #54	; 0x36
    eff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    effc:	f8d4 6234 	ldr.w	r6, [r4, #564]	; 0x234
    f000:	f8c3 6244 	str.w	r6, [r3, #580]	; 0x244
    f004:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f008:	ed9f 0a3c 	vldr	s0, [pc, #240]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f00c:	e9c2 0100 	strd	r0, r1, [r2]
    f010:	f01c fec8 	bl	2bda4 <roundf>
    f014:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f018:	4425      	add	r5, r4
    f01a:	ee17 3a90 	vmov	r3, s15
    f01e:	f885 3284 	strb.w	r3, [r5, #644]	; 0x284
    f022:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f02a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f02e:	e7b4      	b.n	ef9a <bsec_ChannelHub_do+0x166>
    f030:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    f034:	e9d2 0100 	ldrd	r0, r1, [r2]
    f038:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f03c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f040:	f8d4 722c 	ldr.w	r7, [r4, #556]	; 0x22c
    f044:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f048:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f04c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f050:	e9c2 0100 	strd	r0, r1, [r2]
    f054:	f01c fea6 	bl	2bda4 <roundf>
    f058:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f05c:	4426      	add	r6, r4
    f05e:	ee17 3a90 	vmov	r3, s15
    f062:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f066:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f06e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f072:	e783      	b.n	ef7c <bsec_ChannelHub_do+0x148>
    f074:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    f078:	e9d2 0100 	ldrd	r0, r1, [r2]
    f07c:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f084:	f8d4 7228 	ldr.w	r7, [r4, #552]	; 0x228
    f088:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f08c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f090:	ed9f 0a1a 	vldr	s0, [pc, #104]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f094:	e9c2 0100 	strd	r0, r1, [r2]
    f098:	f01c fe84 	bl	2bda4 <roundf>
    f09c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0a0:	4426      	add	r6, r4
    f0a2:	ee17 3a90 	vmov	r3, s15
    f0a6:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0aa:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0b2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0b6:	e752      	b.n	ef5e <bsec_ChannelHub_do+0x12a>
    f0b8:	f504 72c4 	add.w	r2, r4, #392	; 0x188
    f0bc:	e9d2 0100 	ldrd	r0, r1, [r2]
    f0c0:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f0c8:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
    f0cc:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f0d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f0d4:	ed9f 0a09 	vldr	s0, [pc, #36]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f0d8:	e9c2 0100 	strd	r0, r1, [r2]
    f0dc:	f01c fe62 	bl	2bda4 <roundf>
    f0e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0e4:	4426      	add	r6, r4
    f0e6:	ee17 3a90 	vmov	r3, s15
    f0ea:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0ee:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0f2:	f043 0320 	orr.w	r3, r3, #32
    f0f6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0fa:	e720      	b.n	ef3e <bsec_ChannelHub_do+0x10a>
    f0fc:	00000000 	.word	0x00000000
    f100:	00036438 	.word	0x00036438
    f104:	f504 73c8 	add.w	r3, r4, #400	; 0x190
    f108:	e9d3 6700 	ldrd	r6, r7, [r3]
    f10c:	f10d 0112 	add.w	r1, sp, #18
    f110:	ab09      	add	r3, sp, #36	; 0x24
    f112:	f10d 0013 	add.w	r0, sp, #19
    f116:	e9cd 1000 	strd	r1, r0, [sp]
    f11a:	9302      	str	r3, [sp, #8]
    f11c:	f504 7098 	add.w	r0, r4, #304	; 0x130
    f120:	4632      	mov	r2, r6
    f122:	463b      	mov	r3, r7
    f124:	f002 fac4 	bl	116b0 <bsec_SensorStatusTracker_doStep>
    f128:	4dcf      	ldr	r5, [pc, #828]	; (f468 <bsec_ChannelHub_do+0x634>)
    f12a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    f12e:	7aeb      	ldrb	r3, [r5, #11]
    f130:	ee07 2a90 	vmov	s15, r2
    f134:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f138:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f13c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f140:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f144:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f148:	eeb0 0a48 	vmov.f32	s0, s16
    f14c:	e9c2 6700 	strd	r6, r7, [r2]
    f150:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f154:	f01c fe26 	bl	2bda4 <roundf>
    f158:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f15c:	44a0      	add	r8, r4
    f15e:	ee17 2a90 	vmov	r2, s15
    f162:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f166:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f16a:	7b2b      	ldrb	r3, [r5, #12]
    f16c:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f170:	ee07 2a90 	vmov	s15, r2
    f174:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f178:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f17c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f180:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f184:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    f188:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f18c:	eeb0 0a48 	vmov.f32	s0, s16
    f190:	edc0 7a91 	vstr	s15, [r0, #580]	; 0x244
    f194:	e9c2 6700 	strd	r6, r7, [r2]
    f198:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f19c:	f01c fe02 	bl	2bda4 <roundf>
    f1a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f1a4:	eb04 0308 	add.w	r3, r4, r8
    f1a8:	ee17 2a90 	vmov	r2, s15
    f1ac:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f1b0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f1b8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f1bc:	e6fa      	b.n	efb4 <bsec_ChannelHub_do+0x180>
    f1be:	edd4 7a8f 	vldr	s15, [r4, #572]	; 0x23c
    f1c2:	edd4 1a90 	vldr	s3, [r4, #576]	; 0x240
    f1c6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f1ca:	f89d 1012 	ldrb.w	r1, [sp, #18]
    f1ce:	ed9d 1a07 	vldr	s2, [sp, #28]
    f1d2:	eddd 0a06 	vldr	s1, [sp, #24]
    f1d6:	ed9d 0a05 	vldr	s0, [sp, #20]
    f1da:	eef5 7a40 	vcmp.f32	s15, #0.0
    f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1e2:	f10d 0c20 	add.w	ip, sp, #32
    f1e6:	a814      	add	r0, sp, #80	; 0x50
    f1e8:	bf14      	ite	ne
    f1ea:	2301      	movne	r3, #1
    f1ec:	2300      	moveq	r3, #0
    f1ee:	e9cd 0c00 	strd	r0, ip, [sp]
    f1f2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    f1f6:	f001 f8cd 	bl	10394 <bsec_GasHumidityBaselineTracker_doStep>
    f1fa:	7c6b      	ldrb	r3, [r5, #17]
    f1fc:	9808      	ldr	r0, [sp, #32]
    f1fe:	ed9f 0a9b 	vldr	s0, [pc, #620]	; f46c <bsec_ChannelHub_do+0x638>
    f202:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f206:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f20a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f20e:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f212:	e9c2 6700 	strd	r6, r7, [r2]
    f216:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f21a:	f01c fdc3 	bl	2bda4 <roundf>
    f21e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f222:	eb04 0308 	add.w	r3, r4, r8
    f226:	ee17 2a90 	vmov	r2, s15
    f22a:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f22e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f236:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f23a:	e647      	b.n	eecc <bsec_ChannelHub_do+0x98>
    f23c:	a912      	add	r1, sp, #72	; 0x48
    f23e:	aa10      	add	r2, sp, #64	; 0x40
    f240:	ab0e      	add	r3, sp, #56	; 0x38
    f242:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
    f246:	ed9d 0a08 	vldr	s0, [sp, #32]
    f24a:	9300      	str	r3, [sp, #0]
    f24c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    f250:	ab0c      	add	r3, sp, #48	; 0x30
    f252:	aa0a      	add	r2, sp, #40	; 0x28
    f254:	a914      	add	r1, sp, #80	; 0x50
    f256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f25a:	f001 ff87 	bl	1116c <bsec_IaqEstimator_doStep>
    f25e:	782b      	ldrb	r3, [r5, #0]
    f260:	980a      	ldr	r0, [sp, #40]	; 0x28
    f262:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
    f266:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f26a:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f26e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f272:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f276:	e9c2 6700 	strd	r6, r7, [r2]
    f27a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f27e:	f01c fd91 	bl	2bda4 <roundf>
    f282:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f286:	44a0      	add	r8, r4
    f288:	ee17 2a90 	vmov	r2, s15
    f28c:	786b      	ldrb	r3, [r5, #1]
    f28e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f292:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f296:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    f29a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
    f29e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2a2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2a6:	f041 0101 	orr.w	r1, r1, #1
    f2aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ae:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2b2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2b6:	e9c2 6700 	strd	r6, r7, [r2]
    f2ba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2be:	f01c fd71 	bl	2bda4 <roundf>
    f2c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f2c6:	44a0      	add	r8, r4
    f2c8:	ee17 2a90 	vmov	r2, s15
    f2cc:	78ab      	ldrb	r3, [r5, #2]
    f2ce:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f2d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f2d6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    f2da:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
    f2de:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2e2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2e6:	f041 0102 	orr.w	r1, r1, #2
    f2ea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ee:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2f2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2f6:	e9c2 6700 	strd	r6, r7, [r2]
    f2fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2fe:	f01c fd51 	bl	2bda4 <roundf>
    f302:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f306:	44a0      	add	r8, r4
    f308:	ee17 2a90 	vmov	r2, s15
    f30c:	78eb      	ldrb	r3, [r5, #3]
    f30e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f312:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f316:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f31a:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
    f31e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f322:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f326:	f041 0104 	orr.w	r1, r1, #4
    f32a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f32e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f332:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f336:	e9c2 6700 	strd	r6, r7, [r2]
    f33a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f33e:	f01c fd31 	bl	2bda4 <roundf>
    f342:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f346:	44a0      	add	r8, r4
    f348:	ee17 2a90 	vmov	r2, s15
    f34c:	7d2b      	ldrb	r3, [r5, #20]
    f34e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f352:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f356:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    f35a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    f35e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f362:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f366:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f36a:	f041 0108 	orr.w	r1, r1, #8
    f36e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f372:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f376:	e9c2 6700 	strd	r6, r7, [r2]
    f37a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f37e:	f01c fd11 	bl	2bda4 <roundf>
    f382:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f386:	eb04 0308 	add.w	r3, r4, r8
    f38a:	ee17 2a90 	vmov	r2, s15
    f38e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f392:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f39a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f39e:	e5a2      	b.n	eee6 <bsec_ChannelHub_do+0xb2>
    f3a0:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
    f3a8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    f3ac:	edd4 0a8e 	vldr	s1, [r4, #568]	; 0x238
    f3b0:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f3b4:	9302      	str	r3, [sp, #8]
    f3b6:	4632      	mov	r2, r6
    f3b8:	463b      	mov	r3, r7
    f3ba:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f3be:	e9cd 8900 	strd	r8, r9, [sp]
    f3c2:	f7fd fb37 	bl	ca34 <bsec_SensorHeatCompensator_doStep>
    f3c6:	7b6b      	ldrb	r3, [r5, #13]
    f3c8:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f3cc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f3d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f3d4:	eeb0 8a40 	vmov.f32	s16, s0
    f3d8:	ed81 8a91 	vstr	s16, [r1, #580]	; 0x244
    f3dc:	ed9f 0a23 	vldr	s0, [pc, #140]	; f46c <bsec_ChannelHub_do+0x638>
    f3e0:	e9c2 8900 	strd	r8, r9, [r2]
    f3e4:	1e5e      	subs	r6, r3, #1
    f3e6:	f01c fcdd 	bl	2bda4 <roundf>
    f3ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f3ee:	19a3      	adds	r3, r4, r6
    f3f0:	ee17 2a90 	vmov	r2, s15
    f3f4:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f3f8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f3fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f400:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f404:	e57e      	b.n	ef04 <bsec_ChannelHub_do+0xd0>
    f406:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f40a:	eef0 0a48 	vmov.f32	s1, s16
    f40e:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    f412:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f416:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    f41a:	e9d3 6700 	ldrd	r6, r7, [r3]
    f41e:	f001 fd5f 	bl	10ee0 <bsec_HumidityTemperatureCorrector_doStep>
    f422:	7bab      	ldrb	r3, [r5, #14]
    f424:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f428:	eef0 7a40 	vmov.f32	s15, s0
    f42c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f430:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f434:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f438:	ed9f 0a0c 	vldr	s0, [pc, #48]	; f46c <bsec_ChannelHub_do+0x638>
    f43c:	edcd 7a05 	vstr	s15, [sp, #20]
    f440:	e9c2 6700 	strd	r6, r7, [r2]
    f444:	1e5e      	subs	r6, r3, #1
    f446:	f01c fcad 	bl	2bda4 <roundf>
    f44a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f44e:	19a3      	adds	r3, r4, r6
    f450:	ee17 2a90 	vmov	r2, s15
    f454:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f458:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f45c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f460:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f464:	e55b      	b.n	ef1e <bsec_ChannelHub_do+0xea>
    f466:	bf00      	nop
    f468:	00036438 	.word	0x00036438
    f46c:	00000000 	.word	0x00000000

0000f470 <bsec_ChannelHub_getChannelConfiguration>:
    f470:	b5f0      	push	{r4, r5, r6, r7, lr}
    f472:	b085      	sub	sp, #20
    f474:	2400      	movs	r4, #0
    f476:	3901      	subs	r1, #1
    f478:	461f      	mov	r7, r3
    f47a:	4606      	mov	r6, r0
    f47c:	4615      	mov	r5, r2
    f47e:	9403      	str	r4, [sp, #12]
    f480:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f484:	2909      	cmp	r1, #9
    f486:	d85c      	bhi.n	f542 <bsec_ChannelHub_getChannelConfiguration+0xd2>
    f488:	e8df f001 	tbb	[pc, r1]
    f48c:	5b1a130c 	.word	0x5b1a130c
    f490:	5b5b5b53 	.word	0x5b5b5b53
    f494:	4b05      	.short	0x4b05
    f496:	463a      	mov	r2, r7
    f498:	4629      	mov	r1, r5
    f49a:	30c8      	adds	r0, #200	; 0xc8
    f49c:	f7fd fb4e 	bl	cb3c <bsec_SensorHeatCompensator_getConfiguration>
    f4a0:	b005      	add	sp, #20
    f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4a4:	463a      	mov	r2, r7
    f4a6:	4629      	mov	r1, r5
    f4a8:	3068      	adds	r0, #104	; 0x68
    f4aa:	f001 f9bf 	bl	1082c <bsec_GasHumidityBaselineTracker_getConfiguration>
    f4ae:	b005      	add	sp, #20
    f4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4b2:	463a      	mov	r2, r7
    f4b4:	4629      	mov	r1, r5
    f4b6:	302c      	adds	r0, #44	; 0x2c
    f4b8:	f001 ff3e 	bl	11338 <bsec_IaqEstimator_getConfiguration>
    f4bc:	b005      	add	sp, #20
    f4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4c0:	aa04      	add	r2, sp, #16
    f4c2:	2401      	movs	r4, #1
    f4c4:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f4c8:	4629      	mov	r1, r5
    f4ca:	7800      	ldrb	r0, [r0, #0]
    f4cc:	f002 fade 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4d4:	9003      	str	r0, [sp, #12]
    f4d6:	b1a3      	cbz	r3, f502 <bsec_ChannelHub_getChannelConfiguration+0x92>
    f4d8:	3620      	adds	r6, #32
    f4da:	e003      	b.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f4dc:	3401      	adds	r4, #1
    f4de:	b2e4      	uxtb	r4, r4
    f4e0:	42a3      	cmp	r3, r4
    f4e2:	d30d      	bcc.n	f500 <bsec_ChannelHub_getChannelConfiguration+0x90>
    f4e4:	2c01      	cmp	r4, #1
    f4e6:	d1f9      	bne.n	f4dc <bsec_ChannelHub_getChannelConfiguration+0x6c>
    f4e8:	ab03      	add	r3, sp, #12
    f4ea:	463a      	mov	r2, r7
    f4ec:	4629      	mov	r1, r5
    f4ee:	4630      	mov	r0, r6
    f4f0:	f000 fa8e 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f4f4:	3401      	adds	r4, #1
    f4f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4fa:	b2e4      	uxtb	r4, r4
    f4fc:	42a3      	cmp	r3, r4
    f4fe:	d2f1      	bcs.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f500:	9803      	ldr	r0, [sp, #12]
    f502:	a904      	add	r1, sp, #16
    f504:	2202      	movs	r2, #2
    f506:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f50a:	a802      	add	r0, sp, #8
    f50c:	f025 fa88 	bl	34a20 <memcpy>
    f510:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f514:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f518:	9803      	ldr	r0, [sp, #12]
    f51a:	702a      	strb	r2, [r5, #0]
    f51c:	706b      	strb	r3, [r5, #1]
    f51e:	b005      	add	sp, #20
    f520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f522:	463a      	mov	r2, r7
    f524:	4629      	mov	r1, r5
    f526:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f52a:	f001 fd23 	bl	10f74 <bsec_HumidityTemperatureCorrector_getConfiguration>
    f52e:	b005      	add	sp, #20
    f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f532:	463a      	mov	r2, r7
    f534:	4629      	mov	r1, r5
    f536:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f53a:	f002 f93f 	bl	117bc <bsec_SensorStatusTracker_getConfiguration>
    f53e:	b005      	add	sp, #20
    f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f542:	2000      	movs	r0, #0
    f544:	e7ac      	b.n	f4a0 <bsec_ChannelHub_getChannelConfiguration+0x30>
    f546:	bf00      	nop

0000f548 <bsec_ChannelHub_getChannelState>:
    f548:	b5f0      	push	{r4, r5, r6, r7, lr}
    f54a:	b085      	sub	sp, #20
    f54c:	2400      	movs	r4, #0
    f54e:	3901      	subs	r1, #1
    f550:	461f      	mov	r7, r3
    f552:	4606      	mov	r6, r0
    f554:	4615      	mov	r5, r2
    f556:	9403      	str	r4, [sp, #12]
    f558:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f55c:	2909      	cmp	r1, #9
    f55e:	d85c      	bhi.n	f61a <bsec_ChannelHub_getChannelState+0xd2>
    f560:	e8df f001 	tbb	[pc, r1]
    f564:	5b1a130c 	.word	0x5b1a130c
    f568:	5b5b5b53 	.word	0x5b5b5b53
    f56c:	4b05      	.short	0x4b05
    f56e:	463a      	mov	r2, r7
    f570:	4629      	mov	r1, r5
    f572:	30c8      	adds	r0, #200	; 0xc8
    f574:	f7fd fb46 	bl	cc04 <bsec_SensorHeatCompensator_getState>
    f578:	b005      	add	sp, #20
    f57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f57c:	463a      	mov	r2, r7
    f57e:	4629      	mov	r1, r5
    f580:	3068      	adds	r0, #104	; 0x68
    f582:	f001 f9cd 	bl	10920 <bsec_GasHumidityBaselineTracker_getState>
    f586:	b005      	add	sp, #20
    f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58a:	463a      	mov	r2, r7
    f58c:	4629      	mov	r1, r5
    f58e:	302c      	adds	r0, #44	; 0x2c
    f590:	f001 ff50 	bl	11434 <bsec_IaqEstimator_getState>
    f594:	b005      	add	sp, #20
    f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f598:	aa04      	add	r2, sp, #16
    f59a:	2401      	movs	r4, #1
    f59c:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f5a0:	4629      	mov	r1, r5
    f5a2:	7800      	ldrb	r0, [r0, #0]
    f5a4:	f002 fa72 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5ac:	9003      	str	r0, [sp, #12]
    f5ae:	b1a3      	cbz	r3, f5da <bsec_ChannelHub_getChannelState+0x92>
    f5b0:	3610      	adds	r6, #16
    f5b2:	e003      	b.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5b4:	3401      	adds	r4, #1
    f5b6:	b2e4      	uxtb	r4, r4
    f5b8:	42a3      	cmp	r3, r4
    f5ba:	d30d      	bcc.n	f5d8 <bsec_ChannelHub_getChannelState+0x90>
    f5bc:	2c01      	cmp	r4, #1
    f5be:	d1f9      	bne.n	f5b4 <bsec_ChannelHub_getChannelState+0x6c>
    f5c0:	ab03      	add	r3, sp, #12
    f5c2:	463a      	mov	r2, r7
    f5c4:	4629      	mov	r1, r5
    f5c6:	4630      	mov	r0, r6
    f5c8:	f000 fa22 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f5cc:	3401      	adds	r4, #1
    f5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5d2:	b2e4      	uxtb	r4, r4
    f5d4:	42a3      	cmp	r3, r4
    f5d6:	d2f1      	bcs.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5d8:	9803      	ldr	r0, [sp, #12]
    f5da:	a904      	add	r1, sp, #16
    f5dc:	2202      	movs	r2, #2
    f5de:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f5e2:	a802      	add	r0, sp, #8
    f5e4:	f025 fa1c 	bl	34a20 <memcpy>
    f5e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f5ec:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f5f0:	9803      	ldr	r0, [sp, #12]
    f5f2:	702a      	strb	r2, [r5, #0]
    f5f4:	706b      	strb	r3, [r5, #1]
    f5f6:	b005      	add	sp, #20
    f5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5fa:	463a      	mov	r2, r7
    f5fc:	4629      	mov	r1, r5
    f5fe:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f602:	f001 fced 	bl	10fe0 <bsec_HumidityTemperatureCorrector_getState>
    f606:	b005      	add	sp, #20
    f608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f60a:	463a      	mov	r2, r7
    f60c:	4629      	mov	r1, r5
    f60e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f612:	f002 f915 	bl	11840 <bsec_SensorStatusTracker_getState>
    f616:	b005      	add	sp, #20
    f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f61a:	2000      	movs	r0, #0
    f61c:	e7ac      	b.n	f578 <bsec_ChannelHub_getChannelState+0x30>
    f61e:	bf00      	nop

0000f620 <bsec_ChannelHub_getOutput>:
    f620:	b4f0      	push	{r4, r5, r6, r7}
    f622:	3901      	subs	r1, #1
    f624:	4c0f      	ldr	r4, [pc, #60]	; (f664 <bsec_ChannelHub_getOutput+0x44>)
    f626:	9d04      	ldr	r5, [sp, #16]
    f628:	5c64      	ldrb	r4, [r4, r1]
    f62a:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    f62e:	f104 0636 	add.w	r6, r4, #54	; 0x36
    f632:	f8d7 7244 	ldr.w	r7, [r7, #580]	; 0x244
    f636:	6017      	str	r7, [r2, #0]
    f638:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    f63c:	e9d6 6700 	ldrd	r6, r7, [r6]
    f640:	e9c3 6700 	strd	r6, r7, [r3]
    f644:	4404      	add	r4, r0
    f646:	2201      	movs	r2, #1
    f648:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
    f64c:	702b      	strb	r3, [r5, #0]
    f64e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
    f652:	fa02 f101 	lsl.w	r1, r2, r1
    f656:	ea23 0301 	bic.w	r3, r3, r1
    f65a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
    f65e:	bcf0      	pop	{r4, r5, r6, r7}
    f660:	4770      	bx	lr
    f662:	bf00      	nop
    f664:	00036438 	.word	0x00036438

0000f668 <bsec_ChannelHub_isOutputValid>:
    f668:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
    f66c:	3901      	subs	r1, #1
    f66e:	b2c9      	uxtb	r1, r1
    f670:	4108      	asrs	r0, r1
    f672:	f000 0001 	and.w	r0, r0, #1
    f676:	4770      	bx	lr

0000f678 <bsec_ChannelHub_recalculateDownsampling>:
    f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f67c:	4932      	ldr	r1, [pc, #200]	; (f748 <bsec_ChannelHub_recalculateDownsampling+0xd0>)
    f67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; f754 <bsec_ChannelHub_recalculateDownsampling+0xdc>
    f682:	4a32      	ldr	r2, [pc, #200]	; (f74c <bsec_ChannelHub_recalculateDownsampling+0xd4>)
    f684:	f8df 90d0 	ldr.w	r9, [pc, #208]	; f758 <bsec_ChannelHub_recalculateDownsampling+0xe0>
    f688:	2500      	movs	r5, #0
    f68a:	f240 3717 	movw	r7, #791	; 0x317
    f68e:	f64f 7cff 	movw	ip, #65535	; 0xffff
    f692:	fa47 f305 	asr.w	r3, r7, r5
    f696:	07de      	lsls	r6, r3, #31
    f698:	d54e      	bpl.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f69a:	4b2d      	ldr	r3, [pc, #180]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f69c:	f813 e005 	ldrb.w	lr, [r3, r5]
    f6a0:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
    f6a4:	f8be 829a 	ldrh.w	r8, [lr, #666]	; 0x29a
    f6a8:	45e0      	cmp	r8, ip
    f6aa:	d045      	beq.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f6ac:	2300      	movs	r3, #0
    f6ae:	461e      	mov	r6, r3
    f6b0:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    f6b4:	fa47 f403 	asr.w	r4, r7, r3
    f6b8:	07e4      	lsls	r4, r4, #31
    f6ba:	d50f      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6bc:	f93b 400a 	ldrsh.w	r4, [fp, sl]
    f6c0:	411c      	asrs	r4, r3
    f6c2:	07e4      	lsls	r4, r4, #31
    f6c4:	d50a      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6c6:	4c22      	ldr	r4, [pc, #136]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f6c8:	5ce4      	ldrb	r4, [r4, r3]
    f6ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f6ce:	f8b4 429a 	ldrh.w	r4, [r4, #666]	; 0x29a
    f6d2:	4564      	cmp	r4, ip
    f6d4:	d002      	beq.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6d6:	42a6      	cmp	r6, r4
    f6d8:	bf38      	it	cc
    f6da:	4626      	movcc	r6, r4
    f6dc:	3301      	adds	r3, #1
    f6de:	2b0a      	cmp	r3, #10
    f6e0:	d1e8      	bne.n	f6b4 <bsec_ChannelHub_recalculateDownsampling+0x3c>
    f6e2:	2300      	movs	r3, #0
    f6e4:	fa42 f403 	asr.w	r4, r2, r3
    f6e8:	07e4      	lsls	r4, r4, #31
    f6ea:	d50f      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6ec:	f991 4000 	ldrsb.w	r4, [r1]
    f6f0:	411c      	asrs	r4, r3
    f6f2:	07e4      	lsls	r4, r4, #31
    f6f4:	d50a      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6f6:	f813 4009 	ldrb.w	r4, [r3, r9]
    f6fa:	f204 1453 	addw	r4, r4, #339	; 0x153
    f6fe:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    f702:	4564      	cmp	r4, ip
    f704:	d002      	beq.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f706:	42a6      	cmp	r6, r4
    f708:	bf38      	it	cc
    f70a:	4626      	movcc	r6, r4
    f70c:	3301      	adds	r3, #1
    f70e:	2b18      	cmp	r3, #24
    f710:	d1e8      	bne.n	f6e4 <bsec_ChannelHub_recalculateDownsampling+0x6c>
    f712:	b18e      	cbz	r6, f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f714:	fbb8 f4f6 	udiv	r4, r8, r6
    f718:	fb06 8814 	mls	r8, r6, r4, r8
    f71c:	fa1f f388 	uxth.w	r3, r8
    f720:	b2a4      	uxth	r4, r4
    f722:	b13b      	cbz	r3, f734 <bsec_ChannelHub_recalculateDownsampling+0xbc>
    f724:	f006 0801 	and.w	r8, r6, #1
    f728:	eb08 0656 	add.w	r6, r8, r6, lsr #1
    f72c:	42b3      	cmp	r3, r6
    f72e:	bfa4      	itt	ge
    f730:	3401      	addge	r4, #1
    f732:	b2a4      	uxthge	r4, r4
    f734:	f8ae 42d2 	strh.w	r4, [lr, #722]	; 0x2d2
    f738:	3501      	adds	r5, #1
    f73a:	2d0a      	cmp	r5, #10
    f73c:	f101 0101 	add.w	r1, r1, #1
    f740:	d1a7      	bne.n	f692 <bsec_ChannelHub_recalculateDownsampling+0x1a>
    f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f746:	bf00      	nop
    f748:	000363a0 	.word	0x000363a0
    f74c:	00e0200f 	.word	0x00e0200f
    f750:	000363ac 	.word	0x000363ac
    f754:	0003638c 	.word	0x0003638c
    f758:	00036450 	.word	0x00036450

0000f75c <bsec_ChannelHub_resetSamplIntvls>:
    f75c:	b430      	push	{r4, r5}
    f75e:	f500 7327 	add.w	r3, r0, #668	; 0x29c
    f762:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
    f766:	2401      	movs	r4, #1
    f768:	2100      	movs	r1, #0
    f76a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f76e:	871c      	strh	r4, [r3, #56]	; 0x38
    f770:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    f774:	f823 2b02 	strh.w	r2, [r3], #2
    f778:	429d      	cmp	r5, r3
    f77a:	d1f8      	bne.n	f76e <bsec_ChannelHub_resetSamplIntvls+0x12>
    f77c:	f8a0 22a8 	strh.w	r2, [r0, #680]	; 0x2a8
    f780:	f8a0 22aa 	strh.w	r2, [r0, #682]	; 0x2aa
    f784:	f8a0 22ac 	strh.w	r2, [r0, #684]	; 0x2ac
    f788:	f8a0 22ae 	strh.w	r2, [r0, #686]	; 0x2ae
    f78c:	f8a0 22b0 	strh.w	r2, [r0, #688]	; 0x2b0
    f790:	f8a0 22b2 	strh.w	r2, [r0, #690]	; 0x2b2
    f794:	f8a0 22b4 	strh.w	r2, [r0, #692]	; 0x2b4
    f798:	f8a0 22b6 	strh.w	r2, [r0, #694]	; 0x2b6
    f79c:	f200 23b6 	addw	r3, r0, #694	; 0x2b6
    f7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7a4:	f200 20d2 	addw	r0, r0, #722	; 0x2d2
    f7a8:	f823 2f02 	strh.w	r2, [r3, #2]!
    f7ac:	4283      	cmp	r3, r0
    f7ae:	d1fb      	bne.n	f7a8 <bsec_ChannelHub_resetSamplIntvls+0x4c>
    f7b0:	bc30      	pop	{r4, r5}
    f7b2:	4770      	bx	lr

0000f7b4 <bsec_ChannelHub_setChannelState>:
    f7b4:	b410      	push	{r4}
    f7b6:	1e4c      	subs	r4, r1, #1
    f7b8:	4611      	mov	r1, r2
    f7ba:	2c09      	cmp	r4, #9
    f7bc:	d82b      	bhi.n	f816 <bsec_ChannelHub_setChannelState+0x62>
    f7be:	e8df f004 	tbb	[pc, r4]
    f7c2:	110b      	.short	0x110b
    f7c4:	2a232a17 	.word	0x2a232a17
    f7c8:	1c052a2a 	.word	0x1c052a2a
    f7cc:	461a      	mov	r2, r3
    f7ce:	30c8      	adds	r0, #200	; 0xc8
    f7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7d4:	f7fd ba50 	b.w	cc78 <bsec_SensorHeatCompensator_setState>
    f7d8:	461a      	mov	r2, r3
    f7da:	3068      	adds	r0, #104	; 0x68
    f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7e0:	f001 ba0c 	b.w	10bfc <bsec_b_GasHumidityBaselineTracker_setState>
    f7e4:	461a      	mov	r2, r3
    f7e6:	302c      	adds	r0, #44	; 0x2c
    f7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7ec:	f001 be64 	b.w	114b8 <bsec_IaqEstimator_setState>
    f7f0:	461a      	mov	r2, r3
    f7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7f6:	f001 baff 	b.w	10df8 <bsec_GasHumidityPreProcessor_setState>
    f7fa:	461a      	mov	r2, r3
    f7fc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f800:	f85d 4b04 	ldr.w	r4, [sp], #4
    f804:	f001 bc22 	b.w	1104c <bsec_HumidityTemperatureCorrector_setState>
    f808:	461a      	mov	r2, r3
    f80a:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f80e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f812:	f002 b877 	b.w	11904 <bsec_SensorStatusTracker_setState>
    f816:	f06f 0063 	mvn.w	r0, #99	; 0x63
    f81a:	f85d 4b04 	ldr.w	r4, [sp], #4
    f81e:	4770      	bx	lr

0000f820 <bsec_ChannelHub_setInput>:
    f820:	b4f0      	push	{r4, r5, r6, r7}
    f822:	3901      	subs	r1, #1
    f824:	4c0d      	ldr	r4, [pc, #52]	; (f85c <bsec_ChannelHub_setInput+0x3c>)
    f826:	5c65      	ldrb	r5, [r4, r1]
    f828:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
    f82c:	f504 74b8 	add.w	r4, r4, #368	; 0x170
    f830:	e9d4 6700 	ldrd	r6, r7, [r4]
    f834:	429f      	cmp	r7, r3
    f836:	bf08      	it	eq
    f838:	4296      	cmpeq	r6, r2
    f83a:	d00d      	beq.n	f858 <bsec_ChannelHub_setInput+0x38>
    f83c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    f840:	ed85 0a89 	vstr	s0, [r5, #548]	; 0x224
    f844:	e9c4 2300 	strd	r2, r3, [r4]
    f848:	2201      	movs	r2, #1
    f84a:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
    f84e:	fa02 f101 	lsl.w	r1, r2, r1
    f852:	430b      	orrs	r3, r1
    f854:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
    f858:	bcf0      	pop	{r4, r5, r6, r7}
    f85a:	4770      	bx	lr
    f85c:	00036450 	.word	0x00036450

0000f860 <bsec_ChannelHub_updateChannelInterfaceDependency>:
    f860:	1e4b      	subs	r3, r1, #1
    f862:	b2da      	uxtb	r2, r3
    f864:	2a09      	cmp	r2, #9
    f866:	d900      	bls.n	f86a <bsec_ChannelHub_updateChannelInterfaceDependency+0xa>
    f868:	4770      	bx	lr
    f86a:	4a18      	ldr	r2, [pc, #96]	; (f8cc <bsec_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f86c:	4411      	add	r1, r2
    f86e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f872:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f876:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f87a:	2b09      	cmp	r3, #9
    f87c:	d8f4      	bhi.n	f868 <bsec_ChannelHub_updateChannelInterfaceDependency+0x8>
    f87e:	a201      	add	r2, pc, #4	; (adr r2, f884 <bsec_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f884:	0000f8b5 	.word	0x0000f8b5
    f888:	0000f8bb 	.word	0x0000f8bb
    f88c:	0000f8c1 	.word	0x0000f8c1
    f890:	0000f869 	.word	0x0000f869
    f894:	0000f8ad 	.word	0x0000f8ad
    f898:	0000f869 	.word	0x0000f869
    f89c:	0000f869 	.word	0x0000f869
    f8a0:	0000f869 	.word	0x0000f869
    f8a4:	0000f869 	.word	0x0000f869
    f8a8:	0000f8c5 	.word	0x0000f8c5
    f8ac:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f8b0:	f002 b866 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f8b4:	3068      	adds	r0, #104	; 0x68
    f8b6:	f001 b915 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f8ba:	302c      	adds	r0, #44	; 0x2c
    f8bc:	f001 be1c 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f8c0:	f001 baba 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f8c4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f8c8:	f001 bbda 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f8cc:	000363ac 	.word	0x000363ac

0000f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>:
    f8d0:	3901      	subs	r1, #1
    f8d2:	4b1f      	ldr	r3, [pc, #124]	; (f950 <bsec_ChannelHub_updateOutputSamplIntvl+0x80>)
    f8d4:	5c5b      	ldrb	r3, [r3, r1]
    f8d6:	f203 135b 	addw	r3, r3, #347	; 0x15b
    f8da:	b4f0      	push	{r4, r5, r6, r7}
    f8dc:	4e1d      	ldr	r6, [pc, #116]	; (f954 <bsec_ChannelHub_updateOutputSamplIntvl+0x84>)
    f8de:	4f1e      	ldr	r7, [pc, #120]	; (f958 <bsec_ChannelHub_updateOutputSamplIntvl+0x88>)
    f8e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    f8e4:	f240 3517 	movw	r5, #791	; 0x317
    f8e8:	2300      	movs	r3, #0
    f8ea:	fa45 f403 	asr.w	r4, r5, r3
    f8ee:	07e4      	lsls	r4, r4, #31
    f8f0:	d50d      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8f2:	f936 4011 	ldrsh.w	r4, [r6, r1, lsl #1]
    f8f6:	411c      	asrs	r4, r3
    f8f8:	07e4      	lsls	r4, r4, #31
    f8fa:	d508      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8fc:	5cfc      	ldrb	r4, [r7, r3]
    f8fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f902:	f8b4 c29a 	ldrh.w	ip, [r4, #666]	; 0x29a
    f906:	4594      	cmp	ip, r2
    f908:	bf88      	it	hi
    f90a:	f8a4 229a 	strhhi.w	r2, [r4, #666]	; 0x29a
    f90e:	3301      	adds	r3, #1
    f910:	2b0a      	cmp	r3, #10
    f912:	d1ea      	bne.n	f8ea <bsec_ChannelHub_updateOutputSamplIntvl+0x1a>
    f914:	4d11      	ldr	r5, [pc, #68]	; (f95c <bsec_ChannelHub_updateOutputSamplIntvl+0x8c>)
    f916:	4e12      	ldr	r6, [pc, #72]	; (f960 <bsec_ChannelHub_updateOutputSamplIntvl+0x90>)
    f918:	f8df c048 	ldr.w	ip, [pc, #72]	; f964 <bsec_ChannelHub_updateOutputSamplIntvl+0x94>
    f91c:	2300      	movs	r3, #0
    f91e:	fa45 f403 	asr.w	r4, r5, r3
    f922:	07e7      	lsls	r7, r4, #31
    f924:	d50e      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f926:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
    f92a:	411c      	asrs	r4, r3
    f92c:	07e4      	lsls	r4, r4, #31
    f92e:	d509      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f930:	f81c 4003 	ldrb.w	r4, [ip, r3]
    f934:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f938:	f8b4 72a6 	ldrh.w	r7, [r4, #678]	; 0x2a6
    f93c:	4297      	cmp	r7, r2
    f93e:	bf88      	it	hi
    f940:	f8a4 22a6 	strhhi.w	r2, [r4, #678]	; 0x2a6
    f944:	3301      	adds	r3, #1
    f946:	2b18      	cmp	r3, #24
    f948:	d1e9      	bne.n	f91e <bsec_ChannelHub_updateOutputSamplIntvl+0x4e>
    f94a:	bcf0      	pop	{r4, r5, r6, r7}
    f94c:	4770      	bx	lr
    f94e:	bf00      	nop
    f950:	00036438 	.word	0x00036438
    f954:	000363b8 	.word	0x000363b8
    f958:	000363ac 	.word	0x000363ac
    f95c:	00e0200f 	.word	0x00e0200f
    f960:	000363e4 	.word	0x000363e4
    f964:	00036450 	.word	0x00036450

0000f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>:
    f968:	1e4b      	subs	r3, r1, #1
    f96a:	b2da      	uxtb	r2, r3
    f96c:	2a09      	cmp	r2, #9
    f96e:	d900      	bls.n	f972 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0xa>
    f970:	4770      	bx	lr
    f972:	4a18      	ldr	r2, [pc, #96]	; (f9d4 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f974:	4411      	add	r1, r2
    f976:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f97a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f97e:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f982:	2b09      	cmp	r3, #9
    f984:	d8f4      	bhi.n	f970 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x8>
    f986:	a201      	add	r2, pc, #4	; (adr r2, f98c <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f98c:	0000f9bd 	.word	0x0000f9bd
    f990:	0000f9c3 	.word	0x0000f9c3
    f994:	0000f9c9 	.word	0x0000f9c9
    f998:	0000f971 	.word	0x0000f971
    f99c:	0000f9b5 	.word	0x0000f9b5
    f9a0:	0000f971 	.word	0x0000f971
    f9a4:	0000f971 	.word	0x0000f971
    f9a8:	0000f971 	.word	0x0000f971
    f9ac:	0000f971 	.word	0x0000f971
    f9b0:	0000f9cd 	.word	0x0000f9cd
    f9b4:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f9b8:	f001 bfe2 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f9bc:	3068      	adds	r0, #104	; 0x68
    f9be:	f001 b891 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f9c2:	302c      	adds	r0, #44	; 0x2c
    f9c4:	f001 bd98 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f9c8:	f001 ba36 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f9cc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f9d0:	f001 bb56 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f9d4:	000363ac 	.word	0x000363ac

0000f9d8 <bsec_Entity_parseAndDeserialize>:
    f9d8:	b570      	push	{r4, r5, r6, lr}
    f9da:	460e      	mov	r6, r1
    f9dc:	6809      	ldr	r1, [r1, #0]
    f9de:	4603      	mov	r3, r0
    f9e0:	f100 050b 	add.w	r5, r0, #11
    f9e4:	b084      	sub	sp, #16
    f9e6:	1e48      	subs	r0, r1, #1
    f9e8:	440d      	add	r5, r1
    f9ea:	4403      	add	r3, r0
    f9ec:	a901      	add	r1, sp, #4
    f9ee:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    f9f2:	f801 4b01 	strb.w	r4, [r1], #1
    f9f6:	42ab      	cmp	r3, r5
    f9f8:	d1f9      	bne.n	f9ee <bsec_Entity_parseAndDeserialize+0x16>
    f9fa:	a901      	add	r1, sp, #4
    f9fc:	4610      	mov	r0, r2
    f9fe:	220c      	movs	r2, #12
    fa00:	f025 f80e 	bl	34a20 <memcpy>
    fa04:	6833      	ldr	r3, [r6, #0]
    fa06:	330c      	adds	r3, #12
    fa08:	6033      	str	r3, [r6, #0]
    fa0a:	b004      	add	sp, #16
    fa0c:	bd70      	pop	{r4, r5, r6, pc}
    fa0e:	bf00      	nop

0000fa10 <bsec_Entity_serializeAndAdd>:
    fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa14:	681c      	ldr	r4, [r3, #0]
    fa16:	340c      	adds	r4, #12
    fa18:	4294      	cmp	r4, r2
    fa1a:	b084      	sub	sp, #16
    fa1c:	d904      	bls.n	fa28 <bsec_Entity_serializeAndAdd+0x18>
    fa1e:	3201      	adds	r2, #1
    fa20:	601a      	str	r2, [r3, #0]
    fa22:	b004      	add	sp, #16
    fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa28:	220c      	movs	r2, #12
    fa2a:	4688      	mov	r8, r1
    fa2c:	4601      	mov	r1, r0
    fa2e:	a801      	add	r0, sp, #4
    fa30:	461f      	mov	r7, r3
    fa32:	f024 fff5 	bl	34a20 <memcpy>
    fa36:	a801      	add	r0, sp, #4
    fa38:	2200      	movs	r2, #0
    fa3a:	eb08 0502 	add.w	r5, r8, r2
    fa3e:	683c      	ldr	r4, [r7, #0]
    fa40:	f810 6b01 	ldrb.w	r6, [r0], #1
    fa44:	552e      	strb	r6, [r5, r4]
    fa46:	3201      	adds	r2, #1
    fa48:	2a0c      	cmp	r2, #12
    fa4a:	d1f6      	bne.n	fa3a <bsec_Entity_serializeAndAdd+0x2a>
    fa4c:	683b      	ldr	r3, [r7, #0]
    fa4e:	330c      	adds	r3, #12
    fa50:	603b      	str	r3, [r7, #0]
    fa52:	b004      	add	sp, #16
    fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa58 <bsec_b_Entity_parseAndDeserialize>:
    fa58:	b530      	push	{r4, r5, lr}
    fa5a:	460d      	mov	r5, r1
    fa5c:	6809      	ldr	r1, [r1, #0]
    fa5e:	b083      	sub	sp, #12
    fa60:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fa64:	4408      	add	r0, r1
    fa66:	f10d 0407 	add.w	r4, sp, #7
    fa6a:	f810 1b01 	ldrb.w	r1, [r0], #1
    fa6e:	f803 1f01 	strb.w	r1, [r3, #1]!
    fa72:	42a3      	cmp	r3, r4
    fa74:	d1f9      	bne.n	fa6a <bsec_b_Entity_parseAndDeserialize+0x12>
    fa76:	4610      	mov	r0, r2
    fa78:	4669      	mov	r1, sp
    fa7a:	2208      	movs	r2, #8
    fa7c:	f024 ffd0 	bl	34a20 <memcpy>
    fa80:	682b      	ldr	r3, [r5, #0]
    fa82:	3308      	adds	r3, #8
    fa84:	602b      	str	r3, [r5, #0]
    fa86:	b003      	add	sp, #12
    fa88:	bd30      	pop	{r4, r5, pc}
    fa8a:	bf00      	nop

0000fa8c <bsec_b_Entity_serializeAndAdd>:
    fa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa8e:	681d      	ldr	r5, [r3, #0]
    fa90:	3508      	adds	r5, #8
    fa92:	4295      	cmp	r5, r2
    fa94:	b085      	sub	sp, #20
    fa96:	d903      	bls.n	faa0 <bsec_b_Entity_serializeAndAdd+0x14>
    fa98:	3201      	adds	r2, #1
    fa9a:	601a      	str	r2, [r3, #0]
    fa9c:	b005      	add	sp, #20
    fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faa0:	2208      	movs	r2, #8
    faa2:	460f      	mov	r7, r1
    faa4:	4601      	mov	r1, r0
    faa6:	4668      	mov	r0, sp
    faa8:	461c      	mov	r4, r3
    faaa:	f024 ffb9 	bl	34a20 <memcpy>
    faae:	2208      	movs	r2, #8
    fab0:	eb0d 0002 	add.w	r0, sp, r2
    fab4:	4669      	mov	r1, sp
    fab6:	f024 ffb3 	bl	34a20 <memcpy>
    faba:	f10d 0307 	add.w	r3, sp, #7
    fabe:	2200      	movs	r2, #0
    fac0:	18bd      	adds	r5, r7, r2
    fac2:	6820      	ldr	r0, [r4, #0]
    fac4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    fac8:	542e      	strb	r6, [r5, r0]
    faca:	3201      	adds	r2, #1
    facc:	2a08      	cmp	r2, #8
    face:	d1f7      	bne.n	fac0 <bsec_b_Entity_serializeAndAdd+0x34>
    fad0:	6823      	ldr	r3, [r4, #0]
    fad2:	3308      	adds	r3, #8
    fad4:	6023      	str	r3, [r4, #0]
    fad6:	b005      	add	sp, #20
    fad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fada:	bf00      	nop

0000fadc <bsec_c_Entity_parseAndDeserialize>:
    fadc:	b510      	push	{r4, lr}
    fade:	680b      	ldr	r3, [r1, #0]
    fae0:	18c2      	adds	r2, r0, r3
    fae2:	b082      	sub	sp, #8
    fae4:	460c      	mov	r4, r1
    fae6:	7852      	ldrb	r2, [r2, #1]
    fae8:	5cc3      	ldrb	r3, [r0, r3]
    faea:	f88d 2005 	strb.w	r2, [sp, #5]
    faee:	a901      	add	r1, sp, #4
    faf0:	2202      	movs	r2, #2
    faf2:	f10d 0006 	add.w	r0, sp, #6
    faf6:	f88d 3004 	strb.w	r3, [sp, #4]
    fafa:	f024 ff91 	bl	34a20 <memcpy>
    fafe:	6823      	ldr	r3, [r4, #0]
    fb00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    fb04:	3302      	adds	r3, #2
    fb06:	6023      	str	r3, [r4, #0]
    fb08:	b002      	add	sp, #8
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <bsec_c_Entity_serializeAndAdd>:
    fb0c:	b530      	push	{r4, r5, lr}
    fb0e:	681c      	ldr	r4, [r3, #0]
    fb10:	b085      	sub	sp, #20
    fb12:	3402      	adds	r4, #2
    fb14:	4294      	cmp	r4, r2
    fb16:	f8ad 0006 	strh.w	r0, [sp, #6]
    fb1a:	d903      	bls.n	fb24 <bsec_c_Entity_serializeAndAdd+0x18>
    fb1c:	3201      	adds	r2, #1
    fb1e:	601a      	str	r2, [r3, #0]
    fb20:	b005      	add	sp, #20
    fb22:	bd30      	pop	{r4, r5, pc}
    fb24:	461c      	mov	r4, r3
    fb26:	460d      	mov	r5, r1
    fb28:	2202      	movs	r2, #2
    fb2a:	f10d 0106 	add.w	r1, sp, #6
    fb2e:	a803      	add	r0, sp, #12
    fb30:	f024 ff76 	bl	34a20 <memcpy>
    fb34:	6823      	ldr	r3, [r4, #0]
    fb36:	f89d 200c 	ldrb.w	r2, [sp, #12]
    fb3a:	54ea      	strb	r2, [r5, r3]
    fb3c:	6821      	ldr	r1, [r4, #0]
    fb3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    fb42:	4429      	add	r1, r5
    fb44:	704b      	strb	r3, [r1, #1]
    fb46:	6823      	ldr	r3, [r4, #0]
    fb48:	3302      	adds	r3, #2
    fb4a:	6023      	str	r3, [r4, #0]
    fb4c:	b005      	add	sp, #20
    fb4e:	bd30      	pop	{r4, r5, pc}

0000fb50 <bsec_d_Entity_parseAndDeserialize>:
    fb50:	b530      	push	{r4, r5, lr}
    fb52:	460c      	mov	r4, r1
    fb54:	b083      	sub	sp, #12
    fb56:	6823      	ldr	r3, [r4, #0]
    fb58:	18c5      	adds	r5, r0, r3
    fb5a:	4601      	mov	r1, r0
    fb5c:	4610      	mov	r0, r2
    fb5e:	786a      	ldrb	r2, [r5, #1]
    fb60:	5ccb      	ldrb	r3, [r1, r3]
    fb62:	f88d 2005 	strb.w	r2, [sp, #5]
    fb66:	a901      	add	r1, sp, #4
    fb68:	2202      	movs	r2, #2
    fb6a:	f88d 3004 	strb.w	r3, [sp, #4]
    fb6e:	f024 ff57 	bl	34a20 <memcpy>
    fb72:	6823      	ldr	r3, [r4, #0]
    fb74:	3302      	adds	r3, #2
    fb76:	6023      	str	r3, [r4, #0]
    fb78:	b003      	add	sp, #12
    fb7a:	bd30      	pop	{r4, r5, pc}

0000fb7c <bsec_d_Entity_serializeAndAdd>:
    fb7c:	b530      	push	{r4, r5, lr}
    fb7e:	681c      	ldr	r4, [r3, #0]
    fb80:	3402      	adds	r4, #2
    fb82:	4294      	cmp	r4, r2
    fb84:	b083      	sub	sp, #12
    fb86:	d81a      	bhi.n	fbbe <bsec_d_Entity_serializeAndAdd+0x42>
    fb88:	461c      	mov	r4, r3
    fb8a:	7802      	ldrb	r2, [r0, #0]
    fb8c:	7843      	ldrb	r3, [r0, #1]
    fb8e:	f88d 2004 	strb.w	r2, [sp, #4]
    fb92:	460d      	mov	r5, r1
    fb94:	2202      	movs	r2, #2
    fb96:	a901      	add	r1, sp, #4
    fb98:	4668      	mov	r0, sp
    fb9a:	f88d 3005 	strb.w	r3, [sp, #5]
    fb9e:	f024 ff3f 	bl	34a20 <memcpy>
    fba2:	6823      	ldr	r3, [r4, #0]
    fba4:	f89d 2000 	ldrb.w	r2, [sp]
    fba8:	54ea      	strb	r2, [r5, r3]
    fbaa:	6821      	ldr	r1, [r4, #0]
    fbac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fbb0:	440d      	add	r5, r1
    fbb2:	706b      	strb	r3, [r5, #1]
    fbb4:	6823      	ldr	r3, [r4, #0]
    fbb6:	3302      	adds	r3, #2
    fbb8:	6023      	str	r3, [r4, #0]
    fbba:	b003      	add	sp, #12
    fbbc:	bd30      	pop	{r4, r5, pc}
    fbbe:	3201      	adds	r2, #1
    fbc0:	601a      	str	r2, [r3, #0]
    fbc2:	b003      	add	sp, #12
    fbc4:	bd30      	pop	{r4, r5, pc}
    fbc6:	bf00      	nop

0000fbc8 <bsec_e_Entity_parseAndDeserialize>:
    fbc8:	b510      	push	{r4, lr}
    fbca:	680b      	ldr	r3, [r1, #0]
    fbcc:	b082      	sub	sp, #8
    fbce:	460c      	mov	r4, r1
    fbd0:	1d01      	adds	r1, r0, #4
    fbd2:	4419      	add	r1, r3
    fbd4:	4418      	add	r0, r3
    fbd6:	ab01      	add	r3, sp, #4
    fbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
    fbdc:	f803 2b01 	strb.w	r2, [r3], #1
    fbe0:	4288      	cmp	r0, r1
    fbe2:	d1f9      	bne.n	fbd8 <bsec_e_Entity_parseAndDeserialize+0x10>
    fbe4:	a901      	add	r1, sp, #4
    fbe6:	2204      	movs	r2, #4
    fbe8:	4668      	mov	r0, sp
    fbea:	f024 ff19 	bl	34a20 <memcpy>
    fbee:	6823      	ldr	r3, [r4, #0]
    fbf0:	ed9d 0a00 	vldr	s0, [sp]
    fbf4:	3304      	adds	r3, #4
    fbf6:	6023      	str	r3, [r4, #0]
    fbf8:	b002      	add	sp, #8
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <bsec_e_Entity_serializeAndAdd>:
    fbfc:	b570      	push	{r4, r5, r6, lr}
    fbfe:	6813      	ldr	r3, [r2, #0]
    fc00:	3304      	adds	r3, #4
    fc02:	b084      	sub	sp, #16
    fc04:	428b      	cmp	r3, r1
    fc06:	ed8d 0a01 	vstr	s0, [sp, #4]
    fc0a:	d903      	bls.n	fc14 <bsec_e_Entity_serializeAndAdd+0x18>
    fc0c:	3101      	adds	r1, #1
    fc0e:	6011      	str	r1, [r2, #0]
    fc10:	b004      	add	sp, #16
    fc12:	bd70      	pop	{r4, r5, r6, pc}
    fc14:	4614      	mov	r4, r2
    fc16:	2204      	movs	r2, #4
    fc18:	eb0d 0102 	add.w	r1, sp, r2
    fc1c:	4605      	mov	r5, r0
    fc1e:	a803      	add	r0, sp, #12
    fc20:	f024 fefe 	bl	34a20 <memcpy>
    fc24:	aa03      	add	r2, sp, #12
    fc26:	2300      	movs	r3, #0
    fc28:	18e8      	adds	r0, r5, r3
    fc2a:	6821      	ldr	r1, [r4, #0]
    fc2c:	f812 6b01 	ldrb.w	r6, [r2], #1
    fc30:	5446      	strb	r6, [r0, r1]
    fc32:	3301      	adds	r3, #1
    fc34:	2b04      	cmp	r3, #4
    fc36:	d1f7      	bne.n	fc28 <bsec_e_Entity_serializeAndAdd+0x2c>
    fc38:	6823      	ldr	r3, [r4, #0]
    fc3a:	3304      	adds	r3, #4
    fc3c:	6023      	str	r3, [r4, #0]
    fc3e:	b004      	add	sp, #16
    fc40:	bd70      	pop	{r4, r5, r6, pc}
    fc42:	bf00      	nop

0000fc44 <bsec_f_Entity_parseAndDeserialize>:
    fc44:	b510      	push	{r4, lr}
    fc46:	460c      	mov	r4, r1
    fc48:	b082      	sub	sp, #8
    fc4a:	6823      	ldr	r3, [r4, #0]
    fc4c:	a902      	add	r1, sp, #8
    fc4e:	5cc3      	ldrb	r3, [r0, r3]
    fc50:	f801 3d01 	strb.w	r3, [r1, #-1]!
    fc54:	2201      	movs	r2, #1
    fc56:	f10d 0006 	add.w	r0, sp, #6
    fc5a:	f024 fee1 	bl	34a20 <memcpy>
    fc5e:	6823      	ldr	r3, [r4, #0]
    fc60:	f89d 0006 	ldrb.w	r0, [sp, #6]
    fc64:	3301      	adds	r3, #1
    fc66:	6023      	str	r3, [r4, #0]
    fc68:	b002      	add	sp, #8
    fc6a:	bd10      	pop	{r4, pc}

0000fc6c <bsec_f_Entity_serializeAndAdd>:
    fc6c:	b530      	push	{r4, r5, lr}
    fc6e:	681c      	ldr	r4, [r3, #0]
    fc70:	b085      	sub	sp, #20
    fc72:	3401      	adds	r4, #1
    fc74:	4294      	cmp	r4, r2
    fc76:	f88d 0007 	strb.w	r0, [sp, #7]
    fc7a:	d903      	bls.n	fc84 <bsec_f_Entity_serializeAndAdd+0x18>
    fc7c:	3201      	adds	r2, #1
    fc7e:	601a      	str	r2, [r3, #0]
    fc80:	b005      	add	sp, #20
    fc82:	bd30      	pop	{r4, r5, pc}
    fc84:	461c      	mov	r4, r3
    fc86:	460d      	mov	r5, r1
    fc88:	2201      	movs	r2, #1
    fc8a:	f10d 0107 	add.w	r1, sp, #7
    fc8e:	f10d 000f 	add.w	r0, sp, #15
    fc92:	f024 fec5 	bl	34a20 <memcpy>
    fc96:	6823      	ldr	r3, [r4, #0]
    fc98:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fc9c:	54ea      	strb	r2, [r5, r3]
    fc9e:	6823      	ldr	r3, [r4, #0]
    fca0:	3301      	adds	r3, #1
    fca2:	6023      	str	r3, [r4, #0]
    fca4:	b005      	add	sp, #20
    fca6:	bd30      	pop	{r4, r5, pc}

0000fca8 <bsec_g_Entity_parseAndDeserialize>:
    fca8:	b510      	push	{r4, lr}
    fcaa:	680a      	ldr	r2, [r1, #0]
    fcac:	b084      	sub	sp, #16
    fcae:	460c      	mov	r4, r1
    fcb0:	f10d 0307 	add.w	r3, sp, #7
    fcb4:	f10d 010f 	add.w	r1, sp, #15
    fcb8:	4410      	add	r0, r2
    fcba:	f810 2b01 	ldrb.w	r2, [r0], #1
    fcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
    fcc2:	428b      	cmp	r3, r1
    fcc4:	d1f9      	bne.n	fcba <bsec_g_Entity_parseAndDeserialize+0x12>
    fcc6:	2208      	movs	r2, #8
    fcc8:	eb0d 0102 	add.w	r1, sp, r2
    fccc:	4668      	mov	r0, sp
    fcce:	f024 fea7 	bl	34a20 <memcpy>
    fcd2:	6823      	ldr	r3, [r4, #0]
    fcd4:	e9dd 0100 	ldrd	r0, r1, [sp]
    fcd8:	3308      	adds	r3, #8
    fcda:	6023      	str	r3, [r4, #0]
    fcdc:	b004      	add	sp, #16
    fcde:	bd10      	pop	{r4, pc}

0000fce0 <bsec_g_Entity_serializeAndAdd>:
    fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fce2:	b085      	sub	sp, #20
    fce4:	e9cd 0100 	strd	r0, r1, [sp]
    fce8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fcea:	6825      	ldr	r5, [r4, #0]
    fcec:	3508      	adds	r5, #8
    fcee:	429d      	cmp	r5, r3
    fcf0:	d903      	bls.n	fcfa <bsec_g_Entity_serializeAndAdd+0x1a>
    fcf2:	3301      	adds	r3, #1
    fcf4:	6023      	str	r3, [r4, #0]
    fcf6:	b005      	add	sp, #20
    fcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcfa:	4617      	mov	r7, r2
    fcfc:	2208      	movs	r2, #8
    fcfe:	4669      	mov	r1, sp
    fd00:	eb0d 0002 	add.w	r0, sp, r2
    fd04:	f024 fe8c 	bl	34a20 <memcpy>
    fd08:	f10d 0107 	add.w	r1, sp, #7
    fd0c:	2300      	movs	r3, #0
    fd0e:	18fd      	adds	r5, r7, r3
    fd10:	6820      	ldr	r0, [r4, #0]
    fd12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    fd16:	542e      	strb	r6, [r5, r0]
    fd18:	3301      	adds	r3, #1
    fd1a:	2b08      	cmp	r3, #8
    fd1c:	d1f7      	bne.n	fd0e <bsec_g_Entity_serializeAndAdd+0x2e>
    fd1e:	6823      	ldr	r3, [r4, #0]
    fd20:	3308      	adds	r3, #8
    fd22:	6023      	str	r3, [r4, #0]
    fd24:	b005      	add	sp, #20
    fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fd28 <bsec_h_Entity_parseAndDeserialize>:
    fd28:	680b      	ldr	r3, [r1, #0]
    fd2a:	5cc0      	ldrb	r0, [r0, r3]
    fd2c:	3301      	adds	r3, #1
    fd2e:	3000      	adds	r0, #0
    fd30:	600b      	str	r3, [r1, #0]
    fd32:	bf18      	it	ne
    fd34:	2001      	movne	r0, #1
    fd36:	4770      	bx	lr

0000fd38 <bsec_h_Entity_serializeAndAdd>:
    fd38:	b430      	push	{r4, r5}
    fd3a:	681c      	ldr	r4, [r3, #0]
    fd3c:	1c65      	adds	r5, r4, #1
    fd3e:	4295      	cmp	r5, r2
    fd40:	bf9c      	itt	ls
    fd42:	5508      	strbls	r0, [r1, r4]
    fd44:	681a      	ldrls	r2, [r3, #0]
    fd46:	3201      	adds	r2, #1
    fd48:	601a      	str	r2, [r3, #0]
    fd4a:	bc30      	pop	{r4, r5}
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop

0000fd50 <bsec_i_Entity_parseAndDeserialize>:
    fd50:	b530      	push	{r4, r5, lr}
    fd52:	680b      	ldr	r3, [r1, #0]
    fd54:	b087      	sub	sp, #28
    fd56:	3b01      	subs	r3, #1
    fd58:	4418      	add	r0, r3
    fd5a:	460d      	mov	r5, r1
    fd5c:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fd60:	f10d 0417 	add.w	r4, sp, #23
    fd64:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fd68:	f803 1f01 	strb.w	r1, [r3, #1]!
    fd6c:	42a3      	cmp	r3, r4
    fd6e:	d1f9      	bne.n	fd64 <bsec_i_Entity_parseAndDeserialize+0x14>
    fd70:	4610      	mov	r0, r2
    fd72:	4669      	mov	r1, sp
    fd74:	2218      	movs	r2, #24
    fd76:	f024 fe53 	bl	34a20 <memcpy>
    fd7a:	682b      	ldr	r3, [r5, #0]
    fd7c:	3318      	adds	r3, #24
    fd7e:	602b      	str	r3, [r5, #0]
    fd80:	b007      	add	sp, #28
    fd82:	bd30      	pop	{r4, r5, pc}

0000fd84 <bsec_i_Entity_serializeAndAdd>:
    fd84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd86:	681c      	ldr	r4, [r3, #0]
    fd88:	3410      	adds	r4, #16
    fd8a:	4294      	cmp	r4, r2
    fd8c:	b089      	sub	sp, #36	; 0x24
    fd8e:	d903      	bls.n	fd98 <bsec_i_Entity_serializeAndAdd+0x14>
    fd90:	3201      	adds	r2, #1
    fd92:	601a      	str	r2, [r3, #0]
    fd94:	b009      	add	sp, #36	; 0x24
    fd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd98:	2210      	movs	r2, #16
    fd9a:	eb0d 0702 	add.w	r7, sp, r2
    fd9e:	460e      	mov	r6, r1
    fda0:	4601      	mov	r1, r0
    fda2:	4668      	mov	r0, sp
    fda4:	461d      	mov	r5, r3
    fda6:	f024 fe3b 	bl	34a20 <memcpy>
    fdaa:	2210      	movs	r2, #16
    fdac:	4669      	mov	r1, sp
    fdae:	4638      	mov	r0, r7
    fdb0:	f024 fe36 	bl	34a20 <memcpy>
    fdb4:	ab08      	add	r3, sp, #32
    fdb6:	463a      	mov	r2, r7
    fdb8:	682c      	ldr	r4, [r5, #0]
    fdba:	1bd0      	subs	r0, r2, r7
    fdbc:	4420      	add	r0, r4
    fdbe:	f812 4b01 	ldrb.w	r4, [r2], #1
    fdc2:	5434      	strb	r4, [r6, r0]
    fdc4:	429a      	cmp	r2, r3
    fdc6:	d1f7      	bne.n	fdb8 <bsec_i_Entity_serializeAndAdd+0x34>
    fdc8:	682b      	ldr	r3, [r5, #0]
    fdca:	3310      	adds	r3, #16
    fdcc:	602b      	str	r3, [r5, #0]
    fdce:	b009      	add	sp, #36	; 0x24
    fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdd2:	bf00      	nop

0000fdd4 <bsec_j_Entity_parseAndDeserialize>:
    fdd4:	b530      	push	{r4, r5, lr}
    fdd6:	680b      	ldr	r3, [r1, #0]
    fdd8:	b0ab      	sub	sp, #172	; 0xac
    fdda:	3b01      	subs	r3, #1
    fddc:	4418      	add	r0, r3
    fdde:	460d      	mov	r5, r1
    fde0:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fde4:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
    fde8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fdec:	f803 1f01 	strb.w	r1, [r3, #1]!
    fdf0:	42a3      	cmp	r3, r4
    fdf2:	d1f9      	bne.n	fde8 <bsec_j_Entity_parseAndDeserialize+0x14>
    fdf4:	4610      	mov	r0, r2
    fdf6:	4669      	mov	r1, sp
    fdf8:	22a8      	movs	r2, #168	; 0xa8
    fdfa:	f024 fe11 	bl	34a20 <memcpy>
    fdfe:	682b      	ldr	r3, [r5, #0]
    fe00:	33a8      	adds	r3, #168	; 0xa8
    fe02:	602b      	str	r3, [r5, #0]
    fe04:	b02b      	add	sp, #172	; 0xac
    fe06:	bd30      	pop	{r4, r5, pc}

0000fe08 <bsec_j_Entity_serializeAndAdd>:
    fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0a:	681d      	ldr	r5, [r3, #0]
    fe0c:	3504      	adds	r5, #4
    fe0e:	4295      	cmp	r5, r2
    fe10:	b083      	sub	sp, #12
    fe12:	d81d      	bhi.n	fe50 <bsec_j_Entity_serializeAndAdd+0x48>
    fe14:	4602      	mov	r2, r0
    fe16:	460f      	mov	r7, r1
    fe18:	461c      	mov	r4, r3
    fe1a:	8811      	ldrh	r1, [r2, #0]
    fe1c:	8853      	ldrh	r3, [r2, #2]
    fe1e:	f8ad 1004 	strh.w	r1, [sp, #4]
    fe22:	2204      	movs	r2, #4
    fe24:	eb0d 0102 	add.w	r1, sp, r2
    fe28:	4668      	mov	r0, sp
    fe2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe2e:	f024 fdf7 	bl	34a20 <memcpy>
    fe32:	466b      	mov	r3, sp
    fe34:	2200      	movs	r2, #0
    fe36:	18bd      	adds	r5, r7, r2
    fe38:	6820      	ldr	r0, [r4, #0]
    fe3a:	f813 6b01 	ldrb.w	r6, [r3], #1
    fe3e:	542e      	strb	r6, [r5, r0]
    fe40:	3201      	adds	r2, #1
    fe42:	2a04      	cmp	r2, #4
    fe44:	d1f7      	bne.n	fe36 <bsec_j_Entity_serializeAndAdd+0x2e>
    fe46:	6823      	ldr	r3, [r4, #0]
    fe48:	3304      	adds	r3, #4
    fe4a:	6023      	str	r3, [r4, #0]
    fe4c:	b003      	add	sp, #12
    fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe50:	3201      	adds	r2, #1
    fe52:	601a      	str	r2, [r3, #0]
    fe54:	b003      	add	sp, #12
    fe56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe58 <bsec_k_Entity_parseAndDeserialize>:
    fe58:	b530      	push	{r4, r5, lr}
    fe5a:	680b      	ldr	r3, [r1, #0]
    fe5c:	b089      	sub	sp, #36	; 0x24
    fe5e:	3b01      	subs	r3, #1
    fe60:	4418      	add	r0, r3
    fe62:	460d      	mov	r5, r1
    fe64:	f10d 0303 	add.w	r3, sp, #3
    fe68:	f10d 041f 	add.w	r4, sp, #31
    fe6c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fe70:	f803 1f01 	strb.w	r1, [r3, #1]!
    fe74:	42a3      	cmp	r3, r4
    fe76:	d1f9      	bne.n	fe6c <bsec_k_Entity_parseAndDeserialize+0x14>
    fe78:	4610      	mov	r0, r2
    fe7a:	a901      	add	r1, sp, #4
    fe7c:	221c      	movs	r2, #28
    fe7e:	f024 fdcf 	bl	34a20 <memcpy>
    fe82:	682b      	ldr	r3, [r5, #0]
    fe84:	331c      	adds	r3, #28
    fe86:	602b      	str	r3, [r5, #0]
    fe88:	b009      	add	sp, #36	; 0x24
    fe8a:	bd30      	pop	{r4, r5, pc}

0000fe8c <bsec_k_Entity_serializeAndAdd>:
    fe8c:	b530      	push	{r4, r5, lr}
    fe8e:	681c      	ldr	r4, [r3, #0]
    fe90:	3402      	adds	r4, #2
    fe92:	4294      	cmp	r4, r2
    fe94:	b083      	sub	sp, #12
    fe96:	d81a      	bhi.n	fece <bsec_k_Entity_serializeAndAdd+0x42>
    fe98:	461c      	mov	r4, r3
    fe9a:	7802      	ldrb	r2, [r0, #0]
    fe9c:	7843      	ldrb	r3, [r0, #1]
    fe9e:	f88d 2004 	strb.w	r2, [sp, #4]
    fea2:	460d      	mov	r5, r1
    fea4:	2202      	movs	r2, #2
    fea6:	a901      	add	r1, sp, #4
    fea8:	4668      	mov	r0, sp
    feaa:	f88d 3005 	strb.w	r3, [sp, #5]
    feae:	f024 fdb7 	bl	34a20 <memcpy>
    feb2:	6823      	ldr	r3, [r4, #0]
    feb4:	f89d 2000 	ldrb.w	r2, [sp]
    feb8:	54ea      	strb	r2, [r5, r3]
    feba:	6821      	ldr	r1, [r4, #0]
    febc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fec0:	440d      	add	r5, r1
    fec2:	706b      	strb	r3, [r5, #1]
    fec4:	6823      	ldr	r3, [r4, #0]
    fec6:	3302      	adds	r3, #2
    fec8:	6023      	str	r3, [r4, #0]
    feca:	b003      	add	sp, #12
    fecc:	bd30      	pop	{r4, r5, pc}
    fece:	3201      	adds	r2, #1
    fed0:	601a      	str	r2, [r3, #0]
    fed2:	b003      	add	sp, #12
    fed4:	bd30      	pop	{r4, r5, pc}
    fed6:	bf00      	nop

0000fed8 <bsec_l_Entity_parseAndDeserialize>:
    fed8:	b530      	push	{r4, r5, lr}
    feda:	680b      	ldr	r3, [r1, #0]
    fedc:	b085      	sub	sp, #20
    fede:	3b01      	subs	r3, #1
    fee0:	4418      	add	r0, r3
    fee2:	460d      	mov	r5, r1
    fee4:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fee8:	f10d 040f 	add.w	r4, sp, #15
    feec:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fef0:	f803 1f01 	strb.w	r1, [r3, #1]!
    fef4:	42a3      	cmp	r3, r4
    fef6:	d1f9      	bne.n	feec <bsec_l_Entity_parseAndDeserialize+0x14>
    fef8:	4610      	mov	r0, r2
    fefa:	4669      	mov	r1, sp
    fefc:	2210      	movs	r2, #16
    fefe:	f024 fd8f 	bl	34a20 <memcpy>
    ff02:	682b      	ldr	r3, [r5, #0]
    ff04:	3310      	adds	r3, #16
    ff06:	602b      	str	r3, [r5, #0]
    ff08:	b005      	add	sp, #20
    ff0a:	bd30      	pop	{r4, r5, pc}

0000ff0c <bsec_l_Entity_serializeAndAdd>:
    ff0c:	b530      	push	{r4, r5, lr}
    ff0e:	681c      	ldr	r4, [r3, #0]
    ff10:	b085      	sub	sp, #20
    ff12:	3401      	adds	r4, #1
    ff14:	4294      	cmp	r4, r2
    ff16:	f88d 0007 	strb.w	r0, [sp, #7]
    ff1a:	d903      	bls.n	ff24 <bsec_l_Entity_serializeAndAdd+0x18>
    ff1c:	3201      	adds	r2, #1
    ff1e:	601a      	str	r2, [r3, #0]
    ff20:	b005      	add	sp, #20
    ff22:	bd30      	pop	{r4, r5, pc}
    ff24:	461c      	mov	r4, r3
    ff26:	460d      	mov	r5, r1
    ff28:	2201      	movs	r2, #1
    ff2a:	f10d 0107 	add.w	r1, sp, #7
    ff2e:	f10d 000f 	add.w	r0, sp, #15
    ff32:	f024 fd75 	bl	34a20 <memcpy>
    ff36:	6823      	ldr	r3, [r4, #0]
    ff38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ff3c:	54ea      	strb	r2, [r5, r3]
    ff3e:	6823      	ldr	r3, [r4, #0]
    ff40:	3301      	adds	r3, #1
    ff42:	6023      	str	r3, [r4, #0]
    ff44:	b005      	add	sp, #20
    ff46:	bd30      	pop	{r4, r5, pc}

0000ff48 <bsec_m_Entity_parseAndDeserialize>:
    ff48:	b570      	push	{r4, r5, r6, lr}
    ff4a:	460e      	mov	r6, r1
    ff4c:	6809      	ldr	r1, [r1, #0]
    ff4e:	b082      	sub	sp, #8
    ff50:	1d05      	adds	r5, r0, #4
    ff52:	1843      	adds	r3, r0, r1
    ff54:	440d      	add	r5, r1
    ff56:	a901      	add	r1, sp, #4
    ff58:	f813 4b01 	ldrb.w	r4, [r3], #1
    ff5c:	f801 4b01 	strb.w	r4, [r1], #1
    ff60:	42ab      	cmp	r3, r5
    ff62:	d1f9      	bne.n	ff58 <bsec_m_Entity_parseAndDeserialize+0x10>
    ff64:	a901      	add	r1, sp, #4
    ff66:	4610      	mov	r0, r2
    ff68:	2204      	movs	r2, #4
    ff6a:	f024 fd59 	bl	34a20 <memcpy>
    ff6e:	6833      	ldr	r3, [r6, #0]
    ff70:	3304      	adds	r3, #4
    ff72:	6033      	str	r3, [r6, #0]
    ff74:	b002      	add	sp, #8
    ff76:	bd70      	pop	{r4, r5, r6, pc}

0000ff78 <bsec_m_Entity_serializeAndAdd>:
    ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff7a:	681d      	ldr	r5, [r3, #0]
    ff7c:	3508      	adds	r5, #8
    ff7e:	4295      	cmp	r5, r2
    ff80:	b083      	sub	sp, #12
    ff82:	d903      	bls.n	ff8c <bsec_m_Entity_serializeAndAdd+0x14>
    ff84:	3201      	adds	r2, #1
    ff86:	601a      	str	r2, [r3, #0]
    ff88:	b003      	add	sp, #12
    ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff8c:	2208      	movs	r2, #8
    ff8e:	460f      	mov	r7, r1
    ff90:	4601      	mov	r1, r0
    ff92:	4668      	mov	r0, sp
    ff94:	461c      	mov	r4, r3
    ff96:	f024 fd43 	bl	34a20 <memcpy>
    ff9a:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    ff9e:	2200      	movs	r2, #0
    ffa0:	18bd      	adds	r5, r7, r2
    ffa2:	6820      	ldr	r0, [r4, #0]
    ffa4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    ffa8:	542e      	strb	r6, [r5, r0]
    ffaa:	3201      	adds	r2, #1
    ffac:	2a08      	cmp	r2, #8
    ffae:	d1f7      	bne.n	ffa0 <bsec_m_Entity_serializeAndAdd+0x28>
    ffb0:	6823      	ldr	r3, [r4, #0]
    ffb2:	3308      	adds	r3, #8
    ffb4:	6023      	str	r3, [r4, #0]
    ffb6:	b003      	add	sp, #12
    ffb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffba:	bf00      	nop

0000ffbc <bsec_n_Entity_parseAndDeserialize>:
    ffbc:	b530      	push	{r4, r5, lr}
    ffbe:	460c      	mov	r4, r1
    ffc0:	b083      	sub	sp, #12
    ffc2:	6823      	ldr	r3, [r4, #0]
    ffc4:	18c5      	adds	r5, r0, r3
    ffc6:	4601      	mov	r1, r0
    ffc8:	4610      	mov	r0, r2
    ffca:	786a      	ldrb	r2, [r5, #1]
    ffcc:	5ccb      	ldrb	r3, [r1, r3]
    ffce:	f88d 2005 	strb.w	r2, [sp, #5]
    ffd2:	a901      	add	r1, sp, #4
    ffd4:	2202      	movs	r2, #2
    ffd6:	f88d 3004 	strb.w	r3, [sp, #4]
    ffda:	f024 fd21 	bl	34a20 <memcpy>
    ffde:	6823      	ldr	r3, [r4, #0]
    ffe0:	3302      	adds	r3, #2
    ffe2:	6023      	str	r3, [r4, #0]
    ffe4:	b003      	add	sp, #12
    ffe6:	bd30      	pop	{r4, r5, pc}

0000ffe8 <bsec_n_Entity_serializeAndAdd>:
    ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffea:	681c      	ldr	r4, [r3, #0]
    ffec:	3414      	adds	r4, #20
    ffee:	4294      	cmp	r4, r2
    fff0:	b08b      	sub	sp, #44	; 0x2c
    fff2:	d903      	bls.n	fffc <bsec_n_Entity_serializeAndAdd+0x14>
    fff4:	3201      	adds	r2, #1
    fff6:	601a      	str	r2, [r3, #0]
    fff8:	b00b      	add	sp, #44	; 0x2c
    fffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fffc:	2214      	movs	r2, #20
    fffe:	eb0d 0702 	add.w	r7, sp, r2
   10002:	460e      	mov	r6, r1
   10004:	4601      	mov	r1, r0
   10006:	4668      	mov	r0, sp
   10008:	461d      	mov	r5, r3
   1000a:	f024 fd09 	bl	34a20 <memcpy>
   1000e:	2214      	movs	r2, #20
   10010:	4669      	mov	r1, sp
   10012:	4638      	mov	r0, r7
   10014:	f024 fd04 	bl	34a20 <memcpy>
   10018:	ab0a      	add	r3, sp, #40	; 0x28
   1001a:	463a      	mov	r2, r7
   1001c:	682c      	ldr	r4, [r5, #0]
   1001e:	1bd0      	subs	r0, r2, r7
   10020:	4420      	add	r0, r4
   10022:	f812 4b01 	ldrb.w	r4, [r2], #1
   10026:	5434      	strb	r4, [r6, r0]
   10028:	429a      	cmp	r2, r3
   1002a:	d1f7      	bne.n	1001c <bsec_n_Entity_serializeAndAdd+0x34>
   1002c:	682b      	ldr	r3, [r5, #0]
   1002e:	3314      	adds	r3, #20
   10030:	602b      	str	r3, [r5, #0]
   10032:	b00b      	add	sp, #44	; 0x2c
   10034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10036:	bf00      	nop

00010038 <bsec_o_Entity_parseAndDeserialize>:
   10038:	b510      	push	{r4, lr}
   1003a:	460c      	mov	r4, r1
   1003c:	b082      	sub	sp, #8
   1003e:	6823      	ldr	r3, [r4, #0]
   10040:	a902      	add	r1, sp, #8
   10042:	5cc3      	ldrb	r3, [r0, r3]
   10044:	f801 3d01 	strb.w	r3, [r1, #-1]!
   10048:	2201      	movs	r2, #1
   1004a:	f10d 0006 	add.w	r0, sp, #6
   1004e:	f024 fce7 	bl	34a20 <memcpy>
   10052:	6823      	ldr	r3, [r4, #0]
   10054:	f99d 0006 	ldrsb.w	r0, [sp, #6]
   10058:	3301      	adds	r3, #1
   1005a:	6023      	str	r3, [r4, #0]
   1005c:	b002      	add	sp, #8
   1005e:	bd10      	pop	{r4, pc}

00010060 <bsec_o_Entity_serializeAndAdd>:
   10060:	b5f0      	push	{r4, r5, r6, r7, lr}
   10062:	681c      	ldr	r4, [r3, #0]
   10064:	3418      	adds	r4, #24
   10066:	4294      	cmp	r4, r2
   10068:	b08d      	sub	sp, #52	; 0x34
   1006a:	d903      	bls.n	10074 <bsec_o_Entity_serializeAndAdd+0x14>
   1006c:	3201      	adds	r2, #1
   1006e:	601a      	str	r2, [r3, #0]
   10070:	b00d      	add	sp, #52	; 0x34
   10072:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10074:	2218      	movs	r2, #24
   10076:	eb0d 0702 	add.w	r7, sp, r2
   1007a:	460e      	mov	r6, r1
   1007c:	4601      	mov	r1, r0
   1007e:	4668      	mov	r0, sp
   10080:	461d      	mov	r5, r3
   10082:	f024 fccd 	bl	34a20 <memcpy>
   10086:	2218      	movs	r2, #24
   10088:	4669      	mov	r1, sp
   1008a:	4638      	mov	r0, r7
   1008c:	f024 fcc8 	bl	34a20 <memcpy>
   10090:	ab0c      	add	r3, sp, #48	; 0x30
   10092:	463a      	mov	r2, r7
   10094:	682c      	ldr	r4, [r5, #0]
   10096:	1bd0      	subs	r0, r2, r7
   10098:	4420      	add	r0, r4
   1009a:	f812 4b01 	ldrb.w	r4, [r2], #1
   1009e:	5434      	strb	r4, [r6, r0]
   100a0:	429a      	cmp	r2, r3
   100a2:	d1f7      	bne.n	10094 <bsec_o_Entity_serializeAndAdd+0x34>
   100a4:	682b      	ldr	r3, [r5, #0]
   100a6:	3318      	adds	r3, #24
   100a8:	602b      	str	r3, [r5, #0]
   100aa:	b00d      	add	sp, #52	; 0x34
   100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ae:	bf00      	nop

000100b0 <bsec_p_Entity_parseAndDeserialize>:
   100b0:	f7ff bcd2 	b.w	fa58 <bsec_b_Entity_parseAndDeserialize>

000100b4 <bsec_p_Entity_serializeAndAdd>:
   100b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b6:	681c      	ldr	r4, [r3, #0]
   100b8:	34a8      	adds	r4, #168	; 0xa8
   100ba:	4294      	cmp	r4, r2
   100bc:	b0d5      	sub	sp, #340	; 0x154
   100be:	d903      	bls.n	100c8 <bsec_p_Entity_serializeAndAdd+0x14>
   100c0:	3201      	adds	r2, #1
   100c2:	601a      	str	r2, [r3, #0]
   100c4:	b055      	add	sp, #340	; 0x154
   100c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100c8:	22a8      	movs	r2, #168	; 0xa8
   100ca:	eb0d 0702 	add.w	r7, sp, r2
   100ce:	460e      	mov	r6, r1
   100d0:	4601      	mov	r1, r0
   100d2:	4668      	mov	r0, sp
   100d4:	461d      	mov	r5, r3
   100d6:	f024 fca3 	bl	34a20 <memcpy>
   100da:	22a8      	movs	r2, #168	; 0xa8
   100dc:	4669      	mov	r1, sp
   100de:	4638      	mov	r0, r7
   100e0:	f024 fc9e 	bl	34a20 <memcpy>
   100e4:	ab54      	add	r3, sp, #336	; 0x150
   100e6:	463a      	mov	r2, r7
   100e8:	682c      	ldr	r4, [r5, #0]
   100ea:	1bd0      	subs	r0, r2, r7
   100ec:	4420      	add	r0, r4
   100ee:	f812 4b01 	ldrb.w	r4, [r2], #1
   100f2:	5434      	strb	r4, [r6, r0]
   100f4:	429a      	cmp	r2, r3
   100f6:	d1f7      	bne.n	100e8 <bsec_p_Entity_serializeAndAdd+0x34>
   100f8:	682b      	ldr	r3, [r5, #0]
   100fa:	33a8      	adds	r3, #168	; 0xa8
   100fc:	602b      	str	r3, [r5, #0]
   100fe:	b055      	add	sp, #340	; 0x154
   10100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10102:	bf00      	nop

00010104 <bsec_q_Entity_parseAndDeserialize>:
   10104:	b530      	push	{r4, r5, lr}
   10106:	680b      	ldr	r3, [r1, #0]
   10108:	b087      	sub	sp, #28
   1010a:	3b01      	subs	r3, #1
   1010c:	4418      	add	r0, r3
   1010e:	460d      	mov	r5, r1
   10110:	f10d 0303 	add.w	r3, sp, #3
   10114:	f10d 0417 	add.w	r4, sp, #23
   10118:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   1011c:	f803 1f01 	strb.w	r1, [r3, #1]!
   10120:	42a3      	cmp	r3, r4
   10122:	d1f9      	bne.n	10118 <bsec_q_Entity_parseAndDeserialize+0x14>
   10124:	4610      	mov	r0, r2
   10126:	a901      	add	r1, sp, #4
   10128:	2214      	movs	r2, #20
   1012a:	f024 fc79 	bl	34a20 <memcpy>
   1012e:	682b      	ldr	r3, [r5, #0]
   10130:	3314      	adds	r3, #20
   10132:	602b      	str	r3, [r5, #0]
   10134:	b007      	add	sp, #28
   10136:	bd30      	pop	{r4, r5, pc}

00010138 <bsec_q_Entity_serializeAndAdd>:
   10138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1013a:	681c      	ldr	r4, [r3, #0]
   1013c:	341c      	adds	r4, #28
   1013e:	4294      	cmp	r4, r2
   10140:	b089      	sub	sp, #36	; 0x24
   10142:	d903      	bls.n	1014c <bsec_q_Entity_serializeAndAdd+0x14>
   10144:	3201      	adds	r2, #1
   10146:	601a      	str	r2, [r3, #0]
   10148:	b009      	add	sp, #36	; 0x24
   1014a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1014c:	af01      	add	r7, sp, #4
   1014e:	221c      	movs	r2, #28
   10150:	460e      	mov	r6, r1
   10152:	4601      	mov	r1, r0
   10154:	4638      	mov	r0, r7
   10156:	461d      	mov	r5, r3
   10158:	f024 fc62 	bl	34a20 <memcpy>
   1015c:	ab08      	add	r3, sp, #32
   1015e:	463a      	mov	r2, r7
   10160:	682c      	ldr	r4, [r5, #0]
   10162:	1bd0      	subs	r0, r2, r7
   10164:	4420      	add	r0, r4
   10166:	f812 4b01 	ldrb.w	r4, [r2], #1
   1016a:	5434      	strb	r4, [r6, r0]
   1016c:	429a      	cmp	r2, r3
   1016e:	d1f7      	bne.n	10160 <bsec_q_Entity_serializeAndAdd+0x28>
   10170:	682b      	ldr	r3, [r5, #0]
   10172:	331c      	adds	r3, #28
   10174:	602b      	str	r3, [r5, #0]
   10176:	b009      	add	sp, #36	; 0x24
   10178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1017a:	bf00      	nop

0001017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>:
   1017c:	b538      	push	{r3, r4, r5, lr}
   1017e:	460c      	mov	r4, r1
   10180:	ed2d 8b02 	vpush	{d8}
   10184:	1e59      	subs	r1, r3, #1
   10186:	edd4 7a00 	vldr	s15, [r4]
   1018a:	4615      	mov	r5, r2
   1018c:	bbea      	cbnz	r2, 1020a <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x8e>
   1018e:	ed90 7a01 	vldr	s14, [r0, #4]
   10192:	ed9f 8a31 	vldr	s16, [pc, #196]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   10196:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1019a:	edd3 6a03 	vldr	s13, [r3, #12]
   1019e:	ee27 8a08 	vmul.f32	s16, s14, s16
   101a2:	ee38 8a26 	vadd.f32	s16, s16, s13
   101a6:	8843      	ldrh	r3, [r0, #2]
   101a8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 1025c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe0>
   101ac:	ee06 3a90 	vmov	s13, r3
   101b0:	ee70 8a67 	vsub.f32	s17, s0, s15
   101b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   101b8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101c0:	ee86 6aa5 	vdiv.f32	s12, s13, s11
   101c4:	dd34      	ble.n	10230 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xb4>
   101c6:	eddf 5a26 	vldr	s11, [pc, #152]	; 10260 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe4>
   101ca:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
   101ce:	ee27 7a25 	vmul.f32	s14, s14, s11
   101d2:	ee87 0a26 	vdiv.f32	s0, s14, s13
   101d6:	ee20 0a06 	vmul.f32	s0, s0, s12
   101da:	eef4 8ac0 	vcmpe.f32	s17, s0
   101de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101e2:	bfd8      	it	le
   101e4:	eeb0 0a68 	vmovle.f32	s0, s17
   101e8:	ee30 0a27 	vadd.f32	s0, s0, s15
   101ec:	eeb4 0a48 	vcmp.f32	s0, s16
   101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101f4:	bf48      	it	mi
   101f6:	eeb0 0a48 	vmovmi.f32	s0, s16
   101fa:	b10d      	cbz	r5, 10200 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x84>
   101fc:	eeb1 0a40 	vneg.f32	s0, s0
   10200:	ecbd 8b02 	vpop	{d8}
   10204:	ed84 0a00 	vstr	s0, [r4]
   10208:	bd38      	pop	{r3, r4, r5, pc}
   1020a:	eef1 7a67 	vneg.f32	s15, s15
   1020e:	edc4 7a00 	vstr	s15, [r4]
   10212:	ed90 7a01 	vldr	s14, [r0, #4]
   10216:	ed9f 8a10 	vldr	s16, [pc, #64]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   1021a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1021e:	ee27 8a08 	vmul.f32	s16, s14, s16
   10222:	edd3 6a01 	vldr	s13, [r3, #4]
   10226:	eeb1 0a40 	vneg.f32	s0, s0
   1022a:	ee38 8a66 	vsub.f32	s16, s16, s13
   1022e:	e7ba      	b.n	101a6 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x2a>
   10230:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   10234:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
   10238:	eeb1 0a46 	vneg.f32	s0, s12
   1023c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10240:	f01b fdfe 	bl	2be40 <expf>
   10244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10248:	ee37 0ac0 	vsub.f32	s0, s15, s0
   1024c:	edd4 7a00 	vldr	s15, [r4]
   10250:	ee20 0a28 	vmul.f32	s0, s0, s17
   10254:	e7c8      	b.n	101e8 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x6c>
   10256:	bf00      	nop
   10258:	3dc678c1 	.word	0x3dc678c1
   1025c:	42c80000 	.word	0x42c80000
   10260:	3ecbbecb 	.word	0x3ecbbecb

00010264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>:
   10264:	b430      	push	{r4, r5}
   10266:	4917      	ldr	r1, [pc, #92]	; (102c4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x60>)
   10268:	4d17      	ldr	r5, [pc, #92]	; (102c8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x64>)
   1026a:	62c1      	str	r1, [r0, #44]	; 0x2c
   1026c:	2401      	movs	r4, #1
   1026e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10272:	7004      	strb	r4, [r0, #0]
   10274:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
   10278:	8041      	strh	r1, [r0, #2]
   1027a:	6344      	str	r4, [r0, #52]	; 0x34
   1027c:	4913      	ldr	r1, [pc, #76]	; (102cc <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x68>)
   1027e:	4c14      	ldr	r4, [pc, #80]	; (102d0 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x6c>)
   10280:	63c5      	str	r5, [r0, #60]	; 0x3c
   10282:	4d14      	ldr	r5, [pc, #80]	; (102d4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x70>)
   10284:	6401      	str	r1, [r0, #64]	; 0x40
   10286:	2200      	movs	r2, #0
   10288:	2100      	movs	r1, #0
   1028a:	6444      	str	r4, [r0, #68]	; 0x44
   1028c:	6485      	str	r5, [r0, #72]	; 0x48
   1028e:	2402      	movs	r4, #2
   10290:	4d11      	ldr	r5, [pc, #68]	; (102d8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x74>)
   10292:	7704      	strb	r4, [r0, #28]
   10294:	7744      	strb	r4, [r0, #29]
   10296:	f880 404c 	strb.w	r4, [r0, #76]	; 0x4c
   1029a:	6305      	str	r5, [r0, #48]	; 0x30
   1029c:	6385      	str	r5, [r0, #56]	; 0x38
   1029e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
   102a2:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
   102a6:	8301      	strh	r1, [r0, #24]
   102a8:	8341      	strh	r1, [r0, #26]
   102aa:	e9c0 1108 	strd	r1, r1, [r0, #32]
   102ae:	6281      	str	r1, [r0, #40]	; 0x28
   102b0:	6542      	str	r2, [r0, #84]	; 0x54
   102b2:	6582      	str	r2, [r0, #88]	; 0x58
   102b4:	6082      	str	r2, [r0, #8]
   102b6:	6102      	str	r2, [r0, #16]
   102b8:	60c2      	str	r2, [r0, #12]
   102ba:	6142      	str	r2, [r0, #20]
   102bc:	6042      	str	r2, [r0, #4]
   102be:	bc30      	pop	{r4, r5}
   102c0:	4770      	bx	lr
   102c2:	bf00      	nop
   102c4:	3f004189 	.word	0x3f004189
   102c8:	640055d8 	.word	0x640055d8
   102cc:	44e10000 	.word	0x44e10000
   102d0:	47a8c000 	.word	0x47a8c000
   102d4:	4c773140 	.word	0x4c773140
   102d8:	3ecccccd 	.word	0x3ecccccd

000102dc <bsec_GasHumidityBaselineTracker_configure>:
   102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e0:	b087      	sub	sp, #28
   102e2:	ab04      	add	r3, sp, #16
   102e4:	ae05      	add	r6, sp, #20
   102e6:	4605      	mov	r5, r0
   102e8:	7800      	ldrb	r0, [r0, #0]
   102ea:	9300      	str	r3, [sp, #0]
   102ec:	9601      	str	r6, [sp, #4]
   102ee:	f10d 030f 	add.w	r3, sp, #15
   102f2:	460f      	mov	r7, r1
   102f4:	f001 fb9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   102f8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   102fc:	bb30      	cbnz	r0, 1034c <bsec_GasHumidityBaselineTracker_configure+0x70>
   102fe:	4604      	mov	r4, r0
   10300:	f105 0a3e 	add.w	sl, r5, #62	; 0x3e
   10304:	f105 093c 	add.w	r9, r5, #60	; 0x3c
   10308:	f105 084e 	add.w	r8, r5, #78	; 0x4e
   1030c:	fa5f fb84 	uxtb.w	fp, r4
   10310:	f10b 0301 	add.w	r3, fp, #1
   10314:	b2db      	uxtb	r3, r3
   10316:	3b02      	subs	r3, #2
   10318:	2b05      	cmp	r3, #5
   1031a:	d804      	bhi.n	10326 <bsec_GasHumidityBaselineTracker_configure+0x4a>
   1031c:	e8df f003 	tbb	[pc, r3]
   10320:	1f252b32 	.word	0x1f252b32
   10324:	0e19      	.short	0x0e19
   10326:	f105 0244 	add.w	r2, r5, #68	; 0x44
   1032a:	4631      	mov	r1, r6
   1032c:	4638      	mov	r0, r7
   1032e:	f7ff fb93 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10332:	f1bb 0f06 	cmp.w	fp, #6
   10336:	d007      	beq.n	10348 <bsec_GasHumidityBaselineTracker_configure+0x6c>
   10338:	3401      	adds	r4, #1
   1033a:	e7e7      	b.n	1030c <bsec_GasHumidityBaselineTracker_configure+0x30>
   1033c:	f105 0254 	add.w	r2, r5, #84	; 0x54
   10340:	4631      	mov	r1, r6
   10342:	4638      	mov	r0, r7
   10344:	f7ff fb88 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10348:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1034c:	b007      	add	sp, #28
   1034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10352:	4652      	mov	r2, sl
   10354:	4631      	mov	r1, r6
   10356:	4638      	mov	r0, r7
   10358:	f7ff fbfa 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   1035c:	e7ec      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1035e:	464a      	mov	r2, r9
   10360:	4631      	mov	r1, r6
   10362:	4638      	mov	r0, r7
   10364:	f7ff fe2a 	bl	ffbc <bsec_n_Entity_parseAndDeserialize>
   10368:	e7e6      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1036a:	4642      	mov	r2, r8
   1036c:	4631      	mov	r1, r6
   1036e:	4638      	mov	r0, r7
   10370:	f7ff fdea 	bl	ff48 <bsec_m_Entity_parseAndDeserialize>
   10374:	e7e0      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10376:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   1037a:	4631      	mov	r1, r6
   1037c:	4638      	mov	r0, r7
   1037e:	f7ff fdab 	bl	fed8 <bsec_l_Entity_parseAndDeserialize>
   10382:	e7d9      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10384:	4631      	mov	r1, r6
   10386:	4638      	mov	r0, r7
   10388:	f7ff fc1e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1038c:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
   10390:	e7d2      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10392:	bf00      	nop

00010394 <bsec_GasHumidityBaselineTracker_doStep>:
   10394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10398:	ed9f 7adc 	vldr	s14, [pc, #880]	; 1070c <bsec_GasHumidityBaselineTracker_doStep+0x378>
   1039c:	eddf 7adc 	vldr	s15, [pc, #880]	; 10710 <bsec_GasHumidityBaselineTracker_doStep+0x37c>
   103a0:	eddf 6adc 	vldr	s13, [pc, #880]	; 10714 <bsec_GasHumidityBaselineTracker_doStep+0x380>
   103a4:	ed2d 8b0a 	vpush	{d8-d12}
   103a8:	ee20 7a87 	vmul.f32	s14, s1, s14
   103ac:	ee70 7aa7 	vadd.f32	s15, s1, s15
   103b0:	edd0 8a01 	vldr	s17, [r0, #4]
   103b4:	b089      	sub	sp, #36	; 0x24
   103b6:	eeb0 aa40 	vmov.f32	s20, s0
   103ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
   103be:	461d      	mov	r5, r3
   103c0:	4604      	mov	r4, r0
   103c2:	468a      	mov	sl, r1
   103c4:	4693      	mov	fp, r2
   103c6:	e9dd 761c 	ldrd	r7, r6, [sp, #112]	; 0x70
   103ca:	eeb0 8a60 	vmov.f32	s16, s1
   103ce:	eeb0 9a41 	vmov.f32	s18, s2
   103d2:	eef0 9a61 	vmov.f32	s19, s3
   103d6:	ee68 8aa6 	vmul.f32	s17, s17, s13
   103da:	f01b fd31 	bl	2be40 <expf>
   103de:	ed9f 6ace 	vldr	s12, [pc, #824]	; 10718 <bsec_GasHumidityBaselineTracker_doStep+0x384>
   103e2:	eddf 7ace 	vldr	s15, [pc, #824]	; 1071c <bsec_GasHumidityBaselineTracker_doStep+0x388>
   103e6:	ed9f 7ace 	vldr	s14, [pc, #824]	; 10720 <bsec_GasHumidityBaselineTracker_doStep+0x38c>
   103ea:	ed9f 5ace 	vldr	s10, [pc, #824]	; 10724 <bsec_GasHumidityBaselineTracker_doStep+0x390>
   103ee:	eddf 5ace 	vldr	s11, [pc, #824]	; 10728 <bsec_GasHumidityBaselineTracker_doStep+0x394>
   103f2:	ee29 6a06 	vmul.f32	s12, s18, s12
   103f6:	ee38 7a07 	vadd.f32	s14, s16, s14
   103fa:	eec6 6a27 	vdiv.f32	s13, s12, s15
   103fe:	ee26 0a80 	vmul.f32	s0, s13, s0
   10402:	eec0 7a07 	vdiv.f32	s15, s0, s14
   10406:	ee67 7a85 	vmul.f32	s15, s15, s10
   1040a:	eef4 7ae5 	vcmpe.f32	s15, s11
   1040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10412:	bfdc      	itt	le
   10414:	f10d 0820 	addle.w	r8, sp, #32
   10418:	ee15 3a90 	vmovle	r3, s11
   1041c:	edcd 7a06 	vstr	s15, [sp, #24]
   10420:	bfd4      	ite	le
   10422:	f848 3d08 	strle.w	r3, [r8, #-8]!
   10426:	f10d 0818 	addgt.w	r8, sp, #24
   1042a:	4640      	mov	r0, r8
   1042c:	f001 fbd8 	bl	11be0 <bsec_log10>
   10430:	8863      	ldrh	r3, [r4, #2]
   10432:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10436:	f000 8142 	beq.w	106be <bsec_GasHumidityBaselineTracker_doStep+0x32a>
   1043a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   1043e:	f000 813b 	beq.w	106b8 <bsec_GasHumidityBaselineTracker_doStep+0x324>
   10442:	2b64      	cmp	r3, #100	; 0x64
   10444:	f000 809f 	beq.w	10586 <bsec_GasHumidityBaselineTracker_doStep+0x1f2>
   10448:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
   1044c:	eddd 7a06 	vldr	s15, [sp, #24]
   10450:	ee20 0a27 	vmul.f32	s0, s0, s15
   10454:	ee30 0a0a 	vadd.f32	s0, s0, s20
   10458:	ed86 0a00 	vstr	s0, [r6]
   1045c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10460:	ee07 3a90 	vmov	s15, r3
   10464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10468:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10470:	d836      	bhi.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10472:	f994 303c 	ldrsb.w	r3, [r4, #60]	; 0x3c
   10476:	ee07 3a90 	vmov	s15, r3
   1047a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1047e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   10482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10486:	f2c0 8081 	blt.w	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   1048a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1048e:	ee07 3a90 	vmov	s15, r3
   10492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10496:	eeb4 9ae7 	vcmpe.f32	s18, s15
   1049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1049e:	d875      	bhi.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   104a4:	ee07 3a90 	vmov	s15, r3
   104a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   104ac:	eeb4 9ae7 	vcmpe.f32	s18, s15
   104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104b4:	db6a      	blt.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104b6:	f1bb 0f00 	cmp.w	fp, #0
   104ba:	d011      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   104bc:	b995      	cbnz	r5, 104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   104be:	eef5 9a40 	vcmp.f32	s19, #0.0
   104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104c6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
   104c8:	f040 8189 	bne.w	107de <bsec_GasHumidityBaselineTracker_doStep+0x44a>
   104cc:	2d00      	cmp	r5, #0
   104ce:	f000 813d 	beq.w	1074c <bsec_GasHumidityBaselineTracker_doStep+0x3b8>
   104d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   104d4:	1aed      	subs	r5, r5, r3
   104d6:	f104 0308 	add.w	r3, r4, #8
   104da:	8525      	strh	r5, [r4, #40]	; 0x28
   104dc:	9301      	str	r3, [sp, #4]
   104de:	e05d      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   104e0:	2d00      	cmp	r5, #0
   104e2:	d058      	beq.n	10596 <bsec_GasHumidityBaselineTracker_doStep+0x202>
   104e4:	edd4 7a02 	vldr	s15, [r4, #8]
   104e8:	eef5 7a40 	vcmp.f32	s15, #0.0
   104ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104f0:	bf18      	it	ne
   104f2:	edcd 7a02 	vstrne	s15, [sp, #8]
   104f6:	edd4 7a04 	vldr	s15, [r4, #16]
   104fa:	bf04      	itt	eq
   104fc:	6833      	ldreq	r3, [r6, #0]
   104fe:	9302      	streq	r3, [sp, #8]
   10500:	eef5 7a40 	vcmp.f32	s15, #0.0
   10504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10508:	bf08      	it	eq
   1050a:	eddd 7a02 	vldreq	s15, [sp, #8]
   1050e:	6a23      	ldr	r3, [r4, #32]
   10510:	9306      	str	r3, [sp, #24]
   10512:	bf08      	it	eq
   10514:	ee77 7ae8 	vsubeq.f32	s15, s15, s17
   10518:	2208      	movs	r2, #8
   1051a:	edcd 7a04 	vstr	s15, [sp, #16]
   1051e:	edd4 7a03 	vldr	s15, [r4, #12]
   10522:	eef5 7a40 	vcmp.f32	s15, #0.0
   10526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1052a:	bf18      	it	ne
   1052c:	edcd 7a03 	vstrne	s15, [sp, #12]
   10530:	edd4 7a05 	vldr	s15, [r4, #20]
   10534:	bf04      	itt	eq
   10536:	6833      	ldreq	r3, [r6, #0]
   10538:	9303      	streq	r3, [sp, #12]
   1053a:	eef5 7a40 	vcmp.f32	s15, #0.0
   1053e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10542:	bf08      	it	eq
   10544:	eddd 7a03 	vldreq	s15, [sp, #12]
   10548:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1054a:	bf14      	ite	ne
   1054c:	edcd 7a05 	vstrne	s15, [sp, #20]
   10550:	ee77 8ae8 	vsubeq.f32	s17, s15, s17
   10554:	eb0d 0102 	add.w	r1, sp, r2
   10558:	4638      	mov	r0, r7
   1055a:	bf08      	it	eq
   1055c:	edcd 8a05 	vstreq	s17, [sp, #20]
   10560:	9307      	str	r3, [sp, #28]
   10562:	f024 fa5d 	bl	34a20 <memcpy>
   10566:	2208      	movs	r2, #8
   10568:	a904      	add	r1, sp, #16
   1056a:	18b8      	adds	r0, r7, r2
   1056c:	f024 fa58 	bl	34a20 <memcpy>
   10570:	4641      	mov	r1, r8
   10572:	f107 0010 	add.w	r0, r7, #16
   10576:	2208      	movs	r2, #8
   10578:	f024 fa52 	bl	34a20 <memcpy>
   1057c:	b009      	add	sp, #36	; 0x24
   1057e:	ecbd 8b0a 	vpop	{d8-d12}
   10582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10586:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
   1058a:	e75f      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   1058c:	f1bb 0f00 	cmp.w	fp, #0
   10590:	d0a6      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10592:	2d00      	cmp	r5, #0
   10594:	d1a6      	bne.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   10596:	f104 0308 	add.w	r3, r4, #8
   1059a:	9301      	str	r3, [sp, #4]
   1059c:	9d01      	ldr	r5, [sp, #4]
   1059e:	eddf 9a63 	vldr	s19, [pc, #396]	; 1072c <bsec_GasHumidityBaselineTracker_doStep+0x398>
   105a2:	ed9f ba63 	vldr	s22, [pc, #396]	; 10730 <bsec_GasHumidityBaselineTracker_doStep+0x39c>
   105a6:	eddf aa63 	vldr	s21, [pc, #396]	; 10734 <bsec_GasHumidityBaselineTracker_doStep+0x3a0>
   105aa:	ed9f aa63 	vldr	s20, [pc, #396]	; 10738 <bsec_GasHumidityBaselineTracker_doStep+0x3a4>
   105ae:	971c      	str	r7, [sp, #112]	; 0x70
   105b0:	f104 091c 	add.w	r9, r4, #28
   105b4:	f104 0310 	add.w	r3, r4, #16
   105b8:	464f      	mov	r7, r9
   105ba:	9301      	str	r3, [sp, #4]
   105bc:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
   105c0:	46a9      	mov	r9, r5
   105c2:	ed99 7a00 	vldr	s14, [r9]
   105c6:	edd9 7a02 	vldr	s15, [r9, #8]
   105ca:	eeb4 7ac0 	vcmpe.f32	s14, s0
   105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105d2:	f240 8088 	bls.w	106e6 <bsec_GasHumidityBaselineTracker_doStep+0x352>
   105d6:	eef4 7ac0 	vcmpe.f32	s15, s0
   105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105de:	bfac      	ite	ge
   105e0:	2501      	movge	r5, #1
   105e2:	2500      	movlt	r5, #0
   105e4:	ee37 9a40 	vsub.f32	s18, s14, s0
   105e8:	ee30 8a67 	vsub.f32	s16, s0, s15
   105ec:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   105f8:	bf48      	it	mi
   105fa:	eeb0 9a69 	vmovmi.f32	s18, s19
   105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10602:	eef5 7a40 	vcmp.f32	s15, #0.0
   10606:	bf48      	it	mi
   10608:	eeb0 8a69 	vmovmi.f32	s16, s19
   1060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10610:	d16d      	bne.n	106ee <bsec_GasHumidityBaselineTracker_doStep+0x35a>
   10612:	eeb0 ca68 	vmov.f32	s24, s17
   10616:	eef0 0a48 	vmov.f32	s1, s16
   1061a:	eeb0 0a49 	vmov.f32	s0, s18
   1061e:	f01b fb87 	bl	2bd30 <fminf>
   10622:	ee30 0a00 	vadd.f32	s0, s0, s0
   10626:	eec0 7a0c 	vdiv.f32	s15, s0, s24
   1062a:	eef4 7a6b 	vcmp.f32	s15, s23
   1062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10632:	bfc8      	it	gt
   10634:	eef0 7a6b 	vmovgt.f32	s15, s23
   10638:	f1ba 0f00 	cmp.w	sl, #0
   1063c:	d042      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   1063e:	f1bb 0f00 	cmp.w	fp, #0
   10642:	d03f      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   10644:	edd9 6a06 	vldr	s13, [r9, #24]
   10648:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   1064c:	eef4 6a47 	vcmp.f32	s13, s14
   10650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10654:	d172      	bne.n	1073c <bsec_GasHumidityBaselineTracker_doStep+0x3a8>
   10656:	ee7b 7ae7 	vsub.f32	s15, s23, s15
   1065a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
   1065e:	ee67 7aa7 	vmul.f32	s15, s15, s15
   10662:	ee67 7a87 	vmul.f32	s15, s15, s14
   10666:	ee67 7aaa 	vmul.f32	s15, s15, s21
   1066a:	ee77 7a8a 	vadd.f32	s15, s15, s20
   1066e:	eef0 6a68 	vmov.f32	s13, s17
   10672:	ee48 6aa7 	vmla.f32	s13, s17, s15
   10676:	ed99 7a02 	vldr	s14, [r9, #8]
   1067a:	edd9 7a00 	vldr	s15, [r9]
   1067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10682:	eef4 6ae7 	vcmpe.f32	s13, s15
   10686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1068a:	dc39      	bgt.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   1068c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10694:	d034      	beq.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   10696:	2d00      	cmp	r5, #0
   10698:	d153      	bne.n	10742 <bsec_GasHumidityBaselineTracker_doStep+0x3ae>
   1069a:	7839      	ldrb	r1, [r7, #0]
   1069c:	29ff      	cmp	r1, #255	; 0xff
   1069e:	f000 80c2 	beq.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106a2:	3101      	adds	r1, #1
   106a4:	b2c9      	uxtb	r1, r1
   106a6:	7039      	strb	r1, [r7, #0]
   106a8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   106ac:	4288      	cmp	r0, r1
   106ae:	f240 80ba 	bls.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   106b6:	e00a      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   106b8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
   106bc:	e6c6      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106be:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   106c2:	e6c3      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106c4:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   106c8:	7039      	strb	r1, [r7, #0]
   106ca:	eef0 7a69 	vmov.f32	s15, s19
   106ce:	9b01      	ldr	r3, [sp, #4]
   106d0:	edc9 7a06 	vstr	s15, [r9, #24]
   106d4:	f109 0904 	add.w	r9, r9, #4
   106d8:	454b      	cmp	r3, r9
   106da:	f107 0701 	add.w	r7, r7, #1
   106de:	d004      	beq.n	106ea <bsec_GasHumidityBaselineTracker_doStep+0x356>
   106e0:	ed96 0a00 	vldr	s0, [r6]
   106e4:	e76d      	b.n	105c2 <bsec_GasHumidityBaselineTracker_doStep+0x22e>
   106e6:	2501      	movs	r5, #1
   106e8:	e77c      	b.n	105e4 <bsec_GasHumidityBaselineTracker_doStep+0x250>
   106ea:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   106ec:	e6fa      	b.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   106ee:	ee37 0a67 	vsub.f32	s0, s14, s15
   106f2:	eef0 0a68 	vmov.f32	s1, s17
   106f6:	f01b fafd 	bl	2bcf4 <fmaxf>
   106fa:	eeb0 ca40 	vmov.f32	s24, s0
   106fe:	e78a      	b.n	10616 <bsec_GasHumidityBaselineTracker_doStep+0x282>
   10700:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   10704:	7039      	strb	r1, [r7, #0]
   10706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1070a:	e7e0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1070c:	418cf5c3 	.word	0x418cf5c3
   10710:	43731eb8 	.word	0x43731eb8
   10714:	3dc678c1 	.word	0x3dc678c1
   10718:	40c39581 	.word	0x40c39581
   1071c:	42c80000 	.word	0x42c80000
   10720:	43889333 	.word	0x43889333
   10724:	4358b333 	.word	0x4358b333
   10728:	3c23d70a 	.word	0x3c23d70a
   1072c:	00000000 	.word	0x00000000
   10730:	3e99999a 	.word	0x3e99999a
   10734:	3e4ccccd 	.word	0x3e4ccccd
   10738:	3dcccccd 	.word	0x3dcccccd
   1073c:	eef0 7a4b 	vmov.f32	s15, s22
   10740:	e795      	b.n	1066e <bsec_GasHumidityBaselineTracker_doStep+0x2da>
   10742:	2100      	movs	r1, #0
   10744:	7039      	strb	r1, [r7, #0]
   10746:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1074a:	e7c0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1074c:	f104 0308 	add.w	r3, r4, #8
   10750:	9301      	str	r3, [sp, #4]
   10752:	461d      	mov	r5, r3
   10754:	f04f 0901 	mov.w	r9, #1
   10758:	edd5 7a00 	vldr	s15, [r5]
   1075c:	eef5 7a40 	vcmp.f32	s15, #0.0
   10760:	edd5 7a02 	vldr	s15, [r5, #8]
   10764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10768:	bf08      	it	eq
   1076a:	ed85 0a00 	vstreq	s0, [r5]
   1076e:	eef5 7a40 	vcmp.f32	s15, #0.0
   10772:	bf08      	it	eq
   10774:	ed96 0a00 	vldreq	s0, [r6]
   10778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1077c:	464b      	mov	r3, r9
   1077e:	4629      	mov	r1, r5
   10780:	f04f 0200 	mov.w	r2, #0
   10784:	4620      	mov	r0, r4
   10786:	d10c      	bne.n	107a2 <bsec_GasHumidityBaselineTracker_doStep+0x40e>
   10788:	edd5 7a00 	vldr	s15, [r5]
   1078c:	ee77 7ae8 	vsub.f32	s15, s15, s17
   10790:	eef4 7ac0 	vcmpe.f32	s15, s0
   10794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10798:	bfc4      	itt	gt
   1079a:	ed85 0a02 	vstrgt	s0, [r5, #8]
   1079e:	ed96 0a00 	vldrgt	s0, [r6]
   107a2:	f7ff fceb 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107a6:	edd5 7a02 	vldr	s15, [r5, #8]
   107aa:	eef5 7a40 	vcmp.f32	s15, #0.0
   107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   107b2:	d10a      	bne.n	107ca <bsec_GasHumidityBaselineTracker_doStep+0x436>
   107b4:	f1b9 0f02 	cmp.w	r9, #2
   107b8:	f105 0504 	add.w	r5, r5, #4
   107bc:	ed96 0a00 	vldr	s0, [r6]
   107c0:	f43f aeec 	beq.w	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   107c4:	f04f 0902 	mov.w	r9, #2
   107c8:	e7c6      	b.n	10758 <bsec_GasHumidityBaselineTracker_doStep+0x3c4>
   107ca:	464b      	mov	r3, r9
   107cc:	2201      	movs	r2, #1
   107ce:	f105 0108 	add.w	r1, r5, #8
   107d2:	ed96 0a00 	vldr	s0, [r6]
   107d6:	4620      	mov	r0, r4
   107d8:	f7ff fcd0 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107dc:	e7ea      	b.n	107b4 <bsec_GasHumidityBaselineTracker_doStep+0x420>
   107de:	eefd 7ae9 	vcvt.s32.f32	s15, s19
   107e2:	f104 0208 	add.w	r2, r4, #8
   107e6:	ee17 3a90 	vmov	r3, s15
   107ea:	9201      	str	r2, [sp, #4]
   107ec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   107f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   107f4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
   107f8:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
   107fc:	1aab      	subs	r3, r5, r2
   107fe:	b29b      	uxth	r3, r3
   10800:	ee07 3a90 	vmov	s15, r3
   10804:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   10808:	f01b fb1a 	bl	2be40 <expf>
   1080c:	ee88 0a00 	vdiv.f32	s0, s16, s0
   10810:	f01b fac8 	bl	2bda4 <roundf>
   10814:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10818:	ed96 0a00 	vldr	s0, [r6]
   1081c:	ee17 3a90 	vmov	r3, s15
   10820:	1aed      	subs	r5, r5, r3
   10822:	8525      	strh	r5, [r4, #40]	; 0x28
   10824:	e6ba      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   10826:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   1082a:	e750      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>

0001082c <bsec_GasHumidityBaselineTracker_getConfiguration>:
   1082c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10830:	b085      	sub	sp, #20
   10832:	ac04      	add	r4, sp, #16
   10834:	2507      	movs	r5, #7
   10836:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1083a:	4606      	mov	r6, r0
   1083c:	4617      	mov	r7, r2
   1083e:	7800      	ldrb	r0, [r0, #0]
   10840:	4622      	mov	r2, r4
   10842:	460d      	mov	r5, r1
   10844:	f001 f922 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10848:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1084c:	9003      	str	r0, [sp, #12]
   1084e:	b1d2      	cbz	r2, 10886 <bsec_GasHumidityBaselineTracker_getConfiguration+0x5a>
   10850:	2401      	movs	r4, #1
   10852:	f106 0954 	add.w	r9, r6, #84	; 0x54
   10856:	f106 083e 	add.w	r8, r6, #62	; 0x3e
   1085a:	1e63      	subs	r3, r4, #1
   1085c:	2b06      	cmp	r3, #6
   1085e:	d80d      	bhi.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   10860:	e8df f003 	tbb	[pc, r3]
   10864:	4953353f 	.word	0x4953353f
   10868:	222b      	.short	0x222b
   1086a:	04          	.byte	0x04
   1086b:	00          	.byte	0x00
   1086c:	463a      	mov	r2, r7
   1086e:	ab03      	add	r3, sp, #12
   10870:	4629      	mov	r1, r5
   10872:	4648      	mov	r0, r9
   10874:	f7ff f90a 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10878:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1087c:	3401      	adds	r4, #1
   1087e:	b2e4      	uxtb	r4, r4
   10880:	42a2      	cmp	r2, r4
   10882:	d2ea      	bcs.n	1085a <bsec_GasHumidityBaselineTracker_getConfiguration+0x2e>
   10884:	9803      	ldr	r0, [sp, #12]
   10886:	a904      	add	r1, sp, #16
   10888:	2202      	movs	r2, #2
   1088a:	f821 0d06 	strh.w	r0, [r1, #-6]!
   1088e:	a802      	add	r0, sp, #8
   10890:	f024 f8c6 	bl	34a20 <memcpy>
   10894:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10898:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1089c:	9803      	ldr	r0, [sp, #12]
   1089e:	702a      	strb	r2, [r5, #0]
   108a0:	706b      	strb	r3, [r5, #1]
   108a2:	b005      	add	sp, #20
   108a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   108a8:	463a      	mov	r2, r7
   108aa:	ab03      	add	r3, sp, #12
   108ac:	4629      	mov	r1, r5
   108ae:	4640      	mov	r0, r8
   108b0:	f7ff f964 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   108b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108b8:	e7e0      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ba:	463a      	mov	r2, r7
   108bc:	ab03      	add	r3, sp, #12
   108be:	4629      	mov	r1, r5
   108c0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   108c4:	f7ff fae2 	bl	fe8c <bsec_k_Entity_serializeAndAdd>
   108c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108cc:	e7d6      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ce:	aa03      	add	r2, sp, #12
   108d0:	4639      	mov	r1, r7
   108d2:	4628      	mov	r0, r5
   108d4:	ed96 0a10 	vldr	s0, [r6, #64]	; 0x40
   108d8:	f7ff f990 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   108dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108e0:	e7cc      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108e2:	463a      	mov	r2, r7
   108e4:	ab03      	add	r3, sp, #12
   108e6:	4629      	mov	r1, r5
   108e8:	f106 0044 	add.w	r0, r6, #68	; 0x44
   108ec:	f7ff f8ce 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   108f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108f4:	e7c2      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108f6:	463a      	mov	r2, r7
   108f8:	ab03      	add	r3, sp, #12
   108fa:	4629      	mov	r1, r5
   108fc:	f106 004e 	add.w	r0, r6, #78	; 0x4e
   10900:	f7ff fa82 	bl	fe08 <bsec_j_Entity_serializeAndAdd>
   10904:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10908:	e7b8      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1090a:	463a      	mov	r2, r7
   1090c:	ab03      	add	r3, sp, #12
   1090e:	4629      	mov	r1, r5
   10910:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   10914:	f7ff fa36 	bl	fd84 <bsec_i_Entity_serializeAndAdd>
   10918:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1091c:	e7ae      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1091e:	bf00      	nop

00010920 <bsec_GasHumidityBaselineTracker_getState>:
   10920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10924:	b085      	sub	sp, #20
   10926:	ac04      	add	r4, sp, #16
   10928:	250b      	movs	r5, #11
   1092a:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1092e:	4606      	mov	r6, r0
   10930:	4617      	mov	r7, r2
   10932:	7800      	ldrb	r0, [r0, #0]
   10934:	4622      	mov	r2, r4
   10936:	460d      	mov	r5, r1
   10938:	f001 f8a8 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1093c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10940:	9003      	str	r0, [sp, #12]
   10942:	b1ea      	cbz	r2, 10980 <bsec_GasHumidityBaselineTracker_getState+0x60>
   10944:	2401      	movs	r4, #1
   10946:	f106 0920 	add.w	r9, r6, #32
   1094a:	f106 081c 	add.w	r8, r6, #28
   1094e:	1e63      	subs	r3, r4, #1
   10950:	2b0a      	cmp	r3, #10
   10952:	d810      	bhi.n	10976 <bsec_GasHumidityBaselineTracker_getState+0x56>
   10954:	e8df f003 	tbb	[pc, r3]
   10958:	7482909f 	.word	0x7482909f
   1095c:	404d5a67 	.word	0x404d5a67
   10960:	2533      	.short	0x2533
   10962:	06          	.byte	0x06
   10963:	00          	.byte	0x00
   10964:	463a      	mov	r2, r7
   10966:	ab03      	add	r3, sp, #12
   10968:	4629      	mov	r1, r5
   1096a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
   1096e:	f7ff f97d 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   10972:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10976:	3401      	adds	r4, #1
   10978:	b2e4      	uxtb	r4, r4
   1097a:	42a2      	cmp	r2, r4
   1097c:	d2e7      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   1097e:	9803      	ldr	r0, [sp, #12]
   10980:	a904      	add	r1, sp, #16
   10982:	2202      	movs	r2, #2
   10984:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10988:	a802      	add	r0, sp, #8
   1098a:	f024 f849 	bl	34a20 <memcpy>
   1098e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10992:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10996:	9803      	ldr	r0, [sp, #12]
   10998:	702a      	strb	r2, [r5, #0]
   1099a:	706b      	strb	r3, [r5, #1]
   1099c:	b005      	add	sp, #20
   1099e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109a2:	aa03      	add	r2, sp, #12
   109a4:	4639      	mov	r1, r7
   109a6:	4628      	mov	r0, r5
   109a8:	ed96 0a01 	vldr	s0, [r6, #4]
   109ac:	f7ff f926 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   109b0:	3401      	adds	r4, #1
   109b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109b6:	b2e4      	uxtb	r4, r4
   109b8:	42a2      	cmp	r2, r4
   109ba:	d2c8      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109bc:	e7df      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109be:	463a      	mov	r2, r7
   109c0:	ab03      	add	r3, sp, #12
   109c2:	4629      	mov	r1, r5
   109c4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   109c6:	f7ff f8a1 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109ca:	3401      	adds	r4, #1
   109cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109d0:	b2e4      	uxtb	r4, r4
   109d2:	42a2      	cmp	r2, r4
   109d4:	d2bb      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109d6:	e7d2      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109d8:	463a      	mov	r2, r7
   109da:	ab03      	add	r3, sp, #12
   109dc:	4629      	mov	r1, r5
   109de:	8d30      	ldrh	r0, [r6, #40]	; 0x28
   109e0:	f7ff f894 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109e4:	3401      	adds	r4, #1
   109e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109ea:	b2e4      	uxtb	r4, r4
   109ec:	42a2      	cmp	r2, r4
   109ee:	d2ae      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109f0:	e7c5      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109f2:	463a      	mov	r2, r7
   109f4:	ab03      	add	r3, sp, #12
   109f6:	4629      	mov	r1, r5
   109f8:	4648      	mov	r0, r9
   109fa:	f7ff f847 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   109fe:	3401      	adds	r4, #1
   10a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a04:	b2e4      	uxtb	r4, r4
   10a06:	42a2      	cmp	r2, r4
   10a08:	d2a1      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a0a:	e7b8      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a0c:	463a      	mov	r2, r7
   10a0e:	ab03      	add	r3, sp, #12
   10a10:	4629      	mov	r1, r5
   10a12:	4640      	mov	r0, r8
   10a14:	f7ff f8b2 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   10a18:	3401      	adds	r4, #1
   10a1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a1e:	b2e4      	uxtb	r4, r4
   10a20:	42a2      	cmp	r2, r4
   10a22:	d294      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a24:	e7ab      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a26:	463a      	mov	r2, r7
   10a28:	ab03      	add	r3, sp, #12
   10a2a:	4629      	mov	r1, r5
   10a2c:	8870      	ldrh	r0, [r6, #2]
   10a2e:	f7ff f86d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a32:	3401      	adds	r4, #1
   10a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a38:	b2e4      	uxtb	r4, r4
   10a3a:	42a2      	cmp	r2, r4
   10a3c:	d287      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a3e:	e79e      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a40:	463a      	mov	r2, r7
   10a42:	ab03      	add	r3, sp, #12
   10a44:	4629      	mov	r1, r5
   10a46:	8b70      	ldrh	r0, [r6, #26]
   10a48:	f7ff f860 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a4c:	3401      	adds	r4, #1
   10a4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a52:	b2e4      	uxtb	r4, r4
   10a54:	42a2      	cmp	r2, r4
   10a56:	f4bf af7a 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a5a:	e790      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a5c:	463a      	mov	r2, r7
   10a5e:	ab03      	add	r3, sp, #12
   10a60:	4629      	mov	r1, r5
   10a62:	8b30      	ldrh	r0, [r6, #24]
   10a64:	f7ff f852 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a68:	3401      	adds	r4, #1
   10a6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a6e:	b2e4      	uxtb	r4, r4
   10a70:	42a2      	cmp	r2, r4
   10a72:	f4bf af6c 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a76:	e782      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a78:	463a      	mov	r2, r7
   10a7a:	ab03      	add	r3, sp, #12
   10a7c:	4629      	mov	r1, r5
   10a7e:	f106 0010 	add.w	r0, r6, #16
   10a82:	f7ff f803 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10a86:	3401      	adds	r4, #1
   10a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a8c:	b2e4      	uxtb	r4, r4
   10a8e:	42a2      	cmp	r2, r4
   10a90:	f4bf af5d 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a94:	e773      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a96:	463a      	mov	r2, r7
   10a98:	ab03      	add	r3, sp, #12
   10a9a:	4629      	mov	r1, r5
   10a9c:	f106 0008 	add.w	r0, r6, #8
   10aa0:	f7fe fff4 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10aa4:	3401      	adds	r4, #1
   10aa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10aaa:	b2e4      	uxtb	r4, r4
   10aac:	42a2      	cmp	r2, r4
   10aae:	f4bf af4e 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10ab2:	e764      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>

00010ab4 <bsec_GasHumidityBaselineTracker_setState>:
   10ab4:	2300      	movs	r3, #0
   10ab6:	2200      	movs	r2, #0
   10ab8:	2102      	movs	r1, #2
   10aba:	b410      	push	{r4}
   10abc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   10ac0:	8044      	strh	r4, [r0, #2]
   10ac2:	8302      	strh	r2, [r0, #24]
   10ac4:	8342      	strh	r2, [r0, #26]
   10ac6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   10aca:	6282      	str	r2, [r0, #40]	; 0x28
   10acc:	6083      	str	r3, [r0, #8]
   10ace:	6103      	str	r3, [r0, #16]
   10ad0:	60c3      	str	r3, [r0, #12]
   10ad2:	6143      	str	r3, [r0, #20]
   10ad4:	6043      	str	r3, [r0, #4]
   10ad6:	7701      	strb	r1, [r0, #28]
   10ad8:	7741      	strb	r1, [r0, #29]
   10ada:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
   10ade:	f85d 4b04 	ldr.w	r4, [sp], #4
   10ae2:	4770      	bx	lr

00010ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>:
   10ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10ae8:	4299      	cmp	r1, r3
   10aea:	d04f      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10aec:	8843      	ldrh	r3, [r0, #2]
   10aee:	428b      	cmp	r3, r1
   10af0:	d04c      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10af2:	b570      	push	{r4, r5, r6, lr}
   10af4:	4b3b      	ldr	r3, [pc, #236]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10af6:	4605      	mov	r5, r0
   10af8:	fba3 2301 	umull	r2, r3, r3, r1
   10afc:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   10b00:	b082      	sub	sp, #8
   10b02:	460c      	mov	r4, r1
   10b04:	8069      	strh	r1, [r5, #2]
   10b06:	ea4f 1353 	mov.w	r3, r3, lsr #5
   10b0a:	d067      	beq.n	10bdc <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xf8>
   10b0c:	d93f      	bls.n	10b8e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xaa>
   10b0e:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   10b12:	d03e      	beq.n	10b92 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xae>
   10b14:	f247 5230 	movw	r2, #30000	; 0x7530
   10b18:	4291      	cmp	r1, r2
   10b1a:	d150      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b1c:	4a32      	ldr	r2, [pc, #200]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10b1e:	9201      	str	r2, [sp, #4]
   10b20:	ae01      	add	r6, sp, #4
   10b22:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b24:	4630      	mov	r0, r6
   10b26:	f001 f85b 	bl	11be0 <bsec_log10>
   10b2a:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b2e:	f01b f8d5 	bl	2bcdc <fabsf>
   10b32:	eddf 7a2e 	vldr	s15, [pc, #184]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10b36:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10b3a:	ed85 0a01 	vstr	s0, [r5, #4]
   10b3e:	f247 5230 	movw	r2, #30000	; 0x7530
   10b42:	fbb2 f3f4 	udiv	r3, r2, r4
   10b46:	fb04 2213 	mls	r2, r4, r3, r2
   10b4a:	b292      	uxth	r2, r2
   10b4c:	b29b      	uxth	r3, r3
   10b4e:	b132      	cbz	r2, 10b5e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x7a>
   10b50:	f004 0101 	and.w	r1, r4, #1
   10b54:	eb01 0454 	add.w	r4, r1, r4, lsr #1
   10b58:	42a2      	cmp	r2, r4
   10b5a:	bfa8      	it	ge
   10b5c:	3301      	addge	r3, #1
   10b5e:	ee07 3a90 	vmov	s15, r3
   10b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10b66:	4630      	mov	r0, r6
   10b68:	edcd 7a01 	vstr	s15, [sp, #4]
   10b6c:	f001 f84c 	bl	11c08 <bsec_b_sqrt>
   10b70:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b74:	ee30 0a00 	vadd.f32	s0, s0, s0
   10b78:	f01b f8b8 	bl	2bcec <floorf>
   10b7c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10b80:	ee17 3a90 	vmov	r3, s15
   10b84:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
   10b88:	b002      	add	sp, #8
   10b8a:	bd70      	pop	{r4, r5, r6, pc}
   10b8c:	4770      	bx	lr
   10b8e:	2964      	cmp	r1, #100	; 0x64
   10b90:	d115      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b92:	4a17      	ldr	r2, [pc, #92]	; (10bf0 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x10c>)
   10b94:	9201      	str	r2, [sp, #4]
   10b96:	ae01      	add	r6, sp, #4
   10b98:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b9a:	4630      	mov	r0, r6
   10b9c:	f001 f820 	bl	11be0 <bsec_log10>
   10ba0:	ed9d 0a01 	vldr	s0, [sp, #4]
   10ba4:	f01b f89a 	bl	2bcdc <fabsf>
   10ba8:	eddf 7a10 	vldr	s15, [pc, #64]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10bac:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10bb0:	ed85 0a01 	vstr	s0, [r5, #4]
   10bb4:	2c00      	cmp	r4, #0
   10bb6:	d1c2      	bne.n	10b3e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x5a>
   10bb8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 10bf4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x110>
   10bbc:	e7d3      	b.n	10b66 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x82>
   10bbe:	4a09      	ldr	r2, [pc, #36]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10bc0:	4909      	ldr	r1, [pc, #36]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10bc2:	9101      	str	r1, [sp, #4]
   10bc4:	fba2 0204 	umull	r0, r2, r2, r4
   10bc8:	0952      	lsrs	r2, r2, #5
   10bca:	2064      	movs	r0, #100	; 0x64
   10bcc:	fb00 4212 	mls	r2, r0, r2, r4
   10bd0:	b292      	uxth	r2, r2
   10bd2:	2a31      	cmp	r2, #49	; 0x31
   10bd4:	bf84      	itt	hi
   10bd6:	3301      	addhi	r3, #1
   10bd8:	b29b      	uxthhi	r3, r3
   10bda:	e7dc      	b.n	10b96 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xb2>
   10bdc:	4a06      	ldr	r2, [pc, #24]	; (10bf8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x114>)
   10bde:	9201      	str	r2, [sp, #4]
   10be0:	e79e      	b.n	10b20 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x3c>
   10be2:	bf00      	nop
   10be4:	51eb851f 	.word	0x51eb851f
   10be8:	3f464c30 	.word	0x3f464c30
   10bec:	3e632c50 	.word	0x3e632c50
   10bf0:	3f19999a 	.word	0x3f19999a
   10bf4:	477fff00 	.word	0x477fff00
   10bf8:	3f23d70a 	.word	0x3f23d70a

00010bfc <bsec_b_GasHumidityBaselineTracker_setState>:
   10bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c00:	b086      	sub	sp, #24
   10c02:	ab04      	add	r3, sp, #16
   10c04:	ae05      	add	r6, sp, #20
   10c06:	4605      	mov	r5, r0
   10c08:	7800      	ldrb	r0, [r0, #0]
   10c0a:	9300      	str	r3, [sp, #0]
   10c0c:	9601      	str	r6, [sp, #4]
   10c0e:	f10d 030f 	add.w	r3, sp, #15
   10c12:	460f      	mov	r7, r1
   10c14:	f000 ff0c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10c18:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c1c:	bb1b      	cbnz	r3, 10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10c1e:	2401      	movs	r4, #1
   10c20:	f105 0a20 	add.w	sl, r5, #32
   10c24:	f105 091c 	add.w	r9, r5, #28
   10c28:	f105 0810 	add.w	r8, r5, #16
   10c2c:	1ea3      	subs	r3, r4, #2
   10c2e:	2b09      	cmp	r3, #9
   10c30:	d806      	bhi.n	10c40 <bsec_b_GasHumidityBaselineTracker_setState+0x44>
   10c32:	e8df f003 	tbb	[pc, r3]
   10c36:	474d      	.short	0x474d
   10c38:	2f353b41 	.word	0x2f353b41
   10c3c:	101c2329 	.word	0x101c2329
   10c40:	f105 0208 	add.w	r2, r5, #8
   10c44:	4631      	mov	r1, r6
   10c46:	4638      	mov	r0, r7
   10c48:	f7fe ff06 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c4c:	2c0b      	cmp	r4, #11
   10c4e:	d045      	beq.n	10cdc <bsec_b_GasHumidityBaselineTracker_setState+0xe0>
   10c50:	3401      	adds	r4, #1
   10c52:	b2e4      	uxtb	r4, r4
   10c54:	e7ea      	b.n	10c2c <bsec_b_GasHumidityBaselineTracker_setState+0x30>
   10c56:	4631      	mov	r1, r6
   10c58:	4638      	mov	r0, r7
   10c5a:	f7fe fff3 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   10c5e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c62:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
   10c66:	4618      	mov	r0, r3
   10c68:	b006      	add	sp, #24
   10c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c6e:	4631      	mov	r1, r6
   10c70:	4638      	mov	r0, r7
   10c72:	f7fe ffa9 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   10c76:	ed85 0a01 	vstr	s0, [r5, #4]
   10c7a:	e7e9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c7c:	4631      	mov	r1, r6
   10c7e:	4638      	mov	r0, r7
   10c80:	f7fe ff2c 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c84:	8568      	strh	r0, [r5, #42]	; 0x2a
   10c86:	e7e3      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c88:	4631      	mov	r1, r6
   10c8a:	4638      	mov	r0, r7
   10c8c:	f7fe ff26 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c90:	8528      	strh	r0, [r5, #40]	; 0x28
   10c92:	e7dd      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c94:	4652      	mov	r2, sl
   10c96:	4631      	mov	r1, r6
   10c98:	4638      	mov	r0, r7
   10c9a:	f7fe fedd 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c9e:	e7d7      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10ca0:	464a      	mov	r2, r9
   10ca2:	4631      	mov	r1, r6
   10ca4:	4638      	mov	r0, r7
   10ca6:	f7fe ff53 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   10caa:	e7d1      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cac:	4631      	mov	r1, r6
   10cae:	4638      	mov	r0, r7
   10cb0:	f7fe ff14 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cb4:	8068      	strh	r0, [r5, #2]
   10cb6:	e7cb      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cb8:	4631      	mov	r1, r6
   10cba:	4638      	mov	r0, r7
   10cbc:	f7fe ff0e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cc0:	8368      	strh	r0, [r5, #26]
   10cc2:	e7c5      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cc4:	4631      	mov	r1, r6
   10cc6:	4638      	mov	r0, r7
   10cc8:	f7fe ff08 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10ccc:	8328      	strh	r0, [r5, #24]
   10cce:	e7bf      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cd0:	4642      	mov	r2, r8
   10cd2:	4631      	mov	r1, r6
   10cd4:	4638      	mov	r0, r7
   10cd6:	f7fe febf 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10cda:	e7b9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cdc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10ce0:	e7c1      	b.n	10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10ce2:	bf00      	nop

00010ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>:
   10ce4:	b510      	push	{r4, lr}
   10ce6:	2303      	movs	r3, #3
   10ce8:	4604      	mov	r4, r0
   10cea:	f800 3b04 	strb.w	r3, [r0], #4
   10cee:	f001 f80b 	bl	11d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>
   10cf2:	4620      	mov	r0, r4
   10cf4:	f000 ff94 	bl	11c20 <bsec_Channel_reset>
   10cf8:	4620      	mov	r0, r4
   10cfa:	bd10      	pop	{r4, pc}

00010cfc <bsec_GasHumidityPreProcessor_configure>:
   10cfc:	b570      	push	{r4, r5, r6, lr}
   10cfe:	b086      	sub	sp, #24
   10d00:	ab04      	add	r3, sp, #16
   10d02:	ac05      	add	r4, sp, #20
   10d04:	4605      	mov	r5, r0
   10d06:	7800      	ldrb	r0, [r0, #0]
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	9401      	str	r4, [sp, #4]
   10d0c:	f10d 030f 	add.w	r3, sp, #15
   10d10:	460e      	mov	r6, r1
   10d12:	f000 fe8d 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10d16:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d1a:	b938      	cbnz	r0, 10d2c <bsec_GasHumidityPreProcessor_configure+0x30>
   10d1c:	4630      	mov	r0, r6
   10d1e:	f105 0220 	add.w	r2, r5, #32
   10d22:	4621      	mov	r1, r4
   10d24:	f7fe fe58 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10d28:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d2c:	b006      	add	sp, #24
   10d2e:	bd70      	pop	{r4, r5, r6, pc}

00010d30 <bsec_GasHumidityPreProcessor_doStep>:
   10d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d34:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   10d38:	ed90 7a04 	vldr	s14, [r0, #16]
   10d3c:	ed2d 8b04 	vpush	{d8-d9}
   10d40:	eeb4 0a67 	vcmp.f32	s0, s15
   10d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d48:	eeb0 8a40 	vmov.f32	s16, s0
   10d4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10d50:	bf98      	it	ls
   10d52:	eeb0 8a67 	vmovls.f32	s16, s15
   10d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d5a:	b088      	sub	sp, #32
   10d5c:	4604      	mov	r4, r0
   10d5e:	eeb0 9a60 	vmov.f32	s18, s1
   10d62:	eef0 8a41 	vmov.f32	s17, s2
   10d66:	460f      	mov	r7, r1
   10d68:	4616      	mov	r6, r2
   10d6a:	461d      	mov	r5, r3
   10d6c:	d033      	beq.n	10dd6 <bsec_GasHumidityPreProcessor_doStep+0xa6>
   10d6e:	f10d 0804 	add.w	r8, sp, #4
   10d72:	4640      	mov	r0, r8
   10d74:	ed8d 8a01 	vstr	s16, [sp, #4]
   10d78:	f000 ff32 	bl	11be0 <bsec_log10>
   10d7c:	eddd 7a01 	vldr	s15, [sp, #4]
   10d80:	ed8d 9a03 	vstr	s18, [sp, #12]
   10d84:	1d20      	adds	r0, r4, #4
   10d86:	edcd 8a04 	vstr	s17, [sp, #16]
   10d8a:	edcd 7a02 	vstr	s15, [sp, #8]
   10d8e:	ab05      	add	r3, sp, #20
   10d90:	3410      	adds	r4, #16
   10d92:	a903      	add	r1, sp, #12
   10d94:	ed90 7a03 	vldr	s14, [r0, #12]
   10d98:	edd0 6a00 	vldr	s13, [r0]
   10d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10da0:	3004      	adds	r0, #4
   10da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   10da6:	42a0      	cmp	r0, r4
   10da8:	ee77 7a87 	vadd.f32	s15, s15, s14
   10dac:	ece3 7a01 	vstmia	r3!, {s15}
   10db0:	d002      	beq.n	10db8 <bsec_GasHumidityPreProcessor_doStep+0x88>
   10db2:	ecf1 7a01 	vldmia	r1!, {s15}
   10db6:	e7ed      	b.n	10d94 <bsec_GasHumidityPreProcessor_doStep+0x64>
   10db8:	a905      	add	r1, sp, #20
   10dba:	220c      	movs	r2, #12
   10dbc:	f023 fe30 	bl	34a20 <memcpy>
   10dc0:	9905      	ldr	r1, [sp, #20]
   10dc2:	9a06      	ldr	r2, [sp, #24]
   10dc4:	9b07      	ldr	r3, [sp, #28]
   10dc6:	6039      	str	r1, [r7, #0]
   10dc8:	6032      	str	r2, [r6, #0]
   10dca:	602b      	str	r3, [r5, #0]
   10dcc:	b008      	add	sp, #32
   10dce:	ecbd 8b04 	vpop	{d8-d9}
   10dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dd6:	ee18 3a10 	vmov	r3, s16
   10dda:	f10d 0820 	add.w	r8, sp, #32
   10dde:	f848 3d1c 	str.w	r3, [r8, #-28]!
   10de2:	4640      	mov	r0, r8
   10de4:	f000 fefc 	bl	11be0 <bsec_log10>
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	ed84 9a05 	vstr	s18, [r4, #20]
   10dee:	edc4 8a06 	vstr	s17, [r4, #24]
   10df2:	6123      	str	r3, [r4, #16]
   10df4:	e7bd      	b.n	10d72 <bsec_GasHumidityPreProcessor_doStep+0x42>
   10df6:	bf00      	nop

00010df8 <bsec_GasHumidityPreProcessor_setState>:
   10df8:	b570      	push	{r4, r5, r6, lr}
   10dfa:	b088      	sub	sp, #32
   10dfc:	ab03      	add	r3, sp, #12
   10dfe:	ad04      	add	r5, sp, #16
   10e00:	4604      	mov	r4, r0
   10e02:	7800      	ldrb	r0, [r0, #0]
   10e04:	9300      	str	r3, [sp, #0]
   10e06:	9501      	str	r5, [sp, #4]
   10e08:	f10d 030b 	add.w	r3, sp, #11
   10e0c:	460e      	mov	r6, r1
   10e0e:	f000 fe0f 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10e12:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e16:	b960      	cbnz	r0, 10e32 <bsec_GasHumidityPreProcessor_setState+0x3a>
   10e18:	4629      	mov	r1, r5
   10e1a:	4630      	mov	r0, r6
   10e1c:	aa05      	add	r2, sp, #20
   10e1e:	f7fe fddb 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10e22:	a905      	add	r1, sp, #20
   10e24:	f104 0010 	add.w	r0, r4, #16
   10e28:	220c      	movs	r2, #12
   10e2a:	f023 fdf9 	bl	34a20 <memcpy>
   10e2e:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e32:	b008      	add	sp, #32
   10e34:	bd70      	pop	{r4, r5, r6, pc}
   10e36:	bf00      	nop

00010e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>:
   10e38:	ee07 1a90 	vmov	s15, r1
   10e3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 10e90 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x58>
   10e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10e44:	b500      	push	{lr}
   10e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
   10e4a:	b085      	sub	sp, #20
   10e4c:	f100 0320 	add.w	r3, r0, #32
   10e50:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   10e54:	aa01      	add	r2, sp, #4
   10e56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   10e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
   10e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10e62:	ecb3 6a01 	vldmia	r3!, {s12}
   10e66:	eec6 7a26 	vdiv.f32	s15, s12, s13
   10e6a:	eef4 7a47 	vcmp.f32	s15, s14
   10e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e72:	bfc8      	it	gt
   10e74:	eef0 7a47 	vmovgt.f32	s15, s14
   10e78:	428b      	cmp	r3, r1
   10e7a:	ece2 7a01 	vstmia	r2!, {s15}
   10e7e:	d1f0      	bne.n	10e62 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x2a>
   10e80:	a901      	add	r1, sp, #4
   10e82:	3004      	adds	r0, #4
   10e84:	f000 fef0 	bl	11c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>
   10e88:	b005      	add	sp, #20
   10e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e8e:	bf00      	nop
   10e90:	42c80000 	.word	0x42c80000

00010e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>:
   10e94:	b510      	push	{r4, lr}
   10e96:	4604      	mov	r4, r0
   10e98:	f800 1b04 	strb.w	r1, [r0], #4
   10e9c:	f000 ff44 	bl	11d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>
   10ea0:	4620      	mov	r0, r4
   10ea2:	f000 fed7 	bl	11c54 <bsec_b_Channel_reset>
   10ea6:	4620      	mov	r0, r4
   10ea8:	bd10      	pop	{r4, pc}
   10eaa:	bf00      	nop

00010eac <bsec_HumidityTemperatureCorrector_configure>:
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	b086      	sub	sp, #24
   10eb0:	ab04      	add	r3, sp, #16
   10eb2:	ac05      	add	r4, sp, #20
   10eb4:	4605      	mov	r5, r0
   10eb6:	7800      	ldrb	r0, [r0, #0]
   10eb8:	9300      	str	r3, [sp, #0]
   10eba:	9401      	str	r4, [sp, #4]
   10ebc:	f10d 030f 	add.w	r3, sp, #15
   10ec0:	460e      	mov	r6, r1
   10ec2:	f000 fdb5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10ec6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10eca:	b938      	cbnz	r0, 10edc <bsec_HumidityTemperatureCorrector_configure+0x30>
   10ecc:	4630      	mov	r0, r6
   10ece:	f105 0210 	add.w	r2, r5, #16
   10ed2:	4621      	mov	r1, r4
   10ed4:	f7ff f8ec 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   10ed8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10edc:	b006      	add	sp, #24
   10ede:	bd70      	pop	{r4, r5, r6, pc}

00010ee0 <bsec_HumidityTemperatureCorrector_doStep>:
   10ee0:	b508      	push	{r3, lr}
   10ee2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   10ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eea:	ed2d 8b04 	vpush	{d8-d9}
   10eee:	4603      	mov	r3, r0
   10ef0:	eeb0 9a60 	vmov.f32	s18, s1
   10ef4:	d937      	bls.n	10f66 <bsec_HumidityTemperatureCorrector_doStep+0x86>
   10ef6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10efa:	eeb4 1a67 	vcmp.f32	s2, s15
   10efe:	eef0 8a41 	vmov.f32	s17, s2
   10f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f06:	bfc8      	it	gt
   10f08:	eef0 8a67 	vmovgt.f32	s17, s15
   10f0c:	edd3 7a02 	vldr	s15, [r3, #8]
   10f10:	eef5 7a40 	vcmp.f32	s15, #0.0
   10f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f18:	bf08      	it	eq
   10f1a:	eef0 7a40 	vmoveq.f32	s15, s0
   10f1e:	ee30 8a67 	vsub.f32	s16, s0, s15
   10f22:	ed93 0a01 	vldr	s0, [r3, #4]
   10f26:	ee28 8a00 	vmul.f32	s16, s16, s0
   10f2a:	f103 0010 	add.w	r0, r3, #16
   10f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
   10f32:	eeb0 0a68 	vmov.f32	s0, s17
   10f36:	ed83 8a02 	vstr	s16, [r3, #8]
   10f3a:	f000 fe5b 	bl	11bf4 <bsec_polyval>
   10f3e:	eef0 0a49 	vmov.f32	s1, s18
   10f42:	ee30 1a28 	vadd.f32	s2, s0, s17
   10f46:	eeb0 0a48 	vmov.f32	s0, s16
   10f4a:	f000 fdaf 	bl	11aac <bsec_convertHumidity>
   10f4e:	ecbd 8b04 	vpop	{d8-d9}
   10f52:	eddf 7a06 	vldr	s15, [pc, #24]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10f56:	eeb4 0a67 	vcmp.f32	s0, s15
   10f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f5e:	bfc8      	it	gt
   10f60:	eeb0 0a67 	vmovgt.f32	s0, s15
   10f64:	bd08      	pop	{r3, pc}
   10f66:	eddf 8a02 	vldr	s17, [pc, #8]	; 10f70 <bsec_HumidityTemperatureCorrector_doStep+0x90>
   10f6a:	e7cf      	b.n	10f0c <bsec_HumidityTemperatureCorrector_doStep+0x2c>
   10f6c:	42c80000 	.word	0x42c80000
   10f70:	38d1b717 	.word	0x38d1b717

00010f74 <bsec_HumidityTemperatureCorrector_getConfiguration>:
   10f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f76:	b085      	sub	sp, #20
   10f78:	ae04      	add	r6, sp, #16
   10f7a:	2401      	movs	r4, #1
   10f7c:	f806 4d09 	strb.w	r4, [r6, #-9]!
   10f80:	4605      	mov	r5, r0
   10f82:	4617      	mov	r7, r2
   10f84:	7800      	ldrb	r0, [r0, #0]
   10f86:	4632      	mov	r2, r6
   10f88:	460e      	mov	r6, r1
   10f8a:	f000 fd7f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f92:	9003      	str	r0, [sp, #12]
   10f94:	b1a3      	cbz	r3, 10fc0 <bsec_HumidityTemperatureCorrector_getConfiguration+0x4c>
   10f96:	3510      	adds	r5, #16
   10f98:	e003      	b.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10f9a:	3401      	adds	r4, #1
   10f9c:	b2e4      	uxtb	r4, r4
   10f9e:	42a3      	cmp	r3, r4
   10fa0:	d30d      	bcc.n	10fbe <bsec_HumidityTemperatureCorrector_getConfiguration+0x4a>
   10fa2:	2c01      	cmp	r4, #1
   10fa4:	d1f9      	bne.n	10f9a <bsec_HumidityTemperatureCorrector_getConfiguration+0x26>
   10fa6:	ab03      	add	r3, sp, #12
   10fa8:	463a      	mov	r2, r7
   10faa:	4631      	mov	r1, r6
   10fac:	4628      	mov	r0, r5
   10fae:	f7fe ffe3 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   10fb2:	3401      	adds	r4, #1
   10fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fb8:	b2e4      	uxtb	r4, r4
   10fba:	42a3      	cmp	r3, r4
   10fbc:	d2f1      	bcs.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10fbe:	9803      	ldr	r0, [sp, #12]
   10fc0:	a904      	add	r1, sp, #16
   10fc2:	2202      	movs	r2, #2
   10fc4:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10fc8:	a802      	add	r0, sp, #8
   10fca:	f023 fd29 	bl	34a20 <memcpy>
   10fce:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10fd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10fd6:	9803      	ldr	r0, [sp, #12]
   10fd8:	7032      	strb	r2, [r6, #0]
   10fda:	7073      	strb	r3, [r6, #1]
   10fdc:	b005      	add	sp, #20
   10fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe0 <bsec_HumidityTemperatureCorrector_getState>:
   10fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fe2:	b085      	sub	sp, #20
   10fe4:	ad04      	add	r5, sp, #16
   10fe6:	2401      	movs	r4, #1
   10fe8:	f805 4d09 	strb.w	r4, [r5, #-9]!
   10fec:	4606      	mov	r6, r0
   10fee:	4617      	mov	r7, r2
   10ff0:	7800      	ldrb	r0, [r0, #0]
   10ff2:	462a      	mov	r2, r5
   10ff4:	460d      	mov	r5, r1
   10ff6:	f000 fd49 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ffe:	9003      	str	r0, [sp, #12]
   11000:	b923      	cbnz	r3, 1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   11002:	e013      	b.n	1102c <bsec_HumidityTemperatureCorrector_getState+0x4c>
   11004:	3401      	adds	r4, #1
   11006:	b2e4      	uxtb	r4, r4
   11008:	42a3      	cmp	r3, r4
   1100a:	d30e      	bcc.n	1102a <bsec_HumidityTemperatureCorrector_getState+0x4a>
   1100c:	2c01      	cmp	r4, #1
   1100e:	d1f9      	bne.n	11004 <bsec_HumidityTemperatureCorrector_getState+0x24>
   11010:	aa03      	add	r2, sp, #12
   11012:	4639      	mov	r1, r7
   11014:	4628      	mov	r0, r5
   11016:	ed96 0a02 	vldr	s0, [r6, #8]
   1101a:	f7fe fdef 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1101e:	3401      	adds	r4, #1
   11020:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11024:	b2e4      	uxtb	r4, r4
   11026:	42a3      	cmp	r3, r4
   11028:	d2f0      	bcs.n	1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   1102a:	9803      	ldr	r0, [sp, #12]
   1102c:	a904      	add	r1, sp, #16
   1102e:	2202      	movs	r2, #2
   11030:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11034:	a802      	add	r0, sp, #8
   11036:	f023 fcf3 	bl	34a20 <memcpy>
   1103a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1103e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11042:	9803      	ldr	r0, [sp, #12]
   11044:	702a      	strb	r2, [r5, #0]
   11046:	706b      	strb	r3, [r5, #1]
   11048:	b005      	add	sp, #20
   1104a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001104c <bsec_HumidityTemperatureCorrector_setState>:
   1104c:	b570      	push	{r4, r5, r6, lr}
   1104e:	b086      	sub	sp, #24
   11050:	ab04      	add	r3, sp, #16
   11052:	ad05      	add	r5, sp, #20
   11054:	4604      	mov	r4, r0
   11056:	7800      	ldrb	r0, [r0, #0]
   11058:	9300      	str	r3, [sp, #0]
   1105a:	9501      	str	r5, [sp, #4]
   1105c:	f10d 030f 	add.w	r3, sp, #15
   11060:	460e      	mov	r6, r1
   11062:	f000 fce5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11066:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1106a:	b938      	cbnz	r0, 1107c <bsec_HumidityTemperatureCorrector_setState+0x30>
   1106c:	4630      	mov	r0, r6
   1106e:	4629      	mov	r1, r5
   11070:	f7fe fdaa 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11074:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11078:	ed84 0a02 	vstr	s0, [r4, #8]
   1107c:	b006      	add	sp, #24
   1107e:	bd70      	pop	{r4, r5, r6, pc}

00011080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>:
   11080:	ee07 1a90 	vmov	s15, r1
   11084:	eddf 6a1e 	vldr	s13, [pc, #120]	; 11100 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x80>
   11088:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 11104 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x84>
   1108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   11090:	b510      	push	{r4, lr}
   11092:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11096:	4604      	mov	r4, r0
   11098:	ed2d 8b02 	vpush	{d8}
   1109c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   110a0:	ee67 7a87 	vmul.f32	s15, s15, s14
   110a4:	b082      	sub	sp, #8
   110a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   110aa:	ee80 0a27 	vdiv.f32	s0, s0, s15
   110ae:	f01a fe3f 	bl	2bd30 <fminf>
   110b2:	eef0 8a40 	vmov.f32	s17, s0
   110b6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 11108 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x88>
   110ba:	ee28 0a80 	vmul.f32	s0, s17, s0
   110be:	f01a fe75 	bl	2bdac <sinf>
   110c2:	ee20 8a00 	vmul.f32	s16, s0, s0
   110c6:	a802      	add	r0, sp, #8
   110c8:	ee68 7a08 	vmul.f32	s15, s16, s16
   110cc:	ee77 7a88 	vadd.f32	s15, s15, s16
   110d0:	ed60 7a01 	vstmdb	r0!, {s15}
   110d4:	f000 fd98 	bl	11c08 <bsec_b_sqrt>
   110d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   110dc:	eef4 8a67 	vcmp.f32	s17, s15
   110e0:	ed9d 0a01 	vldr	s0, [sp, #4]
   110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110e8:	bf1c      	itt	ne
   110ea:	ee70 7a48 	vsubne.f32	s15, s0, s16
   110ee:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   110f2:	edc4 7a01 	vstr	s15, [r4, #4]
   110f6:	b002      	add	sp, #8
   110f8:	ecbd 8b02 	vpop	{d8}
   110fc:	bd10      	pop	{r4, pc}
   110fe:	bf00      	nop
   11100:	42c80000 	.word	0x42c80000
   11104:	3c50d499 	.word	0x3c50d499
   11108:	3fc90fdb 	.word	0x3fc90fdb

0001110c <bsec_IaqEstimator_IaqEstimator>:
   1110c:	b430      	push	{r4, r5}
   1110e:	4913      	ldr	r1, [pc, #76]	; (1115c <bsec_IaqEstimator_IaqEstimator+0x50>)
   11110:	6301      	str	r1, [r0, #48]	; 0x30
   11112:	2502      	movs	r5, #2
   11114:	2400      	movs	r4, #0
   11116:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1111a:	7005      	strb	r5, [r0, #0]
   1111c:	7104      	strb	r4, [r0, #4]
   1111e:	25e1      	movs	r5, #225	; 0xe1
   11120:	2419      	movs	r4, #25
   11122:	8041      	strh	r1, [r0, #2]
   11124:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   11128:	80c5      	strh	r5, [r0, #6]
   1112a:	7204      	strb	r4, [r0, #8]
   1112c:	4d0c      	ldr	r5, [pc, #48]	; (11160 <bsec_IaqEstimator_IaqEstimator+0x54>)
   1112e:	6101      	str	r1, [r0, #16]
   11130:	f44f 74c8 	mov.w	r4, #400	; 0x190
   11134:	490b      	ldr	r1, [pc, #44]	; (11164 <bsec_IaqEstimator_IaqEstimator+0x58>)
   11136:	6145      	str	r5, [r0, #20]
   11138:	2200      	movs	r2, #0
   1113a:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
   1113e:	8304      	strh	r4, [r0, #24]
   11140:	61c1      	str	r1, [r0, #28]
   11142:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11146:	4908      	ldr	r1, [pc, #32]	; (11168 <bsec_IaqEstimator_IaqEstimator+0x5c>)
   11148:	6205      	str	r5, [r0, #32]
   1114a:	8484      	strh	r4, [r0, #36]	; 0x24
   1114c:	60c2      	str	r2, [r0, #12]
   1114e:	6282      	str	r2, [r0, #40]	; 0x28
   11150:	62c2      	str	r2, [r0, #44]	; 0x2c
   11152:	6341      	str	r1, [r0, #52]	; 0x34
   11154:	6381      	str	r1, [r0, #56]	; 0x38
   11156:	bc30      	pop	{r4, r5}
   11158:	4770      	bx	lr
   1115a:	bf00      	nop
   1115c:	428551ec 	.word	0x428551ec
   11160:	41200000 	.word	0x41200000
   11164:	41700000 	.word	0x41700000
   11168:	41c80000 	.word	0x41c80000

0001116c <bsec_IaqEstimator_doStep>:
   1116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11170:	ed91 7a00 	vldr	s14, [r1]
   11174:	edd1 6a02 	vldr	s13, [r1, #8]
   11178:	ed91 5a03 	vldr	s10, [r1, #12]
   1117c:	edd1 7a01 	vldr	s15, [r1, #4]
   11180:	ed2d 8b06 	vpush	{d8-d10}
   11184:	ee37 9a40 	vsub.f32	s18, s14, s0
   11188:	ee37 7a66 	vsub.f32	s14, s14, s13
   1118c:	460d      	mov	r5, r1
   1118e:	eec9 5a07 	vdiv.f32	s11, s18, s14
   11192:	88c1      	ldrh	r1, [r0, #6]
   11194:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11196:	469a      	mov	sl, r3
   11198:	8843      	ldrh	r3, [r0, #2]
   1119a:	4604      	mov	r4, r0
   1119c:	4691      	mov	r9, r2
   1119e:	e9dd 870e 	ldrd	r8, r7, [sp, #56]	; 0x38
   111a2:	ee06 1a10 	vmov	s12, r1
   111a6:	7a01      	ldrb	r1, [r0, #8]
   111a8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   111ac:	ee06 1a90 	vmov	s13, r1
   111b0:	ee25 6a86 	vmul.f32	s12, s11, s12
   111b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
   111b8:	ee09 3a90 	vmov	s19, r3
   111bc:	7903      	ldrb	r3, [r0, #4]
   111be:	eeb0 aa60 	vmov.f32	s20, s1
   111c2:	ee76 0a26 	vadd.f32	s1, s12, s13
   111c6:	ee06 3a90 	vmov	s13, r3
   111ca:	ee37 7ac0 	vsub.f32	s14, s15, s0
   111ce:	ee77 7ac5 	vsub.f32	s15, s15, s10
   111d2:	eeb8 0a66 	vcvt.f32.u32	s0, s13
   111d6:	eec7 8a27 	vdiv.f32	s17, s14, s15
   111da:	f01a fd8b 	bl	2bcf4 <fmaxf>
   111de:	eef8 9a69 	vcvt.f32.u32	s19, s19
   111e2:	eef0 0a40 	vmov.f32	s1, s0
   111e6:	eeb0 0a69 	vmov.f32	s0, s19
   111ea:	f01a fda1 	bl	2bd30 <fminf>
   111ee:	7a23      	ldrb	r3, [r4, #8]
   111f0:	edd4 7a03 	vldr	s15, [r4, #12]
   111f4:	ee00 3a90 	vmov	s1, r3
   111f8:	7923      	ldrb	r3, [r4, #4]
   111fa:	ee29 9a27 	vmul.f32	s18, s18, s15
   111fe:	eef0 9a40 	vmov.f32	s19, s0
   11202:	eef8 0a60 	vcvt.f32.u32	s1, s1
   11206:	ee00 3a10 	vmov	s0, r3
   1120a:	ee79 0a20 	vadd.f32	s1, s18, s1
   1120e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   11212:	f01a fd6f 	bl	2bcf4 <fmaxf>
   11216:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1121a:	eeb4 aae7 	vcmpe.f32	s20, s15
   1121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11222:	eeb0 8a40 	vmov.f32	s16, s0
   11226:	d45f      	bmi.n	112e8 <bsec_IaqEstimator_doStep+0x17c>
   11228:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
   1122c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   11230:	edc9 9a00 	vstr	s19, [r9]
   11234:	692b      	ldr	r3, [r5, #16]
   11236:	8b22      	ldrh	r2, [r4, #24]
   11238:	f8c9 3004 	str.w	r3, [r9, #4]
   1123c:	ed8a 8a00 	vstr	s16, [sl]
   11240:	692b      	ldr	r3, [r5, #16]
   11242:	f8ca 3004 	str.w	r3, [sl, #4]
   11246:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
   1124a:	ee00 2a10 	vmov	s0, r2
   1124e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11256:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   1125a:	db40      	blt.n	112de <bsec_IaqEstimator_doStep+0x172>
   1125c:	edd4 0a04 	vldr	s1, [r4, #16]
   11260:	ee68 0a20 	vmul.f32	s1, s16, s1
   11264:	ee70 0a80 	vadd.f32	s1, s1, s0
   11268:	f01a fd44 	bl	2bcf4 <fmaxf>
   1126c:	ed88 0a00 	vstr	s0, [r8]
   11270:	692a      	ldr	r2, [r5, #16]
   11272:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11274:	f8c8 2004 	str.w	r2, [r8, #4]
   11278:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   1127c:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
   11280:	ee28 8a27 	vmul.f32	s16, s16, s15
   11284:	ee07 3a90 	vmov	s15, r3
   11288:	ee78 0a20 	vadd.f32	s1, s16, s1
   1128c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   11290:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   11294:	f01a fe7e 	bl	2bf94 <powf>
   11298:	eef0 0a40 	vmov.f32	s1, s0
   1129c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 11330 <bsec_IaqEstimator_doStep+0x1c4>
   112a0:	f01a fd28 	bl	2bcf4 <fmaxf>
   112a4:	eef0 0a40 	vmov.f32	s1, s0
   112a8:	eeb0 0a48 	vmov.f32	s0, s16
   112ac:	f01a fd40 	bl	2bd30 <fminf>
   112b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 11334 <bsec_IaqEstimator_doStep+0x1c8>
   112b4:	ed87 0a00 	vstr	s0, [r7]
   112b8:	ee28 7aa7 	vmul.f32	s14, s17, s15
   112bc:	ecbd 8b06 	vpop	{d8-d10}
   112c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112c8:	692b      	ldr	r3, [r5, #16]
   112ca:	607b      	str	r3, [r7, #4]
   112cc:	bfd8      	it	le
   112ce:	eef0 7a47 	vmovle.f32	s15, s14
   112d2:	edc6 7a00 	vstr	s15, [r6]
   112d6:	696b      	ldr	r3, [r5, #20]
   112d8:	6073      	str	r3, [r6, #4]
   112da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112de:	edd4 0a05 	vldr	s1, [r4, #20]
   112e2:	ee68 0a20 	vmul.f32	s1, s16, s1
   112e6:	e7bf      	b.n	11268 <bsec_IaqEstimator_doStep+0xfc>
   112e8:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   112ec:	eeb4 7ae9 	vcmpe.f32	s14, s19
   112f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112f4:	ee2a aa0a 	vmul.f32	s20, s20, s20
   112f8:	d507      	bpl.n	1130a <bsec_IaqEstimator_doStep+0x19e>
   112fa:	ee77 7aca 	vsub.f32	s15, s15, s20
   112fe:	ee69 9a8a 	vmul.f32	s19, s19, s20
   11302:	ee67 7a87 	vmul.f32	s15, s15, s14
   11306:	ee77 9aa9 	vadd.f32	s19, s15, s19
   1130a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   1130e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11316:	d58b      	bpl.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   11318:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1131c:	ee70 0aca 	vsub.f32	s1, s1, s20
   11320:	ee28 8a0a 	vmul.f32	s16, s16, s20
   11324:	ee60 0aa7 	vmul.f32	s1, s1, s15
   11328:	ee30 8a88 	vadd.f32	s16, s1, s16
   1132c:	e780      	b.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   1132e:	bf00      	nop
   11330:	3dcccccd 	.word	0x3dcccccd
   11334:	42c80000 	.word	0x42c80000

00011338 <bsec_IaqEstimator_getConfiguration>:
   11338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1133c:	b084      	sub	sp, #16
   1133e:	ac04      	add	r4, sp, #16
   11340:	2508      	movs	r5, #8
   11342:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11346:	4606      	mov	r6, r0
   11348:	4617      	mov	r7, r2
   1134a:	7800      	ldrb	r0, [r0, #0]
   1134c:	4622      	mov	r2, r4
   1134e:	460d      	mov	r5, r1
   11350:	f000 fb9c 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   11354:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11358:	9003      	str	r0, [sp, #12]
   1135a:	b1ca      	cbz	r2, 11390 <bsec_IaqEstimator_getConfiguration+0x58>
   1135c:	2401      	movs	r4, #1
   1135e:	f106 0810 	add.w	r8, r6, #16
   11362:	1e63      	subs	r3, r4, #1
   11364:	2b07      	cmp	r3, #7
   11366:	d80e      	bhi.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11368:	e8df f003 	tbb	[pc, r3]
   1136c:	515a3f48 	.word	0x515a3f48
   11370:	04232d36 	.word	0x04232d36
   11374:	aa03      	add	r2, sp, #12
   11376:	4639      	mov	r1, r7
   11378:	4628      	mov	r0, r5
   1137a:	ed96 0a08 	vldr	s0, [r6, #32]
   1137e:	f7fe fc3d 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11382:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11386:	3401      	adds	r4, #1
   11388:	b2e4      	uxtb	r4, r4
   1138a:	42a2      	cmp	r2, r4
   1138c:	d2e9      	bcs.n	11362 <bsec_IaqEstimator_getConfiguration+0x2a>
   1138e:	9803      	ldr	r0, [sp, #12]
   11390:	a904      	add	r1, sp, #16
   11392:	2202      	movs	r2, #2
   11394:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11398:	a802      	add	r0, sp, #8
   1139a:	f023 fb41 	bl	34a20 <memcpy>
   1139e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   113a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   113a6:	9803      	ldr	r0, [sp, #12]
   113a8:	702a      	strb	r2, [r5, #0]
   113aa:	706b      	strb	r3, [r5, #1]
   113ac:	b004      	add	sp, #16
   113ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113b2:	aa03      	add	r2, sp, #12
   113b4:	4639      	mov	r1, r7
   113b6:	4628      	mov	r0, r5
   113b8:	ed96 0a07 	vldr	s0, [r6, #28]
   113bc:	f7fe fc1e 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   113c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113c4:	e7df      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113c6:	463a      	mov	r2, r7
   113c8:	ab03      	add	r3, sp, #12
   113ca:	4629      	mov	r1, r5
   113cc:	8b30      	ldrh	r0, [r6, #24]
   113ce:	f7fe fb9d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113d6:	e7d6      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113d8:	463a      	mov	r2, r7
   113da:	ab03      	add	r3, sp, #12
   113dc:	4629      	mov	r1, r5
   113de:	4640      	mov	r0, r8
   113e0:	f7fe fdca 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   113e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113e8:	e7cd      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113ea:	463a      	mov	r2, r7
   113ec:	ab03      	add	r3, sp, #12
   113ee:	4629      	mov	r1, r5
   113f0:	8870      	ldrh	r0, [r6, #2]
   113f2:	f7fe fb8b 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113fa:	e7c4      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113fc:	463a      	mov	r2, r7
   113fe:	ab03      	add	r3, sp, #12
   11400:	4629      	mov	r1, r5
   11402:	7930      	ldrb	r0, [r6, #4]
   11404:	f7fe fc32 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   11408:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1140c:	e7bb      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   1140e:	463a      	mov	r2, r7
   11410:	ab03      	add	r3, sp, #12
   11412:	4629      	mov	r1, r5
   11414:	7a30      	ldrb	r0, [r6, #8]
   11416:	f7fe fc29 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   1141a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1141e:	e7b2      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11420:	463a      	mov	r2, r7
   11422:	ab03      	add	r3, sp, #12
   11424:	4629      	mov	r1, r5
   11426:	88f0      	ldrh	r0, [r6, #6]
   11428:	f7fe fb70 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   1142c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11430:	e7a9      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11432:	bf00      	nop

00011434 <bsec_IaqEstimator_getState>:
   11434:	b5f0      	push	{r4, r5, r6, r7, lr}
   11436:	b085      	sub	sp, #20
   11438:	ac04      	add	r4, sp, #16
   1143a:	2502      	movs	r5, #2
   1143c:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11440:	4606      	mov	r6, r0
   11442:	4617      	mov	r7, r2
   11444:	7800      	ldrb	r0, [r0, #0]
   11446:	4622      	mov	r2, r4
   11448:	460d      	mov	r5, r1
   1144a:	f000 fb1f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1144e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11452:	9003      	str	r0, [sp, #12]
   11454:	b303      	cbz	r3, 11498 <bsec_IaqEstimator_getState+0x64>
   11456:	2401      	movs	r4, #1
   11458:	e00e      	b.n	11478 <bsec_IaqEstimator_getState+0x44>
   1145a:	2c02      	cmp	r4, #2
   1145c:	d108      	bne.n	11470 <bsec_IaqEstimator_getState+0x3c>
   1145e:	aa03      	add	r2, sp, #12
   11460:	4639      	mov	r1, r7
   11462:	4628      	mov	r0, r5
   11464:	ed96 0a0e 	vldr	s0, [r6, #56]	; 0x38
   11468:	f7fe fbc8 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1146c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11470:	3401      	adds	r4, #1
   11472:	b2e4      	uxtb	r4, r4
   11474:	42a3      	cmp	r3, r4
   11476:	d30e      	bcc.n	11496 <bsec_IaqEstimator_getState+0x62>
   11478:	2c01      	cmp	r4, #1
   1147a:	d1ee      	bne.n	1145a <bsec_IaqEstimator_getState+0x26>
   1147c:	aa03      	add	r2, sp, #12
   1147e:	4639      	mov	r1, r7
   11480:	4628      	mov	r0, r5
   11482:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
   11486:	f7fe fbb9 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1148a:	3401      	adds	r4, #1
   1148c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11490:	b2e4      	uxtb	r4, r4
   11492:	42a3      	cmp	r3, r4
   11494:	d2f0      	bcs.n	11478 <bsec_IaqEstimator_getState+0x44>
   11496:	9803      	ldr	r0, [sp, #12]
   11498:	a904      	add	r1, sp, #16
   1149a:	2202      	movs	r2, #2
   1149c:	f821 0d06 	strh.w	r0, [r1, #-6]!
   114a0:	a802      	add	r0, sp, #8
   114a2:	f023 fabd 	bl	34a20 <memcpy>
   114a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   114aa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   114ae:	9803      	ldr	r0, [sp, #12]
   114b0:	702a      	strb	r2, [r5, #0]
   114b2:	706b      	strb	r3, [r5, #1]
   114b4:	b005      	add	sp, #20
   114b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000114b8 <bsec_IaqEstimator_setState>:
   114b8:	b570      	push	{r4, r5, r6, lr}
   114ba:	b086      	sub	sp, #24
   114bc:	ab04      	add	r3, sp, #16
   114be:	ad05      	add	r5, sp, #20
   114c0:	4604      	mov	r4, r0
   114c2:	7800      	ldrb	r0, [r0, #0]
   114c4:	9300      	str	r3, [sp, #0]
   114c6:	9501      	str	r5, [sp, #4]
   114c8:	f10d 030f 	add.w	r3, sp, #15
   114cc:	460e      	mov	r6, r1
   114ce:	f000 faaf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   114d2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114d6:	b968      	cbnz	r0, 114f4 <bsec_IaqEstimator_setState+0x3c>
   114d8:	4629      	mov	r1, r5
   114da:	4630      	mov	r0, r6
   114dc:	f7fe fb74 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114e0:	4630      	mov	r0, r6
   114e2:	4629      	mov	r1, r5
   114e4:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
   114e8:	f7fe fb6e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114ec:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114f0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   114f4:	b006      	add	sp, #24
   114f6:	bd70      	pop	{r4, r5, r6, pc}

000114f8 <bsec_IaqEstimator_updateInterfaceDependency>:
   114f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114fc:	4299      	cmp	r1, r3
   114fe:	d04e      	beq.n	1159e <bsec_IaqEstimator_updateInterfaceDependency+0xa6>
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
   11502:	ed2d 8b02 	vpush	{d8}
   11506:	88c3      	ldrh	r3, [r0, #6]
   11508:	7a05      	ldrb	r5, [r0, #8]
   1150a:	69c6      	ldr	r6, [r0, #28]
   1150c:	6a07      	ldr	r7, [r0, #32]
   1150e:	442b      	add	r3, r5
   11510:	ee07 3a90 	vmov	s15, r3
   11514:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11518:	b083      	sub	sp, #12
   1151a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   1151e:	d042      	beq.n	115a6 <bsec_IaqEstimator_updateInterfaceDependency+0xae>
   11520:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   11524:	d03c      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   11526:	2964      	cmp	r1, #100	; 0x64
   11528:	d03a      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   1152a:	4b20      	ldr	r3, [pc, #128]	; (115ac <bsec_IaqEstimator_updateInterfaceDependency+0xb4>)
   1152c:	9300      	str	r3, [sp, #0]
   1152e:	4604      	mov	r4, r0
   11530:	4668      	mov	r0, sp
   11532:	f000 fb55 	bl	11be0 <bsec_log10>
   11536:	ee07 5a90 	vmov	s15, r5
   1153a:	ed9d 0a00 	vldr	s0, [sp]
   1153e:	eef8 8a67 	vcvt.f32.u32	s17, s15
   11542:	f01a fbcb 	bl	2bcdc <fabsf>
   11546:	ee78 8a68 	vsub.f32	s17, s16, s17
   1154a:	ad02      	add	r5, sp, #8
   1154c:	ee88 0a80 	vdiv.f32	s0, s17, s0
   11550:	f845 6d04 	str.w	r6, [r5, #-4]!
   11554:	4628      	mov	r0, r5
   11556:	ed84 0a03 	vstr	s0, [r4, #12]
   1155a:	f000 fb41 	bl	11be0 <bsec_log10>
   1155e:	4668      	mov	r0, sp
   11560:	9700      	str	r7, [sp, #0]
   11562:	f000 fb3d 	bl	11be0 <bsec_log10>
   11566:	eddd 7a01 	vldr	s15, [sp, #4]
   1156a:	ed9d 7a00 	vldr	s14, [sp]
   1156e:	9601      	str	r6, [sp, #4]
   11570:	ee77 7ac7 	vsub.f32	s15, s15, s14
   11574:	4628      	mov	r0, r5
   11576:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   1157a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
   1157e:	f000 fb2f 	bl	11be0 <bsec_log10>
   11582:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   11586:	eddd 7a01 	vldr	s15, [sp, #4]
   1158a:	ee28 8a07 	vmul.f32	s16, s16, s14
   1158e:	ee37 8ac8 	vsub.f32	s16, s15, s16
   11592:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
   11596:	b003      	add	sp, #12
   11598:	ecbd 8b02 	vpop	{d8}
   1159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1159e:	4770      	bx	lr
   115a0:	4b03      	ldr	r3, [pc, #12]	; (115b0 <bsec_IaqEstimator_updateInterfaceDependency+0xb8>)
   115a2:	9300      	str	r3, [sp, #0]
   115a4:	e7c3      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115a6:	4b03      	ldr	r3, [pc, #12]	; (115b4 <bsec_IaqEstimator_updateInterfaceDependency+0xbc>)
   115a8:	9300      	str	r3, [sp, #0]
   115aa:	e7c0      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115ac:	3f464c30 	.word	0x3f464c30
   115b0:	3f19999a 	.word	0x3f19999a
   115b4:	3f23d70a 	.word	0x3f23d70a

000115b8 <bsec_b_IaqEstimator_configure>:
   115b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115bc:	b087      	sub	sp, #28
   115be:	ab04      	add	r3, sp, #16
   115c0:	ae05      	add	r6, sp, #20
   115c2:	4605      	mov	r5, r0
   115c4:	7800      	ldrb	r0, [r0, #0]
   115c6:	9300      	str	r3, [sp, #0]
   115c8:	9601      	str	r6, [sp, #4]
   115ca:	f10d 030f 	add.w	r3, sp, #15
   115ce:	460f      	mov	r7, r1
   115d0:	f000 fa2e 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   115d4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   115d8:	bb10      	cbnz	r0, 11620 <bsec_b_IaqEstimator_configure+0x68>
   115da:	4604      	mov	r4, r0
   115dc:	f105 0810 	add.w	r8, r5, #16
   115e0:	fa5f f984 	uxtb.w	r9, r4
   115e4:	f109 0301 	add.w	r3, r9, #1
   115e8:	b2db      	uxtb	r3, r3
   115ea:	3b02      	subs	r3, #2
   115ec:	2b06      	cmp	r3, #6
   115ee:	d805      	bhi.n	115fc <bsec_b_IaqEstimator_configure+0x44>
   115f0:	e8df f003 	tbb	[pc, r3]
   115f4:	262c3238 	.word	0x262c3238
   115f8:	1920      	.short	0x1920
   115fa:	0e          	.byte	0x0e
   115fb:	00          	.byte	0x00
   115fc:	4631      	mov	r1, r6
   115fe:	4638      	mov	r0, r7
   11600:	f7fe fb20 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11604:	f1b9 0f07 	cmp.w	r9, #7
   11608:	7128      	strb	r0, [r5, #4]
   1160a:	d031      	beq.n	11670 <bsec_b_IaqEstimator_configure+0xb8>
   1160c:	3401      	adds	r4, #1
   1160e:	e7e7      	b.n	115e0 <bsec_b_IaqEstimator_configure+0x28>
   11610:	4638      	mov	r0, r7
   11612:	4631      	mov	r1, r6
   11614:	f7fe fad8 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11618:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1161c:	ed85 0a08 	vstr	s0, [r5, #32]
   11620:	b007      	add	sp, #28
   11622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11626:	4631      	mov	r1, r6
   11628:	4638      	mov	r0, r7
   1162a:	f7fe facd 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1162e:	ed85 0a07 	vstr	s0, [r5, #28]
   11632:	e7eb      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11634:	4631      	mov	r1, r6
   11636:	4638      	mov	r0, r7
   11638:	f7fe fa50 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1163c:	8328      	strh	r0, [r5, #24]
   1163e:	e7e5      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11640:	4642      	mov	r2, r8
   11642:	4631      	mov	r1, r6
   11644:	4638      	mov	r0, r7
   11646:	f7fe fd33 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   1164a:	e7df      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   1164c:	4631      	mov	r1, r6
   1164e:	4638      	mov	r0, r7
   11650:	f7fe faf8 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11654:	7228      	strb	r0, [r5, #8]
   11656:	e7d9      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11658:	4631      	mov	r1, r6
   1165a:	4638      	mov	r0, r7
   1165c:	f7fe fa3e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   11660:	80e8      	strh	r0, [r5, #6]
   11662:	e7d3      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11664:	4631      	mov	r1, r6
   11666:	4638      	mov	r0, r7
   11668:	f7fe fa38 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1166c:	8068      	strh	r0, [r5, #2]
   1166e:	e7cd      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11670:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11674:	e7d4      	b.n	11620 <bsec_b_IaqEstimator_configure+0x68>
   11676:	bf00      	nop

00011678 <bsec_SensorStatusTracker_SensorStatusTracker>:
   11678:	b430      	push	{r4, r5}
   1167a:	490c      	ldr	r1, [pc, #48]	; (116ac <bsec_SensorStatusTracker_SensorStatusTracker+0x34>)
   1167c:	61c1      	str	r1, [r0, #28]
   1167e:	2505      	movs	r5, #5
   11680:	2401      	movs	r4, #1
   11682:	2200      	movs	r2, #0
   11684:	2100      	movs	r1, #0
   11686:	7005      	strb	r5, [r0, #0]
   11688:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   1168c:	2500      	movs	r5, #0
   1168e:	2400      	movs	r4, #0
   11690:	e9c0 4508 	strd	r4, r5, [r0, #32]
   11694:	e9c0 4502 	strd	r4, r5, [r0, #8]
   11698:	6182      	str	r2, [r0, #24]
   1169a:	6142      	str	r2, [r0, #20]
   1169c:	6102      	str	r2, [r0, #16]
   1169e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
   116a2:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   116a6:	bc30      	pop	{r4, r5}
   116a8:	4770      	bx	lr
   116aa:	bf00      	nop
   116ac:	538bb2c9 	.word	0x538bb2c9

000116b0 <bsec_SensorStatusTracker_doStep>:
   116b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   116b4:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
   116b8:	4680      	mov	r8, r0
   116ba:	e9d0 0108 	ldrd	r0, r1, [r0, #32]
   116be:	4692      	mov	sl, r2
   116c0:	1b92      	subs	r2, r2, r6
   116c2:	469b      	mov	fp, r3
   116c4:	eb63 0307 	sbc.w	r3, r3, r7
   116c8:	4290      	cmp	r0, r2
   116ca:	eb71 0303 	sbcs.w	r3, r1, r3
   116ce:	9d08      	ldr	r5, [sp, #32]
   116d0:	db03      	blt.n	116da <bsec_SensorStatusTracker_doStep+0x2a>
   116d2:	45b2      	cmp	sl, r6
   116d4:	eb7b 0307 	sbcs.w	r3, fp, r7
   116d8:	da65      	bge.n	117a6 <bsec_SensorStatusTracker_doStep+0xf6>
   116da:	2300      	movs	r3, #0
   116dc:	2200      	movs	r2, #0
   116de:	f8c8 2010 	str.w	r2, [r8, #16]
   116e2:	f888 302a 	strb.w	r3, [r8, #42]	; 0x2a
   116e6:	461c      	mov	r4, r3
   116e8:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   116ec:	f898 6029 	ldrb.w	r6, [r8, #41]	; 0x29
   116f0:	b9d6      	cbnz	r6, 11728 <bsec_SensorStatusTracker_doStep+0x78>
   116f2:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
   116f6:	ebba 0002 	subs.w	r0, sl, r2
   116fa:	eb6b 0103 	sbc.w	r1, fp, r3
   116fe:	f000 fc41 	bl	11f84 <__aeabi_l2f>
   11702:	edd8 7a05 	vldr	s15, [r8, #20]
   11706:	ed98 7a06 	vldr	s14, [r8, #24]
   1170a:	ee06 0a90 	vmov	s13, r0
   1170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
   11712:	eef4 7ac7 	vcmpe.f32	s15, s14
   11716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1171a:	bfa8      	it	ge
   1171c:	2601      	movge	r6, #1
   1171e:	edc8 7a05 	vstr	s15, [r8, #20]
   11722:	bfa8      	it	ge
   11724:	f888 6029 	strbge.w	r6, [r8, #41]	; 0x29
   11728:	b9d4      	cbnz	r4, 11760 <bsec_SensorStatusTracker_doStep+0xb0>
   1172a:	e9d8 3402 	ldrd	r3, r4, [r8, #8]
   1172e:	ebba 0003 	subs.w	r0, sl, r3
   11732:	eb6b 0104 	sbc.w	r1, fp, r4
   11736:	f000 fc25 	bl	11f84 <__aeabi_l2f>
   1173a:	edd8 7a04 	vldr	s15, [r8, #16]
   1173e:	ed98 7a07 	vldr	s14, [r8, #28]
   11742:	ee06 0a90 	vmov	s13, r0
   11746:	ee76 7aa7 	vadd.f32	s15, s13, s15
   1174a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11752:	bfa8      	it	ge
   11754:	2301      	movge	r3, #1
   11756:	edc8 7a04 	vstr	s15, [r8, #16]
   1175a:	bfa8      	it	ge
   1175c:	f888 302a 	strbge.w	r3, [r8, #42]	; 0x2a
   11760:	f1ba 0f01 	cmp.w	sl, #1
   11764:	f17b 0300 	sbcs.w	r3, fp, #0
   11768:	db23      	blt.n	117b2 <bsec_SensorStatusTracker_doStep+0x102>
   1176a:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   1176e:	702e      	strb	r6, [r5, #0]
   11770:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
   11774:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11776:	7013      	strb	r3, [r2, #0]
   11778:	b933      	cbnz	r3, 11788 <bsec_SensorStatusTracker_doStep+0xd8>
   1177a:	edd8 7a07 	vldr	s15, [r8, #28]
   1177e:	eef5 7a40 	vcmp.f32	s15, #0.0
   11782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11786:	d105      	bne.n	11794 <bsec_SensorStatusTracker_doStep+0xe4>
   11788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1178a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1178e:	6013      	str	r3, [r2, #0]
   11790:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   11794:	edd8 6a04 	vldr	s13, [r8, #16]
   11798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1179a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1179e:	ed83 7a00 	vstr	s14, [r3]
   117a2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   117a6:	ea56 0307 	orrs.w	r3, r6, r7
   117aa:	f898 402a 	ldrb.w	r4, [r8, #42]	; 0x2a
   117ae:	d19d      	bne.n	116ec <bsec_SensorStatusTracker_doStep+0x3c>
   117b0:	e79a      	b.n	116e8 <bsec_SensorStatusTracker_doStep+0x38>
   117b2:	2201      	movs	r2, #1
   117b4:	2300      	movs	r3, #0
   117b6:	e9c8 2302 	strd	r2, r3, [r8, #8]
   117ba:	e7d8      	b.n	1176e <bsec_SensorStatusTracker_doStep+0xbe>

000117bc <bsec_SensorStatusTracker_getConfiguration>:
   117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117be:	b085      	sub	sp, #20
   117c0:	ac04      	add	r4, sp, #16
   117c2:	2502      	movs	r5, #2
   117c4:	f804 5d09 	strb.w	r5, [r4, #-9]!
   117c8:	4606      	mov	r6, r0
   117ca:	4617      	mov	r7, r2
   117cc:	7800      	ldrb	r0, [r0, #0]
   117ce:	4622      	mov	r2, r4
   117d0:	460d      	mov	r5, r1
   117d2:	f000 f95b 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   117d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117da:	9003      	str	r0, [sp, #12]
   117dc:	b303      	cbz	r3, 11820 <bsec_SensorStatusTracker_getConfiguration+0x64>
   117de:	2401      	movs	r4, #1
   117e0:	e00e      	b.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   117e2:	2c02      	cmp	r4, #2
   117e4:	d108      	bne.n	117f8 <bsec_SensorStatusTracker_getConfiguration+0x3c>
   117e6:	ab03      	add	r3, sp, #12
   117e8:	463a      	mov	r2, r7
   117ea:	4629      	mov	r1, r5
   117ec:	f996 0028 	ldrsb.w	r0, [r6, #40]	; 0x28
   117f0:	f7fe fb8c 	bl	ff0c <bsec_l_Entity_serializeAndAdd>
   117f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117f8:	3401      	adds	r4, #1
   117fa:	b2e4      	uxtb	r4, r4
   117fc:	42a3      	cmp	r3, r4
   117fe:	d30e      	bcc.n	1181e <bsec_SensorStatusTracker_getConfiguration+0x62>
   11800:	2c01      	cmp	r4, #1
   11802:	d1ee      	bne.n	117e2 <bsec_SensorStatusTracker_getConfiguration+0x26>
   11804:	aa03      	add	r2, sp, #12
   11806:	4639      	mov	r1, r7
   11808:	4628      	mov	r0, r5
   1180a:	ed96 0a06 	vldr	s0, [r6, #24]
   1180e:	f7fe f9f5 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11812:	3401      	adds	r4, #1
   11814:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11818:	b2e4      	uxtb	r4, r4
   1181a:	42a3      	cmp	r3, r4
   1181c:	d2f0      	bcs.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   1181e:	9803      	ldr	r0, [sp, #12]
   11820:	a904      	add	r1, sp, #16
   11822:	2202      	movs	r2, #2
   11824:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11828:	a802      	add	r0, sp, #8
   1182a:	f023 f8f9 	bl	34a20 <memcpy>
   1182e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11832:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11836:	9803      	ldr	r0, [sp, #12]
   11838:	702a      	strb	r2, [r5, #0]
   1183a:	706b      	strb	r3, [r5, #1]
   1183c:	b005      	add	sp, #20
   1183e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011840 <bsec_SensorStatusTracker_getState>:
   11840:	b5f0      	push	{r4, r5, r6, r7, lr}
   11842:	b087      	sub	sp, #28
   11844:	ac06      	add	r4, sp, #24
   11846:	2505      	movs	r5, #5
   11848:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1184c:	4606      	mov	r6, r0
   1184e:	4617      	mov	r7, r2
   11850:	7800      	ldrb	r0, [r0, #0]
   11852:	4622      	mov	r2, r4
   11854:	460d      	mov	r5, r1
   11856:	f000 f919 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1185a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1185e:	9005      	str	r0, [sp, #20]
   11860:	b1b2      	cbz	r2, 11890 <bsec_SensorStatusTracker_getState+0x50>
   11862:	2401      	movs	r4, #1
   11864:	1e63      	subs	r3, r4, #1
   11866:	2b04      	cmp	r3, #4
   11868:	d80d      	bhi.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   1186a:	e8df f003 	tbb	[pc, r3]
   1186e:	213f      	.short	0x213f
   11870:	2b35      	.short	0x2b35
   11872:	03          	.byte	0x03
   11873:	00          	.byte	0x00
   11874:	463a      	mov	r2, r7
   11876:	ab05      	add	r3, sp, #20
   11878:	4629      	mov	r1, r5
   1187a:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
   1187e:	f7fe fa5b 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   11882:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11886:	3401      	adds	r4, #1
   11888:	b2e4      	uxtb	r4, r4
   1188a:	42a2      	cmp	r2, r4
   1188c:	d2ea      	bcs.n	11864 <bsec_SensorStatusTracker_getState+0x24>
   1188e:	9805      	ldr	r0, [sp, #20]
   11890:	a906      	add	r1, sp, #24
   11892:	2202      	movs	r2, #2
   11894:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11898:	a804      	add	r0, sp, #16
   1189a:	f023 f8c1 	bl	34a20 <memcpy>
   1189e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   118a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   118a6:	9805      	ldr	r0, [sp, #20]
   118a8:	702a      	strb	r2, [r5, #0]
   118aa:	706b      	strb	r3, [r5, #1]
   118ac:	b007      	add	sp, #28
   118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118b0:	aa05      	add	r2, sp, #20
   118b2:	4639      	mov	r1, r7
   118b4:	4628      	mov	r0, r5
   118b6:	ed96 0a05 	vldr	s0, [r6, #20]
   118ba:	f7fe f99f 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118c2:	e7e0      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118c4:	463a      	mov	r2, r7
   118c6:	ab05      	add	r3, sp, #20
   118c8:	4629      	mov	r1, r5
   118ca:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
   118ce:	f7fe fa33 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   118d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118d6:	e7d6      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118d8:	aa05      	add	r2, sp, #20
   118da:	4639      	mov	r1, r7
   118dc:	4628      	mov	r0, r5
   118de:	ed96 0a04 	vldr	s0, [r6, #16]
   118e2:	f7fe f98b 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118ea:	e7cc      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118ec:	ab05      	add	r3, sp, #20
   118ee:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   118f2:	462a      	mov	r2, r5
   118f4:	9300      	str	r3, [sp, #0]
   118f6:	463b      	mov	r3, r7
   118f8:	f7fe f9f2 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
   118fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11900:	e7c1      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   11902:	bf00      	nop

00011904 <bsec_SensorStatusTracker_setState>:
   11904:	b5f0      	push	{r4, r5, r6, r7, lr}
   11906:	b087      	sub	sp, #28
   11908:	ab04      	add	r3, sp, #16
   1190a:	ae05      	add	r6, sp, #20
   1190c:	4605      	mov	r5, r0
   1190e:	7800      	ldrb	r0, [r0, #0]
   11910:	9300      	str	r3, [sp, #0]
   11912:	9601      	str	r6, [sp, #4]
   11914:	f10d 030f 	add.w	r3, sp, #15
   11918:	460f      	mov	r7, r1
   1191a:	f000 f889 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   1191e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11922:	b9c3      	cbnz	r3, 11956 <bsec_SensorStatusTracker_setState+0x52>
   11924:	2401      	movs	r4, #1
   11926:	1ea3      	subs	r3, r4, #2
   11928:	4631      	mov	r1, r6
   1192a:	4638      	mov	r0, r7
   1192c:	2b03      	cmp	r3, #3
   1192e:	d803      	bhi.n	11938 <bsec_SensorStatusTracker_setState+0x34>
   11930:	e8df f003 	tbb	[pc, r3]
   11934:	0b14191e 	.word	0x0b14191e
   11938:	f7fe f9b6 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
   1193c:	2c05      	cmp	r4, #5
   1193e:	e9c5 0102 	strd	r0, r1, [r5, #8]
   11942:	d01a      	beq.n	1197a <bsec_SensorStatusTracker_setState+0x76>
   11944:	3401      	adds	r4, #1
   11946:	b2e4      	uxtb	r4, r4
   11948:	e7ed      	b.n	11926 <bsec_SensorStatusTracker_setState+0x22>
   1194a:	f7fe f9ed 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   1194e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11952:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
   11956:	4618      	mov	r0, r3
   11958:	b007      	add	sp, #28
   1195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1195c:	f7fe f9e4 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   11960:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   11964:	e7ee      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11966:	f7fe f92f 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1196a:	ed85 0a04 	vstr	s0, [r5, #16]
   1196e:	e7e9      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11970:	f7fe f92a 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11974:	ed85 0a05 	vstr	s0, [r5, #20]
   11978:	e7e4      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   1197a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1197e:	e7ea      	b.n	11956 <bsec_SensorStatusTracker_setState+0x52>

00011980 <bsec_SensorStatusTracker_updateInterfaceDependency>:
   11980:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11984:	4299      	cmp	r1, r3
   11986:	d018      	beq.n	119ba <bsec_SensorStatusTracker_updateInterfaceDependency+0x3a>
   11988:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
   1198c:	4b13      	ldr	r3, [pc, #76]	; (119dc <bsec_SensorStatusTracker_updateInterfaceDependency+0x5c>)
   1198e:	fb01 f202 	mul.w	r2, r1, r2
   11992:	eb02 0252 	add.w	r2, r2, r2, lsr #1
   11996:	fba2 2303 	umull	r2, r3, r2, r3
   1199a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1199e:	e9c0 2308 	strd	r2, r3, [r0, #32]
   119a2:	d007      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119a4:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   119a8:	d014      	beq.n	119d4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x54>
   119aa:	2964      	cmp	r1, #100	; 0x64
   119ac:	d002      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119ae:	4b0c      	ldr	r3, [pc, #48]	; (119e0 <bsec_SensorStatusTracker_updateInterfaceDependency+0x60>)
   119b0:	61c3      	str	r3, [r0, #28]
   119b2:	4770      	bx	lr
   119b4:	4b0b      	ldr	r3, [pc, #44]	; (119e4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x64>)
   119b6:	61c3      	str	r3, [r0, #28]
   119b8:	4770      	bx	lr
   119ba:	b410      	push	{r4}
   119bc:	2100      	movs	r1, #0
   119be:	2400      	movs	r4, #0
   119c0:	2200      	movs	r2, #0
   119c2:	2300      	movs	r3, #0
   119c4:	6104      	str	r4, [r0, #16]
   119c6:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   119ca:	e9c0 2302 	strd	r2, r3, [r0, #8]
   119ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   119d2:	4770      	bx	lr
   119d4:	4b04      	ldr	r3, [pc, #16]	; (119e8 <bsec_SensorStatusTracker_updateInterfaceDependency+0x68>)
   119d6:	61c3      	str	r3, [r0, #28]
   119d8:	4770      	bx	lr
   119da:	bf00      	nop
   119dc:	00989680 	.word	0x00989680
   119e0:	538bb2c9 	.word	0x538bb2c9
   119e4:	528bb2c9 	.word	0x528bb2c9
   119e8:	515f8476 	.word	0x515f8476

000119ec <bsec_b_SensorStatusTracker_configure>:
   119ec:	b570      	push	{r4, r5, r6, lr}
   119ee:	b086      	sub	sp, #24
   119f0:	ab04      	add	r3, sp, #16
   119f2:	ad05      	add	r5, sp, #20
   119f4:	4604      	mov	r4, r0
   119f6:	7800      	ldrb	r0, [r0, #0]
   119f8:	9300      	str	r3, [sp, #0]
   119fa:	9501      	str	r5, [sp, #4]
   119fc:	f10d 030f 	add.w	r3, sp, #15
   11a00:	460e      	mov	r6, r1
   11a02:	f000 f815 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11a06:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a0a:	b96b      	cbnz	r3, 11a28 <bsec_b_SensorStatusTracker_configure+0x3c>
   11a0c:	4629      	mov	r1, r5
   11a0e:	4630      	mov	r0, r6
   11a10:	f7fe f8da 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11a14:	4629      	mov	r1, r5
   11a16:	ed84 0a06 	vstr	s0, [r4, #24]
   11a1a:	4630      	mov	r0, r6
   11a1c:	f7fe fb0c 	bl	10038 <bsec_o_Entity_parseAndDeserialize>
   11a20:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a24:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   11a28:	4618      	mov	r0, r3
   11a2a:	b006      	add	sp, #24
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	bf00      	nop

00011a30 <bsec_Serialization_checkSerializationHeader>:
   11a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a34:	b082      	sub	sp, #8
   11a36:	e9dd 8608 	ldrd	r8, r6, [sp, #32]
   11a3a:	2400      	movs	r4, #0
   11a3c:	2a03      	cmp	r2, #3
   11a3e:	6034      	str	r4, [r6, #0]
   11a40:	701c      	strb	r4, [r3, #0]
   11a42:	f8c8 4000 	str.w	r4, [r8]
   11a46:	d91c      	bls.n	11a82 <bsec_Serialization_checkSerializationHeader+0x52>
   11a48:	461c      	mov	r4, r3
   11a4a:	2304      	movs	r3, #4
   11a4c:	6033      	str	r3, [r6, #0]
   11a4e:	780a      	ldrb	r2, [r1, #0]
   11a50:	784b      	ldrb	r3, [r1, #1]
   11a52:	f88d 2004 	strb.w	r2, [sp, #4]
   11a56:	460d      	mov	r5, r1
   11a58:	4607      	mov	r7, r0
   11a5a:	2202      	movs	r2, #2
   11a5c:	a901      	add	r1, sp, #4
   11a5e:	f10d 0006 	add.w	r0, sp, #6
   11a62:	f88d 3005 	strb.w	r3, [sp, #5]
   11a66:	f022 ffdb 	bl	34a20 <memcpy>
   11a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a6e:	f8c8 3000 	str.w	r3, [r8]
   11a72:	78ab      	ldrb	r3, [r5, #2]
   11a74:	42bb      	cmp	r3, r7
   11a76:	bf1c      	itt	ne
   11a78:	239c      	movne	r3, #156	; 0x9c
   11a7a:	7023      	strbne	r3, [r4, #0]
   11a7c:	b002      	add	sp, #8
   11a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a82:	2298      	movs	r2, #152	; 0x98
   11a84:	701a      	strb	r2, [r3, #0]
   11a86:	b002      	add	sp, #8
   11a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a8c <bsec_Serialization_prepareSerializationHeader>:
   11a8c:	b410      	push	{r4}
   11a8e:	7814      	ldrb	r4, [r2, #0]
   11a90:	b10c      	cbz	r4, 11a96 <bsec_Serialization_prepareSerializationHeader+0xa>
   11a92:	429c      	cmp	r4, r3
   11a94:	d204      	bcs.n	11aa0 <bsec_Serialization_prepareSerializationHeader+0x14>
   11a96:	2000      	movs	r0, #0
   11a98:	7010      	strb	r0, [r2, #0]
   11a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a9e:	4770      	bx	lr
   11aa0:	7088      	strb	r0, [r1, #2]
   11aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11aa6:	2004      	movs	r0, #4
   11aa8:	4770      	bx	lr
   11aaa:	bf00      	nop

00011aac <bsec_convertHumidity>:
   11aac:	b500      	push	{lr}
   11aae:	ed2d 8b02 	vpush	{d8}
   11ab2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   11ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11aba:	b083      	sub	sp, #12
   11abc:	eef0 8a40 	vmov.f32	s17, s0
   11ac0:	eeb0 8a60 	vmov.f32	s16, s1
   11ac4:	d452      	bmi.n	11b6c <bsec_convertHumidity+0xc0>
   11ac6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 11b74 <bsec_convertHumidity+0xc8>
   11aca:	eeb4 1ac7 	vcmpe.f32	s2, s14
   11ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ad2:	dc41      	bgt.n	11b58 <bsec_convertHumidity+0xac>
   11ad4:	eec1 7a07 	vdiv.f32	s15, s2, s14
   11ad8:	a802      	add	r0, sp, #8
   11ada:	ed60 7a01 	vstmdb	r0!, {s15}
   11ade:	f000 f875 	bl	11bcc <bsec_log>
   11ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 11b78 <bsec_convertHumidity+0xcc>
   11ae6:	eddf 7a25 	vldr	s15, [pc, #148]	; 11b7c <bsec_convertHumidity+0xd0>
   11aea:	eddd 5a01 	vldr	s11, [sp, #4]
   11aee:	ee28 5a87 	vmul.f32	s10, s17, s14
   11af2:	ee78 8aa7 	vadd.f32	s17, s17, s15
   11af6:	ee28 6a07 	vmul.f32	s12, s16, s14
   11afa:	eec5 6a28 	vdiv.f32	s13, s10, s17
   11afe:	ee38 8a27 	vadd.f32	s16, s16, s15
   11b02:	ee76 6aa5 	vadd.f32	s13, s13, s11
   11b06:	eec6 5a08 	vdiv.f32	s11, s12, s16
   11b0a:	ee26 5aa7 	vmul.f32	s10, s13, s15
   11b0e:	ee77 6a66 	vsub.f32	s13, s14, s13
   11b12:	ee85 6a26 	vdiv.f32	s12, s10, s13
   11b16:	ee76 7a27 	vadd.f32	s15, s12, s15
   11b1a:	ee26 7a07 	vmul.f32	s14, s12, s14
   11b1e:	ed8d 6a01 	vstr	s12, [sp, #4]
   11b22:	ee87 0a27 	vdiv.f32	s0, s14, s15
   11b26:	ee30 0a65 	vsub.f32	s0, s0, s11
   11b2a:	f01a f989 	bl	2be40 <expf>
   11b2e:	eddf 7a11 	vldr	s15, [pc, #68]	; 11b74 <bsec_convertHumidity+0xc8>
   11b32:	ee20 0a27 	vmul.f32	s0, s0, s15
   11b36:	eeb4 0ae7 	vcmpe.f32	s0, s15
   11b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b3e:	dc0e      	bgt.n	11b5e <bsec_convertHumidity+0xb2>
   11b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   11b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b48:	dc01      	bgt.n	11b4e <bsec_convertHumidity+0xa2>
   11b4a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 11b80 <bsec_convertHumidity+0xd4>
   11b4e:	b003      	add	sp, #12
   11b50:	ecbd 8b02 	vpop	{d8}
   11b54:	f85d fb04 	ldr.w	pc, [sp], #4
   11b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11b5c:	e7bc      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b5e:	eeb0 0a67 	vmov.f32	s0, s15
   11b62:	b003      	add	sp, #12
   11b64:	ecbd 8b02 	vpop	{d8}
   11b68:	f85d fb04 	ldr.w	pc, [sp], #4
   11b6c:	eddf 7a04 	vldr	s15, [pc, #16]	; 11b80 <bsec_convertHumidity+0xd4>
   11b70:	e7b2      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b72:	bf00      	nop
   11b74:	42c80000 	.word	0x42c80000
   11b78:	418cf5c3 	.word	0x418cf5c3
   11b7c:	43731eb8 	.word	0x43731eb8
   11b80:	00000000 	.word	0x00000000

00011b84 <bsec_crcCcitt2>:
   11b84:	b1b9      	cbz	r1, 11bb6 <bsec_crcCcitt2+0x32>
   11b86:	b430      	push	{r4, r5}
   11b88:	3801      	subs	r0, #1
   11b8a:	4d0c      	ldr	r5, [pc, #48]	; (11bbc <bsec_crcCcitt2+0x38>)
   11b8c:	4401      	add	r1, r0
   11b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b92:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   11b96:	4063      	eors	r3, r4
   11b98:	b2dc      	uxtb	r4, r3
   11b9a:	4281      	cmp	r1, r0
   11b9c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
   11ba0:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
   11ba4:	d1f5      	bne.n	11b92 <bsec_crcCcitt2+0xe>
   11ba6:	43db      	mvns	r3, r3
   11ba8:	b29b      	uxth	r3, r3
   11baa:	b2d8      	uxtb	r0, r3
   11bac:	0a19      	lsrs	r1, r3, #8
   11bae:	7010      	strb	r0, [r2, #0]
   11bb0:	7051      	strb	r1, [r2, #1]
   11bb2:	bc30      	pop	{r4, r5}
   11bb4:	4770      	bx	lr
   11bb6:	7011      	strb	r1, [r2, #0]
   11bb8:	7051      	strb	r1, [r2, #1]
   11bba:	4770      	bx	lr
   11bbc:	00036468 	.word	0x00036468

00011bc0 <bsec_isequal>:
   11bc0:	4299      	cmp	r1, r3
   11bc2:	bf06      	itte	eq
   11bc4:	4290      	cmpeq	r0, r2
   11bc6:	2001      	moveq	r0, #1
   11bc8:	2000      	movne	r0, #0
   11bca:	4770      	bx	lr

00011bcc <bsec_log>:
   11bcc:	b510      	push	{r4, lr}
   11bce:	ed90 0a00 	vldr	s0, [r0]
   11bd2:	4604      	mov	r4, r0
   11bd4:	f01a f972 	bl	2bebc <logf>
   11bd8:	ed84 0a00 	vstr	s0, [r4]
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	bf00      	nop

00011be0 <bsec_log10>:
   11be0:	b510      	push	{r4, lr}
   11be2:	ed90 0a00 	vldr	s0, [r0]
   11be6:	4604      	mov	r4, r0
   11be8:	f01a f99e 	bl	2bf28 <log10f>
   11bec:	ed84 0a00 	vstr	s0, [r4]
   11bf0:	bd10      	pop	{r4, pc}
   11bf2:	bf00      	nop

00011bf4 <bsec_polyval>:
   11bf4:	edd0 7a00 	vldr	s15, [r0]
   11bf8:	ed90 7a01 	vldr	s14, [r0, #4]
   11bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
   11c00:	ee30 0a07 	vadd.f32	s0, s0, s14
   11c04:	4770      	bx	lr
   11c06:	bf00      	nop

00011c08 <bsec_b_sqrt>:
   11c08:	b510      	push	{r4, lr}
   11c0a:	ed90 0a00 	vldr	s0, [r0]
   11c0e:	4604      	mov	r4, r0
   11c10:	f01a fa60 	bl	2c0d4 <sqrtf>
   11c14:	ed84 0a00 	vstr	s0, [r4]
   11c18:	bd10      	pop	{r4, pc}
   11c1a:	bf00      	nop

00011c1c <bsec_sqrt>:
   11c1c:	f000 b890 	b.w	11d40 <bsec_applyScalarFunctionInPlace>

00011c20 <bsec_Channel_reset>:
   11c20:	7f01      	ldrb	r1, [r0, #28]
   11c22:	4b0a      	ldr	r3, [pc, #40]	; (11c4c <bsec_Channel_reset+0x2c>)
   11c24:	4a0a      	ldr	r2, [pc, #40]	; (11c50 <bsec_Channel_reset+0x30>)
   11c26:	6202      	str	r2, [r0, #32]
   11c28:	6243      	str	r3, [r0, #36]	; 0x24
   11c2a:	6283      	str	r3, [r0, #40]	; 0x28
   11c2c:	b161      	cbz	r1, 11c48 <bsec_Channel_reset+0x28>
   11c2e:	b410      	push	{r4}
   11c30:	2301      	movs	r3, #1
   11c32:	2400      	movs	r4, #0
   11c34:	3301      	adds	r3, #1
   11c36:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	4299      	cmp	r1, r3
   11c3e:	6094      	str	r4, [r2, #8]
   11c40:	d2f8      	bcs.n	11c34 <bsec_Channel_reset+0x14>
   11c42:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c46:	4770      	bx	lr
   11c48:	4770      	bx	lr
   11c4a:	bf00      	nop
   11c4c:	3b23d70a 	.word	0x3b23d70a
   11c50:	3ca3d70a 	.word	0x3ca3d70a

00011c54 <bsec_b_Channel_reset>:
   11c54:	7b03      	ldrb	r3, [r0, #12]
   11c56:	2200      	movs	r2, #0
   11c58:	6102      	str	r2, [r0, #16]
   11c5a:	6142      	str	r2, [r0, #20]
   11c5c:	b11b      	cbz	r3, 11c66 <bsec_b_Channel_reset+0x12>
   11c5e:	2b01      	cmp	r3, #1
   11c60:	d8fd      	bhi.n	11c5e <bsec_b_Channel_reset+0xa>
   11c62:	2300      	movs	r3, #0
   11c64:	6083      	str	r3, [r0, #8]
   11c66:	4770      	bx	lr

00011c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>:
   11c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c6a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 11d04 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x9c>
   11c6e:	edd1 6a00 	vldr	s13, [r1]
   11c72:	ed91 7a01 	vldr	s14, [r1, #4]
   11c76:	edd1 7a02 	vldr	s15, [r1, #8]
   11c7a:	b087      	sub	sp, #28
   11c7c:	ee66 6a86 	vmul.f32	s13, s13, s12
   11c80:	ee27 7a06 	vmul.f32	s14, s14, s12
   11c84:	ee67 7a86 	vmul.f32	s15, s15, s12
   11c88:	4606      	mov	r6, r0
   11c8a:	466f      	mov	r7, sp
   11c8c:	4668      	mov	r0, sp
   11c8e:	ad03      	add	r5, sp, #12
   11c90:	460c      	mov	r4, r1
   11c92:	edcd 6a00 	vstr	s13, [sp]
   11c96:	ed8d 7a01 	vstr	s14, [sp, #4]
   11c9a:	edcd 7a02 	vstr	s15, [sp, #8]
   11c9e:	f000 f85d 	bl	11d5c <bsec_sin>
   11ca2:	463b      	mov	r3, r7
   11ca4:	462a      	mov	r2, r5
   11ca6:	edd3 7a00 	vldr	s15, [r3]
   11caa:	ee67 7aa7 	vmul.f32	s15, s15, s15
   11cae:	ee27 7aa7 	vmul.f32	s14, s15, s15
   11cb2:	ece3 7a01 	vstmia	r3!, {s15}
   11cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
   11cba:	42ab      	cmp	r3, r5
   11cbc:	ece2 7a01 	vstmia	r2!, {s15}
   11cc0:	d1f1      	bne.n	11ca6 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x3e>
   11cc2:	4628      	mov	r0, r5
   11cc4:	f7ff ffaa 	bl	11c1c <bsec_sqrt>
   11cc8:	4621      	mov	r1, r4
   11cca:	4630      	mov	r0, r6
   11ccc:	f104 030c 	add.w	r3, r4, #12
   11cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11cd4:	ecb1 7a01 	vldmia	r1!, {s14}
   11cd8:	ecf5 7a01 	vldmia	r5!, {s15}
   11cdc:	ecf7 6a01 	vldmia	r7!, {s13}
   11ce0:	eeb4 7a46 	vcmp.f32	s14, s12
   11ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ce8:	bf16      	itet	ne
   11cea:	ee77 7ae6 	vsubne.f32	s15, s15, s13
   11cee:	eef7 7a00 	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   11cf2:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   11cf6:	428b      	cmp	r3, r1
   11cf8:	ece0 7a01 	vstmia	r0!, {s15}
   11cfc:	d1ea      	bne.n	11cd4 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x6c>
   11cfe:	b007      	add	sp, #28
   11d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d02:	bf00      	nop
   11d04:	3fc90fdb 	.word	0x3fc90fdb

00011d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d08:	2200      	movs	r2, #0
   11d0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d0e:	b410      	push	{r4}
   11d10:	2403      	movs	r4, #3
   11d12:	7604      	strb	r4, [r0, #24]
   11d14:	6001      	str	r1, [r0, #0]
   11d16:	6041      	str	r1, [r0, #4]
   11d18:	6081      	str	r1, [r0, #8]
   11d1a:	60c2      	str	r2, [r0, #12]
   11d1c:	6102      	str	r2, [r0, #16]
   11d1e:	6142      	str	r2, [r0, #20]
   11d20:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d24:	4770      	bx	lr
   11d26:	bf00      	nop

00011d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d28:	b410      	push	{r4}
   11d2a:	2401      	movs	r4, #1
   11d2c:	2200      	movs	r2, #0
   11d2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d32:	7204      	strb	r4, [r0, #8]
   11d34:	6001      	str	r1, [r0, #0]
   11d36:	6042      	str	r2, [r0, #4]
   11d38:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d3c:	4770      	bx	lr
   11d3e:	bf00      	nop

00011d40 <bsec_applyScalarFunctionInPlace>:
   11d40:	b538      	push	{r3, r4, r5, lr}
   11d42:	4604      	mov	r4, r0
   11d44:	f100 050c 	add.w	r5, r0, #12
   11d48:	ed94 0a00 	vldr	s0, [r4]
   11d4c:	f01a f9c2 	bl	2c0d4 <sqrtf>
   11d50:	eca4 0a01 	vstmia	r4!, {s0}
   11d54:	42ac      	cmp	r4, r5
   11d56:	d1f7      	bne.n	11d48 <bsec_applyScalarFunctionInPlace+0x8>
   11d58:	bd38      	pop	{r3, r4, r5, pc}
   11d5a:	bf00      	nop

00011d5c <bsec_sin>:
   11d5c:	b538      	push	{r3, r4, r5, lr}
   11d5e:	4604      	mov	r4, r0
   11d60:	f100 050c 	add.w	r5, r0, #12
   11d64:	ed94 0a00 	vldr	s0, [r4]
   11d68:	f01a f820 	bl	2bdac <sinf>
   11d6c:	eca4 0a01 	vstmia	r4!, {s0}
   11d70:	42ac      	cmp	r4, r5
   11d72:	d1f7      	bne.n	11d64 <bsec_sin+0x8>
   11d74:	bd38      	pop	{r3, r4, r5, pc}
   11d76:	bf00      	nop

00011d78 <__aeabi_dcmpun>:
   11d78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d80:	d102      	bne.n	11d88 <__aeabi_dcmpun+0x10>
   11d82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11d86:	d10a      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d90:	d102      	bne.n	11d98 <__aeabi_dcmpun+0x20>
   11d92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11d96:	d102      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d98:	f04f 0000 	mov.w	r0, #0
   11d9c:	4770      	bx	lr
   11d9e:	f04f 0001 	mov.w	r0, #1
   11da2:	4770      	bx	lr

00011da4 <__aeabi_d2uiz>:
   11da4:	004a      	lsls	r2, r1, #1
   11da6:	d211      	bcs.n	11dcc <__aeabi_d2uiz+0x28>
   11da8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11dac:	d211      	bcs.n	11dd2 <__aeabi_d2uiz+0x2e>
   11dae:	d50d      	bpl.n	11dcc <__aeabi_d2uiz+0x28>
   11db0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11db4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11db8:	d40e      	bmi.n	11dd8 <__aeabi_d2uiz+0x34>
   11dba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11dc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11dc6:	fa23 f002 	lsr.w	r0, r3, r2
   11dca:	4770      	bx	lr
   11dcc:	f04f 0000 	mov.w	r0, #0
   11dd0:	4770      	bx	lr
   11dd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11dd6:	d102      	bne.n	11dde <__aeabi_d2uiz+0x3a>
   11dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11ddc:	4770      	bx	lr
   11dde:	f04f 0000 	mov.w	r0, #0
   11de2:	4770      	bx	lr

00011de4 <__aeabi_frsub>:
   11de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   11de8:	e002      	b.n	11df0 <__addsf3>
   11dea:	bf00      	nop

00011dec <__aeabi_fsub>:
   11dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00011df0 <__addsf3>:
   11df0:	0042      	lsls	r2, r0, #1
   11df2:	bf1f      	itttt	ne
   11df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   11df8:	ea92 0f03 	teqne	r2, r3
   11dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   11e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11e04:	d06a      	beq.n	11edc <__addsf3+0xec>
   11e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   11e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   11e0e:	bfc1      	itttt	gt
   11e10:	18d2      	addgt	r2, r2, r3
   11e12:	4041      	eorgt	r1, r0
   11e14:	4048      	eorgt	r0, r1
   11e16:	4041      	eorgt	r1, r0
   11e18:	bfb8      	it	lt
   11e1a:	425b      	neglt	r3, r3
   11e1c:	2b19      	cmp	r3, #25
   11e1e:	bf88      	it	hi
   11e20:	4770      	bxhi	lr
   11e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11e2e:	bf18      	it	ne
   11e30:	4240      	negne	r0, r0
   11e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   11e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   11e3e:	bf18      	it	ne
   11e40:	4249      	negne	r1, r1
   11e42:	ea92 0f03 	teq	r2, r3
   11e46:	d03f      	beq.n	11ec8 <__addsf3+0xd8>
   11e48:	f1a2 0201 	sub.w	r2, r2, #1
   11e4c:	fa41 fc03 	asr.w	ip, r1, r3
   11e50:	eb10 000c 	adds.w	r0, r0, ip
   11e54:	f1c3 0320 	rsb	r3, r3, #32
   11e58:	fa01 f103 	lsl.w	r1, r1, r3
   11e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11e60:	d502      	bpl.n	11e68 <__addsf3+0x78>
   11e62:	4249      	negs	r1, r1
   11e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   11e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11e6c:	d313      	bcc.n	11e96 <__addsf3+0xa6>
   11e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   11e72:	d306      	bcc.n	11e82 <__addsf3+0x92>
   11e74:	0840      	lsrs	r0, r0, #1
   11e76:	ea4f 0131 	mov.w	r1, r1, rrx
   11e7a:	f102 0201 	add.w	r2, r2, #1
   11e7e:	2afe      	cmp	r2, #254	; 0xfe
   11e80:	d251      	bcs.n	11f26 <__addsf3+0x136>
   11e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   11e8a:	bf08      	it	eq
   11e8c:	f020 0001 	biceq.w	r0, r0, #1
   11e90:	ea40 0003 	orr.w	r0, r0, r3
   11e94:	4770      	bx	lr
   11e96:	0049      	lsls	r1, r1, #1
   11e98:	eb40 0000 	adc.w	r0, r0, r0
   11e9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11ea0:	f1a2 0201 	sub.w	r2, r2, #1
   11ea4:	d1ed      	bne.n	11e82 <__addsf3+0x92>
   11ea6:	fab0 fc80 	clz	ip, r0
   11eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   11eae:	ebb2 020c 	subs.w	r2, r2, ip
   11eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   11eb6:	bfaa      	itet	ge
   11eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   11ebc:	4252      	neglt	r2, r2
   11ebe:	4318      	orrge	r0, r3
   11ec0:	bfbc      	itt	lt
   11ec2:	40d0      	lsrlt	r0, r2
   11ec4:	4318      	orrlt	r0, r3
   11ec6:	4770      	bx	lr
   11ec8:	f092 0f00 	teq	r2, #0
   11ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   11ed0:	bf06      	itte	eq
   11ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   11ed6:	3201      	addeq	r2, #1
   11ed8:	3b01      	subne	r3, #1
   11eda:	e7b5      	b.n	11e48 <__addsf3+0x58>
   11edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   11ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   11ee4:	bf18      	it	ne
   11ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11eea:	d021      	beq.n	11f30 <__addsf3+0x140>
   11eec:	ea92 0f03 	teq	r2, r3
   11ef0:	d004      	beq.n	11efc <__addsf3+0x10c>
   11ef2:	f092 0f00 	teq	r2, #0
   11ef6:	bf08      	it	eq
   11ef8:	4608      	moveq	r0, r1
   11efa:	4770      	bx	lr
   11efc:	ea90 0f01 	teq	r0, r1
   11f00:	bf1c      	itt	ne
   11f02:	2000      	movne	r0, #0
   11f04:	4770      	bxne	lr
   11f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   11f0a:	d104      	bne.n	11f16 <__addsf3+0x126>
   11f0c:	0040      	lsls	r0, r0, #1
   11f0e:	bf28      	it	cs
   11f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   11f14:	4770      	bx	lr
   11f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   11f1a:	bf3c      	itt	cc
   11f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   11f20:	4770      	bxcc	lr
   11f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11f2e:	4770      	bx	lr
   11f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11f34:	bf16      	itet	ne
   11f36:	4608      	movne	r0, r1
   11f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11f3c:	4601      	movne	r1, r0
   11f3e:	0242      	lsls	r2, r0, #9
   11f40:	bf06      	itte	eq
   11f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11f46:	ea90 0f01 	teqeq	r0, r1
   11f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   11f4e:	4770      	bx	lr

00011f50 <__aeabi_ui2f>:
   11f50:	f04f 0300 	mov.w	r3, #0
   11f54:	e004      	b.n	11f60 <__aeabi_i2f+0x8>
   11f56:	bf00      	nop

00011f58 <__aeabi_i2f>:
   11f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11f5c:	bf48      	it	mi
   11f5e:	4240      	negmi	r0, r0
   11f60:	ea5f 0c00 	movs.w	ip, r0
   11f64:	bf08      	it	eq
   11f66:	4770      	bxeq	lr
   11f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11f6c:	4601      	mov	r1, r0
   11f6e:	f04f 0000 	mov.w	r0, #0
   11f72:	e01c      	b.n	11fae <__aeabi_l2f+0x2a>

00011f74 <__aeabi_ul2f>:
   11f74:	ea50 0201 	orrs.w	r2, r0, r1
   11f78:	bf08      	it	eq
   11f7a:	4770      	bxeq	lr
   11f7c:	f04f 0300 	mov.w	r3, #0
   11f80:	e00a      	b.n	11f98 <__aeabi_l2f+0x14>
   11f82:	bf00      	nop

00011f84 <__aeabi_l2f>:
   11f84:	ea50 0201 	orrs.w	r2, r0, r1
   11f88:	bf08      	it	eq
   11f8a:	4770      	bxeq	lr
   11f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   11f90:	d502      	bpl.n	11f98 <__aeabi_l2f+0x14>
   11f92:	4240      	negs	r0, r0
   11f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11f98:	ea5f 0c01 	movs.w	ip, r1
   11f9c:	bf02      	ittt	eq
   11f9e:	4684      	moveq	ip, r0
   11fa0:	4601      	moveq	r1, r0
   11fa2:	2000      	moveq	r0, #0
   11fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   11fa8:	bf08      	it	eq
   11faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   11fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   11fb2:	fabc f28c 	clz	r2, ip
   11fb6:	3a08      	subs	r2, #8
   11fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   11fbc:	db10      	blt.n	11fe0 <__aeabi_l2f+0x5c>
   11fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   11fc2:	4463      	add	r3, ip
   11fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   11fc8:	f1c2 0220 	rsb	r2, r2, #32
   11fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11fd0:	fa20 f202 	lsr.w	r2, r0, r2
   11fd4:	eb43 0002 	adc.w	r0, r3, r2
   11fd8:	bf08      	it	eq
   11fda:	f020 0001 	biceq.w	r0, r0, #1
   11fde:	4770      	bx	lr
   11fe0:	f102 0220 	add.w	r2, r2, #32
   11fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   11fe8:	f1c2 0220 	rsb	r2, r2, #32
   11fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   11ff0:	fa21 f202 	lsr.w	r2, r1, r2
   11ff4:	eb43 0002 	adc.w	r0, r3, r2
   11ff8:	bf08      	it	eq
   11ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   11ffe:	4770      	bx	lr

00012000 <__aeabi_d2lz>:
   12000:	b538      	push	{r3, r4, r5, lr}
   12002:	2200      	movs	r2, #0
   12004:	2300      	movs	r3, #0
   12006:	4604      	mov	r4, r0
   12008:	460d      	mov	r5, r1
   1200a:	f7fb fac1 	bl	d590 <__aeabi_dcmplt>
   1200e:	b928      	cbnz	r0, 1201c <__aeabi_d2lz+0x1c>
   12010:	4620      	mov	r0, r4
   12012:	4629      	mov	r1, r5
   12014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12018:	f000 b80a 	b.w	12030 <__aeabi_d2ulz>
   1201c:	4620      	mov	r0, r4
   1201e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   12022:	f000 f805 	bl	12030 <__aeabi_d2ulz>
   12026:	4240      	negs	r0, r0
   12028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1202c:	bd38      	pop	{r3, r4, r5, pc}
   1202e:	bf00      	nop

00012030 <__aeabi_d2ulz>:
   12030:	b5d0      	push	{r4, r6, r7, lr}
   12032:	2200      	movs	r2, #0
   12034:	4b0b      	ldr	r3, [pc, #44]	; (12064 <__aeabi_d2ulz+0x34>)
   12036:	4606      	mov	r6, r0
   12038:	460f      	mov	r7, r1
   1203a:	f7fb f837 	bl	d0ac <__aeabi_dmul>
   1203e:	f7ff feb1 	bl	11da4 <__aeabi_d2uiz>
   12042:	4604      	mov	r4, r0
   12044:	f7fa ffb8 	bl	cfb8 <__aeabi_ui2d>
   12048:	2200      	movs	r2, #0
   1204a:	4b07      	ldr	r3, [pc, #28]	; (12068 <__aeabi_d2ulz+0x38>)
   1204c:	f7fb f82e 	bl	d0ac <__aeabi_dmul>
   12050:	4602      	mov	r2, r0
   12052:	460b      	mov	r3, r1
   12054:	4630      	mov	r0, r6
   12056:	4639      	mov	r1, r7
   12058:	f7fa fe70 	bl	cd3c <__aeabi_dsub>
   1205c:	f7ff fea2 	bl	11da4 <__aeabi_d2uiz>
   12060:	4621      	mov	r1, r4
   12062:	bdd0      	pop	{r4, r6, r7, pc}
   12064:	3df00000 	.word	0x3df00000
   12068:	41f00000 	.word	0x41f00000

0001206c <strcmp>:
   1206c:	f810 2b01 	ldrb.w	r2, [r0], #1
   12070:	f811 3b01 	ldrb.w	r3, [r1], #1
   12074:	2a01      	cmp	r2, #1
   12076:	bf28      	it	cs
   12078:	429a      	cmpcs	r2, r3
   1207a:	d0f7      	beq.n	1206c <strcmp>
   1207c:	1ad0      	subs	r0, r2, r3
   1207e:	4770      	bx	lr

00012080 <strlen>:
   12080:	4603      	mov	r3, r0
   12082:	f813 2b01 	ldrb.w	r2, [r3], #1
   12086:	2a00      	cmp	r2, #0
   12088:	d1fb      	bne.n	12082 <strlen+0x2>
   1208a:	1a18      	subs	r0, r3, r0
   1208c:	3801      	subs	r0, #1
   1208e:	4770      	bx	lr

00012090 <app_gc_iot>:
}


/**@brief Main Processing Thread */
void app_gc_iot(void)
{
   12090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	ed2d 8b02 	vpush	{d8}
    struct m_info_t info;

    struct k_mbox_msg env_d_recv_msg;

    /* Block until  */
    while (!got_ntp) 
   12098:	4cb1      	ldr	r4, [pc, #708]	; (12360 <app_gc_iot+0x2d0>)
{
   1209a:	b0dd      	sub	sp, #372	; 0x174
    while (!got_ntp) 
   1209c:	7823      	ldrb	r3, [r4, #0]
   1209e:	2b00      	cmp	r3, #0
   120a0:	f000 8145 	beq.w	1232e <app_gc_iot+0x29e>
            jQualAvg = cJSON_CreateString((const char*)jQualNotCalibrated);
        } else {
            jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
        }
        
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   120a4:	ed9f 8baa 	vldr	d8, [pc, #680]	; 12350 <app_gc_iot+0x2c0>
        env_d_recv_msg.size = sizeof(pac_data);
   120a8:	2330      	movs	r3, #48	; 0x30
   120aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   120ae:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
        env_d_recv_msg.rx_source_thread = K_ANY; //TODO: Get producer thread id
   120b2:	2300      	movs	r3, #0
        k_mbox_get(&env_d_mailbox, &env_d_recv_msg, &pac_data, K_FOREVER);
   120b4:	aa1a      	add	r2, sp, #104	; 0x68
   120b6:	a90f      	add	r1, sp, #60	; 0x3c
        env_d_recv_msg.rx_source_thread = K_ANY; //TODO: Get producer thread id
   120b8:	9316      	str	r3, [sp, #88]	; 0x58
        k_mbox_get(&env_d_mailbox, &env_d_recv_msg, &pac_data, K_FOREVER);
   120ba:	48aa      	ldr	r0, [pc, #680]	; (12364 <app_gc_iot+0x2d4>)
   120bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120c0:	f016 fbc6 	bl	28850 <k_mbox_get>
        get_modem_info(&info);
   120c4:	a826      	add	r0, sp, #152	; 0x98
   120c6:	f01c fbfb 	bl	2e8c0 <get_modem_info>
        printk("CID: [%s]\n", info.cid);
   120ca:	a926      	add	r1, sp, #152	; 0x98
   120cc:	48a6      	ldr	r0, [pc, #664]	; (12368 <app_gc_iot+0x2d8>)
   120ce:	f01d f8c0 	bl	2f252 <printk>
        printk("TAC: [%s]\n", info.tac);
   120d2:	f10d 01b6 	add.w	r1, sp, #182	; 0xb6
   120d6:	48a5      	ldr	r0, [pc, #660]	; (1236c <app_gc_iot+0x2dc>)
   120d8:	f01d f8bb 	bl	2f252 <printk>
        printk("RSSI: [%s]\n", info.rssi);
   120dc:	a935      	add	r1, sp, #212	; 0xd4
   120de:	48a4      	ldr	r0, [pc, #656]	; (12370 <app_gc_iot+0x2e0>)
   120e0:	f01d f8b7 	bl	2f252 <printk>
        printk("APN: [%s]\n", info.apn);
   120e4:	f10d 01f2 	add.w	r1, sp, #242	; 0xf2
   120e8:	48a2      	ldr	r0, [pc, #648]	; (12374 <app_gc_iot+0x2e4>)
   120ea:	f01d f8b2 	bl	2f252 <printk>
        printk("FWV: [%s]\n", info.fwv);
   120ee:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
   120f2:	48a1      	ldr	r0, [pc, #644]	; (12378 <app_gc_iot+0x2e8>)
   120f4:	f01d f8ad 	bl	2f252 <printk>
        cJSON * envSensObj = cJSON_CreateObject();
   120f8:	f01c fcd0 	bl	2ea9c <cJSON_CreateObject>
   120fc:	4604      	mov	r4, r0
        jTempMax = cJSON_CreateNumber((s32_t)pac_data.ag_temp.max);
   120fe:	981a      	ldr	r0, [sp, #104]	; 0x68
   12100:	f7fa ff6a 	bl	cfd8 <__aeabi_i2d>
   12104:	ec41 0b10 	vmov	d0, r0, r1
   12108:	f01c fca5 	bl	2ea56 <cJSON_CreateNumber>
   1210c:	4683      	mov	fp, r0
        jTempMin = cJSON_CreateNumber((s32_t)pac_data.ag_temp.min);
   1210e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12110:	f7fa ff62 	bl	cfd8 <__aeabi_i2d>
   12114:	ec41 0b10 	vmov	d0, r0, r1
   12118:	f01c fc9d 	bl	2ea56 <cJSON_CreateNumber>
   1211c:	9000      	str	r0, [sp, #0]
        jTempAvg = cJSON_CreateNumber((s32_t)pac_data.ag_temp.avg);
   1211e:	981c      	ldr	r0, [sp, #112]	; 0x70
   12120:	f7fa ff5a 	bl	cfd8 <__aeabi_i2d>
   12124:	ec41 0b10 	vmov	d0, r0, r1
   12128:	f01c fc95 	bl	2ea56 <cJSON_CreateNumber>
   1212c:	9001      	str	r0, [sp, #4]
        jHumiMax = cJSON_CreateNumber((s32_t)pac_data.ag_humi.max);
   1212e:	981d      	ldr	r0, [sp, #116]	; 0x74
   12130:	f7fa ff52 	bl	cfd8 <__aeabi_i2d>
   12134:	ec41 0b10 	vmov	d0, r0, r1
   12138:	f01c fc8d 	bl	2ea56 <cJSON_CreateNumber>
   1213c:	4682      	mov	sl, r0
        jHumiMin = cJSON_CreateNumber((s32_t)pac_data.ag_humi.min);
   1213e:	981e      	ldr	r0, [sp, #120]	; 0x78
   12140:	f7fa ff4a 	bl	cfd8 <__aeabi_i2d>
   12144:	ec41 0b10 	vmov	d0, r0, r1
   12148:	f01c fc85 	bl	2ea56 <cJSON_CreateNumber>
   1214c:	9002      	str	r0, [sp, #8]
        jHumiAvg = cJSON_CreateNumber((s32_t)pac_data.ag_humi.avg);
   1214e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12150:	f7fa ff42 	bl	cfd8 <__aeabi_i2d>
   12154:	ec41 0b10 	vmov	d0, r0, r1
   12158:	f01c fc7d 	bl	2ea56 <cJSON_CreateNumber>
   1215c:	9003      	str	r0, [sp, #12]
        jPresMax = cJSON_CreateNumber((s32_t)pac_data.ag_pres.max);
   1215e:	9820      	ldr	r0, [sp, #128]	; 0x80
   12160:	f7fa ff3a 	bl	cfd8 <__aeabi_i2d>
   12164:	ec41 0b10 	vmov	d0, r0, r1
   12168:	f01c fc75 	bl	2ea56 <cJSON_CreateNumber>
   1216c:	4681      	mov	r9, r0
        jPresMin = cJSON_CreateNumber((s32_t)pac_data.ag_pres.min);
   1216e:	9821      	ldr	r0, [sp, #132]	; 0x84
   12170:	f7fa ff32 	bl	cfd8 <__aeabi_i2d>
   12174:	ec41 0b10 	vmov	d0, r0, r1
   12178:	f01c fc6d 	bl	2ea56 <cJSON_CreateNumber>
   1217c:	9004      	str	r0, [sp, #16]
        jPresAvg = cJSON_CreateNumber((s32_t)pac_data.ag_pres.avg);
   1217e:	9822      	ldr	r0, [sp, #136]	; 0x88
   12180:	f7fa ff2a 	bl	cfd8 <__aeabi_i2d>
   12184:	ec41 0b10 	vmov	d0, r0, r1
   12188:	f01c fc65 	bl	2ea56 <cJSON_CreateNumber>
   1218c:	9005      	str	r0, [sp, #20]
        jQualMax = cJSON_CreateNumber((s32_t)pac_data.ag_qual.max);
   1218e:	9823      	ldr	r0, [sp, #140]	; 0x8c
   12190:	f7fa ff22 	bl	cfd8 <__aeabi_i2d>
   12194:	ec41 0b10 	vmov	d0, r0, r1
   12198:	f01c fc5d 	bl	2ea56 <cJSON_CreateNumber>
   1219c:	4680      	mov	r8, r0
        jQualMin = cJSON_CreateNumber((s32_t)pac_data.ag_qual.min);
   1219e:	9824      	ldr	r0, [sp, #144]	; 0x90
   121a0:	f7fa ff1a 	bl	cfd8 <__aeabi_i2d>
   121a4:	ec41 0b10 	vmov	d0, r0, r1
   121a8:	f01c fc55 	bl	2ea56 <cJSON_CreateNumber>
        if (pac_data.ag_qual.avg == EXCLUDE) {
   121ac:	f240 33e7 	movw	r3, #999	; 0x3e7
        jQualMin = cJSON_CreateNumber((s32_t)pac_data.ag_qual.min);
   121b0:	9006      	str	r0, [sp, #24]
        if (pac_data.ag_qual.avg == EXCLUDE) {
   121b2:	9825      	ldr	r0, [sp, #148]	; 0x94
   121b4:	4298      	cmp	r0, r3
   121b6:	f040 80bf 	bne.w	12338 <app_gc_iot+0x2a8>
            jQualAvg = cJSON_CreateString((const char*)jQualNotCalibrated);
   121ba:	4870      	ldr	r0, [pc, #448]	; (1237c <app_gc_iot+0x2ec>)
   121bc:	f01c fc60 	bl	2ea80 <cJSON_CreateString>
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121c0:	eeb0 0a48 	vmov.f32	s0, s16
   121c4:	eef0 0a68 	vmov.f32	s1, s17
            jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   121c8:	4605      	mov	r5, r0
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121ca:	f01c fc44 	bl	2ea56 <cJSON_CreateNumber>
        jSampFrq = cJSON_CreateNumber(33);
   121ce:	ed9f 0b62 	vldr	d0, [pc, #392]	; 12358 <app_gc_iot+0x2c8>
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   121d2:	9007      	str	r0, [sp, #28]
        jSampFrq = cJSON_CreateNumber(33);
   121d4:	f01c fc3f 	bl	2ea56 <cJSON_CreateNumber>
   121d8:	9008      	str	r0, [sp, #32]

        jCid = cJSON_CreateString((const char*)info.cid);
   121da:	a826      	add	r0, sp, #152	; 0x98
   121dc:	f01c fc50 	bl	2ea80 <cJSON_CreateString>
   121e0:	9009      	str	r0, [sp, #36]	; 0x24
        jTac = cJSON_CreateString((const char*)info.tac);
   121e2:	f10d 00b6 	add.w	r0, sp, #182	; 0xb6
   121e6:	f01c fc4b 	bl	2ea80 <cJSON_CreateString>
   121ea:	900a      	str	r0, [sp, #40]	; 0x28
        jRssi = cJSON_CreateString((const char*)info.rssi);
   121ec:	a835      	add	r0, sp, #212	; 0xd4
   121ee:	f01c fc47 	bl	2ea80 <cJSON_CreateString>
   121f2:	900b      	str	r0, [sp, #44]	; 0x2c
        jApn = cJSON_CreateString((const char*)info.apn);
   121f4:	f10d 00f2 	add.w	r0, sp, #242	; 0xf2
   121f8:	f01c fc42 	bl	2ea80 <cJSON_CreateString>
   121fc:	900c      	str	r0, [sp, #48]	; 0x30
        jFwv = cJSON_CreateString((const char*)info.fwv);
   121fe:	f50d 7097 	add.w	r0, sp, #302	; 0x12e
   12202:	f01c fc3d 	bl	2ea80 <cJSON_CreateString>
   12206:	900d      	str	r0, [sp, #52]	; 0x34
        jVltg = cJSON_CreateNumber((u16_t)info.vltg);
   12208:	f8bd 016a 	ldrh.w	r0, [sp, #362]	; 0x16a
   1220c:	f7fa fed4 	bl	cfb8 <__aeabi_ui2d>
   12210:	ec41 0b10 	vmov	d0, r0, r1
   12214:	f01c fc1f 	bl	2ea56 <cJSON_CreateNumber>
   12218:	4607      	mov	r7, r0
        jTemp = cJSON_CreateNumber((u16_t)info.temp);
   1221a:	f8bd 016c 	ldrh.w	r0, [sp, #364]	; 0x16c
   1221e:	f7fa fecb 	bl	cfb8 <__aeabi_ui2d>
   12222:	ec41 0b10 	vmov	d0, r0, r1
   12226:	f01c fc16 	bl	2ea56 <cJSON_CreateNumber>
   1222a:	4606      	mov	r6, r0

        /* Add cJSON items to object */
        cJSON_AddItemToObject(envSensObj, jTempMaxString, jTempMax);
   1222c:	465a      	mov	r2, fp
   1222e:	4954      	ldr	r1, [pc, #336]	; (12380 <app_gc_iot+0x2f0>)
   12230:	4620      	mov	r0, r4
   12232:	f003 fbb9 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMaxString, jHumiMax);
   12236:	4652      	mov	r2, sl
   12238:	4952      	ldr	r1, [pc, #328]	; (12384 <app_gc_iot+0x2f4>)
   1223a:	4620      	mov	r0, r4
   1223c:	f003 fbb4 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMaxString, jPresMax);
   12240:	464a      	mov	r2, r9
   12242:	4951      	ldr	r1, [pc, #324]	; (12388 <app_gc_iot+0x2f8>)
   12244:	4620      	mov	r0, r4
   12246:	f003 fbaf 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMaxString, jQualMax);
   1224a:	4642      	mov	r2, r8
   1224c:	494f      	ldr	r1, [pc, #316]	; (1238c <app_gc_iot+0x2fc>)
   1224e:	4620      	mov	r0, r4
   12250:	f003 fbaa 	bl	159a8 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempMinString, jTempMin);
   12254:	9a00      	ldr	r2, [sp, #0]
   12256:	494e      	ldr	r1, [pc, #312]	; (12390 <app_gc_iot+0x300>)
   12258:	4620      	mov	r0, r4
   1225a:	f003 fba5 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMinString, jHumiMin);
   1225e:	9a02      	ldr	r2, [sp, #8]
   12260:	494c      	ldr	r1, [pc, #304]	; (12394 <app_gc_iot+0x304>)
   12262:	4620      	mov	r0, r4
   12264:	f003 fba0 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMinString, jPresMin);
   12268:	9a04      	ldr	r2, [sp, #16]
   1226a:	494b      	ldr	r1, [pc, #300]	; (12398 <app_gc_iot+0x308>)
   1226c:	4620      	mov	r0, r4
   1226e:	f003 fb9b 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMinString, jQualMin);
   12272:	9a06      	ldr	r2, [sp, #24]
   12274:	4949      	ldr	r1, [pc, #292]	; (1239c <app_gc_iot+0x30c>)
   12276:	4620      	mov	r0, r4
   12278:	f003 fb96 	bl	159a8 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempAvgString, jTempAvg);
   1227c:	9a01      	ldr	r2, [sp, #4]
   1227e:	4948      	ldr	r1, [pc, #288]	; (123a0 <app_gc_iot+0x310>)
   12280:	4620      	mov	r0, r4
   12282:	f003 fb91 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiAvgString, jHumiAvg);
   12286:	9a03      	ldr	r2, [sp, #12]
   12288:	4946      	ldr	r1, [pc, #280]	; (123a4 <app_gc_iot+0x314>)
   1228a:	4620      	mov	r0, r4
   1228c:	f003 fb8c 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresAvgString, jPresAvg);
   12290:	9a05      	ldr	r2, [sp, #20]
   12292:	4945      	ldr	r1, [pc, #276]	; (123a8 <app_gc_iot+0x318>)
   12294:	4620      	mov	r0, r4
   12296:	f003 fb87 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualAvgString, jQualAvg);
   1229a:	462a      	mov	r2, r5
   1229c:	4943      	ldr	r1, [pc, #268]	; (123ac <app_gc_iot+0x31c>)
   1229e:	4620      	mov	r0, r4
   122a0:	f003 fb82 	bl	159a8 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jSampSzString, jSampSz);
   122a4:	9a07      	ldr	r2, [sp, #28]
   122a6:	4942      	ldr	r1, [pc, #264]	; (123b0 <app_gc_iot+0x320>)
   122a8:	4620      	mov	r0, r4
   122aa:	f003 fb7d 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jSampFrqString, jSampFrq);
   122ae:	9a08      	ldr	r2, [sp, #32]
   122b0:	4940      	ldr	r1, [pc, #256]	; (123b4 <app_gc_iot+0x324>)
   122b2:	4620      	mov	r0, r4
   122b4:	f003 fb78 	bl	159a8 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jCidString, jCid);
   122b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   122ba:	493f      	ldr	r1, [pc, #252]	; (123b8 <app_gc_iot+0x328>)
   122bc:	4620      	mov	r0, r4
   122be:	f003 fb73 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTacString, jTac);
   122c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   122c4:	493d      	ldr	r1, [pc, #244]	; (123bc <app_gc_iot+0x32c>)
   122c6:	4620      	mov	r0, r4
   122c8:	f003 fb6e 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jRssiString, jRssi);
   122cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   122ce:	493c      	ldr	r1, [pc, #240]	; (123c0 <app_gc_iot+0x330>)
   122d0:	4620      	mov	r0, r4
   122d2:	f003 fb69 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jApnString, jApn);
   122d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   122d8:	493a      	ldr	r1, [pc, #232]	; (123c4 <app_gc_iot+0x334>)
   122da:	4620      	mov	r0, r4
   122dc:	f003 fb64 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jFwvString, jFwv);
   122e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122e2:	4939      	ldr	r1, [pc, #228]	; (123c8 <app_gc_iot+0x338>)
   122e4:	461a      	mov	r2, r3
   122e6:	4620      	mov	r0, r4
   122e8:	f003 fb5e 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jVltgString, jVltg);
   122ec:	463a      	mov	r2, r7
   122ee:	4937      	ldr	r1, [pc, #220]	; (123cc <app_gc_iot+0x33c>)
   122f0:	4620      	mov	r0, r4
   122f2:	f003 fb59 	bl	159a8 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTempString, jTemp);
   122f6:	4632      	mov	r2, r6
   122f8:	4935      	ldr	r1, [pc, #212]	; (123d0 <app_gc_iot+0x340>)
   122fa:	4620      	mov	r0, r4
   122fc:	f003 fb54 	bl	159a8 <cJSON_AddItemToObject>


        /* Create JSON string from object */
        JSONEnvString = cJSON_Print(envSensObj);
   12300:	4620      	mov	r0, r4
   12302:	f01c fb97 	bl	2ea34 <cJSON_Print>
            LOG_DBG("Failed to print envSensObj\n");
        }

        /* Send JSON data */
        LOG_INF("Sending JSON data\n");
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   12306:	4605      	mov	r5, r0
   12308:	b1e8      	cbz	r0, 12346 <app_gc_iot+0x2b6>
   1230a:	f7ff feb9 	bl	12080 <strlen>
   1230e:	4601      	mov	r1, r0
   12310:	2200      	movs	r2, #0
   12312:	4628      	mov	r0, r5
   12314:	f002 fb24 	bl	14960 <gcloud_publish>
        if (pub_success != 0) {
            LOG_INF("JSON data Publish failed\n");
        }

        /* Cleanup JSON obj - release memory */
        cJSON_Delete(envSensObj);
   12318:	4620      	mov	r0, r4
   1231a:	f003 faed 	bl	158f8 <cJSON_Delete>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&timeout, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   1231e:	f247 5030 	movw	r0, #30000	; 0x7530
   12322:	f018 fa73 	bl	2a80c <z_impl_k_sleep>

        /* Reboot */
        LOG_INF("Rebooting in [%d] seconds\n", REBOOT_TIMEOUT/1000);
        k_sleep(K_MSEC(REBOOT_TIMEOUT));
        LOG_INF("Rebooting\n");
        sys_reboot(0);
   12326:	2000      	movs	r0, #0
   12328:	f005 fdd2 	bl	17ed0 <sys_reboot>
    while(true) {
   1232c:	e6bc      	b.n	120a8 <app_gc_iot+0x18>
   1232e:	f242 7010 	movw	r0, #10000	; 0x2710
   12332:	f018 fa6b 	bl	2a80c <z_impl_k_sleep>
   12336:	e6b1      	b.n	1209c <app_gc_iot+0xc>
            jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   12338:	f7fa fe4e 	bl	cfd8 <__aeabi_i2d>
   1233c:	ec41 0b10 	vmov	d0, r0, r1
   12340:	f01c fb89 	bl	2ea56 <cJSON_CreateNumber>
   12344:	e73c      	b.n	121c0 <app_gc_iot+0x130>
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   12346:	4601      	mov	r1, r0
   12348:	e7e2      	b.n	12310 <app_gc_iot+0x280>
   1234a:	bf00      	nop
   1234c:	f3af 8000 	nop.w
   12350:	00000000 	.word	0x00000000
   12354:	406e0000 	.word	0x406e0000
   12358:	00000000 	.word	0x00000000
   1235c:	40408000 	.word	0x40408000
   12360:	2002755e 	.word	0x2002755e
   12364:	2002101c 	.word	0x2002101c
   12368:	00036b04 	.word	0x00036b04
   1236c:	00036b0f 	.word	0x00036b0f
   12370:	00036b1a 	.word	0x00036b1a
   12374:	00036b26 	.word	0x00036b26
   12378:	00036b31 	.word	0x00036b31
   1237c:	00036b3c 	.word	0x00036b3c
   12380:	00036b3f 	.word	0x00036b3f
   12384:	00036b47 	.word	0x00036b47
   12388:	00036b4f 	.word	0x00036b4f
   1238c:	00036b57 	.word	0x00036b57
   12390:	00036b5f 	.word	0x00036b5f
   12394:	00036b67 	.word	0x00036b67
   12398:	00036b6f 	.word	0x00036b6f
   1239c:	00036b77 	.word	0x00036b77
   123a0:	00036b7f 	.word	0x00036b7f
   123a4:	00036b87 	.word	0x00036b87
   123a8:	00036b8f 	.word	0x00036b8f
   123ac:	00036b97 	.word	0x00036b97
   123b0:	00036b9f 	.word	0x00036b9f
   123b4:	00036ba8 	.word	0x00036ba8
   123b8:	000381fa 	.word	0x000381fa
   123bc:	00036bb2 	.word	0x00036bb2
   123c0:	00036bb6 	.word	0x00036bb6
   123c4:	00036bbb 	.word	0x00036bbb
   123c8:	00036bbf 	.word	0x00036bbf
   123cc:	00036bc3 	.word	0x00036bc3
   123d0:	00036bc8 	.word	0x00036bc8
   123d4:	00000000 	.word	0x00000000

000123d8 <print_number>:
	return p->offset + strlens(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item, printbuffer *p)
{
   123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = 0;
	double d = item->valuedouble;
   123da:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
{
   123de:	4605      	mov	r5, r0
   123e0:	460c      	mov	r4, r1
	if (d == 0) {
   123e2:	2200      	movs	r2, #0
   123e4:	2300      	movs	r3, #0
   123e6:	4630      	mov	r0, r6
   123e8:	4639      	mov	r1, r7
   123ea:	f7fb f8c7 	bl	d57c <__aeabi_dcmpeq>
   123ee:	b180      	cbz	r0, 12412 <print_number+0x3a>
		if (p)
   123f0:	b154      	cbz	r4, 12408 <print_number+0x30>
			str = ensure(p, 2);
   123f2:	2102      	movs	r1, #2
   123f4:	4620      	mov	r0, r4
   123f6:	f002 fe27 	bl	15048 <ensure>
		else
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   123fa:	4604      	mov	r4, r0
		if (str)
   123fc:	b110      	cbz	r0, 12404 <print_number+0x2c>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   123fe:	4952      	ldr	r1, [pc, #328]	; (12548 <print_number+0x170>)
   12400:	f022 fc73 	bl	34cea <strcpy>
			else
				sprintf(str, "%f", d);
		}
	}
	return str;
}
   12404:	4620      	mov	r0, r4
   12406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   12408:	4b50      	ldr	r3, [pc, #320]	; (1254c <print_number+0x174>)
   1240a:	2002      	movs	r0, #2
   1240c:	681b      	ldr	r3, [r3, #0]
   1240e:	4798      	blx	r3
   12410:	e7f3      	b.n	123fa <print_number+0x22>
	} else if (fabs(((double)item->valueint) - d) <= DBL_EPSILON &&
   12412:	6968      	ldr	r0, [r5, #20]
   12414:	f7fa fde0 	bl	cfd8 <__aeabi_i2d>
   12418:	4632      	mov	r2, r6
   1241a:	463b      	mov	r3, r7
   1241c:	f7fa fc8e 	bl	cd3c <__aeabi_dsub>
   12420:	ec41 0b10 	vmov	d0, r0, r1
   12424:	f019 fc50 	bl	2bcc8 <fabs>
   12428:	2200      	movs	r2, #0
   1242a:	4b49      	ldr	r3, [pc, #292]	; (12550 <print_number+0x178>)
   1242c:	ec51 0b10 	vmov	r0, r1, d0
   12430:	f7fb f8b8 	bl	d5a4 <__aeabi_dcmple>
   12434:	b300      	cbz	r0, 12478 <print_number+0xa0>
   12436:	a33c      	add	r3, pc, #240	; (adr r3, 12528 <print_number+0x150>)
   12438:	e9d3 2300 	ldrd	r2, r3, [r3]
   1243c:	4630      	mov	r0, r6
   1243e:	4639      	mov	r1, r7
   12440:	f7fb f8b0 	bl	d5a4 <__aeabi_dcmple>
   12444:	b1c0      	cbz	r0, 12478 <print_number+0xa0>
		   d <= INT_MAX && d >= INT_MIN) {
   12446:	2200      	movs	r2, #0
   12448:	4b42      	ldr	r3, [pc, #264]	; (12554 <print_number+0x17c>)
   1244a:	4630      	mov	r0, r6
   1244c:	4639      	mov	r1, r7
   1244e:	f7fb f8b3 	bl	d5b8 <__aeabi_dcmpge>
   12452:	b188      	cbz	r0, 12478 <print_number+0xa0>
		if (p)
   12454:	b15c      	cbz	r4, 1246e <print_number+0x96>
			str = ensure(p, 21);
   12456:	2115      	movs	r1, #21
   12458:	4620      	mov	r0, r4
   1245a:	f002 fdf5 	bl	15048 <ensure>
			str = (char *)cJSON_malloc(
   1245e:	4604      	mov	r4, r0
		if (str)
   12460:	2800      	cmp	r0, #0
   12462:	d0cf      	beq.n	12404 <print_number+0x2c>
			sprintf(str, "%d", item->valueint);
   12464:	696a      	ldr	r2, [r5, #20]
   12466:	493c      	ldr	r1, [pc, #240]	; (12558 <print_number+0x180>)
   12468:	f01b ff38 	bl	2e2dc <siprintf>
   1246c:	e7ca      	b.n	12404 <print_number+0x2c>
			str = (char *)cJSON_malloc(
   1246e:	4b37      	ldr	r3, [pc, #220]	; (1254c <print_number+0x174>)
   12470:	2015      	movs	r0, #21
   12472:	681b      	ldr	r3, [r3, #0]
   12474:	4798      	blx	r3
   12476:	e7f2      	b.n	1245e <print_number+0x86>
		if (p)
   12478:	b374      	cbz	r4, 124d8 <print_number+0x100>
			str = ensure(p, 64);
   1247a:	2140      	movs	r1, #64	; 0x40
   1247c:	4620      	mov	r0, r4
   1247e:	f002 fde3 	bl	15048 <ensure>
			str = (char *)cJSON_malloc(
   12482:	4604      	mov	r4, r0
		if (str) {
   12484:	2800      	cmp	r0, #0
   12486:	d0bd      	beq.n	12404 <print_number+0x2c>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   12488:	ec47 6b10 	vmov	d0, r6, r7
   1248c:	f000 fb28 	bl	12ae0 <floor>
   12490:	4632      	mov	r2, r6
   12492:	463b      	mov	r3, r7
   12494:	ec51 0b10 	vmov	r0, r1, d0
   12498:	f7fa fc50 	bl	cd3c <__aeabi_dsub>
   1249c:	ec41 0b10 	vmov	d0, r0, r1
   124a0:	f019 fc12 	bl	2bcc8 <fabs>
   124a4:	2200      	movs	r2, #0
   124a6:	4b2a      	ldr	r3, [pc, #168]	; (12550 <print_number+0x178>)
   124a8:	ec51 0b10 	vmov	r0, r1, d0
   124ac:	f7fb f87a 	bl	d5a4 <__aeabi_dcmple>
   124b0:	b1b8      	cbz	r0, 124e2 <print_number+0x10a>
			    fabs(d) < 1.0e60)
   124b2:	ec47 6b10 	vmov	d0, r6, r7
   124b6:	f019 fc07 	bl	2bcc8 <fabs>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   124ba:	a31d      	add	r3, pc, #116	; (adr r3, 12530 <print_number+0x158>)
   124bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   124c0:	ec51 0b10 	vmov	r0, r1, d0
   124c4:	f7fb f864 	bl	d590 <__aeabi_dcmplt>
   124c8:	b158      	cbz	r0, 124e2 <print_number+0x10a>
				sprintf(str, "%.0f", d);
   124ca:	4632      	mov	r2, r6
   124cc:	463b      	mov	r3, r7
   124ce:	4923      	ldr	r1, [pc, #140]	; (1255c <print_number+0x184>)
				sprintf(str, "%f", d);
   124d0:	4620      	mov	r0, r4
   124d2:	f01b ff03 	bl	2e2dc <siprintf>
	return str;
   124d6:	e795      	b.n	12404 <print_number+0x2c>
			str = (char *)cJSON_malloc(
   124d8:	4b1c      	ldr	r3, [pc, #112]	; (1254c <print_number+0x174>)
   124da:	2040      	movs	r0, #64	; 0x40
   124dc:	681b      	ldr	r3, [r3, #0]
   124de:	4798      	blx	r3
   124e0:	e7cf      	b.n	12482 <print_number+0xaa>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   124e2:	ec47 6b10 	vmov	d0, r6, r7
   124e6:	f019 fbef 	bl	2bcc8 <fabs>
   124ea:	a313      	add	r3, pc, #76	; (adr r3, 12538 <print_number+0x160>)
   124ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   124f0:	ec51 0b10 	vmov	r0, r1, d0
   124f4:	f7fb f84c 	bl	d590 <__aeabi_dcmplt>
   124f8:	b118      	cbz	r0, 12502 <print_number+0x12a>
				sprintf(str, "%e", d);
   124fa:	4632      	mov	r2, r6
   124fc:	463b      	mov	r3, r7
   124fe:	4918      	ldr	r1, [pc, #96]	; (12560 <print_number+0x188>)
   12500:	e7e6      	b.n	124d0 <print_number+0xf8>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   12502:	ec47 6b10 	vmov	d0, r6, r7
   12506:	f019 fbdf 	bl	2bcc8 <fabs>
   1250a:	a30d      	add	r3, pc, #52	; (adr r3, 12540 <print_number+0x168>)
   1250c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12510:	ec51 0b10 	vmov	r0, r1, d0
   12514:	f7fb f85a 	bl	d5cc <__aeabi_dcmpgt>
   12518:	2800      	cmp	r0, #0
   1251a:	d1ee      	bne.n	124fa <print_number+0x122>
				sprintf(str, "%f", d);
   1251c:	4632      	mov	r2, r6
   1251e:	463b      	mov	r3, r7
   12520:	4910      	ldr	r1, [pc, #64]	; (12564 <print_number+0x18c>)
   12522:	e7d5      	b.n	124d0 <print_number+0xf8>
   12524:	f3af 8000 	nop.w
   12528:	ffc00000 	.word	0xffc00000
   1252c:	41dfffff 	.word	0x41dfffff
   12530:	e4c2f344 	.word	0xe4c2f344
   12534:	4c63e9e4 	.word	0x4c63e9e4
   12538:	a0b5ed8d 	.word	0xa0b5ed8d
   1253c:	3eb0c6f7 	.word	0x3eb0c6f7
   12540:	00000000 	.word	0x00000000
   12544:	41cdcd65 	.word	0x41cdcd65
   12548:	00038ae7 	.word	0x00038ae7
   1254c:	20020080 	.word	0x20020080
   12550:	3cb00000 	.word	0x3cb00000
   12554:	c1e00000 	.word	0xc1e00000
   12558:	000382d7 	.word	0x000382d7
   1255c:	00036f94 	.word	0x00036f94
   12560:	00036f99 	.word	0x00036f99
   12564:	00036f9c 	.word	0x00036f9c

00012568 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, u32_t timeout, struct sntp_time *time)
{
   12568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1256c:	4605      	mov	r5, r0
   1256e:	b09b      	sub	sp, #108	; 0x6c
   12570:	460f      	mov	r7, r1
   12572:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   12574:	2100      	movs	r1, #0
   12576:	2230      	movs	r2, #48	; 0x30
   12578:	a802      	add	r0, sp, #8
   1257a:	f022 fa8b 	bl	34a94 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1257e:	2d00      	cmp	r5, #0
   12580:	f000 8087 	beq.w	12692 <sntp_query+0x12a>
   12584:	2e00      	cmp	r6, #0
   12586:	f000 8084 	beq.w	12692 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1258a:	231b      	movs	r3, #27
   1258c:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   12590:	f022 f978 	bl	34884 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   12594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12598:	2400      	movs	r4, #0
   1259a:	fba0 8903 	umull	r8, r9, r0, r3
   1259e:	fb03 9901 	mla	r9, r3, r1, r9
   125a2:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   125a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   125aa:	2300      	movs	r3, #0
   125ac:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   125b0:	4621      	mov	r1, r4
   125b2:	f7fb f8dd 	bl	d770 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   125b6:	4a3c      	ldr	r2, [pc, #240]	; (126a8 <sntp_query+0x140>)
   125b8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   125ba:	0a13      	lsrs	r3, r2, #8
   125bc:	0211      	lsls	r1, r2, #8
   125be:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   125c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   125c6:	430b      	orrs	r3, r1
   125c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   125cc:	f043 0383 	orr.w	r3, r3, #131	; 0x83
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   125d0:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   125d2:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (u8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   125d4:	68e8      	ldr	r0, [r5, #12]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   125d6:	2230      	movs	r2, #48	; 0x30
   125d8:	e9cd 4400 	strd	r4, r4, [sp]
   125dc:	4623      	mov	r3, r4
   125de:	a902      	add	r1, sp, #8
   125e0:	f01d fa45 	bl	2fa6e <z_impl_zsock_sendto>
	if (ret < 0) {
   125e4:	2800      	cmp	r0, #0
   125e6:	db0f      	blt.n	12608 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   125e8:	4621      	mov	r1, r4
   125ea:	2230      	movs	r2, #48	; 0x30
   125ec:	a80e      	add	r0, sp, #56	; 0x38
   125ee:	f022 fa51 	bl	34a94 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   125f2:	68a9      	ldr	r1, [r5, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   125f4:	463a      	mov	r2, r7
   125f6:	4628      	mov	r0, r5
   125f8:	f005 f9fc 	bl	179f4 <z_impl_zsock_poll>
	if (status < 0) {
   125fc:	42a0      	cmp	r0, r4
   125fe:	da06      	bge.n	1260e <sntp_query+0xa6>
		return -errno;
   12600:	f01e fd58 	bl	310b4 <__errno>
   12604:	6800      	ldr	r0, [r0, #0]
   12606:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   12608:	b01b      	add	sp, #108	; 0x6c
   1260a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   1260e:	d037      	beq.n	12680 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (u8_t *)&buf, sizeof(buf), 0);
   12610:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   12612:	2230      	movs	r2, #48	; 0x30
   12614:	e9cd 4400 	strd	r4, r4, [sp]
   12618:	4623      	mov	r3, r4
   1261a:	a90e      	add	r1, sp, #56	; 0x38
   1261c:	f01d fa79 	bl	2fb12 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   12620:	2800      	cmp	r0, #0
   12622:	dbed      	blt.n	12600 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   12624:	2830      	cmp	r0, #48	; 0x30
   12626:	d12e      	bne.n	12686 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   12628:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1262a:	692a      	ldr	r2, [r5, #16]
   1262c:	ba1b      	rev	r3, r3
   1262e:	429a      	cmp	r2, r3
   12630:	d002      	beq.n	12638 <sntp_query+0xd0>
		return -EINVAL;
   12632:	f06f 0015 	mvn.w	r0, #21
   12636:	e7e7      	b.n	12608 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   12638:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1263c:	f003 0307 	and.w	r3, r3, #7
   12640:	2b04      	cmp	r3, #4
   12642:	d1f6      	bne.n	12632 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   12644:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12648:	b303      	cbz	r3, 1268c <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1264a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1264c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1264e:	ba1b      	rev	r3, r3
   12650:	ba12      	rev	r2, r2
   12652:	ea53 0102 	orrs.w	r1, r3, r2
   12656:	d0ec      	beq.n	12632 <sntp_query+0xca>
	if (ts & 0x80000000) {
   12658:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1265a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1265c:	da0c      	bge.n	12678 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1265e:	4a13      	ldr	r2, [pc, #76]	; (126ac <sntp_query+0x144>)
   12660:	4293      	cmp	r3, r2
   12662:	d9e6      	bls.n	12632 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   12664:	a10c      	add	r1, pc, #48	; (adr r1, 12698 <sntp_query+0x130>)
   12666:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1266a:	18c4      	adds	r4, r0, r3
   1266c:	f141 0500 	adc.w	r5, r1, #0
   12670:	e9c6 4500 	strd	r4, r5, [r6]
	return 0;
   12674:	2000      	movs	r0, #0
   12676:	e7c7      	b.n	12608 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   12678:	a109      	add	r1, pc, #36	; (adr r1, 126a0 <sntp_query+0x138>)
   1267a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1267e:	e7f4      	b.n	1266a <sntp_query+0x102>
		return -ETIMEDOUT;
   12680:	f06f 0073 	mvn.w	r0, #115	; 0x73
   12684:	e7c0      	b.n	12608 <sntp_query+0xa0>
		return -EMSGSIZE;
   12686:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1268a:	e7bd      	b.n	12608 <sntp_query+0xa0>
		return -EBUSY;
   1268c:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   12690:	e7ba      	b.n	12608 <sntp_query+0xa0>
		return -EFAULT;
   12692:	f06f 000d 	mvn.w	r0, #13
   12696:	e7b7      	b.n	12608 <sntp_query+0xa0>
   12698:	7c558180 	.word	0x7c558180
   1269c:	ffffffff 	.word	0xffffffff
   126a0:	7c558180 	.word	0x7c558180
   126a4:	00000000 	.word	0x00000000
   126a8:	83aa7e80 	.word	0x83aa7e80
   126ac:	83aa7e7f 	.word	0x83aa7e7f

000126b0 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   126b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   126b2:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   126b6:	460e      	mov	r6, r1
{
   126b8:	b08d      	sub	sp, #52	; 0x34
	if (response == NULL) {
   126ba:	2900      	cmp	r1, #0
   126bc:	f000 80b0 	beq.w	12820 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   126c0:	2400      	movs	r4, #0
   126c2:	4d9e      	ldr	r5, [pc, #632]	; (1293c <at_handler+0x28c>)
		if (strncmp(at_notifs[i], notif,
   126c4:	f855 7b04 	ldr.w	r7, [r5], #4
   126c8:	4638      	mov	r0, r7
   126ca:	f7ff fcd9 	bl	12080 <strlen>
   126ce:	4631      	mov	r1, r6
   126d0:	4602      	mov	r2, r0
   126d2:	4638      	mov	r0, r7
   126d4:	f022 fb11 	bl	34cfa <strncmp>
   126d8:	2800      	cmp	r0, #0
   126da:	f040 809d 	bne.w	12818 <at_handler+0x168>
			*type = i;
   126de:	b2e4      	uxtb	r4, r4
	/* Only proceed with parsing if notification is relevant */
	if (!is_relevant_notif(response, &notif_type)) {
		return;
	}

	switch (notif_type) {
   126e0:	2c01      	cmp	r4, #1
   126e2:	f000 80a1 	beq.w	12828 <at_handler+0x178>
   126e6:	2c02      	cmp	r4, #2
   126e8:	f000 80c9 	beq.w	1287e <at_handler+0x1ce>
	size_t len = sizeof(str_buf) - 1;
   126ec:	2709      	movs	r7, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   126ee:	210a      	movs	r1, #10
   126f0:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   126f2:	9702      	str	r7, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   126f4:	f021 fd98 	bl	34228 <at_params_list_init>
	if (err) {
   126f8:	4605      	mov	r5, r0
   126fa:	2800      	cmp	r0, #0
   126fc:	f040 8090 	bne.w	12820 <at_handler+0x170>
	err = at_parser_params_from_str(notification,
   12700:	4601      	mov	r1, r0
   12702:	aa07      	add	r2, sp, #28
   12704:	4630      	mov	r0, r6
   12706:	f021 fd8c 	bl	34222 <at_parser_params_from_str>
	if (err) {
   1270a:	4604      	mov	r4, r0
   1270c:	2800      	cmp	r0, #0
   1270e:	d135      	bne.n	1277c <at_handler+0xcc>
	err = at_params_int_get(&resp_list,
   12710:	aa01      	add	r2, sp, #4
   12712:	2101      	movs	r1, #1
   12714:	a807      	add	r0, sp, #28
   12716:	f021 fe48 	bl	343aa <at_params_int_get>
	if (err) {
   1271a:	4604      	mov	r4, r0
   1271c:	bb70      	cbnz	r0, 1277c <at_handler+0xcc>
	err = at_params_string_get(&resp_list,
   1271e:	ab02      	add	r3, sp, #8
   12720:	aa09      	add	r2, sp, #36	; 0x24
   12722:	2102      	movs	r1, #2
   12724:	a807      	add	r0, sp, #28
	*reg_status = status;
   12726:	f89d 5004 	ldrb.w	r5, [sp, #4]
	err = at_params_string_get(&resp_list,
   1272a:	f021 fe55 	bl	343d8 <at_params_string_get>
	if (err) {
   1272e:	4604      	mov	r4, r0
   12730:	bb20      	cbnz	r0, 1277c <at_handler+0xcc>
	str_buf[len] = '\0';
   12732:	9b02      	ldr	r3, [sp, #8]
   12734:	aa0c      	add	r2, sp, #48	; 0x30
   12736:	4413      	add	r3, r2
   12738:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->tac = strtoul(str_buf, NULL, 16);
   1273c:	4601      	mov	r1, r0
   1273e:	2210      	movs	r2, #16
   12740:	a809      	add	r0, sp, #36	; 0x24
   12742:	f01b fee1 	bl	2e508 <strtoul>
	err = at_params_string_get(&resp_list,
   12746:	ab02      	add	r3, sp, #8
	cell->tac = strtoul(str_buf, NULL, 16);
   12748:	9004      	str	r0, [sp, #16]
	err = at_params_string_get(&resp_list,
   1274a:	aa09      	add	r2, sp, #36	; 0x24
   1274c:	2103      	movs	r1, #3
   1274e:	a807      	add	r0, sp, #28
	len = sizeof(str_buf) - 1;
   12750:	9702      	str	r7, [sp, #8]
	err = at_params_string_get(&resp_list,
   12752:	f021 fe41 	bl	343d8 <at_params_string_get>
	if (err) {
   12756:	4604      	mov	r4, r0
   12758:	b980      	cbnz	r0, 1277c <at_handler+0xcc>
	str_buf[len] = '\0';
   1275a:	9b02      	ldr	r3, [sp, #8]
   1275c:	aa0c      	add	r2, sp, #48	; 0x30
   1275e:	4413      	add	r3, r2
   12760:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->id = strtoul(str_buf, NULL, 16);
   12764:	4601      	mov	r1, r0
   12766:	2210      	movs	r2, #16
   12768:	a809      	add	r0, sp, #36	; 0x24
   1276a:	f01b fecd 	bl	2e508 <strtoul>
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1276e:	aa05      	add	r2, sp, #20
	cell->id = strtoul(str_buf, NULL, 16);
   12770:	9003      	str	r0, [sp, #12]
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   12772:	2101      	movs	r1, #1
   12774:	a807      	add	r0, sp, #28
   12776:	f00b fe7f 	bl	1e478 <parse_psm_cfg>
   1277a:	4604      	mov	r4, r0
	at_params_list_free(&resp_list);
   1277c:	a807      	add	r0, sp, #28
   1277e:	f021 fd66 	bl	3424e <at_params_list_free>
		struct lte_lc_psm_cfg psm_cfg;

		LOG_DBG("+CEREG notification: %s", log_strdup(response));

		err = parse_cereg(response, &reg_status, &cell, &psm_cfg);
		if (err) {
   12782:	2c00      	cmp	r4, #0
   12784:	d14c      	bne.n	12820 <at_handler+0x170>
			LOG_ERR("Failed to parse notification (error %d): %s",
				err, log_strdup(response));
			return;
		}

		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   12786:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1278a:	2b01      	cmp	r3, #1
   1278c:	d102      	bne.n	12794 <at_handler+0xe4>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1278e:	486c      	ldr	r0, [pc, #432]	; (12940 <at_handler+0x290>)
   12790:	f018 f87e 	bl	2a890 <z_impl_k_sem_give>
		    (reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) {
			k_sem_give(&link);
		}

		if (!evt_handler) {
   12794:	4c6b      	ldr	r4, [pc, #428]	; (12944 <at_handler+0x294>)
   12796:	6823      	ldr	r3, [r4, #0]
   12798:	2b00      	cmp	r3, #0
   1279a:	d041      	beq.n	12820 <at_handler+0x170>
			return;
		}

		/* Network registration status event */
		if (reg_status != prev_reg_status) {
   1279c:	4a6a      	ldr	r2, [pc, #424]	; (12948 <at_handler+0x298>)
   1279e:	7811      	ldrb	r1, [r2, #0]
   127a0:	42a9      	cmp	r1, r5
   127a2:	d007      	beq.n	127b4 <at_handler+0x104>
			prev_reg_status = reg_status;
   127a4:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   127a6:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   127a8:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   127ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			evt_handler(&evt);
   127b0:	a809      	add	r0, sp, #36	; 0x24
   127b2:	4798      	blx	r3
		}

		/* Cell update event */
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   127b4:	4e65      	ldr	r6, [pc, #404]	; (1294c <at_handler+0x29c>)
   127b6:	ad03      	add	r5, sp, #12
   127b8:	2208      	movs	r2, #8
   127ba:	4631      	mov	r1, r6
   127bc:	4628      	mov	r0, r5
   127be:	f022 f921 	bl	34a04 <memcmp>
   127c2:	b160      	cbz	r0, 127de <at_handler+0x12e>
			evt.type = LTE_LC_EVT_CELL_UPDATE;

			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   127c4:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   127c8:	2304      	movs	r3, #4
   127ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   127ce:	ab0c      	add	r3, sp, #48	; 0x30
   127d0:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   127d4:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   127d8:	6823      	ldr	r3, [r4, #0]
   127da:	a809      	add	r0, sp, #36	; 0x24
   127dc:	4798      	blx	r3
		}

		/* PSM configuration update event */
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   127de:	4e5c      	ldr	r6, [pc, #368]	; (12950 <at_handler+0x2a0>)
   127e0:	ad05      	add	r5, sp, #20
   127e2:	2208      	movs	r2, #8
   127e4:	4631      	mov	r1, r6
   127e6:	4628      	mov	r0, r5
   127e8:	f022 f90c 	bl	34a04 <memcmp>
   127ec:	b160      	cbz	r0, 12808 <at_handler+0x158>
			   sizeof(struct lte_lc_psm_cfg))) {
			evt.type = LTE_LC_EVT_PSM_UPDATE;

			memcpy(&prev_psm_cfg, &psm_cfg,
   127ee:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   127f2:	2301      	movs	r3, #1
   127f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			       sizeof(struct lte_lc_psm_cfg));
			memcpy(&evt.psm_cfg, &psm_cfg,
   127f8:	ab0c      	add	r3, sp, #48	; 0x30
   127fa:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_psm_cfg, &psm_cfg,
   127fe:	e886 0003 	stmia.w	r6, {r0, r1}
			       sizeof(struct lte_lc_psm_cfg));
			evt_handler(&evt);
   12802:	6823      	ldr	r3, [r4, #0]
   12804:	a809      	add	r0, sp, #36	; 0x24
   12806:	4798      	blx	r3
	bool notify = false;
   12808:	2300      	movs	r3, #0
	default:
		LOG_ERR("Unrecognized notification type: %d", notif_type);
		break;
	}

	if (evt_handler && notify) {
   1280a:	4a4e      	ldr	r2, [pc, #312]	; (12944 <at_handler+0x294>)
   1280c:	6812      	ldr	r2, [r2, #0]
   1280e:	b13a      	cbz	r2, 12820 <at_handler+0x170>
   12810:	b133      	cbz	r3, 12820 <at_handler+0x170>
		evt_handler(&evt);
   12812:	a809      	add	r0, sp, #36	; 0x24
   12814:	4790      	blx	r2
   12816:	e003      	b.n	12820 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   12818:	3401      	adds	r4, #1
   1281a:	2c03      	cmp	r4, #3
   1281c:	f47f af52 	bne.w	126c4 <at_handler+0x14>
	}
}
   12820:	b00d      	add	sp, #52	; 0x34
   12822:	ecbd 8b02 	vpop	{d8}
   12826:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   12828:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1282c:	2104      	movs	r1, #4
   1282e:	a807      	add	r0, sp, #28
   12830:	f021 fcfa 	bl	34228 <at_params_list_init>
	if (err) {
   12834:	4601      	mov	r1, r0
   12836:	2800      	cmp	r0, #0
   12838:	d1f2      	bne.n	12820 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1283a:	aa07      	add	r2, sp, #28
   1283c:	4630      	mov	r0, r6
   1283e:	f021 fcf0 	bl	34222 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   12842:	4605      	mov	r5, r0
   12844:	b950      	cbnz	r0, 1285c <at_handler+0x1ac>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   12846:	aa05      	add	r2, sp, #20
   12848:	4621      	mov	r1, r4
   1284a:	a807      	add	r0, sp, #28
   1284c:	f021 fdad 	bl	343aa <at_params_int_get>
	if (err) {
   12850:	4605      	mov	r5, r0
   12852:	b918      	cbnz	r0, 1285c <at_handler+0x1ac>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
   12854:	9b05      	ldr	r3, [sp, #20]
   12856:	b95b      	cbnz	r3, 12870 <at_handler+0x1c0>
		*mode = LTE_LC_RRC_MODE_IDLE;
   12858:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1285c:	a807      	add	r0, sp, #28
   1285e:	f021 fcf6 	bl	3424e <at_params_list_free>
		if (err) {
   12862:	2d00      	cmp	r5, #0
   12864:	d1dc      	bne.n	12820 <at_handler+0x170>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   12866:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12868:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   1286c:	2301      	movs	r3, #1
		break;
   1286e:	e7cc      	b.n	1280a <at_handler+0x15a>
	} else if (temp_mode == 1) {
   12870:	2b01      	cmp	r3, #1
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   12872:	bf0c      	ite	eq
   12874:	f88d 3028 	strbeq.w	r3, [sp, #40]	; 0x28
		err = -EINVAL;
   12878:	f06f 0515 	mvnne.w	r5, #21
   1287c:	e7ee      	b.n	1285c <at_handler+0x1ac>
{
	int err;
	u8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1287e:	2304      	movs	r3, #4
	struct at_param_list resp_list = {0};
   12880:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = lte_lc_system_mode_get(&sys_mode);
   12884:	a809      	add	r0, sp, #36	; 0x24
	size_t len = sizeof(tmp_buf) - 1;
   12886:	9303      	str	r3, [sp, #12]
	err = lte_lc_system_mode_get(&sys_mode);
   12888:	f00b ff02 	bl	1e690 <lte_lc_system_mode_get>
	if (err) {
   1288c:	2800      	cmp	r0, #0
   1288e:	d1c7      	bne.n	12820 <at_handler+0x170>
	switch (sys_mode) {
   12890:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   12894:	3b01      	subs	r3, #1
   12896:	2b04      	cmp	r3, #4
   12898:	d8c2      	bhi.n	12820 <at_handler+0x170>
   1289a:	a201      	add	r2, pc, #4	; (adr r2, 128a0 <at_handler+0x1f0>)
   1289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   128a0:	00012903 	.word	0x00012903
   128a4:	000128b5 	.word	0x000128b5
   128a8:	00012821 	.word	0x00012821
   128ac:	00012903 	.word	0x00012903
   128b0:	000128b5 	.word	0x000128b5
		*ptw_multiplier = 2.56;
   128b4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 12954 <at_handler+0x2a4>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   128b8:	2105      	movs	r1, #5
   128ba:	a807      	add	r0, sp, #28
   128bc:	f021 fcb4 	bl	34228 <at_params_list_init>
	if (err) {
   128c0:	4601      	mov	r1, r0
   128c2:	2800      	cmp	r0, #0
   128c4:	d1ac      	bne.n	12820 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   128c6:	aa07      	add	r2, sp, #28
   128c8:	4630      	mov	r0, r6
   128ca:	f021 fcaa 	bl	34222 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   128ce:	4604      	mov	r4, r0
   128d0:	bb58      	cbnz	r0, 1292a <at_handler+0x27a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   128d2:	ab03      	add	r3, sp, #12
   128d4:	aa05      	add	r2, sp, #20
   128d6:	2103      	movs	r1, #3
   128d8:	a807      	add	r0, sp, #28
   128da:	f021 fd7d 	bl	343d8 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   128de:	4604      	mov	r4, r0
   128e0:	bb18      	cbnz	r0, 1292a <at_handler+0x27a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   128e2:	9b03      	ldr	r3, [sp, #12]
   128e4:	aa0c      	add	r2, sp, #48	; 0x30
   128e6:	4413      	add	r3, r2
   128e8:	f803 0c1c 	strb.w	r0, [r3, #-28]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   128ec:	4601      	mov	r1, r0
   128ee:	2202      	movs	r2, #2
   128f0:	a805      	add	r0, sp, #20
   128f2:	f01b fe09 	bl	2e508 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   128f6:	b2c5      	uxtb	r5, r0
   128f8:	2d0f      	cmp	r5, #15
   128fa:	d905      	bls.n	12908 <at_handler+0x258>
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
	if (idx > 15) {
		LOG_ERR("Invalid PTW lookup index: %d", idx);
		err = -EINVAL;
   128fc:	f06f 0415 	mvn.w	r4, #21
   12900:	e013      	b.n	1292a <at_handler+0x27a>
		*ptw_multiplier = 1.28;
   12902:	ed9f 8a15 	vldr	s16, [pc, #84]	; 12958 <at_handler+0x2a8>
   12906:	e7d7      	b.n	128b8 <at_handler+0x208>
	err = lte_lc_system_mode_get(&sys_mode);
   12908:	a802      	add	r0, sp, #8
   1290a:	f00b fec1 	bl	1e690 <lte_lc_system_mode_get>
	if (err) {
   1290e:	4604      	mov	r4, r0
   12910:	b958      	cbnz	r0, 1292a <at_handler+0x27a>
	switch (sys_mode) {
   12912:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12916:	3b01      	subs	r3, #1
   12918:	2b04      	cmp	r3, #4
   1291a:	d804      	bhi.n	12926 <at_handler+0x276>
   1291c:	e8df f003 	tbb	[pc, r3]
   12920:	1e034e1e 	.word	0x1e034e1e
   12924:	4e          	.byte	0x4e
   12925:	00          	.byte	0x00
		return -ENOTCONN;
   12926:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1292a:	a807      	add	r0, sp, #28
   1292c:	f021 fc8f 	bl	3424e <at_params_list_free>
		if (err) {
   12930:	2c00      	cmp	r4, #0
   12932:	f47f af75 	bne.w	12820 <at_handler+0x170>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12936:	2302      	movs	r3, #2
   12938:	e796      	b.n	12868 <at_handler+0x1b8>
   1293a:	bf00      	nop
   1293c:	00035e34 	.word	0x00035e34
   12940:	200222b4 	.word	0x200222b4
   12944:	200222b0 	.word	0x200222b0
   12948:	20027f77 	.word	0x20027f77
   1294c:	200222cc 	.word	0x200222cc
   12950:	200222d4 	.word	0x200222d4
   12954:	4023d70a 	.word	0x4023d70a
   12958:	3fa3d70a 	.word	0x3fa3d70a
		multiplier = edrx_lookup_ltem[idx];
   1295c:	4b1c      	ldr	r3, [pc, #112]	; (129d0 <at_handler+0x320>)
		multiplier = edrx_lookup_nbiot[idx];
   1295e:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12962:	b368      	cbz	r0, 129c0 <at_handler+0x310>
   12964:	f7fa fb38 	bl	cfd8 <__aeabi_i2d>
   12968:	a317      	add	r3, pc, #92	; (adr r3, 129c8 <at_handler+0x318>)
   1296a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1296e:	f7fa fb9d 	bl	d0ac <__aeabi_dmul>
   12972:	f7fa fe5d 	bl	d630 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   12976:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12978:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1297a:	ab03      	add	r3, sp, #12
   1297c:	aa05      	add	r2, sp, #20
   1297e:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   12980:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   12982:	f021 fd29 	bl	343d8 <at_params_string_get>
	if (err) {
   12986:	4604      	mov	r4, r0
   12988:	2800      	cmp	r0, #0
   1298a:	d1ce      	bne.n	1292a <at_handler+0x27a>
	tmp_buf[len] = '\0';
   1298c:	9b03      	ldr	r3, [sp, #12]
   1298e:	aa0c      	add	r2, sp, #48	; 0x30
   12990:	4413      	add	r3, r2
   12992:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   12996:	4601      	mov	r1, r0
   12998:	2202      	movs	r2, #2
   1299a:	a805      	add	r0, sp, #20
   1299c:	f01b fdb4 	bl	2e508 <strtoul>
	if (idx > 15) {
   129a0:	b2c3      	uxtb	r3, r0
   129a2:	2b0f      	cmp	r3, #15
   129a4:	d8aa      	bhi.n	128fc <at_handler+0x24c>
	idx += 1;
   129a6:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   129a8:	b2c0      	uxtb	r0, r0
   129aa:	ee07 0a90 	vmov	s15, r0
   129ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   129b2:	ee67 7a88 	vmul.f32	s15, s15, s16
   129b6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   129ba:	e7b6      	b.n	1292a <at_handler+0x27a>
		multiplier = edrx_lookup_nbiot[idx];
   129bc:	4b05      	ldr	r3, [pc, #20]	; (129d4 <at_handler+0x324>)
   129be:	e7ce      	b.n	1295e <at_handler+0x2ae>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   129c0:	4805      	ldr	r0, [pc, #20]	; (129d8 <at_handler+0x328>)
   129c2:	e7d8      	b.n	12976 <at_handler+0x2c6>
   129c4:	f3af 8000 	nop.w
   129c8:	47ae147b 	.word	0x47ae147b
   129cc:	40247ae1 	.word	0x40247ae1
   129d0:	00036ac4 	.word	0x00036ac4
   129d4:	00036ae4 	.word	0x00036ae4
   129d8:	40a3d70a 	.word	0x40a3d70a
   129dc:	00000000 	.word	0x00000000

000129e0 <ceil>:
   129e0:	ec51 0b10 	vmov	r0, r1, d0
   129e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   129ea:	460c      	mov	r4, r1
   129ec:	ee10 6a10 	vmov	r6, s0
   129f0:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   129f4:	2d13      	cmp	r5, #19
   129f6:	dc32      	bgt.n	12a5e <ceil+0x7e>
   129f8:	2d00      	cmp	r5, #0
   129fa:	db1e      	blt.n	12a3a <ceil+0x5a>
   129fc:	4f36      	ldr	r7, [pc, #216]	; (12ad8 <ceil+0xf8>)
   129fe:	412f      	asrs	r7, r5
   12a00:	ea07 0301 	and.w	r3, r7, r1
   12a04:	4303      	orrs	r3, r0
   12a06:	d02f      	beq.n	12a68 <ceil+0x88>
   12a08:	a331      	add	r3, pc, #196	; (adr r3, 12ad0 <ceil+0xf0>)
   12a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a0e:	f7fa f997 	bl	cd40 <__adddf3>
   12a12:	2200      	movs	r2, #0
   12a14:	2300      	movs	r3, #0
   12a16:	f7fa fdd9 	bl	d5cc <__aeabi_dcmpgt>
   12a1a:	b148      	cbz	r0, 12a30 <ceil+0x50>
   12a1c:	2c00      	cmp	r4, #0
   12a1e:	dd04      	ble.n	12a2a <ceil+0x4a>
   12a20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12a24:	fa43 f505 	asr.w	r5, r3, r5
   12a28:	442c      	add	r4, r5
   12a2a:	ea24 0407 	bic.w	r4, r4, r7
   12a2e:	2600      	movs	r6, #0
   12a30:	4623      	mov	r3, r4
   12a32:	4632      	mov	r2, r6
   12a34:	ec43 2b10 	vmov	d0, r2, r3
   12a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a3a:	a325      	add	r3, pc, #148	; (adr r3, 12ad0 <ceil+0xf0>)
   12a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a40:	f7fa f97e 	bl	cd40 <__adddf3>
   12a44:	2200      	movs	r2, #0
   12a46:	2300      	movs	r3, #0
   12a48:	f7fa fdc0 	bl	d5cc <__aeabi_dcmpgt>
   12a4c:	2800      	cmp	r0, #0
   12a4e:	d0ef      	beq.n	12a30 <ceil+0x50>
   12a50:	2c00      	cmp	r4, #0
   12a52:	db39      	blt.n	12ac8 <ceil+0xe8>
   12a54:	4326      	orrs	r6, r4
   12a56:	d033      	beq.n	12ac0 <ceil+0xe0>
   12a58:	2600      	movs	r6, #0
   12a5a:	4c20      	ldr	r4, [pc, #128]	; (12adc <ceil+0xfc>)
   12a5c:	e7e8      	b.n	12a30 <ceil+0x50>
   12a5e:	2d33      	cmp	r5, #51	; 0x33
   12a60:	dd05      	ble.n	12a6e <ceil+0x8e>
   12a62:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12a66:	d023      	beq.n	12ab0 <ceil+0xd0>
   12a68:	ec41 0b10 	vmov	d0, r0, r1
   12a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   12a72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12a76:	40df      	lsrs	r7, r3
   12a78:	4207      	tst	r7, r0
   12a7a:	d0f5      	beq.n	12a68 <ceil+0x88>
   12a7c:	a314      	add	r3, pc, #80	; (adr r3, 12ad0 <ceil+0xf0>)
   12a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a82:	f7fa f95d 	bl	cd40 <__adddf3>
   12a86:	2200      	movs	r2, #0
   12a88:	2300      	movs	r3, #0
   12a8a:	f7fa fd9f 	bl	d5cc <__aeabi_dcmpgt>
   12a8e:	2800      	cmp	r0, #0
   12a90:	d0ce      	beq.n	12a30 <ceil+0x50>
   12a92:	2c00      	cmp	r4, #0
   12a94:	dd09      	ble.n	12aaa <ceil+0xca>
   12a96:	2d14      	cmp	r5, #20
   12a98:	d014      	beq.n	12ac4 <ceil+0xe4>
   12a9a:	2301      	movs	r3, #1
   12a9c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   12aa0:	fa03 f505 	lsl.w	r5, r3, r5
   12aa4:	19ae      	adds	r6, r5, r6
   12aa6:	bf28      	it	cs
   12aa8:	18e4      	addcs	r4, r4, r3
   12aaa:	ea26 0607 	bic.w	r6, r6, r7
   12aae:	e7bf      	b.n	12a30 <ceil+0x50>
   12ab0:	ee10 2a10 	vmov	r2, s0
   12ab4:	460b      	mov	r3, r1
   12ab6:	f7fa f943 	bl	cd40 <__adddf3>
   12aba:	ec41 0b10 	vmov	d0, r0, r1
   12abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ac0:	4634      	mov	r4, r6
   12ac2:	e7b5      	b.n	12a30 <ceil+0x50>
   12ac4:	3401      	adds	r4, #1
   12ac6:	e7f0      	b.n	12aaa <ceil+0xca>
   12ac8:	2600      	movs	r6, #0
   12aca:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   12ace:	e7af      	b.n	12a30 <ceil+0x50>
   12ad0:	8800759c 	.word	0x8800759c
   12ad4:	7e37e43c 	.word	0x7e37e43c
   12ad8:	000fffff 	.word	0x000fffff
   12adc:	3ff00000 	.word	0x3ff00000

00012ae0 <floor>:
   12ae0:	ec51 0b10 	vmov	r0, r1, d0
   12ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ae6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   12aea:	460c      	mov	r4, r1
   12aec:	ee10 6a10 	vmov	r6, s0
   12af0:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   12af4:	2d13      	cmp	r5, #19
   12af6:	dc30      	bgt.n	12b5a <floor+0x7a>
   12af8:	2d00      	cmp	r5, #0
   12afa:	db1e      	blt.n	12b3a <floor+0x5a>
   12afc:	4f38      	ldr	r7, [pc, #224]	; (12be0 <floor+0x100>)
   12afe:	412f      	asrs	r7, r5
   12b00:	ea07 0301 	and.w	r3, r7, r1
   12b04:	4303      	orrs	r3, r0
   12b06:	d02d      	beq.n	12b64 <floor+0x84>
   12b08:	a333      	add	r3, pc, #204	; (adr r3, 12bd8 <floor+0xf8>)
   12b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b0e:	f7fa f917 	bl	cd40 <__adddf3>
   12b12:	2200      	movs	r2, #0
   12b14:	2300      	movs	r3, #0
   12b16:	f7fa fd59 	bl	d5cc <__aeabi_dcmpgt>
   12b1a:	b148      	cbz	r0, 12b30 <floor+0x50>
   12b1c:	2c00      	cmp	r4, #0
   12b1e:	da04      	bge.n	12b2a <floor+0x4a>
   12b20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12b24:	fa43 f505 	asr.w	r5, r3, r5
   12b28:	442c      	add	r4, r5
   12b2a:	ea24 0407 	bic.w	r4, r4, r7
   12b2e:	2600      	movs	r6, #0
   12b30:	4623      	mov	r3, r4
   12b32:	4632      	mov	r2, r6
   12b34:	ec43 2b10 	vmov	d0, r2, r3
   12b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b3a:	a327      	add	r3, pc, #156	; (adr r3, 12bd8 <floor+0xf8>)
   12b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b40:	f7fa f8fe 	bl	cd40 <__adddf3>
   12b44:	2200      	movs	r2, #0
   12b46:	2300      	movs	r3, #0
   12b48:	f7fa fd40 	bl	d5cc <__aeabi_dcmpgt>
   12b4c:	2800      	cmp	r0, #0
   12b4e:	d0ef      	beq.n	12b30 <floor+0x50>
   12b50:	2c00      	cmp	r4, #0
   12b52:	db29      	blt.n	12ba8 <floor+0xc8>
   12b54:	2600      	movs	r6, #0
   12b56:	4634      	mov	r4, r6
   12b58:	e7ea      	b.n	12b30 <floor+0x50>
   12b5a:	2d33      	cmp	r5, #51	; 0x33
   12b5c:	dd05      	ble.n	12b6a <floor+0x8a>
   12b5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12b62:	d019      	beq.n	12b98 <floor+0xb8>
   12b64:	ec41 0b10 	vmov	d0, r0, r1
   12b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b6a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   12b6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12b72:	40df      	lsrs	r7, r3
   12b74:	4207      	tst	r7, r0
   12b76:	d0f5      	beq.n	12b64 <floor+0x84>
   12b78:	a317      	add	r3, pc, #92	; (adr r3, 12bd8 <floor+0xf8>)
   12b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b7e:	f7fa f8df 	bl	cd40 <__adddf3>
   12b82:	2200      	movs	r2, #0
   12b84:	2300      	movs	r3, #0
   12b86:	f7fa fd21 	bl	d5cc <__aeabi_dcmpgt>
   12b8a:	2800      	cmp	r0, #0
   12b8c:	d0d0      	beq.n	12b30 <floor+0x50>
   12b8e:	2c00      	cmp	r4, #0
   12b90:	db13      	blt.n	12bba <floor+0xda>
   12b92:	ea26 0607 	bic.w	r6, r6, r7
   12b96:	e7cb      	b.n	12b30 <floor+0x50>
   12b98:	ee10 2a10 	vmov	r2, s0
   12b9c:	460b      	mov	r3, r1
   12b9e:	f7fa f8cf 	bl	cd40 <__adddf3>
   12ba2:	ec41 0b10 	vmov	d0, r0, r1
   12ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ba8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   12bac:	4a0d      	ldr	r2, [pc, #52]	; (12be4 <floor+0x104>)
   12bae:	4333      	orrs	r3, r6
   12bb0:	2600      	movs	r6, #0
   12bb2:	42b3      	cmp	r3, r6
   12bb4:	bf18      	it	ne
   12bb6:	4614      	movne	r4, r2
   12bb8:	e7ba      	b.n	12b30 <floor+0x50>
   12bba:	2d14      	cmp	r5, #20
   12bbc:	d008      	beq.n	12bd0 <floor+0xf0>
   12bbe:	2301      	movs	r3, #1
   12bc0:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   12bc4:	fa03 f505 	lsl.w	r5, r3, r5
   12bc8:	19ae      	adds	r6, r5, r6
   12bca:	bf28      	it	cs
   12bcc:	18e4      	addcs	r4, r4, r3
   12bce:	e7e0      	b.n	12b92 <floor+0xb2>
   12bd0:	3401      	adds	r4, #1
   12bd2:	e7de      	b.n	12b92 <floor+0xb2>
   12bd4:	f3af 8000 	nop.w
   12bd8:	8800759c 	.word	0x8800759c
   12bdc:	7e37e43c 	.word	0x7e37e43c
   12be0:	000fffff 	.word	0x000fffff
   12be4:	bff00000 	.word	0xbff00000

00012be8 <pow>:
   12be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bea:	ed2d 8b02 	vpush	{d8}
   12bee:	ec57 6b10 	vmov	r6, r7, d0
   12bf2:	ec55 4b11 	vmov	r4, r5, d1
   12bf6:	f000 f8c7 	bl	12d88 <__ieee754_pow>
   12bfa:	4b61      	ldr	r3, [pc, #388]	; (12d80 <pow+0x198>)
   12bfc:	eeb0 8a40 	vmov.f32	s16, s0
   12c00:	eef0 8a60 	vmov.f32	s17, s1
   12c04:	f993 3000 	ldrsb.w	r3, [r3]
   12c08:	3301      	adds	r3, #1
   12c0a:	d02a      	beq.n	12c62 <pow+0x7a>
   12c0c:	4622      	mov	r2, r4
   12c0e:	462b      	mov	r3, r5
   12c10:	4620      	mov	r0, r4
   12c12:	4629      	mov	r1, r5
   12c14:	f7ff f8b0 	bl	11d78 <__aeabi_dcmpun>
   12c18:	bb18      	cbnz	r0, 12c62 <pow+0x7a>
   12c1a:	4632      	mov	r2, r6
   12c1c:	463b      	mov	r3, r7
   12c1e:	4630      	mov	r0, r6
   12c20:	4639      	mov	r1, r7
   12c22:	f7ff f8a9 	bl	11d78 <__aeabi_dcmpun>
   12c26:	2800      	cmp	r0, #0
   12c28:	d144      	bne.n	12cb4 <pow+0xcc>
   12c2a:	2200      	movs	r2, #0
   12c2c:	2300      	movs	r3, #0
   12c2e:	4630      	mov	r0, r6
   12c30:	4639      	mov	r1, r7
   12c32:	f7fa fca3 	bl	d57c <__aeabi_dcmpeq>
   12c36:	b1d8      	cbz	r0, 12c70 <pow+0x88>
   12c38:	2200      	movs	r2, #0
   12c3a:	2300      	movs	r3, #0
   12c3c:	4620      	mov	r0, r4
   12c3e:	4629      	mov	r1, r5
   12c40:	f7fa fc9c 	bl	d57c <__aeabi_dcmpeq>
   12c44:	2800      	cmp	r0, #0
   12c46:	d13d      	bne.n	12cc4 <pow+0xdc>
   12c48:	ec45 4b10 	vmov	d0, r4, r5
   12c4c:	f01a fdd8 	bl	2d800 <finite>
   12c50:	b138      	cbz	r0, 12c62 <pow+0x7a>
   12c52:	4620      	mov	r0, r4
   12c54:	4629      	mov	r1, r5
   12c56:	2200      	movs	r2, #0
   12c58:	2300      	movs	r3, #0
   12c5a:	f7fa fc99 	bl	d590 <__aeabi_dcmplt>
   12c5e:	2800      	cmp	r0, #0
   12c60:	d15b      	bne.n	12d1a <pow+0x132>
   12c62:	eeb0 0a48 	vmov.f32	s0, s16
   12c66:	eef0 0a68 	vmov.f32	s1, s17
   12c6a:	ecbd 8b02 	vpop	{d8}
   12c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c70:	eeb0 0a48 	vmov.f32	s0, s16
   12c74:	eef0 0a68 	vmov.f32	s1, s17
   12c78:	f01a fdc2 	bl	2d800 <finite>
   12c7c:	b358      	cbz	r0, 12cd6 <pow+0xee>
   12c7e:	2200      	movs	r2, #0
   12c80:	2300      	movs	r3, #0
   12c82:	ec51 0b18 	vmov	r0, r1, d8
   12c86:	f7fa fc79 	bl	d57c <__aeabi_dcmpeq>
   12c8a:	2800      	cmp	r0, #0
   12c8c:	d0e9      	beq.n	12c62 <pow+0x7a>
   12c8e:	ec47 6b10 	vmov	d0, r6, r7
   12c92:	f01a fdb5 	bl	2d800 <finite>
   12c96:	2800      	cmp	r0, #0
   12c98:	d0e3      	beq.n	12c62 <pow+0x7a>
   12c9a:	ec45 4b10 	vmov	d0, r4, r5
   12c9e:	f01a fdaf 	bl	2d800 <finite>
   12ca2:	2800      	cmp	r0, #0
   12ca4:	d0dd      	beq.n	12c62 <pow+0x7a>
   12ca6:	f01e fa05 	bl	310b4 <__errno>
   12caa:	2322      	movs	r3, #34	; 0x22
   12cac:	ed9f 8b2c 	vldr	d8, [pc, #176]	; 12d60 <pow+0x178>
   12cb0:	6003      	str	r3, [r0, #0]
   12cb2:	e7d6      	b.n	12c62 <pow+0x7a>
   12cb4:	4620      	mov	r0, r4
   12cb6:	4629      	mov	r1, r5
   12cb8:	2200      	movs	r2, #0
   12cba:	2300      	movs	r3, #0
   12cbc:	f7fa fc5e 	bl	d57c <__aeabi_dcmpeq>
   12cc0:	2800      	cmp	r0, #0
   12cc2:	d0ce      	beq.n	12c62 <pow+0x7a>
   12cc4:	ed9f 8b28 	vldr	d8, [pc, #160]	; 12d68 <pow+0x180>
   12cc8:	eeb0 0a48 	vmov.f32	s0, s16
   12ccc:	eef0 0a68 	vmov.f32	s1, s17
   12cd0:	ecbd 8b02 	vpop	{d8}
   12cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cd6:	ec47 6b10 	vmov	d0, r6, r7
   12cda:	f01a fd91 	bl	2d800 <finite>
   12cde:	2800      	cmp	r0, #0
   12ce0:	d0cd      	beq.n	12c7e <pow+0x96>
   12ce2:	ec45 4b10 	vmov	d0, r4, r5
   12ce6:	f01a fd8b 	bl	2d800 <finite>
   12cea:	2800      	cmp	r0, #0
   12cec:	d0c7      	beq.n	12c7e <pow+0x96>
   12cee:	ee18 0a10 	vmov	r0, s16
   12cf2:	ec53 2b18 	vmov	r2, r3, d8
   12cf6:	4619      	mov	r1, r3
   12cf8:	f7ff f83e 	bl	11d78 <__aeabi_dcmpun>
   12cfc:	bb18      	cbnz	r0, 12d46 <pow+0x15e>
   12cfe:	f01e f9d9 	bl	310b4 <__errno>
   12d02:	2322      	movs	r3, #34	; 0x22
   12d04:	2200      	movs	r2, #0
   12d06:	4639      	mov	r1, r7
   12d08:	6003      	str	r3, [r0, #0]
   12d0a:	2300      	movs	r3, #0
   12d0c:	4630      	mov	r0, r6
   12d0e:	f7fa fc3f 	bl	d590 <__aeabi_dcmplt>
   12d12:	b948      	cbnz	r0, 12d28 <pow+0x140>
   12d14:	ed9f 8b16 	vldr	d8, [pc, #88]	; 12d70 <pow+0x188>
   12d18:	e7a3      	b.n	12c62 <pow+0x7a>
   12d1a:	f01e f9cb 	bl	310b4 <__errno>
   12d1e:	2321      	movs	r3, #33	; 0x21
   12d20:	ed9f 8b15 	vldr	d8, [pc, #84]	; 12d78 <pow+0x190>
   12d24:	6003      	str	r3, [r0, #0]
   12d26:	e79c      	b.n	12c62 <pow+0x7a>
   12d28:	ec45 4b10 	vmov	d0, r4, r5
   12d2c:	f01a fd72 	bl	2d814 <rint>
   12d30:	4622      	mov	r2, r4
   12d32:	462b      	mov	r3, r5
   12d34:	ec51 0b10 	vmov	r0, r1, d0
   12d38:	f7fa fc20 	bl	d57c <__aeabi_dcmpeq>
   12d3c:	2800      	cmp	r0, #0
   12d3e:	d1e9      	bne.n	12d14 <pow+0x12c>
   12d40:	ed9f 8b0d 	vldr	d8, [pc, #52]	; 12d78 <pow+0x190>
   12d44:	e78d      	b.n	12c62 <pow+0x7a>
   12d46:	f01e f9b5 	bl	310b4 <__errno>
   12d4a:	2121      	movs	r1, #33	; 0x21
   12d4c:	2200      	movs	r2, #0
   12d4e:	2300      	movs	r3, #0
   12d50:	6001      	str	r1, [r0, #0]
   12d52:	4610      	mov	r0, r2
   12d54:	4619      	mov	r1, r3
   12d56:	f7fa fad3 	bl	d300 <__aeabi_ddiv>
   12d5a:	ec41 0b18 	vmov	d8, r0, r1
   12d5e:	e780      	b.n	12c62 <pow+0x7a>
	...
   12d6c:	3ff00000 	.word	0x3ff00000
   12d70:	00000000 	.word	0x00000000
   12d74:	7ff00000 	.word	0x7ff00000
   12d78:	00000000 	.word	0x00000000
   12d7c:	fff00000 	.word	0xfff00000
   12d80:	200204a0 	.word	0x200204a0
   12d84:	00000000 	.word	0x00000000

00012d88 <__ieee754_pow>:
   12d88:	ec51 0b11 	vmov	r0, r1, d1
   12d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d90:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   12d94:	b093      	sub	sp, #76	; 0x4c
   12d96:	ea58 0400 	orrs.w	r4, r8, r0
   12d9a:	d020      	beq.n	12dde <__ieee754_pow+0x56>
   12d9c:	4c5c      	ldr	r4, [pc, #368]	; (12f10 <__ieee754_pow+0x188>)
   12d9e:	ee10 aa10 	vmov	sl, s0
   12da2:	ec53 2b10 	vmov	r2, r3, d0
   12da6:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   12daa:	461f      	mov	r7, r3
   12dac:	42a6      	cmp	r6, r4
   12dae:	dc11      	bgt.n	12dd4 <__ieee754_pow+0x4c>
   12db0:	4689      	mov	r9, r1
   12db2:	ee11 ca10 	vmov	ip, s2
   12db6:	d106      	bne.n	12dc6 <__ieee754_pow+0x3e>
   12db8:	b12a      	cbz	r2, 12dc6 <__ieee754_pow+0x3e>
   12dba:	4856      	ldr	r0, [pc, #344]	; (12f14 <__ieee754_pow+0x18c>)
   12dbc:	b013      	add	sp, #76	; 0x4c
   12dbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc2:	f000 bd61 	b.w	13888 <nan>
   12dc6:	4c52      	ldr	r4, [pc, #328]	; (12f10 <__ieee754_pow+0x188>)
   12dc8:	45a0      	cmp	r8, r4
   12dca:	dc03      	bgt.n	12dd4 <__ieee754_pow+0x4c>
   12dcc:	d10e      	bne.n	12dec <__ieee754_pow+0x64>
   12dce:	f1bc 0f00 	cmp.w	ip, #0
   12dd2:	d00b      	beq.n	12dec <__ieee754_pow+0x64>
   12dd4:	4b50      	ldr	r3, [pc, #320]	; (12f18 <__ieee754_pow+0x190>)
   12dd6:	4433      	add	r3, r6
   12dd8:	ea53 030a 	orrs.w	r3, r3, sl
   12ddc:	d1ed      	bne.n	12dba <__ieee754_pow+0x32>
   12dde:	2000      	movs	r0, #0
   12de0:	494e      	ldr	r1, [pc, #312]	; (12f1c <__ieee754_pow+0x194>)
   12de2:	ec41 0b10 	vmov	d0, r0, r1
   12de6:	b013      	add	sp, #76	; 0x4c
   12de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dec:	2f00      	cmp	r7, #0
   12dee:	4614      	mov	r4, r2
   12df0:	461d      	mov	r5, r3
   12df2:	e9cd 0100 	strd	r0, r1, [sp]
   12df6:	db44      	blt.n	12e82 <__ieee754_pow+0xfa>
   12df8:	f04f 0b00 	mov.w	fp, #0
   12dfc:	f1bc 0f00 	cmp.w	ip, #0
   12e00:	d10f      	bne.n	12e22 <__ieee754_pow+0x9a>
   12e02:	4b43      	ldr	r3, [pc, #268]	; (12f10 <__ieee754_pow+0x188>)
   12e04:	4598      	cmp	r8, r3
   12e06:	d057      	beq.n	12eb8 <__ieee754_pow+0x130>
   12e08:	4b44      	ldr	r3, [pc, #272]	; (12f1c <__ieee754_pow+0x194>)
   12e0a:	4598      	cmp	r8, r3
   12e0c:	d067      	beq.n	12ede <__ieee754_pow+0x156>
   12e0e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   12e12:	f000 84a9 	beq.w	13768 <__ieee754_pow+0x9e0>
   12e16:	4b42      	ldr	r3, [pc, #264]	; (12f20 <__ieee754_pow+0x198>)
   12e18:	4599      	cmp	r9, r3
   12e1a:	d102      	bne.n	12e22 <__ieee754_pow+0x9a>
   12e1c:	2f00      	cmp	r7, #0
   12e1e:	f280 84f1 	bge.w	13804 <__ieee754_pow+0xa7c>
   12e22:	ec45 4b10 	vmov	d0, r4, r5
   12e26:	f018 ff4f 	bl	2bcc8 <fabs>
   12e2a:	ec51 0b10 	vmov	r0, r1, d0
   12e2e:	f1ba 0f00 	cmp.w	sl, #0
   12e32:	d108      	bne.n	12e46 <__ieee754_pow+0xbe>
   12e34:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   12e38:	4a38      	ldr	r2, [pc, #224]	; (12f1c <__ieee754_pow+0x194>)
   12e3a:	4293      	cmp	r3, r2
   12e3c:	f000 8395 	beq.w	1356a <__ieee754_pow+0x7e2>
   12e40:	2e00      	cmp	r6, #0
   12e42:	f000 8392 	beq.w	1356a <__ieee754_pow+0x7e2>
   12e46:	0ffb      	lsrs	r3, r7, #31
   12e48:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   12e4c:	ea5b 030a 	orrs.w	r3, fp, sl
   12e50:	d04c      	beq.n	12eec <__ieee754_pow+0x164>
   12e52:	4b34      	ldr	r3, [pc, #208]	; (12f24 <__ieee754_pow+0x19c>)
   12e54:	4598      	cmp	r8, r3
   12e56:	dd6b      	ble.n	12f30 <__ieee754_pow+0x1a8>
   12e58:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   12e5c:	4598      	cmp	r8, r3
   12e5e:	f340 8411 	ble.w	13684 <__ieee754_pow+0x8fc>
   12e62:	4b31      	ldr	r3, [pc, #196]	; (12f28 <__ieee754_pow+0x1a0>)
   12e64:	429e      	cmp	r6, r3
   12e66:	f340 8395 	ble.w	13594 <__ieee754_pow+0x80c>
   12e6a:	f1b9 0f00 	cmp.w	r9, #0
   12e6e:	f340 8395 	ble.w	1359c <__ieee754_pow+0x814>
   12e72:	a325      	add	r3, pc, #148	; (adr r3, 12f08 <__ieee754_pow+0x180>)
   12e74:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e78:	4610      	mov	r0, r2
   12e7a:	4619      	mov	r1, r3
   12e7c:	f7fa f916 	bl	d0ac <__aeabi_dmul>
   12e80:	e7af      	b.n	12de2 <__ieee754_pow+0x5a>
   12e82:	4b2a      	ldr	r3, [pc, #168]	; (12f2c <__ieee754_pow+0x1a4>)
   12e84:	4598      	cmp	r8, r3
   12e86:	dc27      	bgt.n	12ed8 <__ieee754_pow+0x150>
   12e88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   12e8c:	4598      	cmp	r8, r3
   12e8e:	ddb3      	ble.n	12df8 <__ieee754_pow+0x70>
   12e90:	ea4f 5328 	mov.w	r3, r8, asr #20
   12e94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   12e98:	2b14      	cmp	r3, #20
   12e9a:	f340 846d 	ble.w	13778 <__ieee754_pow+0x9f0>
   12e9e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   12ea2:	fa2c f203 	lsr.w	r2, ip, r3
   12ea6:	fa02 f303 	lsl.w	r3, r2, r3
   12eaa:	4563      	cmp	r3, ip
   12eac:	d1a4      	bne.n	12df8 <__ieee754_pow+0x70>
   12eae:	f002 0201 	and.w	r2, r2, #1
   12eb2:	f1c2 0b02 	rsb	fp, r2, #2
   12eb6:	e7a1      	b.n	12dfc <__ieee754_pow+0x74>
   12eb8:	4b17      	ldr	r3, [pc, #92]	; (12f18 <__ieee754_pow+0x190>)
   12eba:	4433      	add	r3, r6
   12ebc:	ea53 030a 	orrs.w	r3, r3, sl
   12ec0:	d08d      	beq.n	12dde <__ieee754_pow+0x56>
   12ec2:	4b19      	ldr	r3, [pc, #100]	; (12f28 <__ieee754_pow+0x1a0>)
   12ec4:	429e      	cmp	r6, r3
   12ec6:	f340 8394 	ble.w	135f2 <__ieee754_pow+0x86a>
   12eca:	f1b9 0f00 	cmp.w	r9, #0
   12ece:	f2c0 8365 	blt.w	1359c <__ieee754_pow+0x814>
   12ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
   12ed6:	e784      	b.n	12de2 <__ieee754_pow+0x5a>
   12ed8:	f04f 0b02 	mov.w	fp, #2
   12edc:	e78e      	b.n	12dfc <__ieee754_pow+0x74>
   12ede:	f1b9 0f00 	cmp.w	r9, #0
   12ee2:	f2c0 8439 	blt.w	13758 <__ieee754_pow+0x9d0>
   12ee6:	4620      	mov	r0, r4
   12ee8:	4629      	mov	r1, r5
   12eea:	e77a      	b.n	12de2 <__ieee754_pow+0x5a>
   12eec:	4622      	mov	r2, r4
   12eee:	462b      	mov	r3, r5
   12ef0:	4610      	mov	r0, r2
   12ef2:	4619      	mov	r1, r3
   12ef4:	f7f9 ff22 	bl	cd3c <__aeabi_dsub>
   12ef8:	4602      	mov	r2, r0
   12efa:	460b      	mov	r3, r1
   12efc:	f7fa fa00 	bl	d300 <__aeabi_ddiv>
   12f00:	e76f      	b.n	12de2 <__ieee754_pow+0x5a>
   12f02:	bf00      	nop
   12f04:	f3af 8000 	nop.w
   12f08:	8800759c 	.word	0x8800759c
   12f0c:	7e37e43c 	.word	0x7e37e43c
   12f10:	7ff00000 	.word	0x7ff00000
   12f14:	000360fc 	.word	0x000360fc
   12f18:	c0100000 	.word	0xc0100000
   12f1c:	3ff00000 	.word	0x3ff00000
   12f20:	3fe00000 	.word	0x3fe00000
   12f24:	41e00000 	.word	0x41e00000
   12f28:	3fefffff 	.word	0x3fefffff
   12f2c:	433fffff 	.word	0x433fffff
   12f30:	4bd3      	ldr	r3, [pc, #844]	; (13280 <__ieee754_pow+0x4f8>)
   12f32:	403b      	ands	r3, r7
   12f34:	2b00      	cmp	r3, #0
   12f36:	f040 840c 	bne.w	13752 <__ieee754_pow+0x9ca>
   12f3a:	2200      	movs	r2, #0
   12f3c:	4bd1      	ldr	r3, [pc, #836]	; (13284 <__ieee754_pow+0x4fc>)
   12f3e:	f7fa f8b5 	bl	d0ac <__aeabi_dmul>
   12f42:	f06f 0534 	mvn.w	r5, #52	; 0x34
   12f46:	460e      	mov	r6, r1
   12f48:	1533      	asrs	r3, r6, #20
   12f4a:	4acf      	ldr	r2, [pc, #828]	; (13288 <__ieee754_pow+0x500>)
   12f4c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   12f50:	4cce      	ldr	r4, [pc, #824]	; (1328c <__ieee754_pow+0x504>)
   12f52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   12f56:	4296      	cmp	r6, r2
   12f58:	ea44 0406 	orr.w	r4, r4, r6
   12f5c:	441d      	add	r5, r3
   12f5e:	950b      	str	r5, [sp, #44]	; 0x2c
   12f60:	f340 83eb 	ble.w	1373a <__ieee754_pow+0x9b2>
   12f64:	4bca      	ldr	r3, [pc, #808]	; (13290 <__ieee754_pow+0x508>)
   12f66:	429e      	cmp	r6, r3
   12f68:	f340 842b 	ble.w	137c2 <__ieee754_pow+0xa3a>
   12f6c:	3501      	adds	r5, #1
   12f6e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   12f72:	ed9f 7bad 	vldr	d7, [pc, #692]	; 13228 <__ieee754_pow+0x4a0>
   12f76:	950b      	str	r5, [sp, #44]	; 0x2c
   12f78:	2500      	movs	r5, #0
   12f7a:	ed8d 7b08 	vstr	d7, [sp, #32]
   12f7e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 13230 <__ieee754_pow+0x4a8>
   12f82:	ed8d 7b06 	vstr	d7, [sp, #24]
   12f86:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 13228 <__ieee754_pow+0x4a0>
   12f8a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   12f8e:	4680      	mov	r8, r0
   12f90:	46a1      	mov	r9, r4
   12f92:	4621      	mov	r1, r4
   12f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12f98:	f7f9 fed0 	bl	cd3c <__aeabi_dsub>
   12f9c:	4606      	mov	r6, r0
   12f9e:	460f      	mov	r7, r1
   12fa0:	4640      	mov	r0, r8
   12fa2:	4621      	mov	r1, r4
   12fa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12fa8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
   12fac:	f7f9 fec8 	bl	cd40 <__adddf3>
   12fb0:	4602      	mov	r2, r0
   12fb2:	460b      	mov	r3, r1
   12fb4:	2000      	movs	r0, #0
   12fb6:	49b5      	ldr	r1, [pc, #724]	; (1328c <__ieee754_pow+0x504>)
   12fb8:	f7fa f9a2 	bl	d300 <__aeabi_ddiv>
   12fbc:	460a      	mov	r2, r1
   12fbe:	4601      	mov	r1, r0
   12fc0:	4613      	mov	r3, r2
   12fc2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
   12fc6:	4602      	mov	r2, r0
   12fc8:	4639      	mov	r1, r7
   12fca:	4630      	mov	r0, r6
   12fcc:	f7fa f86e 	bl	d0ac <__aeabi_dmul>
   12fd0:	4680      	mov	r8, r0
   12fd2:	1063      	asrs	r3, r4, #1
   12fd4:	4689      	mov	r9, r1
   12fd6:	2400      	movs	r4, #0
   12fd8:	2000      	movs	r0, #0
   12fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   12fde:	4602      	mov	r2, r0
   12fe0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   12fe4:	e9cd 8902 	strd	r8, r9, [sp, #8]
   12fe8:	9402      	str	r4, [sp, #8]
   12fea:	1959      	adds	r1, r3, r5
   12fec:	4604      	mov	r4, r0
   12fee:	460d      	mov	r5, r1
   12ff0:	460b      	mov	r3, r1
   12ff2:	e9cd 8904 	strd	r8, r9, [sp, #16]
   12ff6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   12ffa:	4640      	mov	r0, r8
   12ffc:	4649      	mov	r1, r9
   12ffe:	f7fa f855 	bl	d0ac <__aeabi_dmul>
   13002:	4602      	mov	r2, r0
   13004:	460b      	mov	r3, r1
   13006:	4630      	mov	r0, r6
   13008:	4639      	mov	r1, r7
   1300a:	f7f9 fe97 	bl	cd3c <__aeabi_dsub>
   1300e:	4606      	mov	r6, r0
   13010:	460f      	mov	r7, r1
   13012:	4620      	mov	r0, r4
   13014:	4629      	mov	r1, r5
   13016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1301a:	f7f9 fe8f 	bl	cd3c <__aeabi_dsub>
   1301e:	4602      	mov	r2, r0
   13020:	460b      	mov	r3, r1
   13022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   13026:	f7f9 fe89 	bl	cd3c <__aeabi_dsub>
   1302a:	4642      	mov	r2, r8
   1302c:	464b      	mov	r3, r9
   1302e:	f7fa f83d 	bl	d0ac <__aeabi_dmul>
   13032:	4602      	mov	r2, r0
   13034:	460b      	mov	r3, r1
   13036:	4630      	mov	r0, r6
   13038:	4639      	mov	r1, r7
   1303a:	f7f9 fe7f 	bl	cd3c <__aeabi_dsub>
   1303e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   13042:	f7fa f833 	bl	d0ac <__aeabi_dmul>
   13046:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1304a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1304e:	4622      	mov	r2, r4
   13050:	462b      	mov	r3, r5
   13052:	4620      	mov	r0, r4
   13054:	4629      	mov	r1, r5
   13056:	f7fa f829 	bl	d0ac <__aeabi_dmul>
   1305a:	4604      	mov	r4, r0
   1305c:	460d      	mov	r5, r1
   1305e:	a376      	add	r3, pc, #472	; (adr r3, 13238 <__ieee754_pow+0x4b0>)
   13060:	e9d3 2300 	ldrd	r2, r3, [r3]
   13064:	f7fa f822 	bl	d0ac <__aeabi_dmul>
   13068:	a375      	add	r3, pc, #468	; (adr r3, 13240 <__ieee754_pow+0x4b8>)
   1306a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1306e:	f7f9 fe67 	bl	cd40 <__adddf3>
   13072:	4622      	mov	r2, r4
   13074:	462b      	mov	r3, r5
   13076:	f7fa f819 	bl	d0ac <__aeabi_dmul>
   1307a:	a373      	add	r3, pc, #460	; (adr r3, 13248 <__ieee754_pow+0x4c0>)
   1307c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13080:	f7f9 fe5e 	bl	cd40 <__adddf3>
   13084:	4622      	mov	r2, r4
   13086:	462b      	mov	r3, r5
   13088:	f7fa f810 	bl	d0ac <__aeabi_dmul>
   1308c:	a370      	add	r3, pc, #448	; (adr r3, 13250 <__ieee754_pow+0x4c8>)
   1308e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13092:	f7f9 fe55 	bl	cd40 <__adddf3>
   13096:	4622      	mov	r2, r4
   13098:	462b      	mov	r3, r5
   1309a:	f7fa f807 	bl	d0ac <__aeabi_dmul>
   1309e:	a36e      	add	r3, pc, #440	; (adr r3, 13258 <__ieee754_pow+0x4d0>)
   130a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   130a4:	f7f9 fe4c 	bl	cd40 <__adddf3>
   130a8:	4622      	mov	r2, r4
   130aa:	462b      	mov	r3, r5
   130ac:	f7f9 fffe 	bl	d0ac <__aeabi_dmul>
   130b0:	a36b      	add	r3, pc, #428	; (adr r3, 13260 <__ieee754_pow+0x4d8>)
   130b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   130b6:	f7f9 fe43 	bl	cd40 <__adddf3>
   130ba:	4606      	mov	r6, r0
   130bc:	460f      	mov	r7, r1
   130be:	4622      	mov	r2, r4
   130c0:	462b      	mov	r3, r5
   130c2:	4620      	mov	r0, r4
   130c4:	4629      	mov	r1, r5
   130c6:	f7f9 fff1 	bl	d0ac <__aeabi_dmul>
   130ca:	4602      	mov	r2, r0
   130cc:	460b      	mov	r3, r1
   130ce:	4630      	mov	r0, r6
   130d0:	4639      	mov	r1, r7
   130d2:	f7f9 ffeb 	bl	d0ac <__aeabi_dmul>
   130d6:	4642      	mov	r2, r8
   130d8:	4604      	mov	r4, r0
   130da:	460d      	mov	r5, r1
   130dc:	464b      	mov	r3, r9
   130de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   130e2:	f7f9 fe2d 	bl	cd40 <__adddf3>
   130e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   130ea:	f7f9 ffdf 	bl	d0ac <__aeabi_dmul>
   130ee:	4622      	mov	r2, r4
   130f0:	462b      	mov	r3, r5
   130f2:	f7f9 fe25 	bl	cd40 <__adddf3>
   130f6:	4642      	mov	r2, r8
   130f8:	4604      	mov	r4, r0
   130fa:	460d      	mov	r5, r1
   130fc:	464b      	mov	r3, r9
   130fe:	4640      	mov	r0, r8
   13100:	4649      	mov	r1, r9
   13102:	f7f9 ffd3 	bl	d0ac <__aeabi_dmul>
   13106:	2200      	movs	r2, #0
   13108:	4b62      	ldr	r3, [pc, #392]	; (13294 <__ieee754_pow+0x50c>)
   1310a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1310e:	f7f9 fe17 	bl	cd40 <__adddf3>
   13112:	4622      	mov	r2, r4
   13114:	462b      	mov	r3, r5
   13116:	f7f9 fe13 	bl	cd40 <__adddf3>
   1311a:	9802      	ldr	r0, [sp, #8]
   1311c:	460f      	mov	r7, r1
   1311e:	4649      	mov	r1, r9
   13120:	4606      	mov	r6, r0
   13122:	4640      	mov	r0, r8
   13124:	463b      	mov	r3, r7
   13126:	4632      	mov	r2, r6
   13128:	f7f9 ffc0 	bl	d0ac <__aeabi_dmul>
   1312c:	2200      	movs	r2, #0
   1312e:	4680      	mov	r8, r0
   13130:	4689      	mov	r9, r1
   13132:	4b58      	ldr	r3, [pc, #352]	; (13294 <__ieee754_pow+0x50c>)
   13134:	4630      	mov	r0, r6
   13136:	4639      	mov	r1, r7
   13138:	f7f9 fe00 	bl	cd3c <__aeabi_dsub>
   1313c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   13140:	f7f9 fdfc 	bl	cd3c <__aeabi_dsub>
   13144:	4602      	mov	r2, r0
   13146:	460b      	mov	r3, r1
   13148:	4620      	mov	r0, r4
   1314a:	4629      	mov	r1, r5
   1314c:	f7f9 fdf6 	bl	cd3c <__aeabi_dsub>
   13150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13154:	f7f9 ffaa 	bl	d0ac <__aeabi_dmul>
   13158:	4604      	mov	r4, r0
   1315a:	460d      	mov	r5, r1
   1315c:	4632      	mov	r2, r6
   1315e:	463b      	mov	r3, r7
   13160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13164:	f7f9 ffa2 	bl	d0ac <__aeabi_dmul>
   13168:	4602      	mov	r2, r0
   1316a:	460b      	mov	r3, r1
   1316c:	4620      	mov	r0, r4
   1316e:	4629      	mov	r1, r5
   13170:	f7f9 fde6 	bl	cd40 <__adddf3>
   13174:	4604      	mov	r4, r0
   13176:	460d      	mov	r5, r1
   13178:	4602      	mov	r2, r0
   1317a:	460b      	mov	r3, r1
   1317c:	4640      	mov	r0, r8
   1317e:	4649      	mov	r1, r9
   13180:	f7f9 fdde 	bl	cd40 <__adddf3>
   13184:	9802      	ldr	r0, [sp, #8]
   13186:	460f      	mov	r7, r1
   13188:	4606      	mov	r6, r0
   1318a:	a337      	add	r3, pc, #220	; (adr r3, 13268 <__ieee754_pow+0x4e0>)
   1318c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13190:	f7f9 ff8c 	bl	d0ac <__aeabi_dmul>
   13194:	4642      	mov	r2, r8
   13196:	464b      	mov	r3, r9
   13198:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1319c:	4630      	mov	r0, r6
   1319e:	4639      	mov	r1, r7
   131a0:	f7f9 fdcc 	bl	cd3c <__aeabi_dsub>
   131a4:	4602      	mov	r2, r0
   131a6:	460b      	mov	r3, r1
   131a8:	4620      	mov	r0, r4
   131aa:	4629      	mov	r1, r5
   131ac:	f7f9 fdc6 	bl	cd3c <__aeabi_dsub>
   131b0:	a32f      	add	r3, pc, #188	; (adr r3, 13270 <__ieee754_pow+0x4e8>)
   131b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   131b6:	f7f9 ff79 	bl	d0ac <__aeabi_dmul>
   131ba:	4604      	mov	r4, r0
   131bc:	460d      	mov	r5, r1
   131be:	4630      	mov	r0, r6
   131c0:	4639      	mov	r1, r7
   131c2:	a32d      	add	r3, pc, #180	; (adr r3, 13278 <__ieee754_pow+0x4f0>)
   131c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   131c8:	f7f9 ff70 	bl	d0ac <__aeabi_dmul>
   131cc:	4602      	mov	r2, r0
   131ce:	460b      	mov	r3, r1
   131d0:	4620      	mov	r0, r4
   131d2:	4629      	mov	r1, r5
   131d4:	f7f9 fdb4 	bl	cd40 <__adddf3>
   131d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   131dc:	f7f9 fdb0 	bl	cd40 <__adddf3>
   131e0:	4606      	mov	r6, r0
   131e2:	460f      	mov	r7, r1
   131e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   131e6:	f7f9 fef7 	bl	cfd8 <__aeabi_i2d>
   131ea:	4632      	mov	r2, r6
   131ec:	4680      	mov	r8, r0
   131ee:	4689      	mov	r9, r1
   131f0:	463b      	mov	r3, r7
   131f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   131f6:	f7f9 fda3 	bl	cd40 <__adddf3>
   131fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   131fe:	f7f9 fd9f 	bl	cd40 <__adddf3>
   13202:	4642      	mov	r2, r8
   13204:	464b      	mov	r3, r9
   13206:	f7f9 fd9b 	bl	cd40 <__adddf3>
   1320a:	9802      	ldr	r0, [sp, #8]
   1320c:	4642      	mov	r2, r8
   1320e:	464b      	mov	r3, r9
   13210:	4604      	mov	r4, r0
   13212:	460d      	mov	r5, r1
   13214:	f7f9 fd92 	bl	cd3c <__aeabi_dsub>
   13218:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1321c:	f7f9 fd8e 	bl	cd3c <__aeabi_dsub>
   13220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13224:	e038      	b.n	13298 <__ieee754_pow+0x510>
   13226:	bf00      	nop
	...
   13234:	3ff00000 	.word	0x3ff00000
   13238:	4a454eef 	.word	0x4a454eef
   1323c:	3fca7e28 	.word	0x3fca7e28
   13240:	93c9db65 	.word	0x93c9db65
   13244:	3fcd864a 	.word	0x3fcd864a
   13248:	a91d4101 	.word	0xa91d4101
   1324c:	3fd17460 	.word	0x3fd17460
   13250:	518f264d 	.word	0x518f264d
   13254:	3fd55555 	.word	0x3fd55555
   13258:	db6fabff 	.word	0xdb6fabff
   1325c:	3fdb6db6 	.word	0x3fdb6db6
   13260:	33333303 	.word	0x33333303
   13264:	3fe33333 	.word	0x3fe33333
   13268:	e0000000 	.word	0xe0000000
   1326c:	3feec709 	.word	0x3feec709
   13270:	dc3a03fd 	.word	0xdc3a03fd
   13274:	3feec709 	.word	0x3feec709
   13278:	145b01f5 	.word	0x145b01f5
   1327c:	be3e2fe0 	.word	0xbe3e2fe0
   13280:	7ff00000 	.word	0x7ff00000
   13284:	43400000 	.word	0x43400000
   13288:	0003988e 	.word	0x0003988e
   1328c:	3ff00000 	.word	0x3ff00000
   13290:	000bb679 	.word	0x000bb679
   13294:	40080000 	.word	0x40080000
   13298:	f7f9 fd50 	bl	cd3c <__aeabi_dsub>
   1329c:	460b      	mov	r3, r1
   1329e:	4602      	mov	r2, r0
   132a0:	4639      	mov	r1, r7
   132a2:	4630      	mov	r0, r6
   132a4:	f7f9 fd4a 	bl	cd3c <__aeabi_dsub>
   132a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   132ac:	ea53 030a 	orrs.w	r3, r3, sl
   132b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   132b4:	f040 8175 	bne.w	135a2 <__ieee754_pow+0x81a>
   132b8:	ed9f 7bd3 	vldr	d7, [pc, #844]	; 13608 <__ieee754_pow+0x880>
   132bc:	ed8d 7b04 	vstr	d7, [sp, #16]
   132c0:	e9dd ab00 	ldrd	sl, fp, [sp]
   132c4:	4652      	mov	r2, sl
   132c6:	465b      	mov	r3, fp
   132c8:	4650      	mov	r0, sl
   132ca:	4659      	mov	r1, fp
   132cc:	e9cd 2300 	strd	r2, r3, [sp]
   132d0:	2300      	movs	r3, #0
   132d2:	9300      	str	r3, [sp, #0]
   132d4:	e9dd 6700 	ldrd	r6, r7, [sp]
   132d8:	4632      	mov	r2, r6
   132da:	463b      	mov	r3, r7
   132dc:	f7f9 fd2e 	bl	cd3c <__aeabi_dsub>
   132e0:	4622      	mov	r2, r4
   132e2:	462b      	mov	r3, r5
   132e4:	f7f9 fee2 	bl	d0ac <__aeabi_dmul>
   132e8:	4680      	mov	r8, r0
   132ea:	4689      	mov	r9, r1
   132ec:	4652      	mov	r2, sl
   132ee:	465b      	mov	r3, fp
   132f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   132f4:	f7f9 feda 	bl	d0ac <__aeabi_dmul>
   132f8:	4602      	mov	r2, r0
   132fa:	460b      	mov	r3, r1
   132fc:	4640      	mov	r0, r8
   132fe:	4649      	mov	r1, r9
   13300:	f7f9 fd1e 	bl	cd40 <__adddf3>
   13304:	468b      	mov	fp, r1
   13306:	4682      	mov	sl, r0
   13308:	4632      	mov	r2, r6
   1330a:	463b      	mov	r3, r7
   1330c:	4620      	mov	r0, r4
   1330e:	4629      	mov	r1, r5
   13310:	e9cd ab02 	strd	sl, fp, [sp, #8]
   13314:	f7f9 feca 	bl	d0ac <__aeabi_dmul>
   13318:	460b      	mov	r3, r1
   1331a:	4602      	mov	r2, r0
   1331c:	4680      	mov	r8, r0
   1331e:	4689      	mov	r9, r1
   13320:	4650      	mov	r0, sl
   13322:	4659      	mov	r1, fp
   13324:	f7f9 fd0c 	bl	cd40 <__adddf3>
   13328:	4bcf      	ldr	r3, [pc, #828]	; (13668 <__ieee754_pow+0x8e0>)
   1332a:	4604      	mov	r4, r0
   1332c:	460d      	mov	r5, r1
   1332e:	4299      	cmp	r1, r3
   13330:	468b      	mov	fp, r1
   13332:	f340 813b 	ble.w	135ac <__ieee754_pow+0x824>
   13336:	4bcd      	ldr	r3, [pc, #820]	; (1366c <__ieee754_pow+0x8e4>)
   13338:	440b      	add	r3, r1
   1333a:	4303      	orrs	r3, r0
   1333c:	f040 8233 	bne.w	137a6 <__ieee754_pow+0xa1e>
   13340:	a3b3      	add	r3, pc, #716	; (adr r3, 13610 <__ieee754_pow+0x888>)
   13342:	e9d3 2300 	ldrd	r2, r3, [r3]
   13346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1334a:	f7f9 fcf9 	bl	cd40 <__adddf3>
   1334e:	4606      	mov	r6, r0
   13350:	460f      	mov	r7, r1
   13352:	4642      	mov	r2, r8
   13354:	464b      	mov	r3, r9
   13356:	4620      	mov	r0, r4
   13358:	4629      	mov	r1, r5
   1335a:	f7f9 fcef 	bl	cd3c <__aeabi_dsub>
   1335e:	4602      	mov	r2, r0
   13360:	460b      	mov	r3, r1
   13362:	4630      	mov	r0, r6
   13364:	4639      	mov	r1, r7
   13366:	f7fa f931 	bl	d5cc <__aeabi_dcmpgt>
   1336a:	2800      	cmp	r0, #0
   1336c:	f040 821b 	bne.w	137a6 <__ieee754_pow+0xa1e>
   13370:	f3cb 530a 	ubfx	r3, fp, #20, #11
   13374:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   13378:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1337c:	4cbc      	ldr	r4, [pc, #752]	; (13670 <__ieee754_pow+0x8e8>)
   1337e:	f1bb 0f00 	cmp.w	fp, #0
   13382:	fa42 f303 	asr.w	r3, r2, r3
   13386:	f04f 0000 	mov.w	r0, #0
   1338a:	445b      	add	r3, fp
   1338c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   13390:	f3c3 0a13 	ubfx	sl, r3, #0, #20
   13394:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   13398:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
   1339c:	fa44 f402 	asr.w	r4, r4, r2
   133a0:	f1c2 0214 	rsb	r2, r2, #20
   133a4:	ea23 0104 	bic.w	r1, r3, r4
   133a8:	fa4a fa02 	asr.w	sl, sl, r2
   133ac:	4602      	mov	r2, r0
   133ae:	4640      	mov	r0, r8
   133b0:	460b      	mov	r3, r1
   133b2:	bfb8      	it	lt
   133b4:	f1ca 0a00 	rsblt	sl, sl, #0
   133b8:	4649      	mov	r1, r9
   133ba:	f7f9 fcbf 	bl	cd3c <__aeabi_dsub>
   133be:	4602      	mov	r2, r0
   133c0:	460b      	mov	r3, r1
   133c2:	4680      	mov	r8, r0
   133c4:	4689      	mov	r9, r1
   133c6:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
   133ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   133ce:	f7f9 fcb7 	bl	cd40 <__adddf3>
   133d2:	460d      	mov	r5, r1
   133d4:	2400      	movs	r4, #0
   133d6:	4629      	mov	r1, r5
   133d8:	a38f      	add	r3, pc, #572	; (adr r3, 13618 <__ieee754_pow+0x890>)
   133da:	e9d3 2300 	ldrd	r2, r3, [r3]
   133de:	4620      	mov	r0, r4
   133e0:	f7f9 fe64 	bl	d0ac <__aeabi_dmul>
   133e4:	4642      	mov	r2, r8
   133e6:	4606      	mov	r6, r0
   133e8:	460f      	mov	r7, r1
   133ea:	464b      	mov	r3, r9
   133ec:	4620      	mov	r0, r4
   133ee:	4629      	mov	r1, r5
   133f0:	f7f9 fca4 	bl	cd3c <__aeabi_dsub>
   133f4:	4602      	mov	r2, r0
   133f6:	460b      	mov	r3, r1
   133f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   133fc:	f7f9 fc9e 	bl	cd3c <__aeabi_dsub>
   13400:	a387      	add	r3, pc, #540	; (adr r3, 13620 <__ieee754_pow+0x898>)
   13402:	e9d3 2300 	ldrd	r2, r3, [r3]
   13406:	f7f9 fe51 	bl	d0ac <__aeabi_dmul>
   1340a:	4680      	mov	r8, r0
   1340c:	4689      	mov	r9, r1
   1340e:	4620      	mov	r0, r4
   13410:	4629      	mov	r1, r5
   13412:	a385      	add	r3, pc, #532	; (adr r3, 13628 <__ieee754_pow+0x8a0>)
   13414:	e9d3 2300 	ldrd	r2, r3, [r3]
   13418:	f7f9 fe48 	bl	d0ac <__aeabi_dmul>
   1341c:	4602      	mov	r2, r0
   1341e:	460b      	mov	r3, r1
   13420:	4640      	mov	r0, r8
   13422:	4649      	mov	r1, r9
   13424:	f7f9 fc8c 	bl	cd40 <__adddf3>
   13428:	4604      	mov	r4, r0
   1342a:	460d      	mov	r5, r1
   1342c:	4602      	mov	r2, r0
   1342e:	460b      	mov	r3, r1
   13430:	4630      	mov	r0, r6
   13432:	4639      	mov	r1, r7
   13434:	f7f9 fc84 	bl	cd40 <__adddf3>
   13438:	4632      	mov	r2, r6
   1343a:	4680      	mov	r8, r0
   1343c:	4689      	mov	r9, r1
   1343e:	463b      	mov	r3, r7
   13440:	f7f9 fc7c 	bl	cd3c <__aeabi_dsub>
   13444:	4602      	mov	r2, r0
   13446:	460b      	mov	r3, r1
   13448:	4620      	mov	r0, r4
   1344a:	4629      	mov	r1, r5
   1344c:	f7f9 fc76 	bl	cd3c <__aeabi_dsub>
   13450:	4642      	mov	r2, r8
   13452:	4606      	mov	r6, r0
   13454:	460f      	mov	r7, r1
   13456:	464b      	mov	r3, r9
   13458:	4640      	mov	r0, r8
   1345a:	4649      	mov	r1, r9
   1345c:	f7f9 fe26 	bl	d0ac <__aeabi_dmul>
   13460:	4604      	mov	r4, r0
   13462:	460d      	mov	r5, r1
   13464:	a372      	add	r3, pc, #456	; (adr r3, 13630 <__ieee754_pow+0x8a8>)
   13466:	e9d3 2300 	ldrd	r2, r3, [r3]
   1346a:	f7f9 fe1f 	bl	d0ac <__aeabi_dmul>
   1346e:	a372      	add	r3, pc, #456	; (adr r3, 13638 <__ieee754_pow+0x8b0>)
   13470:	e9d3 2300 	ldrd	r2, r3, [r3]
   13474:	f7f9 fc62 	bl	cd3c <__aeabi_dsub>
   13478:	4622      	mov	r2, r4
   1347a:	462b      	mov	r3, r5
   1347c:	f7f9 fe16 	bl	d0ac <__aeabi_dmul>
   13480:	a36f      	add	r3, pc, #444	; (adr r3, 13640 <__ieee754_pow+0x8b8>)
   13482:	e9d3 2300 	ldrd	r2, r3, [r3]
   13486:	f7f9 fc5b 	bl	cd40 <__adddf3>
   1348a:	4622      	mov	r2, r4
   1348c:	462b      	mov	r3, r5
   1348e:	f7f9 fe0d 	bl	d0ac <__aeabi_dmul>
   13492:	a36d      	add	r3, pc, #436	; (adr r3, 13648 <__ieee754_pow+0x8c0>)
   13494:	e9d3 2300 	ldrd	r2, r3, [r3]
   13498:	f7f9 fc50 	bl	cd3c <__aeabi_dsub>
   1349c:	4622      	mov	r2, r4
   1349e:	462b      	mov	r3, r5
   134a0:	f7f9 fe04 	bl	d0ac <__aeabi_dmul>
   134a4:	a36a      	add	r3, pc, #424	; (adr r3, 13650 <__ieee754_pow+0x8c8>)
   134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   134aa:	f7f9 fc49 	bl	cd40 <__adddf3>
   134ae:	4622      	mov	r2, r4
   134b0:	462b      	mov	r3, r5
   134b2:	f7f9 fdfb 	bl	d0ac <__aeabi_dmul>
   134b6:	4602      	mov	r2, r0
   134b8:	460b      	mov	r3, r1
   134ba:	4640      	mov	r0, r8
   134bc:	4649      	mov	r1, r9
   134be:	f7f9 fc3d 	bl	cd3c <__aeabi_dsub>
   134c2:	4604      	mov	r4, r0
   134c4:	460d      	mov	r5, r1
   134c6:	4602      	mov	r2, r0
   134c8:	460b      	mov	r3, r1
   134ca:	4640      	mov	r0, r8
   134cc:	4649      	mov	r1, r9
   134ce:	f7f9 fded 	bl	d0ac <__aeabi_dmul>
   134d2:	2200      	movs	r2, #0
   134d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   134d8:	e9cd 0100 	strd	r0, r1, [sp]
   134dc:	4620      	mov	r0, r4
   134de:	4629      	mov	r1, r5
   134e0:	f7f9 fc2c 	bl	cd3c <__aeabi_dsub>
   134e4:	4602      	mov	r2, r0
   134e6:	460b      	mov	r3, r1
   134e8:	e9dd 0100 	ldrd	r0, r1, [sp]
   134ec:	f7f9 ff08 	bl	d300 <__aeabi_ddiv>
   134f0:	4632      	mov	r2, r6
   134f2:	4604      	mov	r4, r0
   134f4:	460d      	mov	r5, r1
   134f6:	463b      	mov	r3, r7
   134f8:	4640      	mov	r0, r8
   134fa:	4649      	mov	r1, r9
   134fc:	f7f9 fdd6 	bl	d0ac <__aeabi_dmul>
   13500:	4632      	mov	r2, r6
   13502:	463b      	mov	r3, r7
   13504:	f7f9 fc1c 	bl	cd40 <__adddf3>
   13508:	4602      	mov	r2, r0
   1350a:	460b      	mov	r3, r1
   1350c:	4620      	mov	r0, r4
   1350e:	4629      	mov	r1, r5
   13510:	f7f9 fc14 	bl	cd3c <__aeabi_dsub>
   13514:	4642      	mov	r2, r8
   13516:	464b      	mov	r3, r9
   13518:	f7f9 fc10 	bl	cd3c <__aeabi_dsub>
   1351c:	4602      	mov	r2, r0
   1351e:	460b      	mov	r3, r1
   13520:	2000      	movs	r0, #0
   13522:	4954      	ldr	r1, [pc, #336]	; (13674 <__ieee754_pow+0x8ec>)
   13524:	f7f9 fc0a 	bl	cd3c <__aeabi_dsub>
   13528:	448b      	add	fp, r1
   1352a:	4602      	mov	r2, r0
   1352c:	460b      	mov	r3, r1
   1352e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   13532:	f2c0 815f 	blt.w	137f4 <__ieee754_pow+0xa6c>
   13536:	4659      	mov	r1, fp
   13538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1353c:	f7f9 fdb6 	bl	d0ac <__aeabi_dmul>
   13540:	e44f      	b.n	12de2 <__ieee754_pow+0x5a>
   13542:	ec45 4b10 	vmov	d0, r4, r5
   13546:	f018 fbbf 	bl	2bcc8 <fabs>
   1354a:	ec51 0b10 	vmov	r0, r1, d0
   1354e:	f1ba 0f00 	cmp.w	sl, #0
   13552:	f47f accb 	bne.w	12eec <__ieee754_pow+0x164>
   13556:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   1355a:	4a46      	ldr	r2, [pc, #280]	; (13674 <__ieee754_pow+0x8ec>)
   1355c:	4293      	cmp	r3, r2
   1355e:	d002      	beq.n	13566 <__ieee754_pow+0x7de>
   13560:	2e00      	cmp	r6, #0
   13562:	f47f acc3 	bne.w	12eec <__ieee754_pow+0x164>
   13566:	f04f 0b00 	mov.w	fp, #0
   1356a:	f1b9 0f00 	cmp.w	r9, #0
   1356e:	da05      	bge.n	1357c <__ieee754_pow+0x7f4>
   13570:	4602      	mov	r2, r0
   13572:	460b      	mov	r3, r1
   13574:	2000      	movs	r0, #0
   13576:	493f      	ldr	r1, [pc, #252]	; (13674 <__ieee754_pow+0x8ec>)
   13578:	f7f9 fec2 	bl	d300 <__aeabi_ddiv>
   1357c:	2f00      	cmp	r7, #0
   1357e:	f6bf ac30 	bge.w	12de2 <__ieee754_pow+0x5a>
   13582:	4b3d      	ldr	r3, [pc, #244]	; (13678 <__ieee754_pow+0x8f0>)
   13584:	4433      	add	r3, r6
   13586:	ea53 030b 	orrs.w	r3, r3, fp
   1358a:	f040 812a 	bne.w	137e2 <__ieee754_pow+0xa5a>
   1358e:	4602      	mov	r2, r0
   13590:	460b      	mov	r3, r1
   13592:	e4ad      	b.n	12ef0 <__ieee754_pow+0x168>
   13594:	f1b9 0f00 	cmp.w	r9, #0
   13598:	f6ff ac6b 	blt.w	12e72 <__ieee754_pow+0xea>
   1359c:	2000      	movs	r0, #0
   1359e:	2100      	movs	r1, #0
   135a0:	e41f      	b.n	12de2 <__ieee754_pow+0x5a>
   135a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 13658 <__ieee754_pow+0x8d0>
   135a6:	ed8d 7b04 	vstr	d7, [sp, #16]
   135aa:	e689      	b.n	132c0 <__ieee754_pow+0x538>
   135ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   135b0:	4e32      	ldr	r6, [pc, #200]	; (1367c <__ieee754_pow+0x8f4>)
   135b2:	42b3      	cmp	r3, r6
   135b4:	f340 80ef 	ble.w	13796 <__ieee754_pow+0xa0e>
   135b8:	4b31      	ldr	r3, [pc, #196]	; (13680 <__ieee754_pow+0x8f8>)
   135ba:	440b      	add	r3, r1
   135bc:	4303      	orrs	r3, r0
   135be:	d10a      	bne.n	135d6 <__ieee754_pow+0x84e>
   135c0:	4642      	mov	r2, r8
   135c2:	464b      	mov	r3, r9
   135c4:	f7f9 fbba 	bl	cd3c <__aeabi_dsub>
   135c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   135cc:	f7f9 fff4 	bl	d5b8 <__aeabi_dcmpge>
   135d0:	2800      	cmp	r0, #0
   135d2:	f43f aecd 	beq.w	13370 <__ieee754_pow+0x5e8>
   135d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   135da:	a321      	add	r3, pc, #132	; (adr r3, 13660 <__ieee754_pow+0x8d8>)
   135dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   135e0:	f7f9 fd64 	bl	d0ac <__aeabi_dmul>
   135e4:	a31e      	add	r3, pc, #120	; (adr r3, 13660 <__ieee754_pow+0x8d8>)
   135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   135ea:	f7f9 fd5f 	bl	d0ac <__aeabi_dmul>
   135ee:	f7ff bbf8 	b.w	12de2 <__ieee754_pow+0x5a>
   135f2:	f1b9 0f00 	cmp.w	r9, #0
   135f6:	dad1      	bge.n	1359c <__ieee754_pow+0x814>
   135f8:	e9dd 3400 	ldrd	r3, r4, [sp]
   135fc:	4618      	mov	r0, r3
   135fe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   13602:	f7ff bbee 	b.w	12de2 <__ieee754_pow+0x5a>
   13606:	bf00      	nop
   13608:	00000000 	.word	0x00000000
   1360c:	bff00000 	.word	0xbff00000
   13610:	652b82fe 	.word	0x652b82fe
   13614:	3c971547 	.word	0x3c971547
   13618:	00000000 	.word	0x00000000
   1361c:	3fe62e43 	.word	0x3fe62e43
   13620:	fefa39ef 	.word	0xfefa39ef
   13624:	3fe62e42 	.word	0x3fe62e42
   13628:	0ca86c39 	.word	0x0ca86c39
   1362c:	be205c61 	.word	0xbe205c61
   13630:	72bea4d0 	.word	0x72bea4d0
   13634:	3e663769 	.word	0x3e663769
   13638:	c5d26bf1 	.word	0xc5d26bf1
   1363c:	3ebbbd41 	.word	0x3ebbbd41
   13640:	af25de2c 	.word	0xaf25de2c
   13644:	3f11566a 	.word	0x3f11566a
   13648:	16bebd93 	.word	0x16bebd93
   1364c:	3f66c16c 	.word	0x3f66c16c
   13650:	5555553e 	.word	0x5555553e
   13654:	3fc55555 	.word	0x3fc55555
   13658:	00000000 	.word	0x00000000
   1365c:	3ff00000 	.word	0x3ff00000
   13660:	c2f8f359 	.word	0xc2f8f359
   13664:	01a56e1f 	.word	0x01a56e1f
   13668:	408fffff 	.word	0x408fffff
   1366c:	bf700000 	.word	0xbf700000
   13670:	000fffff 	.word	0x000fffff
   13674:	3ff00000 	.word	0x3ff00000
   13678:	c0100000 	.word	0xc0100000
   1367c:	4090cbff 	.word	0x4090cbff
   13680:	3f6f3400 	.word	0x3f6f3400
   13684:	4b7c      	ldr	r3, [pc, #496]	; (13878 <__ieee754_pow+0xaf0>)
   13686:	429e      	cmp	r6, r3
   13688:	dd84      	ble.n	13594 <__ieee754_pow+0x80c>
   1368a:	4b7c      	ldr	r3, [pc, #496]	; (1387c <__ieee754_pow+0xaf4>)
   1368c:	429e      	cmp	r6, r3
   1368e:	f73f abec 	bgt.w	12e6a <__ieee754_pow+0xe2>
   13692:	2200      	movs	r2, #0
   13694:	4b79      	ldr	r3, [pc, #484]	; (1387c <__ieee754_pow+0xaf4>)
   13696:	f7f9 fb51 	bl	cd3c <__aeabi_dsub>
   1369a:	4604      	mov	r4, r0
   1369c:	460d      	mov	r5, r1
   1369e:	a362      	add	r3, pc, #392	; (adr r3, 13828 <__ieee754_pow+0xaa0>)
   136a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   136a4:	f7f9 fd02 	bl	d0ac <__aeabi_dmul>
   136a8:	4680      	mov	r8, r0
   136aa:	4689      	mov	r9, r1
   136ac:	4620      	mov	r0, r4
   136ae:	4629      	mov	r1, r5
   136b0:	a35f      	add	r3, pc, #380	; (adr r3, 13830 <__ieee754_pow+0xaa8>)
   136b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   136b6:	f7f9 fcf9 	bl	d0ac <__aeabi_dmul>
   136ba:	2200      	movs	r2, #0
   136bc:	4b70      	ldr	r3, [pc, #448]	; (13880 <__ieee754_pow+0xaf8>)
   136be:	e9cd 0102 	strd	r0, r1, [sp, #8]
   136c2:	4620      	mov	r0, r4
   136c4:	4629      	mov	r1, r5
   136c6:	f7f9 fcf1 	bl	d0ac <__aeabi_dmul>
   136ca:	4602      	mov	r2, r0
   136cc:	460b      	mov	r3, r1
   136ce:	a15a      	add	r1, pc, #360	; (adr r1, 13838 <__ieee754_pow+0xab0>)
   136d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   136d4:	f7f9 fb32 	bl	cd3c <__aeabi_dsub>
   136d8:	4622      	mov	r2, r4
   136da:	462b      	mov	r3, r5
   136dc:	f7f9 fce6 	bl	d0ac <__aeabi_dmul>
   136e0:	4602      	mov	r2, r0
   136e2:	460b      	mov	r3, r1
   136e4:	2000      	movs	r0, #0
   136e6:	4967      	ldr	r1, [pc, #412]	; (13884 <__ieee754_pow+0xafc>)
   136e8:	f7f9 fb28 	bl	cd3c <__aeabi_dsub>
   136ec:	4606      	mov	r6, r0
   136ee:	460f      	mov	r7, r1
   136f0:	4622      	mov	r2, r4
   136f2:	462b      	mov	r3, r5
   136f4:	4620      	mov	r0, r4
   136f6:	4629      	mov	r1, r5
   136f8:	f7f9 fcd8 	bl	d0ac <__aeabi_dmul>
   136fc:	4602      	mov	r2, r0
   136fe:	460b      	mov	r3, r1
   13700:	4630      	mov	r0, r6
   13702:	4639      	mov	r1, r7
   13704:	f7f9 fcd2 	bl	d0ac <__aeabi_dmul>
   13708:	a34d      	add	r3, pc, #308	; (adr r3, 13840 <__ieee754_pow+0xab8>)
   1370a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1370e:	f7f9 fccd 	bl	d0ac <__aeabi_dmul>
   13712:	4602      	mov	r2, r0
   13714:	460b      	mov	r3, r1
   13716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1371a:	f7f9 fb0f 	bl	cd3c <__aeabi_dsub>
   1371e:	4602      	mov	r2, r0
   13720:	460b      	mov	r3, r1
   13722:	4606      	mov	r6, r0
   13724:	460f      	mov	r7, r1
   13726:	4640      	mov	r0, r8
   13728:	4649      	mov	r1, r9
   1372a:	f7f9 fb09 	bl	cd40 <__adddf3>
   1372e:	2000      	movs	r0, #0
   13730:	460d      	mov	r5, r1
   13732:	4642      	mov	r2, r8
   13734:	4604      	mov	r4, r0
   13736:	464b      	mov	r3, r9
   13738:	e5ae      	b.n	13298 <__ieee754_pow+0x510>
   1373a:	ed9f 7b43 	vldr	d7, [pc, #268]	; 13848 <__ieee754_pow+0xac0>
   1373e:	2500      	movs	r5, #0
   13740:	ed8d 7b08 	vstr	d7, [sp, #32]
   13744:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13748:	ed9f 7b41 	vldr	d7, [pc, #260]	; 13850 <__ieee754_pow+0xac8>
   1374c:	ed8d 7b06 	vstr	d7, [sp, #24]
   13750:	e41d      	b.n	12f8e <__ieee754_pow+0x206>
   13752:	2500      	movs	r5, #0
   13754:	f7ff bbf8 	b.w	12f48 <__ieee754_pow+0x1c0>
   13758:	4622      	mov	r2, r4
   1375a:	462b      	mov	r3, r5
   1375c:	2000      	movs	r0, #0
   1375e:	4947      	ldr	r1, [pc, #284]	; (1387c <__ieee754_pow+0xaf4>)
   13760:	f7f9 fdce 	bl	d300 <__aeabi_ddiv>
   13764:	f7ff bb3d 	b.w	12de2 <__ieee754_pow+0x5a>
   13768:	4622      	mov	r2, r4
   1376a:	462b      	mov	r3, r5
   1376c:	4620      	mov	r0, r4
   1376e:	4629      	mov	r1, r5
   13770:	f7f9 fc9c 	bl	d0ac <__aeabi_dmul>
   13774:	f7ff bb35 	b.w	12de2 <__ieee754_pow+0x5a>
   13778:	f1bc 0f00 	cmp.w	ip, #0
   1377c:	f47f aee1 	bne.w	13542 <__ieee754_pow+0x7ba>
   13780:	f1c3 0314 	rsb	r3, r3, #20
   13784:	fa48 f203 	asr.w	r2, r8, r3
   13788:	fa02 f303 	lsl.w	r3, r2, r3
   1378c:	4543      	cmp	r3, r8
   1378e:	d040      	beq.n	13812 <__ieee754_pow+0xa8a>
   13790:	46e3      	mov	fp, ip
   13792:	f7ff bb39 	b.w	12e08 <__ieee754_pow+0x80>
   13796:	4a3b      	ldr	r2, [pc, #236]	; (13884 <__ieee754_pow+0xafc>)
   13798:	4293      	cmp	r3, r2
   1379a:	dc40      	bgt.n	1381e <__ieee754_pow+0xa96>
   1379c:	e9dd 2300 	ldrd	r2, r3, [sp]
   137a0:	4693      	mov	fp, r2
   137a2:	4692      	mov	sl, r2
   137a4:	e616      	b.n	133d4 <__ieee754_pow+0x64c>
   137a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   137aa:	a32b      	add	r3, pc, #172	; (adr r3, 13858 <__ieee754_pow+0xad0>)
   137ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   137b0:	f7f9 fc7c 	bl	d0ac <__aeabi_dmul>
   137b4:	a328      	add	r3, pc, #160	; (adr r3, 13858 <__ieee754_pow+0xad0>)
   137b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   137ba:	f7f9 fc77 	bl	d0ac <__aeabi_dmul>
   137be:	f7ff bb10 	b.w	12de2 <__ieee754_pow+0x5a>
   137c2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 13860 <__ieee754_pow+0xad8>
   137c6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   137ca:	ed8d 7b08 	vstr	d7, [sp, #32]
   137ce:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13868 <__ieee754_pow+0xae0>
   137d2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   137d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13870 <__ieee754_pow+0xae8>
   137da:	ed8d 7b06 	vstr	d7, [sp, #24]
   137de:	f7ff bbd6 	b.w	12f8e <__ieee754_pow+0x206>
   137e2:	f1bb 0f01 	cmp.w	fp, #1
   137e6:	f47f aafc 	bne.w	12de2 <__ieee754_pow+0x5a>
   137ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   137ee:	4619      	mov	r1, r3
   137f0:	f7ff baf7 	b.w	12de2 <__ieee754_pow+0x5a>
   137f4:	4650      	mov	r0, sl
   137f6:	ec43 2b10 	vmov	d0, r2, r3
   137fa:	f000 f84d 	bl	13898 <scalbn>
   137fe:	ec51 0b10 	vmov	r0, r1, d0
   13802:	e699      	b.n	13538 <__ieee754_pow+0x7b0>
   13804:	ec45 4b10 	vmov	d0, r4, r5
   13808:	b013      	add	sp, #76	; 0x4c
   1380a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1380e:	f018 bc89 	b.w	2c124 <__ieee754_sqrt>
   13812:	f002 0201 	and.w	r2, r2, #1
   13816:	f1c2 0b02 	rsb	fp, r2, #2
   1381a:	f7ff baf5 	b.w	12e08 <__ieee754_pow+0x80>
   1381e:	151b      	asrs	r3, r3, #20
   13820:	e5a8      	b.n	13374 <__ieee754_pow+0x5ec>
   13822:	bf00      	nop
   13824:	f3af 8000 	nop.w
   13828:	60000000 	.word	0x60000000
   1382c:	3ff71547 	.word	0x3ff71547
   13830:	f85ddf44 	.word	0xf85ddf44
   13834:	3e54ae0b 	.word	0x3e54ae0b
   13838:	55555555 	.word	0x55555555
   1383c:	3fd55555 	.word	0x3fd55555
   13840:	652b82fe 	.word	0x652b82fe
   13844:	3ff71547 	.word	0x3ff71547
	...
   13854:	3ff00000 	.word	0x3ff00000
   13858:	8800759c 	.word	0x8800759c
   1385c:	7e37e43c 	.word	0x7e37e43c
   13860:	40000000 	.word	0x40000000
   13864:	3fe2b803 	.word	0x3fe2b803
   13868:	43cfd006 	.word	0x43cfd006
   1386c:	3e4cfdeb 	.word	0x3e4cfdeb
   13870:	00000000 	.word	0x00000000
   13874:	3ff80000 	.word	0x3ff80000
   13878:	3feffffe 	.word	0x3feffffe
   1387c:	3ff00000 	.word	0x3ff00000
   13880:	3fd00000 	.word	0x3fd00000
   13884:	3fe00000 	.word	0x3fe00000

00013888 <nan>:
   13888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 13890 <nan+0x8>
   1388c:	4770      	bx	lr
   1388e:	bf00      	nop
   13890:	00000000 	.word	0x00000000
   13894:	7ff80000 	.word	0x7ff80000

00013898 <scalbn>:
   13898:	b538      	push	{r3, r4, r5, lr}
   1389a:	ec53 2b10 	vmov	r2, r3, d0
   1389e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   138a2:	461c      	mov	r4, r3
   138a4:	4605      	mov	r5, r0
   138a6:	bb81      	cbnz	r1, 1390a <scalbn+0x72>
   138a8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   138ac:	ee10 1a10 	vmov	r1, s0
   138b0:	4321      	orrs	r1, r4
   138b2:	d029      	beq.n	13908 <scalbn+0x70>
   138b4:	4c3c      	ldr	r4, [pc, #240]	; (139a8 <scalbn+0x110>)
   138b6:	4619      	mov	r1, r3
   138b8:	2200      	movs	r2, #0
   138ba:	4b3c      	ldr	r3, [pc, #240]	; (139ac <scalbn+0x114>)
   138bc:	ee10 0a10 	vmov	r0, s0
   138c0:	f7f9 fbf4 	bl	d0ac <__aeabi_dmul>
   138c4:	42a5      	cmp	r5, r4
   138c6:	4602      	mov	r2, r0
   138c8:	460b      	mov	r3, r1
   138ca:	db16      	blt.n	138fa <scalbn+0x62>
   138cc:	460c      	mov	r4, r1
   138ce:	f3c1 510a 	ubfx	r1, r1, #20, #11
   138d2:	3936      	subs	r1, #54	; 0x36
   138d4:	4429      	add	r1, r5
   138d6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   138da:	4281      	cmp	r1, r0
   138dc:	dc21      	bgt.n	13922 <scalbn+0x8a>
   138de:	2900      	cmp	r1, #0
   138e0:	dc45      	bgt.n	1396e <scalbn+0xd6>
   138e2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   138e6:	da34      	bge.n	13952 <scalbn+0xba>
   138e8:	f24c 3150 	movw	r1, #50000	; 0xc350
   138ec:	428d      	cmp	r5, r1
   138ee:	dc18      	bgt.n	13922 <scalbn+0x8a>
   138f0:	2b00      	cmp	r3, #0
   138f2:	a125      	add	r1, pc, #148	; (adr r1, 13988 <scalbn+0xf0>)
   138f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   138f8:	db40      	blt.n	1397c <scalbn+0xe4>
   138fa:	a323      	add	r3, pc, #140	; (adr r3, 13988 <scalbn+0xf0>)
   138fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   13900:	f7f9 fbd4 	bl	d0ac <__aeabi_dmul>
   13904:	ec41 0b10 	vmov	d0, r0, r1
   13908:	bd38      	pop	{r3, r4, r5, pc}
   1390a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1390e:	4281      	cmp	r1, r0
   13910:	d1e0      	bne.n	138d4 <scalbn+0x3c>
   13912:	ee10 0a10 	vmov	r0, s0
   13916:	4619      	mov	r1, r3
   13918:	f7f9 fa12 	bl	cd40 <__adddf3>
   1391c:	ec41 0b10 	vmov	d0, r0, r1
   13920:	bd38      	pop	{r3, r4, r5, pc}
   13922:	2b00      	cmp	r3, #0
   13924:	a11a      	add	r1, pc, #104	; (adr r1, 13990 <scalbn+0xf8>)
   13926:	e9d1 0100 	ldrd	r0, r1, [r1]
   1392a:	db07      	blt.n	1393c <scalbn+0xa4>
   1392c:	a318      	add	r3, pc, #96	; (adr r3, 13990 <scalbn+0xf8>)
   1392e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13932:	f7f9 fbbb 	bl	d0ac <__aeabi_dmul>
   13936:	ec41 0b10 	vmov	d0, r0, r1
   1393a:	bd38      	pop	{r3, r4, r5, pc}
   1393c:	a116      	add	r1, pc, #88	; (adr r1, 13998 <scalbn+0x100>)
   1393e:	e9d1 0100 	ldrd	r0, r1, [r1]
   13942:	a313      	add	r3, pc, #76	; (adr r3, 13990 <scalbn+0xf8>)
   13944:	e9d3 2300 	ldrd	r2, r3, [r3]
   13948:	f7f9 fbb0 	bl	d0ac <__aeabi_dmul>
   1394c:	ec41 0b10 	vmov	d0, r0, r1
   13950:	e7f3      	b.n	1393a <scalbn+0xa2>
   13952:	4817      	ldr	r0, [pc, #92]	; (139b0 <scalbn+0x118>)
   13954:	3136      	adds	r1, #54	; 0x36
   13956:	4020      	ands	r0, r4
   13958:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1395c:	4610      	mov	r0, r2
   1395e:	2200      	movs	r2, #0
   13960:	4619      	mov	r1, r3
   13962:	4b14      	ldr	r3, [pc, #80]	; (139b4 <scalbn+0x11c>)
   13964:	f7f9 fba2 	bl	d0ac <__aeabi_dmul>
   13968:	ec41 0b10 	vmov	d0, r0, r1
   1396c:	bd38      	pop	{r3, r4, r5, pc}
   1396e:	4810      	ldr	r0, [pc, #64]	; (139b0 <scalbn+0x118>)
   13970:	4020      	ands	r0, r4
   13972:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   13976:	ec43 2b10 	vmov	d0, r2, r3
   1397a:	bd38      	pop	{r3, r4, r5, pc}
   1397c:	a108      	add	r1, pc, #32	; (adr r1, 139a0 <scalbn+0x108>)
   1397e:	e9d1 0100 	ldrd	r0, r1, [r1]
   13982:	e7ba      	b.n	138fa <scalbn+0x62>
   13984:	f3af 8000 	nop.w
   13988:	c2f8f359 	.word	0xc2f8f359
   1398c:	01a56e1f 	.word	0x01a56e1f
   13990:	8800759c 	.word	0x8800759c
   13994:	7e37e43c 	.word	0x7e37e43c
   13998:	8800759c 	.word	0x8800759c
   1399c:	fe37e43c 	.word	0xfe37e43c
   139a0:	c2f8f359 	.word	0xc2f8f359
   139a4:	81a56e1f 	.word	0x81a56e1f
   139a8:	ffff3cb0 	.word	0xffff3cb0
   139ac:	43500000 	.word	0x43500000
   139b0:	800fffff 	.word	0x800fffff
   139b4:	3c900000 	.word	0x3c900000

000139b8 <_dtoa_r>:
   139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139bc:	6a47      	ldr	r7, [r0, #36]	; 0x24
   139be:	b099      	sub	sp, #100	; 0x64
   139c0:	4683      	mov	fp, r0
   139c2:	9108      	str	r1, [sp, #32]
   139c4:	920d      	str	r2, [sp, #52]	; 0x34
   139c6:	9314      	str	r3, [sp, #80]	; 0x50
   139c8:	9e22      	ldr	r6, [sp, #136]	; 0x88
   139ca:	ec55 4b10 	vmov	r4, r5, d0
   139ce:	e9cd 4500 	strd	r4, r5, [sp]
   139d2:	b947      	cbnz	r7, 139e6 <_dtoa_r+0x2e>
   139d4:	2010      	movs	r0, #16
   139d6:	f01a f847 	bl	2da68 <malloc>
   139da:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   139de:	6007      	str	r7, [r0, #0]
   139e0:	60c7      	str	r7, [r0, #12]
   139e2:	e9c0 7701 	strd	r7, r7, [r0, #4]
   139e6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   139ea:	6819      	ldr	r1, [r3, #0]
   139ec:	b159      	cbz	r1, 13a06 <_dtoa_r+0x4e>
   139ee:	685a      	ldr	r2, [r3, #4]
   139f0:	2301      	movs	r3, #1
   139f2:	4658      	mov	r0, fp
   139f4:	4093      	lsls	r3, r2
   139f6:	604a      	str	r2, [r1, #4]
   139f8:	608b      	str	r3, [r1, #8]
   139fa:	f021 fa6b 	bl	34ed4 <_Bfree>
   139fe:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13a02:	2200      	movs	r2, #0
   13a04:	601a      	str	r2, [r3, #0]
   13a06:	1e2b      	subs	r3, r5, #0
   13a08:	bfb7      	itett	lt
   13a0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   13a0e:	2300      	movge	r3, #0
   13a10:	2201      	movlt	r2, #1
   13a12:	9301      	strlt	r3, [sp, #4]
   13a14:	bfa8      	it	ge
   13a16:	6033      	strge	r3, [r6, #0]
   13a18:	9c01      	ldr	r4, [sp, #4]
   13a1a:	4bb1      	ldr	r3, [pc, #708]	; (13ce0 <_dtoa_r+0x328>)
   13a1c:	bfb8      	it	lt
   13a1e:	6032      	strlt	r2, [r6, #0]
   13a20:	43a3      	bics	r3, r4
   13a22:	d11a      	bne.n	13a5a <_dtoa_r+0xa2>
   13a24:	f242 730f 	movw	r3, #9999	; 0x270f
   13a28:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a2a:	6013      	str	r3, [r2, #0]
   13a2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
   13a30:	9a00      	ldr	r2, [sp, #0]
   13a32:	4313      	orrs	r3, r2
   13a34:	f000 8547 	beq.w	144c6 <_dtoa_r+0xb0e>
   13a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13a3a:	b953      	cbnz	r3, 13a52 <_dtoa_r+0x9a>
   13a3c:	4ba9      	ldr	r3, [pc, #676]	; (13ce4 <_dtoa_r+0x32c>)
   13a3e:	e023      	b.n	13a88 <_dtoa_r+0xd0>
   13a40:	4ba9      	ldr	r3, [pc, #676]	; (13ce8 <_dtoa_r+0x330>)
   13a42:	9303      	str	r3, [sp, #12]
   13a44:	3308      	adds	r3, #8
   13a46:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13a48:	6013      	str	r3, [r2, #0]
   13a4a:	9803      	ldr	r0, [sp, #12]
   13a4c:	b019      	add	sp, #100	; 0x64
   13a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a52:	4ba4      	ldr	r3, [pc, #656]	; (13ce4 <_dtoa_r+0x32c>)
   13a54:	9303      	str	r3, [sp, #12]
   13a56:	3303      	adds	r3, #3
   13a58:	e7f5      	b.n	13a46 <_dtoa_r+0x8e>
   13a5a:	ed9d 7b00 	vldr	d7, [sp]
   13a5e:	2200      	movs	r2, #0
   13a60:	2300      	movs	r3, #0
   13a62:	ec51 0b17 	vmov	r0, r1, d7
   13a66:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   13a6a:	f7f9 fd87 	bl	d57c <__aeabi_dcmpeq>
   13a6e:	4607      	mov	r7, r0
   13a70:	b160      	cbz	r0, 13a8c <_dtoa_r+0xd4>
   13a72:	2301      	movs	r3, #1
   13a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a76:	6013      	str	r3, [r2, #0]
   13a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	f000 8520 	beq.w	144c0 <_dtoa_r+0xb08>
   13a80:	4b9a      	ldr	r3, [pc, #616]	; (13cec <_dtoa_r+0x334>)
   13a82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13a84:	6013      	str	r3, [r2, #0]
   13a86:	3b01      	subs	r3, #1
   13a88:	9303      	str	r3, [sp, #12]
   13a8a:	e7de      	b.n	13a4a <_dtoa_r+0x92>
   13a8c:	f3c4 560a 	ubfx	r6, r4, #20, #11
   13a90:	aa16      	add	r2, sp, #88	; 0x58
   13a92:	a917      	add	r1, sp, #92	; 0x5c
   13a94:	4658      	mov	r0, fp
   13a96:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   13a9a:	f021 fc24 	bl	352e6 <__d2b>
   13a9e:	4680      	mov	r8, r0
   13aa0:	2e00      	cmp	r6, #0
   13aa2:	d07d      	beq.n	13ba0 <_dtoa_r+0x1e8>
   13aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13aa6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   13aaa:	9715      	str	r7, [sp, #84]	; 0x54
   13aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
   13ab0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   13ab4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   13ab8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   13abc:	2200      	movs	r2, #0
   13abe:	4b8c      	ldr	r3, [pc, #560]	; (13cf0 <_dtoa_r+0x338>)
   13ac0:	4620      	mov	r0, r4
   13ac2:	4629      	mov	r1, r5
   13ac4:	f7f9 f93a 	bl	cd3c <__aeabi_dsub>
   13ac8:	a37f      	add	r3, pc, #508	; (adr r3, 13cc8 <_dtoa_r+0x310>)
   13aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ace:	f7f9 faed 	bl	d0ac <__aeabi_dmul>
   13ad2:	a37f      	add	r3, pc, #508	; (adr r3, 13cd0 <_dtoa_r+0x318>)
   13ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ad8:	f7f9 f932 	bl	cd40 <__adddf3>
   13adc:	4604      	mov	r4, r0
   13ade:	460d      	mov	r5, r1
   13ae0:	4630      	mov	r0, r6
   13ae2:	f7f9 fa79 	bl	cfd8 <__aeabi_i2d>
   13ae6:	a37c      	add	r3, pc, #496	; (adr r3, 13cd8 <_dtoa_r+0x320>)
   13ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aec:	f7f9 fade 	bl	d0ac <__aeabi_dmul>
   13af0:	4602      	mov	r2, r0
   13af2:	460b      	mov	r3, r1
   13af4:	4620      	mov	r0, r4
   13af6:	4629      	mov	r1, r5
   13af8:	f7f9 f922 	bl	cd40 <__adddf3>
   13afc:	4604      	mov	r4, r0
   13afe:	460d      	mov	r5, r1
   13b00:	f7f9 fd6e 	bl	d5e0 <__aeabi_d2iz>
   13b04:	2200      	movs	r2, #0
   13b06:	4682      	mov	sl, r0
   13b08:	2300      	movs	r3, #0
   13b0a:	4620      	mov	r0, r4
   13b0c:	4629      	mov	r1, r5
   13b0e:	f7f9 fd3f 	bl	d590 <__aeabi_dcmplt>
   13b12:	b148      	cbz	r0, 13b28 <_dtoa_r+0x170>
   13b14:	4650      	mov	r0, sl
   13b16:	f7f9 fa5f 	bl	cfd8 <__aeabi_i2d>
   13b1a:	4622      	mov	r2, r4
   13b1c:	462b      	mov	r3, r5
   13b1e:	f7f9 fd2d 	bl	d57c <__aeabi_dcmpeq>
   13b22:	b908      	cbnz	r0, 13b28 <_dtoa_r+0x170>
   13b24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   13b28:	f1ba 0f16 	cmp.w	sl, #22
   13b2c:	d857      	bhi.n	13bde <_dtoa_r+0x226>
   13b2e:	4b71      	ldr	r3, [pc, #452]	; (13cf4 <_dtoa_r+0x33c>)
   13b30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   13b34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b3c:	f7f9 fd28 	bl	d590 <__aeabi_dcmplt>
   13b40:	2800      	cmp	r0, #0
   13b42:	d04e      	beq.n	13be2 <_dtoa_r+0x22a>
   13b44:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   13b48:	2300      	movs	r3, #0
   13b4a:	9311      	str	r3, [sp, #68]	; 0x44
   13b4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13b4e:	1b9e      	subs	r6, r3, r6
   13b50:	1e73      	subs	r3, r6, #1
   13b52:	9307      	str	r3, [sp, #28]
   13b54:	bf49      	itett	mi
   13b56:	f1c6 0301 	rsbmi	r3, r6, #1
   13b5a:	2300      	movpl	r3, #0
   13b5c:	9306      	strmi	r3, [sp, #24]
   13b5e:	2300      	movmi	r3, #0
   13b60:	bf54      	ite	pl
   13b62:	9306      	strpl	r3, [sp, #24]
   13b64:	9307      	strmi	r3, [sp, #28]
   13b66:	f1ba 0f00 	cmp.w	sl, #0
   13b6a:	db3c      	blt.n	13be6 <_dtoa_r+0x22e>
   13b6c:	9b07      	ldr	r3, [sp, #28]
   13b6e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   13b72:	4453      	add	r3, sl
   13b74:	9307      	str	r3, [sp, #28]
   13b76:	2300      	movs	r3, #0
   13b78:	9309      	str	r3, [sp, #36]	; 0x24
   13b7a:	9b08      	ldr	r3, [sp, #32]
   13b7c:	2b09      	cmp	r3, #9
   13b7e:	f200 808d 	bhi.w	13c9c <_dtoa_r+0x2e4>
   13b82:	2b05      	cmp	r3, #5
   13b84:	bfc5      	ittet	gt
   13b86:	3b04      	subgt	r3, #4
   13b88:	2400      	movgt	r4, #0
   13b8a:	2401      	movle	r4, #1
   13b8c:	9308      	strgt	r3, [sp, #32]
   13b8e:	9b08      	ldr	r3, [sp, #32]
   13b90:	3b02      	subs	r3, #2
   13b92:	2b03      	cmp	r3, #3
   13b94:	f200 808d 	bhi.w	13cb2 <_dtoa_r+0x2fa>
   13b98:	e8df f003 	tbb	[pc, r3]
   13b9c:	7e3a3c2f 	.word	0x7e3a3c2f
   13ba0:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   13ba4:	441e      	add	r6, r3
   13ba6:	f206 4032 	addw	r0, r6, #1074	; 0x432
   13baa:	2820      	cmp	r0, #32
   13bac:	dd11      	ble.n	13bd2 <_dtoa_r+0x21a>
   13bae:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   13bb2:	9b00      	ldr	r3, [sp, #0]
   13bb4:	4084      	lsls	r4, r0
   13bb6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   13bba:	fa23 f000 	lsr.w	r0, r3, r0
   13bbe:	4320      	orrs	r0, r4
   13bc0:	f7f9 f9fa 	bl	cfb8 <__aeabi_ui2d>
   13bc4:	2301      	movs	r3, #1
   13bc6:	4604      	mov	r4, r0
   13bc8:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   13bcc:	3e01      	subs	r6, #1
   13bce:	9315      	str	r3, [sp, #84]	; 0x54
   13bd0:	e774      	b.n	13abc <_dtoa_r+0x104>
   13bd2:	f1c0 0020 	rsb	r0, r0, #32
   13bd6:	9b00      	ldr	r3, [sp, #0]
   13bd8:	fa03 f000 	lsl.w	r0, r3, r0
   13bdc:	e7f0      	b.n	13bc0 <_dtoa_r+0x208>
   13bde:	2301      	movs	r3, #1
   13be0:	e7b3      	b.n	13b4a <_dtoa_r+0x192>
   13be2:	9011      	str	r0, [sp, #68]	; 0x44
   13be4:	e7b2      	b.n	13b4c <_dtoa_r+0x194>
   13be6:	9b06      	ldr	r3, [sp, #24]
   13be8:	eba3 030a 	sub.w	r3, r3, sl
   13bec:	9306      	str	r3, [sp, #24]
   13bee:	f1ca 0300 	rsb	r3, sl, #0
   13bf2:	9309      	str	r3, [sp, #36]	; 0x24
   13bf4:	2300      	movs	r3, #0
   13bf6:	9310      	str	r3, [sp, #64]	; 0x40
   13bf8:	e7bf      	b.n	13b7a <_dtoa_r+0x1c2>
   13bfa:	2300      	movs	r3, #0
   13bfc:	930c      	str	r3, [sp, #48]	; 0x30
   13bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c00:	2b00      	cmp	r3, #0
   13c02:	dc59      	bgt.n	13cb8 <_dtoa_r+0x300>
   13c04:	2301      	movs	r3, #1
   13c06:	4699      	mov	r9, r3
   13c08:	461a      	mov	r2, r3
   13c0a:	9304      	str	r3, [sp, #16]
   13c0c:	920d      	str	r2, [sp, #52]	; 0x34
   13c0e:	e00c      	b.n	13c2a <_dtoa_r+0x272>
   13c10:	2301      	movs	r3, #1
   13c12:	e7f3      	b.n	13bfc <_dtoa_r+0x244>
   13c14:	2300      	movs	r3, #0
   13c16:	930c      	str	r3, [sp, #48]	; 0x30
   13c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c1a:	4453      	add	r3, sl
   13c1c:	f103 0901 	add.w	r9, r3, #1
   13c20:	9304      	str	r3, [sp, #16]
   13c22:	464b      	mov	r3, r9
   13c24:	2b01      	cmp	r3, #1
   13c26:	bfb8      	it	lt
   13c28:	2301      	movlt	r3, #1
   13c2a:	2200      	movs	r2, #0
   13c2c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   13c30:	606a      	str	r2, [r5, #4]
   13c32:	2204      	movs	r2, #4
   13c34:	f102 0014 	add.w	r0, r2, #20
   13c38:	6869      	ldr	r1, [r5, #4]
   13c3a:	4298      	cmp	r0, r3
   13c3c:	d940      	bls.n	13cc0 <_dtoa_r+0x308>
   13c3e:	4658      	mov	r0, fp
   13c40:	f021 f914 	bl	34e6c <_Balloc>
   13c44:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13c48:	6028      	str	r0, [r5, #0]
   13c4a:	f1b9 0f0e 	cmp.w	r9, #14
   13c4e:	681b      	ldr	r3, [r3, #0]
   13c50:	9303      	str	r3, [sp, #12]
   13c52:	f200 80d4 	bhi.w	13dfe <_dtoa_r+0x446>
   13c56:	2c00      	cmp	r4, #0
   13c58:	f000 80d1 	beq.w	13dfe <_dtoa_r+0x446>
   13c5c:	f1ba 0f00 	cmp.w	sl, #0
   13c60:	dd66      	ble.n	13d30 <_dtoa_r+0x378>
   13c62:	4a24      	ldr	r2, [pc, #144]	; (13cf4 <_dtoa_r+0x33c>)
   13c64:	f00a 030f 	and.w	r3, sl, #15
   13c68:	ea4f 142a 	mov.w	r4, sl, asr #4
   13c6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13c70:	06e2      	lsls	r2, r4, #27
   13c72:	ed93 7b00 	vldr	d7, [r3]
   13c76:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   13c7a:	d557      	bpl.n	13d2c <_dtoa_r+0x374>
   13c7c:	4b1e      	ldr	r3, [pc, #120]	; (13cf8 <_dtoa_r+0x340>)
   13c7e:	f004 040f 	and.w	r4, r4, #15
   13c82:	2603      	movs	r6, #3
   13c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   13c88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13c8c:	f7f9 fb38 	bl	d300 <__aeabi_ddiv>
   13c90:	e9cd 0100 	strd	r0, r1, [sp]
   13c94:	4d18      	ldr	r5, [pc, #96]	; (13cf8 <_dtoa_r+0x340>)
   13c96:	e03e      	b.n	13d16 <_dtoa_r+0x35e>
   13c98:	2301      	movs	r3, #1
   13c9a:	e7bc      	b.n	13c16 <_dtoa_r+0x25e>
   13c9c:	2401      	movs	r4, #1
   13c9e:	2300      	movs	r3, #0
   13ca0:	940c      	str	r4, [sp, #48]	; 0x30
   13ca2:	9308      	str	r3, [sp, #32]
   13ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ca8:	2200      	movs	r2, #0
   13caa:	9304      	str	r3, [sp, #16]
   13cac:	4699      	mov	r9, r3
   13cae:	2312      	movs	r3, #18
   13cb0:	e7ac      	b.n	13c0c <_dtoa_r+0x254>
   13cb2:	2301      	movs	r3, #1
   13cb4:	930c      	str	r3, [sp, #48]	; 0x30
   13cb6:	e7f5      	b.n	13ca4 <_dtoa_r+0x2ec>
   13cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13cba:	9304      	str	r3, [sp, #16]
   13cbc:	4699      	mov	r9, r3
   13cbe:	e7b4      	b.n	13c2a <_dtoa_r+0x272>
   13cc0:	3101      	adds	r1, #1
   13cc2:	0052      	lsls	r2, r2, #1
   13cc4:	6069      	str	r1, [r5, #4]
   13cc6:	e7b5      	b.n	13c34 <_dtoa_r+0x27c>
   13cc8:	636f4361 	.word	0x636f4361
   13ccc:	3fd287a7 	.word	0x3fd287a7
   13cd0:	8b60c8b3 	.word	0x8b60c8b3
   13cd4:	3fc68a28 	.word	0x3fc68a28
   13cd8:	509f79fb 	.word	0x509f79fb
   13cdc:	3fd34413 	.word	0x3fd34413
   13ce0:	7ff00000 	.word	0x7ff00000
   13ce4:	00039061 	.word	0x00039061
   13ce8:	00039058 	.word	0x00039058
   13cec:	00038ae8 	.word	0x00038ae8
   13cf0:	3ff80000 	.word	0x3ff80000
   13cf4:	00035910 	.word	0x00035910
   13cf8:	000358e8 	.word	0x000358e8
   13cfc:	07e3      	lsls	r3, r4, #31
   13cfe:	d508      	bpl.n	13d12 <_dtoa_r+0x35a>
   13d00:	3601      	adds	r6, #1
   13d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13d06:	e9d5 2300 	ldrd	r2, r3, [r5]
   13d0a:	f7f9 f9cf 	bl	d0ac <__aeabi_dmul>
   13d0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   13d12:	1064      	asrs	r4, r4, #1
   13d14:	3508      	adds	r5, #8
   13d16:	2c00      	cmp	r4, #0
   13d18:	d1f0      	bne.n	13cfc <_dtoa_r+0x344>
   13d1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   13d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
   13d22:	f7f9 faed 	bl	d300 <__aeabi_ddiv>
   13d26:	e9cd 0100 	strd	r0, r1, [sp]
   13d2a:	e01a      	b.n	13d62 <_dtoa_r+0x3aa>
   13d2c:	2602      	movs	r6, #2
   13d2e:	e7b1      	b.n	13c94 <_dtoa_r+0x2dc>
   13d30:	f000 809f 	beq.w	13e72 <_dtoa_r+0x4ba>
   13d34:	f1ca 0400 	rsb	r4, sl, #0
   13d38:	4b9e      	ldr	r3, [pc, #632]	; (13fb4 <_dtoa_r+0x5fc>)
   13d3a:	4d9f      	ldr	r5, [pc, #636]	; (13fb8 <_dtoa_r+0x600>)
   13d3c:	2602      	movs	r6, #2
   13d3e:	f004 020f 	and.w	r2, r4, #15
   13d42:	1124      	asrs	r4, r4, #4
   13d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   13d48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d50:	f7f9 f9ac 	bl	d0ac <__aeabi_dmul>
   13d54:	2300      	movs	r3, #0
   13d56:	e9cd 0100 	strd	r0, r1, [sp]
   13d5a:	2c00      	cmp	r4, #0
   13d5c:	d17e      	bne.n	13e5c <_dtoa_r+0x4a4>
   13d5e:	2b00      	cmp	r3, #0
   13d60:	d1e1      	bne.n	13d26 <_dtoa_r+0x36e>
   13d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13d64:	2b00      	cmp	r3, #0
   13d66:	f000 8086 	beq.w	13e76 <_dtoa_r+0x4be>
   13d6a:	2200      	movs	r2, #0
   13d6c:	4b93      	ldr	r3, [pc, #588]	; (13fbc <_dtoa_r+0x604>)
   13d6e:	e9dd 4500 	ldrd	r4, r5, [sp]
   13d72:	4620      	mov	r0, r4
   13d74:	4629      	mov	r1, r5
   13d76:	f7f9 fc0b 	bl	d590 <__aeabi_dcmplt>
   13d7a:	2800      	cmp	r0, #0
   13d7c:	d07b      	beq.n	13e76 <_dtoa_r+0x4be>
   13d7e:	f1b9 0f00 	cmp.w	r9, #0
   13d82:	d078      	beq.n	13e76 <_dtoa_r+0x4be>
   13d84:	9b04      	ldr	r3, [sp, #16]
   13d86:	2b00      	cmp	r3, #0
   13d88:	dd35      	ble.n	13df6 <_dtoa_r+0x43e>
   13d8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   13d8e:	4620      	mov	r0, r4
   13d90:	2200      	movs	r2, #0
   13d92:	4629      	mov	r1, r5
   13d94:	930a      	str	r3, [sp, #40]	; 0x28
   13d96:	3601      	adds	r6, #1
   13d98:	4b89      	ldr	r3, [pc, #548]	; (13fc0 <_dtoa_r+0x608>)
   13d9a:	f7f9 f987 	bl	d0ac <__aeabi_dmul>
   13d9e:	9c04      	ldr	r4, [sp, #16]
   13da0:	e9cd 0100 	strd	r0, r1, [sp]
   13da4:	4630      	mov	r0, r6
   13da6:	f7f9 f917 	bl	cfd8 <__aeabi_i2d>
   13daa:	e9dd 2300 	ldrd	r2, r3, [sp]
   13dae:	f7f9 f97d 	bl	d0ac <__aeabi_dmul>
   13db2:	2200      	movs	r2, #0
   13db4:	4b83      	ldr	r3, [pc, #524]	; (13fc4 <_dtoa_r+0x60c>)
   13db6:	f7f8 ffc3 	bl	cd40 <__adddf3>
   13dba:	4606      	mov	r6, r0
   13dbc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   13dc0:	2c00      	cmp	r4, #0
   13dc2:	d15c      	bne.n	13e7e <_dtoa_r+0x4c6>
   13dc4:	2200      	movs	r2, #0
   13dc6:	4b80      	ldr	r3, [pc, #512]	; (13fc8 <_dtoa_r+0x610>)
   13dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
   13dcc:	f7f8 ffb6 	bl	cd3c <__aeabi_dsub>
   13dd0:	4632      	mov	r2, r6
   13dd2:	463b      	mov	r3, r7
   13dd4:	e9cd 0100 	strd	r0, r1, [sp]
   13dd8:	f7f9 fbf8 	bl	d5cc <__aeabi_dcmpgt>
   13ddc:	2800      	cmp	r0, #0
   13dde:	f040 8289 	bne.w	142f4 <_dtoa_r+0x93c>
   13de2:	4632      	mov	r2, r6
   13de4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   13de8:	e9dd 0100 	ldrd	r0, r1, [sp]
   13dec:	f7f9 fbd0 	bl	d590 <__aeabi_dcmplt>
   13df0:	2800      	cmp	r0, #0
   13df2:	f040 827d 	bne.w	142f0 <_dtoa_r+0x938>
   13df6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13dfa:	e9cd 3400 	strd	r3, r4, [sp]
   13dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13e00:	2b00      	cmp	r3, #0
   13e02:	f2c0 814c 	blt.w	1409e <_dtoa_r+0x6e6>
   13e06:	f1ba 0f0e 	cmp.w	sl, #14
   13e0a:	f300 8148 	bgt.w	1409e <_dtoa_r+0x6e6>
   13e0e:	4b69      	ldr	r3, [pc, #420]	; (13fb4 <_dtoa_r+0x5fc>)
   13e10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   13e14:	ed93 7b00 	vldr	d7, [r3]
   13e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	ed8d 7b04 	vstr	d7, [sp, #16]
   13e20:	f280 80d6 	bge.w	13fd0 <_dtoa_r+0x618>
   13e24:	f1b9 0f00 	cmp.w	r9, #0
   13e28:	f300 80d2 	bgt.w	13fd0 <_dtoa_r+0x618>
   13e2c:	f040 825f 	bne.w	142ee <_dtoa_r+0x936>
   13e30:	2200      	movs	r2, #0
   13e32:	4b65      	ldr	r3, [pc, #404]	; (13fc8 <_dtoa_r+0x610>)
   13e34:	464c      	mov	r4, r9
   13e36:	464e      	mov	r6, r9
   13e38:	ec51 0b17 	vmov	r0, r1, d7
   13e3c:	f7f9 f936 	bl	d0ac <__aeabi_dmul>
   13e40:	e9dd 2300 	ldrd	r2, r3, [sp]
   13e44:	f7f9 fbb8 	bl	d5b8 <__aeabi_dcmpge>
   13e48:	2800      	cmp	r0, #0
   13e4a:	f040 8238 	bne.w	142be <_dtoa_r+0x906>
   13e4e:	9d03      	ldr	r5, [sp, #12]
   13e50:	2331      	movs	r3, #49	; 0x31
   13e52:	f10a 0a01 	add.w	sl, sl, #1
   13e56:	f805 3b01 	strb.w	r3, [r5], #1
   13e5a:	e234      	b.n	142c6 <_dtoa_r+0x90e>
   13e5c:	07e7      	lsls	r7, r4, #31
   13e5e:	d505      	bpl.n	13e6c <_dtoa_r+0x4b4>
   13e60:	3601      	adds	r6, #1
   13e62:	e9d5 2300 	ldrd	r2, r3, [r5]
   13e66:	f7f9 f921 	bl	d0ac <__aeabi_dmul>
   13e6a:	2301      	movs	r3, #1
   13e6c:	1064      	asrs	r4, r4, #1
   13e6e:	3508      	adds	r5, #8
   13e70:	e773      	b.n	13d5a <_dtoa_r+0x3a2>
   13e72:	2602      	movs	r6, #2
   13e74:	e775      	b.n	13d62 <_dtoa_r+0x3aa>
   13e76:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   13e7a:	464c      	mov	r4, r9
   13e7c:	e792      	b.n	13da4 <_dtoa_r+0x3ec>
   13e7e:	4b4d      	ldr	r3, [pc, #308]	; (13fb4 <_dtoa_r+0x5fc>)
   13e80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13e84:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   13e88:	9b03      	ldr	r3, [sp, #12]
   13e8a:	441c      	add	r4, r3
   13e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d046      	beq.n	13f20 <_dtoa_r+0x568>
   13e92:	4602      	mov	r2, r0
   13e94:	460b      	mov	r3, r1
   13e96:	2000      	movs	r0, #0
   13e98:	494c      	ldr	r1, [pc, #304]	; (13fcc <_dtoa_r+0x614>)
   13e9a:	f7f9 fa31 	bl	d300 <__aeabi_ddiv>
   13e9e:	4632      	mov	r2, r6
   13ea0:	463b      	mov	r3, r7
   13ea2:	f7f8 ff4b 	bl	cd3c <__aeabi_dsub>
   13ea6:	9d03      	ldr	r5, [sp, #12]
   13ea8:	4606      	mov	r6, r0
   13eaa:	460f      	mov	r7, r1
   13eac:	e9dd 0100 	ldrd	r0, r1, [sp]
   13eb0:	f7f9 fb96 	bl	d5e0 <__aeabi_d2iz>
   13eb4:	9012      	str	r0, [sp, #72]	; 0x48
   13eb6:	f7f9 f88f 	bl	cfd8 <__aeabi_i2d>
   13eba:	4602      	mov	r2, r0
   13ebc:	460b      	mov	r3, r1
   13ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
   13ec2:	f7f8 ff3b 	bl	cd3c <__aeabi_dsub>
   13ec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ec8:	4632      	mov	r2, r6
   13eca:	3330      	adds	r3, #48	; 0x30
   13ecc:	f805 3b01 	strb.w	r3, [r5], #1
   13ed0:	463b      	mov	r3, r7
   13ed2:	e9cd 0100 	strd	r0, r1, [sp]
   13ed6:	f7f9 fb5b 	bl	d590 <__aeabi_dcmplt>
   13eda:	2800      	cmp	r0, #0
   13edc:	d15f      	bne.n	13f9e <_dtoa_r+0x5e6>
   13ede:	2000      	movs	r0, #0
   13ee0:	4936      	ldr	r1, [pc, #216]	; (13fbc <_dtoa_r+0x604>)
   13ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
   13ee6:	f7f8 ff29 	bl	cd3c <__aeabi_dsub>
   13eea:	4632      	mov	r2, r6
   13eec:	463b      	mov	r3, r7
   13eee:	f7f9 fb4f 	bl	d590 <__aeabi_dcmplt>
   13ef2:	2800      	cmp	r0, #0
   13ef4:	f040 80b2 	bne.w	1405c <_dtoa_r+0x6a4>
   13ef8:	42a5      	cmp	r5, r4
   13efa:	f43f af7c 	beq.w	13df6 <_dtoa_r+0x43e>
   13efe:	2200      	movs	r2, #0
   13f00:	4b2f      	ldr	r3, [pc, #188]	; (13fc0 <_dtoa_r+0x608>)
   13f02:	4630      	mov	r0, r6
   13f04:	4639      	mov	r1, r7
   13f06:	f7f9 f8d1 	bl	d0ac <__aeabi_dmul>
   13f0a:	2200      	movs	r2, #0
   13f0c:	4606      	mov	r6, r0
   13f0e:	460f      	mov	r7, r1
   13f10:	4b2b      	ldr	r3, [pc, #172]	; (13fc0 <_dtoa_r+0x608>)
   13f12:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f16:	f7f9 f8c9 	bl	d0ac <__aeabi_dmul>
   13f1a:	e9cd 0100 	strd	r0, r1, [sp]
   13f1e:	e7c5      	b.n	13eac <_dtoa_r+0x4f4>
   13f20:	4632      	mov	r2, r6
   13f22:	463b      	mov	r3, r7
   13f24:	f7f9 f8c2 	bl	d0ac <__aeabi_dmul>
   13f28:	4625      	mov	r5, r4
   13f2a:	9e03      	ldr	r6, [sp, #12]
   13f2c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   13f30:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f34:	f7f9 fb54 	bl	d5e0 <__aeabi_d2iz>
   13f38:	4607      	mov	r7, r0
   13f3a:	f7f9 f84d 	bl	cfd8 <__aeabi_i2d>
   13f3e:	4602      	mov	r2, r0
   13f40:	3730      	adds	r7, #48	; 0x30
   13f42:	460b      	mov	r3, r1
   13f44:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f48:	f7f8 fef8 	bl	cd3c <__aeabi_dsub>
   13f4c:	f806 7b01 	strb.w	r7, [r6], #1
   13f50:	42a6      	cmp	r6, r4
   13f52:	f04f 0200 	mov.w	r2, #0
   13f56:	e9cd 0100 	strd	r0, r1, [sp]
   13f5a:	d125      	bne.n	13fa8 <_dtoa_r+0x5f0>
   13f5c:	4b1b      	ldr	r3, [pc, #108]	; (13fcc <_dtoa_r+0x614>)
   13f5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   13f62:	f7f8 feed 	bl	cd40 <__adddf3>
   13f66:	4602      	mov	r2, r0
   13f68:	460b      	mov	r3, r1
   13f6a:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f6e:	f7f9 fb2d 	bl	d5cc <__aeabi_dcmpgt>
   13f72:	2800      	cmp	r0, #0
   13f74:	d172      	bne.n	1405c <_dtoa_r+0x6a4>
   13f76:	2000      	movs	r0, #0
   13f78:	4914      	ldr	r1, [pc, #80]	; (13fcc <_dtoa_r+0x614>)
   13f7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   13f7e:	f7f8 fedd 	bl	cd3c <__aeabi_dsub>
   13f82:	4602      	mov	r2, r0
   13f84:	460b      	mov	r3, r1
   13f86:	e9dd 0100 	ldrd	r0, r1, [sp]
   13f8a:	f7f9 fb01 	bl	d590 <__aeabi_dcmplt>
   13f8e:	2800      	cmp	r0, #0
   13f90:	f43f af31 	beq.w	13df6 <_dtoa_r+0x43e>
   13f94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13f98:	1e6a      	subs	r2, r5, #1
   13f9a:	2b30      	cmp	r3, #48	; 0x30
   13f9c:	d002      	beq.n	13fa4 <_dtoa_r+0x5ec>
   13f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   13fa2:	e049      	b.n	14038 <_dtoa_r+0x680>
   13fa4:	4615      	mov	r5, r2
   13fa6:	e7f5      	b.n	13f94 <_dtoa_r+0x5dc>
   13fa8:	4b05      	ldr	r3, [pc, #20]	; (13fc0 <_dtoa_r+0x608>)
   13faa:	f7f9 f87f 	bl	d0ac <__aeabi_dmul>
   13fae:	e9cd 0100 	strd	r0, r1, [sp]
   13fb2:	e7bd      	b.n	13f30 <_dtoa_r+0x578>
   13fb4:	00035910 	.word	0x00035910
   13fb8:	000358e8 	.word	0x000358e8
   13fbc:	3ff00000 	.word	0x3ff00000
   13fc0:	40240000 	.word	0x40240000
   13fc4:	401c0000 	.word	0x401c0000
   13fc8:	40140000 	.word	0x40140000
   13fcc:	3fe00000 	.word	0x3fe00000
   13fd0:	e9dd 6700 	ldrd	r6, r7, [sp]
   13fd4:	9d03      	ldr	r5, [sp, #12]
   13fd6:	4630      	mov	r0, r6
   13fd8:	4639      	mov	r1, r7
   13fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13fde:	f7f9 f98f 	bl	d300 <__aeabi_ddiv>
   13fe2:	f7f9 fafd 	bl	d5e0 <__aeabi_d2iz>
   13fe6:	4604      	mov	r4, r0
   13fe8:	f7f8 fff6 	bl	cfd8 <__aeabi_i2d>
   13fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13ff0:	f7f9 f85c 	bl	d0ac <__aeabi_dmul>
   13ff4:	4602      	mov	r2, r0
   13ff6:	4630      	mov	r0, r6
   13ff8:	f104 0630 	add.w	r6, r4, #48	; 0x30
   13ffc:	460b      	mov	r3, r1
   13ffe:	4639      	mov	r1, r7
   14000:	f7f8 fe9c 	bl	cd3c <__aeabi_dsub>
   14004:	f805 6b01 	strb.w	r6, [r5], #1
   14008:	9e03      	ldr	r6, [sp, #12]
   1400a:	4602      	mov	r2, r0
   1400c:	460b      	mov	r3, r1
   1400e:	1bae      	subs	r6, r5, r6
   14010:	45b1      	cmp	r9, r6
   14012:	d137      	bne.n	14084 <_dtoa_r+0x6cc>
   14014:	f7f8 fe94 	bl	cd40 <__adddf3>
   14018:	4606      	mov	r6, r0
   1401a:	460f      	mov	r7, r1
   1401c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14020:	f7f9 fad4 	bl	d5cc <__aeabi_dcmpgt>
   14024:	b9c0      	cbnz	r0, 14058 <_dtoa_r+0x6a0>
   14026:	4630      	mov	r0, r6
   14028:	4639      	mov	r1, r7
   1402a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1402e:	f7f9 faa5 	bl	d57c <__aeabi_dcmpeq>
   14032:	b108      	cbz	r0, 14038 <_dtoa_r+0x680>
   14034:	07e1      	lsls	r1, r4, #31
   14036:	d40f      	bmi.n	14058 <_dtoa_r+0x6a0>
   14038:	4641      	mov	r1, r8
   1403a:	4658      	mov	r0, fp
   1403c:	f020 ff4a 	bl	34ed4 <_Bfree>
   14040:	2300      	movs	r3, #0
   14042:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14044:	702b      	strb	r3, [r5, #0]
   14046:	f10a 0301 	add.w	r3, sl, #1
   1404a:	6013      	str	r3, [r2, #0]
   1404c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1404e:	2b00      	cmp	r3, #0
   14050:	f43f acfb 	beq.w	13a4a <_dtoa_r+0x92>
   14054:	601d      	str	r5, [r3, #0]
   14056:	e4f8      	b.n	13a4a <_dtoa_r+0x92>
   14058:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1405c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   14060:	1e6b      	subs	r3, r5, #1
   14062:	2a39      	cmp	r2, #57	; 0x39
   14064:	d108      	bne.n	14078 <_dtoa_r+0x6c0>
   14066:	9a03      	ldr	r2, [sp, #12]
   14068:	429a      	cmp	r2, r3
   1406a:	d109      	bne.n	14080 <_dtoa_r+0x6c8>
   1406c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1406e:	9903      	ldr	r1, [sp, #12]
   14070:	3201      	adds	r2, #1
   14072:	920a      	str	r2, [sp, #40]	; 0x28
   14074:	2230      	movs	r2, #48	; 0x30
   14076:	700a      	strb	r2, [r1, #0]
   14078:	781a      	ldrb	r2, [r3, #0]
   1407a:	3201      	adds	r2, #1
   1407c:	701a      	strb	r2, [r3, #0]
   1407e:	e78e      	b.n	13f9e <_dtoa_r+0x5e6>
   14080:	461d      	mov	r5, r3
   14082:	e7eb      	b.n	1405c <_dtoa_r+0x6a4>
   14084:	2200      	movs	r2, #0
   14086:	4b9d      	ldr	r3, [pc, #628]	; (142fc <_dtoa_r+0x944>)
   14088:	f7f9 f810 	bl	d0ac <__aeabi_dmul>
   1408c:	2200      	movs	r2, #0
   1408e:	2300      	movs	r3, #0
   14090:	4606      	mov	r6, r0
   14092:	460f      	mov	r7, r1
   14094:	f7f9 fa72 	bl	d57c <__aeabi_dcmpeq>
   14098:	2800      	cmp	r0, #0
   1409a:	d09c      	beq.n	13fd6 <_dtoa_r+0x61e>
   1409c:	e7cc      	b.n	14038 <_dtoa_r+0x680>
   1409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   140a0:	2a00      	cmp	r2, #0
   140a2:	f000 80cb 	beq.w	1423c <_dtoa_r+0x884>
   140a6:	9a08      	ldr	r2, [sp, #32]
   140a8:	2a01      	cmp	r2, #1
   140aa:	f300 80ae 	bgt.w	1420a <_dtoa_r+0x852>
   140ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   140b0:	2a00      	cmp	r2, #0
   140b2:	f000 80a6 	beq.w	14202 <_dtoa_r+0x84a>
   140b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
   140ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   140bc:	9d06      	ldr	r5, [sp, #24]
   140be:	9a06      	ldr	r2, [sp, #24]
   140c0:	2101      	movs	r1, #1
   140c2:	4658      	mov	r0, fp
   140c4:	441a      	add	r2, r3
   140c6:	9206      	str	r2, [sp, #24]
   140c8:	9a07      	ldr	r2, [sp, #28]
   140ca:	441a      	add	r2, r3
   140cc:	9207      	str	r2, [sp, #28]
   140ce:	f020 ffa5 	bl	3501c <__i2b>
   140d2:	4606      	mov	r6, r0
   140d4:	2d00      	cmp	r5, #0
   140d6:	dd0c      	ble.n	140f2 <_dtoa_r+0x73a>
   140d8:	9b07      	ldr	r3, [sp, #28]
   140da:	2b00      	cmp	r3, #0
   140dc:	dd09      	ble.n	140f2 <_dtoa_r+0x73a>
   140de:	42ab      	cmp	r3, r5
   140e0:	9a06      	ldr	r2, [sp, #24]
   140e2:	bfa8      	it	ge
   140e4:	462b      	movge	r3, r5
   140e6:	1ad2      	subs	r2, r2, r3
   140e8:	1aed      	subs	r5, r5, r3
   140ea:	9206      	str	r2, [sp, #24]
   140ec:	9a07      	ldr	r2, [sp, #28]
   140ee:	1ad3      	subs	r3, r2, r3
   140f0:	9307      	str	r3, [sp, #28]
   140f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   140f4:	b1f3      	cbz	r3, 14134 <_dtoa_r+0x77c>
   140f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140f8:	2b00      	cmp	r3, #0
   140fa:	f000 80a3 	beq.w	14244 <_dtoa_r+0x88c>
   140fe:	2c00      	cmp	r4, #0
   14100:	dd10      	ble.n	14124 <_dtoa_r+0x76c>
   14102:	4631      	mov	r1, r6
   14104:	4622      	mov	r2, r4
   14106:	4658      	mov	r0, fp
   14108:	f01a fa3c 	bl	2e584 <__pow5mult>
   1410c:	4642      	mov	r2, r8
   1410e:	4601      	mov	r1, r0
   14110:	4606      	mov	r6, r0
   14112:	4658      	mov	r0, fp
   14114:	f020 ff8b 	bl	3502e <__multiply>
   14118:	4607      	mov	r7, r0
   1411a:	4641      	mov	r1, r8
   1411c:	4658      	mov	r0, fp
   1411e:	46b8      	mov	r8, r7
   14120:	f020 fed8 	bl	34ed4 <_Bfree>
   14124:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14126:	1b1a      	subs	r2, r3, r4
   14128:	d004      	beq.n	14134 <_dtoa_r+0x77c>
   1412a:	4641      	mov	r1, r8
   1412c:	4658      	mov	r0, fp
   1412e:	f01a fa29 	bl	2e584 <__pow5mult>
   14132:	4680      	mov	r8, r0
   14134:	2101      	movs	r1, #1
   14136:	4658      	mov	r0, fp
   14138:	f020 ff70 	bl	3501c <__i2b>
   1413c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1413e:	4604      	mov	r4, r0
   14140:	2b00      	cmp	r3, #0
   14142:	f340 8081 	ble.w	14248 <_dtoa_r+0x890>
   14146:	461a      	mov	r2, r3
   14148:	4601      	mov	r1, r0
   1414a:	4658      	mov	r0, fp
   1414c:	f01a fa1a 	bl	2e584 <__pow5mult>
   14150:	9b08      	ldr	r3, [sp, #32]
   14152:	4604      	mov	r4, r0
   14154:	2b01      	cmp	r3, #1
   14156:	dd7a      	ble.n	1424e <_dtoa_r+0x896>
   14158:	2700      	movs	r7, #0
   1415a:	6923      	ldr	r3, [r4, #16]
   1415c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   14160:	6918      	ldr	r0, [r3, #16]
   14162:	f020 ff0b 	bl	34f7c <__hi0bits>
   14166:	f1c0 0020 	rsb	r0, r0, #32
   1416a:	9b07      	ldr	r3, [sp, #28]
   1416c:	4418      	add	r0, r3
   1416e:	f010 001f 	ands.w	r0, r0, #31
   14172:	f000 808b 	beq.w	1428c <_dtoa_r+0x8d4>
   14176:	f1c0 0320 	rsb	r3, r0, #32
   1417a:	2b04      	cmp	r3, #4
   1417c:	f340 8084 	ble.w	14288 <_dtoa_r+0x8d0>
   14180:	f1c0 001c 	rsb	r0, r0, #28
   14184:	9b06      	ldr	r3, [sp, #24]
   14186:	4405      	add	r5, r0
   14188:	4403      	add	r3, r0
   1418a:	9306      	str	r3, [sp, #24]
   1418c:	9b07      	ldr	r3, [sp, #28]
   1418e:	4403      	add	r3, r0
   14190:	9307      	str	r3, [sp, #28]
   14192:	9b06      	ldr	r3, [sp, #24]
   14194:	2b00      	cmp	r3, #0
   14196:	dd05      	ble.n	141a4 <_dtoa_r+0x7ec>
   14198:	4641      	mov	r1, r8
   1419a:	461a      	mov	r2, r3
   1419c:	4658      	mov	r0, fp
   1419e:	f020 ffd5 	bl	3514c <__lshift>
   141a2:	4680      	mov	r8, r0
   141a4:	9b07      	ldr	r3, [sp, #28]
   141a6:	2b00      	cmp	r3, #0
   141a8:	dd05      	ble.n	141b6 <_dtoa_r+0x7fe>
   141aa:	4621      	mov	r1, r4
   141ac:	461a      	mov	r2, r3
   141ae:	4658      	mov	r0, fp
   141b0:	f020 ffcc 	bl	3514c <__lshift>
   141b4:	4604      	mov	r4, r0
   141b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   141b8:	2b00      	cmp	r3, #0
   141ba:	d069      	beq.n	14290 <_dtoa_r+0x8d8>
   141bc:	4621      	mov	r1, r4
   141be:	4640      	mov	r0, r8
   141c0:	f021 f817 	bl	351f2 <__mcmp>
   141c4:	2800      	cmp	r0, #0
   141c6:	da63      	bge.n	14290 <_dtoa_r+0x8d8>
   141c8:	2300      	movs	r3, #0
   141ca:	4641      	mov	r1, r8
   141cc:	220a      	movs	r2, #10
   141ce:	4658      	mov	r0, fp
   141d0:	f020 fe97 	bl	34f02 <__multadd>
   141d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   141d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   141da:	4680      	mov	r8, r0
   141dc:	2b00      	cmp	r3, #0
   141de:	f000 8179 	beq.w	144d4 <_dtoa_r+0xb1c>
   141e2:	2300      	movs	r3, #0
   141e4:	4631      	mov	r1, r6
   141e6:	220a      	movs	r2, #10
   141e8:	4658      	mov	r0, fp
   141ea:	f020 fe8a 	bl	34f02 <__multadd>
   141ee:	9b04      	ldr	r3, [sp, #16]
   141f0:	4606      	mov	r6, r0
   141f2:	2b00      	cmp	r3, #0
   141f4:	f300 808a 	bgt.w	1430c <_dtoa_r+0x954>
   141f8:	9b08      	ldr	r3, [sp, #32]
   141fa:	2b02      	cmp	r3, #2
   141fc:	f340 8086 	ble.w	1430c <_dtoa_r+0x954>
   14200:	e04e      	b.n	142a0 <_dtoa_r+0x8e8>
   14202:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14204:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   14208:	e757      	b.n	140ba <_dtoa_r+0x702>
   1420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1420c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   14210:	42a3      	cmp	r3, r4
   14212:	bfb7      	itett	lt
   14214:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   14216:	1b1c      	subge	r4, r3, r4
   14218:	9409      	strlt	r4, [sp, #36]	; 0x24
   1421a:	1ae2      	sublt	r2, r4, r3
   1421c:	bfbf      	itttt	lt
   1421e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   14220:	2400      	movlt	r4, #0
   14222:	189b      	addlt	r3, r3, r2
   14224:	9310      	strlt	r3, [sp, #64]	; 0x40
   14226:	f1b9 0f00 	cmp.w	r9, #0
   1422a:	bfb3      	iteet	lt
   1422c:	9b06      	ldrlt	r3, [sp, #24]
   1422e:	464b      	movge	r3, r9
   14230:	9d06      	ldrge	r5, [sp, #24]
   14232:	eba3 0509 	sublt.w	r5, r3, r9
   14236:	bfb8      	it	lt
   14238:	2300      	movlt	r3, #0
   1423a:	e740      	b.n	140be <_dtoa_r+0x706>
   1423c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1423e:	9d06      	ldr	r5, [sp, #24]
   14240:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14242:	e747      	b.n	140d4 <_dtoa_r+0x71c>
   14244:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14246:	e770      	b.n	1412a <_dtoa_r+0x772>
   14248:	9b08      	ldr	r3, [sp, #32]
   1424a:	2b01      	cmp	r3, #1
   1424c:	dc18      	bgt.n	14280 <_dtoa_r+0x8c8>
   1424e:	9b00      	ldr	r3, [sp, #0]
   14250:	b9b3      	cbnz	r3, 14280 <_dtoa_r+0x8c8>
   14252:	9b01      	ldr	r3, [sp, #4]
   14254:	f3c3 0313 	ubfx	r3, r3, #0, #20
   14258:	b9a3      	cbnz	r3, 14284 <_dtoa_r+0x8cc>
   1425a:	9b01      	ldr	r3, [sp, #4]
   1425c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   14260:	0d3f      	lsrs	r7, r7, #20
   14262:	053f      	lsls	r7, r7, #20
   14264:	b137      	cbz	r7, 14274 <_dtoa_r+0x8bc>
   14266:	9b06      	ldr	r3, [sp, #24]
   14268:	2701      	movs	r7, #1
   1426a:	3301      	adds	r3, #1
   1426c:	9306      	str	r3, [sp, #24]
   1426e:	9b07      	ldr	r3, [sp, #28]
   14270:	3301      	adds	r3, #1
   14272:	9307      	str	r3, [sp, #28]
   14274:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14276:	2b00      	cmp	r3, #0
   14278:	f47f af6f 	bne.w	1415a <_dtoa_r+0x7a2>
   1427c:	2001      	movs	r0, #1
   1427e:	e774      	b.n	1416a <_dtoa_r+0x7b2>
   14280:	2700      	movs	r7, #0
   14282:	e7f7      	b.n	14274 <_dtoa_r+0x8bc>
   14284:	9f00      	ldr	r7, [sp, #0]
   14286:	e7f5      	b.n	14274 <_dtoa_r+0x8bc>
   14288:	d083      	beq.n	14192 <_dtoa_r+0x7da>
   1428a:	4618      	mov	r0, r3
   1428c:	301c      	adds	r0, #28
   1428e:	e779      	b.n	14184 <_dtoa_r+0x7cc>
   14290:	f1b9 0f00 	cmp.w	r9, #0
   14294:	dc34      	bgt.n	14300 <_dtoa_r+0x948>
   14296:	9b08      	ldr	r3, [sp, #32]
   14298:	2b02      	cmp	r3, #2
   1429a:	dd31      	ble.n	14300 <_dtoa_r+0x948>
   1429c:	f8cd 9010 	str.w	r9, [sp, #16]
   142a0:	9b04      	ldr	r3, [sp, #16]
   142a2:	b963      	cbnz	r3, 142be <_dtoa_r+0x906>
   142a4:	4621      	mov	r1, r4
   142a6:	2205      	movs	r2, #5
   142a8:	4658      	mov	r0, fp
   142aa:	f020 fe2a 	bl	34f02 <__multadd>
   142ae:	4601      	mov	r1, r0
   142b0:	4604      	mov	r4, r0
   142b2:	4640      	mov	r0, r8
   142b4:	f020 ff9d 	bl	351f2 <__mcmp>
   142b8:	2800      	cmp	r0, #0
   142ba:	f73f adc8 	bgt.w	13e4e <_dtoa_r+0x496>
   142be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   142c0:	9d03      	ldr	r5, [sp, #12]
   142c2:	ea6f 0a03 	mvn.w	sl, r3
   142c6:	2700      	movs	r7, #0
   142c8:	4621      	mov	r1, r4
   142ca:	4658      	mov	r0, fp
   142cc:	f020 fe02 	bl	34ed4 <_Bfree>
   142d0:	2e00      	cmp	r6, #0
   142d2:	f43f aeb1 	beq.w	14038 <_dtoa_r+0x680>
   142d6:	b12f      	cbz	r7, 142e4 <_dtoa_r+0x92c>
   142d8:	42b7      	cmp	r7, r6
   142da:	d003      	beq.n	142e4 <_dtoa_r+0x92c>
   142dc:	4639      	mov	r1, r7
   142de:	4658      	mov	r0, fp
   142e0:	f020 fdf8 	bl	34ed4 <_Bfree>
   142e4:	4631      	mov	r1, r6
   142e6:	4658      	mov	r0, fp
   142e8:	f020 fdf4 	bl	34ed4 <_Bfree>
   142ec:	e6a4      	b.n	14038 <_dtoa_r+0x680>
   142ee:	2400      	movs	r4, #0
   142f0:	4626      	mov	r6, r4
   142f2:	e7e4      	b.n	142be <_dtoa_r+0x906>
   142f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   142f8:	4626      	mov	r6, r4
   142fa:	e5a8      	b.n	13e4e <_dtoa_r+0x496>
   142fc:	40240000 	.word	0x40240000
   14300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14302:	f8cd 9010 	str.w	r9, [sp, #16]
   14306:	2b00      	cmp	r3, #0
   14308:	f000 80eb 	beq.w	144e2 <_dtoa_r+0xb2a>
   1430c:	2d00      	cmp	r5, #0
   1430e:	dd05      	ble.n	1431c <_dtoa_r+0x964>
   14310:	4631      	mov	r1, r6
   14312:	462a      	mov	r2, r5
   14314:	4658      	mov	r0, fp
   14316:	f020 ff19 	bl	3514c <__lshift>
   1431a:	4606      	mov	r6, r0
   1431c:	2f00      	cmp	r7, #0
   1431e:	d056      	beq.n	143ce <_dtoa_r+0xa16>
   14320:	6871      	ldr	r1, [r6, #4]
   14322:	4658      	mov	r0, fp
   14324:	f020 fda2 	bl	34e6c <_Balloc>
   14328:	6932      	ldr	r2, [r6, #16]
   1432a:	4605      	mov	r5, r0
   1432c:	f106 010c 	add.w	r1, r6, #12
   14330:	3202      	adds	r2, #2
   14332:	300c      	adds	r0, #12
   14334:	0092      	lsls	r2, r2, #2
   14336:	f020 fb73 	bl	34a20 <memcpy>
   1433a:	2201      	movs	r2, #1
   1433c:	4629      	mov	r1, r5
   1433e:	4658      	mov	r0, fp
   14340:	f020 ff04 	bl	3514c <__lshift>
   14344:	9b03      	ldr	r3, [sp, #12]
   14346:	4637      	mov	r7, r6
   14348:	4606      	mov	r6, r0
   1434a:	f103 0901 	add.w	r9, r3, #1
   1434e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   14352:	4413      	add	r3, r2
   14354:	9309      	str	r3, [sp, #36]	; 0x24
   14356:	9b00      	ldr	r3, [sp, #0]
   14358:	f003 0301 	and.w	r3, r3, #1
   1435c:	9307      	str	r3, [sp, #28]
   1435e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   14362:	4621      	mov	r1, r4
   14364:	4640      	mov	r0, r8
   14366:	9300      	str	r3, [sp, #0]
   14368:	f020 fcf0 	bl	34d4c <quorem>
   1436c:	4603      	mov	r3, r0
   1436e:	9004      	str	r0, [sp, #16]
   14370:	4639      	mov	r1, r7
   14372:	4640      	mov	r0, r8
   14374:	3330      	adds	r3, #48	; 0x30
   14376:	930a      	str	r3, [sp, #40]	; 0x28
   14378:	f020 ff3b 	bl	351f2 <__mcmp>
   1437c:	4632      	mov	r2, r6
   1437e:	9006      	str	r0, [sp, #24]
   14380:	4621      	mov	r1, r4
   14382:	4658      	mov	r0, fp
   14384:	f020 ff4f 	bl	35226 <__mdiff>
   14388:	68c2      	ldr	r2, [r0, #12]
   1438a:	4605      	mov	r5, r0
   1438c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1438e:	bb02      	cbnz	r2, 143d2 <_dtoa_r+0xa1a>
   14390:	4601      	mov	r1, r0
   14392:	4640      	mov	r0, r8
   14394:	f020 ff2d 	bl	351f2 <__mcmp>
   14398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1439a:	4602      	mov	r2, r0
   1439c:	4629      	mov	r1, r5
   1439e:	4658      	mov	r0, fp
   143a0:	920c      	str	r2, [sp, #48]	; 0x30
   143a2:	464d      	mov	r5, r9
   143a4:	930a      	str	r3, [sp, #40]	; 0x28
   143a6:	f020 fd95 	bl	34ed4 <_Bfree>
   143aa:	9b08      	ldr	r3, [sp, #32]
   143ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   143ae:	ea43 0102 	orr.w	r1, r3, r2
   143b2:	9b07      	ldr	r3, [sp, #28]
   143b4:	430b      	orrs	r3, r1
   143b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143b8:	d10d      	bne.n	143d6 <_dtoa_r+0xa1e>
   143ba:	2b39      	cmp	r3, #57	; 0x39
   143bc:	d027      	beq.n	1440e <_dtoa_r+0xa56>
   143be:	9a06      	ldr	r2, [sp, #24]
   143c0:	2a00      	cmp	r2, #0
   143c2:	dd01      	ble.n	143c8 <_dtoa_r+0xa10>
   143c4:	9b04      	ldr	r3, [sp, #16]
   143c6:	3331      	adds	r3, #49	; 0x31
   143c8:	9a00      	ldr	r2, [sp, #0]
   143ca:	7013      	strb	r3, [r2, #0]
   143cc:	e77c      	b.n	142c8 <_dtoa_r+0x910>
   143ce:	4630      	mov	r0, r6
   143d0:	e7b8      	b.n	14344 <_dtoa_r+0x98c>
   143d2:	2201      	movs	r2, #1
   143d4:	e7e2      	b.n	1439c <_dtoa_r+0x9e4>
   143d6:	9906      	ldr	r1, [sp, #24]
   143d8:	2900      	cmp	r1, #0
   143da:	db04      	blt.n	143e6 <_dtoa_r+0xa2e>
   143dc:	9808      	ldr	r0, [sp, #32]
   143de:	4301      	orrs	r1, r0
   143e0:	9807      	ldr	r0, [sp, #28]
   143e2:	4301      	orrs	r1, r0
   143e4:	d11d      	bne.n	14422 <_dtoa_r+0xa6a>
   143e6:	2a00      	cmp	r2, #0
   143e8:	ddee      	ble.n	143c8 <_dtoa_r+0xa10>
   143ea:	4641      	mov	r1, r8
   143ec:	2201      	movs	r2, #1
   143ee:	4658      	mov	r0, fp
   143f0:	9306      	str	r3, [sp, #24]
   143f2:	f020 feab 	bl	3514c <__lshift>
   143f6:	4621      	mov	r1, r4
   143f8:	4680      	mov	r8, r0
   143fa:	f020 fefa 	bl	351f2 <__mcmp>
   143fe:	2800      	cmp	r0, #0
   14400:	9b06      	ldr	r3, [sp, #24]
   14402:	dc02      	bgt.n	1440a <_dtoa_r+0xa52>
   14404:	d1e0      	bne.n	143c8 <_dtoa_r+0xa10>
   14406:	07da      	lsls	r2, r3, #31
   14408:	d5de      	bpl.n	143c8 <_dtoa_r+0xa10>
   1440a:	2b39      	cmp	r3, #57	; 0x39
   1440c:	d1da      	bne.n	143c4 <_dtoa_r+0xa0c>
   1440e:	2339      	movs	r3, #57	; 0x39
   14410:	9a00      	ldr	r2, [sp, #0]
   14412:	7013      	strb	r3, [r2, #0]
   14414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   14418:	1e6a      	subs	r2, r5, #1
   1441a:	2b39      	cmp	r3, #57	; 0x39
   1441c:	d046      	beq.n	144ac <_dtoa_r+0xaf4>
   1441e:	3301      	adds	r3, #1
   14420:	e7d3      	b.n	143ca <_dtoa_r+0xa12>
   14422:	2a00      	cmp	r2, #0
   14424:	dd03      	ble.n	1442e <_dtoa_r+0xa76>
   14426:	2b39      	cmp	r3, #57	; 0x39
   14428:	d0f1      	beq.n	1440e <_dtoa_r+0xa56>
   1442a:	3301      	adds	r3, #1
   1442c:	e7cc      	b.n	143c8 <_dtoa_r+0xa10>
   1442e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14430:	f809 3c01 	strb.w	r3, [r9, #-1]
   14434:	4591      	cmp	r9, r2
   14436:	d021      	beq.n	1447c <_dtoa_r+0xac4>
   14438:	4641      	mov	r1, r8
   1443a:	2300      	movs	r3, #0
   1443c:	220a      	movs	r2, #10
   1443e:	4658      	mov	r0, fp
   14440:	f020 fd5f 	bl	34f02 <__multadd>
   14444:	42b7      	cmp	r7, r6
   14446:	4680      	mov	r8, r0
   14448:	f04f 0300 	mov.w	r3, #0
   1444c:	f04f 020a 	mov.w	r2, #10
   14450:	4639      	mov	r1, r7
   14452:	4658      	mov	r0, fp
   14454:	d106      	bne.n	14464 <_dtoa_r+0xaac>
   14456:	f020 fd54 	bl	34f02 <__multadd>
   1445a:	4607      	mov	r7, r0
   1445c:	4606      	mov	r6, r0
   1445e:	f109 0901 	add.w	r9, r9, #1
   14462:	e77c      	b.n	1435e <_dtoa_r+0x9a6>
   14464:	f020 fd4d 	bl	34f02 <__multadd>
   14468:	4631      	mov	r1, r6
   1446a:	4607      	mov	r7, r0
   1446c:	2300      	movs	r3, #0
   1446e:	220a      	movs	r2, #10
   14470:	4658      	mov	r0, fp
   14472:	f020 fd46 	bl	34f02 <__multadd>
   14476:	4606      	mov	r6, r0
   14478:	e7f1      	b.n	1445e <_dtoa_r+0xaa6>
   1447a:	2700      	movs	r7, #0
   1447c:	4641      	mov	r1, r8
   1447e:	2201      	movs	r2, #1
   14480:	4658      	mov	r0, fp
   14482:	9300      	str	r3, [sp, #0]
   14484:	f020 fe62 	bl	3514c <__lshift>
   14488:	4621      	mov	r1, r4
   1448a:	4680      	mov	r8, r0
   1448c:	f020 feb1 	bl	351f2 <__mcmp>
   14490:	2800      	cmp	r0, #0
   14492:	dcbf      	bgt.n	14414 <_dtoa_r+0xa5c>
   14494:	d102      	bne.n	1449c <_dtoa_r+0xae4>
   14496:	9b00      	ldr	r3, [sp, #0]
   14498:	07db      	lsls	r3, r3, #31
   1449a:	d4bb      	bmi.n	14414 <_dtoa_r+0xa5c>
   1449c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   144a0:	1e6a      	subs	r2, r5, #1
   144a2:	2b30      	cmp	r3, #48	; 0x30
   144a4:	f47f af10 	bne.w	142c8 <_dtoa_r+0x910>
   144a8:	4615      	mov	r5, r2
   144aa:	e7f7      	b.n	1449c <_dtoa_r+0xae4>
   144ac:	9b03      	ldr	r3, [sp, #12]
   144ae:	4293      	cmp	r3, r2
   144b0:	d104      	bne.n	144bc <_dtoa_r+0xb04>
   144b2:	f10a 0a01 	add.w	sl, sl, #1
   144b6:	2331      	movs	r3, #49	; 0x31
   144b8:	9a03      	ldr	r2, [sp, #12]
   144ba:	e786      	b.n	143ca <_dtoa_r+0xa12>
   144bc:	4615      	mov	r5, r2
   144be:	e7a9      	b.n	14414 <_dtoa_r+0xa5c>
   144c0:	4b13      	ldr	r3, [pc, #76]	; (14510 <_dtoa_r+0xb58>)
   144c2:	f7ff bae1 	b.w	13a88 <_dtoa_r+0xd0>
   144c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   144c8:	2b00      	cmp	r3, #0
   144ca:	f47f aab9 	bne.w	13a40 <_dtoa_r+0x88>
   144ce:	4b11      	ldr	r3, [pc, #68]	; (14514 <_dtoa_r+0xb5c>)
   144d0:	f7ff bada 	b.w	13a88 <_dtoa_r+0xd0>
   144d4:	9b04      	ldr	r3, [sp, #16]
   144d6:	2b00      	cmp	r3, #0
   144d8:	dc03      	bgt.n	144e2 <_dtoa_r+0xb2a>
   144da:	9b08      	ldr	r3, [sp, #32]
   144dc:	2b02      	cmp	r3, #2
   144de:	f73f aedf 	bgt.w	142a0 <_dtoa_r+0x8e8>
   144e2:	9d03      	ldr	r5, [sp, #12]
   144e4:	4621      	mov	r1, r4
   144e6:	4640      	mov	r0, r8
   144e8:	f020 fc30 	bl	34d4c <quorem>
   144ec:	9a03      	ldr	r2, [sp, #12]
   144ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
   144f2:	9904      	ldr	r1, [sp, #16]
   144f4:	f805 3b01 	strb.w	r3, [r5], #1
   144f8:	1aaa      	subs	r2, r5, r2
   144fa:	4291      	cmp	r1, r2
   144fc:	ddbd      	ble.n	1447a <_dtoa_r+0xac2>
   144fe:	4641      	mov	r1, r8
   14500:	2300      	movs	r3, #0
   14502:	220a      	movs	r2, #10
   14504:	4658      	mov	r0, fp
   14506:	f020 fcfc 	bl	34f02 <__multadd>
   1450a:	4680      	mov	r8, r0
   1450c:	e7ea      	b.n	144e4 <_dtoa_r+0xb2c>
   1450e:	bf00      	nop
   14510:	00038ae7 	.word	0x00038ae7
   14514:	00039058 	.word	0x00039058

00014518 <env_data_ready>:
{
   14518:	b500      	push	{lr}
   1451a:	b09f      	sub	sp, #124	; 0x7c
    if (! env_sensors_get_temperature(&temp)) {
   1451c:	a806      	add	r0, sp, #24
   1451e:	f001 fc91 	bl	15e44 <env_sensors_get_temperature>
   14522:	b920      	cbnz	r0, 1452e <env_data_ready+0x16>
        (env_data.t) = (s32_t)temp.value;
   14524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   14528:	f7f9 f85a 	bl	d5e0 <__aeabi_d2iz>
   1452c:	9001      	str	r0, [sp, #4]
    if (! env_sensors_get_humidity(&humi)) {
   1452e:	a80c      	add	r0, sp, #48	; 0x30
   14530:	f001 fce0 	bl	15ef4 <env_sensors_get_humidity>
   14534:	b920      	cbnz	r0, 14540 <env_data_ready+0x28>
        (env_data.h) = (s32_t)humi.value;
   14536:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1453a:	f7f9 f851 	bl	d5e0 <__aeabi_d2iz>
   1453e:	9002      	str	r0, [sp, #8]
    if (! env_sensors_get_pressure(&pres)) {
   14540:	a812      	add	r0, sp, #72	; 0x48
   14542:	f001 fd2f 	bl	15fa4 <env_sensors_get_pressure>
   14546:	b920      	cbnz	r0, 14552 <env_data_ready+0x3a>
        (env_data.p) = (s32_t)pres.value;
   14548:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   1454c:	f7f9 f848 	bl	d5e0 <__aeabi_d2iz>
   14550:	9003      	str	r0, [sp, #12]
    if (! env_sensors_get_air_quality(&qual)) {
   14552:	a818      	add	r0, sp, #96	; 0x60
   14554:	f001 fd7e 	bl	16054 <env_sensors_get_air_quality>
   14558:	b940      	cbnz	r0, 1456c <env_data_ready+0x54>
        (env_data.q) = (s32_t)qual.value;
   1455a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1455e:	f7f9 f83f 	bl	d5e0 <__aeabi_d2iz>
        (env_data.c) = (bool)qual.is_calibrated;
   14562:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
        (env_data.q) = (s32_t)qual.value;
   14566:	9004      	str	r0, [sp, #16]
        (env_data.c) = (bool)qual.is_calibrated;
   14568:	f88d 3014 	strb.w	r3, [sp, #20]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   1456c:	2200      	movs	r2, #0
   1456e:	a901      	add	r1, sp, #4
   14570:	4802      	ldr	r0, [pc, #8]	; (1457c <env_data_ready+0x64>)
   14572:	f014 fb1f 	bl	28bb4 <z_impl_k_msgq_put>
}
   14576:	b01f      	add	sp, #124	; 0x7c
   14578:	f85d fb04 	ldr.w	pc, [sp], #4
   1457c:	20021030 	.word	0x20021030

00014580 <ntp_poll>:
{
   14580:	b507      	push	{r0, r1, r2, lr}
    while (date_time_now(&date_time_stamp) != 0)
   14582:	4668      	mov	r0, sp
   14584:	f01f ff96 	bl	344b4 <date_time_now>
   14588:	b928      	cbnz	r0, 14596 <ntp_poll+0x16>
    got_ntp = true;
   1458a:	2201      	movs	r2, #1
   1458c:	4b04      	ldr	r3, [pc, #16]	; (145a0 <ntp_poll+0x20>)
   1458e:	701a      	strb	r2, [r3, #0]
}
   14590:	b003      	add	sp, #12
   14592:	f85d fb04 	ldr.w	pc, [sp], #4
	return z_impl_k_sleep(timeout);
   14596:	f242 7010 	movw	r0, #10000	; 0x2710
   1459a:	f016 f937 	bl	2a80c <z_impl_k_sleep>
   1459e:	e7f0      	b.n	14582 <ntp_poll+0x2>
   145a0:	2002755e 	.word	0x2002755e

000145a4 <process_env_data>:
{
   145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    u32_t run_count = 0;
   145a8:	f04f 0b00 	mov.w	fp, #0
    bool thread_started = false;
   145ac:	46da      	mov	sl, fp
{
   145ae:	f6ad 7d74 	subw	sp, sp, #3956	; 0xf74
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   145b2:	2400      	movs	r4, #0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   145b4:	4d46      	ldr	r5, [pc, #280]	; (146d0 <process_env_data+0x12c>)
            tempArray[i] = (s32_t)d_temp.t;
   145b6:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   145ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145be:	4669      	mov	r1, sp
   145c0:	4628      	mov	r0, r5
   145c2:	f014 fb91 	bl	28ce8 <z_impl_k_msgq_get>
   145c6:	9a00      	ldr	r2, [sp, #0]
            humiArray[i] = (s32_t)d_temp.h;
   145c8:	f50d 6886 	add.w	r8, sp, #1072	; 0x430
            tempArray[i] = (s32_t)d_temp.t;
   145cc:	f849 2024 	str.w	r2, [r9, r4, lsl #2]
            humiArray[i] = (s32_t)d_temp.h;
   145d0:	9a01      	ldr	r2, [sp, #4]
            presArray[i] = (s32_t)d_temp.p;
   145d2:	f50d 67fe 	add.w	r7, sp, #2032	; 0x7f0
            humiArray[i] = (s32_t)d_temp.h;
   145d6:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
            presArray[i] = (s32_t)d_temp.p;
   145da:	9a02      	ldr	r2, [sp, #8]
   145dc:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
            if (d_temp.c == true) {
   145e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
   145e4:	2a00      	cmp	r2, #0
   145e6:	d06d      	beq.n	146c4 <process_env_data+0x120>
                qualArray[i] = (s32_t)d_temp.q; // fill array with valid readings
   145e8:	9a03      	ldr	r2, [sp, #12]
            run_count +=1;
   145ea:	f10b 0b01 	add.w	fp, fp, #1
   145ee:	f50d 663b 	add.w	r6, sp, #2992	; 0xbb0
            if ((run_count == (THREAD_INDEX)) && (!thread_started))
   145f2:	f1bb 0fee 	cmp.w	fp, #238	; 0xee
   145f6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
   145fa:	d114      	bne.n	14626 <process_env_data+0x82>
   145fc:	f1ba 0f00 	cmp.w	sl, #0
   14600:	d111      	bne.n	14626 <process_env_data+0x82>
                err = gcloud_provision();
   14602:	f000 f97f 	bl	14904 <gcloud_provision>
                if (err) {
   14606:	b110      	cbz	r0, 1460e <process_env_data+0x6a>
                    sys_reboot(0); //TODO: Handle error
   14608:	4650      	mov	r0, sl
   1460a:	f003 fc61 	bl	17ed0 <sys_reboot>
                err = gcloud_connect(received_config_handler);
   1460e:	4831      	ldr	r0, [pc, #196]	; (146d4 <process_env_data+0x130>)
   14610:	f000 f990 	bl	14934 <gcloud_connect>
                if (err) {
   14614:	2800      	cmp	r0, #0
   14616:	d058      	beq.n	146ca <process_env_data+0x126>
                    sys_reboot(0); //TODO: Handle error
   14618:	2000      	movs	r0, #0
   1461a:	f003 fc59 	bl	17ed0 <sys_reboot>
                run_count = 0;
   1461e:	f04f 0b00 	mov.w	fp, #0
                thread_started = true;
   14622:	f04f 0a01 	mov.w	sl, #1
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   14626:	3401      	adds	r4, #1
   14628:	2cf0      	cmp	r4, #240	; 0xf0
   1462a:	d1c6      	bne.n	145ba <process_env_data+0x16>
        pac_data.ag_temp.avg = calculate_avg_val(tempArray, DATA_ARRAY_SIZE, false);
   1462c:	4621      	mov	r1, r4
   1462e:	2200      	movs	r2, #0
   14630:	4648      	mov	r0, r9
   14632:	f01a f90f 	bl	2e854 <calculate_avg_val>
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false);
   14636:	2200      	movs	r2, #0
        pac_data.ag_temp.avg = calculate_avg_val(tempArray, DATA_ARRAY_SIZE, false);
   14638:	9012      	str	r0, [sp, #72]	; 0x48
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false);
   1463a:	4640      	mov	r0, r8
   1463c:	f01a f90a 	bl	2e854 <calculate_avg_val>
        pac_data.ag_temp.avg = calculate_avg_val(tempArray, DATA_ARRAY_SIZE, false);
   14640:	ad10      	add	r5, sp, #64	; 0x40
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false);
   14642:	6168      	str	r0, [r5, #20]
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false);
   14644:	2200      	movs	r2, #0
   14646:	4638      	mov	r0, r7
   14648:	f01a f904 	bl	2e854 <calculate_avg_val>
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   1464c:	2201      	movs	r2, #1
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false);
   1464e:	6228      	str	r0, [r5, #32]
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   14650:	4630      	mov	r0, r6
   14652:	f01a f8ff 	bl	2e854 <calculate_avg_val>
        pac_data.ag_temp.min = calculate_min_val(tempArray, DATA_ARRAY_SIZE, false);
   14656:	2200      	movs	r2, #0
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   14658:	62e8      	str	r0, [r5, #44]	; 0x2c
        pac_data.ag_temp.min = calculate_min_val(tempArray, DATA_ARRAY_SIZE, false);
   1465a:	4648      	mov	r0, r9
   1465c:	f01a f914 	bl	2e888 <calculate_min_val>
        pac_data.ag_humi.min = calculate_min_val(humiArray, DATA_ARRAY_SIZE, false);
   14660:	2200      	movs	r2, #0
        pac_data.ag_temp.min = calculate_min_val(tempArray, DATA_ARRAY_SIZE, false);
   14662:	6068      	str	r0, [r5, #4]
        pac_data.ag_humi.min = calculate_min_val(humiArray, DATA_ARRAY_SIZE, false);
   14664:	4640      	mov	r0, r8
   14666:	f01a f90f 	bl	2e888 <calculate_min_val>
        pac_data.ag_pres.min = calculate_min_val(presArray, DATA_ARRAY_SIZE, false);
   1466a:	2200      	movs	r2, #0
        pac_data.ag_humi.min = calculate_min_val(humiArray, DATA_ARRAY_SIZE, false);
   1466c:	6128      	str	r0, [r5, #16]
        pac_data.ag_pres.min = calculate_min_val(presArray, DATA_ARRAY_SIZE, false);
   1466e:	4638      	mov	r0, r7
   14670:	f01a f90a 	bl	2e888 <calculate_min_val>
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE, true);
   14674:	2201      	movs	r2, #1
        pac_data.ag_pres.min = calculate_min_val(presArray, DATA_ARRAY_SIZE, false);
   14676:	61e8      	str	r0, [r5, #28]
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE, true);
   14678:	4630      	mov	r0, r6
   1467a:	f01a f905 	bl	2e888 <calculate_min_val>
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   1467e:	2200      	movs	r2, #0
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE, true);
   14680:	62a8      	str	r0, [r5, #40]	; 0x28
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14682:	4648      	mov	r0, r9
   14684:	f01a f90e 	bl	2e8a4 <calculate_max_val>
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14688:	2200      	movs	r2, #0
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   1468a:	6028      	str	r0, [r5, #0]
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   1468c:	4640      	mov	r0, r8
   1468e:	f01a f909 	bl	2e8a4 <calculate_max_val>
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14692:	2200      	movs	r2, #0
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14694:	60e8      	str	r0, [r5, #12]
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14696:	4638      	mov	r0, r7
   14698:	f01a f904 	bl	2e8a4 <calculate_max_val>
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   1469c:	2201      	movs	r2, #1
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   1469e:	61a8      	str	r0, [r5, #24]
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   146a0:	4630      	mov	r0, r6
   146a2:	f01a f8ff 	bl	2e8a4 <calculate_max_val>
        send_env_msg.info = buffer_bytes_used;
   146a6:	2230      	movs	r2, #48	; 0x30
        send_env_msg.tx_block.data = NULL;
   146a8:	2300      	movs	r3, #0
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   146aa:	6268      	str	r0, [r5, #36]	; 0x24
        send_env_msg.size = buffer_bytes_used;
   146ac:	e9cd 2206 	strd	r2, r2, [sp, #24]
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   146b0:	a905      	add	r1, sp, #20
   146b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146b6:	4808      	ldr	r0, [pc, #32]	; (146d8 <process_env_data+0x134>)
        send_env_msg.tx_data = &pac_data;
   146b8:	9508      	str	r5, [sp, #32]
        send_env_msg.tx_block.data = NULL;
   146ba:	930a      	str	r3, [sp, #40]	; 0x28
        send_env_msg.tx_target_thread = K_ANY;
   146bc:	930d      	str	r3, [sp, #52]	; 0x34
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   146be:	f014 f8bf 	bl	28840 <k_mbox_put>
        if (send_env_msg.size < buffer_bytes_used) {
   146c2:	e776      	b.n	145b2 <process_env_data+0xe>
               qualArray[i] = EXCLUDE;  // fill array with magic number
   146c4:	f240 32e7 	movw	r2, #999	; 0x3e7
   146c8:	e78f      	b.n	145ea <process_env_data+0x46>
                run_count = 0;
   146ca:	4683      	mov	fp, r0
   146cc:	e7a9      	b.n	14622 <process_env_data+0x7e>
   146ce:	bf00      	nop
   146d0:	20021030 	.word	0x20021030
   146d4:	0002e845 	.word	0x0002e845
   146d8:	2002101c 	.word	0x2002101c

000146dc <init_env_sensor>:
{
   146dc:	b510      	push	{r4, lr}
	k_work_q_start(&env_sens_q, env_sens_stack_area,
   146de:	4c07      	ldr	r4, [pc, #28]	; (146fc <init_env_sensor+0x20>)
   146e0:	4907      	ldr	r1, [pc, #28]	; (14700 <init_env_sensor+0x24>)
   146e2:	4620      	mov	r0, r4
   146e4:	2307      	movs	r3, #7
   146e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   146ea:	f016 fb71 	bl	2add0 <k_work_q_start>
    err = env_sensors_init_and_start(&env_sens_q, env_data_ready);
   146ee:	4620      	mov	r0, r4
}
   146f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = env_sensors_init_and_start(&env_sens_q, env_data_ready);
   146f4:	4903      	ldr	r1, [pc, #12]	; (14704 <init_env_sensor+0x28>)
   146f6:	f001 bd05 	b.w	16104 <env_sensors_init_and_start>
   146fa:	bf00      	nop
   146fc:	200211c4 	.word	0x200211c4
   14700:	2002b100 	.word	0x2002b100
   14704:	00014519 	.word	0x00014519

00014708 <main>:
}


/**@brief Thread initialisation */
void main(void)
{
   14708:	b530      	push	{r4, r5, lr}

    LOG_INF("Google Cloud env sensor app started");

	k_work_q_start(&app_work_q, wdt_stack_area,
   1470a:	2307      	movs	r3, #7
{
   1470c:	b087      	sub	sp, #28
	k_work_q_start(&app_work_q, wdt_stack_area,
   1470e:	f44f 7200 	mov.w	r2, #512	; 0x200
   14712:	4932      	ldr	r1, [pc, #200]	; (147dc <main+0xd4>)
   14714:	4832      	ldr	r0, [pc, #200]	; (147e0 <main+0xd8>)
   14716:	f016 fb5b 	bl	2add0 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(wdt_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&app_work_q);
   1471a:	4831      	ldr	r0, [pc, #196]	; (147e0 <main+0xd8>)
   1471c:	f002 fb2a 	bl	16d74 <watchdog_init_and_start>
        err = lte_lc_init_and_connect();
   14720:	f01f feac 	bl	3447c <lte_lc_init_and_connect>
        __ASSERT(err == 0, "LTE link could not be established. Rebooting\n");
   14724:	b160      	cbz	r0, 14740 <main+0x38>
   14726:	492f      	ldr	r1, [pc, #188]	; (147e4 <main+0xdc>)
   14728:	23c8      	movs	r3, #200	; 0xc8
   1472a:	4a2f      	ldr	r2, [pc, #188]	; (147e8 <main+0xe0>)
   1472c:	482f      	ldr	r0, [pc, #188]	; (147ec <main+0xe4>)
   1472e:	f01a fd90 	bl	2f252 <printk>
   14732:	482f      	ldr	r0, [pc, #188]	; (147f0 <main+0xe8>)
   14734:	f01a fd8d 	bl	2f252 <printk>
   14738:	21c8      	movs	r1, #200	; 0xc8
   1473a:	482b      	ldr	r0, [pc, #172]	; (147e8 <main+0xe0>)
   1473c:	f01b f88a 	bl	2f854 <assert_post_action>

	LOG_INF("Initializing modem\n");
    modem_configure();

    LOG_INF("Initializing modem info\n");
    modem_info_init();
   14740:	f00a f954 	bl	1e9ec <modem_info_init>

    LOG_INF("Initializing environmental sensor\n");
    init_env_sensor();
   14744:	f7ff ffca 	bl	146dc <init_env_sensor>

    LOG_INF("Initializing bsec data message queue\n");
    k_msgq_init(&env_msg_q, env_msgq_buffer, sizeof(env_d), 10);
   14748:	230a      	movs	r3, #10
   1474a:	2214      	movs	r2, #20
   1474c:	4929      	ldr	r1, [pc, #164]	; (147f4 <main+0xec>)
   1474e:	482a      	ldr	r0, [pc, #168]	; (147f8 <main+0xf0>)
   14750:	f01f ff9e 	bl	34690 <k_msgq_init>

    LOG_INF("Initializing aggregated data mailbox\n");
    k_mbox_init(&env_d_mailbox);
   14754:	4829      	ldr	r0, [pc, #164]	; (147fc <main+0xf4>)
   14756:	f01f ff4f 	bl	345f8 <k_mbox_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1475a:	2400      	movs	r4, #0
   1475c:	2507      	movs	r5, #7
   1475e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   14762:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14766:	e9cd 4400 	strd	r4, r4, [sp]
   1476a:	4b25      	ldr	r3, [pc, #148]	; (14800 <main+0xf8>)
   1476c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14770:	4924      	ldr	r1, [pc, #144]	; (14804 <main+0xfc>)
   14772:	4825      	ldr	r0, [pc, #148]	; (14808 <main+0x100>)
   14774:	f016 fa28 	bl	2abc8 <z_impl_k_thread_create>

    /* Initialise data aggregation thread */
    d_ag_tid = k_thread_create(&data_ag_thread, data_ag_stack_area, K_THREAD_STACK_SIZEOF(data_ag_stack_area),
   14778:	4b24      	ldr	r3, [pc, #144]	; (1480c <main+0x104>)
   1477a:	6018      	str	r0, [r3, #0]
   1477c:	4b24      	ldr	r3, [pc, #144]	; (14810 <main+0x108>)
   1477e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   14782:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14786:	e9cd 4400 	strd	r4, r4, [sp]
   1478a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1478e:	4921      	ldr	r1, [pc, #132]	; (14814 <main+0x10c>)
   14790:	4821      	ldr	r0, [pc, #132]	; (14818 <main+0x110>)
   14792:	f016 fa19 	bl	2abc8 <z_impl_k_thread_create>
        (k_thread_entry_t)process_env_data, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise time pool poll thread */
    ntp_tid = k_thread_create(&ntp_thread, ntp_stack_area, K_THREAD_STACK_SIZEOF(ntp_stack_area),
   14796:	4b21      	ldr	r3, [pc, #132]	; (1481c <main+0x114>)
   14798:	6018      	str	r0, [r3, #0]
   1479a:	4b21      	ldr	r3, [pc, #132]	; (14820 <main+0x118>)
   1479c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   147a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   147a4:	e9cd 4400 	strd	r4, r4, [sp]
   147a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   147ac:	491d      	ldr	r1, [pc, #116]	; (14824 <main+0x11c>)
   147ae:	481e      	ldr	r0, [pc, #120]	; (14828 <main+0x120>)
   147b0:	f016 fa0a 	bl	2abc8 <z_impl_k_thread_create>
        (k_thread_entry_t)ntp_poll, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise Google Cloud thread */
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   147b4:	4b1d      	ldr	r3, [pc, #116]	; (1482c <main+0x124>)
   147b6:	6018      	str	r0, [r3, #0]
   147b8:	4b1d      	ldr	r3, [pc, #116]	; (14830 <main+0x128>)
   147ba:	e9cd 4404 	strd	r4, r4, [sp, #16]
   147be:	e9cd 4502 	strd	r4, r5, [sp, #8]
   147c2:	e9cd 4400 	strd	r4, r4, [sp]
   147c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   147ca:	491a      	ldr	r1, [pc, #104]	; (14834 <main+0x12c>)
   147cc:	481a      	ldr	r0, [pc, #104]	; (14838 <main+0x130>)
   147ce:	f016 f9fb 	bl	2abc8 <z_impl_k_thread_create>
        (k_thread_entry_t)gcloud_thread, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise App thread */
    app_tid = k_thread_create(&app_thread, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area),
   147d2:	4b1a      	ldr	r3, [pc, #104]	; (1483c <main+0x134>)
   147d4:	6018      	str	r0, [r3, #0]
        (k_thread_entry_t)app_gc_iot, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);
   147d6:	b007      	add	sp, #28
   147d8:	bd30      	pop	{r4, r5, pc}
   147da:	bf00      	nop
   147dc:	20030300 	.word	0x20030300
   147e0:	20020e8c 	.word	0x20020e8c
   147e4:	00036bdc 	.word	0x00036bdc
   147e8:	00036bce 	.word	0x00036bce
   147ec:	00036be5 	.word	0x00036be5
   147f0:	00036c02 	.word	0x00036c02
   147f4:	2002105c 	.word	0x2002105c
   147f8:	20021030 	.word	0x20021030
   147fc:	2002101c 	.word	0x2002101c
   14800:	000145a5 	.word	0x000145a5
   14804:	2002d100 	.word	0x2002d100
   14808:	20020f64 	.word	0x20020f64
   1480c:	20020f60 	.word	0x20020f60
   14810:	00014581 	.word	0x00014581
   14814:	20030100 	.word	0x20030100
   14818:	20021354 	.word	0x20021354
   1481c:	2002140c 	.word	0x2002140c
   14820:	00014aad 	.word	0x00014aad
   14824:	2002f100 	.word	0x2002f100
   14828:	20021298 	.word	0x20021298
   1482c:	20021350 	.word	0x20021350
   14830:	00012091 	.word	0x00012091
   14834:	20029100 	.word	0x20029100
   14838:	20020dd0 	.word	0x20020dd0
   1483c:	20020e88 	.word	0x20020e88

00014840 <reconnect_timer_handler>:
        LOG_ERR("k_msgq_put (input_timeout) failed: [%d] %s", err, strerror(-err));
        // TODO: Find a way to report this error to the application.
    }
}

void reconnect_timer_handler(struct k_timer *timer_id) {
   14840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct gcloud_event cmd = {
   14842:	2218      	movs	r2, #24
   14844:	2100      	movs	r1, #0
   14846:	4668      	mov	r0, sp
   14848:	f020 f924 	bl	34a94 <memset>
   1484c:	2305      	movs	r3, #5
   1484e:	f88d 3000 	strb.w	r3, [sp]
	return z_impl_k_msgq_put(msgq, data, timeout);
   14852:	2200      	movs	r2, #0
   14854:	4669      	mov	r1, sp
   14856:	4803      	ldr	r0, [pc, #12]	; (14864 <reconnect_timer_handler+0x24>)
   14858:	f014 f9ac 	bl	28bb4 <z_impl_k_msgq_put>

    if (err) {
        LOG_ERR("k_msgq_put (reconnect_timeout) failed: [%d] %s", err, strerror(err));
        // TODO: Find a way to report this error to the application.
    }
}
   1485c:	b007      	add	sp, #28
   1485e:	f85d fb04 	ldr.w	pc, [sp], #4
   14862:	bf00      	nop
   14864:	20020708 	.word	0x20020708

00014868 <make_jwt.constprop.0>:
static int make_jwt(char *buffer, size_t buffer_size) {
   14868:	b510      	push	{r4, lr}
   1486a:	b088      	sub	sp, #32
    err = jwt_init_builder(&jb, buffer, buffer_size);
   1486c:	f44f 7280 	mov.w	r2, #256	; 0x100
   14870:	4915      	ldr	r1, [pc, #84]	; (148c8 <make_jwt.constprop.0+0x60>)
   14872:	a803      	add	r0, sp, #12
   14874:	f007 ffbe 	bl	1c7f4 <jwt_init_builder>
    if (err != 0) {
   14878:	bb20      	cbnz	r0, 148c4 <make_jwt.constprop.0+0x5c>
    date_time_now(&ntp);
   1487a:	4668      	mov	r0, sp
   1487c:	f01f fe1a 	bl	344b4 <date_time_now>
    s64_t unixtime = (ntp/1000);
   14880:	e9dd 0100 	ldrd	r0, r1, [sp]
   14884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14888:	2300      	movs	r3, #0
   1488a:	f7f8 ff21 	bl	d6d0 <__aeabi_ldivmod>
   1488e:	4604      	mov	r4, r0
    printk("UNIX TIMESTAMP: %d\n", y);
   14890:	4601      	mov	r1, r0
   14892:	480e      	ldr	r0, [pc, #56]	; (148cc <make_jwt.constprop.0+0x64>)
   14894:	f01a fcdd 	bl	2f252 <printk>
    err = jwt_add_payload(&jb, expiry_time, issue_time, CONFIG_GCLOUD_PROJECT_NAME);
   14898:	f504 4128 	add.w	r1, r4, #43008	; 0xa800
   1489c:	4b0c      	ldr	r3, [pc, #48]	; (148d0 <make_jwt.constprop.0+0x68>)
   1489e:	4622      	mov	r2, r4
   148a0:	31c0      	adds	r1, #192	; 0xc0
   148a2:	a803      	add	r0, sp, #12
   148a4:	f007 ff38 	bl	1c718 <jwt_add_payload>
    if (err != 0) {
   148a8:	b960      	cbnz	r0, 148c4 <make_jwt.constprop.0+0x5c>
    err = jwt_sign(&jb, zepfull_private_der, zepfull_private_der_len);
   148aa:	4b0a      	ldr	r3, [pc, #40]	; (148d4 <make_jwt.constprop.0+0x6c>)
   148ac:	490a      	ldr	r1, [pc, #40]	; (148d8 <make_jwt.constprop.0+0x70>)
   148ae:	681a      	ldr	r2, [r3, #0]
   148b0:	a803      	add	r0, sp, #12
   148b2:	f007 ff4d 	bl	1c750 <jwt_sign>
    if (err != 0) {
   148b6:	b928      	cbnz	r0, 148c4 <make_jwt.constprop.0+0x5c>
    if (jb.overflowed != 0) {
   148b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   148bc:	2b00      	cmp	r3, #0
        return -ENOMEM;
   148be:	bf18      	it	ne
   148c0:	f06f 000b 	mvnne.w	r0, #11
}
   148c4:	b008      	add	sp, #32
   148c6:	bd10      	pop	{r4, pc}
   148c8:	20027561 	.word	0x20027561
   148cc:	00036f28 	.word	0x00036f28
   148d0:	00036f3c 	.word	0x00036f3c
   148d4:	20020084 	.word	0x20020084
   148d8:	200203b4 	.word	0x200203b4

000148dc <input_timer_handler>:
void input_timer_handler(struct k_timer *timer_id) {
   148dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct gcloud_event cmd = {
   148de:	2218      	movs	r2, #24
   148e0:	2100      	movs	r1, #0
   148e2:	4668      	mov	r0, sp
   148e4:	f020 f8d6 	bl	34a94 <memset>
   148e8:	2301      	movs	r3, #1
   148ea:	f88d 3000 	strb.w	r3, [sp]
   148ee:	2200      	movs	r2, #0
   148f0:	4669      	mov	r1, sp
   148f2:	4803      	ldr	r0, [pc, #12]	; (14900 <input_timer_handler+0x24>)
   148f4:	f014 f95e 	bl	28bb4 <z_impl_k_msgq_put>
}
   148f8:	b007      	add	sp, #28
   148fa:	f85d fb04 	ldr.w	pc, [sp], #4
   148fe:	bf00      	nop
   14900:	20020708 	.word	0x20020708

00014904 <gcloud_provision>:
int gcloud_provision(void) {
   14904:	b510      	push	{r4, lr}
   14906:	2400      	movs	r4, #0
        err = modem_key_mgmt_delete(sec_tag, type);
   14908:	b2e1      	uxtb	r1, r4
   1490a:	4808      	ldr	r0, [pc, #32]	; (1492c <gcloud_provision+0x28>)
   1490c:	3401      	adds	r4, #1
   1490e:	f00a f919 	bl	1eb44 <modem_key_mgmt_delete>
    for (enum modem_key_mgnt_cred_type type = 0; type < 5; type++) {
   14912:	2c05      	cmp	r4, #5
   14914:	d1f8      	bne.n	14908 <gcloud_provision+0x4>
    err = modem_key_mgmt_write(
   14916:	4806      	ldr	r0, [pc, #24]	; (14930 <gcloud_provision+0x2c>)
   14918:	f7fd fbb2 	bl	12080 <strlen>
}
   1491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = modem_key_mgmt_write(
   14920:	4603      	mov	r3, r0
   14922:	4a03      	ldr	r2, [pc, #12]	; (14930 <gcloud_provision+0x2c>)
   14924:	2100      	movs	r1, #0
   14926:	4801      	ldr	r0, [pc, #4]	; (1492c <gcloud_provision+0x28>)
   14928:	f00a b8d4 	b.w	1ead4 <modem_key_mgmt_write>
   1492c:	01010000 	.word	0x01010000
   14930:	00036c32 	.word	0x00036c32

00014934 <gcloud_connect>:
int gcloud_connect(received_config_handler_t received_config_cb) {
   14934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    received_config_handler = received_config_cb;
   14936:	4b08      	ldr	r3, [pc, #32]	; (14958 <gcloud_connect+0x24>)
    struct gcloud_event msg = {
   14938:	2218      	movs	r2, #24
    received_config_handler = received_config_cb;
   1493a:	6018      	str	r0, [r3, #0]
    struct gcloud_event msg = {
   1493c:	2100      	movs	r1, #0
   1493e:	4668      	mov	r0, sp
   14940:	f020 f8a8 	bl	34a94 <memset>
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   14944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14948:	4669      	mov	r1, sp
   1494a:	4804      	ldr	r0, [pc, #16]	; (1495c <gcloud_connect+0x28>)
   1494c:	f019 fff2 	bl	2e934 <k_msgq_put_atomic>
}
   14950:	b007      	add	sp, #28
   14952:	f85d fb04 	ldr.w	pc, [sp], #4
   14956:	bf00      	nop
   14958:	20021490 	.word	0x20021490
   1495c:	20020708 	.word	0x20020708

00014960 <gcloud_publish>:
{
   14960:	b570      	push	{r4, r5, r6, lr}
    if (!connected) {
   14962:	4b0f      	ldr	r3, [pc, #60]	; (149a0 <gcloud_publish+0x40>)
{
   14964:	b086      	sub	sp, #24
    if (!connected) {
   14966:	781b      	ldrb	r3, [r3, #0]
{
   14968:	4605      	mov	r5, r0
   1496a:	460c      	mov	r4, r1
   1496c:	4616      	mov	r6, r2
    if (!connected) {
   1496e:	b19b      	cbz	r3, 14998 <gcloud_publish+0x38>
    struct gcloud_event cmd = {
   14970:	2304      	movs	r3, #4
   14972:	480c      	ldr	r0, [pc, #48]	; (149a4 <gcloud_publish+0x44>)
   14974:	f88d 3000 	strb.w	r3, [sp]
   14978:	9001      	str	r0, [sp, #4]
                    .size = strlen(GCLOUD_TOPIC)
   1497a:	f7fd fb81 	bl	12080 <strlen>
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   1497e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    struct gcloud_event cmd = {
   14982:	9002      	str	r0, [sp, #8]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   14984:	4669      	mov	r1, sp
   14986:	4808      	ldr	r0, [pc, #32]	; (149a8 <gcloud_publish+0x48>)
    struct gcloud_event cmd = {
   14988:	f88d 600c 	strb.w	r6, [sp, #12]
   1498c:	e9cd 5404 	strd	r5, r4, [sp, #16]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   14990:	f019 ffd0 	bl	2e934 <k_msgq_put_atomic>
}
   14994:	b006      	add	sp, #24
   14996:	bd70      	pop	{r4, r5, r6, pc}
        return -ENOTCONN;
   14998:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1499c:	e7fa      	b.n	14994 <gcloud_publish+0x34>
   1499e:	bf00      	nop
   149a0:	2002755f 	.word	0x2002755f
   149a4:	00036e68 	.word	0x00036e68
   149a8:	20020708 	.word	0x20020708

000149ac <mqtt_event_handler>:

static void mqtt_event_handler(struct mqtt_client *client,
                const struct mqtt_evt *evt)
{
   149ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;
    LOG_INF("MQTT event: %d", evt->type);

    switch (evt->type) {
   149ae:	780b      	ldrb	r3, [r1, #0]
{
   149b0:	b089      	sub	sp, #36	; 0x24
   149b2:	460c      	mov	r4, r1
    switch (evt->type) {
   149b4:	2b04      	cmp	r3, #4
   149b6:	d809      	bhi.n	149cc <mqtt_event_handler+0x20>
   149b8:	e8df f003 	tbb	[pc, r3]
   149bc:	08234a03 	.word	0x08234a03
   149c0:	5f          	.byte	0x5f
   149c1:	00          	.byte	0x00
        /* Response to connack request */
        case MQTT_EVT_CONNACK:
            LOG_DBG("Got CONNACK");
            if (evt->result != 0) {
   149c2:	69cc      	ldr	r4, [r1, #28]
   149c4:	b124      	cbz	r4, 149d0 <mqtt_event_handler+0x24>
                LOG_ERR("MQTT connect failed: [%d] %s", err, strerror(err));
                sys_reboot(0); //TODO: Handle error
   149c6:	2000      	movs	r0, #0
   149c8:	f003 fa82 	bl	17ed0 <sys_reboot>
        
        default:
            LOG_ERR("Unknown mqtt event type");
            break;
    }
}
   149cc:	b009      	add	sp, #36	; 0x24
   149ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            connected = true;
   149d0:	2201      	movs	r2, #1
   149d2:	4b2f      	ldr	r3, [pc, #188]	; (14a90 <mqtt_event_handler+0xe4>)
   149d4:	701a      	strb	r2, [r3, #0]
            connecting = false;
   149d6:	4b2f      	ldr	r3, [pc, #188]	; (14a94 <mqtt_event_handler+0xe8>)
   149d8:	701c      	strb	r4, [r3, #0]
	z_impl_k_timer_start(timer, duration, period);
   149da:	4a2f      	ldr	r2, [pc, #188]	; (14a98 <mqtt_event_handler+0xec>)
   149dc:	482f      	ldr	r0, [pc, #188]	; (14a9c <mqtt_event_handler+0xf0>)
   149de:	4611      	mov	r1, r2
   149e0:	f016 fe50 	bl	2b684 <z_impl_k_timer_start>
            struct gcloud_event cmd = {
   149e4:	4621      	mov	r1, r4
   149e6:	2218      	movs	r2, #24
   149e8:	4668      	mov	r0, sp
   149ea:	f020 f853 	bl	34a94 <memset>
   149ee:	2307      	movs	r3, #7
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   149f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   149f4:	4669      	mov	r1, sp
   149f6:	482a      	ldr	r0, [pc, #168]	; (14aa0 <mqtt_event_handler+0xf4>)
            struct gcloud_event cmd = {
   149f8:	f88d 3000 	strb.w	r3, [sp]
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   149fc:	f019 ff9a 	bl	2e934 <k_msgq_put_atomic>
            if (err) {
   14a00:	e7e4      	b.n	149cc <mqtt_event_handler+0x20>
            if (evt->param.publish.message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   14a02:	7b0b      	ldrb	r3, [r1, #12]
   14a04:	2b01      	cmp	r3, #1
   14a06:	d105      	bne.n	14a14 <mqtt_event_handler+0x68>
                const struct mqtt_puback_param ack = {
   14a08:	8b0b      	ldrh	r3, [r1, #24]
                mqtt_publish_qos1_ack(client, &ack);
   14a0a:	4669      	mov	r1, sp
                const struct mqtt_puback_param ack = {
   14a0c:	f8ad 3000 	strh.w	r3, [sp]
                mqtt_publish_qos1_ack(client, &ack);
   14a10:	f01e fd76 	bl	33500 <mqtt_publish_qos1_ack>
            if(evt->param.publish.message.payload.len <= 2) {
   14a14:	6967      	ldr	r7, [r4, #20]
   14a16:	2f02      	cmp	r7, #2
   14a18:	d9d8      	bls.n	149cc <mqtt_event_handler+0x20>
            struct mqtt_evt event = *evt;
   14a1a:	466d      	mov	r5, sp
   14a1c:	4626      	mov	r6, r4
   14a1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   14a26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            char * str = calloc(evt->param.publish.message.payload.len, sizeof(char) + 1);
   14a2a:	2102      	movs	r1, #2
   14a2c:	4638      	mov	r0, r7
   14a2e:	f019 f813 	bl	2da58 <calloc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14a32:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   14a36:	4605      	mov	r5, r0
   14a38:	f01f fff2 	bl	34a20 <memcpy>
            if (received_config_handler != NULL) {
   14a3c:	4b19      	ldr	r3, [pc, #100]	; (14aa4 <mqtt_event_handler+0xf8>)
            event.param.publish.message.payload.data = str;
   14a3e:	9504      	str	r5, [sp, #16]
            if (received_config_handler != NULL) {
   14a40:	681b      	ldr	r3, [r3, #0]
   14a42:	b10b      	cbz	r3, 14a48 <mqtt_event_handler+0x9c>
                received_config_handler(&event.param.publish.message);
   14a44:	a801      	add	r0, sp, #4
   14a46:	4798      	blx	r3
            free(str);
   14a48:	4628      	mov	r0, r5
   14a4a:	f019 f815 	bl	2da78 <free>
            break;
   14a4e:	e7bd      	b.n	149cc <mqtt_event_handler+0x20>
	z_impl_k_timer_stop(timer);
   14a50:	4815      	ldr	r0, [pc, #84]	; (14aa8 <mqtt_event_handler+0xfc>)
   14a52:	f01f ff4b 	bl	348ec <z_impl_k_timer_stop>
   14a56:	4811      	ldr	r0, [pc, #68]	; (14a9c <mqtt_event_handler+0xf0>)
   14a58:	f01f ff48 	bl	348ec <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
   14a5c:	4810      	ldr	r0, [pc, #64]	; (14aa0 <mqtt_event_handler+0xf4>)
   14a5e:	f014 f9e9 	bl	28e34 <z_impl_k_msgq_purge>
            if (connected || connecting) {
   14a62:	4b0b      	ldr	r3, [pc, #44]	; (14a90 <mqtt_event_handler+0xe4>)
   14a64:	781b      	ldrb	r3, [r3, #0]
   14a66:	b91b      	cbnz	r3, 14a70 <mqtt_event_handler+0xc4>
   14a68:	4b0a      	ldr	r3, [pc, #40]	; (14a94 <mqtt_event_handler+0xe8>)
   14a6a:	781b      	ldrb	r3, [r3, #0]
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d0ad      	beq.n	149cc <mqtt_event_handler+0x20>
                err = gcloud_connect(received_config_handler);
   14a70:	4b0c      	ldr	r3, [pc, #48]	; (14aa4 <mqtt_event_handler+0xf8>)
   14a72:	6818      	ldr	r0, [r3, #0]
   14a74:	f7ff ff5e 	bl	14934 <gcloud_connect>
                if (err) {
   14a78:	e7a8      	b.n	149cc <mqtt_event_handler+0x20>
            if (evt->result != 0) {
   14a7a:	69cb      	ldr	r3, [r1, #28]
   14a7c:	2b00      	cmp	r3, #0
   14a7e:	d1a5      	bne.n	149cc <mqtt_event_handler+0x20>
            const struct mqtt_pubrel_param rel_param = {
   14a80:	888b      	ldrh	r3, [r1, #4]
            err = mqtt_publish_qos2_release(client, &rel_param);
   14a82:	4669      	mov	r1, sp
            const struct mqtt_pubrel_param rel_param = {
   14a84:	f8ad 3000 	strh.w	r3, [sp]
            err = mqtt_publish_qos2_release(client, &rel_param);
   14a88:	f01e fd61 	bl	3354e <mqtt_publish_qos2_release>
}
   14a8c:	e79e      	b.n	149cc <mqtt_event_handler+0x20>
   14a8e:	bf00      	nop
   14a90:	2002755f 	.word	0x2002755f
   14a94:	20027560 	.word	0x20027560
   14a98:	02932e00 	.word	0x02932e00
   14a9c:	20020590 	.word	0x20020590
   14aa0:	20020708 	.word	0x20020708
   14aa4:	20021490 	.word	0x20021490
   14aa8:	20020564 	.word	0x20020564

00014aac <gcloud_thread>:

extern void gcloud_thread(void *unused1, void *unused2, void *unused3) 
{
   14aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool sent_flag = false;

    struct gcloud_event event;
    struct mqtt_publish_param msg;

    k_timer_init(&input_timer, input_timer_handler, NULL);
   14ab0:	2200      	movs	r2, #0
{
   14ab2:	b09e      	sub	sp, #120	; 0x78
    k_timer_init(&input_timer, input_timer_handler, NULL);
   14ab4:	4963      	ldr	r1, [pc, #396]	; (14c44 <gcloud_thread+0x198>)
   14ab6:	4864      	ldr	r0, [pc, #400]	; (14c48 <gcloud_thread+0x19c>)
   14ab8:	f01f ff0c 	bl	348d4 <k_timer_init>
    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   14abc:	2200      	movs	r2, #0
   14abe:	4963      	ldr	r1, [pc, #396]	; (14c4c <gcloud_thread+0x1a0>)
   14ac0:	4863      	ldr	r0, [pc, #396]	; (14c50 <gcloud_thread+0x1a4>)
   14ac2:	f01f ff07 	bl	348d4 <k_timer_init>

    while (true) {
        printk("Google Cloud Thread Running\n");
   14ac6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 14c8c <gcloud_thread+0x1e0>

        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   14aca:	4f62      	ldr	r7, [pc, #392]	; (14c54 <gcloud_thread+0x1a8>)
                }

            };
            break;
            case SUBSCRIBE:
            if (connected) {
   14acc:	4e62      	ldr	r6, [pc, #392]	; (14c58 <gcloud_thread+0x1ac>)
        printk("Google Cloud Thread Running\n");
   14ace:	4640      	mov	r0, r8
   14ad0:	f01a fbbf 	bl	2f252 <printk>
        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   14ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ad8:	a902      	add	r1, sp, #8
   14ada:	4638      	mov	r0, r7
   14adc:	f019 ff1a 	bl	2e914 <k_msgq_get_atomic>
        switch (event.type) {
   14ae0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14ae4:	2b07      	cmp	r3, #7
   14ae6:	d8f2      	bhi.n	14ace <gcloud_thread+0x22>
   14ae8:	e8df f003 	tbb	[pc, r3]
   14aec:	6d666204 	.word	0x6d666204
   14af0:	9c85856d 	.word	0x9c85856d
    struct addrinfo hints = {
   14af4:	2401      	movs	r4, #1
   14af6:	2240      	movs	r2, #64	; 0x40
   14af8:	2100      	movs	r1, #0
   14afa:	a80e      	add	r0, sp, #56	; 0x38
   14afc:	f01f ffca 	bl	34a94 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   14b00:	ab01      	add	r3, sp, #4
   14b02:	aa0e      	add	r2, sp, #56	; 0x38
   14b04:	2100      	movs	r1, #0
   14b06:	4855      	ldr	r0, [pc, #340]	; (14c5c <gcloud_thread+0x1b0>)
   14b08:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   14b0c:	f01a fee0 	bl	2f8d0 <zsock_getaddrinfo>
    if (err) {
   14b10:	b970      	cbnz	r0, 14b30 <gcloud_thread+0x84>
    addr = result;
   14b12:	9801      	ldr	r0, [sp, #4]
    while (addr != NULL) {
   14b14:	b150      	cbz	r0, 14b2c <gcloud_thread+0x80>
        if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   14b16:	6943      	ldr	r3, [r0, #20]
   14b18:	2b08      	cmp	r3, #8
   14b1a:	d107      	bne.n	14b2c <gcloud_thread+0x80>
                ->sin_addr.s_addr;
   14b1c:	6983      	ldr	r3, [r0, #24]
   14b1e:	685a      	ldr	r2, [r3, #4]
            broker4->sin_addr.s_addr =
   14b20:	4b4f      	ldr	r3, [pc, #316]	; (14c60 <gcloud_thread+0x1b4>)
   14b22:	605a      	str	r2, [r3, #4]
            broker4->sin_port = htons(BROKER_PORT);
   14b24:	f24b 3222 	movw	r2, #45858	; 0xb322
            broker4->sin_family = AF_INET;
   14b28:	801c      	strh	r4, [r3, #0]
            broker4->sin_port = htons(BROKER_PORT);
   14b2a:	805a      	strh	r2, [r3, #2]
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   14b2c:	f01a fed2 	bl	2f8d4 <zsock_freeaddrinfo>
    mqtt_client_init(&client);
   14b30:	4c4c      	ldr	r4, [pc, #304]	; (14c64 <gcloud_thread+0x1b8>)
                make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   14b32:	f7ff fe99 	bl	14868 <make_jwt.constprop.0>
    mqtt_client_init(&client);
   14b36:	4620      	mov	r0, r4
   14b38:	f01e fc40 	bl	333bc <mqtt_client_init>
    int err = make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   14b3c:	f7ff fe94 	bl	14868 <make_jwt.constprop.0>
    if (err != 0) {
   14b40:	bb48      	cbnz	r0, 14b96 <gcloud_thread+0xea>
    jwt_token.size = strlen(jwt_buffer);
   14b42:	4849      	ldr	r0, [pc, #292]	; (14c68 <gcloud_thread+0x1bc>)
   14b44:	f7fd fa9c 	bl	12080 <strlen>
   14b48:	4d48      	ldr	r5, [pc, #288]	; (14c6c <gcloud_thread+0x1c0>)
    client.broker = &mqtt_broker;
   14b4a:	4b45      	ldr	r3, [pc, #276]	; (14c60 <gcloud_thread+0x1b4>)
    jwt_token.size = strlen(jwt_buffer);
   14b4c:	6068      	str	r0, [r5, #4]
    client.broker = &mqtt_broker;
   14b4e:	6523      	str	r3, [r4, #80]	; 0x50
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   14b50:	4847      	ldr	r0, [pc, #284]	; (14c70 <gcloud_thread+0x1c4>)
    client.evt_cb = mqtt_event_handler;
   14b52:	4b48      	ldr	r3, [pc, #288]	; (14c74 <gcloud_thread+0x1c8>)
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   14b54:	64a0      	str	r0, [r4, #72]	; 0x48
    client.evt_cb = mqtt_event_handler;
   14b56:	6663      	str	r3, [r4, #100]	; 0x64
    client.client_id.size = strlen(GCLOUD_ID);
   14b58:	f7fd fa92 	bl	12080 <strlen>
	client.user_name = &username;
   14b5c:	4b46      	ldr	r3, [pc, #280]	; (14c78 <gcloud_thread+0x1cc>)
    client.client_id.size = strlen(GCLOUD_ID);
   14b5e:	64e0      	str	r0, [r4, #76]	; 0x4c
	client.user_name = &username;
   14b60:	6563      	str	r3, [r4, #84]	; 0x54
    client.protocol_version = MQTT_VERSION_3_1_1;
   14b62:	2304      	movs	r3, #4
   14b64:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   14b68:	4b44      	ldr	r3, [pc, #272]	; (14c7c <gcloud_thread+0x1d0>)
	client.password = &jwt_token;
   14b6a:	65a5      	str	r5, [r4, #88]	; 0x58
	client.rx_buf = rx_buffer;
   14b6c:	66a3      	str	r3, [r4, #104]	; 0x68
    client.rx_buf_size = 512;
   14b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
   14b72:	66e3      	str	r3, [r4, #108]	; 0x6c
	client.tx_buf = tx_buffer;
   14b74:	4b42      	ldr	r3, [pc, #264]	; (14c80 <gcloud_thread+0x1d4>)
   14b76:	6723      	str	r3, [r4, #112]	; 0x70
    client.tx_buf_size = 1024;
   14b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14b7c:	6763      	str	r3, [r4, #116]	; 0x74
	client.transport.type = MQTT_TRANSPORT_SECURE;
   14b7e:	2301      	movs	r3, #1
   14b80:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    client.clean_session = 1;
   14b84:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   14b88:	f043 0302 	orr.w	r3, r3, #2
   14b8c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    client.keepalive = 120;
   14b90:	2378      	movs	r3, #120	; 0x78
   14b92:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	z_impl_k_timer_start(timer, duration, period);
   14b96:	f242 7210 	movw	r2, #10000	; 0x2710
   14b9a:	482b      	ldr	r0, [pc, #172]	; (14c48 <gcloud_thread+0x19c>)
   14b9c:	4611      	mov	r1, r2
   14b9e:	f016 fd71 	bl	2b684 <z_impl_k_timer_start>
                connecting = true;
   14ba2:	2201      	movs	r2, #1
   14ba4:	4b37      	ldr	r3, [pc, #220]	; (14c84 <gcloud_thread+0x1d8>)
                err = mqtt_connect(&client);
   14ba6:	482f      	ldr	r0, [pc, #188]	; (14c64 <gcloud_thread+0x1b8>)
                connecting = true;
   14ba8:	701a      	strb	r2, [r3, #0]
                err = mqtt_connect(&client);
   14baa:	f01e fc20 	bl	333ee <mqtt_connect>
                if (err) {
   14bae:	e78e      	b.n	14ace <gcloud_thread+0x22>
                err = mqtt_input(&client);
   14bb0:	482c      	ldr	r0, [pc, #176]	; (14c64 <gcloud_thread+0x1b8>)
   14bb2:	f01e fd95 	bl	336e0 <mqtt_input>
                if (err) {
   14bb6:	e78a      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bb8:	7833      	ldrb	r3, [r6, #0]
   14bba:	2b00      	cmp	r3, #0
   14bbc:	d087      	beq.n	14ace <gcloud_thread+0x22>
                err = mqtt_live(&client);
   14bbe:	4829      	ldr	r0, [pc, #164]	; (14c64 <gcloud_thread+0x1b8>)
   14bc0:	f01e fd67 	bl	33692 <mqtt_live>
                if (err) {
   14bc4:	e783      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bc6:	7833      	ldrb	r3, [r6, #0]
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d080      	beq.n	14ace <gcloud_thread+0x22>
                msg.message = event.param.publish;
   14bcc:	ac08      	add	r4, sp, #32
   14bce:	ad03      	add	r5, sp, #12
   14bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14bd4:	682b      	ldr	r3, [r5, #0]
   14bd6:	6023      	str	r3, [r4, #0]
                msg.message_id = sys_rand32_get();
   14bd8:	f007 fd5e 	bl	1c698 <sys_rand32_get>
                msg.dup_flag = 0;
   14bdc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
                msg.message_id = sys_rand32_get();
   14be0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                msg.dup_flag = 0;
   14be4:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   14be8:	a908      	add	r1, sp, #32
   14bea:	481e      	ldr	r0, [pc, #120]	; (14c64 <gcloud_thread+0x1b8>)
                msg.dup_flag = 0;
   14bec:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
                err = mqtt_publish(&client, &msg);
   14bf0:	f01e fc41 	bl	33476 <mqtt_publish>
                LOG_ERR("Unknown event type received");
                // TODO: Find a way to report this error to the application.
        }
        /* If a message has been sent */
        if (sent_flag == true) {
           sent_flag = false;
   14bf4:	e76b      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14bf6:	7833      	ldrb	r3, [r6, #0]
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	f43f af68 	beq.w	14ace <gcloud_thread+0x22>
	z_impl_k_timer_stop(timer);
   14bfe:	4814      	ldr	r0, [pc, #80]	; (14c50 <gcloud_thread+0x1a4>)
   14c00:	f01f fe74 	bl	348ec <z_impl_k_timer_stop>
                err = mqtt_disconnect(&client);
   14c04:	4817      	ldr	r0, [pc, #92]	; (14c64 <gcloud_thread+0x1b8>)
   14c06:	f01e fcc9 	bl	3359c <mqtt_disconnect>
	z_impl_k_msgq_purge(msgq);
   14c0a:	4638      	mov	r0, r7
   14c0c:	f014 f912 	bl	28e34 <z_impl_k_msgq_purge>
                connected = false;
   14c10:	2200      	movs	r2, #0
                if (event.type == DISCONNECT) {
   14c12:	f89d 3008 	ldrb.w	r3, [sp, #8]
                connected = false;
   14c16:	7032      	strb	r2, [r6, #0]
                if (event.type == DISCONNECT) {
   14c18:	2b06      	cmp	r3, #6
                    connecting = true;
   14c1a:	bf18      	it	ne
   14c1c:	2201      	movne	r2, #1
   14c1e:	4b19      	ldr	r3, [pc, #100]	; (14c84 <gcloud_thread+0x1d8>)
   14c20:	701a      	strb	r2, [r3, #0]
   14c22:	e754      	b.n	14ace <gcloud_thread+0x22>
            if (connected) {
   14c24:	7833      	ldrb	r3, [r6, #0]
   14c26:	2b00      	cmp	r3, #0
   14c28:	f43f af51 	beq.w	14ace <gcloud_thread+0x22>
    const struct mqtt_subscription_list subscriptions = {
   14c2c:	4a16      	ldr	r2, [pc, #88]	; (14c88 <gcloud_thread+0x1dc>)
   14c2e:	ab0e      	add	r3, sp, #56	; 0x38
   14c30:	e892 0003 	ldmia.w	r2, {r0, r1}
   14c34:	e883 0003 	stmia.w	r3, {r0, r1}
    return mqtt_subscribe(&client, &subscriptions);
   14c38:	4619      	mov	r1, r3
   14c3a:	480a      	ldr	r0, [pc, #40]	; (14c64 <gcloud_thread+0x1b8>)
   14c3c:	f01e fcd7 	bl	335ee <mqtt_subscribe>
   14c40:	e745      	b.n	14ace <gcloud_thread+0x22>
   14c42:	bf00      	nop
   14c44:	000148dd 	.word	0x000148dd
   14c48:	20020564 	.word	0x20020564
   14c4c:	00014841 	.word	0x00014841
   14c50:	20020590 	.word	0x20020590
   14c54:	20020708 	.word	0x20020708
   14c58:	2002755f 	.word	0x2002755f
   14c5c:	00036ea9 	.word	0x00036ea9
   14c60:	2002754c 	.word	0x2002754c
   14c64:	20021410 	.word	0x20021410
   14c68:	20027561 	.word	0x20027561
   14c6c:	2002006c 	.word	0x2002006c
   14c70:	00036ebd 	.word	0x00036ebd
   14c74:	000149ad 	.word	0x000149ad
   14c78:	20020074 	.word	0x20020074
   14c7c:	20027661 	.word	0x20027661
   14c80:	20027a61 	.word	0x20027a61
   14c84:	20027560 	.word	0x20027560
   14c88:	000357f0 	.word	0x000357f0
   14c8c:	00036e8c 	.word	0x00036e8c

00014c90 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = {0x00, 0x00, 0xC0, 0xE0,
					       0xF0, 0xF8, 0xFC};
static const char *parse_string(cJSON *item, const char *str)
{
   14c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const char *ptr = str + 1;
	char *ptr2;
	char *out;
	int len = 0;
	unsigned uc, uc2;
	if (*str != '\"') {
   14c94:	780b      	ldrb	r3, [r1, #0]
{
   14c96:	4606      	mov	r6, r0
	if (*str != '\"') {
   14c98:	2b22      	cmp	r3, #34	; 0x22
   14c9a:	d12b      	bne.n	14cf4 <parse_string+0x64>
	const char *ptr = str + 1;
   14c9c:	f101 0901 	add.w	r9, r1, #1
   14ca0:	464b      	mov	r3, r9
   14ca2:	2400      	movs	r4, #0
		ep = str;
		return 0;
	} /* not a string! */

	while (*ptr != '\"' && *ptr && ++len)
   14ca4:	781a      	ldrb	r2, [r3, #0]
   14ca6:	4620      	mov	r0, r4
   14ca8:	2a22      	cmp	r2, #34	; 0x22
   14caa:	d003      	beq.n	14cb4 <parse_string+0x24>
   14cac:	b112      	cbz	r2, 14cb4 <parse_string+0x24>
   14cae:	1c60      	adds	r0, r4, #1
   14cb0:	d126      	bne.n	14d00 <parse_string+0x70>
   14cb2:	2000      	movs	r0, #0
		if (*ptr++ == '\\')
			ptr++; /* Skip escaped quotes. */

	out = (char *)cJSON_malloc(
   14cb4:	4b5b      	ldr	r3, [pc, #364]	; (14e24 <parse_string+0x194>)
   14cb6:	3001      	adds	r0, #1
   14cb8:	681b      	ldr	r3, [r3, #0]
   14cba:	4798      	blx	r3
		len +
		1); /* This is how long we need for the string, roughly. */
	if (!out)
   14cbc:	4607      	mov	r7, r0
   14cbe:	b1e0      	cbz	r0, 14cfa <parse_string+0x6a>
   14cc0:	4604      	mov	r4, r0
				break;
			case 'f':
				*ptr2++ = '\f';
				break;
			case 'n':
				*ptr2++ = '\n';
   14cc2:	f04f 0a0a 	mov.w	sl, #10
				break;
			case 'r':
				*ptr2++ = '\r';
				break;
			case 't':
				*ptr2++ = '\t';
   14cc6:	f04f 0809 	mov.w	r8, #9
				*ptr2++ = '\r';
   14cca:	f04f 0b0d 	mov.w	fp, #13
	while (*ptr != '\"' && *ptr) {
   14cce:	f899 3000 	ldrb.w	r3, [r9]
   14cd2:	2b22      	cmp	r3, #34	; 0x22
   14cd4:	d000      	beq.n	14cd8 <parse_string+0x48>
   14cd6:	b9cb      	cbnz	r3, 14d0c <parse_string+0x7c>
				break;
			}
			ptr++;
		}
	}
	*ptr2 = 0;
   14cd8:	2300      	movs	r3, #0
   14cda:	7023      	strb	r3, [r4, #0]
	if (*ptr == '\"')
   14cdc:	f899 3000 	ldrb.w	r3, [r9]
		ptr++;
	item->valuestring = out;
   14ce0:	6137      	str	r7, [r6, #16]
	if (*ptr == '\"')
   14ce2:	2b22      	cmp	r3, #34	; 0x22
	item->type = cJSON_String;
   14ce4:	f04f 0304 	mov.w	r3, #4
		ptr++;
   14ce8:	bf08      	it	eq
   14cea:	f109 0901 	addeq.w	r9, r9, #1
	item->type = cJSON_String;
   14cee:	60f3      	str	r3, [r6, #12]
	return ptr;
   14cf0:	464f      	mov	r7, r9
   14cf2:	e002      	b.n	14cfa <parse_string+0x6a>
		return 0;
   14cf4:	2700      	movs	r7, #0
		ep = str;
   14cf6:	4b4c      	ldr	r3, [pc, #304]	; (14e28 <parse_string+0x198>)
   14cf8:	6019      	str	r1, [r3, #0]
}
   14cfa:	4638      	mov	r0, r7
   14cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (*ptr++ == '\\')
   14d00:	2a5c      	cmp	r2, #92	; 0x5c
   14d02:	bf14      	ite	ne
   14d04:	3301      	addne	r3, #1
			ptr++; /* Skip escaped quotes. */
   14d06:	3302      	addeq	r3, #2
   14d08:	3401      	adds	r4, #1
   14d0a:	e7cb      	b.n	14ca4 <parse_string+0x14>
		if (*ptr != '\\')
   14d0c:	2b5c      	cmp	r3, #92	; 0x5c
   14d0e:	f109 0c01 	add.w	ip, r9, #1
   14d12:	d003      	beq.n	14d1c <parse_string+0x8c>
			*ptr2++ = *ptr++;
   14d14:	f804 3b01 	strb.w	r3, [r4], #1
   14d18:	46e1      	mov	r9, ip
   14d1a:	e7d8      	b.n	14cce <parse_string+0x3e>
			switch (*ptr) {
   14d1c:	f899 3001 	ldrb.w	r3, [r9, #1]
   14d20:	2b6e      	cmp	r3, #110	; 0x6e
   14d22:	d01a      	beq.n	14d5a <parse_string+0xca>
   14d24:	d808      	bhi.n	14d38 <parse_string+0xa8>
   14d26:	2b62      	cmp	r3, #98	; 0x62
   14d28:	f104 0101 	add.w	r1, r4, #1
   14d2c:	d00d      	beq.n	14d4a <parse_string+0xba>
   14d2e:	2b66      	cmp	r3, #102	; 0x66
   14d30:	d011      	beq.n	14d56 <parse_string+0xc6>
				*ptr2++ = *ptr;
   14d32:	f804 3b01 	strb.w	r3, [r4], #1
				break;
   14d36:	e00b      	b.n	14d50 <parse_string+0xc0>
			switch (*ptr) {
   14d38:	2b74      	cmp	r3, #116	; 0x74
   14d3a:	d011      	beq.n	14d60 <parse_string+0xd0>
   14d3c:	2b75      	cmp	r3, #117	; 0x75
   14d3e:	d012      	beq.n	14d66 <parse_string+0xd6>
   14d40:	2b72      	cmp	r3, #114	; 0x72
   14d42:	d1f6      	bne.n	14d32 <parse_string+0xa2>
				*ptr2++ = '\r';
   14d44:	f804 bb01 	strb.w	fp, [r4], #1
				break;
   14d48:	e002      	b.n	14d50 <parse_string+0xc0>
				*ptr2++ = '\b';
   14d4a:	2308      	movs	r3, #8
				*ptr2++ = '\f';
   14d4c:	7023      	strb	r3, [r4, #0]
   14d4e:	460c      	mov	r4, r1
			ptr++;
   14d50:	f10c 0c01 	add.w	ip, ip, #1
   14d54:	e7e0      	b.n	14d18 <parse_string+0x88>
				*ptr2++ = '\f';
   14d56:	230c      	movs	r3, #12
   14d58:	e7f8      	b.n	14d4c <parse_string+0xbc>
				*ptr2++ = '\n';
   14d5a:	f804 ab01 	strb.w	sl, [r4], #1
				break;
   14d5e:	e7f7      	b.n	14d50 <parse_string+0xc0>
				*ptr2++ = '\t';
   14d60:	f804 8b01 	strb.w	r8, [r4], #1
				break;
   14d64:	e7f4      	b.n	14d50 <parse_string+0xc0>
				uc = parse_hex4(ptr + 1);
   14d66:	f109 0002 	add.w	r0, r9, #2
   14d6a:	f019 fdf3 	bl	2e954 <parse_hex4>
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   14d6e:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   14d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
				uc = parse_hex4(ptr + 1);
   14d76:	4605      	mov	r5, r0
				ptr += 4; /* get the unicode char. */
   14d78:	f109 0c05 	add.w	ip, r9, #5
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   14d7c:	d3e8      	bcc.n	14d50 <parse_string+0xc0>
   14d7e:	2800      	cmp	r0, #0
   14d80:	d0e6      	beq.n	14d50 <parse_string+0xc0>
				if (uc >= 0xD800 &&
   14d82:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   14d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14d8a:	d223      	bcs.n	14dd4 <parse_string+0x144>
					if (ptr[1] != '\\' || ptr[2] != 'u')
   14d8c:	f899 3006 	ldrb.w	r3, [r9, #6]
   14d90:	2b5c      	cmp	r3, #92	; 0x5c
   14d92:	d1dd      	bne.n	14d50 <parse_string+0xc0>
   14d94:	f899 3007 	ldrb.w	r3, [r9, #7]
   14d98:	2b75      	cmp	r3, #117	; 0x75
   14d9a:	d1d9      	bne.n	14d50 <parse_string+0xc0>
					uc2 = parse_hex4(ptr + 3);
   14d9c:	f109 0008 	add.w	r0, r9, #8
   14da0:	f019 fdd8 	bl	2e954 <parse_hex4>
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   14da4:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   14da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					ptr += 6;
   14dac:	f109 0c0b 	add.w	ip, r9, #11
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   14db0:	d2ce      	bcs.n	14d50 <parse_string+0xc0>
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   14db2:	4b1e      	ldr	r3, [pc, #120]	; (14e2c <parse_string+0x19c>)
							(uc2 & 0x3FF));
   14db4:	f3c0 0009 	ubfx	r0, r0, #0, #10
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   14db8:	ea03 2585 	and.w	r5, r3, r5, lsl #10
   14dbc:	4305      	orrs	r5, r0
   14dbe:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14dc2:	f005 033f 	and.w	r3, r5, #63	; 0x3f
   14dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14dca:	70e3      	strb	r3, [r4, #3]
   14dcc:	1ce0      	adds	r0, r4, #3
					uc >>= 6;
   14dce:	09ad      	lsrs	r5, r5, #6
				len = 4;
   14dd0:	2304      	movs	r3, #4
   14dd2:	e013      	b.n	14dfc <parse_string+0x16c>
				if (uc < 0x80)
   14dd4:	287f      	cmp	r0, #127	; 0x7f
   14dd6:	d809      	bhi.n	14dec <parse_string+0x15c>
					len = 1;
   14dd8:	2301      	movs	r3, #1
				ptr2 += len;
   14dda:	3401      	adds	r4, #1
					*--ptr2 = (uc | firstByteMark[len]);
   14ddc:	4a14      	ldr	r2, [pc, #80]	; (14e30 <parse_string+0x1a0>)
   14dde:	5cd1      	ldrb	r1, [r2, r3]
				ptr2 += len;
   14de0:	3b01      	subs	r3, #1
					*--ptr2 = (uc | firstByteMark[len]);
   14de2:	430d      	orrs	r5, r1
   14de4:	f804 5c01 	strb.w	r5, [r4, #-1]
				ptr2 += len;
   14de8:	441c      	add	r4, r3
				break;
   14dea:	e7b1      	b.n	14d50 <parse_string+0xc0>
				else if (uc < 0x800)
   14dec:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14df0:	d30d      	bcc.n	14e0e <parse_string+0x17e>
				else if (uc < 0x10000)
   14df2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14df6:	d2e4      	bcs.n	14dc2 <parse_string+0x132>
					len = 3;
   14df8:	2303      	movs	r3, #3
				ptr2 += len;
   14dfa:	1ce0      	adds	r0, r4, #3
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14dfc:	f005 043f 	and.w	r4, r5, #63	; 0x3f
   14e00:	f064 047f 	orn	r4, r4, #127	; 0x7f
   14e04:	1e41      	subs	r1, r0, #1
   14e06:	f800 4c01 	strb.w	r4, [r0, #-1]
					uc >>= 6;
   14e0a:	09ad      	lsrs	r5, r5, #6
   14e0c:	e001      	b.n	14e12 <parse_string+0x182>
					len = 2;
   14e0e:	2302      	movs	r3, #2
				ptr2 += len;
   14e10:	1ca1      	adds	r1, r4, #2
					*--ptr2 = ((uc | 0x80) & 0xBF);
   14e12:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   14e16:	f060 007f 	orn	r0, r0, #127	; 0x7f
   14e1a:	1e4c      	subs	r4, r1, #1
   14e1c:	f801 0c01 	strb.w	r0, [r1, #-1]
					uc >>= 6;
   14e20:	09ad      	lsrs	r5, r5, #6
   14e22:	e7db      	b.n	14ddc <parse_string+0x14c>
   14e24:	20020080 	.word	0x20020080
   14e28:	20021494 	.word	0x20021494
   14e2c:	000ffc00 	.word	0x000ffc00
   14e30:	00036f7a 	.word	0x00036f7a

00014e34 <cJSON_New_Item>:
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   14e34:	4b06      	ldr	r3, [pc, #24]	; (14e50 <cJSON_New_Item+0x1c>)
{
   14e36:	b510      	push	{r4, lr}
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   14e38:	681b      	ldr	r3, [r3, #0]
   14e3a:	2028      	movs	r0, #40	; 0x28
   14e3c:	4798      	blx	r3
	if (node)
   14e3e:	4604      	mov	r4, r0
   14e40:	b118      	cbz	r0, 14e4a <cJSON_New_Item+0x16>
__ssp_bos_icheck3(memset, void *, int)
   14e42:	2228      	movs	r2, #40	; 0x28
   14e44:	2100      	movs	r1, #0
   14e46:	f01f fe25 	bl	34a94 <memset>
}
   14e4a:	4620      	mov	r0, r4
   14e4c:	bd10      	pop	{r4, pc}
   14e4e:	bf00      	nop
   14e50:	20020080 	.word	0x20020080

00014e54 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value)
{
   14e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e56:	4605      	mov	r5, r0
	if (!value)
   14e58:	460c      	mov	r4, r1
   14e5a:	b909      	cbnz	r1, 14e60 <parse_value+0xc>
	if (*value == '{') {
		return parse_object(item, value);
	}

	ep = value;
	return 0; /* failure. */
   14e5c:	2400      	movs	r4, #0
   14e5e:	e011      	b.n	14e84 <parse_value+0x30>
	if (!strncmp(value, "null", 4)) {
   14e60:	2204      	movs	r2, #4
   14e62:	4975      	ldr	r1, [pc, #468]	; (15038 <parse_value+0x1e4>)
   14e64:	4620      	mov	r0, r4
   14e66:	f01f ff48 	bl	34cfa <strncmp>
   14e6a:	b918      	cbnz	r0, 14e74 <parse_value+0x20>
		item->type = cJSON_NULL;
   14e6c:	2302      	movs	r3, #2
   14e6e:	60eb      	str	r3, [r5, #12]
		return value + 4;
   14e70:	3404      	adds	r4, #4
   14e72:	e007      	b.n	14e84 <parse_value+0x30>
	if (!strncmp(value, "false", 5)) {
   14e74:	2205      	movs	r2, #5
   14e76:	4971      	ldr	r1, [pc, #452]	; (1503c <parse_value+0x1e8>)
   14e78:	4620      	mov	r0, r4
   14e7a:	f01f ff3e 	bl	34cfa <strncmp>
   14e7e:	b918      	cbnz	r0, 14e88 <parse_value+0x34>
		item->type = cJSON_False;
   14e80:	60e8      	str	r0, [r5, #12]
		return value + 5;
   14e82:	3405      	adds	r4, #5
}
   14e84:	4620      	mov	r0, r4
   14e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!strncmp(value, "true", 4)) {
   14e88:	2204      	movs	r2, #4
   14e8a:	496d      	ldr	r1, [pc, #436]	; (15040 <parse_value+0x1ec>)
   14e8c:	4620      	mov	r0, r4
   14e8e:	f01f ff34 	bl	34cfa <strncmp>
   14e92:	b918      	cbnz	r0, 14e9c <parse_value+0x48>
		item->type = cJSON_True;
   14e94:	2301      	movs	r3, #1
   14e96:	60eb      	str	r3, [r5, #12]
		item->valueint = 1;
   14e98:	616b      	str	r3, [r5, #20]
   14e9a:	e7e9      	b.n	14e70 <parse_value+0x1c>
	if (*value == '\"') {
   14e9c:	7823      	ldrb	r3, [r4, #0]
   14e9e:	2b22      	cmp	r3, #34	; 0x22
   14ea0:	d105      	bne.n	14eae <parse_value+0x5a>
		return parse_string(item, value);
   14ea2:	4621      	mov	r1, r4
   14ea4:	4628      	mov	r0, r5
}
   14ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return parse_string(item, value);
   14eaa:	f7ff bef1 	b.w	14c90 <parse_string>
	if (*value == '-' || (*value >= '0' && *value <= '9')) {
   14eae:	2b2d      	cmp	r3, #45	; 0x2d
   14eb0:	d005      	beq.n	14ebe <parse_value+0x6a>
   14eb2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14eb6:	2a09      	cmp	r2, #9
   14eb8:	d81d      	bhi.n	14ef6 <parse_value+0xa2>
	int n = 0, sign = 1;
   14eba:	2201      	movs	r2, #1
   14ebc:	e002      	b.n	14ec4 <parse_value+0x70>
		sign = -1, num++; /* Has sign? */
   14ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ec2:	3401      	adds	r4, #1
	if (*num == '0')
   14ec4:	7823      	ldrb	r3, [r4, #0]
   14ec6:	2b30      	cmp	r3, #48	; 0x30
		num++; /* is zero */
   14ec8:	bf08      	it	eq
   14eca:	3401      	addeq	r4, #1
	if (*num >= '1' && *num <= '9')
   14ecc:	7823      	ldrb	r3, [r4, #0]
   14ece:	3b31      	subs	r3, #49	; 0x31
   14ed0:	2b08      	cmp	r3, #8
	int n = 0, sign = 1;
   14ed2:	f04f 0300 	mov.w	r3, #0
	if (*num >= '1' && *num <= '9')
   14ed6:	d809      	bhi.n	14eec <parse_value+0x98>
			n = (n * 10) + (*num++ - '0');
   14ed8:	200a      	movs	r0, #10
   14eda:	4343      	muls	r3, r0
   14edc:	f814 1b01 	ldrb.w	r1, [r4], #1
   14ee0:	3b30      	subs	r3, #48	; 0x30
   14ee2:	440b      	add	r3, r1
		while (*num >= '0' && *num <= '9'); /* Number? */
   14ee4:	7821      	ldrb	r1, [r4, #0]
   14ee6:	3930      	subs	r1, #48	; 0x30
   14ee8:	2909      	cmp	r1, #9
   14eea:	d9f6      	bls.n	14eda <parse_value+0x86>
	n = sign * n;
   14eec:	4353      	muls	r3, r2
	item->valueint = (int)n;
   14eee:	616b      	str	r3, [r5, #20]
	item->type = cJSON_Number;
   14ef0:	2303      	movs	r3, #3
   14ef2:	60eb      	str	r3, [r5, #12]
	return num;
   14ef4:	e7c6      	b.n	14e84 <parse_value+0x30>
	if (*value == '[') {
   14ef6:	2b5b      	cmp	r3, #91	; 0x5b
   14ef8:	d136      	bne.n	14f68 <parse_value+0x114>
	if (*value != '[') {
		ep = value;
		return 0;
	} /* not an array! */

	item->type = cJSON_Array;
   14efa:	2305      	movs	r3, #5
	value = skip(value + 1);
   14efc:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Array;
   14efe:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   14f00:	f019 fd7e 	bl	2ea00 <skip>
	if (*value == ']')
   14f04:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   14f06:	4604      	mov	r4, r0
	if (*value == ']')
   14f08:	2b5d      	cmp	r3, #93	; 0x5d
   14f0a:	d101      	bne.n	14f10 <parse_value+0xbc>
	} /* not an object! */

	item->type = cJSON_Object;
	value = skip(value + 1);
	if (*value == '}')
		return value + 1; /* empty array. */
   14f0c:	3401      	adds	r4, #1
   14f0e:	e7b9      	b.n	14e84 <parse_value+0x30>
	item->child = child = cJSON_New_Item();
   14f10:	f7ff ff90 	bl	14e34 <cJSON_New_Item>
   14f14:	4606      	mov	r6, r0
   14f16:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   14f18:	2800      	cmp	r0, #0
   14f1a:	d09f      	beq.n	14e5c <parse_value+0x8>
	value = skip(parse_value(
   14f1c:	4620      	mov	r0, r4
   14f1e:	f019 fd6f 	bl	2ea00 <skip>
   14f22:	4601      	mov	r1, r0
   14f24:	4630      	mov	r0, r6
   14f26:	f7ff ff95 	bl	14e54 <parse_value>
   14f2a:	f019 fd69 	bl	2ea00 <skip>
		if (!value)
   14f2e:	4604      	mov	r4, r0
   14f30:	2800      	cmp	r0, #0
   14f32:	d093      	beq.n	14e5c <parse_value+0x8>
	while (*value == ',') {
   14f34:	7803      	ldrb	r3, [r0, #0]
   14f36:	2b2c      	cmp	r3, #44	; 0x2c
   14f38:	d004      	beq.n	14f44 <parse_value+0xf0>
	if (*value == ']')
   14f3a:	2b5d      	cmp	r3, #93	; 0x5d
   14f3c:	d0e6      	beq.n	14f0c <parse_value+0xb8>
	ep = value;
   14f3e:	4b41      	ldr	r3, [pc, #260]	; (15044 <parse_value+0x1f0>)
   14f40:	601c      	str	r4, [r3, #0]
   14f42:	e78b      	b.n	14e5c <parse_value+0x8>
		new_item = cJSON_New_Item();
   14f44:	f7ff ff76 	bl	14e34 <cJSON_New_Item>
		if (!new_item)
   14f48:	4605      	mov	r5, r0
   14f4a:	2800      	cmp	r0, #0
   14f4c:	d086      	beq.n	14e5c <parse_value+0x8>
		child->next = new_item;
   14f4e:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   14f50:	6046      	str	r6, [r0, #4]
		value = skip(parse_value(child, skip(value + 1)));
   14f52:	1c60      	adds	r0, r4, #1
   14f54:	f019 fd54 	bl	2ea00 <skip>
   14f58:	4601      	mov	r1, r0
   14f5a:	4628      	mov	r0, r5
   14f5c:	f7ff ff7a 	bl	14e54 <parse_value>
   14f60:	f019 fd4e 	bl	2ea00 <skip>
		if (!value)
   14f64:	462e      	mov	r6, r5
   14f66:	e7e2      	b.n	14f2e <parse_value+0xda>
	if (*value == '{') {
   14f68:	2b7b      	cmp	r3, #123	; 0x7b
   14f6a:	d1e8      	bne.n	14f3e <parse_value+0xea>
	item->type = cJSON_Object;
   14f6c:	2306      	movs	r3, #6
	value = skip(value + 1);
   14f6e:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Object;
   14f70:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   14f72:	f019 fd45 	bl	2ea00 <skip>
	if (*value == '}')
   14f76:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   14f78:	4604      	mov	r4, r0
	if (*value == '}')
   14f7a:	2b7d      	cmp	r3, #125	; 0x7d
   14f7c:	d0c6      	beq.n	14f0c <parse_value+0xb8>

	item->child = child = cJSON_New_Item();
   14f7e:	f7ff ff59 	bl	14e34 <cJSON_New_Item>
   14f82:	4606      	mov	r6, r0
   14f84:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   14f86:	2800      	cmp	r0, #0
   14f88:	f43f af68 	beq.w	14e5c <parse_value+0x8>
		return 0;
	value = skip(parse_string(child, skip(value)));
   14f8c:	4620      	mov	r0, r4
   14f8e:	f019 fd37 	bl	2ea00 <skip>
   14f92:	4601      	mov	r1, r0
   14f94:	4630      	mov	r0, r6
   14f96:	f7ff fe7b 	bl	14c90 <parse_string>
   14f9a:	f019 fd31 	bl	2ea00 <skip>
	if (!value)
   14f9e:	2800      	cmp	r0, #0
   14fa0:	f43f af5c 	beq.w	14e5c <parse_value+0x8>
		return 0;
	child->string = child->valuestring;
	child->valuestring = 0;
   14fa4:	2400      	movs	r4, #0
	child->string = child->valuestring;
   14fa6:	6933      	ldr	r3, [r6, #16]
	child->valuestring = 0;
   14fa8:	6134      	str	r4, [r6, #16]
	child->string = child->valuestring;
   14faa:	6233      	str	r3, [r6, #32]
	if (*value != ':') {
   14fac:	7803      	ldrb	r3, [r0, #0]
   14fae:	2b3a      	cmp	r3, #58	; 0x3a
   14fb0:	d002      	beq.n	14fb8 <parse_value+0x164>
		ep = value;
   14fb2:	4b24      	ldr	r3, [pc, #144]	; (15044 <parse_value+0x1f0>)
   14fb4:	6018      	str	r0, [r3, #0]
		return 0;
   14fb6:	e765      	b.n	14e84 <parse_value+0x30>
	} /* fail! */
	value = skip(parse_value(
   14fb8:	3001      	adds	r0, #1
   14fba:	f019 fd21 	bl	2ea00 <skip>
   14fbe:	4601      	mov	r1, r0
   14fc0:	4630      	mov	r0, r6
   14fc2:	f7ff ff47 	bl	14e54 <parse_value>
   14fc6:	f019 fd1b 	bl	2ea00 <skip>
			return 0;
		} /* fail! */
		value = skip(parse_value(
			child, skip(value +
				    1))); /* skip any spacing, get the value. */
		if (!value)
   14fca:	4607      	mov	r7, r0
   14fcc:	2800      	cmp	r0, #0
   14fce:	f43f af45 	beq.w	14e5c <parse_value+0x8>
	while (*value == ',') {
   14fd2:	7803      	ldrb	r3, [r0, #0]
   14fd4:	2b2c      	cmp	r3, #44	; 0x2c
   14fd6:	d003      	beq.n	14fe0 <parse_value+0x18c>
			return 0;
	}

	if (*value == '}')
   14fd8:	2b7d      	cmp	r3, #125	; 0x7d
   14fda:	d129      	bne.n	15030 <parse_value+0x1dc>
		return value + 1; /* end of array */
   14fdc:	1c44      	adds	r4, r0, #1
   14fde:	e751      	b.n	14e84 <parse_value+0x30>
		new_item = cJSON_New_Item();
   14fe0:	f7ff ff28 	bl	14e34 <cJSON_New_Item>
		if (!(new_item))
   14fe4:	4605      	mov	r5, r0
   14fe6:	2800      	cmp	r0, #0
   14fe8:	f43f af38 	beq.w	14e5c <parse_value+0x8>
		child->next = new_item;
   14fec:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   14fee:	6046      	str	r6, [r0, #4]
		value = skip(parse_string(child, skip(value + 1)));
   14ff0:	1c78      	adds	r0, r7, #1
   14ff2:	f019 fd05 	bl	2ea00 <skip>
   14ff6:	4601      	mov	r1, r0
   14ff8:	4628      	mov	r0, r5
   14ffa:	f7ff fe49 	bl	14c90 <parse_string>
   14ffe:	f019 fcff 	bl	2ea00 <skip>
		if (!value)
   15002:	2800      	cmp	r0, #0
   15004:	f43f af2a 	beq.w	14e5c <parse_value+0x8>
		child->string = child->valuestring;
   15008:	692b      	ldr	r3, [r5, #16]
		child->valuestring = 0;
   1500a:	612c      	str	r4, [r5, #16]
		child->string = child->valuestring;
   1500c:	622b      	str	r3, [r5, #32]
		if (*value != ':') {
   1500e:	7803      	ldrb	r3, [r0, #0]
   15010:	2b3a      	cmp	r3, #58	; 0x3a
   15012:	d002      	beq.n	1501a <parse_value+0x1c6>
			ep = value;
   15014:	4b0b      	ldr	r3, [pc, #44]	; (15044 <parse_value+0x1f0>)
   15016:	6018      	str	r0, [r3, #0]
			return 0;
   15018:	e720      	b.n	14e5c <parse_value+0x8>
		value = skip(parse_value(
   1501a:	3001      	adds	r0, #1
   1501c:	f019 fcf0 	bl	2ea00 <skip>
   15020:	4601      	mov	r1, r0
   15022:	4628      	mov	r0, r5
   15024:	f7ff ff16 	bl	14e54 <parse_value>
   15028:	f019 fcea 	bl	2ea00 <skip>
		if (!value)
   1502c:	462e      	mov	r6, r5
   1502e:	e7cc      	b.n	14fca <parse_value+0x176>
	ep = value;
   15030:	4b04      	ldr	r3, [pc, #16]	; (15044 <parse_value+0x1f0>)
   15032:	6018      	str	r0, [r3, #0]
	return 0; /* malformed. */
   15034:	e712      	b.n	14e5c <parse_value+0x8>
   15036:	bf00      	nop
   15038:	00036f81 	.word	0x00036f81
   1503c:	00036f86 	.word	0x00036f86
   15040:	00036f8c 	.word	0x00036f8c
   15044:	20021494 	.word	0x20021494

00015048 <ensure>:
{
   15048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!p || !p->buffer)
   1504a:	4605      	mov	r5, r0
   1504c:	b368      	cbz	r0, 150aa <ensure+0x62>
   1504e:	6806      	ldr	r6, [r0, #0]
   15050:	b1f6      	cbz	r6, 15090 <ensure+0x48>
	needed += p->offset;
   15052:	6883      	ldr	r3, [r0, #8]
	if (needed <= p->length)
   15054:	6842      	ldr	r2, [r0, #4]
	needed += p->offset;
   15056:	185c      	adds	r4, r3, r1
	if (needed <= p->length)
   15058:	42a2      	cmp	r2, r4
   1505a:	db01      	blt.n	15060 <ensure+0x18>
	return newbuffer + p->offset;
   1505c:	441e      	add	r6, r3
   1505e:	e017      	b.n	15090 <ensure+0x48>
	--x;
   15060:	3c01      	subs	r4, #1
	x |= x >> 1;
   15062:	ea44 0464 	orr.w	r4, r4, r4, asr #1
	x |= x >> 2;
   15066:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
	x |= x >> 4;
   1506a:	ea44 1424 	orr.w	r4, r4, r4, asr #4
	x |= x >> 8;
   1506e:	ea44 2424 	orr.w	r4, r4, r4, asr #8
	x |= x >> 16;
   15072:	ea44 4424 	orr.w	r4, r4, r4, asr #16
	newbuffer = (char *)cJSON_malloc(newsize);
   15076:	4b0e      	ldr	r3, [pc, #56]	; (150b0 <ensure+0x68>)
	return x + 1;
   15078:	3401      	adds	r4, #1
	newbuffer = (char *)cJSON_malloc(newsize);
   1507a:	681b      	ldr	r3, [r3, #0]
   1507c:	4620      	mov	r0, r4
   1507e:	4798      	blx	r3
	if (!newbuffer) {
   15080:	4f0c      	ldr	r7, [pc, #48]	; (150b4 <ensure+0x6c>)
   15082:	4606      	mov	r6, r0
   15084:	b930      	cbnz	r0, 15094 <ensure+0x4c>
		cJSON_free(p->buffer);
   15086:	683b      	ldr	r3, [r7, #0]
   15088:	6828      	ldr	r0, [r5, #0]
   1508a:	4798      	blx	r3
		p->length = 0, p->buffer = 0;
   1508c:	e9c5 6600 	strd	r6, r6, [r5]
}
   15090:	4630      	mov	r0, r6
   15092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15094:	e9d5 1200 	ldrd	r1, r2, [r5]
   15098:	f01f fcc2 	bl	34a20 <memcpy>
	cJSON_free(p->buffer);
   1509c:	683b      	ldr	r3, [r7, #0]
   1509e:	6828      	ldr	r0, [r5, #0]
   150a0:	4798      	blx	r3
	p->buffer = newbuffer;
   150a2:	e9c5 6400 	strd	r6, r4, [r5]
	return newbuffer + p->offset;
   150a6:	68ab      	ldr	r3, [r5, #8]
   150a8:	e7d8      	b.n	1505c <ensure+0x14>
		return 0;
   150aa:	4606      	mov	r6, r0
   150ac:	e7f0      	b.n	15090 <ensure+0x48>
   150ae:	bf00      	nop
   150b0:	20020080 	.word	0x20020080
   150b4:	2002007c 	.word	0x2002007c

000150b8 <cJSON_strdup>:
{
   150b8:	b570      	push	{r4, r5, r6, lr}
	len = strlens(str) + 1;
   150ba:	4606      	mov	r6, r0
   150bc:	b170      	cbz	r0, 150dc <cJSON_strdup+0x24>
   150be:	f7fc ffdf 	bl	12080 <strlen>
   150c2:	1c44      	adds	r4, r0, #1
	copy = (char *)cJSON_malloc(len);
   150c4:	4b06      	ldr	r3, [pc, #24]	; (150e0 <cJSON_strdup+0x28>)
   150c6:	4620      	mov	r0, r4
   150c8:	681b      	ldr	r3, [r3, #0]
   150ca:	4798      	blx	r3
	if (!copy)
   150cc:	4605      	mov	r5, r0
   150ce:	b118      	cbz	r0, 150d8 <cJSON_strdup+0x20>
   150d0:	4622      	mov	r2, r4
   150d2:	4631      	mov	r1, r6
   150d4:	f01f fca4 	bl	34a20 <memcpy>
}
   150d8:	4628      	mov	r0, r5
   150da:	bd70      	pop	{r4, r5, r6, pc}
	len = strlens(str) + 1;
   150dc:	2401      	movs	r4, #1
   150de:	e7f1      	b.n	150c4 <cJSON_strdup+0xc>
   150e0:	20020080 	.word	0x20020080

000150e4 <print_string_ptr>:
{
   150e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = 0, flag = 0;
   150e8:	2200      	movs	r2, #0
{
   150ea:	460d      	mov	r5, r1
   150ec:	4606      	mov	r6, r0
   150ee:	4601      	mov	r1, r0
   150f0:	460b      	mov	r3, r1
	for (ptr = str; *ptr; ptr++)
   150f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   150f6:	b9c4      	cbnz	r4, 1512a <print_string_ptr+0x46>
	if (!flag) {
   150f8:	bb4a      	cbnz	r2, 1514e <print_string_ptr+0x6a>
		len = ptr - str;
   150fa:	1b9c      	subs	r4, r3, r6
		if (p)
   150fc:	1ce1      	adds	r1, r4, #3
   150fe:	b30d      	cbz	r5, 15144 <print_string_ptr+0x60>
			out = ensure(p, len + 3);
   15100:	4628      	mov	r0, r5
   15102:	f7ff ffa1 	bl	15048 <ensure>
			out = (char *)cJSON_malloc(len + 3);
   15106:	4605      	mov	r5, r0
		if (!out)
   15108:	b160      	cbz	r0, 15124 <print_string_ptr+0x40>
		*ptr2++ = '\"';
   1510a:	4603      	mov	r3, r0
   1510c:	2722      	movs	r7, #34	; 0x22
   1510e:	f803 7b01 	strb.w	r7, [r3], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15112:	4618      	mov	r0, r3
   15114:	4631      	mov	r1, r6
   15116:	f01f fde8 	bl	34cea <strcpy>
   1511a:	4603      	mov	r3, r0
		ptr2[len + 1] = 0;
   1511c:	2200      	movs	r2, #0
   1511e:	4423      	add	r3, r4
		ptr2[len] = '\"';
   15120:	5507      	strb	r7, [r0, r4]
		ptr2[len + 1] = 0;
   15122:	705a      	strb	r2, [r3, #1]
}
   15124:	4628      	mov	r0, r5
   15126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				: 0;
   1512a:	1e63      	subs	r3, r4, #1
   1512c:	2b1e      	cmp	r3, #30
   1512e:	d907      	bls.n	15140 <print_string_ptr+0x5c>
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   15130:	2c22      	cmp	r4, #34	; 0x22
   15132:	d005      	beq.n	15140 <print_string_ptr+0x5c>
				: 0;
   15134:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
   15138:	425c      	negs	r4, r3
   1513a:	415c      	adcs	r4, r3
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   1513c:	4322      	orrs	r2, r4
   1513e:	e7d7      	b.n	150f0 <print_string_ptr+0xc>
				: 0;
   15140:	2401      	movs	r4, #1
   15142:	e7fb      	b.n	1513c <print_string_ptr+0x58>
			out = (char *)cJSON_malloc(len + 3);
   15144:	4b41      	ldr	r3, [pc, #260]	; (1524c <print_string_ptr+0x168>)
   15146:	4608      	mov	r0, r1
   15148:	681b      	ldr	r3, [r3, #0]
   1514a:	4798      	blx	r3
   1514c:	e7db      	b.n	15106 <print_string_ptr+0x22>
	if (!str) {
   1514e:	b986      	cbnz	r6, 15172 <print_string_ptr+0x8e>
		if (p)
   15150:	b155      	cbz	r5, 15168 <print_string_ptr+0x84>
			out = ensure(p, 3);
   15152:	2103      	movs	r1, #3
   15154:	4628      	mov	r0, r5
   15156:	f7ff ff77 	bl	15048 <ensure>
			out = (char *)cJSON_malloc(3);
   1515a:	4605      	mov	r5, r0
		if (!out)
   1515c:	2800      	cmp	r0, #0
   1515e:	d0e1      	beq.n	15124 <print_string_ptr+0x40>
   15160:	493b      	ldr	r1, [pc, #236]	; (15250 <print_string_ptr+0x16c>)
   15162:	f01f fdc2 	bl	34cea <strcpy>
		return out;
   15166:	e7dd      	b.n	15124 <print_string_ptr+0x40>
			out = (char *)cJSON_malloc(3);
   15168:	4b38      	ldr	r3, [pc, #224]	; (1524c <print_string_ptr+0x168>)
   1516a:	2003      	movs	r0, #3
   1516c:	681b      	ldr	r3, [r3, #0]
   1516e:	4798      	blx	r3
   15170:	e7f3      	b.n	1515a <print_string_ptr+0x76>
	while ((token) && ++len) {
   15172:	46b1      	mov	r9, r6
	token = *ptr;
   15174:	f896 8000 	ldrb.w	r8, [r6]
		if (strchr("\"\\\b\f\n\r\t", token))
   15178:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 15254 <print_string_ptr+0x170>
	while ((token) && ++len) {
   1517c:	f1b8 0f00 	cmp.w	r8, #0
   15180:	d002      	beq.n	15188 <print_string_ptr+0xa4>
   15182:	1c67      	adds	r7, r4, #1
   15184:	d119      	bne.n	151ba <print_string_ptr+0xd6>
   15186:	463c      	mov	r4, r7
	if (p)
   15188:	1ce1      	adds	r1, r4, #3
   1518a:	b32d      	cbz	r5, 151d8 <print_string_ptr+0xf4>
		out = ensure(p, len + 3);
   1518c:	4628      	mov	r0, r5
   1518e:	f7ff ff5b 	bl	15048 <ensure>
		out = (char *)cJSON_malloc(len + 3);
   15192:	4605      	mov	r5, r0
	if (!out)
   15194:	2800      	cmp	r0, #0
   15196:	d0c5      	beq.n	15124 <print_string_ptr+0x40>
	*ptr2++ = '\"';
   15198:	4604      	mov	r4, r0
   1519a:	2322      	movs	r3, #34	; 0x22
			*ptr2++ = '\\';
   1519c:	275c      	movs	r7, #92	; 0x5c
				*ptr2++ = 'f';
   1519e:	f04f 0866 	mov.w	r8, #102	; 0x66
				sprintf(ptr2, "u%04x", token);
   151a2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 15258 <print_string_ptr+0x174>
	*ptr2++ = '\"';
   151a6:	f804 3b01 	strb.w	r3, [r4], #1
	while (*ptr) {
   151aa:	3e01      	subs	r6, #1
   151ac:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   151b0:	b9bb      	cbnz	r3, 151e2 <print_string_ptr+0xfe>
	*ptr2++ = '\"';
   151b2:	2222      	movs	r2, #34	; 0x22
	*ptr2++ = 0;
   151b4:	7063      	strb	r3, [r4, #1]
	*ptr2++ = '\"';
   151b6:	7022      	strb	r2, [r4, #0]
	return out;
   151b8:	e7b4      	b.n	15124 <print_string_ptr+0x40>
		if (strchr("\"\\\b\f\n\r\t", token))
   151ba:	4641      	mov	r1, r8
   151bc:	4650      	mov	r0, sl
   151be:	f01f fd87 	bl	34cd0 <strchr>
   151c2:	b120      	cbz	r0, 151ce <print_string_ptr+0xea>
			len++;
   151c4:	1ca7      	adds	r7, r4, #2
		token = *ptr;
   151c6:	f819 8f01 	ldrb.w	r8, [r9, #1]!
   151ca:	463c      	mov	r4, r7
   151cc:	e7d6      	b.n	1517c <print_string_ptr+0x98>
		else if (token < 32)
   151ce:	f1b8 0f1f 	cmp.w	r8, #31
			len += 5;
   151d2:	bf98      	it	ls
   151d4:	1da7      	addls	r7, r4, #6
   151d6:	e7f6      	b.n	151c6 <print_string_ptr+0xe2>
		out = (char *)cJSON_malloc(len + 3);
   151d8:	4b1c      	ldr	r3, [pc, #112]	; (1524c <print_string_ptr+0x168>)
   151da:	4608      	mov	r0, r1
   151dc:	681b      	ldr	r3, [r3, #0]
   151de:	4798      	blx	r3
   151e0:	e7d7      	b.n	15192 <print_string_ptr+0xae>
		if ((unsigned char)*ptr > 31 && *ptr != '\"' && *ptr != '\\')
   151e2:	2b1f      	cmp	r3, #31
   151e4:	f104 0001 	add.w	r0, r4, #1
   151e8:	d906      	bls.n	151f8 <print_string_ptr+0x114>
   151ea:	2b22      	cmp	r3, #34	; 0x22
   151ec:	d004      	beq.n	151f8 <print_string_ptr+0x114>
   151ee:	2b5c      	cmp	r3, #92	; 0x5c
   151f0:	d002      	beq.n	151f8 <print_string_ptr+0x114>
			*ptr2++ = *ptr++;
   151f2:	7023      	strb	r3, [r4, #0]
   151f4:	4604      	mov	r4, r0
   151f6:	e7d9      	b.n	151ac <print_string_ptr+0xc8>
			*ptr2++ = '\\';
   151f8:	7027      	strb	r7, [r4, #0]
			switch (token = *ptr++) {
   151fa:	7832      	ldrb	r2, [r6, #0]
   151fc:	2a0c      	cmp	r2, #12
   151fe:	d016      	beq.n	1522e <print_string_ptr+0x14a>
   15200:	d809      	bhi.n	15216 <print_string_ptr+0x132>
   15202:	2a09      	cmp	r2, #9
   15204:	d01a      	beq.n	1523c <print_string_ptr+0x158>
   15206:	2a0a      	cmp	r2, #10
   15208:	d015      	beq.n	15236 <print_string_ptr+0x152>
   1520a:	2a08      	cmp	r2, #8
   1520c:	d119      	bne.n	15242 <print_string_ptr+0x15e>
				*ptr2++ = 'b';
   1520e:	2362      	movs	r3, #98	; 0x62
   15210:	1ca0      	adds	r0, r4, #2
				*ptr2++ = 't';
   15212:	7063      	strb	r3, [r4, #1]
				break;
   15214:	e7ee      	b.n	151f4 <print_string_ptr+0x110>
			switch (token = *ptr++) {
   15216:	2a22      	cmp	r2, #34	; 0x22
   15218:	d006      	beq.n	15228 <print_string_ptr+0x144>
   1521a:	2a5c      	cmp	r2, #92	; 0x5c
   1521c:	d004      	beq.n	15228 <print_string_ptr+0x144>
   1521e:	2a0d      	cmp	r2, #13
   15220:	d10f      	bne.n	15242 <print_string_ptr+0x15e>
				*ptr2++ = 'r';
   15222:	1ca0      	adds	r0, r4, #2
   15224:	2372      	movs	r3, #114	; 0x72
   15226:	e7f4      	b.n	15212 <print_string_ptr+0x12e>
				*ptr2++ = '\"';
   15228:	1ca0      	adds	r0, r4, #2
   1522a:	7062      	strb	r2, [r4, #1]
				break;
   1522c:	e7e2      	b.n	151f4 <print_string_ptr+0x110>
				*ptr2++ = 'f';
   1522e:	1ca0      	adds	r0, r4, #2
   15230:	f884 8001 	strb.w	r8, [r4, #1]
				break;
   15234:	e7de      	b.n	151f4 <print_string_ptr+0x110>
				*ptr2++ = 'n';
   15236:	1ca0      	adds	r0, r4, #2
   15238:	236e      	movs	r3, #110	; 0x6e
   1523a:	e7ea      	b.n	15212 <print_string_ptr+0x12e>
				*ptr2++ = 't';
   1523c:	1ca0      	adds	r0, r4, #2
   1523e:	2374      	movs	r3, #116	; 0x74
   15240:	e7e7      	b.n	15212 <print_string_ptr+0x12e>
				sprintf(ptr2, "u%04x", token);
   15242:	4649      	mov	r1, r9
   15244:	f019 f84a 	bl	2e2dc <siprintf>
				ptr2 += 5;
   15248:	1da0      	adds	r0, r4, #6
				break; /* escape and print */
   1524a:	e7d3      	b.n	151f4 <print_string_ptr+0x110>
   1524c:	20020080 	.word	0x20020080
   15250:	00036f9f 	.word	0x00036f9f
   15254:	00036fa2 	.word	0x00036fa2
   15258:	00036faa 	.word	0x00036faa

0001525c <print_array.isra.4>:
static char *print_array(cJSON *item, int depth, int fmt, printbuffer *p)
   1525c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15260:	4607      	mov	r7, r0
   15262:	468a      	mov	sl, r1
   15264:	4616      	mov	r6, r2
   15266:	461c      	mov	r4, r3
	int numentries = 0, i = 0, fail = 0;
   15268:	2500      	movs	r5, #0
	cJSON *child = item->child;
   1526a:	f8d0 9000 	ldr.w	r9, [r0]
	while (child)
   1526e:	f1b9 0f00 	cmp.w	r9, #0
   15272:	d10e      	bne.n	15292 <print_array.isra.4+0x36>
	if (!numentries) {
   15274:	b9b5      	cbnz	r5, 152a4 <print_array.isra.4+0x48>
		if (p)
   15276:	b184      	cbz	r4, 1529a <print_array.isra.4+0x3e>
			out = ensure(p, 3);
   15278:	2103      	movs	r1, #3
   1527a:	4620      	mov	r0, r4
   1527c:	f7ff fee4 	bl	15048 <ensure>
			out = (char *)cJSON_malloc(3);
   15280:	4681      	mov	r9, r0
		if (out)
   15282:	b110      	cbz	r0, 1528a <print_array.isra.4+0x2e>
   15284:	4971      	ldr	r1, [pc, #452]	; (1544c <print_array.isra.4+0x1f0>)
   15286:	f01f fd30 	bl	34cea <strcpy>
}
   1528a:	4648      	mov	r0, r9
   1528c:	b003      	add	sp, #12
   1528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		numentries++, child = child->next;
   15292:	3501      	adds	r5, #1
   15294:	f8d9 9000 	ldr.w	r9, [r9]
   15298:	e7e9      	b.n	1526e <print_array.isra.4+0x12>
			out = (char *)cJSON_malloc(3);
   1529a:	4b6d      	ldr	r3, [pc, #436]	; (15450 <print_array.isra.4+0x1f4>)
   1529c:	2003      	movs	r0, #3
   1529e:	681b      	ldr	r3, [r3, #0]
   152a0:	4798      	blx	r3
   152a2:	e7ed      	b.n	15280 <print_array.isra.4+0x24>
	if (p) {
   152a4:	2c00      	cmp	r4, #0
   152a6:	d048      	beq.n	1533a <print_array.isra.4+0xde>
		i = p->offset;
   152a8:	68a3      	ldr	r3, [r4, #8]
		ptr = ensure(p, 1);
   152aa:	2101      	movs	r1, #1
   152ac:	4620      	mov	r0, r4
		i = p->offset;
   152ae:	9300      	str	r3, [sp, #0]
		ptr = ensure(p, 1);
   152b0:	f7ff feca 	bl	15048 <ensure>
		if (!ptr)
   152b4:	2800      	cmp	r0, #0
   152b6:	d0e8      	beq.n	1528a <print_array.isra.4+0x2e>
		*ptr = '[';
   152b8:	235b      	movs	r3, #91	; 0x5b
   152ba:	2e00      	cmp	r6, #0
   152bc:	7003      	strb	r3, [r0, #0]
		child = item->child;
   152be:	683d      	ldr	r5, [r7, #0]
   152c0:	bf14      	ite	ne
   152c2:	2702      	movne	r7, #2
   152c4:	2701      	moveq	r7, #1
				*ptr++ = ',';
   152c6:	f04f 082c 	mov.w	r8, #44	; 0x2c
				*ptr = 0;
   152ca:	46cb      	mov	fp, r9
		p->offset++;
   152cc:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth + 1, fmt, p);
   152ce:	f10a 0a01 	add.w	sl, sl, #1
		p->offset++;
   152d2:	3301      	adds	r3, #1
   152d4:	60a3      	str	r3, [r4, #8]
				ptr = ensure(p, len + 1);
   152d6:	1c7b      	adds	r3, r7, #1
   152d8:	9301      	str	r3, [sp, #4]
		while (child && !fail) {
   152da:	b96d      	cbnz	r5, 152f8 <print_array.isra.4+0x9c>
		ptr = ensure(p, 2);
   152dc:	2102      	movs	r1, #2
   152de:	4620      	mov	r0, r4
   152e0:	f7ff feb2 	bl	15048 <ensure>
		if (!ptr)
   152e4:	2800      	cmp	r0, #0
   152e6:	d0d0      	beq.n	1528a <print_array.isra.4+0x2e>
		*ptr++ = ']';
   152e8:	235d      	movs	r3, #93	; 0x5d
		*ptr = 0;
   152ea:	7045      	strb	r5, [r0, #1]
		*ptr++ = ']';
   152ec:	7003      	strb	r3, [r0, #0]
		out = (p->buffer) + i;
   152ee:	6823      	ldr	r3, [r4, #0]
   152f0:	9a00      	ldr	r2, [sp, #0]
   152f2:	441a      	add	r2, r3
   152f4:	4691      	mov	r9, r2
   152f6:	e7c8      	b.n	1528a <print_array.isra.4+0x2e>
			print_value(child, depth + 1, fmt, p);
   152f8:	4623      	mov	r3, r4
   152fa:	4632      	mov	r2, r6
   152fc:	4651      	mov	r1, sl
   152fe:	4628      	mov	r0, r5
   15300:	f000 f8aa 	bl	15458 <print_value>
			p->offset = update(p);
   15304:	4620      	mov	r0, r4
   15306:	f019 fb84 	bl	2ea12 <update>
			if (child->next) {
   1530a:	682b      	ldr	r3, [r5, #0]
			p->offset = update(p);
   1530c:	60a0      	str	r0, [r4, #8]
			if (child->next) {
   1530e:	b173      	cbz	r3, 1532e <print_array.isra.4+0xd2>
				ptr = ensure(p, len + 1);
   15310:	9901      	ldr	r1, [sp, #4]
   15312:	4620      	mov	r0, r4
   15314:	f7ff fe98 	bl	15048 <ensure>
				if (!ptr)
   15318:	2800      	cmp	r0, #0
   1531a:	d0b6      	beq.n	1528a <print_array.isra.4+0x2e>
				*ptr++ = ',';
   1531c:	f880 8000 	strb.w	r8, [r0]
				if (fmt)
   15320:	b93e      	cbnz	r6, 15332 <print_array.isra.4+0xd6>
				*ptr++ = ',';
   15322:	1c43      	adds	r3, r0, #1
				*ptr = 0;
   15324:	f883 b000 	strb.w	fp, [r3]
				p->offset += len;
   15328:	68a3      	ldr	r3, [r4, #8]
   1532a:	443b      	add	r3, r7
   1532c:	60a3      	str	r3, [r4, #8]
			child = child->next;
   1532e:	682d      	ldr	r5, [r5, #0]
   15330:	e7d3      	b.n	152da <print_array.isra.4+0x7e>
					*ptr++ = ' ';
   15332:	2220      	movs	r2, #32
   15334:	1c83      	adds	r3, r0, #2
   15336:	7042      	strb	r2, [r0, #1]
   15338:	e7f4      	b.n	15324 <print_array.isra.4+0xc8>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   1533a:	4b45      	ldr	r3, [pc, #276]	; (15450 <print_array.isra.4+0x1f4>)
   1533c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   15340:	681a      	ldr	r2, [r3, #0]
   15342:	4658      	mov	r0, fp
   15344:	4790      	blx	r2
		if (!entries)
   15346:	4b42      	ldr	r3, [pc, #264]	; (15450 <print_array.isra.4+0x1f4>)
   15348:	4680      	mov	r8, r0
   1534a:	9301      	str	r3, [sp, #4]
   1534c:	2800      	cmp	r0, #0
   1534e:	d09c      	beq.n	1528a <print_array.isra.4+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   15350:	465a      	mov	r2, fp
	int len = 5;
   15352:	f04f 0b05 	mov.w	fp, #5
   15356:	4621      	mov	r1, r4
   15358:	f01f fb9c 	bl	34a94 <memset>
		child = item->child;
   1535c:	f8d7 9000 	ldr.w	r9, [r7]
		while (child && !fail) {
   15360:	f1a8 0704 	sub.w	r7, r8, #4
		child = item->child;
   15364:	9700      	str	r7, [sp, #0]
			ret = print_value(child, depth + 1, fmt, 0);
   15366:	f10a 0a01 	add.w	sl, sl, #1
		while (child && !fail) {
   1536a:	f1b9 0f00 	cmp.w	r9, #0
   1536e:	d01b      	beq.n	153a8 <print_array.isra.4+0x14c>
   15370:	b114      	cbz	r4, 15378 <print_array.isra.4+0x11c>
	int len = 5;
   15372:	2400      	movs	r4, #0
   15374:	4e37      	ldr	r6, [pc, #220]	; (15454 <print_array.isra.4+0x1f8>)
   15376:	e03b      	b.n	153f0 <print_array.isra.4+0x194>
			ret = print_value(child, depth + 1, fmt, 0);
   15378:	4632      	mov	r2, r6
   1537a:	4623      	mov	r3, r4
   1537c:	4651      	mov	r1, sl
   1537e:	4648      	mov	r0, r9
   15380:	f000 f86a 	bl	15458 <print_value>
			entries[i++] = ret;
   15384:	9a00      	ldr	r2, [sp, #0]
   15386:	f842 0f04 	str.w	r0, [r2, #4]!
   1538a:	9200      	str	r2, [sp, #0]
			if (ret)
   1538c:	b150      	cbz	r0, 153a4 <print_array.isra.4+0x148>
				len += strlens(ret) + 2 + (fmt ? 1 : 0);
   1538e:	f7fc fe77 	bl	12080 <strlen>
   15392:	1c33      	adds	r3, r6, #0
   15394:	bf18      	it	ne
   15396:	2301      	movne	r3, #1
   15398:	3302      	adds	r3, #2
   1539a:	449b      	add	fp, r3
   1539c:	4483      	add	fp, r0
			child = child->next;
   1539e:	f8d9 9000 	ldr.w	r9, [r9]
   153a2:	e7e2      	b.n	1536a <print_array.isra.4+0x10e>
				fail = 1;
   153a4:	2401      	movs	r4, #1
   153a6:	e7fa      	b.n	1539e <print_array.isra.4+0x142>
		if (!fail)
   153a8:	2c00      	cmp	r4, #0
   153aa:	d1e2      	bne.n	15372 <print_array.isra.4+0x116>
			out = (char *)cJSON_malloc(len);
   153ac:	9b01      	ldr	r3, [sp, #4]
   153ae:	4658      	mov	r0, fp
   153b0:	681b      	ldr	r3, [r3, #0]
   153b2:	4798      	blx	r3
		if (!out)
   153b4:	4681      	mov	r9, r0
   153b6:	2800      	cmp	r0, #0
   153b8:	d0db      	beq.n	15372 <print_array.isra.4+0x116>
		*out = '[';
   153ba:	235b      	movs	r3, #91	; 0x5b
   153bc:	4682      	mov	sl, r0
   153be:	f8df b094 	ldr.w	fp, [pc, #148]	; 15454 <print_array.isra.4+0x1f8>
   153c2:	f80a 3b01 	strb.w	r3, [sl], #1
			if (i != numentries - 1) {
   153c6:	1e6b      	subs	r3, r5, #1
		*ptr = 0;
   153c8:	7044      	strb	r4, [r0, #1]
			if (i != numentries - 1) {
   153ca:	9300      	str	r3, [sp, #0]
		for (i = 0; i < numentries; i++) {
   153cc:	42a5      	cmp	r5, r4
   153ce:	dc17      	bgt.n	15400 <print_array.isra.4+0x1a4>
		cJSON_free(entries);
   153d0:	f8db 3000 	ldr.w	r3, [fp]
   153d4:	4640      	mov	r0, r8
   153d6:	4798      	blx	r3
		*ptr++ = ']';
   153d8:	235d      	movs	r3, #93	; 0x5d
   153da:	f88a 3000 	strb.w	r3, [sl]
		*ptr++ = 0;
   153de:	2300      	movs	r3, #0
   153e0:	f88a 3001 	strb.w	r3, [sl, #1]
   153e4:	e751      	b.n	1528a <print_array.isra.4+0x2e>
				if (entries[i])
   153e6:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   153ea:	b100      	cbz	r0, 153ee <print_array.isra.4+0x192>
					cJSON_free(entries[i]);
   153ec:	4798      	blx	r3
			for (i = 0; i < numentries; i++)
   153ee:	3401      	adds	r4, #1
   153f0:	42a5      	cmp	r5, r4
   153f2:	6833      	ldr	r3, [r6, #0]
   153f4:	dcf7      	bgt.n	153e6 <print_array.isra.4+0x18a>
			cJSON_free(entries);
   153f6:	4640      	mov	r0, r8
   153f8:	4798      	blx	r3
			return 0;
   153fa:	f04f 0900 	mov.w	r9, #0
   153fe:	e744      	b.n	1528a <print_array.isra.4+0x2e>
			tmplen = strlens(entries[i]);
   15400:	6878      	ldr	r0, [r7, #4]
   15402:	b108      	cbz	r0, 15408 <print_array.isra.4+0x1ac>
   15404:	f7fc fe3c 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15408:	4602      	mov	r2, r0
   1540a:	9001      	str	r0, [sp, #4]
   1540c:	6879      	ldr	r1, [r7, #4]
   1540e:	4650      	mov	r0, sl
   15410:	f01f fb06 	bl	34a20 <memcpy>
			ptr += tmplen;
   15414:	9b01      	ldr	r3, [sp, #4]
   15416:	449a      	add	sl, r3
			if (i != numentries - 1) {
   15418:	9b00      	ldr	r3, [sp, #0]
   1541a:	429c      	cmp	r4, r3
   1541c:	d009      	beq.n	15432 <print_array.isra.4+0x1d6>
				*ptr++ = ',';
   1541e:	232c      	movs	r3, #44	; 0x2c
   15420:	f88a 3000 	strb.w	r3, [sl]
				if (fmt)
   15424:	b966      	cbnz	r6, 15440 <print_array.isra.4+0x1e4>
				*ptr++ = ',';
   15426:	f10a 0a01 	add.w	sl, sl, #1
				*ptr = 0;
   1542a:	f04f 0300 	mov.w	r3, #0
   1542e:	f88a 3000 	strb.w	r3, [sl]
			cJSON_free(entries[i]);
   15432:	f8db 3000 	ldr.w	r3, [fp]
   15436:	f857 0f04 	ldr.w	r0, [r7, #4]!
   1543a:	4798      	blx	r3
		for (i = 0; i < numentries; i++) {
   1543c:	3401      	adds	r4, #1
   1543e:	e7c5      	b.n	153cc <print_array.isra.4+0x170>
					*ptr++ = ' ';
   15440:	2320      	movs	r3, #32
   15442:	f10a 0a02 	add.w	sl, sl, #2
   15446:	f80a 3c01 	strb.w	r3, [sl, #-1]
   1544a:	e7ee      	b.n	1542a <print_array.isra.4+0x1ce>
   1544c:	00036f91 	.word	0x00036f91
   15450:	20020080 	.word	0x20020080
   15454:	2002007c 	.word	0x2002007c

00015458 <print_value>:
{
   15458:	b510      	push	{r4, lr}
	if (!item)
   1545a:	4604      	mov	r4, r0
   1545c:	b190      	cbz	r0, 15484 <print_value+0x2c>
	if (p) {
   1545e:	7b00      	ldrb	r0, [r0, #12]
   15460:	b383      	cbz	r3, 154c4 <print_value+0x6c>
		switch ((item->type) & 255) {
   15462:	2806      	cmp	r0, #6
   15464:	d851      	bhi.n	1550a <print_value+0xb2>
   15466:	e8df f000 	tbb	[pc, r0]
   1546a:	180f      	.short	0x180f
   1546c:	43272104 	.word	0x43272104
   15470:	4a          	.byte	0x4a
   15471:	00          	.byte	0x00
			out = ensure(p, 5);
   15472:	2105      	movs	r1, #5
   15474:	4618      	mov	r0, r3
   15476:	f7ff fde7 	bl	15048 <ensure>
			if (out)
   1547a:	4604      	mov	r4, r0
   1547c:	b110      	cbz	r0, 15484 <print_value+0x2c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1547e:	4924      	ldr	r1, [pc, #144]	; (15510 <print_value+0xb8>)
   15480:	f01f fc33 	bl	34cea <strcpy>
}
   15484:	4620      	mov	r0, r4
   15486:	bd10      	pop	{r4, pc}
			out = ensure(p, 6);
   15488:	2106      	movs	r1, #6
   1548a:	4618      	mov	r0, r3
   1548c:	f7ff fddc 	bl	15048 <ensure>
			if (out)
   15490:	4604      	mov	r4, r0
   15492:	2800      	cmp	r0, #0
   15494:	d0f6      	beq.n	15484 <print_value+0x2c>
   15496:	491f      	ldr	r1, [pc, #124]	; (15514 <print_value+0xbc>)
   15498:	e7f2      	b.n	15480 <print_value+0x28>
			out = ensure(p, 5);
   1549a:	2105      	movs	r1, #5
   1549c:	4618      	mov	r0, r3
   1549e:	f7ff fdd3 	bl	15048 <ensure>
			if (out)
   154a2:	4604      	mov	r4, r0
   154a4:	2800      	cmp	r0, #0
   154a6:	d0ed      	beq.n	15484 <print_value+0x2c>
   154a8:	491b      	ldr	r1, [pc, #108]	; (15518 <print_value+0xc0>)
   154aa:	e7e9      	b.n	15480 <print_value+0x28>
			out = print_number(item, p);
   154ac:	4619      	mov	r1, r3
			out = print_number(item, 0);
   154ae:	4620      	mov	r0, r4
}
   154b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_number(item, 0);
   154b4:	f7fc bf90 	b.w	123d8 <print_number>
	return print_string_ptr(item->valuestring, p);
   154b8:	4619      	mov	r1, r3
   154ba:	6920      	ldr	r0, [r4, #16]
}
   154bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return print_string_ptr(item->valuestring, p);
   154c0:	f7ff be10 	b.w	150e4 <print_string_ptr>
		switch ((item->type) & 255) {
   154c4:	2806      	cmp	r0, #6
   154c6:	d820      	bhi.n	1550a <print_value+0xb2>
   154c8:	e8df f000 	tbb	[pc, r0]
   154cc:	0d040b09 	.word	0x0d040b09
   154d0:	110f      	.short	0x110f
   154d2:	18          	.byte	0x18
   154d3:	00          	.byte	0x00
			out = cJSON_strdup("null");
   154d4:	480e      	ldr	r0, [pc, #56]	; (15510 <print_value+0xb8>)
}
   154d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = cJSON_strdup("false");
   154da:	f7ff bded 	b.w	150b8 <cJSON_strdup>
   154de:	480d      	ldr	r0, [pc, #52]	; (15514 <print_value+0xbc>)
   154e0:	e7f9      	b.n	154d6 <print_value+0x7e>
			out = cJSON_strdup("true");
   154e2:	480d      	ldr	r0, [pc, #52]	; (15518 <print_value+0xc0>)
   154e4:	e7f7      	b.n	154d6 <print_value+0x7e>
			out = print_number(item, 0);
   154e6:	2100      	movs	r1, #0
   154e8:	e7e1      	b.n	154ae <print_value+0x56>
	return print_string_ptr(item->valuestring, p);
   154ea:	2100      	movs	r1, #0
   154ec:	e7e5      	b.n	154ba <print_value+0x62>
			out = print_array(item, depth, fmt, 0);
   154ee:	2300      	movs	r3, #0
   154f0:	f104 0008 	add.w	r0, r4, #8
}
   154f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_array(item, depth, fmt, 0);
   154f8:	f7ff beb0 	b.w	1525c <print_array.isra.4>
			out = print_object(item, depth, fmt, 0);
   154fc:	2300      	movs	r3, #0
   154fe:	f104 0008 	add.w	r0, r4, #8
}
   15502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_object(item, depth, fmt, 0);
   15506:	f000 b809 	b.w	1551c <print_object.isra.3>
	char *out = 0;
   1550a:	2400      	movs	r4, #0
   1550c:	e7ba      	b.n	15484 <print_value+0x2c>
   1550e:	bf00      	nop
   15510:	00036f81 	.word	0x00036f81
   15514:	00036f86 	.word	0x00036f86
   15518:	00036f8c 	.word	0x00036f8c

0001551c <print_object.isra.3>:
}

/* Render an object to text. */
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   1551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15520:	4615      	mov	r5, r2
{
	char **entries = 0, **names = 0;
	char *out = 0, *ptr, *ret, *str;
	int len = 7, i = 0, j;
	cJSON *child = item->child;
	int numentries = 0, fail = 0;
   15522:	2200      	movs	r2, #0
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   15524:	4680      	mov	r8, r0
   15526:	468b      	mov	fp, r1
   15528:	b089      	sub	sp, #36	; 0x24
   1552a:	461c      	mov	r4, r3
	cJSON *child = item->child;
   1552c:	6803      	ldr	r3, [r0, #0]
	int numentries = 0, fail = 0;
   1552e:	9200      	str	r2, [sp, #0]
	size_t tmplen = 0;
	/* Count the number of entries. */
	while (child)
   15530:	b96b      	cbnz	r3, 1554e <print_object.isra.3+0x32>
		numentries++, child = child->next;
	/* Explicitly handle empty object case */
	if (!numentries) {
   15532:	9b00      	ldr	r3, [sp, #0]
   15534:	2b00      	cmp	r3, #0
   15536:	d13a      	bne.n	155ae <print_object.isra.3+0x92>
		if (p)
   15538:	b184      	cbz	r4, 1555c <print_object.isra.3+0x40>
			out = ensure(p, fmt ? depth + 4 : 3);
   1553a:	b16d      	cbz	r5, 15558 <print_object.isra.3+0x3c>
   1553c:	f10b 0104 	add.w	r1, fp, #4
   15540:	4620      	mov	r0, r4
   15542:	f7ff fd81 	bl	15048 <ensure>
		else
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   15546:	4604      	mov	r4, r0
		if (!out)
   15548:	b988      	cbnz	r0, 1556e <print_object.isra.3+0x52>
				if (entries[i])
					cJSON_free(entries[i]);
			}
			cJSON_free(names);
			cJSON_free(entries);
			return 0;
   1554a:	2400      	movs	r4, #0
   1554c:	e017      	b.n	1557e <print_object.isra.3+0x62>
		numentries++, child = child->next;
   1554e:	9a00      	ldr	r2, [sp, #0]
   15550:	681b      	ldr	r3, [r3, #0]
   15552:	3201      	adds	r2, #1
   15554:	9200      	str	r2, [sp, #0]
   15556:	e7eb      	b.n	15530 <print_object.isra.3+0x14>
			out = ensure(p, fmt ? depth + 4 : 3);
   15558:	2103      	movs	r1, #3
   1555a:	e7f1      	b.n	15540 <print_object.isra.3+0x24>
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   1555c:	4b97      	ldr	r3, [pc, #604]	; (157bc <print_object.isra.3+0x2a0>)
   1555e:	681b      	ldr	r3, [r3, #0]
   15560:	b11d      	cbz	r5, 1556a <print_object.isra.3+0x4e>
   15562:	f10b 0004 	add.w	r0, fp, #4
   15566:	4798      	blx	r3
   15568:	e7ed      	b.n	15546 <print_object.isra.3+0x2a>
   1556a:	2003      	movs	r0, #3
   1556c:	e7fb      	b.n	15566 <print_object.isra.3+0x4a>
		*ptr++ = '{';
   1556e:	237b      	movs	r3, #123	; 0x7b
   15570:	7003      	strb	r3, [r0, #0]
		if (fmt) {
   15572:	b945      	cbnz	r5, 15586 <print_object.isra.3+0x6a>
		*ptr++ = '{';
   15574:	1c43      	adds	r3, r0, #1
		*ptr++ = '}';
   15576:	227d      	movs	r2, #125	; 0x7d
   15578:	701a      	strb	r2, [r3, #0]
		*ptr++ = 0;
   1557a:	2200      	movs	r2, #0
   1557c:	705a      	strb	r2, [r3, #1]
				*ptr++ = '\t';
		*ptr++ = '}';
		*ptr++ = 0;
	}
	return out;
}
   1557e:	4620      	mov	r0, r4
   15580:	b009      	add	sp, #36	; 0x24
   15582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*ptr++ = '\n';
   15586:	220a      	movs	r2, #10
   15588:	1c83      	adds	r3, r0, #2
			for (i = 0; i < depth - 1; i++)
   1558a:	f06f 0501 	mvn.w	r5, #1
			*ptr++ = '\n';
   1558e:	7042      	strb	r2, [r0, #1]
				*ptr++ = '\t';
   15590:	2609      	movs	r6, #9
			*ptr++ = '\n';
   15592:	461a      	mov	r2, r3
			for (i = 0; i < depth - 1; i++)
   15594:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   15598:	1a2d      	subs	r5, r5, r0
   1559a:	1950      	adds	r0, r2, r5
   1559c:	4281      	cmp	r1, r0
   1559e:	dc03      	bgt.n	155a8 <print_object.isra.3+0x8c>
   155a0:	2900      	cmp	r1, #0
   155a2:	bfa8      	it	ge
   155a4:	185b      	addge	r3, r3, r1
   155a6:	e7e6      	b.n	15576 <print_object.isra.3+0x5a>
				*ptr++ = '\t';
   155a8:	f802 6b01 	strb.w	r6, [r2], #1
   155ac:	e7f5      	b.n	1559a <print_object.isra.3+0x7e>
	if (p) {
   155ae:	2c00      	cmp	r4, #0
   155b0:	f000 8092 	beq.w	156d8 <print_object.isra.3+0x1bc>
		len = fmt ? 2 : 1;
   155b4:	2d00      	cmp	r5, #0
   155b6:	bf14      	ite	ne
   155b8:	2702      	movne	r7, #2
   155ba:	2701      	moveq	r7, #1
		ptr = ensure(p, len + 1);
   155bc:	4620      	mov	r0, r4
   155be:	1c79      	adds	r1, r7, #1
		i = p->offset;
   155c0:	f8d4 9008 	ldr.w	r9, [r4, #8]
		ptr = ensure(p, len + 1);
   155c4:	f7ff fd40 	bl	15048 <ensure>
		if (!ptr)
   155c8:	2800      	cmp	r0, #0
   155ca:	d0be      	beq.n	1554a <print_object.isra.3+0x2e>
		*ptr++ = '{';
   155cc:	237b      	movs	r3, #123	; 0x7b
   155ce:	7003      	strb	r3, [r0, #0]
		if (fmt)
   155d0:	b9f5      	cbnz	r5, 15610 <print_object.isra.3+0xf4>
		*ptr++ = '{';
   155d2:	1c43      	adds	r3, r0, #1
		*ptr = 0;
   155d4:	2200      	movs	r2, #0
					*ptr++ = '\t';
   155d6:	f04f 0a09 	mov.w	sl, #9
		*ptr = 0;
   155da:	701a      	strb	r2, [r3, #0]
		p->offset += len;
   155dc:	68a3      	ldr	r3, [r4, #8]
		child = item->child;
   155de:	f8d8 6000 	ldr.w	r6, [r8]
		p->offset += len;
   155e2:	443b      	add	r3, r7
   155e4:	60a3      	str	r3, [r4, #8]
		depth++;
   155e6:	f10b 0801 	add.w	r8, fp, #1
		while (child) {
   155ea:	b9ae      	cbnz	r6, 15618 <print_object.isra.3+0xfc>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   155ec:	2d00      	cmp	r5, #0
   155ee:	d066      	beq.n	156be <print_object.isra.3+0x1a2>
   155f0:	f10b 0102 	add.w	r1, fp, #2
   155f4:	4620      	mov	r0, r4
   155f6:	f7ff fd27 	bl	15048 <ensure>
		if (!ptr)
   155fa:	2800      	cmp	r0, #0
   155fc:	d0a5      	beq.n	1554a <print_object.isra.3+0x2e>
		if (fmt)
   155fe:	2d00      	cmp	r5, #0
   15600:	d167      	bne.n	156d2 <print_object.isra.3+0x1b6>
		*ptr++ = '}';
   15602:	237d      	movs	r3, #125	; 0x7d
   15604:	7003      	strb	r3, [r0, #0]
		*ptr = 0;
   15606:	2300      	movs	r3, #0
   15608:	7043      	strb	r3, [r0, #1]
		out = (p->buffer) + i;
   1560a:	6824      	ldr	r4, [r4, #0]
   1560c:	444c      	add	r4, r9
   1560e:	e7b6      	b.n	1557e <print_object.isra.3+0x62>
			*ptr++ = '\n';
   15610:	220a      	movs	r2, #10
   15612:	1c83      	adds	r3, r0, #2
   15614:	7042      	strb	r2, [r0, #1]
   15616:	e7dd      	b.n	155d4 <print_object.isra.3+0xb8>
			if (fmt) {
   15618:	b15d      	cbz	r5, 15632 <print_object.isra.3+0x116>
				ptr = ensure(p, depth);
   1561a:	4641      	mov	r1, r8
   1561c:	4620      	mov	r0, r4
   1561e:	f7ff fd13 	bl	15048 <ensure>
				if (!ptr)
   15622:	2800      	cmp	r0, #0
   15624:	d091      	beq.n	1554a <print_object.isra.3+0x2e>
				for (j = 0; j < depth; j++)
   15626:	2300      	movs	r3, #0
   15628:	4598      	cmp	r8, r3
   1562a:	dc44      	bgt.n	156b6 <print_object.isra.3+0x19a>
				p->offset += depth;
   1562c:	68a3      	ldr	r3, [r4, #8]
   1562e:	4443      	add	r3, r8
   15630:	60a3      	str	r3, [r4, #8]
			print_string_ptr(child->string, p);
   15632:	4621      	mov	r1, r4
   15634:	6a30      	ldr	r0, [r6, #32]
   15636:	f7ff fd55 	bl	150e4 <print_string_ptr>
			p->offset = update(p);
   1563a:	4620      	mov	r0, r4
   1563c:	f019 f9e9 	bl	2ea12 <update>
			ptr = ensure(p, len);
   15640:	4639      	mov	r1, r7
			p->offset = update(p);
   15642:	60a0      	str	r0, [r4, #8]
			ptr = ensure(p, len);
   15644:	4620      	mov	r0, r4
   15646:	f7ff fcff 	bl	15048 <ensure>
			if (!ptr)
   1564a:	2800      	cmp	r0, #0
   1564c:	f43f af7d 	beq.w	1554a <print_object.isra.3+0x2e>
			*ptr++ = ':';
   15650:	f04f 033a 	mov.w	r3, #58	; 0x3a
   15654:	7003      	strb	r3, [r0, #0]
			if (fmt)
   15656:	b10d      	cbz	r5, 1565c <print_object.isra.3+0x140>
				*ptr++ = '\t';
   15658:	f880 a001 	strb.w	sl, [r0, #1]
			p->offset += len;
   1565c:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   1565e:	462a      	mov	r2, r5
			p->offset += len;
   15660:	443b      	add	r3, r7
			print_value(child, depth, fmt, p);
   15662:	4641      	mov	r1, r8
			p->offset += len;
   15664:	60a3      	str	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   15666:	4630      	mov	r0, r6
   15668:	4623      	mov	r3, r4
   1566a:	f7ff fef5 	bl	15458 <print_value>
			p->offset = update(p);
   1566e:	4620      	mov	r0, r4
   15670:	f019 f9cf 	bl	2ea12 <update>
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   15674:	1c2b      	adds	r3, r5, #0
   15676:	bf18      	it	ne
   15678:	2301      	movne	r3, #1
   1567a:	6832      	ldr	r2, [r6, #0]
			p->offset = update(p);
   1567c:	60a0      	str	r0, [r4, #8]
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   1567e:	2a00      	cmp	r2, #0
   15680:	bf18      	it	ne
   15682:	3301      	addne	r3, #1
			ptr = ensure(p, len + 1);
   15684:	4620      	mov	r0, r4
   15686:	1c59      	adds	r1, r3, #1
   15688:	9300      	str	r3, [sp, #0]
   1568a:	f7ff fcdd 	bl	15048 <ensure>
			if (!ptr)
   1568e:	2800      	cmp	r0, #0
   15690:	f43f af5b 	beq.w	1554a <print_object.isra.3+0x2e>
			if (child->next)
   15694:	6832      	ldr	r2, [r6, #0]
   15696:	9b00      	ldr	r3, [sp, #0]
   15698:	b112      	cbz	r2, 156a0 <print_object.isra.3+0x184>
				*ptr++ = ',';
   1569a:	222c      	movs	r2, #44	; 0x2c
   1569c:	f800 2b01 	strb.w	r2, [r0], #1
			if (fmt) {
   156a0:	b115      	cbz	r5, 156a8 <print_object.isra.3+0x18c>
				*ptr++ = '\n';
   156a2:	220a      	movs	r2, #10
   156a4:	f800 2b01 	strb.w	r2, [r0], #1
			*ptr = 0;
   156a8:	2200      	movs	r2, #0
   156aa:	7002      	strb	r2, [r0, #0]
			p->offset += len;
   156ac:	68a2      	ldr	r2, [r4, #8]
			child = child->next;
   156ae:	6836      	ldr	r6, [r6, #0]
			p->offset += len;
   156b0:	4413      	add	r3, r2
   156b2:	60a3      	str	r3, [r4, #8]
			child = child->next;
   156b4:	e799      	b.n	155ea <print_object.isra.3+0xce>
					*ptr++ = '\t';
   156b6:	f800 a003 	strb.w	sl, [r0, r3]
				for (j = 0; j < depth; j++)
   156ba:	3301      	adds	r3, #1
   156bc:	e7b4      	b.n	15628 <print_object.isra.3+0x10c>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   156be:	2102      	movs	r1, #2
   156c0:	e798      	b.n	155f4 <print_object.isra.3+0xd8>
				*ptr++ = '\t';
   156c2:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < depth - 1; i++)
   156c4:	3301      	adds	r3, #1
   156c6:	459b      	cmp	fp, r3
   156c8:	dcfb      	bgt.n	156c2 <print_object.isra.3+0x1a6>
   156ca:	ea2b 79eb 	bic.w	r9, fp, fp, asr #31
   156ce:	4448      	add	r0, r9
   156d0:	e797      	b.n	15602 <print_object.isra.3+0xe6>
   156d2:	2300      	movs	r3, #0
				*ptr++ = '\t';
   156d4:	2209      	movs	r2, #9
   156d6:	e7f6      	b.n	156c6 <print_object.isra.3+0x1aa>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   156d8:	9b00      	ldr	r3, [sp, #0]
   156da:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 157bc <print_object.isra.3+0x2a0>
   156de:	009f      	lsls	r7, r3, #2
   156e0:	4638      	mov	r0, r7
   156e2:	f8d9 3000 	ldr.w	r3, [r9]
   156e6:	4798      	blx	r3
		if (!entries)
   156e8:	4606      	mov	r6, r0
   156ea:	2800      	cmp	r0, #0
   156ec:	f43f af2d 	beq.w	1554a <print_object.isra.3+0x2e>
		names = (char **)cJSON_malloc(numentries * sizeof(char *));
   156f0:	f8d9 3000 	ldr.w	r3, [r9]
   156f4:	4638      	mov	r0, r7
   156f6:	4798      	blx	r3
		if (!names) {
   156f8:	9001      	str	r0, [sp, #4]
   156fa:	b920      	cbnz	r0, 15706 <print_object.isra.3+0x1ea>
			cJSON_free(entries);
   156fc:	4b30      	ldr	r3, [pc, #192]	; (157c0 <print_object.isra.3+0x2a4>)
   156fe:	4630      	mov	r0, r6
   15700:	681b      	ldr	r3, [r3, #0]
   15702:	4798      	blx	r3
			return 0;
   15704:	e73b      	b.n	1557e <print_object.isra.3+0x62>
__ssp_bos_icheck3(memset, void *, int)
   15706:	463a      	mov	r2, r7
   15708:	4621      	mov	r1, r4
   1570a:	4630      	mov	r0, r6
   1570c:	f01f f9c2 	bl	34a94 <memset>
   15710:	463a      	mov	r2, r7
   15712:	4621      	mov	r1, r4
   15714:	9801      	ldr	r0, [sp, #4]
   15716:	f01f f9bd 	bl	34a94 <memset>
		depth++;
   1571a:	f10b 0301 	add.w	r3, fp, #1
		child = item->child;
   1571e:	f8d8 7000 	ldr.w	r7, [r8]
		depth++;
   15722:	9304      	str	r3, [sp, #16]
		if (fmt)
   15724:	b31d      	cbz	r5, 1576e <print_object.isra.3+0x252>
			len += depth;
   15726:	f10b 0408 	add.w	r4, fp, #8
   1572a:	2d00      	cmp	r5, #0
				       (fmt ? 2 + depth : 0);
   1572c:	f10b 0303 	add.w	r3, fp, #3
   15730:	bf08      	it	eq
   15732:	2300      	moveq	r3, #0
   15734:	f04f 0a00 	mov.w	sl, #0
   15738:	9a01      	ldr	r2, [sp, #4]
				len += strlens(ret) + strlens(str) + 2 +
   1573a:	3302      	adds	r3, #2
   1573c:	3a04      	subs	r2, #4
   1573e:	9203      	str	r2, [sp, #12]
   15740:	1f32      	subs	r2, r6, #4
   15742:	9202      	str	r2, [sp, #8]
				       (fmt ? 2 + depth : 0);
   15744:	4691      	mov	r9, r2
   15746:	9a03      	ldr	r2, [sp, #12]
				len += strlens(ret) + strlens(str) + 2 +
   15748:	9306      	str	r3, [sp, #24]
				       (fmt ? 2 + depth : 0);
   1574a:	9205      	str	r2, [sp, #20]
		while (child) {
   1574c:	b98f      	cbnz	r7, 15772 <print_object.isra.3+0x256>
		if (!fail)
   1574e:	f1ba 0f00 	cmp.w	sl, #0
   15752:	d037      	beq.n	157c4 <print_object.isra.3+0x2a8>
   15754:	4d1a      	ldr	r5, [pc, #104]	; (157c0 <print_object.isra.3+0x2a4>)
				       (fmt ? 2 + depth : 0);
   15756:	2400      	movs	r4, #0
   15758:	462f      	mov	r7, r5
			for (i = 0; i < numentries; i++) {
   1575a:	9a00      	ldr	r2, [sp, #0]
   1575c:	682b      	ldr	r3, [r5, #0]
   1575e:	42a2      	cmp	r2, r4
   15760:	dc5d      	bgt.n	1581e <print_object.isra.3+0x302>
			cJSON_free(names);
   15762:	9801      	ldr	r0, [sp, #4]
   15764:	4798      	blx	r3
			cJSON_free(entries);
   15766:	682b      	ldr	r3, [r5, #0]
   15768:	4630      	mov	r0, r6
   1576a:	4798      	blx	r3
   1576c:	e6ed      	b.n	1554a <print_object.isra.3+0x2e>
	int len = 7, i = 0, j;
   1576e:	2407      	movs	r4, #7
   15770:	e7db      	b.n	1572a <print_object.isra.3+0x20e>
			names[i] = str = print_string_ptr(child->string, 0);
   15772:	2100      	movs	r1, #0
   15774:	6a38      	ldr	r0, [r7, #32]
   15776:	f7ff fcb5 	bl	150e4 <print_string_ptr>
   1577a:	9b05      	ldr	r3, [sp, #20]
   1577c:	4680      	mov	r8, r0
   1577e:	f843 0f04 	str.w	r0, [r3, #4]!
   15782:	9305      	str	r3, [sp, #20]
			entries[i++] = ret = print_value(child, depth, fmt, 0);
   15784:	462a      	mov	r2, r5
   15786:	2300      	movs	r3, #0
   15788:	9904      	ldr	r1, [sp, #16]
   1578a:	4638      	mov	r0, r7
   1578c:	f7ff fe64 	bl	15458 <print_value>
   15790:	f849 0f04 	str.w	r0, [r9, #4]!
			if (str && ret)
   15794:	f1b8 0f00 	cmp.w	r8, #0
   15798:	d00d      	beq.n	157b6 <print_object.isra.3+0x29a>
   1579a:	b160      	cbz	r0, 157b6 <print_object.isra.3+0x29a>
				len += strlens(ret) + strlens(str) + 2 +
   1579c:	f7fc fc70 	bl	12080 <strlen>
   157a0:	9007      	str	r0, [sp, #28]
   157a2:	4640      	mov	r0, r8
   157a4:	f7fc fc6c 	bl	12080 <strlen>
   157a8:	9b06      	ldr	r3, [sp, #24]
   157aa:	441c      	add	r4, r3
   157ac:	9b07      	ldr	r3, [sp, #28]
   157ae:	441c      	add	r4, r3
   157b0:	4404      	add	r4, r0
			child = child->next;
   157b2:	683f      	ldr	r7, [r7, #0]
   157b4:	e7ca      	b.n	1574c <print_object.isra.3+0x230>
				fail = 1;
   157b6:	f04f 0a01 	mov.w	sl, #1
   157ba:	e7fa      	b.n	157b2 <print_object.isra.3+0x296>
   157bc:	20020080 	.word	0x20020080
   157c0:	2002007c 	.word	0x2002007c
			out = (char *)cJSON_malloc(len);
   157c4:	4b4a      	ldr	r3, [pc, #296]	; (158f0 <print_object.isra.3+0x3d4>)
   157c6:	4620      	mov	r0, r4
   157c8:	681b      	ldr	r3, [r3, #0]
   157ca:	4798      	blx	r3
		if (!out)
   157cc:	4604      	mov	r4, r0
   157ce:	2800      	cmp	r0, #0
   157d0:	d0c0      	beq.n	15754 <print_object.isra.3+0x238>
		*out = '{';
   157d2:	237b      	movs	r3, #123	; 0x7b
   157d4:	7003      	strb	r3, [r0, #0]
		if (fmt)
   157d6:	bb75      	cbnz	r5, 15836 <print_object.isra.3+0x31a>
		ptr = out + 1;
   157d8:	1c47      	adds	r7, r0, #1
		*ptr = 0;
   157da:	f04f 0900 	mov.w	r9, #0
   157de:	9b04      	ldr	r3, [sp, #16]
   157e0:	f887 9000 	strb.w	r9, [r7]
		for (i = 0; i < numentries; i++) {
   157e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   157e8:	9305      	str	r3, [sp, #20]
   157ea:	9b00      	ldr	r3, [sp, #0]
   157ec:	454b      	cmp	r3, r9
   157ee:	dc26      	bgt.n	1583e <print_object.isra.3+0x322>
		cJSON_free(names);
   157f0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 158f4 <print_object.isra.3+0x3d8>
   157f4:	9801      	ldr	r0, [sp, #4]
   157f6:	f8d8 3000 	ldr.w	r3, [r8]
   157fa:	4798      	blx	r3
		cJSON_free(entries);
   157fc:	f8d8 3000 	ldr.w	r3, [r8]
   15800:	4630      	mov	r0, r6
   15802:	4798      	blx	r3
		if (fmt)
   15804:	b135      	cbz	r5, 15814 <print_object.isra.3+0x2f8>
				*ptr++ = '\t';
   15806:	2309      	movs	r3, #9
			for (i = 0; i < depth - 1; i++)
   15808:	45d3      	cmp	fp, sl
   1580a:	dc6b      	bgt.n	158e4 <print_object.isra.3+0x3c8>
   1580c:	f1bb 0f00 	cmp.w	fp, #0
   15810:	bfa8      	it	ge
   15812:	445f      	addge	r7, fp
		*ptr++ = '}';
   15814:	237d      	movs	r3, #125	; 0x7d
   15816:	703b      	strb	r3, [r7, #0]
		*ptr++ = 0;
   15818:	2300      	movs	r3, #0
   1581a:	707b      	strb	r3, [r7, #1]
   1581c:	e6af      	b.n	1557e <print_object.isra.3+0x62>
				if (names[i])
   1581e:	9a01      	ldr	r2, [sp, #4]
   15820:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   15824:	b100      	cbz	r0, 15828 <print_object.isra.3+0x30c>
					cJSON_free(names[i]);
   15826:	4798      	blx	r3
				if (entries[i])
   15828:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1582c:	b108      	cbz	r0, 15832 <print_object.isra.3+0x316>
					cJSON_free(entries[i]);
   1582e:	683b      	ldr	r3, [r7, #0]
   15830:	4798      	blx	r3
			for (i = 0; i < numentries; i++) {
   15832:	3401      	adds	r4, #1
   15834:	e791      	b.n	1575a <print_object.isra.3+0x23e>
			*ptr++ = '\n';
   15836:	230a      	movs	r3, #10
   15838:	1c87      	adds	r7, r0, #2
   1583a:	7043      	strb	r3, [r0, #1]
   1583c:	e7cd      	b.n	157da <print_object.isra.3+0x2be>
			if (fmt)
   1583e:	b155      	cbz	r5, 15856 <print_object.isra.3+0x33a>
				for (j = 0; j < depth; j++)
   15840:	2300      	movs	r3, #0
   15842:	e003      	b.n	1584c <print_object.isra.3+0x330>
					*ptr++ = '\t';
   15844:	f04f 0209 	mov.w	r2, #9
   15848:	54fa      	strb	r2, [r7, r3]
				for (j = 0; j < depth; j++)
   1584a:	3301      	adds	r3, #1
   1584c:	9a04      	ldr	r2, [sp, #16]
   1584e:	429a      	cmp	r2, r3
   15850:	dcf8      	bgt.n	15844 <print_object.isra.3+0x328>
   15852:	9b05      	ldr	r3, [sp, #20]
   15854:	441f      	add	r7, r3
			tmplen = strlens(names[i]);
   15856:	9b03      	ldr	r3, [sp, #12]
   15858:	6858      	ldr	r0, [r3, #4]
   1585a:	b108      	cbz	r0, 15860 <print_object.isra.3+0x344>
   1585c:	f7fc fc10 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15860:	9b03      	ldr	r3, [sp, #12]
   15862:	4680      	mov	r8, r0
   15864:	4602      	mov	r2, r0
   15866:	6859      	ldr	r1, [r3, #4]
   15868:	4638      	mov	r0, r7
   1586a:	f01f f8d9 	bl	34a20 <memcpy>
			*ptr++ = ':';
   1586e:	223a      	movs	r2, #58	; 0x3a
			ptr += tmplen;
   15870:	eb07 0308 	add.w	r3, r7, r8
			*ptr++ = ':';
   15874:	f807 2008 	strb.w	r2, [r7, r8]
			if (fmt)
   15878:	bb75      	cbnz	r5, 158d8 <print_object.isra.3+0x3bc>
			*ptr++ = ':';
   1587a:	f103 0801 	add.w	r8, r3, #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1587e:	9b02      	ldr	r3, [sp, #8]
   15880:	4640      	mov	r0, r8
   15882:	6859      	ldr	r1, [r3, #4]
   15884:	f01f fa31 	bl	34cea <strcpy>
			ptr += strlens(entries[i]);
   15888:	9b02      	ldr	r3, [sp, #8]
   1588a:	6858      	ldr	r0, [r3, #4]
   1588c:	b108      	cbz	r0, 15892 <print_object.isra.3+0x376>
   1588e:	f7fc fbf7 	bl	12080 <strlen>
			if (i != numentries - 1)
   15892:	9b00      	ldr	r3, [sp, #0]
			ptr += strlens(entries[i]);
   15894:	eb08 0700 	add.w	r7, r8, r0
			if (i != numentries - 1)
   15898:	3b01      	subs	r3, #1
   1589a:	4599      	cmp	r9, r3
				*ptr++ = ',';
   1589c:	bf1e      	ittt	ne
   1589e:	232c      	movne	r3, #44	; 0x2c
   158a0:	3701      	addne	r7, #1
   158a2:	f808 3000 	strbne.w	r3, [r8, r0]
			if (fmt) {
   158a6:	b115      	cbz	r5, 158ae <print_object.isra.3+0x392>
				*ptr++ = '\n';
   158a8:	230a      	movs	r3, #10
   158aa:	f807 3b01 	strb.w	r3, [r7], #1
			*ptr = 0;
   158ae:	2300      	movs	r3, #0
			cJSON_free(names[i]);
   158b0:	9a03      	ldr	r2, [sp, #12]
			*ptr = 0;
   158b2:	703b      	strb	r3, [r7, #0]
			cJSON_free(names[i]);
   158b4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 158f4 <print_object.isra.3+0x3d8>
   158b8:	f852 0f04 	ldr.w	r0, [r2, #4]!
   158bc:	f8d8 3000 	ldr.w	r3, [r8]
   158c0:	9203      	str	r2, [sp, #12]
   158c2:	4798      	blx	r3
			cJSON_free(entries[i]);
   158c4:	9a02      	ldr	r2, [sp, #8]
   158c6:	f8d8 3000 	ldr.w	r3, [r8]
   158ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
		for (i = 0; i < numentries; i++) {
   158ce:	f109 0901 	add.w	r9, r9, #1
			cJSON_free(entries[i]);
   158d2:	9202      	str	r2, [sp, #8]
   158d4:	4798      	blx	r3
   158d6:	e788      	b.n	157ea <print_object.isra.3+0x2ce>
				*ptr++ = '\t';
   158d8:	f04f 0209 	mov.w	r2, #9
   158dc:	f103 0802 	add.w	r8, r3, #2
   158e0:	705a      	strb	r2, [r3, #1]
   158e2:	e7cc      	b.n	1587e <print_object.isra.3+0x362>
				*ptr++ = '\t';
   158e4:	f807 300a 	strb.w	r3, [r7, sl]
			for (i = 0; i < depth - 1; i++)
   158e8:	f10a 0a01 	add.w	sl, sl, #1
   158ec:	e78c      	b.n	15808 <print_object.isra.3+0x2ec>
   158ee:	bf00      	nop
   158f0:	20020080 	.word	0x20020080
   158f4:	2002007c 	.word	0x2002007c

000158f8 <cJSON_Delete>:
{
   158f8:	b570      	push	{r4, r5, r6, lr}
   158fa:	4604      	mov	r4, r0
   158fc:	4d0f      	ldr	r5, [pc, #60]	; (1593c <cJSON_Delete+0x44>)
	while (c) {
   158fe:	b904      	cbnz	r4, 15902 <cJSON_Delete+0xa>
}
   15900:	bd70      	pop	{r4, r5, r6, pc}
		if (!(c->type & cJSON_IsReference) && c->child)
   15902:	68e3      	ldr	r3, [r4, #12]
		next = c->next;
   15904:	6826      	ldr	r6, [r4, #0]
		if (!(c->type & cJSON_IsReference) && c->child)
   15906:	05d9      	lsls	r1, r3, #23
   15908:	d403      	bmi.n	15912 <cJSON_Delete+0x1a>
   1590a:	68a0      	ldr	r0, [r4, #8]
   1590c:	b968      	cbnz	r0, 1592a <cJSON_Delete+0x32>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   1590e:	6920      	ldr	r0, [r4, #16]
   15910:	b988      	cbnz	r0, 15936 <cJSON_Delete+0x3e>
		if (!(c->type & cJSON_StringIsConst) && c->string)
   15912:	68e3      	ldr	r3, [r4, #12]
   15914:	059b      	lsls	r3, r3, #22
   15916:	d403      	bmi.n	15920 <cJSON_Delete+0x28>
   15918:	6a20      	ldr	r0, [r4, #32]
   1591a:	b108      	cbz	r0, 15920 <cJSON_Delete+0x28>
			cJSON_free(c->string);
   1591c:	682b      	ldr	r3, [r5, #0]
   1591e:	4798      	blx	r3
		cJSON_free(c);
   15920:	4620      	mov	r0, r4
   15922:	682b      	ldr	r3, [r5, #0]
   15924:	4798      	blx	r3
		c = next;
   15926:	4634      	mov	r4, r6
   15928:	e7e9      	b.n	158fe <cJSON_Delete+0x6>
			cJSON_Delete(c->child);
   1592a:	f7ff ffe5 	bl	158f8 <cJSON_Delete>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   1592e:	68e3      	ldr	r3, [r4, #12]
   15930:	05da      	lsls	r2, r3, #23
   15932:	d5ec      	bpl.n	1590e <cJSON_Delete+0x16>
   15934:	e7ed      	b.n	15912 <cJSON_Delete+0x1a>
			cJSON_free(c->valuestring);
   15936:	682b      	ldr	r3, [r5, #0]
   15938:	4798      	blx	r3
   1593a:	e7ea      	b.n	15912 <cJSON_Delete+0x1a>
   1593c:	2002007c 	.word	0x2002007c

00015940 <cJSON_ParseWithOpts>:
{
   15940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15944:	4605      	mov	r5, r0
   15946:	460e      	mov	r6, r1
   15948:	4691      	mov	r9, r2
	ep = 0;
   1594a:	2700      	movs	r7, #0
	cJSON *c = cJSON_New_Item();
   1594c:	f7ff fa72 	bl	14e34 <cJSON_New_Item>
	ep = 0;
   15950:	f8df 8050 	ldr.w	r8, [pc, #80]	; 159a4 <cJSON_ParseWithOpts+0x64>
	if (!c)
   15954:	4604      	mov	r4, r0
	ep = 0;
   15956:	f8c8 7000 	str.w	r7, [r8]
	if (!c)
   1595a:	b160      	cbz	r0, 15976 <cJSON_ParseWithOpts+0x36>
	end = parse_value(c, skip(value));
   1595c:	4628      	mov	r0, r5
   1595e:	f019 f84f 	bl	2ea00 <skip>
   15962:	4601      	mov	r1, r0
   15964:	4620      	mov	r0, r4
   15966:	f7ff fa75 	bl	14e54 <parse_value>
	if (!end) {
   1596a:	4605      	mov	r5, r0
   1596c:	b930      	cbnz	r0, 1597c <cJSON_ParseWithOpts+0x3c>
		cJSON_Delete(c);
   1596e:	4620      	mov	r0, r4
   15970:	f7ff ffc2 	bl	158f8 <cJSON_Delete>
		return 0;
   15974:	462c      	mov	r4, r5
}
   15976:	4620      	mov	r0, r4
   15978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (require_null_terminated) {
   1597c:	f1b9 0f00 	cmp.w	r9, #0
   15980:	d00b      	beq.n	1599a <cJSON_ParseWithOpts+0x5a>
		end = skip(end);
   15982:	f019 f83d 	bl	2ea00 <skip>
		if (*end) {
   15986:	7803      	ldrb	r3, [r0, #0]
		end = skip(end);
   15988:	4605      	mov	r5, r0
		if (*end) {
   1598a:	b133      	cbz	r3, 1599a <cJSON_ParseWithOpts+0x5a>
			cJSON_Delete(c);
   1598c:	4620      	mov	r0, r4
   1598e:	f7ff ffb3 	bl	158f8 <cJSON_Delete>
			return 0;
   15992:	463c      	mov	r4, r7
			ep = end;
   15994:	f8c8 5000 	str.w	r5, [r8]
			return 0;
   15998:	e7ed      	b.n	15976 <cJSON_ParseWithOpts+0x36>
	if (return_parse_end)
   1599a:	2e00      	cmp	r6, #0
   1599c:	d0eb      	beq.n	15976 <cJSON_ParseWithOpts+0x36>
		*return_parse_end = end;
   1599e:	6035      	str	r5, [r6, #0]
   159a0:	e7e9      	b.n	15976 <cJSON_ParseWithOpts+0x36>
   159a2:	bf00      	nop
   159a4:	20021494 	.word	0x20021494

000159a8 <cJSON_AddItemToObject>:
			c = c->next;
		suffix_object(c, item);
	}
}
void cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
   159a8:	b570      	push	{r4, r5, r6, lr}
   159aa:	4605      	mov	r5, r0
   159ac:	460e      	mov	r6, r1
	if (!item)
   159ae:	4614      	mov	r4, r2
   159b0:	b172      	cbz	r2, 159d0 <cJSON_AddItemToObject+0x28>
		return;
	if (item->string)
   159b2:	6a10      	ldr	r0, [r2, #32]
   159b4:	b110      	cbz	r0, 159bc <cJSON_AddItemToObject+0x14>
		cJSON_free(item->string);
   159b6:	4b07      	ldr	r3, [pc, #28]	; (159d4 <cJSON_AddItemToObject+0x2c>)
   159b8:	681b      	ldr	r3, [r3, #0]
   159ba:	4798      	blx	r3
	item->string = cJSON_strdup(string);
   159bc:	4630      	mov	r0, r6
   159be:	f7ff fb7b 	bl	150b8 <cJSON_strdup>
	cJSON_AddItemToArray(object, item);
   159c2:	4621      	mov	r1, r4
	item->string = cJSON_strdup(string);
   159c4:	6220      	str	r0, [r4, #32]
	cJSON_AddItemToArray(object, item);
   159c6:	4628      	mov	r0, r5
}
   159c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cJSON_AddItemToArray(object, item);
   159cc:	f019 b837 	b.w	2ea3e <cJSON_AddItemToArray>
}
   159d0:	bd70      	pop	{r4, r5, r6, pc}
   159d2:	bf00      	nop
   159d4:	2002007c 	.word	0x2002007c

000159d8 <timer_work_handler>:
bool timer_stopped = true;

/* work handler */
void timer_work_handler(struct k_work *work)
{
	timer_stopped = false;
   159d8:	2200      	movs	r2, #0
   159da:	4b03      	ldr	r3, [pc, #12]	; (159e8 <timer_work_handler+0x10>)
   159dc:	701a      	strb	r2, [r3, #0]

	sec += 1;
   159de:	4a03      	ldr	r2, [pc, #12]	; (159ec <timer_work_handler+0x14>)
   159e0:	6813      	ldr	r3, [r2, #0]
   159e2:	3301      	adds	r3, #1
   159e4:	6013      	str	r3, [r2, #0]
	m = (sec -(3600*h))/60;
	
	s = (sec -(3600*h)-(m*60));

	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
}
   159e6:	4770      	bx	lr
   159e8:	200203d4 	.word	0x200203d4
   159ec:	200214c8 	.word	0x200214c8

000159f0 <timer_stop_work_handler>:

void timer_stop_work_handler(struct k_work *work)
{
	LOG_DBG("BSEC took %d seconds to stabilise", sec);
	sec = 0;
   159f0:	2200      	movs	r2, #0
   159f2:	4b03      	ldr	r3, [pc, #12]	; (15a00 <timer_stop_work_handler+0x10>)
   159f4:	601a      	str	r2, [r3, #0]
	timer_stopped = true;
   159f6:	2201      	movs	r2, #1
   159f8:	4b02      	ldr	r3, [pc, #8]	; (15a04 <timer_stop_work_handler+0x14>)
   159fa:	701a      	strb	r2, [r3, #0]
}
   159fc:	4770      	bx	lr
   159fe:	bf00      	nop
   15a00:	200214c8 	.word	0x200214c8
   15a04:	200203d4 	.word	0x200203d4

00015a08 <submit_poll_work>:
	return 0;
}

static inline int submit_poll_work(const u32_t delay_s)
{
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   15a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a0c:	4b02      	ldr	r3, [pc, #8]	; (15a18 <submit_poll_work+0x10>)
   15a0e:	4342      	muls	r2, r0
   15a10:	4902      	ldr	r1, [pc, #8]	; (15a1c <submit_poll_work+0x14>)
   15a12:	6818      	ldr	r0, [r3, #0]
   15a14:	f015 ba00 	b.w	2ae18 <k_delayed_work_submit_to_queue>
   15a18:	200214bc 	.word	0x200214bc
   15a1c:	2002149c 	.word	0x2002149c

00015a20 <bsec_thread>:
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   15a20:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
{
   15a24:	b507      	push	{r0, r1, r2, lr}
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   15a26:	4a05      	ldr	r2, [pc, #20]	; (15a3c <bsec_thread+0x1c>)
   15a28:	9300      	str	r3, [sp, #0]
   15a2a:	4905      	ldr	r1, [pc, #20]	; (15a40 <bsec_thread+0x20>)
   15a2c:	4b05      	ldr	r3, [pc, #20]	; (15a44 <bsec_thread+0x24>)
   15a2e:	4806      	ldr	r0, [pc, #24]	; (15a48 <bsec_thread+0x28>)
   15a30:	f000 fc9e 	bl	16370 <bsec_iot_loop>
}
   15a34:	b003      	add	sp, #12
   15a36:	f85d fb04 	ldr.w	pc, [sp], #4
   15a3a:	bf00      	nop
   15a3c:	00015b39 	.word	0x00015b39
   15a40:	0002eaaf 	.word	0x0002eaaf
   15a44:	00015a4d 	.word	0x00015a4d
   15a48:	0002ead3 	.word	0x0002ead3

00015a4c <state_save>:
	settings_save_one("bsec/state", state_buffer, length);
   15a4c:	460a      	mov	r2, r1
   15a4e:	4601      	mov	r1, r0
   15a50:	4801      	ldr	r0, [pc, #4]	; (15a58 <state_save+0xc>)
   15a52:	f002 b929 	b.w	17ca8 <settings_save_one>
   15a56:	bf00      	nop
   15a58:	0003703a 	.word	0x0003703a

00015a5c <settings_set>:
{
   15a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a60:	460d      	mov	r5, r1
	if (!strcmp(key, "state")) {
   15a62:	490b      	ldr	r1, [pc, #44]	; (15a90 <settings_set+0x34>)
{
   15a64:	4617      	mov	r7, r2
   15a66:	4698      	mov	r8, r3
	if (!strcmp(key, "state")) {
   15a68:	f7fc fb00 	bl	1206c <strcmp>
   15a6c:	4e09      	ldr	r6, [pc, #36]	; (15a94 <settings_set+0x38>)
   15a6e:	4604      	mov	r4, r0
   15a70:	b130      	cbz	r0, 15a80 <settings_set+0x24>
	s_state_buffer_len = 0;
   15a72:	2300      	movs	r3, #0
	return -1;
   15a74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	s_state_buffer_len = 0;
   15a78:	6033      	str	r3, [r6, #0]
}
   15a7a:	4620      	mov	r0, r4
   15a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		s_state_buffer_len = len_rd;
   15a80:	6035      	str	r5, [r6, #0]
		if (read_cb(cb_arg, s_state_buffer, len_rd) > 0) {
   15a82:	462a      	mov	r2, r5
   15a84:	4904      	ldr	r1, [pc, #16]	; (15a98 <settings_set+0x3c>)
   15a86:	4640      	mov	r0, r8
   15a88:	47b8      	blx	r7
   15a8a:	2800      	cmp	r0, #0
   15a8c:	dcf5      	bgt.n	15a7a <settings_set+0x1e>
   15a8e:	e7f0      	b.n	15a72 <settings_set+0x16>
   15a90:	0003703f 	.word	0x0003703f
   15a94:	200214c4 	.word	0x200214c4
   15a98:	20027e64 	.word	0x20027e64

00015a9c <state_load>:
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   15a9c:	4b07      	ldr	r3, [pc, #28]	; (15abc <state_load+0x20>)
{
   15a9e:	b510      	push	{r4, lr}
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   15aa0:	681c      	ldr	r4, [r3, #0]
   15aa2:	2c00      	cmp	r4, #0
   15aa4:	dd07      	ble.n	15ab6 <state_load+0x1a>
   15aa6:	428c      	cmp	r4, r1
   15aa8:	d805      	bhi.n	15ab6 <state_load+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15aaa:	4622      	mov	r2, r4
   15aac:	4904      	ldr	r1, [pc, #16]	; (15ac0 <state_load+0x24>)
   15aae:	f01e ffb7 	bl	34a20 <memcpy>
}
   15ab2:	4620      	mov	r0, r4
   15ab4:	bd10      	pop	{r4, pc}
		return 0;
   15ab6:	2400      	movs	r4, #0
   15ab8:	e7fb      	b.n	15ab2 <state_load+0x16>
   15aba:	bf00      	nop
   15abc:	200214c4 	.word	0x200214c4
   15ac0:	20027e64 	.word	0x20027e64

00015ac4 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   15ac4:	b510      	push	{r4, lr}

	if (data_send_interval_s == 0) {
   15ac6:	4c09      	ldr	r4, [pc, #36]	; (15aec <env_sensors_poll_fn+0x28>)
   15ac8:	6822      	ldr	r2, [r4, #0]
   15aca:	b16a      	cbz	r2, 15ae8 <env_sensors_poll_fn+0x24>
		return;
	}

	if (data_ready_cb) {
   15acc:	4b08      	ldr	r3, [pc, #32]	; (15af0 <env_sensors_poll_fn+0x2c>)
   15ace:	681b      	ldr	r3, [r3, #0]
   15ad0:	b103      	cbz	r3, 15ad4 <env_sensors_poll_fn+0x10>
		data_ready_cb();
   15ad2:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   15ad4:	4b07      	ldr	r3, [pc, #28]	; (15af4 <env_sensors_poll_fn+0x30>)
   15ad6:	781b      	ldrb	r3, [r3, #0]
   15ad8:	b923      	cbnz	r3, 15ae4 <env_sensors_poll_fn+0x20>
   15ada:	6820      	ldr	r0, [r4, #0]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   15adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	submit_poll_work(backoff_enabled ?
   15ae0:	f7ff bf92 	b.w	15a08 <submit_poll_work>
   15ae4:	2014      	movs	r0, #20
   15ae6:	e7f9      	b.n	15adc <env_sensors_poll_fn+0x18>
}
   15ae8:	bd10      	pop	{r4, pc}
   15aea:	bf00      	nop
   15aec:	20020088 	.word	0x20020088
   15af0:	20021498 	.word	0x20021498
   15af4:	20027e61 	.word	0x20027e61

00015af8 <bus_read>:
{
   15af8:	b530      	push	{r4, r5, lr}
   15afa:	b089      	sub	sp, #36	; 0x24
   15afc:	f88d 1007 	strb.w	r1, [sp, #7]
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   15b00:	490c      	ldr	r1, [pc, #48]	; (15b34 <bus_read+0x3c>)
{
   15b02:	4605      	mov	r5, r0
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   15b04:	6808      	ldr	r0, [r1, #0]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
   15b06:	f10d 0107 	add.w	r1, sp, #7
   15b0a:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   15b0c:	2101      	movs	r1, #1
   15b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   15b12:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   15b14:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   15b16:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   15b18:	f88d 301c 	strb.w	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   15b1c:	f88d 1010 	strb.w	r1, [sp, #16]
	return api->transfer(dev, msgs, num_msgs, addr);
   15b20:	6883      	ldr	r3, [r0, #8]
   15b22:	2202      	movs	r2, #2
   15b24:	685c      	ldr	r4, [r3, #4]
   15b26:	a902      	add	r1, sp, #8
   15b28:	462b      	mov	r3, r5
   15b2a:	47a0      	blx	r4
}
   15b2c:	b240      	sxtb	r0, r0
   15b2e:	b009      	add	sp, #36	; 0x24
   15b30:	bd30      	pop	{r4, r5, pc}
   15b32:	bf00      	nop
   15b34:	200214c0 	.word	0x200214c0

00015b38 <output_ready>:
{
   15b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!iaq_reading_ok) {
   15b3c:	4c8b      	ldr	r4, [pc, #556]	; (15d6c <output_ready+0x234>)
{
   15b3e:	4615      	mov	r5, r2
	if (!iaq_reading_ok) {
   15b40:	7822      	ldrb	r2, [r4, #0]
{
   15b42:	ed2d 8b02 	vpush	{d8}
   15b46:	ee10 6a10 	vmov	r6, s0
   15b4a:	ee10 8a90 	vmov	r8, s1
   15b4e:	ee11 7a10 	vmov	r7, s2
   15b52:	eeb0 8a61 	vmov.f32	s16, s3
	if (!iaq_reading_ok) {
   15b56:	b92a      	cbnz	r2, 15b64 <output_ready+0x2c>
	z_impl_k_timer_start(timer, duration, period);
   15b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b5c:	4884      	ldr	r0, [pc, #528]	; (15d70 <output_ready+0x238>)
   15b5e:	4611      	mov	r1, r2
   15b60:	f015 fd90 	bl	2b684 <z_impl_k_timer_start>
	switch (iaq_accuracy) 
   15b64:	2d03      	cmp	r5, #3
   15b66:	d107      	bne.n	15b78 <output_ready+0x40>
			iaq_reading_ok = true;
   15b68:	2201      	movs	r2, #1
	if (timer_stopped && iaq_reading_ok) {
   15b6a:	4b82      	ldr	r3, [pc, #520]	; (15d74 <output_ready+0x23c>)
			iaq_reading_ok = true;
   15b6c:	7022      	strb	r2, [r4, #0]
	if (timer_stopped && iaq_reading_ok) {
   15b6e:	781b      	ldrb	r3, [r3, #0]
			if (!timer_stopped) {
   15b70:	b913      	cbnz	r3, 15b78 <output_ready+0x40>
	z_impl_k_timer_stop(timer);
   15b72:	487f      	ldr	r0, [pc, #508]	; (15d70 <output_ready+0x238>)
   15b74:	f01e feba 	bl	348ec <z_impl_k_timer_stop>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   15b78:	f04f 0320 	mov.w	r3, #32
   15b7c:	f3ef 8511 	mrs	r5, BASEPRI
   15b80:	f383 8811 	msr	BASEPRI, r3
   15b84:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15b88:	487b      	ldr	r0, [pc, #492]	; (15d78 <output_ready+0x240>)
   15b8a:	f015 f8fb 	bl	2ad84 <z_spin_lock_valid>
   15b8e:	b968      	cbnz	r0, 15bac <output_ready+0x74>
   15b90:	235c      	movs	r3, #92	; 0x5c
   15b92:	4a7a      	ldr	r2, [pc, #488]	; (15d7c <output_ready+0x244>)
   15b94:	497a      	ldr	r1, [pc, #488]	; (15d80 <output_ready+0x248>)
   15b96:	487b      	ldr	r0, [pc, #492]	; (15d84 <output_ready+0x24c>)
   15b98:	f019 fb5b 	bl	2f252 <printk>
   15b9c:	4976      	ldr	r1, [pc, #472]	; (15d78 <output_ready+0x240>)
   15b9e:	487a      	ldr	r0, [pc, #488]	; (15d88 <output_ready+0x250>)
   15ba0:	f019 fb57 	bl	2f252 <printk>
   15ba4:	215c      	movs	r1, #92	; 0x5c
   15ba6:	4875      	ldr	r0, [pc, #468]	; (15d7c <output_ready+0x244>)
   15ba8:	f019 fe54 	bl	2f854 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   15bac:	4c77      	ldr	r4, [pc, #476]	; (15d8c <output_ready+0x254>)
   15bae:	f104 0018 	add.w	r0, r4, #24
   15bb2:	f015 f905 	bl	2adc0 <z_spin_lock_set_owner>
	temp_sensor.sensor.value = temperature;
   15bb6:	4640      	mov	r0, r8
   15bb8:	f7f7 fa20 	bl	cffc <__aeabi_f2d>
   15bbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15bc0:	f104 0018 	add.w	r0, r4, #24
   15bc4:	f015 f8ec 	bl	2ada0 <z_spin_unlock_valid>
   15bc8:	b970      	cbnz	r0, 15be8 <output_ready+0xb0>
   15bca:	2384      	movs	r3, #132	; 0x84
   15bcc:	4a6b      	ldr	r2, [pc, #428]	; (15d7c <output_ready+0x244>)
   15bce:	4970      	ldr	r1, [pc, #448]	; (15d90 <output_ready+0x258>)
   15bd0:	486c      	ldr	r0, [pc, #432]	; (15d84 <output_ready+0x24c>)
   15bd2:	f019 fb3e 	bl	2f252 <printk>
   15bd6:	f104 0118 	add.w	r1, r4, #24
   15bda:	486e      	ldr	r0, [pc, #440]	; (15d94 <output_ready+0x25c>)
   15bdc:	f019 fb39 	bl	2f252 <printk>
   15be0:	2184      	movs	r1, #132	; 0x84
   15be2:	4866      	ldr	r0, [pc, #408]	; (15d7c <output_ready+0x244>)
   15be4:	f019 fe36 	bl	2f854 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   15be8:	f385 8811 	msr	BASEPRI, r5
   15bec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15bf0:	f04f 0320 	mov.w	r3, #32
   15bf4:	f3ef 8511 	mrs	r5, BASEPRI
   15bf8:	f383 8811 	msr	BASEPRI, r3
   15bfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15c00:	4865      	ldr	r0, [pc, #404]	; (15d98 <output_ready+0x260>)
   15c02:	f015 f8bf 	bl	2ad84 <z_spin_lock_valid>
   15c06:	b968      	cbnz	r0, 15c24 <output_ready+0xec>
   15c08:	235c      	movs	r3, #92	; 0x5c
   15c0a:	4a5c      	ldr	r2, [pc, #368]	; (15d7c <output_ready+0x244>)
   15c0c:	495c      	ldr	r1, [pc, #368]	; (15d80 <output_ready+0x248>)
   15c0e:	485d      	ldr	r0, [pc, #372]	; (15d84 <output_ready+0x24c>)
   15c10:	f019 fb1f 	bl	2f252 <printk>
   15c14:	4960      	ldr	r1, [pc, #384]	; (15d98 <output_ready+0x260>)
   15c16:	485c      	ldr	r0, [pc, #368]	; (15d88 <output_ready+0x250>)
   15c18:	f019 fb1b 	bl	2f252 <printk>
   15c1c:	215c      	movs	r1, #92	; 0x5c
   15c1e:	4857      	ldr	r0, [pc, #348]	; (15d7c <output_ready+0x244>)
   15c20:	f019 fe18 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15c24:	4c5d      	ldr	r4, [pc, #372]	; (15d9c <output_ready+0x264>)
   15c26:	f104 0018 	add.w	r0, r4, #24
   15c2a:	f015 f8c9 	bl	2adc0 <z_spin_lock_set_owner>
	humid_sensor.sensor.value = humidity;
   15c2e:	4638      	mov	r0, r7
   15c30:	f7f7 f9e4 	bl	cffc <__aeabi_f2d>
   15c34:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15c38:	f104 0018 	add.w	r0, r4, #24
   15c3c:	f015 f8b0 	bl	2ada0 <z_spin_unlock_valid>
   15c40:	b970      	cbnz	r0, 15c60 <output_ready+0x128>
   15c42:	2384      	movs	r3, #132	; 0x84
   15c44:	4a4d      	ldr	r2, [pc, #308]	; (15d7c <output_ready+0x244>)
   15c46:	4952      	ldr	r1, [pc, #328]	; (15d90 <output_ready+0x258>)
   15c48:	484e      	ldr	r0, [pc, #312]	; (15d84 <output_ready+0x24c>)
   15c4a:	f019 fb02 	bl	2f252 <printk>
   15c4e:	f104 0118 	add.w	r1, r4, #24
   15c52:	4850      	ldr	r0, [pc, #320]	; (15d94 <output_ready+0x25c>)
   15c54:	f019 fafd 	bl	2f252 <printk>
   15c58:	2184      	movs	r1, #132	; 0x84
   15c5a:	4848      	ldr	r0, [pc, #288]	; (15d7c <output_ready+0x244>)
   15c5c:	f019 fdfa 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   15c60:	f385 8811 	msr	BASEPRI, r5
   15c64:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15c68:	f04f 0320 	mov.w	r3, #32
   15c6c:	f3ef 8511 	mrs	r5, BASEPRI
   15c70:	f383 8811 	msr	BASEPRI, r3
   15c74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15c78:	4849      	ldr	r0, [pc, #292]	; (15da0 <output_ready+0x268>)
   15c7a:	f015 f883 	bl	2ad84 <z_spin_lock_valid>
   15c7e:	b968      	cbnz	r0, 15c9c <output_ready+0x164>
   15c80:	235c      	movs	r3, #92	; 0x5c
   15c82:	4a3e      	ldr	r2, [pc, #248]	; (15d7c <output_ready+0x244>)
   15c84:	493e      	ldr	r1, [pc, #248]	; (15d80 <output_ready+0x248>)
   15c86:	483f      	ldr	r0, [pc, #252]	; (15d84 <output_ready+0x24c>)
   15c88:	f019 fae3 	bl	2f252 <printk>
   15c8c:	4944      	ldr	r1, [pc, #272]	; (15da0 <output_ready+0x268>)
   15c8e:	483e      	ldr	r0, [pc, #248]	; (15d88 <output_ready+0x250>)
   15c90:	f019 fadf 	bl	2f252 <printk>
   15c94:	215c      	movs	r1, #92	; 0x5c
   15c96:	4839      	ldr	r0, [pc, #228]	; (15d7c <output_ready+0x244>)
   15c98:	f019 fddc 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15c9c:	4c41      	ldr	r4, [pc, #260]	; (15da4 <output_ready+0x26c>)
   15c9e:	f104 0018 	add.w	r0, r4, #24
   15ca2:	f015 f88d 	bl	2adc0 <z_spin_lock_set_owner>
	pressure_sensor.sensor.value = pressure / 1000;
   15ca6:	eddf 7a40 	vldr	s15, [pc, #256]	; 15da8 <output_ready+0x270>
   15caa:	eec8 7a27 	vdiv.f32	s15, s16, s15
   15cae:	ee17 0a90 	vmov	r0, s15
   15cb2:	f7f7 f9a3 	bl	cffc <__aeabi_f2d>
   15cb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15cba:	f104 0018 	add.w	r0, r4, #24
   15cbe:	f015 f86f 	bl	2ada0 <z_spin_unlock_valid>
   15cc2:	b970      	cbnz	r0, 15ce2 <output_ready+0x1aa>
   15cc4:	2384      	movs	r3, #132	; 0x84
   15cc6:	4a2d      	ldr	r2, [pc, #180]	; (15d7c <output_ready+0x244>)
   15cc8:	4931      	ldr	r1, [pc, #196]	; (15d90 <output_ready+0x258>)
   15cca:	482e      	ldr	r0, [pc, #184]	; (15d84 <output_ready+0x24c>)
   15ccc:	f019 fac1 	bl	2f252 <printk>
   15cd0:	f104 0118 	add.w	r1, r4, #24
   15cd4:	482f      	ldr	r0, [pc, #188]	; (15d94 <output_ready+0x25c>)
   15cd6:	f019 fabc 	bl	2f252 <printk>
   15cda:	2184      	movs	r1, #132	; 0x84
   15cdc:	4827      	ldr	r0, [pc, #156]	; (15d7c <output_ready+0x244>)
   15cde:	f019 fdb9 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   15ce2:	f385 8811 	msr	BASEPRI, r5
   15ce6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15cea:	f04f 0320 	mov.w	r3, #32
   15cee:	f3ef 8511 	mrs	r5, BASEPRI
   15cf2:	f383 8811 	msr	BASEPRI, r3
   15cf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15cfa:	482c      	ldr	r0, [pc, #176]	; (15dac <output_ready+0x274>)
   15cfc:	f015 f842 	bl	2ad84 <z_spin_lock_valid>
   15d00:	b968      	cbnz	r0, 15d1e <output_ready+0x1e6>
   15d02:	235c      	movs	r3, #92	; 0x5c
   15d04:	4a1d      	ldr	r2, [pc, #116]	; (15d7c <output_ready+0x244>)
   15d06:	491e      	ldr	r1, [pc, #120]	; (15d80 <output_ready+0x248>)
   15d08:	481e      	ldr	r0, [pc, #120]	; (15d84 <output_ready+0x24c>)
   15d0a:	f019 faa2 	bl	2f252 <printk>
   15d0e:	4927      	ldr	r1, [pc, #156]	; (15dac <output_ready+0x274>)
   15d10:	481d      	ldr	r0, [pc, #116]	; (15d88 <output_ready+0x250>)
   15d12:	f019 fa9e 	bl	2f252 <printk>
   15d16:	215c      	movs	r1, #92	; 0x5c
   15d18:	4818      	ldr	r0, [pc, #96]	; (15d7c <output_ready+0x244>)
   15d1a:	f019 fd9b 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15d1e:	4c24      	ldr	r4, [pc, #144]	; (15db0 <output_ready+0x278>)
   15d20:	f104 0018 	add.w	r0, r4, #24
   15d24:	f015 f84c 	bl	2adc0 <z_spin_lock_set_owner>
	air_quality_sensor.sensor.value = iaq;
   15d28:	4630      	mov	r0, r6
   15d2a:	f7f7 f967 	bl	cffc <__aeabi_f2d>
   15d2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15d32:	f104 0018 	add.w	r0, r4, #24
   15d36:	f015 f833 	bl	2ada0 <z_spin_unlock_valid>
   15d3a:	b970      	cbnz	r0, 15d5a <output_ready+0x222>
   15d3c:	2384      	movs	r3, #132	; 0x84
   15d3e:	4a0f      	ldr	r2, [pc, #60]	; (15d7c <output_ready+0x244>)
   15d40:	4913      	ldr	r1, [pc, #76]	; (15d90 <output_ready+0x258>)
   15d42:	4810      	ldr	r0, [pc, #64]	; (15d84 <output_ready+0x24c>)
   15d44:	f019 fa85 	bl	2f252 <printk>
   15d48:	f104 0118 	add.w	r1, r4, #24
   15d4c:	4811      	ldr	r0, [pc, #68]	; (15d94 <output_ready+0x25c>)
   15d4e:	f019 fa80 	bl	2f252 <printk>
   15d52:	2184      	movs	r1, #132	; 0x84
   15d54:	4809      	ldr	r0, [pc, #36]	; (15d7c <output_ready+0x244>)
   15d56:	f019 fd7d 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   15d5a:	f385 8811 	msr	BASEPRI, r5
   15d5e:	f3bf 8f6f 	isb	sy
}
   15d62:	ecbd 8b02 	vpop	{d8}
   15d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d6a:	bf00      	nop
   15d6c:	20027e62 	.word	0x20027e62
   15d70:	200205bc 	.word	0x200205bc
   15d74:	200203d4 	.word	0x200203d4
   15d78:	20020878 	.word	0x20020878
   15d7c:	00036fbb 	.word	0x00036fbb
   15d80:	00036fe1 	.word	0x00036fe1
   15d84:	00036be5 	.word	0x00036be5
   15d88:	00036ff6 	.word	0x00036ff6
   15d8c:	20020860 	.word	0x20020860
   15d90:	0003700e 	.word	0x0003700e
   15d94:	00037025 	.word	0x00037025
   15d98:	20020038 	.word	0x20020038
   15d9c:	20020020 	.word	0x20020020
   15da0:	20020058 	.word	0x20020058
   15da4:	20020040 	.word	0x20020040
   15da8:	447a0000 	.word	0x447a0000
   15dac:	20020018 	.word	0x20020018
   15db0:	20020000 	.word	0x20020000

00015db4 <k_work_submit_to_queue.constprop.7>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   15db4:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15db6:	f100 0308 	add.w	r3, r0, #8
   15dba:	e8d3 2fef 	ldaex	r2, [r3]
   15dbe:	f042 0001 	orr.w	r0, r2, #1
   15dc2:	e8c3 0fec 	stlex	ip, r0, [r3]
   15dc6:	f1bc 0f00 	cmp.w	ip, #0
   15dca:	d1f6      	bne.n	15dba <k_work_submit_to_queue.constprop.7+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15dcc:	07d3      	lsls	r3, r2, #31
   15dce:	d402      	bmi.n	15dd6 <k_work_submit_to_queue.constprop.7+0x22>
		k_queue_append(&work_q->queue, work);
   15dd0:	4801      	ldr	r0, [pc, #4]	; (15dd8 <k_work_submit_to_queue.constprop.7+0x24>)
   15dd2:	f01e bc8d 	b.w	346f0 <k_queue_append>
	}
}
   15dd6:	4770      	bx	lr
   15dd8:	20027460 	.word	0x20027460

00015ddc <iaq_timer_handler>:
 *
 * @return N/A
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
   15ddc:	4801      	ldr	r0, [pc, #4]	; (15de4 <iaq_timer_handler+0x8>)
   15dde:	f7ff bfe9 	b.w	15db4 <k_work_submit_to_queue.constprop.7>
   15de2:	bf00      	nop
   15de4:	20020098 	.word	0x20020098

00015de8 <iaq_timer_stop>:
   15de8:	4801      	ldr	r0, [pc, #4]	; (15df0 <iaq_timer_stop+0x8>)
   15dea:	f7ff bfe3 	b.w	15db4 <k_work_submit_to_queue.constprop.7>
   15dee:	bf00      	nop
   15df0:	2002008c 	.word	0x2002008c

00015df4 <bus_write>:
{
   15df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15df6:	b085      	sub	sp, #20
   15df8:	4605      	mov	r5, r0
	u8_t buf[data_len+1];
   15dfa:	4668      	mov	r0, sp
{
   15dfc:	4616      	mov	r6, r2
	u8_t buf[data_len+1];
   15dfe:	f103 0208 	add.w	r2, r3, #8
   15e02:	08d2      	lsrs	r2, r2, #3
   15e04:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
{
   15e08:	af00      	add	r7, sp, #0
	u8_t buf[data_len+1];
   15e0a:	4695      	mov	sp, r2
	buf[0] = reg_addr;
   15e0c:	4668      	mov	r0, sp
   15e0e:	461a      	mov	r2, r3
   15e10:	f800 1b01 	strb.w	r1, [r0], #1
   15e14:	4631      	mov	r1, r6
	u8_t buf[data_len+1];
   15e16:	1c5c      	adds	r4, r3, #1
   15e18:	f01e fe02 	bl	34a20 <memcpy>
	return i2c_write(i2c_master, buf, data_len+1, dev_addr);
   15e1c:	4b08      	ldr	r3, [pc, #32]	; (15e40 <bus_write+0x4c>)
	msg.buf = (u8_t *)buf;
   15e1e:	f8c7 d004 	str.w	sp, [r7, #4]
   15e22:	6818      	ldr	r0, [r3, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   15e24:	2302      	movs	r3, #2
	msg.len = num_bytes;
   15e26:	60bc      	str	r4, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   15e28:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   15e2a:	6883      	ldr	r3, [r0, #8]
   15e2c:	1d39      	adds	r1, r7, #4
   15e2e:	685c      	ldr	r4, [r3, #4]
   15e30:	2201      	movs	r2, #1
   15e32:	462b      	mov	r3, r5
   15e34:	47a0      	blx	r4
}
   15e36:	3714      	adds	r7, #20
   15e38:	b240      	sxtb	r0, r0
   15e3a:	46bd      	mov	sp, r7
   15e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e3e:	bf00      	nop
   15e40:	200214c0 	.word	0x200214c0

00015e44 <env_sensors_get_temperature>:
{
   15e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15e46:	4604      	mov	r4, r0
   15e48:	2800      	cmp	r0, #0
   15e4a:	d040      	beq.n	15ece <env_sensors_get_temperature+0x8a>
	__asm__ volatile(
   15e4c:	f04f 0320 	mov.w	r3, #32
   15e50:	f3ef 8711 	mrs	r7, BASEPRI
   15e54:	f383 8811 	msr	BASEPRI, r3
   15e58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e5c:	481d      	ldr	r0, [pc, #116]	; (15ed4 <env_sensors_get_temperature+0x90>)
   15e5e:	f014 ff91 	bl	2ad84 <z_spin_lock_valid>
   15e62:	4e1c      	ldr	r6, [pc, #112]	; (15ed4 <env_sensors_get_temperature+0x90>)
   15e64:	b968      	cbnz	r0, 15e82 <env_sensors_get_temperature+0x3e>
   15e66:	235c      	movs	r3, #92	; 0x5c
   15e68:	4a1b      	ldr	r2, [pc, #108]	; (15ed8 <env_sensors_get_temperature+0x94>)
   15e6a:	491c      	ldr	r1, [pc, #112]	; (15edc <env_sensors_get_temperature+0x98>)
   15e6c:	481c      	ldr	r0, [pc, #112]	; (15ee0 <env_sensors_get_temperature+0x9c>)
   15e6e:	f019 f9f0 	bl	2f252 <printk>
   15e72:	4631      	mov	r1, r6
   15e74:	481b      	ldr	r0, [pc, #108]	; (15ee4 <env_sensors_get_temperature+0xa0>)
   15e76:	f019 f9ec 	bl	2f252 <printk>
   15e7a:	215c      	movs	r1, #92	; 0x5c
   15e7c:	4816      	ldr	r0, [pc, #88]	; (15ed8 <env_sensors_get_temperature+0x94>)
   15e7e:	f019 fce9 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15e82:	4814      	ldr	r0, [pc, #80]	; (15ed4 <env_sensors_get_temperature+0x90>)
   15e84:	f014 ff9c 	bl	2adc0 <z_spin_lock_set_owner>
   15e88:	4623      	mov	r3, r4
   15e8a:	4d17      	ldr	r5, [pc, #92]	; (15ee8 <env_sensors_get_temperature+0xa4>)
   15e8c:	462a      	mov	r2, r5
   15e8e:	ca03      	ldmia	r2!, {r0, r1}
   15e90:	42b2      	cmp	r2, r6
   15e92:	6018      	str	r0, [r3, #0]
   15e94:	6059      	str	r1, [r3, #4]
   15e96:	4615      	mov	r5, r2
   15e98:	f103 0308 	add.w	r3, r3, #8
   15e9c:	d1f6      	bne.n	15e8c <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15e9e:	480d      	ldr	r0, [pc, #52]	; (15ed4 <env_sensors_get_temperature+0x90>)
   15ea0:	f014 ff7e 	bl	2ada0 <z_spin_unlock_valid>
   15ea4:	b968      	cbnz	r0, 15ec2 <env_sensors_get_temperature+0x7e>
   15ea6:	2384      	movs	r3, #132	; 0x84
   15ea8:	4a0b      	ldr	r2, [pc, #44]	; (15ed8 <env_sensors_get_temperature+0x94>)
   15eaa:	4910      	ldr	r1, [pc, #64]	; (15eec <env_sensors_get_temperature+0xa8>)
   15eac:	480c      	ldr	r0, [pc, #48]	; (15ee0 <env_sensors_get_temperature+0x9c>)
   15eae:	f019 f9d0 	bl	2f252 <printk>
   15eb2:	4908      	ldr	r1, [pc, #32]	; (15ed4 <env_sensors_get_temperature+0x90>)
   15eb4:	480e      	ldr	r0, [pc, #56]	; (15ef0 <env_sensors_get_temperature+0xac>)
   15eb6:	f019 f9cc 	bl	2f252 <printk>
   15eba:	2184      	movs	r1, #132	; 0x84
   15ebc:	4806      	ldr	r0, [pc, #24]	; (15ed8 <env_sensors_get_temperature+0x94>)
   15ebe:	f019 fcc9 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   15ec2:	f387 8811 	msr	BASEPRI, r7
   15ec6:	f3bf 8f6f 	isb	sy
	return 0;
   15eca:	2000      	movs	r0, #0
}
   15ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   15ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ed2:	e7fb      	b.n	15ecc <env_sensors_get_temperature+0x88>
   15ed4:	20020878 	.word	0x20020878
   15ed8:	00036fbb 	.word	0x00036fbb
   15edc:	00036fe1 	.word	0x00036fe1
   15ee0:	00036be5 	.word	0x00036be5
   15ee4:	00036ff6 	.word	0x00036ff6
   15ee8:	20020860 	.word	0x20020860
   15eec:	0003700e 	.word	0x0003700e
   15ef0:	00037025 	.word	0x00037025

00015ef4 <env_sensors_get_humidity>:
{
   15ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15ef6:	4604      	mov	r4, r0
   15ef8:	2800      	cmp	r0, #0
   15efa:	d040      	beq.n	15f7e <env_sensors_get_humidity+0x8a>
	__asm__ volatile(
   15efc:	f04f 0320 	mov.w	r3, #32
   15f00:	f3ef 8711 	mrs	r7, BASEPRI
   15f04:	f383 8811 	msr	BASEPRI, r3
   15f08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15f0c:	481d      	ldr	r0, [pc, #116]	; (15f84 <env_sensors_get_humidity+0x90>)
   15f0e:	f014 ff39 	bl	2ad84 <z_spin_lock_valid>
   15f12:	4e1c      	ldr	r6, [pc, #112]	; (15f84 <env_sensors_get_humidity+0x90>)
   15f14:	b968      	cbnz	r0, 15f32 <env_sensors_get_humidity+0x3e>
   15f16:	235c      	movs	r3, #92	; 0x5c
   15f18:	4a1b      	ldr	r2, [pc, #108]	; (15f88 <env_sensors_get_humidity+0x94>)
   15f1a:	491c      	ldr	r1, [pc, #112]	; (15f8c <env_sensors_get_humidity+0x98>)
   15f1c:	481c      	ldr	r0, [pc, #112]	; (15f90 <env_sensors_get_humidity+0x9c>)
   15f1e:	f019 f998 	bl	2f252 <printk>
   15f22:	4631      	mov	r1, r6
   15f24:	481b      	ldr	r0, [pc, #108]	; (15f94 <env_sensors_get_humidity+0xa0>)
   15f26:	f019 f994 	bl	2f252 <printk>
   15f2a:	215c      	movs	r1, #92	; 0x5c
   15f2c:	4816      	ldr	r0, [pc, #88]	; (15f88 <env_sensors_get_humidity+0x94>)
   15f2e:	f019 fc91 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15f32:	4814      	ldr	r0, [pc, #80]	; (15f84 <env_sensors_get_humidity+0x90>)
   15f34:	f014 ff44 	bl	2adc0 <z_spin_lock_set_owner>
   15f38:	4623      	mov	r3, r4
   15f3a:	4d17      	ldr	r5, [pc, #92]	; (15f98 <env_sensors_get_humidity+0xa4>)
   15f3c:	462a      	mov	r2, r5
   15f3e:	ca03      	ldmia	r2!, {r0, r1}
   15f40:	42b2      	cmp	r2, r6
   15f42:	6018      	str	r0, [r3, #0]
   15f44:	6059      	str	r1, [r3, #4]
   15f46:	4615      	mov	r5, r2
   15f48:	f103 0308 	add.w	r3, r3, #8
   15f4c:	d1f6      	bne.n	15f3c <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f4e:	480d      	ldr	r0, [pc, #52]	; (15f84 <env_sensors_get_humidity+0x90>)
   15f50:	f014 ff26 	bl	2ada0 <z_spin_unlock_valid>
   15f54:	b968      	cbnz	r0, 15f72 <env_sensors_get_humidity+0x7e>
   15f56:	2384      	movs	r3, #132	; 0x84
   15f58:	4a0b      	ldr	r2, [pc, #44]	; (15f88 <env_sensors_get_humidity+0x94>)
   15f5a:	4910      	ldr	r1, [pc, #64]	; (15f9c <env_sensors_get_humidity+0xa8>)
   15f5c:	480c      	ldr	r0, [pc, #48]	; (15f90 <env_sensors_get_humidity+0x9c>)
   15f5e:	f019 f978 	bl	2f252 <printk>
   15f62:	4908      	ldr	r1, [pc, #32]	; (15f84 <env_sensors_get_humidity+0x90>)
   15f64:	480e      	ldr	r0, [pc, #56]	; (15fa0 <env_sensors_get_humidity+0xac>)
   15f66:	f019 f974 	bl	2f252 <printk>
   15f6a:	2184      	movs	r1, #132	; 0x84
   15f6c:	4806      	ldr	r0, [pc, #24]	; (15f88 <env_sensors_get_humidity+0x94>)
   15f6e:	f019 fc71 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   15f72:	f387 8811 	msr	BASEPRI, r7
   15f76:	f3bf 8f6f 	isb	sy
	return 0;
   15f7a:	2000      	movs	r0, #0
}
   15f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   15f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f82:	e7fb      	b.n	15f7c <env_sensors_get_humidity+0x88>
   15f84:	20020038 	.word	0x20020038
   15f88:	00036fbb 	.word	0x00036fbb
   15f8c:	00036fe1 	.word	0x00036fe1
   15f90:	00036be5 	.word	0x00036be5
   15f94:	00036ff6 	.word	0x00036ff6
   15f98:	20020020 	.word	0x20020020
   15f9c:	0003700e 	.word	0x0003700e
   15fa0:	00037025 	.word	0x00037025

00015fa4 <env_sensors_get_pressure>:
{
   15fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   15fa6:	4604      	mov	r4, r0
   15fa8:	2800      	cmp	r0, #0
   15faa:	d040      	beq.n	1602e <env_sensors_get_pressure+0x8a>
	__asm__ volatile(
   15fac:	f04f 0320 	mov.w	r3, #32
   15fb0:	f3ef 8711 	mrs	r7, BASEPRI
   15fb4:	f383 8811 	msr	BASEPRI, r3
   15fb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15fbc:	481d      	ldr	r0, [pc, #116]	; (16034 <env_sensors_get_pressure+0x90>)
   15fbe:	f014 fee1 	bl	2ad84 <z_spin_lock_valid>
   15fc2:	4e1c      	ldr	r6, [pc, #112]	; (16034 <env_sensors_get_pressure+0x90>)
   15fc4:	b968      	cbnz	r0, 15fe2 <env_sensors_get_pressure+0x3e>
   15fc6:	235c      	movs	r3, #92	; 0x5c
   15fc8:	4a1b      	ldr	r2, [pc, #108]	; (16038 <env_sensors_get_pressure+0x94>)
   15fca:	491c      	ldr	r1, [pc, #112]	; (1603c <env_sensors_get_pressure+0x98>)
   15fcc:	481c      	ldr	r0, [pc, #112]	; (16040 <env_sensors_get_pressure+0x9c>)
   15fce:	f019 f940 	bl	2f252 <printk>
   15fd2:	4631      	mov	r1, r6
   15fd4:	481b      	ldr	r0, [pc, #108]	; (16044 <env_sensors_get_pressure+0xa0>)
   15fd6:	f019 f93c 	bl	2f252 <printk>
   15fda:	215c      	movs	r1, #92	; 0x5c
   15fdc:	4816      	ldr	r0, [pc, #88]	; (16038 <env_sensors_get_pressure+0x94>)
   15fde:	f019 fc39 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   15fe2:	4814      	ldr	r0, [pc, #80]	; (16034 <env_sensors_get_pressure+0x90>)
   15fe4:	f014 feec 	bl	2adc0 <z_spin_lock_set_owner>
   15fe8:	4623      	mov	r3, r4
   15fea:	4d17      	ldr	r5, [pc, #92]	; (16048 <env_sensors_get_pressure+0xa4>)
   15fec:	462a      	mov	r2, r5
   15fee:	ca03      	ldmia	r2!, {r0, r1}
   15ff0:	42b2      	cmp	r2, r6
   15ff2:	6018      	str	r0, [r3, #0]
   15ff4:	6059      	str	r1, [r3, #4]
   15ff6:	4615      	mov	r5, r2
   15ff8:	f103 0308 	add.w	r3, r3, #8
   15ffc:	d1f6      	bne.n	15fec <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15ffe:	480d      	ldr	r0, [pc, #52]	; (16034 <env_sensors_get_pressure+0x90>)
   16000:	f014 fece 	bl	2ada0 <z_spin_unlock_valid>
   16004:	b968      	cbnz	r0, 16022 <env_sensors_get_pressure+0x7e>
   16006:	2384      	movs	r3, #132	; 0x84
   16008:	4a0b      	ldr	r2, [pc, #44]	; (16038 <env_sensors_get_pressure+0x94>)
   1600a:	4910      	ldr	r1, [pc, #64]	; (1604c <env_sensors_get_pressure+0xa8>)
   1600c:	480c      	ldr	r0, [pc, #48]	; (16040 <env_sensors_get_pressure+0x9c>)
   1600e:	f019 f920 	bl	2f252 <printk>
   16012:	4908      	ldr	r1, [pc, #32]	; (16034 <env_sensors_get_pressure+0x90>)
   16014:	480e      	ldr	r0, [pc, #56]	; (16050 <env_sensors_get_pressure+0xac>)
   16016:	f019 f91c 	bl	2f252 <printk>
   1601a:	2184      	movs	r1, #132	; 0x84
   1601c:	4806      	ldr	r0, [pc, #24]	; (16038 <env_sensors_get_pressure+0x94>)
   1601e:	f019 fc19 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   16022:	f387 8811 	msr	BASEPRI, r7
   16026:	f3bf 8f6f 	isb	sy
	return 0;
   1602a:	2000      	movs	r0, #0
}
   1602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   1602e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16032:	e7fb      	b.n	1602c <env_sensors_get_pressure+0x88>
   16034:	20020058 	.word	0x20020058
   16038:	00036fbb 	.word	0x00036fbb
   1603c:	00036fe1 	.word	0x00036fe1
   16040:	00036be5 	.word	0x00036be5
   16044:	00036ff6 	.word	0x00036ff6
   16048:	20020040 	.word	0x20020040
   1604c:	0003700e 	.word	0x0003700e
   16050:	00037025 	.word	0x00037025

00016054 <env_sensors_get_air_quality>:
{
   16054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   16056:	4604      	mov	r4, r0
   16058:	2800      	cmp	r0, #0
   1605a:	d040      	beq.n	160de <env_sensors_get_air_quality+0x8a>
	__asm__ volatile(
   1605c:	f04f 0320 	mov.w	r3, #32
   16060:	f3ef 8711 	mrs	r7, BASEPRI
   16064:	f383 8811 	msr	BASEPRI, r3
   16068:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1606c:	481d      	ldr	r0, [pc, #116]	; (160e4 <env_sensors_get_air_quality+0x90>)
   1606e:	f014 fe89 	bl	2ad84 <z_spin_lock_valid>
   16072:	4e1c      	ldr	r6, [pc, #112]	; (160e4 <env_sensors_get_air_quality+0x90>)
   16074:	b968      	cbnz	r0, 16092 <env_sensors_get_air_quality+0x3e>
   16076:	235c      	movs	r3, #92	; 0x5c
   16078:	4a1b      	ldr	r2, [pc, #108]	; (160e8 <env_sensors_get_air_quality+0x94>)
   1607a:	491c      	ldr	r1, [pc, #112]	; (160ec <env_sensors_get_air_quality+0x98>)
   1607c:	481c      	ldr	r0, [pc, #112]	; (160f0 <env_sensors_get_air_quality+0x9c>)
   1607e:	f019 f8e8 	bl	2f252 <printk>
   16082:	4631      	mov	r1, r6
   16084:	481b      	ldr	r0, [pc, #108]	; (160f4 <env_sensors_get_air_quality+0xa0>)
   16086:	f019 f8e4 	bl	2f252 <printk>
   1608a:	215c      	movs	r1, #92	; 0x5c
   1608c:	4816      	ldr	r0, [pc, #88]	; (160e8 <env_sensors_get_air_quality+0x94>)
   1608e:	f019 fbe1 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   16092:	4814      	ldr	r0, [pc, #80]	; (160e4 <env_sensors_get_air_quality+0x90>)
   16094:	f014 fe94 	bl	2adc0 <z_spin_lock_set_owner>
   16098:	4623      	mov	r3, r4
   1609a:	4d17      	ldr	r5, [pc, #92]	; (160f8 <env_sensors_get_air_quality+0xa4>)
   1609c:	462a      	mov	r2, r5
   1609e:	ca03      	ldmia	r2!, {r0, r1}
   160a0:	42b2      	cmp	r2, r6
   160a2:	6018      	str	r0, [r3, #0]
   160a4:	6059      	str	r1, [r3, #4]
   160a6:	4615      	mov	r5, r2
   160a8:	f103 0308 	add.w	r3, r3, #8
   160ac:	d1f6      	bne.n	1609c <env_sensors_get_air_quality+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   160ae:	480d      	ldr	r0, [pc, #52]	; (160e4 <env_sensors_get_air_quality+0x90>)
   160b0:	f014 fe76 	bl	2ada0 <z_spin_unlock_valid>
   160b4:	b968      	cbnz	r0, 160d2 <env_sensors_get_air_quality+0x7e>
   160b6:	2384      	movs	r3, #132	; 0x84
   160b8:	4a0b      	ldr	r2, [pc, #44]	; (160e8 <env_sensors_get_air_quality+0x94>)
   160ba:	4910      	ldr	r1, [pc, #64]	; (160fc <env_sensors_get_air_quality+0xa8>)
   160bc:	480c      	ldr	r0, [pc, #48]	; (160f0 <env_sensors_get_air_quality+0x9c>)
   160be:	f019 f8c8 	bl	2f252 <printk>
   160c2:	4908      	ldr	r1, [pc, #32]	; (160e4 <env_sensors_get_air_quality+0x90>)
   160c4:	480e      	ldr	r0, [pc, #56]	; (16100 <env_sensors_get_air_quality+0xac>)
   160c6:	f019 f8c4 	bl	2f252 <printk>
   160ca:	2184      	movs	r1, #132	; 0x84
   160cc:	4806      	ldr	r0, [pc, #24]	; (160e8 <env_sensors_get_air_quality+0x94>)
   160ce:	f019 fbc1 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   160d2:	f387 8811 	msr	BASEPRI, r7
   160d6:	f3bf 8f6f 	isb	sy
	return 0;
   160da:	2000      	movs	r0, #0
}
   160dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   160de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   160e2:	e7fb      	b.n	160dc <env_sensors_get_air_quality+0x88>
   160e4:	20020018 	.word	0x20020018
   160e8:	00036fbb 	.word	0x00036fbb
   160ec:	00036fe1 	.word	0x00036fe1
   160f0:	00036be5 	.word	0x00036be5
   160f4:	00036ff6 	.word	0x00036ff6
   160f8:	20020000 	.word	0x20020000
   160fc:	0003700e 	.word	0x0003700e
   16100:	00037025 	.word	0x00037025

00016104 <env_sensors_init_and_start>:

int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   16104:	b570      	push	{r4, r5, r6, lr}
   16106:	460e      	mov	r6, r1
   16108:	b08c      	sub	sp, #48	; 0x30
	
	return_values_init bsec_ret;
	int ret;

	if ((work_q == NULL) || (cb == NULL)) {
   1610a:	4605      	mov	r5, r0
   1610c:	b920      	cbnz	r0, 16118 <env_sensors_init_and_start+0x14>
		LOG_DBG("EINVAL");
		return -EINVAL;
   1610e:	f06f 0415 	mvn.w	r4, #21

	initialized = true;

	return (data_send_interval_s > 0) ?
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
}
   16112:	4620      	mov	r0, r4
   16114:	b00c      	add	sp, #48	; 0x30
   16116:	bd70      	pop	{r4, r5, r6, pc}
	if ((work_q == NULL) || (cb == NULL)) {
   16118:	2900      	cmp	r1, #0
   1611a:	d0f8      	beq.n	1610e <env_sensors_init_and_start+0xa>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1611c:	482a      	ldr	r0, [pc, #168]	; (161c8 <env_sensors_init_and_start+0xc4>)
   1611e:	f012 f82f 	bl	28180 <z_impl_device_get_binding>
	i2c_master = device_get_binding("I2C_2");
   16122:	4b2a      	ldr	r3, [pc, #168]	; (161cc <env_sensors_init_and_start+0xc8>)
   16124:	6018      	str	r0, [r3, #0]
	if (!i2c_master) {
   16126:	2800      	cmp	r0, #0
   16128:	d0f1      	beq.n	1610e <env_sensors_init_and_start+0xa>
	settings_subsys_init();
   1612a:	f001 fec1 	bl	17eb0 <settings_subsys_init>
	struct settings_handler my_conf = {
   1612e:	2214      	movs	r2, #20
   16130:	2100      	movs	r1, #0
   16132:	a807      	add	r0, sp, #28
   16134:	f01e fcae 	bl	34a94 <memset>
   16138:	4b25      	ldr	r3, [pc, #148]	; (161d0 <env_sensors_init_and_start+0xcc>)
	err = settings_register(&my_conf);
   1613a:	a806      	add	r0, sp, #24
	struct settings_handler my_conf = {
   1613c:	9306      	str	r3, [sp, #24]
   1613e:	4b25      	ldr	r3, [pc, #148]	; (161d4 <env_sensors_init_and_start+0xd0>)
   16140:	9308      	str	r3, [sp, #32]
	err = settings_register(&my_conf);
   16142:	f001 fe07 	bl	17d54 <settings_register>
	if (err) {
   16146:	4604      	mov	r4, r0
   16148:	2800      	cmp	r0, #0
   1614a:	d1e2      	bne.n	16112 <env_sensors_init_and_start+0xe>
	err = settings_load();
   1614c:	f019 fdc5 	bl	2fcda <settings_load>
	if (ret) {
   16150:	4604      	mov	r4, r0
   16152:	2800      	cmp	r0, #0
   16154:	d1dd      	bne.n	16112 <env_sensors_init_and_start+0xe>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   16156:	4b20      	ldr	r3, [pc, #128]	; (161d8 <env_sensors_init_and_start+0xd4>)
   16158:	4a20      	ldr	r2, [pc, #128]	; (161dc <env_sensors_init_and_start+0xd8>)
   1615a:	9300      	str	r3, [sp, #0]
   1615c:	4920      	ldr	r1, [pc, #128]	; (161e0 <env_sensors_init_and_start+0xdc>)
   1615e:	4b21      	ldr	r3, [pc, #132]	; (161e4 <env_sensors_init_and_start+0xe0>)
   16160:	4821      	ldr	r0, [pc, #132]	; (161e8 <env_sensors_init_and_start+0xe4>)
   16162:	eddf 0a22 	vldr	s1, [pc, #136]	; 161ec <env_sensors_init_and_start+0xe8>
   16166:	ed9f 0a22 	vldr	s0, [pc, #136]	; 161f0 <env_sensors_init_and_start+0xec>
   1616a:	f000 f855 	bl	16218 <bsec_iot_init>
   1616e:	f8ad 0018 	strh.w	r0, [sp, #24]
   16172:	b240      	sxtb	r0, r0
	if (bsec_ret.bme680_status) {
   16174:	b108      	cbz	r0, 1617a <env_sensors_init_and_start+0x76>
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   16176:	4604      	mov	r4, r0
   16178:	e7cb      	b.n	16112 <env_sensors_init_and_start+0xe>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   1617a:	f99d 3019 	ldrsb.w	r3, [sp, #25]
	} else if (bsec_ret.bsec_status) {
   1617e:	b10b      	cbz	r3, 16184 <env_sensors_init_and_start+0x80>
		return (int)bsec_ret.bsec_status;
   16180:	461c      	mov	r4, r3
   16182:	e7c6      	b.n	16112 <env_sensors_init_and_start+0xe>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16184:	2307      	movs	r3, #7
   16186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1618a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1618e:	4919      	ldr	r1, [pc, #100]	; (161f4 <env_sensors_init_and_start+0xf0>)
   16190:	4b19      	ldr	r3, [pc, #100]	; (161f8 <env_sensors_init_and_start+0xf4>)
   16192:	e9cd 4404 	strd	r4, r4, [sp, #16]
   16196:	e9cd 4400 	strd	r4, r4, [sp]
   1619a:	4818      	ldr	r0, [pc, #96]	; (161fc <env_sensors_init_and_start+0xf8>)
   1619c:	f014 fd14 	bl	2abc8 <z_impl_k_thread_create>
	data_ready_cb = cb;
   161a0:	4b17      	ldr	r3, [pc, #92]	; (16200 <env_sensors_init_and_start+0xfc>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   161a2:	4918      	ldr	r1, [pc, #96]	; (16204 <env_sensors_init_and_start+0x100>)
	data_ready_cb = cb;
   161a4:	601e      	str	r6, [r3, #0]
	env_sensors_work_q = work_q;
   161a6:	4b18      	ldr	r3, [pc, #96]	; (16208 <env_sensors_init_and_start+0x104>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   161a8:	4818      	ldr	r0, [pc, #96]	; (1620c <env_sensors_init_and_start+0x108>)
	env_sensors_work_q = work_q;
   161aa:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   161ac:	f01e fb5e 	bl	3486c <k_delayed_work_init>
	initialized = true;
   161b0:	2201      	movs	r2, #1
   161b2:	4b17      	ldr	r3, [pc, #92]	; (16210 <env_sensors_init_and_start+0x10c>)
   161b4:	701a      	strb	r2, [r3, #0]
	return (data_send_interval_s > 0) ?
   161b6:	4b17      	ldr	r3, [pc, #92]	; (16214 <env_sensors_init_and_start+0x110>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	2b00      	cmp	r3, #0
   161bc:	d0a9      	beq.n	16112 <env_sensors_init_and_start+0xe>
   161be:	2005      	movs	r0, #5
   161c0:	f7ff fc22 	bl	15a08 <submit_poll_work>
   161c4:	e7d7      	b.n	16176 <env_sensors_init_and_start+0x72>
   161c6:	bf00      	nop
   161c8:	00036fb0 	.word	0x00036fb0
   161cc:	200214c0 	.word	0x200214c0
   161d0:	00036fb6 	.word	0x00036fb6
   161d4:	00015a5d 	.word	0x00015a5d
   161d8:	0002eaab 	.word	0x0002eaab
   161dc:	0002ead7 	.word	0x0002ead7
   161e0:	00015af9 	.word	0x00015af9
   161e4:	00015a9d 	.word	0x00015a9d
   161e8:	00015df5 	.word	0x00015df5
   161ec:	3f99999a 	.word	0x3f99999a
   161f0:	3eaaaa3b 	.word	0x3eaaaa3b
   161f4:	20030500 	.word	0x20030500
   161f8:	00015a21 	.word	0x00015a21
   161fc:	200214cc 	.word	0x200214cc
   16200:	20021498 	.word	0x20021498
   16204:	00015ac5 	.word	0x00015ac5
   16208:	200214bc 	.word	0x200214bc
   1620c:	2002149c 	.word	0x2002149c
   16210:	20027e63 	.word	0x20027e63
   16214:	20020088 	.word	0x20020088

00016218 <bsec_iot_init>:
 *
 * @return      zero if successful, negative otherwise
 */
return_values_init bsec_iot_init(float sample_rate, float temperature_offset, bme680_com_fptr_t bus_write, 
                    bme680_com_fptr_t bus_read, sleep_fct sleep, state_load_fct state_load, config_load_fct config_load)
{
   16218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1621a:	ed2d 8b02 	vpush	{d8}
   1621e:	f2ad 5de4 	subw	sp, sp, #1508	; 0x5e4
   16222:	460d      	mov	r5, r1
   16224:	4607      	mov	r7, r0
   16226:	4614      	mov	r4, r2
    return_values_init ret = {BME680_OK, BSEC_OK};
    bsec_library_return_t bsec_status = BSEC_OK;
    
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   16228:	2100      	movs	r1, #0
   1622a:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1622e:	a822      	add	r0, sp, #136	; 0x88
{
   16230:	eeb0 8a40 	vmov.f32	s16, s0
   16234:	eef0 8a60 	vmov.f32	s17, s1
   16238:	461e      	mov	r6, r3
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1623a:	f01e fc2b 	bl	34a94 <memset>
    uint8_t bsec_config[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1623e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   16242:	2100      	movs	r1, #0
   16244:	a894      	add	r0, sp, #592	; 0x250
   16246:	f01e fc25 	bl	34a94 <memset>
    uint8_t work_buffer[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   1624a:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1624e:	2100      	movs	r1, #0
   16250:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
   16254:	f01e fc1e 	bl	34a94 <memset>
    int bsec_state_len, bsec_config_len;
    
    /* Fixed I2C configuration */
    bme680_g.dev_id = BME680_I2C_ADDR_PRIMARY;
   16258:	2376      	movs	r3, #118	; 0x76
   1625a:	4843      	ldr	r0, [pc, #268]	; (16368 <bsec_iot_init+0x150>)
   1625c:	7043      	strb	r3, [r0, #1]
    bme680_g.intf = BME680_I2C_INTF;
   1625e:	2301      	movs	r3, #1
    /* User configurable I2C configuration */
    bme680_g.write = bus_write;
    bme680_g.read = bus_read;
   16260:	e9c0 5712 	strd	r5, r7, [r0, #72]	; 0x48
    bme680_g.intf = BME680_I2C_INTF;
   16264:	7083      	strb	r3, [r0, #2]
    bme680_g.delay_ms = sleep;
   16266:	6504      	str	r4, [r0, #80]	; 0x50
    
    /* Initialize BME680 API */
    ret.bme680_status = bme680_init(&bme680_g);
   16268:	f018 fd36 	bl	2ecd8 <bme680_init>
    if (ret.bme680_status != BME680_OK)
   1626c:	4605      	mov	r5, r0
   1626e:	b190      	cbz	r0, 16296 <bsec_iot_init+0x7e>
    {
        return ret;
   16270:	2300      	movs	r3, #0
   16272:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   16276:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   1627a:	2000      	movs	r0, #0
   1627c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   16280:	f363 0007 	bfi	r0, r3, #0, #8
   16284:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   16288:	f363 200f 	bfi	r0, r3, #8, #8
    {
        return ret;
    }
    
    return ret;
}
   1628c:	f20d 5de4 	addw	sp, sp, #1508	; 0x5e4
   16290:	ecbd 8b02 	vpop	{d8}
   16294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret.bsec_status = bsec_init();
   16296:	f7f7 fbf3 	bl	da80 <bsec_init>
    if (ret.bsec_status != BSEC_OK)
   1629a:	4604      	mov	r4, r0
   1629c:	b120      	cbz	r0, 162a8 <bsec_iot_init+0x90>
        return ret;
   1629e:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
   162a2:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   162a6:	e7e8      	b.n	1627a <bsec_iot_init+0x62>
    bsec_config_len = config_load(bsec_config, sizeof(bsec_config));
   162a8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   162ac:	a894      	add	r0, sp, #592	; 0x250
   162ae:	f8dd 3600 	ldr.w	r3, [sp, #1536]	; 0x600
   162b2:	4798      	blx	r3
    if (bsec_config_len != 0)
   162b4:	4601      	mov	r1, r0
   162b6:	b160      	cbz	r0, 162d2 <bsec_iot_init+0xba>
        ret.bsec_status = bsec_set_configuration(bsec_config, bsec_config_len, work_buffer, sizeof(work_buffer));     
   162b8:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   162bc:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   162c0:	a894      	add	r0, sp, #592	; 0x250
   162c2:	f7f7 fc0f 	bl	dae4 <bsec_set_configuration>
        if (ret.bsec_status != BSEC_OK)
   162c6:	b120      	cbz	r0, 162d2 <bsec_iot_init+0xba>
            return ret;
   162c8:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            return ret;
   162cc:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   162d0:	e7d3      	b.n	1627a <bsec_iot_init+0x62>
    bsec_state_len = state_load(bsec_state, sizeof(bsec_state));
   162d2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   162d6:	a822      	add	r0, sp, #136	; 0x88
   162d8:	47b0      	blx	r6
    if (bsec_state_len != 0)
   162da:	4601      	mov	r1, r0
   162dc:	b158      	cbz	r0, 162f6 <bsec_iot_init+0xde>
        ret.bsec_status = bsec_set_state(bsec_state, bsec_state_len, work_buffer, sizeof(work_buffer));     
   162de:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   162e2:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   162e6:	a822      	add	r0, sp, #136	; 0x88
   162e8:	f7f7 fc0a 	bl	db00 <bsec_set_state>
        if (ret.bsec_status != BSEC_OK)
   162ec:	b118      	cbz	r0, 162f6 <bsec_iot_init+0xde>
            return ret;
   162ee:	2300      	movs	r3, #0
   162f0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   162f4:	e7ea      	b.n	162cc <bsec_iot_init+0xb4>
    bme680_temperature_offset_g = temperature_offset;
   162f6:	4b1d      	ldr	r3, [pc, #116]	; (1636c <bsec_iot_init+0x154>)
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   162f8:	2108      	movs	r1, #8
    bme680_temperature_offset_g = temperature_offset;
   162fa:	edc3 8a00 	vstr	s17, [r3]
    requested_virtual_sensors[0].sensor_id = BSEC_OUTPUT_IAQ;
   162fe:	2301      	movs	r3, #1
   16300:	f88d 300c 	strb.w	r3, [sp, #12]
    requested_virtual_sensors[1].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_TEMPERATURE;
   16304:	230e      	movs	r3, #14
   16306:	f88d 3014 	strb.w	r3, [sp, #20]
    requested_virtual_sensors[2].sensor_id = BSEC_OUTPUT_RAW_PRESSURE;
   1630a:	2307      	movs	r3, #7
   1630c:	f88d 301c 	strb.w	r3, [sp, #28]
    requested_virtual_sensors[3].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_HUMIDITY;
   16310:	230f      	movs	r3, #15
   16312:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    requested_virtual_sensors[4].sensor_id = BSEC_OUTPUT_RAW_GAS;
   16316:	2309      	movs	r3, #9
   16318:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    requested_virtual_sensors[5].sensor_id = BSEC_OUTPUT_RAW_TEMPERATURE;
   1631c:	2306      	movs	r3, #6
   1631e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   16322:	2302      	movs	r3, #2
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   16324:	aa12      	add	r2, sp, #72	; 0x48
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   16326:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   1632a:	eb0d 0001 	add.w	r0, sp, r1
   1632e:	f10d 0307 	add.w	r3, sp, #7
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   16332:	f88d 1007 	strb.w	r1, [sp, #7]
    requested_virtual_sensors[0].sample_rate = sample_rate;
   16336:	ed8d 8a02 	vstr	s16, [sp, #8]
    requested_virtual_sensors[1].sample_rate = sample_rate;
   1633a:	ed8d 8a04 	vstr	s16, [sp, #16]
    requested_virtual_sensors[2].sample_rate = sample_rate;
   1633e:	ed8d 8a06 	vstr	s16, [sp, #24]
    requested_virtual_sensors[3].sample_rate = sample_rate;
   16342:	ed8d 8a08 	vstr	s16, [sp, #32]
    requested_virtual_sensors[4].sample_rate = sample_rate;
   16346:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
    requested_virtual_sensors[5].sample_rate = sample_rate;
   1634a:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
    requested_virtual_sensors[6].sensor_id = BSEC_OUTPUT_RAW_HUMIDITY;
   1634e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
    requested_virtual_sensors[6].sample_rate = sample_rate;
   16352:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
    requested_virtual_sensors[7].sample_rate = sample_rate;
   16356:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   1635a:	f7f7 fb9f 	bl	da9c <bsec_update_subscription>
    if (ret.bsec_status != BSEC_OK)
   1635e:	2800      	cmp	r0, #0
   16360:	d1c5      	bne.n	162ee <bsec_iot_init+0xd6>
    return ret;
   16362:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
   16366:	e788      	b.n	1627a <bsec_iot_init+0x62>
   16368:	20021584 	.word	0x20021584
   1636c:	200215dc 	.word	0x200215dc

00016370 <bsec_iot_loop>:
 *
 * @return      none
 */
void bsec_iot_loop(sleep_fct sleep, get_timestamp_us_fct get_timestamp_us, output_ready_fct output_ready,
                    state_save_fct state_save, uint32_t save_intvl)
{
   16370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16374:	ed2d 8b02 	vpush	{d8}
    bsec_bme_settings_t sensor_settings;
    
    /* Save state variables */
    uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE];
    uint8_t work_buffer[BSEC_MAX_STATE_BLOB_SIZE];
    uint32_t bsec_state_len = 0;
   16378:	2500      	movs	r5, #0
{
   1637a:	4680      	mov	r8, r0
   1637c:	4689      	mov	r9, r1
   1637e:	4692      	mov	sl, r2
   16380:	469b      	mov	fp, r3
    float breath_voc_equivalent = 0.0f;
   16382:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 1661c <bsec_iot_loop+0x2ac>
{
   16386:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
   1638a:	4ca5      	ldr	r4, [pc, #660]	; (16620 <bsec_iot_loop+0x2b0>)
    uint32_t bsec_state_len = 0;
   1638c:	9507      	str	r5, [sp, #28]
    bsec_library_return_t bsec_status = BSEC_OK;

    while (1)
    {
        /* get the timestamp in nanoseconds before calling bsec_sensor_control() */
        time_stamp = get_timestamp_us() * 1000;
   1638e:	47c8      	blx	r9
   16390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16394:	fba0 6703 	umull	r6, r7, r0, r3
   16398:	fb03 7701 	mla	r7, r3, r1, r7
        
        /* Retrieve sensor settings to be used in this time instant by calling bsec_sensor_control */
        bsec_sensor_control(time_stamp, &sensor_settings);
   1639c:	aa08      	add	r2, sp, #32
   1639e:	4630      	mov	r0, r6
   163a0:	4639      	mov	r1, r7
   163a2:	f7f7 fbef 	bl	db84 <bsec_sensor_control>
    if (sensor_settings->trigger_measurement)
   163a6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   163aa:	b1f3      	cbz	r3, 163ea <bsec_iot_loop+0x7a>
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   163ac:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163b0:	4621      	mov	r1, r4
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   163b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   163b6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163ba:	20cf      	movs	r0, #207	; 0xcf
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   163bc:	ba5b      	rev16	r3, r3
   163be:	8723      	strh	r3, [r4, #56]	; 0x38
        bme680_g.gas_sett.run_gas = sensor_settings->run_gas;
   163c0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   163c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        bme680_g.gas_sett.heatr_temp = sensor_settings->heater_temperature; /* degree Celsius */
   163c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   163ca:	6423      	str	r3, [r4, #64]	; 0x40
        bme680_g.power_mode = BME680_FORCED_MODE;
   163cc:	2301      	movs	r3, #1
   163ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   163d2:	f000 f935 	bl	16640 <bme680_set_sensor_settings>
        bme680_status = bme680_set_sensor_mode(&bme680_g);
   163d6:	4620      	mov	r0, r4
   163d8:	f018 fd55 	bl	2ee86 <bme680_set_sensor_mode>
        bme680_get_profile_dur(&meas_period, &bme680_g);
   163dc:	a874      	add	r0, sp, #464	; 0x1d0
   163de:	4621      	mov	r1, r4
   163e0:	f000 faac 	bl	1693c <bme680_get_profile_dur>
        sleep((uint32_t)meas_period);
   163e4:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	; 0x1d0
        sleep(5);
   163e8:	47c0      	blx	r8
        bme680_status = bme680_get_sensor_mode(&bme680_g);
   163ea:	4620      	mov	r0, r4
   163ec:	f018 fd8a 	bl	2ef04 <bme680_get_sensor_mode>
    while (bme680_g.power_mode == BME680_FORCED_MODE)
   163f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   163f4:	2b01      	cmp	r3, #1
   163f6:	f000 80a4 	beq.w	16542 <bsec_iot_loop+0x1d2>
        /* Trigger a measurement if necessary */
        bme680_bsec_trigger_measurement(&sensor_settings, sleep);
        
        /* Read data from last measurement */
        num_bsec_inputs = 0;
        bme680_bsec_read_data(time_stamp, bsec_inputs, &num_bsec_inputs, sensor_settings.process_data);
   163fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (bsec_process_data)
   163fc:	2b00      	cmp	r3, #0
   163fe:	f000 80a4 	beq.w	1654a <bsec_iot_loop+0x1da>
        bme680_status = bme680_get_sensor_data(&data, &bme680_g);
   16402:	4a88      	ldr	r2, [pc, #544]	; (16624 <bsec_iot_loop+0x2b4>)
   16404:	4621      	mov	r1, r4
   16406:	4610      	mov	r0, r2
   16408:	9305      	str	r3, [sp, #20]
   1640a:	f000 facb 	bl	169a4 <bme680_get_sensor_data>
        if (data.status & BME680_NEW_DATA_MSK)
   1640e:	4a85      	ldr	r2, [pc, #532]	; (16624 <bsec_iot_loop+0x2b4>)
   16410:	7810      	ldrb	r0, [r2, #0]
   16412:	0603      	lsls	r3, r0, #24
   16414:	f140 8099 	bpl.w	1654a <bsec_iot_loop+0x1da>
            if (bsec_process_data & BSEC_PROCESS_PRESSURE)
   16418:	9b05      	ldr	r3, [sp, #20]
   1641a:	f013 0101 	ands.w	r1, r3, #1
   1641e:	d00a      	beq.n	16436 <bsec_iot_loop+0xc6>
                inputs[*num_bsec_inputs].signal = data.pressure;
   16420:	edd2 7a02 	vldr	s15, [r2, #8]
   16424:	eef8 7a67 	vcvt.f32.u32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   16428:	2101      	movs	r1, #1
                inputs[*num_bsec_inputs].signal = data.pressure;
   1642a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   1642e:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   16432:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
            if (bsec_process_data & BSEC_PROCESS_TEMPERATURE)
   16436:	f013 0f04 	tst.w	r3, #4
   1643a:	d029      	beq.n	16490 <bsec_iot_loop+0x120>
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   1643c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
   16440:	eddf 6a79 	vldr	s13, [pc, #484]	; 16628 <bsec_iot_loop+0x2b8>
   16444:	ee07 2a90 	vmov	s15, r2
   16448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   1644c:	f04f 0e03 	mov.w	lr, #3
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   16450:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   16454:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   16458:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
                (*num_bsec_inputs)++;
   1645c:	1c4a      	adds	r2, r1, #1
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   1645e:	e9cc 6700 	strd	r6, r7, [ip]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   16462:	f88c e00d 	strb.w	lr, [ip, #13]
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   16466:	ed8c 7a02 	vstr	s14, [ip, #8]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HEATSOURCE;
   1646a:	b2d2      	uxtb	r2, r2
   1646c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   16470:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
   16474:	f04f 0c0e 	mov.w	ip, #14
   16478:	f882 c00d 	strb.w	ip, [r2, #13]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   1647c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1663c <bsec_iot_loop+0x2cc>
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   16480:	e9c2 6700 	strd	r6, r7, [r2]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   16484:	f8dc c000 	ldr.w	ip, [ip]
                (*num_bsec_inputs)++;
   16488:	3102      	adds	r1, #2
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   1648a:	f8c2 c008 	str.w	ip, [r2, #8]
                (*num_bsec_inputs)++;
   1648e:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_HUMIDITY)
   16490:	079a      	lsls	r2, r3, #30
   16492:	d516      	bpl.n	164c2 <bsec_iot_loop+0x152>
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HUMIDITY;
   16494:	f04f 0c02 	mov.w	ip, #2
   16498:	aa0e      	add	r2, sp, #56	; 0x38
   1649a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   1649e:	f882 c00d 	strb.w	ip, [r2, #13]
                    inputs[*num_bsec_inputs].signal = data.humidity / 1000.0f;
   164a2:	f8df c180 	ldr.w	ip, [pc, #384]	; 16624 <bsec_iot_loop+0x2b4>
   164a6:	eddf 6a61 	vldr	s13, [pc, #388]	; 1662c <bsec_iot_loop+0x2bc>
   164aa:	eddc 7a03 	vldr	s15, [ip, #12]
   164ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
   164b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   164b6:	ed82 7a02 	vstr	s14, [r2, #8]
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   164ba:	e9c2 6700 	strd	r6, r7, [r2]
                (*num_bsec_inputs)++;
   164be:	3101      	adds	r1, #1
   164c0:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_GAS)
   164c2:	071a      	lsls	r2, r3, #28
   164c4:	d53f      	bpl.n	16546 <bsec_iot_loop+0x1d6>
                if(data.status & BME680_GASM_VALID_MSK)
   164c6:	0683      	lsls	r3, r0, #26
   164c8:	d53d      	bpl.n	16546 <bsec_iot_loop+0x1d6>
                    inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_GASRESISTOR;
   164ca:	2204      	movs	r2, #4
   164cc:	ab0e      	add	r3, sp, #56	; 0x38
   164ce:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   164d2:	735a      	strb	r2, [r3, #13]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   164d4:	4a53      	ldr	r2, [pc, #332]	; (16624 <bsec_iot_loop+0x2b4>)
                    inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   164d6:	e9c3 6700 	strd	r6, r7, [r3]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   164da:	edd2 7a04 	vldr	s15, [r2, #16]
   164de:	eef8 7a67 	vcvt.f32.u32	s15, s15
   164e2:	edc3 7a02 	vstr	s15, [r3, #8]
                    (*num_bsec_inputs)++;
   164e6:	3101      	adds	r1, #1
   164e8:	b2c9      	uxtb	r1, r1
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   164ea:	230e      	movs	r3, #14
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164ec:	aa74      	add	r2, sp, #464	; 0x1d0
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   164ee:	f88d 301b 	strb.w	r3, [sp, #27]
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164f2:	a80e      	add	r0, sp, #56	; 0x38
   164f4:	f10d 031b 	add.w	r3, sp, #27
   164f8:	f7f7 fae2 	bl	dac0 <bsec_do_steps>
        for (index = 0; index < num_bsec_outputs; index++)
   164fc:	2700      	movs	r7, #0
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   164fe:	9005      	str	r0, [sp, #20]
    float breath_voc_equivalent = 0.0f;
   16500:	eef0 4a48 	vmov.f32	s9, s16
    float co2_equivalent = 0.0f;
   16504:	eeb0 4a48 	vmov.f32	s8, s16
    float static_iaq = 0.0f;
   16508:	eef0 3a48 	vmov.f32	s7, s16
    float raw_gas = 0.0f;
   1650c:	eeb0 3a48 	vmov.f32	s6, s16
    float raw_humidity = 0.0f;
   16510:	eef0 2a48 	vmov.f32	s5, s16
    float humidity = 0.0f;
   16514:	eeb0 1a48 	vmov.f32	s2, s16
    float raw_pressure = 0.0f;
   16518:	eef0 1a48 	vmov.f32	s3, s16
    float raw_temp = 0.0f;
   1651c:	eeb0 2a48 	vmov.f32	s4, s16
    float temp = 0.0f;
   16520:	eef0 0a48 	vmov.f32	s1, s16
    uint8_t iaq_accuracy = 0;
   16524:	463a      	mov	r2, r7
    float iaq = 0.0f;
   16526:	eeb0 0a48 	vmov.f32	s0, s16
    int64_t timestamp = 0;
   1652a:	2000      	movs	r0, #0
   1652c:	2100      	movs	r1, #0
        for (index = 0; index < num_bsec_outputs; index++)
   1652e:	f89d e01b 	ldrb.w	lr, [sp, #27]
   16532:	ae74      	add	r6, sp, #464	; 0x1d0
   16534:	fa5f fc87 	uxtb.w	ip, r7
   16538:	45e6      	cmp	lr, ip
   1653a:	d836      	bhi.n	165aa <bsec_iot_loop+0x23a>
        output_ready(timestamp, iaq, iaq_accuracy, temp, humidity, raw_pressure, raw_temp, 
   1653c:	9b05      	ldr	r3, [sp, #20]
   1653e:	47d0      	blx	sl
   16540:	e003      	b.n	1654a <bsec_iot_loop+0x1da>
        sleep(5);
   16542:	2005      	movs	r0, #5
   16544:	e750      	b.n	163e8 <bsec_iot_loop+0x78>
    if (num_bsec_inputs > 0)
   16546:	2900      	cmp	r1, #0
   16548:	d1cf      	bne.n	164ea <bsec_iot_loop+0x17a>
        
        /* Increment sample counter */
        n_samples++;
        
        /* Retrieve and store state if the passed save_intvl */
        if (n_samples >= save_intvl)
   1654a:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
        n_samples++;
   1654c:	3501      	adds	r5, #1
        if (n_samples >= save_intvl)
   1654e:	429d      	cmp	r5, r3
   16550:	d30e      	bcc.n	16570 <bsec_iot_loop+0x200>
        {
            bsec_status = bsec_get_state(0, bsec_state, sizeof(bsec_state), work_buffer, sizeof(work_buffer), &bsec_state_len);
   16552:	228b      	movs	r2, #139	; 0x8b
   16554:	ae07      	add	r6, sp, #28
   16556:	9601      	str	r6, [sp, #4]
   16558:	9200      	str	r2, [sp, #0]
   1655a:	ab51      	add	r3, sp, #324	; 0x144
   1655c:	a92e      	add	r1, sp, #184	; 0xb8
   1655e:	2000      	movs	r0, #0
   16560:	f7f7 faf6 	bl	db50 <bsec_get_state>
            if (bsec_status == BSEC_OK)
   16564:	4605      	mov	r5, r0
   16566:	2800      	cmp	r0, #0
   16568:	d156      	bne.n	16618 <bsec_iot_loop+0x2a8>
            {
                state_save(bsec_state, bsec_state_len);
   1656a:	6831      	ldr	r1, [r6, #0]
   1656c:	a82e      	add	r0, sp, #184	; 0xb8
   1656e:	47d8      	blx	fp
        }
        
        
        /* Compute how long we can sleep until we need to call bsec_sensor_control() next */
        /* Time_stamp is converted from microseconds to nanoseconds first and then the difference to milliseconds */
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   16570:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   16574:	47c8      	blx	r9
   16576:	4a2e      	ldr	r2, [pc, #184]	; (16630 <bsec_iot_loop+0x2c0>)
   16578:	4243      	negs	r3, r0
   1657a:	fb02 3301 	mla	r3, r2, r1, r3
   1657e:	fba0 0102 	umull	r0, r1, r0, r2
   16582:	4419      	add	r1, r3
   16584:	1983      	adds	r3, r0, r6
   16586:	9302      	str	r3, [sp, #8]
   16588:	eb41 0307 	adc.w	r3, r1, r7
   1658c:	9303      	str	r3, [sp, #12]
        if (time_stamp_interval_ms > 0)
   1658e:	2300      	movs	r3, #0
   16590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   16594:	4a27      	ldr	r2, [pc, #156]	; (16634 <bsec_iot_loop+0x2c4>)
   16596:	4282      	cmp	r2, r0
   16598:	418b      	sbcs	r3, r1
   1659a:	f6bf aef8 	bge.w	1638e <bsec_iot_loop+0x1e>
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   1659e:	4a26      	ldr	r2, [pc, #152]	; (16638 <bsec_iot_loop+0x2c8>)
   165a0:	2300      	movs	r3, #0
   165a2:	f7f7 f895 	bl	d6d0 <__aeabi_ldivmod>
        {
            sleep((uint32_t)time_stamp_interval_ms);
   165a6:	47c0      	blx	r8
   165a8:	e6f1      	b.n	1638e <bsec_iot_loop+0x1e>
            switch (bsec_outputs[index].sensor_id)
   165aa:	f896 c00d 	ldrb.w	ip, [r6, #13]
   165ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   165b2:	f1bc 0f14 	cmp.w	ip, #20
   165b6:	d811      	bhi.n	165dc <bsec_iot_loop+0x26c>
   165b8:	e8df f00c 	tbb	[pc, ip]
   165bc:	1916130b 	.word	0x1916130b
   165c0:	2b1f2810 	.word	0x2b1f2810
   165c4:	10101025 	.word	0x10101025
   165c8:	10221c10 	.word	0x10221c10
   165cc:	10100e10 	.word	0x10100e10
   165d0:	0e          	.byte	0x0e
   165d1:	00          	.byte	0x00
                    iaq = bsec_outputs[index].signal;
   165d2:	ed96 0a02 	vldr	s0, [r6, #8]
                    iaq_accuracy = bsec_outputs[index].accuracy;
   165d6:	7bb2      	ldrb	r2, [r6, #14]
            timestamp = bsec_outputs[index].time_stamp;
   165d8:	e9d6 0100 	ldrd	r0, r1, [r6]
   165dc:	3701      	adds	r7, #1
   165de:	3610      	adds	r6, #16
   165e0:	e7a8      	b.n	16534 <bsec_iot_loop+0x1c4>
                    static_iaq = bsec_outputs[index].signal;
   165e2:	edd6 3a02 	vldr	s7, [r6, #8]
                    break;
   165e6:	e7f7      	b.n	165d8 <bsec_iot_loop+0x268>
                    co2_equivalent = bsec_outputs[index].signal;
   165e8:	ed96 4a02 	vldr	s8, [r6, #8]
                    break;
   165ec:	e7f4      	b.n	165d8 <bsec_iot_loop+0x268>
                    breath_voc_equivalent = bsec_outputs[index].signal;
   165ee:	edd6 4a02 	vldr	s9, [r6, #8]
                    break;
   165f2:	e7f1      	b.n	165d8 <bsec_iot_loop+0x268>
                    temp = bsec_outputs[index].signal;
   165f4:	edd6 0a02 	vldr	s1, [r6, #8]
                    break;
   165f8:	e7ee      	b.n	165d8 <bsec_iot_loop+0x268>
                    raw_pressure = bsec_outputs[index].signal;
   165fa:	edd6 1a02 	vldr	s3, [r6, #8]
                    break;
   165fe:	e7eb      	b.n	165d8 <bsec_iot_loop+0x268>
                    humidity = bsec_outputs[index].signal;
   16600:	ed96 1a02 	vldr	s2, [r6, #8]
                    break;
   16604:	e7e8      	b.n	165d8 <bsec_iot_loop+0x268>
                    raw_gas = bsec_outputs[index].signal;
   16606:	ed96 3a02 	vldr	s6, [r6, #8]
                    break;
   1660a:	e7e5      	b.n	165d8 <bsec_iot_loop+0x268>
                    raw_temp = bsec_outputs[index].signal;
   1660c:	ed96 2a02 	vldr	s4, [r6, #8]
                    break;
   16610:	e7e2      	b.n	165d8 <bsec_iot_loop+0x268>
                    raw_humidity = bsec_outputs[index].signal;
   16612:	edd6 2a02 	vldr	s5, [r6, #8]
                    break;
   16616:	e7df      	b.n	165d8 <bsec_iot_loop+0x268>
            n_samples = 0;
   16618:	2500      	movs	r5, #0
   1661a:	e7a9      	b.n	16570 <bsec_iot_loop+0x200>
   1661c:	00000000 	.word	0x00000000
   16620:	20021584 	.word	0x20021584
   16624:	200215e0 	.word	0x200215e0
   16628:	42c80000 	.word	0x42c80000
   1662c:	447a0000 	.word	0x447a0000
   16630:	fffffc18 	.word	0xfffffc18
   16634:	000f423f 	.word	0x000f423f
   16638:	000f4240 	.word	0x000f4240
   1663c:	200215dc 	.word	0x200215dc

00016640 <bme680_set_sensor_settings>:
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   16640:	2300      	movs	r3, #0
{
   16642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16646:	4606      	mov	r6, r0
   16648:	b088      	sub	sp, #32
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1664a:	4608      	mov	r0, r1
{
   1664c:	460c      	mov	r4, r1
	uint8_t data = 0;
   1664e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   16652:	9304      	str	r3, [sp, #16]
   16654:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   16658:	9306      	str	r3, [sp, #24]
   1665a:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
   1665e:	f018 fa3c 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   16662:	2800      	cmp	r0, #0
   16664:	f040 8101 	bne.w	1686a <bme680_set_sensor_settings+0x22a>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   16668:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1666c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
   16670:	d105      	bne.n	1667e <bme680_set_sensor_settings+0x3e>
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   16672:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
		if (rslt == BME680_OK)
			rslt = bme680_set_sensor_mode(dev);
   16676:	4620      	mov	r0, r4
   16678:	f018 fc05 	bl	2ee86 <bme680_set_sensor_mode>
   1667c:	e009      	b.n	16692 <bme680_set_sensor_settings+0x52>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   1667e:	2f01      	cmp	r7, #1
		uint8_t reg_addr[2] = {0};
   16680:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   16684:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
   16688:	f000 80f2 	beq.w	16870 <bme680_set_sensor_settings+0x230>
		dev->power_mode = BME680_SLEEP_MODE;
   1668c:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
			dev->gas_sett.nb_conv = 0;
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   16690:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
   16692:	f016 0510 	ands.w	r5, r6, #16
   16696:	d020      	beq.n	166da <bme680_set_sensor_settings+0x9a>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   16698:	f104 0246 	add.w	r2, r4, #70	; 0x46
   1669c:	2107      	movs	r1, #7
   1669e:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   166a2:	f018 fa72 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   166a6:	b930      	cbnz	r0, 166b6 <bme680_set_sensor_settings+0x76>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   166a8:	4623      	mov	r3, r4
   166aa:	2201      	movs	r2, #1
   166ac:	f10d 0107 	add.w	r1, sp, #7
   166b0:	2075      	movs	r0, #117	; 0x75
   166b2:	f018 fa76 	bl	2eba2 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   166b6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   166ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
   166be:	009b      	lsls	r3, r3, #2
   166c0:	f022 021c 	bic.w	r2, r2, #28
   166c4:	f003 031c 	and.w	r3, r3, #28
   166c8:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   166ca:	2275      	movs	r2, #117	; 0x75
			count++;
   166cc:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   166ce:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   166d2:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   166d6:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
   166da:	06b3      	lsls	r3, r6, #26
   166dc:	d522      	bpl.n	16724 <bme680_set_sensor_settings+0xe4>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   166de:	f104 0246 	add.w	r2, r4, #70	; 0x46
   166e2:	2108      	movs	r1, #8
   166e4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   166e8:	f018 fa4f 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   166ec:	b930      	cbnz	r0, 166fc <bme680_set_sensor_settings+0xbc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   166ee:	4623      	mov	r3, r4
   166f0:	2201      	movs	r2, #1
   166f2:	f10d 0107 	add.w	r1, sp, #7
   166f6:	2070      	movs	r0, #112	; 0x70
   166f8:	f018 fa53 	bl	2eba2 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   166fc:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   166fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16702:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   16706:	f023 0308 	bic.w	r3, r3, #8
   1670a:	f002 0208 	and.w	r2, r2, #8
   1670e:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   16710:	aa08      	add	r2, sp, #32
   16712:	442a      	add	r2, r5
			count++;
   16714:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   16716:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   1671a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   1671e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   16722:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   16724:	07b1      	lsls	r1, r6, #30
   16726:	d033      	beq.n	16790 <bme680_set_sensor_settings+0x150>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   16728:	f104 0246 	add.w	r2, r4, #70	; 0x46
   1672c:	2105      	movs	r1, #5
   1672e:	f104 0039 	add.w	r0, r4, #57	; 0x39
   16732:	f018 fa2a 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   16736:	b930      	cbnz	r0, 16746 <bme680_set_sensor_settings+0x106>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   16738:	4623      	mov	r3, r4
   1673a:	2201      	movs	r2, #1
   1673c:	f10d 0107 	add.w	r1, sp, #7
   16740:	2074      	movs	r0, #116	; 0x74
   16742:	f018 fa2e 	bl	2eba2 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
   16746:	07f2      	lsls	r2, r6, #31
   16748:	d509      	bpl.n	1675e <bme680_set_sensor_settings+0x11e>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   1674a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1674e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   16752:	f003 031f 	and.w	r3, r3, #31
   16756:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1675a:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
   1675e:	07b3      	lsls	r3, r6, #30
   16760:	d50b      	bpl.n	1677a <bme680_set_sensor_settings+0x13a>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   16762:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   16766:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1676a:	009b      	lsls	r3, r3, #2
   1676c:	f003 031c 	and.w	r3, r3, #28
   16770:	f022 021c 	bic.w	r2, r2, #28
   16774:	4313      	orrs	r3, r2
   16776:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
   1677a:	2274      	movs	r2, #116	; 0x74
   1677c:	ab08      	add	r3, sp, #32
   1677e:	442b      	add	r3, r5
   16780:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   16784:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   16788:	3501      	adds	r5, #1
			data_array[count] = data;
   1678a:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   1678e:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
   16790:	0771      	lsls	r1, r6, #29
   16792:	d522      	bpl.n	167da <bme680_set_sensor_settings+0x19a>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   16794:	f104 0246 	add.w	r2, r4, #70	; 0x46
   16798:	2105      	movs	r1, #5
   1679a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1679e:	f018 f9f4 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   167a2:	b930      	cbnz	r0, 167b2 <bme680_set_sensor_settings+0x172>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   167a4:	4623      	mov	r3, r4
   167a6:	2201      	movs	r2, #1
   167a8:	f10d 0107 	add.w	r1, sp, #7
   167ac:	2072      	movs	r0, #114	; 0x72
   167ae:	f018 f9f8 	bl	2eba2 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   167b2:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   167b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   167b8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   167bc:	f023 0307 	bic.w	r3, r3, #7
   167c0:	f002 0207 	and.w	r2, r2, #7
   167c4:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   167c6:	aa08      	add	r2, sp, #32
   167c8:	442a      	add	r2, r5
			count++;
   167ca:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   167cc:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   167d0:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   167d4:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   167d8:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   167da:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   167de:	d03b      	beq.n	16858 <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   167e0:	f104 0846 	add.w	r8, r4, #70	; 0x46
   167e4:	4642      	mov	r2, r8
   167e6:	2101      	movs	r1, #1
   167e8:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   167ec:	f018 f9cd 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK) {
   167f0:	b960      	cbnz	r0, 1680c <bme680_set_sensor_settings+0x1cc>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   167f2:	210a      	movs	r1, #10
   167f4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   167f8:	f018 f9c7 	bl	2eb8a <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   167fc:	b930      	cbnz	r0, 1680c <bme680_set_sensor_settings+0x1cc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   167fe:	4623      	mov	r3, r4
   16800:	2201      	movs	r2, #1
   16802:	f10d 0107 	add.w	r1, sp, #7
   16806:	2071      	movs	r0, #113	; 0x71
   16808:	f018 f9cb 	bl	2eba2 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
   1680c:	0672      	lsls	r2, r6, #25
   1680e:	d50b      	bpl.n	16828 <bme680_set_sensor_settings+0x1e8>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   16810:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   16814:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16818:	011b      	lsls	r3, r3, #4
   1681a:	f003 0310 	and.w	r3, r3, #16
   1681e:	f022 0210 	bic.w	r2, r2, #16
   16822:	4313      	orrs	r3, r2
   16824:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
   16828:	0633      	lsls	r3, r6, #24
   1682a:	d50a      	bpl.n	16842 <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1682c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16830:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   16834:	f023 030f 	bic.w	r3, r3, #15
   16838:	f002 020f 	and.w	r2, r2, #15
   1683c:	4313      	orrs	r3, r2
   1683e:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   16842:	2271      	movs	r2, #113	; 0x71
   16844:	ab08      	add	r3, sp, #32
   16846:	442b      	add	r3, r5
   16848:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   1684c:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   16850:	3501      	adds	r5, #1
			data_array[count] = data;
   16852:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   16856:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
   16858:	b928      	cbnz	r0, 16866 <bme680_set_sensor_settings+0x226>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   1685a:	4623      	mov	r3, r4
   1685c:	462a      	mov	r2, r5
   1685e:	a906      	add	r1, sp, #24
   16860:	a804      	add	r0, sp, #16
   16862:	f018 f9c2 	bl	2ebea <bme680_set_regs>
		dev->power_mode = intended_power_mode;
   16866:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
   1686a:	b008      	add	sp, #32
   1686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (temp > 400) /* Cap temperature */
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   16870:	8a4a      	ldrh	r2, [r1, #18]
   16872:	2105      	movs	r1, #5
   16874:	4b30      	ldr	r3, [pc, #192]	; (16938 <bme680_set_sensor_settings+0x2f8>)
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   16876:	f994 5014 	ldrsb.w	r5, [r4, #20]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   1687a:	fb12 3301 	smlabb	r3, r2, r1, r3
   1687e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
   16882:	2164      	movs	r1, #100	; 0x64
   16884:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
   16888:	bf28      	it	cs
   1688a:	f44f 72c8 	movcs.w	r2, #400	; 0x190
   1688e:	435a      	muls	r2, r3
   16890:	fbb2 f2f1 	udiv	r2, r2, r1
   16894:	230a      	movs	r3, #10
   16896:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
   1689a:	fbb2 f2f3 	udiv	r2, r2, r3
   1689e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   168a2:	f503 7344 	add.w	r3, r3, #784	; 0x310
   168a6:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   168a8:	f994 3004 	ldrsb.w	r3, [r4, #4]
   168ac:	fb13 f305 	smulbb	r3, r3, r5
   168b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   168b4:	fb93 f3f5 	sdiv	r3, r3, r5
   168b8:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   168ba:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   168be:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   168c2:	f994 5035 	ldrsb.w	r5, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   168c6:	3204      	adds	r2, #4
   168c8:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   168cc:	2283      	movs	r2, #131	; 0x83
   168ce:	436a      	muls	r2, r5
   168d0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   168d4:	fbb3 f3f2 	udiv	r3, r3, r2
   168d8:	2222      	movs	r2, #34	; 0x22
   168da:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   168dc:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
   168e0:	3b02      	subs	r3, #2
   168e2:	fb93 f3f1 	sdiv	r3, r3, r1
   168e6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   168ea:	f246 435a 	movw	r3, #25690	; 0x645a
   168ee:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   168f2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   168f6:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   168fa:	d21a      	bcs.n	16932 <bme680_set_sensor_settings+0x2f2>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   168fc:	2b3f      	cmp	r3, #63	; 0x3f
   168fe:	b242      	sxtb	r2, r0
   16900:	f100 0001 	add.w	r0, r0, #1
   16904:	d813      	bhi.n	1692e <bme680_set_sensor_settings+0x2ee>
			dur = dur / 4;
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   16906:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   1690a:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
   1690c:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   1690e:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   16912:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   16916:	4623      	mov	r3, r4
   16918:	2202      	movs	r2, #2
   1691a:	a903      	add	r1, sp, #12
   1691c:	a802      	add	r0, sp, #8
   1691e:	f018 f964 	bl	2ebea <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
   16922:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   16926:	2800      	cmp	r0, #0
   16928:	f47f aeb3 	bne.w	16692 <bme680_set_sensor_settings+0x52>
   1692c:	e6a3      	b.n	16676 <bme680_set_sensor_settings+0x36>
			dur = dur / 4;
   1692e:	089b      	lsrs	r3, r3, #2
			factor += 1;
   16930:	e7e4      	b.n	168fc <bme680_set_sensor_settings+0x2bc>
		durval = 0xff; /* Max duration*/
   16932:	23ff      	movs	r3, #255	; 0xff
   16934:	e7ea      	b.n	1690c <bme680_set_sensor_settings+0x2cc>
   16936:	bf00      	nop
   16938:	000bbffd 	.word	0x000bbffd

0001693c <bme680_get_profile_dur>:
{
   1693c:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   1693e:	4b18      	ldr	r3, [pc, #96]	; (169a0 <bme680_get_profile_dur+0x64>)
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   16940:	aa02      	add	r2, sp, #8
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   16942:	9300      	str	r3, [sp, #0]
   16944:	f241 0308 	movw	r3, #4104	; 0x1008
   16948:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   1694c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   16950:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   16954:	4413      	add	r3, r2
   16956:	f813 2c08 	ldrb.w	r2, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   1695a:	ab02      	add	r3, sp, #8
   1695c:	441c      	add	r4, r3
   1695e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   16962:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   16964:	441a      	add	r2, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   16966:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1696a:	4423      	add	r3, r4
   1696c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   16970:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   16974:	4413      	add	r3, r2
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   16976:	f241 22b9 	movw	r2, #4793	; 0x12b9
   1697a:	fb04 2303 	mla	r3, r4, r3, r2
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   1697e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16982:	fbb3 f3f2 	udiv	r3, r3, r2
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   16986:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
   16988:	b29b      	uxth	r3, r3
   1698a:	8003      	strh	r3, [r0, #0]
	if (dev->gas_sett.run_gas) {
   1698c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   16990:	b11a      	cbz	r2, 1699a <bme680_get_profile_dur+0x5e>
		*duration += dev->gas_sett.heatr_dur;
   16992:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   16996:	4413      	add	r3, r2
   16998:	8003      	strh	r3, [r0, #0]
}
   1699a:	b002      	add	sp, #8
   1699c:	bd10      	pop	{r4, pc}
   1699e:	bf00      	nop
   169a0:	04020100 	.word	0x04020100

000169a4 <bme680_get_sensor_data>:
{
   169a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a8:	4606      	mov	r6, r0
   169aa:	b0a9      	sub	sp, #164	; 0xa4
	rslt = null_ptr_check(dev);
   169ac:	4608      	mov	r0, r1
{
   169ae:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   169b0:	f018 f893 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   169b4:	4605      	mov	r5, r0
   169b6:	2800      	cmp	r0, #0
   169b8:	f040 8199 	bne.w	16cee <bme680_get_sensor_data+0x34a>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   169bc:	f10d 0a10 	add.w	sl, sp, #16
   169c0:	4601      	mov	r1, r0
   169c2:	220f      	movs	r2, #15
   169c4:	4650      	mov	r0, sl
   169c6:	f01e f865 	bl	34a94 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   169ca:	4620      	mov	r0, r4
   169cc:	f018 f885 	bl	2eada <null_ptr_check>
   169d0:	f04f 090a 	mov.w	r9, #10
   169d4:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   169d6:	2d00      	cmp	r5, #0
   169d8:	f040 8190 	bne.w	16cfc <bme680_get_sensor_data+0x358>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   169dc:	4623      	mov	r3, r4
   169de:	220f      	movs	r2, #15
   169e0:	4651      	mov	r1, sl
   169e2:	201d      	movs	r0, #29
   169e4:	f018 f8dd 	bl	2eba2 <bme680_get_regs>
			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   169ec:	f89d 701e 	ldrb.w	r7, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169f0:	9101      	str	r1, [sp, #4]
   169f2:	f89d 1019 	ldrb.w	r1, [sp, #25]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   169f6:	f89d b010 	ldrb.w	fp, [sp, #16]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   169fa:	9102      	str	r1, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   169fc:	f89d 101d 	ldrb.w	r1, [sp, #29]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   16a00:	fa4f fe87 	sxtb.w	lr, r7
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   16a04:	f00b 030f 	and.w	r3, fp, #15
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16a08:	9103      	str	r1, [sp, #12]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   16a0a:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   16a0e:	f00e 0120 	and.w	r1, lr, #32
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   16a12:	7073      	strb	r3, [r6, #1]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   16a14:	ea4b 0101 	orr.w	r1, fp, r1
			data->meas_index = buff[1];
   16a18:	f89d 3011 	ldrb.w	r3, [sp, #17]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   16a1c:	f00e 0e10 	and.w	lr, lr, #16
   16a20:	ea41 010e 	orr.w	r1, r1, lr
   16a24:	b249      	sxtb	r1, r1
			data->meas_index = buff[1];
   16a26:	70b3      	strb	r3, [r6, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16a28:	f89d 3012 	ldrb.w	r3, [sp, #18]

			if (data->status & BME680_NEW_DATA_MSK) {
   16a2c:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   16a2e:	4605      	mov	r5, r0
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16a30:	9300      	str	r3, [sp, #0]
   16a32:	f89d c013 	ldrb.w	ip, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   16a36:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   16a3a:	f89d 2015 	ldrb.w	r2, [sp, #21]
   16a3e:	f89d 8016 	ldrb.w	r8, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   16a42:	f89d 0017 	ldrb.w	r0, [sp, #23]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   16a46:	7031      	strb	r1, [r6, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
   16a48:	f280 8155 	bge.w	16cf6 <bme680_get_sensor_data+0x352>
				| ((uint32_t) buff[7] / 16));
   16a4c:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   16a4e:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
   16a52:	ea48 3202 	orr.w	r2, r8, r2, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   16a56:	f8b4 8016 	ldrh.w	r8, [r4, #22]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a5a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   16a5e:	ea4f 0848 	mov.w	r8, r8, lsl #1
   16a62:	ebc8 02d2 	rsb	r2, r8, r2, lsr #3
   16a66:	17d1      	asrs	r1, r2, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   16a68:	ea4f 0a52 	mov.w	sl, r2, lsr #1
   16a6c:	ea4a 7ac1 	orr.w	sl, sl, r1, lsl #31
   16a70:	1049      	asrs	r1, r1, #1
   16a72:	fb0a f101 	mul.w	r1, sl, r1
   16a76:	fbaa ab0a 	umull	sl, fp, sl, sl
   16a7a:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
   16a7e:	ea4f 3e1a 	mov.w	lr, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a82:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   16a84:	ea4e 5e0b 	orr.w	lr, lr, fp, lsl #20
   16a88:	ea4f 382b 	mov.w	r8, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16a8c:	ea4f 7be1 	mov.w	fp, r1, asr #31
   16a90:	fb0e f00b 	mul.w	r0, lr, fp
   16a94:	fbae ab01 	umull	sl, fp, lr, r1
   16a98:	fb01 0808 	mla	r8, r1, r8, r0
   16a9c:	44c3      	add	fp, r8
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   16a9e:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16aa2:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   16aa6:	fb88 8902 	smull	r8, r9, r8, r2
   16aaa:	ea4f 22d8 	mov.w	r2, r8, lsr #11
   16aae:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   16ab2:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
   16ab6:	4410      	add	r0, r2
   16ab8:	6320      	str	r0, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   16aba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   16abe:	1040      	asrs	r0, r0, #1
   16ac0:	f5a0 407a 	sub.w	r0, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   16ac4:	1081      	asrs	r1, r0, #2
   16ac6:	4349      	muls	r1, r1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   16ac8:	3280      	adds	r2, #128	; 0x80
   16aca:	1212      	asrs	r2, r2, #8
   16acc:	80b2      	strh	r2, [r6, #4]
		(int32_t)dev->calib.par_p6) >> 2;
   16ace:	f994 8026 	ldrsb.w	r8, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   16ad2:	ea4f 2ee1 	mov.w	lr, r1, asr #11
   16ad6:	fb08 f80e 	mul.w	r8, r8, lr
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16ada:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
				| ((uint32_t) buff[4] / 16));
   16ade:	091b      	lsrs	r3, r3, #4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16ae0:	fb00 fe0e 	mul.w	lr, r0, lr
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16ae4:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
   16ae8:	9b00      	ldr	r3, [sp, #0]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16aea:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   16aee:	ea4c 3c03 	orr.w	ip, ip, r3, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   16af2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   16af6:	eb0e 0ea8 	add.w	lr, lr, r8, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   16afa:	041b      	lsls	r3, r3, #16
   16afc:	eb03 0eae 	add.w	lr, r3, lr, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   16b00:	f640 4335 	movw	r3, #3125	; 0xc35
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   16b04:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16b08:	1349      	asrs	r1, r1, #13
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   16b0a:	fb00 f008 	mul.w	r0, r0, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b0e:	f994 8020 	ldrsb.w	r8, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
   16b12:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b16:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16b1a:	fb01 f108 	mul.w	r1, r1, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   16b1e:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   16b20:	eb01 0060 	add.w	r0, r1, r0, asr #1
	var1 = var1 >> 18;
   16b24:	1480      	asrs	r0, r0, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b26:	8ba1      	ldrh	r1, [r4, #28]
   16b28:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   16b2c:	ebac 3e2e 	sub.w	lr, ip, lr, asr #12
   16b30:	fb03 fe0e 	mul.w	lr, r3, lr
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b34:	4341      	muls	r1, r0
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   16b36:	f1be 4f80 	cmp.w	lr, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   16b3a:	ea4f 31e1 	mov.w	r1, r1, asr #15
		pressure_comp = ((pressure_comp / var1) << 1);
   16b3e:	bfad      	iteet	ge
   16b40:	fb9e f3f1 	sdivge	r3, lr, r1
		pressure_comp = ((pressure_comp << 1) / var1);
   16b44:	ea4f 0e4e 	movlt.w	lr, lr, lsl #1
   16b48:	fb9e f3f1 	sdivlt	r3, lr, r1
		pressure_comp = ((pressure_comp / var1) << 1);
   16b4c:	005b      	lslge	r3, r3, #1
		(int32_t)dev->calib.par_p8) >> 13;
   16b4e:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
   16b52:	ea4f 0ea3 	mov.w	lr, r3, asr #2
   16b56:	fb00 fe0e 	mul.w	lr, r0, lr
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b5a:	10d9      	asrs	r1, r3, #3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   16b5c:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b60:	4349      	muls	r1, r1
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   16b62:	01c0      	lsls	r0, r0, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b64:	eb00 306e 	add.w	r0, r0, lr, asr #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b68:	f9b4 e02a 	ldrsh.w	lr, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
   16b6c:	1349      	asrs	r1, r1, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   16b6e:	fb0e f101 	mul.w	r1, lr, r1
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   16b72:	ea4f 2c23 	mov.w	ip, r3, asr #8
   16b76:	fb0c fe0c 	mul.w	lr, ip, ip
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b7a:	eb00 3121 	add.w	r1, r0, r1, asr #12
		(int32_t)dev->calib.par_p10) >> 17;
   16b7e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
   16b82:	fb00 f00e 	mul.w	r0, r0, lr
   16b86:	fb0c f000 	mul.w	r0, ip, r0
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   16b8a:	eb01 4060 	add.w	r0, r1, r0, asr #17
   16b8e:	eb03 1320 	add.w	r3, r3, r0, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b92:	2064      	movs	r0, #100	; 0x64
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   16b94:	60b3      	str	r3, [r6, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b96:	f994 100e 	ldrsb.w	r1, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16b9a:	f994 300d 	ldrsb.w	r3, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16b9e:	4351      	muls	r1, r2
   16ba0:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16ba4:	4353      	muls	r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16ba6:	4351      	muls	r1, r2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16ba8:	fb93 f3f0 	sdiv	r3, r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   16bac:	1189      	asrs	r1, r1, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   16bae:	fb91 f1f0 	sdiv	r1, r1, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16bb2:	f06f 0e0f 	mvn.w	lr, #15
	var2 = ((int32_t) dev->calib.par_h2
   16bb6:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   16bba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   16bbe:	4419      	add	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   16bc0:	fb0c f101 	mul.w	r1, ip, r1
	var2 = ((int32_t) dev->calib.par_h2
   16bc4:	ea4f 2ca1 	mov.w	ip, r1, asr #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16bc8:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   16bcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16bd0:	8921      	ldrh	r1, [r4, #8]
   16bd2:	fb0e 3101 	mla	r1, lr, r1, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   16bd6:	f994 300c 	ldrsb.w	r3, [r4, #12]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16bda:	f10d 0e20 	add.w	lr, sp, #32
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   16bde:	4353      	muls	r3, r2
   16be0:	fb93 f3f0 	sdiv	r3, r3, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   16be4:	eba1 0163 	sub.w	r1, r1, r3, asr #1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16be8:	f994 3010 	ldrsb.w	r3, [r4, #16]
	var3 = var1 * var2;
   16bec:	fb01 f10c 	mul.w	r1, r1, ip
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16bf0:	4353      	muls	r3, r2
   16bf2:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
   16bf6:	7be2      	ldrb	r2, [r4, #15]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16bf8:	f8df c11c 	ldr.w	ip, [pc, #284]	; 16d18 <bme680_get_sensor_data+0x374>
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16bfc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   16c00:	138a      	asrs	r2, r1, #14
   16c02:	4352      	muls	r2, r2
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   16c04:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   16c06:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
   16c08:	4353      	muls	r3, r2
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   16c0a:	eb01 0363 	add.w	r3, r1, r3, asr #1
   16c0e:	1299      	asrs	r1, r3, #10
   16c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c14:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
   16c16:	4a3f      	ldr	r2, [pc, #252]	; (16d14 <bme680_get_sensor_data+0x370>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   16c18:	131b      	asrs	r3, r3, #12
   16c1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
   16c1e:	4293      	cmp	r3, r2
   16c20:	bfd4      	ite	le
   16c22:	60f3      	strle	r3, [r6, #12]
   16c24:	60f2      	strgt	r2, [r6, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   16c26:	f994 8036 	ldrsb.w	r8, [r4, #54]	; 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16c2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c42:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   16c46:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   16c4a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   16c4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c52:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
   16c56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16c66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16c6a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   16c6e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c72:	2305      	movs	r3, #5
   16c74:	f240 503c 	movw	r0, #1340	; 0x53c
   16c78:	2100      	movs	r1, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
   16c7a:	f007 0c0f 	and.w	ip, r7, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c7e:	fbc8 0103 	smlal	r0, r1, r8, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
   16c82:	ab28      	add	r3, sp, #160	; 0xa0
   16c84:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   16c88:	f85c ec80 	ldr.w	lr, [ip, #-128]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16c8c:	ea4f 1897 	mov.w	r8, r7, lsr #6
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   16c90:	fba0 230e 	umull	r2, r3, r0, lr
   16c94:	fb0e 3301 	mla	r3, lr, r1, r3
   16c98:	0c11      	lsrs	r1, r2, #16
   16c9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   16c9e:	1418      	asrs	r0, r3, #16
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16ca0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16ca2:	f85c 7c40 	ldr.w	r7, [ip, #-64]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   16ca6:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   16caa:	fa1f f888 	uxth.w	r8, r8
   16cae:	ea4f 4358 	mov.w	r3, r8, lsr #17
   16cb2:	ea4f 32c8 	mov.w	r2, r8, lsl #15
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16cb6:	fba7 8901 	umull	r8, r9, r7, r1
   16cba:	fb07 9900 	mla	r9, r7, r0, r9
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   16cbe:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   16cc2:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   16cc6:	1852      	adds	r2, r2, r1
   16cc8:	eb40 0303 	adc.w	r3, r0, r3
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16ccc:	0857      	lsrs	r7, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16cce:	ea4f 2058 	mov.w	r0, r8, lsr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16cd2:	ea47 77c3 	orr.w	r7, r7, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   16cd6:	ea40 50c9 	orr.w	r0, r0, r9, lsl #23
   16cda:	ea4f 2c69 	mov.w	ip, r9, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   16cde:	1059      	asrs	r1, r3, #1
   16ce0:	19c0      	adds	r0, r0, r7
   16ce2:	eb4c 0101 	adc.w	r1, ip, r1
   16ce6:	f7f6 fcf3 	bl	d6d0 <__aeabi_ldivmod>
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   16cea:	6130      	str	r0, [r6, #16]
		if (rslt == BME680_OK) {
   16cec:	b175      	cbz	r5, 16d0c <bme680_get_sensor_data+0x368>
}
   16cee:	4628      	mov	r0, r5
   16cf0:	b029      	add	sp, #164	; 0xa4
   16cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   16cf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16cf8:	200a      	movs	r0, #10
   16cfa:	4798      	blx	r3
		}
		tries--;
   16cfc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	} while (tries);
   16d00:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   16d04:	f47f ae67 	bne.w	169d6 <bme680_get_sensor_data+0x32>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   16d08:	2502      	movs	r5, #2
	return rslt;
   16d0a:	e7f0      	b.n	16cee <bme680_get_sensor_data+0x34a>
				dev->new_fields = 1;
   16d0c:	2301      	movs	r3, #1
   16d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   16d12:	e7ec      	b.n	16cee <bme680_get_sensor_data+0x34a>
   16d14:	000186a0 	.word	0x000186a0
   16d18:	000357f8 	.word	0x000357f8

00016d1c <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   16d1c:	4b08      	ldr	r3, [pc, #32]	; (16d40 <primary_feed_worker+0x24>)
   16d1e:	4909      	ldr	r1, [pc, #36]	; (16d44 <primary_feed_worker+0x28>)
   16d20:	6818      	ldr	r0, [r3, #0]
   16d22:	e8d1 3fef 	ldaex	r3, [r1]
   16d26:	f043 0201 	orr.w	r2, r3, #1
   16d2a:	e8c1 2fec 	stlex	ip, r2, [r1]
   16d2e:	f1bc 0f00 	cmp.w	ip, #0
   16d32:	d1f6      	bne.n	16d22 <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16d34:	07db      	lsls	r3, r3, #31
   16d36:	d402      	bmi.n	16d3e <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   16d38:	3908      	subs	r1, #8
   16d3a:	f01d bcd9 	b.w	346f0 <k_queue_append>
}
   16d3e:	4770      	bx	lr
   16d40:	200215f4 	.word	0x200215f4
   16d44:	20021628 	.word	0x20021628

00016d48 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   16d48:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   16d4a:	4c08      	ldr	r4, [pc, #32]	; (16d6c <secondary_feed_worker+0x24>)
   16d4c:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->driver_api;

	return api->feed(dev, channel_id);
   16d50:	6883      	ldr	r3, [r0, #8]
   16d52:	68db      	ldr	r3, [r3, #12]
   16d54:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   16d56:	b940      	cbnz	r0, 16d6a <secondary_feed_worker+0x22>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16d58:	f104 0108 	add.w	r1, r4, #8
   16d5c:	f241 3288 	movw	r2, #5000	; 0x1388
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   16d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16d64:	4802      	ldr	r0, [pc, #8]	; (16d70 <secondary_feed_worker+0x28>)
   16d66:	f014 b857 	b.w	2ae18 <k_delayed_work_submit_to_queue>
   16d6a:	bd10      	pop	{r4, pc}
   16d6c:	200215f8 	.word	0x200215f8
   16d70:	20027460 	.word	0x20027460

00016d74 <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   16d74:	b538      	push	{r3, r4, r5, lr}
	if (work_q == NULL) {
   16d76:	2800      	cmp	r0, #0
   16d78:	d02e      	beq.n	16dd8 <watchdog_init_and_start+0x64>
		return -EINVAL;
	}
	second_work_q = work_q;
   16d7a:	4b1c      	ldr	r3, [pc, #112]	; (16dec <watchdog_init_and_start+0x78>)
   16d7c:	6018      	str	r0, [r3, #0]
   16d7e:	481c      	ldr	r0, [pc, #112]	; (16df0 <watchdog_init_and_start+0x7c>)
   16d80:	f011 f9fe 	bl	28180 <z_impl_device_get_binding>
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   16d84:	4c1b      	ldr	r4, [pc, #108]	; (16df4 <watchdog_init_and_start+0x80>)
   16d86:	6020      	str	r0, [r4, #0]
	if (data->wdt_drv == NULL) {
   16d88:	b350      	cbz	r0, 16de0 <watchdog_init_and_start+0x6c>
	return api->install_timeout(dev, cfg);
   16d8a:	6883      	ldr	r3, [r0, #8]
   16d8c:	491a      	ldr	r1, [pc, #104]	; (16df8 <watchdog_init_and_start+0x84>)
   16d8e:	689b      	ldr	r3, [r3, #8]
   16d90:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
   16d92:	2800      	cmp	r0, #0
	data->wdt_channel_id = wdt_install_timeout(
   16d94:	6060      	str	r0, [r4, #4]
	if (data->wdt_channel_id < 0) {
   16d96:	db26      	blt.n	16de6 <watchdog_init_and_start+0x72>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   16d98:	6820      	ldr	r0, [r4, #0]
	return api->setup(dev, options);
   16d9a:	6883      	ldr	r3, [r0, #8]
   16d9c:	2102      	movs	r1, #2
   16d9e:	681b      	ldr	r3, [r3, #0]
   16da0:	4798      	blx	r3
	if (err) {
   16da2:	4605      	mov	r5, r0
   16da4:	b9d0      	cbnz	r0, 16ddc <watchdog_init_and_start+0x68>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   16da6:	f104 0008 	add.w	r0, r4, #8
   16daa:	4914      	ldr	r1, [pc, #80]	; (16dfc <watchdog_init_and_start+0x88>)
   16dac:	f01d fd5e 	bl	3486c <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   16db0:	e9d4 0100 	ldrd	r0, r1, [r4]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16db4:	4b12      	ldr	r3, [pc, #72]	; (16e00 <watchdog_init_and_start+0x8c>)
   16db6:	62a5      	str	r5, [r4, #40]	; 0x28
   16db8:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return api->feed(dev, channel_id);
   16dbc:	6883      	ldr	r3, [r0, #8]
   16dbe:	68db      	ldr	r3, [r3, #12]
   16dc0:	4798      	blx	r3
	if (err) {
   16dc2:	4605      	mov	r5, r0
   16dc4:	b950      	cbnz	r0, 16ddc <watchdog_init_and_start+0x68>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16dc6:	f104 0108 	add.w	r1, r4, #8
   16dca:	f241 3288 	movw	r2, #5000	; 0x1388
	return watchdog_enable(&wdt_data);
}
   16dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16dd2:	480c      	ldr	r0, [pc, #48]	; (16e04 <watchdog_init_and_start+0x90>)
   16dd4:	f014 b820 	b.w	2ae18 <k_delayed_work_submit_to_queue>
		return -EINVAL;
   16dd8:	f06f 0515 	mvn.w	r5, #21
}
   16ddc:	4628      	mov	r0, r5
   16dde:	bd38      	pop	{r3, r4, r5, pc}
		return err;
   16de0:	f06f 0505 	mvn.w	r5, #5
   16de4:	e7fa      	b.n	16ddc <watchdog_init_and_start+0x68>
		return -EFAULT;
   16de6:	f06f 050d 	mvn.w	r5, #13
   16dea:	e7f7      	b.n	16ddc <watchdog_init_and_start+0x68>
   16dec:	200215f4 	.word	0x200215f4
   16df0:	00037045 	.word	0x00037045
   16df4:	200215f8 	.word	0x200215f8
   16df8:	000359d8 	.word	0x000359d8
   16dfc:	00016d1d 	.word	0x00016d1d
   16e00:	00016d49 	.word	0x00016d49
   16e04:	20027460 	.word	0x20027460

00016e08 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   16e08:	2803      	cmp	r0, #3
{
   16e0a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   16e0c:	d906      	bls.n	16e1c <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
   16e0e:	f01a f951 	bl	310b4 <__errno>
   16e12:	2309      	movs	r3, #9
   16e14:	6003      	str	r3, [r0, #0]
   16e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   16e1a:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
   16e1c:	4b03      	ldr	r3, [pc, #12]	; (16e2c <_check_fd+0x24>)
   16e1e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   16e22:	2b00      	cmp	r3, #0
   16e24:	d0f3      	beq.n	16e0e <_check_fd+0x6>
	return 0;
   16e26:	2000      	movs	r0, #0
   16e28:	e7f7      	b.n	16e1a <_check_fd+0x12>
   16e2a:	bf00      	nop
   16e2c:	2002162c 	.word	0x2002162c

00016e30 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   16e30:	b570      	push	{r4, r5, r6, lr}
   16e32:	4604      	mov	r4, r0
   16e34:	460d      	mov	r5, r1
   16e36:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   16e38:	f7ff ffe6 	bl	16e08 <_check_fd>
   16e3c:	2800      	cmp	r0, #0
   16e3e:	db09      	blt.n	16e54 <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   16e40:	4b07      	ldr	r3, [pc, #28]	; (16e60 <z_get_fd_obj+0x30>)
   16e42:	b14d      	cbz	r5, 16e58 <z_get_fd_obj+0x28>
   16e44:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16e48:	6852      	ldr	r2, [r2, #4]
   16e4a:	42aa      	cmp	r2, r5
   16e4c:	d004      	beq.n	16e58 <z_get_fd_obj+0x28>
		errno = err;
   16e4e:	f01a f931 	bl	310b4 <__errno>
   16e52:	6006      	str	r6, [r0, #0]
		return NULL;
   16e54:	2000      	movs	r0, #0
   16e56:	e001      	b.n	16e5c <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
   16e58:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
   16e5c:	bd70      	pop	{r4, r5, r6, pc}
   16e5e:	bf00      	nop
   16e60:	2002162c 	.word	0x2002162c

00016e64 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   16e64:	b538      	push	{r3, r4, r5, lr}
   16e66:	4604      	mov	r4, r0
   16e68:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   16e6a:	f7ff ffcd 	bl	16e08 <_check_fd>
   16e6e:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   16e70:	bfa9      	itett	ge
   16e72:	4b05      	ldrge	r3, [pc, #20]	; (16e88 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   16e74:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   16e76:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
   16e7a:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
   16e7c:	bfa4      	itt	ge
   16e7e:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
   16e82:	602a      	strge	r2, [r5, #0]
}
   16e84:	bd38      	pop	{r3, r4, r5, pc}
   16e86:	bf00      	nop
   16e88:	2002162c 	.word	0x2002162c

00016e8c <z_reserve_fd>:

int z_reserve_fd(void)
{
   16e8c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   16e8e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   16e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16e94:	480c      	ldr	r0, [pc, #48]	; (16ec8 <z_reserve_fd+0x3c>)
   16e96:	f012 f80b 	bl	28eb0 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
   16e9a:	4b0c      	ldr	r3, [pc, #48]	; (16ecc <z_reserve_fd+0x40>)
   16e9c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   16ea0:	b16a      	cbz	r2, 16ebe <z_reserve_fd+0x32>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   16ea2:	3401      	adds	r4, #1
   16ea4:	2c04      	cmp	r4, #4
   16ea6:	d1f9      	bne.n	16e9c <z_reserve_fd+0x10>
	errno = ENFILE;
   16ea8:	f01a f904 	bl	310b4 <__errno>
   16eac:	2317      	movs	r3, #23
	return -1;
   16eae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   16eb2:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   16eb4:	4804      	ldr	r0, [pc, #16]	; (16ec8 <z_reserve_fd+0x3c>)
   16eb6:	f012 f8d9 	bl	2906c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   16eba:	4620      	mov	r0, r4
   16ebc:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
   16ebe:	2201      	movs	r2, #1
   16ec0:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   16ec4:	e7f6      	b.n	16eb4 <z_reserve_fd+0x28>
   16ec6:	bf00      	nop
   16ec8:	2002069c 	.word	0x2002069c
   16ecc:	2002162c 	.word	0x2002162c

00016ed0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
   16ed0:	4b03      	ldr	r3, [pc, #12]	; (16ee0 <z_finalize_fd+0x10>)
   16ed2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
   16ed6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16eda:	605a      	str	r2, [r3, #4]
}
   16edc:	4770      	bx	lr
   16ede:	bf00      	nop
   16ee0:	2002162c 	.word	0x2002162c

00016ee4 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
   16ee4:	2200      	movs	r2, #0
   16ee6:	4b02      	ldr	r3, [pc, #8]	; (16ef0 <z_free_fd+0xc>)
   16ee8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
   16eec:	4770      	bx	lr
   16eee:	bf00      	nop
   16ef0:	2002162c 	.word	0x2002162c

00016ef4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   16ef4:	680b      	ldr	r3, [r1, #0]
   16ef6:	3301      	adds	r3, #1
   16ef8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   16efa:	4b01      	ldr	r3, [pc, #4]	; (16f00 <char_out+0xc>)
   16efc:	681b      	ldr	r3, [r3, #0]
   16efe:	4718      	bx	r3
   16f00:	200200a4 	.word	0x200200a4

00016f04 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   16f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f08:	b085      	sub	sp, #20
   16f0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   16f0c:	469b      	mov	fp, r3
   16f0e:	2c01      	cmp	r4, #1
   16f10:	bfb8      	it	lt
   16f12:	2401      	movlt	r4, #1
   16f14:	2b01      	cmp	r3, #1
   16f16:	bf0c      	ite	eq
   16f18:	2330      	moveq	r3, #48	; 0x30
   16f1a:	2320      	movne	r3, #32
   16f1c:	4616      	mov	r6, r2
   16f1e:	4682      	mov	sl, r0
   16f20:	4688      	mov	r8, r1
   16f22:	2501      	movs	r5, #1
   16f24:	270a      	movs	r7, #10
   16f26:	2200      	movs	r2, #0
   16f28:	f8df 906c 	ldr.w	r9, [pc, #108]	; 16f98 <_printk_dec_ulong+0x94>
   16f2c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   16f2e:	fbb6 f3f9 	udiv	r3, r6, r9
   16f32:	9301      	str	r3, [sp, #4]
   16f34:	b90a      	cbnz	r2, 16f3a <_printk_dec_ulong+0x36>
   16f36:	45b1      	cmp	r9, r6
   16f38:	d81c      	bhi.n	16f74 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   16f3a:	9b01      	ldr	r3, [sp, #4]
   16f3c:	4641      	mov	r1, r8
   16f3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16f42:	47d0      	blx	sl
			found_largest_digit = 1;
   16f44:	2201      	movs	r2, #1
			digits++;
   16f46:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   16f48:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   16f4a:	3f01      	subs	r7, #1
		remainder %= pos;
   16f4c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   16f50:	230a      	movs	r3, #10
	while (pos >= 10) {
   16f52:	2f01      	cmp	r7, #1
		pos /= 10;
   16f54:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   16f58:	d1e9      	bne.n	16f2e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   16f5a:	4641      	mov	r1, r8
   16f5c:	f106 0030 	add.w	r0, r6, #48	; 0x30
   16f60:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   16f62:	f1bb 0f03 	cmp.w	fp, #3
   16f66:	d102      	bne.n	16f6e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   16f68:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   16f6a:	2c00      	cmp	r4, #0
   16f6c:	dc0e      	bgt.n	16f8c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   16f6e:	b005      	add	sp, #20
   16f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   16f74:	42bc      	cmp	r4, r7
   16f76:	dbe7      	blt.n	16f48 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   16f78:	f1bb 0f02 	cmp.w	fp, #2
   16f7c:	d8e4      	bhi.n	16f48 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   16f7e:	4641      	mov	r1, r8
   16f80:	9802      	ldr	r0, [sp, #8]
   16f82:	9203      	str	r2, [sp, #12]
			digits++;
   16f84:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   16f86:	47d0      	blx	sl
			digits++;
   16f88:	9a03      	ldr	r2, [sp, #12]
   16f8a:	e7dd      	b.n	16f48 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   16f8c:	4641      	mov	r1, r8
   16f8e:	2020      	movs	r0, #32
   16f90:	47d0      	blx	sl
   16f92:	3c01      	subs	r4, #1
   16f94:	e7e9      	b.n	16f6a <_printk_dec_ulong+0x66>
   16f96:	bf00      	nop
   16f98:	3b9aca00 	.word	0x3b9aca00

00016f9c <vprintk>:
	struct out_context ctx = { 0 };
   16f9c:	2300      	movs	r3, #0
{
   16f9e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   16fa0:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   16fa2:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   16fa4:	4803      	ldr	r0, [pc, #12]	; (16fb4 <vprintk+0x18>)
   16fa6:	460b      	mov	r3, r1
   16fa8:	a901      	add	r1, sp, #4
   16faa:	f017 ffe2 	bl	2ef72 <z_vprintk>
}
   16fae:	b003      	add	sp, #12
   16fb0:	f85d fb04 	ldr.w	pc, [sp], #4
   16fb4:	00016ef5 	.word	0x00016ef5

00016fb8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   16fb8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   16fba:	2500      	movs	r5, #0
{
   16fbc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   16fbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   16fc2:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   16fc4:	a901      	add	r1, sp, #4
   16fc6:	4805      	ldr	r0, [pc, #20]	; (16fdc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   16fc8:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   16fca:	f017 ffd2 	bl	2ef72 <z_vprintk>

	if (ctx.count < ctx.max) {
   16fce:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   16fd2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   16fd4:	bfb8      	it	lt
   16fd6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   16fd8:	b005      	add	sp, #20
   16fda:	bd30      	pop	{r4, r5, pc}
   16fdc:	0002ef4d 	.word	0x0002ef4d

00016fe0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

s64_t timeutil_timegm64(const struct tm *tm)
{
   16fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t y = 1900 + (s64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   16fe4:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   16fe6:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   16fe8:	f103 0801 	add.w	r8, r3, #1
	unsigned int d = tm->tm_mday - 1;
   16fec:	1e63      	subs	r3, r4, #1
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16fee:	f240 746c 	movw	r4, #1900	; 0x76c
   16ff2:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   16ff4:	461e      	mov	r6, r3
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16ff6:	6943      	ldr	r3, [r0, #20]
{
   16ff8:	4681      	mov	r9, r0
	s64_t y = 1900 + (s64_t)tm->tm_year;
   16ffa:	18e1      	adds	r1, r4, r3
   16ffc:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
	y -= m <= 2;
   17000:	f1b8 0f02 	cmp.w	r8, #2
   17004:	bf8c      	ite	hi
   17006:	2300      	movhi	r3, #0
   17008:	2301      	movls	r3, #1
   1700a:	1acc      	subs	r4, r1, r3
   1700c:	f162 0500 	sbc.w	r5, r2, #0
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   17010:	2c00      	cmp	r4, #0
   17012:	f175 0300 	sbcs.w	r3, r5, #0
   17016:	da5c      	bge.n	170d2 <timeutil_timegm64+0xf2>
   17018:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1701c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   17020:	2300      	movs	r3, #0
   17022:	1820      	adds	r0, r4, r0
   17024:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   17028:	f7f6 fb52 	bl	d6d0 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   1702c:	4b2c      	ldr	r3, [pc, #176]	; (170e0 <timeutil_timegm64+0x100>)
	s64_t ndays = time_days_from_civil(y, m, d);
	s64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1702e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   17032:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   17036:	e9d9 5300 	ldrd	r5, r3, [r9]
   1703a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1703c:	f1b8 0f02 	cmp.w	r8, #2
   17040:	bf8c      	ite	hi
   17042:	f06f 0e02 	mvnhi.w	lr, #2
   17046:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1704a:	ea4f 7be3 	mov.w	fp, r3, asr #31
   1704e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17052:	44f0      	add	r8, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   17054:	fbcc ab03 	smlal	sl, fp, ip, r3
   17058:	fbaa 230c 	umull	r2, r3, sl, ip
   1705c:	fb0c 330b 	mla	r3, ip, fp, r3
   17060:	eb12 0905 	adds.w	r9, r2, r5
   17064:	eb43 7ae5 	adc.w	sl, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17068:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1706c:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17070:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   17074:	fb05 c504 	mla	r5, r5, r4, ip
   17078:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1707c:	fb0e fe08 	mul.w	lr, lr, r8
   17080:	f04f 0805 	mov.w	r8, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17084:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   17088:	f10e 0e02 	add.w	lr, lr, #2
   1708c:	fbbe fef8 	udiv	lr, lr, r8
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17090:	4435      	add	r5, r6
	return era * 146097 + (time_t)doe - 719468;
   17092:	f8df c058 	ldr.w	ip, [pc, #88]	; 170ec <timeutil_timegm64+0x10c>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   17096:	1b2c      	subs	r4, r5, r4
   17098:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1709a:	fba0 450c 	umull	r4, r5, r0, ip
   1709e:	fb0c 5501 	mla	r5, ip, r1, r5
   170a2:	4910      	ldr	r1, [pc, #64]	; (170e4 <timeutil_timegm64+0x104>)
   170a4:	1863      	adds	r3, r4, r1
   170a6:	9300      	str	r3, [sp, #0]
   170a8:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
	time += 86400LL * ndays;
   170ac:	490e      	ldr	r1, [pc, #56]	; (170e8 <timeutil_timegm64+0x108>)
	return era * 146097 + (time_t)doe - 719468;
   170ae:	9301      	str	r3, [sp, #4]
   170b0:	e9dd 6700 	ldrd	r6, r7, [sp]
   170b4:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   170b8:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   170bc:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   170c0:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   170c4:	eb14 0009 	adds.w	r0, r4, r9
   170c8:	eb45 010a 	adc.w	r1, r5, sl
   170cc:	b003      	add	sp, #12
   170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   170d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   170d6:	2300      	movs	r3, #0
   170d8:	4620      	mov	r0, r4
   170da:	4629      	mov	r1, r5
   170dc:	e7a4      	b.n	17028 <timeutil_timegm64+0x48>
   170de:	bf00      	nop
   170e0:	fffffe70 	.word	0xfffffe70
   170e4:	fff50594 	.word	0xfff50594
   170e8:	00015180 	.word	0x00015180
   170ec:	00023ab1 	.word	0x00023ab1

000170f0 <str_encode>:
	return append_bytes("]", 1, data);
}

static int str_encode(const char **str, json_append_bytes_t append_bytes,
		      void *data)
{
   170f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   170f2:	460c      	mov	r4, r1
   170f4:	4606      	mov	r6, r0
	int ret;

	ret = append_bytes("\"", 1, data);
   170f6:	2101      	movs	r1, #1
   170f8:	4811      	ldr	r0, [pc, #68]	; (17140 <str_encode+0x50>)
{
   170fa:	4615      	mov	r5, r2
	ret = append_bytes("\"", 1, data);
   170fc:	47a0      	blx	r4
	if (ret < 0) {
   170fe:	2800      	cmp	r0, #0
   17100:	db17      	blt.n	17132 <str_encode+0x42>
			char bytes[2] = { '\\', escaped };
   17102:	275c      	movs	r7, #92	; 0x5c
   17104:	6836      	ldr	r6, [r6, #0]
   17106:	4633      	mov	r3, r6
	for (cur = str; ret == 0 && *cur; cur++) {
   17108:	f816 0b01 	ldrb.w	r0, [r6], #1
   1710c:	b920      	cbnz	r0, 17118 <str_encode+0x28>
		return ret;
	}

	ret = json_escape_internal(*str, append_bytes, data);
	if (!ret) {
		return append_bytes("\"", 1, data);
   1710e:	462a      	mov	r2, r5
   17110:	2101      	movs	r1, #1
   17112:	480b      	ldr	r0, [pc, #44]	; (17140 <str_encode+0x50>)
   17114:	47a0      	blx	r4
   17116:	e00c      	b.n	17132 <str_encode+0x42>
		char escaped = escape_as(*cur);
   17118:	f018 fb81 	bl	2f81e <escape_as>
		if (escaped) {
   1711c:	b158      	cbz	r0, 17136 <str_encode+0x46>
			ret = append_bytes(bytes, 2, data);
   1711e:	462a      	mov	r2, r5
   17120:	2102      	movs	r1, #2
			char bytes[2] = { '\\', escaped };
   17122:	f88d 0005 	strb.w	r0, [sp, #5]
   17126:	f88d 7004 	strb.w	r7, [sp, #4]
			ret = append_bytes(bytes, 2, data);
   1712a:	a801      	add	r0, sp, #4
			ret = append_bytes(cur, 1, data);
   1712c:	47a0      	blx	r4
	for (cur = str; ret == 0 && *cur; cur++) {
   1712e:	2800      	cmp	r0, #0
   17130:	d0e9      	beq.n	17106 <str_encode+0x16>
	}

	return ret;
}
   17132:	b003      	add	sp, #12
   17134:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = append_bytes(cur, 1, data);
   17136:	462a      	mov	r2, r5
   17138:	2101      	movs	r1, #1
   1713a:	4618      	mov	r0, r3
   1713c:	e7f6      	b.n	1712c <str_encode+0x3c>
   1713e:	bf00      	nop
   17140:	00036fa0 	.word	0x00036fa0

00017144 <json_obj_encode>:
}

int json_obj_encode(const struct json_obj_descr *descr, size_t descr_len,
		    const void *val, json_append_bytes_t append_bytes,
		    void *data)
{
   17144:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17148:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1714a:	4606      	mov	r6, r0
   1714c:	4688      	mov	r8, r1
   1714e:	4691      	mov	r9, r2
	size_t i;
	int ret;

	ret = append_bytes("{", 1, data);
   17150:	2101      	movs	r1, #1
   17152:	462a      	mov	r2, r5
   17154:	481b      	ldr	r0, [pc, #108]	; (171c4 <json_obj_encode+0x80>)
{
   17156:	461c      	mov	r4, r3
	ret = append_bytes("{", 1, data);
   17158:	4798      	blx	r3
	if (ret < 0) {
   1715a:	2800      	cmp	r0, #0
   1715c:	db2f      	blt.n	171be <json_obj_encode+0x7a>
		return ret;
	}

	for (i = 0; i < descr_len; i++) {
   1715e:	2700      	movs	r7, #0
				 append_bytes, data);
		if (ret < 0) {
			return ret;
		}

		ret = append_bytes(":", 1, data);
   17160:	f8df a068 	ldr.w	sl, [pc, #104]	; 171cc <json_obj_encode+0x88>
		if (ret < 0) {
			return ret;
		}

		if (i < descr_len - 1) {
			ret = append_bytes(",", 1, data);
   17164:	f8df b068 	ldr.w	fp, [pc, #104]	; 171d0 <json_obj_encode+0x8c>
	for (i = 0; i < descr_len; i++) {
   17168:	45b8      	cmp	r8, r7
		ret = str_encode((const char **)&descr[i].field_name,
   1716a:	462a      	mov	r2, r5
	for (i = 0; i < descr_len; i++) {
   1716c:	d106      	bne.n	1717c <json_obj_encode+0x38>
				return ret;
			}
		}
	}

	return append_bytes("}", 1, data);
   1716e:	2101      	movs	r1, #1
   17170:	4623      	mov	r3, r4
   17172:	4815      	ldr	r0, [pc, #84]	; (171c8 <json_obj_encode+0x84>)
}
   17174:	b001      	add	sp, #4
   17176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("}", 1, data);
   1717a:	4718      	bx	r3
		ret = str_encode((const char **)&descr[i].field_name,
   1717c:	4621      	mov	r1, r4
   1717e:	4630      	mov	r0, r6
   17180:	f7ff ffb6 	bl	170f0 <str_encode>
		if (ret < 0) {
   17184:	2800      	cmp	r0, #0
   17186:	db1a      	blt.n	171be <json_obj_encode+0x7a>
		ret = append_bytes(":", 1, data);
   17188:	462a      	mov	r2, r5
   1718a:	2101      	movs	r1, #1
   1718c:	4650      	mov	r0, sl
   1718e:	47a0      	blx	r4
		if (ret < 0) {
   17190:	2800      	cmp	r0, #0
   17192:	db14      	blt.n	171be <json_obj_encode+0x7a>
		ret = encode(&descr[i], val, append_bytes, data);
   17194:	462b      	mov	r3, r5
   17196:	4622      	mov	r2, r4
   17198:	4649      	mov	r1, r9
   1719a:	4630      	mov	r0, r6
   1719c:	f000 f81a 	bl	171d4 <encode>
		if (ret < 0) {
   171a0:	2800      	cmp	r0, #0
   171a2:	db0c      	blt.n	171be <json_obj_encode+0x7a>
		if (i < descr_len - 1) {
   171a4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   171a8:	429f      	cmp	r7, r3
   171aa:	d302      	bcc.n	171b2 <json_obj_encode+0x6e>
	for (i = 0; i < descr_len; i++) {
   171ac:	3701      	adds	r7, #1
   171ae:	3610      	adds	r6, #16
   171b0:	e7da      	b.n	17168 <json_obj_encode+0x24>
			ret = append_bytes(",", 1, data);
   171b2:	462a      	mov	r2, r5
   171b4:	2101      	movs	r1, #1
   171b6:	4658      	mov	r0, fp
   171b8:	47a0      	blx	r4
			if (ret < 0) {
   171ba:	2800      	cmp	r0, #0
   171bc:	daf6      	bge.n	171ac <json_obj_encode+0x68>
}
   171be:	b001      	add	sp, #4
   171c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c4:	0003704b 	.word	0x0003704b
   171c8:	0003704f 	.word	0x0003704f
   171cc:	0003803c 	.word	0x0003803c
   171d0:	0003704d 	.word	0x0003704d

000171d4 <encode>:
{
   171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d8:	461d      	mov	r5, r3
	switch (descr->type) {
   171da:	7943      	ldrb	r3, [r0, #5]
{
   171dc:	4614      	mov	r4, r2
	switch (descr->type) {
   171de:	085b      	lsrs	r3, r3, #1
	void *ptr = (char *)val + descr->offset;
   171e0:	88c2      	ldrh	r2, [r0, #6]
	switch (descr->type) {
   171e2:	2b5b      	cmp	r3, #91	; 0x5b
{
   171e4:	b087      	sub	sp, #28
	void *ptr = (char *)val + descr->offset;
   171e6:	eb01 0602 	add.w	r6, r1, r2
	switch (descr->type) {
   171ea:	d01f      	beq.n	1722c <encode+0x58>
   171ec:	d806      	bhi.n	171fc <encode+0x28>
   171ee:	2b22      	cmp	r3, #34	; 0x22
   171f0:	d014      	beq.n	1721c <encode+0x48>
   171f2:	2b30      	cmp	r3, #48	; 0x30
   171f4:	d051      	beq.n	1729a <encode+0xc6>
		return -EINVAL;
   171f6:	f06f 0015 	mvn.w	r0, #21
   171fa:	e014      	b.n	17226 <encode+0x52>
	switch (descr->type) {
   171fc:	2b74      	cmp	r3, #116	; 0x74
   171fe:	d003      	beq.n	17208 <encode+0x34>
   17200:	2b7b      	cmp	r3, #123	; 0x7b
   17202:	d042      	beq.n	1728a <encode+0xb6>
   17204:	2b66      	cmp	r3, #102	; 0x66
   17206:	d1f6      	bne.n	171f6 <encode+0x22>
	if (*value) {
   17208:	5c8b      	ldrb	r3, [r1, r2]
		return append_bytes("true", 4, data);
   1720a:	462a      	mov	r2, r5
	if (*value) {
   1720c:	b11b      	cbz	r3, 17216 <encode+0x42>
		return append_bytes("true", 4, data);
   1720e:	2104      	movs	r1, #4
   17210:	482b      	ldr	r0, [pc, #172]	; (172c0 <encode+0xec>)
	return append_bytes(buf, (size_t)ret, data);
   17212:	47a0      	blx	r4
   17214:	e007      	b.n	17226 <encode+0x52>
	return append_bytes("false", 5, data);
   17216:	2105      	movs	r1, #5
   17218:	482a      	ldr	r0, [pc, #168]	; (172c4 <encode+0xf0>)
   1721a:	e7fa      	b.n	17212 <encode+0x3e>
		return str_encode(ptr, append_bytes, data);
   1721c:	462a      	mov	r2, r5
   1721e:	4621      	mov	r1, r4
   17220:	4630      	mov	r0, r6
   17222:	f7ff ff65 	bl	170f0 <str_encode>
}
   17226:	b007      	add	sp, #28
   17228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return arr_encode(descr->array.element_descr, ptr,
   1722c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   17230:	4640      	mov	r0, r8
   17232:	f018 fab6 	bl	2f7a2 <get_elem_size>
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   17236:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1723a:	4682      	mov	sl, r0
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   1723c:	f851 9003 	ldr.w	r9, [r1, r3]
	ret = append_bytes("[", 1, data);
   17240:	462a      	mov	r2, r5
   17242:	2101      	movs	r1, #1
   17244:	4820      	ldr	r0, [pc, #128]	; (172c8 <encode+0xf4>)
   17246:	47a0      	blx	r4
	if (ret < 0) {
   17248:	2800      	cmp	r0, #0
   1724a:	dbec      	blt.n	17226 <encode+0x52>
	for (i = 0; i < n_elem; i++) {
   1724c:	2700      	movs	r7, #0
		if (i < n_elem - 1) {
   1724e:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
	for (i = 0; i < n_elem; i++) {
   17252:	45b9      	cmp	r9, r7
   17254:	d103      	bne.n	1725e <encode+0x8a>
	return append_bytes("]", 1, data);
   17256:	462a      	mov	r2, r5
   17258:	2101      	movs	r1, #1
   1725a:	481c      	ldr	r0, [pc, #112]	; (172cc <encode+0xf8>)
   1725c:	e7d9      	b.n	17212 <encode+0x3e>
		ret = encode(elem_descr, (char *)field - elem_descr->offset,
   1725e:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   17262:	462b      	mov	r3, r5
   17264:	4622      	mov	r2, r4
   17266:	1a71      	subs	r1, r6, r1
   17268:	4640      	mov	r0, r8
   1726a:	f7ff ffb3 	bl	171d4 <encode>
		if (ret < 0) {
   1726e:	2800      	cmp	r0, #0
   17270:	dbd9      	blt.n	17226 <encode+0x52>
		if (i < n_elem - 1) {
   17272:	45bb      	cmp	fp, r7
   17274:	d802      	bhi.n	1727c <encode+0xa8>
		field = (char *)field + elem_size;
   17276:	4456      	add	r6, sl
	for (i = 0; i < n_elem; i++) {
   17278:	3701      	adds	r7, #1
   1727a:	e7ea      	b.n	17252 <encode+0x7e>
			ret = append_bytes(",", 1, data);
   1727c:	462a      	mov	r2, r5
   1727e:	2101      	movs	r1, #1
   17280:	4813      	ldr	r0, [pc, #76]	; (172d0 <encode+0xfc>)
   17282:	47a0      	blx	r4
			if (ret < 0) {
   17284:	2800      	cmp	r0, #0
   17286:	daf6      	bge.n	17276 <encode+0xa2>
   17288:	e7cd      	b.n	17226 <encode+0x52>
		return json_obj_encode(descr->object.sub_descr,
   1728a:	9500      	str	r5, [sp, #0]
   1728c:	4623      	mov	r3, r4
   1728e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   17292:	4632      	mov	r2, r6
   17294:	f7ff ff56 	bl	17144 <json_obj_encode>
   17298:	e7c5      	b.n	17226 <encode+0x52>
	ret = snprintk(buf, sizeof(buf), "%d", *num);
   1729a:	588b      	ldr	r3, [r1, r2]
   1729c:	210c      	movs	r1, #12
   1729e:	4a0d      	ldr	r2, [pc, #52]	; (172d4 <encode+0x100>)
   172a0:	eb0d 0001 	add.w	r0, sp, r1
   172a4:	f017 ffe2 	bl	2f26c <snprintk>
	if (ret < 0) {
   172a8:	2800      	cmp	r0, #0
   172aa:	dbbc      	blt.n	17226 <encode+0x52>
	if (ret >= (int)sizeof(buf)) {
   172ac:	280b      	cmp	r0, #11
   172ae:	dc03      	bgt.n	172b8 <encode+0xe4>
	return append_bytes(buf, (size_t)ret, data);
   172b0:	4601      	mov	r1, r0
   172b2:	462a      	mov	r2, r5
   172b4:	a803      	add	r0, sp, #12
   172b6:	e7ac      	b.n	17212 <encode+0x3e>
		return -ENOMEM;
   172b8:	f06f 000b 	mvn.w	r0, #11
		return num_encode(ptr, append_bytes, data);
   172bc:	e7b3      	b.n	17226 <encode+0x52>
   172be:	bf00      	nop
   172c0:	00036f8c 	.word	0x00036f8c
   172c4:	00036f86 	.word	0x00036f86
   172c8:	00037049 	.word	0x00037049
   172cc:	00036f92 	.word	0x00036f92
   172d0:	0003704d 	.word	0x0003704d
   172d4:	000382d7 	.word	0x000382d7

000172d8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   172d8:	f04f 0220 	mov.w	r2, #32
   172dc:	f3ef 8311 	mrs	r3, BASEPRI
   172e0:	f382 8811 	msr	BASEPRI, r2
   172e4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   172e8:	2101      	movs	r1, #1
   172ea:	4a04      	ldr	r2, [pc, #16]	; (172fc <nordicsemi_nrf91_init+0x24>)
   172ec:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   172f0:	f383 8811 	msr	BASEPRI, r3
   172f4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   172f8:	2000      	movs	r0, #0
   172fa:	4770      	bx	lr
   172fc:	40039000 	.word	0x40039000

00017300 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   17300:	b120      	cbz	r0, 1730c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   17302:	4b03      	ldr	r3, [pc, #12]	; (17310 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   17304:	0180      	lsls	r0, r0, #6
   17306:	f043 0301 	orr.w	r3, r3, #1
   1730a:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1730c:	4770      	bx	lr
   1730e:	bf00      	nop
   17310:	000358d0 	.word	0x000358d0

00017314 <net_context_get_state>:
 *
 * @return Network state.
 */
static inline
enum net_context_state net_context_get_state(struct net_context *context)
{
   17314:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   17316:	4604      	mov	r4, r0
   17318:	b970      	cbnz	r0, 17338 <net_context_get_state+0x24>
   1731a:	490a      	ldr	r1, [pc, #40]	; (17344 <net_context_get_state+0x30>)
   1731c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   17320:	4a09      	ldr	r2, [pc, #36]	; (17348 <net_context_get_state+0x34>)
   17322:	480a      	ldr	r0, [pc, #40]	; (1734c <net_context_get_state+0x38>)
   17324:	f017 ff95 	bl	2f252 <printk>
   17328:	4809      	ldr	r0, [pc, #36]	; (17350 <net_context_get_state+0x3c>)
   1732a:	f017 ff92 	bl	2f252 <printk>
   1732e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   17332:	4805      	ldr	r0, [pc, #20]	; (17348 <net_context_get_state+0x34>)
   17334:	f018 fa8e 	bl	2f854 <assert_post_action>

	return (enum net_context_state)
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   17338:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
		NET_CONTEXT_STATE_MASK);
}
   1733c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   17340:	bd10      	pop	{r4, pc}
   17342:	bf00      	nop
   17344:	0003707e 	.word	0x0003707e
   17348:	00037051 	.word	0x00037051
   1734c:	00036be5 	.word	0x00036be5
   17350:	00037086 	.word	0x00037086

00017354 <net_context_get_type>:
 *
 * @return Network context type.
 */
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
   17354:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   17356:	4604      	mov	r4, r0
   17358:	b970      	cbnz	r0, 17378 <net_context_get_type+0x24>
   1735a:	490a      	ldr	r1, [pc, #40]	; (17384 <net_context_get_type+0x30>)
   1735c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   17360:	4a09      	ldr	r2, [pc, #36]	; (17388 <net_context_get_type+0x34>)
   17362:	480a      	ldr	r0, [pc, #40]	; (1738c <net_context_get_type+0x38>)
   17364:	f017 ff75 	bl	2f252 <printk>
   17368:	4809      	ldr	r0, [pc, #36]	; (17390 <net_context_get_type+0x3c>)
   1736a:	f017 ff72 	bl	2f252 <printk>
   1736e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   17372:	4805      	ldr	r0, [pc, #20]	; (17388 <net_context_get_type+0x34>)
   17374:	f018 fa6e 	bl	2f854 <assert_post_action>

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   17378:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1737c:	f3c0 1081 	ubfx	r0, r0, #6, #2
   17380:	bd10      	pop	{r4, pc}
   17382:	bf00      	nop
   17384:	0003707e 	.word	0x0003707e
   17388:	00037051 	.word	0x00037051
   1738c:	00036be5 	.word	0x00036be5
   17390:	00037086 	.word	0x00037086

00017394 <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
   17394:	b538      	push	{r3, r4, r5, lr}
   17396:	9d04      	ldr	r5, [sp, #16]
   17398:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
   1739a:	461a      	mov	r2, r3
   1739c:	b96b      	cbnz	r3, 173ba <zsock_accepted_cb+0x26>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
   1739e:	4907      	ldr	r1, [pc, #28]	; (173bc <zsock_accepted_cb+0x28>)
   173a0:	f003 fb56 	bl	1aa50 <net_context_recv>
	z_impl_k_queue_init(queue);
   173a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   173a8:	f01d f995 	bl	346d6 <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
   173ac:	4621      	mov	r1, r4
   173ae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
	}
}
   173b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
   173b6:	f01d b99b 	b.w	346f0 <k_queue_append>
}
   173ba:	bd38      	pop	{r3, r4, r5, pc}
   173bc:	0002f931 	.word	0x0002f931

000173c0 <zsock_socket_internal>:
{
   173c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173c2:	4607      	mov	r7, r0
   173c4:	460e      	mov	r6, r1
   173c6:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
   173c8:	f7ff fd60 	bl	16e8c <z_reserve_fd>
	if (fd < 0) {
   173cc:	1e05      	subs	r5, r0, #0
   173ce:	db17      	blt.n	17400 <zsock_socket_internal+0x40>
	if (proto == 0) {
   173d0:	b93c      	cbnz	r4, 173e2 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
   173d2:	1e7b      	subs	r3, r7, #1
   173d4:	2b01      	cmp	r3, #1
   173d6:	d804      	bhi.n	173e2 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
   173d8:	2e02      	cmp	r6, #2
   173da:	d014      	beq.n	17406 <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
   173dc:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
   173de:	bf08      	it	eq
   173e0:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
   173e2:	b2f1      	uxtb	r1, r6
   173e4:	ab01      	add	r3, sp, #4
   173e6:	b2a2      	uxth	r2, r4
   173e8:	b2b8      	uxth	r0, r7
   173ea:	f002 ff03 	bl	1a1f4 <net_context_get>
	if (res < 0) {
   173ee:	1e06      	subs	r6, r0, #0
   173f0:	da0b      	bge.n	1740a <zsock_socket_internal+0x4a>
		z_free_fd(fd);
   173f2:	4628      	mov	r0, r5
   173f4:	f7ff fd76 	bl	16ee4 <z_free_fd>
		errno = -res;
   173f8:	f019 fe5c 	bl	310b4 <__errno>
   173fc:	4276      	negs	r6, r6
   173fe:	6006      	str	r6, [r0, #0]
		return -1;
   17400:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17404:	e012      	b.n	1742c <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
   17406:	2411      	movs	r4, #17
   17408:	e7eb      	b.n	173e2 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
   1740a:	2300      	movs	r3, #0
   1740c:	9801      	ldr	r0, [sp, #4]
   1740e:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
   17410:	6583      	str	r3, [r0, #88]	; 0x58
   17412:	305c      	adds	r0, #92	; 0x5c
   17414:	f01d f95f 	bl	346d6 <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
   17418:	2c06      	cmp	r4, #6
   1741a:	d102      	bne.n	17422 <zsock_socket_internal+0x62>
		net_context_ref(ctx);
   1741c:	9801      	ldr	r0, [sp, #4]
   1741e:	f01a f8a0 	bl	31562 <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   17422:	4a04      	ldr	r2, [pc, #16]	; (17434 <zsock_socket_internal+0x74>)
   17424:	9901      	ldr	r1, [sp, #4]
   17426:	4628      	mov	r0, r5
   17428:	f7ff fd52 	bl	16ed0 <z_finalize_fd>
}
   1742c:	4628      	mov	r0, r5
   1742e:	b003      	add	sp, #12
   17430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17432:	bf00      	nop
   17434:	000359e8 	.word	0x000359e8

00017438 <z_impl_zsock_socket>:
{
   17438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1743c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 174dc <z_impl_zsock_socket+0xa4>
{
   17440:	4605      	mov	r5, r0
   17442:	460f      	mov	r7, r1
   17444:	4690      	mov	r8, r2
   17446:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   17448:	4c1d      	ldr	r4, [pc, #116]	; (174c0 <z_impl_zsock_socket+0x88>)
   1744a:	4e1e      	ldr	r6, [pc, #120]	; (174c4 <z_impl_zsock_socket+0x8c>)
   1744c:	454c      	cmp	r4, r9
   1744e:	d90c      	bls.n	1746a <z_impl_zsock_socket+0x32>
   17450:	491d      	ldr	r1, [pc, #116]	; (174c8 <z_impl_zsock_socket+0x90>)
   17452:	2399      	movs	r3, #153	; 0x99
   17454:	4632      	mov	r2, r6
   17456:	481d      	ldr	r0, [pc, #116]	; (174cc <z_impl_zsock_socket+0x94>)
   17458:	f017 fefb 	bl	2f252 <printk>
   1745c:	481c      	ldr	r0, [pc, #112]	; (174d0 <z_impl_zsock_socket+0x98>)
   1745e:	f017 fef8 	bl	2f252 <printk>
   17462:	2199      	movs	r1, #153	; 0x99
   17464:	4630      	mov	r0, r6
   17466:	f018 f9f5 	bl	2f854 <assert_post_action>
   1746a:	4554      	cmp	r4, sl
   1746c:	d306      	bcc.n	1747c <z_impl_zsock_socket+0x44>
		return zsock_socket_internal(family, type, proto);
   1746e:	4642      	mov	r2, r8
   17470:	4639      	mov	r1, r7
   17472:	4628      	mov	r0, r5
}
   17474:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return zsock_socket_internal(family, type, proto);
   17478:	f7ff bfa2 	b.w	173c0 <zsock_socket_internal>
		if (sock_family->family != family &&
   1747c:	6823      	ldr	r3, [r4, #0]
   1747e:	42ab      	cmp	r3, r5
   17480:	d000      	beq.n	17484 <z_impl_zsock_socket+0x4c>
   17482:	b9db      	cbnz	r3, 174bc <z_impl_zsock_socket+0x84>
		NET_ASSERT(sock_family->is_supported);
   17484:	6863      	ldr	r3, [r4, #4]
   17486:	b963      	cbnz	r3, 174a2 <z_impl_zsock_socket+0x6a>
   17488:	4912      	ldr	r1, [pc, #72]	; (174d4 <z_impl_zsock_socket+0x9c>)
   1748a:	239f      	movs	r3, #159	; 0x9f
   1748c:	4632      	mov	r2, r6
   1748e:	480f      	ldr	r0, [pc, #60]	; (174cc <z_impl_zsock_socket+0x94>)
   17490:	f017 fedf 	bl	2f252 <printk>
   17494:	4810      	ldr	r0, [pc, #64]	; (174d8 <z_impl_zsock_socket+0xa0>)
   17496:	f017 fedc 	bl	2f252 <printk>
   1749a:	219f      	movs	r1, #159	; 0x9f
   1749c:	4630      	mov	r0, r6
   1749e:	f018 f9d9 	bl	2f854 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   174a2:	6863      	ldr	r3, [r4, #4]
   174a4:	4642      	mov	r2, r8
   174a6:	4639      	mov	r1, r7
   174a8:	4628      	mov	r0, r5
   174aa:	4798      	blx	r3
   174ac:	b130      	cbz	r0, 174bc <z_impl_zsock_socket+0x84>
		return sock_family->handler(family, type, proto);
   174ae:	68a3      	ldr	r3, [r4, #8]
   174b0:	4642      	mov	r2, r8
   174b2:	4639      	mov	r1, r7
   174b4:	4628      	mov	r0, r5
}
   174b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   174ba:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   174bc:	340c      	adds	r4, #12
   174be:	e7c5      	b.n	1744c <z_impl_zsock_socket+0x14>
   174c0:	000357e0 	.word	0x000357e0
   174c4:	00037089 	.word	0x00037089
   174c8:	000370d7 	.word	0x000370d7
   174cc:	00036be5 	.word	0x00036be5
   174d0:	00037104 	.word	0x00037104
   174d4:	000370bd 	.word	0x000370bd
   174d8:	00037086 	.word	0x00037086
   174dc:	000357ec 	.word	0x000357ec

000174e0 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
   174e0:	b538      	push	{r3, r4, r5, lr}
   174e2:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
   174e4:	f002 ff80 	bl	1a3e8 <net_context_bind>
   174e8:	1e05      	subs	r5, r0, #0
   174ea:	da06      	bge.n	174fa <zsock_bind_ctx+0x1a>
   174ec:	f019 fde2 	bl	310b4 <__errno>
   174f0:	426d      	negs	r5, r5
   174f2:	6005      	str	r5, [r0, #0]
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   174f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   174f8:	e005      	b.n	17506 <zsock_bind_ctx+0x26>
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
   174fa:	4620      	mov	r0, r4
   174fc:	f7ff ff2a 	bl	17354 <net_context_get_type>
   17500:	2802      	cmp	r0, #2
   17502:	d001      	beq.n	17508 <zsock_bind_ctx+0x28>
					   ctx->user_data));
	}

	return 0;
   17504:	2000      	movs	r0, #0
}
   17506:	bd38      	pop	{r3, r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   17508:	6823      	ldr	r3, [r4, #0]
   1750a:	4620      	mov	r0, r4
   1750c:	2200      	movs	r2, #0
   1750e:	4905      	ldr	r1, [pc, #20]	; (17524 <zsock_bind_ctx+0x44>)
   17510:	f003 fa9e 	bl	1aa50 <net_context_recv>
   17514:	1e04      	subs	r4, r0, #0
   17516:	daf5      	bge.n	17504 <zsock_bind_ctx+0x24>
   17518:	f019 fdcc 	bl	310b4 <__errno>
   1751c:	4264      	negs	r4, r4
   1751e:	6004      	str	r4, [r0, #0]
   17520:	e7e8      	b.n	174f4 <zsock_bind_ctx+0x14>
   17522:	bf00      	nop
   17524:	0002f931 	.word	0x0002f931

00017528 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
   17528:	b573      	push	{r0, r1, r4, r5, r6, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   1752a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1752e:	2400      	movs	r4, #0
   17530:	e9cd 3400 	strd	r3, r4, [sp]
   17534:	4623      	mov	r3, r4
{
   17536:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   17538:	f003 f966 	bl	1a808 <net_context_connect>
   1753c:	1e05      	subs	r5, r0, #0
   1753e:	da07      	bge.n	17550 <zsock_connect_ctx+0x28>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   17540:	f019 fdb8 	bl	310b4 <__errno>
   17544:	426d      	negs	r5, r5
   17546:	6005      	str	r5, [r0, #0]
   17548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
   1754c:	b002      	add	sp, #8
   1754e:	bd70      	pop	{r4, r5, r6, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   17550:	6833      	ldr	r3, [r6, #0]
   17552:	4622      	mov	r2, r4
   17554:	4903      	ldr	r1, [pc, #12]	; (17564 <zsock_connect_ctx+0x3c>)
   17556:	4630      	mov	r0, r6
   17558:	f003 fa7a 	bl	1aa50 <net_context_recv>
   1755c:	1e05      	subs	r5, r0, #0
   1755e:	dbef      	blt.n	17540 <zsock_connect_ctx+0x18>
	return 0;
   17560:	4620      	mov	r0, r4
   17562:	e7f3      	b.n	1754c <zsock_connect_ctx+0x24>
   17564:	0002f931 	.word	0x0002f931

00017568 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
   17568:	b538      	push	{r3, r4, r5, lr}
   1756a:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
   1756c:	f002 ffc6 	bl	1a4fc <net_context_listen>
   17570:	1e04      	subs	r4, r0, #0
   17572:	da06      	bge.n	17582 <zsock_listen_ctx+0x1a>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   17574:	f019 fd9e 	bl	310b4 <__errno>
   17578:	4264      	negs	r4, r4
   1757a:	6004      	str	r4, [r0, #0]
   1757c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
   17580:	bd38      	pop	{r3, r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   17582:	462b      	mov	r3, r5
   17584:	2200      	movs	r2, #0
   17586:	4904      	ldr	r1, [pc, #16]	; (17598 <zsock_listen_ctx+0x30>)
   17588:	4628      	mov	r0, r5
   1758a:	f003 fa11 	bl	1a9b0 <net_context_accept>
   1758e:	1e04      	subs	r4, r0, #0
   17590:	dbf0      	blt.n	17574 <zsock_listen_ctx+0xc>
	return 0;
   17592:	2000      	movs	r0, #0
   17594:	e7f4      	b.n	17580 <zsock_listen_ctx+0x18>
   17596:	bf00      	nop
   17598:	00017395 	.word	0x00017395

0001759c <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
   1759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1759e:	4605      	mov	r5, r0
   175a0:	460f      	mov	r7, r1
   175a2:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
   175a4:	f7ff fc72 	bl	16e8c <z_reserve_fd>
	if (fd < 0) {
   175a8:	1e04      	subs	r4, r0, #0
   175aa:	db31      	blt.n	17610 <zsock_accept_ctx+0x74>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
   175ac:	6da9      	ldr	r1, [r5, #88]	; 0x58
   175ae:	f081 0102 	eor.w	r1, r1, #2
   175b2:	f341 0140 	sbfx	r1, r1, #1, #1
	return z_impl_k_queue_get(queue, timeout);
   175b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   175ba:	f011 fee3 	bl	29384 <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
   175be:	4605      	mov	r5, r0
   175c0:	b938      	cbnz	r0, 175d2 <zsock_accept_ctx+0x36>
		z_free_fd(fd);
   175c2:	4620      	mov	r0, r4
   175c4:	f7ff fc8e 	bl	16ee4 <z_free_fd>
		errno = EAGAIN;
   175c8:	f019 fd74 	bl	310b4 <__errno>
   175cc:	230b      	movs	r3, #11
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
   175ce:	6003      	str	r3, [r0, #0]
			return -1;
   175d0:	e01e      	b.n	17610 <zsock_accept_ctx+0x74>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   175d2:	2100      	movs	r1, #0
   175d4:	6e00      	ldr	r0, [r0, #96]	; 0x60
   175d6:	f01d f872 	bl	346be <z_queue_node_peek>
	if (last_pkt) {
   175da:	b170      	cbz	r0, 175fa <zsock_accept_ctx+0x5e>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
   175dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
		if (net_pkt_eof(last_pkt)) {
   175e0:	0799      	lsls	r1, r3, #30
   175e2:	d50a      	bpl.n	175fa <zsock_accept_ctx+0x5e>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
   175e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
			z_free_fd(fd);
   175e6:	4620      	mov	r0, r4
   175e8:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   175ec:	65ab      	str	r3, [r5, #88]	; 0x58
   175ee:	f7ff fc79 	bl	16ee4 <z_free_fd>
			errno = ECONNABORTED;
   175f2:	f019 fd5f 	bl	310b4 <__errno>
   175f6:	2371      	movs	r3, #113	; 0x71
   175f8:	e7e9      	b.n	175ce <zsock_accept_ctx+0x32>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
   175fa:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
	if (net_context_is_closing(ctx)) {
   175fe:	055a      	lsls	r2, r3, #21
   17600:	d509      	bpl.n	17616 <zsock_accept_ctx+0x7a>
		errno = ECONNABORTED;
   17602:	f019 fd57 	bl	310b4 <__errno>
   17606:	2371      	movs	r3, #113	; 0x71
   17608:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1760a:	4620      	mov	r0, r4
   1760c:	f7ff fc6a 	bl	16ee4 <z_free_fd>
		return -1;
   17610:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17614:	e01b      	b.n	1764e <zsock_accept_ctx+0xb2>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
   17616:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1761a:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
	if (addr != NULL && addrlen != NULL) {
   1761e:	b177      	cbz	r7, 1763e <zsock_accept_ctx+0xa2>
   17620:	b16e      	cbz	r6, 1763e <zsock_accept_ctx+0xa2>
		int len = MIN(*addrlen, sizeof(ctx->remote));
   17622:	6832      	ldr	r2, [r6, #0]
   17624:	f105 0124 	add.w	r1, r5, #36	; 0x24
   17628:	2a08      	cmp	r2, #8
   1762a:	bf28      	it	cs
   1762c:	2208      	movcs	r2, #8
   1762e:	4638      	mov	r0, r7
   17630:	f01d f9f6 	bl	34a20 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
   17634:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   17636:	2b01      	cmp	r3, #1
   17638:	d10b      	bne.n	17652 <zsock_accept_ctx+0xb6>
			*addrlen = sizeof(struct sockaddr_in);
   1763a:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   1763c:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
   1763e:	4628      	mov	r0, r5
   17640:	f019 ff8f 	bl	31562 <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   17644:	4a08      	ldr	r2, [pc, #32]	; (17668 <zsock_accept_ctx+0xcc>)
   17646:	4629      	mov	r1, r5
   17648:	4620      	mov	r0, r4
   1764a:	f7ff fc41 	bl	16ed0 <z_finalize_fd>

	return fd;
}
   1764e:	4620      	mov	r0, r4
   17650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
   17652:	2b02      	cmp	r3, #2
   17654:	d101      	bne.n	1765a <zsock_accept_ctx+0xbe>
			*addrlen = sizeof(struct sockaddr_in6);
   17656:	2318      	movs	r3, #24
   17658:	e7f0      	b.n	1763c <zsock_accept_ctx+0xa0>
			z_free_fd(fd);
   1765a:	4620      	mov	r0, r4
   1765c:	f7ff fc42 	bl	16ee4 <z_free_fd>
			errno = ENOTSUP;
   17660:	f019 fd28 	bl	310b4 <__errno>
   17664:	2386      	movs	r3, #134	; 0x86
   17666:	e7b2      	b.n	175ce <zsock_accept_ctx+0x32>
   17668:	000359e8 	.word	0x000359e8

0001766c <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
   1766c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_timeout_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17670:	065b      	lsls	r3, r3, #25
   17672:	bf58      	it	pl
   17674:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
{
   17676:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17678:	bf58      	it	pl
   1767a:	f084 0402 	eorpl.w	r4, r4, #2
{
   1767e:	4688      	mov	r8, r1
   17680:	4691      	mov	r9, r2
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
   17682:	6803      	ldr	r3, [r0, #0]
   17684:	f04f 0200 	mov.w	r2, #0
   17688:	4919      	ldr	r1, [pc, #100]	; (176f0 <zsock_sendto_ctx+0x84>)
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   1768a:	bf54      	ite	pl
   1768c:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
   17690:	2400      	movmi	r4, #0
{
   17692:	4605      	mov	r5, r0
   17694:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	status = net_context_recv(ctx, zsock_received_cb,
   17696:	f003 f9db 	bl	1aa50 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
   1769a:	1e07      	subs	r7, r0, #0
   1769c:	da09      	bge.n	176b2 <zsock_sendto_ctx+0x46>
		errno = -status;
   1769e:	f019 fd09 	bl	310b4 <__errno>
   176a2:	427f      	negs	r7, r7
   176a4:	6007      	str	r7, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
   176a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
   176aa:	4620      	mov	r0, r4
   176ac:	b005      	add	sp, #20
   176ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
   176b2:	682b      	ldr	r3, [r5, #0]
   176b4:	b19e      	cbz	r6, 176de <zsock_sendto_ctx+0x72>
		status = net_context_sendto(ctx, buf, len, dest_addr,
   176b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   176ba:	2300      	movs	r3, #0
   176bc:	9301      	str	r3, [sp, #4]
   176be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   176c0:	464a      	mov	r2, r9
   176c2:	9300      	str	r3, [sp, #0]
   176c4:	4641      	mov	r1, r8
   176c6:	4633      	mov	r3, r6
   176c8:	4628      	mov	r0, r5
   176ca:	f019 ffe5 	bl	31698 <net_context_sendto>
	if (status < 0) {
   176ce:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
   176d0:	4604      	mov	r4, r0
	if (status < 0) {
   176d2:	daea      	bge.n	176aa <zsock_sendto_ctx+0x3e>
		errno = -status;
   176d4:	f019 fcee 	bl	310b4 <__errno>
   176d8:	4264      	negs	r4, r4
   176da:	6004      	str	r4, [r0, #0]
   176dc:	e7e3      	b.n	176a6 <zsock_sendto_ctx+0x3a>
		status = net_context_send(ctx, buf, len, NULL, timeout,
   176de:	e9cd 4300 	strd	r4, r3, [sp]
   176e2:	464a      	mov	r2, r9
   176e4:	4633      	mov	r3, r6
   176e6:	4641      	mov	r1, r8
   176e8:	4628      	mov	r0, r5
   176ea:	f019 ff88 	bl	315fe <net_context_send>
   176ee:	e7ee      	b.n	176ce <zsock_sendto_ctx+0x62>
   176f0:	0002f931 	.word	0x0002f931

000176f4 <zsock_recvfrom_ctx>:
}

ssize_t zsock_recvfrom_ctx(struct net_context *ctx, void *buf, size_t max_len,
			   int flags,
			   struct sockaddr *src_addr, socklen_t *addrlen)
{
   176f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176f8:	b08d      	sub	sp, #52	; 0x34
   176fa:	461d      	mov	r5, r3
   176fc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   17700:	4680      	mov	r8, r0
   17702:	9102      	str	r1, [sp, #8]
   17704:	9200      	str	r2, [sp, #0]
	enum net_sock_type sock_type = net_context_get_type(ctx);
   17706:	f7ff fe25 	bl	17354 <net_context_get_type>

	if (max_len == 0) {
   1770a:	9b00      	ldr	r3, [sp, #0]
   1770c:	b90b      	cbnz	r3, 17712 <zsock_recvfrom_ctx+0x1e>
	if (sock_type == SOCK_DGRAM) {
		return zsock_recv_dgram(ctx, buf, max_len, flags, src_addr, addrlen);
	} else if (sock_type == SOCK_STREAM) {
		return zsock_recv_stream(ctx, buf, max_len, flags);
	} else {
		__ASSERT(0, "Unknown socket type");
   1770e:	2400      	movs	r4, #0
   17710:	e0bf      	b.n	17892 <zsock_recvfrom_ctx+0x19e>
	if (sock_type == SOCK_DGRAM) {
   17712:	2802      	cmp	r0, #2
   17714:	f040 80c6 	bne.w	178a4 <zsock_recvfrom_ctx+0x1b0>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17718:	066b      	lsls	r3, r5, #25
   1771a:	bf57      	itett	pl
   1771c:	f8d8 1058 	ldrpl.w	r1, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   17720:	2100      	movmi	r1, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   17722:	f081 0102 	eorpl.w	r1, r1, #2
   17726:	f341 0140 	sbfxpl	r1, r1, #1, #1
	if (flags & ZSOCK_MSG_PEEK) {
   1772a:	f015 0502 	ands.w	r5, r5, #2
   1772e:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   17732:	d01c      	beq.n	1776e <zsock_recvfrom_ctx+0x7a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   17734:	f018 f8e7 	bl	2f906 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   17738:	f100 030b 	add.w	r3, r0, #11
   1773c:	2b0b      	cmp	r3, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   1773e:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   17740:	d806      	bhi.n	17750 <zsock_recvfrom_ctx+0x5c>
   17742:	f640 0181 	movw	r1, #2177	; 0x881
   17746:	40d9      	lsrs	r1, r3
   17748:	43c9      	mvns	r1, r1
   1774a:	f011 0101 	ands.w	r1, r1, #1
   1774e:	d004      	beq.n	1775a <zsock_recvfrom_ctx+0x66>
			errno = -res;
   17750:	f019 fcb0 	bl	310b4 <__errno>
   17754:	4264      	negs	r4, r4
   17756:	6004      	str	r4, [r0, #0]
			return -1;
   17758:	e033      	b.n	177c2 <zsock_recvfrom_ctx+0xce>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1775a:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   1775e:	f01c ffae 	bl	346be <z_queue_node_peek>
   17762:	4604      	mov	r4, r0
	if (!pkt) {
   17764:	b930      	cbnz	r0, 17774 <zsock_recvfrom_ctx+0x80>
				errno = EAGAIN;
   17766:	f019 fca5 	bl	310b4 <__errno>
   1776a:	230b      	movs	r3, #11
   1776c:	e0b6      	b.n	178dc <zsock_recvfrom_ctx+0x1e8>
   1776e:	f011 fe09 	bl	29384 <z_impl_k_queue_get>
   17772:	e7f6      	b.n	17762 <zsock_recvfrom_ctx+0x6e>
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
	backup->pos = pkt->cursor.pos;
   17774:	e9d0 a305 	ldrd	sl, r3, [r0, #20]
   17778:	9301      	str	r3, [sp, #4]
	if (src_addr && addrlen) {
   1777a:	2e00      	cmp	r6, #0
   1777c:	d06a      	beq.n	17854 <zsock_recvfrom_ctx+0x160>
   1777e:	2f00      	cmp	r7, #0
   17780:	d068      	beq.n	17854 <zsock_recvfrom_ctx+0x160>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   17782:	f8b8 3078 	ldrh.w	r3, [r8, #120]	; 0x78
   17786:	f8d7 8000 	ldr.w	r8, [r7]
   1778a:	9303      	str	r3, [sp, #12]
	net_pkt_cursor_init(pkt);
   1778c:	f01a f8ee 	bl	3196c <net_pkt_cursor_init>
	return pkt->family;
   17790:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   17794:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   17798:	2b01      	cmp	r3, #1
	addr->sa_family = net_pkt_family(pkt);
   1779a:	8033      	strh	r3, [r6, #0]
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1779c:	d014      	beq.n	177c8 <zsock_recvfrom_ctx+0xd4>
		ret = -ENOTSUP;
   1779e:	f06f 0985 	mvn.w	r9, #133	; 0x85
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
	pkt->cursor.buf = backup->buf;
	pkt->cursor.pos = backup->pos;
   177a2:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   177a4:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   177a8:	61a3      	str	r3, [r4, #24]
		if (rv < 0) {
   177aa:	f1b9 0f00 	cmp.w	r9, #0
   177ae:	d04c      	beq.n	1784a <zsock_recvfrom_ctx+0x156>
			errno = -rv;
   177b0:	f019 fc80 	bl	310b4 <__errno>
   177b4:	f1c9 0300 	rsb	r3, r9, #0
		errno = ENOBUFS;
   177b8:	6003      	str	r3, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   177ba:	b915      	cbnz	r5, 177c2 <zsock_recvfrom_ctx+0xce>
		net_pkt_unref(pkt);
   177bc:	4620      	mov	r0, r4
   177be:	f01a f871 	bl	318a4 <net_pkt_unref>
	return -1;
   177c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   177c6:	e064      	b.n	17892 <zsock_recvfrom_ctx+0x19e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   177c8:	f04f 0c00 	mov.w	ip, #0
   177cc:	2314      	movs	r3, #20
		if (addrlen < sizeof(struct sockaddr_in)) {
   177ce:	f1b8 0f07 	cmp.w	r8, #7
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   177d2:	e9cd c307 	strd	ip, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in)) {
   177d6:	d92c      	bls.n	17832 <zsock_recvfrom_ctx+0x13e>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
   177d8:	f10d 081c 	add.w	r8, sp, #28
   177dc:	4641      	mov	r1, r8
   177de:	4620      	mov	r0, r4
   177e0:	f01a faa2 	bl	31d28 <net_pkt_get_data>
		if (!ipv4_hdr ||
   177e4:	4683      	mov	fp, r0
   177e6:	b910      	cbnz	r0, 177ee <zsock_recvfrom_ctx+0xfa>
			ret = -ENOBUFS;
   177e8:	f06f 0968 	mvn.w	r9, #104	; 0x68
   177ec:	e7d9      	b.n	177a2 <zsock_recvfrom_ctx+0xae>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   177ee:	9908      	ldr	r1, [sp, #32]
   177f0:	4620      	mov	r0, r4
   177f2:	f01a f945 	bl	31a80 <net_pkt_skip>
		if (!ipv4_hdr ||
   177f6:	2800      	cmp	r0, #0
   177f8:	d1f6      	bne.n	177e8 <zsock_recvfrom_ctx+0xf4>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
   177fa:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   177fe:	4620      	mov	r0, r4
   17800:	f01a f93e 	bl	31a80 <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
   17804:	4681      	mov	r9, r0
   17806:	2800      	cmp	r0, #0
   17808:	d1ee      	bne.n	177e8 <zsock_recvfrom_ctx+0xf4>
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   1780a:	f8db 100c 	ldr.w	r1, [fp, #12]
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   1780e:	f89d 200c 	ldrb.w	r2, [sp, #12]
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   17812:	6071      	str	r1, [r6, #4]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   17814:	2a11      	cmp	r2, #17
   17816:	d10f      	bne.n	17838 <zsock_recvfrom_ctx+0x144>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17818:	aa05      	add	r2, sp, #20
   1781a:	9207      	str	r2, [sp, #28]
   1781c:	2208      	movs	r2, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   1781e:	4641      	mov	r1, r8
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   17820:	9208      	str	r2, [sp, #32]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   17822:	4620      	mov	r0, r4
   17824:	f01a fa80 	bl	31d28 <net_pkt_get_data>
		if (!tcp_hdr) {
   17828:	2800      	cmp	r0, #0
   1782a:	d0dd      	beq.n	177e8 <zsock_recvfrom_ctx+0xf4>
		*port = tcp_hdr->src_port;
   1782c:	8802      	ldrh	r2, [r0, #0]
   1782e:	8072      	strh	r2, [r6, #2]
   17830:	e7b7      	b.n	177a2 <zsock_recvfrom_ctx+0xae>
			ret = -EINVAL;
   17832:	f06f 0915 	mvn.w	r9, #21
   17836:	e7b4      	b.n	177a2 <zsock_recvfrom_ctx+0xae>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   17838:	2a06      	cmp	r2, #6
   1783a:	d1b0      	bne.n	1779e <zsock_recvfrom_ctx+0xaa>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1783c:	2214      	movs	r2, #20
   1783e:	f8cd 8014 	str.w	r8, [sp, #20]
   17842:	9206      	str	r2, [sp, #24]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   17844:	eb0d 0102 	add.w	r1, sp, r2
   17848:	e7eb      	b.n	17822 <zsock_recvfrom_ctx+0x12e>
		if (src_addr->sa_family == AF_INET) {
   1784a:	8833      	ldrh	r3, [r6, #0]
   1784c:	2b01      	cmp	r3, #1
   1784e:	d113      	bne.n	17878 <zsock_recvfrom_ctx+0x184>
			*addrlen = sizeof(struct sockaddr_in);
   17850:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   17852:	603b      	str	r3, [r7, #0]
	recv_len = net_pkt_remaining_data(pkt);
   17854:	4620      	mov	r0, r4
   17856:	f01a f98d 	bl	31b74 <net_pkt_remaining_data>
	if (recv_len > max_len) {
   1785a:	9b00      	ldr	r3, [sp, #0]
	if (net_pkt_read(pkt, buf, recv_len)) {
   1785c:	9902      	ldr	r1, [sp, #8]
   1785e:	4283      	cmp	r3, r0
   17860:	bf28      	it	cs
   17862:	4603      	movcs	r3, r0
   17864:	4620      	mov	r0, r4
   17866:	461a      	mov	r2, r3
   17868:	461e      	mov	r6, r3
   1786a:	f01a f91f 	bl	31aac <net_pkt_read>
   1786e:	b158      	cbz	r0, 17888 <zsock_recvfrom_ctx+0x194>
		errno = ENOBUFS;
   17870:	f019 fc20 	bl	310b4 <__errno>
   17874:	2369      	movs	r3, #105	; 0x69
   17876:	e79f      	b.n	177b8 <zsock_recvfrom_ctx+0xc4>
		} else if (src_addr->sa_family == AF_INET6) {
   17878:	2b02      	cmp	r3, #2
   1787a:	d101      	bne.n	17880 <zsock_recvfrom_ctx+0x18c>
			*addrlen = sizeof(struct sockaddr_in6);
   1787c:	2318      	movs	r3, #24
   1787e:	e7e8      	b.n	17852 <zsock_recvfrom_ctx+0x15e>
			errno = ENOTSUP;
   17880:	f019 fc18 	bl	310b4 <__errno>
   17884:	2386      	movs	r3, #134	; 0x86
   17886:	e797      	b.n	177b8 <zsock_recvfrom_ctx+0xc4>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   17888:	b93d      	cbnz	r5, 1789a <zsock_recvfrom_ctx+0x1a6>
		net_pkt_unref(pkt);
   1788a:	4620      	mov	r0, r4
   1788c:	f01a f80a 	bl	318a4 <net_pkt_unref>
	return recv_len;
   17890:	4634      	mov	r4, r6
	}

	return 0;
}
   17892:	4620      	mov	r0, r4
   17894:	b00d      	add	sp, #52	; 0x34
   17896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt->cursor.pos = backup->pos;
   1789a:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   1789c:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   178a0:	61a3      	str	r3, [r4, #24]
   178a2:	e7f5      	b.n	17890 <zsock_recvfrom_ctx+0x19c>
	} else if (sock_type == SOCK_STREAM) {
   178a4:	2801      	cmp	r0, #1
   178a6:	f040 8087 	bne.w	179b8 <zsock_recvfrom_ctx+0x2c4>
	NET_ASSERT(context);
   178aa:	f1b8 0f00 	cmp.w	r8, #0
   178ae:	d10e      	bne.n	178ce <zsock_recvfrom_ctx+0x1da>
   178b0:	4949      	ldr	r1, [pc, #292]	; (179d8 <zsock_recvfrom_ctx+0x2e4>)
   178b2:	f44f 73a9 	mov.w	r3, #338	; 0x152
   178b6:	4a49      	ldr	r2, [pc, #292]	; (179dc <zsock_recvfrom_ctx+0x2e8>)
   178b8:	4849      	ldr	r0, [pc, #292]	; (179e0 <zsock_recvfrom_ctx+0x2ec>)
   178ba:	f017 fcca 	bl	2f252 <printk>
   178be:	4849      	ldr	r0, [pc, #292]	; (179e4 <zsock_recvfrom_ctx+0x2f0>)
   178c0:	f017 fcc7 	bl	2f252 <printk>
   178c4:	f44f 71a9 	mov.w	r1, #338	; 0x152
   178c8:	4844      	ldr	r0, [pc, #272]	; (179dc <zsock_recvfrom_ctx+0x2e8>)
   178ca:	f017 ffc3 	bl	2f854 <assert_post_action>
	if (!net_context_is_used(ctx)) {
   178ce:	f8b8 307a 	ldrh.w	r3, [r8, #122]	; 0x7a
   178d2:	07dc      	lsls	r4, r3, #31
   178d4:	d404      	bmi.n	178e0 <zsock_recvfrom_ctx+0x1ec>
		errno = EBADF;
   178d6:	f019 fbed 	bl	310b4 <__errno>
   178da:	2309      	movs	r3, #9
			errno = ENOBUFS;
   178dc:	6003      	str	r3, [r0, #0]
			return -1;
   178de:	e770      	b.n	177c2 <zsock_recvfrom_ctx+0xce>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   178e0:	0668      	lsls	r0, r5, #25
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   178e2:	f8d8 7058 	ldr.w	r7, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   178e6:	bf4e      	itee	mi
   178e8:	2700      	movmi	r7, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   178ea:	f087 0702 	eorpl.w	r7, r7, #2
   178ee:	f347 0740 	sbfxpl	r7, r7, #1, #1
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   178f2:	f108 0a5c 	add.w	sl, r8, #92	; 0x5c
   178f6:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
		if (sock_is_eof(ctx)) {
   178fa:	07d9      	lsls	r1, r3, #31
   178fc:	f53f af07 	bmi.w	1770e <zsock_recvfrom_ctx+0x1a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   17900:	4639      	mov	r1, r7
   17902:	4650      	mov	r0, sl
   17904:	f017 ffff 	bl	2f906 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   17908:	f100 010b 	add.w	r1, r0, #11
   1790c:	290b      	cmp	r1, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   1790e:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   17910:	f63f af1e 	bhi.w	17750 <zsock_recvfrom_ctx+0x5c>
   17914:	f640 0381 	movw	r3, #2177	; 0x881
   17918:	fa23 f101 	lsr.w	r1, r3, r1
   1791c:	43c9      	mvns	r1, r1
   1791e:	f011 0101 	ands.w	r1, r1, #1
   17922:	f47f af15 	bne.w	17750 <zsock_recvfrom_ctx+0x5c>
   17926:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   1792a:	f01c fec8 	bl	346be <z_queue_node_peek>
		if (!pkt) {
   1792e:	4606      	mov	r6, r0
   17930:	b928      	cbnz	r0, 1793e <zsock_recvfrom_ctx+0x24a>
   17932:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
			if (sock_is_eof(ctx)) {
   17936:	07da      	lsls	r2, r3, #31
   17938:	f53f aee9 	bmi.w	1770e <zsock_recvfrom_ctx+0x1a>
   1793c:	e713      	b.n	17766 <zsock_recvfrom_ctx+0x72>
	backup->buf = pkt->cursor.buf;
   1793e:	6943      	ldr	r3, [r0, #20]
   17940:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
   17942:	6983      	ldr	r3, [r0, #24]
   17944:	9301      	str	r3, [sp, #4]
		data_len = net_pkt_remaining_data(pkt);
   17946:	f01a f915 	bl	31b74 <net_pkt_remaining_data>
   1794a:	9b00      	ldr	r3, [sp, #0]
   1794c:	4683      	mov	fp, r0
		if (recv_len > max_len) {
   1794e:	4283      	cmp	r3, r0
   17950:	bf28      	it	cs
   17952:	4603      	movcs	r3, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   17954:	9902      	ldr	r1, [sp, #8]
   17956:	461a      	mov	r2, r3
   17958:	4630      	mov	r0, r6
   1795a:	461c      	mov	r4, r3
   1795c:	f01a f8a6 	bl	31aac <net_pkt_read>
   17960:	9b03      	ldr	r3, [sp, #12]
   17962:	b118      	cbz	r0, 1796c <zsock_recvfrom_ctx+0x278>
			errno = ENOBUFS;
   17964:	f019 fba6 	bl	310b4 <__errno>
   17968:	2369      	movs	r3, #105	; 0x69
   1796a:	e7b7      	b.n	178dc <zsock_recvfrom_ctx+0x1e8>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   1796c:	f015 0902 	ands.w	r9, r5, #2
   17970:	d11e      	bne.n	179b0 <zsock_recvfrom_ctx+0x2bc>
			if (recv_len == data_len) {
   17972:	9b00      	ldr	r3, [sp, #0]
   17974:	455b      	cmp	r3, fp
   17976:	d310      	bcc.n	1799a <zsock_recvfrom_ctx+0x2a6>
   17978:	4649      	mov	r1, r9
   1797a:	4650      	mov	r0, sl
   1797c:	f011 fd02 	bl	29384 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   17980:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
				net_pkt_unref(pkt);
   17984:	4630      	mov	r0, r6
				if (net_pkt_eof(pkt)) {
   17986:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   17988:	bf42      	ittt	mi
   1798a:	f8d8 3058 	ldrmi.w	r3, [r8, #88]	; 0x58
   1798e:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   17992:	f8c8 3058 	strmi.w	r3, [r8, #88]	; 0x58
				net_pkt_unref(pkt);
   17996:	f019 ff85 	bl	318a4 <net_pkt_unref>
	} while (recv_len == 0);
   1799a:	2c00      	cmp	r4, #0
   1799c:	d0ab      	beq.n	178f6 <zsock_recvfrom_ctx+0x202>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   1799e:	f1b9 0f00 	cmp.w	r9, #0
   179a2:	f47f af76 	bne.w	17892 <zsock_recvfrom_ctx+0x19e>
		net_context_update_recv_wnd(ctx, recv_len);
   179a6:	4621      	mov	r1, r4
   179a8:	4640      	mov	r0, r8
   179aa:	f019 fe96 	bl	316da <net_context_update_recv_wnd>
	return recv_len;
   179ae:	e770      	b.n	17892 <zsock_recvfrom_ctx+0x19e>
	pkt->cursor.buf = backup->buf;
   179b0:	6173      	str	r3, [r6, #20]
	pkt->cursor.pos = backup->pos;
   179b2:	9b01      	ldr	r3, [sp, #4]
   179b4:	61b3      	str	r3, [r6, #24]
   179b6:	e7f0      	b.n	1799a <zsock_recvfrom_ctx+0x2a6>
		__ASSERT(0, "Unknown socket type");
   179b8:	f240 339f 	movw	r3, #927	; 0x39f
   179bc:	4a0a      	ldr	r2, [pc, #40]	; (179e8 <zsock_recvfrom_ctx+0x2f4>)
   179be:	490b      	ldr	r1, [pc, #44]	; (179ec <zsock_recvfrom_ctx+0x2f8>)
   179c0:	4807      	ldr	r0, [pc, #28]	; (179e0 <zsock_recvfrom_ctx+0x2ec>)
   179c2:	f017 fc46 	bl	2f252 <printk>
   179c6:	480a      	ldr	r0, [pc, #40]	; (179f0 <zsock_recvfrom_ctx+0x2fc>)
   179c8:	f017 fc43 	bl	2f252 <printk>
   179cc:	f240 319f 	movw	r1, #927	; 0x39f
   179d0:	4805      	ldr	r0, [pc, #20]	; (179e8 <zsock_recvfrom_ctx+0x2f4>)
   179d2:	f017 ff3f 	bl	2f854 <assert_post_action>
   179d6:	e69a      	b.n	1770e <zsock_recvfrom_ctx+0x1a>
   179d8:	0003707e 	.word	0x0003707e
   179dc:	00037051 	.word	0x00037051
   179e0:	00036be5 	.word	0x00036be5
   179e4:	00037086 	.word	0x00037086
   179e8:	00037089 	.word	0x00037089
   179ec:	00038ae7 	.word	0x00038ae7
   179f0:	00037123 	.word	0x00037123

000179f4 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   179f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179f8:	4683      	mov	fp, r0
   179fa:	4688      	mov	r8, r1
   179fc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
   17a00:	b09b      	sub	sp, #108	; 0x6c
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   17a02:	4648      	mov	r0, r9
   17a04:	f01c ff40 	bl	34888 <z_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   17a08:	4646      	mov	r6, r8
   17a0a:	464c      	mov	r4, r9
   17a0c:	465f      	mov	r7, fp
	end = z_timeout_end_calc(timeout);
   17a0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
	pev = poll_events;
   17a12:	ad0b      	add	r5, sp, #44	; 0x2c
   17a14:	9509      	str	r5, [sp, #36]	; 0x24
	for (pfd = fds, i = nfds; i--; pfd++) {
   17a16:	b9ee      	cbnz	r6, 17a54 <z_impl_zsock_poll+0x60>
			errno = -result;
			return -1;
		}
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17a18:	1c63      	adds	r3, r4, #1
   17a1a:	2b01      	cmp	r3, #1
   17a1c:	d94f      	bls.n	17abe <z_impl_zsock_poll+0xca>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   17a1e:	f013 fdbf 	bl	2b5a0 <z_tick_get>
   17a22:	9b06      	ldr	r3, [sp, #24]
   17a24:	1a1b      	subs	r3, r3, r0
   17a26:	9302      	str	r3, [sp, #8]
   17a28:	9b07      	ldr	r3, [sp, #28]
   17a2a:	eb63 0301 	sbc.w	r3, r3, r1
   17a2e:	9303      	str	r3, [sp, #12]

		if (remaining <= 0) {
   17a30:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17a34:	2b01      	cmp	r3, #1
   17a36:	f174 0300 	sbcs.w	r3, r4, #0
   17a3a:	db3f      	blt.n	17abc <z_impl_zsock_poll+0xc8>
			return (u32_t)((t * to_hz + off) / from_hz);
   17a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17a40:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17a44:	2300      	movs	r3, #0
   17a46:	9802      	ldr	r0, [sp, #8]
   17a48:	fbe1 2300 	umlal	r2, r3, r1, r0
   17a4c:	0bd4      	lsrs	r4, r2, #15
   17a4e:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
   17a52:	e034      	b.n	17abe <z_impl_zsock_poll+0xca>
		if (pfd->fd < 0) {
   17a54:	6838      	ldr	r0, [r7, #0]
   17a56:	2800      	cmp	r0, #0
   17a58:	db2d      	blt.n	17ab6 <z_impl_zsock_poll+0xc2>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   17a5a:	a90a      	add	r1, sp, #40	; 0x28
   17a5c:	f7ff fa02 	bl	16e64 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   17a60:	4682      	mov	sl, r0
   17a62:	b340      	cbz	r0, 17ab6 <z_impl_zsock_poll+0xc2>
		result = z_fdtable_call_ioctl(vtable, ctx,
   17a64:	ab1a      	add	r3, sp, #104	; 0x68
   17a66:	9301      	str	r3, [sp, #4]
   17a68:	ab09      	add	r3, sp, #36	; 0x24
   17a6a:	9300      	str	r3, [sp, #0]
   17a6c:	4601      	mov	r1, r0
   17a6e:	463b      	mov	r3, r7
   17a70:	f240 1203 	movw	r2, #259	; 0x103
   17a74:	980a      	ldr	r0, [sp, #40]	; 0x28
   17a76:	f017 ff2f 	bl	2f8d8 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   17a7a:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   17a7e:	4603      	mov	r3, r0
		if (result == -EALREADY) {
   17a80:	d018      	beq.n	17ab4 <z_impl_zsock_poll+0xc0>
		} else if (result == -EXDEV) {
   17a82:	f110 0f12 	cmn.w	r0, #18
   17a86:	d10d      	bne.n	17aa4 <z_impl_zsock_poll+0xb0>
			return z_fdtable_call_ioctl(vtable, ctx,
   17a88:	e9cd 8900 	strd	r8, r9, [sp]
   17a8c:	465b      	mov	r3, fp
   17a8e:	f240 1205 	movw	r2, #261	; 0x105
   17a92:	4651      	mov	r1, sl
   17a94:	980a      	ldr	r0, [sp, #40]	; 0x28
   17a96:	f017 ff1f 	bl	2f8d8 <z_fdtable_call_ioctl>
   17a9a:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   17a9c:	4630      	mov	r0, r6
   17a9e:	b01b      	add	sp, #108	; 0x6c
   17aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (result != 0) {
   17aa4:	b138      	cbz	r0, 17ab6 <z_impl_zsock_poll+0xc2>
   17aa6:	9302      	str	r3, [sp, #8]
				errno = -result;
   17aa8:	f019 fb04 	bl	310b4 <__errno>
   17aac:	9b02      	ldr	r3, [sp, #8]
   17aae:	425b      	negs	r3, r3
   17ab0:	6003      	str	r3, [r0, #0]
				return -1;
   17ab2:	e01d      	b.n	17af0 <z_impl_zsock_poll+0xfc>
			timeout = K_NO_WAIT;
   17ab4:	2400      	movs	r4, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   17ab6:	3708      	adds	r7, #8
   17ab8:	3e01      	subs	r6, #1
   17aba:	e7ac      	b.n	17a16 <z_impl_zsock_poll+0x22>
			timeout = K_NO_WAIT;
   17abc:	4634      	mov	r4, r6
		ret = k_poll(poll_events, pev - poll_events, timeout);
   17abe:	9909      	ldr	r1, [sp, #36]	; 0x24
   17ac0:	4b35      	ldr	r3, [pc, #212]	; (17b98 <z_impl_zsock_poll+0x1a4>)
   17ac2:	1b49      	subs	r1, r1, r5
   17ac4:	1089      	asrs	r1, r1, #2
   17ac6:	4359      	muls	r1, r3
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17ac8:	4622      	mov	r2, r4
   17aca:	4628      	mov	r0, r5
   17acc:	f013 fff4 	bl	2bab8 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   17ad0:	f100 030b 	add.w	r3, r0, #11
   17ad4:	2b0b      	cmp	r3, #11
   17ad6:	4606      	mov	r6, r0
   17ad8:	d806      	bhi.n	17ae8 <z_impl_zsock_poll+0xf4>
   17ada:	f640 0781 	movw	r7, #2177	; 0x881
   17ade:	40df      	lsrs	r7, r3
   17ae0:	43ff      	mvns	r7, r7
   17ae2:	f017 0701 	ands.w	r7, r7, #1
   17ae6:	d006      	beq.n	17af6 <z_impl_zsock_poll+0x102>
			errno = -ret;
   17ae8:	f019 fae4 	bl	310b4 <__errno>
   17aec:	4276      	negs	r6, r6
   17aee:	6006      	str	r6, [r0, #0]
			return -1;
   17af0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17af4:	e7d2      	b.n	17a9c <z_impl_zsock_poll+0xa8>
		for (pfd = fds, i = nfds; i--; pfd++) {
   17af6:	46c2      	mov	sl, r8
   17af8:	46d9      	mov	r9, fp
		ret = 0;
   17afa:	463e      	mov	r6, r7
		pev = poll_events;
   17afc:	9509      	str	r5, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   17afe:	f1ba 0f00 	cmp.w	sl, #0
   17b02:	d11d      	bne.n	17b40 <z_impl_zsock_poll+0x14c>
		if (retry) {
   17b04:	2f00      	cmp	r7, #0
   17b06:	d0c9      	beq.n	17a9c <z_impl_zsock_poll+0xa8>
			if (ret > 0) {
   17b08:	2e00      	cmp	r6, #0
   17b0a:	dcc7      	bgt.n	17a9c <z_impl_zsock_poll+0xa8>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17b0c:	2c00      	cmp	r4, #0
   17b0e:	d0c5      	beq.n	17a9c <z_impl_zsock_poll+0xa8>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17b10:	1c63      	adds	r3, r4, #1
   17b12:	d0d4      	beq.n	17abe <z_impl_zsock_poll+0xca>
				s64_t remaining = end - z_tick_get();
   17b14:	f013 fd44 	bl	2b5a0 <z_tick_get>
   17b18:	9b06      	ldr	r3, [sp, #24]
   17b1a:	1a1b      	subs	r3, r3, r0
   17b1c:	9304      	str	r3, [sp, #16]
   17b1e:	9b07      	ldr	r3, [sp, #28]
   17b20:	eb63 0301 	sbc.w	r3, r3, r1
   17b24:	9305      	str	r3, [sp, #20]
				if (remaining <= 0) {
   17b26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   17b2a:	2b01      	cmp	r3, #1
   17b2c:	f174 0300 	sbcs.w	r3, r4, #0
   17b30:	dbb4      	blt.n	17a9c <z_impl_zsock_poll+0xa8>
   17b32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17b36:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17b3a:	2300      	movs	r3, #0
   17b3c:	9804      	ldr	r0, [sp, #16]
   17b3e:	e783      	b.n	17a48 <z_impl_zsock_poll+0x54>
			pfd->revents = 0;
   17b40:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   17b44:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   17b48:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   17b4c:	2800      	cmp	r0, #0
   17b4e:	db1b      	blt.n	17b88 <z_impl_zsock_poll+0x194>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   17b50:	a90a      	add	r1, sp, #40	; 0x28
   17b52:	f7ff f987 	bl	16e64 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   17b56:	4601      	mov	r1, r0
   17b58:	b920      	cbnz	r0, 17b64 <z_impl_zsock_poll+0x170>
				pfd->revents = ZSOCK_POLLNVAL;
   17b5a:	2320      	movs	r3, #32
   17b5c:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   17b60:	3601      	adds	r6, #1
   17b62:	e011      	b.n	17b88 <z_impl_zsock_poll+0x194>
			result = z_fdtable_call_ioctl(vtable, ctx,
   17b64:	ab09      	add	r3, sp, #36	; 0x24
   17b66:	9300      	str	r3, [sp, #0]
   17b68:	f44f 7282 	mov.w	r2, #260	; 0x104
   17b6c:	464b      	mov	r3, r9
   17b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
   17b70:	f017 feb2 	bl	2f8d8 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   17b74:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   17b78:	4603      	mov	r3, r0
			if (result == -EAGAIN) {
   17b7a:	d00a      	beq.n	17b92 <z_impl_zsock_poll+0x19e>
			} else if (result != 0) {
   17b7c:	2800      	cmp	r0, #0
   17b7e:	d192      	bne.n	17aa6 <z_impl_zsock_poll+0xb2>
			if (pfd->revents != 0) {
   17b80:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   17b84:	2b00      	cmp	r3, #0
   17b86:	d1eb      	bne.n	17b60 <z_impl_zsock_poll+0x16c>
		for (pfd = fds, i = nfds; i--; pfd++) {
   17b88:	f109 0908 	add.w	r9, r9, #8
   17b8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   17b90:	e7b5      	b.n	17afe <z_impl_zsock_poll+0x10a>
				retry = true;
   17b92:	2701      	movs	r7, #1
   17b94:	e7f8      	b.n	17b88 <z_impl_zsock_poll+0x194>
   17b96:	bf00      	nop
   17b98:	cccccccd 	.word	0xcccccccd

00017b9c <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   17b9c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   17b9e:	4605      	mov	r5, r0
   17ba0:	b948      	cbnz	r0, 17bb6 <socket_offload_dns_register+0x1a>
   17ba2:	490c      	ldr	r1, [pc, #48]	; (17bd4 <socket_offload_dns_register+0x38>)
   17ba4:	480c      	ldr	r0, [pc, #48]	; (17bd8 <socket_offload_dns_register+0x3c>)
   17ba6:	2313      	movs	r3, #19
   17ba8:	4a0c      	ldr	r2, [pc, #48]	; (17bdc <socket_offload_dns_register+0x40>)
   17baa:	f017 fb52 	bl	2f252 <printk>
   17bae:	2113      	movs	r1, #19
   17bb0:	480a      	ldr	r0, [pc, #40]	; (17bdc <socket_offload_dns_register+0x40>)
   17bb2:	f017 fe4f 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   17bb6:	4c0a      	ldr	r4, [pc, #40]	; (17be0 <socket_offload_dns_register+0x44>)
   17bb8:	6822      	ldr	r2, [r4, #0]
   17bba:	b14a      	cbz	r2, 17bd0 <socket_offload_dns_register+0x34>
   17bbc:	4909      	ldr	r1, [pc, #36]	; (17be4 <socket_offload_dns_register+0x48>)
   17bbe:	4806      	ldr	r0, [pc, #24]	; (17bd8 <socket_offload_dns_register+0x3c>)
   17bc0:	2314      	movs	r3, #20
   17bc2:	4a06      	ldr	r2, [pc, #24]	; (17bdc <socket_offload_dns_register+0x40>)
   17bc4:	f017 fb45 	bl	2f252 <printk>
   17bc8:	2114      	movs	r1, #20
   17bca:	4804      	ldr	r0, [pc, #16]	; (17bdc <socket_offload_dns_register+0x40>)
   17bcc:	f017 fe42 	bl	2f854 <assert_post_action>

	dns_offload = ops;
   17bd0:	6025      	str	r5, [r4, #0]
}
   17bd2:	bd38      	pop	{r3, r4, r5, pc}
   17bd4:	00037174 	.word	0x00037174
   17bd8:	00036be5 	.word	0x00036be5
   17bdc:	00037139 	.word	0x00037139
   17be0:	2002164c 	.word	0x2002164c
   17be4:	00037178 	.word	0x00037178

00017be8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   17be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   17bec:	4c13      	ldr	r4, [pc, #76]	; (17c3c <socket_offload_getaddrinfo+0x54>)
{
   17bee:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   17bf0:	6823      	ldr	r3, [r4, #0]
{
   17bf2:	4605      	mov	r5, r0
   17bf4:	460e      	mov	r6, r1
   17bf6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   17bf8:	b94b      	cbnz	r3, 17c0e <socket_offload_getaddrinfo+0x26>
   17bfa:	4911      	ldr	r1, [pc, #68]	; (17c40 <socket_offload_getaddrinfo+0x58>)
   17bfc:	4811      	ldr	r0, [pc, #68]	; (17c44 <socket_offload_getaddrinfo+0x5c>)
   17bfe:	231d      	movs	r3, #29
   17c00:	4a11      	ldr	r2, [pc, #68]	; (17c48 <socket_offload_getaddrinfo+0x60>)
   17c02:	f017 fb26 	bl	2f252 <printk>
   17c06:	211d      	movs	r1, #29
   17c08:	480f      	ldr	r0, [pc, #60]	; (17c48 <socket_offload_getaddrinfo+0x60>)
   17c0a:	f017 fe23 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   17c0e:	6823      	ldr	r3, [r4, #0]
   17c10:	681b      	ldr	r3, [r3, #0]
   17c12:	b94b      	cbnz	r3, 17c28 <socket_offload_getaddrinfo+0x40>
   17c14:	490d      	ldr	r1, [pc, #52]	; (17c4c <socket_offload_getaddrinfo+0x64>)
   17c16:	480b      	ldr	r0, [pc, #44]	; (17c44 <socket_offload_getaddrinfo+0x5c>)
   17c18:	231e      	movs	r3, #30
   17c1a:	4a0b      	ldr	r2, [pc, #44]	; (17c48 <socket_offload_getaddrinfo+0x60>)
   17c1c:	f017 fb19 	bl	2f252 <printk>
   17c20:	211e      	movs	r1, #30
   17c22:	4809      	ldr	r0, [pc, #36]	; (17c48 <socket_offload_getaddrinfo+0x60>)
   17c24:	f017 fe16 	bl	2f854 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   17c28:	6823      	ldr	r3, [r4, #0]
   17c2a:	463a      	mov	r2, r7
   17c2c:	681c      	ldr	r4, [r3, #0]
   17c2e:	4631      	mov	r1, r6
   17c30:	4643      	mov	r3, r8
   17c32:	4628      	mov	r0, r5
   17c34:	46a4      	mov	ip, r4
}
   17c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   17c3a:	4760      	bx	ip
   17c3c:	2002164c 	.word	0x2002164c
   17c40:	000371ad 	.word	0x000371ad
   17c44:	00036be5 	.word	0x00036be5
   17c48:	00037139 	.word	0x00037139
   17c4c:	000371b9 	.word	0x000371b9

00017c50 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   17c50:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   17c52:	4c10      	ldr	r4, [pc, #64]	; (17c94 <socket_offload_freeaddrinfo+0x44>)
{
   17c54:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   17c56:	6823      	ldr	r3, [r4, #0]
   17c58:	b94b      	cbnz	r3, 17c6e <socket_offload_freeaddrinfo+0x1e>
   17c5a:	490f      	ldr	r1, [pc, #60]	; (17c98 <socket_offload_freeaddrinfo+0x48>)
   17c5c:	480f      	ldr	r0, [pc, #60]	; (17c9c <socket_offload_freeaddrinfo+0x4c>)
   17c5e:	2325      	movs	r3, #37	; 0x25
   17c60:	4a0f      	ldr	r2, [pc, #60]	; (17ca0 <socket_offload_freeaddrinfo+0x50>)
   17c62:	f017 faf6 	bl	2f252 <printk>
   17c66:	2125      	movs	r1, #37	; 0x25
   17c68:	480d      	ldr	r0, [pc, #52]	; (17ca0 <socket_offload_freeaddrinfo+0x50>)
   17c6a:	f017 fdf3 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   17c6e:	6823      	ldr	r3, [r4, #0]
   17c70:	685b      	ldr	r3, [r3, #4]
   17c72:	b94b      	cbnz	r3, 17c88 <socket_offload_freeaddrinfo+0x38>
   17c74:	490b      	ldr	r1, [pc, #44]	; (17ca4 <socket_offload_freeaddrinfo+0x54>)
   17c76:	4809      	ldr	r0, [pc, #36]	; (17c9c <socket_offload_freeaddrinfo+0x4c>)
   17c78:	2326      	movs	r3, #38	; 0x26
   17c7a:	4a09      	ldr	r2, [pc, #36]	; (17ca0 <socket_offload_freeaddrinfo+0x50>)
   17c7c:	f017 fae9 	bl	2f252 <printk>
   17c80:	2126      	movs	r1, #38	; 0x26
   17c82:	4807      	ldr	r0, [pc, #28]	; (17ca0 <socket_offload_freeaddrinfo+0x50>)
   17c84:	f017 fde6 	bl	2f854 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   17c88:	6823      	ldr	r3, [r4, #0]
   17c8a:	4628      	mov	r0, r5
}
   17c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   17c90:	685b      	ldr	r3, [r3, #4]
   17c92:	4718      	bx	r3
   17c94:	2002164c 	.word	0x2002164c
   17c98:	000371ad 	.word	0x000371ad
   17c9c:	00036be5 	.word	0x00036be5
   17ca0:	00037139 	.word	0x00037139
   17ca4:	00037193 	.word	0x00037193

00017ca8 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   17ca8:	4b0e      	ldr	r3, [pc, #56]	; (17ce4 <settings_save_one+0x3c>)
{
   17caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   17cae:	681c      	ldr	r4, [r3, #0]
{
   17cb0:	4606      	mov	r6, r0
   17cb2:	460f      	mov	r7, r1
   17cb4:	4690      	mov	r8, r2
	if (!cs) {
   17cb6:	b194      	cbz	r4, 17cde <settings_save_one+0x36>
	return z_impl_k_mutex_lock(mutex, timeout);
   17cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cbc:	480a      	ldr	r0, [pc, #40]	; (17ce8 <settings_save_one+0x40>)
   17cbe:	f011 f8f7 	bl	28eb0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   17cc2:	6863      	ldr	r3, [r4, #4]
   17cc4:	463a      	mov	r2, r7
   17cc6:	689d      	ldr	r5, [r3, #8]
   17cc8:	4631      	mov	r1, r6
   17cca:	4643      	mov	r3, r8
   17ccc:	4620      	mov	r0, r4
   17cce:	47a8      	blx	r5
   17cd0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17cd2:	4805      	ldr	r0, [pc, #20]	; (17ce8 <settings_save_one+0x40>)
   17cd4:	f011 f9ca 	bl	2906c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   17cd8:	4620      	mov	r0, r4
   17cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   17cde:	f06f 0401 	mvn.w	r4, #1
   17ce2:	e7f9      	b.n	17cd8 <settings_save_one+0x30>
   17ce4:	20021658 	.word	0x20021658
   17ce8:	200206b0 	.word	0x200206b0

00017cec <settings_load_subtree>:
	const struct settings_load_arg arg = {
   17cec:	2300      	movs	r3, #0
{
   17cee:	b530      	push	{r4, r5, lr}
   17cf0:	b085      	sub	sp, #20
   17cf2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   17cf4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17cf8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   17cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cfe:	480b      	ldr	r0, [pc, #44]	; (17d2c <settings_load_subtree+0x40>)
   17d00:	f011 f8d6 	bl	28eb0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   17d04:	4b0a      	ldr	r3, [pc, #40]	; (17d30 <settings_load_subtree+0x44>)
   17d06:	681c      	ldr	r4, [r3, #0]
   17d08:	b134      	cbz	r4, 17d18 <settings_load_subtree+0x2c>
		cs->cs_itf->csi_load(cs, &arg);
   17d0a:	6863      	ldr	r3, [r4, #4]
   17d0c:	4620      	mov	r0, r4
   17d0e:	681b      	ldr	r3, [r3, #0]
   17d10:	a901      	add	r1, sp, #4
   17d12:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17d14:	6824      	ldr	r4, [r4, #0]
	return node->next;
   17d16:	e7f7      	b.n	17d08 <settings_load_subtree+0x1c>
	rc = settings_commit_subtree(subtree);
   17d18:	4628      	mov	r0, r5
   17d1a:	f000 f875 	bl	17e08 <settings_commit_subtree>
   17d1e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17d20:	4802      	ldr	r0, [pc, #8]	; (17d2c <settings_load_subtree+0x40>)
   17d22:	f011 f9a3 	bl	2906c <z_impl_k_mutex_unlock>
}
   17d26:	4620      	mov	r0, r4
   17d28:	b005      	add	sp, #20
   17d2a:	bd30      	pop	{r4, r5, pc}
   17d2c:	200206b0 	.word	0x200206b0
   17d30:	20021650 	.word	0x20021650

00017d34 <settings_store_init>:
	list->head = NULL;
   17d34:	2200      	movs	r2, #0
   17d36:	4b02      	ldr	r3, [pc, #8]	; (17d40 <settings_store_init+0xc>)
	list->tail = NULL;
   17d38:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   17d3c:	4770      	bx	lr
   17d3e:	bf00      	nop
   17d40:	20021650 	.word	0x20021650

00017d44 <settings_init>:
	list->head = NULL;
   17d44:	2200      	movs	r2, #0
   17d46:	4b02      	ldr	r3, [pc, #8]	; (17d50 <settings_init+0xc>)
	list->tail = NULL;
   17d48:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   17d4c:	f7ff bff2 	b.w	17d34 <settings_store_init>
   17d50:	2002165c 	.word	0x2002165c

00017d54 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   17d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17d58:	4d23      	ldr	r5, [pc, #140]	; (17de8 <settings_register+0x94>)
{
   17d5a:	4606      	mov	r6, r0
   17d5c:	46a8      	mov	r8, r5
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17d5e:	4c23      	ldr	r4, [pc, #140]	; (17dec <settings_register+0x98>)
   17d60:	4f23      	ldr	r7, [pc, #140]	; (17df0 <settings_register+0x9c>)
   17d62:	42ac      	cmp	r4, r5
   17d64:	d90c      	bls.n	17d80 <settings_register+0x2c>
   17d66:	4923      	ldr	r1, [pc, #140]	; (17df4 <settings_register+0xa0>)
   17d68:	232b      	movs	r3, #43	; 0x2b
   17d6a:	463a      	mov	r2, r7
   17d6c:	4822      	ldr	r0, [pc, #136]	; (17df8 <settings_register+0xa4>)
   17d6e:	f017 fa70 	bl	2f252 <printk>
   17d72:	4822      	ldr	r0, [pc, #136]	; (17dfc <settings_register+0xa8>)
   17d74:	f017 fa6d 	bl	2f252 <printk>
   17d78:	212b      	movs	r1, #43	; 0x2b
   17d7a:	4638      	mov	r0, r7
   17d7c:	f017 fd6a 	bl	2f854 <assert_post_action>
   17d80:	4544      	cmp	r4, r8
   17d82:	d316      	bcc.n	17db2 <settings_register+0x5e>
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17d84:	4d1e      	ldr	r5, [pc, #120]	; (17e00 <settings_register+0xac>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17d86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17d8a:	481e      	ldr	r0, [pc, #120]	; (17e04 <settings_register+0xb0>)
   17d8c:	f011 f890 	bl	28eb0 <z_impl_k_mutex_lock>
   17d90:	682c      	ldr	r4, [r5, #0]
   17d92:	b9ac      	cbnz	r4, 17dc0 <settings_register+0x6c>
	parent->next = child;
   17d94:	2400      	movs	r4, #0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   17d96:	686a      	ldr	r2, [r5, #4]
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   17d98:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   17d9c:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   17d9e:	b9ca      	cbnz	r2, 17dd4 <settings_register+0x80>
	int rc = 0;
   17da0:	4614      	mov	r4, r2
	list->head = node;
   17da2:	e9c5 3300 	strd	r3, r3, [r5]
	return z_impl_k_mutex_unlock(mutex);
   17da6:	4817      	ldr	r0, [pc, #92]	; (17e04 <settings_register+0xb0>)
   17da8:	f011 f960 	bl	2906c <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   17dac:	4620      	mov	r0, r4
   17dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(handler->name, ch->name) == 0) {
   17db2:	6821      	ldr	r1, [r4, #0]
   17db4:	6830      	ldr	r0, [r6, #0]
   17db6:	f7fa f959 	bl	1206c <strcmp>
   17dba:	b188      	cbz	r0, 17de0 <settings_register+0x8c>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17dbc:	3414      	adds	r4, #20
   17dbe:	e7d0      	b.n	17d62 <settings_register+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17dc0:	3c14      	subs	r4, #20
   17dc2:	2c00      	cmp	r4, #0
   17dc4:	d0e6      	beq.n	17d94 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   17dc6:	6821      	ldr	r1, [r4, #0]
   17dc8:	6830      	ldr	r0, [r6, #0]
   17dca:	f7fa f94f 	bl	1206c <strcmp>
   17dce:	b120      	cbz	r0, 17dda <settings_register+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17dd0:	6964      	ldr	r4, [r4, #20]
	return node->next;
   17dd2:	e7de      	b.n	17d92 <settings_register+0x3e>
	parent->next = child;
   17dd4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17dd6:	606b      	str	r3, [r5, #4]
   17dd8:	e7e5      	b.n	17da6 <settings_register+0x52>
			rc = -EEXIST;
   17dda:	f06f 0410 	mvn.w	r4, #16
   17dde:	e7e2      	b.n	17da6 <settings_register+0x52>
			return -EEXIST;
   17de0:	f06f 0410 	mvn.w	r4, #16
   17de4:	e7e2      	b.n	17dac <settings_register+0x58>
   17de6:	bf00      	nop
   17de8:	000357ec 	.word	0x000357ec
   17dec:	000357ec 	.word	0x000357ec
   17df0:	000371d2 	.word	0x000371d2
   17df4:	00037204 	.word	0x00037204
   17df8:	00036be5 	.word	0x00036be5
   17dfc:	00037104 	.word	0x00037104
   17e00:	2002165c 	.word	0x2002165c
   17e04:	200206b0 	.word	0x200206b0

00017e08 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   17e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e0c:	4f21      	ldr	r7, [pc, #132]	; (17e94 <settings_commit_subtree+0x8c>)
{
   17e0e:	4606      	mov	r6, r0
	rc = 0;
   17e10:	2500      	movs	r5, #0
   17e12:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e14:	4c20      	ldr	r4, [pc, #128]	; (17e98 <settings_commit_subtree+0x90>)
   17e16:	f8df 8094 	ldr.w	r8, [pc, #148]	; 17eac <settings_commit_subtree+0xa4>
   17e1a:	42bc      	cmp	r4, r7
   17e1c:	d90c      	bls.n	17e38 <settings_commit_subtree+0x30>
   17e1e:	491f      	ldr	r1, [pc, #124]	; (17e9c <settings_commit_subtree+0x94>)
   17e20:	23f4      	movs	r3, #244	; 0xf4
   17e22:	4642      	mov	r2, r8
   17e24:	481e      	ldr	r0, [pc, #120]	; (17ea0 <settings_commit_subtree+0x98>)
   17e26:	f017 fa14 	bl	2f252 <printk>
   17e2a:	481e      	ldr	r0, [pc, #120]	; (17ea4 <settings_commit_subtree+0x9c>)
   17e2c:	f017 fa11 	bl	2f252 <printk>
   17e30:	21f4      	movs	r1, #244	; 0xf4
   17e32:	4640      	mov	r0, r8
   17e34:	f017 fd0e 	bl	2f854 <assert_post_action>
   17e38:	454c      	cmp	r4, r9
   17e3a:	d307      	bcc.n	17e4c <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   17e3c:	4b1a      	ldr	r3, [pc, #104]	; (17ea8 <settings_commit_subtree+0xa0>)
   17e3e:	681c      	ldr	r4, [r3, #0]
   17e40:	b10c      	cbz	r4, 17e46 <settings_commit_subtree+0x3e>
   17e42:	3c14      	subs	r4, #20
   17e44:	b9a4      	cbnz	r4, 17e70 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   17e46:	4628      	mov	r0, r5
   17e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e4c:	b91e      	cbnz	r6, 17e56 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   17e4e:	68e3      	ldr	r3, [r4, #12]
   17e50:	b94b      	cbnz	r3, 17e66 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   17e52:	3414      	adds	r4, #20
   17e54:	e7e1      	b.n	17e1a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e56:	2200      	movs	r2, #0
   17e58:	4631      	mov	r1, r6
   17e5a:	6820      	ldr	r0, [r4, #0]
   17e5c:	f017 ff40 	bl	2fce0 <settings_name_steq>
   17e60:	2800      	cmp	r0, #0
   17e62:	d1f4      	bne.n	17e4e <settings_commit_subtree+0x46>
   17e64:	e7f5      	b.n	17e52 <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   17e66:	4798      	blx	r3
				rc = rc2;
   17e68:	2d00      	cmp	r5, #0
   17e6a:	bf08      	it	eq
   17e6c:	4605      	moveq	r5, r0
   17e6e:	e7f0      	b.n	17e52 <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e70:	b91e      	cbnz	r6, 17e7a <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   17e72:	68e3      	ldr	r3, [r4, #12]
   17e74:	b94b      	cbnz	r3, 17e8a <settings_commit_subtree+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17e76:	6964      	ldr	r4, [r4, #20]
   17e78:	e7e2      	b.n	17e40 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   17e7a:	2200      	movs	r2, #0
   17e7c:	4631      	mov	r1, r6
   17e7e:	6820      	ldr	r0, [r4, #0]
   17e80:	f017 ff2e 	bl	2fce0 <settings_name_steq>
   17e84:	2800      	cmp	r0, #0
   17e86:	d1f4      	bne.n	17e72 <settings_commit_subtree+0x6a>
   17e88:	e7f5      	b.n	17e76 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   17e8a:	4798      	blx	r3
				rc = rc2;
   17e8c:	2d00      	cmp	r5, #0
   17e8e:	bf08      	it	eq
   17e90:	4605      	moveq	r5, r0
   17e92:	e7f0      	b.n	17e76 <settings_commit_subtree+0x6e>
   17e94:	000357ec 	.word	0x000357ec
   17e98:	000357ec 	.word	0x000357ec
   17e9c:	00037204 	.word	0x00037204
   17ea0:	00036be5 	.word	0x00036be5
   17ea4:	00037104 	.word	0x00037104
   17ea8:	2002165c 	.word	0x2002165c
   17eac:	000371d2 	.word	0x000371d2

00017eb0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   17eb0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   17eb2:	4c06      	ldr	r4, [pc, #24]	; (17ecc <settings_subsys_init+0x1c>)
   17eb4:	7823      	ldrb	r3, [r4, #0]
   17eb6:	b93b      	cbnz	r3, 17ec8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   17eb8:	f7ff ff44 	bl	17d44 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   17ebc:	f017 ff30 	bl	2fd20 <settings_backend_init>

	if (!err) {
   17ec0:	b908      	cbnz	r0, 17ec6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   17ec2:	2301      	movs	r3, #1
   17ec4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   17ec6:	bd10      	pop	{r4, pc}
		return 0;
   17ec8:	2000      	movs	r0, #0
   17eca:	e7fc      	b.n	17ec6 <settings_subsys_init+0x16>
   17ecc:	20027eef 	.word	0x20027eef

00017ed0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   17ed0:	b508      	push	{r3, lr}
   17ed2:	4604      	mov	r4, r0
	__asm__ volatile(
   17ed4:	f04f 0220 	mov.w	r2, #32
   17ed8:	f3ef 8311 	mrs	r3, BASEPRI
   17edc:	f382 8811 	msr	BASEPRI, r2
   17ee0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   17ee4:	f017 ff52 	bl	2fd8c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   17ee8:	4620      	mov	r0, r4
   17eea:	f001 f8a5 	bl	19038 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   17eee:	4803      	ldr	r0, [pc, #12]	; (17efc <sys_reboot+0x2c>)
   17ef0:	f017 f9af 	bl	2f252 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   17ef4:	f000 ff06 	bl	18d04 <arch_cpu_idle>
   17ef8:	e7fc      	b.n	17ef4 <sys_reboot+0x24>
   17efa:	bf00      	nop
   17efc:	0003722c 	.word	0x0003722c

00017f00 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
   17f00:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f02:	b2cc      	uxtb	r4, r1
   17f04:	2c01      	cmp	r4, #1
{
   17f06:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f08:	d909      	bls.n	17f1e <get_status+0x1e>
   17f0a:	490b      	ldr	r1, [pc, #44]	; (17f38 <get_status+0x38>)
   17f0c:	480b      	ldr	r0, [pc, #44]	; (17f3c <get_status+0x3c>)
   17f0e:	237f      	movs	r3, #127	; 0x7f
   17f10:	4a0b      	ldr	r2, [pc, #44]	; (17f40 <get_status+0x40>)
   17f12:	f017 f99e 	bl	2f252 <printk>
   17f16:	217f      	movs	r1, #127	; 0x7f
   17f18:	4809      	ldr	r0, [pc, #36]	; (17f40 <get_status+0x40>)
   17f1a:	f017 fc9b 	bl	2f854 <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
   17f1e:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   17f20:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
   17f22:	fb04 3101 	mla	r1, r4, r1, r3
   17f26:	7a4b      	ldrb	r3, [r1, #9]
   17f28:	b923      	cbnz	r3, 17f34 <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
   17f2a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   17f2c:	fab0 f080 	clz	r0, r0
   17f30:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
   17f32:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   17f34:	2002      	movs	r0, #2
   17f36:	e7fc      	b.n	17f32 <get_status+0x32>
   17f38:	000372f0 	.word	0x000372f0
   17f3c:	00036be5 	.word	0x00036be5
   17f40:	000372b5 	.word	0x000372b5

00017f44 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   17f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f48:	b2ce      	uxtb	r6, r1
   17f4a:	2e01      	cmp	r6, #1
{
   17f4c:	4680      	mov	r8, r0
   17f4e:	4689      	mov	r9, r1
   17f50:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   17f52:	d909      	bls.n	17f68 <clock_async_start+0x24>
   17f54:	493f      	ldr	r1, [pc, #252]	; (18054 <clock_async_start+0x110>)
   17f56:	4840      	ldr	r0, [pc, #256]	; (18058 <clock_async_start+0x114>)
   17f58:	23ef      	movs	r3, #239	; 0xef
   17f5a:	4a40      	ldr	r2, [pc, #256]	; (1805c <clock_async_start+0x118>)
   17f5c:	f017 f979 	bl	2f252 <printk>
   17f60:	21ef      	movs	r1, #239	; 0xef
   17f62:	483e      	ldr	r0, [pc, #248]	; (1805c <clock_async_start+0x118>)
   17f64:	f017 fc76 	bl	2f854 <assert_post_action>
	config = get_sub_config(dev, type);
   17f68:	f8d8 a004 	ldr.w	sl, [r8, #4]
	clk_data = get_sub_data(dev, type);
   17f6c:	f8d8 700c 	ldr.w	r7, [r8, #12]

	__ASSERT_NO_MSG((data == NULL) ||
   17f70:	2c00      	cmp	r4, #0
   17f72:	d151      	bne.n	18018 <clock_async_start+0xd4>
   17f74:	f04f 0320 	mov.w	r3, #32
   17f78:	f3ef 8b11 	mrs	fp, BASEPRI
   17f7c:	f383 8811 	msr	BASEPRI, r3
   17f80:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   17f84:	230c      	movs	r3, #12
   17f86:	fb06 7303 	mla	r3, r6, r3, r7
   17f8a:	7a1d      	ldrb	r5, [r3, #8]
   17f8c:	3501      	adds	r5, #1
   17f8e:	b2ed      	uxtb	r5, r5
   17f90:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   17f92:	b95d      	cbnz	r5, 17fac <clock_async_start+0x68>
   17f94:	4932      	ldr	r1, [pc, #200]	; (18060 <clock_async_start+0x11c>)
   17f96:	4830      	ldr	r0, [pc, #192]	; (18058 <clock_async_start+0x114>)
   17f98:	f44f 7380 	mov.w	r3, #256	; 0x100
   17f9c:	4a2f      	ldr	r2, [pc, #188]	; (1805c <clock_async_start+0x118>)
   17f9e:	f017 f958 	bl	2f252 <printk>
   17fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
   17fa6:	482d      	ldr	r0, [pc, #180]	; (1805c <clock_async_start+0x118>)
   17fa8:	f017 fc54 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   17fac:	f38b 8811 	msr	BASEPRI, fp
   17fb0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
   17fb4:	b324      	cbz	r4, 18000 <clock_async_start+0xbc>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   17fb6:	2203      	movs	r2, #3
   17fb8:	4b2a      	ldr	r3, [pc, #168]	; (18064 <clock_async_start+0x120>)
   17fba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   17fbe:	220c      	movs	r2, #12
   17fc0:	4372      	muls	r2, r6
   17fc2:	18bb      	adds	r3, r7, r2
   17fc4:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   17fc6:	b989      	cbnz	r1, 17fec <clock_async_start+0xa8>
	__asm__ volatile(
   17fc8:	f04f 0020 	mov.w	r0, #32
   17fcc:	f3ef 8c11 	mrs	ip, BASEPRI
   17fd0:	f380 8811 	msr	BASEPRI, r0
   17fd4:	f3bf 8f6f 	isb	sy
	parent->next = child;
   17fd8:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   17fda:	6858      	ldr	r0, [r3, #4]
   17fdc:	2800      	cmp	r0, #0
   17fde:	d132      	bne.n	18046 <clock_async_start+0x102>
	list->tail = node;
   17fe0:	605c      	str	r4, [r3, #4]
	list->head = node;
   17fe2:	50bc      	str	r4, [r7, r2]
	__asm__ volatile(
   17fe4:	f38c 8811 	msr	BASEPRI, ip
   17fe8:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   17fec:	2203      	movs	r2, #3
   17fee:	4b1d      	ldr	r3, [pc, #116]	; (18064 <clock_async_start+0x120>)
   17ff0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   17ff4:	b121      	cbz	r1, 18000 <clock_async_start+0xbc>
			data->cb(dev, subsys, data->user_data);
   17ff6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17ffa:	4649      	mov	r1, r9
   17ffc:	4640      	mov	r0, r8
   17ffe:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   18000:	2d01      	cmp	r5, #1
   18002:	d107      	bne.n	18014 <clock_async_start+0xd0>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   18004:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18008:	78b3      	ldrb	r3, [r6, #2]
   1800a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1800e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   18012:	601d      	str	r5, [r3, #0]
	}

	return 0;
   18014:	2000      	movs	r0, #0
   18016:	e01b      	b.n	18050 <clock_async_start+0x10c>
	__ASSERT_NO_MSG((data == NULL) ||
   18018:	6863      	ldr	r3, [r4, #4]
   1801a:	b94b      	cbnz	r3, 18030 <clock_async_start+0xec>
   1801c:	4912      	ldr	r1, [pc, #72]	; (18068 <clock_async_start+0x124>)
   1801e:	480e      	ldr	r0, [pc, #56]	; (18058 <clock_async_start+0x114>)
   18020:	23f4      	movs	r3, #244	; 0xf4
   18022:	4a0e      	ldr	r2, [pc, #56]	; (1805c <clock_async_start+0x118>)
   18024:	f017 f915 	bl	2f252 <printk>
   18028:	21f4      	movs	r1, #244	; 0xf4
   1802a:	480c      	ldr	r0, [pc, #48]	; (1805c <clock_async_start+0x118>)
   1802c:	f017 fc12 	bl	2f854 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   18030:	230c      	movs	r3, #12
   18032:	4373      	muls	r3, r6
   18034:	58fb      	ldr	r3, [r7, r3]
		if (item == node) {
   18036:	429c      	cmp	r4, r3
   18038:	d008      	beq.n	1804c <clock_async_start+0x108>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1803a:	2b00      	cmp	r3, #0
   1803c:	d09a      	beq.n	17f74 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1803e:	681b      	ldr	r3, [r3, #0]
	} while (item);
   18040:	2b00      	cmp	r3, #0
   18042:	d1f8      	bne.n	18036 <clock_async_start+0xf2>
   18044:	e796      	b.n	17f74 <clock_async_start+0x30>
	parent->next = child;
   18046:	6004      	str	r4, [r0, #0]
	list->tail = node;
   18048:	605c      	str	r4, [r3, #4]
   1804a:	e7cb      	b.n	17fe4 <clock_async_start+0xa0>
		return -EBUSY;
   1804c:	f06f 000f 	mvn.w	r0, #15
}
   18050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18054:	000372f0 	.word	0x000372f0
   18058:	00036be5 	.word	0x00036be5
   1805c:	000372b5 	.word	0x000372b5
   18060:	000372a3 	.word	0x000372a3
   18064:	40005000 	.word	0x40005000
   18068:	00037255 	.word	0x00037255

0001806c <clock_stop>:
{
   1806c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1806e:	b2cc      	uxtb	r4, r1
   18070:	2c01      	cmp	r4, #1
{
   18072:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18074:	d909      	bls.n	1808a <clock_stop+0x1e>
   18076:	4919      	ldr	r1, [pc, #100]	; (180dc <clock_stop+0x70>)
   18078:	4819      	ldr	r0, [pc, #100]	; (180e0 <clock_stop+0x74>)
   1807a:	2394      	movs	r3, #148	; 0x94
   1807c:	4a19      	ldr	r2, [pc, #100]	; (180e4 <clock_stop+0x78>)
   1807e:	f017 f8e8 	bl	2f252 <printk>
   18082:	2194      	movs	r1, #148	; 0x94
   18084:	4817      	ldr	r0, [pc, #92]	; (180e4 <clock_stop+0x78>)
   18086:	f017 fbe5 	bl	2f854 <assert_post_action>
	config = get_sub_config(dev, type);
   1808a:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
   1808c:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
   1808e:	f04f 0320 	mov.w	r3, #32
   18092:	f3ef 8611 	mrs	r6, BASEPRI
   18096:	f383 8811 	msr	BASEPRI, r3
   1809a:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1809e:	230c      	movs	r3, #12
   180a0:	4363      	muls	r3, r4
   180a2:	18ea      	adds	r2, r5, r3
   180a4:	7a10      	ldrb	r0, [r2, #8]
   180a6:	b1a0      	cbz	r0, 180d2 <clock_stop+0x66>
	data->ref--;
   180a8:	3801      	subs	r0, #1
   180aa:	b2c0      	uxtb	r0, r0
   180ac:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   180ae:	b998      	cbnz	r0, 180d8 <clock_stop+0x6c>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   180b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
	list->head = NULL;
   180b4:	50e8      	str	r0, [r5, r3]
   180b6:	78cb      	ldrb	r3, [r1, #3]
   180b8:	2101      	movs	r1, #1
   180ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   180be:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   180c2:	6050      	str	r0, [r2, #4]
   180c4:	6019      	str	r1, [r3, #0]
		data->started = false;
   180c6:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   180c8:	f386 8811 	msr	BASEPRI, r6
   180cc:	f3bf 8f6f 	isb	sy
}
   180d0:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   180d2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   180d6:	e7f7      	b.n	180c8 <clock_stop+0x5c>
	int err = 0;
   180d8:	2000      	movs	r0, #0
   180da:	e7f5      	b.n	180c8 <clock_stop+0x5c>
   180dc:	000372f0 	.word	0x000372f0
   180e0:	00036be5 	.word	0x00036be5
   180e4:	000372b5 	.word	0x000372b5

000180e8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   180e8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   180ea:	2200      	movs	r2, #0
{
   180ec:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   180ee:	2101      	movs	r1, #1
   180f0:	2005      	movs	r0, #5
   180f2:	f000 fd7d 	bl	18bf0 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   180f6:	2005      	movs	r0, #5
   180f8:	f000 fd6a 	bl	18bd0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   180fc:	2202      	movs	r2, #2
   180fe:	4b07      	ldr	r3, [pc, #28]	; (1811c <clk_init+0x34>)
	list->head = NULL;
   18100:	2000      	movs	r0, #0
   18102:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   18106:	2203      	movs	r2, #3
   18108:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1810c:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   1810e:	e9c3 0000 	strd	r0, r0, [r3]
   18112:	68e3      	ldr	r3, [r4, #12]
   18114:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   18118:	bd10      	pop	{r4, pc}
   1811a:	bf00      	nop
   1811c:	40005000 	.word	0x40005000

00018120 <clkstarted_handle.constprop.9>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   18120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   18122:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18124:	4d11      	ldr	r5, [pc, #68]	; (1816c <clkstarted_handle.constprop.9+0x4c>)
static void clkstarted_handle(struct device *dev,
   18126:	4606      	mov	r6, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18128:	68eb      	ldr	r3, [r5, #12]
	sub_data->started = true;
   1812a:	fb04 3400 	mla	r4, r4, r0, r3
   1812e:	2301      	movs	r3, #1
   18130:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   18132:	f04f 0320 	mov.w	r3, #32
   18136:	f3ef 8111 	mrs	r1, BASEPRI
   1813a:	f383 8811 	msr	BASEPRI, r3
   1813e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   18142:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   18144:	b12b      	cbz	r3, 18152 <clkstarted_handle.constprop.9+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18146:	6860      	ldr	r0, [r4, #4]
   18148:	681a      	ldr	r2, [r3, #0]
   1814a:	4283      	cmp	r3, r0
	list->head = node;
   1814c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1814e:	bf08      	it	eq
   18150:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   18152:	f381 8811 	msr	BASEPRI, r1
   18156:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1815a:	b903      	cbnz	r3, 1815e <clkstarted_handle.constprop.9+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   1815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1815e:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
   18162:	4631      	mov	r1, r6
   18164:	4628      	mov	r0, r5
   18166:	47b8      	blx	r7
   18168:	e7e3      	b.n	18132 <clkstarted_handle.constprop.9+0x12>
   1816a:	bf00      	nop
   1816c:	200204a4 	.word	0x200204a4

00018170 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   18170:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18172:	4b10      	ldr	r3, [pc, #64]	; (181b4 <nrf_power_clock_isr+0x44>)
   18174:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   18176:	b162      	cbz	r2, 18192 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   18178:	4a0f      	ldr	r2, [pc, #60]	; (181b8 <nrf_power_clock_isr+0x48>)
   1817a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1817e:	07d1      	lsls	r1, r2, #31
   18180:	d507      	bpl.n	18192 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18182:	2200      	movs	r2, #0
   18184:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18186:	4b0d      	ldr	r3, [pc, #52]	; (181bc <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   18188:	68db      	ldr	r3, [r3, #12]
   1818a:	7a58      	ldrb	r0, [r3, #9]
   1818c:	b908      	cbnz	r0, 18192 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1818e:	f7ff ffc7 	bl	18120 <clkstarted_handle.constprop.9>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18192:	4b0b      	ldr	r3, [pc, #44]	; (181c0 <nrf_power_clock_isr+0x50>)
   18194:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   18196:	b15a      	cbz	r2, 181b0 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   18198:	4a07      	ldr	r2, [pc, #28]	; (181b8 <nrf_power_clock_isr+0x48>)
   1819a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1819e:	0792      	lsls	r2, r2, #30
   181a0:	d506      	bpl.n	181b0 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181a2:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   181a4:	2001      	movs	r0, #1
   181a6:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   181a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   181ac:	f7ff bfb8 	b.w	18120 <clkstarted_handle.constprop.9>
}
   181b0:	bd08      	pop	{r3, pc}
   181b2:	bf00      	nop
   181b4:	40005100 	.word	0x40005100
   181b8:	40005000 	.word	0x40005000
   181bc:	200204a4 	.word	0x200204a4
   181c0:	40005104 	.word	0x40005104

000181c4 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   181c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181c6:	7b0b      	ldrb	r3, [r1, #12]
{
   181c8:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181ca:	2b02      	cmp	r3, #2
{
   181cc:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   181ce:	d128      	bne.n	18222 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   181d0:	680b      	ldr	r3, [r1, #0]
   181d2:	bb1b      	cbnz	r3, 1821c <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   181d4:	68c2      	ldr	r2, [r0, #12]
	return dev->driver_data;
   181d6:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   181d8:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   181dc:	b9d9      	cbnz	r1, 18216 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   181de:	4914      	ldr	r1, [pc, #80]	; (18230 <wdt_nrf_install_timeout+0x6c>)
   181e0:	1e58      	subs	r0, r3, #1
   181e2:	4288      	cmp	r0, r1
   181e4:	d81a      	bhi.n	1821c <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   181e6:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   181e8:	f10d 0107 	add.w	r1, sp, #7
   181ec:	6860      	ldr	r0, [r4, #4]
   181ee:	f00f ff33 	bl	28058 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   181f2:	4b10      	ldr	r3, [pc, #64]	; (18234 <wdt_nrf_install_timeout+0x70>)
   181f4:	4298      	cmp	r0, r3
   181f6:	d017      	beq.n	18228 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   181f8:	68ab      	ldr	r3, [r5, #8]
   181fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   181fe:	b113      	cbz	r3, 18206 <wdt_nrf_install_timeout+0x42>
   18200:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   18202:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   18206:	68e2      	ldr	r2, [r4, #12]
   18208:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   1820c:	3301      	adds	r3, #1
   1820e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   18212:	b003      	add	sp, #12
   18214:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   18216:	6a12      	ldr	r2, [r2, #32]
   18218:	429a      	cmp	r2, r3
   1821a:	d0e5      	beq.n	181e8 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   1821c:	f06f 0015 	mvn.w	r0, #21
   18220:	e7f7      	b.n	18212 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   18222:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18226:	e7f4      	b.n	18212 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   18228:	f06f 000b 	mvn.w	r0, #11
   1822c:	e7f1      	b.n	18212 <wdt_nrf_install_timeout+0x4e>
   1822e:	bf00      	nop
   18230:	07cffffe 	.word	0x07cffffe
   18234:	0bad0002 	.word	0x0bad0002

00018238 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   18238:	b510      	push	{r4, lr}
   1823a:	4604      	mov	r4, r0
   1823c:	2200      	movs	r2, #0
   1823e:	2101      	movs	r1, #1
   18240:	2018      	movs	r0, #24
   18242:	f000 fcd5 	bl	18bf0 <z_arm_irq_priority_set>
   18246:	6860      	ldr	r0, [r4, #4]
   18248:	4a05      	ldr	r2, [pc, #20]	; (18260 <wdt_0_init+0x28>)
   1824a:	f100 0108 	add.w	r1, r0, #8
   1824e:	f00f fe79 	bl	27f44 <nrfx_wdt_init>
   18252:	4b04      	ldr	r3, [pc, #16]	; (18264 <wdt_0_init+0x2c>)
   18254:	4298      	cmp	r0, r3
   18256:	bf14      	ite	ne
   18258:	f06f 000f 	mvnne.w	r0, #15
   1825c:	2000      	moveq	r0, #0
   1825e:	bd10      	pop	{r4, pc}
   18260:	00018269 	.word	0x00018269
   18264:	0bad0000 	.word	0x0bad0000

00018268 <wdt_0_event_handler>:
   18268:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   1826a:	2400      	movs	r4, #0
   1826c:	4d0a      	ldr	r5, [pc, #40]	; (18298 <wdt_0_event_handler+0x30>)
   1826e:	68ea      	ldr	r2, [r5, #12]
   18270:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   18274:	429c      	cmp	r4, r3
   18276:	db00      	blt.n	1827a <wdt_0_event_handler+0x12>
WDT_NRFX_WDT_DEVICE(0);
   18278:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   1827a:	686b      	ldr	r3, [r5, #4]
   1827c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   1827e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   18282:	40e3      	lsrs	r3, r4
   18284:	07db      	lsls	r3, r3, #31
   18286:	d505      	bpl.n	18294 <wdt_0_event_handler+0x2c>
			if (get_dev_data(dev)->m_callbacks[i]) {
   18288:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1828c:	b113      	cbz	r3, 18294 <wdt_0_event_handler+0x2c>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   1828e:	4621      	mov	r1, r4
   18290:	4628      	mov	r0, r5
   18292:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   18294:	3401      	adds	r4, #1
   18296:	e7ea      	b.n	1826e <wdt_0_event_handler+0x6>
   18298:	200204b4 	.word	0x200204b4

0001829c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1829c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1829e:	4c06      	ldr	r4, [pc, #24]	; (182b8 <z_clock_isr+0x1c>)
   182a0:	4906      	ldr	r1, [pc, #24]	; (182bc <z_clock_isr+0x20>)
   182a2:	4622      	mov	r2, r4
   182a4:	4806      	ldr	r0, [pc, #24]	; (182c0 <z_clock_isr+0x24>)
   182a6:	2317      	movs	r3, #23
   182a8:	f016 ffd3 	bl	2f252 <printk>
   182ac:	4620      	mov	r0, r4
}
   182ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   182b2:	2117      	movs	r1, #23
   182b4:	f017 bace 	b.w	2f854 <assert_post_action>
   182b8:	00037324 	.word	0x00037324
   182bc:	00038ae7 	.word	0x00038ae7
   182c0:	00036be5 	.word	0x00036be5

000182c4 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   182c4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   182c6:	4b08      	ldr	r3, [pc, #32]	; (182e8 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   182c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   182cc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   182d0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   182d4:	4290      	cmp	r0, r2
   182d6:	d100      	bne.n	182da <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   182d8:	4770      	bx	lr
   182da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   182de:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   182e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   182e4:	e7f2      	b.n	182cc <handle_next_tick_case+0x8>
   182e6:	bf00      	nop
   182e8:	40015000 	.word	0x40015000

000182ec <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   182ec:	2200      	movs	r2, #0
   182ee:	4b06      	ldr	r3, [pc, #24]	; (18308 <rtc1_nrf_isr+0x1c>)
   182f0:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   182f2:	4a06      	ldr	r2, [pc, #24]	; (1830c <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   182f4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   182f8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   182fa:	1ac0      	subs	r0, r0, r3
   182fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   18300:	4403      	add	r3, r0
   18302:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   18304:	f013 b89a 	b.w	2b43c <z_clock_announce>
   18308:	40015140 	.word	0x40015140
   1830c:	200216a4 	.word	0x200216a4

00018310 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   18310:	b538      	push	{r3, r4, r5, lr}
   18312:	4814      	ldr	r0, [pc, #80]	; (18364 <z_clock_driver_init+0x54>)
   18314:	f00f ff34 	bl	28180 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   18318:	b300      	cbz	r0, 1835c <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1831a:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1831c:	2400      	movs	r4, #0
   1831e:	681b      	ldr	r3, [r3, #0]
   18320:	2101      	movs	r1, #1
   18322:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18324:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   18328:	4d0f      	ldr	r5, [pc, #60]	; (18368 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1832a:	4b10      	ldr	r3, [pc, #64]	; (1836c <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   1832c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18330:	601c      	str	r4, [r3, #0]
   18332:	4b0f      	ldr	r3, [pc, #60]	; (18370 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   18334:	2101      	movs	r1, #1
   18336:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   1833a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1833e:	4622      	mov	r2, r4
   18340:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   18344:	2015      	movs	r0, #21
   18346:	f000 fc53 	bl	18bf0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1834a:	2015      	movs	r0, #21
   1834c:	f000 fc40 	bl	18bd0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18350:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   18352:	4620      	mov	r0, r4
   18354:	4a07      	ldr	r2, [pc, #28]	; (18374 <z_clock_driver_init+0x64>)
   18356:	6013      	str	r3, [r2, #0]
   18358:	602b      	str	r3, [r5, #0]
}
   1835a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1835c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18360:	e7fb      	b.n	1835a <z_clock_driver_init+0x4a>
   18362:	bf00      	nop
   18364:	00037314 	.word	0x00037314
   18368:	40015000 	.word	0x40015000
   1836c:	40015140 	.word	0x40015140
   18370:	e000e100 	.word	0xe000e100
   18374:	40015008 	.word	0x40015008

00018378 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   18378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   1837a:	4b2c      	ldr	r3, [pc, #176]	; (1842c <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1837c:	4c2c      	ldr	r4, [pc, #176]	; (18430 <z_clock_set_timeout+0xb8>)
   1837e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   18382:	4b2c      	ldr	r3, [pc, #176]	; (18434 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18384:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18388:	bf08      	it	eq
   1838a:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   1838c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1838e:	1a52      	subs	r2, r2, r1
   18390:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   18394:	0212      	lsls	r2, r2, #8
   18396:	d436      	bmi.n	18406 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   18398:	3801      	subs	r0, #1
   1839a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1839e:	42a0      	cmp	r0, r4
   183a0:	bfa8      	it	ge
   183a2:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   183a4:	3301      	adds	r3, #1
   183a6:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   183a8:	42a0      	cmp	r0, r4
   183aa:	bf94      	ite	ls
   183ac:	180c      	addls	r4, r1, r0
   183ae:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   183b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183b4:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   183b6:	4b1d      	ldr	r3, [pc, #116]	; (1842c <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183b8:	4e1f      	ldr	r6, [pc, #124]	; (18438 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   183ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   183be:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   183c2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   183c6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   183ca:	1a52      	subs	r2, r2, r1
   183cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   183d0:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183d2:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   183d4:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   183d8:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   183dc:	461d      	mov	r5, r3
	if (counter_sub(prev_val, now) == 1) {
   183de:	d103      	bne.n	183e8 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   183e0:	200f      	movs	r0, #15
   183e2:	f01c f9da 	bl	3479a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   183e6:	6037      	str	r7, [r6, #0]
   183e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   183ec:	4b13      	ldr	r3, [pc, #76]	; (1843c <z_clock_set_timeout+0xc4>)
   183ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   183f2:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   183f6:	1a23      	subs	r3, r4, r0
   183f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   183fc:	2b01      	cmp	r3, #1
   183fe:	d104      	bne.n	1840a <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   18400:	f7ff ff60 	bl	182c4 <handle_next_tick_case>
   18404:	e00b      	b.n	1841e <z_clock_set_timeout+0xa6>
		ticks = 0;
   18406:	2000      	movs	r0, #0
   18408:	e7cc      	b.n	183a4 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1840a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1840e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   18412:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18416:	1a24      	subs	r4, r4, r0
   18418:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   1841a:	0223      	lsls	r3, r4, #8
   1841c:	d4f0      	bmi.n	18400 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   1841e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18422:	4b02      	ldr	r3, [pc, #8]	; (1842c <z_clock_set_timeout+0xb4>)
   18424:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   18428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1842a:	bf00      	nop
   1842c:	40015000 	.word	0x40015000
   18430:	007fffff 	.word	0x007fffff
   18434:	200216a4 	.word	0x200216a4
   18438:	40015140 	.word	0x40015140
   1843c:	e000e100 	.word	0xe000e100

00018440 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   18440:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18442:	f04f 0320 	mov.w	r3, #32
   18446:	f3ef 8511 	mrs	r5, BASEPRI
   1844a:	f383 8811 	msr	BASEPRI, r3
   1844e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18452:	481a      	ldr	r0, [pc, #104]	; (184bc <z_clock_elapsed+0x7c>)
   18454:	f012 fc96 	bl	2ad84 <z_spin_lock_valid>
   18458:	b968      	cbnz	r0, 18476 <z_clock_elapsed+0x36>
   1845a:	235c      	movs	r3, #92	; 0x5c
   1845c:	4a18      	ldr	r2, [pc, #96]	; (184c0 <z_clock_elapsed+0x80>)
   1845e:	4919      	ldr	r1, [pc, #100]	; (184c4 <z_clock_elapsed+0x84>)
   18460:	4819      	ldr	r0, [pc, #100]	; (184c8 <z_clock_elapsed+0x88>)
   18462:	f016 fef6 	bl	2f252 <printk>
   18466:	4915      	ldr	r1, [pc, #84]	; (184bc <z_clock_elapsed+0x7c>)
   18468:	4818      	ldr	r0, [pc, #96]	; (184cc <z_clock_elapsed+0x8c>)
   1846a:	f016 fef2 	bl	2f252 <printk>
   1846e:	215c      	movs	r1, #92	; 0x5c
   18470:	4813      	ldr	r0, [pc, #76]	; (184c0 <z_clock_elapsed+0x80>)
   18472:	f017 f9ef 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   18476:	4811      	ldr	r0, [pc, #68]	; (184bc <z_clock_elapsed+0x7c>)
   18478:	f012 fca2 	bl	2adc0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1847c:	4b14      	ldr	r3, [pc, #80]	; (184d0 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1847e:	480f      	ldr	r0, [pc, #60]	; (184bc <z_clock_elapsed+0x7c>)
   18480:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   18484:	4b13      	ldr	r3, [pc, #76]	; (184d4 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   18486:	681b      	ldr	r3, [r3, #0]
   18488:	1ae4      	subs	r4, r4, r3
   1848a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1848e:	f012 fc87 	bl	2ada0 <z_spin_unlock_valid>
   18492:	b968      	cbnz	r0, 184b0 <z_clock_elapsed+0x70>
   18494:	2384      	movs	r3, #132	; 0x84
   18496:	4a0a      	ldr	r2, [pc, #40]	; (184c0 <z_clock_elapsed+0x80>)
   18498:	490f      	ldr	r1, [pc, #60]	; (184d8 <z_clock_elapsed+0x98>)
   1849a:	480b      	ldr	r0, [pc, #44]	; (184c8 <z_clock_elapsed+0x88>)
   1849c:	f016 fed9 	bl	2f252 <printk>
   184a0:	4906      	ldr	r1, [pc, #24]	; (184bc <z_clock_elapsed+0x7c>)
   184a2:	480e      	ldr	r0, [pc, #56]	; (184dc <z_clock_elapsed+0x9c>)
   184a4:	f016 fed5 	bl	2f252 <printk>
   184a8:	2184      	movs	r1, #132	; 0x84
   184aa:	4805      	ldr	r0, [pc, #20]	; (184c0 <z_clock_elapsed+0x80>)
   184ac:	f017 f9d2 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   184b0:	f385 8811 	msr	BASEPRI, r5
   184b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   184b8:	4620      	mov	r0, r4
   184ba:	bd38      	pop	{r3, r4, r5, pc}
   184bc:	200216a8 	.word	0x200216a8
   184c0:	00036fbb 	.word	0x00036fbb
   184c4:	00036fe1 	.word	0x00036fe1
   184c8:	00036be5 	.word	0x00036be5
   184cc:	00036ff6 	.word	0x00036ff6
   184d0:	40015000 	.word	0x40015000
   184d4:	200216a4 	.word	0x200216a4
   184d8:	0003700e 	.word	0x0003700e
   184dc:	00037025 	.word	0x00037025

000184e0 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   184e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   184e2:	f04f 0320 	mov.w	r3, #32
   184e6:	f3ef 8511 	mrs	r5, BASEPRI
   184ea:	f383 8811 	msr	BASEPRI, r3
   184ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184f2:	481b      	ldr	r0, [pc, #108]	; (18560 <z_timer_cycle_get_32+0x80>)
   184f4:	f012 fc46 	bl	2ad84 <z_spin_lock_valid>
   184f8:	b968      	cbnz	r0, 18516 <z_timer_cycle_get_32+0x36>
   184fa:	235c      	movs	r3, #92	; 0x5c
   184fc:	4a19      	ldr	r2, [pc, #100]	; (18564 <z_timer_cycle_get_32+0x84>)
   184fe:	491a      	ldr	r1, [pc, #104]	; (18568 <z_timer_cycle_get_32+0x88>)
   18500:	481a      	ldr	r0, [pc, #104]	; (1856c <z_timer_cycle_get_32+0x8c>)
   18502:	f016 fea6 	bl	2f252 <printk>
   18506:	4916      	ldr	r1, [pc, #88]	; (18560 <z_timer_cycle_get_32+0x80>)
   18508:	4819      	ldr	r0, [pc, #100]	; (18570 <z_timer_cycle_get_32+0x90>)
   1850a:	f016 fea2 	bl	2f252 <printk>
   1850e:	215c      	movs	r1, #92	; 0x5c
   18510:	4814      	ldr	r0, [pc, #80]	; (18564 <z_timer_cycle_get_32+0x84>)
   18512:	f017 f99f 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   18516:	4812      	ldr	r0, [pc, #72]	; (18560 <z_timer_cycle_get_32+0x80>)
   18518:	f012 fc52 	bl	2adc0 <z_spin_lock_set_owner>
   1851c:	4b15      	ldr	r3, [pc, #84]	; (18574 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1851e:	4810      	ldr	r0, [pc, #64]	; (18560 <z_timer_cycle_get_32+0x80>)
   18520:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   18524:	4b14      	ldr	r3, [pc, #80]	; (18578 <z_timer_cycle_get_32+0x98>)
   18526:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   18528:	1ae4      	subs	r4, r4, r3
   1852a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1852e:	441c      	add	r4, r3
   18530:	f012 fc36 	bl	2ada0 <z_spin_unlock_valid>
   18534:	b968      	cbnz	r0, 18552 <z_timer_cycle_get_32+0x72>
   18536:	2384      	movs	r3, #132	; 0x84
   18538:	4a0a      	ldr	r2, [pc, #40]	; (18564 <z_timer_cycle_get_32+0x84>)
   1853a:	4910      	ldr	r1, [pc, #64]	; (1857c <z_timer_cycle_get_32+0x9c>)
   1853c:	480b      	ldr	r0, [pc, #44]	; (1856c <z_timer_cycle_get_32+0x8c>)
   1853e:	f016 fe88 	bl	2f252 <printk>
   18542:	4907      	ldr	r1, [pc, #28]	; (18560 <z_timer_cycle_get_32+0x80>)
   18544:	480e      	ldr	r0, [pc, #56]	; (18580 <z_timer_cycle_get_32+0xa0>)
   18546:	f016 fe84 	bl	2f252 <printk>
   1854a:	2184      	movs	r1, #132	; 0x84
   1854c:	4805      	ldr	r0, [pc, #20]	; (18564 <z_timer_cycle_get_32+0x84>)
   1854e:	f017 f981 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   18552:	f385 8811 	msr	BASEPRI, r5
   18556:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1855a:	4620      	mov	r0, r4
   1855c:	bd38      	pop	{r3, r4, r5, pc}
   1855e:	bf00      	nop
   18560:	200216a8 	.word	0x200216a8
   18564:	00036fbb 	.word	0x00036fbb
   18568:	00036fe1 	.word	0x00036fe1
   1856c:	00036be5 	.word	0x00036be5
   18570:	00036ff6 	.word	0x00036ff6
   18574:	40015000 	.word	0x40015000
   18578:	200216a4 	.word	0x200216a4
   1857c:	0003700e 	.word	0x0003700e
   18580:	00037025 	.word	0x00037025

00018584 <uECC_set_rng>:
static uECC_RNG_Function g_rng_function = 0;
#endif

void uECC_set_rng(uECC_RNG_Function rng_function)
{
	g_rng_function = rng_function;
   18584:	4b01      	ldr	r3, [pc, #4]	; (1858c <uECC_set_rng+0x8>)
   18586:	6018      	str	r0, [r3, #0]
}
   18588:	4770      	bx	lr
   1858a:	bf00      	nop
   1858c:	200200a8 	.word	0x200200a8

00018590 <uECC_get_rng>:

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   18590:	4b01      	ldr	r3, [pc, #4]	; (18598 <uECC_get_rng+0x8>)
   18592:	6818      	ldr	r0, [r3, #0]
   18594:	4770      	bx	lr
   18596:	bf00      	nop
   18598:	200200a8 	.word	0x200200a8

0001859c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   1859c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1859e:	2208      	movs	r2, #8
{
   185a0:	b089      	sub	sp, #36	; 0x24
   185a2:	460c      	mov	r4, r1
   185a4:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   185a6:	f017 fe2b 	bl	30200 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   185aa:	2700      	movs	r7, #0
	tmp[3] = product[11];
   185ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[4] = product[12];
	tmp[5] = product[13];
	tmp[6] = product[14];
	tmp[7] = product[15];
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185ae:	466a      	mov	r2, sp
	tmp[3] = product[11];
   185b0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   185b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185b4:	4668      	mov	r0, sp
	tmp[4] = product[12];
   185b6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   185b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	tmp[0] = tmp[1] = tmp[2] = 0;
   185ba:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[5] = product[13];
   185be:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   185c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
   185c2:	9700      	str	r7, [sp, #0]
	tmp[6] = product[14];
   185c4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   185c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185c8:	4669      	mov	r1, sp
	tmp[7] = product[15];
   185ca:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185cc:	2308      	movs	r3, #8
   185ce:	f017 fd1c 	bl	3000a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185d2:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185d4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185d6:	466a      	mov	r2, sp
   185d8:	4631      	mov	r1, r6
   185da:	4630      	mov	r0, r6
   185dc:	f017 fd15 	bl	3000a <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   185e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   185e2:	4405      	add	r5, r0
	tmp[3] = product[12];
   185e4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   185e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185e8:	466a      	mov	r2, sp
	tmp[4] = product[13];
   185ea:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   185ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185ee:	4669      	mov	r1, sp
	tmp[5] = product[14];
   185f0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   185f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185f4:	4668      	mov	r0, sp
	tmp[7] = 0;
   185f6:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   185fa:	2308      	movs	r3, #8
   185fc:	f017 fd05 	bl	3000a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18600:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   18602:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18604:	2308      	movs	r3, #8
   18606:	466a      	mov	r2, sp
   18608:	4630      	mov	r0, r6
   1860a:	f017 fcfe 	bl	3000a <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   1860e:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18610:	4405      	add	r5, r0
	tmp[0] = product[8];
   18612:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   18614:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
	tmp[7] = product[15];
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18616:	466a      	mov	r2, sp
	tmp[1] = product[9];
   18618:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   1861a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1861c:	4630      	mov	r0, r6
	tmp[2] = product[10];
   1861e:	9302      	str	r3, [sp, #8]
	tmp[6] = product[14];
   18620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = tmp[4] = tmp[5] = 0;
   18622:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[14];
   18626:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   18628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = tmp[4] = tmp[5] = 0;
   1862a:	9703      	str	r7, [sp, #12]
	tmp[7] = product[15];
   1862c:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1862e:	2308      	movs	r3, #8
   18630:	f017 fceb 	bl	3000a <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   18634:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   18636:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[0] = product[9];
   18638:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   1863a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[4] = product[14];
   1863c:	9204      	str	r2, [sp, #16]
	tmp[1] = product[10];
   1863e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   18640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[5] = product[15];
   18642:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[2] = product[11];
   18644:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   18646:	6b63      	ldr	r3, [r4, #52]	; 0x34
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18648:	4405      	add	r5, r0
	tmp[6] = product[13];
   1864a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[3] = product[13];
   1864e:	9303      	str	r3, [sp, #12]
	tmp[7] = product[8];
   18650:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18652:	466a      	mov	r2, sp
	tmp[7] = product[8];
   18654:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18656:	4630      	mov	r0, r6
   18658:	2308      	movs	r3, #8
   1865a:	f017 fcd6 	bl	3000a <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   1865e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   18660:	4405      	add	r5, r0
	tmp[0] = product[11];
   18662:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   18664:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
	tmp[7] = product[10];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18666:	466a      	mov	r2, sp
	tmp[1] = product[12];
   18668:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   1866a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1866c:	4630      	mov	r0, r6
	tmp[2] = product[13];
   1866e:	9302      	str	r3, [sp, #8]
	tmp[6] = product[8];
   18670:	6a23      	ldr	r3, [r4, #32]
	tmp[3] = tmp[4] = tmp[5] = 0;
   18672:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[8];
   18676:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   18678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[3] = tmp[4] = tmp[5] = 0;
   1867a:	9703      	str	r7, [sp, #12]
	tmp[7] = product[10];
   1867c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1867e:	2308      	movs	r3, #8
   18680:	f017 fde1 	bl	30246 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   18684:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18686:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[12];
   18688:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   1868a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1868c:	466a      	mov	r2, sp
	tmp[1] = product[13];
   1868e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   18690:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   18692:	4630      	mov	r0, r6
	tmp[2] = product[14];
   18694:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   18696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[4] = tmp[5] = 0;
   18698:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[3] = product[15];
   1869c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
   1869e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   186a0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   186a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   186a4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186a6:	2308      	movs	r3, #8
   186a8:	f017 fdcd 	bl	30246 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   186ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186ae:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[13];
   186b0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   186b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186b4:	466a      	mov	r2, sp
	tmp[1] = product[14];
   186b6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   186b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186ba:	4630      	mov	r0, r6
	tmp[2] = product[15];
   186bc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   186be:	6a23      	ldr	r3, [r4, #32]
   186c0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   186c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   186c4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   186c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   186c8:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   186cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   186ce:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186d0:	2308      	movs	r3, #8
   186d2:	f017 fdb8 	bl	30246 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   186d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186d8:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
   186da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   186dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186de:	466a      	mov	r2, sp
	tmp[2] = 0;
   186e0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   186e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186e6:	4630      	mov	r0, r6
	tmp[3] = product[9];
   186e8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   186ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   186ec:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   186ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   186f0:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   186f4:	6b63      	ldr	r3, [r4, #52]	; 0x34

	if (carry < 0) {
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   186f6:	4c10      	ldr	r4, [pc, #64]	; (18738 <vli_mmod_fast_secp256r1+0x19c>)
	tmp[7] = product[13];
   186f8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   186fa:	2308      	movs	r3, #8
   186fc:	f017 fda3 	bl	30246 <uECC_vli_sub>
	if (carry < 0) {
   18700:	1a2d      	subs	r5, r5, r0
   18702:	d40f      	bmi.n	18724 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
   18704:	b935      	cbnz	r5, 18714 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   18706:	2208      	movs	r2, #8
   18708:	4631      	mov	r1, r6
   1870a:	4620      	mov	r0, r4
   1870c:	f017 fd84 	bl	30218 <uECC_vli_cmp_unsafe>
		while (carry || 
   18710:	2801      	cmp	r0, #1
   18712:	d00f      	beq.n	18734 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   18714:	2308      	movs	r3, #8
   18716:	4622      	mov	r2, r4
   18718:	4631      	mov	r1, r6
   1871a:	4630      	mov	r0, r6
   1871c:	f017 fd93 	bl	30246 <uECC_vli_sub>
   18720:	1a2d      	subs	r5, r5, r0
   18722:	e7ef      	b.n	18704 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   18724:	2308      	movs	r3, #8
   18726:	4622      	mov	r2, r4
   18728:	4631      	mov	r1, r6
   1872a:	4630      	mov	r0, r6
   1872c:	f017 fc6d 	bl	3000a <uECC_vli_add>
		while (carry < 0);
   18730:	182d      	adds	r5, r5, r0
   18732:	d4f7      	bmi.n	18724 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
   18734:	b009      	add	sp, #36	; 0x24
   18736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18738:	00035a54 	.word	0x00035a54

0001873c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1873c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1873e:	4607      	mov	r7, r0
   18740:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   18742:	4e27      	ldr	r6, [pc, #156]	; (187e0 <tc_aes128_set_encrypt_key+0xa4>)
   18744:	ad01      	add	r5, sp, #4
{
   18746:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   18748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1874a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1874c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1874e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18750:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18754:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   18758:	2f00      	cmp	r7, #0
   1875a:	d03d      	beq.n	187d8 <tc_aes128_set_encrypt_key+0x9c>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1875c:	2c00      	cmp	r4, #0
   1875e:	d03d      	beq.n	187dc <tc_aes128_set_encrypt_key+0xa0>
   18760:	1f38      	subs	r0, r7, #4
   18762:	4602      	mov	r2, r0
   18764:	4621      	mov	r1, r4
   18766:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18768:	784b      	ldrb	r3, [r1, #1]
   1876a:	780d      	ldrb	r5, [r1, #0]
   1876c:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1876e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   18772:	78cd      	ldrb	r5, [r1, #3]
   18774:	3104      	adds	r1, #4
   18776:	432b      	orrs	r3, r5
   18778:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   1877c:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1877e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18782:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   18786:	d1ef      	bne.n	18768 <tc_aes128_set_encrypt_key+0x2c>
   18788:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1878a:	4c16      	ldr	r4, [pc, #88]	; (187e4 <tc_aes128_set_encrypt_key+0xa8>)
		if ((i % Nk) == 0) {
   1878c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1878e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   18790:	d118      	bne.n	187c4 <tc_aes128_set_encrypt_key+0x88>
	return (((a) >> 24)|((a) << 8));
   18792:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   18796:	0e1a      	lsrs	r2, r3, #24
   18798:	5ca5      	ldrb	r5, [r4, r2]
   1879a:	b2da      	uxtb	r2, r3
   1879c:	5ca2      	ldrb	r2, [r4, r2]
   1879e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   187a2:	f3c3 4507 	ubfx	r5, r3, #16, #8
   187a6:	5d65      	ldrb	r5, [r4, r5]
   187a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   187ac:	5ce3      	ldrb	r3, [r4, r3]
   187ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   187b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   187b6:	ad0c      	add	r5, sp, #48	; 0x30
   187b8:	f021 0303 	bic.w	r3, r1, #3
   187bc:	442b      	add	r3, r5
   187be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   187c2:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   187c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   187c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   187ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   187cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   187ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   187d0:	d1dc      	bne.n	1878c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   187d2:	2001      	movs	r0, #1
}
   187d4:	b00d      	add	sp, #52	; 0x34
   187d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   187d8:	4638      	mov	r0, r7
   187da:	e7fb      	b.n	187d4 <tc_aes128_set_encrypt_key+0x98>
   187dc:	4620      	mov	r0, r4
   187de:	e7f9      	b.n	187d4 <tc_aes128_set_encrypt_key+0x98>
   187e0:	00035878 	.word	0x00035878
   187e4:	00037356 	.word	0x00037356

000187e8 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   187e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187ec:	4615      	mov	r5, r2
   187ee:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   187f0:	4607      	mov	r7, r0
   187f2:	2800      	cmp	r0, #0
   187f4:	d059      	beq.n	188aa <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   187f6:	2900      	cmp	r1, #0
   187f8:	d05a      	beq.n	188b0 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   187fa:	2a00      	cmp	r2, #0
   187fc:	d05a      	beq.n	188b4 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   187fe:	2310      	movs	r3, #16
   18800:	460a      	mov	r2, r1
   18802:	4668      	mov	r0, sp
   18804:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   18806:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 188b8 <tc_aes_encrypt+0xd0>
	(void)_copy(state, sizeof(state), in, sizeof(state));
   1880a:	f017 fac0 	bl	2fd8e <_copy>
	add_round_key(state, s->words);
   1880e:	4629      	mov	r1, r5
   18810:	4668      	mov	r0, sp
   18812:	f018 f9d0 	bl	30bb6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   18816:	46c8      	mov	r8, r9
   18818:	f105 0610 	add.w	r6, r5, #16
   1881c:	35a0      	adds	r5, #160	; 0xa0
   1881e:	466c      	mov	r4, sp
{
   18820:	466a      	mov	r2, sp
   18822:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   18824:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   18826:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   18828:	f819 1001 	ldrb.w	r1, [r9, r1]
   1882c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   18830:	d1f8      	bne.n	18824 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
   18832:	4668      	mov	r0, sp
   18834:	f018 fa04 	bl	30c40 <shift_rows>
	mult_row_column(t, s);
   18838:	4669      	mov	r1, sp
   1883a:	a804      	add	r0, sp, #16
   1883c:	f018 fa39 	bl	30cb2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   18840:	a901      	add	r1, sp, #4
   18842:	a805      	add	r0, sp, #20
   18844:	f018 fa35 	bl	30cb2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   18848:	a902      	add	r1, sp, #8
   1884a:	a806      	add	r0, sp, #24
   1884c:	f018 fa31 	bl	30cb2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   18850:	a903      	add	r1, sp, #12
   18852:	a807      	add	r0, sp, #28
   18854:	f018 fa2d 	bl	30cb2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18858:	2310      	movs	r3, #16
   1885a:	4668      	mov	r0, sp
   1885c:	4619      	mov	r1, r3
   1885e:	eb0d 0203 	add.w	r2, sp, r3
   18862:	f017 fa94 	bl	2fd8e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   18866:	4631      	mov	r1, r6
   18868:	4668      	mov	r0, sp
   1886a:	3610      	adds	r6, #16
   1886c:	f018 f9a3 	bl	30bb6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   18870:	42ae      	cmp	r6, r5
   18872:	d1d4      	bne.n	1881e <tc_aes_encrypt+0x36>
   18874:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
   18876:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   18878:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
   1887a:	f818 3003 	ldrb.w	r3, [r8, r3]
   1887e:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   18882:	d1f8      	bne.n	18876 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
   18884:	4668      	mov	r0, sp
   18886:	f018 f9db 	bl	30c40 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1888a:	4629      	mov	r1, r5
   1888c:	4668      	mov	r0, sp
   1888e:	f018 f992 	bl	30bb6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18892:	2310      	movs	r3, #16
   18894:	466a      	mov	r2, sp
   18896:	4619      	mov	r1, r3
   18898:	4638      	mov	r0, r7
   1889a:	f017 fa78 	bl	2fd8e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1889e:	4668      	mov	r0, sp
   188a0:	2210      	movs	r2, #16
   188a2:	4631      	mov	r1, r6
   188a4:	f017 fa80 	bl	2fda8 <_set>

	return TC_CRYPTO_SUCCESS;
   188a8:	2001      	movs	r0, #1
}
   188aa:	b009      	add	sp, #36	; 0x24
   188ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   188b0:	4608      	mov	r0, r1
   188b2:	e7fa      	b.n	188aa <tc_aes_encrypt+0xc2>
   188b4:	4610      	mov	r0, r2
   188b6:	e7f8      	b.n	188aa <tc_aes_encrypt+0xc2>
   188b8:	00037356 	.word	0x00037356

000188bc <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   188bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188c0:	6803      	ldr	r3, [r0, #0]
{
   188c2:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188c4:	9302      	str	r3, [sp, #8]
   188c6:	6843      	ldr	r3, [r0, #4]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188c8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188ca:	9303      	str	r3, [sp, #12]
   188cc:	6883      	ldr	r3, [r0, #8]
{
   188ce:	9100      	str	r1, [sp, #0]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188d0:	9304      	str	r3, [sp, #16]
   188d2:	68c3      	ldr	r3, [r0, #12]
   188d4:	4965      	ldr	r1, [pc, #404]	; (18a6c <compress+0x1b0>)
   188d6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188d8:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188da:	9c02      	ldr	r4, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188dc:	9306      	str	r3, [sp, #24]
   188de:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188e0:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188e4:	9307      	str	r3, [sp, #28]
   188e6:	6983      	ldr	r3, [r0, #24]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   188e8:	e9dd 6a03 	ldrd	r6, sl, [sp, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   188ec:	9308      	str	r3, [sp, #32]
   188ee:	69c3      	ldr	r3, [r0, #28]
   188f0:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
   188f4:	4698      	mov	r8, r3
   188f6:	9309      	str	r3, [sp, #36]	; 0x24
	n = (((unsigned int)(*((*c)++))) << 24);
   188f8:	9b00      	ldr	r3, [sp, #0]
   188fa:	59dd      	ldr	r5, [r3, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
   188fc:	ab0c      	add	r3, sp, #48	; 0x30
   188fe:	ba2d      	rev	r5, r5
   18900:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   18902:	f851 3b04 	ldr.w	r3, [r1], #4
   18906:	3704      	adds	r7, #4
   18908:	eb05 0903 	add.w	r9, r5, r3
   1890c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   18910:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   18914:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   18918:	444d      	add	r5, r9
   1891a:	ea2b 0302 	bic.w	r3, fp, r2
   1891e:	ea02 090c 	and.w	r9, r2, ip
   18922:	ea83 0309 	eor.w	r3, r3, r9
   18926:	442b      	add	r3, r5
   18928:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   1892a:	ea86 050a 	eor.w	r5, r6, sl
	return (((a) >> n) | ((a) << (32 - n)));
   1892e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   18932:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   18936:	4025      	ands	r5, r4
   18938:	ea06 090a 	and.w	r9, r6, sl
   1893c:	ea85 0509 	eor.w	r5, r5, r9
   18940:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   18944:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   18946:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   18948:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   1894c:	4443      	add	r3, r8
   1894e:	46d6      	mov	lr, sl
   18950:	46d8      	mov	r8, fp
	for (i = 0; i < 16; ++i) {
   18952:	d17d      	bne.n	18a50 <compress+0x194>
   18954:	4946      	ldr	r1, [pc, #280]	; (18a70 <compress+0x1b4>)
   18956:	910a      	str	r1, [sp, #40]	; 0x28
   18958:	2110      	movs	r1, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1895a:	1c4f      	adds	r7, r1, #1
   1895c:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   18960:	970b      	str	r7, [sp, #44]	; 0x2c
   18962:	f007 070f 	and.w	r7, r7, #15
   18966:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1896a:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1896e:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   18972:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   18976:	9700      	str	r7, [sp, #0]
		s0 = sigma0(s0);
   18978:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   1897c:	f101 070e 	add.w	r7, r1, #14
   18980:	f007 070f 	and.w	r7, r7, #15
   18984:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   18988:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1898c:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   1898e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = work_space[(i+14)&0x0f];
   18992:	9701      	str	r7, [sp, #4]
		s1 = sigma1(s1);
   18994:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   18998:	f001 010f 	and.w	r1, r1, #15
   1899c:	af1c      	add	r7, sp, #112	; 0x70
   1899e:	eb07 0989 	add.w	r9, r7, r9, lsl #2
   189a2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   189a6:	f851 1c40 	ldr.w	r1, [r1, #-64]
   189aa:	f859 7c40 	ldr.w	r7, [r9, #-64]
   189ae:	4439      	add	r1, r7
		s0 = sigma0(s0);
   189b0:	9f00      	ldr	r7, [sp, #0]
   189b2:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
   189b6:	9f01      	ldr	r7, [sp, #4]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189b8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   189ba:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189c0:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189c2:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   189c6:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   189ca:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   189ce:	970a      	str	r7, [sp, #40]	; 0x28
   189d0:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   189d4:	ea2c 0705 	bic.w	r7, ip, r5
   189d8:	ea05 0802 	and.w	r8, r5, r2
   189dc:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   189e0:	ea87 0708 	eor.w	r7, r7, r8
   189e4:	444f      	add	r7, r9
   189e6:	4477      	add	r7, lr
   189e8:	4439      	add	r1, r7
   189ea:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
   189ec:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   189f0:	ea84 0b06 	eor.w	fp, r4, r6
   189f4:	ea0b 0b03 	and.w	fp, fp, r3
   189f8:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   189fc:	ea04 0e06 	and.w	lr, r4, r6
   18a00:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   18a04:	ea8b 0e0e 	eor.w	lr, fp, lr
   18a08:	44be      	add	lr, r7
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   18a0a:	448e      	add	lr, r1
		h = g; g = f; f = e; e = d + t1;
   18a0c:	eb01 070a 	add.w	r7, r1, sl
		d = c; c = b; b = a; a = t1 + t2;
   18a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18a12:	46b2      	mov	sl, r6
	for ( ; i < 64; ++i) {
   18a14:	2940      	cmp	r1, #64	; 0x40
   18a16:	46e3      	mov	fp, ip
   18a18:	d121      	bne.n	18a5e <compress+0x1a2>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   18a1a:	9902      	ldr	r1, [sp, #8]
   18a1c:	4471      	add	r1, lr
   18a1e:	6001      	str	r1, [r0, #0]
   18a20:	9903      	ldr	r1, [sp, #12]
   18a22:	4419      	add	r1, r3
   18a24:	9b04      	ldr	r3, [sp, #16]
   18a26:	6041      	str	r1, [r0, #4]
   18a28:	4423      	add	r3, r4
   18a2a:	6083      	str	r3, [r0, #8]
   18a2c:	9b05      	ldr	r3, [sp, #20]
   18a2e:	4433      	add	r3, r6
   18a30:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   18a32:	9b06      	ldr	r3, [sp, #24]
   18a34:	443b      	add	r3, r7
   18a36:	6103      	str	r3, [r0, #16]
   18a38:	9b07      	ldr	r3, [sp, #28]
   18a3a:	442b      	add	r3, r5
   18a3c:	6143      	str	r3, [r0, #20]
   18a3e:	9b08      	ldr	r3, [sp, #32]
   18a40:	4413      	add	r3, r2
   18a42:	6183      	str	r3, [r0, #24]
   18a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a46:	4463      	add	r3, ip
   18a48:	61c3      	str	r3, [r0, #28]
}
   18a4a:	b01d      	add	sp, #116	; 0x74
   18a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a50:	46e3      	mov	fp, ip
   18a52:	46b2      	mov	sl, r6
   18a54:	4694      	mov	ip, r2
   18a56:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
   18a58:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
   18a5a:	461c      	mov	r4, r3
   18a5c:	e74c      	b.n	188f8 <compress+0x3c>
   18a5e:	4694      	mov	ip, r2
   18a60:	4626      	mov	r6, r4
   18a62:	462a      	mov	r2, r5
   18a64:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   18a66:	463d      	mov	r5, r7
		d = c; c = b; b = a; a = t1 + t2;
   18a68:	4673      	mov	r3, lr
   18a6a:	e776      	b.n	1895a <compress+0x9e>
   18a6c:	00035b00 	.word	0x00035b00
   18a70:	00035b40 	.word	0x00035b40

00018a74 <tc_sha256_init>:
{
   18a74:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   18a76:	4604      	mov	r4, r0
   18a78:	b1c8      	cbz	r0, 18aae <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   18a7a:	2270      	movs	r2, #112	; 0x70
   18a7c:	2100      	movs	r1, #0
   18a7e:	f017 f993 	bl	2fda8 <_set>
	s->iv[1] = 0xbb67ae85;
   18a82:	4b0b      	ldr	r3, [pc, #44]	; (18ab0 <tc_sha256_init+0x3c>)
   18a84:	4a0b      	ldr	r2, [pc, #44]	; (18ab4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   18a86:	490c      	ldr	r1, [pc, #48]	; (18ab8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   18a88:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   18a8c:	4b0b      	ldr	r3, [pc, #44]	; (18abc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   18a8e:	480c      	ldr	r0, [pc, #48]	; (18ac0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   18a90:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   18a94:	4b0b      	ldr	r3, [pc, #44]	; (18ac4 <tc_sha256_init+0x50>)
   18a96:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   18a9a:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   18a9c:	4b0a      	ldr	r3, [pc, #40]	; (18ac8 <tc_sha256_init+0x54>)
   18a9e:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   18aa0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   18aa4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   18aa8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   18aac:	61e3      	str	r3, [r4, #28]
}
   18aae:	bd10      	pop	{r4, pc}
   18ab0:	bb67ae85 	.word	0xbb67ae85
   18ab4:	6a09e667 	.word	0x6a09e667
   18ab8:	3c6ef372 	.word	0x3c6ef372
   18abc:	a54ff53a 	.word	0xa54ff53a
   18ac0:	510e527f 	.word	0x510e527f
   18ac4:	9b05688c 	.word	0x9b05688c
   18ac8:	1f83d9ab 	.word	0x1f83d9ab

00018acc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   18acc:	4a09      	ldr	r2, [pc, #36]	; (18af4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   18ace:	490a      	ldr	r1, [pc, #40]	; (18af8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   18ad0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   18ad2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   18ad4:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   18ad6:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   18ad8:	4908      	ldr	r1, [pc, #32]	; (18afc <arch_swap+0x30>)
   18ada:	684b      	ldr	r3, [r1, #4]
   18adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   18ae0:	604b      	str	r3, [r1, #4]
   18ae2:	2300      	movs	r3, #0
   18ae4:	f383 8811 	msr	BASEPRI, r3
   18ae8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   18aec:	6893      	ldr	r3, [r2, #8]
}
   18aee:	6f18      	ldr	r0, [r3, #112]	; 0x70
   18af0:	4770      	bx	lr
   18af2:	bf00      	nop
   18af4:	20027418 	.word	0x20027418
   18af8:	00036318 	.word	0x00036318
   18afc:	e000ed00 	.word	0xe000ed00

00018b00 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   18b00:	4929      	ldr	r1, [pc, #164]	; (18ba8 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   18b02:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   18b04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   18b08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   18b0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   18b0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   18b12:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   18b16:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   18b1a:	d004      	beq.n	18b26 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   18b1c:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   18b20:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   18b24:	e007      	b.n	18b36 <out_fp_endif>

00018b26 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   18b26:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
   18b2a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   18b2e:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   18b32:	f050 0004 	orrs.w	r0, r0, #4

00018b36 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   18b36:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18b3a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18b3c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   18b40:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   18b44:	4f19      	ldr	r7, [pc, #100]	; (18bac <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   18b46:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   18b4a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   18b4c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   18b4e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   18b50:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   18b52:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   18b54:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   18b56:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   18b5a:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   18b5e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   18b62:	d105      	bne.n	18b70 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   18b64:	2300      	movs	r3, #0
    vmsr fpscr, r3
   18b66:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   18b6a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   18b6e:	e005      	b.n	18b7c <in_fp_endif>

00018b70 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   18b70:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   18b74:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   18b78:	ec90 8a10 	vldmia	r0, {s16-s31}

00018b7c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   18b7c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   18b80:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   18b84:	f383 8814 	msr	CONTROL, r3
    isb
   18b88:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   18b8c:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   18b90:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   18b94:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   18b98:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   18b9c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   18b9e:	f018 fa42 	bl	31026 <configure_builtin_stack_guard>
    pop {r2, lr}
   18ba2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   18ba6:	4770      	bx	lr
    ldr r1, =_kernel
   18ba8:	20027418 	.word	0x20027418
    ldr v4, =_SCS_ICSR
   18bac:	e000ed04 	.word	0xe000ed04

00018bb0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   18bb0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   18bb4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   18bb6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   18bba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   18bbe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   18bc0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   18bc4:	2902      	cmp	r1, #2
    beq _oops
   18bc6:	d0ff      	beq.n	18bc8 <_oops>

00018bc8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   18bc8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   18bca:	f018 fa32 	bl	31032 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   18bce:	bd01      	pop	{r0, pc}

00018bd0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   18bd0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   18bd2:	2b00      	cmp	r3, #0
   18bd4:	db08      	blt.n	18be8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18bd6:	2201      	movs	r2, #1
   18bd8:	f000 001f 	and.w	r0, r0, #31
   18bdc:	fa02 f000 	lsl.w	r0, r2, r0
   18be0:	4a02      	ldr	r2, [pc, #8]	; (18bec <arch_irq_enable+0x1c>)
   18be2:	095b      	lsrs	r3, r3, #5
   18be4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   18be8:	4770      	bx	lr
   18bea:	bf00      	nop
   18bec:	e000e100 	.word	0xe000e100

00018bf0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   18bf0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   18bf2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   18bf4:	2c07      	cmp	r4, #7
{
   18bf6:	4605      	mov	r5, r0
   18bf8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   18bfa:	d90e      	bls.n	18c1a <z_arm_irq_priority_set+0x2a>
   18bfc:	235e      	movs	r3, #94	; 0x5e
   18bfe:	4a10      	ldr	r2, [pc, #64]	; (18c40 <z_arm_irq_priority_set+0x50>)
   18c00:	4910      	ldr	r1, [pc, #64]	; (18c44 <z_arm_irq_priority_set+0x54>)
   18c02:	4811      	ldr	r0, [pc, #68]	; (18c48 <z_arm_irq_priority_set+0x58>)
   18c04:	f016 fb25 	bl	2f252 <printk>
   18c08:	4631      	mov	r1, r6
   18c0a:	4810      	ldr	r0, [pc, #64]	; (18c4c <z_arm_irq_priority_set+0x5c>)
   18c0c:	2207      	movs	r2, #7
   18c0e:	f016 fb20 	bl	2f252 <printk>
   18c12:	215e      	movs	r1, #94	; 0x5e
   18c14:	480a      	ldr	r0, [pc, #40]	; (18c40 <z_arm_irq_priority_set+0x50>)
   18c16:	f016 fe1d 	bl	2f854 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   18c1a:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   18c1c:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c1e:	bfa8      	it	ge
   18c20:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   18c24:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c28:	bfb8      	it	lt
   18c2a:	4b09      	ldrlt	r3, [pc, #36]	; (18c50 <z_arm_irq_priority_set+0x60>)
   18c2c:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c2e:	bfab      	itete	ge
   18c30:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c34:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c38:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18c3c:	555c      	strblt	r4, [r3, r5]
}
   18c3e:	bd70      	pop	{r4, r5, r6, pc}
   18c40:	00037456 	.word	0x00037456
   18c44:	0003748c 	.word	0x0003748c
   18c48:	00036be5 	.word	0x00036be5
   18c4c:	000374a7 	.word	0x000374a7
   18c50:	e000ed14 	.word	0xe000ed14

00018c54 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   18c54:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   18c56:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   18c58:	4b04      	ldr	r3, [pc, #16]	; (18c6c <_arch_isr_direct_pm+0x18>)
   18c5a:	6a18      	ldr	r0, [r3, #32]
   18c5c:	b118      	cbz	r0, 18c66 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   18c5e:	2200      	movs	r2, #0
   18c60:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   18c62:	f01b fc73 	bl	3454c <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   18c66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   18c68:	bd08      	pop	{r3, pc}
   18c6a:	bf00      	nop
   18c6c:	20027418 	.word	0x20027418

00018c70 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   18c70:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   18c74:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   18c76:	3a20      	subs	r2, #32
   18c78:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   18c7c:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   18c7e:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c80:	4908      	ldr	r1, [pc, #32]	; (18ca4 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   18c82:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   18c84:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c86:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   18c8a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   18c8c:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   18c8e:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   18c90:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   18c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   18c96:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   18c98:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   18c9a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   18c9c:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   18c9e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   18ca2:	4770      	bx	lr
   18ca4:	0002f2af 	.word	0x0002f2af

00018ca8 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   18ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18caa:	461e      	mov	r6, r3
   18cac:	4607      	mov	r7, r0
   18cae:	460d      	mov	r5, r1
   18cb0:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   18cb2:	2300      	movs	r3, #0
   18cb4:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   18cb8:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   18cbc:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   18cc0:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   18cc4:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18cc8:	f000 fa12 	bl	190f0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   18ccc:	4b09      	ldr	r3, [pc, #36]	; (18cf4 <arch_switch_to_main_thread+0x4c>)
	start_of_main_stack =
   18cce:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   18cd0:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
   18cd4:	609f      	str	r7, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   18cd6:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   18cda:	4630      	mov	r0, r6
   18cdc:	f384 8809 	msr	PSP, r4
   18ce0:	2100      	movs	r1, #0
   18ce2:	b663      	cpsie	if
   18ce4:	f381 8811 	msr	BASEPRI, r1
   18ce8:	f3bf 8f6f 	isb	sy
   18cec:	2200      	movs	r2, #0
   18cee:	2300      	movs	r3, #0
   18cf0:	f016 fadd 	bl	2f2ae <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   18cf4:	20027418 	.word	0x20027418

00018cf8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   18cf8:	4901      	ldr	r1, [pc, #4]	; (18d00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   18cfa:	2210      	movs	r2, #16
	str	r2, [r1]
   18cfc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   18cfe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   18d00:	e000ed10 	.word	0xe000ed10

00018d04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   18d04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   18d06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   18d08:	f380 8811 	msr	BASEPRI, r0
	isb
   18d0c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   18d10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   18d14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   18d16:	b662      	cpsie	i
	isb
   18d18:	f3bf 8f6f 	isb	sy

	bx	lr
   18d1c:	4770      	bx	lr
   18d1e:	bf00      	nop

00018d20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   18d20:	bf30      	wfi
    b z_SysNmiOnReset
   18d22:	f7ff bffd 	b.w	18d20 <z_SysNmiOnReset>
   18d26:	bf00      	nop

00018d28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18d28:	4a14      	ldr	r2, [pc, #80]	; (18d7c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   18d2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18d2c:	4b14      	ldr	r3, [pc, #80]	; (18d80 <z_arm_prep_c+0x58>)
   18d2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   18d32:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   18d34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18d38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   18d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18d40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   18d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   18d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18d4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   18d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   18d54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   18d58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   18d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18d60:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   18d64:	2300      	movs	r3, #0
   18d66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   18d6a:	f00f fa7f 	bl	2826c <z_bss_zero>
	z_data_copy();
   18d6e:	f00f fa87 	bl	28280 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   18d72:	f000 f973 	bl	1905c <z_arm_interrupt_init>
	z_cstart();
   18d76:	f00f fab5 	bl	282e4 <z_cstart>
   18d7a:	bf00      	nop
   18d7c:	0000c000 	.word	0x0000c000
   18d80:	e000ed00 	.word	0xe000ed00

00018d84 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   18d84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   18d86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   18d88:	4a0b      	ldr	r2, [pc, #44]	; (18db8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   18d8a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   18d8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   18d8e:	bf1e      	ittt	ne
	movne	r1, #0
   18d90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   18d92:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   18d94:	f01b fbda 	blne	3454c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   18d98:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   18d9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   18d9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   18da2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   18da6:	4905      	ldr	r1, [pc, #20]	; (18dbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   18da8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   18daa:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   18dac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   18dae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   18db2:	4903      	ldr	r1, [pc, #12]	; (18dc0 <_isr_wrapper+0x3c>)
	bx r1
   18db4:	4708      	bx	r1
   18db6:	0000      	.short	0x0000
	ldr r2, =_kernel
   18db8:	20027418 	.word	0x20027418
	ldr r1, =_sw_isr_table
   18dbc:	000355d8 	.word	0x000355d8
	ldr r1, =z_arm_int_exit
   18dc0:	0001901d 	.word	0x0001901d

00018dc4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   18dc4:	f016 fd4e 	bl	2f864 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18dc8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18dca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   18dce:	4808      	ldr	r0, [pc, #32]	; (18df0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   18dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   18dd4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   18dd6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   18dda:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   18dde:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   18de0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   18de2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   18de6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   18dea:	f7ff ff9d 	bl	18d28 <z_arm_prep_c>
   18dee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   18df0:	200348d0 	.word	0x200348d0

00018df4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   18df4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   18df8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   18dfc:	4672      	mov	r2, lr

	push {r0, lr}
   18dfe:	b501      	push	{r0, lr}

	bl z_arm_fault
   18e00:	f000 f86e 	bl	18ee0 <z_arm_fault>

	pop {r0, pc}
   18e04:	bd01      	pop	{r0, pc}
   18e06:	bf00      	nop

00018e08 <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   18e08:	4b0d      	ldr	r3, [pc, #52]	; (18e40 <bus_fault.isra.2+0x38>)
   18e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   18e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   18e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e10:	0592      	lsls	r2, r2, #22
   18e12:	d508      	bpl.n	18e26 <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   18e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   18e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e18:	0412      	lsls	r2, r2, #16
   18e1a:	d504      	bpl.n	18e26 <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   18e1c:	b118      	cbz	r0, 18e26 <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   18e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   18e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   18e26:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   18e28:	4b05      	ldr	r3, [pc, #20]	; (18e40 <bus_fault.isra.2+0x38>)
   18e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   18e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e2e:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   18e30:	bf58      	it	pl
   18e32:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   18e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e36:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   18e3a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18e3c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   18e3e:	4770      	bx	lr
   18e40:	e000ed00 	.word	0xe000ed00

00018e44 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   18e44:	4b09      	ldr	r3, [pc, #36]	; (18e6c <usage_fault.isra.3+0x28>)
   18e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   18e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   18e4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   18e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   18e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   18e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   18e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   18e56:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e5a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   18e5e:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   18e62:	bf18      	it	ne
   18e64:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18e66:	629a      	str	r2, [r3, #40]	; 0x28
}
   18e68:	4770      	bx	lr
   18e6a:	bf00      	nop
   18e6c:	e000ed00 	.word	0xe000ed00

00018e70 <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18e70:	4b16      	ldr	r3, [pc, #88]	; (18ecc <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   18e72:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   18e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   18e7a:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18e7c:	0791      	lsls	r1, r2, #30
   18e7e:	d508      	bpl.n	18e92 <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
   18e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   18e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e84:	0612      	lsls	r2, r2, #24
   18e86:	d504      	bpl.n	18e92 <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
   18e88:	b118      	cbz	r0, 18e92 <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   18e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   18e90:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   18e92:	4b0e      	ldr	r3, [pc, #56]	; (18ecc <mem_manage_fault.isra.6+0x5c>)
   18e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   18e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   18e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18e9a:	06db      	lsls	r3, r3, #27
   18e9c:	d50e      	bpl.n	18ebc <mem_manage_fault.isra.6+0x4c>
	__ASSERT(0,
   18e9e:	490c      	ldr	r1, [pc, #48]	; (18ed0 <mem_manage_fault.isra.6+0x60>)
   18ea0:	f240 1337 	movw	r3, #311	; 0x137
   18ea4:	4a0b      	ldr	r2, [pc, #44]	; (18ed4 <mem_manage_fault.isra.6+0x64>)
   18ea6:	480c      	ldr	r0, [pc, #48]	; (18ed8 <mem_manage_fault.isra.6+0x68>)
   18ea8:	f016 f9d3 	bl	2f252 <printk>
   18eac:	480b      	ldr	r0, [pc, #44]	; (18edc <mem_manage_fault.isra.6+0x6c>)
   18eae:	f016 f9d0 	bl	2f252 <printk>
   18eb2:	f240 1137 	movw	r1, #311	; 0x137
   18eb6:	4807      	ldr	r0, [pc, #28]	; (18ed4 <mem_manage_fault.isra.6+0x64>)
   18eb8:	f016 fccc 	bl	2f854 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   18ebc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   18ebe:	4a03      	ldr	r2, [pc, #12]	; (18ecc <mem_manage_fault.isra.6+0x5c>)
   18ec0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   18ec2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   18ec6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18ec8:	7020      	strb	r0, [r4, #0]
}
   18eca:	bd10      	pop	{r4, pc}
   18ecc:	e000ed00 	.word	0xe000ed00
   18ed0:	00038ae7 	.word	0x00038ae7
   18ed4:	000374dc 	.word	0x000374dc
   18ed8:	00036be5 	.word	0x00036be5
   18edc:	00037516 	.word	0x00037516

00018ee0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   18ee0:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18ee2:	4b41      	ldr	r3, [pc, #260]	; (18fe8 <z_arm_fault+0x108>)
{
   18ee4:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18ee6:	685c      	ldr	r4, [r3, #4]
   18ee8:	2500      	movs	r5, #0
   18eea:	f3c4 0408 	ubfx	r4, r4, #0, #9
   18eee:	f385 8811 	msr	BASEPRI, r5
   18ef2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   18ef6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   18efa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   18efe:	d10e      	bne.n	18f1e <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   18f00:	07d3      	lsls	r3, r2, #31
   18f02:	d40c      	bmi.n	18f1e <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   18f04:	0656      	lsls	r6, r2, #25
   18f06:	d404      	bmi.n	18f12 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   18f08:	0715      	lsls	r5, r2, #28
   18f0a:	d405      	bmi.n	18f18 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   18f0c:	4606      	mov	r6, r0
			*nested_exc = true;
   18f0e:	2501      	movs	r5, #1
   18f10:	e004      	b.n	18f1c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   18f12:	f012 0504 	ands.w	r5, r2, #4
   18f16:	d01c      	beq.n	18f52 <z_arm_fault+0x72>
			ptr_esf = (z_arch_esf_t *)psp;
   18f18:	460e      	mov	r6, r1
	*nested_exc = false;
   18f1a:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   18f1c:	b97e      	cbnz	r6, 18f3e <z_arm_fault+0x5e>
   18f1e:	f240 33b2 	movw	r3, #946	; 0x3b2
   18f22:	4a32      	ldr	r2, [pc, #200]	; (18fec <z_arm_fault+0x10c>)
   18f24:	4932      	ldr	r1, [pc, #200]	; (18ff0 <z_arm_fault+0x110>)
   18f26:	4833      	ldr	r0, [pc, #204]	; (18ff4 <z_arm_fault+0x114>)
   18f28:	f016 f993 	bl	2f252 <printk>
   18f2c:	4832      	ldr	r0, [pc, #200]	; (18ff8 <z_arm_fault+0x118>)
   18f2e:	f016 f990 	bl	2f252 <printk>
   18f32:	f240 31b2 	movw	r1, #946	; 0x3b2
   18f36:	482d      	ldr	r0, [pc, #180]	; (18fec <z_arm_fault+0x10c>)
   18f38:	f016 fc8c 	bl	2f854 <assert_post_action>
   18f3c:	2600      	movs	r6, #0
	*recoverable = false;
   18f3e:	2300      	movs	r3, #0
   18f40:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   18f44:	1ee3      	subs	r3, r4, #3
   18f46:	2b03      	cmp	r3, #3
   18f48:	d847      	bhi.n	18fda <z_arm_fault+0xfa>
   18f4a:	e8df f003 	tbb	[pc, r3]
   18f4e:	3e04      	.short	0x3e04
   18f50:	3b42      	.short	0x3b42
			ptr_esf = (z_arch_esf_t *)msp;
   18f52:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
   18f54:	e7e2      	b.n	18f1c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   18f56:	4b24      	ldr	r3, [pc, #144]	; (18fe8 <z_arm_fault+0x108>)
   18f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f5a:	0792      	lsls	r2, r2, #30
   18f5c:	d43d      	bmi.n	18fda <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   18f5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   18f60:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   18f64:	d008      	beq.n	18f78 <z_arm_fault+0x98>
		if (SCB_MMFSR != 0) {
   18f66:	3328      	adds	r3, #40	; 0x28
   18f68:	781b      	ldrb	r3, [r3, #0]
   18f6a:	b1eb      	cbz	r3, 18fa8 <z_arm_fault+0xc8>
			reason = mem_manage_fault(esf, 1, recoverable);
   18f6c:	2001      	movs	r0, #1
   18f6e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   18f72:	f7ff ff7d 	bl	18e70 <mem_manage_fault.isra.6>
		reason = usage_fault(esf);
   18f76:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   18f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18f7c:	b993      	cbnz	r3, 18fa4 <z_arm_fault+0xc4>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   18f7e:	2268      	movs	r2, #104	; 0x68
   18f80:	4631      	mov	r1, r6
   18f82:	a802      	add	r0, sp, #8
   18f84:	f01b fd4c 	bl	34a20 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   18f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f8a:	b345      	cbz	r5, 18fde <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   18f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   18f90:	b922      	cbnz	r2, 18f9c <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   18f92:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18f96:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18f9a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   18f9c:	a902      	add	r1, sp, #8
   18f9e:	4620      	mov	r0, r4
   18fa0:	f018 f845 	bl	3102e <z_arm_fatal_error>
}
   18fa4:	b01c      	add	sp, #112	; 0x70
   18fa6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   18fa8:	4b14      	ldr	r3, [pc, #80]	; (18ffc <z_arm_fault+0x11c>)
   18faa:	781b      	ldrb	r3, [r3, #0]
   18fac:	b12b      	cbz	r3, 18fba <z_arm_fault+0xda>
			reason = bus_fault(esf, 1, recoverable);
   18fae:	2001      	movs	r0, #1
   18fb0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   18fb4:	f7ff ff28 	bl	18e08 <bus_fault.isra.2>
   18fb8:	e7dd      	b.n	18f76 <z_arm_fault+0x96>
		} else if (SCB_UFSR != 0) {
   18fba:	4b11      	ldr	r3, [pc, #68]	; (19000 <z_arm_fault+0x120>)
   18fbc:	881c      	ldrh	r4, [r3, #0]
   18fbe:	b2a4      	uxth	r4, r4
   18fc0:	2c00      	cmp	r4, #0
   18fc2:	d0d9      	beq.n	18f78 <z_arm_fault+0x98>
		reason = usage_fault(esf);
   18fc4:	f7ff ff3e 	bl	18e44 <usage_fault.isra.3>
   18fc8:	e7d5      	b.n	18f76 <z_arm_fault+0x96>
		reason = mem_manage_fault(esf, 0, recoverable);
   18fca:	f10d 0107 	add.w	r1, sp, #7
   18fce:	2000      	movs	r0, #0
   18fd0:	e7cf      	b.n	18f72 <z_arm_fault+0x92>
		reason = bus_fault(esf, 0, recoverable);
   18fd2:	f10d 0107 	add.w	r1, sp, #7
   18fd6:	2000      	movs	r0, #0
   18fd8:	e7ec      	b.n	18fb4 <z_arm_fault+0xd4>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   18fda:	2400      	movs	r4, #0
   18fdc:	e7cc      	b.n	18f78 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18fde:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   18fe2:	f023 0301 	bic.w	r3, r3, #1
   18fe6:	e7d8      	b.n	18f9a <z_arm_fault+0xba>
   18fe8:	e000ed00 	.word	0xe000ed00
   18fec:	000374dc 	.word	0x000374dc
   18ff0:	00037550 	.word	0x00037550
   18ff4:	00036be5 	.word	0x00036be5
   18ff8:	00037563 	.word	0x00037563
   18ffc:	e000ed29 	.word	0xe000ed29
   19000:	e000ed2a 	.word	0xe000ed2a

00019004 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   19004:	4b04      	ldr	r3, [pc, #16]	; (19018 <z_arm_fault_init+0x14>)
   19006:	695a      	ldr	r2, [r3, #20]
   19008:	f042 0210 	orr.w	r2, r2, #16
   1900c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1900e:	695a      	ldr	r2, [r3, #20]
   19010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   19014:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   19016:	4770      	bx	lr
   19018:	e000ed00 	.word	0xe000ed00

0001901c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1901c:	4b04      	ldr	r3, [pc, #16]	; (19030 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1901e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   19020:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   19022:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   19024:	d003      	beq.n	1902e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   19026:	4903      	ldr	r1, [pc, #12]	; (19034 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   19028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1902c:	600a      	str	r2, [r1, #0]

0001902e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1902e:	4770      	bx	lr
	ldr r3, =_kernel
   19030:	20027418 	.word	0x20027418
	ldr r1, =_SCS_ICSR
   19034:	e000ed04 	.word	0xe000ed04

00019038 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   19038:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1903c:	4905      	ldr	r1, [pc, #20]	; (19054 <sys_arch_reboot+0x1c>)
   1903e:	4b06      	ldr	r3, [pc, #24]	; (19058 <sys_arch_reboot+0x20>)
   19040:	68ca      	ldr	r2, [r1, #12]
   19042:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19046:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19048:	60cb      	str	r3, [r1, #12]
   1904a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1904e:	bf00      	nop
   19050:	e7fd      	b.n	1904e <sys_arch_reboot+0x16>
   19052:	bf00      	nop
   19054:	e000ed00 	.word	0xe000ed00
   19058:	05fa0004 	.word	0x05fa0004

0001905c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1905c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1905e:	2120      	movs	r1, #32
   19060:	4803      	ldr	r0, [pc, #12]	; (19070 <z_arm_interrupt_init+0x14>)
   19062:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   19064:	3301      	adds	r3, #1
   19066:	2b41      	cmp	r3, #65	; 0x41
   19068:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1906c:	d1f9      	bne.n	19062 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1906e:	4770      	bx	lr
   19070:	e000e100 	.word	0xe000e100

00019074 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   19074:	b538      	push	{r3, r4, r5, lr}
   19076:	4604      	mov	r4, r0
	__asm__ volatile(
   19078:	f04f 0320 	mov.w	r3, #32
   1907c:	f3ef 8511 	mrs	r5, BASEPRI
   19080:	f383 8811 	msr	BASEPRI, r3
   19084:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   19088:	7b03      	ldrb	r3, [r0, #12]
   1908a:	07db      	lsls	r3, r3, #31
   1908c:	d50c      	bpl.n	190a8 <z_impl_k_thread_abort+0x34>
   1908e:	4912      	ldr	r1, [pc, #72]	; (190d8 <z_impl_k_thread_abort+0x64>)
   19090:	2324      	movs	r3, #36	; 0x24
   19092:	4a12      	ldr	r2, [pc, #72]	; (190dc <z_impl_k_thread_abort+0x68>)
   19094:	4812      	ldr	r0, [pc, #72]	; (190e0 <z_impl_k_thread_abort+0x6c>)
   19096:	f016 f8dc 	bl	2f252 <printk>
   1909a:	4812      	ldr	r0, [pc, #72]	; (190e4 <z_impl_k_thread_abort+0x70>)
   1909c:	f016 f8d9 	bl	2f252 <printk>
   190a0:	2124      	movs	r1, #36	; 0x24
   190a2:	480e      	ldr	r0, [pc, #56]	; (190dc <z_impl_k_thread_abort+0x68>)
   190a4:	f016 fbd6 	bl	2f854 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   190a8:	4620      	mov	r0, r4
   190aa:	f010 ff4f 	bl	29f4c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   190ae:	4b0e      	ldr	r3, [pc, #56]	; (190e8 <z_impl_k_thread_abort+0x74>)
   190b0:	689b      	ldr	r3, [r3, #8]
   190b2:	42a3      	cmp	r3, r4
   190b4:	d10b      	bne.n	190ce <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   190b6:	4b0d      	ldr	r3, [pc, #52]	; (190ec <z_impl_k_thread_abort+0x78>)
   190b8:	685a      	ldr	r2, [r3, #4]
   190ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
   190be:	b912      	cbnz	r2, 190c6 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   190c0:	4628      	mov	r0, r5
   190c2:	f7ff fd03 	bl	18acc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   190c6:	685a      	ldr	r2, [r3, #4]
   190c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   190cc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   190ce:	4628      	mov	r0, r5
}
   190d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   190d4:	f01b bb1f 	b.w	34716 <z_reschedule_irqlock>
   190d8:	000375e2 	.word	0x000375e2
   190dc:	000375a1 	.word	0x000375a1
   190e0:	00036be5 	.word	0x00036be5
   190e4:	00037610 	.word	0x00037610
   190e8:	20027418 	.word	0x20027418
   190ec:	e000ed00 	.word	0xe000ed00

000190f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   190f0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   190f2:	4b0e      	ldr	r3, [pc, #56]	; (1912c <z_arm_configure_static_mpu_regions+0x3c>)
{
   190f4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   190f6:	9302      	str	r3, [sp, #8]
   190f8:	4b0d      	ldr	r3, [pc, #52]	; (19130 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   190fa:	4c0e      	ldr	r4, [pc, #56]	; (19134 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   190fc:	9303      	str	r3, [sp, #12]
   190fe:	4b0e      	ldr	r3, [pc, #56]	; (19138 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   19100:	4a0e      	ldr	r2, [pc, #56]	; (1913c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   19102:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   19104:	ab02      	add	r3, sp, #8
   19106:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   19108:	a801      	add	r0, sp, #4
   1910a:	4623      	mov	r3, r4
   1910c:	2101      	movs	r1, #1
   1910e:	f000 f935 	bl	1937c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   19112:	2300      	movs	r3, #0
   19114:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   19116:	4b0a      	ldr	r3, [pc, #40]	; (19140 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19118:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1911a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1911c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1911e:	9305      	str	r3, [sp, #20]
   19120:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19122:	f000 f951 	bl	193c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   19126:	b008      	add	sp, #32
   19128:	bd10      	pop	{r4, pc}
   1912a:	bf00      	nop
   1912c:	20020000 	.word	0x20020000
   19130:	00000000 	.word	0x00000000
   19134:	20040000 	.word	0x20040000
   19138:	00010006 	.word	0x00010006
   1913c:	20020000 	.word	0x20020000
   19140:	20020860 	.word	0x20020860

00019144 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   19144:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   19146:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   19148:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1914a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1914e:	f004 031f 	and.w	r3, r4, #31
   19152:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19154:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   19156:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19158:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1915c:	4904      	ldr	r1, [pc, #16]	; (19170 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1915e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   19162:	f043 0301 	orr.w	r3, r3, #1
   19166:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   19168:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1916a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1916c:	bd10      	pop	{r4, pc}
   1916e:	bf00      	nop
   19170:	e000ed90 	.word	0xe000ed90

00019174 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   19174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19178:	4680      	mov	r8, r0
   1917a:	4689      	mov	r9, r1
   1917c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1917e:	2700      	movs	r7, #0
	MPU->RNR = index;
   19180:	4d48      	ldr	r5, [pc, #288]	; (192a4 <mpu_configure_regions_and_partition.constprop.2+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   19182:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   19184:	454f      	cmp	r7, r9
   19186:	da07      	bge.n	19198 <mpu_configure_regions_and_partition.constprop.2+0x24>
		if (regions[i]->size == 0U) {
   19188:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   1918c:	685e      	ldr	r6, [r3, #4]
   1918e:	b3c6      	cbz	r6, 19202 <mpu_configure_regions_and_partition.constprop.2+0x8e>
		&&
   19190:	2e1f      	cmp	r6, #31
   19192:	d805      	bhi.n	191a0 <mpu_configure_regions_and_partition.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   19194:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   19198:	4620      	mov	r0, r4
   1919a:	b005      	add	sp, #20
   1919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   191a0:	06f2      	lsls	r2, r6, #27
   191a2:	d1f7      	bne.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
		((part->start &
   191a4:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   191a8:	f01a 0f1f 	tst.w	sl, #31
   191ac:	d1f2      	bne.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   191ae:	4650      	mov	r0, sl
   191b0:	f017 ff6c 	bl	3108c <arm_cmse_mpu_region_get>
   191b4:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   191b6:	eb06 000a 	add.w	r0, r6, sl
   191ba:	3801      	subs	r0, #1
   191bc:	f017 ff66 	bl	3108c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   191c0:	4583      	cmp	fp, r0
   191c2:	d1e7      	bne.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
   191c4:	f11b 0f16 	cmn.w	fp, #22
   191c8:	d0e4      	beq.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
   191ca:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   191cc:	455b      	cmp	r3, fp
   191ce:	dbe1      	blt.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
   191d0:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   191d4:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191d6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   191da:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   191de:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   191e0:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191e4:	e9d1 3200 	ldrd	r3, r2, [r1]
   191e8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   191ea:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   191ec:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   191f0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   191f4:	d118      	bne.n	19228 <mpu_configure_regions_and_partition.constprop.2+0xb4>
   191f6:	4556      	cmp	r6, sl
   191f8:	d105      	bne.n	19206 <mpu_configure_regions_and_partition.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   191fa:	fa5f f08b 	uxtb.w	r0, fp
   191fe:	f017 ff23 	bl	31048 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   19202:	3701      	adds	r7, #1
   19204:	e7be      	b.n	19184 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   19206:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1920a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1920c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   19210:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   19214:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   19216:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   19218:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1921a:	f017 ff15 	bl	31048 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1921e:	f110 0f16 	cmn.w	r0, #22
   19222:	d0b7      	beq.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
			reg_index++;
   19224:	1c44      	adds	r4, r0, #1
   19226:	e7ec      	b.n	19202 <mpu_configure_regions_and_partition.constprop.2+0x8e>
	MPU->RNR = index;
   19228:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1922c:	692a      	ldr	r2, [r5, #16]
   1922e:	3b01      	subs	r3, #1
   19230:	f023 031f 	bic.w	r3, r3, #31
   19234:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   19238:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1923a:	4556      	cmp	r6, sl
   1923c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1923e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   19240:	d0eb      	beq.n	1921a <mpu_configure_regions_and_partition.constprop.2+0xa6>
				mpu_configure_region(reg_index, regions[i]);
   19242:	f017 ff01 	bl	31048 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   19246:	f110 0f16 	cmn.w	r0, #22
   1924a:	d0a3      	beq.n	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
   1924c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   19250:	68ea      	ldr	r2, [r5, #12]
   19252:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   19256:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   19258:	f362 0304 	bfi	r3, r2, #0, #5
   1925c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   19260:	692b      	ldr	r3, [r5, #16]
   19262:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19266:	085b      	lsrs	r3, r3, #1
   19268:	f363 1247 	bfi	r2, r3, #5, #3
   1926c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   19270:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   19274:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   19276:	e9d2 3200 	ldrd	r3, r2, [r2]
   1927a:	4413      	add	r3, r2
   1927c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1927e:	f023 031f 	bic.w	r3, r3, #31
   19282:	441e      	add	r6, r3
   19284:	eba6 060a 	sub.w	r6, r6, sl
   19288:	b2c4      	uxtb	r4, r0
   1928a:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   1928e:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   19290:	9603      	str	r6, [sp, #12]
   19292:	f63f af7f 	bhi.w	19194 <mpu_configure_regions_and_partition.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   19296:	4620      	mov	r0, r4
   19298:	4669      	mov	r1, sp
   1929a:	f7ff ff53 	bl	19144 <region_init>
			reg_index++;
   1929e:	3401      	adds	r4, #1
   192a0:	e7af      	b.n	19202 <mpu_configure_regions_and_partition.constprop.2+0x8e>
   192a2:	bf00      	nop
   192a4:	e000ed90 	.word	0xe000ed90

000192a8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   192a8:	2205      	movs	r2, #5
   192aa:	4b03      	ldr	r3, [pc, #12]	; (192b8 <arm_core_mpu_enable+0x10>)
   192ac:	605a      	str	r2, [r3, #4]
   192ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   192b2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   192b6:	4770      	bx	lr
   192b8:	e000ed90 	.word	0xe000ed90

000192bc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   192bc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   192c0:	2200      	movs	r2, #0
   192c2:	4b01      	ldr	r3, [pc, #4]	; (192c8 <arm_core_mpu_disable+0xc>)
   192c4:	605a      	str	r2, [r3, #4]
}
   192c6:	4770      	bx	lr
   192c8:	e000ed90 	.word	0xe000ed90

000192cc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   192cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   192ce:	4f21      	ldr	r7, [pc, #132]	; (19354 <arm_mpu_init+0x88>)
   192d0:	683e      	ldr	r6, [r7, #0]
   192d2:	2e10      	cmp	r6, #16
   192d4:	d913      	bls.n	192fe <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   192d6:	f240 133d 	movw	r3, #317	; 0x13d
   192da:	4a1f      	ldr	r2, [pc, #124]	; (19358 <arm_mpu_init+0x8c>)
   192dc:	491f      	ldr	r1, [pc, #124]	; (1935c <arm_mpu_init+0x90>)
   192de:	4820      	ldr	r0, [pc, #128]	; (19360 <arm_mpu_init+0x94>)
   192e0:	f015 ffb7 	bl	2f252 <printk>
   192e4:	2210      	movs	r2, #16
   192e6:	4631      	mov	r1, r6
   192e8:	481e      	ldr	r0, [pc, #120]	; (19364 <arm_mpu_init+0x98>)
   192ea:	f015 ffb2 	bl	2f252 <printk>
   192ee:	481a      	ldr	r0, [pc, #104]	; (19358 <arm_mpu_init+0x8c>)
   192f0:	f240 113d 	movw	r1, #317	; 0x13d
   192f4:	f016 faae 	bl	2f854 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   192f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   192fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   192fe:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   19300:	f7ff ffdc 	bl	192bc <arm_core_mpu_disable>
	MPU->MAIR0 =
   19304:	4d18      	ldr	r5, [pc, #96]	; (19368 <arm_mpu_init+0x9c>)
   19306:	4a19      	ldr	r2, [pc, #100]	; (1936c <arm_mpu_init+0xa0>)
   19308:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1930a:	42a6      	cmp	r6, r4
   1930c:	d119      	bne.n	19342 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   1930e:	4b18      	ldr	r3, [pc, #96]	; (19370 <arm_mpu_init+0xa4>)
   19310:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   19312:	f7ff ffc9 	bl	192a8 <arm_core_mpu_enable>
	__ASSERT(
   19316:	682b      	ldr	r3, [r5, #0]
   19318:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1931c:	2b10      	cmp	r3, #16
   1931e:	d00e      	beq.n	1933e <arm_mpu_init+0x72>
   19320:	4914      	ldr	r1, [pc, #80]	; (19374 <arm_mpu_init+0xa8>)
   19322:	f44f 73af 	mov.w	r3, #350	; 0x15e
   19326:	4a0c      	ldr	r2, [pc, #48]	; (19358 <arm_mpu_init+0x8c>)
   19328:	480d      	ldr	r0, [pc, #52]	; (19360 <arm_mpu_init+0x94>)
   1932a:	f015 ff92 	bl	2f252 <printk>
   1932e:	4812      	ldr	r0, [pc, #72]	; (19378 <arm_mpu_init+0xac>)
   19330:	f015 ff8f 	bl	2f252 <printk>
   19334:	f44f 71af 	mov.w	r1, #350	; 0x15e
   19338:	4807      	ldr	r0, [pc, #28]	; (19358 <arm_mpu_init+0x8c>)
   1933a:	f016 fa8b 	bl	2f854 <assert_post_action>
	return 0;
   1933e:	2000      	movs	r0, #0
   19340:	e7dc      	b.n	192fc <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   19342:	6879      	ldr	r1, [r7, #4]
   19344:	4620      	mov	r0, r4
   19346:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1934a:	f7ff fefb 	bl	19144 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1934e:	3401      	adds	r4, #1
   19350:	e7db      	b.n	1930a <arm_mpu_init+0x3e>
   19352:	bf00      	nop
   19354:	00035c00 	.word	0x00035c00
   19358:	00037686 	.word	0x00037686
   1935c:	00038ae7 	.word	0x00038ae7
   19360:	00036be5 	.word	0x00036be5
   19364:	000376c6 	.word	0x000376c6
   19368:	e000ed90 	.word	0xe000ed90
   1936c:	0044ffaa 	.word	0x0044ffaa
   19370:	20027ef0 	.word	0x20027ef0
   19374:	000376fa 	.word	0x000376fa
   19378:	0003774b 	.word	0x0003774b

0001937c <arm_core_mpu_configure_static_mpu_regions>:
{
   1937c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1937e:	4c0d      	ldr	r4, [pc, #52]	; (193b4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   19380:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   19382:	7822      	ldrb	r2, [r4, #0]
   19384:	f7ff fef6 	bl	19174 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   19388:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1938a:	3016      	adds	r0, #22
   1938c:	d111      	bne.n	193b2 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1938e:	f240 1303 	movw	r3, #259	; 0x103
   19392:	4a09      	ldr	r2, [pc, #36]	; (193b8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   19394:	4909      	ldr	r1, [pc, #36]	; (193bc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   19396:	480a      	ldr	r0, [pc, #40]	; (193c0 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   19398:	f015 ff5b 	bl	2f252 <printk>
   1939c:	4629      	mov	r1, r5
   1939e:	4809      	ldr	r0, [pc, #36]	; (193c4 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   193a0:	f015 ff57 	bl	2f252 <printk>
}
   193a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   193a8:	f240 1103 	movw	r1, #259	; 0x103
   193ac:	4802      	ldr	r0, [pc, #8]	; (193b8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   193ae:	f016 ba51 	b.w	2f854 <assert_post_action>
}
   193b2:	bd38      	pop	{r3, r4, r5, pc}
   193b4:	20027ef0 	.word	0x20027ef0
   193b8:	00037686 	.word	0x00037686
   193bc:	00038ae7 	.word	0x00038ae7
   193c0:	00036be5 	.word	0x00036be5
   193c4:	0003762b 	.word	0x0003762b

000193c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   193c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193cc:	4c2e      	ldr	r4, [pc, #184]	; (19488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   193ce:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   193d0:	4680      	mov	r8, r0
   193d2:	2700      	movs	r7, #0
   193d4:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   193d6:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   193da:	4d2c      	ldr	r5, [pc, #176]	; (1948c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   193dc:	454f      	cmp	r7, r9
   193de:	db02      	blt.n	193e6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   193e0:	b003      	add	sp, #12
   193e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   193e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   193ea:	9301      	str	r3, [sp, #4]
   193ec:	2b00      	cmp	r3, #0
   193ee:	d046      	beq.n	1947e <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   193f0:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   193f4:	4608      	mov	r0, r1
   193f6:	9100      	str	r1, [sp, #0]
   193f8:	f017 fe48 	bl	3108c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   193fc:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   19400:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   19402:	1858      	adds	r0, r3, r1
   19404:	3801      	subs	r0, #1
   19406:	f017 fe41 	bl	3108c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1940a:	4286      	cmp	r6, r0
   1940c:	4a20      	ldr	r2, [pc, #128]	; (19490 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1940e:	d018      	beq.n	19442 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   19410:	2314      	movs	r3, #20
   19412:	435f      	muls	r7, r3
   19414:	f06f 0315 	mvn.w	r3, #21
   19418:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1941c:	f240 1313 	movw	r3, #275	; 0x113
   19420:	4a1c      	ldr	r2, [pc, #112]	; (19494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   19422:	491d      	ldr	r1, [pc, #116]	; (19498 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   19424:	481d      	ldr	r0, [pc, #116]	; (1949c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   19426:	f015 ff14 	bl	2f252 <printk>
   1942a:	4649      	mov	r1, r9
   1942c:	481c      	ldr	r0, [pc, #112]	; (194a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1942e:	f015 ff10 	bl	2f252 <printk>
   19432:	f240 1113 	movw	r1, #275	; 0x113
   19436:	4817      	ldr	r0, [pc, #92]	; (19494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   19438:	b003      	add	sp, #12
   1943a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1943e:	f016 ba09 	b.w	2f854 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   19442:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   19446:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   19448:	d0e8      	beq.n	1941c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1944a:	7813      	ldrb	r3, [r2, #0]
   1944c:	42b3      	cmp	r3, r6
   1944e:	dde5      	ble.n	1941c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   19450:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   19454:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   19456:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   19458:	68e8      	ldr	r0, [r5, #12]
   1945a:	7b19      	ldrb	r1, [r3, #12]
   1945c:	f360 0104 	bfi	r1, r0, #0, #5
   19460:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   19462:	6929      	ldr	r1, [r5, #16]
   19464:	7b18      	ldrb	r0, [r3, #12]
   19466:	0849      	lsrs	r1, r1, #1
   19468:	f361 1047 	bfi	r0, r1, #5, #3
   1946c:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1946e:	68eb      	ldr	r3, [r5, #12]
   19470:	f023 031f 	bic.w	r3, r3, #31
   19474:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   19476:	692b      	ldr	r3, [r5, #16]
   19478:	f023 031f 	bic.w	r3, r3, #31
   1947c:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1947e:	3701      	adds	r7, #1
   19480:	3414      	adds	r4, #20
   19482:	f108 080c 	add.w	r8, r8, #12
   19486:	e7a9      	b.n	193dc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   19488:	200216ac 	.word	0x200216ac
   1948c:	e000ed90 	.word	0xe000ed90
   19490:	20027ef0 	.word	0x20027ef0
   19494:	00037686 	.word	0x00037686
   19498:	00038ae7 	.word	0x00038ae7
   1949c:	00036be5 	.word	0x00036be5
   194a0:	00037657 	.word	0x00037657

000194a4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   194a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194a6:	460e      	mov	r6, r1
   194a8:	4f09      	ldr	r7, [pc, #36]	; (194d0 <z_impl_zephyr_write_stdout+0x2c>)
   194aa:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   194ac:	f1c0 0501 	rsb	r5, r0, #1
   194b0:	192b      	adds	r3, r5, r4
   194b2:	429e      	cmp	r6, r3
   194b4:	dc01      	bgt.n	194ba <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   194b6:	4630      	mov	r0, r6
   194b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   194ba:	7863      	ldrb	r3, [r4, #1]
   194bc:	2b0a      	cmp	r3, #10
   194be:	d102      	bne.n	194c6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   194c0:	683b      	ldr	r3, [r7, #0]
   194c2:	200d      	movs	r0, #13
   194c4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   194c6:	683b      	ldr	r3, [r7, #0]
   194c8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   194cc:	4798      	blx	r3
   194ce:	e7ef      	b.n	194b0 <z_impl_zephyr_write_stdout+0xc>
   194d0:	200200ac 	.word	0x200200ac

000194d4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   194d4:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   194d6:	2105      	movs	r1, #5
   194d8:	4801      	ldr	r0, [pc, #4]	; (194e0 <_exit+0xc>)
   194da:	f7ff ffe3 	bl	194a4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   194de:	e7fe      	b.n	194de <_exit+0xa>
   194e0:	0003776c 	.word	0x0003776c

000194e4 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   194e4:	b538      	push	{r3, r4, r5, lr}
   194e6:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   194e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194ec:	480b      	ldr	r0, [pc, #44]	; (1951c <_sbrk+0x38>)
   194ee:	f015 fecf 	bl	2f290 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   194f2:	4a0b      	ldr	r2, [pc, #44]	; (19520 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   194f4:	490b      	ldr	r1, [pc, #44]	; (19524 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   194f6:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   194f8:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   194fc:	4425      	add	r5, r4
   194fe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   19502:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   19504:	bf2c      	ite	cs
   19506:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1950a:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   1950c:	4803      	ldr	r0, [pc, #12]	; (1951c <_sbrk+0x38>)
		heap_sz += count;
   1950e:	bf38      	it	cc
   19510:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   19512:	f015 feb8 	bl	2f286 <sys_sem_give>

	return ret;
}
   19516:	4620      	mov	r0, r4
   19518:	bd38      	pop	{r3, r4, r5, pc}
   1951a:	bf00      	nop
   1951c:	20020684 	.word	0x20020684
   19520:	200216c0 	.word	0x200216c0
   19524:	20038a67 	.word	0x20038a67

00019528 <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(struct device *dev)
{
   19528:	b530      	push	{r4, r5, lr}
   1952a:	b0a3      	sub	sp, #140	; 0x8c
	return z_impl_zsock_socket(family, type, proto);
   1952c:	f240 2201 	movw	r2, #513	; 0x201
   19530:	2102      	movs	r1, #2
   19532:	2066      	movs	r0, #102	; 0x66
   19534:	f7fd ff80 	bl	17438 <z_impl_zsock_socket>
	if (at_socket_fd == -1) {
   19538:	1c43      	adds	r3, r0, #1
   1953a:	4604      	mov	r4, r0
   1953c:	d104      	bne.n	19548 <thingy91_board_init+0x20>
		return -EFAULT;
   1953e:	f06f 050d 	mvn.w	r5, #13
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
		return err;
	}

	return 0;
}
   19542:	4628      	mov	r0, r5
   19544:	b023      	add	sp, #140	; 0x8c
   19546:	bd30      	pop	{r4, r5, pc}
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   19548:	2500      	movs	r5, #0
   1954a:	2210      	movs	r2, #16
   1954c:	e9cd 5500 	strd	r5, r5, [sp]
   19550:	462b      	mov	r3, r5
   19552:	4930      	ldr	r1, [pc, #192]	; (19614 <thingy91_board_init+0xec>)
   19554:	f016 fa8b 	bl	2fa6e <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   19558:	2810      	cmp	r0, #16
   1955a:	d00f      	beq.n	1957c <thingy91_board_init+0x54>
		close(at_socket_fd);
   1955c:	4620      	mov	r0, r4
   1955e:	f017 fdab 	bl	310b8 <close>
		__ASSERT_NO_MSG(false);
   19562:	492d      	ldr	r1, [pc, #180]	; (19618 <thingy91_board_init+0xf0>)
   19564:	232a      	movs	r3, #42	; 0x2a
   19566:	4a2d      	ldr	r2, [pc, #180]	; (1961c <thingy91_board_init+0xf4>)
   19568:	482d      	ldr	r0, [pc, #180]	; (19620 <thingy91_board_init+0xf8>)
   1956a:	f015 fe72 	bl	2f252 <printk>
   1956e:	212a      	movs	r1, #42	; 0x2a
		__ASSERT_NO_MSG(false);
   19570:	482a      	ldr	r0, [pc, #168]	; (1961c <thingy91_board_init+0xf4>)
   19572:	f016 f96f 	bl	2f854 <assert_post_action>
		return -EIO;
   19576:	f06f 0504 	mvn.w	r5, #4
   1957a:	e7e2      	b.n	19542 <thingy91_board_init+0x1a>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1957c:	2280      	movs	r2, #128	; 0x80
   1957e:	e9cd 5500 	strd	r5, r5, [sp]
   19582:	462b      	mov	r3, r5
   19584:	a902      	add	r1, sp, #8
   19586:	4620      	mov	r0, r4
   19588:	f016 fac3 	bl	2fb12 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   1958c:	2801      	cmp	r0, #1
   1958e:	dc0a      	bgt.n	195a6 <thingy91_board_init+0x7e>
		close(at_socket_fd);
   19590:	4620      	mov	r0, r4
   19592:	f017 fd91 	bl	310b8 <close>
		__ASSERT_NO_MSG(false);
   19596:	4920      	ldr	r1, [pc, #128]	; (19618 <thingy91_board_init+0xf0>)
   19598:	2334      	movs	r3, #52	; 0x34
   1959a:	4a20      	ldr	r2, [pc, #128]	; (1961c <thingy91_board_init+0xf4>)
   1959c:	4820      	ldr	r0, [pc, #128]	; (19620 <thingy91_board_init+0xf8>)
   1959e:	f015 fe58 	bl	2f252 <printk>
   195a2:	2134      	movs	r1, #52	; 0x34
   195a4:	e7e4      	b.n	19570 <thingy91_board_init+0x48>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   195a6:	2201      	movs	r2, #1
   195a8:	a902      	add	r1, sp, #8
   195aa:	481e      	ldr	r0, [pc, #120]	; (19624 <thingy91_board_init+0xfc>)
   195ac:	f01b fa2a 	bl	34a04 <memcmp>
	if ((buffer < 2) ||
   195b0:	4605      	mov	r5, r0
   195b2:	2800      	cmp	r0, #0
   195b4:	d1ec      	bne.n	19590 <thingy91_board_init+0x68>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   195b6:	225c      	movs	r2, #92	; 0x5c
   195b8:	e9cd 0000 	strd	r0, r0, [sp]
   195bc:	4603      	mov	r3, r0
   195be:	491a      	ldr	r1, [pc, #104]	; (19628 <thingy91_board_init+0x100>)
   195c0:	4620      	mov	r0, r4
   195c2:	f016 fa54 	bl	2fa6e <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   195c6:	285c      	cmp	r0, #92	; 0x5c
   195c8:	d003      	beq.n	195d2 <thingy91_board_init+0xaa>
		close(at_socket_fd);
   195ca:	4620      	mov	r0, r4
   195cc:	f017 fd74 	bl	310b8 <close>
   195d0:	e7d1      	b.n	19576 <thingy91_board_init+0x4e>
   195d2:	2217      	movs	r2, #23
   195d4:	e9cd 5500 	strd	r5, r5, [sp]
   195d8:	462b      	mov	r3, r5
   195da:	4914      	ldr	r1, [pc, #80]	; (1962c <thingy91_board_init+0x104>)
   195dc:	4620      	mov	r0, r4
   195de:	f016 fa46 	bl	2fa6e <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_COEX0)) {
   195e2:	2817      	cmp	r0, #23
   195e4:	d1f1      	bne.n	195ca <thingy91_board_init+0xa2>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   195e6:	2280      	movs	r2, #128	; 0x80
   195e8:	e9cd 5500 	strd	r5, r5, [sp]
   195ec:	462b      	mov	r3, r5
   195ee:	a902      	add	r1, sp, #8
   195f0:	4620      	mov	r0, r4
   195f2:	f016 fa8e 	bl	2fb12 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   195f6:	2801      	cmp	r0, #1
   195f8:	dde7      	ble.n	195ca <thingy91_board_init+0xa2>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   195fa:	2201      	movs	r2, #1
   195fc:	a902      	add	r1, sp, #8
   195fe:	4809      	ldr	r0, [pc, #36]	; (19624 <thingy91_board_init+0xfc>)
   19600:	f01b fa00 	bl	34a04 <memcmp>
	if ((buffer < 2) ||
   19604:	4605      	mov	r5, r0
   19606:	2800      	cmp	r0, #0
   19608:	d1df      	bne.n	195ca <thingy91_board_init+0xa2>
	close(at_socket_fd);
   1960a:	4620      	mov	r0, r4
   1960c:	f017 fd54 	bl	310b8 <close>
	if (err) {
   19610:	e797      	b.n	19542 <thingy91_board_init+0x1a>
   19612:	bf00      	nop
   19614:	00037781 	.word	0x00037781
   19618:	00038ae7 	.word	0x00038ae7
   1961c:	00037792 	.word	0x00037792
   19620:	00036be5 	.word	0x00036be5
   19624:	000377d0 	.word	0x000377d0
   19628:	000377d3 	.word	0x000377d3
   1962c:	00037830 	.word	0x00037830

00019630 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   19630:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19632:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   19634:	4a04      	ldr	r2, [pc, #16]	; (19648 <net_buf_id+0x18>)
   19636:	fb01 2303 	mla	r3, r1, r3, r2
   1963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1963c:	1ac0      	subs	r0, r0, r3
}
   1963e:	4b03      	ldr	r3, [pc, #12]	; (1964c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   19640:	10c0      	asrs	r0, r0, #3
}
   19642:	4358      	muls	r0, r3
   19644:	4770      	bx	lr
   19646:	bf00      	nop
   19648:	20020760 	.word	0x20020760
   1964c:	aaaaaaab 	.word	0xaaaaaaab

00019650 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19650:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19652:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19654:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19656:	4a09      	ldr	r2, [pc, #36]	; (1967c <fixed_data_alloc+0x2c>)
   19658:	fb04 2303 	mla	r3, r4, r3, r2
   1965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1965e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19660:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19662:	6823      	ldr	r3, [r4, #0]
   19664:	429a      	cmp	r2, r3
   19666:	bf94      	ite	ls
   19668:	600a      	strls	r2, [r1, #0]
   1966a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1966c:	f7ff ffe0 	bl	19630 <net_buf_id>
   19670:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19674:	fb02 3000 	mla	r0, r2, r0, r3
   19678:	bd10      	pop	{r4, pc}
   1967a:	bf00      	nop
   1967c:	20020760 	.word	0x20020760

00019680 <net_buf_reset>:
{
   19680:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   19682:	7943      	ldrb	r3, [r0, #5]
{
   19684:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   19686:	b14b      	cbz	r3, 1969c <net_buf_reset+0x1c>
   19688:	490d      	ldr	r1, [pc, #52]	; (196c0 <net_buf_reset+0x40>)
   1968a:	480e      	ldr	r0, [pc, #56]	; (196c4 <net_buf_reset+0x44>)
   1968c:	234f      	movs	r3, #79	; 0x4f
   1968e:	4a0e      	ldr	r2, [pc, #56]	; (196c8 <net_buf_reset+0x48>)
   19690:	f015 fddf 	bl	2f252 <printk>
   19694:	214f      	movs	r1, #79	; 0x4f
   19696:	480c      	ldr	r0, [pc, #48]	; (196c8 <net_buf_reset+0x48>)
   19698:	f016 f8dc 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1969c:	6823      	ldr	r3, [r4, #0]
   1969e:	b14b      	cbz	r3, 196b4 <net_buf_reset+0x34>
   196a0:	490a      	ldr	r1, [pc, #40]	; (196cc <net_buf_reset+0x4c>)
   196a2:	4808      	ldr	r0, [pc, #32]	; (196c4 <net_buf_reset+0x44>)
   196a4:	2350      	movs	r3, #80	; 0x50
   196a6:	4a08      	ldr	r2, [pc, #32]	; (196c8 <net_buf_reset+0x48>)
   196a8:	f015 fdd3 	bl	2f252 <printk>
   196ac:	2150      	movs	r1, #80	; 0x50
   196ae:	4806      	ldr	r0, [pc, #24]	; (196c8 <net_buf_reset+0x48>)
   196b0:	f016 f8d0 	bl	2f854 <assert_post_action>
 *
 * @param buf Buffer to reset.
 */
static inline void net_buf_simple_reset(struct net_buf_simple *buf)
{
	buf->len  = 0U;
   196b4:	2300      	movs	r3, #0
   196b6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   196b8:	6923      	ldr	r3, [r4, #16]
   196ba:	60a3      	str	r3, [r4, #8]
}
   196bc:	bd10      	pop	{r4, pc}
   196be:	bf00      	nop
   196c0:	0003788e 	.word	0x0003788e
   196c4:	00036be5 	.word	0x00036be5
   196c8:	0003786a 	.word	0x0003786a
   196cc:	0003789f 	.word	0x0003789f

000196d0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   196d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196d4:	4605      	mov	r5, r0
	u64_t end = z_timeout_end_calc(timeout);
   196d6:	4610      	mov	r0, r2
{
   196d8:	9101      	str	r1, [sp, #4]
   196da:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   196dc:	f01b f8d4 	bl	34888 <z_timeout_end_calc>
   196e0:	4607      	mov	r7, r0
   196e2:	468a      	mov	sl, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   196e4:	b94d      	cbnz	r5, 196fa <net_buf_alloc_len+0x2a>
   196e6:	494c      	ldr	r1, [pc, #304]	; (19818 <net_buf_alloc_len+0x148>)
   196e8:	484c      	ldr	r0, [pc, #304]	; (1981c <net_buf_alloc_len+0x14c>)
   196ea:	23f1      	movs	r3, #241	; 0xf1
   196ec:	4a4c      	ldr	r2, [pc, #304]	; (19820 <net_buf_alloc_len+0x150>)
   196ee:	f015 fdb0 	bl	2f252 <printk>
   196f2:	21f1      	movs	r1, #241	; 0xf1
   196f4:	484a      	ldr	r0, [pc, #296]	; (19820 <net_buf_alloc_len+0x150>)
   196f6:	f016 f8ad 	bl	2f854 <assert_post_action>
   196fa:	f04f 0320 	mov.w	r3, #32
   196fe:	f3ef 8b11 	mrs	fp, BASEPRI
   19702:	f383 8811 	msr	BASEPRI, r3
   19706:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1970a:	8beb      	ldrh	r3, [r5, #30]
   1970c:	2b00      	cmp	r3, #0
   1970e:	d056      	beq.n	197be <net_buf_alloc_len+0xee>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19710:	8baa      	ldrh	r2, [r5, #28]
   19712:	429a      	cmp	r2, r3
   19714:	d93f      	bls.n	19796 <net_buf_alloc_len+0xc6>
	return z_impl_k_queue_get(queue, timeout);
   19716:	2100      	movs	r1, #0
   19718:	4628      	mov	r0, r5
   1971a:	f00f fe33 	bl	29384 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1971e:	4604      	mov	r4, r0
   19720:	2800      	cmp	r0, #0
   19722:	d038      	beq.n	19796 <net_buf_alloc_len+0xc6>
	__asm__ volatile(
   19724:	f38b 8811 	msr	BASEPRI, fp
   19728:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1972c:	9d01      	ldr	r5, [sp, #4]
   1972e:	2d00      	cmp	r5, #0
   19730:	d070      	beq.n	19814 <net_buf_alloc_len+0x144>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19732:	1c73      	adds	r3, r6, #1
   19734:	2b01      	cmp	r3, #1
   19736:	d916      	bls.n	19766 <net_buf_alloc_len+0x96>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   19738:	f011 ff32 	bl	2b5a0 <z_tick_get>
   1973c:	ebb7 0800 	subs.w	r8, r7, r0
   19740:	eb6a 0901 	sbc.w	r9, sl, r1

			if (remaining <= 0) {
   19744:	f1b8 0f01 	cmp.w	r8, #1
   19748:	f179 0300 	sbcs.w	r3, r9, #0
   1974c:	bfa3      	ittte	ge
   1974e:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   19752:	2300      	movge	r3, #0
   19754:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
				timeout = K_NO_WAIT;
   19758:	2600      	movlt	r6, #0
   1975a:	bfa2      	ittt	ge
   1975c:	fbe1 2308 	umlalge	r2, r3, r1, r8
   19760:	0bd6      	lsrge	r6, r2, #15
   19762:	ea46 4643 	orrge.w	r6, r6, r3, lsl #17
	return pool->alloc->cb->alloc(buf, size, timeout);
   19766:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1976a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1976c:	4f2d      	ldr	r7, [pc, #180]	; (19824 <net_buf_alloc_len+0x154>)
   1976e:	4632      	mov	r2, r6
   19770:	fb08 7303 	mla	r3, r8, r3, r7
   19774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19776:	a901      	add	r1, sp, #4
   19778:	681b      	ldr	r3, [r3, #0]
   1977a:	4620      	mov	r0, r4
   1977c:	681b      	ldr	r3, [r3, #0]
   1977e:	4798      	blx	r3
   19780:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19782:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19784:	bb50      	cbnz	r0, 197dc <net_buf_alloc_len+0x10c>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   19786:	79a0      	ldrb	r0, [r4, #6]
   19788:	4621      	mov	r1, r4
   1978a:	fb00 7008 	mla	r0, r0, r8, r7
   1978e:	f01a ffb4 	bl	346fa <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19792:	4634      	mov	r4, r6
   19794:	e01e      	b.n	197d4 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   19796:	8beb      	ldrh	r3, [r5, #30]
   19798:	1e5a      	subs	r2, r3, #1
   1979a:	83ea      	strh	r2, [r5, #30]
   1979c:	f38b 8811 	msr	BASEPRI, fp
   197a0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   197a4:	2218      	movs	r2, #24
   197a6:	8bac      	ldrh	r4, [r5, #28]
   197a8:	1ae4      	subs	r4, r4, r3
   197aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   197ac:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   197b0:	4b1c      	ldr	r3, [pc, #112]	; (19824 <net_buf_alloc_len+0x154>)
   197b2:	1aed      	subs	r5, r5, r3
   197b4:	4b1c      	ldr	r3, [pc, #112]	; (19828 <net_buf_alloc_len+0x158>)
   197b6:	10ad      	asrs	r5, r5, #2
   197b8:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   197ba:	71a5      	strb	r5, [r4, #6]
		goto success;
   197bc:	e7b6      	b.n	1972c <net_buf_alloc_len+0x5c>
   197be:	f38b 8811 	msr	BASEPRI, fp
   197c2:	f3bf 8f6f 	isb	sy
   197c6:	4631      	mov	r1, r6
   197c8:	4628      	mov	r0, r5
   197ca:	f00f fddb 	bl	29384 <z_impl_k_queue_get>
	if (!buf) {
   197ce:	4604      	mov	r4, r0
   197d0:	2800      	cmp	r0, #0
   197d2:	d1ab      	bne.n	1972c <net_buf_alloc_len+0x5c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   197d4:	4620      	mov	r0, r4
   197d6:	b003      	add	sp, #12
   197d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   197dc:	9b01      	ldr	r3, [sp, #4]
   197de:	429d      	cmp	r5, r3
   197e0:	d90e      	bls.n	19800 <net_buf_alloc_len+0x130>
   197e2:	4912      	ldr	r1, [pc, #72]	; (1982c <net_buf_alloc_len+0x15c>)
   197e4:	f240 1351 	movw	r3, #337	; 0x151
   197e8:	4a0d      	ldr	r2, [pc, #52]	; (19820 <net_buf_alloc_len+0x150>)
   197ea:	480c      	ldr	r0, [pc, #48]	; (1981c <net_buf_alloc_len+0x14c>)
   197ec:	f015 fd31 	bl	2f252 <printk>
   197f0:	480f      	ldr	r0, [pc, #60]	; (19830 <net_buf_alloc_len+0x160>)
   197f2:	f015 fd2e 	bl	2f252 <printk>
   197f6:	f240 1151 	movw	r1, #337	; 0x151
   197fa:	4809      	ldr	r0, [pc, #36]	; (19820 <net_buf_alloc_len+0x150>)
   197fc:	f016 f82a 	bl	2f854 <assert_post_action>
	buf->frags = NULL;
   19800:	2300      	movs	r3, #0
   19802:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   19804:	2301      	movs	r3, #1
   19806:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   19808:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1980a:	4620      	mov	r0, r4
	buf->size  = size;
   1980c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1980e:	f7ff ff37 	bl	19680 <net_buf_reset>
	return buf;
   19812:	e7df      	b.n	197d4 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   19814:	6125      	str	r5, [r4, #16]
   19816:	e7f3      	b.n	19800 <net_buf_alloc_len+0x130>
   19818:	00037848 	.word	0x00037848
   1981c:	00036be5 	.word	0x00036be5
   19820:	0003786a 	.word	0x0003786a
   19824:	20020760 	.word	0x20020760
   19828:	ba2e8ba3 	.word	0xba2e8ba3
   1982c:	0003784d 	.word	0x0003784d
   19830:	00037086 	.word	0x00037086

00019834 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19838:	4604      	mov	r4, r0
   1983a:	b328      	cbz	r0, 19888 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1983c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1983e:	272c      	movs	r7, #44	; 0x2c
   19840:	4d1b      	ldr	r5, [pc, #108]	; (198b0 <net_buf_unref+0x7c>)
		if (--buf->ref > 0) {
   19842:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19844:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   19848:	3b01      	subs	r3, #1
   1984a:	b2db      	uxtb	r3, r3
   1984c:	7123      	strb	r3, [r4, #4]
   1984e:	b9cb      	cbnz	r3, 19884 <net_buf_unref+0x50>
		if (buf->__buf) {
   19850:	6921      	ldr	r1, [r4, #16]
   19852:	b159      	cbz	r1, 1986c <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19854:	7963      	ldrb	r3, [r4, #5]
   19856:	079b      	lsls	r3, r3, #30
   19858:	d407      	bmi.n	1986a <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1985a:	79a3      	ldrb	r3, [r4, #6]
   1985c:	4620      	mov	r0, r4
   1985e:	fb07 5303 	mla	r3, r7, r3, r5
   19862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19864:	681b      	ldr	r3, [r3, #0]
   19866:	689b      	ldr	r3, [r3, #8]
   19868:	4798      	blx	r3
			buf->__buf = NULL;
   1986a:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1986c:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1986e:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   19870:	fb07 5300 	mla	r3, r7, r0, r5
   19874:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   19876:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19878:	b1a3      	cbz	r3, 198a4 <net_buf_unref+0x70>
			pool->destroy(buf);
   1987a:	4620      	mov	r0, r4
   1987c:	4798      	blx	r3
	while (buf) {
   1987e:	4644      	mov	r4, r8
   19880:	2c00      	cmp	r4, #0
   19882:	d1de      	bne.n	19842 <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   19888:	490a      	ldr	r1, [pc, #40]	; (198b4 <net_buf_unref+0x80>)
   1988a:	480b      	ldr	r0, [pc, #44]	; (198b8 <net_buf_unref+0x84>)
   1988c:	f44f 7303 	mov.w	r3, #524	; 0x20c
   19890:	4a0a      	ldr	r2, [pc, #40]	; (198bc <net_buf_unref+0x88>)
   19892:	f015 fcde 	bl	2f252 <printk>
}
   19896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1989a:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1989e:	4807      	ldr	r0, [pc, #28]	; (198bc <net_buf_unref+0x88>)
   198a0:	f015 bfd8 	b.w	2f854 <assert_post_action>
   198a4:	4621      	mov	r1, r4
   198a6:	fb00 5007 	mla	r0, r0, r7, r5
   198aa:	f01a ff26 	bl	346fa <k_queue_prepend>
   198ae:	e7e6      	b.n	1987e <net_buf_unref+0x4a>
   198b0:	20020760 	.word	0x20020760
   198b4:	000378dd 	.word	0x000378dd
   198b8:	00036be5 	.word	0x00036be5
   198bc:	0003786a 	.word	0x0003786a

000198c0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   198c0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   198c2:	4604      	mov	r4, r0
   198c4:	b958      	cbnz	r0, 198de <net_buf_frag_last+0x1e>
   198c6:	4909      	ldr	r1, [pc, #36]	; (198ec <net_buf_frag_last+0x2c>)
   198c8:	4809      	ldr	r0, [pc, #36]	; (198f0 <net_buf_frag_last+0x30>)
   198ca:	f44f 731e 	mov.w	r3, #632	; 0x278
   198ce:	4a09      	ldr	r2, [pc, #36]	; (198f4 <net_buf_frag_last+0x34>)
   198d0:	f015 fcbf 	bl	2f252 <printk>
   198d4:	f44f 711e 	mov.w	r1, #632	; 0x278
   198d8:	4806      	ldr	r0, [pc, #24]	; (198f4 <net_buf_frag_last+0x34>)
   198da:	f015 ffbb 	bl	2f854 <assert_post_action>

	while (buf->frags) {
   198de:	6823      	ldr	r3, [r4, #0]
   198e0:	b90b      	cbnz	r3, 198e6 <net_buf_frag_last+0x26>
		buf = buf->frags;
	}

	return buf;
}
   198e2:	4620      	mov	r0, r4
   198e4:	bd10      	pop	{r4, pc}
   198e6:	461c      	mov	r4, r3
   198e8:	e7f9      	b.n	198de <net_buf_frag_last+0x1e>
   198ea:	bf00      	nop
   198ec:	000378dd 	.word	0x000378dd
   198f0:	00036be5 	.word	0x00036be5
   198f4:	0003786a 	.word	0x0003786a

000198f8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   198f8:	b538      	push	{r3, r4, r5, lr}
   198fa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   198fc:	4604      	mov	r4, r0
   198fe:	b958      	cbnz	r0, 19918 <net_buf_frag_insert+0x20>
   19900:	4910      	ldr	r1, [pc, #64]	; (19944 <net_buf_frag_insert+0x4c>)
   19902:	4811      	ldr	r0, [pc, #68]	; (19948 <net_buf_frag_insert+0x50>)
   19904:	f240 2383 	movw	r3, #643	; 0x283
   19908:	4a10      	ldr	r2, [pc, #64]	; (1994c <net_buf_frag_insert+0x54>)
   1990a:	f015 fca2 	bl	2f252 <printk>
   1990e:	f240 2183 	movw	r1, #643	; 0x283
   19912:	480e      	ldr	r0, [pc, #56]	; (1994c <net_buf_frag_insert+0x54>)
   19914:	f015 ff9e 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   19918:	b95d      	cbnz	r5, 19932 <net_buf_frag_insert+0x3a>
   1991a:	490d      	ldr	r1, [pc, #52]	; (19950 <net_buf_frag_insert+0x58>)
   1991c:	480a      	ldr	r0, [pc, #40]	; (19948 <net_buf_frag_insert+0x50>)
   1991e:	f44f 7321 	mov.w	r3, #644	; 0x284
   19922:	4a0a      	ldr	r2, [pc, #40]	; (1994c <net_buf_frag_insert+0x54>)
   19924:	f015 fc95 	bl	2f252 <printk>
   19928:	f44f 7121 	mov.w	r1, #644	; 0x284
   1992c:	4807      	ldr	r0, [pc, #28]	; (1994c <net_buf_frag_insert+0x54>)
   1992e:	f015 ff91 	bl	2f854 <assert_post_action>

	if (parent->frags) {
   19932:	6823      	ldr	r3, [r4, #0]
   19934:	b123      	cbz	r3, 19940 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   19936:	4628      	mov	r0, r5
   19938:	f7ff ffc2 	bl	198c0 <net_buf_frag_last>
   1993c:	6823      	ldr	r3, [r4, #0]
   1993e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   19940:	6025      	str	r5, [r4, #0]
}
   19942:	bd38      	pop	{r3, r4, r5, pc}
   19944:	0003785e 	.word	0x0003785e
   19948:	00036be5 	.word	0x00036be5
   1994c:	0003786a 	.word	0x0003786a
   19950:	00037865 	.word	0x00037865

00019954 <net_buf_simple_add>:
{
	memcpy(clone, original, sizeof(struct net_buf_simple));
}

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
   19954:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   19956:	6803      	ldr	r3, [r0, #0]
   19958:	8886      	ldrh	r6, [r0, #4]
   1995a:	4604      	mov	r4, r0
   1995c:	460d      	mov	r5, r1
   1995e:	441e      	add	r6, r3
	u8_t *tail = net_buf_simple_tail(buf);

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   19960:	f017 fbb3 	bl	310ca <net_buf_simple_tailroom>
   19964:	4288      	cmp	r0, r1
   19966:	d20b      	bcs.n	19980 <net_buf_simple_add+0x2c>
   19968:	4908      	ldr	r1, [pc, #32]	; (1998c <net_buf_simple_add+0x38>)
   1996a:	4809      	ldr	r0, [pc, #36]	; (19990 <net_buf_simple_add+0x3c>)
   1996c:	f240 3319 	movw	r3, #793	; 0x319
   19970:	4a08      	ldr	r2, [pc, #32]	; (19994 <net_buf_simple_add+0x40>)
   19972:	f015 fc6e 	bl	2f252 <printk>
   19976:	f240 3119 	movw	r1, #793	; 0x319
   1997a:	4806      	ldr	r0, [pc, #24]	; (19994 <net_buf_simple_add+0x40>)
   1997c:	f015 ff6a 	bl	2f854 <assert_post_action>

	buf->len += len;
   19980:	88a3      	ldrh	r3, [r4, #4]
	return tail;
}
   19982:	4630      	mov	r0, r6
	buf->len += len;
   19984:	441d      	add	r5, r3
   19986:	80a5      	strh	r5, [r4, #4]
}
   19988:	bd70      	pop	{r4, r5, r6, pc}
   1998a:	bf00      	nop
   1998c:	000378b9 	.word	0x000378b9
   19990:	00036be5 	.word	0x00036be5
   19994:	0003786a 	.word	0x0003786a

00019998 <net_ipv4_is_ll_addr>:
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
   19998:	6803      	ldr	r3, [r0, #0]
   1999a:	4a04      	ldr	r2, [pc, #16]	; (199ac <net_ipv4_is_ll_addr+0x14>)
   1999c:	ba1b      	rev	r3, r3
   1999e:	ea32 0303 	bics.w	r3, r2, r3
}
   199a2:	bf0c      	ite	eq
   199a4:	2001      	moveq	r0, #1
   199a6:	2000      	movne	r0, #0
   199a8:	4770      	bx	lr
   199aa:	bf00      	nop
   199ac:	a9fe0000 	.word	0xa9fe0000

000199b0 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   199b0:	b538      	push	{r3, r4, r5, lr}
   199b2:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   199b4:	4604      	mov	r4, r0
   199b6:	b970      	cbnz	r0, 199d6 <net_if_flag_is_set+0x26>
   199b8:	490b      	ldr	r1, [pc, #44]	; (199e8 <net_if_flag_is_set+0x38>)
   199ba:	f44f 7307 	mov.w	r3, #540	; 0x21c
   199be:	4a0b      	ldr	r2, [pc, #44]	; (199ec <net_if_flag_is_set+0x3c>)
   199c0:	480b      	ldr	r0, [pc, #44]	; (199f0 <net_if_flag_is_set+0x40>)
   199c2:	f015 fc46 	bl	2f252 <printk>
   199c6:	480b      	ldr	r0, [pc, #44]	; (199f4 <net_if_flag_is_set+0x44>)
   199c8:	f015 fc43 	bl	2f252 <printk>
   199cc:	f44f 7107 	mov.w	r1, #540	; 0x21c
   199d0:	4806      	ldr	r0, [pc, #24]	; (199ec <net_if_flag_is_set+0x3c>)
   199d2:	f015 ff3f 	bl	2f854 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   199d6:	6823      	ldr	r3, [r4, #0]
   199d8:	330c      	adds	r3, #12
   199da:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   199de:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   199e0:	f000 0001 	and.w	r0, r0, #1
   199e4:	bd38      	pop	{r3, r4, r5, pc}
   199e6:	bf00      	nop
   199e8:	00037918 	.word	0x00037918
   199ec:	000378f0 	.word	0x000378f0
   199f0:	00036be5 	.word	0x00036be5
   199f4:	00037086 	.word	0x00037086

000199f8 <iface_router_run_timer>:
	}
}


static void iface_router_run_timer(u32_t current_time)
{
   199f8:	b538      	push	{r3, r4, r5, lr}
   199fa:	4604      	mov	r4, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   199fc:	4817      	ldr	r0, [pc, #92]	; (19a5c <iface_router_run_timer+0x64>)
   199fe:	f011 fc3b 	bl	2b278 <z_timeout_remaining>
   19a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19a06:	fba0 0103 	umull	r0, r1, r0, r3
   19a0a:	0bc3      	lsrs	r3, r0, #15
	struct net_if_router *router, *next;
	u32_t new_timer = UINT_MAX;

	if (k_delayed_work_remaining_get(&router_timer)) {
   19a0c:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   19a10:	d002      	beq.n	19a18 <iface_router_run_timer+0x20>
		k_delayed_work_cancel(&router_timer);
   19a12:	4813      	ldr	r0, [pc, #76]	; (19a60 <iface_router_run_timer+0x68>)
   19a14:	f011 fa92 	bl	2af3c <k_delayed_work_cancel>
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19a18:	4b12      	ldr	r3, [pc, #72]	; (19a64 <iface_router_run_timer+0x6c>)
   19a1a:	681b      	ldr	r3, [r3, #0]
   19a1c:	b1e3      	cbz	r3, 19a58 <iface_router_run_timer+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
					 router, next, node) {
		u32_t current_timer = router->life_start +
			(MSEC_PER_SEC * router->lifetime) - current_time;
   19a22:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   19a26:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19a28:	b93b      	cbnz	r3, 19a3a <iface_router_run_timer+0x42>

		new_timer = MIN(current_timer, new_timer);
	}

	if (new_timer != UINT_MAX) {
   19a2a:	1c53      	adds	r3, r2, #1
   19a2c:	d014      	beq.n	19a58 <iface_router_run_timer+0x60>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
	}
}
   19a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   19a32:	490b      	ldr	r1, [pc, #44]	; (19a60 <iface_router_run_timer+0x68>)
   19a34:	480c      	ldr	r0, [pc, #48]	; (19a68 <iface_router_run_timer+0x70>)
   19a36:	f011 b9ef 	b.w	2ae18 <k_delayed_work_submit_to_queue>
			(MSEC_PER_SEC * router->lifetime) - current_time;
   19a3a:	8c18      	ldrh	r0, [r3, #32]
		u32_t current_timer = router->life_start +
   19a3c:	69db      	ldr	r3, [r3, #28]
   19a3e:	1b1b      	subs	r3, r3, r4
   19a40:	fb05 3300 	mla	r3, r5, r0, r3
		new_timer = MIN(current_timer, new_timer);
   19a44:	429a      	cmp	r2, r3
   19a46:	bf28      	it	cs
   19a48:	461a      	movcs	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19a4a:	b119      	cbz	r1, 19a54 <iface_router_run_timer+0x5c>
   19a4c:	6808      	ldr	r0, [r1, #0]
   19a4e:	460b      	mov	r3, r1
   19a50:	4601      	mov	r1, r0
   19a52:	e7e9      	b.n	19a28 <iface_router_run_timer+0x30>
   19a54:	4608      	mov	r0, r1
   19a56:	e7fa      	b.n	19a4e <iface_router_run_timer+0x56>
}
   19a58:	bd38      	pop	{r3, r4, r5, pc}
   19a5a:	bf00      	nop
   19a5c:	20021720 	.word	0x20021720
   19a60:	20021714 	.word	0x20021714
   19a64:	200216c4 	.word	0x200216c4
   19a68:	20027460 	.word	0x20027460

00019a6c <net_if_flag_set.constprop.32>:
static inline void net_if_flag_set(struct net_if *iface,
   19a6c:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   19a6e:	4604      	mov	r4, r0
   19a70:	b970      	cbnz	r0, 19a90 <net_if_flag_set.constprop.32+0x24>
   19a72:	490d      	ldr	r1, [pc, #52]	; (19aa8 <net_if_flag_set.constprop.32+0x3c>)
   19a74:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   19a78:	4a0c      	ldr	r2, [pc, #48]	; (19aac <net_if_flag_set.constprop.32+0x40>)
   19a7a:	480d      	ldr	r0, [pc, #52]	; (19ab0 <net_if_flag_set.constprop.32+0x44>)
   19a7c:	f015 fbe9 	bl	2f252 <printk>
   19a80:	480c      	ldr	r0, [pc, #48]	; (19ab4 <net_if_flag_set.constprop.32+0x48>)
   19a82:	f015 fbe6 	bl	2f252 <printk>
   19a86:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   19a8a:	4808      	ldr	r0, [pc, #32]	; (19aac <net_if_flag_set.constprop.32+0x40>)
   19a8c:	f015 fee2 	bl	2f854 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a90:	6823      	ldr	r3, [r4, #0]
   19a92:	330c      	adds	r3, #12
   19a94:	e8d3 2fef 	ldaex	r2, [r3]
   19a98:	f042 0201 	orr.w	r2, r2, #1
   19a9c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19aa0:	2900      	cmp	r1, #0
   19aa2:	d1f7      	bne.n	19a94 <net_if_flag_set.constprop.32+0x28>
}
   19aa4:	bd10      	pop	{r4, pc}
   19aa6:	bf00      	nop
   19aa8:	00037918 	.word	0x00037918
   19aac:	000378f0 	.word	0x000378f0
   19ab0:	00036be5 	.word	0x00036be5
   19ab4:	00037086 	.word	0x00037086

00019ab8 <net_if_ipv4_get_best_match.isra.17>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
   19ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19aba:	4615      	mov	r5, r2
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv4) {
   19abc:	4604      	mov	r4, r0
   19abe:	b310      	cbz	r0, 19b06 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   19ac0:	6942      	ldr	r2, [r0, #20]
   19ac2:	4b17      	ldr	r3, [pc, #92]	; (19b20 <net_if_ipv4_get_best_match.isra.17+0x68>)
   19ac4:	4013      	ands	r3, r2
   19ac6:	4a17      	ldr	r2, [pc, #92]	; (19b24 <net_if_ipv4_get_best_match.isra.17+0x6c>)
   19ac8:	4293      	cmp	r3, r2
   19aca:	d001      	beq.n	19ad0 <net_if_ipv4_get_best_match.isra.17+0x18>
		return NULL;
   19acc:	2400      	movs	r4, #0
   19ace:	e01a      	b.n	19b06 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   19ad0:	8823      	ldrh	r3, [r4, #0]
   19ad2:	2b01      	cmp	r3, #1
   19ad4:	d1fa      	bne.n	19acc <net_if_ipv4_get_best_match.isra.17+0x14>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
   19ad6:	1d26      	adds	r6, r4, #4
   19ad8:	4630      	mov	r0, r6
   19ada:	f7ff ff5d 	bl	19998 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
   19ade:	2800      	cmp	r0, #0
   19ae0:	d1f4      	bne.n	19acc <net_if_ipv4_get_best_match.isra.17+0x14>
   19ae2:	3901      	subs	r1, #1
   19ae4:	3403      	adds	r4, #3
		if (src[j] == dst[j]) {
   19ae6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   19aea:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   19aee:	f100 0208 	add.w	r2, r0, #8
   19af2:	42bb      	cmp	r3, r7
   19af4:	d109      	bne.n	19b0a <net_if_ipv4_get_best_match.isra.17+0x52>
			len += 8U;
   19af6:	b2d0      	uxtb	r0, r2
	for (j = 0U; j < addr_len; j++) {
   19af8:	2820      	cmp	r0, #32
   19afa:	d1f4      	bne.n	19ae6 <net_if_ipv4_get_best_match.isra.17+0x2e>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
			continue;
		}

		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
		if (len >= *best_so_far) {
   19afc:	782b      	ldrb	r3, [r5, #0]
   19afe:	4283      	cmp	r3, r0
   19b00:	d8e4      	bhi.n	19acc <net_if_ipv4_get_best_match.isra.17+0x14>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
   19b02:	4634      	mov	r4, r6
			*best_so_far = len;
   19b04:	7028      	strb	r0, [r5, #0]
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
   19b06:	4620      	mov	r0, r4
   19b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xor = src[j] ^ dst[j];
   19b0a:	407b      	eors	r3, r7
			for (k = 0U; k < 8; k++) {
   19b0c:	b2d2      	uxtb	r2, r2
				if (!(xor & 0x80)) {
   19b0e:	0619      	lsls	r1, r3, #24
   19b10:	d4f4      	bmi.n	19afc <net_if_ipv4_get_best_match.isra.17+0x44>
					len++;
   19b12:	3001      	adds	r0, #1
   19b14:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   19b16:	005b      	lsls	r3, r3, #1
			for (k = 0U; k < 8; k++) {
   19b18:	4282      	cmp	r2, r0
					xor <<= 1;
   19b1a:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
   19b1c:	d1f7      	bne.n	19b0e <net_if_ipv4_get_best_match.isra.17+0x56>
   19b1e:	e7ed      	b.n	19afc <net_if_ipv4_get_best_match.isra.17+0x44>
   19b20:	0002ff00 	.word	0x0002ff00
   19b24:	00020100 	.word	0x00020100

00019b28 <iface_router_expired>:
{
   19b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
   19b2a:	f017 fbc2 	bl	312b2 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19b2e:	4a18      	ldr	r2, [pc, #96]	; (19b90 <iface_router_expired+0x68>)
   19b30:	6813      	ldr	r3, [r2, #0]
   19b32:	b91b      	cbnz	r3, 19b3c <iface_router_expired+0x14>
}
   19b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
   19b38:	f7ff bf5e 	b.w	199f8 <iface_router_run_timer>
   19b3c:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
   19b3e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
   19b42:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b44:	681c      	ldr	r4, [r3, #0]
   19b46:	69de      	ldr	r6, [r3, #28]
   19b48:	8c1d      	ldrh	r5, [r3, #32]
   19b4a:	1a36      	subs	r6, r6, r0
   19b4c:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
   19b50:	2d00      	cmp	r5, #0
   19b52:	461f      	mov	r7, r3
   19b54:	dc0f      	bgt.n	19b76 <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   19b56:	681d      	ldr	r5, [r3, #0]
   19b58:	b999      	cbnz	r1, 19b82 <iface_router_expired+0x5a>
   19b5a:	6856      	ldr	r6, [r2, #4]
	list->head = node;
   19b5c:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19b5e:	429e      	cmp	r6, r3
   19b60:	d100      	bne.n	19b64 <iface_router_expired+0x3c>
	list->tail = node;
   19b62:	6055      	str	r5, [r2, #4]
		router->is_used = false;
   19b64:	460f      	mov	r7, r1
   19b66:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
   19b6a:	f8c3 c000 	str.w	ip, [r3]
   19b6e:	f36c 0500 	bfi	r5, ip, #0, #1
   19b72:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   19b76:	2c00      	cmp	r4, #0
   19b78:	d0dc      	beq.n	19b34 <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b7a:	4623      	mov	r3, r4
   19b7c:	4639      	mov	r1, r7
   19b7e:	6824      	ldr	r4, [r4, #0]
   19b80:	e7e1      	b.n	19b46 <iface_router_expired+0x1e>
	parent->next = child;
   19b82:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19b84:	6855      	ldr	r5, [r2, #4]
   19b86:	429d      	cmp	r5, r3
	list->tail = node;
   19b88:	bf08      	it	eq
   19b8a:	6051      	streq	r1, [r2, #4]
   19b8c:	e7ea      	b.n	19b64 <iface_router_expired+0x3c>
   19b8e:	bf00      	nop
   19b90:	200216c4 	.word	0x200216c4

00019b94 <net_if_queue_tx>:
{
   19b94:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   19b96:	2000      	movs	r0, #0
{
   19b98:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   19b9a:	f001 f8e1 	bl	1ad60 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19b9e:	2300      	movs	r3, #0
   19ba0:	4a04      	ldr	r2, [pc, #16]	; (19bb4 <net_if_queue_tx+0x20>)
   19ba2:	6023      	str	r3, [r4, #0]
   19ba4:	e9c4 2301 	strd	r2, r3, [r4, #4]
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   19ba8:	4621      	mov	r1, r4
}
   19baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   19bae:	b2c0      	uxtb	r0, r0
   19bb0:	f001 b8c2 	b.w	1ad38 <net_tc_submit_to_tx_queue>
   19bb4:	00019d79 	.word	0x00019d79

00019bb8 <net_if_get_default>:
}
   19bb8:	4b02      	ldr	r3, [pc, #8]	; (19bc4 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   19bba:	4803      	ldr	r0, [pc, #12]	; (19bc8 <net_if_get_default+0x10>)
}
   19bbc:	4298      	cmp	r0, r3
   19bbe:	bf08      	it	eq
   19bc0:	2000      	moveq	r0, #0
   19bc2:	4770      	bx	lr
   19bc4:	20020840 	.word	0x20020840
   19bc8:	20020820 	.word	0x20020820

00019bcc <net_if_ipv4_is_addr_bcast>:
{
   19bcc:	b570      	push	{r4, r5, r6, lr}
   19bce:	460e      	mov	r6, r1
	if (iface) {
   19bd0:	b168      	cbz	r0, 19bee <net_if_ipv4_is_addr_bcast+0x22>
}
   19bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ipv4_is_broadcast_address(iface, addr);
   19bd6:	f017 bb8d 	b.w	312f4 <ipv4_is_broadcast_address>
		ret = ipv4_is_broadcast_address(iface, addr);
   19bda:	4631      	mov	r1, r6
   19bdc:	4620      	mov	r0, r4
   19bde:	f017 fb89 	bl	312f4 <ipv4_is_broadcast_address>
		if (ret) {
   19be2:	b918      	cbnz	r0, 19bec <net_if_ipv4_is_addr_bcast+0x20>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19be4:	3420      	adds	r4, #32
   19be6:	42ac      	cmp	r4, r5
   19be8:	d1f7      	bne.n	19bda <net_if_ipv4_is_addr_bcast+0xe>
	return false;
   19bea:	2000      	movs	r0, #0
}
   19bec:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19bee:	4c01      	ldr	r4, [pc, #4]	; (19bf4 <net_if_ipv4_is_addr_bcast+0x28>)
   19bf0:	4d01      	ldr	r5, [pc, #4]	; (19bf8 <net_if_ipv4_is_addr_bcast+0x2c>)
   19bf2:	e7f8      	b.n	19be6 <net_if_ipv4_is_addr_bcast+0x1a>
   19bf4:	20020820 	.word	0x20020820
   19bf8:	20020840 	.word	0x20020840

00019bfc <net_if_ipv4_select_src_iface>:
{
   19bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19bfe:	4c0a      	ldr	r4, [pc, #40]	; (19c28 <net_if_ipv4_select_src_iface+0x2c>)
{
   19c00:	4607      	mov	r7, r0
   19c02:	4625      	mov	r5, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19c04:	4e09      	ldr	r6, [pc, #36]	; (19c2c <net_if_ipv4_select_src_iface+0x30>)
   19c06:	42b4      	cmp	r4, r6
   19c08:	d106      	bne.n	19c18 <net_if_ipv4_select_src_iface+0x1c>
		return NULL;
   19c0a:	4b07      	ldr	r3, [pc, #28]	; (19c28 <net_if_ipv4_select_src_iface+0x2c>)
   19c0c:	42a5      	cmp	r5, r4
   19c0e:	bf14      	ite	ne
   19c10:	461c      	movne	r4, r3
   19c12:	2400      	moveq	r4, #0
}
   19c14:	4620      	mov	r0, r4
   19c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
   19c18:	4639      	mov	r1, r7
   19c1a:	4620      	mov	r0, r4
   19c1c:	f017 fb56 	bl	312cc <net_if_ipv4_addr_mask_cmp>
		if (ret) {
   19c20:	2800      	cmp	r0, #0
   19c22:	d1f7      	bne.n	19c14 <net_if_ipv4_select_src_iface+0x18>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19c24:	3420      	adds	r4, #32
   19c26:	e7ee      	b.n	19c06 <net_if_ipv4_select_src_iface+0xa>
   19c28:	20020820 	.word	0x20020820
   19c2c:	20020840 	.word	0x20020840

00019c30 <net_if_ipv4_select_src_addr>:

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
						  const struct in_addr *dst)
{
	struct in_addr *src = NULL;
	u8_t best_match = 0U;
   19c30:	2300      	movs	r3, #0
{
   19c32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19c36:	4605      	mov	r5, r0
	struct net_if *iface;

	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   19c38:	4608      	mov	r0, r1
{
   19c3a:	460e      	mov	r6, r1
	u8_t best_match = 0U;
   19c3c:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   19c40:	f7ff feaa 	bl	19998 <net_ipv4_is_ll_addr>
   19c44:	bba8      	cbnz	r0, 19cb2 <net_if_ipv4_select_src_addr+0x82>
   19c46:	4608      	mov	r0, r1
   19c48:	f017 faed 	bl	31226 <net_ipv4_is_addr_mcast>
   19c4c:	bb88      	cbnz	r0, 19cb2 <net_if_ipv4_select_src_addr+0x82>

		for (iface = __net_if_start;
   19c4e:	4f1d      	ldr	r7, [pc, #116]	; (19cc4 <net_if_ipv4_select_src_addr+0x94>)
	struct in_addr *src = NULL;
   19c50:	4604      	mov	r4, r0
		     !dst_iface && iface != __net_if_end;
   19c52:	f8df 8074 	ldr.w	r8, [pc, #116]	; 19cc8 <net_if_ipv4_select_src_addr+0x98>
		for (iface = __net_if_start;
   19c56:	b185      	cbz	r5, 19c7a <net_if_ipv4_select_src_addr+0x4a>
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
			src = net_if_ipv4_get_best_match(dst_iface, dst,
   19c58:	f10d 0207 	add.w	r2, sp, #7
   19c5c:	6868      	ldr	r0, [r5, #4]
   19c5e:	f7ff ff2b 	bl	19ab8 <net_if_ipv4_get_best_match.isra.17>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19c62:	4604      	mov	r4, r0
   19c64:	e00b      	b.n	19c7e <net_if_ipv4_select_src_addr+0x4e>
			addr = net_if_ipv4_get_best_match(iface, dst,
   19c66:	6878      	ldr	r0, [r7, #4]
   19c68:	f10d 0207 	add.w	r2, sp, #7
   19c6c:	4631      	mov	r1, r6
   19c6e:	f7ff ff23 	bl	19ab8 <net_if_ipv4_get_best_match.isra.17>
			if (addr) {
   19c72:	2800      	cmp	r0, #0
   19c74:	bf18      	it	ne
   19c76:	4604      	movne	r4, r0
		     iface++) {
   19c78:	3720      	adds	r7, #32
		     !dst_iface && iface != __net_if_end;
   19c7a:	4547      	cmp	r7, r8
   19c7c:	d1f3      	bne.n	19c66 <net_if_ipv4_select_src_addr+0x36>
		}
	}

	if (!src) {
   19c7e:	b16c      	cbz	r4, 19c9c <net_if_ipv4_select_src_addr+0x6c>

		return net_ipv4_unspecified_address();
	}

	return src;
}
   19c80:	4620      	mov	r0, r4
   19c82:	b002      	add	sp, #8
   19c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			addr = net_if_ipv4_get_ll(iface, NET_ADDR_PREFERRED);
   19c88:	2101      	movs	r1, #1
   19c8a:	4630      	mov	r0, r6
   19c8c:	f017 fb43 	bl	31316 <net_if_ipv4_get_ll>
			if (addr) {
   19c90:	4604      	mov	r4, r0
   19c92:	2800      	cmp	r0, #0
   19c94:	d1f4      	bne.n	19c80 <net_if_ipv4_select_src_addr+0x50>
		     iface++) {
   19c96:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   19c98:	42be      	cmp	r6, r7
   19c9a:	d1f5      	bne.n	19c88 <net_if_ipv4_select_src_addr+0x58>
		src = net_if_ipv4_get_global_addr(dst_iface,
   19c9c:	2101      	movs	r1, #1
   19c9e:	4628      	mov	r0, r5
   19ca0:	f017 fb3c 	bl	3131c <net_if_ipv4_get_global_addr>
		if (src) {
   19ca4:	4604      	mov	r4, r0
   19ca6:	2800      	cmp	r0, #0
   19ca8:	d1ea      	bne.n	19c80 <net_if_ipv4_select_src_addr+0x50>
		return net_ipv4_unspecified_address();
   19caa:	f000 f957 	bl	19f5c <net_ipv4_unspecified_address>
   19cae:	4604      	mov	r4, r0
   19cb0:	e7e6      	b.n	19c80 <net_if_ipv4_select_src_addr+0x50>
   19cb2:	4e04      	ldr	r6, [pc, #16]	; (19cc4 <net_if_ipv4_select_src_addr+0x94>)
		     !dst_iface && iface != __net_if_end;
   19cb4:	4f04      	ldr	r7, [pc, #16]	; (19cc8 <net_if_ipv4_select_src_addr+0x98>)
		for (iface = __net_if_start;
   19cb6:	2d00      	cmp	r5, #0
   19cb8:	d0ee      	beq.n	19c98 <net_if_ipv4_select_src_addr+0x68>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19cba:	2101      	movs	r1, #1
   19cbc:	4628      	mov	r0, r5
   19cbe:	f017 fb2a 	bl	31316 <net_if_ipv4_get_ll>
   19cc2:	e7ce      	b.n	19c62 <net_if_ipv4_select_src_addr+0x32>
   19cc4:	20020820 	.word	0x20020820
   19cc8:	20020840 	.word	0x20020840

00019ccc <net_if_ipv4_addr_lookup>:

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
					    struct net_if **ret)
{
   19ccc:	b570      	push	{r4, r5, r6, lr}
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19cce:	4a0c      	ldr	r2, [pc, #48]	; (19d00 <net_if_ipv4_addr_lookup+0x34>)
   19cd0:	4c0c      	ldr	r4, [pc, #48]	; (19d04 <net_if_ipv4_addr_lookup+0x38>)
   19cd2:	42a2      	cmp	r2, r4
   19cd4:	d101      	bne.n	19cda <net_if_ipv4_addr_lookup+0xe>
				return &ipv4->unicast[i];
			}
		}
	}

	return NULL;
   19cd6:	2000      	movs	r0, #0
   19cd8:	e00e      	b.n	19cf8 <net_if_ipv4_addr_lookup+0x2c>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   19cda:	6853      	ldr	r3, [r2, #4]
		if (!ipv4) {
   19cdc:	b16b      	cbz	r3, 19cfa <net_if_ipv4_addr_lookup+0x2e>
			if (!ipv4->unicast[i].is_used ||
   19cde:	7d9d      	ldrb	r5, [r3, #22]
   19ce0:	07ad      	lsls	r5, r5, #30
   19ce2:	d50a      	bpl.n	19cfa <net_if_ipv4_addr_lookup+0x2e>
   19ce4:	881d      	ldrh	r5, [r3, #0]
   19ce6:	2d01      	cmp	r5, #1
   19ce8:	d107      	bne.n	19cfa <net_if_ipv4_addr_lookup+0x2e>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
   19cea:	6805      	ldr	r5, [r0, #0]
   19cec:	685e      	ldr	r6, [r3, #4]
   19cee:	42ae      	cmp	r6, r5
   19cf0:	d103      	bne.n	19cfa <net_if_ipv4_addr_lookup+0x2e>
				if (ret) {
   19cf2:	b101      	cbz	r1, 19cf6 <net_if_ipv4_addr_lookup+0x2a>
					*ret = iface;
   19cf4:	600a      	str	r2, [r1, #0]
				return &ipv4->unicast[i];
   19cf6:	4618      	mov	r0, r3
}
   19cf8:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19cfa:	3220      	adds	r2, #32
   19cfc:	e7e9      	b.n	19cd2 <net_if_ipv4_addr_lookup+0x6>
   19cfe:	bf00      	nop
   19d00:	20020820 	.word	0x20020820
   19d04:	20020840 	.word	0x20020840

00019d08 <net_if_ipv4_maddr_lookup>:
	return false;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
						   struct net_if **ret)
{
   19d08:	b570      	push	{r4, r5, r6, lr}
	struct net_if_mcast_addr *addr;
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19d0a:	4a0f      	ldr	r2, [pc, #60]	; (19d48 <net_if_ipv4_maddr_lookup+0x40>)
   19d0c:	4c0f      	ldr	r4, [pc, #60]	; (19d4c <net_if_ipv4_maddr_lookup+0x44>)
   19d0e:	42a2      	cmp	r2, r4
   19d10:	d101      	bne.n	19d16 <net_if_ipv4_maddr_lookup+0xe>

			return addr;
		}
	}

	return NULL;
   19d12:	2000      	movs	r0, #0
   19d14:	e00e      	b.n	19d34 <net_if_ipv4_maddr_lookup+0x2c>
		if (ret && *ret && iface != *ret) {
   19d16:	b119      	cbz	r1, 19d20 <net_if_ipv4_maddr_lookup+0x18>
   19d18:	680b      	ldr	r3, [r1, #0]
   19d1a:	b10b      	cbz	r3, 19d20 <net_if_ipv4_maddr_lookup+0x18>
   19d1c:	4293      	cmp	r3, r2
   19d1e:	d10e      	bne.n	19d3e <net_if_ipv4_maddr_lookup+0x36>
		addr = ipv4_maddr_find(iface, true, maddr);
   19d20:	6853      	ldr	r3, [r2, #4]
	if (!ipv4) {
   19d22:	b163      	cbz	r3, 19d3e <net_if_ipv4_maddr_lookup+0x36>
		if ((is_used && !ipv4->mcast[i].is_used) ||
   19d24:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
   19d28:	07ed      	lsls	r5, r5, #31
   19d2a:	d508      	bpl.n	19d3e <net_if_ipv4_maddr_lookup+0x36>
		if (addr) {
   19d2c:	b918      	cbnz	r0, 19d36 <net_if_ipv4_maddr_lookup+0x2e>
		return &ipv4->mcast[i];
   19d2e:	f103 0018 	add.w	r0, r3, #24
			if (ret) {
   19d32:	b931      	cbnz	r1, 19d42 <net_if_ipv4_maddr_lookup+0x3a>
}
   19d34:	bd70      	pop	{r4, r5, r6, pc}
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   19d36:	69de      	ldr	r6, [r3, #28]
   19d38:	6805      	ldr	r5, [r0, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
   19d3a:	42ae      	cmp	r6, r5
   19d3c:	d0f7      	beq.n	19d2e <net_if_ipv4_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19d3e:	3220      	adds	r2, #32
   19d40:	e7e5      	b.n	19d0e <net_if_ipv4_maddr_lookup+0x6>
				*ret = iface;
   19d42:	600a      	str	r2, [r1, #0]
   19d44:	e7f6      	b.n	19d34 <net_if_ipv4_maddr_lookup+0x2c>
   19d46:	bf00      	nop
   19d48:	20020820 	.word	0x20020820
   19d4c:	20020840 	.word	0x20020840

00019d50 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   19d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19d52:	4b08      	ldr	r3, [pc, #32]	; (19d74 <net_if_call_link_cb+0x24>)
{
   19d54:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19d56:	681b      	ldr	r3, [r3, #0]
{
   19d58:	460e      	mov	r6, r1
   19d5a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19d5c:	b14b      	cbz	r3, 19d72 <net_if_call_link_cb+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19d5e:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   19d60:	685b      	ldr	r3, [r3, #4]
   19d62:	463a      	mov	r2, r7
   19d64:	4631      	mov	r1, r6
   19d66:	4628      	mov	r0, r5
   19d68:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   19d6a:	b114      	cbz	r4, 19d72 <net_if_call_link_cb+0x22>
   19d6c:	4623      	mov	r3, r4
   19d6e:	6824      	ldr	r4, [r4, #0]
   19d70:	e7f6      	b.n	19d60 <net_if_call_link_cb+0x10>
	}
}
   19d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d74:	2002170c 	.word	0x2002170c

00019d78 <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   19d78:	2300      	movs	r3, #0
{
   19d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d7c:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   19d7e:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   19d82:	4b24      	ldr	r3, [pc, #144]	; (19e14 <process_tx_packet+0x9c>)
{
   19d84:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   19d86:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   19d88:	6a05      	ldr	r5, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   19d8a:	b1ab      	cbz	r3, 19db8 <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   19d8c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   19d8e:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   19d92:	b189      	cbz	r1, 19db8 <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   19d94:	2e06      	cmp	r6, #6
   19d96:	d80f      	bhi.n	19db8 <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   19d98:	f10d 070a 	add.w	r7, sp, #10
   19d9c:	2306      	movs	r3, #6
   19d9e:	4632      	mov	r2, r6
   19da0:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
   19da2:	f88d 6009 	strb.w	r6, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   19da6:	f01a fe48 	bl	34a3a <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   19daa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			ll_dst.addr = ll_dst_storage.addr;
   19dae:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   19db0:	f88d 6004 	strb.w	r6, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   19db4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19db8:	2100      	movs	r1, #0
   19dba:	4628      	mov	r0, r5
	context = net_pkt_context(pkt);
   19dbc:	69e7      	ldr	r7, [r4, #28]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19dbe:	f7ff fdf7 	bl	199b0 <net_if_flag_is_set>
   19dc2:	b320      	cbz	r0, 19e0e <process_tx_packet+0x96>
	return pkt->family;
   19dc4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		status = net_if_l2(iface)->send(iface, pkt);
   19dc8:	4628      	mov	r0, r5
		if (IS_ENABLED(CONFIG_NET_TCP) &&
   19dca:	f013 0f0e 	tst.w	r3, #14
	pkt->pkt_queued = send;
   19dce:	bf1e      	ittt	ne
   19dd0:	f894 303e 	ldrbne.w	r3, [r4, #62]	; 0x3e
   19dd4:	f36f 0300 	bfcne	r3, #0, #1
   19dd8:	f884 303e 	strbne.w	r3, [r4, #62]	; 0x3e
		status = net_if_l2(iface)->send(iface, pkt);
   19ddc:	f017 fa2c 	bl	31238 <net_if_l2>
   19de0:	4621      	mov	r1, r4
   19de2:	6843      	ldr	r3, [r0, #4]
   19de4:	4628      	mov	r0, r5
   19de6:	4798      	blx	r3
	if (status < 0) {
   19de8:	1e06      	subs	r6, r0, #0
   19dea:	da02      	bge.n	19df2 <process_tx_packet+0x7a>
		net_pkt_unref(pkt);
   19dec:	4620      	mov	r0, r4
   19dee:	f017 fd59 	bl	318a4 <net_pkt_unref>
	if (context) {
   19df2:	b11f      	cbz	r7, 19dfc <process_tx_packet+0x84>
		net_context_send_cb(context, status);
   19df4:	4631      	mov	r1, r6
   19df6:	4638      	mov	r0, r7
   19df8:	f017 fa23 	bl	31242 <net_context_send_cb>
	if (ll_dst.addr) {
   19dfc:	9b00      	ldr	r3, [sp, #0]
   19dfe:	b123      	cbz	r3, 19e0a <process_tx_packet+0x92>
		net_if_call_link_cb(iface, &ll_dst, status);
   19e00:	4632      	mov	r2, r6
   19e02:	4669      	mov	r1, sp
   19e04:	4628      	mov	r0, r5
   19e06:	f7ff ffa3 	bl	19d50 <net_if_call_link_cb>
}
   19e0a:	b005      	add	sp, #20
   19e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   19e0e:	f06f 0672 	mvn.w	r6, #114	; 0x72
   19e12:	e7eb      	b.n	19dec <process_tx_packet+0x74>
   19e14:	2002170c 	.word	0x2002170c

00019e18 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   19e18:	2800      	cmp	r0, #0
   19e1a:	dd08      	ble.n	19e2e <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   19e1c:	1e43      	subs	r3, r0, #1
   19e1e:	4805      	ldr	r0, [pc, #20]	; (19e34 <net_if_get_by_index+0x1c>)
   19e20:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   19e24:	4b04      	ldr	r3, [pc, #16]	; (19e38 <net_if_get_by_index+0x20>)
   19e26:	4298      	cmp	r0, r3
   19e28:	bf28      	it	cs
   19e2a:	2000      	movcs	r0, #0
   19e2c:	4770      	bx	lr
   19e2e:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   19e30:	4770      	bx	lr
   19e32:	bf00      	nop
   19e34:	20020820 	.word	0x20020820
   19e38:	20020840 	.word	0x20020840

00019e3c <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   19e3c:	4b06      	ldr	r3, [pc, #24]	; (19e58 <net_if_get_by_iface+0x1c>)
   19e3e:	4298      	cmp	r0, r3
   19e40:	d306      	bcc.n	19e50 <net_if_get_by_iface+0x14>
   19e42:	4a06      	ldr	r2, [pc, #24]	; (19e5c <net_if_get_by_iface+0x20>)
   19e44:	4290      	cmp	r0, r2
   19e46:	d203      	bcs.n	19e50 <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
   19e48:	1ac0      	subs	r0, r0, r3
   19e4a:	1140      	asrs	r0, r0, #5
   19e4c:	3001      	adds	r0, #1
   19e4e:	4770      	bx	lr
		return -1;
   19e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19e54:	4770      	bx	lr
   19e56:	bf00      	nop
   19e58:	20020820 	.word	0x20020820
   19e5c:	20020840 	.word	0x20020840

00019e60 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   19e60:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19e62:	2100      	movs	r1, #0
{
   19e64:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19e66:	f7ff fda3 	bl	199b0 <net_if_flag_is_set>
   19e6a:	b928      	cbnz	r0, 19e78 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   19e6c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   19e6e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   19e70:	7e9b      	ldrb	r3, [r3, #26]
   19e72:	b11b      	cbz	r3, 19e7c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   19e74:	f7ff fdfa 	bl	19a6c <net_if_flag_set.constprop.32>
		return 0;
   19e78:	2000      	movs	r0, #0
   19e7a:	e023      	b.n	19ec4 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   19e7c:	f017 f9dc 	bl	31238 <net_if_l2>
   19e80:	b9c0      	cbnz	r0, 19eb4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   19e82:	682b      	ldr	r3, [r5, #0]
   19e84:	691b      	ldr	r3, [r3, #16]
   19e86:	b973      	cbnz	r3, 19ea6 <net_if_up+0x46>
   19e88:	490f      	ldr	r1, [pc, #60]	; (19ec8 <net_if_up+0x68>)
   19e8a:	f640 53ba 	movw	r3, #3514	; 0xdba
   19e8e:	4a0f      	ldr	r2, [pc, #60]	; (19ecc <net_if_up+0x6c>)
   19e90:	480f      	ldr	r0, [pc, #60]	; (19ed0 <net_if_up+0x70>)
   19e92:	f015 f9de 	bl	2f252 <printk>
   19e96:	480f      	ldr	r0, [pc, #60]	; (19ed4 <net_if_up+0x74>)
   19e98:	f015 f9db 	bl	2f252 <printk>
   19e9c:	f640 51ba 	movw	r1, #3514	; 0xdba
   19ea0:	480a      	ldr	r0, [pc, #40]	; (19ecc <net_if_up+0x6c>)
   19ea2:	f015 fcd7 	bl	2f854 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   19ea6:	4628      	mov	r0, r5
   19ea8:	f7ff fde0 	bl	19a6c <net_if_flag_set.constprop.32>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   19eac:	4628      	mov	r0, r5
   19eae:	f017 f9ce 	bl	3124e <l2_flags_get>
   19eb2:	e7e1      	b.n	19e78 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   19eb4:	6883      	ldr	r3, [r0, #8]
   19eb6:	2b00      	cmp	r3, #0
   19eb8:	d0e3      	beq.n	19e82 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   19eba:	2101      	movs	r1, #1
   19ebc:	4628      	mov	r0, r5
   19ebe:	4798      	blx	r3
	if (status < 0) {
   19ec0:	2800      	cmp	r0, #0
   19ec2:	dade      	bge.n	19e82 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   19ec4:	bd38      	pop	{r3, r4, r5, pc}
   19ec6:	bf00      	nop
   19ec8:	0003791e 	.word	0x0003791e
   19ecc:	0003794f 	.word	0x0003794f
   19ed0:	00036be5 	.word	0x00036be5
   19ed4:	00037086 	.word	0x00037086

00019ed8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   19ed8:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   19eda:	4c10      	ldr	r4, [pc, #64]	; (19f1c <net_if_init+0x44>)
	net_tc_tx_init();
   19edc:	f000 ff48 	bl	1ad70 <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   19ee0:	4625      	mov	r5, r4
   19ee2:	4e0f      	ldr	r6, [pc, #60]	; (19f20 <net_if_init+0x48>)
   19ee4:	42b4      	cmp	r4, r6
   19ee6:	d10e      	bne.n	19f06 <net_if_init+0x2e>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   19ee8:	42ac      	cmp	r4, r5
   19eea:	d00b      	beq.n	19f04 <net_if_init+0x2c>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   19eec:	2240      	movs	r2, #64	; 0x40
   19eee:	4b0d      	ldr	r3, [pc, #52]	; (19f24 <net_if_init+0x4c>)
	k_delayed_work_init(&router_timer, iface_router_expired);
   19ef0:	490d      	ldr	r1, [pc, #52]	; (19f28 <net_if_init+0x50>)
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   19ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	k_delayed_work_init(&router_timer, iface_router_expired);
   19ef6:	480d      	ldr	r0, [pc, #52]	; (19f2c <net_if_init+0x54>)
   19ef8:	f01a fcb8 	bl	3486c <k_delayed_work_init>
	list->head = NULL;
   19efc:	2200      	movs	r2, #0
   19efe:	4b0c      	ldr	r3, [pc, #48]	; (19f30 <net_if_init+0x58>)
	list->tail = NULL;
   19f00:	e9c3 2200 	strd	r2, r2, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   19f04:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   19f06:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   19f08:	681b      	ldr	r3, [r3, #0]
   19f0a:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   19f0c:	b11b      	cbz	r3, 19f16 <net_if_init+0x3e>
   19f0e:	681b      	ldr	r3, [r3, #0]
   19f10:	b10b      	cbz	r3, 19f16 <net_if_init+0x3e>
	api->init(iface);
   19f12:	4620      	mov	r0, r4
   19f14:	4798      	blx	r3
	     iface++, if_count++) {
   19f16:	3420      	adds	r4, #32
   19f18:	e7e4      	b.n	19ee4 <net_if_init+0xc>
   19f1a:	bf00      	nop
   19f1c:	20020820 	.word	0x20020820
   19f20:	20020840 	.word	0x20020840
   19f24:	200216cc 	.word	0x200216cc
   19f28:	00019b29 	.word	0x00019b29
   19f2c:	20021714 	.word	0x20021714
   19f30:	200216c4 	.word	0x200216c4

00019f34 <net_if_post_init>:

void net_if_post_init(void)
{
   19f34:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19f36:	4c07      	ldr	r4, [pc, #28]	; (19f54 <net_if_post_init+0x20>)
   19f38:	4d07      	ldr	r5, [pc, #28]	; (19f58 <net_if_post_init+0x24>)
   19f3a:	42ac      	cmp	r4, r5
   19f3c:	d100      	bne.n	19f40 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   19f3e:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   19f40:	2103      	movs	r1, #3
   19f42:	4620      	mov	r0, r4
   19f44:	f7ff fd34 	bl	199b0 <net_if_flag_is_set>
   19f48:	b910      	cbnz	r0, 19f50 <net_if_post_init+0x1c>
			net_if_up(iface);
   19f4a:	4620      	mov	r0, r4
   19f4c:	f7ff ff88 	bl	19e60 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19f50:	3420      	adds	r4, #32
   19f52:	e7f2      	b.n	19f3a <net_if_post_init+0x6>
   19f54:	20020820 	.word	0x20020820
   19f58:	20020840 	.word	0x20020840

00019f5c <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
   19f5c:	4800      	ldr	r0, [pc, #0]	; (19f60 <net_ipv4_unspecified_address+0x4>)
   19f5e:	4770      	bx	lr
   19f60:	00035c34 	.word	0x00035c34

00019f64 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
   19f64:	4800      	ldr	r0, [pc, #0]	; (19f68 <net_ipv4_broadcast_address+0x4>)
   19f66:	4770      	bx	lr
   19f68:	00035c38 	.word	0x00035c38

00019f6c <net_context_is_used>:
{
   19f6c:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19f6e:	4604      	mov	r4, r0
   19f70:	b970      	cbnz	r0, 19f90 <net_context_is_used+0x24>
   19f72:	490a      	ldr	r1, [pc, #40]	; (19f9c <net_context_is_used+0x30>)
   19f74:	f44f 73a9 	mov.w	r3, #338	; 0x152
   19f78:	4a09      	ldr	r2, [pc, #36]	; (19fa0 <net_context_is_used+0x34>)
   19f7a:	480a      	ldr	r0, [pc, #40]	; (19fa4 <net_context_is_used+0x38>)
   19f7c:	f015 f969 	bl	2f252 <printk>
   19f80:	4809      	ldr	r0, [pc, #36]	; (19fa8 <net_context_is_used+0x3c>)
   19f82:	f015 f966 	bl	2f252 <printk>
   19f86:	f44f 71a9 	mov.w	r1, #338	; 0x152
   19f8a:	4805      	ldr	r0, [pc, #20]	; (19fa0 <net_context_is_used+0x34>)
   19f8c:	f015 fc62 	bl	2f854 <assert_post_action>
	return context->flags & NET_CONTEXT_IN_USE;
   19f90:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
}
   19f94:	f000 0001 	and.w	r0, r0, #1
   19f98:	bd10      	pop	{r4, pc}
   19f9a:	bf00      	nop
   19f9c:	0003707e 	.word	0x0003707e
   19fa0:	00037051 	.word	0x00037051
   19fa4:	00036be5 	.word	0x00036be5
   19fa8:	00037086 	.word	0x00037086

00019fac <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   19fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fb0:	460f      	mov	r7, r1
   19fb2:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   19fb4:	4680      	mov	r8, r0
   19fb6:	4c0f      	ldr	r4, [pc, #60]	; (19ff4 <check_used_port+0x48>)
   19fb8:	f504 7640 	add.w	r6, r4, #768	; 0x300
		if (!net_context_is_used(&contexts[i])) {
   19fbc:	4620      	mov	r0, r4
   19fbe:	f7ff ffd5 	bl	19f6c <net_context_is_used>
   19fc2:	b170      	cbz	r0, 19fe2 <check_used_port+0x36>
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   19fc4:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   19fc8:	4543      	cmp	r3, r8
   19fca:	d10a      	bne.n	19fe2 <check_used_port+0x36>
   19fcc:	8be3      	ldrh	r3, [r4, #30]
   19fce:	42bb      	cmp	r3, r7
   19fd0:	d107      	bne.n	19fe2 <check_used_port+0x36>
							     sin6_addr,
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   19fd2:	882b      	ldrh	r3, [r5, #0]
   19fd4:	2b01      	cmp	r3, #1
   19fd6:	d104      	bne.n	19fe2 <check_used_port+0x36>
   19fd8:	6a23      	ldr	r3, [r4, #32]
   19fda:	686a      	ldr	r2, [r5, #4]
   19fdc:	681b      	ldr	r3, [r3, #0]
			   local_addr->sa_family == AF_INET) {
			if (net_ipv4_addr_cmp(
   19fde:	429a      	cmp	r2, r3
   19fe0:	d005      	beq.n	19fee <check_used_port+0x42>
   19fe2:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19fe4:	42b4      	cmp	r4, r6
   19fe6:	d1e9      	bne.n	19fbc <check_used_port+0x10>
				return -EEXIST;
			}
		}
	}

	return 0;
   19fe8:	2000      	movs	r0, #0
}
   19fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EEXIST;
   19fee:	f06f 0010 	mvn.w	r0, #16
   19ff2:	e7fa      	b.n	19fea <check_used_port+0x3e>
   19ff4:	20021734 	.word	0x20021734

00019ff8 <net_context_get_state>:
{
   19ff8:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   19ffa:	4604      	mov	r4, r0
   19ffc:	b970      	cbnz	r0, 1a01c <net_context_get_state+0x24>
   19ffe:	490a      	ldr	r1, [pc, #40]	; (1a028 <net_context_get_state+0x30>)
   1a000:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1a004:	4a09      	ldr	r2, [pc, #36]	; (1a02c <net_context_get_state+0x34>)
   1a006:	480a      	ldr	r0, [pc, #40]	; (1a030 <net_context_get_state+0x38>)
   1a008:	f015 f923 	bl	2f252 <printk>
   1a00c:	4809      	ldr	r0, [pc, #36]	; (1a034 <net_context_get_state+0x3c>)
   1a00e:	f015 f920 	bl	2f252 <printk>
   1a012:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1a016:	4805      	ldr	r0, [pc, #20]	; (1a02c <net_context_get_state+0x34>)
   1a018:	f015 fc1c 	bl	2f854 <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1a01c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1a020:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1a024:	bd10      	pop	{r4, pc}
   1a026:	bf00      	nop
   1a028:	0003707e 	.word	0x0003707e
   1a02c:	00037051 	.word	0x00037051
   1a030:	00036be5 	.word	0x00036be5
   1a034:	00037086 	.word	0x00037086

0001a038 <net_context_get_family>:
{
   1a038:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1a03a:	4604      	mov	r4, r0
   1a03c:	b970      	cbnz	r0, 1a05c <net_context_get_family+0x24>
   1a03e:	490a      	ldr	r1, [pc, #40]	; (1a068 <net_context_get_family+0x30>)
   1a040:	f240 13cb 	movw	r3, #459	; 0x1cb
   1a044:	4a09      	ldr	r2, [pc, #36]	; (1a06c <net_context_get_family+0x34>)
   1a046:	480a      	ldr	r0, [pc, #40]	; (1a070 <net_context_get_family+0x38>)
   1a048:	f015 f903 	bl	2f252 <printk>
   1a04c:	4809      	ldr	r0, [pc, #36]	; (1a074 <net_context_get_family+0x3c>)
   1a04e:	f015 f900 	bl	2f252 <printk>
   1a052:	f240 11cb 	movw	r1, #459	; 0x1cb
   1a056:	4805      	ldr	r0, [pc, #20]	; (1a06c <net_context_get_family+0x34>)
   1a058:	f015 fbfc 	bl	2f854 <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1a05c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1a060:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1a064:	bd10      	pop	{r4, pc}
   1a066:	bf00      	nop
   1a068:	0003707e 	.word	0x0003707e
   1a06c:	00037051 	.word	0x00037051
   1a070:	00036be5 	.word	0x00036be5
   1a074:	00037086 	.word	0x00037086

0001a078 <net_context_get_type>:
{
   1a078:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1a07a:	4604      	mov	r4, r0
   1a07c:	b970      	cbnz	r0, 1a09c <net_context_get_type+0x24>
   1a07e:	490a      	ldr	r1, [pc, #40]	; (1a0a8 <net_context_get_type+0x30>)
   1a080:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1a084:	4a09      	ldr	r2, [pc, #36]	; (1a0ac <net_context_get_type+0x34>)
   1a086:	480a      	ldr	r0, [pc, #40]	; (1a0b0 <net_context_get_type+0x38>)
   1a088:	f015 f8e3 	bl	2f252 <printk>
   1a08c:	4809      	ldr	r0, [pc, #36]	; (1a0b4 <net_context_get_type+0x3c>)
   1a08e:	f015 f8e0 	bl	2f252 <printk>
   1a092:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1a096:	4805      	ldr	r0, [pc, #20]	; (1a0ac <net_context_get_type+0x34>)
   1a098:	f015 fbdc 	bl	2f854 <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1a09c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1a0a0:	f3c0 1081 	ubfx	r0, r0, #6, #2
   1a0a4:	bd10      	pop	{r4, pc}
   1a0a6:	bf00      	nop
   1a0a8:	0003707e 	.word	0x0003707e
   1a0ac:	00037051 	.word	0x00037051
   1a0b0:	00036be5 	.word	0x00036be5
   1a0b4:	00037086 	.word	0x00037086

0001a0b8 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0ba:	4605      	mov	r5, r0
   1a0bc:	460e      	mov	r6, r1
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   1a0be:	4f08      	ldr	r7, [pc, #32]	; (1a0e0 <find_available_port+0x28>)
   1a0c0:	f002 faea 	bl	1c698 <sys_rand32_get>
   1a0c4:	ea40 0407 	orr.w	r4, r0, r7
   1a0c8:	ba64      	rev16	r4, r4
   1a0ca:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
   1a0cc:	4632      	mov	r2, r6
   1a0ce:	4621      	mov	r1, r4
   1a0d0:	f895 0078 	ldrb.w	r0, [r5, #120]	; 0x78
   1a0d4:	f7ff ff6a 	bl	19fac <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1a0d8:	3011      	adds	r0, #17
   1a0da:	d0f1      	beq.n	1a0c0 <find_available_port+0x8>

	return htons(local_port);
}
   1a0dc:	4620      	mov	r0, r4
   1a0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0e0:	ffff8000 	.word	0xffff8000

0001a0e4 <net_context_set_iface.isra.16>:
 * @details This function binds network interface to this context.
 *
 * @param context Network context.
 * @param iface Network interface.
 */
static inline void net_context_set_iface(struct net_context *context,
   1a0e4:	b538      	push	{r3, r4, r5, lr}
   1a0e6:	4605      	mov	r5, r0
					 struct net_if *iface)
{
	NET_ASSERT(iface);
   1a0e8:	460c      	mov	r4, r1
   1a0ea:	b971      	cbnz	r1, 1a10a <net_context_set_iface.isra.16+0x26>
   1a0ec:	4909      	ldr	r1, [pc, #36]	; (1a114 <net_context_set_iface.isra.16+0x30>)
   1a0ee:	f240 2381 	movw	r3, #641	; 0x281
   1a0f2:	4a09      	ldr	r2, [pc, #36]	; (1a118 <net_context_set_iface.isra.16+0x34>)
   1a0f4:	4809      	ldr	r0, [pc, #36]	; (1a11c <net_context_set_iface.isra.16+0x38>)
   1a0f6:	f015 f8ac 	bl	2f252 <printk>
   1a0fa:	4809      	ldr	r0, [pc, #36]	; (1a120 <net_context_set_iface.isra.16+0x3c>)
   1a0fc:	f015 f8a9 	bl	2f252 <printk>
   1a100:	f240 2181 	movw	r1, #641	; 0x281
   1a104:	4804      	ldr	r0, [pc, #16]	; (1a118 <net_context_set_iface.isra.16+0x34>)
   1a106:	f015 fba5 	bl	2f854 <assert_post_action>

	context->iface = net_if_get_by_iface(iface);
   1a10a:	4620      	mov	r0, r4
   1a10c:	f7ff fe96 	bl	19e3c <net_if_get_by_iface>
   1a110:	7028      	strb	r0, [r5, #0]
}
   1a112:	bd38      	pop	{r3, r4, r5, pc}
   1a114:	00037918 	.word	0x00037918
   1a118:	00037051 	.word	0x00037051
   1a11c:	00036be5 	.word	0x00036be5
   1a120:	00037086 	.word	0x00037086

0001a124 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
   1a124:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a128:	4682      	mov	sl, r0
   1a12a:	460e      	mov	r6, r1
   1a12c:	4690      	mov	r8, r2
   1a12e:	4699      	mov	r9, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a130:	2700      	movs	r7, #0
   1a132:	4d2a      	ldr	r5, [pc, #168]	; (1a1dc <net_context_packet_received+0xb8>)
		if (!net_context_is_used(&contexts[i])) {
   1a134:	4628      	mov	r0, r5
   1a136:	462c      	mov	r4, r5
   1a138:	f7ff ff18 	bl	19f6c <net_context_is_used>
   1a13c:	b110      	cbz	r0, 1a144 <net_context_packet_received+0x20>
		if (contexts[i].conn_handler == conn_handler) {
   1a13e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a140:	459a      	cmp	sl, r3
   1a142:	d014      	beq.n	1a16e <net_context_packet_received+0x4a>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a144:	3701      	adds	r7, #1
   1a146:	2f06      	cmp	r7, #6
   1a148:	f105 0580 	add.w	r5, r5, #128	; 0x80
   1a14c:	d1f2      	bne.n	1a134 <net_context_packet_received+0x10>
	struct net_context *context = find_context(conn);
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
   1a14e:	f240 63b9 	movw	r3, #1721	; 0x6b9
   1a152:	4a23      	ldr	r2, [pc, #140]	; (1a1e0 <net_context_packet_received+0xbc>)
   1a154:	4923      	ldr	r1, [pc, #140]	; (1a1e4 <net_context_packet_received+0xc0>)
   1a156:	4824      	ldr	r0, [pc, #144]	; (1a1e8 <net_context_packet_received+0xc4>)
   1a158:	f015 f87b 	bl	2f252 <printk>
   1a15c:	4823      	ldr	r0, [pc, #140]	; (1a1ec <net_context_packet_received+0xc8>)
   1a15e:	f015 f878 	bl	2f252 <printk>
   1a162:	f240 61b9 	movw	r1, #1721	; 0x6b9
   1a166:	481e      	ldr	r0, [pc, #120]	; (1a1e0 <net_context_packet_received+0xbc>)
   1a168:	f015 fb74 	bl	2f854 <assert_post_action>
	return NULL;
   1a16c:	2400      	movs	r4, #0
	NET_ASSERT(net_pkt_iface(pkt));
   1a16e:	6a33      	ldr	r3, [r6, #32]
   1a170:	b973      	cbnz	r3, 1a190 <net_context_packet_received+0x6c>
   1a172:	491f      	ldr	r1, [pc, #124]	; (1a1f0 <net_context_packet_received+0xcc>)
   1a174:	f240 63ba 	movw	r3, #1722	; 0x6ba
   1a178:	4a19      	ldr	r2, [pc, #100]	; (1a1e0 <net_context_packet_received+0xbc>)
   1a17a:	481b      	ldr	r0, [pc, #108]	; (1a1e8 <net_context_packet_received+0xc4>)
   1a17c:	f015 f869 	bl	2f252 <printk>
   1a180:	481a      	ldr	r0, [pc, #104]	; (1a1ec <net_context_packet_received+0xc8>)
   1a182:	f015 f866 	bl	2f252 <printk>
   1a186:	f240 61ba 	movw	r1, #1722	; 0x6ba
   1a18a:	4815      	ldr	r0, [pc, #84]	; (1a1e0 <net_context_packet_received+0xbc>)
   1a18c:	f015 fb62 	bl	2f854 <assert_post_action>

	k_mutex_lock(&context->lock, K_FOREVER);
   1a190:	f104 0708 	add.w	r7, r4, #8
   1a194:	4638      	mov	r0, r7
   1a196:	f017 f9e0 	bl	3155a <k_mutex_lock.constprop.28>

	net_context_set_iface(context, net_pkt_iface(pkt));
   1a19a:	6a31      	ldr	r1, [r6, #32]
   1a19c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1a1a0:	f7ff ffa0 	bl	1a0e4 <net_context_set_iface.isra.16>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
   1a1a4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	pkt->context = ctx;
   1a1a8:	61f4      	str	r4, [r6, #28]
   1a1aa:	f1ba 0f00 	cmp.w	sl, #0
   1a1ae:	d013      	beq.n	1a1d8 <net_context_packet_received+0xb4>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   1a1b0:	2500      	movs	r5, #0
   1a1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a1b4:	9500      	str	r5, [sp, #0]
   1a1b6:	9301      	str	r3, [sp, #4]
   1a1b8:	4642      	mov	r2, r8
   1a1ba:	464b      	mov	r3, r9
   1a1bc:	4631      	mov	r1, r6
   1a1be:	4620      	mov	r0, r4
   1a1c0:	47d0      	blx	sl
	z_impl_k_sem_give(sem);
   1a1c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1a1c6:	f010 fb63 	bl	2a890 <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
   1a1ca:	4638      	mov	r0, r7
   1a1cc:	f017 f9a8 	bl	31520 <k_mutex_unlock>

	return verdict;
}
   1a1d0:	4628      	mov	r0, r5
   1a1d2:	b002      	add	sp, #8
   1a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	enum net_verdict verdict = NET_DROP;
   1a1d8:	2502      	movs	r5, #2
   1a1da:	e7f6      	b.n	1a1ca <net_context_packet_received+0xa6>
   1a1dc:	20021734 	.word	0x20021734
   1a1e0:	00037af7 	.word	0x00037af7
   1a1e4:	0003707e 	.word	0x0003707e
   1a1e8:	00036be5 	.word	0x00036be5
   1a1ec:	00037086 	.word	0x00037086
   1a1f0:	00037b26 	.word	0x00037b26

0001a1f4 <net_context_get>:
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1a1f4:	2802      	cmp	r0, #2
{
   1a1f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1fa:	4607      	mov	r7, r0
   1a1fc:	468a      	mov	sl, r1
   1a1fe:	4690      	mov	r8, r2
   1a200:	4699      	mov	r9, r3
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1a202:	f000 809d 	beq.w	1a340 <net_context_get+0x14c>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   1a206:	2804      	cmp	r0, #4
   1a208:	f000 809a 	beq.w	1a340 <net_context_get+0x14c>
		if (type == SOCK_RAW) {
   1a20c:	2903      	cmp	r1, #3
   1a20e:	d003      	beq.n	1a218 <net_context_get+0x24>
			if (family == AF_PACKET || family == AF_CAN) {
   1a210:	1ec3      	subs	r3, r0, #3
   1a212:	2b01      	cmp	r3, #1
   1a214:	f240 809a 	bls.w	1a34c <net_context_get+0x158>
		if (family != AF_INET && family != AF_INET6 &&
   1a218:	1e7b      	subs	r3, r7, #1
   1a21a:	2b03      	cmp	r3, #3
   1a21c:	f200 8093 	bhi.w	1a346 <net_context_get+0x152>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
   1a220:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1a224:	2b02      	cmp	r3, #2
   1a226:	f200 8091 	bhi.w	1a34c <net_context_get+0x158>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   1a22a:	f1ba 0f03 	cmp.w	sl, #3
   1a22e:	d00a      	beq.n	1a246 <net_context_get+0x52>
   1a230:	f1b8 0f11 	cmp.w	r8, #17
   1a234:	f000 8090 	beq.w	1a358 <net_context_get+0x164>
   1a238:	f1b8 0f06 	cmp.w	r8, #6
   1a23c:	f000 8093 	beq.w	1a366 <net_context_get+0x172>
			return -EPROTONOSUPPORT;
   1a240:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1a244:	e01f      	b.n	1a286 <net_context_get+0x92>
		if (!context) {
   1a246:	f1b9 0f00 	cmp.w	r9, #0
   1a24a:	f000 8082 	beq.w	1a352 <net_context_get+0x15e>
	return z_impl_k_sem_take(sem, timeout);
   1a24e:	4c47      	ldr	r4, [pc, #284]	; (1a36c <net_context_get+0x178>)
   1a250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a254:	4846      	ldr	r0, [pc, #280]	; (1a370 <net_context_get+0x17c>)
   1a256:	f010 fb5f 	bl	2a918 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a25a:	f04f 0b00 	mov.w	fp, #0
   1a25e:	4626      	mov	r6, r4
		if (net_context_is_used(&contexts[i])) {
   1a260:	4620      	mov	r0, r4
   1a262:	f7ff fe83 	bl	19f6c <net_context_is_used>
   1a266:	ea4f 15cb 	mov.w	r5, fp, lsl #7
   1a26a:	4601      	mov	r1, r0
   1a26c:	b170      	cbz	r0, 1a28c <net_context_get+0x98>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1a26e:	f10b 0b01 	add.w	fp, fp, #1
   1a272:	f1bb 0f06 	cmp.w	fp, #6
   1a276:	f104 0480 	add.w	r4, r4, #128	; 0x80
   1a27a:	d1f1      	bne.n	1a260 <net_context_get+0x6c>
	int i, ret = -ENOENT;
   1a27c:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
   1a280:	483b      	ldr	r0, [pc, #236]	; (1a370 <net_context_get+0x17c>)
   1a282:	f010 fb05 	bl	2a890 <z_impl_k_sem_give>
}
   1a286:	4620      	mov	r0, r4
   1a288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
   1a28c:	2280      	movs	r2, #128	; 0x80
   1a28e:	4620      	mov	r0, r4
   1a290:	f01a fc00 	bl	34a94 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
   1a294:	f7ff fc90 	bl	19bb8 <net_if_get_default>
			&& ip_proto == IPPROTO_TCP) {
   1a298:	f1b8 0f06 	cmp.w	r8, #6
   1a29c:	d032      	beq.n	1a304 <net_context_get+0x110>
		contexts[i].iface = -1;
   1a29e:	22ff      	movs	r2, #255	; 0xff
   1a2a0:	1973      	adds	r3, r6, r5
   1a2a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		contexts[i].flags = 0U;
   1a2a6:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a2a8:	2001      	movs	r0, #1
   1a2aa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
   1a2ae:	1d19      	adds	r1, r3, #4
   1a2b0:	e8d1 cfef 	ldaex	ip, [r1]
   1a2b4:	e8c1 0fee 	stlex	lr, r0, [r1]
   1a2b8:	f1be 0f00 	cmp.w	lr, #0
   1a2bc:	d1f8      	bne.n	1a2b0 <net_context_get+0xbc>
		flag = family << 3;
   1a2be:	00f9      	lsls	r1, r7, #3
	context->flags |= flag;
   1a2c0:	f8b3 007a 	ldrh.w	r0, [r3, #122]	; 0x7a
	context->flags |= flag;
   1a2c4:	b2c9      	uxtb	r1, r1
	context->flags |= flag;
   1a2c6:	ea41 118a 	orr.w	r1, r1, sl, lsl #6
   1a2ca:	4301      	orrs	r1, r0
   1a2cc:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
			(void)memset(&contexts[i].remote, 0,
   1a2d0:	f105 0324 	add.w	r3, r5, #36	; 0x24
	context->proto = proto;
   1a2d4:	f8a4 8078 	strh.w	r8, [r4, #120]	; 0x78
   1a2d8:	18f1      	adds	r1, r6, r3
   1a2da:	50f2      	str	r2, [r6, r3]
			(void)memset(&contexts[i].local, 0,
   1a2dc:	f105 031c 	add.w	r3, r5, #28
   1a2e0:	eb06 0803 	add.w	r8, r6, r3
		if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1a2e4:	2f01      	cmp	r7, #1
   1a2e6:	604a      	str	r2, [r1, #4]
   1a2e8:	50f2      	str	r2, [r6, r3]
   1a2ea:	f8c8 2004 	str.w	r2, [r8, #4]
   1a2ee:	d10f      	bne.n	1a310 <net_context_get+0x11c>
			addr->sin_port = find_available_port(&contexts[i],
   1a2f0:	4641      	mov	r1, r8
   1a2f2:	4620      	mov	r0, r4
   1a2f4:	f7ff fee0 	bl	1a0b8 <find_available_port>
   1a2f8:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr->sin_port) {
   1a2fc:	b940      	cbnz	r0, 1a310 <net_context_get+0x11c>
				ret = -EADDRINUSE;
   1a2fe:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1a302:	e7bd      	b.n	1a280 <net_context_get+0x8c>
			if (net_tcp_get(&contexts[i]) < 0) {
   1a304:	4620      	mov	r0, r4
   1a306:	f001 ff43 	bl	1c190 <net_tcp_get>
   1a30a:	2800      	cmp	r0, #0
   1a30c:	dac7      	bge.n	1a29e <net_context_get+0xaa>
   1a30e:	e7b5      	b.n	1a27c <net_context_get+0x88>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1a310:	f105 0040 	add.w	r0, r5, #64	; 0x40
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a318:	2101      	movs	r1, #1
   1a31a:	4430      	add	r0, r6
   1a31c:	f01a fa27 	bl	3476e <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
   1a320:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_mutex_init(mutex);
   1a324:	4430      	add	r0, r6
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1a326:	4435      	add	r5, r6
   1a328:	f01a f9c2 	bl	346b0 <z_impl_k_mutex_init>
   1a32c:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
   1a330:	f043 0301 	orr.w	r3, r3, #1
   1a334:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
		*context = &contexts[i];
   1a338:	f8c9 4000 	str.w	r4, [r9]
		ret = 0;
   1a33c:	2400      	movs	r4, #0
		break;
   1a33e:	e79f      	b.n	1a280 <net_context_get+0x8c>
			return -EPFNOSUPPORT;
   1a340:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1a344:	e79f      	b.n	1a286 <net_context_get+0x92>
			return -EAFNOSUPPORT;
   1a346:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1a34a:	e79c      	b.n	1a286 <net_context_get+0x92>
				return -EPROTOTYPE;
   1a34c:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1a350:	e799      	b.n	1a286 <net_context_get+0x92>
			return -EINVAL;
   1a352:	f06f 0415 	mvn.w	r4, #21
   1a356:	e796      	b.n	1a286 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1a358:	f1ba 0f01 	cmp.w	sl, #1
   1a35c:	f47f af73 	bne.w	1a246 <net_context_get+0x52>
			return -EOPNOTSUPP;
   1a360:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1a364:	e78f      	b.n	1a286 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1a366:	f1ba 0f02 	cmp.w	sl, #2
   1a36a:	e7f7      	b.n	1a35c <net_context_get+0x168>
   1a36c:	20021734 	.word	0x20021734
   1a370:	20021a34 	.word	0x20021a34

0001a374 <net_context_put>:
{
   1a374:	b570      	push	{r4, r5, r6, lr}
	NET_ASSERT(context);
   1a376:	4605      	mov	r5, r0
   1a378:	b988      	cbnz	r0, 1a39e <net_context_put+0x2a>
   1a37a:	4916      	ldr	r1, [pc, #88]	; (1a3d4 <net_context_put+0x60>)
   1a37c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1a380:	4a15      	ldr	r2, [pc, #84]	; (1a3d8 <net_context_put+0x64>)
   1a382:	4816      	ldr	r0, [pc, #88]	; (1a3dc <net_context_put+0x68>)
   1a384:	f014 ff65 	bl	2f252 <printk>
   1a388:	4815      	ldr	r0, [pc, #84]	; (1a3e0 <net_context_put+0x6c>)
   1a38a:	f014 ff62 	bl	2f252 <printk>
   1a38e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1a392:	4811      	ldr	r0, [pc, #68]	; (1a3d8 <net_context_put+0x64>)
   1a394:	f015 fa5e 	bl	2f854 <assert_post_action>
		return -EINVAL;
   1a398:	f06f 0015 	mvn.w	r0, #21
   1a39c:	e019      	b.n	1a3d2 <net_context_put+0x5e>
	if (!PART_OF_ARRAY(contexts, context)) {
   1a39e:	4b11      	ldr	r3, [pc, #68]	; (1a3e4 <net_context_put+0x70>)
   1a3a0:	4298      	cmp	r0, r3
   1a3a2:	d3f9      	bcc.n	1a398 <net_context_put+0x24>
   1a3a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a3a8:	429d      	cmp	r5, r3
   1a3aa:	d2f5      	bcs.n	1a398 <net_context_put+0x24>
	context->connect_cb = NULL;
   1a3ac:	2400      	movs	r4, #0
	k_mutex_lock(&context->lock, K_FOREVER);
   1a3ae:	f105 0608 	add.w	r6, r5, #8
   1a3b2:	4630      	mov	r0, r6
   1a3b4:	f017 f8d1 	bl	3155a <k_mutex_lock.constprop.28>
	context->connect_cb = NULL;
   1a3b8:	63ac      	str	r4, [r5, #56]	; 0x38
	context->send_cb = NULL;
   1a3ba:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
	net_context_unref(context);
   1a3be:	4628      	mov	r0, r5
   1a3c0:	f017 f8d9 	bl	31576 <net_context_unref>
	net_tcp_put(context);
   1a3c4:	4628      	mov	r0, r5
   1a3c6:	f018 fb85 	bl	32ad4 <net_tcp_put>
	k_mutex_unlock(&context->lock);
   1a3ca:	4630      	mov	r0, r6
   1a3cc:	f017 f8a8 	bl	31520 <k_mutex_unlock>
	return ret;
   1a3d0:	4620      	mov	r0, r4
}
   1a3d2:	bd70      	pop	{r4, r5, r6, pc}
   1a3d4:	0003707e 	.word	0x0003707e
   1a3d8:	00037af7 	.word	0x00037af7
   1a3dc:	00036be5 	.word	0x00036be5
   1a3e0:	00037086 	.word	0x00037086
   1a3e4:	20021734 	.word	0x20021734

0001a3e8 <net_context_bind>:
{
   1a3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a3ea:	4605      	mov	r5, r0
   1a3ec:	4614      	mov	r4, r2
	NET_ASSERT(addr);
   1a3ee:	460e      	mov	r6, r1
   1a3f0:	b971      	cbnz	r1, 1a410 <net_context_bind+0x28>
   1a3f2:	493c      	ldr	r1, [pc, #240]	; (1a4e4 <net_context_bind+0xfc>)
   1a3f4:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   1a3f8:	4a3b      	ldr	r2, [pc, #236]	; (1a4e8 <net_context_bind+0x100>)
   1a3fa:	483c      	ldr	r0, [pc, #240]	; (1a4ec <net_context_bind+0x104>)
   1a3fc:	f014 ff29 	bl	2f252 <printk>
   1a400:	483b      	ldr	r0, [pc, #236]	; (1a4f0 <net_context_bind+0x108>)
   1a402:	f014 ff26 	bl	2f252 <printk>
   1a406:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1a40a:	4837      	ldr	r0, [pc, #220]	; (1a4e8 <net_context_bind+0x100>)
   1a40c:	f015 fa22 	bl	2f854 <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a410:	b135      	cbz	r5, 1a420 <net_context_bind+0x38>
   1a412:	4b38      	ldr	r3, [pc, #224]	; (1a4f4 <net_context_bind+0x10c>)
   1a414:	429d      	cmp	r5, r3
   1a416:	d303      	bcc.n	1a420 <net_context_bind+0x38>
   1a418:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a41c:	429d      	cmp	r5, r3
   1a41e:	d30e      	bcc.n	1a43e <net_context_bind+0x56>
   1a420:	4935      	ldr	r1, [pc, #212]	; (1a4f8 <net_context_bind+0x110>)
   1a422:	f240 13eb 	movw	r3, #491	; 0x1eb
   1a426:	4a30      	ldr	r2, [pc, #192]	; (1a4e8 <net_context_bind+0x100>)
   1a428:	4830      	ldr	r0, [pc, #192]	; (1a4ec <net_context_bind+0x104>)
   1a42a:	f014 ff12 	bl	2f252 <printk>
   1a42e:	4830      	ldr	r0, [pc, #192]	; (1a4f0 <net_context_bind+0x108>)
   1a430:	f014 ff0f 	bl	2f252 <printk>
   1a434:	f240 11eb 	movw	r1, #491	; 0x1eb
   1a438:	482b      	ldr	r0, [pc, #172]	; (1a4e8 <net_context_bind+0x100>)
   1a43a:	f015 fa0b 	bl	2f854 <assert_post_action>
	if (context->conn_handler) {
   1a43e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a440:	2b00      	cmp	r3, #0
   1a442:	d148      	bne.n	1a4d6 <net_context_bind+0xee>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
   1a444:	8832      	ldrh	r2, [r6, #0]
   1a446:	2a01      	cmp	r2, #1
   1a448:	d148      	bne.n	1a4dc <net_context_bind+0xf4>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a44a:	2c07      	cmp	r4, #7
		struct net_if *iface = NULL;
   1a44c:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a44e:	d945      	bls.n	1a4dc <net_context_bind+0xf4>
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
   1a450:	1d32      	adds	r2, r6, #4
   1a452:	4610      	mov	r0, r2
   1a454:	f017 f85b 	bl	3150e <net_ipv4_is_addr_mcast>
   1a458:	b148      	cbz	r0, 1a46e <net_context_bind+0x86>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
   1a45a:	a901      	add	r1, sp, #4
   1a45c:	4610      	mov	r0, r2
   1a45e:	f7ff fc53 	bl	19d08 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
   1a462:	bb78      	cbnz	r0, 1a4c4 <net_context_bind+0xdc>
				return -ENOENT;
   1a464:	f06f 0401 	mvn.w	r4, #1
}
   1a468:	4620      	mov	r0, r4
   1a46a:	b003      	add	sp, #12
   1a46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
   1a46e:	6873      	ldr	r3, [r6, #4]
   1a470:	bb1b      	cbnz	r3, 1a4ba <net_context_bind+0xd2>
			iface = net_if_ipv4_select_src_iface(
   1a472:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1a476:	f7ff fbc1 	bl	19bfc <net_if_ipv4_select_src_iface>
   1a47a:	9001      	str	r0, [sp, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
   1a47c:	f7ff fd6e 	bl	19f5c <net_ipv4_unspecified_address>
   1a480:	4604      	mov	r4, r0
		if (!iface) {
   1a482:	9b01      	ldr	r3, [sp, #4]
   1a484:	b323      	cbz	r3, 1a4d0 <net_context_bind+0xe8>
		k_mutex_lock(&context->lock, K_FOREVER);
   1a486:	f105 0708 	add.w	r7, r5, #8
   1a48a:	4638      	mov	r0, r7
   1a48c:	f017 f865 	bl	3155a <k_mutex_lock.constprop.28>
		net_context_set_iface(context, iface);
   1a490:	9901      	ldr	r1, [sp, #4]
   1a492:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   1a496:	f7ff fe25 	bl	1a0e4 <net_context_set_iface.isra.16>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a49a:	2001      	movs	r0, #1
		if (addr4->sin_port) {
   1a49c:	8871      	ldrh	r1, [r6, #2]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a49e:	83a8      	strh	r0, [r5, #28]
		net_sin_ptr(&context->local)->sin_addr = ptr;
   1a4a0:	622c      	str	r4, [r5, #32]
		if (addr4->sin_port) {
   1a4a2:	b189      	cbz	r1, 1a4c8 <net_context_bind+0xe0>
			ret = check_used_port(AF_INET, addr4->sin_port,
   1a4a4:	4632      	mov	r2, r6
   1a4a6:	f7ff fd81 	bl	19fac <check_used_port>
			if (!ret) {
   1a4aa:	4604      	mov	r4, r0
   1a4ac:	b908      	cbnz	r0, 1a4b2 <net_context_bind+0xca>
				net_sin_ptr(&context->local)->sin_port =
   1a4ae:	8873      	ldrh	r3, [r6, #2]
   1a4b0:	83eb      	strh	r3, [r5, #30]
		k_mutex_unlock(&context->lock);
   1a4b2:	4638      	mov	r0, r7
   1a4b4:	f017 f834 	bl	31520 <k_mutex_unlock>
		return ret;
   1a4b8:	e7d6      	b.n	1a468 <net_context_bind+0x80>
			ifaddr = net_if_ipv4_addr_lookup(&addr4->sin_addr,
   1a4ba:	a901      	add	r1, sp, #4
   1a4bc:	4610      	mov	r0, r2
   1a4be:	f7ff fc05 	bl	19ccc <net_if_ipv4_addr_lookup>
   1a4c2:	e7ce      	b.n	1a462 <net_context_bind+0x7a>
			ptr = &ifaddr->address.in_addr;
   1a4c4:	1d04      	adds	r4, r0, #4
   1a4c6:	e7dc      	b.n	1a482 <net_context_bind+0x9a>
			addr4->sin_port =
   1a4c8:	8beb      	ldrh	r3, [r5, #30]
   1a4ca:	460c      	mov	r4, r1
   1a4cc:	8073      	strh	r3, [r6, #2]
   1a4ce:	e7f0      	b.n	1a4b2 <net_context_bind+0xca>
			return -EADDRNOTAVAIL;
   1a4d0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1a4d4:	e7c8      	b.n	1a468 <net_context_bind+0x80>
		return -EISCONN;
   1a4d6:	f06f 047e 	mvn.w	r4, #126	; 0x7e
   1a4da:	e7c5      	b.n	1a468 <net_context_bind+0x80>
	return -EINVAL;
   1a4dc:	f06f 0415 	mvn.w	r4, #21
   1a4e0:	e7c2      	b.n	1a468 <net_context_bind+0x80>
   1a4e2:	bf00      	nop
   1a4e4:	00037af2 	.word	0x00037af2
   1a4e8:	00037af7 	.word	0x00037af7
   1a4ec:	00036be5 	.word	0x00036be5
   1a4f0:	00037086 	.word	0x00037086
   1a4f4:	20021734 	.word	0x20021734
   1a4f8:	00037979 	.word	0x00037979

0001a4fc <net_context_listen>:
{
   1a4fc:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a4fe:	4604      	mov	r4, r0
   1a500:	b130      	cbz	r0, 1a510 <net_context_listen+0x14>
   1a502:	4b18      	ldr	r3, [pc, #96]	; (1a564 <net_context_listen+0x68>)
   1a504:	4298      	cmp	r0, r3
   1a506:	d303      	bcc.n	1a510 <net_context_listen+0x14>
   1a508:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a50c:	4298      	cmp	r0, r3
   1a50e:	d30e      	bcc.n	1a52e <net_context_listen+0x32>
   1a510:	4915      	ldr	r1, [pc, #84]	; (1a568 <net_context_listen+0x6c>)
   1a512:	f240 331d 	movw	r3, #797	; 0x31d
   1a516:	4a15      	ldr	r2, [pc, #84]	; (1a56c <net_context_listen+0x70>)
   1a518:	4815      	ldr	r0, [pc, #84]	; (1a570 <net_context_listen+0x74>)
   1a51a:	f014 fe9a 	bl	2f252 <printk>
   1a51e:	4815      	ldr	r0, [pc, #84]	; (1a574 <net_context_listen+0x78>)
   1a520:	f014 fe97 	bl	2f252 <printk>
   1a524:	f240 311d 	movw	r1, #797	; 0x31d
   1a528:	4810      	ldr	r0, [pc, #64]	; (1a56c <net_context_listen+0x70>)
   1a52a:	f015 f993 	bl	2f854 <assert_post_action>
	if (!net_context_is_used(context)) {
   1a52e:	4620      	mov	r0, r4
   1a530:	f7ff fd1c 	bl	19f6c <net_context_is_used>
   1a534:	b198      	cbz	r0, 1a55e <net_context_listen+0x62>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a536:	f104 0508 	add.w	r5, r4, #8
   1a53a:	4628      	mov	r0, r5
   1a53c:	f017 f80d 	bl	3155a <k_mutex_lock.constprop.28>
	if (net_tcp_listen(context) >= 0) {
   1a540:	4620      	mov	r0, r4
   1a542:	f018 fb17 	bl	32b74 <net_tcp_listen>
   1a546:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
   1a548:	4628      	mov	r0, r5
	if (net_tcp_listen(context) >= 0) {
   1a54a:	db03      	blt.n	1a554 <net_context_listen+0x58>
		k_mutex_unlock(&context->lock);
   1a54c:	f016 ffe8 	bl	31520 <k_mutex_unlock>
		return 0;
   1a550:	2000      	movs	r0, #0
}
   1a552:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_unlock(&context->lock);
   1a554:	f016 ffe4 	bl	31520 <k_mutex_unlock>
	return -EOPNOTSUPP;
   1a558:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1a55c:	e7f9      	b.n	1a552 <net_context_listen+0x56>
		return -EBADF;
   1a55e:	f06f 0008 	mvn.w	r0, #8
   1a562:	e7f6      	b.n	1a552 <net_context_listen+0x56>
   1a564:	20021734 	.word	0x20021734
   1a568:	00037979 	.word	0x00037979
   1a56c:	00037af7 	.word	0x00037af7
   1a570:	00036be5 	.word	0x00036be5
   1a574:	00037086 	.word	0x00037086

0001a578 <net_context_create_ipv4_new>:
{
   1a578:	b570      	push	{r4, r5, r6, lr}
   1a57a:	460c      	mov	r4, r1
   1a57c:	4605      	mov	r5, r0
   1a57e:	461e      	mov	r6, r3
	if (!src) {
   1a580:	4611      	mov	r1, r2
   1a582:	b98a      	cbnz	r2, 1a5a8 <net_context_create_ipv4_new+0x30>
		NET_ASSERT(((
   1a584:	6a03      	ldr	r3, [r0, #32]
   1a586:	b973      	cbnz	r3, 1a5a6 <net_context_create_ipv4_new+0x2e>
   1a588:	4914      	ldr	r1, [pc, #80]	; (1a5dc <net_context_create_ipv4_new+0x64>)
   1a58a:	f240 333d 	movw	r3, #829	; 0x33d
   1a58e:	4a14      	ldr	r2, [pc, #80]	; (1a5e0 <net_context_create_ipv4_new+0x68>)
   1a590:	4814      	ldr	r0, [pc, #80]	; (1a5e4 <net_context_create_ipv4_new+0x6c>)
   1a592:	f014 fe5e 	bl	2f252 <printk>
   1a596:	4814      	ldr	r0, [pc, #80]	; (1a5e8 <net_context_create_ipv4_new+0x70>)
   1a598:	f014 fe5b 	bl	2f252 <printk>
   1a59c:	f240 313d 	movw	r1, #829	; 0x33d
   1a5a0:	480f      	ldr	r0, [pc, #60]	; (1a5e0 <net_context_create_ipv4_new+0x68>)
   1a5a2:	f015 f957 	bl	2f854 <assert_post_action>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   1a5a6:	6a29      	ldr	r1, [r5, #32]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1a5a8:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
   1a5aa:	b11b      	cbz	r3, 1a5b4 <net_context_create_ipv4_new+0x3c>
	    || net_ipv4_is_addr_mcast(src)) {
   1a5ac:	4608      	mov	r0, r1
   1a5ae:	f016 ffae 	bl	3150e <net_ipv4_is_addr_mcast>
   1a5b2:	b130      	cbz	r0, 1a5c2 <net_context_create_ipv4_new+0x4a>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   1a5b4:	4631      	mov	r1, r6
   1a5b6:	6a20      	ldr	r0, [r4, #32]
   1a5b8:	f7ff fb3a 	bl	19c30 <net_if_ipv4_select_src_addr>
   1a5bc:	6803      	ldr	r3, [r0, #0]
   1a5be:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
   1a5c0:	b14b      	cbz	r3, 1a5d6 <net_context_create_ipv4_new+0x5e>
	net_pkt_set_ipv4_ttl(pkt, net_context_get_ipv4_ttl(context));
   1a5c2:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
	return net_ipv4_create(pkt, src, dst);
   1a5c6:	4632      	mov	r2, r6
	pkt->ipv4_ttl = ttl;
   1a5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1a5cc:	4620      	mov	r0, r4
}
   1a5ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
   1a5d2:	f017 bcff 	b.w	31fd4 <net_ipv4_create>
}
   1a5d6:	f06f 0015 	mvn.w	r0, #21
   1a5da:	bd70      	pop	{r4, r5, r6, pc}
   1a5dc:	00037ac0 	.word	0x00037ac0
   1a5e0:	00037af7 	.word	0x00037af7
   1a5e4:	00036be5 	.word	0x00036be5
   1a5e8:	00037086 	.word	0x00037086

0001a5ec <context_sendto.isra.21>:
static int context_sendto(struct net_context *context,
   1a5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5f0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1a5f4:	4689      	mov	r9, r1
   1a5f6:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
   1a5fa:	4617      	mov	r7, r2
   1a5fc:	461d      	mov	r5, r3
   1a5fe:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a602:	4604      	mov	r4, r0
   1a604:	b130      	cbz	r0, 1a614 <context_sendto.isra.21+0x28>
   1a606:	4b79      	ldr	r3, [pc, #484]	; (1a7ec <context_sendto.isra.21+0x200>)
   1a608:	4298      	cmp	r0, r3
   1a60a:	d303      	bcc.n	1a614 <context_sendto.isra.21+0x28>
   1a60c:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a610:	4298      	cmp	r0, r3
   1a612:	d30e      	bcc.n	1a632 <context_sendto.isra.21+0x46>
   1a614:	4976      	ldr	r1, [pc, #472]	; (1a7f0 <context_sendto.isra.21+0x204>)
   1a616:	f240 534c 	movw	r3, #1356	; 0x54c
   1a61a:	4a76      	ldr	r2, [pc, #472]	; (1a7f4 <context_sendto.isra.21+0x208>)
   1a61c:	4876      	ldr	r0, [pc, #472]	; (1a7f8 <context_sendto.isra.21+0x20c>)
   1a61e:	f014 fe18 	bl	2f252 <printk>
   1a622:	4876      	ldr	r0, [pc, #472]	; (1a7fc <context_sendto.isra.21+0x210>)
   1a624:	f014 fe15 	bl	2f252 <printk>
   1a628:	f240 514c 	movw	r1, #1356	; 0x54c
   1a62c:	4871      	ldr	r0, [pc, #452]	; (1a7f4 <context_sendto.isra.21+0x208>)
   1a62e:	f015 f911 	bl	2f854 <assert_post_action>
	if (!net_context_is_used(context)) {
   1a632:	4620      	mov	r0, r4
   1a634:	f7ff fc9a 	bl	19f6c <net_context_is_used>
   1a638:	2800      	cmp	r0, #0
   1a63a:	f000 80d0 	beq.w	1a7de <context_sendto.isra.21+0x1f2>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a63e:	f1b8 0f00 	cmp.w	r8, #0
   1a642:	d00b      	beq.n	1a65c <context_sendto.isra.21+0x70>
   1a644:	b956      	cbnz	r6, 1a65c <context_sendto.isra.21+0x70>
   1a646:	b95d      	cbnz	r5, 1a660 <context_sendto.isra.21+0x74>
   1a648:	f1b9 0f00 	cmp.w	r9, #0
   1a64c:	f040 8093 	bne.w	1a776 <context_sendto.isra.21+0x18a>
		return -EDESTADDRREQ;
   1a650:	f06f 0578 	mvn.w	r5, #120	; 0x78
}
   1a654:	4628      	mov	r0, r5
   1a656:	b003      	add	sp, #12
   1a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!msghdr && !dst_addr &&
   1a65c:	2d00      	cmp	r5, #0
   1a65e:	d0f7      	beq.n	1a650 <context_sendto.isra.21+0x64>
   1a660:	f04f 0800 	mov.w	r8, #0
		   net_context_get_family(context) == AF_INET) {
   1a664:	4620      	mov	r0, r4
   1a666:	f7ff fce7 	bl	1a038 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a66a:	2801      	cmp	r0, #1
   1a66c:	f040 8087 	bne.w	1a77e <context_sendto.isra.21+0x192>
		if (msghdr) {
   1a670:	f1b8 0f00 	cmp.w	r8, #0
   1a674:	f000 8081 	beq.w	1a77a <context_sendto.isra.21+0x18e>
			addrlen = msghdr->msg_namelen;
   1a678:	e9d8 5600 	ldrd	r5, r6, [r8]
			if (!addr4) {
   1a67c:	2d00      	cmp	r5, #0
   1a67e:	d17c      	bne.n	1a77a <context_sendto.isra.21+0x18e>
				addr4 = net_sin(&context->remote);
   1a680:	f104 0524 	add.w	r5, r4, #36	; 0x24
		if (!addr4->sin_addr.s_addr) {
   1a684:	686b      	ldr	r3, [r5, #4]
   1a686:	2b00      	cmp	r3, #0
   1a688:	d0e2      	beq.n	1a650 <context_sendto.isra.21+0x64>
	if (msghdr && len == 0) {
   1a68a:	f1b8 0f00 	cmp.w	r8, #0
   1a68e:	d005      	beq.n	1a69c <context_sendto.isra.21+0xb0>
   1a690:	b927      	cbnz	r7, 1a69c <context_sendto.isra.21+0xb0>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a692:	463b      	mov	r3, r7
   1a694:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1a698:	428b      	cmp	r3, r1
   1a69a:	d173      	bne.n	1a784 <context_sendto.isra.21+0x198>
	NET_ASSERT(context);
   1a69c:	b974      	cbnz	r4, 1a6bc <context_sendto.isra.21+0xd0>
   1a69e:	4958      	ldr	r1, [pc, #352]	; (1a800 <context_sendto.isra.21+0x214>)
   1a6a0:	f240 2371 	movw	r3, #625	; 0x271
   1a6a4:	4a57      	ldr	r2, [pc, #348]	; (1a804 <context_sendto.isra.21+0x218>)
   1a6a6:	4854      	ldr	r0, [pc, #336]	; (1a7f8 <context_sendto.isra.21+0x20c>)
   1a6a8:	f014 fdd3 	bl	2f252 <printk>
   1a6ac:	4853      	ldr	r0, [pc, #332]	; (1a7fc <context_sendto.isra.21+0x210>)
   1a6ae:	f014 fdd0 	bl	2f252 <printk>
   1a6b2:	f240 2171 	movw	r1, #625	; 0x271
   1a6b6:	4853      	ldr	r0, [pc, #332]	; (1a804 <context_sendto.isra.21+0x218>)
   1a6b8:	f015 f8cc 	bl	2f854 <assert_post_action>
	return net_if_get_by_index(context->iface);
   1a6bc:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
   1a6c0:	f7ff fbaa 	bl	19e18 <net_if_get_by_index>
   1a6c4:	4606      	mov	r6, r0
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   1a6c6:	4620      	mov	r0, r4
   1a6c8:	f7ff fcb6 	bl	1a038 <net_context_get_family>
   1a6cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a6d0:	9300      	str	r3, [sp, #0]
   1a6d2:	4602      	mov	r2, r0
   1a6d4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1a6d8:	4630      	mov	r0, r6
   1a6da:	4639      	mov	r1, r7
   1a6dc:	f000 fb1e 	bl	1ad1c <net_pkt_alloc_with_buffer>
	if (pkt) {
   1a6e0:	4606      	mov	r6, r0
   1a6e2:	2800      	cmp	r0, #0
   1a6e4:	d07e      	beq.n	1a7e4 <context_sendto.isra.21+0x1f8>
	pkt->context = ctx;
   1a6e6:	61c4      	str	r4, [r0, #28]
	tmp_len = net_pkt_available_payload_buffer(
   1a6e8:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1a6ec:	f017 f90c 	bl	31908 <net_pkt_available_payload_buffer>
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1a6f0:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1a6f4:	4287      	cmp	r7, r0
   1a6f6:	bf28      	it	cs
   1a6f8:	4607      	movcs	r7, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a6fa:	2b11      	cmp	r3, #17
	context->send_cb = cb;
   1a6fc:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	context->user_data = user_data;
   1a700:	f8c4 b000 	str.w	fp, [r4]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a704:	d14c      	bne.n	1a7a0 <context_sendto.isra.21+0x1b4>
		   net_context_get_family(context) == AF_INET) {
   1a706:	4620      	mov	r0, r4
   1a708:	f7ff fc96 	bl	1a038 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a70c:	2801      	cmp	r0, #1
   1a70e:	d160      	bne.n	1a7d2 <context_sendto.isra.21+0x1e6>
		ret = net_context_create_ipv4_new(context, pkt,
   1a710:	1d2b      	adds	r3, r5, #4
   1a712:	2200      	movs	r2, #0
   1a714:	4631      	mov	r1, r6
   1a716:	4620      	mov	r0, r4
		dst_port = addr4->sin_port;
   1a718:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		ret = net_context_create_ipv4_new(context, pkt,
   1a71c:	f7ff ff2c 	bl	1a578 <net_context_create_ipv4_new>
	if (ret < 0) {
   1a720:	1e05      	subs	r5, r0, #0
   1a722:	db39      	blt.n	1a798 <context_sendto.isra.21+0x1ac>
	ret = bind_default(context);
   1a724:	4620      	mov	r0, r4
   1a726:	f016 ff4d 	bl	315c4 <bind_default>
	if (ret) {
   1a72a:	4605      	mov	r5, r0
   1a72c:	bb90      	cbnz	r0, 1a794 <context_sendto.isra.21+0x1a8>
	ret = net_udp_create(pkt,
   1a72e:	4652      	mov	r2, sl
   1a730:	8be1      	ldrh	r1, [r4, #30]
   1a732:	4630      	mov	r0, r6
   1a734:	f018 fa61 	bl	32bfa <net_udp_create>
	if (ret) {
   1a738:	4605      	mov	r5, r0
   1a73a:	bb58      	cbnz	r0, 1a794 <context_sendto.isra.21+0x1a8>
	ret = context_write_data(pkt, buf, len, msg);
   1a73c:	4643      	mov	r3, r8
   1a73e:	463a      	mov	r2, r7
   1a740:	4649      	mov	r1, r9
   1a742:	4630      	mov	r0, r6
   1a744:	f016 feee 	bl	31524 <context_write_data>
	if (ret) {
   1a748:	4605      	mov	r5, r0
   1a74a:	bb18      	cbnz	r0, 1a794 <context_sendto.isra.21+0x1a8>
	net_pkt_cursor_init(pkt);
   1a74c:	4630      	mov	r0, r6
   1a74e:	f017 f90d 	bl	3196c <net_pkt_cursor_init>
		   net_context_get_family(context) == AF_INET) {
   1a752:	4620      	mov	r0, r4
   1a754:	f7ff fc70 	bl	1a038 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a758:	2801      	cmp	r0, #1
   1a75a:	d104      	bne.n	1a766 <context_sendto.isra.21+0x17a>
		net_ipv4_finalize(pkt, net_context_get_ip_proto(context));
   1a75c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1a760:	4630      	mov	r0, r6
   1a762:	f017 fc6a 	bl	3203a <net_ipv4_finalize>
		ret = net_send_data(pkt);
   1a766:	4630      	mov	r0, r6
   1a768:	f016 fced 	bl	31146 <net_send_data>
	if (ret < 0) {
   1a76c:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
   1a76e:	4605      	mov	r5, r0
	if (ret < 0) {
   1a770:	db12      	blt.n	1a798 <context_sendto.isra.21+0x1ac>
	return len;
   1a772:	463d      	mov	r5, r7
   1a774:	e76e      	b.n	1a654 <context_sendto.isra.21+0x68>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1a776:	46c8      	mov	r8, r9
   1a778:	e774      	b.n	1a664 <context_sendto.isra.21+0x78>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a77a:	2e07      	cmp	r6, #7
   1a77c:	d882      	bhi.n	1a684 <context_sendto.isra.21+0x98>
		return -EINVAL;
   1a77e:	f06f 0515 	mvn.w	r5, #21
   1a782:	e767      	b.n	1a654 <context_sendto.isra.21+0x68>
			len += msghdr->msg_iov[i].iov_len;
   1a784:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1a788:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a78c:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1a78e:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
   1a790:	4417      	add	r7, r2
   1a792:	e781      	b.n	1a698 <context_sendto.isra.21+0xac>
		if (ret < 0) {
   1a794:	2d00      	cmp	r5, #0
   1a796:	dad9      	bge.n	1a74c <context_sendto.isra.21+0x160>
	net_pkt_unref(pkt);
   1a798:	4630      	mov	r0, r6
   1a79a:	f017 f883 	bl	318a4 <net_pkt_unref>
	return ret;
   1a79e:	e759      	b.n	1a654 <context_sendto.isra.21+0x68>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a7a0:	2b06      	cmp	r3, #6
   1a7a2:	d119      	bne.n	1a7d8 <context_sendto.isra.21+0x1ec>
		ret = context_write_data(pkt, buf, len, msghdr);
   1a7a4:	4643      	mov	r3, r8
   1a7a6:	463a      	mov	r2, r7
   1a7a8:	4649      	mov	r1, r9
   1a7aa:	4630      	mov	r0, r6
   1a7ac:	f016 feba 	bl	31524 <context_write_data>
		if (ret < 0) {
   1a7b0:	1e05      	subs	r5, r0, #0
   1a7b2:	dbf1      	blt.n	1a798 <context_sendto.isra.21+0x1ac>
		net_pkt_cursor_init(pkt);
   1a7b4:	4630      	mov	r0, r6
   1a7b6:	f017 f8d9 	bl	3196c <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
   1a7ba:	4631      	mov	r1, r6
   1a7bc:	4620      	mov	r0, r4
   1a7be:	f001 f869 	bl	1b894 <net_tcp_queue_data>
		if (ret < 0) {
   1a7c2:	1e05      	subs	r5, r0, #0
   1a7c4:	dbe8      	blt.n	1a798 <context_sendto.isra.21+0x1ac>
		ret = net_tcp_send_data(context, cb, user_data);
   1a7c6:	465a      	mov	r2, fp
   1a7c8:	4651      	mov	r1, sl
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	f017 feec 	bl	325a8 <net_tcp_send_data>
   1a7d0:	e7cc      	b.n	1a76c <context_sendto.isra.21+0x180>
	int ret = -EINVAL;
   1a7d2:	f06f 0515 	mvn.w	r5, #21
   1a7d6:	e7df      	b.n	1a798 <context_sendto.isra.21+0x1ac>
		ret = -EPROTONOSUPPORT;
   1a7d8:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   1a7dc:	e7dc      	b.n	1a798 <context_sendto.isra.21+0x1ac>
		return -EBADF;
   1a7de:	f06f 0508 	mvn.w	r5, #8
   1a7e2:	e737      	b.n	1a654 <context_sendto.isra.21+0x68>
		return -ENOMEM;
   1a7e4:	f06f 050b 	mvn.w	r5, #11
   1a7e8:	e734      	b.n	1a654 <context_sendto.isra.21+0x68>
   1a7ea:	bf00      	nop
   1a7ec:	20021734 	.word	0x20021734
   1a7f0:	00037979 	.word	0x00037979
   1a7f4:	00037af7 	.word	0x00037af7
   1a7f8:	00036be5 	.word	0x00036be5
   1a7fc:	00037086 	.word	0x00037086
   1a800:	0003707e 	.word	0x0003707e
   1a804:	00037051 	.word	0x00037051

0001a808 <net_context_connect>:
{
   1a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a80c:	4604      	mov	r4, r0
   1a80e:	b087      	sub	sp, #28
   1a810:	4615      	mov	r5, r2
   1a812:	461f      	mov	r7, r3
	NET_ASSERT(addr);
   1a814:	460e      	mov	r6, r1
   1a816:	b971      	cbnz	r1, 1a836 <net_context_connect+0x2e>
   1a818:	495d      	ldr	r1, [pc, #372]	; (1a990 <net_context_connect+0x188>)
   1a81a:	f240 3379 	movw	r3, #889	; 0x379
   1a81e:	4a5d      	ldr	r2, [pc, #372]	; (1a994 <net_context_connect+0x18c>)
   1a820:	485d      	ldr	r0, [pc, #372]	; (1a998 <net_context_connect+0x190>)
   1a822:	f014 fd16 	bl	2f252 <printk>
   1a826:	485d      	ldr	r0, [pc, #372]	; (1a99c <net_context_connect+0x194>)
   1a828:	f014 fd13 	bl	2f252 <printk>
   1a82c:	f240 3179 	movw	r1, #889	; 0x379
   1a830:	4858      	ldr	r0, [pc, #352]	; (1a994 <net_context_connect+0x18c>)
   1a832:	f015 f80f 	bl	2f854 <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a836:	b134      	cbz	r4, 1a846 <net_context_connect+0x3e>
   1a838:	4b59      	ldr	r3, [pc, #356]	; (1a9a0 <net_context_connect+0x198>)
   1a83a:	429c      	cmp	r4, r3
   1a83c:	d303      	bcc.n	1a846 <net_context_connect+0x3e>
   1a83e:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a842:	429c      	cmp	r4, r3
   1a844:	d30e      	bcc.n	1a864 <net_context_connect+0x5c>
   1a846:	4957      	ldr	r1, [pc, #348]	; (1a9a4 <net_context_connect+0x19c>)
   1a848:	f240 337a 	movw	r3, #890	; 0x37a
   1a84c:	4a51      	ldr	r2, [pc, #324]	; (1a994 <net_context_connect+0x18c>)
   1a84e:	4852      	ldr	r0, [pc, #328]	; (1a998 <net_context_connect+0x190>)
   1a850:	f014 fcff 	bl	2f252 <printk>
   1a854:	4851      	ldr	r0, [pc, #324]	; (1a99c <net_context_connect+0x194>)
   1a856:	f014 fcfc 	bl	2f252 <printk>
   1a85a:	f240 317a 	movw	r1, #890	; 0x37a
   1a85e:	484d      	ldr	r0, [pc, #308]	; (1a994 <net_context_connect+0x18c>)
   1a860:	f014 fff8 	bl	2f854 <assert_post_action>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a864:	f104 0808 	add.w	r8, r4, #8
   1a868:	4640      	mov	r0, r8
   1a86a:	f016 fe76 	bl	3155a <k_mutex_lock.constprop.28>
	if (!net_context_is_used(context)) {
   1a86e:	4620      	mov	r0, r4
   1a870:	f7ff fb7c 	bl	19f6c <net_context_is_used>
   1a874:	2800      	cmp	r0, #0
   1a876:	f000 8081 	beq.w	1a97c <net_context_connect+0x174>
	if (addr->sa_family != net_context_get_family(context)) {
   1a87a:	4620      	mov	r0, r4
   1a87c:	f8b6 9000 	ldrh.w	r9, [r6]
   1a880:	f7ff fbda 	bl	1a038 <net_context_get_family>
   1a884:	4581      	cmp	r9, r0
   1a886:	d024      	beq.n	1a8d2 <net_context_connect+0xca>
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1a888:	4620      	mov	r0, r4
   1a88a:	8835      	ldrh	r5, [r6, #0]
   1a88c:	f7ff fbd4 	bl	1a038 <net_context_get_family>
   1a890:	4285      	cmp	r5, r0
   1a892:	d108      	bne.n	1a8a6 <net_context_connect+0x9e>
		ret = -EINVAL;
   1a894:	f06f 0515 	mvn.w	r5, #21
	k_mutex_unlock(&context->lock);
   1a898:	4640      	mov	r0, r8
   1a89a:	f016 fe41 	bl	31520 <k_mutex_unlock>
}
   1a89e:	4628      	mov	r0, r5
   1a8a0:	b007      	add	sp, #28
   1a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1a8a6:	f240 3387 	movw	r3, #903	; 0x387
   1a8aa:	4a3a      	ldr	r2, [pc, #232]	; (1a994 <net_context_connect+0x18c>)
   1a8ac:	493e      	ldr	r1, [pc, #248]	; (1a9a8 <net_context_connect+0x1a0>)
   1a8ae:	483a      	ldr	r0, [pc, #232]	; (1a998 <net_context_connect+0x190>)
   1a8b0:	f014 fccf 	bl	2f252 <printk>
   1a8b4:	4620      	mov	r0, r4
   1a8b6:	8835      	ldrh	r5, [r6, #0]
   1a8b8:	f7ff fbbe 	bl	1a038 <net_context_get_family>
   1a8bc:	4629      	mov	r1, r5
   1a8be:	4602      	mov	r2, r0
   1a8c0:	483a      	ldr	r0, [pc, #232]	; (1a9ac <net_context_connect+0x1a4>)
   1a8c2:	f014 fcc6 	bl	2f252 <printk>
   1a8c6:	f240 3187 	movw	r1, #903	; 0x387
   1a8ca:	4832      	ldr	r0, [pc, #200]	; (1a994 <net_context_connect+0x18c>)
   1a8cc:	f014 ffc2 	bl	2f854 <assert_post_action>
   1a8d0:	e7e0      	b.n	1a894 <net_context_connect+0x8c>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1a8d2:	4620      	mov	r0, r4
   1a8d4:	f7ff fb90 	bl	19ff8 <net_context_get_state>
   1a8d8:	2803      	cmp	r0, #3
   1a8da:	d052      	beq.n	1a982 <net_context_connect+0x17a>
		   net_context_get_family(context) == AF_INET) {
   1a8dc:	4620      	mov	r0, r4
   1a8de:	f7ff fbab 	bl	1a038 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1a8e2:	2801      	cmp	r0, #1
   1a8e4:	d1d6      	bne.n	1a894 <net_context_connect+0x8c>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1a8e6:	2d07      	cmp	r5, #7
   1a8e8:	d9d4      	bls.n	1a894 <net_context_connect+0x8c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a8ea:	6872      	ldr	r2, [r6, #4]
   1a8ec:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1a8f0:	62a2      	str	r2, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
   1a8f2:	f8b6 9002 	ldrh.w	r9, [r6, #2]
		addr4->sin_family = AF_INET;
   1a8f6:	84a0      	strh	r0, [r4, #36]	; 0x24
		addr4->sin_port = net_sin(addr)->sin_port;
   1a8f8:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
		if (addr4->sin_addr.s_addr) {
   1a8fc:	b33a      	cbz	r2, 1a94e <net_context_connect+0x146>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1a8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a902:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		ret = bind_default(context);
   1a906:	4620      	mov	r0, r4
   1a908:	f016 fe5c 	bl	315c4 <bind_default>
		if (ret) {
   1a90c:	4605      	mov	r5, r0
   1a90e:	2800      	cmp	r0, #0
   1a910:	d1c2      	bne.n	1a898 <net_context_connect+0x90>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a912:	2301      	movs	r3, #1
		net_sin(&local_addr)->sin_port = lport =
   1a914:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a918:	f8d4 a020 	ldr.w	sl, [r4, #32]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1a91c:	83a3      	strh	r3, [r4, #28]
		net_sin(&local_addr)->sin_family = AF_INET;
   1a91e:	f8ad 3010 	strh.w	r3, [sp, #16]
		net_sin(&local_addr)->sin_port = lport =
   1a922:	f8ad b012 	strh.w	fp, [sp, #18]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1a926:	f1ba 0f00 	cmp.w	sl, #0
   1a92a:	d004      	beq.n	1a936 <net_context_connect+0x12e>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1a92c:	f8da 3000 	ldr.w	r3, [sl]
   1a930:	9305      	str	r3, [sp, #20]
			laddr = &local_addr;
   1a932:	f10d 0a10 	add.w	sl, sp, #16
	    net_context_get_type(context) == SOCK_DGRAM) {
   1a936:	4620      	mov	r0, r4
   1a938:	f7ff fb9e 	bl	1a078 <net_context_get_type>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1a93c:	2802      	cmp	r0, #2
   1a93e:	d10a      	bne.n	1a956 <net_context_connect+0x14e>
		if (cb) {
   1a940:	2f00      	cmp	r7, #0
   1a942:	d0a9      	beq.n	1a898 <net_context_connect+0x90>
			cb(context, 0, user_data);
   1a944:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a946:	2100      	movs	r1, #0
   1a948:	4620      	mov	r0, r4
   1a94a:	47b8      	blx	r7
   1a94c:	e7a4      	b.n	1a898 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1a94e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1a952:	b29b      	uxth	r3, r3
   1a954:	e7d5      	b.n	1a902 <net_context_connect+0xfa>
		   net_context_get_type(context) == SOCK_STREAM) {
   1a956:	4620      	mov	r0, r4
   1a958:	f7ff fb8e 	bl	1a078 <net_context_get_type>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1a95c:	2801      	cmp	r0, #1
   1a95e:	d113      	bne.n	1a988 <net_context_connect+0x180>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   1a960:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a962:	4652      	mov	r2, sl
   1a964:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1a968:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a96a:	4631      	mov	r1, r6
   1a96c:	e9cd b300 	strd	fp, r3, [sp]
   1a970:	4620      	mov	r0, r4
   1a972:	464b      	mov	r3, r9
   1a974:	f001 fcd6 	bl	1c324 <net_tcp_connect>
   1a978:	4605      	mov	r5, r0
   1a97a:	e78d      	b.n	1a898 <net_context_connect+0x90>
		ret = -EBADF;
   1a97c:	f06f 0508 	mvn.w	r5, #8
   1a980:	e78a      	b.n	1a898 <net_context_connect+0x90>
		ret = -EOPNOTSUPP;
   1a982:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   1a986:	e787      	b.n	1a898 <net_context_connect+0x90>
		ret = -ENOTSUP;
   1a988:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1a98c:	e784      	b.n	1a898 <net_context_connect+0x90>
   1a98e:	bf00      	nop
   1a990:	00037af2 	.word	0x00037af2
   1a994:	00037af7 	.word	0x00037af7
   1a998:	00036be5 	.word	0x00036be5
   1a99c:	00037086 	.word	0x00037086
   1a9a0:	20021734 	.word	0x20021734
   1a9a4:	00037979 	.word	0x00037979
   1a9a8:	00037a6b 	.word	0x00037a6b
   1a9ac:	00037a9e 	.word	0x00037a9e

0001a9b0 <net_context_accept>:
{
   1a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9b2:	460e      	mov	r6, r1
   1a9b4:	461f      	mov	r7, r3
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1a9b6:	4604      	mov	r4, r0
   1a9b8:	b130      	cbz	r0, 1a9c8 <net_context_accept+0x18>
   1a9ba:	4b20      	ldr	r3, [pc, #128]	; (1aa3c <net_context_accept+0x8c>)
   1a9bc:	4298      	cmp	r0, r3
   1a9be:	d303      	bcc.n	1a9c8 <net_context_accept+0x18>
   1a9c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1a9c4:	4298      	cmp	r0, r3
   1a9c6:	d30e      	bcc.n	1a9e6 <net_context_accept+0x36>
   1a9c8:	491d      	ldr	r1, [pc, #116]	; (1aa40 <net_context_accept+0x90>)
   1a9ca:	f240 4325 	movw	r3, #1061	; 0x425
   1a9ce:	4a1d      	ldr	r2, [pc, #116]	; (1aa44 <net_context_accept+0x94>)
   1a9d0:	481d      	ldr	r0, [pc, #116]	; (1aa48 <net_context_accept+0x98>)
   1a9d2:	f014 fc3e 	bl	2f252 <printk>
   1a9d6:	481d      	ldr	r0, [pc, #116]	; (1aa4c <net_context_accept+0x9c>)
   1a9d8:	f014 fc3b 	bl	2f252 <printk>
   1a9dc:	f240 4125 	movw	r1, #1061	; 0x425
   1a9e0:	4818      	ldr	r0, [pc, #96]	; (1aa44 <net_context_accept+0x94>)
   1a9e2:	f014 ff37 	bl	2f854 <assert_post_action>
	if (!net_context_is_used(context)) {
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	f7ff fac0 	bl	19f6c <net_context_is_used>
   1a9ec:	b310      	cbz	r0, 1aa34 <net_context_accept+0x84>
	k_mutex_lock(&context->lock, K_FOREVER);
   1a9ee:	f104 0508 	add.w	r5, r4, #8
   1a9f2:	4628      	mov	r0, r5
   1a9f4:	f016 fdb1 	bl	3155a <k_mutex_lock.constprop.28>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f7ff fafd 	bl	19ff8 <net_context_get_state>
   1a9fe:	2803      	cmp	r0, #3
   1aa00:	d109      	bne.n	1aa16 <net_context_accept+0x66>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1aa02:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1aa06:	2b06      	cmp	r3, #6
   1aa08:	d00d      	beq.n	1aa26 <net_context_accept+0x76>
	int ret = 0;
   1aa0a:	2400      	movs	r4, #0
	k_mutex_unlock(&context->lock);
   1aa0c:	4628      	mov	r0, r5
   1aa0e:	f016 fd87 	bl	31520 <k_mutex_unlock>
}
   1aa12:	4620      	mov	r0, r4
   1aa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    (net_context_get_type(context) != SOCK_STREAM)) {
   1aa16:	4620      	mov	r0, r4
   1aa18:	f7ff fb2e 	bl	1a078 <net_context_get_type>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1aa1c:	2801      	cmp	r0, #1
   1aa1e:	d0f0      	beq.n	1aa02 <net_context_accept+0x52>
		ret = -EINVAL;
   1aa20:	f06f 0415 	mvn.w	r4, #21
   1aa24:	e7f2      	b.n	1aa0c <net_context_accept+0x5c>
		ret = net_tcp_accept(context, cb, user_data);
   1aa26:	4620      	mov	r0, r4
   1aa28:	463a      	mov	r2, r7
   1aa2a:	4631      	mov	r1, r6
   1aa2c:	f001 fc00 	bl	1c230 <net_tcp_accept>
   1aa30:	4604      	mov	r4, r0
		goto unlock;
   1aa32:	e7eb      	b.n	1aa0c <net_context_accept+0x5c>
		return -EBADF;
   1aa34:	f06f 0408 	mvn.w	r4, #8
   1aa38:	e7eb      	b.n	1aa12 <net_context_accept+0x62>
   1aa3a:	bf00      	nop
   1aa3c:	20021734 	.word	0x20021734
   1aa40:	00037979 	.word	0x00037979
   1aa44:	00037af7 	.word	0x00037af7
   1aa48:	00036be5 	.word	0x00036be5
   1aa4c:	00037086 	.word	0x00037086

0001aa50 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
   1aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa54:	4688      	mov	r8, r1
   1aa56:	b088      	sub	sp, #32
   1aa58:	4617      	mov	r7, r2
   1aa5a:	4699      	mov	r9, r3
	int ret;
	NET_ASSERT(context);
   1aa5c:	4604      	mov	r4, r0
   1aa5e:	b970      	cbnz	r0, 1aa7e <net_context_recv+0x2e>
   1aa60:	4944      	ldr	r1, [pc, #272]	; (1ab74 <net_context_recv+0x124>)
   1aa62:	f240 7365 	movw	r3, #1893	; 0x765
   1aa66:	4a44      	ldr	r2, [pc, #272]	; (1ab78 <net_context_recv+0x128>)
   1aa68:	4844      	ldr	r0, [pc, #272]	; (1ab7c <net_context_recv+0x12c>)
   1aa6a:	f014 fbf2 	bl	2f252 <printk>
   1aa6e:	4844      	ldr	r0, [pc, #272]	; (1ab80 <net_context_recv+0x130>)
   1aa70:	f014 fbef 	bl	2f252 <printk>
   1aa74:	f240 7165 	movw	r1, #1893	; 0x765
   1aa78:	483f      	ldr	r0, [pc, #252]	; (1ab78 <net_context_recv+0x128>)
   1aa7a:	f014 feeb 	bl	2f854 <assert_post_action>

	if (!net_context_is_used(context)) {
   1aa7e:	4620      	mov	r0, r4
   1aa80:	f7ff fa74 	bl	19f6c <net_context_is_used>
   1aa84:	2800      	cmp	r0, #0
   1aa86:	d071      	beq.n	1ab6c <net_context_recv+0x11c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   1aa88:	f104 0608 	add.w	r6, r4, #8
   1aa8c:	4630      	mov	r0, r6
   1aa8e:	f016 fd64 	bl	3155a <k_mutex_lock.constprop.28>
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1aa92:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1aa96:	2b11      	cmp	r3, #17
   1aa98:	d15d      	bne.n	1ab56 <net_context_recv+0x106>
	struct sockaddr local_addr = {
   1aa9a:	2500      	movs	r5, #0
		.sa_family = net_context_get_family(context),
   1aa9c:	4620      	mov	r0, r4
	struct sockaddr local_addr = {
   1aa9e:	e9cd 5506 	strd	r5, r5, [sp, #24]
		.sa_family = net_context_get_family(context),
   1aaa2:	f7ff fac9 	bl	1a038 <net_context_get_family>
	struct sockaddr local_addr = {
   1aaa6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (context->conn_handler) {
   1aaaa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1aaac:	b110      	cbz	r0, 1aab4 <net_context_recv+0x64>
		net_conn_unregister(context->conn_handler);
   1aaae:	f000 fab5 	bl	1b01c <net_conn_unregister>
		context->conn_handler = NULL;
   1aab2:	62e5      	str	r5, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1aab4:	4620      	mov	r0, r4
   1aab6:	f016 fd85 	bl	315c4 <bind_default>
	if (ret) {
   1aaba:	4605      	mov	r5, r0
   1aabc:	bb90      	cbnz	r0, 1ab24 <net_context_recv+0xd4>
		   net_context_get_family(context) == AF_INET) {
   1aabe:	4620      	mov	r0, r4
   1aac0:	f7ff faba 	bl	1a038 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1aac4:	2801      	cmp	r0, #1
   1aac6:	d144      	bne.n	1ab52 <net_context_recv+0x102>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1aac8:	f8d4 a020 	ldr.w	sl, [r4, #32]
   1aacc:	f1ba 0f00 	cmp.w	sl, #0
   1aad0:	d004      	beq.n	1aadc <net_context_recv+0x8c>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1aad2:	f8da 3000 	ldr.w	r3, [sl]
   1aad6:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1aad8:	f10d 0a18 	add.w	sl, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
   1aadc:	8be5      	ldrh	r5, [r4, #30]
	context->recv_cb = cb;
   1aade:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
				net_context_get_family(context),
   1aae2:	4620      	mov	r0, r4
	ret = net_conn_register(net_context_get_ip_proto(context),
   1aae4:	f8b4 8078 	ldrh.w	r8, [r4, #120]	; 0x78
				net_context_get_family(context),
   1aae8:	f7ff faa6 	bl	1a038 <net_context_get_family>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1aaec:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1aaf0:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1aaf4:	b2c1      	uxtb	r1, r0
				ntohs(net_sin(&context->remote)->sin_port),
   1aaf6:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	ret = net_conn_register(net_context_get_ip_proto(context),
   1aaf8:	e9cd 9303 	strd	r9, r3, [sp, #12]
   1aafc:	4b21      	ldr	r3, [pc, #132]	; (1ab84 <net_context_recv+0x134>)
   1aafe:	ba6d      	rev16	r5, r5
   1ab00:	9302      	str	r3, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1ab02:	0203      	lsls	r3, r0, #8
   1ab04:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1ab08:	b29b      	uxth	r3, r3
   1ab0a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1ab0e:	b2ad      	uxth	r5, r5
   1ab10:	9300      	str	r3, [sp, #0]
   1ab12:	bf18      	it	ne
   1ab14:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1ab18:	9501      	str	r5, [sp, #4]
   1ab1a:	4653      	mov	r3, sl
   1ab1c:	4640      	mov	r0, r8
   1ab1e:	f000 f9bb 	bl	1ae98 <net_conn_register>
		ret = recv_udp(context, cb, timeout, user_data);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
		   net_context_get_ip_proto(context) == IPPROTO_TCP) {
		ret = net_tcp_recv(context, cb, user_data);
   1ab22:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
   1ab24:	2d00      	cmp	r5, #0
   1ab26:	db0d      	blt.n	1ab44 <net_context_recv+0xf4>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ab28:	b167      	cbz	r7, 1ab44 <net_context_recv+0xf4>
	sem->count = 0U;
   1ab2a:	2300      	movs	r3, #0
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
   1ab2c:	4630      	mov	r0, r6
   1ab2e:	64a3      	str	r3, [r4, #72]	; 0x48
   1ab30:	f016 fcf6 	bl	31520 <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1ab34:	4639      	mov	r1, r7
   1ab36:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1ab3a:	f00f feed 	bl	2a918 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
   1ab3e:	4630      	mov	r0, r6
   1ab40:	f016 fd0b 	bl	3155a <k_mutex_lock.constprop.28>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
   1ab44:	4630      	mov	r0, r6
   1ab46:	f016 fceb 	bl	31520 <k_mutex_unlock>

	return ret;
}
   1ab4a:	4628      	mov	r0, r5
   1ab4c:	b008      	add	sp, #32
   1ab4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct sockaddr *laddr = NULL;
   1ab52:	46aa      	mov	sl, r5
   1ab54:	e7c3      	b.n	1aade <net_context_recv+0x8e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1ab56:	2b06      	cmp	r3, #6
   1ab58:	d105      	bne.n	1ab66 <net_context_recv+0x116>
		ret = net_tcp_recv(context, cb, user_data);
   1ab5a:	464a      	mov	r2, r9
   1ab5c:	4641      	mov	r1, r8
   1ab5e:	4620      	mov	r0, r4
   1ab60:	f001 fae0 	bl	1c124 <net_tcp_recv>
   1ab64:	e7dd      	b.n	1ab22 <net_context_recv+0xd2>
			ret = -EPROTOTYPE;
   1ab66:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   1ab6a:	e7eb      	b.n	1ab44 <net_context_recv+0xf4>
		return -EBADF;
   1ab6c:	f06f 0508 	mvn.w	r5, #8
   1ab70:	e7eb      	b.n	1ab4a <net_context_recv+0xfa>
   1ab72:	bf00      	nop
   1ab74:	0003707e 	.word	0x0003707e
   1ab78:	00037af7 	.word	0x00037af7
   1ab7c:	00036be5 	.word	0x00036be5
   1ab80:	00037086 	.word	0x00037086
   1ab84:	0001a125 	.word	0x0001a125

0001ab88 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ab88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ab8c:	2101      	movs	r1, #1
   1ab8e:	4801      	ldr	r0, [pc, #4]	; (1ab94 <net_context_init+0xc>)
   1ab90:	f019 bded 	b.w	3476e <z_impl_k_sem_init>
   1ab94:	20021a34 	.word	0x20021a34

0001ab98 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   1ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab9c:	4607      	mov	r7, r0
   1ab9e:	b085      	sub	sp, #20
	u64_t end = z_timeout_end_calc(timeout);
   1aba0:	4618      	mov	r0, r3
{
   1aba2:	460e      	mov	r6, r1
   1aba4:	4690      	mov	r8, r2
   1aba6:	461c      	mov	r4, r3
	u64_t end = z_timeout_end_calc(timeout);
   1aba8:	f019 fe6e 	bl	34888 <z_timeout_end_calc>
   1abac:	4681      	mov	r9, r0
   1abae:	468a      	mov	sl, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   1abb0:	b946      	cbnz	r6, 1abc4 <net_pkt_alloc_buffer+0x2c>
   1abb2:	f1b8 0f00 	cmp.w	r8, #0
   1abb6:	d105      	bne.n	1abc4 <net_pkt_alloc_buffer+0x2c>
	return pkt->family;
   1abb8:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
   1abbc:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1abc0:	2800      	cmp	r0, #0
   1abc2:	d074      	beq.n	1acae <net_pkt_alloc_buffer+0x116>
		return 0;
	}

	if (k_is_in_isr()) {
   1abc4:	f019 fde3 	bl	3478e <k_is_in_isr>
		timeout = K_NO_WAIT;
   1abc8:	2800      	cmp	r0, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1abca:	6938      	ldr	r0, [r7, #16]
		timeout = K_NO_WAIT;
   1abcc:	bf18      	it	ne
   1abce:	2400      	movne	r4, #0
	struct net_buf *buf = pkt->buffer;
   1abd0:	4605      	mov	r5, r0
	size_t size = 0;
   1abd2:	f04f 0b00 	mov.w	fp, #0
	while (buf) {
   1abd6:	2d00      	cmp	r5, #0
   1abd8:	d156      	bne.n	1ac88 <net_pkt_alloc_buffer+0xf0>
	return net_buf_frags_len(pkt->frags);
   1abda:	f016 fd90 	bl	316fe <net_buf_frags_len>
   1abde:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
	if (!alloc_len) {
   1abe2:	4558      	cmp	r0, fp
   1abe4:	4603      	mov	r3, r0
   1abe6:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1abea:	d151      	bne.n	1ac90 <net_pkt_alloc_buffer+0xf8>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   1abec:	b290      	uxth	r0, r2
	if (family == AF_UNSPEC) {
   1abee:	2800      	cmp	r0, #0
   1abf0:	d04e      	beq.n	1ac90 <net_pkt_alloc_buffer+0xf8>
   1abf2:	4641      	mov	r1, r8
   1abf4:	f016 fdcb 	bl	3178e <pkt_estimate_headers_length.isra.19.part.20>
	if (net_pkt_iface(pkt)) {
   1abf8:	6a39      	ldr	r1, [r7, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   1abfa:	4406      	add	r6, r0
	if (net_pkt_iface(pkt)) {
   1abfc:	b109      	cbz	r1, 1ac02 <net_pkt_alloc_buffer+0x6a>
 *
 * @return the MTU
 */
static inline u16_t net_if_get_mtu(struct net_if *iface)
{
	return iface->if_dev->mtu;
   1abfe:	6809      	ldr	r1, [r1, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   1ac00:	8b09      	ldrh	r1, [r1, #24]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1ac02:	2a01      	cmp	r2, #1
   1ac04:	d146      	bne.n	1ac94 <net_pkt_alloc_buffer+0xfc>
		max_len = MAX(max_len, NET_IPV4_MTU);
   1ac06:	f5b1 7f10 	cmp.w	r1, #576	; 0x240
   1ac0a:	bf38      	it	cc
   1ac0c:	f44f 7110 	movcc.w	r1, #576	; 0x240
	max_len -= existing;
   1ac10:	eba3 030b 	sub.w	r3, r3, fp
   1ac14:	4419      	add	r1, r3
	return MIN(size, max_len);
   1ac16:	428e      	cmp	r6, r1
   1ac18:	bf28      	it	cs
   1ac1a:	460e      	movcs	r6, r1
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   1ac1c:	4b3c      	ldr	r3, [pc, #240]	; (1ad10 <net_pkt_alloc_buffer+0x178>)
   1ac1e:	68f9      	ldr	r1, [r7, #12]
   1ac20:	483c      	ldr	r0, [pc, #240]	; (1ad14 <net_pkt_alloc_buffer+0x17c>)
   1ac22:	4a3d      	ldr	r2, [pc, #244]	; (1ad18 <net_pkt_alloc_buffer+0x180>)
   1ac24:	4281      	cmp	r1, r0
   1ac26:	bf0c      	ite	eq
   1ac28:	4690      	moveq	r8, r2
   1ac2a:	4698      	movne	r8, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ac2c:	1c63      	adds	r3, r4, #1
   1ac2e:	2b01      	cmp	r3, #1
   1ac30:	d91a      	bls.n	1ac68 <net_pkt_alloc_buffer+0xd0>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   1ac32:	f010 fcb5 	bl	2b5a0 <z_tick_get>
   1ac36:	ebb9 0300 	subs.w	r3, r9, r0
   1ac3a:	9300      	str	r3, [sp, #0]
   1ac3c:	eb6a 0301 	sbc.w	r3, sl, r1
   1ac40:	9301      	str	r3, [sp, #4]

		if (remaining <= 0) {
   1ac42:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ac46:	2b01      	cmp	r3, #1
   1ac48:	f174 0300 	sbcs.w	r3, r4, #0
   1ac4c:	bfa3      	ittte	ge
   1ac4e:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   1ac52:	2300      	movge	r3, #0
   1ac54:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   1ac58:	2400      	movlt	r4, #0
   1ac5a:	bfa1      	itttt	ge
   1ac5c:	9800      	ldrge	r0, [sp, #0]
   1ac5e:	fbe1 2300 	umlalge	r2, r3, r1, r0
   1ac62:	0bd4      	lsrge	r4, r2, #15
   1ac64:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	u64_t end = z_timeout_end_calc(timeout);
   1ac68:	4620      	mov	r0, r4
   1ac6a:	f019 fe0d 	bl	34888 <z_timeout_end_calc>
   1ac6e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1ac72:	4681      	mov	r9, r0
   1ac74:	468b      	mov	fp, r1
	struct net_buf *current = NULL;
   1ac76:	2200      	movs	r2, #0
	while (size) {
   1ac78:	b976      	cbnz	r6, 1ac98 <net_pkt_alloc_buffer+0x100>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   1ac7a:	b1b5      	cbz	r5, 1acaa <net_pkt_alloc_buffer+0x112>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   1ac7c:	4638      	mov	r0, r7
   1ac7e:	4629      	mov	r1, r5
   1ac80:	f016 fea9 	bl	319d6 <net_pkt_append_buffer>

	return 0;
   1ac84:	2000      	movs	r0, #0
   1ac86:	e012      	b.n	1acae <net_pkt_alloc_buffer+0x116>
		size += buf->size;
   1ac88:	89eb      	ldrh	r3, [r5, #14]
		buf = buf->frags;
   1ac8a:	682d      	ldr	r5, [r5, #0]
		size += buf->size;
   1ac8c:	449b      	add	fp, r3
		buf = buf->frags;
   1ac8e:	e7a2      	b.n	1abd6 <net_pkt_alloc_buffer+0x3e>
	size_t hdr_len = 0;
   1ac90:	4628      	mov	r0, r5
   1ac92:	e7b1      	b.n	1abf8 <net_pkt_alloc_buffer+0x60>
			max_len = size;
   1ac94:	4631      	mov	r1, r6
   1ac96:	e7bb      	b.n	1ac10 <net_pkt_alloc_buffer+0x78>
		new = net_buf_alloc_fixed(pool, timeout);
   1ac98:	4621      	mov	r1, r4
   1ac9a:	4640      	mov	r0, r8
   1ac9c:	9200      	str	r2, [sp, #0]
   1ac9e:	f016 fa0e 	bl	310be <net_buf_alloc_fixed>
		if (!new) {
   1aca2:	9a00      	ldr	r2, [sp, #0]
   1aca4:	4603      	mov	r3, r0
   1aca6:	b928      	cbnz	r0, 1acb4 <net_pkt_alloc_buffer+0x11c>
	if (first) {
   1aca8:	bb6d      	cbnz	r5, 1ad06 <net_pkt_alloc_buffer+0x16e>
		return -ENOMEM;
   1acaa:	f06f 000b 	mvn.w	r0, #11
}
   1acae:	b005      	add	sp, #20
   1acb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
   1acb4:	b905      	cbnz	r5, 1acb8 <net_pkt_alloc_buffer+0x120>
   1acb6:	b322      	cbz	r2, 1ad02 <net_pkt_alloc_buffer+0x16a>
			current->frags = new;
   1acb8:	6013      	str	r3, [r2, #0]
		if (current->size > size) {
   1acba:	89da      	ldrh	r2, [r3, #14]
   1acbc:	42b2      	cmp	r2, r6
			current->size = size;
   1acbe:	bf88      	it	hi
   1acc0:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   1acc2:	89da      	ldrh	r2, [r3, #14]
   1acc4:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1acc6:	1c62      	adds	r2, r4, #1
   1acc8:	2a01      	cmp	r2, #1
   1acca:	d918      	bls.n	1acfe <net_pkt_alloc_buffer+0x166>
   1accc:	9300      	str	r3, [sp, #0]
			s64_t remaining = end - z_tick_get();
   1acce:	f010 fc67 	bl	2b5a0 <z_tick_get>
   1acd2:	ebb9 0300 	subs.w	r3, r9, r0
   1acd6:	9302      	str	r3, [sp, #8]
   1acd8:	eb6b 0301 	sbc.w	r3, fp, r1
   1acdc:	9303      	str	r3, [sp, #12]
			if (remaining <= 0) {
   1acde:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1ace2:	2b01      	cmp	r3, #1
   1ace4:	f174 0300 	sbcs.w	r3, r4, #0
   1ace8:	dbc7      	blt.n	1ac7a <net_pkt_alloc_buffer+0xe2>
   1acea:	f647 70ff 	movw	r0, #32767	; 0x7fff
   1acee:	2100      	movs	r1, #0
   1acf0:	9b02      	ldr	r3, [sp, #8]
   1acf2:	fbea 0103 	umlal	r0, r1, sl, r3
   1acf6:	9b00      	ldr	r3, [sp, #0]
   1acf8:	0bc4      	lsrs	r4, r0, #15
   1acfa:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		if (!first && !current) {
   1acfe:	461a      	mov	r2, r3
   1ad00:	e7ba      	b.n	1ac78 <net_pkt_alloc_buffer+0xe0>
   1ad02:	4605      	mov	r5, r0
   1ad04:	e7d9      	b.n	1acba <net_pkt_alloc_buffer+0x122>
		net_buf_unref(first);
   1ad06:	4628      	mov	r0, r5
   1ad08:	f7fe fd94 	bl	19834 <net_buf_unref>
   1ad0c:	e7cd      	b.n	1acaa <net_pkt_alloc_buffer+0x112>
   1ad0e:	bf00      	nop
   1ad10:	200207b8 	.word	0x200207b8
   1ad14:	20020604 	.word	0x20020604
   1ad18:	200207e4 	.word	0x200207e4

0001ad1c <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   1ad1c:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   1ad1e:	9c04      	ldr	r4, [sp, #16]
   1ad20:	e9cd 3400 	strd	r3, r4, [sp]
   1ad24:	4613      	mov	r3, r2
   1ad26:	460a      	mov	r2, r1
   1ad28:	4601      	mov	r1, r0
   1ad2a:	4802      	ldr	r0, [pc, #8]	; (1ad34 <net_pkt_alloc_with_buffer+0x18>)
   1ad2c:	f016 fe65 	bl	319fa <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   1ad30:	b002      	add	sp, #8
   1ad32:	bd10      	pop	{r4, pc}
   1ad34:	20020604 	.word	0x20020604

0001ad38 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   1ad38:	b508      	push	{r3, lr}
   1ad3a:	460b      	mov	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ad3c:	3308      	adds	r3, #8
   1ad3e:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   1ad42:	07db      	lsls	r3, r3, #31
   1ad44:	d407      	bmi.n	1ad56 <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   1ad46:	22dc      	movs	r2, #220	; 0xdc
   1ad48:	4b04      	ldr	r3, [pc, #16]	; (1ad5c <net_tc_submit_to_tx_queue+0x24>)
   1ad4a:	fb00 3002 	mla	r0, r0, r2, r3
   1ad4e:	f017 f811 	bl	31d74 <k_work_submit_to_queue>

	return true;
   1ad52:	2001      	movs	r0, #1
}
   1ad54:	bd08      	pop	{r3, pc}
		return false;
   1ad56:	2000      	movs	r0, #0
   1ad58:	e7fc      	b.n	1ad54 <net_tc_submit_to_tx_queue+0x1c>
   1ad5a:	bf00      	nop
   1ad5c:	20021b28 	.word	0x20021b28

0001ad60 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   1ad60:	2807      	cmp	r0, #7
   1ad62:	bf88      	it	hi
   1ad64:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   1ad66:	4b01      	ldr	r3, [pc, #4]	; (1ad6c <net_tx_priority2tc+0xc>)
   1ad68:	5c18      	ldrb	r0, [r3, r0]
   1ad6a:	4770      	bx	lr
   1ad6c:	00037b4b 	.word	0x00037b4b

0001ad70 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   1ad70:	2307      	movs	r3, #7
{
   1ad72:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   1ad74:	4c08      	ldr	r4, [pc, #32]	; (1ad98 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   1ad76:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   1ad7a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&tx_classes[i].work_q,
   1ad7e:	4907      	ldr	r1, [pc, #28]	; (1ad9c <net_tc_tx_init+0x2c>)
   1ad80:	f06f 0308 	mvn.w	r3, #8
   1ad84:	4620      	mov	r0, r4
   1ad86:	f010 f823 	bl	2add0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1ad8a:	4905      	ldr	r1, [pc, #20]	; (1ada0 <net_tc_tx_init+0x30>)
   1ad8c:	f104 001c 	add.w	r0, r4, #28
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   1ad90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad94:	f019 bd03 	b.w	3479e <z_impl_k_thread_name_set>
   1ad98:	20021b28 	.word	0x20021b28
   1ad9c:	20031500 	.word	0x20031500
   1ada0:	00037b42 	.word	0x00037b42

0001ada4 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   1ada4:	2307      	movs	r3, #7
{
   1ada6:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   1ada8:	4c08      	ldr	r4, [pc, #32]	; (1adcc <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   1adaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   1adae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&rx_classes[i].work_q,
   1adb2:	4907      	ldr	r1, [pc, #28]	; (1add0 <net_tc_rx_init+0x2c>)
   1adb4:	f06f 0308 	mvn.w	r3, #8
   1adb8:	4620      	mov	r0, r4
   1adba:	f010 f809 	bl	2add0 <k_work_q_start>
   1adbe:	4905      	ldr	r1, [pc, #20]	; (1add4 <net_tc_rx_init+0x30>)
   1adc0:	f104 001c 	add.w	r0, r4, #28
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   1adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1adc8:	f019 bce9 	b.w	3479e <z_impl_k_thread_name_set>
   1adcc:	20021a4c 	.word	0x20021a4c
   1add0:	200319b0 	.word	0x200319b0
   1add4:	00037b39 	.word	0x00037b39

0001add8 <net_icmpv4_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   1add8:	4b03      	ldr	r3, [pc, #12]	; (1ade8 <net_icmpv4_register_handler+0x10>)
   1adda:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1addc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   1adde:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ade0:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ade2:	b902      	cbnz	r2, 1ade6 <net_icmpv4_register_handler+0xe>
	list->tail = node;
   1ade4:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1ade6:	4770      	bx	lr
   1ade8:	20021c04 	.word	0x20021c04

0001adec <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
   1adec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1adee:	2304      	movs	r3, #4
   1adf0:	2200      	movs	r2, #0
{
   1adf2:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1adf4:	4669      	mov	r1, sp
{
   1adf6:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1adf8:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1adfc:	f016 ff94 	bl	31d28 <net_pkt_get_data>
	if (!icmp_hdr) {
   1ae00:	4604      	mov	r4, r0
   1ae02:	b910      	cbnz	r0, 1ae0a <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
   1ae04:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   1ae06:	b003      	add	sp, #12
   1ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline u16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
   1ae0a:	2101      	movs	r1, #1
   1ae0c:	4628      	mov	r0, r5
   1ae0e:	f016 fae5 	bl	313dc <net_calc_chksum>
	if (net_calc_chksum_icmpv4(pkt) != 0U) {
   1ae12:	2800      	cmp	r0, #0
   1ae14:	d1f6      	bne.n	1ae04 <net_icmpv4_input+0x18>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &ip_hdr->dst) &&
   1ae16:	6a2f      	ldr	r7, [r5, #32]
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline bool net_ipv4_is_addr_bcast(struct net_if *iface,
					  const struct in_addr *addr)
{
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1ae18:	f7ff f8a4 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1ae1c:	6932      	ldr	r2, [r6, #16]
   1ae1e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1ae20:	429a      	cmp	r2, r3
   1ae22:	d0ef      	beq.n	1ae04 <net_icmpv4_input+0x18>
		return true;
	}

	return net_if_ipv4_is_addr_bcast(iface, addr);
   1ae24:	f106 0110 	add.w	r1, r6, #16
   1ae28:	4638      	mov	r0, r7
   1ae2a:	f7fe fecf 	bl	19bcc <net_if_ipv4_is_addr_bcast>
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	d1e8      	bne.n	1ae04 <net_icmpv4_input+0x18>
	return net_pkt_skip(pkt, access->size);
   1ae32:	9901      	ldr	r1, [sp, #4]
   1ae34:	4628      	mov	r0, r5
   1ae36:	f016 fe23 	bl	31a80 <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1ae3a:	4b0b      	ldr	r3, [pc, #44]	; (1ae68 <net_icmpv4_input+0x7c>)
   1ae3c:	681b      	ldr	r3, [r3, #0]
   1ae3e:	2b00      	cmp	r3, #0
   1ae40:	d0e0      	beq.n	1ae04 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
   1ae42:	7821      	ldrb	r1, [r4, #0]
   1ae44:	7a1a      	ldrb	r2, [r3, #8]
   1ae46:	428a      	cmp	r2, r1
   1ae48:	d10a      	bne.n	1ae60 <net_icmpv4_input+0x74>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1ae4a:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   1ae4c:	7860      	ldrb	r0, [r4, #1]
   1ae4e:	4290      	cmp	r0, r2
   1ae50:	d000      	beq.n	1ae54 <net_icmpv4_input+0x68>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1ae52:	b92a      	cbnz	r2, 1ae60 <net_icmpv4_input+0x74>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   1ae54:	685b      	ldr	r3, [r3, #4]
   1ae56:	4622      	mov	r2, r4
   1ae58:	4631      	mov	r1, r6
   1ae5a:	4628      	mov	r0, r5
   1ae5c:	4798      	blx	r3
   1ae5e:	e7d2      	b.n	1ae06 <net_icmpv4_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae60:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1ae62:	2b00      	cmp	r3, #0
   1ae64:	d1ee      	bne.n	1ae44 <net_icmpv4_input+0x58>
   1ae66:	e7cd      	b.n	1ae04 <net_icmpv4_input+0x18>
   1ae68:	20021c04 	.word	0x20021c04

0001ae6c <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
   1ae6c:	4801      	ldr	r0, [pc, #4]	; (1ae74 <net_icmpv4_init+0x8>)
   1ae6e:	f7ff bfb3 	b.w	1add8 <net_icmpv4_register_handler>
   1ae72:	bf00      	nop
   1ae74:	200200b0 	.word	0x200200b0

0001ae78 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
   1ae78:	b510      	push	{r4, lr}
   1ae7a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1ae7c:	2220      	movs	r2, #32
   1ae7e:	2100      	movs	r1, #0
   1ae80:	f019 fe08 	bl	34a94 <memset>
Z_GENLIST_PREPEND(slist, snode)
   1ae84:	4b03      	ldr	r3, [pc, #12]	; (1ae94 <conn_set_unused+0x1c>)
   1ae86:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1ae88:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ae8a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ae8c:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ae8e:	b902      	cbnz	r2, 1ae92 <conn_set_unused+0x1a>
	list->tail = node;
   1ae90:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
   1ae92:	bd10      	pop	{r4, pc}
   1ae94:	20021c0c 	.word	0x20021c0c

0001ae98 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   1ae98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1ae9c:	4e5d      	ldr	r6, [pc, #372]	; (1b014 <net_conn_register+0x17c>)
{
   1ae9e:	9101      	str	r1, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1aea0:	6834      	ldr	r4, [r6, #0]
{
   1aea2:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   1aea6:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
   1aeaa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1aeae:	b344      	cbz	r4, 1af02 <net_conn_register+0x6a>
   1aeb0:	fa97 f897 	rev16.w	r8, r7
   1aeb4:	fa9c f99c 	rev16.w	r9, ip
   1aeb8:	fa1f f888 	uxth.w	r8, r8
   1aebc:	fa1f f989 	uxth.w	r9, r9
		if (conn->proto != proto) {
   1aec0:	8ba5      	ldrh	r5, [r4, #28]
   1aec2:	4285      	cmp	r5, r0
   1aec4:	d11a      	bne.n	1aefc <net_conn_register+0x64>
		if (conn->family != family) {
   1aec6:	7fa5      	ldrb	r5, [r4, #30]
   1aec8:	9901      	ldr	r1, [sp, #4]
   1aeca:	428d      	cmp	r5, r1
   1aecc:	d116      	bne.n	1aefc <net_conn_register+0x64>
		if (remote_addr) {
   1aece:	7fe5      	ldrb	r5, [r4, #31]
   1aed0:	f005 0a02 	and.w	sl, r5, #2
   1aed4:	b1da      	cbz	r2, 1af0e <net_conn_register+0x76>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
   1aed6:	f1ba 0f00 	cmp.w	sl, #0
   1aeda:	d00f      	beq.n	1aefc <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1aedc:	f8b2 a000 	ldrh.w	sl, [r2]
   1aee0:	f1ba 0f01 	cmp.w	sl, #1
   1aee4:	d10a      	bne.n	1aefc <net_conn_register+0x64>
				   remote_addr->sa_family == AF_INET &&
   1aee6:	f8b4 a004 	ldrh.w	sl, [r4, #4]
   1aeea:	f1ba 0f01 	cmp.w	sl, #1
   1aeee:	d105      	bne.n	1aefc <net_conn_register+0x64>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1aef0:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1aef4:	f8d4 a008 	ldr.w	sl, [r4, #8]
				if (!net_ipv4_addr_cmp(
   1aef8:	45d3      	cmp	fp, sl
   1aefa:	d00b      	beq.n	1af14 <net_conn_register+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aefc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1aefe:	2c00      	cmp	r4, #0
   1af00:	d1de      	bne.n	1aec0 <net_conn_register+0x28>
	node = sys_slist_peek_head(&conn_unused);
   1af02:	4d45      	ldr	r5, [pc, #276]	; (1b018 <net_conn_register+0x180>)
   1af04:	682c      	ldr	r4, [r5, #0]
	if (!node) {
   1af06:	bb0c      	cbnz	r4, 1af4c <net_conn_register+0xb4>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
   1af08:	f06f 0001 	mvn.w	r0, #1
   1af0c:	e075      	b.n	1affa <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1af0e:	f1ba 0f00 	cmp.w	sl, #0
   1af12:	d1f3      	bne.n	1aefc <net_conn_register+0x64>
		if (local_addr) {
   1af14:	f005 0504 	and.w	r5, r5, #4
   1af18:	b1ab      	cbz	r3, 1af46 <net_conn_register+0xae>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
   1af1a:	2d00      	cmp	r5, #0
   1af1c:	d0ee      	beq.n	1aefc <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1af1e:	881d      	ldrh	r5, [r3, #0]
   1af20:	2d01      	cmp	r5, #1
   1af22:	d1eb      	bne.n	1aefc <net_conn_register+0x64>
				   local_addr->sa_family == AF_INET &&
   1af24:	89a5      	ldrh	r5, [r4, #12]
   1af26:	2d01      	cmp	r5, #1
   1af28:	d1e8      	bne.n	1aefc <net_conn_register+0x64>
   1af2a:	f8d3 a004 	ldr.w	sl, [r3, #4]
   1af2e:	6925      	ldr	r5, [r4, #16]
				if (!net_ipv4_addr_cmp(
   1af30:	45aa      	cmp	sl, r5
   1af32:	d1e3      	bne.n	1aefc <net_conn_register+0x64>
		if (net_sin(&conn->remote_addr)->sin_port !=
   1af34:	88e5      	ldrh	r5, [r4, #6]
   1af36:	4545      	cmp	r5, r8
   1af38:	d1e0      	bne.n	1aefc <net_conn_register+0x64>
		if (net_sin(&conn->local_addr)->sin_port !=
   1af3a:	89e5      	ldrh	r5, [r4, #14]
   1af3c:	454d      	cmp	r5, r9
   1af3e:	d1dd      	bne.n	1aefc <net_conn_register+0x64>
		return -EALREADY;
   1af40:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1af44:	e059      	b.n	1affa <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1af46:	2d00      	cmp	r5, #0
   1af48:	d0f4      	beq.n	1af34 <net_conn_register+0x9c>
   1af4a:	e7d7      	b.n	1aefc <net_conn_register+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1af4c:	6869      	ldr	r1, [r5, #4]
   1af4e:	f8d4 9000 	ldr.w	r9, [r4]
   1af52:	428c      	cmp	r4, r1
	list->head = node;
   1af54:	f8c5 9000 	str.w	r9, [r5]
	list->tail = node;
   1af58:	bf08      	it	eq
   1af5a:	f8c5 9004 	streq.w	r9, [r5, #4]
	parent->next = child;
   1af5e:	2500      	movs	r5, #0
   1af60:	6025      	str	r5, [r4, #0]
	}

	if (remote_addr) {
   1af62:	2a00      	cmp	r2, #0
   1af64:	d04c      	beq.n	1b000 <net_conn_register+0x168>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(remote_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1af66:	8815      	ldrh	r5, [r2, #0]
   1af68:	2d01      	cmp	r5, #1
   1af6a:	d14b      	bne.n	1b004 <net_conn_register+0x16c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1af6c:	6815      	ldr	r5, [r2, #0]
   1af6e:	6065      	str	r5, [r4, #4]
   1af70:	6855      	ldr	r5, [r2, #4]
   1af72:	60a5      	str	r5, [r4, #8]
			   remote_addr->sa_family == AF_INET) {
			memcpy(&conn->remote_addr, remote_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(remote_addr)->sin_addr.s_addr) {
   1af74:	6855      	ldr	r5, [r2, #4]
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   1af76:	2d00      	cmp	r5, #0
		} else {
			NET_ERR("Remote address family not set");
			goto error;
		}

		flags |= NET_CONN_REMOTE_ADDR_SET;
   1af78:	bf14      	ite	ne
   1af7a:	2522      	movne	r5, #34	; 0x22
   1af7c:	2502      	moveq	r5, #2
	}

	if (local_addr) {
   1af7e:	b1bb      	cbz	r3, 1afb0 <net_conn_register+0x118>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(local_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1af80:	f8b3 8000 	ldrh.w	r8, [r3]
   1af84:	f1b8 0f01 	cmp.w	r8, #1
   1af88:	d13c      	bne.n	1b004 <net_conn_register+0x16c>
   1af8a:	f8d3 8000 	ldr.w	r8, [r3]
   1af8e:	f8c4 800c 	str.w	r8, [r4, #12]
   1af92:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1af96:	f8c4 8010 	str.w	r8, [r4, #16]
			   local_addr->sa_family == AF_INET) {
			memcpy(&conn->local_addr, local_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(local_addr)->sin_addr.s_addr) {
   1af9a:	6859      	ldr	r1, [r3, #4]
   1af9c:	b109      	cbz	r1, 1afa2 <net_conn_register+0x10a>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   1af9e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
		} else {
			NET_ERR("Local address family not set");
			goto error;
		}

		flags |= NET_CONN_LOCAL_ADDR_SET;
   1afa2:	f045 0504 	orr.w	r5, r5, #4
	}

	if (remote_addr && local_addr) {
   1afa6:	b11a      	cbz	r2, 1afb0 <net_conn_register+0x118>
		if (remote_addr->sa_family != local_addr->sa_family) {
   1afa8:	8812      	ldrh	r2, [r2, #0]
   1afaa:	881b      	ldrh	r3, [r3, #0]
   1afac:	429a      	cmp	r2, r3
   1afae:	d129      	bne.n	1b004 <net_conn_register+0x16c>
			NET_ERR("Address families different");
			goto error;
		}
	}

	if (remote_port) {
   1afb0:	b11f      	cbz	r7, 1afba <net_conn_register+0x122>
		flags |= NET_CONN_REMOTE_PORT_SPEC;
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1afb2:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   1afb4:	f045 0508 	orr.w	r5, r5, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1afb8:	80e7      	strh	r7, [r4, #6]
	}

	if (local_port) {
   1afba:	f1bc 0f00 	cmp.w	ip, #0
   1afbe:	d005      	beq.n	1afcc <net_conn_register+0x134>
		flags |= NET_CONN_LOCAL_PORT_SPEC;
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1afc0:	fa9c fc9c 	rev16.w	ip, ip
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   1afc4:	f045 0510 	orr.w	r5, r5, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1afc8:	f8a4 c00e 	strh.w	ip, [r4, #14]
	}

	conn->cb = cb;
   1afcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	conn->user_data = user_data;
	conn->flags = flags;
   1afce:	77e5      	strb	r5, [r4, #31]
	conn->cb = cb;
   1afd0:	6163      	str	r3, [r4, #20]
	conn->user_data = user_data;
   1afd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn->proto = proto;
   1afd4:	83a0      	strh	r0, [r4, #28]
	conn->user_data = user_data;
   1afd6:	61a3      	str	r3, [r4, #24]
	conn->family = family;
   1afd8:	9b01      	ldr	r3, [sp, #4]
   1afda:	77a3      	strb	r3, [r4, #30]

	if (handle) {
   1afdc:	f1be 0f00 	cmp.w	lr, #0
   1afe0:	d001      	beq.n	1afe6 <net_conn_register+0x14e>
		*handle = (struct net_conn_handle *)conn;
   1afe2:	f8ce 4000 	str.w	r4, [lr]
	conn->flags |= NET_CONN_IN_USE;
   1afe6:	7fe3      	ldrb	r3, [r4, #31]
   1afe8:	f043 0301 	orr.w	r3, r3, #1
   1afec:	77e3      	strb	r3, [r4, #31]
Z_GENLIST_PREPEND(slist, snode)
   1afee:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
   1aff0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1aff2:	6870      	ldr	r0, [r6, #4]
	list->head = node;
   1aff4:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1aff6:	b958      	cbnz	r0, 1b010 <net_conn_register+0x178>
	list->tail = node;
   1aff8:	6074      	str	r4, [r6, #4]

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
   1affa:	b003      	add	sp, #12
   1affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t flags = 0U;
   1b000:	4615      	mov	r5, r2
   1b002:	e7bc      	b.n	1af7e <net_conn_register+0xe6>
	conn_set_unused(conn);
   1b004:	4620      	mov	r0, r4
   1b006:	f7ff ff37 	bl	1ae78 <conn_set_unused>
	return -EINVAL;
   1b00a:	f06f 0015 	mvn.w	r0, #21
   1b00e:	e7f4      	b.n	1affa <net_conn_register+0x162>
	return 0;
   1b010:	2000      	movs	r0, #0
   1b012:	e7f2      	b.n	1affa <net_conn_register+0x162>
   1b014:	20021c14 	.word	0x20021c14
   1b018:	20021c0c 	.word	0x20021c0c

0001b01c <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
   1b01c:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1b01e:	4b15      	ldr	r3, [pc, #84]	; (1b074 <net_conn_unregister+0x58>)
   1b020:	4298      	cmp	r0, r3
   1b022:	d321      	bcc.n	1b068 <net_conn_unregister+0x4c>
   1b024:	3380      	adds	r3, #128	; 0x80
   1b026:	4298      	cmp	r0, r3
   1b028:	d81e      	bhi.n	1b068 <net_conn_unregister+0x4c>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   1b02a:	7fc3      	ldrb	r3, [r0, #31]
   1b02c:	07db      	lsls	r3, r3, #31
   1b02e:	d51e      	bpl.n	1b06e <net_conn_unregister+0x52>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b030:	2100      	movs	r1, #0
   1b032:	4b11      	ldr	r3, [pc, #68]	; (1b078 <net_conn_unregister+0x5c>)
   1b034:	681a      	ldr	r2, [r3, #0]
   1b036:	b152      	cbz	r2, 1b04e <net_conn_unregister+0x32>
   1b038:	4290      	cmp	r0, r2
   1b03a:	d112      	bne.n	1b062 <net_conn_unregister+0x46>
Z_GENLIST_REMOVE(slist, snode)
   1b03c:	6802      	ldr	r2, [r0, #0]
   1b03e:	b951      	cbnz	r1, 1b056 <net_conn_unregister+0x3a>
   1b040:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1b042:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b044:	4288      	cmp	r0, r1
   1b046:	d100      	bne.n	1b04a <net_conn_unregister+0x2e>
	list->tail = node;
   1b048:	605a      	str	r2, [r3, #4]
	parent->next = child;
   1b04a:	2300      	movs	r3, #0
   1b04c:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
   1b04e:	f7ff ff13 	bl	1ae78 <conn_set_unused>

	return 0;
   1b052:	2000      	movs	r0, #0
}
   1b054:	bd08      	pop	{r3, pc}
   1b056:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b058:	685a      	ldr	r2, [r3, #4]
   1b05a:	4290      	cmp	r0, r2
	list->tail = node;
   1b05c:	bf08      	it	eq
   1b05e:	6059      	streq	r1, [r3, #4]
   1b060:	e7f3      	b.n	1b04a <net_conn_unregister+0x2e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b062:	4611      	mov	r1, r2
   1b064:	6812      	ldr	r2, [r2, #0]
   1b066:	e7e6      	b.n	1b036 <net_conn_unregister+0x1a>
		return -EINVAL;
   1b068:	f06f 0015 	mvn.w	r0, #21
   1b06c:	e7f2      	b.n	1b054 <net_conn_unregister+0x38>
		return -ENOENT;
   1b06e:	f06f 0001 	mvn.w	r0, #1
   1b072:	e7ef      	b.n	1b054 <net_conn_unregister+0x38>
   1b074:	20021c1c 	.word	0x20021c1c
   1b078:	20021c14 	.word	0x20021c14

0001b07c <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   1b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1b080:	2a11      	cmp	r2, #17
{
   1b082:	b087      	sub	sp, #28
   1b084:	4606      	mov	r6, r0
   1b086:	4689      	mov	r9, r1
   1b088:	4617      	mov	r7, r2
   1b08a:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1b08c:	d16f      	bne.n	1b16e <net_conn_input+0xf2>
		src_port = proto_hdr->udp->src_port;
		dst_port = proto_hdr->udp->dst_port;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		src_port = proto_hdr->tcp->src_port;
   1b08e:	f8da 3000 	ldr.w	r3, [sl]
   1b092:	881a      	ldrh	r2, [r3, #0]
   1b094:	9202      	str	r2, [sp, #8]
		dst_port = proto_hdr->tcp->dst_port;
   1b096:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   1b09a:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1b09e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b0a2:	2b01      	cmp	r3, #1
   1b0a4:	d069      	beq.n	1b17a <net_conn_input+0xfe>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   1b0a6:	2500      	movs	r5, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1b0a8:	4b6a      	ldr	r3, [pc, #424]	; (1b254 <net_conn_input+0x1d8>)
   1b0aa:	681c      	ldr	r4, [r3, #0]
   1b0ac:	2c00      	cmp	r4, #0
   1b0ae:	f000 80be 	beq.w	1b22e <net_conn_input+0x1b2>
   1b0b2:	2200      	movs	r2, #0
   1b0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0b8:	4690      	mov	r8, r2
   1b0ba:	9304      	str	r3, [sp, #16]
		if (conn->proto != proto) {
   1b0bc:	b2bb      	uxth	r3, r7
   1b0be:	9305      	str	r3, [sp, #20]
   1b0c0:	8ba3      	ldrh	r3, [r4, #28]
   1b0c2:	9905      	ldr	r1, [sp, #20]
   1b0c4:	428b      	cmp	r3, r1
   1b0c6:	d146      	bne.n	1b156 <net_conn_input+0xda>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   1b0c8:	7fa1      	ldrb	r1, [r4, #30]
   1b0ca:	b129      	cbz	r1, 1b0d8 <net_conn_input+0x5c>
   1b0cc:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   1b0d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b0d4:	428b      	cmp	r3, r1
   1b0d6:	d13e      	bne.n	1b156 <net_conn_input+0xda>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   1b0d8:	88e3      	ldrh	r3, [r4, #6]
   1b0da:	b113      	cbz	r3, 1b0e2 <net_conn_input+0x66>
				if (net_sin(&conn->remote_addr)->sin_port !=
   1b0dc:	9902      	ldr	r1, [sp, #8]
   1b0de:	4299      	cmp	r1, r3
   1b0e0:	d139      	bne.n	1b156 <net_conn_input+0xda>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   1b0e2:	89e3      	ldrh	r3, [r4, #14]
   1b0e4:	b10b      	cbz	r3, 1b0ea <net_conn_input+0x6e>
				if (net_sin(&conn->local_addr)->sin_port !=
   1b0e6:	459b      	cmp	fp, r3
   1b0e8:	d135      	bne.n	1b156 <net_conn_input+0xda>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1b0ea:	7fe3      	ldrb	r3, [r4, #31]
   1b0ec:	079f      	lsls	r7, r3, #30
   1b0ee:	d50f      	bpl.n	1b110 <net_conn_input+0x94>
   1b0f0:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1b0f4:	88a0      	ldrh	r0, [r4, #4]
   1b0f6:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1b0fa:	4288      	cmp	r0, r1
   1b0fc:	d12b      	bne.n	1b156 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b0fe:	2901      	cmp	r1, #1
   1b100:	d106      	bne.n	1b110 <net_conn_input+0x94>
		if (net_sin(addr)->sin_addr.s_addr) {
   1b102:	68a1      	ldr	r1, [r4, #8]
   1b104:	b121      	cbz	r1, 1b110 <net_conn_input+0x94>
   1b106:	f8d9 0000 	ldr.w	r0, [r9]
   1b10a:	68c0      	ldr	r0, [r0, #12]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1b10c:	4281      	cmp	r1, r0
   1b10e:	d122      	bne.n	1b156 <net_conn_input+0xda>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1b110:	0758      	lsls	r0, r3, #29
   1b112:	d50f      	bpl.n	1b134 <net_conn_input+0xb8>
   1b114:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1b118:	89a0      	ldrh	r0, [r4, #12]
   1b11a:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1b11e:	4288      	cmp	r0, r1
   1b120:	d119      	bne.n	1b156 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b122:	2901      	cmp	r1, #1
   1b124:	d106      	bne.n	1b134 <net_conn_input+0xb8>
		if (net_sin(addr)->sin_addr.s_addr) {
   1b126:	6921      	ldr	r1, [r4, #16]
   1b128:	b121      	cbz	r1, 1b134 <net_conn_input+0xb8>
   1b12a:	f8d9 0000 	ldr.w	r0, [r9]
   1b12e:	6900      	ldr	r0, [r0, #16]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1b130:	4281      	cmp	r1, r0
   1b132:	d110      	bne.n	1b156 <net_conn_input+0xda>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   1b134:	f1b8 0f00 	cmp.w	r8, #0
   1b138:	d003      	beq.n	1b142 <net_conn_input+0xc6>
   1b13a:	f898 101f 	ldrb.w	r1, [r8, #31]
   1b13e:	0709      	lsls	r1, r1, #28
   1b140:	d409      	bmi.n	1b156 <net_conn_input+0xda>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   1b142:	9904      	ldr	r1, [sp, #16]
   1b144:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1b148:	4299      	cmp	r1, r3
   1b14a:	da04      	bge.n	1b156 <net_conn_input+0xda>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   1b14c:	2d00      	cmp	r5, #0
   1b14e:	d148      	bne.n	1b1e2 <net_conn_input+0x166>
					best_rank = NET_CONN_RANK(conn->flags);
					best_match = conn;

					continue;
   1b150:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
   1b152:	b21b      	sxth	r3, r3
   1b154:	9304      	str	r3, [sp, #16]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b156:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1b158:	2c00      	cmp	r4, #0
   1b15a:	d1b1      	bne.n	1b0c0 <net_conn_input+0x44>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   1b15c:	2d00      	cmp	r5, #0
   1b15e:	d056      	beq.n	1b20e <net_conn_input+0x192>
   1b160:	2a00      	cmp	r2, #0
   1b162:	d054      	beq.n	1b20e <net_conn_input+0x192>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   1b164:	4630      	mov	r0, r6
   1b166:	f016 fb9d 	bl	318a4 <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   1b16a:	2000      	movs	r0, #0
   1b16c:	e002      	b.n	1b174 <net_conn_input+0xf8>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1b16e:	2a06      	cmp	r2, #6
   1b170:	d08d      	beq.n	1b08e <net_conn_input+0x12>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   1b172:	2002      	movs	r0, #2
}
   1b174:	b007      	add	sp, #28
   1b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
   1b17a:	f8d9 4000 	ldr.w	r4, [r9]
   1b17e:	68e2      	ldr	r2, [r4, #12]
   1b180:	6923      	ldr	r3, [r4, #16]
   1b182:	429a      	cmp	r2, r3
   1b184:	d061      	beq.n	1b24a <net_conn_input+0x1ce>
		    net_ipv4_is_my_addr(&ip_hdr->ipv4->src)) {
   1b186:	f104 050c 	add.w	r5, r4, #12
 */
static inline bool net_ipv4_is_my_addr(const struct in_addr *addr)
{
	bool ret;

	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1b18a:	2100      	movs	r1, #0
   1b18c:	4628      	mov	r0, r5
   1b18e:	f7fe fd9d 	bl	19ccc <net_if_ipv4_addr_lookup>
   1b192:	f1b0 0800 	subs.w	r8, r0, #0
   1b196:	bf14      	ite	ne
   1b198:	2001      	movne	r0, #1
   1b19a:	2000      	moveq	r0, #0
	if (!ret) {
   1b19c:	d109      	bne.n	1b1b2 <net_conn_input+0x136>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b19e:	f7fe fee1 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b1a2:	68e2      	ldr	r2, [r4, #12]
   1b1a4:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1b1a6:	429a      	cmp	r2, r3
   1b1a8:	d004      	beq.n	1b1b4 <net_conn_input+0x138>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1b1aa:	4629      	mov	r1, r5
   1b1ac:	4640      	mov	r0, r8
   1b1ae:	f7fe fd0d 	bl	19bcc <net_if_ipv4_is_addr_bcast>
				      &ip_hdr->ipv4->dst) ||
   1b1b2:	b110      	cbz	r0, 1b1ba <net_conn_input+0x13e>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1b1b4:	9b02      	ldr	r3, [sp, #8]
   1b1b6:	459b      	cmp	fp, r3
   1b1b8:	d0db      	beq.n	1b172 <net_conn_input+0xf6>
   1b1ba:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1b1be:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b1c2:	2b01      	cmp	r3, #1
   1b1c4:	f47f af6f 	bne.w	1b0a6 <net_conn_input+0x2a>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   1b1c8:	f8d9 3000 	ldr.w	r3, [r9]
   1b1cc:	691d      	ldr	r5, [r3, #16]
   1b1ce:	ba2d      	rev	r5, r5
   1b1d0:	f005 4560 	and.w	r5, r5, #3758096384	; 0xe0000000
		if (net_ipv4_is_addr_mcast(&ip_hdr->ipv4->dst)) {
   1b1d4:	f105 5c00 	add.w	ip, r5, #536870912	; 0x20000000
   1b1d8:	f1dc 0500 	rsbs	r5, ip, #0
   1b1dc:	eb45 050c 	adc.w	r5, r5, ip
   1b1e0:	e762      	b.n	1b0a8 <net_conn_input+0x2c>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   1b1e2:	2164      	movs	r1, #100	; 0x64
   1b1e4:	4630      	mov	r0, r6
   1b1e6:	f016 fcfd 	bl	31be4 <net_pkt_clone>
				if (!mcast_pkt) {
   1b1ea:	9003      	str	r0, [sp, #12]
   1b1ec:	2800      	cmp	r0, #0
   1b1ee:	d0c0      	beq.n	1b172 <net_conn_input+0xf6>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   1b1f0:	69a3      	ldr	r3, [r4, #24]
   1b1f2:	4601      	mov	r1, r0
   1b1f4:	9300      	str	r3, [sp, #0]
   1b1f6:	464a      	mov	r2, r9
   1b1f8:	4653      	mov	r3, sl
   1b1fa:	4620      	mov	r0, r4
   1b1fc:	6967      	ldr	r7, [r4, #20]
   1b1fe:	47b8      	blx	r7
   1b200:	2802      	cmp	r0, #2
   1b202:	d102      	bne.n	1b20a <net_conn_input+0x18e>
					net_pkt_unref(mcast_pkt);
   1b204:	9803      	ldr	r0, [sp, #12]
   1b206:	f016 fb4d 	bl	318a4 <net_pkt_unref>
				mcast_pkt_delivered = true;
   1b20a:	462a      	mov	r2, r5
   1b20c:	e7a3      	b.n	1b156 <net_conn_input+0xda>
	if (conn) {
   1b20e:	f1b8 0f00 	cmp.w	r8, #0
   1b212:	d00c      	beq.n	1b22e <net_conn_input+0x1b2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   1b214:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1b218:	464a      	mov	r2, r9
   1b21a:	9300      	str	r3, [sp, #0]
   1b21c:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1b220:	4653      	mov	r3, sl
   1b222:	4631      	mov	r1, r6
   1b224:	4640      	mov	r0, r8
   1b226:	47a0      	blx	r4
   1b228:	2802      	cmp	r0, #2
   1b22a:	d19e      	bne.n	1b16a <net_conn_input+0xee>
   1b22c:	e7a1      	b.n	1b172 <net_conn_input+0xf6>
   1b22e:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b232:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b236:	2b01      	cmp	r3, #1
   1b238:	d101      	bne.n	1b23e <net_conn_input+0x1c2>
		   net_pkt_family(pkt) == AF_INET && is_mcast_pkt) {
   1b23a:	2d00      	cmp	r5, #0
   1b23c:	d199      	bne.n	1b172 <net_conn_input+0xf6>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
   1b23e:	2203      	movs	r2, #3
   1b240:	4630      	mov	r0, r6
   1b242:	4611      	mov	r1, r2
   1b244:	f016 fe39 	bl	31eba <net_icmpv4_send_error>
   1b248:	e793      	b.n	1b172 <net_conn_input+0xf6>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1b24a:	9b02      	ldr	r3, [sp, #8]
   1b24c:	459b      	cmp	fp, r3
   1b24e:	d090      	beq.n	1b172 <net_conn_input+0xf6>
   1b250:	e7ba      	b.n	1b1c8 <net_conn_input+0x14c>
   1b252:	bf00      	nop
   1b254:	20021c14 	.word	0x20021c14

0001b258 <net_conn_init>:
	list->head = NULL;
   1b258:	2200      	movs	r2, #0
   1b25a:	4b09      	ldr	r3, [pc, #36]	; (1b280 <net_conn_init+0x28>)
	list->tail = NULL;
   1b25c:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   1b260:	4b08      	ldr	r3, [pc, #32]	; (1b284 <net_conn_init+0x2c>)
   1b262:	4619      	mov	r1, r3
   1b264:	601a      	str	r2, [r3, #0]
   1b266:	f103 0220 	add.w	r2, r3, #32
   1b26a:	f841 2f40 	str.w	r2, [r1, #64]!
   1b26e:	461a      	mov	r2, r3
   1b270:	f842 1f60 	str.w	r1, [r2, #96]!
   1b274:	4904      	ldr	r1, [pc, #16]	; (1b288 <net_conn_init+0x30>)
   1b276:	621b      	str	r3, [r3, #32]
	return list->tail;
   1b278:	e9c1 2300 	strd	r2, r3, [r1]
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   1b27c:	4770      	bx	lr
   1b27e:	bf00      	nop
   1b280:	20021c14 	.word	0x20021c14
   1b284:	20021c1c 	.word	0x20021c1c
   1b288:	20021c0c 	.word	0x20021c0c

0001b28c <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1b28c:	460a      	mov	r2, r1
   1b28e:	4601      	mov	r1, r0
   1b290:	4801      	ldr	r0, [pc, #4]	; (1b298 <k_delayed_work_submit+0xc>)
   1b292:	f00f bdc1 	b.w	2ae18 <k_delayed_work_submit_to_queue>
   1b296:	bf00      	nop
   1b298:	20027460 	.word	0x20027460

0001b29c <net_context_get_family>:
{
   1b29c:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b29e:	4604      	mov	r4, r0
   1b2a0:	b970      	cbnz	r0, 1b2c0 <net_context_get_family+0x24>
   1b2a2:	490a      	ldr	r1, [pc, #40]	; (1b2cc <net_context_get_family+0x30>)
   1b2a4:	f240 13cb 	movw	r3, #459	; 0x1cb
   1b2a8:	4a09      	ldr	r2, [pc, #36]	; (1b2d0 <net_context_get_family+0x34>)
   1b2aa:	480a      	ldr	r0, [pc, #40]	; (1b2d4 <net_context_get_family+0x38>)
   1b2ac:	f013 ffd1 	bl	2f252 <printk>
   1b2b0:	4809      	ldr	r0, [pc, #36]	; (1b2d8 <net_context_get_family+0x3c>)
   1b2b2:	f013 ffce 	bl	2f252 <printk>
   1b2b6:	f240 11cb 	movw	r1, #459	; 0x1cb
   1b2ba:	4805      	ldr	r0, [pc, #20]	; (1b2d0 <net_context_get_family+0x34>)
   1b2bc:	f014 faca 	bl	2f854 <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1b2c0:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1b2c4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1b2c8:	bd10      	pop	{r4, pc}
   1b2ca:	bf00      	nop
   1b2cc:	0003707e 	.word	0x0003707e
   1b2d0:	00037051 	.word	0x00037051
   1b2d4:	00036be5 	.word	0x00036be5
   1b2d8:	00037086 	.word	0x00037086

0001b2dc <net_context_get_state>:
{
   1b2dc:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b2de:	4604      	mov	r4, r0
   1b2e0:	b970      	cbnz	r0, 1b300 <net_context_get_state+0x24>
   1b2e2:	490a      	ldr	r1, [pc, #40]	; (1b30c <net_context_get_state+0x30>)
   1b2e4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1b2e8:	4a09      	ldr	r2, [pc, #36]	; (1b310 <net_context_get_state+0x34>)
   1b2ea:	480a      	ldr	r0, [pc, #40]	; (1b314 <net_context_get_state+0x38>)
   1b2ec:	f013 ffb1 	bl	2f252 <printk>
   1b2f0:	4809      	ldr	r0, [pc, #36]	; (1b318 <net_context_get_state+0x3c>)
   1b2f2:	f013 ffae 	bl	2f252 <printk>
   1b2f6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1b2fa:	4805      	ldr	r0, [pc, #20]	; (1b310 <net_context_get_state+0x34>)
   1b2fc:	f014 faaa 	bl	2f854 <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1b300:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1b304:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1b308:	bd10      	pop	{r4, pc}
   1b30a:	bf00      	nop
   1b30c:	0003707e 	.word	0x0003707e
   1b310:	00037051 	.word	0x00037051
   1b314:	00036be5 	.word	0x00036be5
   1b318:	00037086 	.word	0x00037086

0001b31c <net_context_set_state>:
{
   1b31c:	b538      	push	{r3, r4, r5, lr}
   1b31e:	460d      	mov	r5, r1
	NET_ASSERT(context);
   1b320:	4604      	mov	r4, r0
   1b322:	b970      	cbnz	r0, 1b342 <net_context_set_state+0x26>
   1b324:	490b      	ldr	r1, [pc, #44]	; (1b354 <net_context_set_state+0x38>)
   1b326:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1b32a:	4a0b      	ldr	r2, [pc, #44]	; (1b358 <net_context_set_state+0x3c>)
   1b32c:	480b      	ldr	r0, [pc, #44]	; (1b35c <net_context_set_state+0x40>)
   1b32e:	f013 ff90 	bl	2f252 <printk>
   1b332:	480b      	ldr	r0, [pc, #44]	; (1b360 <net_context_set_state+0x44>)
   1b334:	f013 ff8d 	bl	2f252 <printk>
   1b338:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1b33c:	4806      	ldr	r0, [pc, #24]	; (1b358 <net_context_set_state+0x3c>)
   1b33e:	f014 fa89 	bl	2f854 <assert_post_action>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1b342:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   1b346:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1b34a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   1b34e:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
}
   1b352:	bd38      	pop	{r3, r4, r5, pc}
   1b354:	0003707e 	.word	0x0003707e
   1b358:	00037051 	.word	0x00037051
   1b35c:	00036be5 	.word	0x00036be5
   1b360:	00037086 	.word	0x00037086

0001b364 <net_context_get_iface>:
{
   1b364:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1b366:	4604      	mov	r4, r0
   1b368:	b970      	cbnz	r0, 1b388 <net_context_get_iface+0x24>
   1b36a:	490a      	ldr	r1, [pc, #40]	; (1b394 <net_context_get_iface+0x30>)
   1b36c:	f240 2371 	movw	r3, #625	; 0x271
   1b370:	4a09      	ldr	r2, [pc, #36]	; (1b398 <net_context_get_iface+0x34>)
   1b372:	480a      	ldr	r0, [pc, #40]	; (1b39c <net_context_get_iface+0x38>)
   1b374:	f013 ff6d 	bl	2f252 <printk>
   1b378:	4809      	ldr	r0, [pc, #36]	; (1b3a0 <net_context_get_iface+0x3c>)
   1b37a:	f013 ff6a 	bl	2f252 <printk>
   1b37e:	f240 2171 	movw	r1, #625	; 0x271
   1b382:	4805      	ldr	r0, [pc, #20]	; (1b398 <net_context_get_iface+0x34>)
   1b384:	f014 fa66 	bl	2f854 <assert_post_action>
	return net_if_get_by_index(context->iface);
   1b388:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
}
   1b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   1b390:	f7fe bd42 	b.w	19e18 <net_if_get_by_index>
   1b394:	0003707e 	.word	0x0003707e
   1b398:	00037051 	.word	0x00037051
   1b39c:	00036be5 	.word	0x00036be5
   1b3a0:	00037086 	.word	0x00037086

0001b3a4 <net_context_set_iface.isra.25>:
static inline void net_context_set_iface(struct net_context *context,
   1b3a4:	b538      	push	{r3, r4, r5, lr}
   1b3a6:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   1b3a8:	460c      	mov	r4, r1
   1b3aa:	b971      	cbnz	r1, 1b3ca <net_context_set_iface.isra.25+0x26>
   1b3ac:	4909      	ldr	r1, [pc, #36]	; (1b3d4 <net_context_set_iface.isra.25+0x30>)
   1b3ae:	f240 2381 	movw	r3, #641	; 0x281
   1b3b2:	4a09      	ldr	r2, [pc, #36]	; (1b3d8 <net_context_set_iface.isra.25+0x34>)
   1b3b4:	4809      	ldr	r0, [pc, #36]	; (1b3dc <net_context_set_iface.isra.25+0x38>)
   1b3b6:	f013 ff4c 	bl	2f252 <printk>
   1b3ba:	4809      	ldr	r0, [pc, #36]	; (1b3e0 <net_context_set_iface.isra.25+0x3c>)
   1b3bc:	f013 ff49 	bl	2f252 <printk>
   1b3c0:	f240 2181 	movw	r1, #641	; 0x281
   1b3c4:	4804      	ldr	r0, [pc, #16]	; (1b3d8 <net_context_set_iface.isra.25+0x34>)
   1b3c6:	f014 fa45 	bl	2f854 <assert_post_action>
	context->iface = net_if_get_by_iface(iface);
   1b3ca:	4620      	mov	r0, r4
   1b3cc:	f7fe fd36 	bl	19e3c <net_if_get_by_iface>
   1b3d0:	7028      	strb	r0, [r5, #0]
}
   1b3d2:	bd38      	pop	{r3, r4, r5, pc}
   1b3d4:	00037918 	.word	0x00037918
   1b3d8:	00037051 	.word	0x00037051
   1b3dc:	00036be5 	.word	0x00036be5
   1b3e0:	00037086 	.word	0x00037086

0001b3e4 <tcp_backlog_find.isra.26>:
		addr6->sin6_port = port;
		addr->sa_family = AF_INET6;
	}
}

static int tcp_backlog_find(struct net_pkt *pkt,
   1b3e4:	b570      	push	{r4, r5, r6, lr}
			    int *empty_slot)
{
	int i, empty = -1;

	for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1b3e6:	4d12      	ldr	r5, [pc, #72]	; (1b430 <tcp_backlog_find.isra.26+0x4c>)
static int tcp_backlog_find(struct net_pkt *pkt,
   1b3e8:	461e      	mov	r6, r3
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1b3ea:	682c      	ldr	r4, [r5, #0]
   1b3ec:	b144      	cbz	r4, 1b400 <tcp_backlog_find.isra.26+0x1c>
   1b3ee:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
			empty = i;
			continue;
		}

		if (net_pkt_family(pkt) != tcp_backlog[i].remote.sa_family) {
   1b3f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1b3f4:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1b3f8:	4283      	cmp	r3, r0
   1b3fa:	d006      	beq.n	1b40a <tcp_backlog_find.isra.26+0x26>
	int i, empty = -1;
   1b3fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		}

		return i;
	}

	if (empty_slot) {
   1b400:	b106      	cbz	r6, 1b404 <tcp_backlog_find.isra.26+0x20>
		*empty_slot = empty;
   1b402:	6034      	str	r4, [r6, #0]
	}

	return -EADDRNOTAVAIL;
   1b404:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b408:	e002      	b.n	1b410 <tcp_backlog_find.isra.26+0x2c>
		if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b40a:	2801      	cmp	r0, #1
   1b40c:	d001      	beq.n	1b412 <tcp_backlog_find.isra.26+0x2e>
	return -EADDRNOTAVAIL;
   1b40e:	2000      	movs	r0, #0
}
   1b410:	bd70      	pop	{r4, r5, r6, pc}
			if (net_sin(&tcp_backlog[i].remote)->sin_port !=
   1b412:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
   1b414:	8813      	ldrh	r3, [r2, #0]
   1b416:	4298      	cmp	r0, r3
   1b418:	d1f0      	bne.n	1b3fc <tcp_backlog_find.isra.26+0x18>
				   &ip_hdr->ipv4->src,
   1b41a:	6809      	ldr	r1, [r1, #0]
			if (memcmp(&net_sin(&tcp_backlog[i].remote)->sin_addr,
   1b41c:	2204      	movs	r2, #4
   1b41e:	310c      	adds	r1, #12
   1b420:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1b424:	f019 faee 	bl	34a04 <memcmp>
   1b428:	2800      	cmp	r0, #0
   1b42a:	d0f0      	beq.n	1b40e <tcp_backlog_find.isra.26+0x2a>
   1b42c:	e7e6      	b.n	1b3fc <tcp_backlog_find.isra.26+0x18>
   1b42e:	bf00      	nop
   1b430:	20021c9c 	.word	0x20021c9c

0001b434 <prepare_segment.isra.21>:
static int prepare_segment(struct net_tcp *tcp,
   1b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b438:	b08d      	sub	sp, #52	; 0x34
   1b43a:	9303      	str	r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1b43c:	ab07      	add	r3, sp, #28
   1b43e:	9305      	str	r3, [sp, #20]
   1b440:	2314      	movs	r3, #20
static int prepare_segment(struct net_tcp *tcp,
   1b442:	460e      	mov	r6, r1
   1b444:	4614      	mov	r4, r2
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1b446:	9306      	str	r3, [sp, #24]
	NET_ASSERT(context);
   1b448:	4605      	mov	r5, r0
   1b44a:	b970      	cbnz	r0, 1b46a <prepare_segment.isra.21+0x36>
   1b44c:	4974      	ldr	r1, [pc, #464]	; (1b620 <prepare_segment.isra.21+0x1ec>)
   1b44e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   1b452:	4a74      	ldr	r2, [pc, #464]	; (1b624 <prepare_segment.isra.21+0x1f0>)
   1b454:	4874      	ldr	r0, [pc, #464]	; (1b628 <prepare_segment.isra.21+0x1f4>)
   1b456:	f013 fefc 	bl	2f252 <printk>
   1b45a:	4874      	ldr	r0, [pc, #464]	; (1b62c <prepare_segment.isra.21+0x1f8>)
   1b45c:	f013 fef9 	bl	2f252 <printk>
   1b460:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   1b464:	486f      	ldr	r0, [pc, #444]	; (1b624 <prepare_segment.isra.21+0x1f0>)
   1b466:	f014 f9f5 	bl	2f854 <assert_post_action>
	if (pkt) {
   1b46a:	2c00      	cmp	r4, #0
   1b46c:	f000 8095 	beq.w	1b59a <prepare_segment.isra.21+0x166>
		pkt->buffer = NULL;
   1b470:	2300      	movs	r3, #0
		tail = pkt->buffer;
   1b472:	f8d4 8010 	ldr.w	r8, [r4, #16]
		pkt->buffer = NULL;
   1b476:	6123      	str	r3, [r4, #16]
		status = net_pkt_alloc_buffer(pkt, segment->optlen,
   1b478:	2206      	movs	r2, #6
   1b47a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1b47e:	7af1      	ldrb	r1, [r6, #11]
   1b480:	4620      	mov	r0, r4
   1b482:	f7ff fb89 	bl	1ab98 <net_pkt_alloc_buffer>
		if (status) {
   1b486:	4607      	mov	r7, r0
   1b488:	2800      	cmp	r0, #0
   1b48a:	f040 80ab 	bne.w	1b5e4 <prepare_segment.isra.21+0x1b0>
		pkt_allocated = false;
   1b48e:	4681      	mov	r9, r0
	pkt->tcp_first_msg = is_1st;
   1b490:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1b494:	f043 0301 	orr.w	r3, r3, #1
   1b498:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	pkt->sent_or_eof = sent;
   1b49c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1b4a0:	f36f 0341 	bfc	r3, #1, #1
   1b4a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return pkt->family;
   1b4a8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b4ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b4b0:	2b01      	cmp	r3, #1
   1b4b2:	f040 80ac 	bne.w	1b60e <prepare_segment.isra.21+0x1da>
				net_sin_ptr(segment->src_addr)->sin_addr,
   1b4b6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
		status = net_context_create_ipv4_new(context, pkt,
   1b4ba:	4621      	mov	r1, r4
   1b4bc:	3304      	adds	r3, #4
   1b4be:	6852      	ldr	r2, [r2, #4]
   1b4c0:	4628      	mov	r0, r5
   1b4c2:	f7ff f859 	bl	1a578 <net_context_create_ipv4_new>
		if (status < 0) {
   1b4c6:	1e07      	subs	r7, r0, #0
   1b4c8:	f2c0 8089 	blt.w	1b5de <prepare_segment.isra.21+0x1aa>
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b4cc:	6973      	ldr	r3, [r6, #20]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b4ce:	a905      	add	r1, sp, #20
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b4d0:	885b      	ldrh	r3, [r3, #2]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b4d2:	4620      	mov	r0, r4
		src_port = ((struct sockaddr_in_ptr *)&context->local)->
   1b4d4:	f8b5 b01e 	ldrh.w	fp, [r5, #30]
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1b4d8:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1b4da:	f016 fc25 	bl	31d28 <net_pkt_get_data>
	if (!tcp_hdr) {
   1b4de:	4605      	mov	r5, r0
   1b4e0:	2800      	cmp	r0, #0
   1b4e2:	f000 8097 	beq.w	1b614 <prepare_segment.isra.21+0x1e0>
	if (segment->options && segment->optlen) {
   1b4e6:	68f3      	ldr	r3, [r6, #12]
   1b4e8:	2b00      	cmp	r3, #0
   1b4ea:	d06f      	beq.n	1b5cc <prepare_segment.isra.21+0x198>
   1b4ec:	f896 a00b 	ldrb.w	sl, [r6, #11]
   1b4f0:	f1ba 0f00 	cmp.w	sl, #0
   1b4f4:	d007      	beq.n	1b506 <prepare_segment.isra.21+0xd2>
		if ((segment->optlen & 0x3u) != 0u) {
   1b4f6:	f01a 0f03 	tst.w	sl, #3
   1b4fa:	d004      	beq.n	1b506 <prepare_segment.isra.21+0xd2>
			optlen = (segment->optlen & 0xfffCu) + 4u;
   1b4fc:	f02a 0303 	bic.w	r3, sl, #3
   1b500:	3304      	adds	r3, #4
   1b502:	fa5f fa83 	uxtb.w	sl, r3
__ssp_bos_icheck3(memset, void *, int)
   1b506:	2210      	movs	r2, #16
   1b508:	2100      	movs	r1, #0
   1b50a:	1d28      	adds	r0, r5, #4
   1b50c:	f019 fac2 	bl	34a94 <memset>
	sys_put_be32(segment->seq, tcp_hdr->seq);
   1b510:	6832      	ldr	r2, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   1b512:	9b02      	ldr	r3, [sp, #8]
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(u32_t val, u8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
   1b514:	0c11      	lsrs	r1, r2, #16
	dst[1] = val;
   1b516:	7169      	strb	r1, [r5, #5]
	dst[0] = val >> 8;
   1b518:	0a08      	lsrs	r0, r1, #8
   1b51a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1b51e:	7128      	strb	r0, [r5, #4]
   1b520:	71a9      	strb	r1, [r5, #6]
	dst[1] = val;
   1b522:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   1b524:	6872      	ldr	r2, [r6, #4]
	tcp_hdr->src_port = src_port;
   1b526:	f8a5 b000 	strh.w	fp, [r5]
	sys_put_be16(val >> 16, dst);
   1b52a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val >> 8;
   1b52c:	0a08      	lsrs	r0, r1, #8
	dst[1] = val;
   1b52e:	7269      	strb	r1, [r5, #9]
   1b530:	72ea      	strb	r2, [r5, #11]
	dst[0] = val >> 8;
   1b532:	f3c2 2107 	ubfx	r1, r2, #8, #8
	tcp_hdr->offset   = (NET_TCPH_LEN + optlen) << 2;
   1b536:	f10a 0214 	add.w	r2, sl, #20
   1b53a:	0092      	lsls	r2, r2, #2
   1b53c:	7228      	strb	r0, [r5, #8]
   1b53e:	72a9      	strb	r1, [r5, #10]
   1b540:	732a      	strb	r2, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   1b542:	806b      	strh	r3, [r5, #2]
	tcp_hdr->flags    = segment->flags;
   1b544:	7ab2      	ldrb	r2, [r6, #10]
	net_pkt_set_data(pkt, &tcp_access);
   1b546:	4620      	mov	r0, r4
	tcp_hdr->flags    = segment->flags;
   1b548:	736a      	strb	r2, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   1b54a:	8932      	ldrh	r2, [r6, #8]
   1b54c:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   1b54e:	73ea      	strb	r2, [r5, #15]
	tcp_hdr->chksum   = 0U;
   1b550:	2200      	movs	r2, #0
	dst[0] = val >> 8;
   1b552:	73a9      	strb	r1, [r5, #14]
   1b554:	742a      	strb	r2, [r5, #16]
   1b556:	746a      	strb	r2, [r5, #17]
	tcp_hdr->urg[0]   = 0U;
   1b558:	74aa      	strb	r2, [r5, #18]
	tcp_hdr->urg[1]   = 0U;
   1b55a:	74ea      	strb	r2, [r5, #19]
	net_pkt_set_data(pkt, &tcp_access);
   1b55c:	a905      	add	r1, sp, #20
   1b55e:	f016 fc04 	bl	31d6a <net_pkt_set_data>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1b562:	f1ba 0f00 	cmp.w	sl, #0
   1b566:	d133      	bne.n	1b5d0 <prepare_segment.isra.21+0x19c>
	if (tail) {
   1b568:	f1b8 0f00 	cmp.w	r8, #0
   1b56c:	d140      	bne.n	1b5f0 <prepare_segment.isra.21+0x1bc>
	net_pkt_cursor_init(pkt);
   1b56e:	4620      	mov	r0, r4
   1b570:	f016 f9fc 	bl	3196c <net_pkt_cursor_init>
   1b574:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1b578:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b57c:	2b01      	cmp	r3, #1
   1b57e:	d13c      	bne.n	1b5fa <prepare_segment.isra.21+0x1c6>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
   1b580:	2106      	movs	r1, #6
   1b582:	4620      	mov	r0, r4
   1b584:	f016 fd59 	bl	3203a <net_ipv4_finalize>
	if (status < 0) {
   1b588:	1e07      	subs	r7, r0, #0
   1b58a:	da39      	bge.n	1b600 <prepare_segment.isra.21+0x1cc>
		if (pkt_allocated) {
   1b58c:	f1b9 0f00 	cmp.w	r9, #0
   1b590:	d039      	beq.n	1b606 <prepare_segment.isra.21+0x1d2>
		net_pkt_unref(pkt);
   1b592:	4620      	mov	r0, r4
   1b594:	f016 f986 	bl	318a4 <net_pkt_unref>
   1b598:	e035      	b.n	1b606 <prepare_segment.isra.21+0x1d2>
		pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context),
   1b59a:	4628      	mov	r0, r5
   1b59c:	f7ff fee2 	bl	1b364 <net_context_get_iface>
   1b5a0:	4607      	mov	r7, r0
   1b5a2:	4628      	mov	r0, r5
   1b5a4:	f896 800b 	ldrb.w	r8, [r6, #11]
   1b5a8:	f7ff fe78 	bl	1b29c <net_context_get_family>
   1b5ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1b5b0:	4602      	mov	r2, r0
   1b5b2:	9300      	str	r3, [sp, #0]
   1b5b4:	4641      	mov	r1, r8
   1b5b6:	2306      	movs	r3, #6
   1b5b8:	4638      	mov	r0, r7
   1b5ba:	f7ff fbaf 	bl	1ad1c <net_pkt_alloc_with_buffer>
		if (!pkt) {
   1b5be:	b360      	cbz	r0, 1b61a <prepare_segment.isra.21+0x1e6>
	struct net_buf *tail = NULL;
   1b5c0:	46a0      	mov	r8, r4
	pkt->context = ctx;
   1b5c2:	61c5      	str	r5, [r0, #28]
   1b5c4:	4604      	mov	r4, r0
		pkt_allocated = true;
   1b5c6:	f04f 0901 	mov.w	r9, #1
   1b5ca:	e761      	b.n	1b490 <prepare_segment.isra.21+0x5c>
	u8_t optlen = 0U;
   1b5cc:	469a      	mov	sl, r3
   1b5ce:	e79a      	b.n	1b506 <prepare_segment.isra.21+0xd2>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1b5d0:	7af2      	ldrb	r2, [r6, #11]
   1b5d2:	68f1      	ldr	r1, [r6, #12]
   1b5d4:	4620      	mov	r0, r4
   1b5d6:	f016 fb8c 	bl	31cf2 <net_pkt_write>
   1b5da:	2800      	cmp	r0, #0
   1b5dc:	d0c4      	beq.n	1b568 <prepare_segment.isra.21+0x134>
	if (pkt_allocated) {
   1b5de:	f1b9 0f00 	cmp.w	r9, #0
   1b5e2:	d1d6      	bne.n	1b592 <prepare_segment.isra.21+0x15e>
		net_buf_unref(pkt->buffer);
   1b5e4:	6920      	ldr	r0, [r4, #16]
   1b5e6:	f7fe f925 	bl	19834 <net_buf_unref>
		pkt->buffer = tail;
   1b5ea:	f8c4 8010 	str.w	r8, [r4, #16]
   1b5ee:	e00a      	b.n	1b606 <prepare_segment.isra.21+0x1d2>
		net_pkt_append_buffer(pkt, tail);
   1b5f0:	4641      	mov	r1, r8
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f016 f9ef 	bl	319d6 <net_pkt_append_buffer>
   1b5f8:	e7b9      	b.n	1b56e <prepare_segment.isra.21+0x13a>
	return -EINVAL;
   1b5fa:	f06f 0715 	mvn.w	r7, #21
   1b5fe:	e7c5      	b.n	1b58c <prepare_segment.isra.21+0x158>
	return 0;
   1b600:	2700      	movs	r7, #0
	*out_pkt = pkt;
   1b602:	9b03      	ldr	r3, [sp, #12]
   1b604:	601c      	str	r4, [r3, #0]
}
   1b606:	4638      	mov	r0, r7
   1b608:	b00d      	add	sp, #52	; 0x34
   1b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = -EINVAL;
   1b60e:	f06f 0715 	mvn.w	r7, #21
   1b612:	e7e4      	b.n	1b5de <prepare_segment.isra.21+0x1aa>
		status = -ENOBUFS;
   1b614:	f06f 0768 	mvn.w	r7, #104	; 0x68
   1b618:	e7e1      	b.n	1b5de <prepare_segment.isra.21+0x1aa>
			return -ENOMEM;
   1b61a:	f06f 070b 	mvn.w	r7, #11
   1b61e:	e7f2      	b.n	1b606 <prepare_segment.isra.21+0x1d2>
   1b620:	0003707e 	.word	0x0003707e
   1b624:	00037bad 	.word	0x00037bad
   1b628:	00036be5 	.word	0x00036be5
   1b62c:	00037086 	.word	0x00037086

0001b630 <net_tcp_alloc>:
{
   1b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b632:	4607      	mov	r7, r0
	__asm__ volatile(
   1b634:	f04f 0320 	mov.w	r3, #32
   1b638:	f3ef 8411 	mrs	r4, BASEPRI
   1b63c:	f383 8811 	msr	BASEPRI, r3
   1b640:	f3bf 8f6f 	isb	sy
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1b644:	4a26      	ldr	r2, [pc, #152]	; (1b6e0 <net_tcp_alloc+0xb0>)
   1b646:	2300      	movs	r3, #0
   1b648:	4616      	mov	r6, r2
		if (!net_tcp_is_used(&tcp_context[i])) {
   1b64a:	4610      	mov	r0, r2
   1b64c:	f016 fdf9 	bl	32242 <net_tcp_is_used>
   1b650:	2800      	cmp	r0, #0
   1b652:	d13c      	bne.n	1b6ce <net_tcp_alloc+0x9e>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   1b654:	22c0      	movs	r2, #192	; 0xc0
   1b656:	fb02 6203 	mla	r2, r2, r3, r6
   1b65a:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   1b65e:	f041 0120 	orr.w	r1, r1, #32
   1b662:	f8a2 10bc 	strh.w	r1, [r2, #188]	; 0xbc
	__asm__ volatile(
   1b666:	f384 8811 	msr	BASEPRI, r4
   1b66a:	f3bf 8f6f 	isb	sy
	if (i >= NET_MAX_TCP_CONTEXT) {
   1b66e:	2b06      	cmp	r3, #6
   1b670:	d033      	beq.n	1b6da <net_tcp_alloc+0xaa>
	(void)memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   1b672:	22c0      	movs	r2, #192	; 0xc0
   1b674:	fb02 f403 	mul.w	r4, r2, r3
   1b678:	1935      	adds	r5, r6, r4
   1b67a:	2100      	movs	r1, #0
   1b67c:	4628      	mov	r0, r5
   1b67e:	f019 fa09 	bl	34a94 <memset>
	tcp_context[i].state = NET_TCP_CLOSED;
   1b682:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b686:	4432      	add	r2, r6
	tcp_context[i].flags = NET_TCP_IN_USE;
   1b688:	6853      	ldr	r3, [r2, #4]
   1b68a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
   1b68e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   1b692:	f043 0320 	orr.w	r3, r3, #32
   1b696:	6053      	str	r3, [r2, #4]
	tcp_context[i].context = context;
   1b698:	5137      	str	r7, [r6, r4]
 * @return Return a random TCP sequence number
 */
static inline u32_t tcp_init_isn(void)
{
	/* Randomise initial seq number */
	return sys_rand32_get();
   1b69a:	f000 fffd 	bl	1c698 <sys_rand32_get>
	tcp_context[i].accept_cb = NULL;
   1b69e:	2700      	movs	r7, #0
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1b6a0:	4b10      	ldr	r3, [pc, #64]	; (1b6e4 <net_tcp_alloc+0xb4>)
	tcp_context[i].send_seq = tcp_init_isn();
   1b6a2:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1b6a6:	f104 0048 	add.w	r0, r4, #72	; 0x48
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1b6aa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	tcp_context[i].accept_cb = NULL;
   1b6ae:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1b6b2:	490d      	ldr	r1, [pc, #52]	; (1b6e8 <net_tcp_alloc+0xb8>)
   1b6b4:	4430      	add	r0, r6
   1b6b6:	f019 f8d9 	bl	3486c <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   1b6ba:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b6c2:	4639      	mov	r1, r7
   1b6c4:	4430      	add	r0, r6
   1b6c6:	f019 f852 	bl	3476e <z_impl_k_sem_init>
}
   1b6ca:	4628      	mov	r0, r5
   1b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1b6ce:	3301      	adds	r3, #1
   1b6d0:	2b06      	cmp	r3, #6
   1b6d2:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
   1b6d6:	d1b8      	bne.n	1b64a <net_tcp_alloc+0x1a>
   1b6d8:	e7c5      	b.n	1b666 <net_tcp_alloc+0x36>
		return NULL;
   1b6da:	2500      	movs	r5, #0
   1b6dc:	e7f5      	b.n	1b6ca <net_tcp_alloc+0x9a>
   1b6de:	bf00      	nop
   1b6e0:	20021cd4 	.word	0x20021cd4
   1b6e4:	02180500 	.word	0x02180500
   1b6e8:	00032501 	.word	0x00032501

0001b6ec <net_tcp_change_state>:
{
   1b6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b6ee:	460d      	mov	r5, r1
	NET_ASSERT(tcp);
   1b6f0:	4604      	mov	r4, r0
   1b6f2:	b970      	cbnz	r0, 1b712 <net_tcp_change_state+0x26>
   1b6f4:	4922      	ldr	r1, [pc, #136]	; (1b780 <net_tcp_change_state+0x94>)
   1b6f6:	f240 5319 	movw	r3, #1305	; 0x519
   1b6fa:	4a22      	ldr	r2, [pc, #136]	; (1b784 <net_tcp_change_state+0x98>)
   1b6fc:	4822      	ldr	r0, [pc, #136]	; (1b788 <net_tcp_change_state+0x9c>)
   1b6fe:	f013 fda8 	bl	2f252 <printk>
   1b702:	4822      	ldr	r0, [pc, #136]	; (1b78c <net_tcp_change_state+0xa0>)
   1b704:	f013 fda5 	bl	2f252 <printk>
   1b708:	f240 5119 	movw	r1, #1305	; 0x519
   1b70c:	481d      	ldr	r0, [pc, #116]	; (1b784 <net_tcp_change_state+0x98>)
   1b70e:	f014 f8a1 	bl	2f854 <assert_post_action>
 * @param tcp TCP context
 */
#if defined(CONFIG_NET_NATIVE_TCP)
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1b712:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) == new_state) {
   1b716:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b71a:	42ab      	cmp	r3, r5
   1b71c:	d02d      	beq.n	1b77a <net_tcp_change_state+0x8e>
	NET_ASSERT(new_state >= NET_TCP_CLOSED &&
   1b71e:	2d0a      	cmp	r5, #10
   1b720:	d90e      	bls.n	1b740 <net_tcp_change_state+0x54>
   1b722:	491b      	ldr	r1, [pc, #108]	; (1b790 <net_tcp_change_state+0xa4>)
   1b724:	f44f 63a4 	mov.w	r3, #1312	; 0x520
   1b728:	4a16      	ldr	r2, [pc, #88]	; (1b784 <net_tcp_change_state+0x98>)
   1b72a:	4817      	ldr	r0, [pc, #92]	; (1b788 <net_tcp_change_state+0x9c>)
   1b72c:	f013 fd91 	bl	2f252 <printk>
   1b730:	4816      	ldr	r0, [pc, #88]	; (1b78c <net_tcp_change_state+0xa0>)
   1b732:	f013 fd8e 	bl	2f252 <printk>
   1b736:	f44f 61a4 	mov.w	r1, #1312	; 0x520
   1b73a:	4812      	ldr	r0, [pc, #72]	; (1b784 <net_tcp_change_state+0x98>)
   1b73c:	f014 f88a 	bl	2f854 <assert_post_action>
	tcp->state = new_state;
   1b740:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1b744:	f005 050f 	and.w	r5, r5, #15
   1b748:	f365 3350 	bfi	r3, r5, #13, #4
   1b74c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   1b750:	b99d      	cbnz	r5, 1b77a <net_tcp_change_state+0x8e>
	if (!tcp->context) {
   1b752:	6823      	ldr	r3, [r4, #0]
   1b754:	b18b      	cbz	r3, 1b77a <net_tcp_change_state+0x8e>
	if (tcp->context->conn_handler) {
   1b756:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1b758:	b118      	cbz	r0, 1b762 <net_tcp_change_state+0x76>
	return net_conn_unregister(handle);
   1b75a:	f7ff fc5f 	bl	1b01c <net_conn_unregister>
		tcp->context->conn_handler = NULL;
   1b75e:	6823      	ldr	r3, [r4, #0]
   1b760:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (tcp->accept_cb) {
   1b762:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   1b766:	b145      	cbz	r5, 1b77a <net_tcp_change_state+0x8e>
		tcp->accept_cb(tcp->context,
   1b768:	6820      	ldr	r0, [r4, #0]
   1b76a:	2208      	movs	r2, #8
   1b76c:	4601      	mov	r1, r0
   1b76e:	f851 3b24 	ldr.w	r3, [r1], #36
   1b772:	9300      	str	r3, [sp, #0]
   1b774:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   1b778:	47a8      	blx	r5
}
   1b77a:	b003      	add	sp, #12
   1b77c:	bd30      	pop	{r4, r5, pc}
   1b77e:	bf00      	nop
   1b780:	00037be8 	.word	0x00037be8
   1b784:	00037bad 	.word	0x00037bad
   1b788:	00036be5 	.word	0x00036be5
   1b78c:	00037086 	.word	0x00037086
   1b790:	00037b53 	.word	0x00037b53

0001b794 <net_tcp_release>:
{
   1b794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   1b798:	4604      	mov	r4, r0
   1b79a:	2800      	cmp	r0, #0
   1b79c:	d074      	beq.n	1b888 <net_tcp_release+0xf4>
   1b79e:	4b3c      	ldr	r3, [pc, #240]	; (1b890 <net_tcp_release+0xfc>)
   1b7a0:	4298      	cmp	r0, r3
   1b7a2:	d371      	bcc.n	1b888 <net_tcp_release+0xf4>
   1b7a4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
   1b7a8:	4298      	cmp	r0, r3
   1b7aa:	d26d      	bcs.n	1b888 <net_tcp_release+0xf4>
	k_delayed_work_cancel(&tcp->retry_timer);
   1b7ac:	3048      	adds	r0, #72	; 0x48
   1b7ae:	f00f fbc5 	bl	2af3c <k_delayed_work_cancel>
	sem->count = 0U;
   1b7b2:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->ack_timer);
   1b7b4:	f104 0008 	add.w	r0, r4, #8
   1b7b8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   1b7bc:	f00f fbbe 	bl	2af3c <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   1b7c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b7c4:	f00f fbba 	bl	2af3c <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   1b7c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1b7cc:	f00f fbb6 	bl	2af3c <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1b7d0:	4629      	mov	r1, r5
   1b7d2:	4620      	mov	r0, r4
   1b7d4:	f7ff ff8a 	bl	1b6ec <net_tcp_change_state>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b7d8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b7dc:	b1d3      	cbz	r3, 1b814 <net_tcp_release+0x80>
   1b7de:	f1b3 0538 	subs.w	r5, r3, #56	; 0x38
   1b7e2:	d017      	beq.n	1b814 <net_tcp_release+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b7e4:	681e      	ldr	r6, [r3, #0]
   1b7e6:	b106      	cbz	r6, 1b7ea <net_tcp_release+0x56>
   1b7e8:	3e38      	subs	r6, #56	; 0x38
	parent->next = child;
   1b7ea:	f04f 0800 	mov.w	r8, #0
Z_GENLIST_REMOVE(slist, snode)
   1b7ee:	462b      	mov	r3, r5
   1b7f0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   1b7f4:	f853 2f38 	ldr.w	r2, [r3, #56]!
		if (atomic_get(&pkt->atomic_ref) == 0) {
   1b7f8:	f105 0724 	add.w	r7, r5, #36	; 0x24
   1b7fc:	4299      	cmp	r1, r3
	list->head = node;
   1b7fe:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	list->tail = node;
   1b802:	bf08      	it	eq
   1b804:	f8c4 208c 	streq.w	r2, [r4, #140]	; 0x8c
	parent->next = child;
   1b808:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
   1b80c:	e8d7 3faf 	lda	r3, [r7]
   1b810:	b9d3      	cbnz	r3, 1b848 <net_tcp_release+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b812:	bb9e      	cbnz	r6, 1b87c <net_tcp_release+0xe8>
	tcp->context = NULL;
   1b814:	2000      	movs	r0, #0
   1b816:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1b818:	f04f 0320 	mov.w	r3, #32
   1b81c:	f3ef 8111 	mrs	r1, BASEPRI
   1b820:	f383 8811 	msr	BASEPRI, r3
   1b824:	f3bf 8f6f 	isb	sy
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   1b828:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   1b82c:	f3c3 1247 	ubfx	r2, r3, #5, #8
   1b830:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   1b834:	f362 134c 	bfi	r3, r2, #5, #8
   1b838:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile(
   1b83c:	f381 8811 	msr	BASEPRI, r1
   1b840:	f3bf 8f6f 	isb	sy
}
   1b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_pkt_unref(pkt);
   1b848:	4628      	mov	r0, r5
   1b84a:	f016 f82b 	bl	318a4 <net_pkt_unref>
   1b84e:	e8d7 3faf 	lda	r3, [r7]
		if (refcount > 0) {
   1b852:	2b00      	cmp	r3, #0
   1b854:	461f      	mov	r7, r3
   1b856:	dddc      	ble.n	1b812 <net_tcp_release+0x7e>
   1b858:	f105 0208 	add.w	r2, r5, #8
   1b85c:	e8d2 2faf 	lda	r2, [r2]
			if (k_work_pending(net_pkt_work(pkt)) ||
   1b860:	07d1      	lsls	r1, r2, #31
   1b862:	d403      	bmi.n	1b86c <net_tcp_release+0xd8>
	return pkt->sent_or_eof;
   1b864:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
   1b868:	0792      	lsls	r2, r2, #30
   1b86a:	d500      	bpl.n	1b86e <net_tcp_release+0xda>
				refcount--;
   1b86c:	1e5f      	subs	r7, r3, #1
			while (refcount) {
   1b86e:	2f00      	cmp	r7, #0
   1b870:	d0cf      	beq.n	1b812 <net_tcp_release+0x7e>
				net_pkt_unref(pkt);
   1b872:	4628      	mov	r0, r5
   1b874:	f016 f816 	bl	318a4 <net_pkt_unref>
				refcount--;
   1b878:	3f01      	subs	r7, #1
   1b87a:	e7f8      	b.n	1b86e <net_tcp_release+0xda>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b87c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1b87e:	b103      	cbz	r3, 1b882 <net_tcp_release+0xee>
   1b880:	3b38      	subs	r3, #56	; 0x38
{
   1b882:	4635      	mov	r5, r6
   1b884:	461e      	mov	r6, r3
   1b886:	e7b2      	b.n	1b7ee <net_tcp_release+0x5a>
		return -EINVAL;
   1b888:	f06f 0015 	mvn.w	r0, #21
   1b88c:	e7da      	b.n	1b844 <net_tcp_release+0xb0>
   1b88e:	bf00      	nop
   1b890:	20021cd4 	.word	0x20021cd4

0001b894 <net_tcp_queue_data>:
{
   1b894:	b570      	push	{r4, r5, r6, lr}
   1b896:	4604      	mov	r4, r0
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1b898:	2500      	movs	r5, #0
   1b89a:	b086      	sub	sp, #24
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   1b89c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	size_t data_len = net_pkt_get_len(pkt);
   1b89e:	690b      	ldr	r3, [r1, #16]
{
   1b8a0:	9105      	str	r1, [sp, #20]

	while (buf) {
   1b8a2:	bba3      	cbnz	r3, 1b90e <net_tcp_queue_data+0x7a>
	if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1b8a4:	4620      	mov	r0, r4
   1b8a6:	f7ff fd19 	bl	1b2dc <net_context_get_state>
   1b8aa:	2802      	cmp	r0, #2
   1b8ac:	d133      	bne.n	1b916 <net_tcp_queue_data+0x82>
	NET_ASSERT(context->tcp);
   1b8ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b8b0:	b973      	cbnz	r3, 1b8d0 <net_tcp_queue_data+0x3c>
   1b8b2:	491c      	ldr	r1, [pc, #112]	; (1b924 <net_tcp_queue_data+0x90>)
   1b8b4:	f240 3366 	movw	r3, #870	; 0x366
   1b8b8:	4a1b      	ldr	r2, [pc, #108]	; (1b928 <net_tcp_queue_data+0x94>)
   1b8ba:	481c      	ldr	r0, [pc, #112]	; (1b92c <net_tcp_queue_data+0x98>)
   1b8bc:	f013 fcc9 	bl	2f252 <printk>
   1b8c0:	481b      	ldr	r0, [pc, #108]	; (1b930 <net_tcp_queue_data+0x9c>)
   1b8c2:	f013 fcc6 	bl	2f252 <printk>
   1b8c6:	f240 3166 	movw	r1, #870	; 0x366
   1b8ca:	4817      	ldr	r0, [pc, #92]	; (1b928 <net_tcp_queue_data+0x94>)
   1b8cc:	f013 ffc2 	bl	2f854 <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1b8d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b8d2:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   1b8d6:	f3c3 1347 	ubfx	r3, r3, #5, #8
   1b8da:	f013 0308 	ands.w	r3, r3, #8
   1b8de:	d11d      	bne.n	1b91c <net_tcp_queue_data+0x88>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1b8e0:	aa05      	add	r2, sp, #20
				      NULL, 0, NULL, &conn->remote_addr, &pkt);
   1b8e2:	3604      	adds	r6, #4
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1b8e4:	9202      	str	r2, [sp, #8]
   1b8e6:	e9cd 3600 	strd	r3, r6, [sp]
   1b8ea:	461a      	mov	r2, r3
   1b8ec:	2118      	movs	r1, #24
   1b8ee:	f016 fe94 	bl	3261a <net_tcp_prepare_segment>
	if (ret) {
   1b8f2:	b950      	cbnz	r0, 1b90a <net_tcp_queue_data+0x76>
	context->tcp->send_seq += data_len;
   1b8f4:	4620      	mov	r0, r4
   1b8f6:	f850 2f3c 	ldr.w	r2, [r0, #60]!
	return net_tcp_queue_pkt(context, pkt);
   1b8fa:	9905      	ldr	r1, [sp, #20]
	context->tcp->send_seq += data_len;
   1b8fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b900:	441d      	add	r5, r3
   1b902:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
	return net_tcp_queue_pkt(context, pkt);
   1b906:	f016 fca1 	bl	3224c <net_tcp_queue_pkt.isra.22>
}
   1b90a:	b006      	add	sp, #24
   1b90c:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   1b90e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b910:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b912:	4415      	add	r5, r2
		buf = buf->frags;
   1b914:	e7c5      	b.n	1b8a2 <net_tcp_queue_data+0xe>
		return -ENOTCONN;
   1b916:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b91a:	e7f6      	b.n	1b90a <net_tcp_queue_data+0x76>
		return -ESHUTDOWN;
   1b91c:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1b920:	e7f3      	b.n	1b90a <net_tcp_queue_data+0x76>
   1b922:	bf00      	nop
   1b924:	00037bdf 	.word	0x00037bdf
   1b928:	00037bad 	.word	0x00037bad
   1b92c:	00036be5 	.word	0x00036be5
   1b930:	00037086 	.word	0x00037086

0001b934 <tcp_established>:
 *				    union net_ip_header *ip_hdr,
 *				    union net_proto_header *proto_hdr,
 *				    struct net_pkt *pkt,
 *                                  void *user_data)
 */
NET_CONN_CB(tcp_established)
   1b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b938:	469b      	mov	fp, r3
   1b93a:	b087      	sub	sp, #28
   1b93c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1b93e:	4681      	mov	r9, r0
   1b940:	4620      	mov	r0, r4
   1b942:	4688      	mov	r8, r1
   1b944:	9204      	str	r2, [sp, #16]
   1b946:	f015 fe0c 	bl	31562 <net_context_ref>
	enum net_verdict ret = NET_OK;
	bool do_not_send_ack = false;
	u8_t tcp_flags;
	u16_t data_len;

	k_mutex_lock(&context->lock, K_FOREVER);
   1b94a:	f104 0308 	add.w	r3, r4, #8
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
   1b94e:	f8db 7000 	ldr.w	r7, [fp]
	k_mutex_lock(&context->lock, K_FOREVER);
   1b952:	9303      	str	r3, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1b954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b958:	9803      	ldr	r0, [sp, #12]
   1b95a:	f00d faa9 	bl	28eb0 <z_impl_k_mutex_lock>

	NET_ASSERT(context && context->tcp);
   1b95e:	b10c      	cbz	r4, 1b964 <tcp_established+0x30>
   1b960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b962:	b973      	cbnz	r3, 1b982 <tcp_established+0x4e>
   1b964:	497b      	ldr	r1, [pc, #492]	; (1bb54 <tcp_established+0x220>)
   1b966:	f640 0304 	movw	r3, #2052	; 0x804
   1b96a:	4a7b      	ldr	r2, [pc, #492]	; (1bb58 <tcp_established+0x224>)
   1b96c:	487b      	ldr	r0, [pc, #492]	; (1bb5c <tcp_established+0x228>)
   1b96e:	f013 fc70 	bl	2f252 <printk>
   1b972:	487b      	ldr	r0, [pc, #492]	; (1bb60 <tcp_established+0x22c>)
   1b974:	f013 fc6d 	bl	2f252 <printk>
   1b978:	f640 0104 	movw	r1, #2052	; 0x804
   1b97c:	4876      	ldr	r0, [pc, #472]	; (1bb58 <tcp_established+0x224>)
   1b97e:	f013 ff69 	bl	2f854 <assert_post_action>

	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1b982:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1b986:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
   1b98a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1b98e:	2b03      	cmp	r3, #3
   1b990:	d80a      	bhi.n	1b9a8 <tcp_established+0x74>
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);

		ret = NET_DROP;
   1b992:	2602      	movs	r6, #2
	return z_impl_k_mutex_unlock(mutex);
   1b994:	9803      	ldr	r0, [sp, #12]
   1b996:	f00d fb69 	bl	2906c <z_impl_k_mutex_unlock>
NET_CONN_CB(tcp_established)
   1b99a:	4620      	mov	r0, r4
   1b99c:	f015 fdeb 	bl	31576 <net_context_unref>
   1b9a0:	4630      	mov	r0, r6
   1b9a2:	b007      	add	sp, #28
   1b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1b9a8:	1d38      	adds	r0, r7, #4
   1b9aa:	f016 fc3b 	bl	32224 <sys_get_be32>
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1b9ae:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   1b9b2:	1ac3      	subs	r3, r0, r3
   1b9b4:	2b00      	cmp	r3, #0
   1b9b6:	da06      	bge.n	1b9c6 <tcp_established+0x92>
		send_ack(context, &conn->remote_addr, true);
   1b9b8:	2201      	movs	r2, #1
   1b9ba:	f109 0104 	add.w	r1, r9, #4
   1b9be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1b9c0:	f016 fec2 	bl	32748 <send_ack.isra.34>
		goto unlock;
   1b9c4:	e7e5      	b.n	1b992 <tcp_established+0x5e>
   1b9c6:	9305      	str	r3, [sp, #20]
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1b9c8:	d1e3      	bne.n	1b992 <tcp_established+0x5e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1b9ca:	7b7d      	ldrb	r5, [r7, #13]
	if (tcp_flags & NET_TCP_RST) {
   1b9cc:	f015 0604 	ands.w	r6, r5, #4
   1b9d0:	d016      	beq.n	1ba00 <tcp_established+0xcc>
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1b9d2:	4639      	mov	r1, r7
   1b9d4:	4650      	mov	r0, sl
   1b9d6:	f017 f807 	bl	329e8 <net_tcp_validate_seq>
   1b9da:	2800      	cmp	r0, #0
   1b9dc:	d0d9      	beq.n	1b992 <tcp_established+0x5e>
		if (context->recv_cb) {
   1b9de:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b9e0:	b155      	cbz	r5, 1b9f8 <tcp_established+0xc4>
			context->recv_cb(context, NULL, NULL, NULL, -ECONNRESET,
   1b9e2:	f8da 2004 	ldr.w	r2, [sl, #4]
   1b9e6:	9b05      	ldr	r3, [sp, #20]
   1b9e8:	9201      	str	r2, [sp, #4]
   1b9ea:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1b9ee:	4619      	mov	r1, r3
   1b9f0:	9200      	str	r2, [sp, #0]
   1b9f2:	4620      	mov	r0, r4
   1b9f4:	461a      	mov	r2, r3
   1b9f6:	47a8      	blx	r5
		net_context_unref(context);
   1b9f8:	4620      	mov	r0, r4
   1b9fa:	f015 fdbc 	bl	31576 <net_context_unref>
   1b9fe:	e7c8      	b.n	1b992 <tcp_established+0x5e>
		goto unlock;
	}

	/* Handle TCP state transition */
	if (tcp_flags & NET_TCP_ACK) {
   1ba00:	06ea      	lsls	r2, r5, #27
   1ba02:	d513      	bpl.n	1ba2c <tcp_established+0xf8>
		if (!net_tcp_ack_received(context,
   1ba04:	f107 0008 	add.w	r0, r7, #8
   1ba08:	f016 fc0c 	bl	32224 <sys_get_be32>
   1ba0c:	4601      	mov	r1, r0
   1ba0e:	4620      	mov	r0, r4
   1ba10:	f016 feec 	bl	327ec <net_tcp_ack_received>
   1ba14:	2800      	cmp	r0, #0
   1ba16:	d0bc      	beq.n	1b992 <tcp_established+0x5e>

		/* TCP state might be changed after maintaining the sent pkt
		 * list, e.g., an ack of FIN is received.
		 */

		if (net_tcp_get_state(context->tcp)
   1ba18:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ba1a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1ba1e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ba22:	2b07      	cmp	r3, #7
   1ba24:	d133      	bne.n	1ba8e <tcp_established+0x15a>
			   == NET_TCP_FIN_WAIT_1) {
			/* Active close: step to FIN_WAIT_2 */
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   1ba26:	2108      	movs	r1, #8
   1ba28:	f7ff fe60 	bl	1b6ec <net_tcp_change_state>
			net_pkt_unref(pkt);
			goto clean_up;
		}
	}

	if (tcp_flags & NET_TCP_FIN) {
   1ba2c:	f015 0301 	ands.w	r3, r5, #1
   1ba30:	469a      	mov	sl, r3
   1ba32:	d01c      	beq.n	1ba6e <tcp_established+0x13a>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1ba34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ba36:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1ba3a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ba3e:	2b04      	cmp	r3, #4
   1ba40:	d14d      	bne.n	1bade <tcp_established+0x1aa>
			/* Passive close: step to CLOSE_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1ba42:	2105      	movs	r1, #5
   1ba44:	f7ff fe52 	bl	1b6ec <net_tcp_change_state>
			/* We should receive ACK next in order to get rid of
			 * LAST_ACK state that we are entering in a short while.
			 * But we need to be prepared to NOT to receive it as
			 * otherwise the connection would be stuck forever.
			 */
			k_delayed_work_submit(&context->tcp->ack_timer,
   1ba48:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ba4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ba4e:	3008      	adds	r0, #8
   1ba50:	f7ff fc1c 	bl	1b28c <k_delayed_work_submit>
		context->flags |= NET_CONTEXT_CLOSING_SOCK;
   1ba54:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1ba58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ba5c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			k_delayed_work_cancel(&context->tcp->fin_timer);
			/* Active close: step to TIME_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
		}

		context->tcp->fin_rcvd = 1U;
   1ba60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1ba62:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   1ba66:	f043 0304 	orr.w	r3, r3, #4
   1ba6a:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	}

	if (!IS_ENABLED(CONFIG_NET_TCP_AUTO_ACCEPT) &&
   1ba6e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1ba72:	059b      	lsls	r3, r3, #22
   1ba74:	d464      	bmi.n	1bb40 <tcp_established+0x20c>
	    net_context_is_accepting(context)) {
		data_len = 0;
		do_not_send_ack = true;
	} else {
		data_len = net_pkt_remaining_data(pkt);
   1ba76:	4640      	mov	r0, r8
   1ba78:	f016 f87c 	bl	31b74 <net_pkt_remaining_data>
	return tcp->recv_wnd;
   1ba7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		data_len = net_pkt_remaining_data(pkt);
   1ba7e:	b285      	uxth	r5, r0
	}

	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1ba80:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
   1ba84:	42ab      	cmp	r3, r5
   1ba86:	d234      	bcs.n	1baf2 <tcp_established+0x1be>
		 * for net_tcp_get_recv_wnd(context->tcp) == 0, but
		 * given the if above, we know that if data_len == 1,
		 * then net_tcp_get_recv_wnd(context->tcp) can be only 0
		 * here.
		 */
		if (data_len == 1U) {
   1ba88:	2d01      	cmp	r5, #1
   1ba8a:	d182      	bne.n	1b992 <tcp_established+0x5e>
   1ba8c:	e794      	b.n	1b9b8 <tcp_established+0x84>
		} else if (net_tcp_get_state(context->tcp)
   1ba8e:	2b06      	cmp	r3, #6
   1ba90:	d1cc      	bne.n	1ba2c <tcp_established+0xf8>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   1ba92:	4631      	mov	r1, r6
   1ba94:	f7ff fe2a 	bl	1b6ec <net_tcp_change_state>
			net_pkt_unref(pkt);
   1ba98:	4640      	mov	r0, r8
   1ba9a:	f015 ff03 	bl	318a4 <net_pkt_unref>

		send_ack(context, &conn->remote_addr, false);
	}

clean_up:
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   1ba9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1baa0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1baa4:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1baa8:	2b09      	cmp	r3, #9
   1baaa:	d103      	bne.n	1bab4 <tcp_established+0x180>
		k_delayed_work_submit(&context->tcp->timewait_timer,
   1baac:	21fa      	movs	r1, #250	; 0xfa
   1baae:	3068      	adds	r0, #104	; 0x68
   1bab0:	f7ff fbec 	bl	1b28c <k_delayed_work_submit>
				      K_MSEC(CONFIG_NET_TCP_TIME_WAIT_DELAY));
	}

	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   1bab4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1bab6:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1baba:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1babe:	2b00      	cmp	r3, #0
   1bac0:	f47f af68 	bne.w	1b994 <tcp_established+0x60>
		if (context->recv_cb) {
   1bac4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1bac6:	b135      	cbz	r5, 1bad6 <tcp_established+0x1a2>
			context->recv_cb(context, NULL, NULL, NULL, 0,
   1bac8:	6852      	ldr	r2, [r2, #4]
   1baca:	4619      	mov	r1, r3
   1bacc:	e9cd 3200 	strd	r3, r2, [sp]
   1bad0:	4620      	mov	r0, r4
   1bad2:	461a      	mov	r2, r3
   1bad4:	47a8      	blx	r5
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);
   1bad6:	4620      	mov	r0, r4
   1bad8:	f015 fd4d 	bl	31576 <net_context_unref>
   1badc:	e75a      	b.n	1b994 <tcp_established+0x60>
		} else if (net_tcp_get_state(context->tcp)
   1bade:	2b08      	cmp	r3, #8
   1bae0:	d1be      	bne.n	1ba60 <tcp_established+0x12c>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   1bae2:	3028      	adds	r0, #40	; 0x28
   1bae4:	f00f fa2a 	bl	2af3c <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   1bae8:	2109      	movs	r1, #9
   1baea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1baec:	f7ff fdfe 	bl	1b6ec <net_tcp_change_state>
   1baf0:	e7b6      	b.n	1ba60 <tcp_established+0x12c>
	if (data_len > 0) {
   1baf2:	b335      	cbz	r5, 1bb42 <tcp_established+0x20e>
	u8_t offset = tcp_hdr->offset >> 4;
   1baf4:	7b3e      	ldrb	r6, [r7, #12]
   1baf6:	0936      	lsrs	r6, r6, #4
	if ((offset << 2) > sizeof(struct net_tcp_hdr)) {
   1baf8:	00b6      	lsls	r6, r6, #2
   1bafa:	2e14      	cmp	r6, #20
   1bafc:	dd08      	ble.n	1bb10 <tcp_established+0x1dc>
		net_pkt_skip(pkt, (offset << 2) -
   1bafe:	f1a6 0114 	sub.w	r1, r6, #20
   1bb02:	4640      	mov	r0, r8
   1bb04:	f015 ffbc 	bl	31a80 <net_pkt_skip>
		data_len -= (offset << 2) - sizeof(struct net_tcp_hdr);
   1bb08:	f1c6 0614 	rsb	r6, r6, #20
   1bb0c:	4435      	add	r5, r6
   1bb0e:	b2ad      	uxth	r5, r5
		ret = net_context_packet_received(conn, pkt, ip_hdr, proto_hdr,
   1bb10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bb12:	9a04      	ldr	r2, [sp, #16]
   1bb14:	685b      	ldr	r3, [r3, #4]
   1bb16:	4641      	mov	r1, r8
   1bb18:	9300      	str	r3, [sp, #0]
   1bb1a:	4648      	mov	r0, r9
   1bb1c:	465b      	mov	r3, fp
   1bb1e:	f7fe fb01 	bl	1a124 <net_context_packet_received>
   1bb22:	4606      	mov	r6, r0
		context->tcp->send_ack += data_len;
   1bb24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bb26:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1bb2a:	441d      	add	r5, r3
		if (tcp_flags & NET_TCP_FIN) {
   1bb2c:	4653      	mov	r3, sl
   1bb2e:	b973      	cbnz	r3, 1bb4e <tcp_established+0x21a>
			context->tcp->send_ack += 1U;
   1bb30:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		send_ack(context, &conn->remote_addr, false);
   1bb34:	2200      	movs	r2, #0
   1bb36:	f109 0104 	add.w	r1, r9, #4
   1bb3a:	f016 fe05 	bl	32748 <send_ack.isra.34>
   1bb3e:	e7ae      	b.n	1ba9e <tcp_established+0x16a>
		do_not_send_ack = true;
   1bb40:	2501      	movs	r5, #1
		net_pkt_unref(pkt);
   1bb42:	4640      	mov	r0, r8
   1bb44:	f015 feae 	bl	318a4 <net_pkt_unref>
	if (do_not_send_ack == false) {
   1bb48:	2d00      	cmp	r5, #0
   1bb4a:	d1a8      	bne.n	1ba9e <tcp_established+0x16a>
   1bb4c:	e7ea      	b.n	1bb24 <tcp_established+0x1f0>
			context->tcp->send_ack += 1U;
   1bb4e:	3501      	adds	r5, #1
   1bb50:	e7ee      	b.n	1bb30 <tcp_established+0x1fc>
   1bb52:	bf00      	nop
   1bb54:	00037bd4 	.word	0x00037bd4
   1bb58:	00037bad 	.word	0x00037bad
   1bb5c:	00036be5 	.word	0x00036be5
   1bb60:	00037086 	.word	0x00037086

0001bb64 <tcp_synack_received>:
 *					struct net_pkt *pkt,
 *				        union net_ip_header *ip_hdr,
 *				        union net_proto_header *proto_hdr,
 *					void *user_data)
 */
NET_CONN_CB(tcp_synack_received)
   1bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb68:	461d      	mov	r5, r3
   1bb6a:	b08a      	sub	sp, #40	; 0x28
   1bb6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1bb6e:	460e      	mov	r6, r1
   1bb70:	4620      	mov	r0, r4
   1bb72:	4690      	mov	r8, r2
   1bb74:	f015 fcf5 	bl	31562 <net_context_ref>
   1bb78:	682d      	ldr	r5, [r5, #0]
{
	struct net_context *context = (struct net_context *)user_data;
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
	int ret;

	NET_ASSERT(context && context->tcp);
   1bb7a:	b10c      	cbz	r4, 1bb80 <tcp_synack_received+0x1c>
   1bb7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bb7e:	b973      	cbnz	r3, 1bb9e <tcp_synack_received+0x3a>
   1bb80:	4958      	ldr	r1, [pc, #352]	; (1bce4 <tcp_synack_received+0x180>)
   1bb82:	f640 03cd 	movw	r3, #2253	; 0x8cd
   1bb86:	4a58      	ldr	r2, [pc, #352]	; (1bce8 <tcp_synack_received+0x184>)
   1bb88:	4858      	ldr	r0, [pc, #352]	; (1bcec <tcp_synack_received+0x188>)
   1bb8a:	f013 fb62 	bl	2f252 <printk>
   1bb8e:	4858      	ldr	r0, [pc, #352]	; (1bcf0 <tcp_synack_received+0x18c>)
   1bb90:	f013 fb5f 	bl	2f252 <printk>
   1bb94:	f640 01cd 	movw	r1, #2253	; 0x8cd
   1bb98:	4853      	ldr	r0, [pc, #332]	; (1bce8 <tcp_synack_received+0x184>)
   1bb9a:	f013 fe5b 	bl	2f854 <assert_post_action>
   1bb9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bba0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc

	switch (net_tcp_get_state(context->tcp)) {
   1bba4:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1bba8:	2b02      	cmp	r3, #2
   1bbaa:	d17d      	bne.n	1bca8 <tcp_synack_received+0x144>
	case NET_TCP_SYN_SENT:
		net_context_set_iface(context, net_pkt_iface(pkt));
   1bbac:	6a31      	ldr	r1, [r6, #32]
   1bbae:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1bbb2:	f7ff fbf7 	bl	1b3a4 <net_context_set_iface.isra.25>
		return NET_DROP;
	}

	net_pkt_set_context(pkt, context);

	NET_ASSERT(net_pkt_iface(pkt));
   1bbb6:	6a33      	ldr	r3, [r6, #32]
	pkt->context = ctx;
   1bbb8:	61f4      	str	r4, [r6, #28]
   1bbba:	b973      	cbnz	r3, 1bbda <tcp_synack_received+0x76>
   1bbbc:	494d      	ldr	r1, [pc, #308]	; (1bcf4 <tcp_synack_received+0x190>)
   1bbbe:	f640 03db 	movw	r3, #2267	; 0x8db
   1bbc2:	4a49      	ldr	r2, [pc, #292]	; (1bce8 <tcp_synack_received+0x184>)
   1bbc4:	4849      	ldr	r0, [pc, #292]	; (1bcec <tcp_synack_received+0x188>)
   1bbc6:	f013 fb44 	bl	2f252 <printk>
   1bbca:	4849      	ldr	r0, [pc, #292]	; (1bcf0 <tcp_synack_received+0x18c>)
   1bbcc:	f013 fb41 	bl	2f252 <printk>
   1bbd0:	f640 01db 	movw	r1, #2267	; 0x8db
   1bbd4:	4844      	ldr	r0, [pc, #272]	; (1bce8 <tcp_synack_received+0x184>)
   1bbd6:	f013 fe3d 	bl	2f854 <assert_post_action>

	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bbda:	7b6f      	ldrb	r7, [r5, #13]
   1bbdc:	077a      	lsls	r2, r7, #29
   1bbde:	d513      	bpl.n	1bc08 <tcp_synack_received+0xa4>
		/* We only accept RST packet that has valid seq field. */
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1bbe0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   1bbe2:	4629      	mov	r1, r5
   1bbe4:	4630      	mov	r0, r6
   1bbe6:	f016 feff 	bl	329e8 <net_tcp_validate_seq>
   1bbea:	2800      	cmp	r0, #0
   1bbec:	d05c      	beq.n	1bca8 <tcp_synack_received+0x144>
	z_impl_k_sem_give(sem);
   1bbee:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
   1bbf2:	f00e fe4d 	bl	2a890 <z_impl_k_sem_give>

		net_stats_update_tcp_seg_rst(net_pkt_iface(pkt));

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
   1bbf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bbf8:	2b00      	cmp	r3, #0
   1bbfa:	d055      	beq.n	1bca8 <tcp_synack_received+0x144>
			context->connect_cb(context, -ECONNREFUSED,
   1bbfc:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1bc00:	6822      	ldr	r2, [r4, #0]
		send_ack(context, &remote_addr, false);

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
			context->connect_cb(context, 0, context->user_data);
   1bc02:	4620      	mov	r0, r4
   1bc04:	4798      	blx	r3
   1bc06:	e04f      	b.n	1bca8 <tcp_synack_received+0x144>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1bc08:	07bb      	lsls	r3, r7, #30
   1bc0a:	d506      	bpl.n	1bc1a <tcp_synack_received+0xb6>
			sys_get_be32(tcp_hdr->seq) + 1;
   1bc0c:	1d28      	adds	r0, r5, #4
   1bc0e:	f016 fb09 	bl	32224 <sys_get_be32>
		context->tcp->send_ack =
   1bc12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1bc14:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1bc16:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1bc1a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   1bc1e:	2f12      	cmp	r7, #18
   1bc20:	d142      	bne.n	1bca8 <tcp_synack_received+0x144>
	return pkt->family;
   1bc22:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bc26:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bc2a:	2b01      	cmp	r3, #1
   1bc2c:	d117      	bne.n	1bc5e <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bc2e:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1bc32:	882a      	ldrh	r2, [r5, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bc34:	68c9      	ldr	r1, [r1, #12]
   1bc36:	9109      	str	r1, [sp, #36]	; 0x24
		addr->sa_family = AF_INET;
   1bc38:	f8ad 3020 	strh.w	r3, [sp, #32]
   1bc3c:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
		addr4->sin_port = port;
   1bc40:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bc44:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bc48:	2b01      	cmp	r3, #1
   1bc4a:	d108      	bne.n	1bc5e <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bc4c:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1bc50:	886a      	ldrh	r2, [r5, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bc52:	6909      	ldr	r1, [r1, #16]
   1bc54:	9107      	str	r1, [sp, #28]
		addr4->sin_port = port;
   1bc56:	f8ad 201a 	strh.w	r2, [sp, #26]
		addr->sa_family = AF_INET;
   1bc5a:	f8ad 3018 	strh.w	r3, [sp, #24]
	return net_conn_unregister(handle);
   1bc5e:	4627      	mov	r7, r4
   1bc60:	f857 0f2c 	ldr.w	r0, [r7, #44]!
   1bc64:	f7ff f9da 	bl	1b01c <net_conn_unregister>
				       ntohs(tcp_hdr->dst_port),
   1bc68:	886b      	ldrh	r3, [r5, #2]
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1bc6a:	4a23      	ldr	r2, [pc, #140]	; (1bcf8 <tcp_synack_received+0x194>)
				       ntohs(tcp_hdr->src_port),
   1bc6c:	8828      	ldrh	r0, [r5, #0]
   1bc6e:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
   1bc72:	9202      	str	r2, [sp, #8]
				       ntohs(tcp_hdr->dst_port),
   1bc74:	021a      	lsls	r2, r3, #8
   1bc76:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
				       ntohs(tcp_hdr->src_port),
   1bc7a:	0203      	lsls	r3, r0, #8
   1bc7c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1bc80:	b292      	uxth	r2, r2
   1bc82:	b29b      	uxth	r3, r3
   1bc84:	9201      	str	r2, [sp, #4]
   1bc86:	9300      	str	r3, [sp, #0]
   1bc88:	e9cd 4703 	strd	r4, r7, [sp, #12]
   1bc8c:	ab06      	add	r3, sp, #24
   1bc8e:	aa08      	add	r2, sp, #32
   1bc90:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1bc94:	2006      	movs	r0, #6
   1bc96:	f7ff f8ff 	bl	1ae98 <net_conn_register>
		if (ret < 0) {
   1bc9a:	2800      	cmp	r0, #0
   1bc9c:	da0b      	bge.n	1bcb6 <tcp_synack_received+0x152>
			send_reset(context, &local_addr, &remote_addr);
   1bc9e:	aa08      	add	r2, sp, #32
   1bca0:	a906      	add	r1, sp, #24
   1bca2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bca4:	f016 fb7b 	bl	3239e <send_reset.isra.29>
NET_CONN_CB(tcp_synack_received)
   1bca8:	4620      	mov	r0, r4
   1bcaa:	f015 fc64 	bl	31576 <net_context_unref>
   1bcae:	2002      	movs	r0, #2
   1bcb0:	b00a      	add	sp, #40	; 0x28
   1bcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bcb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bcb8:	2104      	movs	r1, #4
   1bcba:	f7ff fd17 	bl	1b6ec <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_CONNECTED);
   1bcbe:	4620      	mov	r0, r4
   1bcc0:	2102      	movs	r1, #2
   1bcc2:	f7ff fb2b 	bl	1b31c <net_context_set_state>
		send_ack(context, &remote_addr, false);
   1bcc6:	2200      	movs	r2, #0
   1bcc8:	a908      	add	r1, sp, #32
   1bcca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bccc:	f016 fd3c 	bl	32748 <send_ack.isra.34>
		k_sem_give(&context->tcp->connect_wait);
   1bcd0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1bcd2:	30a0      	adds	r0, #160	; 0xa0
   1bcd4:	f00e fddc 	bl	2a890 <z_impl_k_sem_give>
		if (context->connect_cb) {
   1bcd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d0e4      	beq.n	1bca8 <tcp_synack_received+0x144>
			context->connect_cb(context, 0, context->user_data);
   1bcde:	6822      	ldr	r2, [r4, #0]
   1bce0:	2100      	movs	r1, #0
   1bce2:	e78e      	b.n	1bc02 <tcp_synack_received+0x9e>
   1bce4:	00037bd4 	.word	0x00037bd4
   1bce8:	00037bad 	.word	0x00037bad
   1bcec:	00036be5 	.word	0x00036be5
   1bcf0:	00037086 	.word	0x00037086
   1bcf4:	00037b26 	.word	0x00037b26
   1bcf8:	0001b935 	.word	0x0001b935

0001bcfc <tcp_syn_rcvd>:
 *			         struct net_pkt *pkt,
 *			         union net_ip_header *ip_hdr,
 *			         union net_proto_header *proto_hdr,
 *			         void *user_data)
 */
NET_CONN_CB(tcp_syn_rcvd)
   1bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd00:	461e      	mov	r6, r3
   1bd02:	b08f      	sub	sp, #60	; 0x3c
   1bd04:	9c18      	ldr	r4, [sp, #96]	; 0x60
   1bd06:	460d      	mov	r5, r1
   1bd08:	4620      	mov	r0, r4
   1bd0a:	4690      	mov	r8, r2
   1bd0c:	f015 fc29 	bl	31562 <net_context_ref>
   1bd10:	6836      	ldr	r6, [r6, #0]
	struct net_tcp *tcp;
	struct sockaddr_ptr pkt_src_addr;
	struct sockaddr local_addr;
	struct sockaddr remote_addr;

	NET_ASSERT(context && context->tcp);
   1bd12:	b10c      	cbz	r4, 1bd18 <tcp_syn_rcvd+0x1c>
   1bd14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bd16:	b973      	cbnz	r3, 1bd36 <tcp_syn_rcvd+0x3a>
   1bd18:	49b6      	ldr	r1, [pc, #728]	; (1bff4 <tcp_syn_rcvd+0x2f8>)
   1bd1a:	f640 135a 	movw	r3, #2394	; 0x95a
   1bd1e:	4ab6      	ldr	r2, [pc, #728]	; (1bff8 <tcp_syn_rcvd+0x2fc>)
   1bd20:	48b6      	ldr	r0, [pc, #728]	; (1bffc <tcp_syn_rcvd+0x300>)
   1bd22:	f013 fa96 	bl	2f252 <printk>
   1bd26:	48b6      	ldr	r0, [pc, #728]	; (1c000 <tcp_syn_rcvd+0x304>)
   1bd28:	f013 fa93 	bl	2f252 <printk>
   1bd2c:	f640 115a 	movw	r1, #2394	; 0x95a
   1bd30:	48b1      	ldr	r0, [pc, #708]	; (1bff8 <tcp_syn_rcvd+0x2fc>)
   1bd32:	f013 fd8f 	bl	2f854 <assert_post_action>

	tcp = context->tcp;
   1bd36:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1bd3a:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
   1bd3e:	f3c3 3343 	ubfx	r3, r3, #13, #4

	switch (net_tcp_get_state(tcp)) {
   1bd42:	2b01      	cmp	r3, #1
   1bd44:	d004      	beq.n	1bd50 <tcp_syn_rcvd+0x54>
   1bd46:	2b03      	cmp	r3, #3
   1bd48:	f000 80c7 	beq.w	1beda <tcp_syn_rcvd+0x1de>
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {

		if (tcp_backlog_rst(pkt, ip_hdr, tcp_hdr) < 0) {
			net_stats_update_tcp_seg_rsterr(net_pkt_iface(pkt));
			return NET_DROP;
   1bd4c:	2702      	movs	r7, #2
   1bd4e:	e0bd      	b.n	1becc <tcp_syn_rcvd+0x1d0>
		net_context_set_iface(context, net_pkt_iface(pkt));
   1bd50:	6a29      	ldr	r1, [r5, #32]
   1bd52:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1bd56:	f7ff fb25 	bl	1b3a4 <net_context_set_iface.isra.25>
	NET_ASSERT(net_pkt_iface(pkt));
   1bd5a:	6a2b      	ldr	r3, [r5, #32]
	pkt->context = ctx;
   1bd5c:	61ec      	str	r4, [r5, #28]
   1bd5e:	b973      	cbnz	r3, 1bd7e <tcp_syn_rcvd+0x82>
   1bd60:	49a8      	ldr	r1, [pc, #672]	; (1c004 <tcp_syn_rcvd+0x308>)
   1bd62:	f640 136f 	movw	r3, #2415	; 0x96f
   1bd66:	4aa4      	ldr	r2, [pc, #656]	; (1bff8 <tcp_syn_rcvd+0x2fc>)
   1bd68:	48a4      	ldr	r0, [pc, #656]	; (1bffc <tcp_syn_rcvd+0x300>)
   1bd6a:	f013 fa72 	bl	2f252 <printk>
   1bd6e:	48a4      	ldr	r0, [pc, #656]	; (1c000 <tcp_syn_rcvd+0x304>)
   1bd70:	f013 fa6f 	bl	2f252 <printk>
   1bd74:	f640 116f 	movw	r1, #2415	; 0x96f
   1bd78:	489f      	ldr	r0, [pc, #636]	; (1bff8 <tcp_syn_rcvd+0x2fc>)
   1bd7a:	f013 fd6b 	bl	2f854 <assert_post_action>
	return pkt->family;
   1bd7e:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bd82:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bd86:	2b01      	cmp	r3, #1
   1bd88:	d117      	bne.n	1bdba <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bd8a:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1bd8e:	8832      	ldrh	r2, [r6, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1bd90:	68c9      	ldr	r1, [r1, #12]
   1bd92:	910d      	str	r1, [sp, #52]	; 0x34
		addr->sa_family = AF_INET;
   1bd94:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1bd98:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		addr4->sin_port = port;
   1bd9c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1bda0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1bda4:	2b01      	cmp	r3, #1
   1bda6:	d108      	bne.n	1bdba <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bda8:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1bdac:	8872      	ldrh	r2, [r6, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1bdae:	6909      	ldr	r1, [r1, #16]
   1bdb0:	910b      	str	r1, [sp, #44]	; 0x2c
		addr4->sin_port = port;
   1bdb2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
		addr->sa_family = AF_INET;
   1bdb6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_SYN) {
   1bdba:	7b73      	ldrb	r3, [r6, #13]
   1bdbc:	f003 073f 	and.w	r7, r3, #63	; 0x3f
   1bdc0:	2f02      	cmp	r7, #2
   1bdc2:	f040 8092 	bne.w	1beea <tcp_syn_rcvd+0x1ee>
		struct net_tcp_options tcp_opts = {
   1bdc6:	f44f 7306 	mov.w	r3, #536	; 0x218
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bdca:	f06f 0113 	mvn.w	r1, #19
		struct net_tcp_options tcp_opts = {
   1bdce:	f8ad 301c 	strh.w	r3, [sp, #28]
		opt_totlen = NET_TCP_HDR_LEN(tcp_hdr)
   1bdd2:	7b33      	ldrb	r3, [r6, #12]
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bdd4:	aa07      	add	r2, sp, #28
			     - sizeof(struct net_tcp_hdr);
   1bdd6:	091b      	lsrs	r3, r3, #4
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1bdd8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1bddc:	4628      	mov	r0, r5
   1bdde:	f016 fe36 	bl	32a4e <net_tcp_parse_opts>
   1bde2:	2800      	cmp	r0, #0
   1bde4:	db72      	blt.n	1becc <tcp_syn_rcvd+0x1d0>
		net_tcp_change_state(tcp, NET_TCP_SYN_RCVD);
   1bde6:	2103      	movs	r1, #3
   1bde8:	4648      	mov	r0, r9
   1bdea:	f7ff fc7f 	bl	1b6ec <net_tcp_change_state>
		context->tcp->send_seq = tcp_init_isn();
   1bdee:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return sys_rand32_get();
   1bdf2:	f000 fc51 	bl	1c698 <sys_rand32_get>
   1bdf6:	f8c9 0090 	str.w	r0, [r9, #144]	; 0x90
			sys_get_be32(tcp_hdr->seq) + 1;
   1bdfa:	1d30      	adds	r0, r6, #4
   1bdfc:	f016 fa12 	bl	32224 <sys_get_be32>
		context->tcp->send_ack =
   1be00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1be02:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1be04:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	int empty_slot = -1;
   1be08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1be0c:	4632      	mov	r2, r6
	int empty_slot = -1;
   1be0e:	9308      	str	r3, [sp, #32]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1be10:	4641      	mov	r1, r8
   1be12:	ab08      	add	r3, sp, #32
   1be14:	4628      	mov	r0, r5
		r = tcp_backlog_syn(pkt, ip_hdr, tcp_hdr,
   1be16:	f8bd 901c 	ldrh.w	r9, [sp, #28]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1be1a:	f7ff fae3 	bl	1b3e4 <tcp_backlog_find.isra.26>
   1be1e:	2800      	cmp	r0, #0
   1be20:	da54      	bge.n	1becc <tcp_syn_rcvd+0x1d0>
	if (empty_slot < 0) {
   1be22:	9a08      	ldr	r2, [sp, #32]
   1be24:	2a00      	cmp	r2, #0
   1be26:	db51      	blt.n	1becc <tcp_syn_rcvd+0x1d0>
	tcp_backlog[empty_slot].tcp = context->tcp;
   1be28:	2338      	movs	r3, #56	; 0x38
   1be2a:	4353      	muls	r3, r2
   1be2c:	4f76      	ldr	r7, [pc, #472]	; (1c008 <tcp_syn_rcvd+0x30c>)
   1be2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1be30:	18f8      	adds	r0, r7, r3
   1be32:	50fa      	str	r2, [r7, r3]
   1be34:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1be38:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1be3c:	2a01      	cmp	r2, #1
   1be3e:	d10a      	bne.n	1be56 <tcp_syn_rcvd+0x15a>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1be40:	f8d8 1000 	ldr.w	r1, [r8]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1be44:	332c      	adds	r3, #44	; 0x2c
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1be46:	68c9      	ldr	r1, [r1, #12]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1be48:	443b      	add	r3, r7
		port = tcp_hdr->src_port;
   1be4a:	f8b6 c000 	ldrh.w	ip, [r6]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1be4e:	6059      	str	r1, [r3, #4]
		addr4->sin_port = port;
   1be50:	f8a3 c002 	strh.w	ip, [r3, #2]
		addr->sa_family = AF_INET;
   1be54:	8582      	strh	r2, [r0, #44]	; 0x2c
	tcp_backlog[empty_slot].send_seq = context->tcp->send_seq;
   1be56:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1be5a:	9808      	ldr	r0, [sp, #32]
   1be5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1be5e:	fb0a f000 	mul.w	r0, sl, r0
   1be62:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1be66:	183a      	adds	r2, r7, r0
   1be68:	6053      	str	r3, [r2, #4]
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1be6a:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1be6e:	300c      	adds	r0, #12
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1be70:	6093      	str	r3, [r2, #8]
	tcp_backlog[empty_slot].send_mss = send_mss;
   1be72:	f8a2 9034 	strh.w	r9, [r2, #52]	; 0x34
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1be76:	4965      	ldr	r1, [pc, #404]	; (1c00c <tcp_syn_rcvd+0x310>)
   1be78:	4438      	add	r0, r7
   1be7a:	f018 fcf7 	bl	3486c <k_delayed_work_init>
	k_delayed_work_submit(&tcp_backlog[empty_slot].ack_timer, ACK_TIMEOUT);
   1be7e:	9808      	ldr	r0, [sp, #32]
   1be80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1be84:	fb0a 7000 	mla	r0, sl, r0, r7
   1be88:	300c      	adds	r0, #12
   1be8a:	f7ff f9ff 	bl	1b28c <k_delayed_work_submit>
		get_sockaddr_ptr(ip_hdr, tcp_hdr,
   1be8e:	4620      	mov	r0, r4
   1be90:	f7ff fa04 	bl	1b29c <net_context_get_family>
	(void)memset(addr, 0, sizeof(*addr));
   1be94:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1be96:	2801      	cmp	r0, #1
	(void)memset(addr, 0, sizeof(*addr));
   1be98:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1be9c:	d10b      	bne.n	1beb6 <tcp_syn_rcvd+0x1ba>
		addr4->sin_family = AF_INET;
   1be9e:	f8ad 0020 	strh.w	r0, [sp, #32]
		addr4->sin_port = tcp_hdr->dst_port;
   1bea2:	78b3      	ldrb	r3, [r6, #2]
   1bea4:	78f2      	ldrb	r2, [r6, #3]
   1bea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1beaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		addr4->sin_addr = &ip_hdr->ipv4->dst;
   1beae:	f8d8 3000 	ldr.w	r3, [r8]
   1beb2:	3310      	adds	r3, #16
   1beb4:	9309      	str	r3, [sp, #36]	; 0x24
	return send_syn_segment(context, local, remote,
   1beb6:	2312      	movs	r3, #18
   1beb8:	aa0c      	add	r2, sp, #48	; 0x30
   1beba:	a908      	add	r1, sp, #32
   1bebc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1bec0:	f016 fc5c 	bl	3277c <send_syn_segment.isra.35>
		net_pkt_unref(pkt);
   1bec4:	4628      	mov	r0, r5
   1bec6:	f015 fced 	bl	318a4 <net_pkt_unref>
		return NET_OK;
   1beca:	2700      	movs	r7, #0
NET_CONN_CB(tcp_syn_rcvd)
   1becc:	4620      	mov	r0, r4
   1bece:	f015 fb52 	bl	31576 <net_context_unref>
   1bed2:	4638      	mov	r0, r7
   1bed4:	b00f      	add	sp, #60	; 0x3c
   1bed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_pkt_iface(pkt) != net_context_get_iface(context)) {
   1beda:	4620      	mov	r0, r4
   1bedc:	6a2f      	ldr	r7, [r5, #32]
   1bede:	f7ff fa41 	bl	1b364 <net_context_get_iface>
   1bee2:	4287      	cmp	r7, r0
   1bee4:	f43f af39 	beq.w	1bd5a <tcp_syn_rcvd+0x5e>
   1bee8:	e730      	b.n	1bd4c <tcp_syn_rcvd+0x50>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1beea:	f013 0704 	ands.w	r7, r3, #4
   1beee:	d01f      	beq.n	1bf30 <tcp_syn_rcvd+0x234>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1bef0:	4628      	mov	r0, r5
   1bef2:	2300      	movs	r3, #0
   1bef4:	4632      	mov	r2, r6
   1bef6:	4641      	mov	r1, r8
   1bef8:	f7ff fa74 	bl	1b3e4 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1befc:	1e05      	subs	r5, r0, #0
   1befe:	f6ff af25 	blt.w	1bd4c <tcp_syn_rcvd+0x50>
	if (tcp_backlog[r].send_ack != sys_get_be32(tcp_hdr->seq)) {
   1bf02:	1d30      	adds	r0, r6, #4
   1bf04:	2638      	movs	r6, #56	; 0x38
   1bf06:	f016 f98d 	bl	32224 <sys_get_be32>
   1bf0a:	fb06 f305 	mul.w	r3, r6, r5
   1bf0e:	4a3e      	ldr	r2, [pc, #248]	; (1c008 <tcp_syn_rcvd+0x30c>)
   1bf10:	18d5      	adds	r5, r2, r3
   1bf12:	68a9      	ldr	r1, [r5, #8]
   1bf14:	4281      	cmp	r1, r0
   1bf16:	f47f af19 	bne.w	1bd4c <tcp_syn_rcvd+0x50>
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1bf1a:	f103 000c 	add.w	r0, r3, #12
   1bf1e:	4410      	add	r0, r2
   1bf20:	f00f f80c 	bl	2af3c <k_delayed_work_cancel>
   1bf24:	4632      	mov	r2, r6
   1bf26:	2100      	movs	r1, #0
   1bf28:	4628      	mov	r0, r5
   1bf2a:	f018 fdb3 	bl	34a94 <memset>
   1bf2e:	e70d      	b.n	1bd4c <tcp_syn_rcvd+0x50>
	}

	/*
	 * If we receive ACK, we go to ESTABLISHED state.
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_ACK) {
   1bf30:	06db      	lsls	r3, r3, #27
   1bf32:	f57f af0b 	bpl.w	1bd4c <tcp_syn_rcvd+0x50>
		socklen_t addrlen;
		int ret;

		net_tcp_print_recv_info("ACK", pkt, tcp_hdr->src_port);

		if (!context->tcp->accept_cb) {
   1bf36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bf38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1bf3c:	b93b      	cbnz	r3, 1bf4e <tcp_syn_rcvd+0x252>

conndrop:
	net_stats_update_tcp_seg_conndrop(net_pkt_iface(pkt));

reset:
	send_reset(tcp->context, &local_addr, &remote_addr);
   1bf3e:	f8d9 3000 	ldr.w	r3, [r9]
   1bf42:	aa0c      	add	r2, sp, #48	; 0x30
   1bf44:	a90a      	add	r1, sp, #40	; 0x28
   1bf46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1bf48:	f016 fa29 	bl	3239e <send_reset.isra.29>

	return NET_DROP;
   1bf4c:	e6fe      	b.n	1bd4c <tcp_syn_rcvd+0x50>
   1bf4e:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
		ret = net_context_get(net_pkt_family(pkt),
   1bf52:	ab08      	add	r3, sp, #32
   1bf54:	2206      	movs	r2, #6
   1bf56:	2101      	movs	r1, #1
   1bf58:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1bf5c:	f7fe f94a 	bl	1a1f4 <net_context_get>
		if (ret < 0) {
   1bf60:	2800      	cmp	r0, #0
   1bf62:	dbec      	blt.n	1bf3e <tcp_syn_rcvd+0x242>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1bf64:	4641      	mov	r1, r8
   1bf66:	463b      	mov	r3, r7
   1bf68:	4632      	mov	r2, r6
   1bf6a:	4628      	mov	r0, r5
		ret = tcp_backlog_ack(pkt, ip_hdr, tcp_hdr, new_context);
   1bf6c:	f8dd a020 	ldr.w	sl, [sp, #32]
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1bf70:	f7ff fa38 	bl	1b3e4 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1bf74:	f1b0 0800 	subs.w	r8, r0, #0
   1bf78:	db37      	blt.n	1bfea <tcp_syn_rcvd+0x2ee>
	if (tcp_backlog[r].send_seq + 1 != sys_get_be32(tcp_hdr->ack)) {
   1bf7a:	f04f 0b38 	mov.w	fp, #56	; 0x38
   1bf7e:	f106 0008 	add.w	r0, r6, #8
   1bf82:	f016 f94f 	bl	32224 <sys_get_be32>
   1bf86:	fb0b f308 	mul.w	r3, fp, r8
   1bf8a:	4a1f      	ldr	r2, [pc, #124]	; (1c008 <tcp_syn_rcvd+0x30c>)
   1bf8c:	eb02 0803 	add.w	r8, r2, r3
   1bf90:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1bf94:	3101      	adds	r1, #1
   1bf96:	4281      	cmp	r1, r0
   1bf98:	d127      	bne.n	1bfea <tcp_syn_rcvd+0x2ee>
	memcpy(&context->remote, &tcp_backlog[r].remote,
   1bf9a:	f103 062c 	add.w	r6, r3, #44	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bf9e:	4416      	add	r6, r2
   1bfa0:	ce03      	ldmia	r6!, {r0, r1}
   1bfa2:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
   1bfa6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
	context->tcp->send_seq = tcp_backlog[r].send_seq + 1;
   1bfaa:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1bfae:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
   1bfb2:	3001      	adds	r0, #1
   1bfb4:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
	context->tcp->send_ack = tcp_backlog[r].send_ack;
   1bfb8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1bfbc:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
	context->tcp->send_mss = tcp_backlog[r].send_mss;
   1bfc0:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
   1bfc4:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1bfc8:	f103 000c 	add.w	r0, r3, #12
   1bfcc:	4410      	add	r0, r2
   1bfce:	f00e ffb5 	bl	2af3c <k_delayed_work_cancel>
__ssp_bos_icheck3(memset, void *, int)
   1bfd2:	465a      	mov	r2, fp
   1bfd4:	4639      	mov	r1, r7
   1bfd6:	4640      	mov	r0, r8
   1bfd8:	f018 fd5c 	bl	34a94 <memset>
		ret = net_context_bind(new_context, &local_addr,
   1bfdc:	2208      	movs	r2, #8
   1bfde:	a90a      	add	r1, sp, #40	; 0x28
   1bfe0:	9808      	ldr	r0, [sp, #32]
   1bfe2:	f7fe fa01 	bl	1a3e8 <net_context_bind>
		if (ret < 0) {
   1bfe6:	2800      	cmp	r0, #0
   1bfe8:	da12      	bge.n	1c010 <tcp_syn_rcvd+0x314>
			net_context_unref(new_context);
   1bfea:	9808      	ldr	r0, [sp, #32]
   1bfec:	f015 fac3 	bl	31576 <net_context_unref>
			goto conndrop;
   1bff0:	e7a5      	b.n	1bf3e <tcp_syn_rcvd+0x242>
   1bff2:	bf00      	nop
   1bff4:	00037bd4 	.word	0x00037bd4
   1bff8:	00037bad 	.word	0x00037bad
   1bffc:	00036be5 	.word	0x00036be5
   1c000:	00037086 	.word	0x00037086
   1c004:	00037b26 	.word	0x00037b26
   1c008:	20021c9c 	.word	0x20021c9c
   1c00c:	000323d5 	.word	0x000323d5
		new_context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1c010:	9b08      	ldr	r3, [sp, #32]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c012:	ae0c      	add	r6, sp, #48	; 0x30
   1c014:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
   1c018:	ce03      	ldmia	r6!, {r0, r1}
   1c01a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1c01e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		memcpy(&new_context->remote, &remote_addr,
   1c022:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1c026:	6258      	str	r0, [r3, #36]	; 0x24
   1c028:	6051      	str	r1, [r2, #4]
		ret = net_tcp_register(net_pkt_family(pkt),
   1c02a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1c02e:	8cde      	ldrh	r6, [r3, #38]	; 0x26
   1c030:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
			       ntohs(net_sin(&local_addr)->sin_port),
   1c034:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1c038:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1c03c:	4b31      	ldr	r3, [pc, #196]	; (1c104 <tcp_syn_rcvd+0x408>)
   1c03e:	ea4f 200c 	mov.w	r0, ip, lsl #8
   1c042:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1c044:	0233      	lsls	r3, r6, #8
			       ntohs(net_sin(&local_addr)->sin_port),
   1c046:	ea40 201c 	orr.w	r0, r0, ip, lsr #8
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1c04a:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
   1c04e:	b280      	uxth	r0, r0
   1c050:	b29b      	uxth	r3, r3
   1c052:	9001      	str	r0, [sp, #4]
   1c054:	9300      	str	r3, [sp, #0]
   1c056:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1c05a:	ab0a      	add	r3, sp, #40	; 0x28
   1c05c:	2006      	movs	r0, #6
   1c05e:	f7fe ff1b 	bl	1ae98 <net_conn_register>
		if (ret < 0) {
   1c062:	2800      	cmp	r0, #0
   1c064:	dbc1      	blt.n	1bfea <tcp_syn_rcvd+0x2ee>
		net_tcp_change_state(tcp, NET_TCP_LISTEN);
   1c066:	2101      	movs	r1, #1
   1c068:	4648      	mov	r0, r9
   1c06a:	f7ff fb3f 	bl	1b6ec <net_tcp_change_state>
		net_tcp_change_state(new_context->tcp, NET_TCP_ESTABLISHED);
   1c06e:	9b08      	ldr	r3, [sp, #32]
   1c070:	2104      	movs	r1, #4
   1c072:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1c074:	f7ff fb3a 	bl	1b6ec <net_tcp_change_state>
		net_context_set_accepting(new_context, true);
   1c078:	9e08      	ldr	r6, [sp, #32]
	NET_ASSERT(context);
   1c07a:	b976      	cbnz	r6, 1c09a <tcp_syn_rcvd+0x39e>
   1c07c:	4922      	ldr	r1, [pc, #136]	; (1c108 <tcp_syn_rcvd+0x40c>)
   1c07e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1c082:	4a22      	ldr	r2, [pc, #136]	; (1c10c <tcp_syn_rcvd+0x410>)
   1c084:	4822      	ldr	r0, [pc, #136]	; (1c110 <tcp_syn_rcvd+0x414>)
   1c086:	f013 f8e4 	bl	2f252 <printk>
   1c08a:	4822      	ldr	r0, [pc, #136]	; (1c114 <tcp_syn_rcvd+0x418>)
   1c08c:	f013 f8e1 	bl	2f252 <printk>
   1c090:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1c094:	481d      	ldr	r0, [pc, #116]	; (1c10c <tcp_syn_rcvd+0x410>)
   1c096:	f013 fbdd 	bl	2f854 <assert_post_action>
		context->flags |= NET_CONTEXT_ACCEPTING_SOCK;
   1c09a:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
		net_context_set_state(new_context, NET_CONTEXT_CONNECTED);
   1c09e:	9808      	ldr	r0, [sp, #32]
   1c0a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c0a4:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
   1c0a8:	2102      	movs	r1, #2
   1c0aa:	f7ff f937 	bl	1b31c <net_context_set_state>
		if (new_context->remote.sa_family == AF_INET) {
   1c0ae:	9808      	ldr	r0, [sp, #32]
   1c0b0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1c0b2:	2b01      	cmp	r3, #1
   1c0b4:	d016      	beq.n	1c0e4 <tcp_syn_rcvd+0x3e8>
		} else if (new_context->remote.sa_family == AF_INET6) {
   1c0b6:	2b02      	cmp	r3, #2
   1c0b8:	d022      	beq.n	1c100 <tcp_syn_rcvd+0x404>
			NET_ASSERT(false, "Invalid protocol family %d",
   1c0ba:	4a17      	ldr	r2, [pc, #92]	; (1c118 <tcp_syn_rcvd+0x41c>)
   1c0bc:	f640 2312 	movw	r3, #2578	; 0xa12
   1c0c0:	4916      	ldr	r1, [pc, #88]	; (1c11c <tcp_syn_rcvd+0x420>)
   1c0c2:	4813      	ldr	r0, [pc, #76]	; (1c110 <tcp_syn_rcvd+0x414>)
   1c0c4:	f013 f8c5 	bl	2f252 <printk>
   1c0c8:	9b08      	ldr	r3, [sp, #32]
   1c0ca:	4815      	ldr	r0, [pc, #84]	; (1c120 <tcp_syn_rcvd+0x424>)
   1c0cc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1c0ce:	f013 f8c0 	bl	2f252 <printk>
   1c0d2:	f640 2112 	movw	r1, #2578	; 0xa12
   1c0d6:	4810      	ldr	r0, [pc, #64]	; (1c118 <tcp_syn_rcvd+0x41c>)
   1c0d8:	f013 fbbc 	bl	2f854 <assert_post_action>
			net_context_unref(new_context);
   1c0dc:	9808      	ldr	r0, [sp, #32]
   1c0de:	f015 fa4a 	bl	31576 <net_context_unref>
			return NET_DROP;
   1c0e2:	e633      	b.n	1bd4c <tcp_syn_rcvd+0x50>
			addrlen = sizeof(struct sockaddr_in);
   1c0e4:	2208      	movs	r2, #8
		context->tcp->accept_cb(new_context,
   1c0e6:	6821      	ldr	r1, [r4, #0]
   1c0e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c0ea:	9100      	str	r1, [sp, #0]
   1c0ec:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
   1c0f0:	f100 0124 	add.w	r1, r0, #36	; 0x24
   1c0f4:	2300      	movs	r3, #0
   1c0f6:	47b0      	blx	r6
		net_pkt_unref(pkt);
   1c0f8:	4628      	mov	r0, r5
   1c0fa:	f015 fbd3 	bl	318a4 <net_pkt_unref>
		return NET_OK;
   1c0fe:	e6e5      	b.n	1becc <tcp_syn_rcvd+0x1d0>
			addrlen = sizeof(struct sockaddr_in6);
   1c100:	2218      	movs	r2, #24
   1c102:	e7f0      	b.n	1c0e6 <tcp_syn_rcvd+0x3ea>
   1c104:	0001b935 	.word	0x0001b935
   1c108:	0003707e 	.word	0x0003707e
   1c10c:	00037051 	.word	0x00037051
   1c110:	00036be5 	.word	0x00036be5
   1c114:	00037086 	.word	0x00037086
   1c118:	00037bad 	.word	0x00037bad
   1c11c:	00038ae7 	.word	0x00038ae7
   1c120:	00037bec 	.word	0x00037bec

0001c124 <net_tcp_recv>:
{
   1c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_ASSERT(context->tcp);
   1c126:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c128:	4605      	mov	r5, r0
   1c12a:	460f      	mov	r7, r1
   1c12c:	4616      	mov	r6, r2
	NET_ASSERT(context->tcp);
   1c12e:	b973      	cbnz	r3, 1c14e <net_tcp_recv+0x2a>
   1c130:	4913      	ldr	r1, [pc, #76]	; (1c180 <net_tcp_recv+0x5c>)
   1c132:	f240 53be 	movw	r3, #1470	; 0x5be
   1c136:	4a13      	ldr	r2, [pc, #76]	; (1c184 <net_tcp_recv+0x60>)
   1c138:	4813      	ldr	r0, [pc, #76]	; (1c188 <net_tcp_recv+0x64>)
   1c13a:	f013 f88a 	bl	2f252 <printk>
   1c13e:	4813      	ldr	r0, [pc, #76]	; (1c18c <net_tcp_recv+0x68>)
   1c140:	f013 f887 	bl	2f252 <printk>
   1c144:	f240 51be 	movw	r1, #1470	; 0x5be
   1c148:	480e      	ldr	r0, [pc, #56]	; (1c184 <net_tcp_recv+0x60>)
   1c14a:	f013 fb83 	bl	2f854 <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c14e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1c150:	f8b3 00bc 	ldrh.w	r0, [r3, #188]	; 0xbc
   1c154:	f3c0 1047 	ubfx	r0, r0, #5, #8
   1c158:	f010 0408 	ands.w	r4, r0, #8
   1c15c:	d109      	bne.n	1c172 <net_tcp_recv+0x4e>
	} else if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c15e:	4628      	mov	r0, r5
   1c160:	f7ff f8bc 	bl	1b2dc <net_context_get_state>
   1c164:	2802      	cmp	r0, #2
   1c166:	d107      	bne.n	1c178 <net_tcp_recv+0x54>
	return 0;
   1c168:	4620      	mov	r0, r4
	context->tcp->recv_user_data = user_data;
   1c16a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	context->recv_cb = cb;
   1c16c:	632f      	str	r7, [r5, #48]	; 0x30
	context->tcp->recv_user_data = user_data;
   1c16e:	605e      	str	r6, [r3, #4]
}
   1c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESHUTDOWN;
   1c172:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1c176:	e7fb      	b.n	1c170 <net_tcp_recv+0x4c>
		return -ENOTCONN;
   1c178:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c17c:	e7f8      	b.n	1c170 <net_tcp_recv+0x4c>
   1c17e:	bf00      	nop
   1c180:	00037bdf 	.word	0x00037bdf
   1c184:	00037bad 	.word	0x00037bad
   1c188:	00036be5 	.word	0x00036be5
   1c18c:	00037086 	.word	0x00037086

0001c190 <net_tcp_get>:
{
   1c190:	b510      	push	{r4, lr}
   1c192:	4604      	mov	r4, r0
	context->tcp = net_tcp_alloc(context);
   1c194:	f7ff fa4c 	bl	1b630 <net_tcp_alloc>
   1c198:	63e0      	str	r0, [r4, #60]	; 0x3c
	if (!context->tcp) {
   1c19a:	b988      	cbnz	r0, 1c1c0 <net_tcp_get+0x30>
		NET_ASSERT(context->tcp, "Cannot allocate TCP context");
   1c19c:	f240 731b 	movw	r3, #1819	; 0x71b
   1c1a0:	4a0f      	ldr	r2, [pc, #60]	; (1c1e0 <net_tcp_get+0x50>)
   1c1a2:	4910      	ldr	r1, [pc, #64]	; (1c1e4 <net_tcp_get+0x54>)
   1c1a4:	4810      	ldr	r0, [pc, #64]	; (1c1e8 <net_tcp_get+0x58>)
   1c1a6:	f013 f854 	bl	2f252 <printk>
   1c1aa:	4810      	ldr	r0, [pc, #64]	; (1c1ec <net_tcp_get+0x5c>)
   1c1ac:	f013 f851 	bl	2f252 <printk>
   1c1b0:	480b      	ldr	r0, [pc, #44]	; (1c1e0 <net_tcp_get+0x50>)
   1c1b2:	f240 711b 	movw	r1, #1819	; 0x71b
   1c1b6:	f013 fb4d 	bl	2f854 <assert_post_action>
		return -ENOBUFS;
   1c1ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1c1be:	bd10      	pop	{r4, pc}
	k_delayed_work_init(&context->tcp->ack_timer, handle_ack_timeout);
   1c1c0:	490b      	ldr	r1, [pc, #44]	; (1c1f0 <net_tcp_get+0x60>)
   1c1c2:	3008      	adds	r0, #8
   1c1c4:	f018 fb52 	bl	3486c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->fin_timer, handle_fin_timeout);
   1c1c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c1ca:	490a      	ldr	r1, [pc, #40]	; (1c1f4 <net_tcp_get+0x64>)
   1c1cc:	3028      	adds	r0, #40	; 0x28
   1c1ce:	f018 fb4d 	bl	3486c <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->timewait_timer,
   1c1d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c1d4:	4908      	ldr	r1, [pc, #32]	; (1c1f8 <net_tcp_get+0x68>)
   1c1d6:	3068      	adds	r0, #104	; 0x68
   1c1d8:	f018 fb48 	bl	3486c <k_delayed_work_init>
	return 0;
   1c1dc:	2000      	movs	r0, #0
   1c1de:	e7ee      	b.n	1c1be <net_tcp_get+0x2e>
   1c1e0:	00037bad 	.word	0x00037bad
   1c1e4:	00037bdf 	.word	0x00037bdf
   1c1e8:	00036be5 	.word	0x00036be5
   1c1ec:	00037b8f 	.word	0x00037b8f
   1c1f0:	000329a7 	.word	0x000329a7
   1c1f4:	0003223b 	.word	0x0003223b
   1c1f8:	00032967 	.word	0x00032967

0001c1fc <net_tcp_unref>:
{
   1c1fc:	b538      	push	{r3, r4, r5, lr}
	if (!context->tcp)
   1c1fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c200:	4604      	mov	r4, r0
	if (!context->tcp)
   1c202:	b18b      	cbz	r3, 1c228 <net_tcp_unref+0x2c>
		if (tcp_backlog[i].tcp != context->tcp) {
   1c204:	4d09      	ldr	r5, [pc, #36]	; (1c22c <net_tcp_unref+0x30>)
   1c206:	682a      	ldr	r2, [r5, #0]
   1c208:	4293      	cmp	r3, r2
   1c20a:	d108      	bne.n	1c21e <net_tcp_unref+0x22>
		k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c20c:	f105 000c 	add.w	r0, r5, #12
   1c210:	f00e fe94 	bl	2af3c <k_delayed_work_cancel>
		(void)memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c214:	2238      	movs	r2, #56	; 0x38
   1c216:	2100      	movs	r1, #0
   1c218:	4628      	mov	r0, r5
   1c21a:	f018 fc3b 	bl	34a94 <memset>
	net_tcp_release(context->tcp);
   1c21e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c220:	f7ff fab8 	bl	1b794 <net_tcp_release>
	context->tcp = NULL;
   1c224:	2300      	movs	r3, #0
   1c226:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   1c228:	2000      	movs	r0, #0
   1c22a:	bd38      	pop	{r3, r4, r5, pc}
   1c22c:	20021c9c 	.word	0x20021c9c

0001c230 <net_tcp_accept>:
}

int net_tcp_accept(struct net_context *context,
		   net_tcp_accept_cb_t cb,
		   void *user_data)
{
   1c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sockaddr local_addr;
	struct sockaddr *laddr = NULL;
	u16_t lport = 0U;
	int ret;

	NET_ASSERT(context->tcp);
   1c234:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c236:	b088      	sub	sp, #32
   1c238:	4604      	mov	r4, r0
   1c23a:	460e      	mov	r6, r1
   1c23c:	4617      	mov	r7, r2
	NET_ASSERT(context->tcp);
   1c23e:	b973      	cbnz	r3, 1c25e <net_tcp_accept+0x2e>
   1c240:	4933      	ldr	r1, [pc, #204]	; (1c310 <net_tcp_accept+0xe0>)
   1c242:	f640 2334 	movw	r3, #2612	; 0xa34
   1c246:	4a33      	ldr	r2, [pc, #204]	; (1c314 <net_tcp_accept+0xe4>)
   1c248:	4833      	ldr	r0, [pc, #204]	; (1c318 <net_tcp_accept+0xe8>)
   1c24a:	f013 f802 	bl	2f252 <printk>
   1c24e:	4833      	ldr	r0, [pc, #204]	; (1c31c <net_tcp_accept+0xec>)
   1c250:	f012 ffff 	bl	2f252 <printk>
   1c254:	f640 2134 	movw	r1, #2612	; 0xa34
   1c258:	482e      	ldr	r0, [pc, #184]	; (1c314 <net_tcp_accept+0xe4>)
   1c25a:	f013 fafb 	bl	2f854 <assert_post_action>

	if (net_tcp_get_state(context->tcp) != NET_TCP_LISTEN) {
   1c25e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1c260:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1c264:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c268:	2b01      	cmp	r3, #1
   1c26a:	d14b      	bne.n	1c304 <net_tcp_accept+0xd4>
		NET_DBG("Context %p in wrong state %d, should be %d",
			context, context->tcp->state, NET_TCP_LISTEN);
		return -EINVAL;
	}

	if (cb == NULL) {
   1c26c:	b93e      	cbnz	r6, 1c27e <net_tcp_accept+0x4e>
		/* The context is being shut down */
		if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c26e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1c272:	2b06      	cmp	r3, #6
   1c274:	d103      	bne.n	1c27e <net_tcp_accept+0x4e>
			context->tcp->accept_cb = NULL;
   1c276:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
	/* accept callback is only valid for TCP contexts */
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		context->tcp->accept_cb = cb;
	}

	return 0;
   1c27a:	2000      	movs	r0, #0
   1c27c:	e044      	b.n	1c308 <net_tcp_accept+0xd8>
	local_addr.sa_family = net_context_get_family(context);
   1c27e:	4620      	mov	r0, r4
   1c280:	f7ff f80c 	bl	1b29c <net_context_get_family>
   1c284:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (net_context_get_family(context) == AF_INET) {
   1c288:	4620      	mov	r0, r4
   1c28a:	f7ff f807 	bl	1b29c <net_context_get_family>
   1c28e:	2801      	cmp	r0, #1
   1c290:	d135      	bne.n	1c2fe <net_tcp_accept+0xce>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1c292:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1c296:	f1b8 0f00 	cmp.w	r8, #0
   1c29a:	d004      	beq.n	1c2a6 <net_tcp_accept+0x76>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1c29c:	f8d8 3000 	ldr.w	r3, [r8]
   1c2a0:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1c2a2:	f10d 0818 	add.w	r8, sp, #24
		net_sin(&local_addr)->sin_port = lport =
   1c2a6:	8be5      	ldrh	r5, [r4, #30]
   1c2a8:	f8ad 501a 	strh.w	r5, [sp, #26]
	ret = net_tcp_register(net_context_get_family(context),
   1c2ac:	4620      	mov	r0, r4
   1c2ae:	f7fe fff5 	bl	1b29c <net_context_get_family>
   1c2b2:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1c2b6:	b2c1      	uxtb	r1, r0
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1c2b8:	e9cd 4303 	strd	r4, r3, [sp, #12]
			       ntohs(net_sin(&context->remote)->sin_port),
   1c2bc:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
   1c2be:	4b18      	ldr	r3, [pc, #96]	; (1c320 <net_tcp_accept+0xf0>)
	ret = net_tcp_register(net_context_get_family(context),
   1c2c0:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1c2c4:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&context->remote)->sin_port),
   1c2c6:	0203      	lsls	r3, r0, #8
   1c2c8:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1c2cc:	ba6d      	rev16	r5, r5
	ret = net_tcp_register(net_context_get_family(context),
   1c2ce:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1c2d2:	b29b      	uxth	r3, r3
   1c2d4:	b2ad      	uxth	r5, r5
   1c2d6:	bf18      	it	ne
   1c2d8:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1c2dc:	9300      	str	r3, [sp, #0]
   1c2de:	9501      	str	r5, [sp, #4]
   1c2e0:	4643      	mov	r3, r8
   1c2e2:	2006      	movs	r0, #6
   1c2e4:	f7fe fdd8 	bl	1ae98 <net_conn_register>
	if (ret < 0) {
   1c2e8:	2800      	cmp	r0, #0
   1c2ea:	db0d      	blt.n	1c308 <net_tcp_accept+0xd8>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c2ec:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	context->user_data = user_data;
   1c2f0:	6027      	str	r7, [r4, #0]
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c2f2:	2b06      	cmp	r3, #6
   1c2f4:	d1c1      	bne.n	1c27a <net_tcp_accept+0x4a>
		context->tcp->accept_cb = cb;
   1c2f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c2f8:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
   1c2fc:	e7bd      	b.n	1c27a <net_tcp_accept+0x4a>
	u16_t lport = 0U;
   1c2fe:	2500      	movs	r5, #0
	struct sockaddr *laddr = NULL;
   1c300:	46a8      	mov	r8, r5
   1c302:	e7d3      	b.n	1c2ac <net_tcp_accept+0x7c>
		return -EINVAL;
   1c304:	f06f 0015 	mvn.w	r0, #21
}
   1c308:	b008      	add	sp, #32
   1c30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c30e:	bf00      	nop
   1c310:	00037bdf 	.word	0x00037bdf
   1c314:	00037bad 	.word	0x00037bad
   1c318:	00036be5 	.word	0x00036be5
   1c31c:	00037086 	.word	0x00037086
   1c320:	0001bcfd 	.word	0x0001bcfd

0001c324 <net_tcp_connect>:
		    u16_t rport,
		    u16_t lport,
		    k_timeout_t timeout,
		    net_context_connect_cb_t cb,
		    void *user_data)
{
   1c324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c328:	461d      	mov	r5, r3
	int ret;

	NET_ASSERT(context->tcp);
   1c32a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1c32c:	b087      	sub	sp, #28
   1c32e:	4604      	mov	r4, r0
   1c330:	460f      	mov	r7, r1
   1c332:	4691      	mov	r9, r2
   1c334:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(context->tcp);
   1c338:	b973      	cbnz	r3, 1c358 <net_tcp_connect+0x34>
   1c33a:	492a      	ldr	r1, [pc, #168]	; (1c3e4 <net_tcp_connect+0xc0>)
   1c33c:	f640 2384 	movw	r3, #2692	; 0xa84
   1c340:	4a29      	ldr	r2, [pc, #164]	; (1c3e8 <net_tcp_connect+0xc4>)
   1c342:	482a      	ldr	r0, [pc, #168]	; (1c3ec <net_tcp_connect+0xc8>)
   1c344:	f012 ff85 	bl	2f252 <printk>
   1c348:	4829      	ldr	r0, [pc, #164]	; (1c3f0 <net_tcp_connect+0xcc>)
   1c34a:	f012 ff82 	bl	2f252 <printk>
   1c34e:	f640 2184 	movw	r1, #2692	; 0xa84
   1c352:	4825      	ldr	r0, [pc, #148]	; (1c3e8 <net_tcp_connect+0xc4>)
   1c354:	f013 fa7e 	bl	2f854 <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1c358:	f8b4 607a 	ldrh.w	r6, [r4, #122]	; 0x7a
   1c35c:	f3c6 1681 	ubfx	r6, r6, #6, #2

	if (net_context_get_type(context) != SOCK_STREAM) {
   1c360:	2e01      	cmp	r6, #1
   1c362:	d002      	beq.n	1c36a <net_tcp_connect+0x46>
		return -ENOTSUP;
   1c364:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c368:	e036      	b.n	1c3d8 <net_tcp_connect+0xb4>
	}

	/* We need to register a handler, otherwise the SYN-ACK
	 * packet would not be received.
	 */
	ret = net_tcp_register(net_context_get_family(context),
   1c36a:	4620      	mov	r0, r4
   1c36c:	f7fe ff96 	bl	1b29c <net_context_get_family>
   1c370:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1c374:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c378:	4b1e      	ldr	r3, [pc, #120]	; (1c3f4 <net_tcp_connect+0xd0>)
   1c37a:	ba6d      	rev16	r5, r5
   1c37c:	9302      	str	r3, [sp, #8]
   1c37e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1c382:	b2ad      	uxth	r5, r5
   1c384:	ba5b      	rev16	r3, r3
   1c386:	b29b      	uxth	r3, r3
   1c388:	9301      	str	r3, [sp, #4]
   1c38a:	b2c1      	uxtb	r1, r0
   1c38c:	9500      	str	r5, [sp, #0]
   1c38e:	464b      	mov	r3, r9
   1c390:	463a      	mov	r2, r7
   1c392:	2006      	movs	r0, #6
   1c394:	f7fe fd80 	bl	1ae98 <net_conn_register>
			       ntohs(rport),
			       ntohs(lport),
			       tcp_synack_received,
			       context,
			       &context->conn_handler);
	if (ret < 0) {
   1c398:	2800      	cmp	r0, #0
   1c39a:	db1d      	blt.n	1c3d8 <net_tcp_connect+0xb4>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c39c:	4625      	mov	r5, r4
		return ret;
	}

	context->connect_cb = cb;
   1c39e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	context->user_data = user_data;

	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c3a0:	4631      	mov	r1, r6
	context->connect_cb = cb;
   1c3a2:	63a3      	str	r3, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c3a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c3a6:	4620      	mov	r0, r4
	context->user_data = user_data;
   1c3a8:	6023      	str	r3, [r4, #0]
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1c3aa:	f7fe ffb7 	bl	1b31c <net_context_set_state>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c3ae:	f855 0f3c 	ldr.w	r0, [r5, #60]!
   1c3b2:	2102      	movs	r1, #2
   1c3b4:	f7ff f99a 	bl	1b6ec <net_tcp_change_state>
	return send_syn_segment(context, NULL, remote, NET_TCP_SYN, "SYN");
   1c3b8:	2302      	movs	r3, #2
   1c3ba:	463a      	mov	r2, r7
   1c3bc:	2100      	movs	r1, #0
   1c3be:	4628      	mov	r0, r5
   1c3c0:	f016 f9dc 	bl	3277c <send_syn_segment.isra.35>

	send_syn(context, addr);

	/* in tcp_synack_received() we give back this semaphore */
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c3c4:	f1b8 0f00 	cmp.w	r8, #0
   1c3c8:	d005      	beq.n	1c3d6 <net_tcp_connect+0xb2>
	    k_sem_take(&context->tcp->connect_wait, timeout)) {
   1c3ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c3cc:	30a0      	adds	r0, #160	; 0xa0
	return z_impl_k_sem_take(sem, timeout);
   1c3ce:	4641      	mov	r1, r8
   1c3d0:	f00e faa2 	bl	2a918 <z_impl_k_sem_take>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c3d4:	b918      	cbnz	r0, 1c3de <net_tcp_connect+0xba>
		return -ETIMEDOUT;
	}

	return 0;
   1c3d6:	2000      	movs	r0, #0
}
   1c3d8:	b007      	add	sp, #28
   1c3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ETIMEDOUT;
   1c3de:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1c3e2:	e7f9      	b.n	1c3d8 <net_tcp_connect+0xb4>
   1c3e4:	00037bdf 	.word	0x00037bdf
   1c3e8:	00037bad 	.word	0x00037bad
   1c3ec:	00036be5 	.word	0x00036be5
   1c3f0:	00037086 	.word	0x00037086
   1c3f4:	0001bb65 	.word	0x0001bb65

0001c3f8 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c3fc:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   1c3fe:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c402:	4b3b      	ldr	r3, [pc, #236]	; (1c4f0 <connect_request_encode+0xf8>)
   1c404:	4a3b      	ldr	r2, [pc, #236]	; (1c4f4 <connect_request_encode+0xfc>)
{
   1c406:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1c408:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c40c:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c40e:	2804      	cmp	r0, #4
   1c410:	bf0c      	ite	eq
   1c412:	4610      	moveq	r0, r2
   1c414:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1c416:	600f      	str	r7, [r1, #0]
{
   1c418:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1c41a:	f016 fd31 	bl	32e80 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   1c41e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1c422:	4603      	mov	r3, r0
   1c424:	b938      	cbnz	r0, 1c436 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c426:	e9d4 2000 	ldrd	r2, r0, [r4]
   1c42a:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1c42c:	f896 107a 	ldrb.w	r1, [r6, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c430:	d104      	bne.n	1c43c <connect_request_encode+0x44>
		return -ENOMEM;
   1c432:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1c436:	4618      	mov	r0, r3
   1c438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1c43c:	1c50      	adds	r0, r2, #1
   1c43e:	6020      	str	r0, [r4, #0]
   1c440:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1c442:	e9d4 8200 	ldrd	r8, r2, [r4]
   1c446:	4590      	cmp	r8, r2
   1c448:	d0f3      	beq.n	1c432 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1c44a:	f108 0201 	add.w	r2, r8, #1
   1c44e:	6022      	str	r2, [r4, #0]
   1c450:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1c454:	4621      	mov	r1, r4
   1c456:	f8b6 0078 	ldrh.w	r0, [r6, #120]	; 0x78
   1c45a:	f016 fcff 	bl	32e5c <pack_uint16>
	if (err_code != 0) {
   1c45e:	4603      	mov	r3, r0
   1c460:	2800      	cmp	r0, #0
   1c462:	d1e8      	bne.n	1c436 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1c464:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1c468:	f016 fd0a 	bl	32e80 <pack_utf8_str>
	if (err_code != 0) {
   1c46c:	4603      	mov	r3, r0
   1c46e:	2800      	cmp	r0, #0
   1c470:	d1e1      	bne.n	1c436 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1c472:	6df0      	ldr	r0, [r6, #92]	; 0x5c
	u8_t connect_flags = client->clean_session << 1;
   1c474:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1c476:	b1d8      	cbz	r0, 1c4b0 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1c478:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1c47c:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   1c480:	f003 0301 	and.w	r3, r3, #1
   1c484:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1c488:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1c48a:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1c48c:	00db      	lsls	r3, r3, #3
   1c48e:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1c492:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1c494:	f016 fcf4 	bl	32e80 <pack_utf8_str>
		if (err_code != 0) {
   1c498:	4603      	mov	r3, r0
   1c49a:	2800      	cmp	r0, #0
   1c49c:	d1cb      	bne.n	1c436 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1c49e:	6e33      	ldr	r3, [r6, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   1c4a0:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1c4a2:	b313      	cbz	r3, 1c4ea <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   1c4a4:	4618      	mov	r0, r3
   1c4a6:	f016 fceb 	bl	32e80 <pack_utf8_str>
			if (err_code != 0) {
   1c4aa:	4603      	mov	r3, r0
   1c4ac:	2800      	cmp	r0, #0
   1c4ae:	d1c2      	bne.n	1c436 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   1c4b0:	6d70      	ldr	r0, [r6, #84]	; 0x54
   1c4b2:	b138      	cbz	r0, 1c4c4 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1c4b4:	4621      	mov	r1, r4
   1c4b6:	f016 fce3 	bl	32e80 <pack_utf8_str>
		if (err_code != 0) {
   1c4ba:	4603      	mov	r3, r0
   1c4bc:	2800      	cmp	r0, #0
   1c4be:	d1ba      	bne.n	1c436 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1c4c0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1c4c4:	6db0      	ldr	r0, [r6, #88]	; 0x58
   1c4c6:	b138      	cbz	r0, 1c4d8 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1c4c8:	4621      	mov	r1, r4
   1c4ca:	f016 fcd9 	bl	32e80 <pack_utf8_str>
		if (err_code != 0) {
   1c4ce:	4603      	mov	r3, r0
   1c4d0:	2800      	cmp	r0, #0
   1c4d2:	d1b0      	bne.n	1c436 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1c4d4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1c4d8:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c4dc:	4622      	mov	r2, r4
   1c4de:	4639      	mov	r1, r7
}
   1c4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1c4e4:	2010      	movs	r0, #16
   1c4e6:	f016 bce6 	b.w	32eb6 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1c4ea:	f016 fcb7 	bl	32e5c <pack_uint16>
   1c4ee:	e7dc      	b.n	1c4aa <connect_request_encode+0xb2>
   1c4f0:	00035c5c 	.word	0x00035c5c
   1c4f4:	00035c64 	.word	0x00035c64

0001c4f8 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1c4f8:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c4fc:	1a9b      	subs	r3, r3, r2
   1c4fe:	2b01      	cmp	r3, #1
   1c500:	bf81      	itttt	hi
   1c502:	4b05      	ldrhi	r3, [pc, #20]	; (1c518 <disconnect_encode+0x20>)
   1c504:	881b      	ldrhhi	r3, [r3, #0]
   1c506:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1c508:	6803      	ldrhi	r3, [r0, #0]
   1c50a:	bf83      	ittte	hi
   1c50c:	3302      	addhi	r3, #2
   1c50e:	6043      	strhi	r3, [r0, #4]

	return 0;
   1c510:	2000      	movhi	r0, #0
		return -ENOMEM;
   1c512:	f06f 000b 	mvnls.w	r0, #11
}
   1c516:	4770      	bx	lr
   1c518:	00037c09 	.word	0x00037c09

0001c51c <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1c51c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c520:	1a9b      	subs	r3, r3, r2
   1c522:	2b01      	cmp	r3, #1
   1c524:	bf81      	itttt	hi
   1c526:	4b05      	ldrhi	r3, [pc, #20]	; (1c53c <ping_request_encode+0x20>)
   1c528:	881b      	ldrhhi	r3, [r3, #0]
   1c52a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1c52c:	6803      	ldrhi	r3, [r0, #0]
   1c52e:	bf83      	ittte	hi
   1c530:	3302      	addhi	r3, #2
   1c532:	6043      	strhi	r3, [r0, #4]

	return 0;
   1c534:	2000      	movhi	r0, #0
		return -ENOMEM;
   1c536:	f06f 000b 	mvnls.w	r0, #11
}
   1c53a:	4770      	bx	lr
   1c53c:	00037c0b 	.word	0x00037c0b

0001c540 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1c540:	2314      	movs	r3, #20
   1c542:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1c546:	4353      	muls	r3, r2
   1c548:	4a01      	ldr	r2, [pc, #4]	; (1c550 <mqtt_transport_connect+0x10>)
   1c54a:	58d3      	ldr	r3, [r2, r3]
   1c54c:	4718      	bx	r3
   1c54e:	bf00      	nop
   1c550:	00035c6c 	.word	0x00035c6c

0001c554 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   1c554:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1c556:	2514      	movs	r5, #20
   1c558:	4c03      	ldr	r4, [pc, #12]	; (1c568 <mqtt_transport_write+0x14>)
   1c55a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c55e:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1c562:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1c564:	685b      	ldr	r3, [r3, #4]
   1c566:	4718      	bx	r3
   1c568:	00035c6c 	.word	0x00035c6c

0001c56c <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1c56c:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1c56e:	2414      	movs	r4, #20
   1c570:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c574:	4a03      	ldr	r2, [pc, #12]	; (1c584 <mqtt_transport_write_msg+0x18>)
   1c576:	fb04 2303 	mla	r3, r4, r3, r2
}
   1c57a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   1c57e:	689b      	ldr	r3, [r3, #8]
   1c580:	4718      	bx	r3
   1c582:	bf00      	nop
   1c584:	00035c6c 	.word	0x00035c6c

0001c588 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   1c588:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1c58a:	2614      	movs	r6, #20
   1c58c:	4d04      	ldr	r5, [pc, #16]	; (1c5a0 <mqtt_transport_read+0x18>)
   1c58e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1c592:	fb06 5404 	mla	r4, r6, r4, r5
   1c596:	68e4      	ldr	r4, [r4, #12]
   1c598:	46a4      	mov	ip, r4
							 shall_block);
}
   1c59a:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1c59c:	4760      	bx	ip
   1c59e:	bf00      	nop
   1c5a0:	00035c6c 	.word	0x00035c6c

0001c5a4 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1c5a4:	2114      	movs	r1, #20
   1c5a6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c5aa:	4a02      	ldr	r2, [pc, #8]	; (1c5b4 <mqtt_transport_disconnect+0x10>)
   1c5ac:	fb01 2303 	mla	r3, r1, r3, r2
   1c5b0:	691b      	ldr	r3, [r3, #16]
   1c5b2:	4718      	bx	r3
   1c5b4:	00035c6c 	.word	0x00035c6c

0001c5b8 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   1c5b8:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1c5ba:	b510      	push	{r4, lr}
   1c5bc:	b142      	cbz	r2, 1c5d0 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   1c5be:	4b0f      	ldr	r3, [pc, #60]	; (1c5fc <mqtt_mutex_unlock+0x44>)
   1c5c0:	6882      	ldr	r2, [r0, #8]
   1c5c2:	689b      	ldr	r3, [r3, #8]
   1c5c4:	429a      	cmp	r2, r3
   1c5c6:	d115      	bne.n	1c5f4 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   1c5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   1c5cc:	f00c bd4e 	b.w	2906c <z_impl_k_mutex_unlock>
		return -EINVAL;
   1c5d0:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1c5d4:	2343      	movs	r3, #67	; 0x43
   1c5d6:	4a0a      	ldr	r2, [pc, #40]	; (1c600 <mqtt_mutex_unlock+0x48>)
   1c5d8:	490a      	ldr	r1, [pc, #40]	; (1c604 <mqtt_mutex_unlock+0x4c>)
   1c5da:	480b      	ldr	r0, [pc, #44]	; (1c608 <mqtt_mutex_unlock+0x50>)
   1c5dc:	f012 fe39 	bl	2f252 <printk>
   1c5e0:	4621      	mov	r1, r4
   1c5e2:	480a      	ldr	r0, [pc, #40]	; (1c60c <mqtt_mutex_unlock+0x54>)
   1c5e4:	f012 fe35 	bl	2f252 <printk>
}
   1c5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1c5ec:	2143      	movs	r1, #67	; 0x43
   1c5ee:	4804      	ldr	r0, [pc, #16]	; (1c600 <mqtt_mutex_unlock+0x48>)
   1c5f0:	f013 b930 	b.w	2f854 <assert_post_action>
		return -EPERM;
   1c5f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c5f8:	e7ec      	b.n	1c5d4 <mqtt_mutex_unlock+0x1c>
   1c5fa:	bf00      	nop
   1c5fc:	20027418 	.word	0x20027418
   1c600:	00037c39 	.word	0x00037c39
   1c604:	00037c6a 	.word	0x00037c6a
   1c608:	00036be5 	.word	0x00036be5
   1c60c:	00037c73 	.word	0x00037c73

0001c610 <mqtt_mutex_lock>:
{
   1c610:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1c612:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c616:	f00c fc4b 	bl	28eb0 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1c61a:	4604      	mov	r4, r0
   1c61c:	b178      	cbz	r0, 1c63e <mqtt_mutex_lock+0x2e>
   1c61e:	2339      	movs	r3, #57	; 0x39
   1c620:	4a07      	ldr	r2, [pc, #28]	; (1c640 <mqtt_mutex_lock+0x30>)
   1c622:	4908      	ldr	r1, [pc, #32]	; (1c644 <mqtt_mutex_lock+0x34>)
   1c624:	4808      	ldr	r0, [pc, #32]	; (1c648 <mqtt_mutex_lock+0x38>)
   1c626:	f012 fe14 	bl	2f252 <printk>
   1c62a:	4621      	mov	r1, r4
   1c62c:	4807      	ldr	r0, [pc, #28]	; (1c64c <mqtt_mutex_lock+0x3c>)
   1c62e:	f012 fe10 	bl	2f252 <printk>
}
   1c632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1c636:	2139      	movs	r1, #57	; 0x39
   1c638:	4801      	ldr	r0, [pc, #4]	; (1c640 <mqtt_mutex_lock+0x30>)
   1c63a:	f013 b90b 	b.w	2f854 <assert_post_action>
}
   1c63e:	bd10      	pop	{r4, pc}
   1c640:	00037c39 	.word	0x00037c39
   1c644:	00037c6a 	.word	0x00037c6a
   1c648:	00036be5 	.word	0x00036be5
   1c64c:	00037c19 	.word	0x00037c19

0001c650 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   1c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   1c654:	6885      	ldr	r5, [r0, #8]
{
   1c656:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   1c658:	682b      	ldr	r3, [r5, #0]
{
   1c65a:	460e      	mov	r6, r1
   1c65c:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   1c65e:	b963      	cbnz	r3, 1c67a <z_impl_entropy_get_entropy+0x2a>
   1c660:	4909      	ldr	r1, [pc, #36]	; (1c688 <z_impl_entropy_get_entropy+0x38>)
   1c662:	234c      	movs	r3, #76	; 0x4c
   1c664:	4a09      	ldr	r2, [pc, #36]	; (1c68c <z_impl_entropy_get_entropy+0x3c>)
   1c666:	480a      	ldr	r0, [pc, #40]	; (1c690 <z_impl_entropy_get_entropy+0x40>)
   1c668:	f012 fdf3 	bl	2f252 <printk>
   1c66c:	4809      	ldr	r0, [pc, #36]	; (1c694 <z_impl_entropy_get_entropy+0x44>)
   1c66e:	f012 fdf0 	bl	2f252 <printk>
   1c672:	214c      	movs	r1, #76	; 0x4c
   1c674:	4805      	ldr	r0, [pc, #20]	; (1c68c <z_impl_entropy_get_entropy+0x3c>)
   1c676:	f013 f8ed 	bl	2f854 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c67a:	682b      	ldr	r3, [r5, #0]
   1c67c:	463a      	mov	r2, r7
   1c67e:	4631      	mov	r1, r6
   1c680:	4620      	mov	r0, r4
}
   1c682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   1c686:	4718      	bx	r3
   1c688:	00037d81 	.word	0x00037d81
   1c68c:	00037d54 	.word	0x00037d54
   1c690:	00036be5 	.word	0x00036be5
   1c694:	00037da1 	.word	0x00037da1

0001c698 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   1c698:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   1c69a:	4d12      	ldr	r5, [pc, #72]	; (1c6e4 <sys_rand32_get+0x4c>)
   1c69c:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1c69e:	b99c      	cbnz	r4, 1c6c8 <sys_rand32_get+0x30>
   1c6a0:	4811      	ldr	r0, [pc, #68]	; (1c6e8 <sys_rand32_get+0x50>)
   1c6a2:	f00b fd6d 	bl	28180 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
   1c6a6:	4604      	mov	r4, r0
   1c6a8:	b968      	cbnz	r0, 1c6c6 <sys_rand32_get+0x2e>
   1c6aa:	231d      	movs	r3, #29
   1c6ac:	4a0f      	ldr	r2, [pc, #60]	; (1c6ec <sys_rand32_get+0x54>)
   1c6ae:	4910      	ldr	r1, [pc, #64]	; (1c6f0 <sys_rand32_get+0x58>)
   1c6b0:	4810      	ldr	r0, [pc, #64]	; (1c6f4 <sys_rand32_get+0x5c>)
   1c6b2:	f012 fdce 	bl	2f252 <printk>
   1c6b6:	490c      	ldr	r1, [pc, #48]	; (1c6e8 <sys_rand32_get+0x50>)
   1c6b8:	480f      	ldr	r0, [pc, #60]	; (1c6f8 <sys_rand32_get+0x60>)
   1c6ba:	f012 fdca 	bl	2f252 <printk>
   1c6be:	211d      	movs	r1, #29
   1c6c0:	480a      	ldr	r0, [pc, #40]	; (1c6ec <sys_rand32_get+0x54>)
   1c6c2:	f013 f8c7 	bl	2f854 <assert_post_action>
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1c6c6:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1c6c8:	2204      	movs	r2, #4
   1c6ca:	4620      	mov	r0, r4
   1c6cc:	eb0d 0102 	add.w	r1, sp, r2
   1c6d0:	f7ff ffbe 	bl	1c650 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1c6d4:	2800      	cmp	r0, #0
   1c6d6:	da02      	bge.n	1c6de <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1c6d8:	f7fb ff02 	bl	184e0 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1c6dc:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1c6de:	9801      	ldr	r0, [sp, #4]
   1c6e0:	b003      	add	sp, #12
   1c6e2:	bd30      	pop	{r4, r5, pc}
   1c6e4:	20022154 	.word	0x20022154
   1c6e8:	00037c95 	.word	0x00037c95
   1c6ec:	00037ca3 	.word	0x00037ca3
   1c6f0:	00037cdc 	.word	0x00037cdc
   1c6f4:	00036be5 	.word	0x00036be5
   1c6f8:	00037cf1 	.word	0x00037cf1

0001c6fc <default_CSPRNG>:

	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
}

int default_CSPRNG(u8_t *dest, unsigned int size)
{
   1c6fc:	b507      	push	{r0, r1, r2, lr}
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1c6fe:	2200      	movs	r2, #0
   1c700:	9100      	str	r1, [sp, #0]
   1c702:	4603      	mov	r3, r0
   1c704:	4611      	mov	r1, r2
   1c706:	4803      	ldr	r0, [pc, #12]	; (1c714 <default_CSPRNG+0x18>)
   1c708:	f014 fc2c 	bl	30f64 <tc_ctr_prng_generate>
	return res;
}
   1c70c:	b003      	add	sp, #12
   1c70e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c712:	bf00      	nop
   1c714:	20020880 	.word	0x20020880

0001c718 <jwt_add_payload>:
{
   1c718:	b530      	push	{r4, r5, lr}
   1c71a:	b087      	sub	sp, #28
	struct jwt_payload payload = {
   1c71c:	e9cd 1203 	strd	r1, r2, [sp, #12]
	base64_outch(builder, '.');
   1c720:	212e      	movs	r1, #46	; 0x2e
{
   1c722:	4604      	mov	r4, r0
	struct jwt_payload payload = {
   1c724:	9305      	str	r3, [sp, #20]
	base64_outch(builder, '.');
   1c726:	f017 f8ca 	bl	338be <base64_outch>
	int res = json_obj_encode(jwt_payload_desc,
   1c72a:	4b07      	ldr	r3, [pc, #28]	; (1c748 <jwt_add_payload+0x30>)
   1c72c:	9000      	str	r0, [sp, #0]
   1c72e:	aa03      	add	r2, sp, #12
   1c730:	2103      	movs	r1, #3
   1c732:	4806      	ldr	r0, [pc, #24]	; (1c74c <jwt_add_payload+0x34>)
   1c734:	f7fa fd06 	bl	17144 <json_obj_encode>
   1c738:	4605      	mov	r5, r0
	base64_flush(builder);
   1c73a:	4620      	mov	r0, r4
   1c73c:	f017 f8d2 	bl	338e4 <base64_flush>
}
   1c740:	4628      	mov	r0, r5
   1c742:	b007      	add	sp, #28
   1c744:	bd30      	pop	{r4, r5, pc}
   1c746:	bf00      	nop
   1c748:	0003395d 	.word	0x0003395d
   1c74c:	200200dc 	.word	0x200200dc

0001c750 <jwt_sign>:

int jwt_sign(struct jwt_builder *builder,
	     const char *der_key,
	     size_t der_key_len)
{
   1c750:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c752:	4605      	mov	r5, r0
   1c754:	b0b7      	sub	sp, #220	; 0xdc
	struct tc_sha256_state_struct ctx;
	u8_t hash[32], sig[64];
	int res;

	tc_sha256_init(&ctx);
   1c756:	a81a      	add	r0, sp, #104	; 0x68
{
   1c758:	460f      	mov	r7, r1
	tc_sha256_init(&ctx);
   1c75a:	f7fc f98b 	bl	18a74 <tc_sha256_init>
	tc_sha256_update(&ctx, builder->base, builder->buf - builder->base);
   1c75e:	e9d5 1200 	ldrd	r1, r2, [r5]
   1c762:	a81a      	add	r0, sp, #104	; 0x68
   1c764:	1a52      	subs	r2, r2, r1
   1c766:	f014 fae4 	bl	30d32 <tc_sha256_update>
	tc_sha256_final(hash, &ctx);
   1c76a:	a91a      	add	r1, sp, #104	; 0x68
   1c76c:	a802      	add	r0, sp, #8
   1c76e:	f014 fb0c 	bl	30d8a <tc_sha256_final>
	if (prng_init) {
   1c772:	4b1b      	ldr	r3, [pc, #108]	; (1c7e0 <jwt_sign+0x90>)
   1c774:	781c      	ldrb	r4, [r3, #0]
   1c776:	b17c      	cbz	r4, 1c798 <jwt_sign+0x48>
	res = setup_prng();

	if (res != 0) {
		return res;
	}
	uECC_set_rng(&default_CSPRNG);
   1c778:	481a      	ldr	r0, [pc, #104]	; (1c7e4 <jwt_sign+0x94>)
   1c77a:	f7fb ff03 	bl	18584 <uECC_set_rng>

	/* Note that tinycrypt only supports P-256. */
	res = uECC_sign(der_key, hash, sizeof(hash),
   1c77e:	4b1a      	ldr	r3, [pc, #104]	; (1c7e8 <jwt_sign+0x98>)
   1c780:	2220      	movs	r2, #32
   1c782:	9300      	str	r3, [sp, #0]
   1c784:	a902      	add	r1, sp, #8
   1c786:	ab0a      	add	r3, sp, #40	; 0x28
   1c788:	4638      	mov	r0, r7
   1c78a:	f013 fc0c 	bl	2ffa6 <uECC_sign>
			sig, &curve_secp256r1);
	if (res != TC_CRYPTO_SUCCESS) {
   1c78e:	2801      	cmp	r0, #1
   1c790:	d017      	beq.n	1c7c2 <jwt_sign+0x72>
		return -EINVAL;
   1c792:	f06f 0015 	mvn.w	r0, #21
   1c796:	e021      	b.n	1c7dc <jwt_sign+0x8c>
	prng_init = true;
   1c798:	2201      	movs	r2, #1
   1c79a:	ae0a      	add	r6, sp, #40	; 0x28
   1c79c:	701a      	strb	r2, [r3, #0]
		u32_t rv = sys_rand32_get();
   1c79e:	f7ff ff7b 	bl	1c698 <sys_rand32_get>
   1c7a2:	3404      	adds	r4, #4
	for (int i = 0; i < sizeof(entropy); i += sizeof(u32_t)) {
   1c7a4:	2c20      	cmp	r4, #32
   1c7a6:	f846 0b04 	str.w	r0, [r6], #4
   1c7aa:	d1f8      	bne.n	1c79e <jwt_sign+0x4e>
	int res = tc_ctr_prng_init(&prng_state,
   1c7ac:	2319      	movs	r3, #25
   1c7ae:	4622      	mov	r2, r4
   1c7b0:	9300      	str	r3, [sp, #0]
   1c7b2:	a90a      	add	r1, sp, #40	; 0x28
   1c7b4:	4b0d      	ldr	r3, [pc, #52]	; (1c7ec <jwt_sign+0x9c>)
   1c7b6:	480e      	ldr	r0, [pc, #56]	; (1c7f0 <jwt_sign+0xa0>)
   1c7b8:	f014 fb86 	bl	30ec8 <tc_ctr_prng_init>
	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
   1c7bc:	2801      	cmp	r0, #1
   1c7be:	d0db      	beq.n	1c778 <jwt_sign+0x28>
   1c7c0:	e7e7      	b.n	1c792 <jwt_sign+0x42>
	}

	base64_outch(builder, '.');
   1c7c2:	212e      	movs	r1, #46	; 0x2e
   1c7c4:	4628      	mov	r0, r5
   1c7c6:	f017 f87a 	bl	338be <base64_outch>
	base64_append_bytes(sig, sizeof(sig), builder);
   1c7ca:	462a      	mov	r2, r5
   1c7cc:	2140      	movs	r1, #64	; 0x40
   1c7ce:	a80a      	add	r0, sp, #40	; 0x28
   1c7d0:	f017 f8c4 	bl	3395c <base64_append_bytes>
	base64_flush(builder);
   1c7d4:	4628      	mov	r0, r5
   1c7d6:	f017 f885 	bl	338e4 <base64_flush>

	return 0;
   1c7da:	2000      	movs	r0, #0
}
   1c7dc:	b037      	add	sp, #220	; 0xdc
   1c7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7e0:	20027ef1 	.word	0x20027ef1
   1c7e4:	0001c6fd 	.word	0x0001c6fd
   1c7e8:	00035cb4 	.word	0x00035cb4
   1c7ec:	00037dc7 	.word	0x00037dc7
   1c7f0:	20020880 	.word	0x20020880

0001c7f4 <jwt_init_builder>:
		     size_t buffer_size)
{
	builder->base = buffer;
	builder->buf = buffer;
	builder->len = buffer_size;
	builder->overflowed = false;
   1c7f4:	2300      	movs	r3, #0
{
   1c7f6:	b513      	push	{r0, r1, r4, lr}
	builder->buf = buffer;
   1c7f8:	e9c0 1100 	strd	r1, r1, [r0]
	builder->len = buffer_size;
   1c7fc:	6082      	str	r2, [r0, #8]
	builder->overflowed = false;
   1c7fe:	7303      	strb	r3, [r0, #12]
	builder->pending = 0;
   1c800:	6103      	str	r3, [r0, #16]
{
   1c802:	4604      	mov	r4, r0
	int res = json_obj_encode(jwt_header_desc, ARRAY_SIZE(jwt_header_desc),
   1c804:	9000      	str	r0, [sp, #0]
   1c806:	4b06      	ldr	r3, [pc, #24]	; (1c820 <jwt_init_builder+0x2c>)
   1c808:	4a06      	ldr	r2, [pc, #24]	; (1c824 <jwt_init_builder+0x30>)
   1c80a:	2102      	movs	r1, #2
   1c80c:	4806      	ldr	r0, [pc, #24]	; (1c828 <jwt_init_builder+0x34>)
   1c80e:	f7fa fc99 	bl	17144 <json_obj_encode>
	if (res != 0) {
   1c812:	b910      	cbnz	r0, 1c81a <jwt_init_builder+0x26>
	base64_flush(builder);
   1c814:	4620      	mov	r0, r4
   1c816:	f017 f865 	bl	338e4 <base64_flush>

	jwt_add_header(builder);

	return 0;
}
   1c81a:	2000      	movs	r0, #0
   1c81c:	b002      	add	sp, #8
   1c81e:	bd10      	pop	{r4, pc}
   1c820:	0003395d 	.word	0x0003395d
   1c824:	00035d64 	.word	0x00035d64
   1c828:	200200bc 	.word	0x200200bc

0001c82c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c82c:	b570      	push	{r4, r5, r6, lr}
   1c82e:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c830:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c832:	460d      	mov	r5, r1
   1c834:	b961      	cbnz	r1, 1c850 <gpio_nrfx_manage_callback+0x24>
   1c836:	4922      	ldr	r1, [pc, #136]	; (1c8c0 <gpio_nrfx_manage_callback+0x94>)
   1c838:	2324      	movs	r3, #36	; 0x24
   1c83a:	4a22      	ldr	r2, [pc, #136]	; (1c8c4 <gpio_nrfx_manage_callback+0x98>)
   1c83c:	4822      	ldr	r0, [pc, #136]	; (1c8c8 <gpio_nrfx_manage_callback+0x9c>)
   1c83e:	f012 fd08 	bl	2f252 <printk>
   1c842:	4822      	ldr	r0, [pc, #136]	; (1c8cc <gpio_nrfx_manage_callback+0xa0>)
   1c844:	f012 fd05 	bl	2f252 <printk>
   1c848:	2124      	movs	r1, #36	; 0x24
   1c84a:	481e      	ldr	r0, [pc, #120]	; (1c8c4 <gpio_nrfx_manage_callback+0x98>)
   1c84c:	f013 f802 	bl	2f854 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1c850:	686b      	ldr	r3, [r5, #4]
   1c852:	b963      	cbnz	r3, 1c86e <gpio_nrfx_manage_callback+0x42>
   1c854:	491e      	ldr	r1, [pc, #120]	; (1c8d0 <gpio_nrfx_manage_callback+0xa4>)
   1c856:	2325      	movs	r3, #37	; 0x25
   1c858:	4a1a      	ldr	r2, [pc, #104]	; (1c8c4 <gpio_nrfx_manage_callback+0x98>)
   1c85a:	481b      	ldr	r0, [pc, #108]	; (1c8c8 <gpio_nrfx_manage_callback+0x9c>)
   1c85c:	f012 fcf9 	bl	2f252 <printk>
   1c860:	481c      	ldr	r0, [pc, #112]	; (1c8d4 <gpio_nrfx_manage_callback+0xa8>)
   1c862:	f012 fcf6 	bl	2f252 <printk>
   1c866:	2125      	movs	r1, #37	; 0x25
   1c868:	4816      	ldr	r0, [pc, #88]	; (1c8c4 <gpio_nrfx_manage_callback+0x98>)
   1c86a:	f012 fff3 	bl	2f854 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1c86e:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c870:	b15b      	cbz	r3, 1c88a <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c872:	2200      	movs	r2, #0
   1c874:	429d      	cmp	r5, r3
   1c876:	d113      	bne.n	1c8a0 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1c878:	682b      	ldr	r3, [r5, #0]
   1c87a:	b95a      	cbnz	r2, 1c894 <gpio_nrfx_manage_callback+0x68>
   1c87c:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1c87e:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c880:	4295      	cmp	r5, r2
   1c882:	d100      	bne.n	1c886 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1c884:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1c886:	2300      	movs	r3, #0
   1c888:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1c88a:	b976      	cbnz	r6, 1c8aa <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c88c:	2000      	movs	r0, #0
				     callback, set);
}
   1c88e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c890:	460b      	mov	r3, r1
   1c892:	e7ef      	b.n	1c874 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   1c894:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c896:	68a3      	ldr	r3, [r4, #8]
   1c898:	429d      	cmp	r5, r3
	list->tail = node;
   1c89a:	bf08      	it	eq
   1c89c:	60a2      	streq	r2, [r4, #8]
   1c89e:	e7f2      	b.n	1c886 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c8a0:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1c8a2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8a4:	2900      	cmp	r1, #0
   1c8a6:	d1f3      	bne.n	1c890 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c8a8:	b13e      	cbz	r6, 1c8ba <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1c8aa:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1c8ac:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c8ae:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1c8b0:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c8b2:	2800      	cmp	r0, #0
   1c8b4:	d1ea      	bne.n	1c88c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c8b6:	60a5      	str	r5, [r4, #8]
   1c8b8:	e7e9      	b.n	1c88e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1c8ba:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c8be:	e7e6      	b.n	1c88e <gpio_nrfx_manage_callback+0x62>
   1c8c0:	00037e2b 	.word	0x00037e2b
   1c8c4:	00037dfe 	.word	0x00037dfe
   1c8c8:	00036be5 	.word	0x00036be5
   1c8cc:	00037e34 	.word	0x00037e34
   1c8d0:	00037e43 	.word	0x00037e43
   1c8d4:	00037e55 	.word	0x00037e55

0001c8d8 <nrf_gpio_pin_port_decode.isra.9.part.10>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1c8d8:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c8da:	4c07      	ldr	r4, [pc, #28]	; (1c8f8 <nrf_gpio_pin_port_decode.isra.9.part.10+0x20>)
   1c8dc:	4907      	ldr	r1, [pc, #28]	; (1c8fc <nrf_gpio_pin_port_decode.isra.9.part.10+0x24>)
   1c8de:	4622      	mov	r2, r4
   1c8e0:	4807      	ldr	r0, [pc, #28]	; (1c900 <nrf_gpio_pin_port_decode.isra.9.part.10+0x28>)
   1c8e2:	f240 230d 	movw	r3, #525	; 0x20d
   1c8e6:	f012 fcb4 	bl	2f252 <printk>
   1c8ea:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & 0x1F;
        return NRF_P1;
    }
#endif
}
   1c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c8f0:	f240 210d 	movw	r1, #525	; 0x20d
   1c8f4:	f012 bfae 	b.w	2f854 <assert_post_action>
   1c8f8:	00037e98 	.word	0x00037e98
   1c8fc:	00037ecb 	.word	0x00037ecb
   1c900:	00036be5 	.word	0x00036be5

0001c904 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1c904:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1c906:	4b09      	ldr	r3, [pc, #36]	; (1c92c <gpio_nrfx_init+0x28>)
   1c908:	781a      	ldrb	r2, [r3, #0]
   1c90a:	b96a      	cbnz	r2, 1c928 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1c90c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c90e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1c910:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c912:	2105      	movs	r1, #5
   1c914:	f7fc f96c 	bl	18bf0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1c918:	2031      	movs	r0, #49	; 0x31
   1c91a:	f7fc f959 	bl	18bd0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c91e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c922:	4b03      	ldr	r3, [pc, #12]	; (1c930 <gpio_nrfx_init+0x2c>)
   1c924:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1c928:	2000      	movs	r0, #0
   1c92a:	bd08      	pop	{r3, pc}
   1c92c:	20027ef2 	.word	0x20027ef2
   1c930:	40031000 	.word	0x40031000

0001c934 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c934:	4b2e      	ldr	r3, [pc, #184]	; (1c9f0 <gpio_nrfx_config+0xbc>)
{
   1c936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c93a:	4013      	ands	r3, r2
   1c93c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c940:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c942:	d044      	beq.n	1c9ce <gpio_nrfx_config+0x9a>
   1c944:	d808      	bhi.n	1c958 <gpio_nrfx_config+0x24>
   1c946:	2b02      	cmp	r3, #2
   1c948:	d043      	beq.n	1c9d2 <gpio_nrfx_config+0x9e>
   1c94a:	2b06      	cmp	r3, #6
   1c94c:	d043      	beq.n	1c9d6 <gpio_nrfx_config+0xa2>
   1c94e:	2b00      	cmp	r3, #0
   1c950:	d041      	beq.n	1c9d6 <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1c952:	f06f 0015 	mvn.w	r0, #21
   1c956:	e038      	b.n	1c9ca <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1c95c:	d03d      	beq.n	1c9da <gpio_nrfx_config+0xa6>
   1c95e:	d804      	bhi.n	1c96a <gpio_nrfx_config+0x36>
   1c960:	4c24      	ldr	r4, [pc, #144]	; (1c9f4 <gpio_nrfx_config+0xc0>)
   1c962:	42a3      	cmp	r3, r4
   1c964:	d1f5      	bne.n	1c952 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0D1;
   1c966:	2407      	movs	r4, #7
   1c968:	e006      	b.n	1c978 <gpio_nrfx_config+0x44>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c96a:	4c23      	ldr	r4, [pc, #140]	; (1c9f8 <gpio_nrfx_config+0xc4>)
   1c96c:	42a3      	cmp	r3, r4
   1c96e:	d036      	beq.n	1c9de <gpio_nrfx_config+0xaa>
   1c970:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1c974:	d1ed      	bne.n	1c952 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0H1;
   1c976:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1c978:	06d6      	lsls	r6, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1c97a:	bf54      	ite	pl
   1c97c:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1c980:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c982:	f482 7380 	eor.w	r3, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1c986:	0595      	lsls	r5, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1c988:	f3c2 2640 	ubfx	r6, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c98c:	f3c3 2800 	ubfx	r8, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1c990:	d505      	bpl.n	1c99e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c992:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c994:	6845      	ldr	r5, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c996:	d524      	bpl.n	1c9e2 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1c998:	2301      	movs	r3, #1
   1c99a:	408b      	lsls	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1c99c:	60ab      	str	r3, [r5, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1c99e:	7a05      	ldrb	r5, [r0, #8]
   1c9a0:	f001 011f 	and.w	r1, r1, #31
   1c9a4:	ea41 1545 	orr.w	r5, r1, r5, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c9a8:	4628      	mov	r0, r5
   1c9aa:	f016 ffec 	bl	33986 <nrf_gpio_pin_present_check>
   1c9ae:	b908      	cbnz	r0, 1c9b4 <gpio_nrfx_config+0x80>
   1c9b0:	f7ff ff92 	bl	1c8d8 <nrf_gpio_pin_port_decode.isra.9.part.10>
	return 0;
   1c9b4:	2000      	movs	r0, #0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1c9b6:	ea46 0348 	orr.w	r3, r6, r8, lsl #1
   1c9ba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c9be:	4a0f      	ldr	r2, [pc, #60]	; (1c9fc <gpio_nrfx_config+0xc8>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1c9c0:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c9c4:	3580      	adds	r5, #128	; 0x80
   1c9c6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
}
   1c9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1c9ce:	2401      	movs	r4, #1
   1c9d0:	e7d2      	b.n	1c978 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0S1;
   1c9d2:	2404      	movs	r4, #4
   1c9d4:	e7d0      	b.n	1c978 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0S1;
   1c9d6:	461c      	mov	r4, r3
   1c9d8:	e7ce      	b.n	1c978 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0H1;
   1c9da:	2402      	movs	r4, #2
   1c9dc:	e7cc      	b.n	1c978 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0H1;
   1c9de:	2405      	movs	r4, #5
   1c9e0:	e7ca      	b.n	1c978 <gpio_nrfx_config+0x44>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1c9e2:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1c9e4:	bf42      	ittt	mi
   1c9e6:	2301      	movmi	r3, #1
   1c9e8:	408b      	lslmi	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1c9ea:	60eb      	strmi	r3, [r5, #12]
   1c9ec:	e7d7      	b.n	1c99e <gpio_nrfx_config+0x6a>
   1c9ee:	bf00      	nop
   1c9f0:	00f00006 	.word	0x00f00006
   1c9f4:	00100006 	.word	0x00100006
   1c9f8:	00400002 	.word	0x00400002
   1c9fc:	40842500 	.word	0x40842500

0001ca00 <nrf_gpio_cfg_sense_set>:
{
   1ca00:	b538      	push	{r3, r4, r5, lr}
   1ca02:	4605      	mov	r5, r0
   1ca04:	460c      	mov	r4, r1
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ca06:	f016 ffbe 	bl	33986 <nrf_gpio_pin_present_check>
   1ca0a:	b908      	cbnz	r0, 1ca10 <nrf_gpio_cfg_sense_set+0x10>
   1ca0c:	f7ff ff64 	bl	1c8d8 <nrf_gpio_pin_port_decode.isra.9.part.10>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1ca10:	4805      	ldr	r0, [pc, #20]	; (1ca28 <nrf_gpio_cfg_sense_set+0x28>)
   1ca12:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1ca16:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   1ca1a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1ca1e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   1ca22:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1ca26:	bd38      	pop	{r3, r4, r5, pc}
   1ca28:	40842500 	.word	0x40842500

0001ca2c <gpiote_pin_int_cfg>:
{
   1ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca30:	6843      	ldr	r3, [r0, #4]
   1ca32:	f001 041f 	and.w	r4, r1, #31
   1ca36:	7a1b      	ldrb	r3, [r3, #8]
{
   1ca38:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca3a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ca3e:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1ca40:	4e46      	ldr	r6, [pc, #280]	; (1cb5c <gpiote_pin_int_cfg+0x130>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1ca42:	68c7      	ldr	r7, [r0, #12]
   1ca44:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1ca48:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ca4a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1ca4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1ca52:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1ca56:	428c      	cmp	r4, r1
   1ca58:	d167      	bne.n	1cb2a <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   1ca5a:	fa22 f103 	lsr.w	r1, r2, r3
   1ca5e:	07c9      	lsls	r1, r1, #31
   1ca60:	d563      	bpl.n	1cb2a <gpiote_pin_int_cfg+0xfe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1ca62:	009a      	lsls	r2, r3, #2
   1ca64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ca68:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1ca6c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1ca70:	f021 0101 	bic.w	r1, r1, #1
   1ca74:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1ca78:	2201      	movs	r2, #1
   1ca7a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   1ca7e:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ca82:	4620      	mov	r0, r4
   1ca84:	2100      	movs	r1, #0
   1ca86:	f7ff ffbb 	bl	1ca00 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1ca8a:	68f8      	ldr	r0, [r7, #12]
   1ca8c:	40e8      	lsrs	r0, r5
   1ca8e:	f010 0001 	ands.w	r0, r0, #1
   1ca92:	d048      	beq.n	1cb26 <gpiote_pin_int_cfg+0xfa>
   1ca94:	6938      	ldr	r0, [r7, #16]
   1ca96:	40e8      	lsrs	r0, r5
   1ca98:	f010 0001 	ands.w	r0, r0, #1
   1ca9c:	d043      	beq.n	1cb26 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   1ca9e:	69b8      	ldr	r0, [r7, #24]
   1caa0:	40e8      	lsrs	r0, r5
   1caa2:	f010 0801 	ands.w	r8, r0, #1
   1caa6:	d04c      	beq.n	1cb42 <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   1caa8:	69fb      	ldr	r3, [r7, #28]
   1caaa:	40eb      	lsrs	r3, r5
   1caac:	07db      	lsls	r3, r3, #31
   1caae:	d440      	bmi.n	1cb32 <gpiote_pin_int_cfg+0x106>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1cab0:	697b      	ldr	r3, [r7, #20]
   1cab2:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1cab6:	f015 0f01 	tst.w	r5, #1
   1caba:	bf14      	ite	ne
   1cabc:	2501      	movne	r5, #1
   1cabe:	2502      	moveq	r5, #2
   1cac0:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1cac2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1cac6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1caca:	f010 0003 	ands.w	r0, r0, #3
   1cace:	d132      	bne.n	1cb36 <gpiote_pin_int_cfg+0x10a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cad0:	008b      	lsls	r3, r1, #2
   1cad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cad6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1cada:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cade:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cae0:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1cae4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1cae8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1caec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1caf0:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1caf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1caf8:	4314      	orrs	r4, r2
			nrf_gpiote_event_t evt =
   1cafa:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1cafe:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   1cb00:	b292      	uxth	r2, r2
   1cb02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cb06:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cb0a:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cb0e:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1cb10:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cb14:	f042 0201 	orr.w	r2, r2, #1
   1cb18:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1cb1c:	2301      	movs	r3, #1
   1cb1e:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   1cb22:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   1cb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cb2a:	3301      	adds	r3, #1
   1cb2c:	2b08      	cmp	r3, #8
   1cb2e:	d18c      	bne.n	1ca4a <gpiote_pin_int_cfg+0x1e>
   1cb30:	e7a7      	b.n	1ca82 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1cb32:	2503      	movs	r5, #3
   1cb34:	e7c4      	b.n	1cac0 <gpiote_pin_int_cfg+0x94>
   1cb36:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1cb38:	2908      	cmp	r1, #8
   1cb3a:	d1c2      	bne.n	1cac2 <gpiote_pin_int_cfg+0x96>
	return -ENODEV;
   1cb3c:	f06f 0012 	mvn.w	r0, #18
   1cb40:	e7f1      	b.n	1cb26 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cb42:	697b      	ldr	r3, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1cb44:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cb46:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1cb4a:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1cb4e:	bf0c      	ite	eq
   1cb50:	2103      	moveq	r1, #3
   1cb52:	2102      	movne	r1, #2
   1cb54:	f7ff ff54 	bl	1ca00 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1cb58:	4640      	mov	r0, r8
   1cb5a:	e7e4      	b.n	1cb26 <gpiote_pin_int_cfg+0xfa>
   1cb5c:	40031000 	.word	0x40031000

0001cb60 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1cb60:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb68:	4605      	mov	r5, r0
   1cb6a:	460f      	mov	r7, r1
   1cb6c:	4690      	mov	r8, r2
   1cb6e:	461e      	mov	r6, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1cb70:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1cb72:	d13c      	bne.n	1cbee <gpio_nrfx_pin_interrupt_configure+0x8e>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cb74:	6843      	ldr	r3, [r0, #4]
   1cb76:	f001 091f 	and.w	r9, r1, #31
   1cb7a:	7a1b      	ldrb	r3, [r3, #8]
   1cb7c:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cb80:	4648      	mov	r0, r9
   1cb82:	f016 ff00 	bl	33986 <nrf_gpio_pin_present_check>
   1cb86:	b908      	cbnz	r0, 1cb8c <gpio_nrfx_pin_interrupt_configure+0x2c>
   1cb88:	f7ff fea6 	bl	1c8d8 <nrf_gpio_pin_port_decode.isra.9.part.10>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cb8c:	4b1f      	ldr	r3, [pc, #124]	; (1cc0c <gpio_nrfx_pin_interrupt_configure+0xac>)
   1cb8e:	f109 0980 	add.w	r9, r9, #128	; 0x80
   1cb92:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1cb96:	07db      	lsls	r3, r3, #31
   1cb98:	d433      	bmi.n	1cc02 <gpio_nrfx_pin_interrupt_configure+0xa2>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cb9a:	2301      	movs	r3, #1
   1cb9c:	68e2      	ldr	r2, [r4, #12]
   1cb9e:	40bb      	lsls	r3, r7
   1cba0:	4313      	orrs	r3, r2
   1cba2:	60e3      	str	r3, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cba4:	2301      	movs	r3, #1
   1cba6:	6922      	ldr	r2, [r4, #16]
   1cba8:	40bb      	lsls	r3, r7
   1cbaa:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   1cbae:	bf14      	ite	ne
   1cbb0:	431a      	orrne	r2, r3
   1cbb2:	439a      	biceq	r2, r3
   1cbb4:	6122      	str	r2, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1cbb6:	69a2      	ldr	r2, [r4, #24]
   1cbb8:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1cbbc:	bf0c      	ite	eq
   1cbbe:	431a      	orreq	r2, r3
   1cbc0:	439a      	bicne	r2, r3
   1cbc2:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1cbc4:	69e2      	ldr	r2, [r4, #28]
   1cbc6:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
   1cbca:	bf0c      	ite	eq
   1cbcc:	431a      	orreq	r2, r3
   1cbce:	439a      	bicne	r2, r3
   1cbd0:	61e2      	str	r2, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1cbd2:	6962      	ldr	r2, [r4, #20]
   1cbd4:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
   1cbd8:	bf0c      	ite	eq
   1cbda:	4313      	orreq	r3, r2
   1cbdc:	ea22 0303 	bicne.w	r3, r2, r3
   1cbe0:	6163      	str	r3, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   1cbe2:	4639      	mov	r1, r7
   1cbe4:	4628      	mov	r0, r5
}
   1cbe6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return gpiote_pin_int_cfg(port, pin);
   1cbea:	f7ff bf1f 	b.w	1ca2c <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cbee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1cbf2:	d1d2      	bne.n	1cb9a <gpio_nrfx_pin_interrupt_configure+0x3a>
   1cbf4:	2301      	movs	r3, #1
   1cbf6:	fa03 f201 	lsl.w	r2, r3, r1
   1cbfa:	68e3      	ldr	r3, [r4, #12]
   1cbfc:	ea23 0302 	bic.w	r3, r3, r2
   1cc00:	e7cf      	b.n	1cba2 <gpio_nrfx_pin_interrupt_configure+0x42>
}
   1cc02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc0a:	bf00      	nop
   1cc0c:	40842500 	.word	0x40842500

0001cc10 <gpiote_event_handler>:
{
   1cc10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cc14:	4f53      	ldr	r7, [pc, #332]	; (1cd64 <gpiote_event_handler+0x154>)
   1cc16:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   1cc18:	2e00      	cmp	r6, #0
   1cc1a:	d05c      	beq.n	1ccd6 <gpiote_event_handler+0xc6>
	u32_t bit = 1U << pin;
   1cc1c:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   1cc20:	f04f 0900 	mov.w	r9, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1cc24:	4a50      	ldr	r2, [pc, #320]	; (1cd68 <gpiote_event_handler+0x158>)
   1cc26:	68d3      	ldr	r3, [r2, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1cc28:	f8d2 a004 	ldr.w	sl, [r2, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1cc2c:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
   1cc30:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1cc32:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   1cc36:	430a      	orrs	r2, r1
   1cc38:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1cc3c:	f8da 2004 	ldr.w	r2, [sl, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1cc40:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   1cc42:	6914      	ldr	r4, [r2, #16]
   1cc44:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   1cc46:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1cc4a:	bb8d      	cbnz	r5, 1ccb0 <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cc4c:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1cc4e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1cc50:	2001      	movs	r0, #1
   1cc52:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1cc54:	4945      	ldr	r1, [pc, #276]	; (1cd6c <gpiote_event_handler+0x15c>)
   1cc56:	4d46      	ldr	r5, [pc, #280]	; (1cd70 <gpiote_event_handler+0x160>)
   1cc58:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1cc5c:	fa00 fc03 	lsl.w	ip, r0, r3
   1cc60:	ea1c 0f02 	tst.w	ip, r2
   1cc64:	d00d      	beq.n	1cc82 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cc66:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   1cc6a:	b152      	cbz	r2, 1cc82 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cc6c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1cc70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cc74:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cc78:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cc7c:	fa00 f202 	lsl.w	r2, r0, r2
   1cc80:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cc82:	3301      	adds	r3, #1
   1cc84:	2b08      	cmp	r3, #8
   1cc86:	d1e7      	bne.n	1cc58 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   1cc88:	bb3c      	cbnz	r4, 1ccda <gpiote_event_handler+0xca>
	if (port_event) {
   1cc8a:	b17e      	cbz	r6, 1ccac <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   1cc8c:	2601      	movs	r6, #1
	u32_t pin = 0U;
   1cc8e:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1cc90:	4b35      	ldr	r3, [pc, #212]	; (1cd68 <gpiote_event_handler+0x158>)
   1cc92:	68dd      	ldr	r5, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1cc94:	f8d3 8004 	ldr.w	r8, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1cc98:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   1cc9c:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1cc9e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   1cca2:	4313      	orrs	r3, r2
   1cca4:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1cca8:	2c00      	cmp	r4, #0
   1ccaa:	d145      	bne.n	1cd38 <gpiote_event_handler+0x128>
}
   1ccac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   1ccb0:	ea15 0f08 	tst.w	r5, r8
   1ccb4:	d00a      	beq.n	1cccc <gpiote_event_handler+0xbc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ccb6:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1ccba:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ccbe:	2100      	movs	r1, #0
   1ccc0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1ccc4:	f7ff fe9c 	bl	1ca00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ccc8:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1cccc:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1ccd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1ccd4:	e7b9      	b.n	1cc4a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1ccd6:	4634      	mov	r4, r6
   1ccd8:	e7b9      	b.n	1cc4e <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1ccda:	4b23      	ldr	r3, [pc, #140]	; (1cd68 <gpiote_event_handler+0x158>)
   1ccdc:	f8d3 900c 	ldr.w	r9, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cce0:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1cce4:	2d00      	cmp	r5, #0
   1cce6:	d0d0      	beq.n	1cc8a <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cce8:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ccea:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   1ccec:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1cd7c <gpiote_event_handler+0x16c>
   1ccf0:	f8df b08c 	ldr.w	fp, [pc, #140]	; 1cd80 <gpiote_event_handler+0x170>
		if ((cb->pin_mask & pins) & data->int_en) {
   1ccf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ccf8:	68aa      	ldr	r2, [r5, #8]
   1ccfa:	4023      	ands	r3, r4
   1ccfc:	4213      	tst	r3, r2
   1ccfe:	d016      	beq.n	1cd2e <gpiote_event_handler+0x11e>
			__ASSERT(cb->handler, "No callback handler!");
   1cd00:	686b      	ldr	r3, [r5, #4]
   1cd02:	b973      	cbnz	r3, 1cd22 <gpiote_event_handler+0x112>
   1cd04:	4659      	mov	r1, fp
   1cd06:	f240 13a7 	movw	r3, #423	; 0x1a7
   1cd0a:	4652      	mov	r2, sl
   1cd0c:	4819      	ldr	r0, [pc, #100]	; (1cd74 <gpiote_event_handler+0x164>)
   1cd0e:	f012 faa0 	bl	2f252 <printk>
   1cd12:	4819      	ldr	r0, [pc, #100]	; (1cd78 <gpiote_event_handler+0x168>)
   1cd14:	f012 fa9d 	bl	2f252 <printk>
   1cd18:	f240 11a7 	movw	r1, #423	; 0x1a7
   1cd1c:	4650      	mov	r0, sl
   1cd1e:	f012 fd99 	bl	2f854 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cd22:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1cd26:	4629      	mov	r1, r5
   1cd28:	4022      	ands	r2, r4
   1cd2a:	4640      	mov	r0, r8
   1cd2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cd2e:	2f00      	cmp	r7, #0
   1cd30:	d0ab      	beq.n	1cc8a <gpiote_event_handler+0x7a>
   1cd32:	463d      	mov	r5, r7
   1cd34:	683f      	ldr	r7, [r7, #0]
   1cd36:	e7dd      	b.n	1ccf4 <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
   1cd38:	4226      	tst	r6, r4
   1cd3a:	d010      	beq.n	1cd5e <gpiote_event_handler+0x14e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cd3c:	696b      	ldr	r3, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cd3e:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cd42:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   1cd44:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cd48:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1cd4c:	bf0c      	ite	eq
   1cd4e:	2103      	moveq	r1, #3
   1cd50:	2102      	movne	r1, #2
   1cd52:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   1cd56:	f7ff fe53 	bl	1ca00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1cd5a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1cd5e:	3701      	adds	r7, #1
		bit <<= 1;
   1cd60:	0076      	lsls	r6, r6, #1
   1cd62:	e7a1      	b.n	1cca8 <gpiote_event_handler+0x98>
   1cd64:	4003117c 	.word	0x4003117c
   1cd68:	200204e4 	.word	0x200204e4
   1cd6c:	40031000 	.word	0x40031000
   1cd70:	40031100 	.word	0x40031100
   1cd74:	00036be5 	.word	0x00036be5
   1cd78:	00037e55 	.word	0x00037e55
   1cd7c:	00037e6c 	.word	0x00037e6c
   1cd80:	0003842e 	.word	0x0003842e

0001cd84 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   1cd84:	b510      	push	{r4, lr}
   1cd86:	4604      	mov	r4, r0
   1cd88:	2200      	movs	r2, #0
   1cd8a:	2101      	movs	r1, #1
   1cd8c:	200a      	movs	r0, #10
   1cd8e:	f7fb ff2f 	bl	18bf0 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1cd92:	6860      	ldr	r0, [r4, #4]
   1cd94:	4623      	mov	r3, r4
   1cd96:	4a06      	ldr	r2, [pc, #24]	; (1cdb0 <twim_2_init+0x2c>)
   1cd98:	f100 0108 	add.w	r1, r0, #8
   1cd9c:	f00a fd54 	bl	27848 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1cda0:	4b04      	ldr	r3, [pc, #16]	; (1cdb4 <twim_2_init+0x30>)
   1cda2:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
   1cda4:	bf14      	ite	ne
   1cda6:	f06f 000f 	mvnne.w	r0, #15
   1cdaa:	2000      	moveq	r0, #0
   1cdac:	bd10      	pop	{r4, pc}
   1cdae:	bf00      	nop
   1cdb0:	0001ce71 	.word	0x0001ce71
   1cdb4:	0bad0000 	.word	0x0bad0000

0001cdb8 <i2c_nrfx_twim_transfer>:
{
   1cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdbc:	4604      	mov	r4, r0
   1cdbe:	b087      	sub	sp, #28
   1cdc0:	460d      	mov	r5, r1
   1cdc2:	4691      	mov	r9, r2
   1cdc4:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1cdc6:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1cdc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cdcc:	f00d fda4 	bl	2a918 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   1cdd0:	6860      	ldr	r0, [r4, #4]
   1cdd2:	f00a fdab 	bl	2792c <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1cdd6:	2700      	movs	r7, #0
		if (res != NRFX_SUCCESS) {
   1cdd8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1ce6c <i2c_nrfx_twim_transfer+0xb4>
	for (size_t i = 0; i < num_msgs; i++) {
   1cddc:	454f      	cmp	r7, r9
   1cdde:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1cde2:	d301      	bcc.n	1cde8 <i2c_nrfx_twim_transfer+0x30>
	int ret = 0;
   1cde4:	2500      	movs	r5, #0
   1cde6:	e022      	b.n	1ce2e <i2c_nrfx_twim_transfer+0x76>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1cde8:	7a2e      	ldrb	r6, [r5, #8]
   1cdea:	f016 0108 	ands.w	r1, r6, #8
   1cdee:	d135      	bne.n	1ce5c <i2c_nrfx_twim_transfer+0xa4>
		nrfx_twim_xfer_desc_t cur_xfer = {
   1cdf0:	2212      	movs	r2, #18
   1cdf2:	f10d 0006 	add.w	r0, sp, #6
   1cdf6:	f017 fe4d 	bl	34a94 <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
   1cdfa:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
   1cdfe:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce02:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1ce04:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
   1ce08:	9302      	str	r3, [sp, #8]
   1ce0a:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1ce0c:	bf0c      	ite	eq
   1ce0e:	2220      	moveq	r2, #32
   1ce10:	2200      	movne	r2, #0
   1ce12:	a901      	add	r1, sp, #4
   1ce14:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
   1ce16:	f88d a005 	strb.w	sl, [sp, #5]
   1ce1a:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1ce1c:	f00a fde6 	bl	279ec <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1ce20:	4540      	cmp	r0, r8
   1ce22:	d00e      	beq.n	1ce42 <i2c_nrfx_twim_transfer+0x8a>
			if (res == NRFX_ERROR_BUSY) {
   1ce24:	4b10      	ldr	r3, [pc, #64]	; (1ce68 <i2c_nrfx_twim_transfer+0xb0>)
   1ce26:	4298      	cmp	r0, r3
   1ce28:	d01b      	beq.n	1ce62 <i2c_nrfx_twim_transfer+0xaa>
				ret = -EIO;
   1ce2a:	f06f 0504 	mvn.w	r5, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1ce2e:	6860      	ldr	r0, [r4, #4]
   1ce30:	f00a fda6 	bl	27980 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1ce34:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1ce36:	f00d fd2b 	bl	2a890 <z_impl_k_sem_give>
}
   1ce3a:	4628      	mov	r0, r5
   1ce3c:	b007      	add	sp, #28
   1ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   1ce42:	68e0      	ldr	r0, [r4, #12]
   1ce44:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1ce46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ce4a:	f00d fd65 	bl	2a918 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   1ce4e:	68e3      	ldr	r3, [r4, #12]
	return dev->driver_data;
   1ce50:	350c      	adds	r5, #12
		res = get_dev_data(dev)->res;
   1ce52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1ce54:	4543      	cmp	r3, r8
   1ce56:	d1e8      	bne.n	1ce2a <i2c_nrfx_twim_transfer+0x72>
	for (size_t i = 0; i < num_msgs; i++) {
   1ce58:	3701      	adds	r7, #1
   1ce5a:	e7bf      	b.n	1cddc <i2c_nrfx_twim_transfer+0x24>
			ret = -ENOTSUP;
   1ce5c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1ce60:	e7e5      	b.n	1ce2e <i2c_nrfx_twim_transfer+0x76>
				ret = -EBUSY;
   1ce62:	f06f 050f 	mvn.w	r5, #15
   1ce66:	e7e2      	b.n	1ce2e <i2c_nrfx_twim_transfer+0x76>
   1ce68:	0bad000b 	.word	0x0bad000b
   1ce6c:	0bad0000 	.word	0x0bad0000

0001ce70 <event_handler>:
	switch (p_event->type) {
   1ce70:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   1ce72:	68cb      	ldr	r3, [r1, #12]
	switch (p_event->type) {
   1ce74:	2a01      	cmp	r2, #1
   1ce76:	d00a      	beq.n	1ce8e <event_handler+0x1e>
   1ce78:	b11a      	cbz	r2, 1ce82 <event_handler+0x12>
   1ce7a:	2a02      	cmp	r2, #2
   1ce7c:	d009      	beq.n	1ce92 <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ce7e:	4a06      	ldr	r2, [pc, #24]	; (1ce98 <event_handler+0x28>)
   1ce80:	e000      	b.n	1ce84 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   1ce82:	4a06      	ldr	r2, [pc, #24]	; (1ce9c <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ce84:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1ce86:	f103 0018 	add.w	r0, r3, #24
   1ce8a:	f00d bd01 	b.w	2a890 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ce8e:	4a04      	ldr	r2, [pc, #16]	; (1cea0 <event_handler+0x30>)
   1ce90:	e7f8      	b.n	1ce84 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ce92:	4a04      	ldr	r2, [pc, #16]	; (1cea4 <event_handler+0x34>)
   1ce94:	e7f6      	b.n	1ce84 <event_handler+0x14>
   1ce96:	bf00      	nop
   1ce98:	0bad0001 	.word	0x0bad0001
   1ce9c:	0bad0000 	.word	0x0bad0000
   1cea0:	0bae0001 	.word	0x0bae0001
   1cea4:	0bae0002 	.word	0x0bae0002

0001cea8 <gpio_pin_set>:
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(struct device *port, gpio_pin_t pin, int value)
{
   1cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(const struct gpio_driver_config *)port->config_info;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->driver_data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ceac:	2501      	movs	r5, #1
   1ceae:	6843      	ldr	r3, [r0, #4]
   1ceb0:	408d      	lsls	r5, r1
   1ceb2:	681b      	ldr	r3, [r3, #0]
{
   1ceb4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ceb6:	421d      	tst	r5, r3
{
   1ceb8:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   1ceba:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cebc:	d10e      	bne.n	1cedc <gpio_pin_set+0x34>
   1cebe:	491a      	ldr	r1, [pc, #104]	; (1cf28 <gpio_pin_set+0x80>)
   1cec0:	f240 438b 	movw	r3, #1163	; 0x48b
   1cec4:	4a19      	ldr	r2, [pc, #100]	; (1cf2c <gpio_pin_set+0x84>)
   1cec6:	481a      	ldr	r0, [pc, #104]	; (1cf30 <gpio_pin_set+0x88>)
   1cec8:	f012 f9c3 	bl	2f252 <printk>
   1cecc:	4819      	ldr	r0, [pc, #100]	; (1cf34 <gpio_pin_set+0x8c>)
   1cece:	f012 f9c0 	bl	2f252 <printk>
   1ced2:	f240 418b 	movw	r1, #1163	; 0x48b
   1ced6:	4815      	ldr	r0, [pc, #84]	; (1cf2c <gpio_pin_set+0x84>)
   1ced8:	f012 fcbc 	bl	2f854 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1cedc:	683b      	ldr	r3, [r7, #0]
   1cede:	421d      	tst	r5, r3
		value = (value != 0) ? 0 : 1;
   1cee0:	bf18      	it	ne
   1cee2:	fab6 f686 	clzne	r6, r6
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cee6:	6863      	ldr	r3, [r4, #4]
		value = (value != 0) ? 0 : 1;
   1cee8:	bf18      	it	ne
   1ceea:	0976      	lsrne	r6, r6, #5
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ceec:	681b      	ldr	r3, [r3, #0]
   1ceee:	421d      	tst	r5, r3
   1cef0:	d10e      	bne.n	1cf10 <gpio_pin_set+0x68>
   1cef2:	490d      	ldr	r1, [pc, #52]	; (1cf28 <gpio_pin_set+0x80>)
   1cef4:	f240 4362 	movw	r3, #1122	; 0x462
   1cef8:	4a0c      	ldr	r2, [pc, #48]	; (1cf2c <gpio_pin_set+0x84>)
   1cefa:	480d      	ldr	r0, [pc, #52]	; (1cf30 <gpio_pin_set+0x88>)
   1cefc:	f012 f9a9 	bl	2f252 <printk>
   1cf00:	480c      	ldr	r0, [pc, #48]	; (1cf34 <gpio_pin_set+0x8c>)
   1cf02:	f012 f9a6 	bl	2f252 <printk>
   1cf06:	f240 4162 	movw	r1, #1122	; 0x462
   1cf0a:	4808      	ldr	r0, [pc, #32]	; (1cf2c <gpio_pin_set+0x84>)
   1cf0c:	f012 fca2 	bl	2f854 <assert_post_action>
	if (value != 0)	{
   1cf10:	b136      	cbz	r6, 1cf20 <gpio_pin_set+0x78>
	return api->port_set_bits_raw(port, pins);
   1cf12:	68a3      	ldr	r3, [r4, #8]
   1cf14:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1cf16:	4629      	mov	r1, r5
   1cf18:	4620      	mov	r0, r4
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1cf1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1cf1e:	4718      	bx	r3
   1cf20:	68a3      	ldr	r3, [r4, #8]
   1cf22:	691b      	ldr	r3, [r3, #16]
   1cf24:	e7f7      	b.n	1cf16 <gpio_pin_set+0x6e>
   1cf26:	bf00      	nop
   1cf28:	00037f1f 	.word	0x00037f1f
   1cf2c:	00037ef5 	.word	0x00037ef5
   1cf30:	00036be5 	.word	0x00036be5
   1cf34:	00037f5d 	.word	0x00037f5d

0001cf38 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1cf38:	b510      	push	{r4, lr}
   1cf3a:	4604      	mov	r4, r0
   1cf3c:	2200      	movs	r2, #0
   1cf3e:	2101      	movs	r1, #1
   1cf40:	200b      	movs	r0, #11
   1cf42:	f7fb fe55 	bl	18bf0 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1cf46:	6860      	ldr	r0, [r4, #4]
   1cf48:	4623      	mov	r3, r4
   1cf4a:	4a08      	ldr	r2, [pc, #32]	; (1cf6c <spi_3_init+0x34>)
   1cf4c:	f100 010c 	add.w	r1, r0, #12
   1cf50:	f00a fa6e 	bl	27430 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1cf54:	4b06      	ldr	r3, [pc, #24]	; (1cf70 <spi_3_init+0x38>)
   1cf56:	4298      	cmp	r0, r3
   1cf58:	d104      	bne.n	1cf64 <spi_3_init+0x2c>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   1cf5a:	68e0      	ldr	r0, [r4, #12]
   1cf5c:	f016 fd9b 	bl	33a96 <spi_context_unlock_unconditionally>
	return 0;
   1cf60:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
   1cf62:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1cf64:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
   1cf68:	e7fb      	b.n	1cf62 <spi_3_init+0x2a>
   1cf6a:	bf00      	nop
   1cf6c:	00033ad7 	.word	0x00033ad7
   1cf70:	0bad0000 	.word	0x0bad0000

0001cf74 <transfer_next_chunk>:
{
   1cf74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1cf76:	68c5      	ldr	r5, [r0, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1cf78:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   1cf7a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1cf7c:	b982      	cbnz	r2, 1cfa0 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
   1cf7e:	bb93      	cbnz	r3, 1cfe6 <transfer_next_chunk+0x72>
	int error = 0;
   1cf80:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1cf82:	2200      	movs	r2, #0
   1cf84:	4628      	mov	r0, r5
   1cf86:	4611      	mov	r1, r2
   1cf88:	f016 fd5b 	bl	33a42 <_spi_context_cs_control.isra.6>
	ctx->sync_status = status;
   1cf8c:	636c      	str	r4, [r5, #52]	; 0x34
   1cf8e:	f105 001c 	add.w	r0, r5, #28
   1cf92:	f00d fc7d 	bl	2a890 <z_impl_k_sem_give>
	dev_data->busy = false;
   1cf96:	2300      	movs	r3, #0
   1cf98:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   1cf9c:	b004      	add	sp, #16
   1cf9e:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1cfa0:	b31b      	cbz	r3, 1cfea <transfer_next_chunk+0x76>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
   1cfa2:	4293      	cmp	r3, r2
   1cfa4:	4619      	mov	r1, r3
   1cfa6:	bf28      	it	cs
   1cfa8:	4611      	movcs	r1, r2
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1cfaa:	6840      	ldr	r0, [r0, #4]
		const u8_t *tx_buf = ctx->tx_buf;
   1cfac:	6cac      	ldr	r4, [r5, #72]	; 0x48
		if (chunk_len > dev_config->max_chunk_len) {
   1cfae:	6886      	ldr	r6, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
   1cfb0:	9400      	str	r4, [sp, #0]
   1cfb2:	42b1      	cmp	r1, r6
   1cfb4:	bf28      	it	cs
   1cfb6:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
   1cfb8:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
   1cfba:	b1c4      	cbz	r4, 1cfee <transfer_next_chunk+0x7a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1cfbc:	2a00      	cmp	r2, #0
   1cfbe:	bf18      	it	ne
   1cfc0:	460a      	movne	r2, r1
   1cfc2:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1cfc4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1cfc6:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1cfc8:	b19a      	cbz	r2, 1cff2 <transfer_next_chunk+0x7e>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	bf18      	it	ne
   1cfce:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1cfd0:	2200      	movs	r2, #0
   1cfd2:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1cfd4:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1cfd6:	f00a fae5 	bl	275a4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1cfda:	4b07      	ldr	r3, [pc, #28]	; (1cff8 <transfer_next_chunk+0x84>)
   1cfdc:	4298      	cmp	r0, r3
   1cfde:	d0dd      	beq.n	1cf9c <transfer_next_chunk+0x28>
			error = -EIO;
   1cfe0:	f06f 0404 	mvn.w	r4, #4
   1cfe4:	e7cd      	b.n	1cf82 <transfer_next_chunk+0xe>
   1cfe6:	4619      	mov	r1, r3
   1cfe8:	e7df      	b.n	1cfaa <transfer_next_chunk+0x36>
	} else if (!ctx->rx_len) {
   1cfea:	4611      	mov	r1, r2
   1cfec:	e7dd      	b.n	1cfaa <transfer_next_chunk+0x36>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1cfee:	4622      	mov	r2, r4
   1cff0:	e7e7      	b.n	1cfc2 <transfer_next_chunk+0x4e>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1cff2:	4613      	mov	r3, r2
   1cff4:	e7ec      	b.n	1cfd0 <transfer_next_chunk+0x5c>
   1cff6:	bf00      	nop
   1cff8:	0bad0000 	.word	0x0bad0000

0001cffc <spi_nrfx_transceive>:
{
   1cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d000:	68c4      	ldr	r4, [r0, #12]
{
   1d002:	b085      	sub	sp, #20
   1d004:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
   1d006:	1d23      	adds	r3, r4, #4
   1d008:	4681      	mov	r9, r0
   1d00a:	460f      	mov	r7, r1
   1d00c:	4616      	mov	r6, r2
   1d00e:	9303      	str	r3, [sp, #12]
	return z_impl_k_sem_take(sem, timeout);
   1d010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d014:	4618      	mov	r0, r3
   1d016:	f00d fc7f 	bl	2a918 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1d01a:	f8d9 a00c 	ldr.w	sl, [r9, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1d01e:	f8da 3000 	ldr.w	r3, [sl]
   1d022:	429f      	cmp	r7, r3
   1d024:	f000 8088 	beq.w	1d138 <spi_nrfx_transceive+0x13c>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1d028:	f641 0209 	movw	r2, #6153	; 0x1809
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d02c:	88bb      	ldrh	r3, [r7, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1d02e:	4213      	tst	r3, r2
   1d030:	f040 80d3 	bne.w	1d1da <spi_nrfx_transceive+0x1de>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d034:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1d038:	2b08      	cmp	r3, #8
   1d03a:	f040 80ce 	bne.w	1d1da <spi_nrfx_transceive+0x1de>
	if (spi_cfg->frequency < 125000) {
   1d03e:	683a      	ldr	r2, [r7, #0]
   1d040:	4b67      	ldr	r3, [pc, #412]	; (1d1e0 <spi_nrfx_transceive+0x1e4>)
   1d042:	429a      	cmp	r2, r3
   1d044:	f240 80c9 	bls.w	1d1da <spi_nrfx_transceive+0x1de>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1d048:	f8d9 3004 	ldr.w	r3, [r9, #4]
	ctx->config = spi_cfg;
   1d04c:	f8ca 7000 	str.w	r7, [sl]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1d050:	9302      	str	r3, [sp, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d052:	68bb      	ldr	r3, [r7, #8]
   1d054:	2b00      	cmp	r3, #0
   1d056:	d03c      	beq.n	1d0d2 <spi_nrfx_transceive+0xd6>
   1d058:	f8d3 8000 	ldr.w	r8, [r3]
   1d05c:	f1b8 0f00 	cmp.w	r8, #0
   1d060:	d037      	beq.n	1d0d2 <spi_nrfx_transceive+0xd6>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1d062:	791b      	ldrb	r3, [r3, #4]
	struct gpio_driver_data *data =
   1d064:	f8d8 b00c 	ldr.w	fp, [r8, #12]
   1d068:	9300      	str	r3, [sp, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d06a:	2301      	movs	r3, #1
   1d06c:	9a00      	ldr	r2, [sp, #0]
   1d06e:	4093      	lsls	r3, r2
   1d070:	9301      	str	r3, [sp, #4]
   1d072:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d076:	9a01      	ldr	r2, [sp, #4]
   1d078:	681b      	ldr	r3, [r3, #0]
   1d07a:	421a      	tst	r2, r3
   1d07c:	d10e      	bne.n	1d09c <spi_nrfx_transceive+0xa0>
   1d07e:	4959      	ldr	r1, [pc, #356]	; (1d1e4 <spi_nrfx_transceive+0x1e8>)
   1d080:	f240 23ef 	movw	r3, #751	; 0x2ef
   1d084:	4a58      	ldr	r2, [pc, #352]	; (1d1e8 <spi_nrfx_transceive+0x1ec>)
   1d086:	4859      	ldr	r0, [pc, #356]	; (1d1ec <spi_nrfx_transceive+0x1f0>)
   1d088:	f012 f8e3 	bl	2f252 <printk>
   1d08c:	4858      	ldr	r0, [pc, #352]	; (1d1f0 <spi_nrfx_transceive+0x1f4>)
   1d08e:	f012 f8e0 	bl	2f252 <printk>
   1d092:	f240 21ef 	movw	r1, #751	; 0x2ef
   1d096:	4854      	ldr	r0, [pc, #336]	; (1d1e8 <spi_nrfx_transceive+0x1ec>)
   1d098:	f012 fbdc 	bl	2f854 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   1d09c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d0a4:	681b      	ldr	r3, [r3, #0]
   1d0a6:	9900      	ldr	r1, [sp, #0]
   1d0a8:	4640      	mov	r0, r8
   1d0aa:	4798      	blx	r3
	if (ret != 0) {
   1d0ac:	b930      	cbnz	r0, 1d0bc <spi_nrfx_transceive+0xc0>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d0ae:	f8db 3000 	ldr.w	r3, [fp]
   1d0b2:	9a01      	ldr	r2, [sp, #4]
   1d0b4:	ea23 0302 	bic.w	r3, r3, r2
   1d0b8:	f8cb 3000 	str.w	r3, [fp]
		gpio_pin_set(ctx->config->cs->gpio_dev,
   1d0bc:	f8da 2000 	ldr.w	r2, [sl]
   1d0c0:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1d0c2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_set(ctx->config->cs->gpio_dev,
   1d0c6:	7919      	ldrb	r1, [r3, #4]
   1d0c8:	43d2      	mvns	r2, r2
   1d0ca:	6818      	ldr	r0, [r3, #0]
   1d0cc:	0fd2      	lsrs	r2, r2, #31
   1d0ce:	f7ff feeb 	bl	1cea8 <gpio_pin_set>
	nrf_spim_configure(spim->p_reg,
   1d0d2:	9b02      	ldr	r3, [sp, #8]
   1d0d4:	6819      	ldr	r1, [r3, #0]
   1d0d6:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d0d8:	0798      	lsls	r0, r3, #30
   1d0da:	f003 0204 	and.w	r2, r3, #4
   1d0de:	d559      	bpl.n	1d194 <spi_nrfx_transceive+0x198>
			return NRF_SPIM_MODE_2;
   1d0e0:	2a00      	cmp	r2, #0
   1d0e2:	bf14      	ite	ne
   1d0e4:	2203      	movne	r2, #3
   1d0e6:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1d0e8:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   1d0ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1d0ee:	d055      	beq.n	1d19c <spi_nrfx_transceive+0x1a0>
   1d0f0:	2a03      	cmp	r2, #3
   1d0f2:	d056      	beq.n	1d1a2 <spi_nrfx_transceive+0x1a6>
   1d0f4:	2a01      	cmp	r2, #1
   1d0f6:	d101      	bne.n	1d0fc <spi_nrfx_transceive+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1d0f8:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1d0fc:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   1d100:	4a3c      	ldr	r2, [pc, #240]	; (1d1f4 <spi_nrfx_transceive+0x1f8>)
	nrf_spim_frequency_set(spim->p_reg,
   1d102:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
   1d104:	4293      	cmp	r3, r2
   1d106:	d94f      	bls.n	1d1a8 <spi_nrfx_transceive+0x1ac>
	} else if (frequency < 500000) {
   1d108:	4a3b      	ldr	r2, [pc, #236]	; (1d1f8 <spi_nrfx_transceive+0x1fc>)
   1d10a:	4293      	cmp	r3, r2
   1d10c:	d94f      	bls.n	1d1ae <spi_nrfx_transceive+0x1b2>
	} else if (frequency < 1000000) {
   1d10e:	4a3b      	ldr	r2, [pc, #236]	; (1d1fc <spi_nrfx_transceive+0x200>)
   1d110:	4293      	cmp	r3, r2
   1d112:	d94f      	bls.n	1d1b4 <spi_nrfx_transceive+0x1b8>
	} else if (frequency < 2000000) {
   1d114:	4a3a      	ldr	r2, [pc, #232]	; (1d200 <spi_nrfx_transceive+0x204>)
   1d116:	4293      	cmp	r3, r2
   1d118:	d94f      	bls.n	1d1ba <spi_nrfx_transceive+0x1be>
	} else if (frequency < 4000000) {
   1d11a:	4a3a      	ldr	r2, [pc, #232]	; (1d204 <spi_nrfx_transceive+0x208>)
   1d11c:	4293      	cmp	r3, r2
   1d11e:	d94f      	bls.n	1d1c0 <spi_nrfx_transceive+0x1c4>
		return NRF_SPIM_FREQ_8M;
   1d120:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   1d124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   1d128:	4293      	cmp	r3, r2
   1d12a:	bf94      	ite	ls
   1d12c:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
   1d130:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1d134:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   1d138:	2301      	movs	r3, #1
   1d13a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   1d13e:	2e00      	cmp	r6, #0
   1d140:	d041      	beq.n	1d1c6 <spi_nrfx_transceive+0x1ca>
		ctx->current_tx = tx_bufs->buffers;
   1d142:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   1d144:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   1d146:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   1d148:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1d14a:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d14c:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1d14e:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d150:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   1d152:	2d00      	cmp	r5, #0
   1d154:	d03c      	beq.n	1d1d0 <spi_nrfx_transceive+0x1d4>
		ctx->current_rx = rx_bufs->buffers;
   1d156:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   1d158:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   1d15a:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   1d15c:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1d15e:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d160:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1d162:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d164:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   1d166:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   1d168:	2101      	movs	r1, #1
	ctx->sync_status = 0;
   1d16a:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   1d16c:	4620      	mov	r0, r4
   1d16e:	f016 fc68 	bl	33a42 <_spi_context_cs_control.isra.6>
		transfer_next_chunk(dev);
   1d172:	4648      	mov	r0, r9
   1d174:	f7ff fefe 	bl	1cf74 <transfer_next_chunk>
   1d178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d17c:	f104 001c 	add.w	r0, r4, #28
   1d180:	f00d fbca 	bl	2a918 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1d184:	6b64      	ldr	r4, [r4, #52]	; 0x34
	z_impl_k_sem_give(sem);
   1d186:	9803      	ldr	r0, [sp, #12]
   1d188:	f00d fb82 	bl	2a890 <z_impl_k_sem_give>
}
   1d18c:	4620      	mov	r0, r4
   1d18e:	b005      	add	sp, #20
   1d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NRF_SPIM_MODE_0;
   1d194:	3200      	adds	r2, #0
   1d196:	bf18      	it	ne
   1d198:	2201      	movne	r2, #1
   1d19a:	e7a5      	b.n	1d0e8 <spi_nrfx_transceive+0xec>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1d19c:	f043 0304 	orr.w	r3, r3, #4
        break;
   1d1a0:	e7ac      	b.n	1d0fc <spi_nrfx_transceive+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1d1a2:	f043 0306 	orr.w	r3, r3, #6
        break;
   1d1a6:	e7a9      	b.n	1d0fc <spi_nrfx_transceive+0x100>
		return NRF_SPIM_FREQ_125K;
   1d1a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1d1ac:	e7c2      	b.n	1d134 <spi_nrfx_transceive+0x138>
		return NRF_SPIM_FREQ_250K;
   1d1ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d1b2:	e7bf      	b.n	1d134 <spi_nrfx_transceive+0x138>
		return NRF_SPIM_FREQ_500K;
   1d1b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1d1b8:	e7bc      	b.n	1d134 <spi_nrfx_transceive+0x138>
		return NRF_SPIM_FREQ_1M;
   1d1ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d1be:	e7b9      	b.n	1d134 <spi_nrfx_transceive+0x138>
		return NRF_SPIM_FREQ_2M;
   1d1c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1d1c4:	e7b6      	b.n	1d134 <spi_nrfx_transceive+0x138>
		ctx->tx_count = 0;
   1d1c6:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   1d1ca:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   1d1ce:	e7c0      	b.n	1d152 <spi_nrfx_transceive+0x156>
		ctx->rx_count = 0;
   1d1d0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   1d1d4:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   1d1d8:	e7c5      	b.n	1d166 <spi_nrfx_transceive+0x16a>
		return -EINVAL;
   1d1da:	f06f 0415 	mvn.w	r4, #21
   1d1de:	e7d2      	b.n	1d186 <spi_nrfx_transceive+0x18a>
   1d1e0:	0001e847 	.word	0x0001e847
   1d1e4:	00037f1f 	.word	0x00037f1f
   1d1e8:	00037ef5 	.word	0x00037ef5
   1d1ec:	00036be5 	.word	0x00036be5
   1d1f0:	00037f5d 	.word	0x00037f5d
   1d1f4:	0003d08f 	.word	0x0003d08f
   1d1f8:	0007a11f 	.word	0x0007a11f
   1d1fc:	000f423f 	.word	0x000f423f
   1d200:	001e847f 	.word	0x001e847f
   1d204:	003d08ff 	.word	0x003d08ff

0001d208 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   1d208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d20a:	460d      	mov	r5, r1
   1d20c:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1d20e:	b948      	cbnz	r0, 1d224 <entropy_cc310_rng_get_entropy+0x1c>
   1d210:	4910      	ldr	r1, [pc, #64]	; (1d254 <entropy_cc310_rng_get_entropy+0x4c>)
   1d212:	4811      	ldr	r0, [pc, #68]	; (1d258 <entropy_cc310_rng_get_entropy+0x50>)
   1d214:	231c      	movs	r3, #28
   1d216:	4a11      	ldr	r2, [pc, #68]	; (1d25c <entropy_cc310_rng_get_entropy+0x54>)
   1d218:	f012 f81b 	bl	2f252 <printk>
   1d21c:	211c      	movs	r1, #28
   1d21e:	480f      	ldr	r0, [pc, #60]	; (1d25c <entropy_cc310_rng_get_entropy+0x54>)
   1d220:	f012 fb18 	bl	2f854 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1d224:	b94d      	cbnz	r5, 1d23a <entropy_cc310_rng_get_entropy+0x32>
   1d226:	490e      	ldr	r1, [pc, #56]	; (1d260 <entropy_cc310_rng_get_entropy+0x58>)
   1d228:	480b      	ldr	r0, [pc, #44]	; (1d258 <entropy_cc310_rng_get_entropy+0x50>)
   1d22a:	231d      	movs	r3, #29
   1d22c:	4a0b      	ldr	r2, [pc, #44]	; (1d25c <entropy_cc310_rng_get_entropy+0x54>)
   1d22e:	f012 f810 	bl	2f252 <printk>
   1d232:	211d      	movs	r1, #29
   1d234:	4809      	ldr	r0, [pc, #36]	; (1d25c <entropy_cc310_rng_get_entropy+0x54>)
   1d236:	f012 fb0d 	bl	2f854 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   1d23a:	aa01      	add	r2, sp, #4
   1d23c:	4621      	mov	r1, r4
   1d23e:	4628      	mov	r0, r5
   1d240:	f7ea fed6 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1d244:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   1d246:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   1d248:	bf18      	it	ne
   1d24a:	f06f 0015 	mvnne.w	r0, #21
   1d24e:	b003      	add	sp, #12
   1d250:	bd30      	pop	{r4, r5, pc}
   1d252:	bf00      	nop
   1d254:	00037fa5 	.word	0x00037fa5
   1d258:	00036be5 	.word	0x00036be5
   1d25c:	00037f75 	.word	0x00037f75
   1d260:	00037fb8 	.word	0x00037fb8

0001d264 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   1d264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1d266:	2200      	movs	r2, #0
   1d268:	202a      	movs	r0, #42	; 0x2a
   1d26a:	4611      	mov	r1, r2
   1d26c:	f7fb fcc0 	bl	18bf0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   1d270:	4a06      	ldr	r2, [pc, #24]	; (1d28c <_bsdlib_init+0x28>)
   1d272:	ab01      	add	r3, sp, #4
   1d274:	ca07      	ldmia	r2, {r0, r1, r2}
   1d276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1d27a:	4618      	mov	r0, r3
   1d27c:	f008 f8be 	bl	253fc <bsd_init>
   1d280:	4b03      	ldr	r3, [pc, #12]	; (1d290 <_bsdlib_init+0x2c>)
   1d282:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1d284:	2000      	movs	r0, #0
   1d286:	b005      	add	sp, #20
   1d288:	f85d fb04 	ldr.w	pc, [sp], #4
   1d28c:	000358a4 	.word	0x000358a4
   1d290:	20022178 	.word	0x20022178

0001d294 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1d294:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1d296:	4b0d      	ldr	r3, [pc, #52]	; (1d2cc <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1d298:	4c0d      	ldr	r4, [pc, #52]	; (1d2d0 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   1d29a:	681a      	ldr	r2, [r3, #0]
   1d29c:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1d29e:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1d2a0:	4623      	mov	r3, r4
		if (entry->id == id) {
   1d2a2:	6819      	ldr	r1, [r3, #0]
   1d2a4:	4281      	cmp	r1, r0
   1d2a6:	d00e      	beq.n	1d2c6 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   1d2a8:	b151      	cbz	r1, 1d2c0 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1d2aa:	6859      	ldr	r1, [r3, #4]
   1d2ac:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1d2ae:	42b1      	cmp	r1, r6
   1d2b0:	bfc4      	itt	gt
   1d2b2:	461c      	movgt	r4, r3
   1d2b4:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1d2b6:	3d01      	subs	r5, #1
   1d2b8:	f103 0308 	add.w	r3, r3, #8
   1d2bc:	d1f1      	bne.n	1d2a2 <thread_monitor_entry_get+0xe>
   1d2be:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1d2c0:	3a01      	subs	r2, #1
	new_entry->id = id;
   1d2c2:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1d2c4:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   1d2c6:	4618      	mov	r0, r3
   1d2c8:	bd70      	pop	{r4, r5, r6, pc}
   1d2ca:	bf00      	nop
   1d2cc:	2002217c 	.word	0x2002217c
   1d2d0:	20022188 	.word	0x20022188

0001d2d4 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1d2d4:	4668      	mov	r0, sp
   1d2d6:	f020 0107 	bic.w	r1, r0, #7
   1d2da:	468d      	mov	sp, r1
   1d2dc:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d2de:	4b0d      	ldr	r3, [pc, #52]	; (1d314 <rpc_proxy_irq_handler+0x40>)
   1d2e0:	e8d3 2fef 	ldaex	r2, [r3]
   1d2e4:	3201      	adds	r2, #1
   1d2e6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d2ea:	2900      	cmp	r1, #0
   1d2ec:	d1f8      	bne.n	1d2e0 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1d2ee:	f002 fc2b 	bl	1fb48 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1d2f2:	4b09      	ldr	r3, [pc, #36]	; (1d318 <rpc_proxy_irq_handler+0x44>)
   1d2f4:	681c      	ldr	r4, [r3, #0]
   1d2f6:	b93c      	cbnz	r4, 1d308 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d2f8:	f7fb fcac 	bl	18c54 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1d2fc:	f7fb fe8e 	bl	1901c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1d300:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1d304:	4685      	mov	sp, r0
   1d306:	4770      	bx	lr
   1d308:	1d20      	adds	r0, r4, #4
   1d30a:	f00d fac1 	bl	2a890 <z_impl_k_sem_give>
   1d30e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   1d310:	e7f1      	b.n	1d2f6 <rpc_proxy_irq_handler+0x22>
   1d312:	bf00      	nop
   1d314:	2002217c 	.word	0x2002217c
   1d318:	20022180 	.word	0x20022180

0001d31c <bsd_os_timedwait>:
{
   1d31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d320:	460e      	mov	r6, r1
   1d322:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1d324:	f017 faae 	bl	34884 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1d328:	6833      	ldr	r3, [r6, #0]
   1d32a:	4680      	mov	r8, r0
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	460f      	mov	r7, r1
   1d330:	d103      	bne.n	1d33a <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1d332:	f00d f929 	bl	2a588 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1d336:	203c      	movs	r0, #60	; 0x3c
   1d338:	e084      	b.n	1d444 <bsd_os_timedwait+0x128>
		*timeout = SYS_FOREVER_MS;
   1d33a:	bfbc      	itt	lt
   1d33c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1d340:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d342:	2201      	movs	r2, #1
   1d344:	2100      	movs	r1, #0
   1d346:	a802      	add	r0, sp, #8
   1d348:	f017 fa11 	bl	3476e <z_impl_k_sem_init>
   1d34c:	f10d 0a04 	add.w	sl, sp, #4
	__asm__ volatile(
   1d350:	f04f 0320 	mov.w	r3, #32
   1d354:	f3ef 8b11 	mrs	fp, BASEPRI
   1d358:	f383 8811 	msr	BASEPRI, r3
   1d35c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1d360:	f00d fa90 	bl	2a884 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1d364:	f7ff ff96 	bl	1d294 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1d368:	493f      	ldr	r1, [pc, #252]	; (1d468 <bsd_os_timedwait+0x14c>)
   1d36a:	6843      	ldr	r3, [r0, #4]
   1d36c:	680a      	ldr	r2, [r1, #0]
   1d36e:	4689      	mov	r9, r1
   1d370:	4293      	cmp	r3, r2
   1d372:	f04f 0300 	mov.w	r3, #0
   1d376:	d108      	bne.n	1d38a <bsd_os_timedwait+0x6e>
	parent->next = child;
   1d378:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1d37a:	4b3c      	ldr	r3, [pc, #240]	; (1d46c <bsd_os_timedwait+0x150>)
   1d37c:	685a      	ldr	r2, [r3, #4]
   1d37e:	2a00      	cmp	r2, #0
   1d380:	d163      	bne.n	1d44a <bsd_os_timedwait+0x12e>
	list->head = node;
   1d382:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1d386:	2301      	movs	r3, #1
   1d388:	e000      	b.n	1d38c <bsd_os_timedwait+0x70>
	entry->cnt = rpc_event_cnt;
   1d38a:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1d38c:	f38b 8811 	msr	BASEPRI, fp
   1d390:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1d394:	2b00      	cmp	r3, #0
   1d396:	d054      	beq.n	1d442 <bsd_os_timedwait+0x126>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1d398:	6831      	ldr	r1, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   1d39a:	a802      	add	r0, sp, #8
   1d39c:	f00d fabc 	bl	2a918 <z_impl_k_sem_take>
	__asm__ volatile(
   1d3a0:	f04f 0320 	mov.w	r3, #32
   1d3a4:	f3ef 8b11 	mrs	fp, BASEPRI
   1d3a8:	f383 8811 	msr	BASEPRI, r3
   1d3ac:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d3b0:	2000      	movs	r0, #0
   1d3b2:	4b2e      	ldr	r3, [pc, #184]	; (1d46c <bsd_os_timedwait+0x150>)
   1d3b4:	681a      	ldr	r2, [r3, #0]
   1d3b6:	b15a      	cbz	r2, 1d3d0 <bsd_os_timedwait+0xb4>
   1d3b8:	4552      	cmp	r2, sl
   1d3ba:	d151      	bne.n	1d460 <bsd_os_timedwait+0x144>
Z_GENLIST_REMOVE(slist, snode)
   1d3bc:	9901      	ldr	r1, [sp, #4]
   1d3be:	2800      	cmp	r0, #0
   1d3c0:	d148      	bne.n	1d454 <bsd_os_timedwait+0x138>
   1d3c2:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1d3c4:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d3c6:	4290      	cmp	r0, r2
   1d3c8:	d100      	bne.n	1d3cc <bsd_os_timedwait+0xb0>
	list->tail = node;
   1d3ca:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1d3cc:	2300      	movs	r3, #0
   1d3ce:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1d3d0:	f00d fa58 	bl	2a884 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1d3d4:	f7ff ff5e 	bl	1d294 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1d3d8:	f8d9 3000 	ldr.w	r3, [r9]
   1d3dc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1d3de:	f38b 8811 	msr	BASEPRI, fp
   1d3e2:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1d3e6:	f8d6 a000 	ldr.w	sl, [r6]
   1d3ea:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   1d3ee:	d028      	beq.n	1d442 <bsd_os_timedwait+0x126>
	return z_impl_k_uptime_ticks();
   1d3f0:	f017 fa48 	bl	34884 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1d3f4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1d3f8:	fba8 890c 	umull	r8, r9, r8, ip
   1d3fc:	fb0c 9907 	mla	r9, ip, r7, r9
   1d400:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1d404:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1d408:	eb12 080a 	adds.w	r8, r2, sl
   1d40c:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1d410:	eb43 79ea 	adc.w	r9, r3, sl, asr #31
   1d414:	fba0 ab0c 	umull	sl, fp, r0, ip
   1d418:	fb0c bb01 	mla	fp, ip, r1, fp
   1d41c:	ea4f 33da 	mov.w	r3, sl, lsr #15
   1d420:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   1d424:	ebb8 0403 	subs.w	r4, r8, r3
   1d428:	ea4f 32db 	mov.w	r2, fp, lsr #15
   1d42c:	eb69 0502 	sbc.w	r5, r9, r2
	*timeout = remaining > 0 ? remaining : 0;
   1d430:	2c00      	cmp	r4, #0
   1d432:	f175 0300 	sbcs.w	r3, r5, #0
   1d436:	bfb8      	it	lt
   1d438:	2400      	movlt	r4, #0
   1d43a:	6034      	str	r4, [r6, #0]
	if (*timeout == 0) {
   1d43c:	2c00      	cmp	r4, #0
   1d43e:	f43f af7a 	beq.w	1d336 <bsd_os_timedwait+0x1a>
	return 0;
   1d442:	2000      	movs	r0, #0
}
   1d444:	b009      	add	sp, #36	; 0x24
   1d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d44a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1d44e:	f8c3 a004 	str.w	sl, [r3, #4]
   1d452:	e798      	b.n	1d386 <bsd_os_timedwait+0x6a>
	parent->next = child;
   1d454:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d456:	6859      	ldr	r1, [r3, #4]
   1d458:	4291      	cmp	r1, r2
	list->tail = node;
   1d45a:	bf08      	it	eq
   1d45c:	6058      	streq	r0, [r3, #4]
   1d45e:	e7b5      	b.n	1d3cc <bsd_os_timedwait+0xb0>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d460:	4610      	mov	r0, r2
   1d462:	6812      	ldr	r2, [r2, #0]
   1d464:	e7a7      	b.n	1d3b6 <bsd_os_timedwait+0x9a>
   1d466:	bf00      	nop
   1d468:	2002217c 	.word	0x2002217c
   1d46c:	20022180 	.word	0x20022180

0001d470 <bsd_os_errno_set>:
	switch (err_code) {
   1d470:	282d      	cmp	r0, #45	; 0x2d
{
   1d472:	b510      	push	{r4, lr}
   1d474:	4604      	mov	r4, r0
	switch (err_code) {
   1d476:	f000 8099 	beq.w	1d5ac <bsd_os_errno_set+0x13c>
   1d47a:	dc41      	bgt.n	1d500 <bsd_os_errno_set+0x90>
   1d47c:	2816      	cmp	r0, #22
   1d47e:	d009      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d480:	dc29      	bgt.n	1d4d6 <bsd_os_errno_set+0x66>
   1d482:	2808      	cmp	r0, #8
   1d484:	d006      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d486:	dc09      	bgt.n	1d49c <bsd_os_errno_set+0x2c>
   1d488:	2802      	cmp	r0, #2
   1d48a:	d003      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d48c:	2805      	cmp	r0, #5
   1d48e:	d001      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d490:	2801      	cmp	r0, #1
   1d492:	d10c      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   1d494:	f013 fe0e 	bl	310b4 <__errno>
   1d498:	6004      	str	r4, [r0, #0]
}
   1d49a:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1d49c:	280c      	cmp	r0, #12
   1d49e:	d0f9      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d4a0:	dc01      	bgt.n	1d4a6 <bsd_os_errno_set+0x36>
   1d4a2:	2809      	cmp	r0, #9
   1d4a4:	e7f5      	b.n	1d492 <bsd_os_errno_set+0x22>
   1d4a6:	280d      	cmp	r0, #13
   1d4a8:	d0f4      	beq.n	1d494 <bsd_os_errno_set+0x24>
   1d4aa:	280e      	cmp	r0, #14
   1d4ac:	d065      	beq.n	1d57a <bsd_os_errno_set+0x10a>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   1d4ae:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1d4b2:	4a5c      	ldr	r2, [pc, #368]	; (1d624 <bsd_os_errno_set+0x1b4>)
   1d4b4:	495c      	ldr	r1, [pc, #368]	; (1d628 <bsd_os_errno_set+0x1b8>)
   1d4b6:	485d      	ldr	r0, [pc, #372]	; (1d62c <bsd_os_errno_set+0x1bc>)
   1d4b8:	f011 fecb 	bl	2f252 <printk>
   1d4bc:	4621      	mov	r1, r4
   1d4be:	485c      	ldr	r0, [pc, #368]	; (1d630 <bsd_os_errno_set+0x1c0>)
   1d4c0:	f011 fec7 	bl	2f252 <printk>
   1d4c4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   1d4c8:	4856      	ldr	r0, [pc, #344]	; (1d624 <bsd_os_errno_set+0x1b4>)
   1d4ca:	f012 f9c3 	bl	2f854 <assert_post_action>
		errno = 0xBAADBAAD;
   1d4ce:	f013 fdf1 	bl	310b4 <__errno>
   1d4d2:	4b58      	ldr	r3, [pc, #352]	; (1d634 <bsd_os_errno_set+0x1c4>)
   1d4d4:	e054      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d4d6:	2828      	cmp	r0, #40	; 0x28
   1d4d8:	f000 809f 	beq.w	1d61a <bsd_os_errno_set+0x1aa>
   1d4dc:	dc05      	bgt.n	1d4ea <bsd_os_errno_set+0x7a>
   1d4de:	2823      	cmp	r0, #35	; 0x23
   1d4e0:	d050      	beq.n	1d584 <bsd_os_errno_set+0x114>
   1d4e2:	2825      	cmp	r0, #37	; 0x25
   1d4e4:	d052      	beq.n	1d58c <bsd_os_errno_set+0x11c>
   1d4e6:	2818      	cmp	r0, #24
   1d4e8:	e7d3      	b.n	1d492 <bsd_os_errno_set+0x22>
   1d4ea:	282a      	cmp	r0, #42	; 0x2a
   1d4ec:	d056      	beq.n	1d59c <bsd_os_errno_set+0x12c>
   1d4ee:	db51      	blt.n	1d594 <bsd_os_errno_set+0x124>
   1d4f0:	282b      	cmp	r0, #43	; 0x2b
   1d4f2:	d057      	beq.n	1d5a4 <bsd_os_errno_set+0x134>
   1d4f4:	282c      	cmp	r0, #44	; 0x2c
   1d4f6:	d1da      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   1d4f8:	f013 fddc 	bl	310b4 <__errno>
   1d4fc:	237c      	movs	r3, #124	; 0x7c
   1d4fe:	e03f      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d500:	283c      	cmp	r0, #60	; 0x3c
   1d502:	d06b      	beq.n	1d5dc <bsd_os_errno_set+0x16c>
   1d504:	dc1d      	bgt.n	1d542 <bsd_os_errno_set+0xd2>
   1d506:	2833      	cmp	r0, #51	; 0x33
   1d508:	d05c      	beq.n	1d5c4 <bsd_os_errno_set+0x154>
   1d50a:	dc09      	bgt.n	1d520 <bsd_os_errno_set+0xb0>
   1d50c:	2830      	cmp	r0, #48	; 0x30
   1d50e:	d051      	beq.n	1d5b4 <bsd_os_errno_set+0x144>
   1d510:	2832      	cmp	r0, #50	; 0x32
   1d512:	d053      	beq.n	1d5bc <bsd_os_errno_set+0x14c>
   1d514:	282f      	cmp	r0, #47	; 0x2f
   1d516:	d1ca      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   1d518:	f013 fdcc 	bl	310b4 <__errno>
   1d51c:	236a      	movs	r3, #106	; 0x6a
   1d51e:	e02f      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d520:	2836      	cmp	r0, #54	; 0x36
   1d522:	d053      	beq.n	1d5cc <bsd_os_errno_set+0x15c>
   1d524:	dc05      	bgt.n	1d532 <bsd_os_errno_set+0xc2>
   1d526:	2834      	cmp	r0, #52	; 0x34
   1d528:	d1c1      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   1d52a:	f013 fdc3 	bl	310b4 <__errno>
   1d52e:	237e      	movs	r3, #126	; 0x7e
   1d530:	e026      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d532:	2838      	cmp	r0, #56	; 0x38
   1d534:	d04e      	beq.n	1d5d4 <bsd_os_errno_set+0x164>
   1d536:	2839      	cmp	r0, #57	; 0x39
   1d538:	d1b9      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   1d53a:	f013 fdbb 	bl	310b4 <__errno>
   1d53e:	2380      	movs	r3, #128	; 0x80
   1d540:	e01e      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d542:	287d      	cmp	r0, #125	; 0x7d
   1d544:	d056      	beq.n	1d5f4 <bsd_os_errno_set+0x184>
   1d546:	dc0c      	bgt.n	1d562 <bsd_os_errno_set+0xf2>
   1d548:	2870      	cmp	r0, #112	; 0x70
   1d54a:	d04b      	beq.n	1d5e4 <bsd_os_errno_set+0x174>
   1d54c:	dc01      	bgt.n	1d552 <bsd_os_errno_set+0xe2>
   1d54e:	2869      	cmp	r0, #105	; 0x69
   1d550:	e79f      	b.n	1d492 <bsd_os_errno_set+0x22>
   1d552:	2872      	cmp	r0, #114	; 0x72
   1d554:	d04a      	beq.n	1d5ec <bsd_os_errno_set+0x17c>
   1d556:	2873      	cmp	r0, #115	; 0x73
   1d558:	d1a9      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   1d55a:	f013 fdab 	bl	310b4 <__errno>
   1d55e:	2377      	movs	r3, #119	; 0x77
   1d560:	e00e      	b.n	1d580 <bsd_os_errno_set+0x110>
	switch (err_code) {
   1d562:	287f      	cmp	r0, #127	; 0x7f
   1d564:	d04f      	beq.n	1d606 <bsd_os_errno_set+0x196>
   1d566:	db49      	blt.n	1d5fc <bsd_os_errno_set+0x18c>
   1d568:	2880      	cmp	r0, #128	; 0x80
   1d56a:	d051      	beq.n	1d610 <bsd_os_errno_set+0x1a0>
   1d56c:	2881      	cmp	r0, #129	; 0x81
   1d56e:	d19e      	bne.n	1d4ae <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   1d570:	f013 fda0 	bl	310b4 <__errno>
   1d574:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1d578:	e002      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EFAULT;
   1d57a:	f013 fd9b 	bl	310b4 <__errno>
   1d57e:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   1d580:	6003      	str	r3, [r0, #0]
}
   1d582:	e78a      	b.n	1d49a <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   1d584:	f013 fd96 	bl	310b4 <__errno>
   1d588:	230b      	movs	r3, #11
   1d58a:	e7f9      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EDOM;
   1d58c:	f013 fd92 	bl	310b4 <__errno>
   1d590:	2321      	movs	r3, #33	; 0x21
   1d592:	e7f5      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EPROTOTYPE;
   1d594:	f013 fd8e 	bl	310b4 <__errno>
   1d598:	236b      	movs	r3, #107	; 0x6b
   1d59a:	e7f1      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ENOPROTOOPT;
   1d59c:	f013 fd8a 	bl	310b4 <__errno>
   1d5a0:	236d      	movs	r3, #109	; 0x6d
   1d5a2:	e7ed      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EPROTONOSUPPORT;
   1d5a4:	f013 fd86 	bl	310b4 <__errno>
   1d5a8:	237b      	movs	r3, #123	; 0x7b
   1d5aa:	e7e9      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EOPNOTSUPP;
   1d5ac:	f013 fd82 	bl	310b4 <__errno>
   1d5b0:	235f      	movs	r3, #95	; 0x5f
   1d5b2:	e7e5      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EADDRINUSE;
   1d5b4:	f013 fd7e 	bl	310b4 <__errno>
   1d5b8:	2370      	movs	r3, #112	; 0x70
   1d5ba:	e7e1      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ENETDOWN;
   1d5bc:	f013 fd7a 	bl	310b4 <__errno>
   1d5c0:	2373      	movs	r3, #115	; 0x73
   1d5c2:	e7dd      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ENETUNREACH;
   1d5c4:	f013 fd76 	bl	310b4 <__errno>
   1d5c8:	2372      	movs	r3, #114	; 0x72
   1d5ca:	e7d9      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ECONNRESET;
   1d5cc:	f013 fd72 	bl	310b4 <__errno>
   1d5d0:	2368      	movs	r3, #104	; 0x68
   1d5d2:	e7d5      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EISCONN;
   1d5d4:	f013 fd6e 	bl	310b4 <__errno>
   1d5d8:	237f      	movs	r3, #127	; 0x7f
   1d5da:	e7d1      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ETIMEDOUT;
   1d5dc:	f013 fd6a 	bl	310b4 <__errno>
   1d5e0:	2374      	movs	r3, #116	; 0x74
   1d5e2:	e7cd      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EHOSTDOWN;
   1d5e4:	f013 fd66 	bl	310b4 <__errno>
   1d5e8:	2375      	movs	r3, #117	; 0x75
   1d5ea:	e7c9      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EALREADY;
   1d5ec:	f013 fd62 	bl	310b4 <__errno>
   1d5f0:	2378      	movs	r3, #120	; 0x78
   1d5f2:	e7c5      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ECANCELED;
   1d5f4:	f013 fd5e 	bl	310b4 <__errno>
   1d5f8:	238c      	movs	r3, #140	; 0x8c
   1d5fa:	e7c1      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = ENOKEY;
   1d5fc:	f013 fd5a 	bl	310b4 <__errno>
   1d600:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1d604:	e7bc      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EKEYEXPIRED;
   1d606:	f013 fd55 	bl	310b4 <__errno>
   1d60a:	f240 73d2 	movw	r3, #2002	; 0x7d2
   1d60e:	e7b7      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EKEYREVOKED;
   1d610:	f013 fd50 	bl	310b4 <__errno>
   1d614:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1d618:	e7b2      	b.n	1d580 <bsd_os_errno_set+0x110>
		errno = EMSGSIZE;
   1d61a:	f013 fd4b 	bl	310b4 <__errno>
   1d61e:	237a      	movs	r3, #122	; 0x7a
   1d620:	e7ae      	b.n	1d580 <bsd_os_errno_set+0x110>
   1d622:	bf00      	nop
   1d624:	00037fce 	.word	0x00037fce
   1d628:	00038ae7 	.word	0x00038ae7
   1d62c:	00036be5 	.word	0x00036be5
   1d630:	00037ff2 	.word	0x00037ff2
   1d634:	baadbaad 	.word	0xbaadbaad

0001d638 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d63c:	4b01      	ldr	r3, [pc, #4]	; (1d644 <bsd_os_application_irq_set+0xc>)
   1d63e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d642:	4770      	bx	lr
   1d644:	e000e100 	.word	0xe000e100

0001d648 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d64c:	4b01      	ldr	r3, [pc, #4]	; (1d654 <bsd_os_application_irq_clear+0xc>)
   1d64e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d652:	4770      	bx	lr
   1d654:	e000e100 	.word	0xe000e100

0001d658 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d658:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d65c:	4b01      	ldr	r3, [pc, #4]	; (1d664 <bsd_os_trace_irq_set+0xc>)
   1d65e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1d662:	4770      	bx	lr
   1d664:	e000e100 	.word	0xe000e100

0001d668 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d668:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1d66c:	4b01      	ldr	r3, [pc, #4]	; (1d674 <bsd_os_trace_irq_clear+0xc>)
   1d66e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1d672:	4770      	bx	lr
   1d674:	e000e100 	.word	0xe000e100

0001d678 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1d678:	b508      	push	{r3, lr}
	list->head = NULL;
   1d67a:	2300      	movs	r3, #0
   1d67c:	4a07      	ldr	r2, [pc, #28]	; (1d69c <bsd_os_init+0x24>)
	list->tail = NULL;
   1d67e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d682:	4a07      	ldr	r2, [pc, #28]	; (1d6a0 <bsd_os_init+0x28>)
   1d684:	e8d2 1fef 	ldaex	r1, [r2]
   1d688:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1d68c:	2800      	cmp	r0, #0
   1d68e:	d1f9      	bne.n	1d684 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1d690:	f016 fa8c 	bl	33bac <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   1d694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1d698:	f016 ba7d 	b.w	33b96 <trace_task_create>
   1d69c:	20022180 	.word	0x20022180
   1d6a0:	2002217c 	.word	0x2002217c

0001d6a4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1d6a4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1d6a8:	d03c      	beq.n	1d724 <z_to_nrf_optname+0x80>
   1d6aa:	dc04      	bgt.n	1d6b6 <z_to_nrf_optname+0x12>
   1d6ac:	2801      	cmp	r0, #1
   1d6ae:	d042      	beq.n	1d736 <z_to_nrf_optname+0x92>
			break;
		}
		break;

	default:
		retval = -1;
   1d6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   1d6b4:	4770      	bx	lr
	switch (z_in_level) {
   1d6b6:	f240 2302 	movw	r3, #514	; 0x202
   1d6ba:	4298      	cmp	r0, r3
   1d6bc:	d060      	beq.n	1d780 <z_to_nrf_optname+0xdc>
   1d6be:	f240 2303 	movw	r3, #515	; 0x203
   1d6c2:	4298      	cmp	r0, r3
   1d6c4:	d1f4      	bne.n	1d6b0 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1d6c6:	3901      	subs	r1, #1
   1d6c8:	2913      	cmp	r1, #19
   1d6ca:	d8f1      	bhi.n	1d6b0 <z_to_nrf_optname+0xc>
   1d6cc:	a301      	add	r3, pc, #4	; (adr r3, 1d6d4 <z_to_nrf_optname+0x30>)
   1d6ce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1d6d2:	bf00      	nop
   1d6d4:	0001d78d 	.word	0x0001d78d
   1d6d8:	0001d765 	.word	0x0001d765
   1d6dc:	0001d769 	.word	0x0001d769
   1d6e0:	0001d76d 	.word	0x0001d76d
   1d6e4:	0001d771 	.word	0x0001d771
   1d6e8:	0001d775 	.word	0x0001d775
   1d6ec:	0001d779 	.word	0x0001d779
   1d6f0:	0001d6b1 	.word	0x0001d6b1
   1d6f4:	0001d6b1 	.word	0x0001d6b1
   1d6f8:	0001d6b1 	.word	0x0001d6b1
   1d6fc:	0001d6b1 	.word	0x0001d6b1
   1d700:	0001d6b1 	.word	0x0001d6b1
   1d704:	0001d6b1 	.word	0x0001d6b1
   1d708:	0001d6b1 	.word	0x0001d6b1
   1d70c:	0001d6b1 	.word	0x0001d6b1
   1d710:	0001d6b1 	.word	0x0001d6b1
   1d714:	0001d6b1 	.word	0x0001d6b1
   1d718:	0001d6b1 	.word	0x0001d6b1
   1d71c:	0001d6b1 	.word	0x0001d6b1
   1d720:	0001d77d 	.word	0x0001d77d
		switch (z_in_optname) {
   1d724:	3901      	subs	r1, #1
   1d726:	2906      	cmp	r1, #6
   1d728:	d8c2      	bhi.n	1d6b0 <z_to_nrf_optname+0xc>
   1d72a:	e8df f001 	tbb	[pc, r1]
   1d72e:	211b      	.short	0x211b
   1d730:	2f1f2523 	.word	0x2f1f2523
   1d734:	1d          	.byte	0x1d
   1d735:	00          	.byte	0x00
		switch (z_in_optname) {
   1d736:	2915      	cmp	r1, #21
   1d738:	d00d      	beq.n	1d756 <z_to_nrf_optname+0xb2>
   1d73a:	dc07      	bgt.n	1d74c <z_to_nrf_optname+0xa8>
   1d73c:	2904      	cmp	r1, #4
   1d73e:	d015      	beq.n	1d76c <z_to_nrf_optname+0xc8>
   1d740:	2914      	cmp	r1, #20
   1d742:	d008      	beq.n	1d756 <z_to_nrf_optname+0xb2>
   1d744:	2902      	cmp	r1, #2
   1d746:	d1b3      	bne.n	1d6b0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   1d748:	2328      	movs	r3, #40	; 0x28
   1d74a:	e020      	b.n	1d78e <z_to_nrf_optname+0xea>
   1d74c:	291e      	cmp	r1, #30
   1d74e:	d002      	beq.n	1d756 <z_to_nrf_optname+0xb2>
   1d750:	dc04      	bgt.n	1d75c <z_to_nrf_optname+0xb8>
   1d752:	2919      	cmp	r1, #25
   1d754:	d1ac      	bne.n	1d6b0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   1d756:	6011      	str	r1, [r2, #0]
	int retval = 0;
   1d758:	2000      	movs	r0, #0
			break;
   1d75a:	4770      	bx	lr
   1d75c:	291f      	cmp	r1, #31
   1d75e:	d0fa      	beq.n	1d756 <z_to_nrf_optname+0xb2>
   1d760:	2920      	cmp	r1, #32
   1d762:	e7f7      	b.n	1d754 <z_to_nrf_optname+0xb0>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   1d764:	2302      	movs	r3, #2
   1d766:	e012      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1d768:	2303      	movs	r3, #3
   1d76a:	e010      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1d76c:	2304      	movs	r3, #4
   1d76e:	e00e      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1d770:	2305      	movs	r3, #5
   1d772:	e00c      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1d774:	2306      	movs	r3, #6
   1d776:	e00a      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1d778:	2307      	movs	r3, #7
   1d77a:	e008      	b.n	1d78e <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1d77c:	2314      	movs	r3, #20
   1d77e:	e006      	b.n	1d78e <z_to_nrf_optname+0xea>
		switch (z_in_optname) {
   1d780:	2902      	cmp	r1, #2
   1d782:	d0ef      	beq.n	1d764 <z_to_nrf_optname+0xc0>
   1d784:	2903      	cmp	r1, #3
   1d786:	d0ef      	beq.n	1d768 <z_to_nrf_optname+0xc4>
   1d788:	2901      	cmp	r1, #1
   1d78a:	d191      	bne.n	1d6b0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1d78c:	2301      	movs	r3, #1
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1d78e:	6013      	str	r3, [r2, #0]
   1d790:	e7e2      	b.n	1d758 <z_to_nrf_optname+0xb4>
   1d792:	bf00      	nop

0001d794 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   1d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   1d798:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
{
   1d79c:	b093      	sub	sp, #76	; 0x4c
	int sd = OBJ_TO_SD(obj);
   1d79e:	3801      	subs	r0, #1
	switch (request) {
   1d7a0:	2b05      	cmp	r3, #5
   1d7a2:	d87a      	bhi.n	1d89a <nrf91_socket_offload_ioctl+0x106>
   1d7a4:	e8df f003 	tbb	[pc, r3]
   1d7a8:	95797909 	.word	0x95797909
   1d7ac:	0d03      	.short	0x0d03

	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;

	case ZFD_IOCTL_POLL_UPDATE:
		return -EOPNOTSUPP;
   1d7ae:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   1d7b2:	4620      	mov	r0, r4
   1d7b4:	b013      	add	sp, #76	; 0x4c
   1d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   1d7ba:	f008 f847 	bl	2584c <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d7be:	4604      	mov	r4, r0
		break;
   1d7c0:	e7f7      	b.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   1d7c2:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   1d7c6:	e9d2 a900 	ldrd	sl, r9, [r2]
		timeout = va_arg(args, int);
   1d7ca:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1d7cc:	2100      	movs	r1, #0
   1d7ce:	2240      	movs	r2, #64	; 0x40
   1d7d0:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   1d7d2:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1d7d4:	4655      	mov	r5, sl
   1d7d6:	f017 f95d 	bl	34a94 <memset>
   1d7da:	4657      	mov	r7, sl
	int retval = 0;
   1d7dc:	4644      	mov	r4, r8
		tmp[i].events = 0;
   1d7de:	46c3      	mov	fp, r8
   1d7e0:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   1d7e2:	45c1      	cmp	r9, r8
   1d7e4:	dc33      	bgt.n	1d84e <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   1d7e6:	2c00      	cmp	r4, #0
   1d7e8:	dce3      	bgt.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1d7ea:	9a01      	ldr	r2, [sp, #4]
   1d7ec:	4649      	mov	r1, r9
   1d7ee:	a802      	add	r0, sp, #8
   1d7f0:	f008 f8f8 	bl	259e4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1d7f4:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1d7f6:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1d7f8:	4599      	cmp	r9, r3
   1d7fa:	ddda      	ble.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   1d7fc:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   1d800:	2a00      	cmp	r2, #0
   1d802:	db21      	blt.n	1d848 <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   1d804:	aa02      	add	r2, sp, #8
   1d806:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d80a:	88d2      	ldrh	r2, [r2, #6]
   1d80c:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   1d80e:	bf42      	ittt	mi
   1d810:	88e9      	ldrhmi	r1, [r5, #6]
   1d812:	f041 0101 	orrmi.w	r1, r1, #1
   1d816:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1d818:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1d81a:	bf42      	ittt	mi
   1d81c:	88e9      	ldrhmi	r1, [r5, #6]
   1d81e:	f041 0104 	orrmi.w	r1, r1, #4
   1d822:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1d824:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1d826:	bf42      	ittt	mi
   1d828:	88e9      	ldrhmi	r1, [r5, #6]
   1d82a:	f041 0108 	orrmi.w	r1, r1, #8
   1d82e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1d830:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   1d832:	bf42      	ittt	mi
   1d834:	88e9      	ldrhmi	r1, [r5, #6]
   1d836:	f041 0120 	orrmi.w	r1, r1, #32
   1d83a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1d83c:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   1d83e:	bf42      	ittt	mi
   1d840:	88ea      	ldrhmi	r2, [r5, #6]
   1d842:	f042 0210 	orrmi.w	r2, r2, #16
   1d846:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1d848:	3301      	adds	r3, #1
   1d84a:	3508      	adds	r5, #8
   1d84c:	e7d4      	b.n	1d7f8 <nrf91_socket_offload_ioctl+0x64>
		if (fds[i].fd < 0) {
   1d84e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1d850:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   1d854:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   1d856:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   1d85a:	da05      	bge.n	1d868 <nrf91_socket_offload_ioctl+0xd4>
			tmp[i].fd = fds[i].fd;
   1d85c:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1d85e:	f108 0801 	add.w	r8, r8, #1
   1d862:	3608      	adds	r6, #8
   1d864:	3708      	adds	r7, #8
   1d866:	e7bc      	b.n	1d7e2 <nrf91_socket_offload_ioctl+0x4e>
			obj = z_get_fd_obj(fds[i].fd,
   1d868:	2286      	movs	r2, #134	; 0x86
   1d86a:	491b      	ldr	r1, [pc, #108]	; (1d8d8 <nrf91_socket_offload_ioctl+0x144>)
   1d86c:	f7f9 fae0 	bl	16e30 <z_get_fd_obj>
			if (obj != NULL) {
   1d870:	b178      	cbz	r0, 1d892 <nrf91_socket_offload_ioctl+0xfe>
				tmp[i].fd = OBJ_TO_SD(obj);
   1d872:	3801      	subs	r0, #1
   1d874:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   1d876:	88b9      	ldrh	r1, [r7, #4]
   1d878:	07ca      	lsls	r2, r1, #31
			tmp[i].events |= NRF_POLLIN;
   1d87a:	bf42      	ittt	mi
   1d87c:	88b2      	ldrhmi	r2, [r6, #4]
   1d87e:	f042 0201 	orrmi.w	r2, r2, #1
   1d882:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1d884:	074b      	lsls	r3, r1, #29
			tmp[i].events |= NRF_POLLOUT;
   1d886:	bf42      	ittt	mi
   1d888:	88b2      	ldrhmi	r2, [r6, #4]
   1d88a:	f042 0202 	orrmi.w	r2, r2, #2
   1d88e:	80b2      	strhmi	r2, [r6, #4]
   1d890:	e7e5      	b.n	1d85e <nrf91_socket_offload_ioctl+0xca>
				fds[i].revents = POLLNVAL;
   1d892:	2220      	movs	r2, #32
				retval++;
   1d894:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1d896:	80fa      	strh	r2, [r7, #6]
				retval++;
   1d898:	e7ed      	b.n	1d876 <nrf91_socket_offload_ioctl+0xe2>
	switch (cmd) {
   1d89a:	2903      	cmp	r1, #3
   1d89c:	d00a      	beq.n	1d8b4 <nrf91_socket_offload_ioctl+0x120>
   1d89e:	2904      	cmp	r1, #4
   1d8a0:	d110      	bne.n	1d8c4 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   1d8a2:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1d8a4:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1d8a8:	d10c      	bne.n	1d8c4 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d8aa:	1392      	asrs	r2, r2, #14
   1d8ac:	2101      	movs	r1, #1
   1d8ae:	f008 f89b 	bl	259e8 <nrf_fcntl>
   1d8b2:	e784      	b.n	1d7be <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1d8b4:	2200      	movs	r2, #0
   1d8b6:	2102      	movs	r1, #2
   1d8b8:	f008 f896 	bl	259e8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1d8bc:	0380      	lsls	r0, r0, #14
   1d8be:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1d8c2:	e776      	b.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   1d8c4:	f013 fbf6 	bl	310b4 <__errno>
   1d8c8:	2316      	movs	r3, #22
	return retval;
   1d8ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   1d8ce:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1d8d0:	e76f      	b.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   1d8d2:	f06f 0411 	mvn.w	r4, #17
   1d8d6:	e76c      	b.n	1d7b2 <nrf91_socket_offload_ioctl+0x1e>
   1d8d8:	00035e04 	.word	0x00035e04

0001d8dc <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1d8dc:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1d8de:	4b03      	ldr	r3, [pc, #12]	; (1d8ec <nrf91_socket_iface_init+0x10>)
   1d8e0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1d8e2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d8e4:	4802      	ldr	r0, [pc, #8]	; (1d8f0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1d8e6:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d8e8:	f7fa b958 	b.w	17b9c <socket_offload_dns_register>
   1d8ec:	200221d8 	.word	0x200221d8
   1d8f0:	00035dfc 	.word	0x00035dfc

0001d8f4 <nrf91_socket_offload_accept>:
{
   1d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8f8:	b08a      	sub	sp, #40	; 0x28
   1d8fa:	4605      	mov	r5, r0
   1d8fc:	460c      	mov	r4, r1
   1d8fe:	4616      	mov	r6, r2
	int fd = z_reserve_fd();
   1d900:	f7f9 fac4 	bl	16e8c <z_reserve_fd>
	if (fd < 0) {
   1d904:	1e07      	subs	r7, r0, #0
	int sd = OBJ_TO_SD(obj);
   1d906:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
	if (fd < 0) {
   1d90a:	da05      	bge.n	1d918 <nrf91_socket_offload_accept+0x24>
	return -1;
   1d90c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
}
   1d910:	4638      	mov	r0, r7
   1d912:	b00a      	add	sp, #40	; 0x28
   1d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1d918:	b324      	cbz	r4, 1d964 <nrf91_socket_offload_accept+0x70>
   1d91a:	b336      	cbz	r6, 1d96a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d91c:	6832      	ldr	r2, [r6, #0]
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1d91e:	ad01      	add	r5, sp, #4
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d920:	2a08      	cmp	r2, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1d922:	bf0c      	ite	eq
   1d924:	2210      	moveq	r2, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1d926:	2224      	movne	r2, #36	; 0x24
   1d928:	9200      	str	r2, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1d92a:	466a      	mov	r2, sp
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1d92c:	4629      	mov	r1, r5
   1d92e:	4618      	mov	r0, r3
   1d930:	f007 fff4 	bl	2591c <nrf_accept>
	if (new_sd < 0) {
   1d934:	f1b0 0800 	subs.w	r8, r0, #0
   1d938:	dbe8      	blt.n	1d90c <nrf91_socket_offload_accept+0x18>
	if ((addr != NULL) && (addrlen != NULL)) {
   1d93a:	b164      	cbz	r4, 1d956 <nrf91_socket_offload_accept+0x62>
   1d93c:	b15e      	cbz	r6, 1d956 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1d93e:	686b      	ldr	r3, [r5, #4]
   1d940:	2b02      	cmp	r3, #2
   1d942:	d115      	bne.n	1d970 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   1d944:	2308      	movs	r3, #8
   1d946:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1d948:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1d94c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1d94e:	2301      	movs	r3, #1
   1d950:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1d952:	9b04      	ldr	r3, [sp, #16]
   1d954:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   1d956:	4a0d      	ldr	r2, [pc, #52]	; (1d98c <nrf91_socket_offload_accept+0x98>)
   1d958:	f108 0101 	add.w	r1, r8, #1
   1d95c:	4638      	mov	r0, r7
   1d95e:	f7f9 fab7 	bl	16ed0 <z_finalize_fd>
	return fd;
   1d962:	e7d5      	b.n	1d910 <nrf91_socket_offload_accept+0x1c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d964:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d966:	4625      	mov	r5, r4
   1d968:	e7e0      	b.n	1d92c <nrf91_socket_offload_accept+0x38>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d96a:	4632      	mov	r2, r6
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d96c:	4635      	mov	r5, r6
   1d96e:	e7dd      	b.n	1d92c <nrf91_socket_offload_accept+0x38>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1d970:	2b0a      	cmp	r3, #10
   1d972:	d106      	bne.n	1d982 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   1d974:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1d976:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   1d978:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   1d97a:	4620      	mov	r0, r4
   1d97c:	f016 fa08 	bl	33d90 <nrf_to_z_ipv6>
   1d980:	e7e9      	b.n	1d956 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   1d982:	4638      	mov	r0, r7
   1d984:	f7f9 faae 	bl	16ee4 <z_free_fd>
   1d988:	e7c0      	b.n	1d90c <nrf91_socket_offload_accept+0x18>
   1d98a:	bf00      	nop
   1d98c:	00035e04 	.word	0x00035e04

0001d990 <nrf91_socket_offload_sendmsg>:
{
   1d990:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d994:	4607      	mov	r7, r0
   1d996:	4690      	mov	r8, r2
	if (msg == NULL) {
   1d998:	460c      	mov	r4, r1
   1d99a:	b309      	cbz	r1, 1d9e0 <nrf91_socket_offload_sendmsg+0x50>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d99c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1d99e:	461a      	mov	r2, r3
   1d9a0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d9a2:	4298      	cmp	r0, r3
   1d9a4:	d126      	bne.n	1d9f4 <nrf91_socket_offload_sendmsg+0x64>
	if (len <= sizeof(buf)) {
   1d9a6:	2a80      	cmp	r2, #128	; 0x80
   1d9a8:	d855      	bhi.n	1da56 <nrf91_socket_offload_sendmsg+0xc6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d9aa:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1d9ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d9b0:	482a      	ldr	r0, [pc, #168]	; (1da5c <nrf91_socket_offload_sendmsg+0xcc>)
   1d9b2:	f00b fa7d 	bl	28eb0 <z_impl_k_mutex_lock>
		len = 0;
   1d9b6:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1d9b8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1da60 <nrf91_socket_offload_sendmsg+0xd0>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d9bc:	68e3      	ldr	r3, [r4, #12]
   1d9be:	42ab      	cmp	r3, r5
   1d9c0:	d81f      	bhi.n	1da02 <nrf91_socket_offload_sendmsg+0x72>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   1d9c2:	6863      	ldr	r3, [r4, #4]
   1d9c4:	4632      	mov	r2, r6
   1d9c6:	9301      	str	r3, [sp, #4]
   1d9c8:	6823      	ldr	r3, [r4, #0]
   1d9ca:	4925      	ldr	r1, [pc, #148]	; (1da60 <nrf91_socket_offload_sendmsg+0xd0>)
   1d9cc:	9300      	str	r3, [sp, #0]
   1d9ce:	4638      	mov	r0, r7
   1d9d0:	4643      	mov	r3, r8
   1d9d2:	f016 fb30 	bl	34036 <nrf91_socket_offload_sendto>
   1d9d6:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1d9d8:	4820      	ldr	r0, [pc, #128]	; (1da5c <nrf91_socket_offload_sendmsg+0xcc>)
   1d9da:	f00b fb47 	bl	2906c <z_impl_k_mutex_unlock>
		return ret;
   1d9de:	e005      	b.n	1d9ec <nrf91_socket_offload_sendmsg+0x5c>
		errno = EINVAL;
   1d9e0:	f013 fb68 	bl	310b4 <__errno>
   1d9e4:	2316      	movs	r3, #22
		return -1;
   1d9e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = EINVAL;
   1d9ea:	6003      	str	r3, [r0, #0]
}
   1d9ec:	4630      	mov	r0, r6
   1d9ee:	b002      	add	sp, #8
   1d9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1d9f4:	68a1      	ldr	r1, [r4, #8]
   1d9f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d9fa:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d9fc:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1d9fe:	440a      	add	r2, r1
   1da00:	e7cf      	b.n	1d9a2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1da02:	68a3      	ldr	r3, [r4, #8]
   1da04:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1da08:	eb03 0209 	add.w	r2, r3, r9
   1da0c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1da10:	eb0a 0006 	add.w	r0, sl, r6
   1da14:	6852      	ldr	r2, [r2, #4]
   1da16:	f017 f803 	bl	34a20 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1da1a:	68a3      	ldr	r3, [r4, #8]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1da1c:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1da1e:	444b      	add	r3, r9
   1da20:	685b      	ldr	r3, [r3, #4]
   1da22:	441e      	add	r6, r3
   1da24:	e7ca      	b.n	1d9bc <nrf91_socket_offload_sendmsg+0x2c>
		if (msg->msg_iov[i].iov_len == 0) {
   1da26:	68a1      	ldr	r1, [r4, #8]
   1da28:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   1da2c:	685a      	ldr	r2, [r3, #4]
   1da2e:	b162      	cbz	r2, 1da4a <nrf91_socket_offload_sendmsg+0xba>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   1da30:	6863      	ldr	r3, [r4, #4]
   1da32:	4638      	mov	r0, r7
   1da34:	9301      	str	r3, [sp, #4]
   1da36:	6823      	ldr	r3, [r4, #0]
   1da38:	9300      	str	r3, [sp, #0]
   1da3a:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1da3e:	4643      	mov	r3, r8
   1da40:	f016 faf9 	bl	34036 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   1da44:	1e06      	subs	r6, r0, #0
   1da46:	dbd1      	blt.n	1d9ec <nrf91_socket_offload_sendmsg+0x5c>
		len += ret;
   1da48:	44b1      	add	r9, r6
	for (i = 0; i < msg->msg_iovlen; i++) {
   1da4a:	3501      	adds	r5, #1
   1da4c:	68e3      	ldr	r3, [r4, #12]
   1da4e:	429d      	cmp	r5, r3
   1da50:	d3e9      	bcc.n	1da26 <nrf91_socket_offload_sendmsg+0x96>
   1da52:	464e      	mov	r6, r9
   1da54:	e7ca      	b.n	1d9ec <nrf91_socket_offload_sendmsg+0x5c>
   1da56:	2500      	movs	r5, #0
	len = 0;
   1da58:	46a9      	mov	r9, r5
   1da5a:	e7f7      	b.n	1da4c <nrf91_socket_offload_sendmsg+0xbc>
   1da5c:	200206c4 	.word	0x200206c4
   1da60:	20027ef3 	.word	0x20027ef3

0001da64 <nrf91_socket_create>:
{
   1da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da66:	4606      	mov	r6, r0
   1da68:	460d      	mov	r5, r1
   1da6a:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   1da6c:	f7f9 fa0e 	bl	16e8c <z_reserve_fd>
	if (fd < 0) {
   1da70:	1e04      	subs	r4, r0, #0
   1da72:	db0d      	blt.n	1da90 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   1da74:	b2b0      	uxth	r0, r6
   1da76:	f016 f8b4 	bl	33be2 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1da7a:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   1da7e:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   1da80:	d109      	bne.n	1da96 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   1da82:	f013 fb17 	bl	310b4 <__errno>
   1da86:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1da88:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1da8a:	4620      	mov	r0, r4
   1da8c:	f7f9 fa2a 	bl	16ee4 <z_free_fd>
		return -1;
   1da90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1da94:	e01b      	b.n	1dace <nrf91_socket_create+0x6a>
	switch (socktype) {
   1da96:	2d03      	cmp	r5, #3
   1da98:	d003      	beq.n	1daa2 <nrf91_socket_create+0x3e>
		return NRF_SOCK_MGMT;
   1da9a:	2d04      	cmp	r5, #4
   1da9c:	bf08      	it	eq
   1da9e:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1daa2:	4638      	mov	r0, r7
   1daa4:	f016 f8b5 	bl	33c12 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1daa8:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   1daac:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1daae:	d103      	bne.n	1dab8 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   1dab0:	f013 fb00 	bl	310b4 <__errno>
   1dab4:	237b      	movs	r3, #123	; 0x7b
   1dab6:	e7e7      	b.n	1da88 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   1dab8:	4629      	mov	r1, r5
   1daba:	4630      	mov	r0, r6
   1dabc:	f007 feb4 	bl	25828 <nrf_socket>
	if (sd < 0) {
   1dac0:	1e01      	subs	r1, r0, #0
   1dac2:	dbe2      	blt.n	1da8a <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   1dac4:	4a03      	ldr	r2, [pc, #12]	; (1dad4 <nrf91_socket_create+0x70>)
   1dac6:	3101      	adds	r1, #1
   1dac8:	4620      	mov	r0, r4
   1daca:	f7f9 fa01 	bl	16ed0 <z_finalize_fd>
}
   1dace:	4620      	mov	r0, r4
   1dad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dad2:	bf00      	nop
   1dad4:	00035e04 	.word	0x00035e04

0001dad8 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   1dad8:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   1dada:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   1dadc:	b118      	cbz	r0, 1dae6 <callback_worker+0xe>
		data->callback(data->data);
   1dade:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1dae2:	300c      	adds	r0, #12
   1dae4:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1dae6:	a901      	add	r1, sp, #4
   1dae8:	4802      	ldr	r0, [pc, #8]	; (1daf4 <callback_worker+0x1c>)
   1daea:	f00a ffe9 	bl	28ac0 <k_mem_slab_free>
}
   1daee:	b003      	add	sp, #12
   1daf0:	f85d fb04 	ldr.w	pc, [sp], #4
   1daf4:	20020620 	.word	0x20020620

0001daf8 <open_socket>:
{
   1daf8:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   1dafa:	f240 2201 	movw	r2, #513	; 0x201
   1dafe:	2102      	movs	r1, #2
   1db00:	2066      	movs	r0, #102	; 0x66
   1db02:	f7f9 fc99 	bl	17438 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   1db06:	4b05      	ldr	r3, [pc, #20]	; (1db1c <open_socket+0x24>)
   1db08:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   1db0a:	3001      	adds	r0, #1
   1db0c:	d104      	bne.n	1db18 <open_socket+0x20>
		return -errno;
   1db0e:	f013 fad1 	bl	310b4 <__errno>
   1db12:	6800      	ldr	r0, [r0, #0]
   1db14:	4240      	negs	r0, r0
}
   1db16:	bd08      	pop	{r3, pc}
	return 0;
   1db18:	2000      	movs	r0, #0
   1db1a:	e7fc      	b.n	1db16 <open_socket+0x1e>
   1db1c:	200221dc 	.word	0x200221dc

0001db20 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   1db20:	b530      	push	{r4, r5, lr}
   1db22:	b085      	sub	sp, #20
   1db24:	4605      	mov	r5, r0
   1db26:	460c      	mov	r4, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   1db28:	f7f4 faaa 	bl	12080 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1db2c:	4b10      	ldr	r3, [pc, #64]	; (1db70 <at_write+0x50>)
	int bytes_to_send = strlen(cmd);
   1db2e:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1db30:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1db32:	2300      	movs	r3, #0
   1db34:	4629      	mov	r1, r5
   1db36:	e9cd 3300 	strd	r3, r3, [sp]
   1db3a:	f011 ff98 	bl	2fa6e <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   1db3e:	3001      	adds	r0, #1
   1db40:	d10e      	bne.n	1db60 <at_write+0x40>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
   1db42:	f013 fab7 	bl	310b4 <__errno>
   1db46:	6803      	ldr	r3, [r0, #0]
   1db48:	425b      	negs	r3, r3
   1db4a:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   1db4c:	2301      	movs	r3, #1
   1db4e:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   1db52:	b114      	cbz	r4, 1db5a <at_write+0x3a>
		*state = ret.state;
   1db54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1db58:	7023      	strb	r3, [r4, #0]
	}

	return ret.code;
}
   1db5a:	9802      	ldr	r0, [sp, #8]
   1db5c:	b005      	add	sp, #20
   1db5e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
   1db60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db64:	a902      	add	r1, sp, #8
   1db66:	4803      	ldr	r0, [pc, #12]	; (1db74 <at_write+0x54>)
   1db68:	f00b f8be 	bl	28ce8 <z_impl_k_msgq_get>
   1db6c:	e7f1      	b.n	1db52 <at_write+0x32>
   1db6e:	bf00      	nop
   1db70:	200221dc 	.word	0x200221dc
   1db74:	20020734 	.word	0x20020734

0001db78 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   1db78:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   1db7a:	4d0e      	ldr	r5, [pc, #56]	; (1dbb4 <at_cmd_driver_init+0x3c>)
{
   1db7c:	b087      	sub	sp, #28
	if (initialized) {
   1db7e:	782b      	ldrb	r3, [r5, #0]
   1db80:	b9b3      	cbnz	r3, 1dbb0 <at_cmd_driver_init+0x38>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1db82:	f7ff ffb9 	bl	1daf8 <open_socket>
	if (err) {
   1db86:	4604      	mov	r4, r0
   1db88:	b978      	cbnz	r0, 1dbaa <at_cmd_driver_init+0x32>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1db8a:	230a      	movs	r3, #10
   1db8c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1db90:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1db94:	e9cd 0000 	strd	r0, r0, [sp]
   1db98:	4b07      	ldr	r3, [pc, #28]	; (1dbb8 <at_cmd_driver_init+0x40>)
   1db9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1db9e:	4907      	ldr	r1, [pc, #28]	; (1dbbc <at_cmd_driver_init+0x44>)
   1dba0:	4807      	ldr	r0, [pc, #28]	; (1dbc0 <at_cmd_driver_init+0x48>)
   1dba2:	f00d f811 	bl	2abc8 <z_impl_k_thread_create>
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	initialized = true;
   1dba6:	2301      	movs	r3, #1
   1dba8:	702b      	strb	r3, [r5, #0]
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   1dbaa:	4620      	mov	r0, r4
   1dbac:	b007      	add	sp, #28
   1dbae:	bd30      	pop	{r4, r5, pc}
		return 0;
   1dbb0:	2400      	movs	r4, #0
   1dbb2:	e7fa      	b.n	1dbaa <at_cmd_driver_init+0x32>
   1dbb4:	20027f73 	.word	0x20027f73
   1dbb8:	0001dbc5 	.word	0x0001dbc5
   1dbbc:	20031f90 	.word	0x20031f90
   1dbc0:	200221f0 	.word	0x200221f0

0001dbc4 <socket_thread_fn>:
{
   1dbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   1dbc8:	4e66      	ldr	r6, [pc, #408]	; (1dd64 <socket_thread_fn+0x1a0>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1dbca:	4f67      	ldr	r7, [pc, #412]	; (1dd68 <socket_thread_fn+0x1a4>)
   1dbcc:	46b0      	mov	r8, r6
{
   1dbce:	b086      	sub	sp, #24
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1dbd0:	a903      	add	r1, sp, #12
   1dbd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dbd6:	4638      	mov	r0, r7
   1dbd8:	f00a ff0e 	bl	289f8 <k_mem_slab_alloc>
		ret.code  = 0;
   1dbdc:	2300      	movs	r3, #0
		item->callback = NULL;
   1dbde:	9903      	ldr	r1, [sp, #12]
		ret.code  = 0;
   1dbe0:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   1dbe2:	f88d 3014 	strb.w	r3, [sp, #20]
		item->callback = NULL;
   1dbe6:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
		bytes_read = recv(common_socket_fd, item->data,
   1dbea:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1dbec:	f640 228c 	movw	r2, #2700	; 0xa8c
   1dbf0:	e9cd 3300 	strd	r3, r3, [sp]
   1dbf4:	310c      	adds	r1, #12
   1dbf6:	f011 ff8c 	bl	2fb12 <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   1dbfa:	2800      	cmp	r0, #0
   1dbfc:	da2f      	bge.n	1dc5e <socket_thread_fn+0x9a>
			if ((close(common_socket_fd) == 0) &&
   1dbfe:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   1dc00:	f011 fefb 	bl	2f9fa <z_impl_zsock_close>
   1dc04:	bb20      	cbnz	r0, 1dc50 <socket_thread_fn+0x8c>
			    (open_socket() == 0)) {
   1dc06:	f7ff ff77 	bl	1daf8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   1dc0a:	bb08      	cbnz	r0, 1dc50 <socket_thread_fn+0x8c>
				ret.state = AT_CMD_ERROR;
   1dc0c:	2301      	movs	r3, #1
   1dc0e:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   1dc12:	f013 fa4f 	bl	310b4 <__errno>
   1dc16:	6803      	ldr	r3, [r0, #0]
   1dc18:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   1dc1a:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   1dc1c:	9903      	ldr	r1, [sp, #12]
   1dc1e:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1dc22:	2b00      	cmp	r3, #0
   1dc24:	d162      	bne.n	1dcec <socket_thread_fn+0x128>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1dc26:	a903      	add	r1, sp, #12
   1dc28:	4638      	mov	r0, r7
   1dc2a:	f00a ff49 	bl	28ac0 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   1dc2e:	4b4f      	ldr	r3, [pc, #316]	; (1dd6c <socket_thread_fn+0x1a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1dc30:	689b      	ldr	r3, [r3, #8]
   1dc32:	2b00      	cmp	r3, #0
   1dc34:	d1cc      	bne.n	1dbd0 <socket_thread_fn+0xc>
   1dc36:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1dc3a:	2a04      	cmp	r2, #4
   1dc3c:	d0c8      	beq.n	1dbd0 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   1dc3e:	4a4c      	ldr	r2, [pc, #304]	; (1dd70 <socket_thread_fn+0x1ac>)
   1dc40:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1dc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc46:	a904      	add	r1, sp, #16
   1dc48:	484a      	ldr	r0, [pc, #296]	; (1dd74 <socket_thread_fn+0x1b0>)
   1dc4a:	f00a ffb3 	bl	28bb4 <z_impl_k_msgq_put>
   1dc4e:	e7bf      	b.n	1dbd0 <socket_thread_fn+0xc>
			close(common_socket_fd);
   1dc50:	f8d8 0000 	ldr.w	r0, [r8]
   1dc54:	f011 fed1 	bl	2f9fa <z_impl_zsock_close>
}
   1dc58:	b006      	add	sp, #24
   1dc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   1dc5e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1dc62:	4448      	add	r0, r9
   1dc64:	f890 a00b 	ldrb.w	sl, [r0, #11]
   1dc68:	f1ba 0f00 	cmp.w	sl, #0
   1dc6c:	d002      	beq.n	1dc74 <socket_thread_fn+0xb0>
			ret.code  = -ENOBUFS;
   1dc6e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1dc72:	e7d2      	b.n	1dc1a <socket_thread_fn+0x56>
	ret->state = AT_CMD_NOTIFICATION;
   1dc74:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   1dc76:	f109 040c 	add.w	r4, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1dc7a:	493f      	ldr	r1, [pc, #252]	; (1dd78 <socket_thread_fn+0x1b4>)
   1dc7c:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   1dc7e:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1dc82:	f017 f84c 	bl	34d1e <strstr>
		if (tmpstr) {
   1dc86:	4605      	mov	r5, r0
   1dc88:	b140      	cbz	r0, 1dc9c <socket_thread_fn+0xd8>
			ret->state = AT_CMD_OK;
   1dc8a:	f88d a014 	strb.w	sl, [sp, #20]
			ret->code  = 0;
   1dc8e:	f8cd a010 	str.w	sl, [sp, #16]
		buf[new_len++] = '\0';
   1dc92:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1dc94:	1b2a      	subs	r2, r5, r4
		buf[new_len++] = '\0';
   1dc96:	3201      	adds	r2, #1
   1dc98:	702b      	strb	r3, [r5, #0]
   1dc9a:	e04c      	b.n	1dd36 <socket_thread_fn+0x172>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1dc9c:	4937      	ldr	r1, [pc, #220]	; (1dd7c <socket_thread_fn+0x1b8>)
   1dc9e:	4620      	mov	r0, r4
   1dca0:	f017 f83d 	bl	34d1e <strstr>
		if (tmpstr) {
   1dca4:	4605      	mov	r5, r0
   1dca6:	b140      	cbz	r0, 1dcba <socket_thread_fn+0xf6>
			ret->state = AT_CMD_ERROR_CMS;
   1dca8:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1dcaa:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   1dcae:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1dcb2:	f016 fe95 	bl	349e0 <atoi>
   1dcb6:	9004      	str	r0, [sp, #16]
			break;
   1dcb8:	e7eb      	b.n	1dc92 <socket_thread_fn+0xce>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   1dcba:	4931      	ldr	r1, [pc, #196]	; (1dd80 <socket_thread_fn+0x1bc>)
   1dcbc:	4620      	mov	r0, r4
   1dcbe:	f017 f82e 	bl	34d1e <strstr>
		if (tmpstr) {
   1dcc2:	4605      	mov	r5, r0
   1dcc4:	b108      	cbz	r0, 1dcca <socket_thread_fn+0x106>
			ret->state = AT_CMD_ERROR_CME;
   1dcc6:	2303      	movs	r3, #3
   1dcc8:	e7ef      	b.n	1dcaa <socket_thread_fn+0xe6>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   1dcca:	492e      	ldr	r1, [pc, #184]	; (1dd84 <socket_thread_fn+0x1c0>)
   1dccc:	4620      	mov	r0, r4
   1dcce:	f017 f826 	bl	34d1e <strstr>
		if (tmpstr) {
   1dcd2:	4605      	mov	r5, r0
   1dcd4:	b358      	cbz	r0, 1dd2e <socket_thread_fn+0x16a>
			ret->state = AT_CMD_ERROR;
   1dcd6:	2301      	movs	r3, #1
   1dcd8:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   1dcdc:	f06f 0307 	mvn.w	r3, #7
   1dce0:	9304      	str	r3, [sp, #16]
			break;
   1dce2:	e7d6      	b.n	1dc92 <socket_thread_fn+0xce>
					ret.code  = -EMSGSIZE;
   1dce4:	f06f 0379 	mvn.w	r3, #121	; 0x79
   1dce8:	9304      	str	r3, [sp, #16]
   1dcea:	e036      	b.n	1dd5a <socket_thread_fn+0x196>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1dcec:	4b26      	ldr	r3, [pc, #152]	; (1dd88 <socket_thread_fn+0x1c4>)
   1dcee:	2200      	movs	r2, #0
   1dcf0:	604b      	str	r3, [r1, #4]
   1dcf2:	460b      	mov	r3, r1
   1dcf4:	600a      	str	r2, [r1, #0]
   1dcf6:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dcfa:	e8d3 2fef 	ldaex	r2, [r3]
   1dcfe:	f042 0001 	orr.w	r0, r2, #1
   1dd02:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1dd06:	2c00      	cmp	r4, #0
   1dd08:	d1f7      	bne.n	1dcfa <socket_thread_fn+0x136>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1dd0a:	07d3      	lsls	r3, r2, #31
   1dd0c:	d48f      	bmi.n	1dc2e <socket_thread_fn+0x6a>
		k_queue_append(&work_q->queue, work);
   1dd0e:	481f      	ldr	r0, [pc, #124]	; (1dd8c <socket_thread_fn+0x1c8>)
   1dd10:	f016 fcee 	bl	346f0 <k_queue_append>
   1dd14:	e78b      	b.n	1dc2e <socket_thread_fn+0x6a>
		if (payload_len == 0) {
   1dd16:	2a00      	cmp	r2, #0
   1dd18:	d080      	beq.n	1dc1c <socket_thread_fn+0x58>
			item->callback = notification_handler;
   1dd1a:	4b1d      	ldr	r3, [pc, #116]	; (1dd90 <socket_thread_fn+0x1cc>)
			item->callback = current_cmd_handler;
   1dd1c:	681b      	ldr	r3, [r3, #0]
   1dd1e:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   1dd22:	e77b      	b.n	1dc1c <socket_thread_fn+0x58>
		if (payload_len == 0) {
   1dd24:	2a00      	cmp	r2, #0
   1dd26:	f43f af79 	beq.w	1dc1c <socket_thread_fn+0x58>
			item->callback = current_cmd_handler;
   1dd2a:	4b11      	ldr	r3, [pc, #68]	; (1dd70 <socket_thread_fn+0x1ac>)
   1dd2c:	e7f6      	b.n	1dd1c <socket_thread_fn+0x158>
		new_len = strlen(buf) + 1;
   1dd2e:	4620      	mov	r0, r4
   1dd30:	f7f4 f9a6 	bl	12080 <strlen>
   1dd34:	1c42      	adds	r2, r0, #1
		if (ret.state != AT_CMD_NOTIFICATION) {
   1dd36:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dd3a:	9903      	ldr	r1, [sp, #12]
   1dd3c:	2b04      	cmp	r3, #4
   1dd3e:	d0ea      	beq.n	1dd16 <socket_thread_fn+0x152>
			if ((response_buf_len > 0) &&
   1dd40:	4d14      	ldr	r5, [pc, #80]	; (1dd94 <socket_thread_fn+0x1d0>)
   1dd42:	682b      	ldr	r3, [r5, #0]
   1dd44:	2b00      	cmp	r3, #0
   1dd46:	d0ed      	beq.n	1dd24 <socket_thread_fn+0x160>
			    (response_buf != NULL)) {
   1dd48:	4c13      	ldr	r4, [pc, #76]	; (1dd98 <socket_thread_fn+0x1d4>)
   1dd4a:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   1dd4c:	2800      	cmp	r0, #0
   1dd4e:	d0e9      	beq.n	1dd24 <socket_thread_fn+0x160>
				if (response_buf_len >= payload_len) {
   1dd50:	4293      	cmp	r3, r2
   1dd52:	d3c7      	bcc.n	1dce4 <socket_thread_fn+0x120>
   1dd54:	310c      	adds	r1, #12
   1dd56:	f016 fe63 	bl	34a20 <memcpy>
				response_buf_len = 0;
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   1dd5e:	6023      	str	r3, [r4, #0]
				goto next;
   1dd60:	e75c      	b.n	1dc1c <socket_thread_fn+0x58>
   1dd62:	bf00      	nop
   1dd64:	200221dc 	.word	0x200221dc
   1dd68:	20020620 	.word	0x20020620
   1dd6c:	20020654 	.word	0x20020654
   1dd70:	200221e0 	.word	0x200221e0
   1dd74:	20020734 	.word	0x20020734
   1dd78:	000377d0 	.word	0x000377d0
   1dd7c:	00038026 	.word	0x00038026
   1dd80:	00038032 	.word	0x00038032
   1dd84:	0003803e 	.word	0x0003803e
   1dd88:	0001dad9 	.word	0x0001dad9
   1dd8c:	20027460 	.word	0x20027460
   1dd90:	200221e4 	.word	0x200221e4
   1dd94:	200221ec 	.word	0x200221ec
   1dd98:	200221e8 	.word	0x200221e8

0001dd9c <at_cmd_write>:
{
   1dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dda0:	4605      	mov	r5, r0
   1dda2:	4688      	mov	r8, r1
   1dda4:	4617      	mov	r7, r2
   1dda6:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   1dda8:	4c0a      	ldr	r4, [pc, #40]	; (1ddd4 <at_cmd_write+0x38>)
   1ddaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddae:	4620      	mov	r0, r4
   1ddb0:	f00c fdb2 	bl	2a918 <z_impl_k_sem_take>
	response_buf     = buf;
   1ddb4:	4b08      	ldr	r3, [pc, #32]	; (1ddd8 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   1ddb6:	4631      	mov	r1, r6
	response_buf     = buf;
   1ddb8:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   1ddbc:	4b07      	ldr	r3, [pc, #28]	; (1dddc <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1ddbe:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1ddc0:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1ddc2:	f7ff fead 	bl	1db20 <at_write>
   1ddc6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1ddc8:	4620      	mov	r0, r4
   1ddca:	f00c fd61 	bl	2a890 <z_impl_k_sem_give>
}
   1ddce:	4628      	mov	r0, r5
   1ddd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ddd4:	20020654 	.word	0x20020654
   1ddd8:	200221e8 	.word	0x200221e8
   1dddc:	200221ec 	.word	0x200221ec

0001dde0 <at_cmd_set_notification_handler>:
{
   1dde0:	b538      	push	{r3, r4, r5, lr}
   1dde2:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   1dde4:	4c06      	ldr	r4, [pc, #24]	; (1de00 <at_cmd_set_notification_handler+0x20>)
   1dde6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddea:	4620      	mov	r0, r4
   1ddec:	f00c fd94 	bl	2a918 <z_impl_k_sem_take>
	notification_handler = handler;
   1ddf0:	4b04      	ldr	r3, [pc, #16]	; (1de04 <at_cmd_set_notification_handler+0x24>)
   1ddf2:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   1ddf4:	4620      	mov	r0, r4
}
   1ddf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ddfa:	f00c bd49 	b.w	2a890 <z_impl_k_sem_give>
   1ddfe:	bf00      	nop
   1de00:	20020654 	.word	0x20020654
   1de04:	200221e4 	.word	0x200221e4

0001de08 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1de08:	4b0b      	ldr	r3, [pc, #44]	; (1de38 <find_node+0x30>)
{
   1de0a:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1de0c:	681b      	ldr	r3, [r3, #0]
   1de0e:	b153      	cbz	r3, 1de26 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1de10:	2500      	movs	r5, #0
   1de12:	461c      	mov	r4, r3
   1de14:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1de16:	6866      	ldr	r6, [r4, #4]
   1de18:	428e      	cmp	r6, r1
   1de1a:	d106      	bne.n	1de2a <find_node+0x22>
   1de1c:	68a6      	ldr	r6, [r4, #8]
   1de1e:	4296      	cmp	r6, r2
   1de20:	d103      	bne.n	1de2a <find_node+0x22>
			*prev_out = prev;
			return curr;
   1de22:	4623      	mov	r3, r4
			*prev_out = prev;
   1de24:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1de26:	4618      	mov	r0, r3
   1de28:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1de2a:	2b00      	cmp	r3, #0
   1de2c:	d0fb      	beq.n	1de26 <find_node+0x1e>
   1de2e:	4625      	mov	r5, r4
   1de30:	461c      	mov	r4, r3
   1de32:	681b      	ldr	r3, [r3, #0]
   1de34:	e7ef      	b.n	1de16 <find_node+0xe>
   1de36:	bf00      	nop
   1de38:	200222a8 	.word	0x200222a8

0001de3c <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   1de3c:	4a06      	ldr	r2, [pc, #24]	; (1de58 <module_init+0x1c>)
{
   1de3e:	b508      	push	{r3, lr}
	if (initialized) {
   1de40:	7813      	ldrb	r3, [r2, #0]
   1de42:	b93b      	cbnz	r3, 1de54 <module_init+0x18>
		LOG_WRN("Already initialized. Nothing to do");
		return 0;
	}

	initialized = true;
   1de44:	2101      	movs	r1, #1
   1de46:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   1de48:	4a04      	ldr	r2, [pc, #16]	; (1de5c <module_init+0x20>)

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1de4a:	4805      	ldr	r0, [pc, #20]	; (1de60 <module_init+0x24>)
	list->tail = NULL;
   1de4c:	e9c2 3300 	strd	r3, r3, [r2]
   1de50:	f7ff ffc6 	bl	1dde0 <at_cmd_set_notification_handler>
	return 0;
}
   1de54:	2000      	movs	r0, #0
   1de56:	bd08      	pop	{r3, pc}
   1de58:	20027f74 	.word	0x20027f74
   1de5c:	200222a8 	.word	0x200222a8
   1de60:	0001de71 	.word	0x0001de71

0001de64 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   1de64:	4801      	ldr	r0, [pc, #4]	; (1de6c <k_mutex_unlock.constprop.7+0x8>)
   1de66:	f00b b901 	b.w	2906c <z_impl_k_mutex_unlock>
   1de6a:	bf00      	nop
   1de6c:	200206d8 	.word	0x200206d8

0001de70 <notif_dispatch>:
{
   1de70:	b538      	push	{r3, r4, r5, lr}
   1de72:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1de74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1de78:	4809      	ldr	r0, [pc, #36]	; (1dea0 <notif_dispatch+0x30>)
   1de7a:	f00b f819 	bl	28eb0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1de7e:	4b09      	ldr	r3, [pc, #36]	; (1dea4 <notif_dispatch+0x34>)
   1de80:	681b      	ldr	r3, [r3, #0]
   1de82:	b91b      	cbnz	r3, 1de8c <notif_dispatch+0x1c>
}
   1de84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1de88:	f7ff bfec 	b.w	1de64 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1de8c:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   1de8e:	689a      	ldr	r2, [r3, #8]
   1de90:	4629      	mov	r1, r5
   1de92:	6858      	ldr	r0, [r3, #4]
   1de94:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1de96:	2c00      	cmp	r4, #0
   1de98:	d0f4      	beq.n	1de84 <notif_dispatch+0x14>
   1de9a:	4623      	mov	r3, r4
   1de9c:	6824      	ldr	r4, [r4, #0]
   1de9e:	e7f6      	b.n	1de8e <notif_dispatch+0x1e>
   1dea0:	200206d8 	.word	0x200206d8
   1dea4:	200222a8 	.word	0x200222a8

0001dea8 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   1dea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1deaa:	4606      	mov	r6, r0
	if (handler == NULL) {
   1deac:	460d      	mov	r5, r1
   1deae:	b351      	cbz	r1, 1df06 <at_notif_register_handler+0x5e>
   1deb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1deb4:	4815      	ldr	r0, [pc, #84]	; (1df0c <at_notif_register_handler+0x64>)
   1deb6:	f00a fffb 	bl	28eb0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1deba:	462a      	mov	r2, r5
   1debc:	4631      	mov	r1, r6
   1debe:	a801      	add	r0, sp, #4
   1dec0:	f7ff ffa2 	bl	1de08 <find_node>
   1dec4:	4604      	mov	r4, r0
   1dec6:	b120      	cbz	r0, 1ded2 <at_notif_register_handler+0x2a>
		k_mutex_unlock(&list_mtx);
   1dec8:	f7ff ffcc 	bl	1de64 <k_mutex_unlock.constprop.7>
		return 0;
   1decc:	2000      	movs	r0, #0
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
}
   1dece:	b002      	add	sp, #8
   1ded0:	bd70      	pop	{r4, r5, r6, pc}
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   1ded2:	200c      	movs	r0, #12
   1ded4:	f00a fe52 	bl	28b7c <k_malloc>
   1ded8:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1deda:	b920      	cbnz	r0, 1dee6 <at_notif_register_handler+0x3e>
		k_mutex_unlock(&list_mtx);
   1dedc:	f7ff ffc2 	bl	1de64 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   1dee0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dee4:	e7f3      	b.n	1dece <at_notif_register_handler+0x26>
__ssp_bos_icheck3(memset, void *, int)
   1dee6:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   1dee8:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1deea:	4a09      	ldr	r2, [pc, #36]	; (1df10 <at_notif_register_handler+0x68>)
   1deec:	6044      	str	r4, [r0, #4]
   1deee:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1def0:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1def2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1def4:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1def8:	b911      	cbnz	r1, 1df00 <at_notif_register_handler+0x58>
	list->head = node;
   1defa:	e9c2 3300 	strd	r3, r3, [r2]
   1defe:	e7e3      	b.n	1dec8 <at_notif_register_handler+0x20>
	parent->next = child;
   1df00:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1df02:	6053      	str	r3, [r2, #4]
   1df04:	e7e0      	b.n	1dec8 <at_notif_register_handler+0x20>
		return -EINVAL;
   1df06:	f06f 0015 	mvn.w	r0, #21
   1df0a:	e7e0      	b.n	1dece <at_notif_register_handler+0x26>
   1df0c:	200206d8 	.word	0x200206d8
   1df10:	200222a8 	.word	0x200222a8

0001df14 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1df14:	4b06      	ldr	r3, [pc, #24]	; (1df30 <is_valid_notification_char+0x1c>)
   1df16:	5cc3      	ldrb	r3, [r0, r3]
   1df18:	f003 0303 	and.w	r3, r3, #3
   1df1c:	2b02      	cmp	r3, #2
   1df1e:	bf08      	it	eq
   1df20:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1df22:	3841      	subs	r0, #65	; 0x41
   1df24:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1df26:	2819      	cmp	r0, #25
   1df28:	bf8c      	ite	hi
   1df2a:	2000      	movhi	r0, #0
   1df2c:	2001      	movls	r0, #1
   1df2e:	4770      	bx	lr
   1df30:	00038ef8 	.word	0x00038ef8

0001df34 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1df34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1df38:	6805      	ldr	r5, [r0, #0]
{
   1df3a:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1df3c:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1df3e:	782b      	ldrb	r3, [r5, #0]
{
   1df40:	4680      	mov	r8, r0
   1df42:	460f      	mov	r7, r1
   1df44:	4616      	mov	r6, r2
   1df46:	2b00      	cmp	r3, #0
   1df48:	f000 80c8 	beq.w	1e0dc <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1df4c:	4b65      	ldr	r3, [pc, #404]	; (1e0e4 <at_parse_process_element+0x1b0>)
   1df4e:	781c      	ldrb	r4, [r3, #0]
   1df50:	2c06      	cmp	r4, #6
   1df52:	d110      	bne.n	1df76 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1df54:	1c6b      	adds	r3, r5, #1
   1df56:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   1df58:	9a00      	ldr	r2, [sp, #0]
   1df5a:	7810      	ldrb	r0, [r2, #0]
   1df5c:	f7ff ffda 	bl	1df14 <is_valid_notification_char>
   1df60:	b930      	cbnz	r0, 1df70 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1df62:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1df64:	462a      	mov	r2, r5
   1df66:	4639      	mov	r1, r7
   1df68:	4630      	mov	r0, r6
   1df6a:	f016 f9bc 	bl	342e6 <at_params_string_put>
   1df6e:	e01b      	b.n	1dfa8 <at_parse_process_element+0x74>
			tmpstr++;
   1df70:	3201      	adds	r2, #1
   1df72:	9200      	str	r2, [sp, #0]
   1df74:	e7f0      	b.n	1df58 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1df76:	2c07      	cmp	r4, #7
   1df78:	d124      	bne.n	1dfc4 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   1df7a:	4668      	mov	r0, sp
   1df7c:	f016 f943 	bl	34206 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   1df80:	9a00      	ldr	r2, [sp, #0]
   1df82:	7810      	ldrb	r0, [r2, #0]
   1df84:	f7ff ffc6 	bl	1df14 <is_valid_notification_char>
   1df88:	b9a8      	cbnz	r0, 1dfb6 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   1df8a:	1b53      	subs	r3, r2, r5
   1df8c:	4639      	mov	r1, r7
   1df8e:	462a      	mov	r2, r5
   1df90:	4630      	mov	r0, r6
   1df92:	f016 f9a8 	bl	342e6 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1df96:	9b00      	ldr	r3, [sp, #0]
   1df98:	781a      	ldrb	r2, [r3, #0]
   1df9a:	2a3d      	cmp	r2, #61	; 0x3d
   1df9c:	d10e      	bne.n	1dfbc <at_parse_process_element+0x88>
   1df9e:	785a      	ldrb	r2, [r3, #1]
   1dfa0:	2a3f      	cmp	r2, #63	; 0x3f
   1dfa2:	d101      	bne.n	1dfa8 <at_parse_process_element+0x74>
			tmpstr += 2;
   1dfa4:	3302      	adds	r3, #2
			tmpstr++;
   1dfa6:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1dfa8:	2000      	movs	r0, #0
	*str = tmpstr;
   1dfaa:	9b00      	ldr	r3, [sp, #0]
   1dfac:	f8c8 3000 	str.w	r3, [r8]
}
   1dfb0:	b023      	add	sp, #140	; 0x8c
   1dfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1dfb6:	3201      	adds	r2, #1
   1dfb8:	9200      	str	r2, [sp, #0]
   1dfba:	e7e1      	b.n	1df80 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1dfbc:	2a3f      	cmp	r2, #63	; 0x3f
   1dfbe:	d1f3      	bne.n	1dfa8 <at_parse_process_element+0x74>
			tmpstr++;
   1dfc0:	3301      	adds	r3, #1
   1dfc2:	e7f0      	b.n	1dfa6 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1dfc4:	2c08      	cmp	r4, #8
   1dfc6:	d103      	bne.n	1dfd0 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   1dfc8:	4610      	mov	r0, r2
   1dfca:	f016 f963 	bl	34294 <at_params_empty_put>
   1dfce:	e7eb      	b.n	1dfa8 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   1dfd0:	2c02      	cmp	r4, #2
   1dfd2:	d111      	bne.n	1dff8 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1dfd4:	9a00      	ldr	r2, [sp, #0]
   1dfd6:	7811      	ldrb	r1, [r2, #0]
   1dfd8:	4608      	mov	r0, r1
   1dfda:	f016 f90b 	bl	341f4 <is_lfcr>
   1dfde:	b918      	cbnz	r0, 1dfe8 <at_parse_process_element+0xb4>
   1dfe0:	b111      	cbz	r1, 1dfe8 <at_parse_process_element+0xb4>
			tmpstr++;
   1dfe2:	3201      	adds	r2, #1
   1dfe4:	9200      	str	r2, [sp, #0]
   1dfe6:	e7f5      	b.n	1dfd4 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   1dfe8:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1dfea:	462a      	mov	r2, r5
   1dfec:	4639      	mov	r1, r7
   1dfee:	4630      	mov	r0, r6
   1dff0:	f016 f979 	bl	342e6 <at_params_string_put>
		tmpstr++;
   1dff4:	9b00      	ldr	r3, [sp, #0]
   1dff6:	e7e3      	b.n	1dfc0 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   1dff8:	2c03      	cmp	r4, #3
   1dffa:	d109      	bne.n	1e010 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1dffc:	9b00      	ldr	r3, [sp, #0]
   1dffe:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1e000:	2a22      	cmp	r2, #34	; 0x22
   1e002:	d003      	beq.n	1e00c <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e004:	b112      	cbz	r2, 1e00c <at_parse_process_element+0xd8>
			tmpstr++;
   1e006:	3301      	adds	r3, #1
   1e008:	9300      	str	r3, [sp, #0]
   1e00a:	e7f7      	b.n	1dffc <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   1e00c:	1b5b      	subs	r3, r3, r5
   1e00e:	e7ec      	b.n	1dfea <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   1e010:	2c01      	cmp	r4, #1
   1e012:	d13c      	bne.n	1e08e <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1e014:	4628      	mov	r0, r5
   1e016:	220a      	movs	r2, #10
   1e018:	a901      	add	r1, sp, #4
   1e01a:	f010 fa75 	bl	2e508 <strtoul>
		tmpstr = next;
   1e01e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e020:	4d31      	ldr	r5, [pc, #196]	; (1e0e8 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1e022:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1e024:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1e026:	9800      	ldr	r0, [sp, #0]
   1e028:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1e02a:	2b29      	cmp	r3, #41	; 0x29
   1e02c:	d028      	beq.n	1e080 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e02e:	b33b      	cbz	r3, 1e080 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e030:	3b2c      	subs	r3, #44	; 0x2c
   1e032:	b2db      	uxtb	r3, r3
   1e034:	3001      	adds	r0, #1
   1e036:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1e038:	9000      	str	r0, [sp, #0]
   1e03a:	d803      	bhi.n	1e044 <at_parse_process_element+0x110>
   1e03c:	fa25 f303 	lsr.w	r3, r5, r3
   1e040:	07db      	lsls	r3, r3, #31
   1e042:	d408      	bmi.n	1e056 <at_parse_process_element+0x122>
				tmpstr++;
   1e044:	46a1      	mov	r9, r4
   1e046:	e004      	b.n	1e052 <at_parse_process_element+0x11e>
					tmpstr = next;
   1e048:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e04a:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1e04e:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e050:	d015      	beq.n	1e07e <at_parse_process_element+0x14a>
				tmpstr++;
   1e052:	464c      	mov	r4, r9
   1e054:	e7e7      	b.n	1e026 <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   1e056:	220a      	movs	r2, #10
   1e058:	a901      	add	r1, sp, #4
   1e05a:	f010 fa55 	bl	2e508 <strtoul>
				tmparray[i++] =
   1e05e:	ab22      	add	r3, sp, #136	; 0x88
   1e060:	f104 0901 	add.w	r9, r4, #1
   1e064:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1e068:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1e06c:	9800      	ldr	r0, [sp, #0]
   1e06e:	f7f4 f807 	bl	12080 <strlen>
   1e072:	4604      	mov	r4, r0
   1e074:	9801      	ldr	r0, [sp, #4]
   1e076:	f7f4 f803 	bl	12080 <strlen>
   1e07a:	4284      	cmp	r4, r0
   1e07c:	d1e4      	bne.n	1e048 <at_parse_process_element+0x114>
   1e07e:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   1e080:	00a3      	lsls	r3, r4, #2
   1e082:	aa02      	add	r2, sp, #8
   1e084:	4639      	mov	r1, r7
   1e086:	4630      	mov	r0, r6
   1e088:	f016 f953 	bl	34332 <at_params_array_put>
   1e08c:	e7b2      	b.n	1dff4 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   1e08e:	2c04      	cmp	r4, #4
   1e090:	d115      	bne.n	1e0be <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1e092:	220a      	movs	r2, #10
   1e094:	a902      	add	r1, sp, #8
   1e096:	4628      	mov	r0, r5
   1e098:	f010 fa36 	bl	2e508 <strtoul>
		tmpstr = next;
   1e09c:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   1e09e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1e0a2:	4602      	mov	r2, r0
		tmpstr = next;
   1e0a4:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   1e0a6:	da05      	bge.n	1e0b4 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   1e0a8:	b282      	uxth	r2, r0
   1e0aa:	4639      	mov	r1, r7
   1e0ac:	4630      	mov	r0, r6
   1e0ae:	f016 f8dc 	bl	3426a <at_params_short_put>
   1e0b2:	e779      	b.n	1dfa8 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1e0b4:	4639      	mov	r1, r7
   1e0b6:	4630      	mov	r0, r6
   1e0b8:	f016 f900 	bl	342bc <at_params_int_put>
   1e0bc:	e774      	b.n	1dfa8 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   1e0be:	2c05      	cmp	r4, #5
   1e0c0:	f47f af72 	bne.w	1dfa8 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   1e0c4:	4909      	ldr	r1, [pc, #36]	; (1e0ec <at_parse_process_element+0x1b8>)
   1e0c6:	9b00      	ldr	r3, [sp, #0]
   1e0c8:	781a      	ldrb	r2, [r3, #0]
   1e0ca:	5c52      	ldrb	r2, [r2, r1]
   1e0cc:	f012 0f44 	tst.w	r2, #68	; 0x44
   1e0d0:	d101      	bne.n	1e0d6 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   1e0d2:	1b5b      	subs	r3, r3, r5
   1e0d4:	e746      	b.n	1df64 <at_parse_process_element+0x30>
			tmpstr++;
   1e0d6:	3301      	adds	r3, #1
   1e0d8:	9300      	str	r3, [sp, #0]
   1e0da:	e7f4      	b.n	1e0c6 <at_parse_process_element+0x192>
		return -1;
   1e0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0e0:	e766      	b.n	1dfb0 <at_parse_process_element+0x7c>
   1e0e2:	bf00      	nop
   1e0e4:	20027f75 	.word	0x20027f75
   1e0e8:	00024001 	.word	0x00024001
   1e0ec:	00038ef8 	.word	0x00038ef8

0001e0f0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e0f0:	b510      	push	{r4, lr}
   1e0f2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e0f4:	f7f3 ffc4 	bl	12080 <strlen>
   1e0f8:	2801      	cmp	r0, #1
   1e0fa:	d922      	bls.n	1e142 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1e0fc:	7821      	ldrb	r1, [r4, #0]
   1e0fe:	4b13      	ldr	r3, [pc, #76]	; (1e14c <is_command+0x5c>)
   1e100:	5cca      	ldrb	r2, [r1, r3]
   1e102:	f002 0203 	and.w	r2, r2, #3
   1e106:	2a02      	cmp	r2, #2
   1e108:	bf08      	it	eq
   1e10a:	3920      	subeq	r1, #32
   1e10c:	2941      	cmp	r1, #65	; 0x41
   1e10e:	461a      	mov	r2, r3
   1e110:	d117      	bne.n	1e142 <is_command+0x52>
   1e112:	7863      	ldrb	r3, [r4, #1]
   1e114:	5cd2      	ldrb	r2, [r2, r3]
   1e116:	f002 0203 	and.w	r2, r2, #3
   1e11a:	2a02      	cmp	r2, #2
   1e11c:	bf08      	it	eq
   1e11e:	3b20      	subeq	r3, #32
   1e120:	2b54      	cmp	r3, #84	; 0x54
   1e122:	d10e      	bne.n	1e142 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e124:	78a2      	ldrb	r2, [r4, #2]
   1e126:	2a25      	cmp	r2, #37	; 0x25
   1e128:	d00d      	beq.n	1e146 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e12a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e12e:	2b23      	cmp	r3, #35	; 0x23
   1e130:	d009      	beq.n	1e146 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e132:	4610      	mov	r0, r2
   1e134:	f016 f85e 	bl	341f4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e138:	b910      	cbnz	r0, 1e140 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e13a:	fab2 f082 	clz	r0, r2
   1e13e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e140:	bd10      	pop	{r4, pc}
		return false;
   1e142:	2000      	movs	r0, #0
   1e144:	e7fc      	b.n	1e140 <is_command+0x50>
		return true;
   1e146:	2001      	movs	r0, #1
   1e148:	e7fa      	b.n	1e140 <is_command+0x50>
   1e14a:	bf00      	nop
   1e14c:	00038ef8 	.word	0x00038ef8

0001e150 <at_parse_detect_type>:
{
   1e150:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1e152:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1e154:	2900      	cmp	r1, #0
{
   1e156:	4606      	mov	r6, r0
   1e158:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1e15a:	d141      	bne.n	1e1e0 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e15c:	2a2b      	cmp	r2, #43	; 0x2b
   1e15e:	4d29      	ldr	r5, [pc, #164]	; (1e204 <at_parse_detect_type+0xb4>)
   1e160:	d001      	beq.n	1e166 <at_parse_detect_type+0x16>
   1e162:	2a25      	cmp	r2, #37	; 0x25
   1e164:	d104      	bne.n	1e170 <at_parse_detect_type+0x20>
	state = new_state;
   1e166:	2306      	movs	r3, #6
   1e168:	702b      	strb	r3, [r5, #0]
	return 0;
   1e16a:	2000      	movs	r0, #0
	*str = tmpstr;
   1e16c:	6034      	str	r4, [r6, #0]
}
   1e16e:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1e170:	4620      	mov	r0, r4
   1e172:	f7ff ffbd 	bl	1e0f0 <is_command>
   1e176:	b388      	cbz	r0, 1e1dc <at_parse_detect_type+0x8c>
	state = new_state;
   1e178:	2307      	movs	r3, #7
   1e17a:	e7f5      	b.n	1e168 <at_parse_detect_type+0x18>
	if (chr == '"') {
   1e17c:	2a22      	cmp	r2, #34	; 0x22
   1e17e:	d006      	beq.n	1e18e <at_parse_detect_type+0x3e>
	if (chr == '(') {
   1e180:	2a28      	cmp	r2, #40	; 0x28
   1e182:	d109      	bne.n	1e198 <at_parse_detect_type+0x48>
   1e184:	2201      	movs	r2, #1
   1e186:	4b1f      	ldr	r3, [pc, #124]	; (1e204 <at_parse_detect_type+0xb4>)
		tmpstr++;
   1e188:	4414      	add	r4, r2
	state = new_state;
   1e18a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1e18c:	e7ed      	b.n	1e16a <at_parse_detect_type+0x1a>
	state = new_state;
   1e18e:	2203      	movs	r2, #3
   1e190:	4b1c      	ldr	r3, [pc, #112]	; (1e204 <at_parse_detect_type+0xb4>)
		tmpstr++;
   1e192:	3401      	adds	r4, #1
	state = new_state;
   1e194:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1e196:	e7e8      	b.n	1e16a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1e198:	4610      	mov	r0, r2
   1e19a:	f016 f82b 	bl	341f4 <is_lfcr>
   1e19e:	b170      	cbz	r0, 1e1be <at_parse_detect_type+0x6e>
   1e1a0:	4918      	ldr	r1, [pc, #96]	; (1e204 <at_parse_detect_type+0xb4>)
   1e1a2:	7808      	ldrb	r0, [r1, #0]
   1e1a4:	2804      	cmp	r0, #4
   1e1a6:	d108      	bne.n	1e1ba <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   1e1a8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1e1ac:	f016 f822 	bl	341f4 <is_lfcr>
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d1f9      	bne.n	1e1a8 <at_parse_detect_type+0x58>
	state = new_state;
   1e1b4:	2305      	movs	r3, #5
   1e1b6:	700b      	strb	r3, [r1, #0]
   1e1b8:	e7d7      	b.n	1e16a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1e1ba:	2808      	cmp	r0, #8
   1e1bc:	d0d5      	beq.n	1e16a <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e1be:	3a2c      	subs	r2, #44	; 0x2c
   1e1c0:	b2d2      	uxtb	r2, r2
   1e1c2:	2a11      	cmp	r2, #17
   1e1c4:	d807      	bhi.n	1e1d6 <at_parse_detect_type+0x86>
   1e1c6:	4b10      	ldr	r3, [pc, #64]	; (1e208 <at_parse_detect_type+0xb8>)
   1e1c8:	fa23 f202 	lsr.w	r2, r3, r2
   1e1cc:	07d3      	lsls	r3, r2, #31
   1e1ce:	d502      	bpl.n	1e1d6 <at_parse_detect_type+0x86>
	state = new_state;
   1e1d0:	4b0c      	ldr	r3, [pc, #48]	; (1e204 <at_parse_detect_type+0xb4>)
   1e1d2:	2208      	movs	r2, #8
   1e1d4:	e013      	b.n	1e1fe <at_parse_detect_type+0xae>
		return -1;
   1e1d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1da:	e7c8      	b.n	1e16e <at_parse_detect_type+0x1e>
	state = new_state;
   1e1dc:	2302      	movs	r3, #2
   1e1de:	e7c3      	b.n	1e168 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1e1e0:	dd03      	ble.n	1e1ea <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e1e2:	2a2b      	cmp	r2, #43	; 0x2b
   1e1e4:	d0f7      	beq.n	1e1d6 <at_parse_detect_type+0x86>
   1e1e6:	2a25      	cmp	r2, #37	; 0x25
   1e1e8:	d0f5      	beq.n	1e1d6 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1e1ea:	4b08      	ldr	r3, [pc, #32]	; (1e20c <at_parse_detect_type+0xbc>)
   1e1ec:	5cd3      	ldrb	r3, [r2, r3]
   1e1ee:	0759      	lsls	r1, r3, #29
   1e1f0:	d403      	bmi.n	1e1fa <at_parse_detect_type+0xaa>
   1e1f2:	2a2d      	cmp	r2, #45	; 0x2d
   1e1f4:	d001      	beq.n	1e1fa <at_parse_detect_type+0xaa>
   1e1f6:	2a2b      	cmp	r2, #43	; 0x2b
   1e1f8:	d1c0      	bne.n	1e17c <at_parse_detect_type+0x2c>
	state = new_state;
   1e1fa:	2204      	movs	r2, #4
   1e1fc:	4b01      	ldr	r3, [pc, #4]	; (1e204 <at_parse_detect_type+0xb4>)
   1e1fe:	701a      	strb	r2, [r3, #0]
   1e200:	e7b3      	b.n	1e16a <at_parse_detect_type+0x1a>
   1e202:	bf00      	nop
   1e204:	20027f75 	.word	0x20027f75
   1e208:	00024001 	.word	0x00024001
   1e20c:	00038ef8 	.word	0x00038ef8

0001e210 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1e210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e214:	4688      	mov	r8, r1
   1e216:	4616      	mov	r6, r2
   1e218:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1e21a:	4604      	mov	r4, r0
   1e21c:	2800      	cmp	r0, #0
   1e21e:	d07e      	beq.n	1e31e <at_parser_max_params_from_str+0x10e>
   1e220:	2a00      	cmp	r2, #0
   1e222:	d07c      	beq.n	1e31e <at_parser_max_params_from_str+0x10e>
   1e224:	6853      	ldr	r3, [r2, #4]
   1e226:	2b00      	cmp	r3, #0
   1e228:	d079      	beq.n	1e31e <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   1e22a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1e22c:	4610      	mov	r0, r2
   1e22e:	f000 f8eb 	bl	1e408 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1e232:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   1e234:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1e236:	4297      	cmp	r7, r2
   1e238:	bf28      	it	cs
   1e23a:	4617      	movcs	r7, r2
	int index = 0;
   1e23c:	462c      	mov	r4, r5
	state = IDLE;
   1e23e:	4b39      	ldr	r3, [pc, #228]	; (1e324 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   1e240:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1e328 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e244:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1e32c <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   1e248:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1e24a:	9b01      	ldr	r3, [sp, #4]
   1e24c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e24e:	2a00      	cmp	r2, #0
   1e250:	d04b      	beq.n	1e2ea <at_parser_max_params_from_str+0xda>
   1e252:	42a7      	cmp	r7, r4
   1e254:	d949      	bls.n	1e2ea <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   1e256:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   1e25a:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   1e25c:	0711      	lsls	r1, r2, #28
			str++;
   1e25e:	bf48      	it	mi
   1e260:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   1e262:	4621      	mov	r1, r4
			str++;
   1e264:	bf48      	it	mi
   1e266:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   1e268:	f7ff ff72 	bl	1e150 <at_parse_detect_type>
   1e26c:	1c42      	adds	r2, r0, #1
   1e26e:	d03c      	beq.n	1e2ea <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   1e270:	4632      	mov	r2, r6
   1e272:	4621      	mov	r1, r4
   1e274:	a801      	add	r0, sp, #4
   1e276:	f7ff fe5d 	bl	1df34 <at_parse_process_element>
   1e27a:	1c43      	adds	r3, r0, #1
   1e27c:	d035      	beq.n	1e2ea <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   1e27e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e280:	781a      	ldrb	r2, [r3, #0]
   1e282:	3a2c      	subs	r2, #44	; 0x2c
   1e284:	b2d2      	uxtb	r2, r2
   1e286:	2a11      	cmp	r2, #17
   1e288:	d81a      	bhi.n	1e2c0 <at_parser_max_params_from_str+0xb0>
   1e28a:	fa2a f202 	lsr.w	r2, sl, r2
   1e28e:	07d1      	lsls	r1, r2, #31
   1e290:	d516      	bpl.n	1e2c0 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   1e292:	7858      	ldrb	r0, [r3, #1]
   1e294:	f015 ffae 	bl	341f4 <is_lfcr>
   1e298:	b178      	cbz	r0, 1e2ba <at_parser_max_params_from_str+0xaa>
				index++;
   1e29a:	3401      	adds	r4, #1
				if (index == max_params) {
   1e29c:	42bc      	cmp	r4, r7
   1e29e:	d039      	beq.n	1e314 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   1e2a0:	4621      	mov	r1, r4
   1e2a2:	a801      	add	r0, sp, #4
   1e2a4:	f7ff ff54 	bl	1e150 <at_parse_detect_type>
   1e2a8:	1c42      	adds	r2, r0, #1
   1e2aa:	d01e      	beq.n	1e2ea <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   1e2ac:	4632      	mov	r2, r6
   1e2ae:	4621      	mov	r1, r4
   1e2b0:	a801      	add	r0, sp, #4
   1e2b2:	f7ff fe3f 	bl	1df34 <at_parse_process_element>
   1e2b6:	1c43      	adds	r3, r0, #1
   1e2b8:	d017      	beq.n	1e2ea <at_parser_max_params_from_str+0xda>
			str++;
   1e2ba:	9b01      	ldr	r3, [sp, #4]
   1e2bc:	3301      	adds	r3, #1
   1e2be:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1e2c0:	9a01      	ldr	r2, [sp, #4]
   1e2c2:	7810      	ldrb	r0, [r2, #0]
   1e2c4:	f015 ff96 	bl	341f4 <is_lfcr>
   1e2c8:	b1f8      	cbz	r0, 1e30a <at_parser_max_params_from_str+0xfa>
   1e2ca:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1e2cc:	7811      	ldrb	r1, [r2, #0]
   1e2ce:	4693      	mov	fp, r2
   1e2d0:	4608      	mov	r0, r1
   1e2d2:	3201      	adds	r2, #1
   1e2d4:	f015 ff8e 	bl	341f4 <is_lfcr>
   1e2d8:	2800      	cmp	r0, #0
   1e2da:	d1f7      	bne.n	1e2cc <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e2dc:	b119      	cbz	r1, 1e2e6 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e2de:	292b      	cmp	r1, #43	; 0x2b
   1e2e0:	d001      	beq.n	1e2e6 <at_parser_max_params_from_str+0xd6>
   1e2e2:	2925      	cmp	r1, #37	; 0x25
   1e2e4:	d111      	bne.n	1e30a <at_parser_max_params_from_str+0xfa>
				str += i;
   1e2e6:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   1e2ea:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1e2ec:	b9a5      	cbnz	r5, 1e318 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e2ee:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   1e2f0:	2a00      	cmp	r2, #0
   1e2f2:	bf0c      	ite	eq
   1e2f4:	2000      	moveq	r0, #0
   1e2f6:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1e2fa:	f1b8 0f00 	cmp.w	r8, #0
   1e2fe:	d001      	beq.n	1e304 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   1e300:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1e304:	b003      	add	sp, #12
   1e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   1e30a:	3401      	adds	r4, #1
			oversized = true;
   1e30c:	42bc      	cmp	r4, r7
   1e30e:	bf08      	it	eq
   1e310:	2501      	moveq	r5, #1
   1e312:	e79a      	b.n	1e24a <at_parser_max_params_from_str+0x3a>
					oversized = true;
   1e314:	4605      	mov	r5, r0
   1e316:	e7e8      	b.n	1e2ea <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   1e318:	f06f 0006 	mvn.w	r0, #6
   1e31c:	e7ed      	b.n	1e2fa <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   1e31e:	f06f 0015 	mvn.w	r0, #21
   1e322:	e7ef      	b.n	1e304 <at_parser_max_params_from_str+0xf4>
   1e324:	20027f75 	.word	0x20027f75
   1e328:	00038ef8 	.word	0x00038ef8
   1e32c:	00024001 	.word	0x00024001

0001e330 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1e330:	b538      	push	{r3, r4, r5, lr}
   1e332:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1e334:	4605      	mov	r5, r0
   1e336:	b960      	cbnz	r0, 1e352 <at_params_get+0x22>
   1e338:	490a      	ldr	r1, [pc, #40]	; (1e364 <at_params_get+0x34>)
   1e33a:	232b      	movs	r3, #43	; 0x2b
   1e33c:	4a0a      	ldr	r2, [pc, #40]	; (1e368 <at_params_get+0x38>)
   1e33e:	480b      	ldr	r0, [pc, #44]	; (1e36c <at_params_get+0x3c>)
   1e340:	f010 ff87 	bl	2f252 <printk>
   1e344:	480a      	ldr	r0, [pc, #40]	; (1e370 <at_params_get+0x40>)
   1e346:	f010 ff84 	bl	2f252 <printk>
   1e34a:	212b      	movs	r1, #43	; 0x2b
   1e34c:	4806      	ldr	r0, [pc, #24]	; (1e368 <at_params_get+0x38>)
   1e34e:	f011 fa81 	bl	2f854 <assert_post_action>

	if (index >= list->param_count) {
   1e352:	682b      	ldr	r3, [r5, #0]
   1e354:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e356:	bf85      	ittet	hi
   1e358:	230c      	movhi	r3, #12
   1e35a:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   1e35c:	2000      	movls	r0, #0
	return &param[index];
   1e35e:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   1e362:	bd38      	pop	{r3, r4, r5, pc}
   1e364:	000380a3 	.word	0x000380a3
   1e368:	00038075 	.word	0x00038075
   1e36c:	00036be5 	.word	0x00036be5
   1e370:	000380b7 	.word	0x000380b7

0001e374 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1e374:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1e376:	4604      	mov	r4, r0
   1e378:	b960      	cbnz	r0, 1e394 <at_param_size+0x20>
   1e37a:	490e      	ldr	r1, [pc, #56]	; (1e3b4 <at_param_size+0x40>)
   1e37c:	2339      	movs	r3, #57	; 0x39
   1e37e:	4a0e      	ldr	r2, [pc, #56]	; (1e3b8 <at_param_size+0x44>)
   1e380:	480e      	ldr	r0, [pc, #56]	; (1e3bc <at_param_size+0x48>)
   1e382:	f010 ff66 	bl	2f252 <printk>
   1e386:	480e      	ldr	r0, [pc, #56]	; (1e3c0 <at_param_size+0x4c>)
   1e388:	f010 ff63 	bl	2f252 <printk>
   1e38c:	2139      	movs	r1, #57	; 0x39
   1e38e:	480a      	ldr	r0, [pc, #40]	; (1e3b8 <at_param_size+0x44>)
   1e390:	f011 fa60 	bl	2f854 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e394:	7823      	ldrb	r3, [r4, #0]
   1e396:	2b01      	cmp	r3, #1
   1e398:	d006      	beq.n	1e3a8 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e39a:	2b02      	cmp	r3, #2
   1e39c:	d006      	beq.n	1e3ac <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e39e:	3b03      	subs	r3, #3
   1e3a0:	2b01      	cmp	r3, #1
   1e3a2:	d805      	bhi.n	1e3b0 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e3a4:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   1e3a6:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   1e3a8:	2002      	movs	r0, #2
   1e3aa:	e7fc      	b.n	1e3a6 <at_param_size+0x32>
		return sizeof(u32_t);
   1e3ac:	2004      	movs	r0, #4
   1e3ae:	e7fa      	b.n	1e3a6 <at_param_size+0x32>
	return 0;
   1e3b0:	2000      	movs	r0, #0
   1e3b2:	e7f8      	b.n	1e3a6 <at_param_size+0x32>
   1e3b4:	00038044 	.word	0x00038044
   1e3b8:	00038075 	.word	0x00038075
   1e3bc:	00036be5 	.word	0x00036be5
   1e3c0:	00038059 	.word	0x00038059

0001e3c4 <at_param_clear>:
{
   1e3c4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1e3c6:	4604      	mov	r4, r0
   1e3c8:	b960      	cbnz	r0, 1e3e4 <at_param_clear+0x20>
   1e3ca:	490b      	ldr	r1, [pc, #44]	; (1e3f8 <at_param_clear+0x34>)
   1e3cc:	231d      	movs	r3, #29
   1e3ce:	4a0b      	ldr	r2, [pc, #44]	; (1e3fc <at_param_clear+0x38>)
   1e3d0:	480b      	ldr	r0, [pc, #44]	; (1e400 <at_param_clear+0x3c>)
   1e3d2:	f010 ff3e 	bl	2f252 <printk>
   1e3d6:	480b      	ldr	r0, [pc, #44]	; (1e404 <at_param_clear+0x40>)
   1e3d8:	f010 ff3b 	bl	2f252 <printk>
   1e3dc:	211d      	movs	r1, #29
   1e3de:	4807      	ldr	r0, [pc, #28]	; (1e3fc <at_param_clear+0x38>)
   1e3e0:	f011 fa38 	bl	2f854 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e3e4:	7823      	ldrb	r3, [r4, #0]
   1e3e6:	3b03      	subs	r3, #3
   1e3e8:	2b01      	cmp	r3, #1
   1e3ea:	d802      	bhi.n	1e3f2 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   1e3ec:	68a0      	ldr	r0, [r4, #8]
   1e3ee:	f016 f935 	bl	3465c <k_free>
	param->value.int_val = 0;
   1e3f2:	2300      	movs	r3, #0
   1e3f4:	60a3      	str	r3, [r4, #8]
}
   1e3f6:	bd10      	pop	{r4, pc}
   1e3f8:	00038044 	.word	0x00038044
   1e3fc:	00038075 	.word	0x00038075
   1e400:	00036be5 	.word	0x00036be5
   1e404:	00038059 	.word	0x00038059

0001e408 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1e408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   1e40c:	4605      	mov	r5, r0
   1e40e:	b158      	cbz	r0, 1e428 <at_params_list_clear+0x20>
   1e410:	6843      	ldr	r3, [r0, #4]
   1e412:	b14b      	cbz	r3, 1e428 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e414:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1e416:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1e46c <at_params_list_clear+0x64>
   1e41a:	f8df a054 	ldr.w	sl, [pc, #84]	; 1e470 <at_params_list_clear+0x68>
   1e41e:	f8df b054 	ldr.w	fp, [pc, #84]	; 1e474 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e422:	682b      	ldr	r3, [r5, #0]
   1e424:	429c      	cmp	r4, r3
   1e426:	d301      	bcc.n	1e42c <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1e428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   1e42c:	270c      	movs	r7, #12
   1e42e:	4367      	muls	r7, r4
   1e430:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1e434:	eb09 0607 	add.w	r6, r9, r7
   1e438:	4630      	mov	r0, r6
   1e43a:	f7ff ffc3 	bl	1e3c4 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1e43e:	b966      	cbnz	r6, 1e45a <at_params_list_clear+0x52>
   1e440:	4651      	mov	r1, sl
   1e442:	2314      	movs	r3, #20
   1e444:	4642      	mov	r2, r8
   1e446:	4658      	mov	r0, fp
   1e448:	f010 ff03 	bl	2f252 <printk>
   1e44c:	4806      	ldr	r0, [pc, #24]	; (1e468 <at_params_list_clear+0x60>)
   1e44e:	f010 ff00 	bl	2f252 <printk>
   1e452:	2114      	movs	r1, #20
   1e454:	4640      	mov	r0, r8
   1e456:	f011 f9fd 	bl	2f854 <assert_post_action>
   1e45a:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   1e45c:	3401      	adds	r4, #1
   1e45e:	f849 3007 	str.w	r3, [r9, r7]
   1e462:	6073      	str	r3, [r6, #4]
   1e464:	60b3      	str	r3, [r6, #8]
   1e466:	e7dc      	b.n	1e422 <at_params_list_clear+0x1a>
   1e468:	00038059 	.word	0x00038059
   1e46c:	00038075 	.word	0x00038075
   1e470:	00038044 	.word	0x00038044
   1e474:	00036be5 	.word	0x00036be5

0001e478 <parse_psm_cfg>:
	char timer_str[9] = {0};
   1e478:	2300      	movs	r3, #0
{
   1e47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e47e:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   1e480:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1e484:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   1e488:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   1e48a:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1e48c:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   1e48e:	9302      	str	r3, [sp, #8]
{
   1e490:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   1e492:	446b      	add	r3, sp
   1e494:	aa03      	add	r2, sp, #12
   1e496:	bf14      	ite	ne
   1e498:	2108      	movne	r1, #8
   1e49a:	2109      	moveq	r1, #9
{
   1e49c:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1e49e:	bf14      	ite	ne
   1e4a0:	f04f 0807 	movne.w	r8, #7
   1e4a4:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   1e4a8:	f015 ff96 	bl	343d8 <at_params_string_get>
	if (err) {
   1e4ac:	4604      	mov	r4, r0
   1e4ae:	b970      	cbnz	r0, 1e4ce <parse_psm_cfg+0x56>
	memcpy(unit_str, timer_str, unit_str_len);
   1e4b0:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e4b2:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   1e4b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e4b8:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   1e4ba:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   1e4bc:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   1e4be:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e4c2:	f010 f821 	bl	2e508 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1e4c6:	2807      	cmp	r0, #7
   1e4c8:	d905      	bls.n	1e4d6 <parse_psm_cfg+0x5e>
		return err;
   1e4ca:	f06f 0415 	mvn.w	r4, #21
}
   1e4ce:	4620      	mov	r0, r4
   1e4d0:	b006      	add	sp, #24
   1e4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	timer_unit = t3412_lookup[lut_idx];
   1e4d6:	4b1a      	ldr	r3, [pc, #104]	; (1e540 <parse_psm_cfg+0xc8>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1e4d8:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   1e4da:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1e4de:	4621      	mov	r1, r4
   1e4e0:	f10d 000f 	add.w	r0, sp, #15
   1e4e4:	f010 f810 	bl	2e508 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1e4e8:	b325      	cbz	r5, 1e534 <parse_psm_cfg+0xbc>
   1e4ea:	4345      	muls	r5, r0
   1e4ec:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   1e4ee:	ab02      	add	r3, sp, #8
   1e4f0:	aa03      	add	r2, sp, #12
   1e4f2:	4641      	mov	r1, r8
   1e4f4:	4638      	mov	r0, r7
   1e4f6:	f015 ff6f 	bl	343d8 <at_params_string_get>
	if (err) {
   1e4fa:	4604      	mov	r4, r0
   1e4fc:	2800      	cmp	r0, #0
   1e4fe:	d1e6      	bne.n	1e4ce <parse_psm_cfg+0x56>
	memcpy(unit_str, timer_str, unit_str_len);
   1e500:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e502:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   1e504:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e508:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   1e50a:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   1e50c:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   1e50e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e512:	f00f fff9 	bl	2e508 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1e516:	2807      	cmp	r0, #7
   1e518:	d8d7      	bhi.n	1e4ca <parse_psm_cfg+0x52>
	timer_unit = t3324_lookup[lut_idx];
   1e51a:	4b0a      	ldr	r3, [pc, #40]	; (1e544 <parse_psm_cfg+0xcc>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1e51c:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1e51e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1e522:	4621      	mov	r1, r4
   1e524:	f10d 000f 	add.w	r0, sp, #15
   1e528:	f00f ffee 	bl	2e508 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1e52c:	b12d      	cbz	r5, 1e53a <parse_psm_cfg+0xc2>
   1e52e:	4368      	muls	r0, r5
   1e530:	6070      	str	r0, [r6, #4]
	return 0;
   1e532:	e7cc      	b.n	1e4ce <parse_psm_cfg+0x56>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1e534:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e538:	e7d8      	b.n	1e4ec <parse_psm_cfg+0x74>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1e53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e53e:	e7f7      	b.n	1e530 <parse_psm_cfg+0xb8>
   1e540:	00035e78 	.word	0x00035e78
   1e544:	00035e58 	.word	0x00035e58

0001e548 <lte_lc_normal>:
{
   1e548:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   1e54a:	2300      	movs	r3, #0
   1e54c:	4804      	ldr	r0, [pc, #16]	; (1e560 <lte_lc_normal+0x18>)
   1e54e:	461a      	mov	r2, r3
   1e550:	4619      	mov	r1, r3
   1e552:	f7ff fc23 	bl	1dd9c <at_cmd_write>
   1e556:	2800      	cmp	r0, #0
}
   1e558:	bf18      	it	ne
   1e55a:	f06f 0004 	mvnne.w	r0, #4
   1e55e:	bd08      	pop	{r3, pc}
   1e560:	00038125 	.word	0x00038125

0001e564 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1e564:	b500      	push	{lr}
   1e566:	b08f      	sub	sp, #60	; 0x3c
	int err, len;
	char cmd[50];

	switch (mode) {
   1e568:	b188      	cbz	r0, 1e58e <lte_lc_system_mode_set+0x2a>
   1e56a:	2805      	cmp	r0, #5
   1e56c:	d812      	bhi.n	1e594 <lte_lc_system_mode_set+0x30>
	default:
		LOG_ERR("Invalid system mode requested");
		return -EINVAL;
	}

	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   1e56e:	4b0c      	ldr	r3, [pc, #48]	; (1e5a0 <lte_lc_system_mode_set+0x3c>)
   1e570:	4a0c      	ldr	r2, [pc, #48]	; (1e5a4 <lte_lc_system_mode_set+0x40>)
   1e572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e576:	2132      	movs	r1, #50	; 0x32
   1e578:	a801      	add	r0, sp, #4
   1e57a:	f010 fe77 	bl	2f26c <snprintk>
		       system_mode_params[mode]);
	if (len < 0) {
   1e57e:	2800      	cmp	r0, #0
   1e580:	db0b      	blt.n	1e59a <lte_lc_system_mode_set+0x36>
		return -EFAULT;
	}

	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));

	err = at_cmd_write(cmd, NULL, 0, NULL);
   1e582:	2300      	movs	r3, #0
   1e584:	a801      	add	r0, sp, #4
   1e586:	461a      	mov	r2, r3
   1e588:	4619      	mov	r1, r3
   1e58a:	f7ff fc07 	bl	1dd9c <at_cmd_write>
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
	}

	return err;
}
   1e58e:	b00f      	add	sp, #60	; 0x3c
   1e590:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1e594:	f06f 0015 	mvn.w	r0, #21
   1e598:	e7f9      	b.n	1e58e <lte_lc_system_mode_set+0x2a>
		return -EFAULT;
   1e59a:	f06f 000d 	mvn.w	r0, #13
   1e59e:	e7f6      	b.n	1e58e <lte_lc_system_mode_set+0x2a>
   1e5a0:	00035e40 	.word	0x00035e40
   1e5a4:	00038112 	.word	0x00038112

0001e5a8 <w_lte_lc_init>:
{
   1e5a8:	b530      	push	{r4, r5, lr}
	if (is_initialized) {
   1e5aa:	4d1f      	ldr	r5, [pc, #124]	; (1e628 <w_lte_lc_init+0x80>)
{
   1e5ac:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   1e5ae:	7828      	ldrb	r0, [r5, #0]
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	d136      	bne.n	1e622 <w_lte_lc_init+0x7a>
	err = at_notif_register_handler(NULL, at_handler);
   1e5b4:	491d      	ldr	r1, [pc, #116]	; (1e62c <w_lte_lc_init+0x84>)
   1e5b6:	f7ff fc77 	bl	1dea8 <at_notif_register_handler>
	if (err) {
   1e5ba:	4604      	mov	r4, r0
   1e5bc:	b968      	cbnz	r0, 1e5da <w_lte_lc_init+0x32>
	err = lte_lc_system_mode_set(sys_mode_preferred);
   1e5be:	2002      	movs	r0, #2
   1e5c0:	f7ff ffd0 	bl	1e564 <lte_lc_system_mode_set>
	if (err) {
   1e5c4:	4604      	mov	r4, r0
   1e5c6:	b940      	cbnz	r0, 1e5da <w_lte_lc_init+0x32>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1e5c8:	4603      	mov	r3, r0
   1e5ca:	4602      	mov	r2, r0
   1e5cc:	4601      	mov	r1, r0
   1e5ce:	4818      	ldr	r0, [pc, #96]	; (1e630 <w_lte_lc_init+0x88>)
   1e5d0:	f7ff fbe4 	bl	1dd9c <at_cmd_write>
   1e5d4:	b120      	cbz	r0, 1e5e0 <w_lte_lc_init+0x38>
		return -EIO;
   1e5d6:	f06f 0404 	mvn.w	r4, #4
}
   1e5da:	4620      	mov	r0, r4
   1e5dc:	b00f      	add	sp, #60	; 0x3c
   1e5de:	bd30      	pop	{r4, r5, pc}
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   1e5e0:	4623      	mov	r3, r4
   1e5e2:	4622      	mov	r2, r4
   1e5e4:	4621      	mov	r1, r4
   1e5e6:	4813      	ldr	r0, [pc, #76]	; (1e634 <w_lte_lc_init+0x8c>)
   1e5e8:	f7ff fbd8 	bl	1dd9c <at_cmd_write>
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	d1f2      	bne.n	1e5d6 <w_lte_lc_init+0x2e>
	if (at_cmd_write(cgauth, NULL, 0, NULL) != 0) {
   1e5f0:	4623      	mov	r3, r4
   1e5f2:	4622      	mov	r2, r4
   1e5f4:	4621      	mov	r1, r4
   1e5f6:	4810      	ldr	r0, [pc, #64]	; (1e638 <w_lte_lc_init+0x90>)
   1e5f8:	f7ff fbd0 	bl	1dd9c <at_cmd_write>
   1e5fc:	4604      	mov	r4, r0
   1e5fe:	2800      	cmp	r0, #0
   1e600:	d1e9      	bne.n	1e5d6 <w_lte_lc_init+0x2e>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   1e602:	4603      	mov	r3, r0
   1e604:	4602      	mov	r2, r0
   1e606:	4601      	mov	r1, r0
   1e608:	480c      	ldr	r0, [pc, #48]	; (1e63c <w_lte_lc_init+0x94>)
   1e60a:	f7ff fbc7 	bl	1dd9c <at_cmd_write>
	if (err) {
   1e60e:	b128      	cbz	r0, 1e61c <w_lte_lc_init+0x74>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   1e610:	4623      	mov	r3, r4
   1e612:	2232      	movs	r2, #50	; 0x32
   1e614:	a901      	add	r1, sp, #4
   1e616:	480a      	ldr	r0, [pc, #40]	; (1e640 <w_lte_lc_init+0x98>)
   1e618:	f7ff fbc0 	bl	1dd9c <at_cmd_write>
	is_initialized = true;
   1e61c:	2301      	movs	r3, #1
   1e61e:	702b      	strb	r3, [r5, #0]
	return 0;
   1e620:	e7db      	b.n	1e5da <w_lte_lc_init+0x32>
		return -EALREADY;
   1e622:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1e626:	e7d8      	b.n	1e5da <w_lte_lc_init+0x32>
   1e628:	20027f76 	.word	0x20027f76
   1e62c:	000126b1 	.word	0x000126b1
   1e630:	000380d8 	.word	0x000380d8
   1e634:	20020410 	.word	0x20020410
   1e638:	200203d5 	.word	0x200203d5
   1e63c:	000380e3 	.word	0x000380e3
   1e640:	00038175 	.word	0x00038175

0001e644 <w_lte_lc_connect>:
	if (!is_initialized) {
   1e644:	4b0f      	ldr	r3, [pc, #60]	; (1e684 <w_lte_lc_connect+0x40>)
{
   1e646:	b510      	push	{r4, lr}
	if (!is_initialized) {
   1e648:	781b      	ldrb	r3, [r3, #0]
{
   1e64a:	4604      	mov	r4, r0
	if (!is_initialized) {
   1e64c:	b1b3      	cbz	r3, 1e67c <w_lte_lc_connect+0x38>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e64e:	2201      	movs	r2, #1
   1e650:	2100      	movs	r1, #0
   1e652:	480d      	ldr	r0, [pc, #52]	; (1e688 <w_lte_lc_connect+0x44>)
   1e654:	f016 f88b 	bl	3476e <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(current_network_mode);
   1e658:	2002      	movs	r0, #2
   1e65a:	f7ff ff83 	bl	1e564 <lte_lc_system_mode_set>
		if (err) {
   1e65e:	b960      	cbnz	r0, 1e67a <w_lte_lc_connect+0x36>
		err = lte_lc_normal();
   1e660:	f7ff ff72 	bl	1e548 <lte_lc_normal>
		if (err || !blocking) {
   1e664:	b948      	cbnz	r0, 1e67a <w_lte_lc_connect+0x36>
   1e666:	b144      	cbz	r4, 1e67a <w_lte_lc_connect+0x36>
	return z_impl_k_sem_take(sem, timeout);
   1e668:	4908      	ldr	r1, [pc, #32]	; (1e68c <w_lte_lc_connect+0x48>)
   1e66a:	4807      	ldr	r0, [pc, #28]	; (1e688 <w_lte_lc_connect+0x44>)
   1e66c:	f00c f954 	bl	2a918 <z_impl_k_sem_take>
				err = -ETIMEDOUT;
   1e670:	f110 0f0b 	cmn.w	r0, #11
   1e674:	bf08      	it	eq
   1e676:	f06f 0073 	mvneq.w	r0, #115	; 0x73
}
   1e67a:	bd10      	pop	{r4, pc}
		return -EPERM;
   1e67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e680:	e7fb      	b.n	1e67a <w_lte_lc_connect+0x36>
   1e682:	bf00      	nop
   1e684:	20027f76 	.word	0x20027f76
   1e688:	200222b4 	.word	0x200222b4
   1e68c:	000927c0 	.word	0x000927c0

0001e690 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   1e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   1e694:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   1e696:	260d      	movs	r6, #13
{
   1e698:	4605      	mov	r5, r0
   1e69a:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1e69c:	221e      	movs	r2, #30
   1e69e:	4621      	mov	r1, r4
   1e6a0:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   1e6a2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1e6a6:	f016 f9f5 	bl	34a94 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   1e6aa:	4632      	mov	r2, r6
   1e6ac:	4621      	mov	r1, r4
   1e6ae:	a804      	add	r0, sp, #16
   1e6b0:	f016 f9f0 	bl	34a94 <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   1e6b4:	9600      	str	r6, [sp, #0]

	if (mode == NULL) {
   1e6b6:	2d00      	cmp	r5, #0
   1e6b8:	d05d      	beq.n	1e776 <lte_lc_system_mode_get+0xe6>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   1e6ba:	4623      	mov	r3, r4
   1e6bc:	221e      	movs	r2, #30
   1e6be:	a908      	add	r1, sp, #32
   1e6c0:	482e      	ldr	r0, [pc, #184]	; (1e77c <lte_lc_system_mode_get+0xec>)
   1e6c2:	f7ff fb6b 	bl	1dd9c <at_cmd_write>
			   NULL);
	if (err) {
   1e6c6:	4604      	mov	r4, r0
   1e6c8:	2800      	cmp	r0, #0
   1e6ca:	d13f      	bne.n	1e74c <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not send AT command");
		return err;
	}

	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   1e6cc:	2105      	movs	r1, #5
   1e6ce:	a802      	add	r0, sp, #8
   1e6d0:	f015 fdaa 	bl	34228 <at_params_list_init>
	if (err) {
   1e6d4:	4604      	mov	r4, r0
   1e6d6:	2800      	cmp	r0, #0
   1e6d8:	d138      	bne.n	1e74c <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   1e6da:	4601      	mov	r1, r0
   1e6dc:	2305      	movs	r3, #5
   1e6de:	aa02      	add	r2, sp, #8
   1e6e0:	a808      	add	r0, sp, #32
   1e6e2:	f7ff fd95 	bl	1e210 <at_parser_max_params_from_str>
					    AT_XSYSTEMMODE_PARAMS_COUNT);
	if (err) {
   1e6e6:	4604      	mov	r4, r0
   1e6e8:	bb68      	cbnz	r0, 1e746 <lte_lc_system_mode_get+0xb6>
		LOG_ERR("Could not parse AT response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with %XSYSTEMMODE */
	err = at_params_string_get(&resp_list,
   1e6ea:	4601      	mov	r1, r0
   1e6ec:	466b      	mov	r3, sp
   1e6ee:	aa04      	add	r2, sp, #16
   1e6f0:	a802      	add	r0, sp, #8
   1e6f2:	f015 fe71 	bl	343d8 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   1e6f6:	4604      	mov	r4, r0
   1e6f8:	bb28      	cbnz	r0, 1e746 <lte_lc_system_mode_get+0xb6>
	if ((response == NULL) || (check == NULL)) {
   1e6fa:	4a21      	ldr	r2, [pc, #132]	; (1e780 <lte_lc_system_mode_get+0xf0>)
   1e6fc:	9900      	ldr	r1, [sp, #0]
   1e6fe:	a804      	add	r0, sp, #16
   1e700:	f015 fea8 	bl	34454 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   1e704:	b388      	cbz	r0, 1e76a <lte_lc_system_mode_get+0xda>
	}

	/* We skip the first parameter, as that's the response prefix,
	 * "%XSYSTEMMODE:" in this case."
	 */
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1e706:	2601      	movs	r6, #1
	int err, bitmask = 0;
   1e708:	4627      	mov	r7, r4
		if (err) {
			LOG_ERR("Could not parse mode parameter, err: %d", err);
			goto clean_exit;
		}

		bitmask = param ? bitmask | BIT(i) : bitmask;
   1e70a:	46b0      	mov	r8, r6
		err = at_params_int_get(&resp_list, i, &param);
   1e70c:	aa01      	add	r2, sp, #4
   1e70e:	4631      	mov	r1, r6
   1e710:	a802      	add	r0, sp, #8
   1e712:	f015 fe4a 	bl	343aa <at_params_int_get>
		if (err) {
   1e716:	4604      	mov	r4, r0
   1e718:	b9a8      	cbnz	r0, 1e746 <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1e71a:	9b01      	ldr	r3, [sp, #4]
   1e71c:	b113      	cbz	r3, 1e724 <lte_lc_system_mode_get+0x94>
   1e71e:	fa08 f306 	lsl.w	r3, r8, r6
   1e722:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1e724:	3601      	adds	r6, #1
   1e726:	2e05      	cmp	r6, #5
   1e728:	d1f0      	bne.n	1e70c <lte_lc_system_mode_get+0x7c>
	}

	/* When checking the bitmask, we need to add 1 to the indices,
	 * as the response prefix is also counted as a parameter.
	 */
	switch (bitmask) {
   1e72a:	2f0c      	cmp	r7, #12
   1e72c:	d820      	bhi.n	1e770 <lte_lc_system_mode_get+0xe0>
   1e72e:	e8df f007 	tbb	[pc, r7]
   1e732:	1f07      	.short	0x1f07
   1e734:	1f141f11 	.word	0x1f141f11
   1e738:	1f161f1f 	.word	0x1f161f1f
   1e73c:	1f18      	.short	0x1f18
   1e73e:	1a          	.byte	0x1a
   1e73f:	00          	.byte	0x00
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1e740:	2300      	movs	r3, #0
		break;
   1e742:	463c      	mov	r4, r7
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1e744:	702b      	strb	r3, [r5, #0]
		err = -EFAULT;
		break;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1e746:	a802      	add	r0, sp, #8
   1e748:	f015 fd81 	bl	3424e <at_params_list_free>

	return err;
}
   1e74c:	4620      	mov	r0, r4
   1e74e:	b010      	add	sp, #64	; 0x40
   1e750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   1e754:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1e756:	702b      	strb	r3, [r5, #0]
		break;
   1e758:	e7f5      	b.n	1e746 <lte_lc_system_mode_get+0xb6>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1e75a:	2302      	movs	r3, #2
   1e75c:	e7fb      	b.n	1e756 <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   1e75e:	2303      	movs	r3, #3
   1e760:	e7f9      	b.n	1e756 <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   1e762:	2304      	movs	r3, #4
   1e764:	e7f7      	b.n	1e756 <lte_lc_system_mode_get+0xc6>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1e766:	2305      	movs	r3, #5
   1e768:	e7f5      	b.n	1e756 <lte_lc_system_mode_get+0xc6>
		err = -EIO;
   1e76a:	f06f 0404 	mvn.w	r4, #4
   1e76e:	e7ea      	b.n	1e746 <lte_lc_system_mode_get+0xb6>
		err = -EFAULT;
   1e770:	f06f 040d 	mvn.w	r4, #13
   1e774:	e7e7      	b.n	1e746 <lte_lc_system_mode_get+0xb6>
		return -EINVAL;
   1e776:	f06f 0415 	mvn.w	r4, #21
   1e77a:	e7e7      	b.n	1e74c <lte_lc_system_mode_get+0xbc>
   1e77c:	000380f5 	.word	0x000380f5
   1e780:	00038105 	.word	0x00038105

0001e784 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   1e784:	b510      	push	{r4, lr}
   1e786:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1e788:	4a09      	ldr	r2, [pc, #36]	; (1e7b0 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   1e78a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1e78c:	7823      	ldrb	r3, [r4, #0]
   1e78e:	2100      	movs	r1, #0
   1e790:	f7ff fd3e 	bl	1e210 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   1e794:	f110 0f0b 	cmn.w	r0, #11
   1e798:	d000      	beq.n	1e79c <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   1e79a:	b940      	cbnz	r0, 1e7ae <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   1e79c:	4804      	ldr	r0, [pc, #16]	; (1e7b0 <modem_info_parse.isra.0+0x2c>)
   1e79e:	f015 fe42 	bl	34426 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   1e7a2:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   1e7a4:	4298      	cmp	r0, r3
   1e7a6:	bf94      	ite	ls
   1e7a8:	2000      	movls	r0, #0
   1e7aa:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   1e7ae:	bd10      	pop	{r4, pc}
   1e7b0:	200222dc 	.word	0x200222dc

0001e7b4 <modem_info_short_get>:

	return len;
}

int modem_info_short_get(enum modem_info info, u16_t *buf)
{
   1e7b4:	b530      	push	{r4, r5, lr}
   1e7b6:	460d      	mov	r5, r1
   1e7b8:	b0a1      	sub	sp, #132	; 0x84
   1e7ba:	4604      	mov	r4, r0
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1e7bc:	2280      	movs	r2, #128	; 0x80
   1e7be:	2100      	movs	r1, #0
   1e7c0:	4668      	mov	r0, sp
   1e7c2:	f016 f967 	bl	34a94 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   1e7c6:	b1e5      	cbz	r5, 1e802 <modem_info_short_get+0x4e>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1e7c8:	4b11      	ldr	r3, [pc, #68]	; (1e810 <modem_info_short_get+0x5c>)
   1e7ca:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1e7ce:	7aa3      	ldrb	r3, [r4, #10]
   1e7d0:	2b03      	cmp	r3, #3
   1e7d2:	d016      	beq.n	1e802 <modem_info_short_get+0x4e>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	2280      	movs	r2, #128	; 0x80
   1e7d8:	4669      	mov	r1, sp
   1e7da:	6820      	ldr	r0, [r4, #0]
   1e7dc:	f7ff fade 	bl	1dd9c <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   1e7e0:	b990      	cbnz	r0, 1e808 <modem_info_short_get+0x54>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   1e7e2:	4669      	mov	r1, sp
   1e7e4:	f104 0009 	add.w	r0, r4, #9
   1e7e8:	f7ff ffcc 	bl	1e784 <modem_info_parse.isra.0>

	if (err) {
   1e7ec:	b938      	cbnz	r0, 1e7fe <modem_info_short_get+0x4a>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   1e7ee:	462a      	mov	r2, r5
   1e7f0:	7a21      	ldrb	r1, [r4, #8]
   1e7f2:	4808      	ldr	r0, [pc, #32]	; (1e814 <modem_info_short_get+0x60>)
   1e7f4:	f015 fdc3 	bl	3437e <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(u16_t);
   1e7f8:	2800      	cmp	r0, #0
   1e7fa:	bf08      	it	eq
   1e7fc:	2002      	moveq	r0, #2
}
   1e7fe:	b021      	add	sp, #132	; 0x84
   1e800:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e802:	f06f 0015 	mvn.w	r0, #21
   1e806:	e7fa      	b.n	1e7fe <modem_info_short_get+0x4a>
		return -EIO;
   1e808:	f06f 0004 	mvn.w	r0, #4
   1e80c:	e7f7      	b.n	1e7fe <modem_info_short_get+0x4a>
   1e80e:	bf00      	nop
   1e810:	00035f64 	.word	0x00035f64
   1e814:	200222dc 	.word	0x200222dc

0001e818 <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   1e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e81c:	460e      	mov	r6, r1
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   1e81e:	2500      	movs	r5, #0
{
   1e820:	b0a5      	sub	sp, #148	; 0x94
   1e822:	4680      	mov	r8, r0
   1e824:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1e826:	2100      	movs	r1, #0
   1e828:	2280      	movs	r2, #128	; 0x80
   1e82a:	a804      	add	r0, sp, #16
   1e82c:	f016 f932 	bl	34a94 <memset>
	size_t len = 0;
   1e830:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   1e832:	2e00      	cmp	r6, #0
   1e834:	f000 80c5 	beq.w	1e9c2 <modem_info_string_get+0x1aa>
   1e838:	f1b9 0f00 	cmp.w	r9, #0
   1e83c:	f000 80c1 	beq.w	1e9c2 <modem_info_string_get+0x1aa>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1e840:	4b64      	ldr	r3, [pc, #400]	; (1e9d4 <modem_info_string_get+0x1bc>)
   1e842:	2280      	movs	r2, #128	; 0x80
   1e844:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   1e848:	a904      	add	r1, sp, #16
   1e84a:	462b      	mov	r3, r5
   1e84c:	f8da 0000 	ldr.w	r0, [sl]
   1e850:	f7ff faa4 	bl	1dd9c <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   1e854:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   1e858:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   1e85a:	d10a      	bne.n	1e872 <modem_info_string_get+0x5a>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e85c:	f10d 0119 	add.w	r1, sp, #25
   1e860:	4630      	mov	r0, r6
   1e862:	f016 fa42 	bl	34cea <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   1e866:	4630      	mov	r0, r6
   1e868:	f7f3 fc0a 	bl	12080 <strlen>
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   1e86c:	b025      	add	sp, #148	; 0x94
   1e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   1e872:	f1b8 0f09 	cmp.w	r8, #9
   1e876:	d041      	beq.n	1e8fc <modem_info_string_get+0xe4>
	if (err != 0) {
   1e878:	2c00      	cmp	r4, #0
   1e87a:	f040 80a5 	bne.w	1e9c8 <modem_info_string_get+0x1b0>
	size_t ip_str_len = 0;
   1e87e:	4627      	mov	r7, r4
	size_t cmd_rsp_idx = 0;
   1e880:	46a3      	mov	fp, r4
	if (info == MODEM_INFO_IP_ADDRESS) {
   1e882:	ab04      	add	r3, sp, #16
   1e884:	f1b8 0f09 	cmp.w	r8, #9
   1e888:	445b      	add	r3, fp
   1e88a:	d10f      	bne.n	1e8ac <modem_info_string_get+0x94>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   1e88c:	4952      	ldr	r1, [pc, #328]	; (1e9d8 <modem_info_string_get+0x1c0>)
   1e88e:	4618      	mov	r0, r3
   1e890:	9301      	str	r3, [sp, #4]
   1e892:	f016 fa44 	bl	34d1e <strstr>
		if (ip_str_end == NULL) {
   1e896:	2800      	cmp	r0, #0
   1e898:	f000 8099 	beq.w	1e9ce <modem_info_string_get+0x1b6>
		recv_buf[++ip_str_len] = 0;
   1e89c:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1e89e:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   1e8a0:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1e8a2:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   1e8a4:	1c47      	adds	r7, r0, #1
   1e8a6:	443a      	add	r2, r7
   1e8a8:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   1e8ac:	4619      	mov	r1, r3
   1e8ae:	f10a 0009 	add.w	r0, sl, #9
   1e8b2:	f7ff ff67 	bl	1e784 <modem_info_parse.isra.0>
	if (err) {
   1e8b6:	2800      	cmp	r0, #0
   1e8b8:	d1d8      	bne.n	1e86c <modem_info_string_get+0x54>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   1e8ba:	f89a 300a 	ldrb.w	r3, [sl, #10]
   1e8be:	2b01      	cmp	r3, #1
   1e8c0:	d11f      	bne.n	1e902 <modem_info_string_get+0xea>
		err = at_params_short_get(&m_param_list,
   1e8c2:	f10d 020a 	add.w	r2, sp, #10
   1e8c6:	f89a 1008 	ldrb.w	r1, [sl, #8]
   1e8ca:	4844      	ldr	r0, [pc, #272]	; (1e9dc <modem_info_string_get+0x1c4>)
   1e8cc:	f015 fd57 	bl	3437e <at_params_short_get>
		if (err) {
   1e8d0:	2800      	cmp	r0, #0
   1e8d2:	d1cb      	bne.n	1e86c <modem_info_string_get+0x54>
		err = snprintf(buf, buf_size, "%d", param_value);
   1e8d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e8d8:	4a41      	ldr	r2, [pc, #260]	; (1e9e0 <modem_info_string_get+0x1c8>)
   1e8da:	4649      	mov	r1, r9
   1e8dc:	4630      	mov	r0, r6
   1e8de:	f00f fcc9 	bl	2e274 <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   1e8e2:	4548      	cmp	r0, r9
   1e8e4:	d91f      	bls.n	1e926 <modem_info_string_get+0x10e>
			return -EMSGSIZE;
   1e8e6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e8ea:	e7bf      	b.n	1e86c <modem_info_string_get+0x54>
			++ip_str_end;
   1e8ec:	3001      	adds	r0, #1
			++ip_cnt;
   1e8ee:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   1e8f0:	4639      	mov	r1, r7
   1e8f2:	f016 fa14 	bl	34d1e <strstr>
   1e8f6:	2800      	cmp	r0, #0
   1e8f8:	d1f8      	bne.n	1e8ec <modem_info_string_get+0xd4>
   1e8fa:	e7bd      	b.n	1e878 <modem_info_string_get+0x60>
	char *ip_str_end = recv_buf;
   1e8fc:	a804      	add	r0, sp, #16
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   1e8fe:	4f36      	ldr	r7, [pc, #216]	; (1e9d8 <modem_info_string_get+0x1c0>)
   1e900:	e7f6      	b.n	1e8f0 <modem_info_string_get+0xd8>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1e902:	2b03      	cmp	r3, #3
   1e904:	d10f      	bne.n	1e926 <modem_info_string_get+0x10e>
		len = buf_size - out_buf_len;
   1e906:	eba9 0304 	sub.w	r3, r9, r4
   1e90a:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   1e90c:	1932      	adds	r2, r6, r4
   1e90e:	ab03      	add	r3, sp, #12
   1e910:	f89a 1008 	ldrb.w	r1, [sl, #8]
   1e914:	4831      	ldr	r0, [pc, #196]	; (1e9dc <modem_info_string_get+0x1c4>)
   1e916:	f015 fd5f 	bl	343d8 <at_params_string_get>
		if (err != 0) {
   1e91a:	2800      	cmp	r0, #0
   1e91c:	d1a6      	bne.n	1e86c <modem_info_string_get+0x54>
		} else if (len >= buf_size) {
   1e91e:	9b03      	ldr	r3, [sp, #12]
   1e920:	454b      	cmp	r3, r9
   1e922:	d2e0      	bcs.n	1e8e6 <modem_info_string_get+0xce>
		buf[len] = 0;
   1e924:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   1e926:	f1b8 0f0e 	cmp.w	r8, #14
   1e92a:	d121      	bne.n	1e970 <modem_info_string_get+0x158>
   1e92c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1e92e:	4630      	mov	r0, r6
   1e930:	f7f3 fba6 	bl	12080 <strlen>
   1e934:	1ca3      	adds	r3, r4, #2
   1e936:	1ba4      	subs	r4, r4, r6
   1e938:	4284      	cmp	r4, r0
   1e93a:	d30f      	bcc.n	1e95c <modem_info_string_get+0x144>
		if ((len == ICCID_LEN) &&
   1e93c:	9b03      	ldr	r3, [sp, #12]
   1e93e:	2b14      	cmp	r3, #20
   1e940:	d106      	bne.n	1e950 <modem_info_string_get+0x138>
   1e942:	7cf3      	ldrb	r3, [r6, #19]
   1e944:	2b46      	cmp	r3, #70	; 0x46
   1e946:	d103      	bne.n	1e950 <modem_info_string_get+0x138>
			buf[len - 1] = '\0';
   1e948:	2300      	movs	r3, #0
   1e94a:	74f3      	strb	r3, [r6, #19]
			--len;
   1e94c:	2313      	movs	r3, #19
   1e94e:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   1e950:	9803      	ldr	r0, [sp, #12]
   1e952:	2800      	cmp	r0, #0
   1e954:	bf08      	it	eq
   1e956:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   1e95a:	e787      	b.n	1e86c <modem_info_string_get+0x54>
		current_char = buf[i];
   1e95c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   1e960:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   1e964:	461c      	mov	r4, r3
		buf[i] = next_char;
   1e966:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   1e96a:	f803 2c01 	strb.w	r2, [r3, #-1]
   1e96e:	e7de      	b.n	1e92e <modem_info_string_get+0x116>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   1e970:	f1b8 0f09 	cmp.w	r8, #9
   1e974:	d1ec      	bne.n	1e950 <modem_info_string_get+0x138>
   1e976:	2d00      	cmp	r5, #0
   1e978:	ddea      	ble.n	1e950 <modem_info_string_get+0x138>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   1e97a:	1933      	adds	r3, r6, r4
   1e97c:	4919      	ldr	r1, [pc, #100]	; (1e9e4 <modem_info_string_get+0x1cc>)
   1e97e:	4618      	mov	r0, r3
   1e980:	9301      	str	r3, [sp, #4]
   1e982:	f016 f9cc 	bl	34d1e <strstr>
		if (ip_v6_str) {
   1e986:	b130      	cbz	r0, 1e996 <modem_info_string_get+0x17e>
			*ip_v6_str = 0;
   1e988:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   1e98a:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   1e98c:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   1e98e:	4618      	mov	r0, r3
   1e990:	f7f3 fb76 	bl	12080 <strlen>
   1e994:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   1e996:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   1e998:	2d01      	cmp	r5, #1
		out_buf_len += len;
   1e99a:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   1e99c:	d00c      	beq.n	1e9b8 <modem_info_string_get+0x1a0>
			err = snprintf(&buf[out_buf_len],
   1e99e:	eba9 0b04 	sub.w	fp, r9, r4
   1e9a2:	4a11      	ldr	r2, [pc, #68]	; (1e9e8 <modem_info_string_get+0x1d0>)
   1e9a4:	4659      	mov	r1, fp
   1e9a6:	1930      	adds	r0, r6, r4
   1e9a8:	f00f fc64 	bl	2e274 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   1e9ac:	f1bb 0f01 	cmp.w	fp, #1
   1e9b0:	d999      	bls.n	1e8e6 <modem_info_string_get+0xce>
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   1e9b2:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   1e9b4:	f107 0b01 	add.w	fp, r7, #1
		if (--ip_cnt) {
   1e9b8:	3d01      	subs	r5, #1
   1e9ba:	f47f af62 	bne.w	1e882 <modem_info_string_get+0x6a>
			len = out_buf_len;
   1e9be:	9403      	str	r4, [sp, #12]
   1e9c0:	e7c6      	b.n	1e950 <modem_info_string_get+0x138>
		return -EINVAL;
   1e9c2:	f06f 0015 	mvn.w	r0, #21
   1e9c6:	e751      	b.n	1e86c <modem_info_string_get+0x54>
		return -EIO;
   1e9c8:	f06f 0004 	mvn.w	r0, #4
   1e9cc:	e74e      	b.n	1e86c <modem_info_string_get+0x54>
			return -EFAULT;
   1e9ce:	f06f 000d 	mvn.w	r0, #13
   1e9d2:	e74b      	b.n	1e86c <modem_info_string_get+0x54>
   1e9d4:	00035f64 	.word	0x00035f64
   1e9d8:	00038429 	.word	0x00038429
   1e9dc:	200222dc 	.word	0x200222dc
   1e9e0:	000382d7 	.word	0x000382d7
   1e9e4:	00039069 	.word	0x00039069
   1e9e8:	0003817d 	.word	0x0003817d

0001e9ec <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   1e9ec:	210a      	movs	r1, #10
   1e9ee:	4801      	ldr	r0, [pc, #4]	; (1e9f4 <modem_info_init+0x8>)
   1e9f0:	f015 bc1a 	b.w	34228 <at_params_list_init>
   1e9f4:	200222dc 	.word	0x200222dc

0001e9f8 <write_at_cmd_with_cme_enabled>:
	return err;
}

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
					 enum at_cmd_state *state)
{
   1e9f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e9fc:	4605      	mov	r5, r0
   1e9fe:	460e      	mov	r6, r1
   1ea00:	4617      	mov	r7, r2
   1ea02:	4698      	mov	r8, r3
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   1ea04:	220b      	movs	r2, #11
   1ea06:	2300      	movs	r3, #0
   1ea08:	a901      	add	r1, sp, #4
   1ea0a:	4814      	ldr	r0, [pc, #80]	; (1ea5c <write_at_cmd_with_cme_enabled+0x64>)
   1ea0c:	f7ff f9c6 	bl	1dd9c <at_cmd_write>
	if (err) {
   1ea10:	1e04      	subs	r4, r0, #0
   1ea12:	d11f      	bne.n	1ea54 <write_at_cmd_with_cme_enabled+0x5c>
	return (response[CMEE_STATUS] == '1');
   1ea14:	f89d 300b 	ldrb.w	r3, [sp, #11]

	if (cmee_was_active < 0) {
		return -EFAULT;
	}

	if (!cmee_was_active) {
   1ea18:	2b31      	cmp	r3, #49	; 0x31
   1ea1a:	d00b      	beq.n	1ea34 <write_at_cmd_with_cme_enabled+0x3c>
	return at_cmd_write("AT+CMEE=1", NULL, 0, NULL);
   1ea1c:	4623      	mov	r3, r4
   1ea1e:	4622      	mov	r2, r4
   1ea20:	4621      	mov	r1, r4
   1ea22:	480f      	ldr	r0, [pc, #60]	; (1ea60 <write_at_cmd_with_cme_enabled+0x68>)
   1ea24:	f7ff f9ba 	bl	1dd9c <at_cmd_write>
		err = cmee_enable();
		if (err) {
   1ea28:	4604      	mov	r4, r0
   1ea2a:	b120      	cbz	r0, 1ea36 <write_at_cmd_with_cme_enabled+0x3e>
			return err;
		}
	}

	return err;
}
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	b004      	add	sp, #16
   1ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (response[CMEE_STATUS] == '1');
   1ea34:	2401      	movs	r4, #1
	err = at_cmd_write(cmd, buf, buf_len, state);
   1ea36:	4643      	mov	r3, r8
   1ea38:	463a      	mov	r2, r7
   1ea3a:	4631      	mov	r1, r6
   1ea3c:	4628      	mov	r0, r5
   1ea3e:	f7ff f9ad 	bl	1dd9c <at_cmd_write>
	if (!cmee_was_active) {
   1ea42:	b92c      	cbnz	r4, 1ea50 <write_at_cmd_with_cme_enabled+0x58>
	return at_cmd_write("AT+CMEE=0", NULL, 0, NULL);
   1ea44:	4623      	mov	r3, r4
   1ea46:	4622      	mov	r2, r4
   1ea48:	4621      	mov	r1, r4
   1ea4a:	4806      	ldr	r0, [pc, #24]	; (1ea64 <write_at_cmd_with_cme_enabled+0x6c>)
   1ea4c:	f7ff f9a6 	bl	1dd9c <at_cmd_write>
	err = at_cmd_write(cmd, buf, buf_len, state);
   1ea50:	4604      	mov	r4, r0
   1ea52:	e7eb      	b.n	1ea2c <write_at_cmd_with_cme_enabled+0x34>
	if (cmee_was_active < 0) {
   1ea54:	daef      	bge.n	1ea36 <write_at_cmd_with_cme_enabled+0x3e>
		return -EFAULT;
   1ea56:	f06f 040d 	mvn.w	r4, #13
   1ea5a:	e7e7      	b.n	1ea2c <write_at_cmd_with_cme_enabled+0x34>
   1ea5c:	0003834a 	.word	0x0003834a
   1ea60:	00038353 	.word	0x00038353
   1ea64:	0003835d 	.word	0x0003835d

0001ea68 <translate_error>:
{
   1ea68:	b510      	push	{r4, lr}
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   1ea6a:	1e04      	subs	r4, r0, #0
   1ea6c:	dd0d      	ble.n	1ea8a <translate_error+0x22>
   1ea6e:	2903      	cmp	r1, #3
   1ea70:	d10b      	bne.n	1ea8a <translate_error+0x22>
		switch (err) {
   1ea72:	f46f 7300 	mvn.w	r3, #512	; 0x200
   1ea76:	18e3      	adds	r3, r4, r3
   1ea78:	2b05      	cmp	r3, #5
   1ea7a:	d80e      	bhi.n	1ea9a <translate_error+0x32>
   1ea7c:	e8df f003 	tbb	[pc, r3]
   1ea80:	0d07031d 	.word	0x0d07031d
   1ea84:	0a0d      	.short	0x0a0d
			return -EPERM;
   1ea86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1ea8a:	4620      	mov	r0, r4
   1ea8c:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   1ea8e:	f06f 040b 	mvn.w	r4, #11
   1ea92:	e7fa      	b.n	1ea8a <translate_error+0x22>
			return -EACCES;
   1ea94:	f06f 040c 	mvn.w	r4, #12
   1ea98:	e7f7      	b.n	1ea8a <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   1ea9a:	234a      	movs	r3, #74	; 0x4a
   1ea9c:	4a08      	ldr	r2, [pc, #32]	; (1eac0 <translate_error+0x58>)
   1ea9e:	4909      	ldr	r1, [pc, #36]	; (1eac4 <translate_error+0x5c>)
   1eaa0:	4809      	ldr	r0, [pc, #36]	; (1eac8 <translate_error+0x60>)
   1eaa2:	f010 fbd6 	bl	2f252 <printk>
   1eaa6:	4621      	mov	r1, r4
   1eaa8:	4808      	ldr	r0, [pc, #32]	; (1eacc <translate_error+0x64>)
   1eaaa:	f010 fbd2 	bl	2f252 <printk>
   1eaae:	214a      	movs	r1, #74	; 0x4a
   1eab0:	4803      	ldr	r0, [pc, #12]	; (1eac0 <translate_error+0x58>)
   1eab2:	f010 fecf 	bl	2f854 <assert_post_action>
   1eab6:	4c06      	ldr	r4, [pc, #24]	; (1ead0 <translate_error+0x68>)
   1eab8:	e7e7      	b.n	1ea8a <translate_error+0x22>
			return -ENOENT;
   1eaba:	f06f 0401 	mvn.w	r4, #1
   1eabe:	e7e4      	b.n	1ea8a <translate_error+0x22>
   1eac0:	000382f9 	.word	0x000382f9
   1eac4:	00038ae7 	.word	0x00038ae7
   1eac8:	00036be5 	.word	0x00036be5
   1eacc:	0003832d 	.word	0x0003832d
   1ead0:	baadbaad 	.word	0xbaadbaad

0001ead4 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgnt_cred_type cred_type,
			 const void *buf, size_t len)
{
   1ead4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ead6:	461d      	mov	r5, r3
   1ead8:	b085      	sub	sp, #20
	int err;
	int written;
	enum at_cmd_state state;

	if (buf == NULL || len == 0) {
   1eada:	4617      	mov	r7, r2
   1eadc:	b322      	cbz	r2, 1eb28 <modem_key_mgmt_write+0x54>
   1eade:	b31b      	cbz	r3, 1eb28 <modem_key_mgmt_write+0x54>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d,\"",
   1eae0:	4c14      	ldr	r4, [pc, #80]	; (1eb34 <modem_key_mgmt_write+0x60>)
   1eae2:	e9cd 0100 	strd	r0, r1, [sp]
   1eae6:	4b14      	ldr	r3, [pc, #80]	; (1eb38 <modem_key_mgmt_write+0x64>)
   1eae8:	4a14      	ldr	r2, [pc, #80]	; (1eb3c <modem_key_mgmt_write+0x68>)
   1eaea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1eaee:	4620      	mov	r0, r4
   1eaf0:	f00f fbc0 	bl	2e274 <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	if (written + len + sizeof("\"") > sizeof(scratch_buf)) {
   1eaf4:	1946      	adds	r6, r0, r5
   1eaf6:	1cb3      	adds	r3, r6, #2
   1eaf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1eafc:	d817      	bhi.n	1eb2e <modem_key_mgmt_write+0x5a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1eafe:	462a      	mov	r2, r5
   1eb00:	4639      	mov	r1, r7
   1eb02:	4420      	add	r0, r4
   1eb04:	f015 ff8c 	bl	34a20 <memcpy>
	memcpy(&scratch_buf[written], buf, len);
	written += len;

	memcpy(&scratch_buf[written], "\"", sizeof("\""));

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   1eb08:	2200      	movs	r2, #0
   1eb0a:	4b0d      	ldr	r3, [pc, #52]	; (1eb40 <modem_key_mgmt_write+0x6c>)
   1eb0c:	4611      	mov	r1, r2
   1eb0e:	881b      	ldrh	r3, [r3, #0]
   1eb10:	4620      	mov	r0, r4
   1eb12:	5333      	strh	r3, [r6, r4]
   1eb14:	f10d 030f 	add.w	r3, sp, #15
   1eb18:	f7ff ff6e 	bl	1e9f8 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   1eb1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1eb20:	f7ff ffa2 	bl	1ea68 <translate_error>
}
   1eb24:	b005      	add	sp, #20
   1eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1eb28:	f06f 0015 	mvn.w	r0, #21
   1eb2c:	e7fa      	b.n	1eb24 <modem_key_mgmt_write+0x50>
		return -ENOBUFS;
   1eb2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1eb32:	e7f7      	b.n	1eb24 <modem_key_mgmt_write+0x50>
   1eb34:	20027f78 	.word	0x20027f78
   1eb38:	000382e4 	.word	0x000382e4
   1eb3c:	000382ee 	.word	0x000382ee
   1eb40:	00036fa0 	.word	0x00036fa0

0001eb44 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgnt_cred_type cred_type)
{
   1eb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int written;
	enum at_cmd_state state;

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d",
   1eb46:	4c0b      	ldr	r4, [pc, #44]	; (1eb74 <modem_key_mgmt_delete+0x30>)
   1eb48:	e9cd 0100 	strd	r0, r1, [sp]
   1eb4c:	4b0a      	ldr	r3, [pc, #40]	; (1eb78 <modem_key_mgmt_delete+0x34>)
   1eb4e:	4a0b      	ldr	r2, [pc, #44]	; (1eb7c <modem_key_mgmt_delete+0x38>)
   1eb50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1eb54:	4620      	mov	r0, r4
   1eb56:	f00f fb8d 	bl	2e274 <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   1eb5a:	2200      	movs	r2, #0
   1eb5c:	f10d 030f 	add.w	r3, sp, #15
   1eb60:	4611      	mov	r1, r2
   1eb62:	4620      	mov	r0, r4
   1eb64:	f7ff ff48 	bl	1e9f8 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   1eb68:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1eb6c:	f7ff ff7c 	bl	1ea68 <translate_error>
}
   1eb70:	b004      	add	sp, #16
   1eb72:	bd10      	pop	{r4, pc}
   1eb74:	20027f78 	.word	0x20027f78
   1eb78:	000382da 	.word	0x000382da
   1eb7c:	000382d1 	.word	0x000382d1

0001eb80 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   1eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   1eb84:	4e59      	ldr	r6, [pc, #356]	; (1ecec <new_date_time_get+0x16c>)
{
   1eb86:	b095      	sub	sp, #84	; 0x54
   1eb88:	4635      	mov	r5, r6
   1eb8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eb8e:	4858      	ldr	r0, [pc, #352]	; (1ecf0 <new_date_time_get+0x170>)
   1eb90:	f00b fec2 	bl	2a918 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   1eb94:	68b3      	ldr	r3, [r6, #8]
   1eb96:	b19b      	cbz	r3, 1ebc0 <new_date_time_get+0x40>
   1eb98:	e9d6 2300 	ldrd	r2, r3, [r6]
   1eb9c:	4313      	orrs	r3, r2
   1eb9e:	d00f      	beq.n	1ebc0 <new_date_time_get+0x40>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   1eba0:	f015 fc7a 	bl	34498 <k_uptime_get>
   1eba4:	2400      	movs	r4, #0
   1eba6:	68b3      	ldr	r3, [r6, #8]
   1eba8:	1ac7      	subs	r7, r0, r3
   1ebaa:	eb61 78e3 	sbc.w	r8, r1, r3, asr #31
   1ebae:	4b51      	ldr	r3, [pc, #324]	; (1ecf4 <new_date_time_get+0x174>)
   1ebb0:	42bb      	cmp	r3, r7
   1ebb2:	eb74 0308 	sbcs.w	r3, r4, r8
   1ebb6:	db03      	blt.n	1ebc0 <new_date_time_get+0x40>
		LOG_DBG("Fallback on NTP server");

		err = time_NTP_server_get();
		if (err == 0) {
			LOG_DBG("Time from NTP server obtained");
			initial_valid_time = true;
   1ebb8:	2201      	movs	r2, #1
   1ebba:	4b4f      	ldr	r3, [pc, #316]	; (1ecf8 <new_date_time_get+0x178>)
   1ebbc:	701a      	strb	r2, [r3, #0]
			continue;
   1ebbe:	e7e4      	b.n	1eb8a <new_date_time_get+0xa>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   1ebc0:	2300      	movs	r3, #0
   1ebc2:	2221      	movs	r2, #33	; 0x21
   1ebc4:	a902      	add	r1, sp, #8
   1ebc6:	484d      	ldr	r0, [pc, #308]	; (1ecfc <new_date_time_get+0x17c>)
   1ebc8:	f7ff f8e8 	bl	1dd9c <at_cmd_write>
	if (err) {
   1ebcc:	2800      	cmp	r0, #0
   1ebce:	d14d      	bne.n	1ec6c <new_date_time_get+0xec>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   1ebd0:	2120      	movs	r1, #32
   1ebd2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
			buf[i] = ' ';
   1ebd6:	460c      	mov	r4, r1
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   1ebd8:	f244 0009 	movw	r0, #16393	; 0x4009
   1ebdc:	aa02      	add	r2, sp, #8
   1ebde:	f812 3b01 	ldrb.w	r3, [r2], #1
   1ebe2:	3b2c      	subs	r3, #44	; 0x2c
   1ebe4:	b2db      	uxtb	r3, r3
   1ebe6:	2b0e      	cmp	r3, #14
   1ebe8:	d805      	bhi.n	1ebf6 <new_date_time_get+0x76>
   1ebea:	fa20 f303 	lsr.w	r3, r0, r3
   1ebee:	07df      	lsls	r7, r3, #31
			buf[i] = ' ';
   1ebf0:	bf48      	it	mi
   1ebf2:	f802 4c01 	strbmi.w	r4, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   1ebf6:	3901      	subs	r1, #1
   1ebf8:	d1f1      	bne.n	1ebde <new_date_time_get+0x5e>
	char *ptr_index = &buf[8];
   1ebfa:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1ebfc:	220a      	movs	r2, #10
   1ebfe:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   1ec00:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1ec02:	f00f fc03 	bl	2e40c <strtol>
   1ec06:	3064      	adds	r0, #100	; 0x64
   1ec08:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1ec0a:	220a      	movs	r2, #10
   1ec0c:	a901      	add	r1, sp, #4
   1ec0e:	9801      	ldr	r0, [sp, #4]
   1ec10:	f00f fbfc 	bl	2e40c <strtol>
   1ec14:	3801      	subs	r0, #1
   1ec16:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1ec18:	220a      	movs	r2, #10
   1ec1a:	a901      	add	r1, sp, #4
   1ec1c:	9801      	ldr	r0, [sp, #4]
   1ec1e:	f00f fbf5 	bl	2e40c <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1ec22:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1ec24:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1ec26:	a901      	add	r1, sp, #4
   1ec28:	9801      	ldr	r0, [sp, #4]
   1ec2a:	f00f fbef 	bl	2e40c <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1ec2e:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1ec30:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1ec32:	a901      	add	r1, sp, #4
   1ec34:	9801      	ldr	r0, [sp, #4]
   1ec36:	f00f fbe9 	bl	2e40c <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1ec3a:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1ec3c:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1ec3e:	a901      	add	r1, sp, #4
   1ec40:	9801      	ldr	r0, [sp, #4]
   1ec42:	f00f fbe3 	bl	2e40c <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1ec46:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1ec48:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1ec4a:	2b73      	cmp	r3, #115	; 0x73
   1ec4c:	d00e      	beq.n	1ec6c <new_date_time_get+0xec>
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(&date_time) * 1000;
   1ec4e:	a80b      	add	r0, sp, #44	; 0x2c
   1ec50:	f7f8 f9c6 	bl	16fe0 <timeutil_timegm64>
   1ec54:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ec58:	fba0 2304 	umull	r2, r3, r0, r4
   1ec5c:	fb04 3301 	mla	r3, r4, r1, r3
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   1ec60:	e9c5 2300 	strd	r2, r3, [r5]
		time_aux.last_date_time_update = k_uptime_get();
   1ec64:	f015 fc18 	bl	34498 <k_uptime_get>
   1ec68:	60a8      	str	r0, [r5, #8]
   1ec6a:	e7a5      	b.n	1ebb8 <new_date_time_get+0x38>
		if (err == 0) {
   1ec6c:	f04f 0800 	mov.w	r8, #0
	hints.ai_family = AF_INET;
   1ec70:	f04f 0901 	mov.w	r9, #1
   1ec74:	4c22      	ldr	r4, [pc, #136]	; (1ed00 <new_date_time_get+0x180>)
   1ec76:	4f23      	ldr	r7, [pc, #140]	; (1ed04 <new_date_time_get+0x184>)
	return zsock_getaddrinfo(host, service, hints, res);
   1ec78:	f8df a090 	ldr.w	sl, [pc, #144]	; 1ed0c <new_date_time_get+0x18c>
	hints.ai_protocol = 0;
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	2202      	movs	r2, #2
   1ec80:	e9c7 2303 	strd	r2, r3, [r7, #12]
	if (server->addr == NULL) {
   1ec84:	6863      	ldr	r3, [r4, #4]
	hints.ai_family = AF_INET;
   1ec86:	f8c7 9008 	str.w	r9, [r7, #8]
	if (server->addr == NULL) {
   1ec8a:	b1f3      	cbz	r3, 1ecca <new_date_time_get+0x14a>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   1ec8c:	6863      	ldr	r3, [r4, #4]
   1ec8e:	a80b      	add	r0, sp, #44	; 0x2c
   1ec90:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1ec94:	f010 fde8 	bl	2f868 <sntp_init>
	if (err) {
   1ec98:	4683      	mov	fp, r0
   1ec9a:	b930      	cbnz	r0, 1ecaa <new_date_time_get+0x12a>
	err = sntp_query(&sntp_ctx, timeout, time);
   1ec9c:	4a1a      	ldr	r2, [pc, #104]	; (1ed08 <new_date_time_get+0x188>)
   1ec9e:	f241 3188 	movw	r1, #5000	; 0x1388
   1eca2:	a80b      	add	r0, sp, #44	; 0x2c
   1eca4:	f7f3 fc60 	bl	12568 <sntp_query>
   1eca8:	4683      	mov	fp, r0
	sntp_close(&sntp_ctx);
   1ecaa:	a80b      	add	r0, sp, #44	; 0x2c
   1ecac:	f010 fe0b 	bl	2f8c6 <sntp_close>
		if (err) {
   1ecb0:	f1bb 0f00 	cmp.w	fp, #0
   1ecb4:	d111      	bne.n	1ecda <new_date_time_get+0x15a>
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   1ecb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ecba:	4b13      	ldr	r3, [pc, #76]	; (1ed08 <new_date_time_get+0x188>)
   1ecbc:	681a      	ldr	r2, [r3, #0]
   1ecbe:	6858      	ldr	r0, [r3, #4]
   1ecc0:	fba2 2301 	umull	r2, r3, r2, r1
   1ecc4:	fb01 3300 	mla	r3, r1, r0, r3
   1ecc8:	e7ca      	b.n	1ec60 <new_date_time_get+0xe0>
   1ecca:	1d23      	adds	r3, r4, #4
   1eccc:	463a      	mov	r2, r7
   1ecce:	4651      	mov	r1, sl
   1ecd0:	6820      	ldr	r0, [r4, #0]
   1ecd2:	f010 fdfd 	bl	2f8d0 <zsock_getaddrinfo>
		if (err) {
   1ecd6:	2800      	cmp	r0, #0
   1ecd8:	d0d8      	beq.n	1ec8c <new_date_time_get+0x10c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   1ecda:	f108 0801 	add.w	r8, r8, #1
   1ecde:	f1b8 0f05 	cmp.w	r8, #5
   1ece2:	f104 0408 	add.w	r4, r4, #8
   1ece6:	d1c9      	bne.n	1ec7c <new_date_time_get+0xfc>
   1ece8:	e74f      	b.n	1eb8a <new_date_time_get+0xa>
   1ecea:	bf00      	nop
   1ecec:	20020958 	.word	0x20020958
   1ecf0:	2002066c 	.word	0x2002066c
   1ecf4:	0036ee80 	.word	0x0036ee80
   1ecf8:	20028f78 	.word	0x20028f78
   1ecfc:	00038199 	.word	0x00038199
   1ed00:	200201a8 	.word	0x200201a8
   1ed04:	2002239c 	.word	0x2002239c
   1ed08:	20020948 	.word	0x20020948
   1ed0c:	00038367 	.word	0x00038367

0001ed10 <date_time_init>:
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
}

static int date_time_init(struct device *unused)
{
   1ed10:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   1ed12:	4c06      	ldr	r4, [pc, #24]	; (1ed2c <date_time_init+0x1c>)
   1ed14:	4906      	ldr	r1, [pc, #24]	; (1ed30 <date_time_init+0x20>)
   1ed16:	4620      	mov	r0, r4
   1ed18:	f015 fda8 	bl	3486c <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1ed1c:	4a05      	ldr	r2, [pc, #20]	; (1ed34 <date_time_init+0x24>)
   1ed1e:	4621      	mov	r1, r4
   1ed20:	4805      	ldr	r0, [pc, #20]	; (1ed38 <date_time_init+0x28>)
   1ed22:	f00c f879 	bl	2ae18 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   1ed26:	2000      	movs	r0, #0
   1ed28:	bd10      	pop	{r4, pc}
   1ed2a:	bf00      	nop
   1ed2c:	200223dc 	.word	0x200223dc
   1ed30:	0001ed3d 	.word	0x0001ed3d
   1ed34:	0036ee80 	.word	0x0036ee80
   1ed38:	20027460 	.word	0x20027460

0001ed3c <date_time_handler>:
{
   1ed3c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1ed3e:	4805      	ldr	r0, [pc, #20]	; (1ed54 <date_time_handler+0x18>)
   1ed40:	f00b fda6 	bl	2a890 <z_impl_k_sem_give>
}
   1ed44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ed48:	4a03      	ldr	r2, [pc, #12]	; (1ed58 <date_time_handler+0x1c>)
   1ed4a:	4904      	ldr	r1, [pc, #16]	; (1ed5c <date_time_handler+0x20>)
   1ed4c:	4804      	ldr	r0, [pc, #16]	; (1ed60 <date_time_handler+0x24>)
   1ed4e:	f00c b863 	b.w	2ae18 <k_delayed_work_submit_to_queue>
   1ed52:	bf00      	nop
   1ed54:	2002066c 	.word	0x2002066c
   1ed58:	0036ee80 	.word	0x0036ee80
   1ed5c:	200223dc 	.word	0x200223dc
   1ed60:	20027460 	.word	0x20027460

0001ed64 <date_time_uptime_to_unix_time_ms>:
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(new_date_time) * 1000;
}

int date_time_uptime_to_unix_time_ms(s64_t *uptime)
{
	if (!initial_valid_time) {
   1ed64:	4b0e      	ldr	r3, [pc, #56]	; (1eda0 <date_time_uptime_to_unix_time_ms+0x3c>)
{
   1ed66:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	if (!initial_valid_time) {
   1ed6a:	781b      	ldrb	r3, [r3, #0]
   1ed6c:	b933      	cbnz	r3, 1ed7c <date_time_uptime_to_unix_time_ms+0x18>
   1ed6e:	480d      	ldr	r0, [pc, #52]	; (1eda4 <date_time_uptime_to_unix_time_ms+0x40>)
   1ed70:	f00b fd8e 	bl	2a890 <z_impl_k_sem_give>
		LOG_ERR("Valid time not currently available, requesting time");
		k_sem_give(&time_fetch_sem);
		return -ENODATA;
   1ed74:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;

	return 0;
}
   1ed78:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   1ed7c:	4b0a      	ldr	r3, [pc, #40]	; (1eda8 <date_time_uptime_to_unix_time_ms+0x44>)
   1ed7e:	689a      	ldr	r2, [r3, #8]
   1ed80:	e9d3 4500 	ldrd	r4, r5, [r3]
   1ed84:	ebb4 0b02 	subs.w	fp, r4, r2
   1ed88:	eb65 7ce2 	sbc.w	ip, r5, r2, asr #31
   1ed8c:	e9d0 3200 	ldrd	r3, r2, [r0]
   1ed90:	eb13 030b 	adds.w	r3, r3, fp
   1ed94:	eb4c 0202 	adc.w	r2, ip, r2
   1ed98:	e9c0 3200 	strd	r3, r2, [r0]
	return 0;
   1ed9c:	2000      	movs	r0, #0
   1ed9e:	e7eb      	b.n	1ed78 <date_time_uptime_to_unix_time_ms+0x14>
   1eda0:	20028f78 	.word	0x20028f78
   1eda4:	2002066c 	.word	0x2002066c
   1eda8:	20020958 	.word	0x20020958

0001edac <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   1edac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1edb0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1edb2:	4c21      	ldr	r4, [pc, #132]	; (1ee38 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   1edb4:	4e21      	ldr	r6, [pc, #132]	; (1ee3c <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1edb6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1edba:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1ee44 <check_ext_api_requests+0x98>
{
   1edbe:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1edc0:	45a8      	cmp	r8, r5
   1edc2:	d803      	bhi.n	1edcc <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1edc4:	2000      	movs	r0, #0
   1edc6:	b005      	add	sp, #20
   1edc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   1edcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1edce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1edd2:	681f      	ldr	r7, [r3, #0]
   1edd4:	ab01      	add	r3, sp, #4
   1edd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1edda:	220c      	movs	r2, #12
   1eddc:	4619      	mov	r1, r3
   1edde:	4638      	mov	r0, r7
   1ede0:	f015 fe10 	bl	34a04 <memcmp>
   1ede4:	b990      	cbnz	r0, 1ee0c <check_ext_api_requests+0x60>
   1ede6:	b18f      	cbz	r7, 1ee0c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1ede8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   1edea:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1edec:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1edee:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1edf0:	4291      	cmp	r1, r2
   1edf2:	d10b      	bne.n	1ee0c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1edf4:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   1edf6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1edf8:	4291      	cmp	r1, r2
   1edfa:	d807      	bhi.n	1ee0c <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   1edfc:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1edfe:	4291      	cmp	r1, r2
   1ee00:	d904      	bls.n	1ee0c <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1ee02:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1ee04:	695b      	ldr	r3, [r3, #20]
   1ee06:	ea32 0303 	bics.w	r3, r2, r3
   1ee0a:	d00a      	beq.n	1ee22 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   1ee0c:	6a27      	ldr	r7, [r4, #32]
   1ee0e:	b167      	cbz	r7, 1ee2a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1ee10:	480b      	ldr	r0, [pc, #44]	; (1ee40 <check_ext_api_requests+0x94>)
   1ee12:	f010 fa1e 	bl	2f252 <printk>
			k_panic();
   1ee16:	4040      	eors	r0, r0
   1ee18:	f380 8811 	msr	BASEPRI, r0
   1ee1c:	f04f 0004 	mov.w	r0, #4
   1ee20:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1ee22:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1ee24:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1ee26:	441c      	add	r4, r3
   1ee28:	e7ca      	b.n	1edc0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1ee2a:	4648      	mov	r0, r9
   1ee2c:	f010 fa11 	bl	2f252 <printk>
			*ext_api_req->ext_api = NULL;
   1ee30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ee32:	601f      	str	r7, [r3, #0]
   1ee34:	e7f5      	b.n	1ee22 <check_ext_api_requests+0x76>
   1ee36:	bf00      	nop
   1ee38:	0000c23c 	.word	0x0000c23c
   1ee3c:	000358b0 	.word	0x000358b0
   1ee40:	000383d0 	.word	0x000383d0
   1ee44:	000383f9 	.word	0x000383f9

0001ee48 <packet_free_cb>:
   1ee48:	b510      	push	{r4, lr}
   1ee4a:	4604      	mov	r4, r0
   1ee4c:	6800      	ldr	r0, [r0, #0]
   1ee4e:	f004 ff7d 	bl	23d4c <rpc_logobj_client_data_free>
   1ee52:	68a0      	ldr	r0, [r4, #8]
   1ee54:	b118      	cbz	r0, 1ee5e <packet_free_cb+0x16>
   1ee56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ee5a:	f007 bd2d 	b.w	268b8 <nrf_free>
   1ee5e:	bd10      	pop	{r4, pc}

0001ee60 <logobj_event_handler>:
   1ee60:	b530      	push	{r4, r5, lr}
   1ee62:	4b3b      	ldr	r3, [pc, #236]	; (1ef50 <logobj_event_handler+0xf0>)
   1ee64:	b085      	sub	sp, #20
   1ee66:	681d      	ldr	r5, [r3, #0]
   1ee68:	2d00      	cmp	r5, #0
   1ee6a:	d04c      	beq.n	1ef06 <logobj_event_handler+0xa6>
   1ee6c:	f248 0302 	movw	r3, #32770	; 0x8002
   1ee70:	4299      	cmp	r1, r3
   1ee72:	d053      	beq.n	1ef1c <logobj_event_handler+0xbc>
   1ee74:	d91c      	bls.n	1eeb0 <logobj_event_handler+0x50>
   1ee76:	f248 0303 	movw	r3, #32771	; 0x8003
   1ee7a:	4299      	cmp	r1, r3
   1ee7c:	d05a      	beq.n	1ef34 <logobj_event_handler+0xd4>
   1ee7e:	f249 0301 	movw	r3, #36865	; 0x9001
   1ee82:	4299      	cmp	r1, r3
   1ee84:	d147      	bne.n	1ef16 <logobj_event_handler+0xb6>
   1ee86:	2400      	movs	r4, #0
   1ee88:	6843      	ldr	r3, [r0, #4]
   1ee8a:	6802      	ldr	r2, [r0, #0]
   1ee8c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1ee90:	e9cd 2300 	strd	r2, r3, [sp]
   1ee94:	69e8      	ldr	r0, [r5, #28]
   1ee96:	4669      	mov	r1, sp
   1ee98:	6803      	ldr	r3, [r0, #0]
   1ee9a:	685b      	ldr	r3, [r3, #4]
   1ee9c:	4798      	blx	r3
   1ee9e:	3001      	adds	r0, #1
   1eea0:	d04e      	beq.n	1ef40 <logobj_event_handler+0xe0>
   1eea2:	4620      	mov	r0, r4
   1eea4:	682b      	ldr	r3, [r5, #0]
   1eea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eeaa:	602b      	str	r3, [r5, #0]
   1eeac:	b005      	add	sp, #20
   1eeae:	bd30      	pop	{r4, r5, pc}
   1eeb0:	f248 0301 	movw	r3, #32769	; 0x8001
   1eeb4:	4299      	cmp	r1, r3
   1eeb6:	d12e      	bne.n	1ef16 <logobj_event_handler+0xb6>
   1eeb8:	68c3      	ldr	r3, [r0, #12]
   1eeba:	2b00      	cmp	r3, #0
   1eebc:	d135      	bne.n	1ef2a <logobj_event_handler+0xca>
   1eebe:	6828      	ldr	r0, [r5, #0]
   1eec0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1eec4:	d03e      	beq.n	1ef44 <logobj_event_handler+0xe4>
   1eec6:	682b      	ldr	r3, [r5, #0]
   1eec8:	b29b      	uxth	r3, r3
   1eeca:	2b01      	cmp	r3, #1
   1eecc:	d105      	bne.n	1eeda <logobj_event_handler+0x7a>
   1eece:	682b      	ldr	r3, [r5, #0]
   1eed0:	0c1b      	lsrs	r3, r3, #16
   1eed2:	041b      	lsls	r3, r3, #16
   1eed4:	f043 0302 	orr.w	r3, r3, #2
   1eed8:	602b      	str	r3, [r5, #0]
   1eeda:	4b1e      	ldr	r3, [pc, #120]	; (1ef54 <logobj_event_handler+0xf4>)
   1eedc:	781a      	ldrb	r2, [r3, #0]
   1eede:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1eee2:	2a00      	cmp	r2, #0
   1eee4:	d031      	beq.n	1ef4a <logobj_event_handler+0xea>
   1eee6:	4a1c      	ldr	r2, [pc, #112]	; (1ef58 <logobj_event_handler+0xf8>)
   1eee8:	7811      	ldrb	r1, [r2, #0]
   1eeea:	b909      	cbnz	r1, 1eef0 <logobj_event_handler+0x90>
   1eeec:	2101      	movs	r1, #1
   1eeee:	7011      	strb	r1, [r2, #0]
   1eef0:	2000      	movs	r0, #0
   1eef2:	7018      	strb	r0, [r3, #0]
   1eef4:	682b      	ldr	r3, [r5, #0]
   1eef6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1eefa:	602b      	str	r3, [r5, #0]
   1eefc:	682b      	ldr	r3, [r5, #0]
   1eefe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1ef02:	602b      	str	r3, [r5, #0]
   1ef04:	e7d2      	b.n	1eeac <logobj_event_handler+0x4c>
   1ef06:	6800      	ldr	r0, [r0, #0]
   1ef08:	2800      	cmp	r0, #0
   1ef0a:	d0cf      	beq.n	1eeac <logobj_event_handler+0x4c>
   1ef0c:	f004 ff1e 	bl	23d4c <rpc_logobj_client_data_free>
   1ef10:	4628      	mov	r0, r5
   1ef12:	b005      	add	sp, #20
   1ef14:	bd30      	pop	{r4, r5, pc}
   1ef16:	2000      	movs	r0, #0
   1ef18:	b005      	add	sp, #20
   1ef1a:	bd30      	pop	{r4, r5, pc}
   1ef1c:	682b      	ldr	r3, [r5, #0]
   1ef1e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1ef22:	d00b      	beq.n	1ef3c <logobj_event_handler+0xdc>
   1ef24:	68c0      	ldr	r0, [r0, #12]
   1ef26:	2800      	cmp	r0, #0
   1ef28:	d0e4      	beq.n	1eef4 <logobj_event_handler+0x94>
   1ef2a:	230e      	movs	r3, #14
   1ef2c:	2000      	movs	r0, #0
   1ef2e:	606b      	str	r3, [r5, #4]
   1ef30:	b005      	add	sp, #20
   1ef32:	bd30      	pop	{r4, r5, pc}
   1ef34:	68c3      	ldr	r3, [r0, #12]
   1ef36:	2b01      	cmp	r3, #1
   1ef38:	d1a5      	bne.n	1ee86 <logobj_event_handler+0x26>
   1ef3a:	e7f6      	b.n	1ef2a <logobj_event_handler+0xca>
   1ef3c:	4618      	mov	r0, r3
   1ef3e:	e7b5      	b.n	1eeac <logobj_event_handler+0x4c>
   1ef40:	2002      	movs	r0, #2
   1ef42:	e7b3      	b.n	1eeac <logobj_event_handler+0x4c>
   1ef44:	230e      	movs	r3, #14
   1ef46:	606b      	str	r3, [r5, #4]
   1ef48:	e7b0      	b.n	1eeac <logobj_event_handler+0x4c>
   1ef4a:	4a03      	ldr	r2, [pc, #12]	; (1ef58 <logobj_event_handler+0xf8>)
   1ef4c:	7011      	strb	r1, [r2, #0]
   1ef4e:	e7cf      	b.n	1eef0 <logobj_event_handler+0x90>
   1ef50:	20022400 	.word	0x20022400
   1ef54:	20028f79 	.word	0x20028f79
   1ef58:	20028f7a 	.word	0x20028f7a

0001ef5c <logobj_interface_init>:
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	b510      	push	{r4, lr}
   1ef60:	4808      	ldr	r0, [pc, #32]	; (1ef84 <logobj_interface_init+0x28>)
   1ef62:	4c09      	ldr	r4, [pc, #36]	; (1ef88 <logobj_interface_init+0x2c>)
   1ef64:	4909      	ldr	r1, [pc, #36]	; (1ef8c <logobj_interface_init+0x30>)
   1ef66:	4a0a      	ldr	r2, [pc, #40]	; (1ef90 <logobj_interface_init+0x34>)
   1ef68:	7023      	strb	r3, [r4, #0]
   1ef6a:	6003      	str	r3, [r0, #0]
   1ef6c:	700b      	strb	r3, [r1, #0]
   1ef6e:	6013      	str	r3, [r2, #0]
   1ef70:	f004 feb0 	bl	23cd4 <rpc_logobj_client_init>
   1ef74:	b918      	cbnz	r0, 1ef7e <logobj_interface_init+0x22>
   1ef76:	2201      	movs	r2, #1
   1ef78:	4b06      	ldr	r3, [pc, #24]	; (1ef94 <logobj_interface_init+0x38>)
   1ef7a:	701a      	strb	r2, [r3, #0]
   1ef7c:	bd10      	pop	{r4, pc}
   1ef7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ef82:	bd10      	pop	{r4, pc}
   1ef84:	20022400 	.word	0x20022400
   1ef88:	20028f7a 	.word	0x20028f7a
   1ef8c:	20028f79 	.word	0x20028f79
   1ef90:	200223fc 	.word	0x200223fc
   1ef94:	20028f7b 	.word	0x20028f7b

0001ef98 <logobj_interface_open>:
   1ef98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ef9c:	2400      	movs	r4, #0
   1ef9e:	4b5b      	ldr	r3, [pc, #364]	; (1f10c <logobj_interface_open+0x174>)
   1efa0:	b084      	sub	sp, #16
   1efa2:	781b      	ldrb	r3, [r3, #0]
   1efa4:	9401      	str	r4, [sp, #4]
   1efa6:	2b00      	cmp	r3, #0
   1efa8:	f000 809f 	beq.w	1f0ea <logobj_interface_open+0x152>
   1efac:	2866      	cmp	r0, #102	; 0x66
   1efae:	4680      	mov	r8, r0
   1efb0:	f040 808f 	bne.w	1f0d2 <logobj_interface_open+0x13a>
   1efb4:	2902      	cmp	r1, #2
   1efb6:	4689      	mov	r9, r1
   1efb8:	f040 808b 	bne.w	1f0d2 <logobj_interface_open+0x13a>
   1efbc:	f240 2305 	movw	r3, #517	; 0x205
   1efc0:	429a      	cmp	r2, r3
   1efc2:	4692      	mov	sl, r2
   1efc4:	f040 8085 	bne.w	1f0d2 <logobj_interface_open+0x13a>
   1efc8:	4f51      	ldr	r7, [pc, #324]	; (1f110 <logobj_interface_open+0x178>)
   1efca:	683d      	ldr	r5, [r7, #0]
   1efcc:	2d00      	cmp	r5, #0
   1efce:	f040 8086 	bne.w	1f0de <logobj_interface_open+0x146>
   1efd2:	4a50      	ldr	r2, [pc, #320]	; (1f114 <logobj_interface_open+0x17c>)
   1efd4:	a801      	add	r0, sp, #4
   1efd6:	f007 ff97 	bl	26f08 <interface_socket_allocate>
   1efda:	9b01      	ldr	r3, [sp, #4]
   1efdc:	4606      	mov	r6, r0
   1efde:	2b00      	cmp	r3, #0
   1efe0:	f000 808d 	beq.w	1f0fe <logobj_interface_open+0x166>
   1efe4:	4629      	mov	r1, r5
   1efe6:	2204      	movs	r2, #4
   1efe8:	484b      	ldr	r0, [pc, #300]	; (1f118 <logobj_interface_open+0x180>)
   1efea:	603b      	str	r3, [r7, #0]
   1efec:	f015 fd52 	bl	34a94 <memset>
   1eff0:	9c01      	ldr	r4, [sp, #4]
   1eff2:	4629      	mov	r1, r5
   1eff4:	e9c4 8903 	strd	r8, r9, [r4, #12]
   1eff8:	f8c4 a014 	str.w	sl, [r4, #20]
   1effc:	a802      	add	r0, sp, #8
   1effe:	f004 fe6f 	bl	23ce0 <rpc_logobj_client_request_alloc>
   1f002:	2800      	cmp	r0, #0
   1f004:	d142      	bne.n	1f08c <logobj_interface_open+0xf4>
   1f006:	2201      	movs	r2, #1
   1f008:	2104      	movs	r1, #4
   1f00a:	9b02      	ldr	r3, [sp, #8]
   1f00c:	4d43      	ldr	r5, [pc, #268]	; (1f11c <logobj_interface_open+0x184>)
   1f00e:	7358      	strb	r0, [r3, #13]
   1f010:	7398      	strb	r0, [r3, #14]
   1f012:	73d8      	strb	r0, [r3, #15]
   1f014:	7258      	strb	r0, [r3, #9]
   1f016:	7298      	strb	r0, [r3, #10]
   1f018:	72d8      	strb	r0, [r3, #11]
   1f01a:	7219      	strb	r1, [r3, #8]
   1f01c:	702a      	strb	r2, [r5, #0]
   1f01e:	731a      	strb	r2, [r3, #12]
   1f020:	6822      	ldr	r2, [r4, #0]
   1f022:	4618      	mov	r0, r3
   1f024:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1f028:	6022      	str	r2, [r4, #0]
   1f02a:	f247 0101 	movw	r1, #28673	; 0x7001
   1f02e:	f004 fe6f 	bl	23d10 <rpc_logobj_client_request_send>
   1f032:	bb68      	cbnz	r0, 1f090 <logobj_interface_open+0xf8>
   1f034:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f036:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f03a:	2900      	cmp	r1, #0
   1f03c:	bf08      	it	eq
   1f03e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1f042:	ab04      	add	r3, sp, #16
   1f044:	f843 1d04 	str.w	r1, [r3, #-4]!
   1f048:	4630      	mov	r0, r6
   1f04a:	4611      	mov	r1, r2
   1f04c:	f008 f80e 	bl	2706c <interface_socket_wait>
   1f050:	4604      	mov	r4, r0
   1f052:	b310      	cbz	r0, 1f09a <logobj_interface_open+0x102>
   1f054:	9a01      	ldr	r2, [sp, #4]
   1f056:	2e00      	cmp	r6, #0
   1f058:	6813      	ldr	r3, [r2, #0]
   1f05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f05e:	6013      	str	r3, [r2, #0]
   1f060:	9a01      	ldr	r2, [sp, #4]
   1f062:	6813      	ldr	r3, [r2, #0]
   1f064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1f068:	6013      	str	r3, [r2, #0]
   1f06a:	9a01      	ldr	r2, [sp, #4]
   1f06c:	6813      	ldr	r3, [r2, #0]
   1f06e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f072:	6013      	str	r3, [r2, #0]
   1f074:	da3f      	bge.n	1f0f6 <logobj_interface_open+0x15e>
   1f076:	2300      	movs	r3, #0
   1f078:	4620      	mov	r0, r4
   1f07a:	603b      	str	r3, [r7, #0]
   1f07c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f080:	f7fe f9f6 	bl	1d470 <bsd_os_errno_set>
   1f084:	4630      	mov	r0, r6
   1f086:	b004      	add	sp, #16
   1f088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f08c:	240c      	movs	r4, #12
   1f08e:	e7e1      	b.n	1f054 <logobj_interface_open+0xbc>
   1f090:	9802      	ldr	r0, [sp, #8]
   1f092:	f004 fe53 	bl	23d3c <rpc_logobj_client_message_free>
   1f096:	2405      	movs	r4, #5
   1f098:	e7dc      	b.n	1f054 <logobj_interface_open+0xbc>
   1f09a:	4630      	mov	r0, r6
   1f09c:	f008 f85a 	bl	27154 <interface_socket_from_handle_get>
   1f0a0:	b120      	cbz	r0, 1f0ac <logobj_interface_open+0x114>
   1f0a2:	6844      	ldr	r4, [r0, #4]
   1f0a4:	b114      	cbz	r4, 1f0ac <logobj_interface_open+0x114>
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	6043      	str	r3, [r0, #4]
   1f0aa:	e7d3      	b.n	1f054 <logobj_interface_open+0xbc>
   1f0ac:	4630      	mov	r0, r6
   1f0ae:	9a01      	ldr	r2, [sp, #4]
   1f0b0:	6813      	ldr	r3, [r2, #0]
   1f0b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f0b6:	6013      	str	r3, [r2, #0]
   1f0b8:	9a01      	ldr	r2, [sp, #4]
   1f0ba:	6813      	ldr	r3, [r2, #0]
   1f0bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1f0c0:	6013      	str	r3, [r2, #0]
   1f0c2:	9a01      	ldr	r2, [sp, #4]
   1f0c4:	6813      	ldr	r3, [r2, #0]
   1f0c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f0ca:	6013      	str	r3, [r2, #0]
   1f0cc:	b004      	add	sp, #16
   1f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f0d2:	2016      	movs	r0, #22
   1f0d4:	f7fe f9cc 	bl	1d470 <bsd_os_errno_set>
   1f0d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f0dc:	e7d2      	b.n	1f084 <logobj_interface_open+0xec>
   1f0de:	2001      	movs	r0, #1
   1f0e0:	f7fe f9c6 	bl	1d470 <bsd_os_errno_set>
   1f0e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f0e8:	e7cc      	b.n	1f084 <logobj_interface_open+0xec>
   1f0ea:	2070      	movs	r0, #112	; 0x70
   1f0ec:	f7fe f9c0 	bl	1d470 <bsd_os_errno_set>
   1f0f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f0f4:	e7c6      	b.n	1f084 <logobj_interface_open+0xec>
   1f0f6:	4630      	mov	r0, r6
   1f0f8:	f007 ff6a 	bl	26fd0 <interface_socket_free>
   1f0fc:	e7bb      	b.n	1f076 <logobj_interface_open+0xde>
   1f0fe:	2018      	movs	r0, #24
   1f100:	f7fe f9b6 	bl	1d470 <bsd_os_errno_set>
   1f104:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f108:	e7bc      	b.n	1f084 <logobj_interface_open+0xec>
   1f10a:	bf00      	nop
   1f10c:	20028f7b 	.word	0x20028f7b
   1f110:	20022400 	.word	0x20022400
   1f114:	0001ee49 	.word	0x0001ee49
   1f118:	200223fc 	.word	0x200223fc
   1f11c:	20028f79 	.word	0x20028f79

0001f120 <logobj_interface_read>:
   1f120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f124:	b087      	sub	sp, #28
   1f126:	2900      	cmp	r1, #0
   1f128:	d06b      	beq.n	1f202 <logobj_interface_read+0xe2>
   1f12a:	2a00      	cmp	r2, #0
   1f12c:	4617      	mov	r7, r2
   1f12e:	dd68      	ble.n	1f202 <logobj_interface_read+0xe2>
   1f130:	461d      	mov	r5, r3
   1f132:	4680      	mov	r8, r0
   1f134:	460e      	mov	r6, r1
   1f136:	f008 f80d 	bl	27154 <interface_socket_from_handle_get>
   1f13a:	4604      	mov	r4, r0
   1f13c:	2800      	cmp	r0, #0
   1f13e:	d066      	beq.n	1f20e <logobj_interface_read+0xee>
   1f140:	bb4d      	cbnz	r5, 1f196 <logobj_interface_read+0x76>
   1f142:	69e0      	ldr	r0, [r4, #28]
   1f144:	07aa      	lsls	r2, r5, #30
   1f146:	6803      	ldr	r3, [r0, #0]
   1f148:	68db      	ldr	r3, [r3, #12]
   1f14a:	d52d      	bpl.n	1f1a8 <logobj_interface_read+0x88>
   1f14c:	4798      	blx	r3
   1f14e:	3001      	adds	r0, #1
   1f150:	d047      	beq.n	1f1e2 <logobj_interface_read+0xc2>
   1f152:	6823      	ldr	r3, [r4, #0]
   1f154:	69e0      	ldr	r0, [r4, #28]
   1f156:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   1f15a:	d044      	beq.n	1f1e6 <logobj_interface_read+0xc6>
   1f15c:	2100      	movs	r1, #0
   1f15e:	6823      	ldr	r3, [r4, #0]
   1f160:	462a      	mov	r2, r5
   1f162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1f166:	6023      	str	r3, [r4, #0]
   1f168:	e9cd 1104 	strd	r1, r1, [sp, #16]
   1f16c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1f170:	6803      	ldr	r3, [r0, #0]
   1f172:	a902      	add	r1, sp, #8
   1f174:	689b      	ldr	r3, [r3, #8]
   1f176:	4798      	blx	r3
   1f178:	4605      	mov	r5, r0
   1f17a:	69e0      	ldr	r0, [r4, #28]
   1f17c:	6803      	ldr	r3, [r0, #0]
   1f17e:	68db      	ldr	r3, [r3, #12]
   1f180:	4798      	blx	r3
   1f182:	3001      	adds	r0, #1
   1f184:	d003      	beq.n	1f18e <logobj_interface_read+0x6e>
   1f186:	6823      	ldr	r3, [r4, #0]
   1f188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f18c:	6023      	str	r3, [r4, #0]
   1f18e:	4628      	mov	r0, r5
   1f190:	b007      	add	sp, #28
   1f192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f196:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   1f19a:	d1d2      	bne.n	1f142 <logobj_interface_read+0x22>
   1f19c:	202d      	movs	r0, #45	; 0x2d
   1f19e:	f7fe f967 	bl	1d470 <bsd_os_errno_set>
   1f1a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f1a6:	e7f2      	b.n	1f18e <logobj_interface_read+0x6e>
   1f1a8:	6822      	ldr	r2, [r4, #0]
   1f1aa:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   1f1ae:	d1cd      	bne.n	1f14c <logobj_interface_read+0x2c>
   1f1b0:	4798      	blx	r3
   1f1b2:	1c43      	adds	r3, r0, #1
   1f1b4:	d1cd      	bne.n	1f152 <logobj_interface_read+0x32>
   1f1b6:	6a22      	ldr	r2, [r4, #32]
   1f1b8:	ab06      	add	r3, sp, #24
   1f1ba:	2a00      	cmp	r2, #0
   1f1bc:	bf18      	it	ne
   1f1be:	4610      	movne	r0, r2
   1f1c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f1c4:	f843 0d14 	str.w	r0, [r3, #-20]!
   1f1c8:	4611      	mov	r1, r2
   1f1ca:	4640      	mov	r0, r8
   1f1cc:	f007 ff4e 	bl	2706c <interface_socket_wait>
   1f1d0:	b158      	cbz	r0, 1f1ea <logobj_interface_read+0xca>
   1f1d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f1d6:	f7fe f94b 	bl	1d470 <bsd_os_errno_set>
   1f1da:	4628      	mov	r0, r5
   1f1dc:	b007      	add	sp, #28
   1f1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f1e2:	2023      	movs	r0, #35	; 0x23
   1f1e4:	e7f5      	b.n	1f1d2 <logobj_interface_read+0xb2>
   1f1e6:	461d      	mov	r5, r3
   1f1e8:	e7c8      	b.n	1f17c <logobj_interface_read+0x5c>
   1f1ea:	4640      	mov	r0, r8
   1f1ec:	f007 ffb2 	bl	27154 <interface_socket_from_handle_get>
   1f1f0:	4603      	mov	r3, r0
   1f1f2:	2800      	cmp	r0, #0
   1f1f4:	d0ad      	beq.n	1f152 <logobj_interface_read+0x32>
   1f1f6:	6840      	ldr	r0, [r0, #4]
   1f1f8:	2800      	cmp	r0, #0
   1f1fa:	d0aa      	beq.n	1f152 <logobj_interface_read+0x32>
   1f1fc:	f8c3 9004 	str.w	r9, [r3, #4]
   1f200:	e7e7      	b.n	1f1d2 <logobj_interface_read+0xb2>
   1f202:	2016      	movs	r0, #22
   1f204:	f7fe f934 	bl	1d470 <bsd_os_errno_set>
   1f208:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f20c:	e7bf      	b.n	1f18e <logobj_interface_read+0x6e>
   1f20e:	2009      	movs	r0, #9
   1f210:	f7fe f92e 	bl	1d470 <bsd_os_errno_set>
   1f214:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f218:	e7b9      	b.n	1f18e <logobj_interface_read+0x6e>
   1f21a:	bf00      	nop

0001f21c <logobj_interface_write>:
   1f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f220:	b082      	sub	sp, #8
   1f222:	2900      	cmp	r1, #0
   1f224:	d06b      	beq.n	1f2fe <logobj_interface_write+0xe2>
   1f226:	2a04      	cmp	r2, #4
   1f228:	d169      	bne.n	1f2fe <logobj_interface_write+0xe2>
   1f22a:	461f      	mov	r7, r3
   1f22c:	4606      	mov	r6, r0
   1f22e:	460d      	mov	r5, r1
   1f230:	f007 ff90 	bl	27154 <interface_socket_from_handle_get>
   1f234:	4604      	mov	r4, r0
   1f236:	2800      	cmp	r0, #0
   1f238:	d074      	beq.n	1f324 <logobj_interface_write+0x108>
   1f23a:	b1e7      	cbz	r7, 1f276 <logobj_interface_write+0x5a>
   1f23c:	07b8      	lsls	r0, r7, #30
   1f23e:	d56b      	bpl.n	1f318 <logobj_interface_write+0xfc>
   1f240:	6823      	ldr	r3, [r4, #0]
   1f242:	039b      	lsls	r3, r3, #14
   1f244:	d564      	bpl.n	1f310 <logobj_interface_write+0xf4>
   1f246:	2700      	movs	r7, #0
   1f248:	6823      	ldr	r3, [r4, #0]
   1f24a:	2100      	movs	r1, #0
   1f24c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1f250:	6023      	str	r3, [r4, #0]
   1f252:	4668      	mov	r0, sp
   1f254:	f8d5 8000 	ldr.w	r8, [r5]
   1f258:	f004 fd42 	bl	23ce0 <rpc_logobj_client_request_alloc>
   1f25c:	b198      	cbz	r0, 1f286 <logobj_interface_write+0x6a>
   1f25e:	200c      	movs	r0, #12
   1f260:	6823      	ldr	r3, [r4, #0]
   1f262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f266:	6023      	str	r3, [r4, #0]
   1f268:	f7fe f902 	bl	1d470 <bsd_os_errno_set>
   1f26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f270:	b002      	add	sp, #8
   1f272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f276:	6803      	ldr	r3, [r0, #0]
   1f278:	00d9      	lsls	r1, r3, #3
   1f27a:	d4e1      	bmi.n	1f240 <logobj_interface_write+0x24>
   1f27c:	6803      	ldr	r3, [r0, #0]
   1f27e:	039a      	lsls	r2, r3, #14
   1f280:	d548      	bpl.n	1f314 <logobj_interface_write+0xf8>
   1f282:	2701      	movs	r7, #1
   1f284:	e7e0      	b.n	1f248 <logobj_interface_write+0x2c>
   1f286:	2504      	movs	r5, #4
   1f288:	9b00      	ldr	r3, [sp, #0]
   1f28a:	f247 0103 	movw	r1, #28675	; 0x7003
   1f28e:	f8c3 800c 	str.w	r8, [r3, #12]
   1f292:	7258      	strb	r0, [r3, #9]
   1f294:	7298      	strb	r0, [r3, #10]
   1f296:	72d8      	strb	r0, [r3, #11]
   1f298:	721d      	strb	r5, [r3, #8]
   1f29a:	4618      	mov	r0, r3
   1f29c:	f004 fd38 	bl	23d10 <rpc_logobj_client_request_send>
   1f2a0:	4680      	mov	r8, r0
   1f2a2:	bb18      	cbnz	r0, 1f2ec <logobj_interface_write+0xd0>
   1f2a4:	b1d7      	cbz	r7, 1f2dc <logobj_interface_write+0xc0>
   1f2a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f2a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f2ac:	2900      	cmp	r1, #0
   1f2ae:	bf08      	it	eq
   1f2b0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1f2b4:	ab02      	add	r3, sp, #8
   1f2b6:	f843 1d04 	str.w	r1, [r3, #-4]!
   1f2ba:	4630      	mov	r0, r6
   1f2bc:	4611      	mov	r1, r2
   1f2be:	f007 fed5 	bl	2706c <interface_socket_wait>
   1f2c2:	b120      	cbz	r0, 1f2ce <logobj_interface_write+0xb2>
   1f2c4:	6823      	ldr	r3, [r4, #0]
   1f2c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f2ca:	6023      	str	r3, [r4, #0]
   1f2cc:	e7cc      	b.n	1f268 <logobj_interface_write+0x4c>
   1f2ce:	4630      	mov	r0, r6
   1f2d0:	f007 ff40 	bl	27154 <interface_socket_from_handle_get>
   1f2d4:	4603      	mov	r3, r0
   1f2d6:	b108      	cbz	r0, 1f2dc <logobj_interface_write+0xc0>
   1f2d8:	6840      	ldr	r0, [r0, #4]
   1f2da:	b9b0      	cbnz	r0, 1f30a <logobj_interface_write+0xee>
   1f2dc:	4628      	mov	r0, r5
   1f2de:	6823      	ldr	r3, [r4, #0]
   1f2e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f2e4:	6023      	str	r3, [r4, #0]
   1f2e6:	b002      	add	sp, #8
   1f2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2ec:	9800      	ldr	r0, [sp, #0]
   1f2ee:	f004 fd25 	bl	23d3c <rpc_logobj_client_message_free>
   1f2f2:	6823      	ldr	r3, [r4, #0]
   1f2f4:	2005      	movs	r0, #5
   1f2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f2fa:	6023      	str	r3, [r4, #0]
   1f2fc:	e7b4      	b.n	1f268 <logobj_interface_write+0x4c>
   1f2fe:	2016      	movs	r0, #22
   1f300:	f7fe f8b6 	bl	1d470 <bsd_os_errno_set>
   1f304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f308:	e7b2      	b.n	1f270 <logobj_interface_write+0x54>
   1f30a:	f8c3 8004 	str.w	r8, [r3, #4]
   1f30e:	e7d9      	b.n	1f2c4 <logobj_interface_write+0xa8>
   1f310:	2073      	movs	r0, #115	; 0x73
   1f312:	e7a9      	b.n	1f268 <logobj_interface_write+0x4c>
   1f314:	2009      	movs	r0, #9
   1f316:	e7a7      	b.n	1f268 <logobj_interface_write+0x4c>
   1f318:	202d      	movs	r0, #45	; 0x2d
   1f31a:	f7fe f8a9 	bl	1d470 <bsd_os_errno_set>
   1f31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f322:	e7a5      	b.n	1f270 <logobj_interface_write+0x54>
   1f324:	2009      	movs	r0, #9
   1f326:	f7fe f8a3 	bl	1d470 <bsd_os_errno_set>
   1f32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f32e:	e79f      	b.n	1f270 <logobj_interface_write+0x54>

0001f330 <logobj_interface_setopt>:
   1f330:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f332:	2901      	cmp	r1, #1
   1f334:	b085      	sub	sp, #20
   1f336:	d06d      	beq.n	1f414 <logobj_interface_setopt+0xe4>
   1f338:	461e      	mov	r6, r3
   1f33a:	f240 2305 	movw	r3, #517	; 0x205
   1f33e:	4299      	cmp	r1, r3
   1f340:	f040 80a0 	bne.w	1f484 <logobj_interface_setopt+0x154>
   1f344:	4607      	mov	r7, r0
   1f346:	4615      	mov	r5, r2
   1f348:	f007 ff04 	bl	27154 <interface_socket_from_handle_get>
   1f34c:	4604      	mov	r4, r0
   1f34e:	2800      	cmp	r0, #0
   1f350:	f000 80c3 	beq.w	1f4da <logobj_interface_setopt+0x1aa>
   1f354:	2d01      	cmp	r5, #1
   1f356:	d019      	beq.n	1f38c <logobj_interface_setopt+0x5c>
   1f358:	2d02      	cmp	r5, #2
   1f35a:	d010      	beq.n	1f37e <logobj_interface_setopt+0x4e>
   1f35c:	252a      	movs	r5, #42	; 0x2a
   1f35e:	6803      	ldr	r3, [r0, #0]
   1f360:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1f364:	6023      	str	r3, [r4, #0]
   1f366:	6823      	ldr	r3, [r4, #0]
   1f368:	4628      	mov	r0, r5
   1f36a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f36e:	6023      	str	r3, [r4, #0]
   1f370:	f7fe f87e 	bl	1d470 <bsd_os_errno_set>
   1f374:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f378:	4628      	mov	r0, r5
   1f37a:	b005      	add	sp, #20
   1f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f37e:	b116      	cbz	r6, 1f386 <logobj_interface_setopt+0x56>
   1f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f382:	2b01      	cmp	r3, #1
   1f384:	d04e      	beq.n	1f424 <logobj_interface_setopt+0xf4>
   1f386:	6823      	ldr	r3, [r4, #0]
   1f388:	2516      	movs	r5, #22
   1f38a:	e7e9      	b.n	1f360 <logobj_interface_setopt+0x30>
   1f38c:	2e00      	cmp	r6, #0
   1f38e:	d0fa      	beq.n	1f386 <logobj_interface_setopt+0x56>
   1f390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f392:	2b04      	cmp	r3, #4
   1f394:	d1f7      	bne.n	1f386 <logobj_interface_setopt+0x56>
   1f396:	2100      	movs	r1, #0
   1f398:	a803      	add	r0, sp, #12
   1f39a:	f004 fca1 	bl	23ce0 <rpc_logobj_client_request_alloc>
   1f39e:	4605      	mov	r5, r0
   1f3a0:	2800      	cmp	r0, #0
   1f3a2:	d175      	bne.n	1f490 <logobj_interface_setopt+0x160>
   1f3a4:	9803      	ldr	r0, [sp, #12]
   1f3a6:	2208      	movs	r2, #8
   1f3a8:	4629      	mov	r1, r5
   1f3aa:	300c      	adds	r0, #12
   1f3ac:	f015 fb72 	bl	34a94 <memset>
   1f3b0:	9803      	ldr	r0, [sp, #12]
   1f3b2:	4631      	mov	r1, r6
   1f3b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f3b6:	300c      	adds	r0, #12
   1f3b8:	f015 fb32 	bl	34a20 <memcpy>
   1f3bc:	2308      	movs	r3, #8
   1f3be:	9803      	ldr	r0, [sp, #12]
   1f3c0:	f247 0102 	movw	r1, #28674	; 0x7002
   1f3c4:	7203      	strb	r3, [r0, #8]
   1f3c6:	7245      	strb	r5, [r0, #9]
   1f3c8:	7285      	strb	r5, [r0, #10]
   1f3ca:	72c5      	strb	r5, [r0, #11]
   1f3cc:	6823      	ldr	r3, [r4, #0]
   1f3ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1f3d2:	6023      	str	r3, [r4, #0]
   1f3d4:	f004 fc9c 	bl	23d10 <rpc_logobj_client_request_send>
   1f3d8:	2800      	cmp	r0, #0
   1f3da:	d178      	bne.n	1f4ce <logobj_interface_setopt+0x19e>
   1f3dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f3de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f3e2:	2900      	cmp	r1, #0
   1f3e4:	bf08      	it	eq
   1f3e6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1f3ea:	ab04      	add	r3, sp, #16
   1f3ec:	f843 1d08 	str.w	r1, [r3, #-8]!
   1f3f0:	4638      	mov	r0, r7
   1f3f2:	4611      	mov	r1, r2
   1f3f4:	f007 fe3a 	bl	2706c <interface_socket_wait>
   1f3f8:	4605      	mov	r5, r0
   1f3fa:	2800      	cmp	r0, #0
   1f3fc:	d140      	bne.n	1f480 <logobj_interface_setopt+0x150>
   1f3fe:	4638      	mov	r0, r7
   1f400:	f007 fea8 	bl	27154 <interface_socket_from_handle_get>
   1f404:	2800      	cmp	r0, #0
   1f406:	d04e      	beq.n	1f4a6 <logobj_interface_setopt+0x176>
   1f408:	6843      	ldr	r3, [r0, #4]
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d04b      	beq.n	1f4a6 <logobj_interface_setopt+0x176>
   1f40e:	6045      	str	r5, [r0, #4]
   1f410:	461d      	mov	r5, r3
   1f412:	e035      	b.n	1f480 <logobj_interface_setopt+0x150>
   1f414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1f416:	9400      	str	r4, [sp, #0]
   1f418:	f007 fec4 	bl	271a4 <interface_socket_setopt>
   1f41c:	4605      	mov	r5, r0
   1f41e:	4628      	mov	r0, r5
   1f420:	b005      	add	sp, #20
   1f422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f424:	2100      	movs	r1, #0
   1f426:	a802      	add	r0, sp, #8
   1f428:	7835      	ldrb	r5, [r6, #0]
   1f42a:	f004 fc59 	bl	23ce0 <rpc_logobj_client_request_alloc>
   1f42e:	bb78      	cbnz	r0, 1f490 <logobj_interface_setopt+0x160>
   1f430:	2d01      	cmp	r5, #1
   1f432:	bf08      	it	eq
   1f434:	4b2c      	ldreq	r3, [pc, #176]	; (1f4e8 <logobj_interface_setopt+0x1b8>)
   1f436:	f04f 0204 	mov.w	r2, #4
   1f43a:	bf08      	it	eq
   1f43c:	701d      	strbeq	r5, [r3, #0]
   1f43e:	2300      	movs	r3, #0
   1f440:	9802      	ldr	r0, [sp, #8]
   1f442:	f247 0101 	movw	r1, #28673	; 0x7001
   1f446:	7243      	strb	r3, [r0, #9]
   1f448:	60c5      	str	r5, [r0, #12]
   1f44a:	7283      	strb	r3, [r0, #10]
   1f44c:	72c3      	strb	r3, [r0, #11]
   1f44e:	7202      	strb	r2, [r0, #8]
   1f450:	6823      	ldr	r3, [r4, #0]
   1f452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1f456:	6023      	str	r3, [r4, #0]
   1f458:	f004 fc5a 	bl	23d10 <rpc_logobj_client_request_send>
   1f45c:	4606      	mov	r6, r0
   1f45e:	bb80      	cbnz	r0, 1f4c2 <logobj_interface_setopt+0x192>
   1f460:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f462:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f466:	2900      	cmp	r1, #0
   1f468:	bf08      	it	eq
   1f46a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1f46e:	ab04      	add	r3, sp, #16
   1f470:	f843 1d04 	str.w	r1, [r3, #-4]!
   1f474:	4638      	mov	r0, r7
   1f476:	4611      	mov	r1, r2
   1f478:	f007 fdf8 	bl	2706c <interface_socket_wait>
   1f47c:	4605      	mov	r5, r0
   1f47e:	b150      	cbz	r0, 1f496 <logobj_interface_setopt+0x166>
   1f480:	6823      	ldr	r3, [r4, #0]
   1f482:	e76d      	b.n	1f360 <logobj_interface_setopt+0x30>
   1f484:	202a      	movs	r0, #42	; 0x2a
   1f486:	f7fd fff3 	bl	1d470 <bsd_os_errno_set>
   1f48a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f48e:	e773      	b.n	1f378 <logobj_interface_setopt+0x48>
   1f490:	6823      	ldr	r3, [r4, #0]
   1f492:	250c      	movs	r5, #12
   1f494:	e764      	b.n	1f360 <logobj_interface_setopt+0x30>
   1f496:	4638      	mov	r0, r7
   1f498:	f007 fe5c 	bl	27154 <interface_socket_from_handle_get>
   1f49c:	b140      	cbz	r0, 1f4b0 <logobj_interface_setopt+0x180>
   1f49e:	6845      	ldr	r5, [r0, #4]
   1f4a0:	b135      	cbz	r5, 1f4b0 <logobj_interface_setopt+0x180>
   1f4a2:	6046      	str	r6, [r0, #4]
   1f4a4:	e7ec      	b.n	1f480 <logobj_interface_setopt+0x150>
   1f4a6:	4631      	mov	r1, r6
   1f4a8:	2204      	movs	r2, #4
   1f4aa:	4810      	ldr	r0, [pc, #64]	; (1f4ec <logobj_interface_setopt+0x1bc>)
   1f4ac:	f015 fab8 	bl	34a20 <memcpy>
   1f4b0:	6823      	ldr	r3, [r4, #0]
   1f4b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1f4b6:	6023      	str	r3, [r4, #0]
   1f4b8:	6823      	ldr	r3, [r4, #0]
   1f4ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f4be:	6023      	str	r3, [r4, #0]
   1f4c0:	e75a      	b.n	1f378 <logobj_interface_setopt+0x48>
   1f4c2:	9802      	ldr	r0, [sp, #8]
   1f4c4:	f004 fc3a 	bl	23d3c <rpc_logobj_client_message_free>
   1f4c8:	2505      	movs	r5, #5
   1f4ca:	6823      	ldr	r3, [r4, #0]
   1f4cc:	e748      	b.n	1f360 <logobj_interface_setopt+0x30>
   1f4ce:	9803      	ldr	r0, [sp, #12]
   1f4d0:	f004 fc34 	bl	23d3c <rpc_logobj_client_message_free>
   1f4d4:	2505      	movs	r5, #5
   1f4d6:	6823      	ldr	r3, [r4, #0]
   1f4d8:	e742      	b.n	1f360 <logobj_interface_setopt+0x30>
   1f4da:	2009      	movs	r0, #9
   1f4dc:	f7fd ffc8 	bl	1d470 <bsd_os_errno_set>
   1f4e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f4e4:	e748      	b.n	1f378 <logobj_interface_setopt+0x48>
   1f4e6:	bf00      	nop
   1f4e8:	20028f79 	.word	0x20028f79
   1f4ec:	200223fc 	.word	0x200223fc

0001f4f0 <logobj_interface_getopt>:
   1f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4f2:	2901      	cmp	r1, #1
   1f4f4:	b083      	sub	sp, #12
   1f4f6:	9e08      	ldr	r6, [sp, #32]
   1f4f8:	d030      	beq.n	1f55c <logobj_interface_getopt+0x6c>
   1f4fa:	461f      	mov	r7, r3
   1f4fc:	f240 2305 	movw	r3, #517	; 0x205
   1f500:	4299      	cmp	r1, r3
   1f502:	d134      	bne.n	1f56e <logobj_interface_getopt+0x7e>
   1f504:	4615      	mov	r5, r2
   1f506:	f007 fe25 	bl	27154 <interface_socket_from_handle_get>
   1f50a:	2800      	cmp	r0, #0
   1f50c:	d037      	beq.n	1f57e <logobj_interface_getopt+0x8e>
   1f50e:	2d01      	cmp	r5, #1
   1f510:	d015      	beq.n	1f53e <logobj_interface_getopt+0x4e>
   1f512:	2d02      	cmp	r5, #2
   1f514:	d10b      	bne.n	1f52e <logobj_interface_getopt+0x3e>
   1f516:	b387      	cbz	r7, 1f57a <logobj_interface_getopt+0x8a>
   1f518:	6833      	ldr	r3, [r6, #0]
   1f51a:	b373      	cbz	r3, 1f57a <logobj_interface_getopt+0x8a>
   1f51c:	2300      	movs	r3, #0
   1f51e:	2201      	movs	r2, #1
   1f520:	4618      	mov	r0, r3
   1f522:	491a      	ldr	r1, [pc, #104]	; (1f58c <logobj_interface_getopt+0x9c>)
   1f524:	7809      	ldrb	r1, [r1, #0]
   1f526:	7039      	strb	r1, [r7, #0]
   1f528:	6032      	str	r2, [r6, #0]
   1f52a:	b003      	add	sp, #12
   1f52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f52e:	2009      	movs	r0, #9
   1f530:	f7fd ff9e 	bl	1d470 <bsd_os_errno_set>
   1f534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f538:	4618      	mov	r0, r3
   1f53a:	b003      	add	sp, #12
   1f53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f53e:	b1e7      	cbz	r7, 1f57a <logobj_interface_getopt+0x8a>
   1f540:	6833      	ldr	r3, [r6, #0]
   1f542:	2b03      	cmp	r3, #3
   1f544:	d919      	bls.n	1f57a <logobj_interface_getopt+0x8a>
   1f546:	4638      	mov	r0, r7
   1f548:	2204      	movs	r2, #4
   1f54a:	4911      	ldr	r1, [pc, #68]	; (1f590 <logobj_interface_getopt+0xa0>)
   1f54c:	f015 fa68 	bl	34a20 <memcpy>
   1f550:	2300      	movs	r3, #0
   1f552:	2204      	movs	r2, #4
   1f554:	4618      	mov	r0, r3
   1f556:	6032      	str	r2, [r6, #0]
   1f558:	b003      	add	sp, #12
   1f55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f55c:	9600      	str	r6, [sp, #0]
   1f55e:	f007 fe67 	bl	27230 <interface_socket_getopt>
   1f562:	4603      	mov	r3, r0
   1f564:	2800      	cmp	r0, #0
   1f566:	d1e3      	bne.n	1f530 <logobj_interface_getopt+0x40>
   1f568:	4618      	mov	r0, r3
   1f56a:	b003      	add	sp, #12
   1f56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f56e:	202a      	movs	r0, #42	; 0x2a
   1f570:	f7fd ff7e 	bl	1d470 <bsd_os_errno_set>
   1f574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f578:	e7de      	b.n	1f538 <logobj_interface_getopt+0x48>
   1f57a:	2016      	movs	r0, #22
   1f57c:	e7d8      	b.n	1f530 <logobj_interface_getopt+0x40>
   1f57e:	2009      	movs	r0, #9
   1f580:	f7fd ff76 	bl	1d470 <bsd_os_errno_set>
   1f584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f588:	e7d6      	b.n	1f538 <logobj_interface_getopt+0x48>
   1f58a:	bf00      	nop
   1f58c:	20028f7a 	.word	0x20028f7a
   1f590:	200223fc 	.word	0x200223fc

0001f594 <logobj_interface_close>:
   1f594:	b510      	push	{r4, lr}
   1f596:	4604      	mov	r4, r0
   1f598:	f007 fddc 	bl	27154 <interface_socket_from_handle_get>
   1f59c:	b138      	cbz	r0, 1f5ae <logobj_interface_close+0x1a>
   1f59e:	4620      	mov	r0, r4
   1f5a0:	f007 fd16 	bl	26fd0 <interface_socket_free>
   1f5a4:	2300      	movs	r3, #0
   1f5a6:	4a05      	ldr	r2, [pc, #20]	; (1f5bc <logobj_interface_close+0x28>)
   1f5a8:	4618      	mov	r0, r3
   1f5aa:	6013      	str	r3, [r2, #0]
   1f5ac:	bd10      	pop	{r4, pc}
   1f5ae:	2009      	movs	r0, #9
   1f5b0:	f7fd ff5e 	bl	1d470 <bsd_os_errno_set>
   1f5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f5b8:	bd10      	pop	{r4, pc}
   1f5ba:	bf00      	nop
   1f5bc:	20022400 	.word	0x20022400

0001f5c0 <rpc_transport_send>:
   1f5c0:	f000 bece 	b.w	20360 <rpc_transport_ipc_send>

0001f5c4 <rpc_transport_rpc_alloc>:
   1f5c4:	f000 bf4e 	b.w	20464 <rpc_transport_ipc_tx_rpc_data_alloc>

0001f5c8 <rpc_transport_data_alloc>:
   1f5c8:	f000 bfb4 	b.w	20534 <rpc_transport_ipc_tx_data_alloc>

0001f5cc <rpc_transport_rpc_free>:
   1f5cc:	f000 bdac 	b.w	20128 <rpc_transport_ipc_msg_free>

0001f5d0 <rpc_transport_data_free>:
   1f5d0:	f000 ba64 	b.w	1fa9c <rpc_transport_ipc_data_free>

0001f5d4 <ipc_trace_init>:
   1f5d4:	4b01      	ldr	r3, [pc, #4]	; (1f5dc <ipc_trace_init+0x8>)
   1f5d6:	6018      	str	r0, [r3, #0]
   1f5d8:	4770      	bx	lr
   1f5da:	bf00      	nop
   1f5dc:	20022410 	.word	0x20022410

0001f5e0 <bsd_os_trace_irq_handler>:
   1f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5e2:	4b6e      	ldr	r3, [pc, #440]	; (1f79c <bsd_os_trace_irq_handler+0x1bc>)
   1f5e4:	b083      	sub	sp, #12
   1f5e6:	781b      	ldrb	r3, [r3, #0]
   1f5e8:	2b00      	cmp	r3, #0
   1f5ea:	f000 80d3 	beq.w	1f794 <bsd_os_trace_irq_handler+0x1b4>
   1f5ee:	4b6c      	ldr	r3, [pc, #432]	; (1f7a0 <__kernel_ram_size>)
   1f5f0:	681c      	ldr	r4, [r3, #0]
   1f5f2:	b124      	cbz	r4, 1f5fe <bsd_os_trace_irq_handler+0x1e>
   1f5f4:	68a3      	ldr	r3, [r4, #8]
   1f5f6:	6862      	ldr	r2, [r4, #4]
   1f5f8:	4293      	cmp	r3, r2
   1f5fa:	f040 808c 	bne.w	1f716 <bsd_os_trace_irq_handler+0x136>
   1f5fe:	4b69      	ldr	r3, [pc, #420]	; (1f7a4 <__kernel_ram_size+0x4>)
   1f600:	681c      	ldr	r4, [r3, #0]
   1f602:	b11c      	cbz	r4, 1f60c <bsd_os_trace_irq_handler+0x2c>
   1f604:	68a3      	ldr	r3, [r4, #8]
   1f606:	6862      	ldr	r2, [r4, #4]
   1f608:	4293      	cmp	r3, r2
   1f60a:	d146      	bne.n	1f69a <bsd_os_trace_irq_handler+0xba>
   1f60c:	4b66      	ldr	r3, [pc, #408]	; (1f7a8 <__kernel_ram_size+0x8>)
   1f60e:	681c      	ldr	r4, [r3, #0]
   1f610:	b11c      	cbz	r4, 1f61a <bsd_os_trace_irq_handler+0x3a>
   1f612:	68a3      	ldr	r3, [r4, #8]
   1f614:	6862      	ldr	r2, [r4, #4]
   1f616:	4293      	cmp	r3, r2
   1f618:	d101      	bne.n	1f61e <bsd_os_trace_irq_handler+0x3e>
   1f61a:	b003      	add	sp, #12
   1f61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f61e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f622:	f8ad 2000 	strh.w	r2, [sp]
   1f626:	7822      	ldrb	r2, [r4, #0]
   1f628:	466e      	mov	r6, sp
   1f62a:	f88d 2004 	strb.w	r2, [sp, #4]
   1f62e:	6862      	ldr	r2, [r4, #4]
   1f630:	2105      	movs	r1, #5
   1f632:	4293      	cmp	r3, r2
   1f634:	bf2a      	itet	cs
   1f636:	6927      	ldrcs	r7, [r4, #16]
   1f638:	1ad7      	subcc	r7, r2, r3
   1f63a:	1aff      	subcs	r7, r7, r3
   1f63c:	4293      	cmp	r3, r2
   1f63e:	bf94      	ite	ls
   1f640:	2500      	movls	r5, #0
   1f642:	68e5      	ldrhi	r5, [r4, #12]
   1f644:	b2bf      	uxth	r7, r7
   1f646:	bf88      	it	hi
   1f648:	1b52      	subhi	r2, r2, r5
   1f64a:	4630      	mov	r0, r6
   1f64c:	bf88      	it	hi
   1f64e:	b295      	uxthhi	r5, r2
   1f650:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f654:	f014 fab5 	bl	33bc2 <bsd_os_trace_put>
   1f658:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f65c:	68a0      	ldr	r0, [r4, #8]
   1f65e:	f014 fab0 	bl	33bc2 <bsd_os_trace_put>
   1f662:	68a3      	ldr	r3, [r4, #8]
   1f664:	6922      	ldr	r2, [r4, #16]
   1f666:	441f      	add	r7, r3
   1f668:	4297      	cmp	r7, r2
   1f66a:	bf08      	it	eq
   1f66c:	68e3      	ldreq	r3, [r4, #12]
   1f66e:	60a7      	str	r7, [r4, #8]
   1f670:	bf08      	it	eq
   1f672:	60a3      	streq	r3, [r4, #8]
   1f674:	2d00      	cmp	r5, #0
   1f676:	d0d0      	beq.n	1f61a <bsd_os_trace_irq_handler+0x3a>
   1f678:	2105      	movs	r1, #5
   1f67a:	4630      	mov	r0, r6
   1f67c:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f680:	f014 fa9f 	bl	33bc2 <bsd_os_trace_put>
   1f684:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f688:	68e0      	ldr	r0, [r4, #12]
   1f68a:	f014 fa9a 	bl	33bc2 <bsd_os_trace_put>
   1f68e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f692:	68e3      	ldr	r3, [r4, #12]
   1f694:	4413      	add	r3, r2
   1f696:	60a3      	str	r3, [r4, #8]
   1f698:	e7bf      	b.n	1f61a <bsd_os_trace_irq_handler+0x3a>
   1f69a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f69e:	f8ad 2000 	strh.w	r2, [sp]
   1f6a2:	7822      	ldrb	r2, [r4, #0]
   1f6a4:	466e      	mov	r6, sp
   1f6a6:	f88d 2004 	strb.w	r2, [sp, #4]
   1f6aa:	6862      	ldr	r2, [r4, #4]
   1f6ac:	2105      	movs	r1, #5
   1f6ae:	4293      	cmp	r3, r2
   1f6b0:	bf2a      	itet	cs
   1f6b2:	6927      	ldrcs	r7, [r4, #16]
   1f6b4:	1ad7      	subcc	r7, r2, r3
   1f6b6:	1aff      	subcs	r7, r7, r3
   1f6b8:	4293      	cmp	r3, r2
   1f6ba:	bf94      	ite	ls
   1f6bc:	2500      	movls	r5, #0
   1f6be:	68e5      	ldrhi	r5, [r4, #12]
   1f6c0:	b2bf      	uxth	r7, r7
   1f6c2:	bf88      	it	hi
   1f6c4:	1b52      	subhi	r2, r2, r5
   1f6c6:	4630      	mov	r0, r6
   1f6c8:	bf88      	it	hi
   1f6ca:	b295      	uxthhi	r5, r2
   1f6cc:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f6d0:	f014 fa77 	bl	33bc2 <bsd_os_trace_put>
   1f6d4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f6d8:	68a0      	ldr	r0, [r4, #8]
   1f6da:	f014 fa72 	bl	33bc2 <bsd_os_trace_put>
   1f6de:	68a3      	ldr	r3, [r4, #8]
   1f6e0:	6922      	ldr	r2, [r4, #16]
   1f6e2:	441f      	add	r7, r3
   1f6e4:	4297      	cmp	r7, r2
   1f6e6:	bf08      	it	eq
   1f6e8:	68e3      	ldreq	r3, [r4, #12]
   1f6ea:	60a7      	str	r7, [r4, #8]
   1f6ec:	bf08      	it	eq
   1f6ee:	60a3      	streq	r3, [r4, #8]
   1f6f0:	2d00      	cmp	r5, #0
   1f6f2:	d08b      	beq.n	1f60c <bsd_os_trace_irq_handler+0x2c>
   1f6f4:	2105      	movs	r1, #5
   1f6f6:	4630      	mov	r0, r6
   1f6f8:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f6fc:	f014 fa61 	bl	33bc2 <bsd_os_trace_put>
   1f700:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f704:	68e0      	ldr	r0, [r4, #12]
   1f706:	f014 fa5c 	bl	33bc2 <bsd_os_trace_put>
   1f70a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f70e:	68e3      	ldr	r3, [r4, #12]
   1f710:	4413      	add	r3, r2
   1f712:	60a3      	str	r3, [r4, #8]
   1f714:	e77a      	b.n	1f60c <bsd_os_trace_irq_handler+0x2c>
   1f716:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f71a:	f8ad 2000 	strh.w	r2, [sp]
   1f71e:	7822      	ldrb	r2, [r4, #0]
   1f720:	466e      	mov	r6, sp
   1f722:	f88d 2004 	strb.w	r2, [sp, #4]
   1f726:	6862      	ldr	r2, [r4, #4]
   1f728:	2105      	movs	r1, #5
   1f72a:	4293      	cmp	r3, r2
   1f72c:	bf2a      	itet	cs
   1f72e:	6927      	ldrcs	r7, [r4, #16]
   1f730:	1ad7      	subcc	r7, r2, r3
   1f732:	1aff      	subcs	r7, r7, r3
   1f734:	4293      	cmp	r3, r2
   1f736:	bf94      	ite	ls
   1f738:	2500      	movls	r5, #0
   1f73a:	68e5      	ldrhi	r5, [r4, #12]
   1f73c:	b2bf      	uxth	r7, r7
   1f73e:	bf88      	it	hi
   1f740:	1b52      	subhi	r2, r2, r5
   1f742:	4630      	mov	r0, r6
   1f744:	bf88      	it	hi
   1f746:	b295      	uxthhi	r5, r2
   1f748:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f74c:	f014 fa39 	bl	33bc2 <bsd_os_trace_put>
   1f750:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f754:	68a0      	ldr	r0, [r4, #8]
   1f756:	f014 fa34 	bl	33bc2 <bsd_os_trace_put>
   1f75a:	68a3      	ldr	r3, [r4, #8]
   1f75c:	6922      	ldr	r2, [r4, #16]
   1f75e:	441f      	add	r7, r3
   1f760:	4297      	cmp	r7, r2
   1f762:	bf08      	it	eq
   1f764:	68e3      	ldreq	r3, [r4, #12]
   1f766:	60a7      	str	r7, [r4, #8]
   1f768:	bf08      	it	eq
   1f76a:	60a3      	streq	r3, [r4, #8]
   1f76c:	2d00      	cmp	r5, #0
   1f76e:	f43f af46 	beq.w	1f5fe <bsd_os_trace_irq_handler+0x1e>
   1f772:	2105      	movs	r1, #5
   1f774:	4630      	mov	r0, r6
   1f776:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f77a:	f014 fa22 	bl	33bc2 <bsd_os_trace_put>
   1f77e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f782:	68e0      	ldr	r0, [r4, #12]
   1f784:	f014 fa1d 	bl	33bc2 <bsd_os_trace_put>
   1f788:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f78c:	68e3      	ldr	r3, [r4, #12]
   1f78e:	4413      	add	r3, r2
   1f790:	60a3      	str	r3, [r4, #8]
   1f792:	e734      	b.n	1f5fe <bsd_os_trace_irq_handler+0x1e>
   1f794:	f7fd ff68 	bl	1d668 <bsd_os_trace_irq_clear>
   1f798:	e729      	b.n	1f5ee <bsd_os_trace_irq_handler+0xe>
   1f79a:	bf00      	nop
   1f79c:	20028f7c 	.word	0x20028f7c
   1f7a0:	2002240c 	.word	0x2002240c
   1f7a4:	20022404 	.word	0x20022404
   1f7a8:	20022408 	.word	0x20022408

0001f7ac <ipc_trace_handle>:
   1f7ac:	2200      	movs	r2, #0
   1f7ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7b2:	4bb2      	ldr	r3, [pc, #712]	; (1fa7c <ipc_trace_handle+0x2d0>)
   1f7b4:	b083      	sub	sp, #12
   1f7b6:	681b      	ldr	r3, [r3, #0]
   1f7b8:	6919      	ldr	r1, [r3, #16]
   1f7ba:	695c      	ldr	r4, [r3, #20]
   1f7bc:	7c18      	ldrb	r0, [r3, #16]
   1f7be:	741a      	strb	r2, [r3, #16]
   1f7c0:	7c58      	ldrb	r0, [r3, #17]
   1f7c2:	745a      	strb	r2, [r3, #17]
   1f7c4:	7c98      	ldrb	r0, [r3, #18]
   1f7c6:	749a      	strb	r2, [r3, #18]
   1f7c8:	7cd8      	ldrb	r0, [r3, #19]
   1f7ca:	74da      	strb	r2, [r3, #19]
   1f7cc:	7d18      	ldrb	r0, [r3, #20]
   1f7ce:	751a      	strb	r2, [r3, #20]
   1f7d0:	7d58      	ldrb	r0, [r3, #21]
   1f7d2:	755a      	strb	r2, [r3, #21]
   1f7d4:	7d98      	ldrb	r0, [r3, #22]
   1f7d6:	759a      	strb	r2, [r3, #22]
   1f7d8:	7dd8      	ldrb	r0, [r3, #23]
   1f7da:	75da      	strb	r2, [r3, #23]
   1f7dc:	b1a9      	cbz	r1, 1f80a <ipc_trace_handle+0x5e>
   1f7de:	3901      	subs	r1, #1
   1f7e0:	2903      	cmp	r1, #3
   1f7e2:	d812      	bhi.n	1f80a <ipc_trace_handle+0x5e>
   1f7e4:	e8df f001 	tbb	[pc, r1]
   1f7e8:	1402a97c 	.word	0x1402a97c
   1f7ec:	2501      	movs	r5, #1
   1f7ee:	2003      	movs	r0, #3
   1f7f0:	2200      	movs	r2, #0
   1f7f2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1f7f6:	4ca2      	ldr	r4, [pc, #648]	; (1fa80 <ipc_trace_handle+0x2d4>)
   1f7f8:	7025      	strb	r5, [r4, #0]
   1f7fa:	7a1c      	ldrb	r4, [r3, #8]
   1f7fc:	7218      	strb	r0, [r3, #8]
   1f7fe:	7a58      	ldrb	r0, [r3, #9]
   1f800:	725a      	strb	r2, [r3, #9]
   1f802:	7a98      	ldrb	r0, [r3, #10]
   1f804:	729a      	strb	r2, [r3, #10]
   1f806:	7ada      	ldrb	r2, [r3, #11]
   1f808:	72d9      	strb	r1, [r3, #11]
   1f80a:	b003      	add	sp, #12
   1f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f810:	2104      	movs	r1, #4
   1f812:	2200      	movs	r2, #0
   1f814:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1f818:	7a1c      	ldrb	r4, [r3, #8]
   1f81a:	7219      	strb	r1, [r3, #8]
   1f81c:	7a59      	ldrb	r1, [r3, #9]
   1f81e:	725a      	strb	r2, [r3, #9]
   1f820:	4997      	ldr	r1, [pc, #604]	; (1fa80 <ipc_trace_handle+0x2d4>)
   1f822:	7a9c      	ldrb	r4, [r3, #10]
   1f824:	729a      	strb	r2, [r3, #10]
   1f826:	7adc      	ldrb	r4, [r3, #11]
   1f828:	72d8      	strb	r0, [r3, #11]
   1f82a:	700a      	strb	r2, [r1, #0]
   1f82c:	780b      	ldrb	r3, [r1, #0]
   1f82e:	2b00      	cmp	r3, #0
   1f830:	f000 809f 	beq.w	1f972 <ipc_trace_handle+0x1c6>
   1f834:	4b93      	ldr	r3, [pc, #588]	; (1fa84 <ipc_trace_handle+0x2d8>)
   1f836:	681c      	ldr	r4, [r3, #0]
   1f838:	b124      	cbz	r4, 1f844 <ipc_trace_handle+0x98>
   1f83a:	68a3      	ldr	r3, [r4, #8]
   1f83c:	6862      	ldr	r2, [r4, #4]
   1f83e:	4293      	cmp	r3, r2
   1f840:	f040 80d9 	bne.w	1f9f6 <ipc_trace_handle+0x24a>
   1f844:	4b90      	ldr	r3, [pc, #576]	; (1fa88 <ipc_trace_handle+0x2dc>)
   1f846:	681c      	ldr	r4, [r3, #0]
   1f848:	b124      	cbz	r4, 1f854 <ipc_trace_handle+0xa8>
   1f84a:	68a3      	ldr	r3, [r4, #8]
   1f84c:	6862      	ldr	r2, [r4, #4]
   1f84e:	4293      	cmp	r3, r2
   1f850:	f040 8092 	bne.w	1f978 <ipc_trace_handle+0x1cc>
   1f854:	4b8d      	ldr	r3, [pc, #564]	; (1fa8c <ipc_trace_handle+0x2e0>)
   1f856:	681c      	ldr	r4, [r3, #0]
   1f858:	2c00      	cmp	r4, #0
   1f85a:	d0d6      	beq.n	1f80a <ipc_trace_handle+0x5e>
   1f85c:	68a3      	ldr	r3, [r4, #8]
   1f85e:	6862      	ldr	r2, [r4, #4]
   1f860:	4293      	cmp	r3, r2
   1f862:	d0d2      	beq.n	1f80a <ipc_trace_handle+0x5e>
   1f864:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f868:	f8ad 2000 	strh.w	r2, [sp]
   1f86c:	7822      	ldrb	r2, [r4, #0]
   1f86e:	466e      	mov	r6, sp
   1f870:	f88d 2004 	strb.w	r2, [sp, #4]
   1f874:	6862      	ldr	r2, [r4, #4]
   1f876:	2105      	movs	r1, #5
   1f878:	4293      	cmp	r3, r2
   1f87a:	bf2a      	itet	cs
   1f87c:	6927      	ldrcs	r7, [r4, #16]
   1f87e:	1ad7      	subcc	r7, r2, r3
   1f880:	1aff      	subcs	r7, r7, r3
   1f882:	4293      	cmp	r3, r2
   1f884:	bf94      	ite	ls
   1f886:	2500      	movls	r5, #0
   1f888:	68e5      	ldrhi	r5, [r4, #12]
   1f88a:	b2bf      	uxth	r7, r7
   1f88c:	bf88      	it	hi
   1f88e:	1b52      	subhi	r2, r2, r5
   1f890:	4630      	mov	r0, r6
   1f892:	bf88      	it	hi
   1f894:	b295      	uxthhi	r5, r2
   1f896:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f89a:	f014 f992 	bl	33bc2 <bsd_os_trace_put>
   1f89e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f8a2:	68a0      	ldr	r0, [r4, #8]
   1f8a4:	f014 f98d 	bl	33bc2 <bsd_os_trace_put>
   1f8a8:	68a3      	ldr	r3, [r4, #8]
   1f8aa:	6922      	ldr	r2, [r4, #16]
   1f8ac:	441f      	add	r7, r3
   1f8ae:	4297      	cmp	r7, r2
   1f8b0:	bf08      	it	eq
   1f8b2:	68e3      	ldreq	r3, [r4, #12]
   1f8b4:	60a7      	str	r7, [r4, #8]
   1f8b6:	bf08      	it	eq
   1f8b8:	60a3      	streq	r3, [r4, #8]
   1f8ba:	2d00      	cmp	r5, #0
   1f8bc:	d0a5      	beq.n	1f80a <ipc_trace_handle+0x5e>
   1f8be:	2105      	movs	r1, #5
   1f8c0:	4630      	mov	r0, r6
   1f8c2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f8c6:	f014 f97c 	bl	33bc2 <bsd_os_trace_put>
   1f8ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f8ce:	68e0      	ldr	r0, [r4, #12]
   1f8d0:	f014 f977 	bl	33bc2 <bsd_os_trace_put>
   1f8d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f8d8:	68e3      	ldr	r3, [r4, #12]
   1f8da:	4413      	add	r3, r2
   1f8dc:	60a3      	str	r3, [r4, #8]
   1f8de:	e794      	b.n	1f80a <ipc_trace_handle+0x5e>
   1f8e0:	4a67      	ldr	r2, [pc, #412]	; (1fa80 <ipc_trace_handle+0x2d4>)
   1f8e2:	7811      	ldrb	r1, [r2, #0]
   1f8e4:	b109      	cbz	r1, 1f8ea <ipc_trace_handle+0x13e>
   1f8e6:	2100      	movs	r1, #0
   1f8e8:	7011      	strb	r1, [r2, #0]
   1f8ea:	68a5      	ldr	r5, [r4, #8]
   1f8ec:	2d00      	cmp	r5, #0
   1f8ee:	d03b      	beq.n	1f968 <ipc_trace_handle+0x1bc>
   1f8f0:	f04f 0c00 	mov.w	ip, #0
   1f8f4:	f8df a190 	ldr.w	sl, [pc, #400]	; 1fa88 <ipc_trace_handle+0x2dc>
   1f8f8:	f8df b188 	ldr.w	fp, [pc, #392]	; 1fa84 <ipc_trace_handle+0x2d8>
   1f8fc:	4963      	ldr	r1, [pc, #396]	; (1fa8c <ipc_trace_handle+0x2e0>)
   1f8fe:	46e1      	mov	r9, ip
   1f900:	4666      	mov	r6, ip
   1f902:	4662      	mov	r2, ip
   1f904:	f8d1 e000 	ldr.w	lr, [r1]
   1f908:	f8da 8000 	ldr.w	r8, [sl]
   1f90c:	f8db 7000 	ldr.w	r7, [fp]
   1f910:	e008      	b.n	1f924 <ipc_trace_handle+0x178>
   1f912:	2963      	cmp	r1, #99	; 0x63
   1f914:	d016      	beq.n	1f944 <ipc_trace_handle+0x198>
   1f916:	2961      	cmp	r1, #97	; 0x61
   1f918:	bf04      	itt	eq
   1f91a:	4607      	moveq	r7, r0
   1f91c:	2601      	moveq	r6, #1
   1f91e:	3201      	adds	r2, #1
   1f920:	42aa      	cmp	r2, r5
   1f922:	d013      	beq.n	1f94c <ipc_trace_handle+0x1a0>
   1f924:	1c91      	adds	r1, r2, #2
   1f926:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1f92a:	6848      	ldr	r0, [r1, #4]
   1f92c:	7801      	ldrb	r1, [r0, #0]
   1f92e:	2962      	cmp	r1, #98	; 0x62
   1f930:	d1ef      	bne.n	1f912 <ipc_trace_handle+0x166>
   1f932:	4680      	mov	r8, r0
   1f934:	f04f 0901 	mov.w	r9, #1
   1f938:	e7f1      	b.n	1f91e <ipc_trace_handle+0x172>
   1f93a:	f7fd fe8d 	bl	1d658 <bsd_os_trace_irq_set>
   1f93e:	b003      	add	sp, #12
   1f940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f944:	4686      	mov	lr, r0
   1f946:	f04f 0c01 	mov.w	ip, #1
   1f94a:	e7e8      	b.n	1f91e <ipc_trace_handle+0x172>
   1f94c:	2e00      	cmp	r6, #0
   1f94e:	f040 8091 	bne.w	1fa74 <ipc_trace_handle+0x2c8>
   1f952:	f1b9 0f00 	cmp.w	r9, #0
   1f956:	d001      	beq.n	1f95c <ipc_trace_handle+0x1b0>
   1f958:	f8ca 8000 	str.w	r8, [sl]
   1f95c:	f1bc 0f00 	cmp.w	ip, #0
   1f960:	d002      	beq.n	1f968 <ipc_trace_handle+0x1bc>
   1f962:	4a4a      	ldr	r2, [pc, #296]	; (1fa8c <ipc_trace_handle+0x2e0>)
   1f964:	f8c2 e000 	str.w	lr, [r2]
   1f968:	2001      	movs	r0, #1
   1f96a:	2200      	movs	r2, #0
   1f96c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1f970:	e743      	b.n	1f7fa <ipc_trace_handle+0x4e>
   1f972:	f7fd fe79 	bl	1d668 <bsd_os_trace_irq_clear>
   1f976:	e75d      	b.n	1f834 <ipc_trace_handle+0x88>
   1f978:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f97c:	f8ad 2000 	strh.w	r2, [sp]
   1f980:	7822      	ldrb	r2, [r4, #0]
   1f982:	466e      	mov	r6, sp
   1f984:	f88d 2004 	strb.w	r2, [sp, #4]
   1f988:	6862      	ldr	r2, [r4, #4]
   1f98a:	2105      	movs	r1, #5
   1f98c:	4293      	cmp	r3, r2
   1f98e:	bf2a      	itet	cs
   1f990:	6927      	ldrcs	r7, [r4, #16]
   1f992:	1ad7      	subcc	r7, r2, r3
   1f994:	1aff      	subcs	r7, r7, r3
   1f996:	4293      	cmp	r3, r2
   1f998:	bf94      	ite	ls
   1f99a:	2500      	movls	r5, #0
   1f99c:	68e5      	ldrhi	r5, [r4, #12]
   1f99e:	b2bf      	uxth	r7, r7
   1f9a0:	bf88      	it	hi
   1f9a2:	1b52      	subhi	r2, r2, r5
   1f9a4:	4630      	mov	r0, r6
   1f9a6:	bf88      	it	hi
   1f9a8:	b295      	uxthhi	r5, r2
   1f9aa:	f8ad 7002 	strh.w	r7, [sp, #2]
   1f9ae:	f014 f908 	bl	33bc2 <bsd_os_trace_put>
   1f9b2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f9b6:	68a0      	ldr	r0, [r4, #8]
   1f9b8:	f014 f903 	bl	33bc2 <bsd_os_trace_put>
   1f9bc:	68a3      	ldr	r3, [r4, #8]
   1f9be:	6922      	ldr	r2, [r4, #16]
   1f9c0:	441f      	add	r7, r3
   1f9c2:	4297      	cmp	r7, r2
   1f9c4:	bf08      	it	eq
   1f9c6:	68e3      	ldreq	r3, [r4, #12]
   1f9c8:	60a7      	str	r7, [r4, #8]
   1f9ca:	bf08      	it	eq
   1f9cc:	60a3      	streq	r3, [r4, #8]
   1f9ce:	2d00      	cmp	r5, #0
   1f9d0:	f43f af40 	beq.w	1f854 <ipc_trace_handle+0xa8>
   1f9d4:	2105      	movs	r1, #5
   1f9d6:	4630      	mov	r0, r6
   1f9d8:	f8ad 5002 	strh.w	r5, [sp, #2]
   1f9dc:	f014 f8f1 	bl	33bc2 <bsd_os_trace_put>
   1f9e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1f9e4:	68e0      	ldr	r0, [r4, #12]
   1f9e6:	f014 f8ec 	bl	33bc2 <bsd_os_trace_put>
   1f9ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1f9ee:	68e3      	ldr	r3, [r4, #12]
   1f9f0:	4413      	add	r3, r2
   1f9f2:	60a3      	str	r3, [r4, #8]
   1f9f4:	e72e      	b.n	1f854 <ipc_trace_handle+0xa8>
   1f9f6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1f9fa:	f8ad 2000 	strh.w	r2, [sp]
   1f9fe:	7822      	ldrb	r2, [r4, #0]
   1fa00:	466e      	mov	r6, sp
   1fa02:	f88d 2004 	strb.w	r2, [sp, #4]
   1fa06:	6862      	ldr	r2, [r4, #4]
   1fa08:	2105      	movs	r1, #5
   1fa0a:	4293      	cmp	r3, r2
   1fa0c:	bf2a      	itet	cs
   1fa0e:	6927      	ldrcs	r7, [r4, #16]
   1fa10:	1ad7      	subcc	r7, r2, r3
   1fa12:	1aff      	subcs	r7, r7, r3
   1fa14:	4293      	cmp	r3, r2
   1fa16:	bf94      	ite	ls
   1fa18:	2500      	movls	r5, #0
   1fa1a:	68e5      	ldrhi	r5, [r4, #12]
   1fa1c:	b2bf      	uxth	r7, r7
   1fa1e:	bf88      	it	hi
   1fa20:	1b52      	subhi	r2, r2, r5
   1fa22:	4630      	mov	r0, r6
   1fa24:	bf88      	it	hi
   1fa26:	b295      	uxthhi	r5, r2
   1fa28:	f8ad 7002 	strh.w	r7, [sp, #2]
   1fa2c:	f014 f8c9 	bl	33bc2 <bsd_os_trace_put>
   1fa30:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1fa34:	68a0      	ldr	r0, [r4, #8]
   1fa36:	f014 f8c4 	bl	33bc2 <bsd_os_trace_put>
   1fa3a:	68a3      	ldr	r3, [r4, #8]
   1fa3c:	6922      	ldr	r2, [r4, #16]
   1fa3e:	441f      	add	r7, r3
   1fa40:	4297      	cmp	r7, r2
   1fa42:	bf08      	it	eq
   1fa44:	68e3      	ldreq	r3, [r4, #12]
   1fa46:	60a7      	str	r7, [r4, #8]
   1fa48:	bf08      	it	eq
   1fa4a:	60a3      	streq	r3, [r4, #8]
   1fa4c:	2d00      	cmp	r5, #0
   1fa4e:	f43f aef9 	beq.w	1f844 <ipc_trace_handle+0x98>
   1fa52:	2105      	movs	r1, #5
   1fa54:	4630      	mov	r0, r6
   1fa56:	f8ad 5002 	strh.w	r5, [sp, #2]
   1fa5a:	f014 f8b2 	bl	33bc2 <bsd_os_trace_put>
   1fa5e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1fa62:	68e0      	ldr	r0, [r4, #12]
   1fa64:	f014 f8ad 	bl	33bc2 <bsd_os_trace_put>
   1fa68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1fa6c:	68e3      	ldr	r3, [r4, #12]
   1fa6e:	4413      	add	r3, r2
   1fa70:	60a3      	str	r3, [r4, #8]
   1fa72:	e6e7      	b.n	1f844 <ipc_trace_handle+0x98>
   1fa74:	f8cb 7000 	str.w	r7, [fp]
   1fa78:	e76b      	b.n	1f952 <ipc_trace_handle+0x1a6>
   1fa7a:	bf00      	nop
   1fa7c:	20022410 	.word	0x20022410
   1fa80:	20028f7c 	.word	0x20028f7c
   1fa84:	2002240c 	.word	0x2002240c
   1fa88:	20022404 	.word	0x20022404
   1fa8c:	20022408 	.word	0x20022408

0001fa90 <rpc_trace_coredump_in_progress>:
   1fa90:	4b01      	ldr	r3, [pc, #4]	; (1fa98 <rpc_trace_coredump_in_progress+0x8>)
   1fa92:	7818      	ldrb	r0, [r3, #0]
   1fa94:	4770      	bx	lr
   1fa96:	bf00      	nop
   1fa98:	20028f7c 	.word	0x20028f7c

0001fa9c <rpc_transport_ipc_data_free>:
   1fa9c:	b510      	push	{r4, lr}
   1fa9e:	4b0e      	ldr	r3, [pc, #56]	; (1fad8 <rpc_transport_ipc_data_free+0x3c>)
   1faa0:	4604      	mov	r4, r0
   1faa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1faa6:	4413      	add	r3, r2
   1faa8:	4298      	cmp	r0, r3
   1faaa:	d20d      	bcs.n	1fac8 <rpc_transport_ipc_data_free+0x2c>
   1faac:	4282      	cmp	r2, r0
   1faae:	d80b      	bhi.n	1fac8 <rpc_transport_ipc_data_free+0x2c>
   1fab0:	f000 fd10 	bl	204d4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1fab4:	b158      	cbz	r0, 1face <rpc_transport_ipc_data_free+0x32>
   1fab6:	4a09      	ldr	r2, [pc, #36]	; (1fadc <rpc_transport_ipc_data_free+0x40>)
   1fab8:	6084      	str	r4, [r0, #8]
   1faba:	6002      	str	r2, [r0, #0]
   1fabc:	f7ff fd80 	bl	1f5c0 <rpc_transport_send>
   1fac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fac4:	f7fd bdb8 	b.w	1d638 <bsd_os_application_irq_set>
   1fac8:	4620      	mov	r0, r4
   1faca:	f006 ff0b 	bl	268e4 <nrf_shared_free>
   1face:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fad2:	f7fd bdb1 	b.w	1d638 <bsd_os_application_irq_set>
   1fad6:	bf00      	nop
   1fad8:	20022414 	.word	0x20022414
   1fadc:	00020001 	.word	0x00020001

0001fae0 <rpc_transport_ipc_init>:
   1fae0:	b188      	cbz	r0, 1fb06 <rpc_transport_ipc_init+0x26>
   1fae2:	b510      	push	{r4, lr}
   1fae4:	b082      	sub	sp, #8
   1fae6:	aa01      	add	r2, sp, #4
   1fae8:	4669      	mov	r1, sp
   1faea:	4604      	mov	r4, r0
   1faec:	f000 fb4e 	bl	2018c <rpc_transport_ipc_tx_init>
   1faf0:	4602      	mov	r2, r0
   1faf2:	b148      	cbz	r0, 1fb08 <rpc_transport_ipc_init+0x28>
   1faf4:	4b12      	ldr	r3, [pc, #72]	; (1fb40 <rpc_transport_ipc_init+0x60>)
   1faf6:	3428      	adds	r4, #40	; 0x28
   1faf8:	e894 0003 	ldmia.w	r4, {r0, r1}
   1fafc:	e883 0003 	stmia.w	r3, {r0, r1}
   1fb00:	4610      	mov	r0, r2
   1fb02:	b002      	add	sp, #8
   1fb04:	bd10      	pop	{r4, pc}
   1fb06:	e7fe      	b.n	1fb06 <rpc_transport_ipc_init+0x26>
   1fb08:	e9dd 1200 	ldrd	r1, r2, [sp]
   1fb0c:	4620      	mov	r0, r4
   1fb0e:	f000 f9e9 	bl	1fee4 <rpc_transport_ipc_rx_init>
   1fb12:	4602      	mov	r2, r0
   1fb14:	4b0a      	ldr	r3, [pc, #40]	; (1fb40 <rpc_transport_ipc_init+0x60>)
   1fb16:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1fb1a:	c903      	ldmia	r1, {r0, r1}
   1fb1c:	e883 0003 	stmia.w	r3, {r0, r1}
   1fb20:	2a00      	cmp	r2, #0
   1fb22:	d1ed      	bne.n	1fb00 <rpc_transport_ipc_init+0x20>
   1fb24:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1fb28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fb2a:	4906      	ldr	r1, [pc, #24]	; (1fb44 <rpc_transport_ipc_init+0x64>)
   1fb2c:	015b      	lsls	r3, r3, #5
   1fb2e:	b2db      	uxtb	r3, r3
   1fb30:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1fb34:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1fb38:	6048      	str	r0, [r1, #4]
   1fb3a:	4610      	mov	r0, r2
   1fb3c:	b002      	add	sp, #8
   1fb3e:	bd10      	pop	{r4, pc}
   1fb40:	20022414 	.word	0x20022414
   1fb44:	e000e100 	.word	0xe000e100

0001fb48 <bsd_os_application_irq_handler>:
   1fb48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb4c:	f7fd fd7c 	bl	1d648 <bsd_os_application_irq_clear>
   1fb50:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1fc28 <bsd_os_application_irq_handler+0xe0>
   1fb54:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1fc2c <bsd_os_application_irq_handler+0xe4>
   1fb58:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1fc30 <bsd_os_application_irq_handler+0xe8>
   1fb5c:	f108 0908 	add.w	r9, r8, #8
   1fb60:	f858 7b04 	ldr.w	r7, [r8], #4
   1fb64:	6839      	ldr	r1, [r7, #0]
   1fb66:	b361      	cbz	r1, 1fbc2 <bsd_os_application_irq_handler+0x7a>
   1fb68:	2400      	movs	r4, #0
   1fb6a:	e002      	b.n	1fb72 <bsd_os_application_irq_handler+0x2a>
   1fb6c:	3401      	adds	r4, #1
   1fb6e:	428c      	cmp	r4, r1
   1fb70:	d227      	bcs.n	1fbc2 <bsd_os_application_irq_handler+0x7a>
   1fb72:	00e6      	lsls	r6, r4, #3
   1fb74:	19bd      	adds	r5, r7, r6
   1fb76:	68aa      	ldr	r2, [r5, #8]
   1fb78:	2a00      	cmp	r2, #0
   1fb7a:	d0f7      	beq.n	1fb6c <bsd_os_application_irq_handler+0x24>
   1fb7c:	686a      	ldr	r2, [r5, #4]
   1fb7e:	b2d2      	uxtb	r2, r2
   1fb80:	2a01      	cmp	r2, #1
   1fb82:	d1f3      	bne.n	1fb6c <bsd_os_application_irq_handler+0x24>
   1fb84:	6868      	ldr	r0, [r5, #4]
   1fb86:	f8bb 2000 	ldrh.w	r2, [fp]
   1fb8a:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1fb8e:	d1ed      	bne.n	1fb6c <bsd_os_application_irq_handler+0x24>
   1fb90:	68a8      	ldr	r0, [r5, #8]
   1fb92:	6841      	ldr	r1, [r0, #4]
   1fb94:	b2c9      	uxtb	r1, r1
   1fb96:	2902      	cmp	r1, #2
   1fb98:	d02c      	beq.n	1fbf4 <bsd_os_application_irq_handler+0xac>
   1fb9a:	2901      	cmp	r1, #1
   1fb9c:	d015      	beq.n	1fbca <bsd_os_application_irq_handler+0x82>
   1fb9e:	3604      	adds	r6, #4
   1fba0:	59b9      	ldr	r1, [r7, r6]
   1fba2:	3201      	adds	r2, #1
   1fba4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1fba8:	f041 0103 	orr.w	r1, r1, #3
   1fbac:	51b9      	str	r1, [r7, r6]
   1fbae:	f8ab 2000 	strh.w	r2, [fp]
   1fbb2:	f7fd fd41 	bl	1d638 <bsd_os_application_irq_set>
   1fbb6:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1fbba:	3401      	adds	r4, #1
   1fbbc:	6839      	ldr	r1, [r7, #0]
   1fbbe:	428c      	cmp	r4, r1
   1fbc0:	d3d7      	bcc.n	1fb72 <bsd_os_application_irq_handler+0x2a>
   1fbc2:	45c1      	cmp	r9, r8
   1fbc4:	d1cc      	bne.n	1fb60 <bsd_os_application_irq_handler+0x18>
   1fbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbca:	6801      	ldr	r1, [r0, #0]
   1fbcc:	0c09      	lsrs	r1, r1, #16
   1fbce:	f003 f855 	bl	22c7c <rpc_handle_ctrl_message>
   1fbd2:	2801      	cmp	r0, #1
   1fbd4:	d014      	beq.n	1fc00 <bsd_os_application_irq_handler+0xb8>
   1fbd6:	d310      	bcc.n	1fbfa <bsd_os_application_irq_handler+0xb2>
   1fbd8:	2802      	cmp	r0, #2
   1fbda:	d007      	beq.n	1fbec <bsd_os_application_irq_handler+0xa4>
   1fbdc:	2203      	movs	r2, #3
   1fbde:	4b11      	ldr	r3, [pc, #68]	; (1fc24 <bsd_os_application_irq_handler+0xdc>)
   1fbe0:	4610      	mov	r0, r2
   1fbe2:	f8ca 2000 	str.w	r2, [sl]
   1fbe6:	601a      	str	r2, [r3, #0]
   1fbe8:	f005 fc28 	bl	2543c <rpc_transport_ipc_fault_handler>
   1fbec:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1fbf0:	6839      	ldr	r1, [r7, #0]
   1fbf2:	e7bb      	b.n	1fb6c <bsd_os_application_irq_handler+0x24>
   1fbf4:	f003 f85a 	bl	22cac <rpc_handle_data_message>
   1fbf8:	e7eb      	b.n	1fbd2 <bsd_os_application_irq_handler+0x8a>
   1fbfa:	f8bb 2000 	ldrh.w	r2, [fp]
   1fbfe:	e7ce      	b.n	1fb9e <bsd_os_application_irq_handler+0x56>
   1fc00:	686a      	ldr	r2, [r5, #4]
   1fc02:	f8bb 1000 	ldrh.w	r1, [fp]
   1fc06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1fc0a:	f042 0202 	orr.w	r2, r2, #2
   1fc0e:	606a      	str	r2, [r5, #4]
   1fc10:	1c4a      	adds	r2, r1, #1
   1fc12:	f8ab 2000 	strh.w	r2, [fp]
   1fc16:	f7fd fd0f 	bl	1d638 <bsd_os_application_irq_set>
   1fc1a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1fc1e:	6839      	ldr	r1, [r7, #0]
   1fc20:	e7a4      	b.n	1fb6c <bsd_os_application_irq_handler+0x24>
   1fc22:	bf00      	nop
   1fc24:	2002241c 	.word	0x2002241c
   1fc28:	20022424 	.word	0x20022424
   1fc2c:	20027554 	.word	0x20027554
   1fc30:	2002242c 	.word	0x2002242c

0001fc34 <IPC_IRQHandler>:
   1fc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc38:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1fc3c:	4d95      	ldr	r5, [pc, #596]	; (1fe94 <IPC_IRQHandler+0x260>)
   1fc3e:	4c96      	ldr	r4, [pc, #600]	; (1fe98 <IPC_IRQHandler+0x264>)
   1fc40:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1fc44:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1fc48:	b092      	sub	sp, #72	; 0x48
   1fc4a:	0618      	lsls	r0, r3, #24
   1fc4c:	d50b      	bpl.n	1fc66 <IPC_IRQHandler+0x32>
   1fc4e:	f7ff fdad 	bl	1f7ac <ipc_trace_handle>
   1fc52:	f7ff ff1d 	bl	1fa90 <rpc_trace_coredump_in_progress>
   1fc56:	2800      	cmp	r0, #0
   1fc58:	d159      	bne.n	1fd0e <IPC_IRQHandler+0xda>
   1fc5a:	4b90      	ldr	r3, [pc, #576]	; (1fe9c <IPC_IRQHandler+0x268>)
   1fc5c:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1fc60:	681b      	ldr	r3, [r3, #0]
   1fc62:	9301      	str	r3, [sp, #4]
   1fc64:	9b01      	ldr	r3, [sp, #4]
   1fc66:	4c8c      	ldr	r4, [pc, #560]	; (1fe98 <IPC_IRQHandler+0x264>)
   1fc68:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   1fc6c:	f015 0501 	ands.w	r5, r5, #1
   1fc70:	d11f      	bne.n	1fcb2 <IPC_IRQHandler+0x7e>
   1fc72:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1fc76:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   1fc7a:	d14d      	bne.n	1fd18 <IPC_IRQHandler+0xe4>
   1fc7c:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   1fc80:	0751      	lsls	r1, r2, #29
   1fc82:	d50e      	bpl.n	1fca2 <IPC_IRQHandler+0x6e>
   1fc84:	4a86      	ldr	r2, [pc, #536]	; (1fea0 <IPC_IRQHandler+0x26c>)
   1fc86:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1fc8a:	6812      	ldr	r2, [r2, #0]
   1fc8c:	4b85      	ldr	r3, [pc, #532]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fc8e:	9206      	str	r2, [sp, #24]
   1fc90:	9a06      	ldr	r2, [sp, #24]
   1fc92:	681a      	ldr	r2, [r3, #0]
   1fc94:	2a02      	cmp	r2, #2
   1fc96:	f000 80e0 	beq.w	1fe5a <IPC_IRQHandler+0x226>
   1fc9a:	681a      	ldr	r2, [r3, #0]
   1fc9c:	2a01      	cmp	r2, #1
   1fc9e:	f000 80c1 	beq.w	1fe24 <IPC_IRQHandler+0x1f0>
   1fca2:	4b7d      	ldr	r3, [pc, #500]	; (1fe98 <IPC_IRQHandler+0x264>)
   1fca4:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1fca8:	06d2      	lsls	r2, r2, #27
   1fcaa:	d424      	bmi.n	1fcf6 <IPC_IRQHandler+0xc2>
   1fcac:	b012      	add	sp, #72	; 0x48
   1fcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fcb2:	2100      	movs	r1, #0
   1fcb4:	f248 0202 	movw	r2, #32770	; 0x8002
   1fcb8:	4b7b      	ldr	r3, [pc, #492]	; (1fea8 <IPC_IRQHandler+0x274>)
   1fcba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fcbe:	681b      	ldr	r3, [r3, #0]
   1fcc0:	9302      	str	r3, [sp, #8]
   1fcc2:	9b02      	ldr	r3, [sp, #8]
   1fcc4:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   1fcc8:	4293      	cmp	r3, r2
   1fcca:	f000 80cf 	beq.w	1fe6c <IPC_IRQHandler+0x238>
   1fcce:	f200 808d 	bhi.w	1fdec <IPC_IRQHandler+0x1b8>
   1fcd2:	2b00      	cmp	r3, #0
   1fcd4:	f000 80c4 	beq.w	1fe60 <IPC_IRQHandler+0x22c>
   1fcd8:	2b02      	cmp	r3, #2
   1fcda:	f240 8098 	bls.w	1fe0e <IPC_IRQHandler+0x1da>
   1fcde:	f248 0201 	movw	r2, #32769	; 0x8001
   1fce2:	4293      	cmp	r3, r2
   1fce4:	f040 80bc 	bne.w	1fe60 <IPC_IRQHandler+0x22c>
   1fce8:	2003      	movs	r0, #3
   1fcea:	2207      	movs	r2, #7
   1fcec:	496d      	ldr	r1, [pc, #436]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fcee:	4b6f      	ldr	r3, [pc, #444]	; (1feac <IPC_IRQHandler+0x278>)
   1fcf0:	6008      	str	r0, [r1, #0]
   1fcf2:	601a      	str	r2, [r3, #0]
   1fcf4:	e7da      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fcf6:	2100      	movs	r1, #0
   1fcf8:	4a6d      	ldr	r2, [pc, #436]	; (1feb0 <IPC_IRQHandler+0x27c>)
   1fcfa:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1fcfe:	6813      	ldr	r3, [r2, #0]
   1fd00:	9307      	str	r3, [sp, #28]
   1fd02:	9b07      	ldr	r3, [sp, #28]
   1fd04:	b012      	add	sp, #72	; 0x48
   1fd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fd0a:	f7fd bc95 	b.w	1d638 <bsd_os_application_irq_set>
   1fd0e:	23e0      	movs	r3, #224	; 0xe0
   1fd10:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1fd14:	606e      	str	r6, [r5, #4]
   1fd16:	e7c9      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fd18:	4b66      	ldr	r3, [pc, #408]	; (1feb4 <IPC_IRQHandler+0x280>)
   1fd1a:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   1fd1e:	681b      	ldr	r3, [r3, #0]
   1fd20:	2704      	movs	r7, #4
   1fd22:	9305      	str	r3, [sp, #20]
   1fd24:	9b05      	ldr	r3, [sp, #20]
   1fd26:	f000 fc0f 	bl	20548 <rpc_transport_ipc_tx_suspend>
   1fd2a:	2210      	movs	r2, #16
   1fd2c:	f04f 0c01 	mov.w	ip, #1
   1fd30:	4961      	ldr	r1, [pc, #388]	; (1feb8 <IPC_IRQHandler+0x284>)
   1fd32:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   1fd36:	680b      	ldr	r3, [r1, #0]
   1fd38:	9303      	str	r3, [sp, #12]
   1fd3a:	4b60      	ldr	r3, [pc, #384]	; (1febc <IPC_IRQHandler+0x288>)
   1fd3c:	9803      	ldr	r0, [sp, #12]
   1fd3e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   1fd42:	6818      	ldr	r0, [r3, #0]
   1fd44:	9004      	str	r0, [sp, #16]
   1fd46:	485e      	ldr	r0, [pc, #376]	; (1fec0 <IPC_IRQHandler+0x28c>)
   1fd48:	9e04      	ldr	r6, [sp, #16]
   1fd4a:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
   1fd4e:	6800      	ldr	r0, [r0, #0]
   1fd50:	2640      	movs	r6, #64	; 0x40
   1fd52:	9008      	str	r0, [sp, #32]
   1fd54:	485b      	ldr	r0, [pc, #364]	; (1fec4 <IPC_IRQHandler+0x290>)
   1fd56:	f8dd e020 	ldr.w	lr, [sp, #32]
   1fd5a:	f8c4 5598 	str.w	r5, [r4, #1432]	; 0x598
   1fd5e:	f8d0 e000 	ldr.w	lr, [r0]
   1fd62:	2080      	movs	r0, #128	; 0x80
   1fd64:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   1fd68:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1fd6c:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   1fd70:	f8d1 e000 	ldr.w	lr, [r1]
   1fd74:	2105      	movs	r1, #5
   1fd76:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   1fd7a:	f8df e160 	ldr.w	lr, [pc, #352]	; 1fedc <IPC_IRQHandler+0x2a8>
   1fd7e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1fd82:	f8c4 55a8 	str.w	r5, [r4, #1448]	; 0x5a8
   1fd86:	f8de e000 	ldr.w	lr, [lr]
   1fd8a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1fd8e:	f8df e150 	ldr.w	lr, [pc, #336]	; 1fee0 <IPC_IRQHandler+0x2ac>
   1fd92:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1fd96:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
   1fd9a:	f8de e000 	ldr.w	lr, [lr]
   1fd9e:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
   1fda2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   1fda6:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
   1fdaa:	f8d3 c000 	ldr.w	ip, [r3]
   1fdae:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   1fdb2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1fdb6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
   1fdba:	681f      	ldr	r7, [r3, #0]
   1fdbc:	970e      	str	r7, [sp, #56]	; 0x38
   1fdbe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1fdc0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   1fdc4:	681a      	ldr	r2, [r3, #0]
   1fdc6:	920f      	str	r2, [sp, #60]	; 0x3c
   1fdc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fdca:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   1fdce:	681e      	ldr	r6, [r3, #0]
   1fdd0:	4a34      	ldr	r2, [pc, #208]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fdd2:	9610      	str	r6, [sp, #64]	; 0x40
   1fdd4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1fdd6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1fdda:	6818      	ldr	r0, [r3, #0]
   1fddc:	4b3a      	ldr	r3, [pc, #232]	; (1fec8 <IPC_IRQHandler+0x294>)
   1fdde:	9011      	str	r0, [sp, #68]	; 0x44
   1fde0:	9811      	ldr	r0, [sp, #68]	; 0x44
   1fde2:	801d      	strh	r5, [r3, #0]
   1fde4:	6011      	str	r1, [r2, #0]
   1fde6:	b012      	add	sp, #72	; 0x48
   1fde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdec:	4a37      	ldr	r2, [pc, #220]	; (1fecc <IPC_IRQHandler+0x298>)
   1fdee:	4293      	cmp	r3, r2
   1fdf0:	d82a      	bhi.n	1fe48 <IPC_IRQHandler+0x214>
   1fdf2:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1fdf6:	d82a      	bhi.n	1fe4e <IPC_IRQHandler+0x21a>
   1fdf8:	f248 0203 	movw	r2, #32771	; 0x8003
   1fdfc:	4293      	cmp	r3, r2
   1fdfe:	d12f      	bne.n	1fe60 <IPC_IRQHandler+0x22c>
   1fe00:	2003      	movs	r0, #3
   1fe02:	2204      	movs	r2, #4
   1fe04:	4927      	ldr	r1, [pc, #156]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fe06:	4b29      	ldr	r3, [pc, #164]	; (1feac <IPC_IRQHandler+0x278>)
   1fe08:	6008      	str	r0, [r1, #0]
   1fe0a:	601a      	str	r2, [r3, #0]
   1fe0c:	e74e      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fe0e:	2303      	movs	r3, #3
   1fe10:	4618      	mov	r0, r3
   1fe12:	4924      	ldr	r1, [pc, #144]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fe14:	4a25      	ldr	r2, [pc, #148]	; (1feac <IPC_IRQHandler+0x278>)
   1fe16:	600b      	str	r3, [r1, #0]
   1fe18:	6013      	str	r3, [r2, #0]
   1fe1a:	b012      	add	sp, #72	; 0x48
   1fe1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fe20:	f005 bb0c 	b.w	2543c <rpc_transport_ipc_fault_handler>
   1fe24:	4a2a      	ldr	r2, [pc, #168]	; (1fed0 <IPC_IRQHandler+0x29c>)
   1fe26:	482b      	ldr	r0, [pc, #172]	; (1fed4 <IPC_IRQHandler+0x2a0>)
   1fe28:	6811      	ldr	r1, [r2, #0]
   1fe2a:	688a      	ldr	r2, [r1, #8]
   1fe2c:	6002      	str	r2, [r0, #0]
   1fe2e:	6849      	ldr	r1, [r1, #4]
   1fe30:	6041      	str	r1, [r0, #4]
   1fe32:	b312      	cbz	r2, 1fe7a <IPC_IRQHandler+0x246>
   1fe34:	b309      	cbz	r1, 1fe7a <IPC_IRQHandler+0x246>
   1fe36:	6812      	ldr	r2, [r2, #0]
   1fe38:	2a10      	cmp	r2, #16
   1fe3a:	d824      	bhi.n	1fe86 <IPC_IRQHandler+0x252>
   1fe3c:	680a      	ldr	r2, [r1, #0]
   1fe3e:	2a10      	cmp	r2, #16
   1fe40:	d821      	bhi.n	1fe86 <IPC_IRQHandler+0x252>
   1fe42:	2202      	movs	r2, #2
   1fe44:	601a      	str	r2, [r3, #0]
   1fe46:	e72c      	b.n	1fca2 <IPC_IRQHandler+0x6e>
   1fe48:	4a23      	ldr	r2, [pc, #140]	; (1fed8 <IPC_IRQHandler+0x2a4>)
   1fe4a:	4293      	cmp	r3, r2
   1fe4c:	d108      	bne.n	1fe60 <IPC_IRQHandler+0x22c>
   1fe4e:	2003      	movs	r0, #3
   1fe50:	4914      	ldr	r1, [pc, #80]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fe52:	4a16      	ldr	r2, [pc, #88]	; (1feac <IPC_IRQHandler+0x278>)
   1fe54:	6008      	str	r0, [r1, #0]
   1fe56:	6013      	str	r3, [r2, #0]
   1fe58:	e728      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fe5a:	f7fd fbed 	bl	1d638 <bsd_os_application_irq_set>
   1fe5e:	e720      	b.n	1fca2 <IPC_IRQHandler+0x6e>
   1fe60:	2303      	movs	r3, #3
   1fe62:	4910      	ldr	r1, [pc, #64]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fe64:	4a11      	ldr	r2, [pc, #68]	; (1feac <IPC_IRQHandler+0x278>)
   1fe66:	600b      	str	r3, [r1, #0]
   1fe68:	6013      	str	r3, [r2, #0]
   1fe6a:	e71f      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fe6c:	2003      	movs	r0, #3
   1fe6e:	2206      	movs	r2, #6
   1fe70:	490c      	ldr	r1, [pc, #48]	; (1fea4 <IPC_IRQHandler+0x270>)
   1fe72:	4b0e      	ldr	r3, [pc, #56]	; (1feac <IPC_IRQHandler+0x278>)
   1fe74:	6008      	str	r0, [r1, #0]
   1fe76:	601a      	str	r2, [r3, #0]
   1fe78:	e718      	b.n	1fcac <IPC_IRQHandler+0x78>
   1fe7a:	2003      	movs	r0, #3
   1fe7c:	2110      	movs	r1, #16
   1fe7e:	4a0b      	ldr	r2, [pc, #44]	; (1feac <IPC_IRQHandler+0x278>)
   1fe80:	6018      	str	r0, [r3, #0]
   1fe82:	6011      	str	r1, [r2, #0]
   1fe84:	e70d      	b.n	1fca2 <IPC_IRQHandler+0x6e>
   1fe86:	2003      	movs	r0, #3
   1fe88:	f24c 0106 	movw	r1, #49158	; 0xc006
   1fe8c:	4a07      	ldr	r2, [pc, #28]	; (1feac <IPC_IRQHandler+0x278>)
   1fe8e:	6018      	str	r0, [r3, #0]
   1fe90:	6011      	str	r1, [r2, #0]
   1fe92:	e706      	b.n	1fca2 <IPC_IRQHandler+0x6e>
   1fe94:	e000e100 	.word	0xe000e100
   1fe98:	4002a000 	.word	0x4002a000
   1fe9c:	4002a11c 	.word	0x4002a11c
   1fea0:	4002a108 	.word	0x4002a108
   1fea4:	2002242c 	.word	0x2002242c
   1fea8:	4002a100 	.word	0x4002a100
   1feac:	2002241c 	.word	0x2002241c
   1feb0:	4002a110 	.word	0x4002a110
   1feb4:	4002a118 	.word	0x4002a118
   1feb8:	4002a5a0 	.word	0x4002a5a0
   1febc:	4002a308 	.word	0x4002a308
   1fec0:	4002a590 	.word	0x4002a590
   1fec4:	4002a598 	.word	0x4002a598
   1fec8:	20027554 	.word	0x20027554
   1fecc:	04400004 	.word	0x04400004
   1fed0:	20022430 	.word	0x20022430
   1fed4:	20022424 	.word	0x20022424
   1fed8:	05500001 	.word	0x05500001
   1fedc:	4002a5a8 	.word	0x4002a5a8
   1fee0:	4002a5ac 	.word	0x4002a5ac

0001fee4 <rpc_transport_ipc_rx_init>:
   1fee4:	2800      	cmp	r0, #0
   1fee6:	f000 8108 	beq.w	200fa <rpc_transport_ipc_rx_init+0x216>
   1feea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feee:	6805      	ldr	r5, [r0, #0]
   1fef0:	b097      	sub	sp, #92	; 0x5c
   1fef2:	2d00      	cmp	r5, #0
   1fef4:	f000 80f7 	beq.w	200e6 <rpc_transport_ipc_rx_init+0x202>
   1fef8:	6883      	ldr	r3, [r0, #8]
   1fefa:	2b00      	cmp	r3, #0
   1fefc:	f000 80f3 	beq.w	200e6 <rpc_transport_ipc_rx_init+0x202>
   1ff00:	6906      	ldr	r6, [r0, #16]
   1ff02:	2e00      	cmp	r6, #0
   1ff04:	f000 80ef 	beq.w	200e6 <rpc_transport_ipc_rx_init+0x202>
   1ff08:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1ff0a:	2c00      	cmp	r4, #0
   1ff0c:	f000 80eb 	beq.w	200e6 <rpc_transport_ipc_rx_init+0x202>
   1ff10:	6844      	ldr	r4, [r0, #4]
   1ff12:	2c1b      	cmp	r4, #27
   1ff14:	f240 80ec 	bls.w	200f0 <rpc_transport_ipc_rx_init+0x20c>
   1ff18:	68c4      	ldr	r4, [r0, #12]
   1ff1a:	2c0b      	cmp	r4, #11
   1ff1c:	f240 80e8 	bls.w	200f0 <rpc_transport_ipc_rx_init+0x20c>
   1ff20:	f8d0 c014 	ldr.w	ip, [r0, #20]
   1ff24:	f1bc 0f17 	cmp.w	ip, #23
   1ff28:	f240 80e2 	bls.w	200f0 <rpc_transport_ipc_rx_init+0x20c>
   1ff2c:	2700      	movs	r7, #0
   1ff2e:	4604      	mov	r4, r0
   1ff30:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 20118 <rpc_transport_ipc_rx_init+0x234>
   1ff34:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1ff36:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 2011c <rpc_transport_ipc_rx_init+0x238>
   1ff3a:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 20120 <rpc_transport_ipc_rx_init+0x23c>
   1ff3e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 20124 <rpc_transport_ipc_rx_init+0x240>
   1ff42:	e9cd 1200 	strd	r1, r2, [sp]
   1ff46:	f8ca 0000 	str.w	r0, [sl]
   1ff4a:	4662      	mov	r2, ip
   1ff4c:	4639      	mov	r1, r7
   1ff4e:	4630      	mov	r0, r6
   1ff50:	f8cb 3000 	str.w	r3, [fp]
   1ff54:	f8c8 7000 	str.w	r7, [r8]
   1ff58:	f8c9 7000 	str.w	r7, [r9]
   1ff5c:	f014 fd9a 	bl	34a94 <memset>
   1ff60:	69e3      	ldr	r3, [r4, #28]
   1ff62:	4630      	mov	r0, r6
   1ff64:	6033      	str	r3, [r6, #0]
   1ff66:	69a3      	ldr	r3, [r4, #24]
   1ff68:	6073      	str	r3, [r6, #4]
   1ff6a:	f7ff fb33 	bl	1f5d4 <ipc_trace_init>
   1ff6e:	2201      	movs	r2, #1
   1ff70:	f04f 0c04 	mov.w	ip, #4
   1ff74:	4b62      	ldr	r3, [pc, #392]	; (20100 <rpc_transport_ipc_rx_init+0x21c>)
   1ff76:	4963      	ldr	r1, [pc, #396]	; (20104 <rpc_transport_ipc_rx_init+0x220>)
   1ff78:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1ff7c:	6809      	ldr	r1, [r1, #0]
   1ff7e:	2080      	movs	r0, #128	; 0x80
   1ff80:	9106      	str	r1, [sp, #24]
   1ff82:	4961      	ldr	r1, [pc, #388]	; (20108 <rpc_transport_ipc_rx_init+0x224>)
   1ff84:	f8dd e018 	ldr.w	lr, [sp, #24]
   1ff88:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   1ff8c:	6809      	ldr	r1, [r1, #0]
   1ff8e:	702f      	strb	r7, [r5, #0]
   1ff90:	9105      	str	r1, [sp, #20]
   1ff92:	706f      	strb	r7, [r5, #1]
   1ff94:	70ef      	strb	r7, [r5, #3]
   1ff96:	70aa      	strb	r2, [r5, #2]
   1ff98:	9905      	ldr	r1, [sp, #20]
   1ff9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1ff9c:	f8db e000 	ldr.w	lr, [fp]
   1ffa0:	6069      	str	r1, [r5, #4]
   1ffa2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1ffa4:	9c01      	ldr	r4, [sp, #4]
   1ffa6:	60a9      	str	r1, [r5, #8]
   1ffa8:	60ec      	str	r4, [r5, #12]
   1ffaa:	9c00      	ldr	r4, [sp, #0]
   1ffac:	4957      	ldr	r1, [pc, #348]	; (2010c <rpc_transport_ipc_rx_init+0x228>)
   1ffae:	61ae      	str	r6, [r5, #24]
   1ffb0:	f8c5 e014 	str.w	lr, [r5, #20]
   1ffb4:	612c      	str	r4, [r5, #16]
   1ffb6:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1ffba:	680c      	ldr	r4, [r1, #0]
   1ffbc:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1ffc0:	9407      	str	r4, [sp, #28]
   1ffc2:	9c07      	ldr	r4, [sp, #28]
   1ffc4:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   1ffc8:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1ffcc:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1ffd0:	9408      	str	r4, [sp, #32]
   1ffd2:	9c08      	ldr	r4, [sp, #32]
   1ffd4:	2410      	movs	r4, #16
   1ffd6:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1ffda:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1ffde:	4d4c      	ldr	r5, [pc, #304]	; (20110 <rpc_transport_ipc_rx_init+0x22c>)
   1ffe0:	9409      	str	r4, [sp, #36]	; 0x24
   1ffe2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1ffe4:	2440      	movs	r4, #64	; 0x40
   1ffe6:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1ffea:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1ffee:	940a      	str	r4, [sp, #40]	; 0x28
   1fff0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1fff2:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1fff6:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1fffa:	900b      	str	r0, [sp, #44]	; 0x2c
   1fffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1fffe:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   20002:	6808      	ldr	r0, [r1, #0]
   20004:	900c      	str	r0, [sp, #48]	; 0x30
   20006:	980c      	ldr	r0, [sp, #48]	; 0x30
   20008:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   2000c:	6888      	ldr	r0, [r1, #8]
   2000e:	900d      	str	r0, [sp, #52]	; 0x34
   20010:	980d      	ldr	r0, [sp, #52]	; 0x34
   20012:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   20016:	6908      	ldr	r0, [r1, #16]
   20018:	900e      	str	r0, [sp, #56]	; 0x38
   2001a:	980e      	ldr	r0, [sp, #56]	; 0x38
   2001c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   20020:	6988      	ldr	r0, [r1, #24]
   20022:	900f      	str	r0, [sp, #60]	; 0x3c
   20024:	980f      	ldr	r0, [sp, #60]	; 0x3c
   20026:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   2002a:	69c8      	ldr	r0, [r1, #28]
   2002c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   20030:	9010      	str	r0, [sp, #64]	; 0x40
   20032:	9810      	ldr	r0, [sp, #64]	; 0x40
   20034:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   20038:	4310      	orrs	r0, r2
   2003a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   2003e:	680c      	ldr	r4, [r1, #0]
   20040:	4834      	ldr	r0, [pc, #208]	; (20114 <rpc_transport_ipc_rx_init+0x230>)
   20042:	9411      	str	r4, [sp, #68]	; 0x44
   20044:	9c11      	ldr	r4, [sp, #68]	; 0x44
   20046:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   2004a:	ea44 040c 	orr.w	r4, r4, ip
   2004e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   20052:	680c      	ldr	r4, [r1, #0]
   20054:	9412      	str	r4, [sp, #72]	; 0x48
   20056:	9c12      	ldr	r4, [sp, #72]	; 0x48
   20058:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   2005c:	f044 0410 	orr.w	r4, r4, #16
   20060:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   20064:	680c      	ldr	r4, [r1, #0]
   20066:	9413      	str	r4, [sp, #76]	; 0x4c
   20068:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   2006a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   2006e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   20072:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   20076:	680c      	ldr	r4, [r1, #0]
   20078:	9414      	str	r4, [sp, #80]	; 0x50
   2007a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2007c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   20080:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   20084:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   20088:	f8da 3000 	ldr.w	r3, [sl]
   2008c:	6809      	ldr	r1, [r1, #0]
   2008e:	015b      	lsls	r3, r3, #5
   20090:	9115      	str	r1, [sp, #84]	; 0x54
   20092:	b2db      	uxtb	r3, r3
   20094:	9915      	ldr	r1, [sp, #84]	; 0x54
   20096:	f8c8 2000 	str.w	r2, [r8]
   2009a:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   2009e:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   200a2:	6046      	str	r6, [r0, #4]
   200a4:	9704      	str	r7, [sp, #16]
   200a6:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   200aa:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   200ae:	9304      	str	r3, [sp, #16]
   200b0:	9b04      	ldr	r3, [sp, #16]
   200b2:	f8d8 3000 	ldr.w	r3, [r8]
   200b6:	4293      	cmp	r3, r2
   200b8:	d110      	bne.n	200dc <rpc_transport_ipc_rx_init+0x1f8>
   200ba:	f247 5430 	movw	r4, #30000	; 0x7530
   200be:	2564      	movs	r5, #100	; 0x64
   200c0:	e000      	b.n	200c4 <rpc_transport_ipc_rx_init+0x1e0>
   200c2:	b15c      	cbz	r4, 200dc <rpc_transport_ipc_rx_init+0x1f8>
   200c4:	a903      	add	r1, sp, #12
   200c6:	2000      	movs	r0, #0
   200c8:	9503      	str	r5, [sp, #12]
   200ca:	f7fd f927 	bl	1d31c <bsd_os_timedwait>
   200ce:	9b03      	ldr	r3, [sp, #12]
   200d0:	f8d8 2000 	ldr.w	r2, [r8]
   200d4:	3b64      	subs	r3, #100	; 0x64
   200d6:	2a01      	cmp	r2, #1
   200d8:	441c      	add	r4, r3
   200da:	d0f2      	beq.n	200c2 <rpc_transport_ipc_rx_init+0x1de>
   200dc:	f8d9 0000 	ldr.w	r0, [r9]
   200e0:	b017      	add	sp, #92	; 0x5c
   200e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200e6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   200ea:	b017      	add	sp, #92	; 0x5c
   200ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200f0:	f24c 0009 	movw	r0, #49161	; 0xc009
   200f4:	b017      	add	sp, #92	; 0x5c
   200f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200fa:	f24c 000e 	movw	r0, #49166	; 0xc00e
   200fe:	4770      	bx	lr
   20100:	4002a000 	.word	0x4002a000
   20104:	4002a610 	.word	0x4002a610
   20108:	4002a614 	.word	0x4002a614
   2010c:	4002a590 	.word	0x4002a590
   20110:	40005000 	.word	0x40005000
   20114:	e000e100 	.word	0xe000e100
   20118:	20022420 	.word	0x20022420
   2011c:	2002242c 	.word	0x2002242c
   20120:	20022430 	.word	0x20022430
   20124:	2002241c 	.word	0x2002241c

00020128 <rpc_transport_ipc_msg_free>:
   20128:	b470      	push	{r4, r5, r6}
   2012a:	4e17      	ldr	r6, [pc, #92]	; (20188 <rpc_transport_ipc_msg_free+0x60>)
   2012c:	6831      	ldr	r1, [r6, #0]
   2012e:	680d      	ldr	r5, [r1, #0]
   20130:	b1ad      	cbz	r5, 2015e <rpc_transport_ipc_msg_free+0x36>
   20132:	688b      	ldr	r3, [r1, #8]
   20134:	4283      	cmp	r3, r0
   20136:	d024      	beq.n	20182 <rpc_transport_ipc_msg_free+0x5a>
   20138:	2300      	movs	r3, #0
   2013a:	3301      	adds	r3, #1
   2013c:	00da      	lsls	r2, r3, #3
   2013e:	429d      	cmp	r5, r3
   20140:	eb01 0402 	add.w	r4, r1, r2
   20144:	d00b      	beq.n	2015e <rpc_transport_ipc_msg_free+0x36>
   20146:	68a4      	ldr	r4, [r4, #8]
   20148:	42a0      	cmp	r0, r4
   2014a:	d1f6      	bne.n	2013a <rpc_transport_ipc_msg_free+0x12>
   2014c:	3204      	adds	r2, #4
   2014e:	588b      	ldr	r3, [r1, r2]
   20150:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   20154:	f043 0303 	orr.w	r3, r3, #3
   20158:	508b      	str	r3, [r1, r2]
   2015a:	bc70      	pop	{r4, r5, r6}
   2015c:	4770      	bx	lr
   2015e:	6871      	ldr	r1, [r6, #4]
   20160:	680d      	ldr	r5, [r1, #0]
   20162:	2d00      	cmp	r5, #0
   20164:	d0f9      	beq.n	2015a <rpc_transport_ipc_msg_free+0x32>
   20166:	688b      	ldr	r3, [r1, #8]
   20168:	4283      	cmp	r3, r0
   2016a:	d00a      	beq.n	20182 <rpc_transport_ipc_msg_free+0x5a>
   2016c:	2300      	movs	r3, #0
   2016e:	3301      	adds	r3, #1
   20170:	00da      	lsls	r2, r3, #3
   20172:	429d      	cmp	r5, r3
   20174:	eb01 0402 	add.w	r4, r1, r2
   20178:	d0ef      	beq.n	2015a <rpc_transport_ipc_msg_free+0x32>
   2017a:	68a4      	ldr	r4, [r4, #8]
   2017c:	42a0      	cmp	r0, r4
   2017e:	d1f6      	bne.n	2016e <rpc_transport_ipc_msg_free+0x46>
   20180:	e7e4      	b.n	2014c <rpc_transport_ipc_msg_free+0x24>
   20182:	2204      	movs	r2, #4
   20184:	e7e3      	b.n	2014e <rpc_transport_ipc_msg_free+0x26>
   20186:	bf00      	nop
   20188:	20022424 	.word	0x20022424

0002018c <rpc_transport_ipc_tx_init>:
   2018c:	2800      	cmp	r0, #0
   2018e:	f000 80b8 	beq.w	20302 <rpc_transport_ipc_tx_init+0x176>
   20192:	2900      	cmp	r1, #0
   20194:	f000 80b5 	beq.w	20302 <rpc_transport_ipc_tx_init+0x176>
   20198:	2a00      	cmp	r2, #0
   2019a:	f000 80b2 	beq.w	20302 <rpc_transport_ipc_tx_init+0x176>
   2019e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201a2:	6a04      	ldr	r4, [r0, #32]
   201a4:	b085      	sub	sp, #20
   201a6:	2c00      	cmp	r4, #0
   201a8:	f000 80a6 	beq.w	202f8 <rpc_transport_ipc_tx_init+0x16c>
   201ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   201ae:	2800      	cmp	r0, #0
   201b0:	f000 80a2 	beq.w	202f8 <rpc_transport_ipc_tx_init+0x16c>
   201b4:	f642 4587 	movw	r5, #11399	; 0x2c87
   201b8:	f04f 0a00 	mov.w	sl, #0
   201bc:	4e55      	ldr	r6, [pc, #340]	; (20314 <rpc_transport_ipc_tx_init+0x188>)
   201be:	42a8      	cmp	r0, r5
   201c0:	f886 a000 	strb.w	sl, [r6]
   201c4:	f240 80a0 	bls.w	20308 <rpc_transport_ipc_tx_init+0x17c>
   201c8:	2708      	movs	r7, #8
   201ca:	f8df 9180 	ldr.w	r9, [pc, #384]	; 2034c <rpc_transport_ipc_tx_init+0x1c0>
   201ce:	4620      	mov	r0, r4
   201d0:	4616      	mov	r6, r2
   201d2:	460d      	mov	r5, r1
   201d4:	2244      	movs	r2, #68	; 0x44
   201d6:	4651      	mov	r1, sl
   201d8:	f8c9 4000 	str.w	r4, [r9]
   201dc:	f014 fc5a 	bl	34a94 <memset>
   201e0:	f8d9 2000 	ldr.w	r2, [r9]
   201e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   201e8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 20350 <rpc_transport_ipc_tx_init+0x1c4>
   201ec:	f882 a001 	strb.w	sl, [r2, #1]
   201f0:	f882 a002 	strb.w	sl, [r2, #2]
   201f4:	f882 a003 	strb.w	sl, [r2, #3]
   201f8:	7017      	strb	r7, [r2, #0]
   201fa:	4618      	mov	r0, r3
   201fc:	2244      	movs	r2, #68	; 0x44
   201fe:	4651      	mov	r1, sl
   20200:	f8c8 3000 	str.w	r3, [r8]
   20204:	f014 fc46 	bl	34a94 <memset>
   20208:	f8d8 2000 	ldr.w	r2, [r8]
   2020c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   20210:	f8df b140 	ldr.w	fp, [pc, #320]	; 20354 <rpc_transport_ipc_tx_init+0x1c8>
   20214:	7017      	strb	r7, [r2, #0]
   20216:	f882 a001 	strb.w	sl, [r2, #1]
   2021a:	f882 a002 	strb.w	sl, [r2, #2]
   2021e:	f882 a003 	strb.w	sl, [r2, #3]
   20222:	4618      	mov	r0, r3
   20224:	f44f 7200 	mov.w	r2, #512	; 0x200
   20228:	4651      	mov	r1, sl
   2022a:	f8cb 3000 	str.w	r3, [fp]
   2022e:	f014 fc31 	bl	34a94 <memset>
   20232:	4b39      	ldr	r3, [pc, #228]	; (20318 <rpc_transport_ipc_tx_init+0x18c>)
   20234:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   20238:	f8c3 c000 	str.w	ip, [r3]
   2023c:	4651      	mov	r1, sl
   2023e:	4660      	mov	r0, ip
   20240:	f44f 7200 	mov.w	r2, #512	; 0x200
   20244:	f014 fc26 	bl	34a94 <memset>
   20248:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   2024c:	2106      	movs	r1, #6
   2024e:	f04f 0e01 	mov.w	lr, #1
   20252:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   20256:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   2025a:	4b30      	ldr	r3, [pc, #192]	; (2031c <rpc_transport_ipc_tx_init+0x190>)
   2025c:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   20260:	605c      	str	r4, [r3, #4]
   20262:	4c2f      	ldr	r4, [pc, #188]	; (20320 <rpc_transport_ipc_tx_init+0x194>)
   20264:	f8c3 c008 	str.w	ip, [r3, #8]
   20268:	8199      	strh	r1, [r3, #12]
   2026a:	f8a3 e000 	strh.w	lr, [r3]
   2026e:	4619      	mov	r1, r3
   20270:	611c      	str	r4, [r3, #16]
   20272:	4b2c      	ldr	r3, [pc, #176]	; (20324 <rpc_transport_ipc_tx_init+0x198>)
   20274:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 20358 <rpc_transport_ipc_tx_init+0x1cc>
   20278:	6120      	str	r0, [r4, #16]
   2027a:	482b      	ldr	r0, [pc, #172]	; (20328 <rpc_transport_ipc_tx_init+0x19c>)
   2027c:	6063      	str	r3, [r4, #4]
   2027e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   20282:	60a0      	str	r0, [r4, #8]
   20284:	f8c4 c000 	str.w	ip, [r4]
   20288:	4828      	ldr	r0, [pc, #160]	; (2032c <rpc_transport_ipc_tx_init+0x1a0>)
   2028a:	60e3      	str	r3, [r4, #12]
   2028c:	6162      	str	r2, [r4, #20]
   2028e:	f006 f9ef 	bl	26670 <nrf_mem_register>
   20292:	2800      	cmp	r0, #0
   20294:	d132      	bne.n	202fc <rpc_transport_ipc_tx_init+0x170>
   20296:	f04f 0c02 	mov.w	ip, #2
   2029a:	2420      	movs	r4, #32
   2029c:	f8d9 1000 	ldr.w	r1, [r9]
   202a0:	f8db 2000 	ldr.w	r2, [fp]
   202a4:	6029      	str	r1, [r5, #0]
   202a6:	4b1c      	ldr	r3, [pc, #112]	; (20318 <rpc_transport_ipc_tx_init+0x18c>)
   202a8:	f8d8 1000 	ldr.w	r1, [r8]
   202ac:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 2035c <rpc_transport_ipc_tx_init+0x1d0>
   202b0:	4d1f      	ldr	r5, [pc, #124]	; (20330 <rpc_transport_ipc_tx_init+0x1a4>)
   202b2:	6031      	str	r1, [r6, #0]
   202b4:	f8ce 2000 	str.w	r2, [lr]
   202b8:	681b      	ldr	r3, [r3, #0]
   202ba:	491e      	ldr	r1, [pc, #120]	; (20334 <rpc_transport_ipc_tx_init+0x1a8>)
   202bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   202c0:	602a      	str	r2, [r5, #0]
   202c2:	4e1d      	ldr	r6, [pc, #116]	; (20338 <rpc_transport_ipc_tx_init+0x1ac>)
   202c4:	4a1d      	ldr	r2, [pc, #116]	; (2033c <rpc_transport_ipc_tx_init+0x1b0>)
   202c6:	4d1e      	ldr	r5, [pc, #120]	; (20340 <rpc_transport_ipc_tx_init+0x1b4>)
   202c8:	600b      	str	r3, [r1, #0]
   202ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
   202ce:	491d      	ldr	r1, [pc, #116]	; (20344 <rpc_transport_ipc_tx_init+0x1b8>)
   202d0:	6033      	str	r3, [r6, #0]
   202d2:	8028      	strh	r0, [r5, #0]
   202d4:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   202d8:	6809      	ldr	r1, [r1, #0]
   202da:	4b1b      	ldr	r3, [pc, #108]	; (20348 <rpc_transport_ipc_tx_init+0x1bc>)
   202dc:	9103      	str	r1, [sp, #12]
   202de:	9903      	ldr	r1, [sp, #12]
   202e0:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   202e4:	6819      	ldr	r1, [r3, #0]
   202e6:	443b      	add	r3, r7
   202e8:	9102      	str	r1, [sp, #8]
   202ea:	9902      	ldr	r1, [sp, #8]
   202ec:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   202f0:	681b      	ldr	r3, [r3, #0]
   202f2:	9301      	str	r3, [sp, #4]
   202f4:	9b01      	ldr	r3, [sp, #4]
   202f6:	e001      	b.n	202fc <rpc_transport_ipc_tx_init+0x170>
   202f8:	f24c 0007 	movw	r0, #49159	; 0xc007
   202fc:	b005      	add	sp, #20
   202fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20302:	f24c 000e 	movw	r0, #49166	; 0xc00e
   20306:	4770      	bx	lr
   20308:	f24c 0004 	movw	r0, #49156	; 0xc004
   2030c:	b005      	add	sp, #20
   2030e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20312:	bf00      	nop
   20314:	20028f7d 	.word	0x20028f7d
   20318:	2002245c 	.word	0x2002245c
   2031c:	20022448 	.word	0x20022448
   20320:	2002246c 	.word	0x2002246c
   20324:	00040080 	.word	0x00040080
   20328:	00040100 	.word	0x00040100
   2032c:	20022434 	.word	0x20022434
   20330:	20022440 	.word	0x20022440
   20334:	2002243c 	.word	0x2002243c
   20338:	20022438 	.word	0x20022438
   2033c:	4002a000 	.word	0x4002a000
   20340:	20027556 	.word	0x20027556
   20344:	4002a514 	.word	0x4002a514
   20348:	4002a51c 	.word	0x4002a51c
   2034c:	20022468 	.word	0x20022468
   20350:	20022460 	.word	0x20022460
   20354:	20022464 	.word	0x20022464
   20358:	00080040 	.word	0x00080040
   2035c:	20022444 	.word	0x20022444

00020360 <rpc_transport_ipc_send>:
   20360:	2800      	cmp	r0, #0
   20362:	d061      	beq.n	20428 <rpc_transport_ipc_send+0xc8>
   20364:	b4f0      	push	{r4, r5, r6, r7}
   20366:	4b34      	ldr	r3, [pc, #208]	; (20438 <rpc_transport_ipc_send+0xd8>)
   20368:	b082      	sub	sp, #8
   2036a:	681a      	ldr	r2, [r3, #0]
   2036c:	4b33      	ldr	r3, [pc, #204]	; (2043c <rpc_transport_ipc_send+0xdc>)
   2036e:	4282      	cmp	r2, r0
   20370:	d81e      	bhi.n	203b0 <rpc_transport_ipc_send+0x50>
   20372:	681b      	ldr	r3, [r3, #0]
   20374:	4932      	ldr	r1, [pc, #200]	; (20440 <rpc_transport_ipc_send+0xe0>)
   20376:	4283      	cmp	r3, r0
   20378:	6809      	ldr	r1, [r1, #0]
   2037a:	d803      	bhi.n	20384 <rpc_transport_ipc_send+0x24>
   2037c:	4c31      	ldr	r4, [pc, #196]	; (20444 <rpc_transport_ipc_send+0xe4>)
   2037e:	6824      	ldr	r4, [r4, #0]
   20380:	4284      	cmp	r4, r0
   20382:	d849      	bhi.n	20418 <rpc_transport_ipc_send+0xb8>
   20384:	4281      	cmp	r1, r0
   20386:	d90e      	bls.n	203a6 <rpc_transport_ipc_send+0x46>
   20388:	4b2f      	ldr	r3, [pc, #188]	; (20448 <rpc_transport_ipc_send+0xe8>)
   2038a:	781b      	ldrb	r3, [r3, #0]
   2038c:	2b00      	cmp	r3, #0
   2038e:	d14e      	bne.n	2042e <rpc_transport_ipc_send+0xce>
   20390:	1a83      	subs	r3, r0, r2
   20392:	492e      	ldr	r1, [pc, #184]	; (2044c <rpc_transport_ipc_send+0xec>)
   20394:	099f      	lsrs	r7, r3, #6
   20396:	069b      	lsls	r3, r3, #26
   20398:	680a      	ldr	r2, [r1, #0]
   2039a:	4d2d      	ldr	r5, [pc, #180]	; (20450 <rpc_transport_ipc_send+0xf0>)
   2039c:	f04f 0403 	mov.w	r4, #3
   203a0:	f04f 0602 	mov.w	r6, #2
   203a4:	d014      	beq.n	203d0 <rpc_transport_ipc_send+0x70>
   203a6:	f24c 0010 	movw	r0, #49168	; 0xc010
   203aa:	b002      	add	sp, #8
   203ac:	bcf0      	pop	{r4, r5, r6, r7}
   203ae:	4770      	bx	lr
   203b0:	681b      	ldr	r3, [r3, #0]
   203b2:	4298      	cmp	r0, r3
   203b4:	d3f7      	bcc.n	203a6 <rpc_transport_ipc_send+0x46>
   203b6:	4a23      	ldr	r2, [pc, #140]	; (20444 <rpc_transport_ipc_send+0xe4>)
   203b8:	6812      	ldr	r2, [r2, #0]
   203ba:	4290      	cmp	r0, r2
   203bc:	d2f3      	bcs.n	203a6 <rpc_transport_ipc_send+0x46>
   203be:	2401      	movs	r4, #1
   203c0:	1ac3      	subs	r3, r0, r3
   203c2:	4a24      	ldr	r2, [pc, #144]	; (20454 <rpc_transport_ipc_send+0xf4>)
   203c4:	099f      	lsrs	r7, r3, #6
   203c6:	069b      	lsls	r3, r3, #26
   203c8:	4626      	mov	r6, r4
   203ca:	6812      	ldr	r2, [r2, #0]
   203cc:	4d22      	ldr	r5, [pc, #136]	; (20458 <rpc_transport_ipc_send+0xf8>)
   203ce:	d1ea      	bne.n	203a6 <rpc_transport_ipc_send+0x46>
   203d0:	6841      	ldr	r1, [r0, #4]
   203d2:	b2c9      	uxtb	r1, r1
   203d4:	428e      	cmp	r6, r1
   203d6:	d122      	bne.n	2041e <rpc_transport_ipc_send+0xbe>
   203d8:	2020      	movs	r0, #32
   203da:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   203de:	491f      	ldr	r1, [pc, #124]	; (2045c <rpc_transport_ipc_send+0xfc>)
   203e0:	685a      	ldr	r2, [r3, #4]
   203e2:	880e      	ldrh	r6, [r1, #0]
   203e4:	b292      	uxth	r2, r2
   203e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   203ea:	605a      	str	r2, [r3, #4]
   203ec:	685a      	ldr	r2, [r3, #4]
   203ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   203f2:	f042 0201 	orr.w	r2, r2, #1
   203f6:	605a      	str	r2, [r3, #4]
   203f8:	bf00      	nop
   203fa:	3801      	subs	r0, #1
   203fc:	d1fc      	bne.n	203f8 <rpc_transport_ipc_send+0x98>
   203fe:	2201      	movs	r2, #1
   20400:	4b17      	ldr	r3, [pc, #92]	; (20460 <rpc_transport_ipc_send+0x100>)
   20402:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   20406:	682a      	ldr	r2, [r5, #0]
   20408:	880b      	ldrh	r3, [r1, #0]
   2040a:	9201      	str	r2, [sp, #4]
   2040c:	9a01      	ldr	r2, [sp, #4]
   2040e:	3301      	adds	r3, #1
   20410:	800b      	strh	r3, [r1, #0]
   20412:	b002      	add	sp, #8
   20414:	bcf0      	pop	{r4, r5, r6, r7}
   20416:	4770      	bx	lr
   20418:	4281      	cmp	r1, r0
   2041a:	d9d0      	bls.n	203be <rpc_transport_ipc_send+0x5e>
   2041c:	e7b4      	b.n	20388 <rpc_transport_ipc_send+0x28>
   2041e:	f24c 0007 	movw	r0, #49159	; 0xc007
   20422:	b002      	add	sp, #8
   20424:	bcf0      	pop	{r4, r5, r6, r7}
   20426:	4770      	bx	lr
   20428:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2042c:	4770      	bx	lr
   2042e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   20432:	b002      	add	sp, #8
   20434:	bcf0      	pop	{r4, r5, r6, r7}
   20436:	4770      	bx	lr
   20438:	20022444 	.word	0x20022444
   2043c:	2002243c 	.word	0x2002243c
   20440:	20022440 	.word	0x20022440
   20444:	20022438 	.word	0x20022438
   20448:	20028f7d 	.word	0x20028f7d
   2044c:	20022468 	.word	0x20022468
   20450:	4002a00c 	.word	0x4002a00c
   20454:	20022460 	.word	0x20022460
   20458:	4002a004 	.word	0x4002a004
   2045c:	20027556 	.word	0x20027556
   20460:	4002a000 	.word	0x4002a000

00020464 <rpc_transport_ipc_tx_rpc_data_alloc>:
   20464:	4b18      	ldr	r3, [pc, #96]	; (204c8 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   20466:	781b      	ldrb	r3, [r3, #0]
   20468:	bb63      	cbnz	r3, 204c4 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   2046a:	b4f0      	push	{r4, r5, r6, r7}
   2046c:	4a17      	ldr	r2, [pc, #92]	; (204cc <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   2046e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   20472:	6814      	ldr	r4, [r2, #0]
   20474:	4b16      	ldr	r3, [pc, #88]	; (204d0 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   20476:	6825      	ldr	r5, [r4, #0]
   20478:	681e      	ldr	r6, [r3, #0]
   2047a:	b1a5      	cbz	r5, 204a6 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   2047c:	4607      	mov	r7, r0
   2047e:	00c1      	lsls	r1, r0, #3
   20480:	1863      	adds	r3, r4, r1
   20482:	685a      	ldr	r2, [r3, #4]
   20484:	b2d2      	uxtb	r2, r2
   20486:	2a03      	cmp	r2, #3
   20488:	d104      	bne.n	20494 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   2048a:	609f      	str	r7, [r3, #8]
   2048c:	685a      	ldr	r2, [r3, #4]
   2048e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   20492:	605a      	str	r2, [r3, #4]
   20494:	685a      	ldr	r2, [r3, #4]
   20496:	f012 0fff 	tst.w	r2, #255	; 0xff
   2049a:	d101      	bne.n	204a0 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   2049c:	689b      	ldr	r3, [r3, #8]
   2049e:	b12b      	cbz	r3, 204ac <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   204a0:	3001      	adds	r0, #1
   204a2:	42a8      	cmp	r0, r5
   204a4:	d1eb      	bne.n	2047e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   204a6:	2000      	movs	r0, #0
   204a8:	bcf0      	pop	{r4, r5, r6, r7}
   204aa:	4770      	bx	lr
   204ac:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   204b0:	4421      	add	r1, r4
   204b2:	6088      	str	r0, [r1, #8]
   204b4:	6843      	ldr	r3, [r0, #4]
   204b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   204ba:	f043 0302 	orr.w	r3, r3, #2
   204be:	6043      	str	r3, [r0, #4]
   204c0:	bcf0      	pop	{r4, r5, r6, r7}
   204c2:	4770      	bx	lr
   204c4:	2000      	movs	r0, #0
   204c6:	4770      	bx	lr
   204c8:	20028f7d 	.word	0x20028f7d
   204cc:	20022468 	.word	0x20022468
   204d0:	20022464 	.word	0x20022464

000204d4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   204d4:	b4f0      	push	{r4, r5, r6, r7}
   204d6:	4a15      	ldr	r2, [pc, #84]	; (2052c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   204d8:	4b15      	ldr	r3, [pc, #84]	; (20530 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   204da:	6814      	ldr	r4, [r2, #0]
   204dc:	681e      	ldr	r6, [r3, #0]
   204de:	6825      	ldr	r5, [r4, #0]
   204e0:	b1ad      	cbz	r5, 2050e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   204e2:	2000      	movs	r0, #0
   204e4:	4607      	mov	r7, r0
   204e6:	00c1      	lsls	r1, r0, #3
   204e8:	1863      	adds	r3, r4, r1
   204ea:	685a      	ldr	r2, [r3, #4]
   204ec:	b2d2      	uxtb	r2, r2
   204ee:	2a03      	cmp	r2, #3
   204f0:	d104      	bne.n	204fc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   204f2:	609f      	str	r7, [r3, #8]
   204f4:	685a      	ldr	r2, [r3, #4]
   204f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   204fa:	605a      	str	r2, [r3, #4]
   204fc:	685a      	ldr	r2, [r3, #4]
   204fe:	f012 0fff 	tst.w	r2, #255	; 0xff
   20502:	d101      	bne.n	20508 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   20504:	689b      	ldr	r3, [r3, #8]
   20506:	b12b      	cbz	r3, 20514 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   20508:	3001      	adds	r0, #1
   2050a:	4285      	cmp	r5, r0
   2050c:	d1eb      	bne.n	204e6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   2050e:	2000      	movs	r0, #0
   20510:	bcf0      	pop	{r4, r5, r6, r7}
   20512:	4770      	bx	lr
   20514:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   20518:	4421      	add	r1, r4
   2051a:	6088      	str	r0, [r1, #8]
   2051c:	6843      	ldr	r3, [r0, #4]
   2051e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   20522:	f043 0301 	orr.w	r3, r3, #1
   20526:	6043      	str	r3, [r0, #4]
   20528:	bcf0      	pop	{r4, r5, r6, r7}
   2052a:	4770      	bx	lr
   2052c:	20022460 	.word	0x20022460
   20530:	2002245c 	.word	0x2002245c

00020534 <rpc_transport_ipc_tx_data_alloc>:
   20534:	4b03      	ldr	r3, [pc, #12]	; (20544 <rpc_transport_ipc_tx_data_alloc+0x10>)
   20536:	781b      	ldrb	r3, [r3, #0]
   20538:	b90b      	cbnz	r3, 2053e <rpc_transport_ipc_tx_data_alloc+0xa>
   2053a:	f006 b9c9 	b.w	268d0 <nrf_shared_malloc>
   2053e:	2000      	movs	r0, #0
   20540:	4770      	bx	lr
   20542:	bf00      	nop
   20544:	20028f7d 	.word	0x20028f7d

00020548 <rpc_transport_ipc_tx_suspend>:
   20548:	2201      	movs	r2, #1
   2054a:	4b01      	ldr	r3, [pc, #4]	; (20550 <rpc_transport_ipc_tx_suspend+0x8>)
   2054c:	701a      	strb	r2, [r3, #0]
   2054e:	4770      	bx	lr
   20550:	20028f7d 	.word	0x20028f7d

00020554 <secure_client_socket>:
   20554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20558:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2055c:	460c      	mov	r4, r1
   2055e:	680b      	ldr	r3, [r1, #0]
   20560:	4f46      	ldr	r7, [pc, #280]	; (2067c <secure_client_socket+0x128>)
   20562:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   20566:	600b      	str	r3, [r1, #0]
   20568:	680b      	ldr	r3, [r1, #0]
   2056a:	00c6      	lsls	r6, r0, #3
   2056c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20570:	600b      	str	r3, [r1, #0]
   20572:	eb07 0a06 	add.w	sl, r7, r6
   20576:	b084      	sub	sp, #16
   20578:	f8da 3004 	ldr.w	r3, [sl, #4]
   2057c:	6989      	ldr	r1, [r1, #24]
   2057e:	f247 0281 	movw	r2, #28801	; 0x7081
   20582:	4605      	mov	r5, r0
   20584:	f8d4 8000 	ldr.w	r8, [r4]
   20588:	e9cd cc02 	strd	ip, ip, [sp, #8]
   2058c:	f000 fd92 	bl	210b4 <ip_interface_request_create>
   20590:	2800      	cmp	r0, #0
   20592:	d06d      	beq.n	20670 <secure_client_socket+0x11c>
   20594:	f8da 2004 	ldr.w	r2, [sl, #4]
   20598:	4681      	mov	r9, r0
   2059a:	2a00      	cmp	r2, #0
   2059c:	d15d      	bne.n	2065a <secure_client_socket+0x106>
   2059e:	4b38      	ldr	r3, [pc, #224]	; (20680 <secure_client_socket+0x12c>)
   205a0:	1971      	adds	r1, r6, r5
   205a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   205a6:	2224      	movs	r2, #36	; 0x24
   205a8:	f109 0014 	add.w	r0, r9, #20
   205ac:	f014 fa38 	bl	34a20 <memcpy>
   205b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   205b4:	4649      	mov	r1, r9
   205b6:	3324      	adds	r3, #36	; 0x24
   205b8:	f8c9 3008 	str.w	r3, [r9, #8]
   205bc:	6822      	ldr	r2, [r4, #0]
   205be:	4643      	mov	r3, r8
   205c0:	0c12      	lsrs	r2, r2, #16
   205c2:	0412      	lsls	r2, r2, #16
   205c4:	f042 020a 	orr.w	r2, r2, #10
   205c8:	6022      	str	r2, [r4, #0]
   205ca:	4620      	mov	r0, r4
   205cc:	f247 0281 	movw	r2, #28801	; 0x7081
   205d0:	f000 fd90 	bl	210f4 <ip_interface_request_send>
   205d4:	4603      	mov	r3, r0
   205d6:	b968      	cbnz	r0, 205f4 <secure_client_socket+0xa0>
   205d8:	6823      	ldr	r3, [r4, #0]
   205da:	00db      	lsls	r3, r3, #3
   205dc:	d40e      	bmi.n	205fc <secure_client_socket+0xa8>
   205de:	ab03      	add	r3, sp, #12
   205e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   205e4:	210b      	movs	r1, #11
   205e6:	4628      	mov	r0, r5
   205e8:	f000 fd98 	bl	2111c <ip_interface_wait>
   205ec:	4603      	mov	r3, r0
   205ee:	b150      	cbz	r0, 20606 <secure_client_socket+0xb2>
   205f0:	f8c4 8000 	str.w	r8, [r4]
   205f4:	4618      	mov	r0, r3
   205f6:	b004      	add	sp, #16
   205f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   205fc:	2373      	movs	r3, #115	; 0x73
   205fe:	4618      	mov	r0, r3
   20600:	b004      	add	sp, #16
   20602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20606:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   2060a:	ab02      	add	r3, sp, #8
   2060c:	4611      	mov	r1, r2
   2060e:	4628      	mov	r0, r5
   20610:	f000 fd84 	bl	2111c <ip_interface_wait>
   20614:	4603      	mov	r3, r0
   20616:	bb30      	cbnz	r0, 20666 <secure_client_socket+0x112>
   20618:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   2061c:	b138      	cbz	r0, 2062e <secure_client_socket+0xda>
   2061e:	9301      	str	r3, [sp, #4]
   20620:	f006 f94a 	bl	268b8 <nrf_free>
   20624:	9b01      	ldr	r3, [sp, #4]
   20626:	443e      	add	r6, r7
   20628:	6073      	str	r3, [r6, #4]
   2062a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   2062e:	4618      	mov	r0, r3
   20630:	6822      	ldr	r2, [r4, #0]
   20632:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   20636:	6022      	str	r2, [r4, #0]
   20638:	6822      	ldr	r2, [r4, #0]
   2063a:	0c12      	lsrs	r2, r2, #16
   2063c:	0412      	lsls	r2, r2, #16
   2063e:	f042 020c 	orr.w	r2, r2, #12
   20642:	6022      	str	r2, [r4, #0]
   20644:	6822      	ldr	r2, [r4, #0]
   20646:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2064a:	6022      	str	r2, [r4, #0]
   2064c:	6822      	ldr	r2, [r4, #0]
   2064e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   20652:	6022      	str	r2, [r4, #0]
   20654:	b004      	add	sp, #16
   20656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2065a:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   2065e:	6800      	ldr	r0, [r0, #0]
   20660:	f014 f9de 	bl	34a20 <memcpy>
   20664:	e79b      	b.n	2059e <secure_client_socket+0x4a>
   20666:	2b73      	cmp	r3, #115	; 0x73
   20668:	d0c4      	beq.n	205f4 <secure_client_socket+0xa0>
   2066a:	f8c4 8000 	str.w	r8, [r4]
   2066e:	e7c1      	b.n	205f4 <secure_client_socket+0xa0>
   20670:	230c      	movs	r3, #12
   20672:	4618      	mov	r0, r3
   20674:	b004      	add	sp, #16
   20676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2067a:	bf00      	nop
   2067c:	200225c8 	.word	0x200225c8
   20680:	20022484 	.word	0x20022484

00020684 <tls_interface_init>:
   20684:	2201      	movs	r2, #1
   20686:	4b02      	ldr	r3, [pc, #8]	; (20690 <tls_interface_init+0xc>)
   20688:	2000      	movs	r0, #0
   2068a:	701a      	strb	r2, [r3, #0]
   2068c:	4770      	bx	lr
   2068e:	bf00      	nop
   20690:	20028f7e 	.word	0x20028f7e

00020694 <tls_interface_open>:
   20694:	b538      	push	{r3, r4, r5, lr}
   20696:	4b23      	ldr	r3, [pc, #140]	; (20724 <tls_interface_open+0x90>)
   20698:	781b      	ldrb	r3, [r3, #0]
   2069a:	2b00      	cmp	r3, #0
   2069c:	d03c      	beq.n	20718 <tls_interface_open+0x84>
   2069e:	1e4b      	subs	r3, r1, #1
   206a0:	2b01      	cmp	r3, #1
   206a2:	d808      	bhi.n	206b6 <tls_interface_open+0x22>
   206a4:	4614      	mov	r4, r2
   206a6:	b162      	cbz	r2, 206c2 <tls_interface_open+0x2e>
   206a8:	2901      	cmp	r1, #1
   206aa:	d02d      	beq.n	20708 <tls_interface_open+0x74>
   206ac:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   206b0:	bf08      	it	eq
   206b2:	2202      	moveq	r2, #2
   206b4:	d00d      	beq.n	206d2 <tls_interface_open+0x3e>
   206b6:	2029      	movs	r0, #41	; 0x29
   206b8:	f7fc feda 	bl	1d470 <bsd_os_errno_set>
   206bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   206c0:	e020      	b.n	20704 <tls_interface_open+0x70>
   206c2:	2901      	cmp	r1, #1
   206c4:	bf0b      	itete	eq
   206c6:	2201      	moveq	r2, #1
   206c8:	2202      	movne	r2, #2
   206ca:	f44f 7482 	moveq.w	r4, #260	; 0x104
   206ce:	f44f 7487 	movne.w	r4, #270	; 0x10e
   206d2:	f000 fd55 	bl	21180 <ip_interface_open>
   206d6:	1e05      	subs	r5, r0, #0
   206d8:	db1b      	blt.n	20712 <tls_interface_open+0x7e>
   206da:	4b13      	ldr	r3, [pc, #76]	; (20728 <tls_interface_open+0x94>)
   206dc:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   206e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   206e4:	2224      	movs	r2, #36	; 0x24
   206e6:	4911      	ldr	r1, [pc, #68]	; (2072c <tls_interface_open+0x98>)
   206e8:	f014 f99a 	bl	34a20 <memcpy>
   206ec:	4628      	mov	r0, r5
   206ee:	f006 fd31 	bl	27154 <interface_socket_from_handle_get>
   206f2:	6803      	ldr	r3, [r0, #0]
   206f4:	6144      	str	r4, [r0, #20]
   206f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   206fa:	6003      	str	r3, [r0, #0]
   206fc:	6803      	ldr	r3, [r0, #0]
   206fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   20702:	6003      	str	r3, [r0, #0]
   20704:	4628      	mov	r0, r5
   20706:	bd38      	pop	{r3, r4, r5, pc}
   20708:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2070c:	d1d3      	bne.n	206b6 <tls_interface_open+0x22>
   2070e:	460a      	mov	r2, r1
   20710:	e7df      	b.n	206d2 <tls_interface_open+0x3e>
   20712:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20716:	e7f5      	b.n	20704 <tls_interface_open+0x70>
   20718:	2070      	movs	r0, #112	; 0x70
   2071a:	f7fc fea9 	bl	1d470 <bsd_os_errno_set>
   2071e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20722:	e7ef      	b.n	20704 <tls_interface_open+0x70>
   20724:	20028f7e 	.word	0x20028f7e
   20728:	20022484 	.word	0x20022484
   2072c:	00035ff8 	.word	0x00035ff8

00020730 <tls_interface_close>:
   20730:	b538      	push	{r3, r4, r5, lr}
   20732:	4604      	mov	r4, r0
   20734:	f006 fd0e 	bl	27154 <interface_socket_from_handle_get>
   20738:	b180      	cbz	r0, 2075c <tls_interface_close+0x2c>
   2073a:	4d0b      	ldr	r5, [pc, #44]	; (20768 <tls_interface_close+0x38>)
   2073c:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   20740:	b138      	cbz	r0, 20752 <tls_interface_close+0x22>
   20742:	f006 f8b9 	bl	268b8 <nrf_free>
   20746:	2300      	movs	r3, #0
   20748:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2074c:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   20750:	6053      	str	r3, [r2, #4]
   20752:	4620      	mov	r0, r4
   20754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20758:	f000 bdd8 	b.w	2130c <ip_interface_close>
   2075c:	2009      	movs	r0, #9
   2075e:	f7fc fe87 	bl	1d470 <bsd_os_errno_set>
   20762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20766:	bd38      	pop	{r3, r4, r5, pc}
   20768:	200225c8 	.word	0x200225c8

0002076c <tls_interface_sendto>:
   2076c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20770:	460d      	mov	r5, r1
   20772:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20776:	4616      	mov	r6, r2
   20778:	461f      	mov	r7, r3
   2077a:	4604      	mov	r4, r0
   2077c:	f006 fcea 	bl	27154 <interface_socket_from_handle_get>
   20780:	2800      	cmp	r0, #0
   20782:	d03b      	beq.n	207fc <tls_interface_sendto+0x90>
   20784:	6803      	ldr	r3, [r0, #0]
   20786:	b29b      	uxth	r3, r3
   20788:	2b0c      	cmp	r3, #12
   2078a:	d039      	beq.n	20800 <tls_interface_sendto+0x94>
   2078c:	6803      	ldr	r3, [r0, #0]
   2078e:	b29b      	uxth	r3, r3
   20790:	2b0b      	cmp	r3, #11
   20792:	d111      	bne.n	207b8 <tls_interface_sendto+0x4c>
   20794:	4b20      	ldr	r3, [pc, #128]	; (20818 <tls_interface_sendto+0xac>)
   20796:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   2079a:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   2079e:	2b02      	cmp	r3, #2
   207a0:	d038      	beq.n	20814 <tls_interface_sendto+0xa8>
   207a2:	6903      	ldr	r3, [r0, #16]
   207a4:	2b01      	cmp	r3, #1
   207a6:	bf14      	ite	ne
   207a8:	2039      	movne	r0, #57	; 0x39
   207aa:	202a      	moveq	r0, #42	; 0x2a
   207ac:	f7fc fe60 	bl	1d470 <bsd_os_errno_set>
   207b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   207b8:	6903      	ldr	r3, [r0, #16]
   207ba:	2b01      	cmp	r3, #1
   207bc:	d00b      	beq.n	207d6 <tls_interface_sendto+0x6a>
   207be:	2b02      	cmp	r3, #2
   207c0:	d001      	beq.n	207c6 <tls_interface_sendto+0x5a>
   207c2:	2039      	movs	r0, #57	; 0x39
   207c4:	e7f2      	b.n	207ac <tls_interface_sendto+0x40>
   207c6:	6803      	ldr	r3, [r0, #0]
   207c8:	b29b      	uxth	r3, r3
   207ca:	2b02      	cmp	r3, #2
   207cc:	d007      	beq.n	207de <tls_interface_sendto+0x72>
   207ce:	6803      	ldr	r3, [r0, #0]
   207d0:	b29b      	uxth	r3, r3
   207d2:	2b04      	cmp	r3, #4
   207d4:	d003      	beq.n	207de <tls_interface_sendto+0x72>
   207d6:	6803      	ldr	r3, [r0, #0]
   207d8:	b29b      	uxth	r3, r3
   207da:	2b05      	cmp	r3, #5
   207dc:	d1f1      	bne.n	207c2 <tls_interface_sendto+0x56>
   207de:	4b0e      	ldr	r3, [pc, #56]	; (20818 <tls_interface_sendto+0xac>)
   207e0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   207e4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   207e8:	2b02      	cmp	r3, #2
   207ea:	d1ea      	bne.n	207c2 <tls_interface_sendto+0x56>
   207ec:	4601      	mov	r1, r0
   207ee:	4620      	mov	r0, r4
   207f0:	f7ff feb0 	bl	20554 <secure_client_socket>
   207f4:	2800      	cmp	r0, #0
   207f6:	d003      	beq.n	20800 <tls_interface_sendto+0x94>
   207f8:	dcd8      	bgt.n	207ac <tls_interface_sendto+0x40>
   207fa:	e7d9      	b.n	207b0 <tls_interface_sendto+0x44>
   207fc:	2009      	movs	r0, #9
   207fe:	e7d5      	b.n	207ac <tls_interface_sendto+0x40>
   20800:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20804:	463b      	mov	r3, r7
   20806:	4632      	mov	r2, r6
   20808:	4629      	mov	r1, r5
   2080a:	4620      	mov	r0, r4
   2080c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20810:	f000 bdee 	b.w	213f0 <ip_interface_sendto>
   20814:	2023      	movs	r0, #35	; 0x23
   20816:	e7c9      	b.n	207ac <tls_interface_sendto+0x40>
   20818:	20022484 	.word	0x20022484

0002081c <tls_interface_recvfrom>:
   2081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20820:	460d      	mov	r5, r1
   20822:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20826:	4616      	mov	r6, r2
   20828:	461f      	mov	r7, r3
   2082a:	4604      	mov	r4, r0
   2082c:	f006 fc92 	bl	27154 <interface_socket_from_handle_get>
   20830:	2800      	cmp	r0, #0
   20832:	d038      	beq.n	208a6 <tls_interface_recvfrom+0x8a>
   20834:	6803      	ldr	r3, [r0, #0]
   20836:	b29b      	uxth	r3, r3
   20838:	2b0c      	cmp	r3, #12
   2083a:	d00f      	beq.n	2085c <tls_interface_recvfrom+0x40>
   2083c:	6803      	ldr	r3, [r0, #0]
   2083e:	b29b      	uxth	r3, r3
   20840:	2b0d      	cmp	r3, #13
   20842:	d00b      	beq.n	2085c <tls_interface_recvfrom+0x40>
   20844:	6903      	ldr	r3, [r0, #16]
   20846:	2b01      	cmp	r3, #1
   20848:	d01a      	beq.n	20880 <tls_interface_recvfrom+0x64>
   2084a:	2b02      	cmp	r3, #2
   2084c:	d010      	beq.n	20870 <tls_interface_recvfrom+0x54>
   2084e:	2023      	movs	r0, #35	; 0x23
   20850:	f7fc fe0e 	bl	1d470 <bsd_os_errno_set>
   20854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2085c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20860:	463b      	mov	r3, r7
   20862:	4632      	mov	r2, r6
   20864:	4629      	mov	r1, r5
   20866:	4620      	mov	r0, r4
   20868:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2086c:	f000 bf26 	b.w	216bc <ip_interface_recvfrom>
   20870:	6803      	ldr	r3, [r0, #0]
   20872:	b29b      	uxth	r3, r3
   20874:	2b02      	cmp	r3, #2
   20876:	d007      	beq.n	20888 <tls_interface_recvfrom+0x6c>
   20878:	6803      	ldr	r3, [r0, #0]
   2087a:	b29b      	uxth	r3, r3
   2087c:	2b04      	cmp	r3, #4
   2087e:	d003      	beq.n	20888 <tls_interface_recvfrom+0x6c>
   20880:	6803      	ldr	r3, [r0, #0]
   20882:	b29b      	uxth	r3, r3
   20884:	2b05      	cmp	r3, #5
   20886:	d1e2      	bne.n	2084e <tls_interface_recvfrom+0x32>
   20888:	4b08      	ldr	r3, [pc, #32]	; (208ac <tls_interface_recvfrom+0x90>)
   2088a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2088e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20892:	2b02      	cmp	r3, #2
   20894:	d1db      	bne.n	2084e <tls_interface_recvfrom+0x32>
   20896:	4601      	mov	r1, r0
   20898:	4620      	mov	r0, r4
   2089a:	f7ff fe5b 	bl	20554 <secure_client_socket>
   2089e:	2800      	cmp	r0, #0
   208a0:	d0dc      	beq.n	2085c <tls_interface_recvfrom+0x40>
   208a2:	dcd5      	bgt.n	20850 <tls_interface_recvfrom+0x34>
   208a4:	e7d6      	b.n	20854 <tls_interface_recvfrom+0x38>
   208a6:	2009      	movs	r0, #9
   208a8:	e7d2      	b.n	20850 <tls_interface_recvfrom+0x34>
   208aa:	bf00      	nop
   208ac:	20022484 	.word	0x20022484

000208b0 <tls_interface_bind>:
   208b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   208b4:	b082      	sub	sp, #8
   208b6:	460e      	mov	r6, r1
   208b8:	4617      	mov	r7, r2
   208ba:	4605      	mov	r5, r0
   208bc:	f006 fc4a 	bl	27154 <interface_socket_from_handle_get>
   208c0:	2800      	cmp	r0, #0
   208c2:	d069      	beq.n	20998 <tls_interface_bind+0xe8>
   208c4:	6803      	ldr	r3, [r0, #0]
   208c6:	4604      	mov	r4, r0
   208c8:	b29b      	uxth	r3, r3
   208ca:	2b02      	cmp	r3, #2
   208cc:	d158      	bne.n	20980 <tls_interface_bind+0xd0>
   208ce:	463a      	mov	r2, r7
   208d0:	4631      	mov	r1, r6
   208d2:	4628      	mov	r0, r5
   208d4:	f001 f8dc 	bl	21a90 <ip_interface_bind>
   208d8:	2800      	cmp	r0, #0
   208da:	d148      	bne.n	2096e <tls_interface_bind+0xbe>
   208dc:	00ee      	lsls	r6, r5, #3
   208de:	4f2f      	ldr	r7, [pc, #188]	; (2099c <tls_interface_bind+0xec>)
   208e0:	1973      	adds	r3, r6, r5
   208e2:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   208e6:	2b01      	cmp	r3, #1
   208e8:	d002      	beq.n	208f0 <tls_interface_bind+0x40>
   208ea:	b002      	add	sp, #8
   208ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   208f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   208f4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 209a0 <tls_interface_bind+0xf0>
   208f8:	f247 0281 	movw	r2, #28801	; 0x7081
   208fc:	eb0a 0906 	add.w	r9, sl, r6
   20900:	f8d9 3004 	ldr.w	r3, [r9, #4]
   20904:	69a1      	ldr	r1, [r4, #24]
   20906:	4628      	mov	r0, r5
   20908:	f8cd c004 	str.w	ip, [sp, #4]
   2090c:	f000 fbd2 	bl	210b4 <ip_interface_request_create>
   20910:	4680      	mov	r8, r0
   20912:	2800      	cmp	r0, #0
   20914:	d03e      	beq.n	20994 <tls_interface_bind+0xe4>
   20916:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2091a:	bbaa      	cbnz	r2, 20988 <tls_interface_bind+0xd8>
   2091c:	1971      	adds	r1, r6, r5
   2091e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   20922:	2224      	movs	r2, #36	; 0x24
   20924:	f108 0014 	add.w	r0, r8, #20
   20928:	f014 f87a 	bl	34a20 <memcpy>
   2092c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20930:	4641      	mov	r1, r8
   20932:	3324      	adds	r3, #36	; 0x24
   20934:	f8c8 3008 	str.w	r3, [r8, #8]
   20938:	6822      	ldr	r2, [r4, #0]
   2093a:	2304      	movs	r3, #4
   2093c:	0c12      	lsrs	r2, r2, #16
   2093e:	0412      	lsls	r2, r2, #16
   20940:	f042 020a 	orr.w	r2, r2, #10
   20944:	6022      	str	r2, [r4, #0]
   20946:	4620      	mov	r0, r4
   20948:	f247 0281 	movw	r2, #28801	; 0x7081
   2094c:	f000 fbd2 	bl	210f4 <ip_interface_request_send>
   20950:	b968      	cbnz	r0, 2096e <tls_interface_bind+0xbe>
   20952:	6823      	ldr	r3, [r4, #0]
   20954:	00db      	lsls	r3, r3, #3
   20956:	d415      	bmi.n	20984 <tls_interface_bind+0xd4>
   20958:	4628      	mov	r0, r5
   2095a:	ab01      	add	r3, sp, #4
   2095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20960:	210b      	movs	r1, #11
   20962:	f000 fbdb 	bl	2111c <ip_interface_wait>
   20966:	2800      	cmp	r0, #0
   20968:	d0bf      	beq.n	208ea <tls_interface_bind+0x3a>
   2096a:	2304      	movs	r3, #4
   2096c:	6023      	str	r3, [r4, #0]
   2096e:	2800      	cmp	r0, #0
   20970:	ddbb      	ble.n	208ea <tls_interface_bind+0x3a>
   20972:	f7fc fd7d 	bl	1d470 <bsd_os_errno_set>
   20976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2097a:	b002      	add	sp, #8
   2097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20980:	202d      	movs	r0, #45	; 0x2d
   20982:	e7f6      	b.n	20972 <tls_interface_bind+0xc2>
   20984:	2073      	movs	r0, #115	; 0x73
   20986:	e7f4      	b.n	20972 <tls_interface_bind+0xc2>
   20988:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2098c:	6800      	ldr	r0, [r0, #0]
   2098e:	f014 f847 	bl	34a20 <memcpy>
   20992:	e7c3      	b.n	2091c <tls_interface_bind+0x6c>
   20994:	200c      	movs	r0, #12
   20996:	e7ec      	b.n	20972 <tls_interface_bind+0xc2>
   20998:	2009      	movs	r0, #9
   2099a:	e7ea      	b.n	20972 <tls_interface_bind+0xc2>
   2099c:	20022484 	.word	0x20022484
   209a0:	200225c8 	.word	0x200225c8

000209a4 <tls_interface_connect>:
   209a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209a6:	460e      	mov	r6, r1
   209a8:	4617      	mov	r7, r2
   209aa:	4604      	mov	r4, r0
   209ac:	f006 fbd2 	bl	27154 <interface_socket_from_handle_get>
   209b0:	b1e8      	cbz	r0, 209ee <tls_interface_connect+0x4a>
   209b2:	4b13      	ldr	r3, [pc, #76]	; (20a00 <tls_interface_connect+0x5c>)
   209b4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   209b8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   209bc:	2b02      	cmp	r3, #2
   209be:	d11c      	bne.n	209fa <tls_interface_connect+0x56>
   209c0:	6803      	ldr	r3, [r0, #0]
   209c2:	4605      	mov	r5, r0
   209c4:	b29b      	uxth	r3, r3
   209c6:	2b02      	cmp	r3, #2
   209c8:	d003      	beq.n	209d2 <tls_interface_connect+0x2e>
   209ca:	6803      	ldr	r3, [r0, #0]
   209cc:	b29b      	uxth	r3, r3
   209ce:	2b04      	cmp	r3, #4
   209d0:	d113      	bne.n	209fa <tls_interface_connect+0x56>
   209d2:	463a      	mov	r2, r7
   209d4:	4631      	mov	r1, r6
   209d6:	4620      	mov	r0, r4
   209d8:	f000 ff98 	bl	2190c <ip_interface_connect>
   209dc:	b110      	cbz	r0, 209e4 <tls_interface_connect+0x40>
   209de:	2800      	cmp	r0, #0
   209e0:	dc06      	bgt.n	209f0 <tls_interface_connect+0x4c>
   209e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209e4:	4629      	mov	r1, r5
   209e6:	4620      	mov	r0, r4
   209e8:	f7ff fdb4 	bl	20554 <secure_client_socket>
   209ec:	e7f7      	b.n	209de <tls_interface_connect+0x3a>
   209ee:	2009      	movs	r0, #9
   209f0:	f7fc fd3e 	bl	1d470 <bsd_os_errno_set>
   209f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   209f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209fa:	202d      	movs	r0, #45	; 0x2d
   209fc:	e7f8      	b.n	209f0 <tls_interface_connect+0x4c>
   209fe:	bf00      	nop
   20a00:	20022484 	.word	0x20022484

00020a04 <tls_interface_listen>:
   20a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a08:	b085      	sub	sp, #20
   20a0a:	9101      	str	r1, [sp, #4]
   20a0c:	4605      	mov	r5, r0
   20a0e:	f006 fba1 	bl	27154 <interface_socket_from_handle_get>
   20a12:	2800      	cmp	r0, #0
   20a14:	d07c      	beq.n	20b10 <tls_interface_listen+0x10c>
   20a16:	6903      	ldr	r3, [r0, #16]
   20a18:	4604      	mov	r4, r0
   20a1a:	2b01      	cmp	r3, #1
   20a1c:	d176      	bne.n	20b0c <tls_interface_listen+0x108>
   20a1e:	6803      	ldr	r3, [r0, #0]
   20a20:	b29b      	uxth	r3, r3
   20a22:	2b04      	cmp	r3, #4
   20a24:	d062      	beq.n	20aec <tls_interface_listen+0xe8>
   20a26:	6823      	ldr	r3, [r4, #0]
   20a28:	b29b      	uxth	r3, r3
   20a2a:	2b0b      	cmp	r3, #11
   20a2c:	d16e      	bne.n	20b0c <tls_interface_listen+0x108>
   20a2e:	00ee      	lsls	r6, r5, #3
   20a30:	4f38      	ldr	r7, [pc, #224]	; (20b14 <tls_interface_listen+0x110>)
   20a32:	1973      	adds	r3, r6, r5
   20a34:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   20a38:	2b01      	cmp	r3, #1
   20a3a:	d167      	bne.n	20b0c <tls_interface_listen+0x108>
   20a3c:	2201      	movs	r2, #1
   20a3e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   20a42:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 20b18 <tls_interface_listen+0x114>
   20a46:	1973      	adds	r3, r6, r5
   20a48:	00ee      	lsls	r6, r5, #3
   20a4a:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   20a4e:	eb09 0806 	add.w	r8, r9, r6
   20a52:	69a1      	ldr	r1, [r4, #24]
   20a54:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20a58:	f247 0281 	movw	r2, #28801	; 0x7081
   20a5c:	4628      	mov	r0, r5
   20a5e:	f8d4 a000 	ldr.w	sl, [r4]
   20a62:	f8cd c00c 	str.w	ip, [sp, #12]
   20a66:	f000 fb25 	bl	210b4 <ip_interface_request_create>
   20a6a:	4683      	mov	fp, r0
   20a6c:	2800      	cmp	r0, #0
   20a6e:	d04b      	beq.n	20b08 <tls_interface_listen+0x104>
   20a70:	f8d8 2004 	ldr.w	r2, [r8, #4]
   20a74:	2a00      	cmp	r2, #0
   20a76:	d141      	bne.n	20afc <tls_interface_listen+0xf8>
   20a78:	1971      	adds	r1, r6, r5
   20a7a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   20a7e:	2224      	movs	r2, #36	; 0x24
   20a80:	f10b 0014 	add.w	r0, fp, #20
   20a84:	f013 ffcc 	bl	34a20 <memcpy>
   20a88:	f8db 2008 	ldr.w	r2, [fp, #8]
   20a8c:	4659      	mov	r1, fp
   20a8e:	3224      	adds	r2, #36	; 0x24
   20a90:	f8cb 2008 	str.w	r2, [fp, #8]
   20a94:	6822      	ldr	r2, [r4, #0]
   20a96:	4653      	mov	r3, sl
   20a98:	0c12      	lsrs	r2, r2, #16
   20a9a:	0412      	lsls	r2, r2, #16
   20a9c:	f042 020a 	orr.w	r2, r2, #10
   20aa0:	6022      	str	r2, [r4, #0]
   20aa2:	4620      	mov	r0, r4
   20aa4:	f247 0281 	movw	r2, #28801	; 0x7081
   20aa8:	f000 fb24 	bl	210f4 <ip_interface_request_send>
   20aac:	b960      	cbnz	r0, 20ac8 <tls_interface_listen+0xc4>
   20aae:	6823      	ldr	r3, [r4, #0]
   20ab0:	00db      	lsls	r3, r3, #3
   20ab2:	d40e      	bmi.n	20ad2 <tls_interface_listen+0xce>
   20ab4:	ab03      	add	r3, sp, #12
   20ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20aba:	210b      	movs	r1, #11
   20abc:	4628      	mov	r0, r5
   20abe:	f000 fb2d 	bl	2111c <ip_interface_wait>
   20ac2:	b170      	cbz	r0, 20ae2 <tls_interface_listen+0xde>
   20ac4:	f8c4 a000 	str.w	sl, [r4]
   20ac8:	2800      	cmp	r0, #0
   20aca:	dc03      	bgt.n	20ad4 <tls_interface_listen+0xd0>
   20acc:	b005      	add	sp, #20
   20ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ad2:	2073      	movs	r0, #115	; 0x73
   20ad4:	f7fc fccc 	bl	1d470 <bsd_os_errno_set>
   20ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20adc:	b005      	add	sp, #20
   20ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ae2:	9901      	ldr	r1, [sp, #4]
   20ae4:	4628      	mov	r0, r5
   20ae6:	f001 f875 	bl	21bd4 <ip_interface_listen>
   20aea:	e7ed      	b.n	20ac8 <tls_interface_listen+0xc4>
   20aec:	00ee      	lsls	r6, r5, #3
   20aee:	4f09      	ldr	r7, [pc, #36]	; (20b14 <tls_interface_listen+0x110>)
   20af0:	1973      	adds	r3, r6, r5
   20af2:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   20af6:	2b02      	cmp	r3, #2
   20af8:	d195      	bne.n	20a26 <tls_interface_listen+0x22>
   20afa:	e79f      	b.n	20a3c <tls_interface_listen+0x38>
   20afc:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   20b00:	6800      	ldr	r0, [r0, #0]
   20b02:	f013 ff8d 	bl	34a20 <memcpy>
   20b06:	e7b7      	b.n	20a78 <tls_interface_listen+0x74>
   20b08:	200c      	movs	r0, #12
   20b0a:	e7e3      	b.n	20ad4 <tls_interface_listen+0xd0>
   20b0c:	202d      	movs	r0, #45	; 0x2d
   20b0e:	e7e1      	b.n	20ad4 <tls_interface_listen+0xd0>
   20b10:	2009      	movs	r0, #9
   20b12:	e7df      	b.n	20ad4 <tls_interface_listen+0xd0>
   20b14:	20022484 	.word	0x20022484
   20b18:	200225c8 	.word	0x200225c8

00020b1c <tls_interface_accept>:
   20b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b20:	b082      	sub	sp, #8
   20b22:	460e      	mov	r6, r1
   20b24:	4617      	mov	r7, r2
   20b26:	4698      	mov	r8, r3
   20b28:	4605      	mov	r5, r0
   20b2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20b2e:	f006 fb11 	bl	27154 <interface_socket_from_handle_get>
   20b32:	9401      	str	r4, [sp, #4]
   20b34:	2800      	cmp	r0, #0
   20b36:	d03c      	beq.n	20bb2 <tls_interface_accept+0x96>
   20b38:	6800      	ldr	r0, [r0, #0]
   20b3a:	b280      	uxth	r0, r0
   20b3c:	2806      	cmp	r0, #6
   20b3e:	d138      	bne.n	20bb2 <tls_interface_accept+0x96>
   20b40:	4643      	mov	r3, r8
   20b42:	463a      	mov	r2, r7
   20b44:	4631      	mov	r1, r6
   20b46:	4628      	mov	r0, r5
   20b48:	f001 f8bc 	bl	21cc4 <ip_interface_accept>
   20b4c:	4604      	mov	r4, r0
   20b4e:	b128      	cbz	r0, 20b5c <tls_interface_accept+0x40>
   20b50:	2c00      	cmp	r4, #0
   20b52:	dc2f      	bgt.n	20bb4 <tls_interface_accept+0x98>
   20b54:	4620      	mov	r0, r4
   20b56:	b002      	add	sp, #8
   20b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b5c:	4628      	mov	r0, r5
   20b5e:	f006 faf9 	bl	27154 <interface_socket_from_handle_get>
   20b62:	6803      	ldr	r3, [r0, #0]
   20b64:	4f18      	ldr	r7, [pc, #96]	; (20bc8 <tls_interface_accept+0xac>)
   20b66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   20b6a:	6003      	str	r3, [r0, #0]
   20b6c:	6803      	ldr	r3, [r0, #0]
   20b6e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20b76:	4606      	mov	r6, r0
   20b78:	6003      	str	r3, [r0, #0]
   20b7a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   20b7e:	2224      	movs	r2, #36	; 0x24
   20b80:	4638      	mov	r0, r7
   20b82:	f013 ff4d 	bl	34a20 <memcpy>
   20b86:	2302      	movs	r3, #2
   20b88:	703b      	strb	r3, [r7, #0]
   20b8a:	6833      	ldr	r3, [r6, #0]
   20b8c:	4620      	mov	r0, r4
   20b8e:	0c1b      	lsrs	r3, r3, #16
   20b90:	041b      	lsls	r3, r3, #16
   20b92:	f043 030b 	orr.w	r3, r3, #11
   20b96:	6033      	str	r3, [r6, #0]
   20b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20b9c:	ab01      	add	r3, sp, #4
   20b9e:	210c      	movs	r1, #12
   20ba0:	f000 fabc 	bl	2111c <ip_interface_wait>
   20ba4:	4604      	mov	r4, r0
   20ba6:	2800      	cmp	r0, #0
   20ba8:	d0d4      	beq.n	20b54 <tls_interface_accept+0x38>
   20baa:	2000      	movs	r0, #0
   20bac:	f000 fbae 	bl	2130c <ip_interface_close>
   20bb0:	e7ce      	b.n	20b50 <tls_interface_accept+0x34>
   20bb2:	2409      	movs	r4, #9
   20bb4:	4620      	mov	r0, r4
   20bb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20bba:	f7fc fc59 	bl	1d470 <bsd_os_errno_set>
   20bbe:	4620      	mov	r0, r4
   20bc0:	b002      	add	sp, #8
   20bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20bc6:	bf00      	nop
   20bc8:	20022484 	.word	0x20022484

00020bcc <tls_interface_setopt>:
   20bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bd0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   20bd4:	9e06      	ldr	r6, [sp, #24]
   20bd6:	d11e      	bne.n	20c16 <tls_interface_setopt+0x4a>
   20bd8:	461f      	mov	r7, r3
   20bda:	4605      	mov	r5, r0
   20bdc:	2b00      	cmp	r3, #0
   20bde:	f000 808c 	beq.w	20cfa <tls_interface_setopt+0x12e>
   20be2:	4690      	mov	r8, r2
   20be4:	f006 fab6 	bl	27154 <interface_socket_from_handle_get>
   20be8:	2800      	cmp	r0, #0
   20bea:	d07b      	beq.n	20ce4 <tls_interface_setopt+0x118>
   20bec:	6804      	ldr	r4, [r0, #0]
   20bee:	b2a4      	uxth	r4, r4
   20bf0:	2c02      	cmp	r4, #2
   20bf2:	d007      	beq.n	20c04 <tls_interface_setopt+0x38>
   20bf4:	6803      	ldr	r3, [r0, #0]
   20bf6:	b29b      	uxth	r3, r3
   20bf8:	2b04      	cmp	r3, #4
   20bfa:	d003      	beq.n	20c04 <tls_interface_setopt+0x38>
   20bfc:	6803      	ldr	r3, [r0, #0]
   20bfe:	b29b      	uxth	r3, r3
   20c00:	2b05      	cmp	r3, #5
   20c02:	d16f      	bne.n	20ce4 <tls_interface_setopt+0x118>
   20c04:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   20c08:	2a04      	cmp	r2, #4
   20c0a:	d87c      	bhi.n	20d06 <tls_interface_setopt+0x13a>
   20c0c:	e8df f002 	tbb	[pc, r2]
   20c10:	41324e24 	.word	0x41324e24
   20c14:	07          	.byte	0x07
   20c15:	00          	.byte	0x00
   20c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20c1a:	f001 b995 	b.w	21f48 <ip_interface_setopt>
   20c1e:	4c3b      	ldr	r4, [pc, #236]	; (20d0c <tls_interface_setopt+0x140>)
   20c20:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   20c24:	b138      	cbz	r0, 20c36 <tls_interface_setopt+0x6a>
   20c26:	f005 fe47 	bl	268b8 <nrf_free>
   20c2a:	2200      	movs	r2, #0
   20c2c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   20c30:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   20c34:	605a      	str	r2, [r3, #4]
   20c36:	4630      	mov	r0, r6
   20c38:	b34e      	cbz	r6, 20c8e <tls_interface_setopt+0xc2>
   20c3a:	f005 fe33 	bl	268a4 <nrf_malloc>
   20c3e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   20c42:	2800      	cmp	r0, #0
   20c44:	d057      	beq.n	20cf6 <tls_interface_setopt+0x12a>
   20c46:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   20c4a:	4632      	mov	r2, r6
   20c4c:	4639      	mov	r1, r7
   20c4e:	6066      	str	r6, [r4, #4]
   20c50:	f013 fee6 	bl	34a20 <memcpy>
   20c54:	2000      	movs	r0, #0
   20c56:	e01a      	b.n	20c8e <tls_interface_setopt+0xc2>
   20c58:	2e04      	cmp	r6, #4
   20c5a:	d14a      	bne.n	20cf2 <tls_interface_setopt+0x126>
   20c5c:	6838      	ldr	r0, [r7, #0]
   20c5e:	2800      	cmp	r0, #0
   20c60:	d039      	beq.n	20cd6 <tls_interface_setopt+0x10a>
   20c62:	2801      	cmp	r0, #1
   20c64:	d145      	bne.n	20cf2 <tls_interface_setopt+0x126>
   20c66:	4a2a      	ldr	r2, [pc, #168]	; (20d10 <tls_interface_setopt+0x144>)
   20c68:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20c6c:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   20c70:	2000      	movs	r0, #0
   20c72:	e00c      	b.n	20c8e <tls_interface_setopt+0xc2>
   20c74:	2e01      	cmp	r6, #1
   20c76:	d13c      	bne.n	20cf2 <tls_interface_setopt+0x126>
   20c78:	783a      	ldrb	r2, [r7, #0]
   20c7a:	2000      	movs	r0, #0
   20c7c:	3200      	adds	r2, #0
   20c7e:	bf18      	it	ne
   20c80:	2201      	movne	r2, #1
   20c82:	4b23      	ldr	r3, [pc, #140]	; (20d10 <tls_interface_setopt+0x144>)
   20c84:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20c88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   20c8c:	7062      	strb	r2, [r4, #1]
   20c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c92:	2e04      	cmp	r6, #4
   20c94:	d12d      	bne.n	20cf2 <tls_interface_setopt+0x126>
   20c96:	683a      	ldr	r2, [r7, #0]
   20c98:	2a02      	cmp	r2, #2
   20c9a:	d82a      	bhi.n	20cf2 <tls_interface_setopt+0x126>
   20c9c:	4b1c      	ldr	r3, [pc, #112]	; (20d10 <tls_interface_setopt+0x144>)
   20c9e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20ca2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   20ca6:	70a2      	strb	r2, [r4, #2]
   20ca8:	2000      	movs	r0, #0
   20caa:	e7f0      	b.n	20c8e <tls_interface_setopt+0xc2>
   20cac:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   20cb0:	d01f      	beq.n	20cf2 <tls_interface_setopt+0x126>
   20cb2:	f016 0403 	ands.w	r4, r6, #3
   20cb6:	d11c      	bne.n	20cf2 <tls_interface_setopt+0x126>
   20cb8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20cbc:	00ad      	lsls	r5, r5, #2
   20cbe:	4b14      	ldr	r3, [pc, #80]	; (20d10 <tls_interface_setopt+0x144>)
   20cc0:	1d28      	adds	r0, r5, #4
   20cc2:	4418      	add	r0, r3
   20cc4:	442b      	add	r3, r5
   20cc6:	4632      	mov	r2, r6
   20cc8:	4639      	mov	r1, r7
   20cca:	f883 c003 	strb.w	ip, [r3, #3]
   20cce:	f013 fea7 	bl	34a20 <memcpy>
   20cd2:	4620      	mov	r0, r4
   20cd4:	e7db      	b.n	20c8e <tls_interface_setopt+0xc2>
   20cd6:	2102      	movs	r1, #2
   20cd8:	4a0d      	ldr	r2, [pc, #52]	; (20d10 <tls_interface_setopt+0x144>)
   20cda:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   20cde:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   20ce2:	e7d4      	b.n	20c8e <tls_interface_setopt+0xc2>
   20ce4:	2009      	movs	r0, #9
   20ce6:	f7fc fbc3 	bl	1d470 <bsd_os_errno_set>
   20cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20cf2:	2016      	movs	r0, #22
   20cf4:	e7f7      	b.n	20ce6 <tls_interface_setopt+0x11a>
   20cf6:	200c      	movs	r0, #12
   20cf8:	e7f5      	b.n	20ce6 <tls_interface_setopt+0x11a>
   20cfa:	200e      	movs	r0, #14
   20cfc:	f7fc fbb8 	bl	1d470 <bsd_os_errno_set>
   20d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20d04:	e7c3      	b.n	20c8e <tls_interface_setopt+0xc2>
   20d06:	202a      	movs	r0, #42	; 0x2a
   20d08:	e7ed      	b.n	20ce6 <tls_interface_setopt+0x11a>
   20d0a:	bf00      	nop
   20d0c:	200225c8 	.word	0x200225c8
   20d10:	20022484 	.word	0x20022484

00020d14 <tls_interface_getopt>:
   20d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d18:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   20d1c:	9f06      	ldr	r7, [sp, #24]
   20d1e:	d112      	bne.n	20d46 <tls_interface_getopt+0x32>
   20d20:	461d      	mov	r5, r3
   20d22:	b16b      	cbz	r3, 20d40 <tls_interface_getopt+0x2c>
   20d24:	b167      	cbz	r7, 20d40 <tls_interface_getopt+0x2c>
   20d26:	4606      	mov	r6, r0
   20d28:	4614      	mov	r4, r2
   20d2a:	f006 fa13 	bl	27154 <interface_socket_from_handle_get>
   20d2e:	2800      	cmp	r0, #0
   20d30:	d04f      	beq.n	20dd2 <tls_interface_getopt+0xbe>
   20d32:	3c01      	subs	r4, #1
   20d34:	2c03      	cmp	r4, #3
   20d36:	d852      	bhi.n	20dde <tls_interface_getopt+0xca>
   20d38:	e8df f004 	tbb	[pc, r4]
   20d3c:	09152139 	.word	0x09152139
   20d40:	200e      	movs	r0, #14
   20d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20d4a:	f001 ba0f 	b.w	2216c <ip_interface_getopt>
   20d4e:	683b      	ldr	r3, [r7, #0]
   20d50:	2b04      	cmp	r3, #4
   20d52:	d13c      	bne.n	20dce <tls_interface_getopt+0xba>
   20d54:	4b23      	ldr	r3, [pc, #140]	; (20de4 <tls_interface_getopt+0xd0>)
   20d56:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20d5a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20d5e:	78b3      	ldrb	r3, [r6, #2]
   20d60:	2000      	movs	r0, #0
   20d62:	602b      	str	r3, [r5, #0]
   20d64:	e7ed      	b.n	20d42 <tls_interface_getopt+0x2e>
   20d66:	683b      	ldr	r3, [r7, #0]
   20d68:	2b01      	cmp	r3, #1
   20d6a:	d130      	bne.n	20dce <tls_interface_getopt+0xba>
   20d6c:	4b1d      	ldr	r3, [pc, #116]	; (20de4 <tls_interface_getopt+0xd0>)
   20d6e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20d72:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20d76:	7873      	ldrb	r3, [r6, #1]
   20d78:	2000      	movs	r0, #0
   20d7a:	702b      	strb	r3, [r5, #0]
   20d7c:	e7e1      	b.n	20d42 <tls_interface_getopt+0x2e>
   20d7e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20d82:	4918      	ldr	r1, [pc, #96]	; (20de4 <tls_interface_getopt+0xd0>)
   20d84:	683b      	ldr	r3, [r7, #0]
   20d86:	00b6      	lsls	r6, r6, #2
   20d88:	198a      	adds	r2, r1, r6
   20d8a:	f013 0403 	ands.w	r4, r3, #3
   20d8e:	78d0      	ldrb	r0, [r2, #3]
   20d90:	d121      	bne.n	20dd6 <tls_interface_getopt+0xc2>
   20d92:	089b      	lsrs	r3, r3, #2
   20d94:	4283      	cmp	r3, r0
   20d96:	bf28      	it	cs
   20d98:	4603      	movcs	r3, r0
   20d9a:	009a      	lsls	r2, r3, #2
   20d9c:	b1db      	cbz	r3, 20dd6 <tls_interface_getopt+0xc2>
   20d9e:	3604      	adds	r6, #4
   20da0:	4431      	add	r1, r6
   20da2:	603a      	str	r2, [r7, #0]
   20da4:	4628      	mov	r0, r5
   20da6:	f013 fe3b 	bl	34a20 <memcpy>
   20daa:	4620      	mov	r0, r4
   20dac:	e7c9      	b.n	20d42 <tls_interface_getopt+0x2e>
   20dae:	683b      	ldr	r3, [r7, #0]
   20db0:	2b04      	cmp	r3, #4
   20db2:	d10c      	bne.n	20dce <tls_interface_getopt+0xba>
   20db4:	4b0b      	ldr	r3, [pc, #44]	; (20de4 <tls_interface_getopt+0xd0>)
   20db6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   20dba:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   20dbe:	2000      	movs	r0, #0
   20dc0:	f1a3 0301 	sub.w	r3, r3, #1
   20dc4:	fab3 f383 	clz	r3, r3
   20dc8:	095b      	lsrs	r3, r3, #5
   20dca:	602b      	str	r3, [r5, #0]
   20dcc:	e7b9      	b.n	20d42 <tls_interface_getopt+0x2e>
   20dce:	2016      	movs	r0, #22
   20dd0:	e7b7      	b.n	20d42 <tls_interface_getopt+0x2e>
   20dd2:	2009      	movs	r0, #9
   20dd4:	e7b5      	b.n	20d42 <tls_interface_getopt+0x2e>
   20dd6:	2800      	cmp	r0, #0
   20dd8:	d1f9      	bne.n	20dce <tls_interface_getopt+0xba>
   20dda:	6038      	str	r0, [r7, #0]
   20ddc:	e7b1      	b.n	20d42 <tls_interface_getopt+0x2e>
   20dde:	202a      	movs	r0, #42	; 0x2a
   20de0:	e7af      	b.n	20d42 <tls_interface_getopt+0x2e>
   20de2:	bf00      	nop
   20de4:	20022484 	.word	0x20022484

00020de8 <tls_rpc_ip_event_handler>:
   20de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20dea:	f248 0581 	movw	r5, #32897	; 0x8081
   20dee:	42ab      	cmp	r3, r5
   20df0:	460c      	mov	r4, r1
   20df2:	d062      	beq.n	20eba <tls_rpc_ip_event_handler+0xd2>
   20df4:	f249 0182 	movw	r1, #36994	; 0x9082
   20df8:	428b      	cmp	r3, r1
   20dfa:	4606      	mov	r6, r0
   20dfc:	d02e      	beq.n	20e5c <tls_rpc_ip_event_handler+0x74>
   20dfe:	f248 0102 	movw	r1, #32770	; 0x8002
   20e02:	428b      	cmp	r3, r1
   20e04:	d001      	beq.n	20e0a <tls_rpc_ip_event_handler+0x22>
   20e06:	2001      	movs	r0, #1
   20e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20e0a:	2c00      	cmp	r4, #0
   20e0c:	d0fb      	beq.n	20e06 <tls_rpc_ip_event_handler+0x1e>
   20e0e:	6963      	ldr	r3, [r4, #20]
   20e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   20e14:	d002      	beq.n	20e1c <tls_rpc_ip_event_handler+0x34>
   20e16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   20e1a:	d1f4      	bne.n	20e06 <tls_rpc_ip_event_handler+0x1e>
   20e1c:	6823      	ldr	r3, [r4, #0]
   20e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   20e22:	6023      	str	r3, [r4, #0]
   20e24:	6955      	ldr	r5, [r2, #20]
   20e26:	2d00      	cmp	r5, #0
   20e28:	d156      	bne.n	20ed8 <tls_rpc_ip_event_handler+0xf0>
   20e2a:	6823      	ldr	r3, [r4, #0]
   20e2c:	0c1b      	lsrs	r3, r3, #16
   20e2e:	041b      	lsls	r3, r3, #16
   20e30:	f043 0305 	orr.w	r3, r3, #5
   20e34:	6023      	str	r3, [r4, #0]
   20e36:	6823      	ldr	r3, [r4, #0]
   20e38:	00da      	lsls	r2, r3, #3
   20e3a:	d50d      	bpl.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20e3c:	4b2b      	ldr	r3, [pc, #172]	; (20eec <tls_rpc_ip_event_handler+0x104>)
   20e3e:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   20e42:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20e46:	2b02      	cmp	r3, #2
   20e48:	d106      	bne.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20e4a:	4630      	mov	r0, r6
   20e4c:	4621      	mov	r1, r4
   20e4e:	f7ff fb81 	bl	20554 <secure_client_socket>
   20e52:	b108      	cbz	r0, 20e58 <tls_rpc_ip_event_handler+0x70>
   20e54:	2873      	cmp	r0, #115	; 0x73
   20e56:	d142      	bne.n	20ede <tls_rpc_ip_event_handler+0xf6>
   20e58:	2000      	movs	r0, #0
   20e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20e5c:	2c00      	cmp	r4, #0
   20e5e:	d0fb      	beq.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20e60:	6823      	ldr	r3, [r4, #0]
   20e62:	b29b      	uxth	r3, r3
   20e64:	2b0b      	cmp	r3, #11
   20e66:	d1f7      	bne.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20e68:	6915      	ldr	r5, [r2, #16]
   20e6a:	2d00      	cmp	r5, #0
   20e6c:	d134      	bne.n	20ed8 <tls_rpc_ip_event_handler+0xf0>
   20e6e:	6823      	ldr	r3, [r4, #0]
   20e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   20e74:	6023      	str	r3, [r4, #0]
   20e76:	6823      	ldr	r3, [r4, #0]
   20e78:	00db      	lsls	r3, r3, #3
   20e7a:	d5ed      	bpl.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20e7c:	4f1c      	ldr	r7, [pc, #112]	; (20ef0 <tls_rpc_ip_event_handler+0x108>)
   20e7e:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   20e82:	b130      	cbz	r0, 20e92 <tls_rpc_ip_event_handler+0xaa>
   20e84:	f005 fd18 	bl	268b8 <nrf_free>
   20e88:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   20e8c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   20e90:	605d      	str	r5, [r3, #4]
   20e92:	6823      	ldr	r3, [r4, #0]
   20e94:	2000      	movs	r0, #0
   20e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   20e9a:	6023      	str	r3, [r4, #0]
   20e9c:	6823      	ldr	r3, [r4, #0]
   20e9e:	0c1b      	lsrs	r3, r3, #16
   20ea0:	041b      	lsls	r3, r3, #16
   20ea2:	f043 030c 	orr.w	r3, r3, #12
   20ea6:	6023      	str	r3, [r4, #0]
   20ea8:	6823      	ldr	r3, [r4, #0]
   20eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   20eae:	6023      	str	r3, [r4, #0]
   20eb0:	6823      	ldr	r3, [r4, #0]
   20eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20eb6:	6023      	str	r3, [r4, #0]
   20eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20eba:	2900      	cmp	r1, #0
   20ebc:	d0cc      	beq.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20ebe:	680b      	ldr	r3, [r1, #0]
   20ec0:	b29b      	uxth	r3, r3
   20ec2:	2b0a      	cmp	r3, #10
   20ec4:	d1c8      	bne.n	20e58 <tls_rpc_ip_event_handler+0x70>
   20ec6:	6950      	ldr	r0, [r2, #20]
   20ec8:	b938      	cbnz	r0, 20eda <tls_rpc_ip_event_handler+0xf2>
   20eca:	680b      	ldr	r3, [r1, #0]
   20ecc:	0c1b      	lsrs	r3, r3, #16
   20ece:	041b      	lsls	r3, r3, #16
   20ed0:	f043 030b 	orr.w	r3, r3, #11
   20ed4:	600b      	str	r3, [r1, #0]
   20ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20ed8:	4628      	mov	r0, r5
   20eda:	f000 f8e1 	bl	210a0 <rpc_error_to_nrf_bsd_error>
   20ede:	6060      	str	r0, [r4, #4]
   20ee0:	6823      	ldr	r3, [r4, #0]
   20ee2:	2000      	movs	r0, #0
   20ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   20ee8:	6023      	str	r3, [r4, #0]
   20eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20eec:	20022484 	.word	0x20022484
   20ef0:	200225c8 	.word	0x200225c8

00020ef4 <ip_client_event_handler>:
   20ef4:	f850 1b08 	ldr.w	r1, [r0], #8
   20ef8:	0c09      	lsrs	r1, r1, #16
   20efa:	f001 bc29 	b.w	22750 <rpc_ip_event_handler>
   20efe:	bf00      	nop

00020f00 <rpc_ip_client_init>:
   20f00:	4801      	ldr	r0, [pc, #4]	; (20f08 <rpc_ip_client_init+0x8>)
   20f02:	f001 bf27 	b.w	22d54 <rpc_client_register>
   20f06:	bf00      	nop
   20f08:	0003601c 	.word	0x0003601c

00020f0c <rpc_ip_client_request_alloc>:
   20f0c:	2300      	movs	r3, #0
   20f0e:	b510      	push	{r4, lr}
   20f10:	b082      	sub	sp, #8
   20f12:	9301      	str	r3, [sp, #4]
   20f14:	b158      	cbz	r0, 20f2e <rpc_ip_client_request_alloc+0x22>
   20f16:	4604      	mov	r4, r0
   20f18:	aa01      	add	r2, sp, #4
   20f1a:	2004      	movs	r0, #4
   20f1c:	f001 ff94 	bl	22e48 <rpc_message_alloc>
   20f20:	b918      	cbnz	r0, 20f2a <rpc_ip_client_request_alloc+0x1e>
   20f22:	9b01      	ldr	r3, [sp, #4]
   20f24:	b10b      	cbz	r3, 20f2a <rpc_ip_client_request_alloc+0x1e>
   20f26:	3308      	adds	r3, #8
   20f28:	6023      	str	r3, [r4, #0]
   20f2a:	b002      	add	sp, #8
   20f2c:	bd10      	pop	{r4, pc}
   20f2e:	2007      	movs	r0, #7
   20f30:	b002      	add	sp, #8
   20f32:	bd10      	pop	{r4, pc}

00020f34 <rpc_ip_client_request_send>:
   20f34:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20f38:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   20f3c:	d10b      	bne.n	20f56 <rpc_ip_client_request_send+0x22>
   20f3e:	b160      	cbz	r0, 20f5a <rpc_ip_client_request_send+0x26>
   20f40:	4603      	mov	r3, r0
   20f42:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   20f46:	2004      	movs	r0, #4
   20f48:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20f4c:	f843 1d08 	str.w	r1, [r3, #-8]!
   20f50:	4619      	mov	r1, r3
   20f52:	f001 bf69 	b.w	22e28 <rpc_message_send>
   20f56:	200f      	movs	r0, #15
   20f58:	4770      	bx	lr
   20f5a:	2007      	movs	r0, #7
   20f5c:	4770      	bx	lr
   20f5e:	bf00      	nop

00020f60 <rpc_ip_client_message_free>:
   20f60:	b120      	cbz	r0, 20f6c <rpc_ip_client_message_free+0xc>
   20f62:	f1a0 0108 	sub.w	r1, r0, #8
   20f66:	2004      	movs	r0, #4
   20f68:	f001 bf9a 	b.w	22ea0 <rpc_message_free>
   20f6c:	2007      	movs	r0, #7
   20f6e:	4770      	bx	lr

00020f70 <rpc_ip_client_data_free>:
   20f70:	b118      	cbz	r0, 20f7a <rpc_ip_client_data_free+0xa>
   20f72:	4601      	mov	r1, r0
   20f74:	2004      	movs	r0, #4
   20f76:	f001 bf9f 	b.w	22eb8 <rpc_message_data_free>
   20f7a:	2007      	movs	r0, #7
   20f7c:	4770      	bx	lr
   20f7e:	bf00      	nop

00020f80 <ip_recvd_packet_free_cb>:
   20f80:	b510      	push	{r4, lr}
   20f82:	4604      	mov	r4, r0
   20f84:	6800      	ldr	r0, [r0, #0]
   20f86:	f7ff fff3 	bl	20f70 <rpc_ip_client_data_free>
   20f8a:	68a0      	ldr	r0, [r4, #8]
   20f8c:	b118      	cbz	r0, 20f96 <ip_recvd_packet_free_cb+0x16>
   20f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f92:	f005 bc91 	b.w	268b8 <nrf_free>
   20f96:	bd10      	pop	{r4, pc}

00020f98 <setopt_check_and_send_int>:
   20f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f9c:	b082      	sub	sp, #8
   20f9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20fa0:	2d04      	cmp	r5, #4
   20fa2:	d15e      	bne.n	21062 <setopt_check_and_send_int+0xca>
   20fa4:	461e      	mov	r6, r3
   20fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20fa8:	2b00      	cmp	r3, #0
   20faa:	d05a      	beq.n	21062 <setopt_check_and_send_int+0xca>
   20fac:	4614      	mov	r4, r2
   20fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20fb2:	6823      	ldr	r3, [r4, #0]
   20fb4:	9200      	str	r2, [sp, #0]
   20fb6:	025f      	lsls	r7, r3, #9
   20fb8:	d444      	bmi.n	21044 <setopt_check_and_send_int+0xac>
   20fba:	6823      	ldr	r3, [r4, #0]
   20fbc:	021a      	lsls	r2, r3, #8
   20fbe:	d441      	bmi.n	21044 <setopt_check_and_send_int+0xac>
   20fc0:	6823      	ldr	r3, [r4, #0]
   20fc2:	01db      	lsls	r3, r3, #7
   20fc4:	d43e      	bmi.n	21044 <setopt_check_and_send_int+0xac>
   20fc6:	6823      	ldr	r3, [r4, #0]
   20fc8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   20fcc:	d13a      	bne.n	21044 <setopt_check_and_send_int+0xac>
   20fce:	f8d4 9000 	ldr.w	r9, [r4]
   20fd2:	6822      	ldr	r2, [r4, #0]
   20fd4:	4680      	mov	r8, r0
   20fd6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   20fda:	a802      	add	r0, sp, #8
   20fdc:	460f      	mov	r7, r1
   20fde:	f840 3d04 	str.w	r3, [r0, #-4]!
   20fe2:	4629      	mov	r1, r5
   20fe4:	6022      	str	r2, [r4, #0]
   20fe6:	f8d4 a018 	ldr.w	sl, [r4, #24]
   20fea:	f7ff ff8f 	bl	20f0c <rpc_ip_client_request_alloc>
   20fee:	bb88      	cbnz	r0, 21054 <setopt_check_and_send_int+0xbc>
   20ff0:	f247 0303 	movw	r3, #28675	; 0x7003
   20ff4:	2208      	movs	r2, #8
   20ff6:	9d01      	ldr	r5, [sp, #4]
   20ff8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20ffc:	60eb      	str	r3, [r5, #12]
   20ffe:	f8c5 a010 	str.w	sl, [r5, #16]
   21002:	7268      	strb	r0, [r5, #9]
   21004:	72a8      	strb	r0, [r5, #10]
   21006:	72e8      	strb	r0, [r5, #11]
   21008:	722a      	strb	r2, [r5, #8]
   2100a:	68ab      	ldr	r3, [r5, #8]
   2100c:	61af      	str	r7, [r5, #24]
   2100e:	3308      	adds	r3, #8
   21010:	60ab      	str	r3, [r5, #8]
   21012:	2204      	movs	r2, #4
   21014:	990a      	ldr	r1, [sp, #40]	; 0x28
   21016:	f8c5 8014 	str.w	r8, [r5, #20]
   2101a:	6828      	ldr	r0, [r5, #0]
   2101c:	f013 fd00 	bl	34a20 <memcpy>
   21020:	f247 0103 	movw	r1, #28675	; 0x7003
   21024:	4628      	mov	r0, r5
   21026:	f7ff ff85 	bl	20f34 <rpc_ip_client_request_send>
   2102a:	4607      	mov	r7, r0
   2102c:	b9d8      	cbnz	r0, 21066 <setopt_check_and_send_int+0xce>
   2102e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21032:	466b      	mov	r3, sp
   21034:	4611      	mov	r1, r2
   21036:	4630      	mov	r0, r6
   21038:	f006 f818 	bl	2706c <interface_socket_wait>
   2103c:	b300      	cbz	r0, 21080 <setopt_check_and_send_int+0xe8>
   2103e:	f8c4 9000 	str.w	r9, [r4]
   21042:	e000      	b.n	21046 <setopt_check_and_send_int+0xae>
   21044:	2023      	movs	r0, #35	; 0x23
   21046:	f7fc fa13 	bl	1d470 <bsd_os_errno_set>
   2104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2104e:	b002      	add	sp, #8
   21050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21054:	9d01      	ldr	r5, [sp, #4]
   21056:	2d00      	cmp	r5, #0
   21058:	d1d7      	bne.n	2100a <setopt_check_and_send_int+0x72>
   2105a:	f8c4 9000 	str.w	r9, [r4]
   2105e:	200c      	movs	r0, #12
   21060:	e7f1      	b.n	21046 <setopt_check_and_send_int+0xae>
   21062:	2016      	movs	r0, #22
   21064:	e7ef      	b.n	21046 <setopt_check_and_send_int+0xae>
   21066:	6828      	ldr	r0, [r5, #0]
   21068:	b108      	cbz	r0, 2106e <setopt_check_and_send_int+0xd6>
   2106a:	f7ff ff81 	bl	20f70 <rpc_ip_client_data_free>
   2106e:	4628      	mov	r0, r5
   21070:	f7ff ff76 	bl	20f60 <rpc_ip_client_message_free>
   21074:	f8c4 9000 	str.w	r9, [r4]
   21078:	2023      	movs	r0, #35	; 0x23
   2107a:	f8c4 9000 	str.w	r9, [r4]
   2107e:	e7e2      	b.n	21046 <setopt_check_and_send_int+0xae>
   21080:	4630      	mov	r0, r6
   21082:	f006 f867 	bl	27154 <interface_socket_from_handle_get>
   21086:	4603      	mov	r3, r0
   21088:	b130      	cbz	r0, 21098 <setopt_check_and_send_int+0x100>
   2108a:	6840      	ldr	r0, [r0, #4]
   2108c:	b108      	cbz	r0, 21092 <setopt_check_and_send_int+0xfa>
   2108e:	605f      	str	r7, [r3, #4]
   21090:	e7d5      	b.n	2103e <setopt_check_and_send_int+0xa6>
   21092:	f8c4 9000 	str.w	r9, [r4]
   21096:	e7da      	b.n	2104e <setopt_check_and_send_int+0xb6>
   21098:	f8c4 9000 	str.w	r9, [r4]
   2109c:	e7d7      	b.n	2104e <setopt_check_and_send_int+0xb6>
   2109e:	bf00      	nop

000210a0 <rpc_error_to_nrf_bsd_error>:
   210a0:	2810      	cmp	r0, #16
   210a2:	bf9a      	itte	ls
   210a4:	4b02      	ldrls	r3, [pc, #8]	; (210b0 <rpc_error_to_nrf_bsd_error+0x10>)
   210a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   210aa:	202d      	movhi	r0, #45	; 0x2d
   210ac:	4770      	bx	lr
   210ae:	bf00      	nop
   210b0:	0003602c 	.word	0x0003602c

000210b4 <ip_interface_request_create>:
   210b4:	b570      	push	{r4, r5, r6, lr}
   210b6:	2500      	movs	r5, #0
   210b8:	b082      	sub	sp, #8
   210ba:	ac02      	add	r4, sp, #8
   210bc:	f844 5d04 	str.w	r5, [r4, #-4]!
   210c0:	4606      	mov	r6, r0
   210c2:	460d      	mov	r5, r1
   210c4:	4620      	mov	r0, r4
   210c6:	4619      	mov	r1, r3
   210c8:	4614      	mov	r4, r2
   210ca:	f7ff ff1f 	bl	20f0c <rpc_ip_client_request_alloc>
   210ce:	b960      	cbnz	r0, 210ea <ip_interface_request_create+0x36>
   210d0:	9b01      	ldr	r3, [sp, #4]
   210d2:	2208      	movs	r2, #8
   210d4:	7258      	strb	r0, [r3, #9]
   210d6:	7298      	strb	r0, [r3, #10]
   210d8:	72d8      	strb	r0, [r3, #11]
   210da:	4618      	mov	r0, r3
   210dc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   210e0:	60dc      	str	r4, [r3, #12]
   210e2:	611d      	str	r5, [r3, #16]
   210e4:	721a      	strb	r2, [r3, #8]
   210e6:	b002      	add	sp, #8
   210e8:	bd70      	pop	{r4, r5, r6, pc}
   210ea:	9b01      	ldr	r3, [sp, #4]
   210ec:	4618      	mov	r0, r3
   210ee:	b002      	add	sp, #8
   210f0:	bd70      	pop	{r4, r5, r6, pc}
   210f2:	bf00      	nop

000210f4 <ip_interface_request_send>:
   210f4:	b570      	push	{r4, r5, r6, lr}
   210f6:	460c      	mov	r4, r1
   210f8:	4605      	mov	r5, r0
   210fa:	4611      	mov	r1, r2
   210fc:	4620      	mov	r0, r4
   210fe:	461e      	mov	r6, r3
   21100:	f7ff ff18 	bl	20f34 <rpc_ip_client_request_send>
   21104:	b900      	cbnz	r0, 21108 <ip_interface_request_send+0x14>
   21106:	bd70      	pop	{r4, r5, r6, pc}
   21108:	6820      	ldr	r0, [r4, #0]
   2110a:	b108      	cbz	r0, 21110 <ip_interface_request_send+0x1c>
   2110c:	f7ff ff30 	bl	20f70 <rpc_ip_client_data_free>
   21110:	4620      	mov	r0, r4
   21112:	f7ff ff25 	bl	20f60 <rpc_ip_client_message_free>
   21116:	602e      	str	r6, [r5, #0]
   21118:	2023      	movs	r0, #35	; 0x23
   2111a:	bd70      	pop	{r4, r5, r6, pc}

0002111c <ip_interface_wait>:
   2111c:	b538      	push	{r3, r4, r5, lr}
   2111e:	4605      	mov	r5, r0
   21120:	f005 ffa4 	bl	2706c <interface_socket_wait>
   21124:	4604      	mov	r4, r0
   21126:	b108      	cbz	r0, 2112c <ip_interface_wait+0x10>
   21128:	4620      	mov	r0, r4
   2112a:	bd38      	pop	{r3, r4, r5, pc}
   2112c:	4628      	mov	r0, r5
   2112e:	f006 f811 	bl	27154 <interface_socket_from_handle_get>
   21132:	2800      	cmp	r0, #0
   21134:	d0f8      	beq.n	21128 <ip_interface_wait+0xc>
   21136:	6844      	ldr	r4, [r0, #4]
   21138:	2c00      	cmp	r4, #0
   2113a:	d0f5      	beq.n	21128 <ip_interface_wait+0xc>
   2113c:	2300      	movs	r3, #0
   2113e:	6043      	str	r3, [r0, #4]
   21140:	4620      	mov	r0, r4
   21142:	bd38      	pop	{r3, r4, r5, pc}

00021144 <ip_interface_init>:
   21144:	b538      	push	{r3, r4, r5, lr}
   21146:	2300      	movs	r3, #0
   21148:	4d09      	ldr	r5, [pc, #36]	; (21170 <ip_interface_init+0x2c>)
   2114a:	4c0a      	ldr	r4, [pc, #40]	; (21174 <ip_interface_init+0x30>)
   2114c:	4619      	mov	r1, r3
   2114e:	2224      	movs	r2, #36	; 0x24
   21150:	4809      	ldr	r0, [pc, #36]	; (21178 <ip_interface_init+0x34>)
   21152:	602b      	str	r3, [r5, #0]
   21154:	6023      	str	r3, [r4, #0]
   21156:	f013 fc9d 	bl	34a94 <memset>
   2115a:	f7ff fed1 	bl	20f00 <rpc_ip_client_init>
   2115e:	b918      	cbnz	r0, 21168 <ip_interface_init+0x24>
   21160:	2201      	movs	r2, #1
   21162:	4b06      	ldr	r3, [pc, #24]	; (2117c <ip_interface_init+0x38>)
   21164:	701a      	strb	r2, [r3, #0]
   21166:	bd38      	pop	{r3, r4, r5, pc}
   21168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2116c:	bd38      	pop	{r3, r4, r5, pc}
   2116e:	bf00      	nop
   21170:	20022618 	.word	0x20022618
   21174:	20022614 	.word	0x20022614
   21178:	2002261c 	.word	0x2002261c
   2117c:	20028f7f 	.word	0x20028f7f

00021180 <ip_interface_open>:
   21180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21184:	2500      	movs	r5, #0
   21186:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2118a:	4c5e      	ldr	r4, [pc, #376]	; (21304 <ip_interface_open+0x184>)
   2118c:	4606      	mov	r6, r0
   2118e:	7820      	ldrb	r0, [r4, #0]
   21190:	b084      	sub	sp, #16
   21192:	e9cd 5701 	strd	r5, r7, [sp, #4]
   21196:	2800      	cmp	r0, #0
   21198:	f000 80b0 	beq.w	212fc <ip_interface_open+0x17c>
   2119c:	4690      	mov	r8, r2
   2119e:	f026 0208 	bic.w	r2, r6, #8
   211a2:	2a02      	cmp	r2, #2
   211a4:	460c      	mov	r4, r1
   211a6:	d002      	beq.n	211ae <ip_interface_open+0x2e>
   211a8:	2e05      	cmp	r6, #5
   211aa:	f040 808d 	bne.w	212c8 <ip_interface_open+0x148>
   211ae:	1e63      	subs	r3, r4, #1
   211b0:	2b02      	cmp	r3, #2
   211b2:	f200 809d 	bhi.w	212f0 <ip_interface_open+0x170>
   211b6:	f1b8 0f00 	cmp.w	r8, #0
   211ba:	d159      	bne.n	21270 <ip_interface_open+0xf0>
   211bc:	2c01      	cmp	r4, #1
   211be:	d06f      	beq.n	212a0 <ip_interface_open+0x120>
   211c0:	2c03      	cmp	r4, #3
   211c2:	bf18      	it	ne
   211c4:	f04f 0802 	movne.w	r8, #2
   211c8:	4a4f      	ldr	r2, [pc, #316]	; (21308 <ip_interface_open+0x188>)
   211ca:	4621      	mov	r1, r4
   211cc:	a801      	add	r0, sp, #4
   211ce:	f005 fe9b 	bl	26f08 <interface_socket_allocate>
   211d2:	9b01      	ldr	r3, [sp, #4]
   211d4:	4607      	mov	r7, r0
   211d6:	2b00      	cmp	r3, #0
   211d8:	d060      	beq.n	2129c <ip_interface_open+0x11c>
   211da:	2100      	movs	r1, #0
   211dc:	a804      	add	r0, sp, #16
   211de:	f840 1d04 	str.w	r1, [r0, #-4]!
   211e2:	e9c3 6403 	strd	r6, r4, [r3, #12]
   211e6:	f8c3 8014 	str.w	r8, [r3, #20]
   211ea:	f7ff fe8f 	bl	20f0c <rpc_ip_client_request_alloc>
   211ee:	2800      	cmp	r0, #0
   211f0:	d151      	bne.n	21296 <ip_interface_open+0x116>
   211f2:	f247 0201 	movw	r2, #28673	; 0x7001
   211f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   211fa:	2108      	movs	r1, #8
   211fc:	9d03      	ldr	r5, [sp, #12]
   211fe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   21202:	60ea      	str	r2, [r5, #12]
   21204:	7268      	strb	r0, [r5, #9]
   21206:	72a8      	strb	r0, [r5, #10]
   21208:	72e8      	strb	r0, [r5, #11]
   2120a:	7229      	strb	r1, [r5, #8]
   2120c:	742b      	strb	r3, [r5, #16]
   2120e:	746b      	strb	r3, [r5, #17]
   21210:	74ab      	strb	r3, [r5, #18]
   21212:	74eb      	strb	r3, [r5, #19]
   21214:	68ab      	ldr	r3, [r5, #8]
   21216:	2e05      	cmp	r6, #5
   21218:	f103 030c 	add.w	r3, r3, #12
   2121c:	60ab      	str	r3, [r5, #8]
   2121e:	d003      	beq.n	21228 <ip_interface_open+0xa8>
   21220:	2e0a      	cmp	r6, #10
   21222:	bf14      	ite	ne
   21224:	2601      	movne	r6, #1
   21226:	2602      	moveq	r6, #2
   21228:	616e      	str	r6, [r5, #20]
   2122a:	f8c5 801c 	str.w	r8, [r5, #28]
   2122e:	61ac      	str	r4, [r5, #24]
   21230:	f247 0101 	movw	r1, #28673	; 0x7001
   21234:	4628      	mov	r0, r5
   21236:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2123a:	f7ff fe7b 	bl	20f34 <rpc_ip_client_request_send>
   2123e:	4606      	mov	r6, r0
   21240:	b380      	cbz	r0, 212a4 <ip_interface_open+0x124>
   21242:	6828      	ldr	r0, [r5, #0]
   21244:	b108      	cbz	r0, 2124a <ip_interface_open+0xca>
   21246:	f7ff fe93 	bl	20f70 <rpc_ip_client_data_free>
   2124a:	4628      	mov	r0, r5
   2124c:	f7ff fe88 	bl	20f60 <rpc_ip_client_message_free>
   21250:	2301      	movs	r3, #1
   21252:	2523      	movs	r5, #35	; 0x23
   21254:	f8c8 3000 	str.w	r3, [r8]
   21258:	4638      	mov	r0, r7
   2125a:	f005 feb9 	bl	26fd0 <interface_socket_free>
   2125e:	4628      	mov	r0, r5
   21260:	f7fc f906 	bl	1d470 <bsd_os_errno_set>
   21264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21268:	4638      	mov	r0, r7
   2126a:	b004      	add	sp, #16
   2126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21270:	2c01      	cmp	r4, #1
   21272:	d00a      	beq.n	2128a <ip_interface_open+0x10a>
   21274:	2c02      	cmp	r4, #2
   21276:	d10b      	bne.n	21290 <ip_interface_open+0x110>
   21278:	f1b8 0f02 	cmp.w	r8, #2
   2127c:	d0a4      	beq.n	211c8 <ip_interface_open+0x48>
   2127e:	2029      	movs	r0, #41	; 0x29
   21280:	f7fc f8f6 	bl	1d470 <bsd_os_errno_set>
   21284:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21288:	e7ee      	b.n	21268 <ip_interface_open+0xe8>
   2128a:	f1b8 0f01 	cmp.w	r8, #1
   2128e:	d1f6      	bne.n	2127e <ip_interface_open+0xfe>
   21290:	f04f 0802 	mov.w	r8, #2
   21294:	e798      	b.n	211c8 <ip_interface_open+0x48>
   21296:	9d03      	ldr	r5, [sp, #12]
   21298:	2d00      	cmp	r5, #0
   2129a:	d1bb      	bne.n	21214 <ip_interface_open+0x94>
   2129c:	2569      	movs	r5, #105	; 0x69
   2129e:	e7db      	b.n	21258 <ip_interface_open+0xd8>
   212a0:	46a0      	mov	r8, r4
   212a2:	e791      	b.n	211c8 <ip_interface_open+0x48>
   212a4:	ab02      	add	r3, sp, #8
   212a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   212aa:	2102      	movs	r1, #2
   212ac:	4638      	mov	r0, r7
   212ae:	f005 fedd 	bl	2706c <interface_socket_wait>
   212b2:	4605      	mov	r5, r0
   212b4:	2800      	cmp	r0, #0
   212b6:	d1cf      	bne.n	21258 <ip_interface_open+0xd8>
   212b8:	4638      	mov	r0, r7
   212ba:	f005 ff4b 	bl	27154 <interface_socket_from_handle_get>
   212be:	b138      	cbz	r0, 212d0 <ip_interface_open+0x150>
   212c0:	6845      	ldr	r5, [r0, #4]
   212c2:	b12d      	cbz	r5, 212d0 <ip_interface_open+0x150>
   212c4:	6046      	str	r6, [r0, #4]
   212c6:	e7c7      	b.n	21258 <ip_interface_open+0xd8>
   212c8:	202f      	movs	r0, #47	; 0x2f
   212ca:	f7fc f8d1 	bl	1d470 <bsd_os_errno_set>
   212ce:	e7cb      	b.n	21268 <ip_interface_open+0xe8>
   212d0:	3c02      	subs	r4, #2
   212d2:	2c01      	cmp	r4, #1
   212d4:	d8c8      	bhi.n	21268 <ip_interface_open+0xe8>
   212d6:	4638      	mov	r0, r7
   212d8:	9b01      	ldr	r3, [sp, #4]
   212da:	681a      	ldr	r2, [r3, #0]
   212dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   212e0:	601a      	str	r2, [r3, #0]
   212e2:	681a      	ldr	r2, [r3, #0]
   212e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   212e8:	601a      	str	r2, [r3, #0]
   212ea:	b004      	add	sp, #16
   212ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212f0:	2016      	movs	r0, #22
   212f2:	f7fc f8bd 	bl	1d470 <bsd_os_errno_set>
   212f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   212fa:	e7b5      	b.n	21268 <ip_interface_open+0xe8>
   212fc:	2070      	movs	r0, #112	; 0x70
   212fe:	f7fc f8b7 	bl	1d470 <bsd_os_errno_set>
   21302:	e7b1      	b.n	21268 <ip_interface_open+0xe8>
   21304:	20028f7f 	.word	0x20028f7f
   21308:	00020f81 	.word	0x00020f81

0002130c <ip_interface_close>:
   2130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21314:	b082      	sub	sp, #8
   21316:	4606      	mov	r6, r0
   21318:	9300      	str	r3, [sp, #0]
   2131a:	f005 ff1b 	bl	27154 <interface_socket_from_handle_get>
   2131e:	2800      	cmp	r0, #0
   21320:	d062      	beq.n	213e8 <ip_interface_close+0xdc>
   21322:	4604      	mov	r4, r0
   21324:	2100      	movs	r1, #0
   21326:	a802      	add	r0, sp, #8
   21328:	6827      	ldr	r7, [r4, #0]
   2132a:	f840 1d04 	str.w	r1, [r0, #-4]!
   2132e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   21332:	f7ff fdeb 	bl	20f0c <rpc_ip_client_request_alloc>
   21336:	2800      	cmp	r0, #0
   21338:	d139      	bne.n	213ae <ip_interface_close+0xa2>
   2133a:	f247 0309 	movw	r3, #28681	; 0x7009
   2133e:	2208      	movs	r2, #8
   21340:	9d01      	ldr	r5, [sp, #4]
   21342:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21346:	60eb      	str	r3, [r5, #12]
   21348:	f8c5 8010 	str.w	r8, [r5, #16]
   2134c:	7268      	strb	r0, [r5, #9]
   2134e:	72a8      	strb	r0, [r5, #10]
   21350:	72e8      	strb	r0, [r5, #11]
   21352:	722a      	strb	r2, [r5, #8]
   21354:	6823      	ldr	r3, [r4, #0]
   21356:	f247 0109 	movw	r1, #28681	; 0x7009
   2135a:	0c1b      	lsrs	r3, r3, #16
   2135c:	041b      	lsls	r3, r3, #16
   2135e:	f043 030d 	orr.w	r3, r3, #13
   21362:	6023      	str	r3, [r4, #0]
   21364:	6823      	ldr	r3, [r4, #0]
   21366:	4628      	mov	r0, r5
   21368:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2136c:	6023      	str	r3, [r4, #0]
   2136e:	6823      	ldr	r3, [r4, #0]
   21370:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21374:	6023      	str	r3, [r4, #0]
   21376:	f7ff fddd 	bl	20f34 <rpc_ip_client_request_send>
   2137a:	bb38      	cbnz	r0, 213cc <ip_interface_close+0xc0>
   2137c:	466b      	mov	r3, sp
   2137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21382:	210e      	movs	r1, #14
   21384:	4630      	mov	r0, r6
   21386:	f005 fe71 	bl	2706c <interface_socket_wait>
   2138a:	4604      	mov	r4, r0
   2138c:	b1a0      	cbz	r0, 213b8 <ip_interface_close+0xac>
   2138e:	4c17      	ldr	r4, [pc, #92]	; (213ec <ip_interface_close+0xe0>)
   21390:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   21394:	b120      	cbz	r0, 213a0 <ip_interface_close+0x94>
   21396:	f7ff fde3 	bl	20f60 <rpc_ip_client_message_free>
   2139a:	2300      	movs	r3, #0
   2139c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   213a0:	4630      	mov	r0, r6
   213a2:	f005 fe15 	bl	26fd0 <interface_socket_free>
   213a6:	2000      	movs	r0, #0
   213a8:	b002      	add	sp, #8
   213aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   213ae:	9d01      	ldr	r5, [sp, #4]
   213b0:	200c      	movs	r0, #12
   213b2:	2d00      	cmp	r5, #0
   213b4:	d1ce      	bne.n	21354 <ip_interface_close+0x48>
   213b6:	e012      	b.n	213de <ip_interface_close+0xd2>
   213b8:	4630      	mov	r0, r6
   213ba:	f005 fecb 	bl	27154 <interface_socket_from_handle_get>
   213be:	2800      	cmp	r0, #0
   213c0:	d0e5      	beq.n	2138e <ip_interface_close+0x82>
   213c2:	6843      	ldr	r3, [r0, #4]
   213c4:	2b00      	cmp	r3, #0
   213c6:	d0e2      	beq.n	2138e <ip_interface_close+0x82>
   213c8:	6044      	str	r4, [r0, #4]
   213ca:	e7e0      	b.n	2138e <ip_interface_close+0x82>
   213cc:	6828      	ldr	r0, [r5, #0]
   213ce:	b108      	cbz	r0, 213d4 <ip_interface_close+0xc8>
   213d0:	f7ff fdce 	bl	20f70 <rpc_ip_client_data_free>
   213d4:	4628      	mov	r0, r5
   213d6:	f7ff fdc3 	bl	20f60 <rpc_ip_client_message_free>
   213da:	2023      	movs	r0, #35	; 0x23
   213dc:	6027      	str	r7, [r4, #0]
   213de:	f7fc f847 	bl	1d470 <bsd_os_errno_set>
   213e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   213e6:	e7df      	b.n	213a8 <ip_interface_close+0x9c>
   213e8:	2009      	movs	r0, #9
   213ea:	e7f8      	b.n	213de <ip_interface_close+0xd2>
   213ec:	2002261c 	.word	0x2002261c

000213f0 <ip_interface_sendto>:
   213f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213f4:	2400      	movs	r4, #0
   213f6:	b089      	sub	sp, #36	; 0x24
   213f8:	9102      	str	r1, [sp, #8]
   213fa:	4615      	mov	r5, r2
   213fc:	4699      	mov	r9, r3
   213fe:	9406      	str	r4, [sp, #24]
   21400:	4607      	mov	r7, r0
   21402:	9e12      	ldr	r6, [sp, #72]	; 0x48
   21404:	f005 fea6 	bl	27154 <interface_socket_from_handle_get>
   21408:	2800      	cmp	r0, #0
   2140a:	f000 814c 	beq.w	216a6 <ip_interface_sendto+0x2b6>
   2140e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21412:	f300 8139 	bgt.w	21688 <ip_interface_sendto+0x298>
   21416:	6903      	ldr	r3, [r0, #16]
   21418:	4604      	mov	r4, r0
   2141a:	2b01      	cmp	r3, #1
   2141c:	f000 80ea 	beq.w	215f4 <ip_interface_sendto+0x204>
   21420:	6822      	ldr	r2, [r4, #0]
   21422:	0391      	lsls	r1, r2, #14
   21424:	d56a      	bpl.n	214fc <ip_interface_sendto+0x10c>
   21426:	f1b9 0f00 	cmp.w	r9, #0
   2142a:	f000 80f3 	beq.w	21614 <ip_interface_sendto+0x224>
   2142e:	f019 0f02 	tst.w	r9, #2
   21432:	f000 8133 	beq.w	2169c <ip_interface_sendto+0x2ac>
   21436:	2300      	movs	r3, #0
   21438:	9303      	str	r3, [sp, #12]
   2143a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2143c:	f247 0806 	movw	r8, #28678	; 0x7006
   21440:	2b00      	cmp	r3, #0
   21442:	bf08      	it	eq
   21444:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21448:	f04f 0b0c 	mov.w	fp, #12
   2144c:	4a9a      	ldr	r2, [pc, #616]	; (216b8 <ip_interface_sendto+0x2c8>)
   2144e:	9307      	str	r3, [sp, #28]
   21450:	043b      	lsls	r3, r7, #16
   21452:	9200      	str	r2, [sp, #0]
   21454:	9304      	str	r3, [sp, #16]
   21456:	4629      	mov	r1, r5
   21458:	a806      	add	r0, sp, #24
   2145a:	f7ff fd57 	bl	20f0c <rpc_ip_client_request_alloc>
   2145e:	2804      	cmp	r0, #4
   21460:	f000 8098 	beq.w	21594 <ip_interface_sendto+0x1a4>
   21464:	2800      	cmp	r0, #0
   21466:	f040 8123 	bne.w	216b0 <ip_interface_sendto+0x2c0>
   2146a:	9b06      	ldr	r3, [sp, #24]
   2146c:	f883 b008 	strb.w	fp, [r3, #8]
   21470:	7258      	strb	r0, [r3, #9]
   21472:	7298      	strb	r0, [r3, #10]
   21474:	72d8      	strb	r0, [r3, #11]
   21476:	2e00      	cmp	r6, #0
   21478:	d053      	beq.n	21522 <ip_interface_sendto+0x132>
   2147a:	68e2      	ldr	r2, [r4, #12]
   2147c:	6871      	ldr	r1, [r6, #4]
   2147e:	428a      	cmp	r2, r1
   21480:	f040 809a 	bne.w	215b8 <ip_interface_sendto+0x1c8>
   21484:	7831      	ldrb	r1, [r6, #0]
   21486:	9813      	ldr	r0, [sp, #76]	; 0x4c
   21488:	4288      	cmp	r0, r1
   2148a:	d10a      	bne.n	214a2 <ip_interface_sendto+0xb2>
   2148c:	2a02      	cmp	r2, #2
   2148e:	f103 001c 	add.w	r0, r3, #28
   21492:	f000 80e7 	beq.w	21664 <ip_interface_sendto+0x274>
   21496:	2a0a      	cmp	r2, #10
   21498:	d103      	bne.n	214a2 <ip_interface_sendto+0xb2>
   2149a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2149c:	2a24      	cmp	r2, #36	; 0x24
   2149e:	f000 80ce 	beq.w	2163e <ip_interface_sendto+0x24e>
   214a2:	f04f 0a16 	mov.w	sl, #22
   214a6:	6818      	ldr	r0, [r3, #0]
   214a8:	b110      	cbz	r0, 214b0 <ip_interface_sendto+0xc0>
   214aa:	f7ff fd61 	bl	20f70 <rpc_ip_client_data_free>
   214ae:	9b06      	ldr	r3, [sp, #24]
   214b0:	4618      	mov	r0, r3
   214b2:	f7ff fd55 	bl	20f60 <rpc_ip_client_message_free>
   214b6:	6823      	ldr	r3, [r4, #0]
   214b8:	0318      	lsls	r0, r3, #12
   214ba:	d40b      	bmi.n	214d4 <ip_interface_sendto+0xe4>
   214bc:	6823      	ldr	r3, [r4, #0]
   214be:	b29b      	uxth	r3, r3
   214c0:	2b0d      	cmp	r3, #13
   214c2:	d007      	beq.n	214d4 <ip_interface_sendto+0xe4>
   214c4:	6823      	ldr	r3, [r4, #0]
   214c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   214ca:	6023      	str	r3, [r4, #0]
   214cc:	6823      	ldr	r3, [r4, #0]
   214ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   214d2:	6023      	str	r3, [r4, #0]
   214d4:	f1ba 0f00 	cmp.w	sl, #0
   214d8:	f040 8093 	bne.w	21602 <ip_interface_sendto+0x212>
   214dc:	6823      	ldr	r3, [r4, #0]
   214de:	0119      	lsls	r1, r3, #4
   214e0:	d56d      	bpl.n	215be <ip_interface_sendto+0x1ce>
   214e2:	6823      	ldr	r3, [r4, #0]
   214e4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   214e8:	6023      	str	r3, [r4, #0]
   214ea:	9b00      	ldr	r3, [sp, #0]
   214ec:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   214f0:	2800      	cmp	r0, #0
   214f2:	d168      	bne.n	215c6 <ip_interface_sendto+0x1d6>
   214f4:	4628      	mov	r0, r5
   214f6:	b009      	add	sp, #36	; 0x24
   214f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214fc:	6822      	ldr	r2, [r4, #0]
   214fe:	0092      	lsls	r2, r2, #2
   21500:	d406      	bmi.n	21510 <ip_interface_sendto+0x120>
   21502:	2b01      	cmp	r3, #1
   21504:	f000 8095 	beq.w	21632 <ip_interface_sendto+0x242>
   21508:	6823      	ldr	r3, [r4, #0]
   2150a:	031b      	lsls	r3, r3, #12
   2150c:	f140 80b7 	bpl.w	2167e <ip_interface_sendto+0x28e>
   21510:	6823      	ldr	r3, [r4, #0]
   21512:	031e      	lsls	r6, r3, #12
   21514:	f140 80bd 	bpl.w	21692 <ip_interface_sendto+0x2a2>
   21518:	4b67      	ldr	r3, [pc, #412]	; (216b8 <ip_interface_sendto+0x2c8>)
   2151a:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2151e:	9300      	str	r3, [sp, #0]
   21520:	e7d8      	b.n	214d4 <ip_interface_sendto+0xe4>
   21522:	4642      	mov	r2, r8
   21524:	f8c3 9014 	str.w	r9, [r3, #20]
   21528:	69a1      	ldr	r1, [r4, #24]
   2152a:	9804      	ldr	r0, [sp, #16]
   2152c:	6119      	str	r1, [r3, #16]
   2152e:	9902      	ldr	r1, [sp, #8]
   21530:	4302      	orrs	r2, r0
   21532:	60da      	str	r2, [r3, #12]
   21534:	605d      	str	r5, [r3, #4]
   21536:	b119      	cbz	r1, 21540 <ip_interface_sendto+0x150>
   21538:	6818      	ldr	r0, [r3, #0]
   2153a:	462a      	mov	r2, r5
   2153c:	f013 fa70 	bl	34a20 <memcpy>
   21540:	6823      	ldr	r3, [r4, #0]
   21542:	4641      	mov	r1, r8
   21544:	9305      	str	r3, [sp, #20]
   21546:	6823      	ldr	r3, [r4, #0]
   21548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2154c:	6023      	str	r3, [r4, #0]
   2154e:	6823      	ldr	r3, [r4, #0]
   21550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   21554:	6023      	str	r3, [r4, #0]
   21556:	9b06      	ldr	r3, [sp, #24]
   21558:	4618      	mov	r0, r3
   2155a:	9301      	str	r3, [sp, #4]
   2155c:	f7ff fcea 	bl	20f34 <rpc_ip_client_request_send>
   21560:	9b01      	ldr	r3, [sp, #4]
   21562:	4682      	mov	sl, r0
   21564:	2800      	cmp	r0, #0
   21566:	d138      	bne.n	215da <ip_interface_sendto+0x1ea>
   21568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2156c:	ab07      	add	r3, sp, #28
   2156e:	4611      	mov	r1, r2
   21570:	4638      	mov	r0, r7
   21572:	f005 fd7b 	bl	2706c <interface_socket_wait>
   21576:	4603      	mov	r3, r0
   21578:	b198      	cbz	r0, 215a2 <ip_interface_sendto+0x1b2>
   2157a:	6822      	ldr	r2, [r4, #0]
   2157c:	0312      	lsls	r2, r2, #12
   2157e:	d455      	bmi.n	2162c <ip_interface_sendto+0x23c>
   21580:	2b3c      	cmp	r3, #60	; 0x3c
   21582:	d017      	beq.n	215b4 <ip_interface_sendto+0x1c4>
   21584:	2b0c      	cmp	r3, #12
   21586:	d115      	bne.n	215b4 <ip_interface_sendto+0x1c4>
   21588:	9b00      	ldr	r3, [sp, #0]
   2158a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2158e:	b108      	cbz	r0, 21594 <ip_interface_sendto+0x1a4>
   21590:	f7ff fce6 	bl	20f60 <rpc_ip_client_message_free>
   21594:	9b03      	ldr	r3, [sp, #12]
   21596:	2b00      	cmp	r3, #0
   21598:	f47f af5d 	bne.w	21456 <ip_interface_sendto+0x66>
   2159c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   215a0:	e789      	b.n	214b6 <ip_interface_sendto+0xc6>
   215a2:	9001      	str	r0, [sp, #4]
   215a4:	4638      	mov	r0, r7
   215a6:	f005 fdd5 	bl	27154 <interface_socket_from_handle_get>
   215aa:	9b01      	ldr	r3, [sp, #4]
   215ac:	b110      	cbz	r0, 215b4 <ip_interface_sendto+0x1c4>
   215ae:	6843      	ldr	r3, [r0, #4]
   215b0:	2b00      	cmp	r3, #0
   215b2:	d136      	bne.n	21622 <ip_interface_sendto+0x232>
   215b4:	469a      	mov	sl, r3
   215b6:	e77e      	b.n	214b6 <ip_interface_sendto+0xc6>
   215b8:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   215bc:	e773      	b.n	214a6 <ip_interface_sendto+0xb6>
   215be:	9b00      	ldr	r3, [sp, #0]
   215c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   215c4:	6985      	ldr	r5, [r0, #24]
   215c6:	f7ff fccb 	bl	20f60 <rpc_ip_client_message_free>
   215ca:	2300      	movs	r3, #0
   215cc:	4628      	mov	r0, r5
   215ce:	9a00      	ldr	r2, [sp, #0]
   215d0:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   215d4:	b009      	add	sp, #36	; 0x24
   215d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215da:	6818      	ldr	r0, [r3, #0]
   215dc:	469a      	mov	sl, r3
   215de:	b108      	cbz	r0, 215e4 <ip_interface_sendto+0x1f4>
   215e0:	f7ff fcc6 	bl	20f70 <rpc_ip_client_data_free>
   215e4:	4650      	mov	r0, sl
   215e6:	f7ff fcbb 	bl	20f60 <rpc_ip_client_message_free>
   215ea:	9b05      	ldr	r3, [sp, #20]
   215ec:	f04f 0a23 	mov.w	sl, #35	; 0x23
   215f0:	6023      	str	r3, [r4, #0]
   215f2:	e760      	b.n	214b6 <ip_interface_sendto+0xc6>
   215f4:	2e00      	cmp	r6, #0
   215f6:	f43f af13 	beq.w	21420 <ip_interface_sendto+0x30>
   215fa:	f04f 0a38 	mov.w	sl, #56	; 0x38
   215fe:	4b2e      	ldr	r3, [pc, #184]	; (216b8 <ip_interface_sendto+0x2c8>)
   21600:	9300      	str	r3, [sp, #0]
   21602:	4650      	mov	r0, sl
   21604:	f7fb ff34 	bl	1d470 <bsd_os_errno_set>
   21608:	9b00      	ldr	r3, [sp, #0]
   2160a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2160e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   21612:	e76d      	b.n	214f0 <ip_interface_sendto+0x100>
   21614:	6823      	ldr	r3, [r4, #0]
   21616:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   2161a:	f3c3 7300 	ubfx	r3, r3, #28, #1
   2161e:	9303      	str	r3, [sp, #12]
   21620:	e70b      	b.n	2143a <ip_interface_sendto+0x4a>
   21622:	f8c0 a004 	str.w	sl, [r0, #4]
   21626:	6822      	ldr	r2, [r4, #0]
   21628:	0312      	lsls	r2, r2, #12
   2162a:	d5a9      	bpl.n	21580 <ip_interface_sendto+0x190>
   2162c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   21630:	e741      	b.n	214b6 <ip_interface_sendto+0xc6>
   21632:	6823      	ldr	r3, [r4, #0]
   21634:	b29b      	uxth	r3, r3
   21636:	2b05      	cmp	r3, #5
   21638:	f47f af6a 	bne.w	21510 <ip_interface_sendto+0x120>
   2163c:	e764      	b.n	21508 <ip_interface_sendto+0x118>
   2163e:	2210      	movs	r2, #16
   21640:	8931      	ldrh	r1, [r6, #8]
   21642:	835a      	strh	r2, [r3, #26]
   21644:	8319      	strh	r1, [r3, #24]
   21646:	18b1      	adds	r1, r6, r2
   21648:	f013 f9ea 	bl	34a20 <memcpy>
   2164c:	f247 0207 	movw	r2, #28679	; 0x7007
   21650:	9b06      	ldr	r3, [sp, #24]
   21652:	4690      	mov	r8, r2
   21654:	6899      	ldr	r1, [r3, #8]
   21656:	8b58      	ldrh	r0, [r3, #26]
   21658:	3104      	adds	r1, #4
   2165a:	4401      	add	r1, r0
   2165c:	f8c3 9014 	str.w	r9, [r3, #20]
   21660:	6099      	str	r1, [r3, #8]
   21662:	e761      	b.n	21528 <ip_interface_sendto+0x138>
   21664:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21666:	2a10      	cmp	r2, #16
   21668:	f47f af1b 	bne.w	214a2 <ip_interface_sendto+0xb2>
   2166c:	2204      	movs	r2, #4
   2166e:	8931      	ldrh	r1, [r6, #8]
   21670:	835a      	strh	r2, [r3, #26]
   21672:	8319      	strh	r1, [r3, #24]
   21674:	f106 010c 	add.w	r1, r6, #12
   21678:	f013 f9d2 	bl	34a20 <memcpy>
   2167c:	e7e6      	b.n	2164c <ip_interface_sendto+0x25c>
   2167e:	4b0e      	ldr	r3, [pc, #56]	; (216b8 <ip_interface_sendto+0x2c8>)
   21680:	f04f 0a23 	mov.w	sl, #35	; 0x23
   21684:	9300      	str	r3, [sp, #0]
   21686:	e7bc      	b.n	21602 <ip_interface_sendto+0x212>
   21688:	4b0b      	ldr	r3, [pc, #44]	; (216b8 <ip_interface_sendto+0x2c8>)
   2168a:	f04f 0a28 	mov.w	sl, #40	; 0x28
   2168e:	9300      	str	r3, [sp, #0]
   21690:	e7b7      	b.n	21602 <ip_interface_sendto+0x212>
   21692:	4b09      	ldr	r3, [pc, #36]	; (216b8 <ip_interface_sendto+0x2c8>)
   21694:	f04f 0a39 	mov.w	sl, #57	; 0x39
   21698:	9300      	str	r3, [sp, #0]
   2169a:	e7b2      	b.n	21602 <ip_interface_sendto+0x212>
   2169c:	4b06      	ldr	r3, [pc, #24]	; (216b8 <ip_interface_sendto+0x2c8>)
   2169e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   216a2:	9300      	str	r3, [sp, #0]
   216a4:	e7ad      	b.n	21602 <ip_interface_sendto+0x212>
   216a6:	4b04      	ldr	r3, [pc, #16]	; (216b8 <ip_interface_sendto+0x2c8>)
   216a8:	f04f 0a09 	mov.w	sl, #9
   216ac:	9300      	str	r3, [sp, #0]
   216ae:	e7a8      	b.n	21602 <ip_interface_sendto+0x212>
   216b0:	f04f 0a0c 	mov.w	sl, #12
   216b4:	e6ff      	b.n	214b6 <ip_interface_sendto+0xc6>
   216b6:	bf00      	nop
   216b8:	2002261c 	.word	0x2002261c

000216bc <ip_interface_recvfrom>:
   216bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216c0:	b087      	sub	sp, #28
   216c2:	2a00      	cmp	r2, #0
   216c4:	f000 8112 	beq.w	218ec <ip_interface_recvfrom+0x230>
   216c8:	4680      	mov	r8, r0
   216ca:	468b      	mov	fp, r1
   216cc:	469a      	mov	sl, r3
   216ce:	4691      	mov	r9, r2
   216d0:	b11b      	cbz	r3, 216da <ip_interface_recvfrom+0x1e>
   216d2:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   216d6:	f000 8107 	beq.w	218e8 <ip_interface_recvfrom+0x22c>
   216da:	4640      	mov	r0, r8
   216dc:	f005 fd3a 	bl	27154 <interface_socket_from_handle_get>
   216e0:	4604      	mov	r4, r0
   216e2:	2800      	cmp	r0, #0
   216e4:	f000 8104 	beq.w	218f0 <ip_interface_recvfrom+0x234>
   216e8:	6803      	ldr	r3, [r0, #0]
   216ea:	02db      	lsls	r3, r3, #11
   216ec:	d562      	bpl.n	217b4 <ip_interface_recvfrom+0xf8>
   216ee:	f01a 0f02 	tst.w	sl, #2
   216f2:	bf18      	it	ne
   216f4:	2600      	movne	r6, #0
   216f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   216fa:	bf08      	it	eq
   216fc:	6806      	ldreq	r6, [r0, #0]
   216fe:	f00a 0310 	and.w	r3, sl, #16
   21702:	bf04      	itt	eq
   21704:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   21708:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   2170c:	9301      	str	r3, [sp, #4]
   2170e:	6823      	ldr	r3, [r4, #0]
   21710:	03df      	lsls	r7, r3, #15
   21712:	d567      	bpl.n	217e4 <ip_interface_recvfrom+0x128>
   21714:	6823      	ldr	r3, [r4, #0]
   21716:	69e0      	ldr	r0, [r4, #28]
   21718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2171c:	6023      	str	r3, [r4, #0]
   2171e:	6803      	ldr	r3, [r0, #0]
   21720:	68db      	ldr	r3, [r3, #12]
   21722:	4798      	blx	r3
   21724:	4605      	mov	r5, r0
   21726:	3001      	adds	r0, #1
   21728:	d07d      	beq.n	21826 <ip_interface_recvfrom+0x16a>
   2172a:	45a9      	cmp	r9, r5
   2172c:	dd03      	ble.n	21736 <ip_interface_recvfrom+0x7a>
   2172e:	6923      	ldr	r3, [r4, #16]
   21730:	2b01      	cmp	r3, #1
   21732:	f000 80a3 	beq.w	2187c <ip_interface_recvfrom+0x1c0>
   21736:	f04f 0800 	mov.w	r8, #0
   2173a:	af02      	add	r7, sp, #8
   2173c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2173e:	b103      	cbz	r3, 21742 <ip_interface_recvfrom+0x86>
   21740:	681b      	ldr	r3, [r3, #0]
   21742:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21744:	e9cd b902 	strd	fp, r9, [sp, #8]
   21748:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2174c:	69e0      	ldr	r0, [r4, #28]
   2174e:	4639      	mov	r1, r7
   21750:	6803      	ldr	r3, [r0, #0]
   21752:	4652      	mov	r2, sl
   21754:	689b      	ldr	r3, [r3, #8]
   21756:	4798      	blx	r3
   21758:	4605      	mov	r5, r0
   2175a:	69e0      	ldr	r0, [r4, #28]
   2175c:	1c6b      	adds	r3, r5, #1
   2175e:	6803      	ldr	r3, [r0, #0]
   21760:	bf18      	it	ne
   21762:	2701      	movne	r7, #1
   21764:	68db      	ldr	r3, [r3, #12]
   21766:	bf0a      	itet	eq
   21768:	2700      	moveq	r7, #0
   2176a:	2600      	movne	r6, #0
   2176c:	2623      	moveq	r6, #35	; 0x23
   2176e:	4798      	blx	r3
   21770:	3001      	adds	r0, #1
   21772:	d132      	bne.n	217da <ip_interface_recvfrom+0x11e>
   21774:	f1b8 0f00 	cmp.w	r8, #0
   21778:	f000 80b0 	beq.w	218dc <ip_interface_recvfrom+0x220>
   2177c:	2f00      	cmp	r7, #0
   2177e:	f000 80a1 	beq.w	218c4 <ip_interface_recvfrom+0x208>
   21782:	6823      	ldr	r3, [r4, #0]
   21784:	0318      	lsls	r0, r3, #12
   21786:	d506      	bpl.n	21796 <ip_interface_recvfrom+0xda>
   21788:	6823      	ldr	r3, [r4, #0]
   2178a:	b29b      	uxth	r3, r3
   2178c:	2b0d      	cmp	r3, #13
   2178e:	d002      	beq.n	21796 <ip_interface_recvfrom+0xda>
   21790:	6923      	ldr	r3, [r4, #16]
   21792:	2b01      	cmp	r3, #1
   21794:	d021      	beq.n	217da <ip_interface_recvfrom+0x11e>
   21796:	6823      	ldr	r3, [r4, #0]
   21798:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2179c:	6823      	ldr	r3, [r4, #0]
   2179e:	f040 80a9 	bne.w	218f4 <ip_interface_recvfrom+0x238>
   217a2:	0319      	lsls	r1, r3, #12
   217a4:	d473      	bmi.n	2188e <ip_interface_recvfrom+0x1d2>
   217a6:	2e00      	cmp	r6, #0
   217a8:	f040 8086 	bne.w	218b8 <ip_interface_recvfrom+0x1fc>
   217ac:	4628      	mov	r0, r5
   217ae:	b007      	add	sp, #28
   217b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217b4:	6803      	ldr	r3, [r0, #0]
   217b6:	b29b      	uxth	r3, r3
   217b8:	2b06      	cmp	r3, #6
   217ba:	d071      	beq.n	218a0 <ip_interface_recvfrom+0x1e4>
   217bc:	6803      	ldr	r3, [r0, #0]
   217be:	b29b      	uxth	r3, r3
   217c0:	2b07      	cmp	r3, #7
   217c2:	bf0c      	ite	eq
   217c4:	2609      	moveq	r6, #9
   217c6:	2639      	movne	r6, #57	; 0x39
   217c8:	69e0      	ldr	r0, [r4, #28]
   217ca:	6803      	ldr	r3, [r0, #0]
   217cc:	68db      	ldr	r3, [r3, #12]
   217ce:	4798      	blx	r3
   217d0:	1c43      	adds	r3, r0, #1
   217d2:	4605      	mov	r5, r0
   217d4:	d0df      	beq.n	21796 <ip_interface_recvfrom+0xda>
   217d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   217da:	6823      	ldr	r3, [r4, #0]
   217dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   217e0:	6023      	str	r3, [r4, #0]
   217e2:	e7e0      	b.n	217a6 <ip_interface_recvfrom+0xea>
   217e4:	2e00      	cmp	r6, #0
   217e6:	d07d      	beq.n	218e4 <ip_interface_recvfrom+0x228>
   217e8:	6a26      	ldr	r6, [r4, #32]
   217ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   217ee:	2e00      	cmp	r6, #0
   217f0:	bf08      	it	eq
   217f2:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   217f6:	af02      	add	r7, sp, #8
   217f8:	463b      	mov	r3, r7
   217fa:	4611      	mov	r1, r2
   217fc:	4640      	mov	r0, r8
   217fe:	9602      	str	r6, [sp, #8]
   21800:	f005 fc34 	bl	2706c <interface_socket_wait>
   21804:	4606      	mov	r6, r0
   21806:	b350      	cbz	r0, 2185e <ip_interface_recvfrom+0x1a2>
   21808:	6823      	ldr	r3, [r4, #0]
   2180a:	031a      	lsls	r2, r3, #12
   2180c:	d532      	bpl.n	21874 <ip_interface_recvfrom+0x1b8>
   2180e:	6823      	ldr	r3, [r4, #0]
   21810:	b29b      	uxth	r3, r3
   21812:	2b0d      	cmp	r3, #13
   21814:	d02e      	beq.n	21874 <ip_interface_recvfrom+0x1b8>
   21816:	6923      	ldr	r3, [r4, #16]
   21818:	f1a3 0801 	sub.w	r8, r3, #1
   2181c:	fab8 f888 	clz	r8, r8
   21820:	ea4f 1858 	mov.w	r8, r8, lsr #5
   21824:	e78a      	b.n	2173c <ip_interface_recvfrom+0x80>
   21826:	6823      	ldr	r3, [r4, #0]
   21828:	031a      	lsls	r2, r3, #12
   2182a:	d5db      	bpl.n	217e4 <ip_interface_recvfrom+0x128>
   2182c:	6823      	ldr	r3, [r4, #0]
   2182e:	b29b      	uxth	r3, r3
   21830:	2b0d      	cmp	r3, #13
   21832:	d0d7      	beq.n	217e4 <ip_interface_recvfrom+0x128>
   21834:	6923      	ldr	r3, [r4, #16]
   21836:	69e0      	ldr	r0, [r4, #28]
   21838:	2b01      	cmp	r3, #1
   2183a:	d033      	beq.n	218a4 <ip_interface_recvfrom+0x1e8>
   2183c:	2639      	movs	r6, #57	; 0x39
   2183e:	6823      	ldr	r3, [r4, #0]
   21840:	0c1b      	lsrs	r3, r3, #16
   21842:	041b      	lsls	r3, r3, #16
   21844:	f043 030d 	orr.w	r3, r3, #13
   21848:	6023      	str	r3, [r4, #0]
   2184a:	6823      	ldr	r3, [r4, #0]
   2184c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21850:	6023      	str	r3, [r4, #0]
   21852:	6803      	ldr	r3, [r0, #0]
   21854:	68db      	ldr	r3, [r3, #12]
   21856:	4798      	blx	r3
   21858:	3001      	adds	r0, #1
   2185a:	d1be      	bne.n	217da <ip_interface_recvfrom+0x11e>
   2185c:	e79b      	b.n	21796 <ip_interface_recvfrom+0xda>
   2185e:	4640      	mov	r0, r8
   21860:	f005 fc78 	bl	27154 <interface_socket_from_handle_get>
   21864:	b140      	cbz	r0, 21878 <ip_interface_recvfrom+0x1bc>
   21866:	6846      	ldr	r6, [r0, #4]
   21868:	b136      	cbz	r6, 21878 <ip_interface_recvfrom+0x1bc>
   2186a:	2300      	movs	r3, #0
   2186c:	6043      	str	r3, [r0, #4]
   2186e:	6823      	ldr	r3, [r4, #0]
   21870:	031a      	lsls	r2, r3, #12
   21872:	d4cc      	bmi.n	2180e <ip_interface_recvfrom+0x152>
   21874:	69e0      	ldr	r0, [r4, #28]
   21876:	e7ec      	b.n	21852 <ip_interface_recvfrom+0x196>
   21878:	2601      	movs	r6, #1
   2187a:	e748      	b.n	2170e <ip_interface_recvfrom+0x52>
   2187c:	9b01      	ldr	r3, [sp, #4]
   2187e:	b11b      	cbz	r3, 21888 <ip_interface_recvfrom+0x1cc>
   21880:	6823      	ldr	r3, [r4, #0]
   21882:	00d9      	lsls	r1, r3, #3
   21884:	d5b0      	bpl.n	217e8 <ip_interface_recvfrom+0x12c>
   21886:	e756      	b.n	21736 <ip_interface_recvfrom+0x7a>
   21888:	4698      	mov	r8, r3
   2188a:	af02      	add	r7, sp, #8
   2188c:	e756      	b.n	2173c <ip_interface_recvfrom+0x80>
   2188e:	6823      	ldr	r3, [r4, #0]
   21890:	b29b      	uxth	r3, r3
   21892:	2b0d      	cmp	r3, #13
   21894:	d187      	bne.n	217a6 <ip_interface_recvfrom+0xea>
   21896:	68a3      	ldr	r3, [r4, #8]
   21898:	2b00      	cmp	r3, #0
   2189a:	d084      	beq.n	217a6 <ip_interface_recvfrom+0xea>
   2189c:	68a6      	ldr	r6, [r4, #8]
   2189e:	e782      	b.n	217a6 <ip_interface_recvfrom+0xea>
   218a0:	2609      	movs	r6, #9
   218a2:	e791      	b.n	217c8 <ip_interface_recvfrom+0x10c>
   218a4:	6803      	ldr	r3, [r0, #0]
   218a6:	68db      	ldr	r3, [r3, #12]
   218a8:	4798      	blx	r3
   218aa:	3001      	adds	r0, #1
   218ac:	d00a      	beq.n	218c4 <ip_interface_recvfrom+0x208>
   218ae:	2623      	movs	r6, #35	; 0x23
   218b0:	6823      	ldr	r3, [r4, #0]
   218b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   218b6:	6023      	str	r3, [r4, #0]
   218b8:	4630      	mov	r0, r6
   218ba:	f7fb fdd9 	bl	1d470 <bsd_os_errno_set>
   218be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   218c2:	e773      	b.n	217ac <ip_interface_recvfrom+0xf0>
   218c4:	6823      	ldr	r3, [r4, #0]
   218c6:	2500      	movs	r5, #0
   218c8:	0c1b      	lsrs	r3, r3, #16
   218ca:	041b      	lsls	r3, r3, #16
   218cc:	f043 030d 	orr.w	r3, r3, #13
   218d0:	6023      	str	r3, [r4, #0]
   218d2:	6823      	ldr	r3, [r4, #0]
   218d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   218d8:	6023      	str	r3, [r4, #0]
   218da:	e767      	b.n	217ac <ip_interface_recvfrom+0xf0>
   218dc:	2f00      	cmp	r7, #0
   218de:	f47f af50 	bne.w	21782 <ip_interface_recvfrom+0xc6>
   218e2:	e758      	b.n	21796 <ip_interface_recvfrom+0xda>
   218e4:	2623      	movs	r6, #35	; 0x23
   218e6:	e7c5      	b.n	21874 <ip_interface_recvfrom+0x1b8>
   218e8:	262d      	movs	r6, #45	; 0x2d
   218ea:	e7e5      	b.n	218b8 <ip_interface_recvfrom+0x1fc>
   218ec:	2616      	movs	r6, #22
   218ee:	e7e3      	b.n	218b8 <ip_interface_recvfrom+0x1fc>
   218f0:	2609      	movs	r6, #9
   218f2:	e7e1      	b.n	218b8 <ip_interface_recvfrom+0x1fc>
   218f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   218f8:	6023      	str	r3, [r4, #0]
   218fa:	6823      	ldr	r3, [r4, #0]
   218fc:	2669      	movs	r6, #105	; 0x69
   218fe:	0c1b      	lsrs	r3, r3, #16
   21900:	041b      	lsls	r3, r3, #16
   21902:	f043 030d 	orr.w	r3, r3, #13
   21906:	6023      	str	r3, [r4, #0]
   21908:	e7d6      	b.n	218b8 <ip_interface_recvfrom+0x1fc>
   2190a:	bf00      	nop

0002190c <ip_interface_connect>:
   2190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21910:	b082      	sub	sp, #8
   21912:	2900      	cmp	r1, #0
   21914:	d04b      	beq.n	219ae <ip_interface_connect+0xa2>
   21916:	4617      	mov	r7, r2
   21918:	2a00      	cmp	r2, #0
   2191a:	d048      	beq.n	219ae <ip_interface_connect+0xa2>
   2191c:	4680      	mov	r8, r0
   2191e:	4689      	mov	r9, r1
   21920:	f005 fc18 	bl	27154 <interface_socket_from_handle_get>
   21924:	4605      	mov	r5, r0
   21926:	2800      	cmp	r0, #0
   21928:	f000 80af 	beq.w	21a8a <ip_interface_connect+0x17e>
   2192c:	6803      	ldr	r3, [r0, #0]
   2192e:	b29b      	uxth	r3, r3
   21930:	2b02      	cmp	r3, #2
   21932:	d004      	beq.n	2193e <ip_interface_connect+0x32>
   21934:	6803      	ldr	r3, [r0, #0]
   21936:	b29b      	uxth	r3, r3
   21938:	2b04      	cmp	r3, #4
   2193a:	f040 809d 	bne.w	21a78 <ip_interface_connect+0x16c>
   2193e:	6829      	ldr	r1, [r5, #0]
   21940:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   21944:	f040 8089 	bne.w	21a5a <ip_interface_connect+0x14e>
   21948:	ae02      	add	r6, sp, #8
   2194a:	f8d5 a018 	ldr.w	sl, [r5, #24]
   2194e:	f846 1d04 	str.w	r1, [r6, #-4]!
   21952:	4630      	mov	r0, r6
   21954:	f7ff fada 	bl	20f0c <rpc_ip_client_request_alloc>
   21958:	bb98      	cbnz	r0, 219c2 <ip_interface_connect+0xb6>
   2195a:	2108      	movs	r1, #8
   2195c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   21960:	9c01      	ldr	r4, [sp, #4]
   21962:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   21966:	f043 0302 	orr.w	r3, r3, #2
   2196a:	60e3      	str	r3, [r4, #12]
   2196c:	f8c4 a010 	str.w	sl, [r4, #16]
   21970:	7260      	strb	r0, [r4, #9]
   21972:	72a0      	strb	r0, [r4, #10]
   21974:	72e0      	strb	r0, [r4, #11]
   21976:	7221      	strb	r1, [r4, #8]
   21978:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   2197c:	f042 0202 	orr.w	r2, r2, #2
   21980:	60e2      	str	r2, [r4, #12]
   21982:	68a3      	ldr	r3, [r4, #8]
   21984:	69aa      	ldr	r2, [r5, #24]
   21986:	3304      	adds	r3, #4
   21988:	6122      	str	r2, [r4, #16]
   2198a:	60a3      	str	r3, [r4, #8]
   2198c:	68eb      	ldr	r3, [r5, #12]
   2198e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   21992:	4293      	cmp	r3, r2
   21994:	d11b      	bne.n	219ce <ip_interface_connect+0xc2>
   21996:	f899 2000 	ldrb.w	r2, [r9]
   2199a:	4297      	cmp	r7, r2
   2199c:	d107      	bne.n	219ae <ip_interface_connect+0xa2>
   2199e:	2b02      	cmp	r3, #2
   219a0:	f104 0018 	add.w	r0, r4, #24
   219a4:	d015      	beq.n	219d2 <ip_interface_connect+0xc6>
   219a6:	2b0a      	cmp	r3, #10
   219a8:	d101      	bne.n	219ae <ip_interface_connect+0xa2>
   219aa:	2f24      	cmp	r7, #36	; 0x24
   219ac:	d01d      	beq.n	219ea <ip_interface_connect+0xde>
   219ae:	2416      	movs	r4, #22
   219b0:	4620      	mov	r0, r4
   219b2:	f7fb fd5d 	bl	1d470 <bsd_os_errno_set>
   219b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   219ba:	4620      	mov	r0, r4
   219bc:	b002      	add	sp, #8
   219be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   219c2:	9c01      	ldr	r4, [sp, #4]
   219c4:	2c00      	cmp	r4, #0
   219c6:	d05e      	beq.n	21a86 <ip_interface_connect+0x17a>
   219c8:	ea4f 4208 	mov.w	r2, r8, lsl #16
   219cc:	e7d4      	b.n	21978 <ip_interface_connect+0x6c>
   219ce:	242f      	movs	r4, #47	; 0x2f
   219d0:	e7ee      	b.n	219b0 <ip_interface_connect+0xa4>
   219d2:	2f10      	cmp	r7, #16
   219d4:	d1eb      	bne.n	219ae <ip_interface_connect+0xa2>
   219d6:	2204      	movs	r2, #4
   219d8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   219dc:	f109 010c 	add.w	r1, r9, #12
   219e0:	82e2      	strh	r2, [r4, #22]
   219e2:	82a3      	strh	r3, [r4, #20]
   219e4:	f013 f81c 	bl	34a20 <memcpy>
   219e8:	e008      	b.n	219fc <ip_interface_connect+0xf0>
   219ea:	2210      	movs	r2, #16
   219ec:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   219f0:	eb09 0102 	add.w	r1, r9, r2
   219f4:	82e2      	strh	r2, [r4, #22]
   219f6:	82a3      	strh	r3, [r4, #20]
   219f8:	f013 f812 	bl	34a20 <memcpy>
   219fc:	68a3      	ldr	r3, [r4, #8]
   219fe:	8ae2      	ldrh	r2, [r4, #22]
   21a00:	f247 0102 	movw	r1, #28674	; 0x7002
   21a04:	4413      	add	r3, r2
   21a06:	60a3      	str	r3, [r4, #8]
   21a08:	682f      	ldr	r7, [r5, #0]
   21a0a:	682b      	ldr	r3, [r5, #0]
   21a0c:	4620      	mov	r0, r4
   21a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   21a12:	602b      	str	r3, [r5, #0]
   21a14:	f7ff fa8e 	bl	20f34 <rpc_ip_client_request_send>
   21a18:	b9a8      	cbnz	r0, 21a46 <ip_interface_connect+0x13a>
   21a1a:	682b      	ldr	r3, [r5, #0]
   21a1c:	00db      	lsls	r3, r3, #3
   21a1e:	d429      	bmi.n	21a74 <ip_interface_connect+0x168>
   21a20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   21a22:	4633      	mov	r3, r6
   21a24:	2c00      	cmp	r4, #0
   21a26:	bf08      	it	eq
   21a28:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   21a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21a30:	2105      	movs	r1, #5
   21a32:	4640      	mov	r0, r8
   21a34:	9401      	str	r4, [sp, #4]
   21a36:	f005 fb19 	bl	2706c <interface_socket_wait>
   21a3a:	4604      	mov	r4, r0
   21a3c:	b178      	cbz	r0, 21a5e <ip_interface_connect+0x152>
   21a3e:	2c73      	cmp	r4, #115	; 0x73
   21a40:	d0b6      	beq.n	219b0 <ip_interface_connect+0xa4>
   21a42:	602f      	str	r7, [r5, #0]
   21a44:	e7b4      	b.n	219b0 <ip_interface_connect+0xa4>
   21a46:	6820      	ldr	r0, [r4, #0]
   21a48:	b108      	cbz	r0, 21a4e <ip_interface_connect+0x142>
   21a4a:	f7ff fa91 	bl	20f70 <rpc_ip_client_data_free>
   21a4e:	4620      	mov	r0, r4
   21a50:	f7ff fa86 	bl	20f60 <rpc_ip_client_message_free>
   21a54:	2423      	movs	r4, #35	; 0x23
   21a56:	602f      	str	r7, [r5, #0]
   21a58:	e7aa      	b.n	219b0 <ip_interface_connect+0xa4>
   21a5a:	2472      	movs	r4, #114	; 0x72
   21a5c:	e7a8      	b.n	219b0 <ip_interface_connect+0xa4>
   21a5e:	4640      	mov	r0, r8
   21a60:	f005 fb78 	bl	27154 <interface_socket_from_handle_get>
   21a64:	2800      	cmp	r0, #0
   21a66:	d0a8      	beq.n	219ba <ip_interface_connect+0xae>
   21a68:	6843      	ldr	r3, [r0, #4]
   21a6a:	2b00      	cmp	r3, #0
   21a6c:	d0a5      	beq.n	219ba <ip_interface_connect+0xae>
   21a6e:	6044      	str	r4, [r0, #4]
   21a70:	461c      	mov	r4, r3
   21a72:	e7e4      	b.n	21a3e <ip_interface_connect+0x132>
   21a74:	2473      	movs	r4, #115	; 0x73
   21a76:	e79b      	b.n	219b0 <ip_interface_connect+0xa4>
   21a78:	6803      	ldr	r3, [r0, #0]
   21a7a:	b29b      	uxth	r3, r3
   21a7c:	2b05      	cmp	r3, #5
   21a7e:	bf14      	ite	ne
   21a80:	2409      	movne	r4, #9
   21a82:	2438      	moveq	r4, #56	; 0x38
   21a84:	e794      	b.n	219b0 <ip_interface_connect+0xa4>
   21a86:	240c      	movs	r4, #12
   21a88:	e792      	b.n	219b0 <ip_interface_connect+0xa4>
   21a8a:	2409      	movs	r4, #9
   21a8c:	e790      	b.n	219b0 <ip_interface_connect+0xa4>
   21a8e:	bf00      	nop

00021a90 <ip_interface_bind>:
   21a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a98:	b083      	sub	sp, #12
   21a9a:	9300      	str	r3, [sp, #0]
   21a9c:	b3b1      	cbz	r1, 21b0c <ip_interface_bind+0x7c>
   21a9e:	4616      	mov	r6, r2
   21aa0:	b3a2      	cbz	r2, 21b0c <ip_interface_bind+0x7c>
   21aa2:	4607      	mov	r7, r0
   21aa4:	4688      	mov	r8, r1
   21aa6:	f005 fb55 	bl	27154 <interface_socket_from_handle_get>
   21aaa:	4605      	mov	r5, r0
   21aac:	2800      	cmp	r0, #0
   21aae:	d04a      	beq.n	21b46 <ip_interface_bind+0xb6>
   21ab0:	6803      	ldr	r3, [r0, #0]
   21ab2:	b29b      	uxth	r3, r3
   21ab4:	2b02      	cmp	r3, #2
   21ab6:	d146      	bne.n	21b46 <ip_interface_bind+0xb6>
   21ab8:	2100      	movs	r1, #0
   21aba:	a802      	add	r0, sp, #8
   21abc:	f840 1d04 	str.w	r1, [r0, #-4]!
   21ac0:	f8d5 9018 	ldr.w	r9, [r5, #24]
   21ac4:	f7ff fa22 	bl	20f0c <rpc_ip_client_request_alloc>
   21ac8:	bb50      	cbnz	r0, 21b20 <ip_interface_bind+0x90>
   21aca:	f247 0305 	movw	r3, #28677	; 0x7005
   21ace:	2208      	movs	r2, #8
   21ad0:	9c01      	ldr	r4, [sp, #4]
   21ad2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   21ad6:	60e3      	str	r3, [r4, #12]
   21ad8:	f8c4 9010 	str.w	r9, [r4, #16]
   21adc:	7260      	strb	r0, [r4, #9]
   21ade:	72a0      	strb	r0, [r4, #10]
   21ae0:	72e0      	strb	r0, [r4, #11]
   21ae2:	7222      	strb	r2, [r4, #8]
   21ae4:	68a3      	ldr	r3, [r4, #8]
   21ae6:	3304      	adds	r3, #4
   21ae8:	60a3      	str	r3, [r4, #8]
   21aea:	68eb      	ldr	r3, [r5, #12]
   21aec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21af0:	4293      	cmp	r3, r2
   21af2:	d11a      	bne.n	21b2a <ip_interface_bind+0x9a>
   21af4:	f898 2000 	ldrb.w	r2, [r8]
   21af8:	4296      	cmp	r6, r2
   21afa:	d107      	bne.n	21b0c <ip_interface_bind+0x7c>
   21afc:	2b02      	cmp	r3, #2
   21afe:	f104 0018 	add.w	r0, r4, #24
   21b02:	d014      	beq.n	21b2e <ip_interface_bind+0x9e>
   21b04:	2b0a      	cmp	r3, #10
   21b06:	d101      	bne.n	21b0c <ip_interface_bind+0x7c>
   21b08:	2e24      	cmp	r6, #36	; 0x24
   21b0a:	d01e      	beq.n	21b4a <ip_interface_bind+0xba>
   21b0c:	2416      	movs	r4, #22
   21b0e:	4620      	mov	r0, r4
   21b10:	f7fb fcae 	bl	1d470 <bsd_os_errno_set>
   21b14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21b18:	4620      	mov	r0, r4
   21b1a:	b003      	add	sp, #12
   21b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21b20:	9c01      	ldr	r4, [sp, #4]
   21b22:	2c00      	cmp	r4, #0
   21b24:	d1de      	bne.n	21ae4 <ip_interface_bind+0x54>
   21b26:	240c      	movs	r4, #12
   21b28:	e7f1      	b.n	21b0e <ip_interface_bind+0x7e>
   21b2a:	242f      	movs	r4, #47	; 0x2f
   21b2c:	e7ef      	b.n	21b0e <ip_interface_bind+0x7e>
   21b2e:	2e10      	cmp	r6, #16
   21b30:	d1ec      	bne.n	21b0c <ip_interface_bind+0x7c>
   21b32:	2204      	movs	r2, #4
   21b34:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   21b38:	f108 010c 	add.w	r1, r8, #12
   21b3c:	82e2      	strh	r2, [r4, #22]
   21b3e:	82a3      	strh	r3, [r4, #20]
   21b40:	f012 ff6e 	bl	34a20 <memcpy>
   21b44:	e00a      	b.n	21b5c <ip_interface_bind+0xcc>
   21b46:	2409      	movs	r4, #9
   21b48:	e7e1      	b.n	21b0e <ip_interface_bind+0x7e>
   21b4a:	2210      	movs	r2, #16
   21b4c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   21b50:	eb08 0102 	add.w	r1, r8, r2
   21b54:	82e2      	strh	r2, [r4, #22]
   21b56:	82a3      	strh	r3, [r4, #20]
   21b58:	f012 ff62 	bl	34a20 <memcpy>
   21b5c:	68a3      	ldr	r3, [r4, #8]
   21b5e:	8ae2      	ldrh	r2, [r4, #22]
   21b60:	f247 0105 	movw	r1, #28677	; 0x7005
   21b64:	4413      	add	r3, r2
   21b66:	60a3      	str	r3, [r4, #8]
   21b68:	682b      	ldr	r3, [r5, #0]
   21b6a:	4620      	mov	r0, r4
   21b6c:	0c1b      	lsrs	r3, r3, #16
   21b6e:	041b      	lsls	r3, r3, #16
   21b70:	f043 0303 	orr.w	r3, r3, #3
   21b74:	602b      	str	r3, [r5, #0]
   21b76:	682e      	ldr	r6, [r5, #0]
   21b78:	f7ff f9dc 	bl	20f34 <rpc_ip_client_request_send>
   21b7c:	4680      	mov	r8, r0
   21b7e:	b978      	cbnz	r0, 21ba0 <ip_interface_bind+0x110>
   21b80:	466b      	mov	r3, sp
   21b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21b86:	2104      	movs	r1, #4
   21b88:	4638      	mov	r0, r7
   21b8a:	f005 fa6f 	bl	2706c <interface_socket_wait>
   21b8e:	4604      	mov	r4, r0
   21b90:	b1a0      	cbz	r0, 21bbc <ip_interface_bind+0x12c>
   21b92:	682b      	ldr	r3, [r5, #0]
   21b94:	0c1b      	lsrs	r3, r3, #16
   21b96:	041b      	lsls	r3, r3, #16
   21b98:	f043 0302 	orr.w	r3, r3, #2
   21b9c:	602b      	str	r3, [r5, #0]
   21b9e:	e7b6      	b.n	21b0e <ip_interface_bind+0x7e>
   21ba0:	6820      	ldr	r0, [r4, #0]
   21ba2:	b108      	cbz	r0, 21ba8 <ip_interface_bind+0x118>
   21ba4:	f7ff f9e4 	bl	20f70 <rpc_ip_client_data_free>
   21ba8:	0c36      	lsrs	r6, r6, #16
   21baa:	0436      	lsls	r6, r6, #16
   21bac:	4620      	mov	r0, r4
   21bae:	f046 0602 	orr.w	r6, r6, #2
   21bb2:	f7ff f9d5 	bl	20f60 <rpc_ip_client_message_free>
   21bb6:	2423      	movs	r4, #35	; 0x23
   21bb8:	602e      	str	r6, [r5, #0]
   21bba:	e7a8      	b.n	21b0e <ip_interface_bind+0x7e>
   21bbc:	4638      	mov	r0, r7
   21bbe:	f005 fac9 	bl	27154 <interface_socket_from_handle_get>
   21bc2:	2800      	cmp	r0, #0
   21bc4:	d0a8      	beq.n	21b18 <ip_interface_bind+0x88>
   21bc6:	6844      	ldr	r4, [r0, #4]
   21bc8:	2c00      	cmp	r4, #0
   21bca:	d0a5      	beq.n	21b18 <ip_interface_bind+0x88>
   21bcc:	f8c0 8004 	str.w	r8, [r0, #4]
   21bd0:	e7df      	b.n	21b92 <ip_interface_bind+0x102>
   21bd2:	bf00      	nop

00021bd4 <ip_interface_listen>:
   21bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bdc:	b082      	sub	sp, #8
   21bde:	4606      	mov	r6, r0
   21be0:	9300      	str	r3, [sp, #0]
   21be2:	f005 fab7 	bl	27154 <interface_socket_from_handle_get>
   21be6:	2800      	cmp	r0, #0
   21be8:	d066      	beq.n	21cb8 <ip_interface_listen+0xe4>
   21bea:	6803      	ldr	r3, [r0, #0]
   21bec:	4605      	mov	r5, r0
   21bee:	b29b      	uxth	r3, r3
   21bf0:	2b04      	cmp	r3, #4
   21bf2:	d161      	bne.n	21cb8 <ip_interface_listen+0xe4>
   21bf4:	2100      	movs	r1, #0
   21bf6:	4a32      	ldr	r2, [pc, #200]	; (21cc0 <ip_interface_listen+0xec>)
   21bf8:	4630      	mov	r0, r6
   21bfa:	f005 f9ff 	bl	26ffc <interface_socket_packet_handler_update>
   21bfe:	4601      	mov	r1, r0
   21c00:	2800      	cmp	r0, #0
   21c02:	d15b      	bne.n	21cbc <ip_interface_listen+0xe8>
   21c04:	a802      	add	r0, sp, #8
   21c06:	f840 1d04 	str.w	r1, [r0, #-4]!
   21c0a:	69af      	ldr	r7, [r5, #24]
   21c0c:	f7ff f97e 	bl	20f0c <rpc_ip_client_request_alloc>
   21c10:	bba0      	cbnz	r0, 21c7c <ip_interface_listen+0xa8>
   21c12:	f247 0308 	movw	r3, #28680	; 0x7008
   21c16:	2208      	movs	r2, #8
   21c18:	9c01      	ldr	r4, [sp, #4]
   21c1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21c1e:	60e3      	str	r3, [r4, #12]
   21c20:	6127      	str	r7, [r4, #16]
   21c22:	7260      	strb	r0, [r4, #9]
   21c24:	72a0      	strb	r0, [r4, #10]
   21c26:	72e0      	strb	r0, [r4, #11]
   21c28:	7222      	strb	r2, [r4, #8]
   21c2a:	68a3      	ldr	r3, [r4, #8]
   21c2c:	f247 0108 	movw	r1, #28680	; 0x7008
   21c30:	3304      	adds	r3, #4
   21c32:	60a3      	str	r3, [r4, #8]
   21c34:	682b      	ldr	r3, [r5, #0]
   21c36:	4620      	mov	r0, r4
   21c38:	0c1b      	lsrs	r3, r3, #16
   21c3a:	041b      	lsls	r3, r3, #16
   21c3c:	f043 0306 	orr.w	r3, r3, #6
   21c40:	602b      	str	r3, [r5, #0]
   21c42:	682f      	ldr	r7, [r5, #0]
   21c44:	f7ff f976 	bl	20f34 <rpc_ip_client_request_send>
   21c48:	4680      	mov	r8, r0
   21c4a:	b9e0      	cbnz	r0, 21c86 <ip_interface_listen+0xb2>
   21c4c:	466b      	mov	r3, sp
   21c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21c52:	2107      	movs	r1, #7
   21c54:	4630      	mov	r0, r6
   21c56:	f005 fa09 	bl	2706c <interface_socket_wait>
   21c5a:	4604      	mov	r4, r0
   21c5c:	b308      	cbz	r0, 21ca2 <ip_interface_listen+0xce>
   21c5e:	682b      	ldr	r3, [r5, #0]
   21c60:	0c1b      	lsrs	r3, r3, #16
   21c62:	041b      	lsls	r3, r3, #16
   21c64:	f043 0304 	orr.w	r3, r3, #4
   21c68:	602b      	str	r3, [r5, #0]
   21c6a:	4620      	mov	r0, r4
   21c6c:	f7fb fc00 	bl	1d470 <bsd_os_errno_set>
   21c70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21c74:	4620      	mov	r0, r4
   21c76:	b002      	add	sp, #8
   21c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c7c:	9c01      	ldr	r4, [sp, #4]
   21c7e:	2c00      	cmp	r4, #0
   21c80:	d1d3      	bne.n	21c2a <ip_interface_listen+0x56>
   21c82:	240c      	movs	r4, #12
   21c84:	e7f1      	b.n	21c6a <ip_interface_listen+0x96>
   21c86:	6820      	ldr	r0, [r4, #0]
   21c88:	b108      	cbz	r0, 21c8e <ip_interface_listen+0xba>
   21c8a:	f7ff f971 	bl	20f70 <rpc_ip_client_data_free>
   21c8e:	0c3f      	lsrs	r7, r7, #16
   21c90:	043f      	lsls	r7, r7, #16
   21c92:	4620      	mov	r0, r4
   21c94:	f047 0704 	orr.w	r7, r7, #4
   21c98:	f7ff f962 	bl	20f60 <rpc_ip_client_message_free>
   21c9c:	2423      	movs	r4, #35	; 0x23
   21c9e:	602f      	str	r7, [r5, #0]
   21ca0:	e7e3      	b.n	21c6a <ip_interface_listen+0x96>
   21ca2:	4630      	mov	r0, r6
   21ca4:	f005 fa56 	bl	27154 <interface_socket_from_handle_get>
   21ca8:	2800      	cmp	r0, #0
   21caa:	d0e3      	beq.n	21c74 <ip_interface_listen+0xa0>
   21cac:	6844      	ldr	r4, [r0, #4]
   21cae:	2c00      	cmp	r4, #0
   21cb0:	d0e0      	beq.n	21c74 <ip_interface_listen+0xa0>
   21cb2:	f8c0 8004 	str.w	r8, [r0, #4]
   21cb6:	e7d2      	b.n	21c5e <ip_interface_listen+0x8a>
   21cb8:	2409      	movs	r4, #9
   21cba:	e7d6      	b.n	21c6a <ip_interface_listen+0x96>
   21cbc:	2423      	movs	r4, #35	; 0x23
   21cbe:	e7d4      	b.n	21c6a <ip_interface_listen+0x96>
   21cc0:	00020f81 	.word	0x00020f81

00021cc4 <ip_interface_accept>:
   21cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21ccc:	2500      	movs	r5, #0
   21cce:	b087      	sub	sp, #28
   21cd0:	460f      	mov	r7, r1
   21cd2:	4690      	mov	r8, r2
   21cd4:	e9cd 5303 	strd	r5, r3, [sp, #12]
   21cd8:	4606      	mov	r6, r0
   21cda:	f005 fa3b 	bl	27154 <interface_socket_from_handle_get>
   21cde:	4604      	mov	r4, r0
   21ce0:	2800      	cmp	r0, #0
   21ce2:	f000 8123 	beq.w	21f2c <ip_interface_accept+0x268>
   21ce6:	6803      	ldr	r3, [r0, #0]
   21ce8:	b29b      	uxth	r3, r3
   21cea:	2b07      	cmp	r3, #7
   21cec:	d10a      	bne.n	21d04 <ip_interface_accept+0x40>
   21cee:	6803      	ldr	r3, [r0, #0]
   21cf0:	6805      	ldr	r5, [r0, #0]
   21cf2:	00db      	lsls	r3, r3, #3
   21cf4:	d416      	bmi.n	21d24 <ip_interface_accept+0x60>
   21cf6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   21cfa:	d019      	beq.n	21d30 <ip_interface_accept+0x6c>
   21cfc:	6805      	ldr	r5, [r0, #0]
   21cfe:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   21d02:	d124      	bne.n	21d4e <ip_interface_accept+0x8a>
   21d04:	f04f 0909 	mov.w	r9, #9
   21d08:	9b03      	ldr	r3, [sp, #12]
   21d0a:	b113      	cbz	r3, 21d12 <ip_interface_accept+0x4e>
   21d0c:	4628      	mov	r0, r5
   21d0e:	f005 f95f 	bl	26fd0 <interface_socket_free>
   21d12:	4648      	mov	r0, r9
   21d14:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   21d18:	f7fb fbaa 	bl	1d470 <bsd_os_errno_set>
   21d1c:	4648      	mov	r0, r9
   21d1e:	b007      	add	sp, #28
   21d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d24:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   21d28:	d170      	bne.n	21e0c <ip_interface_accept+0x148>
   21d2a:	f04f 0923 	mov.w	r9, #35	; 0x23
   21d2e:	e7eb      	b.n	21d08 <ip_interface_accept+0x44>
   21d30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21d34:	ab04      	add	r3, sp, #16
   21d36:	4611      	mov	r1, r2
   21d38:	4630      	mov	r0, r6
   21d3a:	f005 f997 	bl	2706c <interface_socket_wait>
   21d3e:	4681      	mov	r9, r0
   21d40:	2800      	cmp	r0, #0
   21d42:	f000 8082 	beq.w	21e4a <ip_interface_accept+0x186>
   21d46:	6825      	ldr	r5, [r4, #0]
   21d48:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   21d4c:	d0dc      	beq.n	21d08 <ip_interface_accept+0x44>
   21d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21d52:	2300      	movs	r3, #0
   21d54:	e9cd 0300 	strd	r0, r3, [sp]
   21d58:	4a78      	ldr	r2, [pc, #480]	; (21f3c <ip_interface_accept+0x278>)
   21d5a:	6921      	ldr	r1, [r4, #16]
   21d5c:	a803      	add	r0, sp, #12
   21d5e:	f005 f8d3 	bl	26f08 <interface_socket_allocate>
   21d62:	9b03      	ldr	r3, [sp, #12]
   21d64:	4605      	mov	r5, r0
   21d66:	2b00      	cmp	r3, #0
   21d68:	f000 80e4 	beq.w	21f34 <ip_interface_accept+0x270>
   21d6c:	2100      	movs	r1, #0
   21d6e:	6962      	ldr	r2, [r4, #20]
   21d70:	a806      	add	r0, sp, #24
   21d72:	615a      	str	r2, [r3, #20]
   21d74:	68e2      	ldr	r2, [r4, #12]
   21d76:	f840 1d04 	str.w	r1, [r0, #-4]!
   21d7a:	60da      	str	r2, [r3, #12]
   21d7c:	6922      	ldr	r2, [r4, #16]
   21d7e:	611a      	str	r2, [r3, #16]
   21d80:	f8d4 9018 	ldr.w	r9, [r4, #24]
   21d84:	f7ff f8c2 	bl	20f0c <rpc_ip_client_request_alloc>
   21d88:	2800      	cmp	r0, #0
   21d8a:	d146      	bne.n	21e1a <ip_interface_accept+0x156>
   21d8c:	f247 030c 	movw	r3, #28684	; 0x700c
   21d90:	2108      	movs	r1, #8
   21d92:	f8dd b014 	ldr.w	fp, [sp, #20]
   21d96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21d9a:	f8cb 300c 	str.w	r3, [fp, #12]
   21d9e:	f8cb 9010 	str.w	r9, [fp, #16]
   21da2:	f88b 0009 	strb.w	r0, [fp, #9]
   21da6:	f88b 000a 	strb.w	r0, [fp, #10]
   21daa:	f88b 000b 	strb.w	r0, [fp, #11]
   21dae:	f88b 1008 	strb.w	r1, [fp, #8]
   21db2:	6823      	ldr	r3, [r4, #0]
   21db4:	f247 010c 	movw	r1, #28684	; 0x700c
   21db8:	0c1b      	lsrs	r3, r3, #16
   21dba:	041b      	lsls	r3, r3, #16
   21dbc:	f043 0308 	orr.w	r3, r3, #8
   21dc0:	6023      	str	r3, [r4, #0]
   21dc2:	4658      	mov	r0, fp
   21dc4:	f8d4 9000 	ldr.w	r9, [r4]
   21dc8:	f7ff f8b4 	bl	20f34 <rpc_ip_client_request_send>
   21dcc:	4682      	mov	sl, r0
   21dce:	bb60      	cbnz	r0, 21e2a <ip_interface_accept+0x166>
   21dd0:	6822      	ldr	r2, [r4, #0]
   21dd2:	9900      	ldr	r1, [sp, #0]
   21dd4:	ab04      	add	r3, sp, #16
   21dd6:	400a      	ands	r2, r1
   21dd8:	6022      	str	r2, [r4, #0]
   21dda:	2109      	movs	r1, #9
   21ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21de0:	4630      	mov	r0, r6
   21de2:	f005 f943 	bl	2706c <interface_socket_wait>
   21de6:	4681      	mov	r9, r0
   21de8:	2800      	cmp	r0, #0
   21dea:	f000 808d 	beq.w	21f08 <ip_interface_accept+0x244>
   21dee:	6823      	ldr	r3, [r4, #0]
   21df0:	9a01      	ldr	r2, [sp, #4]
   21df2:	431a      	orrs	r2, r3
   21df4:	6022      	str	r2, [r4, #0]
   21df6:	6823      	ldr	r3, [r4, #0]
   21df8:	0c1b      	lsrs	r3, r3, #16
   21dfa:	041b      	lsls	r3, r3, #16
   21dfc:	f043 0307 	orr.w	r3, r3, #7
   21e00:	6023      	str	r3, [r4, #0]
   21e02:	6823      	ldr	r3, [r4, #0]
   21e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   21e08:	6023      	str	r3, [r4, #0]
   21e0a:	e77d      	b.n	21d08 <ip_interface_accept+0x44>
   21e0c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   21e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21e14:	e9cd 2300 	strd	r2, r3, [sp]
   21e18:	e79e      	b.n	21d58 <ip_interface_accept+0x94>
   21e1a:	f8dd b014 	ldr.w	fp, [sp, #20]
   21e1e:	f04f 090c 	mov.w	r9, #12
   21e22:	f1bb 0f00 	cmp.w	fp, #0
   21e26:	d1c4      	bne.n	21db2 <ip_interface_accept+0xee>
   21e28:	e76e      	b.n	21d08 <ip_interface_accept+0x44>
   21e2a:	f8db 0000 	ldr.w	r0, [fp]
   21e2e:	b108      	cbz	r0, 21e34 <ip_interface_accept+0x170>
   21e30:	f7ff f89e 	bl	20f70 <rpc_ip_client_data_free>
   21e34:	ea4f 4919 	mov.w	r9, r9, lsr #16
   21e38:	4658      	mov	r0, fp
   21e3a:	ea4f 4909 	mov.w	r9, r9, lsl #16
   21e3e:	f7ff f88f 	bl	20f60 <rpc_ip_client_message_free>
   21e42:	f049 0307 	orr.w	r3, r9, #7
   21e46:	6023      	str	r3, [r4, #0]
   21e48:	e76f      	b.n	21d2a <ip_interface_accept+0x66>
   21e4a:	4630      	mov	r0, r6
   21e4c:	f005 f982 	bl	27154 <interface_socket_from_handle_get>
   21e50:	b130      	cbz	r0, 21e60 <ip_interface_accept+0x19c>
   21e52:	f8d0 9004 	ldr.w	r9, [r0, #4]
   21e56:	f1b9 0f00 	cmp.w	r9, #0
   21e5a:	d001      	beq.n	21e60 <ip_interface_accept+0x19c>
   21e5c:	6045      	str	r5, [r0, #4]
   21e5e:	e772      	b.n	21d46 <ip_interface_accept+0x82>
   21e60:	6823      	ldr	r3, [r4, #0]
   21e62:	03d9      	lsls	r1, r3, #15
   21e64:	f53f af73 	bmi.w	21d4e <ip_interface_accept+0x8a>
   21e68:	4d35      	ldr	r5, [pc, #212]	; (21f40 <ip_interface_accept+0x27c>)
   21e6a:	9903      	ldr	r1, [sp, #12]
   21e6c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   21e70:	699b      	ldr	r3, [r3, #24]
   21e72:	618b      	str	r3, [r1, #24]
   21e74:	b147      	cbz	r7, 21e88 <ip_interface_accept+0x1c4>
   21e76:	68cb      	ldr	r3, [r1, #12]
   21e78:	2b0a      	cmp	r3, #10
   21e7a:	d028      	beq.n	21ece <ip_interface_accept+0x20a>
   21e7c:	2b02      	cmp	r3, #2
   21e7e:	d103      	bne.n	21e88 <ip_interface_accept+0x1c4>
   21e80:	f8d8 2000 	ldr.w	r2, [r8]
   21e84:	2a10      	cmp	r2, #16
   21e86:	d036      	beq.n	21ef6 <ip_interface_accept+0x232>
   21e88:	680a      	ldr	r2, [r1, #0]
   21e8a:	482e      	ldr	r0, [pc, #184]	; (21f44 <ip_interface_accept+0x280>)
   21e8c:	4002      	ands	r2, r0
   21e8e:	f042 0205 	orr.w	r2, r2, #5
   21e92:	600a      	str	r2, [r1, #0]
   21e94:	9a03      	ldr	r2, [sp, #12]
   21e96:	6811      	ldr	r1, [r2, #0]
   21e98:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   21e9c:	6011      	str	r1, [r2, #0]
   21e9e:	6811      	ldr	r1, [r2, #0]
   21ea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21ea4:	6011      	str	r1, [r2, #0]
   21ea6:	6823      	ldr	r3, [r4, #0]
   21ea8:	4003      	ands	r3, r0
   21eaa:	f043 0307 	orr.w	r3, r3, #7
   21eae:	6023      	str	r3, [r4, #0]
   21eb0:	6823      	ldr	r3, [r4, #0]
   21eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   21eb6:	6023      	str	r3, [r4, #0]
   21eb8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   21ebc:	f7ff f850 	bl	20f60 <rpc_ip_client_message_free>
   21ec0:	2300      	movs	r3, #0
   21ec2:	4648      	mov	r0, r9
   21ec4:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   21ec8:	b007      	add	sp, #28
   21eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ece:	f8d8 2000 	ldr.w	r2, [r8]
   21ed2:	2a24      	cmp	r2, #36	; 0x24
   21ed4:	d1d8      	bne.n	21e88 <ip_interface_accept+0x1c4>
   21ed6:	703a      	strb	r2, [r7, #0]
   21ed8:	2210      	movs	r2, #16
   21eda:	607b      	str	r3, [r7, #4]
   21edc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   21ee0:	f107 0010 	add.w	r0, r7, #16
   21ee4:	8b9b      	ldrh	r3, [r3, #28]
   21ee6:	813b      	strh	r3, [r7, #8]
   21ee8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   21eec:	3120      	adds	r1, #32
   21eee:	f012 fd97 	bl	34a20 <memcpy>
   21ef2:	9903      	ldr	r1, [sp, #12]
   21ef4:	e7c8      	b.n	21e88 <ip_interface_accept+0x1c4>
   21ef6:	703a      	strb	r2, [r7, #0]
   21ef8:	607b      	str	r3, [r7, #4]
   21efa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   21efe:	f107 000c 	add.w	r0, r7, #12
   21f02:	8b9b      	ldrh	r3, [r3, #28]
   21f04:	2204      	movs	r2, #4
   21f06:	e7ee      	b.n	21ee6 <ip_interface_accept+0x222>
   21f08:	4630      	mov	r0, r6
   21f0a:	f005 f923 	bl	27154 <interface_socket_from_handle_get>
   21f0e:	b138      	cbz	r0, 21f20 <ip_interface_accept+0x25c>
   21f10:	f8d0 9004 	ldr.w	r9, [r0, #4]
   21f14:	f1b9 0f00 	cmp.w	r9, #0
   21f18:	d002      	beq.n	21f20 <ip_interface_accept+0x25c>
   21f1a:	f8c0 a004 	str.w	sl, [r0, #4]
   21f1e:	e766      	b.n	21dee <ip_interface_accept+0x12a>
   21f20:	6823      	ldr	r3, [r4, #0]
   21f22:	9a01      	ldr	r2, [sp, #4]
   21f24:	46a9      	mov	r9, r5
   21f26:	4313      	orrs	r3, r2
   21f28:	6023      	str	r3, [r4, #0]
   21f2a:	e79d      	b.n	21e68 <ip_interface_accept+0x1a4>
   21f2c:	4605      	mov	r5, r0
   21f2e:	f04f 0909 	mov.w	r9, #9
   21f32:	e6e9      	b.n	21d08 <ip_interface_accept+0x44>
   21f34:	f04f 090c 	mov.w	r9, #12
   21f38:	e6eb      	b.n	21d12 <ip_interface_accept+0x4e>
   21f3a:	bf00      	nop
   21f3c:	00020f81 	.word	0x00020f81
   21f40:	2002261c 	.word	0x2002261c
   21f44:	ffff0000 	.word	0xffff0000

00021f48 <ip_interface_setopt>:
   21f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f4c:	2901      	cmp	r1, #1
   21f4e:	b086      	sub	sp, #24
   21f50:	f040 80df 	bne.w	22112 <ip_interface_setopt+0x1ca>
   21f54:	4616      	mov	r6, r2
   21f56:	461d      	mov	r5, r3
   21f58:	4607      	mov	r7, r0
   21f5a:	f005 f8fb 	bl	27154 <interface_socket_from_handle_get>
   21f5e:	4604      	mov	r4, r0
   21f60:	2800      	cmp	r0, #0
   21f62:	f000 80f1 	beq.w	22148 <ip_interface_setopt+0x200>
   21f66:	f1a6 0119 	sub.w	r1, r6, #25
   21f6a:	290f      	cmp	r1, #15
   21f6c:	f200 80bd 	bhi.w	220ea <ip_interface_setopt+0x1a2>
   21f70:	e8df f001 	tbb	[pc, r1]
   21f74:	bbbbbb17 	.word	0xbbbbbb17
   21f78:	ab9b8bbb 	.word	0xab9b8bbb
   21f7c:	bbbbbbbb 	.word	0xbbbbbbbb
   21f80:	08bbbbbb 	.word	0x08bbbbbb
   21f84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21f86:	4602      	mov	r2, r0
   21f88:	e9cd 5300 	strd	r5, r3, [sp]
   21f8c:	f241 0104 	movw	r1, #4100	; 0x1004
   21f90:	463b      	mov	r3, r7
   21f92:	2008      	movs	r0, #8
   21f94:	f7ff f800 	bl	20f98 <setopt_check_and_send_int>
   21f98:	4605      	mov	r5, r0
   21f9a:	4628      	mov	r0, r5
   21f9c:	b006      	add	sp, #24
   21f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fa2:	2d00      	cmp	r5, #0
   21fa4:	f000 80c3 	beq.w	2212e <ip_interface_setopt+0x1e6>
   21fa8:	4628      	mov	r0, r5
   21faa:	f7f0 f869 	bl	12080 <strlen>
   21fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21fb0:	4298      	cmp	r0, r3
   21fb2:	f040 80bc 	bne.w	2212e <ip_interface_setopt+0x1e6>
   21fb6:	6823      	ldr	r3, [r4, #0]
   21fb8:	b29b      	uxth	r3, r3
   21fba:	2b02      	cmp	r3, #2
   21fbc:	f040 80af 	bne.w	2211e <ip_interface_setopt+0x1d6>
   21fc0:	4629      	mov	r1, r5
   21fc2:	68e0      	ldr	r0, [r4, #12]
   21fc4:	f002 fe3a 	bl	24c3c <pdn_interface_pdn_id_get>
   21fc8:	9003      	str	r0, [sp, #12]
   21fca:	3001      	adds	r0, #1
   21fcc:	bf08      	it	eq
   21fce:	2516      	moveq	r5, #22
   21fd0:	f000 8099 	beq.w	22106 <ip_interface_setopt+0x1be>
   21fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21fd8:	9304      	str	r3, [sp, #16]
   21fda:	6823      	ldr	r3, [r4, #0]
   21fdc:	0259      	lsls	r1, r3, #9
   21fde:	f100 8091 	bmi.w	22104 <ip_interface_setopt+0x1bc>
   21fe2:	6823      	ldr	r3, [r4, #0]
   21fe4:	021a      	lsls	r2, r3, #8
   21fe6:	f100 808d 	bmi.w	22104 <ip_interface_setopt+0x1bc>
   21fea:	6823      	ldr	r3, [r4, #0]
   21fec:	01db      	lsls	r3, r3, #7
   21fee:	f100 8089 	bmi.w	22104 <ip_interface_setopt+0x1bc>
   21ff2:	6823      	ldr	r3, [r4, #0]
   21ff4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   21ff8:	f040 8084 	bne.w	22104 <ip_interface_setopt+0x1bc>
   21ffc:	6826      	ldr	r6, [r4, #0]
   21ffe:	6822      	ldr	r2, [r4, #0]
   22000:	a806      	add	r0, sp, #24
   22002:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   22006:	6022      	str	r2, [r4, #0]
   22008:	2104      	movs	r1, #4
   2200a:	f840 3d04 	str.w	r3, [r0, #-4]!
   2200e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   22012:	f7fe ff7b 	bl	20f0c <rpc_ip_client_request_alloc>
   22016:	2800      	cmp	r0, #0
   22018:	f040 8083 	bne.w	22122 <ip_interface_setopt+0x1da>
   2201c:	f247 0303 	movw	r3, #28675	; 0x7003
   22020:	2208      	movs	r2, #8
   22022:	9d05      	ldr	r5, [sp, #20]
   22024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   22028:	60eb      	str	r3, [r5, #12]
   2202a:	f8c5 8010 	str.w	r8, [r5, #16]
   2202e:	7268      	strb	r0, [r5, #9]
   22030:	72a8      	strb	r0, [r5, #10]
   22032:	72e8      	strb	r0, [r5, #11]
   22034:	722a      	strb	r2, [r5, #8]
   22036:	f04f 0c08 	mov.w	ip, #8
   2203a:	2300      	movs	r3, #0
   2203c:	2010      	movs	r0, #16
   2203e:	2130      	movs	r1, #48	; 0x30
   22040:	68aa      	ldr	r2, [r5, #8]
   22042:	756b      	strb	r3, [r5, #21]
   22044:	4462      	add	r2, ip
   22046:	60aa      	str	r2, [r5, #8]
   22048:	75ab      	strb	r3, [r5, #22]
   2204a:	75eb      	strb	r3, [r5, #23]
   2204c:	76ab      	strb	r3, [r5, #26]
   2204e:	76eb      	strb	r3, [r5, #27]
   22050:	f885 c014 	strb.w	ip, [r5, #20]
   22054:	7628      	strb	r0, [r5, #24]
   22056:	7669      	strb	r1, [r5, #25]
   22058:	2204      	movs	r2, #4
   2205a:	a903      	add	r1, sp, #12
   2205c:	6828      	ldr	r0, [r5, #0]
   2205e:	f012 fcdf 	bl	34a20 <memcpy>
   22062:	f247 0103 	movw	r1, #28675	; 0x7003
   22066:	4628      	mov	r0, r5
   22068:	f7fe ff64 	bl	20f34 <rpc_ip_client_request_send>
   2206c:	4680      	mov	r8, r0
   2206e:	2800      	cmp	r0, #0
   22070:	d15f      	bne.n	22132 <ip_interface_setopt+0x1ea>
   22072:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22076:	ab04      	add	r3, sp, #16
   22078:	4611      	mov	r1, r2
   2207a:	4638      	mov	r0, r7
   2207c:	f004 fff6 	bl	2706c <interface_socket_wait>
   22080:	4605      	mov	r5, r0
   22082:	2800      	cmp	r0, #0
   22084:	d066      	beq.n	22154 <ip_interface_setopt+0x20c>
   22086:	6026      	str	r6, [r4, #0]
   22088:	e03d      	b.n	22106 <ip_interface_setopt+0x1be>
   2208a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2208c:	4602      	mov	r2, r0
   2208e:	e9cd 5300 	strd	r5, r3, [sp]
   22092:	f248 0101 	movw	r1, #32769	; 0x8001
   22096:	463b      	mov	r3, r7
   22098:	f44f 7000 	mov.w	r0, #512	; 0x200
   2209c:	f7fe ff7c 	bl	20f98 <setopt_check_and_send_int>
   220a0:	4605      	mov	r5, r0
   220a2:	4628      	mov	r0, r5
   220a4:	b006      	add	sp, #24
   220a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   220ac:	4602      	mov	r2, r0
   220ae:	e9cd 5300 	strd	r5, r3, [sp]
   220b2:	f244 0110 	movw	r1, #16400	; 0x4010
   220b6:	463b      	mov	r3, r7
   220b8:	f44f 7000 	mov.w	r0, #512	; 0x200
   220bc:	f7fe ff6c 	bl	20f98 <setopt_check_and_send_int>
   220c0:	4605      	mov	r5, r0
   220c2:	4628      	mov	r0, r5
   220c4:	b006      	add	sp, #24
   220c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   220cc:	4602      	mov	r2, r0
   220ce:	e9cd 5300 	strd	r5, r3, [sp]
   220d2:	f246 0110 	movw	r1, #24592	; 0x6010
   220d6:	463b      	mov	r3, r7
   220d8:	f44f 7000 	mov.w	r0, #512	; 0x200
   220dc:	f7fe ff5c 	bl	20f98 <setopt_check_and_send_int>
   220e0:	4605      	mov	r5, r0
   220e2:	4628      	mov	r0, r5
   220e4:	b006      	add	sp, #24
   220e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   220ec:	4632      	mov	r2, r6
   220ee:	9300      	str	r3, [sp, #0]
   220f0:	4638      	mov	r0, r7
   220f2:	462b      	mov	r3, r5
   220f4:	2101      	movs	r1, #1
   220f6:	f005 f855 	bl	271a4 <interface_socket_setopt>
   220fa:	4605      	mov	r5, r0
   220fc:	4628      	mov	r0, r5
   220fe:	b006      	add	sp, #24
   22100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22104:	2523      	movs	r5, #35	; 0x23
   22106:	4628      	mov	r0, r5
   22108:	f7fb f9b2 	bl	1d470 <bsd_os_errno_set>
   2210c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22110:	e743      	b.n	21f9a <ip_interface_setopt+0x52>
   22112:	202a      	movs	r0, #42	; 0x2a
   22114:	f7fb f9ac 	bl	1d470 <bsd_os_errno_set>
   22118:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2211c:	e73d      	b.n	21f9a <ip_interface_setopt+0x52>
   2211e:	2509      	movs	r5, #9
   22120:	e7f1      	b.n	22106 <ip_interface_setopt+0x1be>
   22122:	9d05      	ldr	r5, [sp, #20]
   22124:	2d00      	cmp	r5, #0
   22126:	d186      	bne.n	22036 <ip_interface_setopt+0xee>
   22128:	6026      	str	r6, [r4, #0]
   2212a:	250c      	movs	r5, #12
   2212c:	e7eb      	b.n	22106 <ip_interface_setopt+0x1be>
   2212e:	250e      	movs	r5, #14
   22130:	e7e9      	b.n	22106 <ip_interface_setopt+0x1be>
   22132:	6828      	ldr	r0, [r5, #0]
   22134:	b108      	cbz	r0, 2213a <ip_interface_setopt+0x1f2>
   22136:	f7fe ff1b 	bl	20f70 <rpc_ip_client_data_free>
   2213a:	4628      	mov	r0, r5
   2213c:	f7fe ff10 	bl	20f60 <rpc_ip_client_message_free>
   22140:	2523      	movs	r5, #35	; 0x23
   22142:	6026      	str	r6, [r4, #0]
   22144:	6026      	str	r6, [r4, #0]
   22146:	e7de      	b.n	22106 <ip_interface_setopt+0x1be>
   22148:	2009      	movs	r0, #9
   2214a:	f7fb f991 	bl	1d470 <bsd_os_errno_set>
   2214e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22152:	e722      	b.n	21f9a <ip_interface_setopt+0x52>
   22154:	4638      	mov	r0, r7
   22156:	f004 fffd 	bl	27154 <interface_socket_from_handle_get>
   2215a:	b120      	cbz	r0, 22166 <ip_interface_setopt+0x21e>
   2215c:	6845      	ldr	r5, [r0, #4]
   2215e:	b115      	cbz	r5, 22166 <ip_interface_setopt+0x21e>
   22160:	f8c0 8004 	str.w	r8, [r0, #4]
   22164:	e78f      	b.n	22086 <ip_interface_setopt+0x13e>
   22166:	6026      	str	r6, [r4, #0]
   22168:	e717      	b.n	21f9a <ip_interface_setopt+0x52>
   2216a:	bf00      	nop

0002216c <ip_interface_getopt>:
   2216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22170:	2901      	cmp	r1, #1
   22172:	b085      	sub	sp, #20
   22174:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22176:	f040 8158 	bne.w	2242a <ip_interface_getopt+0x2be>
   2217a:	4616      	mov	r6, r2
   2217c:	461f      	mov	r7, r3
   2217e:	4680      	mov	r8, r0
   22180:	f004 ffe8 	bl	27154 <interface_socket_from_handle_get>
   22184:	4604      	mov	r4, r0
   22186:	2800      	cmp	r0, #0
   22188:	f000 819d 	beq.w	224c6 <ip_interface_getopt+0x35a>
   2218c:	f1a6 031e 	sub.w	r3, r6, #30
   22190:	2b0a      	cmp	r3, #10
   22192:	f200 8133 	bhi.w	223fc <ip_interface_getopt+0x290>
   22196:	e8df f013 	tbh	[pc, r3, lsl #1]
   2219a:	0055      	.short	0x0055
   2219c:	00d60096 	.word	0x00d60096
   221a0:	01310131 	.word	0x01310131
   221a4:	01310131 	.word	0x01310131
   221a8:	01310131 	.word	0x01310131
   221ac:	000b0131 	.word	0x000b0131
   221b0:	2d00      	cmp	r5, #0
   221b2:	f000 8134 	beq.w	2241e <ip_interface_getopt+0x2b2>
   221b6:	6829      	ldr	r1, [r5, #0]
   221b8:	2904      	cmp	r1, #4
   221ba:	f040 8130 	bne.w	2241e <ip_interface_getopt+0x2b2>
   221be:	2f00      	cmp	r7, #0
   221c0:	f000 812d 	beq.w	2241e <ip_interface_getopt+0x2b2>
   221c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   221c8:	9302      	str	r3, [sp, #8]
   221ca:	6803      	ldr	r3, [r0, #0]
   221cc:	0258      	lsls	r0, r3, #9
   221ce:	f100 811f 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   221d2:	6823      	ldr	r3, [r4, #0]
   221d4:	021a      	lsls	r2, r3, #8
   221d6:	f100 811b 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   221da:	6823      	ldr	r3, [r4, #0]
   221dc:	01db      	lsls	r3, r3, #7
   221de:	f100 8117 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   221e2:	6823      	ldr	r3, [r4, #0]
   221e4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   221e8:	f040 8112 	bne.w	22410 <ip_interface_getopt+0x2a4>
   221ec:	6826      	ldr	r6, [r4, #0]
   221ee:	6822      	ldr	r2, [r4, #0]
   221f0:	a804      	add	r0, sp, #16
   221f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   221f6:	6022      	str	r2, [r4, #0]
   221f8:	f8d4 9018 	ldr.w	r9, [r4, #24]
   221fc:	f840 3d04 	str.w	r3, [r0, #-4]!
   22200:	f7fe fe84 	bl	20f0c <rpc_ip_client_request_alloc>
   22204:	2800      	cmp	r0, #0
   22206:	f040 812b 	bne.w	22460 <ip_interface_getopt+0x2f4>
   2220a:	f247 0304 	movw	r3, #28676	; 0x7004
   2220e:	2208      	movs	r2, #8
   22210:	9d03      	ldr	r5, [sp, #12]
   22212:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   22216:	60eb      	str	r3, [r5, #12]
   22218:	f8c5 9010 	str.w	r9, [r5, #16]
   2221c:	7268      	strb	r0, [r5, #9]
   2221e:	72a8      	strb	r0, [r5, #10]
   22220:	72e8      	strb	r0, [r5, #11]
   22222:	722a      	strb	r2, [r5, #8]
   22224:	f04f 0c08 	mov.w	ip, #8
   22228:	2300      	movs	r3, #0
   2222a:	68aa      	ldr	r2, [r5, #8]
   2222c:	2004      	movs	r0, #4
   2222e:	4462      	add	r2, ip
   22230:	2110      	movs	r1, #16
   22232:	756b      	strb	r3, [r5, #21]
   22234:	60aa      	str	r2, [r5, #8]
   22236:	75ab      	strb	r3, [r5, #22]
   22238:	75eb      	strb	r3, [r5, #23]
   2223a:	76ab      	strb	r3, [r5, #26]
   2223c:	76eb      	strb	r3, [r5, #27]
   2223e:	f885 c014 	strb.w	ip, [r5, #20]
   22242:	e0c1      	b.n	223c8 <ip_interface_getopt+0x25c>
   22244:	2d00      	cmp	r5, #0
   22246:	f000 80ea 	beq.w	2241e <ip_interface_getopt+0x2b2>
   2224a:	6829      	ldr	r1, [r5, #0]
   2224c:	2904      	cmp	r1, #4
   2224e:	f040 80e6 	bne.w	2241e <ip_interface_getopt+0x2b2>
   22252:	2f00      	cmp	r7, #0
   22254:	f000 80e3 	beq.w	2241e <ip_interface_getopt+0x2b2>
   22258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2225c:	9302      	str	r3, [sp, #8]
   2225e:	6803      	ldr	r3, [r0, #0]
   22260:	025a      	lsls	r2, r3, #9
   22262:	f100 80d5 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   22266:	6803      	ldr	r3, [r0, #0]
   22268:	021b      	lsls	r3, r3, #8
   2226a:	f100 80d1 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   2226e:	6803      	ldr	r3, [r0, #0]
   22270:	01de      	lsls	r6, r3, #7
   22272:	f100 80cd 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   22276:	6803      	ldr	r3, [r0, #0]
   22278:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   2227c:	f040 80c8 	bne.w	22410 <ip_interface_getopt+0x2a4>
   22280:	6826      	ldr	r6, [r4, #0]
   22282:	6822      	ldr	r2, [r4, #0]
   22284:	a804      	add	r0, sp, #16
   22286:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2228a:	6022      	str	r2, [r4, #0]
   2228c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   22290:	f840 3d04 	str.w	r3, [r0, #-4]!
   22294:	f7fe fe3a 	bl	20f0c <rpc_ip_client_request_alloc>
   22298:	2800      	cmp	r0, #0
   2229a:	f040 80da 	bne.w	22452 <ip_interface_getopt+0x2e6>
   2229e:	f247 0304 	movw	r3, #28676	; 0x7004
   222a2:	2208      	movs	r2, #8
   222a4:	9d03      	ldr	r5, [sp, #12]
   222a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   222aa:	60eb      	str	r3, [r5, #12]
   222ac:	f8c5 9010 	str.w	r9, [r5, #16]
   222b0:	7268      	strb	r0, [r5, #9]
   222b2:	72a8      	strb	r0, [r5, #10]
   222b4:	72e8      	strb	r0, [r5, #11]
   222b6:	722a      	strb	r2, [r5, #8]
   222b8:	2300      	movs	r3, #0
   222ba:	f04f 0c02 	mov.w	ip, #2
   222be:	2001      	movs	r0, #1
   222c0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   222c4:	e076      	b.n	223b4 <ip_interface_getopt+0x248>
   222c6:	2d00      	cmp	r5, #0
   222c8:	f000 80a9 	beq.w	2241e <ip_interface_getopt+0x2b2>
   222cc:	6829      	ldr	r1, [r5, #0]
   222ce:	2904      	cmp	r1, #4
   222d0:	f040 80a5 	bne.w	2241e <ip_interface_getopt+0x2b2>
   222d4:	2f00      	cmp	r7, #0
   222d6:	f000 80a2 	beq.w	2241e <ip_interface_getopt+0x2b2>
   222da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   222de:	9302      	str	r3, [sp, #8]
   222e0:	6803      	ldr	r3, [r0, #0]
   222e2:	025d      	lsls	r5, r3, #9
   222e4:	f100 8094 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   222e8:	6803      	ldr	r3, [r0, #0]
   222ea:	0218      	lsls	r0, r3, #8
   222ec:	f100 8090 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   222f0:	6823      	ldr	r3, [r4, #0]
   222f2:	01da      	lsls	r2, r3, #7
   222f4:	f100 808c 	bmi.w	22410 <ip_interface_getopt+0x2a4>
   222f8:	6823      	ldr	r3, [r4, #0]
   222fa:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   222fe:	f040 8087 	bne.w	22410 <ip_interface_getopt+0x2a4>
   22302:	6826      	ldr	r6, [r4, #0]
   22304:	6822      	ldr	r2, [r4, #0]
   22306:	a804      	add	r0, sp, #16
   22308:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2230c:	6022      	str	r2, [r4, #0]
   2230e:	f8d4 9018 	ldr.w	r9, [r4, #24]
   22312:	f840 3d04 	str.w	r3, [r0, #-4]!
   22316:	f7fe fdf9 	bl	20f0c <rpc_ip_client_request_alloc>
   2231a:	2800      	cmp	r0, #0
   2231c:	f040 80a8 	bne.w	22470 <ip_interface_getopt+0x304>
   22320:	f247 0304 	movw	r3, #28676	; 0x7004
   22324:	2208      	movs	r2, #8
   22326:	9d03      	ldr	r5, [sp, #12]
   22328:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   2232c:	60eb      	str	r3, [r5, #12]
   2232e:	f8c5 9010 	str.w	r9, [r5, #16]
   22332:	7268      	strb	r0, [r5, #9]
   22334:	72a8      	strb	r0, [r5, #10]
   22336:	72e8      	strb	r0, [r5, #11]
   22338:	722a      	strb	r2, [r5, #8]
   2233a:	2300      	movs	r3, #0
   2233c:	f04f 0c02 	mov.w	ip, #2
   22340:	2010      	movs	r0, #16
   22342:	2140      	movs	r1, #64	; 0x40
   22344:	e036      	b.n	223b4 <ip_interface_getopt+0x248>
   22346:	2d00      	cmp	r5, #0
   22348:	d069      	beq.n	2241e <ip_interface_getopt+0x2b2>
   2234a:	6829      	ldr	r1, [r5, #0]
   2234c:	2904      	cmp	r1, #4
   2234e:	d166      	bne.n	2241e <ip_interface_getopt+0x2b2>
   22350:	2f00      	cmp	r7, #0
   22352:	d064      	beq.n	2241e <ip_interface_getopt+0x2b2>
   22354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22358:	9302      	str	r3, [sp, #8]
   2235a:	6803      	ldr	r3, [r0, #0]
   2235c:	025b      	lsls	r3, r3, #9
   2235e:	d457      	bmi.n	22410 <ip_interface_getopt+0x2a4>
   22360:	6803      	ldr	r3, [r0, #0]
   22362:	021e      	lsls	r6, r3, #8
   22364:	d454      	bmi.n	22410 <ip_interface_getopt+0x2a4>
   22366:	6803      	ldr	r3, [r0, #0]
   22368:	01dd      	lsls	r5, r3, #7
   2236a:	d451      	bmi.n	22410 <ip_interface_getopt+0x2a4>
   2236c:	6803      	ldr	r3, [r0, #0]
   2236e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   22372:	d14d      	bne.n	22410 <ip_interface_getopt+0x2a4>
   22374:	6826      	ldr	r6, [r4, #0]
   22376:	6822      	ldr	r2, [r4, #0]
   22378:	a804      	add	r0, sp, #16
   2237a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2237e:	6022      	str	r2, [r4, #0]
   22380:	f8d4 9018 	ldr.w	r9, [r4, #24]
   22384:	f840 3d04 	str.w	r3, [r0, #-4]!
   22388:	f7fe fdc0 	bl	20f0c <rpc_ip_client_request_alloc>
   2238c:	2800      	cmp	r0, #0
   2238e:	d16b      	bne.n	22468 <ip_interface_getopt+0x2fc>
   22390:	f247 0304 	movw	r3, #28676	; 0x7004
   22394:	2208      	movs	r2, #8
   22396:	9d03      	ldr	r5, [sp, #12]
   22398:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   2239c:	60eb      	str	r3, [r5, #12]
   2239e:	f8c5 9010 	str.w	r9, [r5, #16]
   223a2:	7268      	strb	r0, [r5, #9]
   223a4:	72a8      	strb	r0, [r5, #10]
   223a6:	72e8      	strb	r0, [r5, #11]
   223a8:	722a      	strb	r2, [r5, #8]
   223aa:	2300      	movs	r3, #0
   223ac:	f04f 0c02 	mov.w	ip, #2
   223b0:	2010      	movs	r0, #16
   223b2:	2160      	movs	r1, #96	; 0x60
   223b4:	68aa      	ldr	r2, [r5, #8]
   223b6:	752b      	strb	r3, [r5, #20]
   223b8:	3208      	adds	r2, #8
   223ba:	60aa      	str	r2, [r5, #8]
   223bc:	75ab      	strb	r3, [r5, #22]
   223be:	75eb      	strb	r3, [r5, #23]
   223c0:	76ab      	strb	r3, [r5, #26]
   223c2:	76eb      	strb	r3, [r5, #27]
   223c4:	f885 c015 	strb.w	ip, [r5, #21]
   223c8:	7628      	strb	r0, [r5, #24]
   223ca:	7669      	strb	r1, [r5, #25]
   223cc:	4628      	mov	r0, r5
   223ce:	f247 0104 	movw	r1, #28676	; 0x7004
   223d2:	f8d5 9000 	ldr.w	r9, [r5]
   223d6:	f7fe fdad 	bl	20f34 <rpc_ip_client_request_send>
   223da:	4682      	mov	sl, r0
   223dc:	bb58      	cbnz	r0, 22436 <ip_interface_getopt+0x2ca>
   223de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   223e2:	ab02      	add	r3, sp, #8
   223e4:	4611      	mov	r1, r2
   223e6:	4640      	mov	r0, r8
   223e8:	f004 fe40 	bl	2706c <interface_socket_wait>
   223ec:	4605      	mov	r5, r0
   223ee:	2800      	cmp	r0, #0
   223f0:	d042      	beq.n	22478 <ip_interface_getopt+0x30c>
   223f2:	4648      	mov	r0, r9
   223f4:	f7fe fdbc 	bl	20f70 <rpc_ip_client_data_free>
   223f8:	6026      	str	r6, [r4, #0]
   223fa:	e00a      	b.n	22412 <ip_interface_getopt+0x2a6>
   223fc:	9500      	str	r5, [sp, #0]
   223fe:	463b      	mov	r3, r7
   22400:	4632      	mov	r2, r6
   22402:	4640      	mov	r0, r8
   22404:	2101      	movs	r1, #1
   22406:	f004 ff13 	bl	27230 <interface_socket_getopt>
   2240a:	b005      	add	sp, #20
   2240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22410:	2523      	movs	r5, #35	; 0x23
   22412:	4628      	mov	r0, r5
   22414:	f7fb f82c 	bl	1d470 <bsd_os_errno_set>
   22418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2241c:	e7f5      	b.n	2240a <ip_interface_getopt+0x29e>
   2241e:	2016      	movs	r0, #22
   22420:	f7fb f826 	bl	1d470 <bsd_os_errno_set>
   22424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22428:	e7ef      	b.n	2240a <ip_interface_getopt+0x29e>
   2242a:	202a      	movs	r0, #42	; 0x2a
   2242c:	f7fb f820 	bl	1d470 <bsd_os_errno_set>
   22430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22434:	e7e9      	b.n	2240a <ip_interface_getopt+0x29e>
   22436:	6828      	ldr	r0, [r5, #0]
   22438:	b108      	cbz	r0, 2243e <ip_interface_getopt+0x2d2>
   2243a:	f7fe fd99 	bl	20f70 <rpc_ip_client_data_free>
   2243e:	4628      	mov	r0, r5
   22440:	f7fe fd8e 	bl	20f60 <rpc_ip_client_message_free>
   22444:	6026      	str	r6, [r4, #0]
   22446:	4648      	mov	r0, r9
   22448:	f7fe fd92 	bl	20f70 <rpc_ip_client_data_free>
   2244c:	2523      	movs	r5, #35	; 0x23
   2244e:	6026      	str	r6, [r4, #0]
   22450:	e7df      	b.n	22412 <ip_interface_getopt+0x2a6>
   22452:	9d03      	ldr	r5, [sp, #12]
   22454:	2d00      	cmp	r5, #0
   22456:	f47f af2f 	bne.w	222b8 <ip_interface_getopt+0x14c>
   2245a:	6026      	str	r6, [r4, #0]
   2245c:	250c      	movs	r5, #12
   2245e:	e7d8      	b.n	22412 <ip_interface_getopt+0x2a6>
   22460:	9d03      	ldr	r5, [sp, #12]
   22462:	2d00      	cmp	r5, #0
   22464:	d0f9      	beq.n	2245a <ip_interface_getopt+0x2ee>
   22466:	e6dd      	b.n	22224 <ip_interface_getopt+0xb8>
   22468:	9d03      	ldr	r5, [sp, #12]
   2246a:	2d00      	cmp	r5, #0
   2246c:	d0f5      	beq.n	2245a <ip_interface_getopt+0x2ee>
   2246e:	e79c      	b.n	223aa <ip_interface_getopt+0x23e>
   22470:	9d03      	ldr	r5, [sp, #12]
   22472:	2d00      	cmp	r5, #0
   22474:	d0f1      	beq.n	2245a <ip_interface_getopt+0x2ee>
   22476:	e760      	b.n	2233a <ip_interface_getopt+0x1ce>
   22478:	4640      	mov	r0, r8
   2247a:	f004 fe6b 	bl	27154 <interface_socket_from_handle_get>
   2247e:	b120      	cbz	r0, 2248a <ip_interface_getopt+0x31e>
   22480:	6845      	ldr	r5, [r0, #4]
   22482:	b115      	cbz	r5, 2248a <ip_interface_getopt+0x31e>
   22484:	f8c0 a004 	str.w	sl, [r0, #4]
   22488:	e7b3      	b.n	223f2 <ip_interface_getopt+0x286>
   2248a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 22518 <ip_interface_getopt+0x3ac>
   2248e:	f85a 5028 	ldr.w	r5, [sl, r8, lsl #2]
   22492:	b3ad      	cbz	r5, 22500 <ip_interface_getopt+0x394>
   22494:	686a      	ldr	r2, [r5, #4]
   22496:	2a04      	cmp	r2, #4
   22498:	d81b      	bhi.n	224d2 <ip_interface_getopt+0x366>
   2249a:	f8d5 b000 	ldr.w	fp, [r5]
   2249e:	f1bb 0f00 	cmp.w	fp, #0
   224a2:	d022      	beq.n	224ea <ip_interface_getopt+0x37e>
   224a4:	2500      	movs	r5, #0
   224a6:	4659      	mov	r1, fp
   224a8:	4638      	mov	r0, r7
   224aa:	f012 fab9 	bl	34a20 <memcpy>
   224ae:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
   224b2:	f7fe fd55 	bl	20f60 <rpc_ip_client_message_free>
   224b6:	4648      	mov	r0, r9
   224b8:	f84a 5028 	str.w	r5, [sl, r8, lsl #2]
   224bc:	f7fe fd58 	bl	20f70 <rpc_ip_client_data_free>
   224c0:	4628      	mov	r0, r5
   224c2:	6026      	str	r6, [r4, #0]
   224c4:	e7a1      	b.n	2240a <ip_interface_getopt+0x29e>
   224c6:	2009      	movs	r0, #9
   224c8:	f7fa ffd2 	bl	1d470 <bsd_os_errno_set>
   224cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   224d0:	e79b      	b.n	2240a <ip_interface_getopt+0x29e>
   224d2:	4628      	mov	r0, r5
   224d4:	f7fe fd44 	bl	20f60 <rpc_ip_client_message_free>
   224d8:	2300      	movs	r3, #0
   224da:	4648      	mov	r0, r9
   224dc:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
   224e0:	2516      	movs	r5, #22
   224e2:	f7fe fd45 	bl	20f70 <rpc_ip_client_data_free>
   224e6:	6026      	str	r6, [r4, #0]
   224e8:	e793      	b.n	22412 <ip_interface_getopt+0x2a6>
   224ea:	4628      	mov	r0, r5
   224ec:	f7fe fd38 	bl	20f60 <rpc_ip_client_message_free>
   224f0:	4648      	mov	r0, r9
   224f2:	f84a b028 	str.w	fp, [sl, r8, lsl #2]
   224f6:	2516      	movs	r5, #22
   224f8:	f7fe fd3a 	bl	20f70 <rpc_ip_client_data_free>
   224fc:	6026      	str	r6, [r4, #0]
   224fe:	e788      	b.n	22412 <ip_interface_getopt+0x2a6>
   22500:	2204      	movs	r2, #4
   22502:	4649      	mov	r1, r9
   22504:	4638      	mov	r0, r7
   22506:	f012 fa8b 	bl	34a20 <memcpy>
   2250a:	4648      	mov	r0, r9
   2250c:	f7fe fd30 	bl	20f70 <rpc_ip_client_data_free>
   22510:	6026      	str	r6, [r4, #0]
   22512:	4628      	mov	r0, r5
   22514:	e779      	b.n	2240a <ip_interface_getopt+0x29e>
   22516:	bf00      	nop
   22518:	2002261c 	.word	0x2002261c

0002251c <ip_interface_getaddrinfo>:
   2251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22520:	f04f 0c00 	mov.w	ip, #0
   22524:	2401      	movs	r4, #1
   22526:	4e75      	ldr	r6, [pc, #468]	; (226fc <ip_interface_getaddrinfo+0x1e0>)
   22528:	4d75      	ldr	r5, [pc, #468]	; (22700 <ip_interface_getaddrinfo+0x1e4>)
   2252a:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 22710 <ip_interface_getaddrinfo+0x1f4>
   2252e:	4f75      	ldr	r7, [pc, #468]	; (22704 <ip_interface_getaddrinfo+0x1e8>)
   22530:	7836      	ldrb	r6, [r6, #0]
   22532:	b085      	sub	sp, #20
   22534:	f8a5 c000 	strh.w	ip, [r5]
   22538:	f8c8 4000 	str.w	r4, [r8]
   2253c:	603c      	str	r4, [r7, #0]
   2253e:	2e00      	cmp	r6, #0
   22540:	d05b      	beq.n	225fa <ip_interface_getaddrinfo+0xde>
   22542:	9301      	str	r3, [sp, #4]
   22544:	4614      	mov	r4, r2
   22546:	460b      	mov	r3, r1
   22548:	4606      	mov	r6, r0
   2254a:	b171      	cbz	r1, 2256a <ip_interface_getaddrinfo+0x4e>
   2254c:	4618      	mov	r0, r3
   2254e:	220a      	movs	r2, #10
   22550:	4661      	mov	r1, ip
   22552:	f00b ff5b 	bl	2e40c <strtol>
   22556:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2255a:	1e42      	subs	r2, r0, #1
   2255c:	429a      	cmp	r2, r3
   2255e:	f200 8097 	bhi.w	22690 <ip_interface_getaddrinfo+0x174>
   22562:	0203      	lsls	r3, r0, #8
   22564:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   22568:	8028      	strh	r0, [r5, #0]
   2256a:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 22714 <ip_interface_getaddrinfo+0x1f8>
   2256e:	f8da 3000 	ldr.w	r3, [sl]
   22572:	2b00      	cmp	r3, #0
   22574:	d145      	bne.n	22602 <ip_interface_getaddrinfo+0xe6>
   22576:	4a64      	ldr	r2, [pc, #400]	; (22708 <ip_interface_getaddrinfo+0x1ec>)
   22578:	6013      	str	r3, [r2, #0]
   2257a:	4a64      	ldr	r2, [pc, #400]	; (2270c <ip_interface_getaddrinfo+0x1f0>)
   2257c:	6013      	str	r3, [r2, #0]
   2257e:	2e00      	cmp	r6, #0
   22580:	d07a      	beq.n	22678 <ip_interface_getaddrinfo+0x15c>
   22582:	4630      	mov	r0, r6
   22584:	f7ef fd7c 	bl	12080 <strlen>
   22588:	4683      	mov	fp, r0
   2258a:	b144      	cbz	r4, 2259e <ip_interface_getaddrinfo+0x82>
   2258c:	69e2      	ldr	r2, [r4, #28]
   2258e:	b132      	cbz	r2, 2259e <ip_interface_getaddrinfo+0x82>
   22590:	6851      	ldr	r1, [r2, #4]
   22592:	2966      	cmp	r1, #102	; 0x66
   22594:	d103      	bne.n	2259e <ip_interface_getaddrinfo+0x82>
   22596:	6891      	ldr	r1, [r2, #8]
   22598:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2259c:	d07e      	beq.n	2269c <ip_interface_getaddrinfo+0x180>
   2259e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   225a2:	2100      	movs	r1, #0
   225a4:	f10d 0910 	add.w	r9, sp, #16
   225a8:	f849 1d04 	str.w	r1, [r9, #-4]!
   225ac:	4648      	mov	r0, r9
   225ae:	4659      	mov	r1, fp
   225b0:	9200      	str	r2, [sp, #0]
   225b2:	f7fe fcab 	bl	20f0c <rpc_ip_client_request_alloc>
   225b6:	9a00      	ldr	r2, [sp, #0]
   225b8:	2800      	cmp	r0, #0
   225ba:	d15f      	bne.n	2267c <ip_interface_getaddrinfo+0x160>
   225bc:	f247 010d 	movw	r1, #28685	; 0x700d
   225c0:	f04f 0c08 	mov.w	ip, #8
   225c4:	9d03      	ldr	r5, [sp, #12]
   225c6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   225ca:	60e9      	str	r1, [r5, #12]
   225cc:	612a      	str	r2, [r5, #16]
   225ce:	7268      	strb	r0, [r5, #9]
   225d0:	72a8      	strb	r0, [r5, #10]
   225d2:	72e8      	strb	r0, [r5, #11]
   225d4:	f885 c008 	strb.w	ip, [r5, #8]
   225d8:	2c00      	cmp	r4, #0
   225da:	d076      	beq.n	226ca <ip_interface_getaddrinfo+0x1ae>
   225dc:	6862      	ldr	r2, [r4, #4]
   225de:	f022 0108 	bic.w	r1, r2, #8
   225e2:	2902      	cmp	r1, #2
   225e4:	d011      	beq.n	2260a <ip_interface_getaddrinfo+0xee>
   225e6:	2a05      	cmp	r2, #5
   225e8:	d176      	bne.n	226d8 <ip_interface_getaddrinfo+0x1bc>
   225ea:	68a1      	ldr	r1, [r4, #8]
   225ec:	2902      	cmp	r1, #2
   225ee:	6039      	str	r1, [r7, #0]
   225f0:	d115      	bne.n	2261e <ip_interface_getaddrinfo+0x102>
   225f2:	2102      	movs	r1, #2
   225f4:	f8c8 1000 	str.w	r1, [r8]
   225f8:	e00b      	b.n	22612 <ip_interface_getaddrinfo+0xf6>
   225fa:	2070      	movs	r0, #112	; 0x70
   225fc:	b005      	add	sp, #20
   225fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22602:	2073      	movs	r0, #115	; 0x73
   22604:	b005      	add	sp, #20
   22606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2260a:	68a1      	ldr	r1, [r4, #8]
   2260c:	2902      	cmp	r1, #2
   2260e:	6039      	str	r1, [r7, #0]
   22610:	d0ef      	beq.n	225f2 <ip_interface_getaddrinfo+0xd6>
   22612:	2a05      	cmp	r2, #5
   22614:	d003      	beq.n	2261e <ip_interface_getaddrinfo+0x102>
   22616:	2a0a      	cmp	r2, #10
   22618:	bf14      	ite	ne
   2261a:	2201      	movne	r2, #1
   2261c:	2202      	moveq	r2, #2
   2261e:	61aa      	str	r2, [r5, #24]
   22620:	68e2      	ldr	r2, [r4, #12]
   22622:	622a      	str	r2, [r5, #32]
   22624:	68a2      	ldr	r2, [r4, #8]
   22626:	61ea      	str	r2, [r5, #28]
   22628:	6822      	ldr	r2, [r4, #0]
   2262a:	616a      	str	r2, [r5, #20]
   2262c:	68aa      	ldr	r2, [r5, #8]
   2262e:	3210      	adds	r2, #16
   22630:	60aa      	str	r2, [r5, #8]
   22632:	b12e      	cbz	r6, 22640 <ip_interface_getaddrinfo+0x124>
   22634:	6828      	ldr	r0, [r5, #0]
   22636:	b118      	cbz	r0, 22640 <ip_interface_getaddrinfo+0x124>
   22638:	465a      	mov	r2, fp
   2263a:	4631      	mov	r1, r6
   2263c:	f012 f9f0 	bl	34a20 <memcpy>
   22640:	2301      	movs	r3, #1
   22642:	f247 010d 	movw	r1, #28685	; 0x700d
   22646:	4628      	mov	r0, r5
   22648:	f8ca 3000 	str.w	r3, [sl]
   2264c:	f7fe fc72 	bl	20f34 <rpc_ip_client_request_send>
   22650:	bb10      	cbnz	r0, 22698 <ip_interface_getaddrinfo+0x17c>
   22652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22656:	9303      	str	r3, [sp, #12]
   22658:	4649      	mov	r1, r9
   2265a:	4628      	mov	r0, r5
   2265c:	f7fa fe5e 	bl	1d31c <bsd_os_timedwait>
   22660:	f8da 3000 	ldr.w	r3, [sl]
   22664:	2b01      	cmp	r3, #1
   22666:	d0f7      	beq.n	22658 <ip_interface_getaddrinfo+0x13c>
   22668:	4b28      	ldr	r3, [pc, #160]	; (2270c <ip_interface_getaddrinfo+0x1f0>)
   2266a:	6818      	ldr	r0, [r3, #0]
   2266c:	bb40      	cbnz	r0, 226c0 <ip_interface_getaddrinfo+0x1a4>
   2266e:	4b26      	ldr	r3, [pc, #152]	; (22708 <ip_interface_getaddrinfo+0x1ec>)
   22670:	9a01      	ldr	r2, [sp, #4]
   22672:	681b      	ldr	r3, [r3, #0]
   22674:	6013      	str	r3, [r2, #0]
   22676:	e7c1      	b.n	225fc <ip_interface_getaddrinfo+0xe0>
   22678:	46b3      	mov	fp, r6
   2267a:	e786      	b.n	2258a <ip_interface_getaddrinfo+0x6e>
   2267c:	9d03      	ldr	r5, [sp, #12]
   2267e:	2d00      	cmp	r5, #0
   22680:	d1aa      	bne.n	225d8 <ip_interface_getaddrinfo+0xbc>
   22682:	200c      	movs	r0, #12
   22684:	2300      	movs	r3, #0
   22686:	f8ca 3000 	str.w	r3, [sl]
   2268a:	b005      	add	sp, #20
   2268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22690:	2016      	movs	r0, #22
   22692:	b005      	add	sp, #20
   22694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22698:	2023      	movs	r0, #35	; 0x23
   2269a:	e7f3      	b.n	22684 <ip_interface_getaddrinfo+0x168>
   2269c:	f240 2002 	movw	r0, #514	; 0x202
   226a0:	68d1      	ldr	r1, [r2, #12]
   226a2:	4281      	cmp	r1, r0
   226a4:	f47f af7b 	bne.w	2259e <ip_interface_getaddrinfo+0x82>
   226a8:	6991      	ldr	r1, [r2, #24]
   226aa:	2900      	cmp	r1, #0
   226ac:	f43f af77 	beq.w	2259e <ip_interface_getaddrinfo+0x82>
   226b0:	6860      	ldr	r0, [r4, #4]
   226b2:	f002 fac3 	bl	24c3c <pdn_interface_pdn_id_get>
   226b6:	1c43      	adds	r3, r0, #1
   226b8:	f43f af71 	beq.w	2259e <ip_interface_getaddrinfo+0x82>
   226bc:	4602      	mov	r2, r0
   226be:	e770      	b.n	225a2 <ip_interface_getaddrinfo+0x86>
   226c0:	4b12      	ldr	r3, [pc, #72]	; (2270c <ip_interface_getaddrinfo+0x1f0>)
   226c2:	6818      	ldr	r0, [r3, #0]
   226c4:	2800      	cmp	r0, #0
   226c6:	d099      	beq.n	225fc <ip_interface_getaddrinfo+0xe0>
   226c8:	e7dc      	b.n	22684 <ip_interface_getaddrinfo+0x168>
   226ca:	4621      	mov	r1, r4
   226cc:	2210      	movs	r2, #16
   226ce:	f105 0014 	add.w	r0, r5, #20
   226d2:	f012 f9df 	bl	34a94 <memset>
   226d6:	e7a9      	b.n	2262c <ip_interface_getaddrinfo+0x110>
   226d8:	202f      	movs	r0, #47	; 0x2f
   226da:	f7fa fec9 	bl	1d470 <bsd_os_errno_set>
   226de:	68aa      	ldr	r2, [r5, #8]
   226e0:	3210      	adds	r2, #16
   226e2:	60aa      	str	r2, [r5, #8]
   226e4:	b916      	cbnz	r6, 226ec <ip_interface_getaddrinfo+0x1d0>
   226e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   226ea:	e7cb      	b.n	22684 <ip_interface_getaddrinfo+0x168>
   226ec:	6828      	ldr	r0, [r5, #0]
   226ee:	2800      	cmp	r0, #0
   226f0:	d0f9      	beq.n	226e6 <ip_interface_getaddrinfo+0x1ca>
   226f2:	465a      	mov	r2, fp
   226f4:	4631      	mov	r1, r6
   226f6:	f012 f993 	bl	34a20 <memcpy>
   226fa:	e7f4      	b.n	226e6 <ip_interface_getaddrinfo+0x1ca>
   226fc:	20028f7f 	.word	0x20028f7f
   22700:	20027558 	.word	0x20027558
   22704:	2002260c 	.word	0x2002260c
   22708:	20022618 	.word	0x20022618
   2270c:	20022610 	.word	0x20022610
   22710:	20022608 	.word	0x20022608
   22714:	20022614 	.word	0x20022614

00022718 <ip_interface_freeaddrinfo>:
   22718:	b538      	push	{r3, r4, r5, lr}
   2271a:	4d0b      	ldr	r5, [pc, #44]	; (22748 <ip_interface_freeaddrinfo+0x30>)
   2271c:	682b      	ldr	r3, [r5, #0]
   2271e:	2b02      	cmp	r3, #2
   22720:	d000      	beq.n	22724 <ip_interface_freeaddrinfo+0xc>
   22722:	bd38      	pop	{r3, r4, r5, pc}
   22724:	b150      	cbz	r0, 2273c <ip_interface_freeaddrinfo+0x24>
   22726:	4604      	mov	r4, r0
   22728:	6940      	ldr	r0, [r0, #20]
   2272a:	f004 f8c5 	bl	268b8 <nrf_free>
   2272e:	69a0      	ldr	r0, [r4, #24]
   22730:	b108      	cbz	r0, 22736 <ip_interface_freeaddrinfo+0x1e>
   22732:	f004 f8c1 	bl	268b8 <nrf_free>
   22736:	4620      	mov	r0, r4
   22738:	f004 f8be 	bl	268b8 <nrf_free>
   2273c:	2300      	movs	r3, #0
   2273e:	4a03      	ldr	r2, [pc, #12]	; (2274c <ip_interface_freeaddrinfo+0x34>)
   22740:	602b      	str	r3, [r5, #0]
   22742:	6013      	str	r3, [r2, #0]
   22744:	bd38      	pop	{r3, r4, r5, pc}
   22746:	bf00      	nop
   22748:	20022614 	.word	0x20022614
   2274c:	20022610 	.word	0x20022610

00022750 <rpc_ip_event_handler>:
   22750:	f248 030d 	movw	r3, #32781	; 0x800d
   22754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22758:	4299      	cmp	r1, r3
   2275a:	b089      	sub	sp, #36	; 0x24
   2275c:	4604      	mov	r4, r0
   2275e:	d05c      	beq.n	2281a <rpc_ip_event_handler+0xca>
   22760:	f248 030f 	movw	r3, #32783	; 0x800f
   22764:	4299      	cmp	r1, r3
   22766:	460d      	mov	r5, r1
   22768:	d045      	beq.n	227f6 <rpc_ip_event_handler+0xa6>
   2276a:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2276e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   22772:	68c0      	ldr	r0, [r0, #12]
   22774:	d075      	beq.n	22862 <rpc_ip_event_handler+0x112>
   22776:	0c06      	lsrs	r6, r0, #16
   22778:	4630      	mov	r0, r6
   2277a:	f004 fceb 	bl	27154 <interface_socket_from_handle_get>
   2277e:	4607      	mov	r7, r0
   22780:	2800      	cmp	r0, #0
   22782:	d059      	beq.n	22838 <rpc_ip_event_handler+0xe8>
   22784:	4601      	mov	r1, r0
   22786:	462b      	mov	r3, r5
   22788:	4622      	mov	r2, r4
   2278a:	4630      	mov	r0, r6
   2278c:	f7fe fb2c 	bl	20de8 <tls_rpc_ip_event_handler>
   22790:	2800      	cmp	r0, #0
   22792:	d04d      	beq.n	22830 <rpc_ip_event_handler+0xe0>
   22794:	f248 0307 	movw	r3, #32775	; 0x8007
   22798:	429d      	cmp	r5, r3
   2279a:	d866      	bhi.n	2286a <rpc_ip_event_handler+0x11a>
   2279c:	f248 0306 	movw	r3, #32774	; 0x8006
   227a0:	429d      	cmp	r5, r3
   227a2:	f080 81e7 	bcs.w	22b74 <rpc_ip_event_handler+0x424>
   227a6:	f248 0303 	movw	r3, #32771	; 0x8003
   227aa:	429d      	cmp	r5, r3
   227ac:	f000 81c5 	beq.w	22b3a <rpc_ip_event_handler+0x3ea>
   227b0:	f200 811b 	bhi.w	229ea <rpc_ip_event_handler+0x29a>
   227b4:	f248 0301 	movw	r3, #32769	; 0x8001
   227b8:	429d      	cmp	r5, r3
   227ba:	f000 8154 	beq.w	22a66 <rpc_ip_event_handler+0x316>
   227be:	f248 0302 	movw	r3, #32770	; 0x8002
   227c2:	429d      	cmp	r5, r3
   227c4:	d138      	bne.n	22838 <rpc_ip_event_handler+0xe8>
   227c6:	683b      	ldr	r3, [r7, #0]
   227c8:	0098      	lsls	r0, r3, #2
   227ca:	d531      	bpl.n	22830 <rpc_ip_event_handler+0xe0>
   227cc:	683b      	ldr	r3, [r7, #0]
   227ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   227d2:	603b      	str	r3, [r7, #0]
   227d4:	6963      	ldr	r3, [r4, #20]
   227d6:	2b00      	cmp	r3, #0
   227d8:	f000 81ea 	beq.w	22bb0 <rpc_ip_event_handler+0x460>
   227dc:	2b10      	cmp	r3, #16
   227de:	bf8e      	itee	hi
   227e0:	232d      	movhi	r3, #45	; 0x2d
   227e2:	4ab9      	ldrls	r2, [pc, #740]	; (22ac8 <rpc_ip_event_handler+0x378>)
   227e4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   227e8:	607b      	str	r3, [r7, #4]
   227ea:	683b      	ldr	r3, [r7, #0]
   227ec:	2000      	movs	r0, #0
   227ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   227f2:	603b      	str	r3, [r7, #0]
   227f4:	e00e      	b.n	22814 <rpc_ip_event_handler+0xc4>
   227f6:	6943      	ldr	r3, [r0, #20]
   227f8:	2001      	movs	r0, #1
   227fa:	2b10      	cmp	r3, #16
   227fc:	49b3      	ldr	r1, [pc, #716]	; (22acc <rpc_ip_event_handler+0x37c>)
   227fe:	bf88      	it	hi
   22800:	222d      	movhi	r2, #45	; 0x2d
   22802:	7008      	strb	r0, [r1, #0]
   22804:	f04f 0000 	mov.w	r0, #0
   22808:	bf9c      	itt	ls
   2280a:	4aaf      	ldrls	r2, [pc, #700]	; (22ac8 <rpc_ip_event_handler+0x378>)
   2280c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   22810:	4baf      	ldr	r3, [pc, #700]	; (22ad0 <rpc_ip_event_handler+0x380>)
   22812:	601a      	str	r2, [r3, #0]
   22814:	b009      	add	sp, #36	; 0x24
   22816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2281a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 22ae4 <rpc_ip_event_handler+0x394>
   2281e:	6807      	ldr	r7, [r0, #0]
   22820:	f8da 2000 	ldr.w	r2, [sl]
   22824:	2a01      	cmp	r2, #1
   22826:	d00b      	beq.n	22840 <rpc_ip_event_handler+0xf0>
   22828:	b117      	cbz	r7, 22830 <rpc_ip_event_handler+0xe0>
   2282a:	4638      	mov	r0, r7
   2282c:	f7fe fba0 	bl	20f70 <rpc_ip_client_data_free>
   22830:	2000      	movs	r0, #0
   22832:	b009      	add	sp, #36	; 0x24
   22834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22838:	6820      	ldr	r0, [r4, #0]
   2283a:	2800      	cmp	r0, #0
   2283c:	d1f6      	bne.n	2282c <rpc_ip_event_handler+0xdc>
   2283e:	e7f7      	b.n	22830 <rpc_ip_event_handler+0xe0>
   22840:	6942      	ldr	r2, [r0, #20]
   22842:	2a00      	cmp	r2, #0
   22844:	d045      	beq.n	228d2 <rpc_ip_event_handler+0x182>
   22846:	2a10      	cmp	r2, #16
   22848:	bf8e      	itee	hi
   2284a:	222d      	movhi	r2, #45	; 0x2d
   2284c:	499e      	ldrls	r1, [pc, #632]	; (22ac8 <rpc_ip_event_handler+0x378>)
   2284e:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   22852:	49a0      	ldr	r1, [pc, #640]	; (22ad4 <rpc_ip_event_handler+0x384>)
   22854:	600a      	str	r2, [r1, #0]
   22856:	2202      	movs	r2, #2
   22858:	f8ca 2000 	str.w	r2, [sl]
   2285c:	2f00      	cmp	r7, #0
   2285e:	d1e4      	bne.n	2282a <rpc_ip_event_handler+0xda>
   22860:	e7e6      	b.n	22830 <rpc_ip_event_handler+0xe0>
   22862:	f004 fc25 	bl	270b0 <interface_from_internal_id_search>
   22866:	4606      	mov	r6, r0
   22868:	e786      	b.n	22778 <rpc_ip_event_handler+0x28>
   2286a:	f248 030c 	movw	r3, #32780	; 0x800c
   2286e:	429d      	cmp	r5, r3
   22870:	f000 813c 	beq.w	22aec <rpc_ip_event_handler+0x39c>
   22874:	f240 80d5 	bls.w	22a22 <rpc_ip_event_handler+0x2d2>
   22878:	f249 0302 	movw	r3, #36866	; 0x9002
   2287c:	429d      	cmp	r5, r3
   2287e:	f000 811d 	beq.w	22abc <rpc_ip_event_handler+0x36c>
   22882:	f249 0303 	movw	r3, #36867	; 0x9003
   22886:	429d      	cmp	r5, r3
   22888:	f000 80f9 	beq.w	22a7e <rpc_ip_event_handler+0x32e>
   2288c:	f249 0301 	movw	r3, #36865	; 0x9001
   22890:	429d      	cmp	r5, r3
   22892:	d1d1      	bne.n	22838 <rpc_ip_event_handler+0xe8>
   22894:	683d      	ldr	r5, [r7, #0]
   22896:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   2289a:	f000 8184 	beq.w	22ba6 <rpc_ip_event_handler+0x456>
   2289e:	68a3      	ldr	r3, [r4, #8]
   228a0:	2b04      	cmp	r3, #4
   228a2:	f200 81af 	bhi.w	22c04 <rpc_ip_event_handler+0x4b4>
   228a6:	2500      	movs	r5, #0
   228a8:	462e      	mov	r6, r5
   228aa:	6821      	ldr	r1, [r4, #0]
   228ac:	6862      	ldr	r2, [r4, #4]
   228ae:	e9cd 6506 	strd	r6, r5, [sp, #24]
   228b2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   228b6:	69f8      	ldr	r0, [r7, #28]
   228b8:	a904      	add	r1, sp, #16
   228ba:	6803      	ldr	r3, [r0, #0]
   228bc:	685b      	ldr	r3, [r3, #4]
   228be:	4798      	blx	r3
   228c0:	3001      	adds	r0, #1
   228c2:	f000 818e 	beq.w	22be2 <rpc_ip_event_handler+0x492>
   228c6:	683b      	ldr	r3, [r7, #0]
   228c8:	2000      	movs	r0, #0
   228ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   228ce:	603b      	str	r3, [r7, #0]
   228d0:	e7a0      	b.n	22814 <rpc_ip_event_handler+0xc4>
   228d2:	6985      	ldr	r5, [r0, #24]
   228d4:	016b      	lsls	r3, r5, #5
   228d6:	4618      	mov	r0, r3
   228d8:	9303      	str	r3, [sp, #12]
   228da:	f003 ffe3 	bl	268a4 <nrf_malloc>
   228de:	9002      	str	r0, [sp, #8]
   228e0:	2800      	cmp	r0, #0
   228e2:	d078      	beq.n	229d6 <rpc_ip_event_handler+0x286>
   228e4:	00ee      	lsls	r6, r5, #3
   228e6:	1970      	adds	r0, r6, r5
   228e8:	0080      	lsls	r0, r0, #2
   228ea:	f003 ffdb 	bl	268a4 <nrf_malloc>
   228ee:	2800      	cmp	r0, #0
   228f0:	d073      	beq.n	229da <rpc_ip_event_handler+0x28a>
   228f2:	2d00      	cmp	r5, #0
   228f4:	d074      	beq.n	229e0 <rpc_ip_event_handler+0x290>
   228f6:	3610      	adds	r6, #16
   228f8:	1983      	adds	r3, r0, r6
   228fa:	9301      	str	r3, [sp, #4]
   228fc:	9b02      	ldr	r3, [sp, #8]
   228fe:	2204      	movs	r2, #4
   22900:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 22ae8 <rpc_ip_event_handler+0x398>
   22904:	f100 0810 	add.w	r8, r0, #16
   22908:	f103 0520 	add.w	r5, r3, #32
   2290c:	e013      	b.n	22936 <rpc_ip_event_handler+0x1e6>
   2290e:	464a      	mov	r2, r9
   22910:	f012 f886 	bl	34a20 <memcpy>
   22914:	2100      	movs	r1, #0
   22916:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2291a:	f108 0808 	add.w	r8, r8, #8
   2291e:	eb09 0206 	add.w	r2, r9, r6
   22922:	f803 1009 	strb.w	r1, [r3, r9]
   22926:	9b01      	ldr	r3, [sp, #4]
   22928:	f845 5c04 	str.w	r5, [r5, #-4]
   2292c:	4598      	cmp	r8, r3
   2292e:	f105 0520 	add.w	r5, r5, #32
   22932:	f000 8090 	beq.w	22a56 <rpc_ip_event_handler+0x306>
   22936:	58bb      	ldr	r3, [r7, r2]
   22938:	18b9      	adds	r1, r7, r2
   2293a:	f845 3c20 	str.w	r3, [r5, #-32]
   2293e:	684b      	ldr	r3, [r1, #4]
   22940:	f8db 0000 	ldr.w	r0, [fp]
   22944:	2b02      	cmp	r3, #2
   22946:	bf14      	ite	ne
   22948:	2602      	movne	r6, #2
   2294a:	260a      	moveq	r6, #10
   2294c:	4b62      	ldr	r3, [pc, #392]	; (22ad8 <rpc_ip_event_handler+0x388>)
   2294e:	e945 6007 	strd	r6, r0, [r5, #-28]
   22952:	681b      	ldr	r3, [r3, #0]
   22954:	f102 0614 	add.w	r6, r2, #20
   22958:	f845 3c14 	str.w	r3, [r5, #-20]
   2295c:	8a08      	ldrh	r0, [r1, #16]
   2295e:	f1a8 0310 	sub.w	r3, r8, #16
   22962:	f845 0c10 	str.w	r0, [r5, #-16]
   22966:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   2296a:	f845 3c0c 	str.w	r3, [r5, #-12]
   2296e:	4b5b      	ldr	r3, [pc, #364]	; (22adc <rpc_ip_event_handler+0x38c>)
   22970:	2804      	cmp	r0, #4
   22972:	eb07 0106 	add.w	r1, r7, r6
   22976:	881b      	ldrh	r3, [r3, #0]
   22978:	d01e      	beq.n	229b8 <rpc_ip_event_handler+0x268>
   2297a:	220a      	movs	r2, #10
   2297c:	f848 2c0c 	str.w	r2, [r8, #-12]
   22980:	f04f 0224 	mov.w	r2, #36	; 0x24
   22984:	f828 3c08 	strh.w	r3, [r8, #-8]
   22988:	f808 2c10 	strb.w	r2, [r8, #-16]
   2298c:	f855 2c10 	ldr.w	r2, [r5, #-16]
   22990:	4640      	mov	r0, r8
   22992:	f012 f845 	bl	34a20 <memcpy>
   22996:	f855 3c10 	ldr.w	r3, [r5, #-16]
   2299a:	f109 0001 	add.w	r0, r9, #1
   2299e:	441e      	add	r6, r3
   229a0:	f003 ff80 	bl	268a4 <nrf_malloc>
   229a4:	19b9      	adds	r1, r7, r6
   229a6:	eb09 0206 	add.w	r2, r9, r6
   229aa:	f845 0c08 	str.w	r0, [r5, #-8]
   229ae:	2800      	cmp	r0, #0
   229b0:	d1ad      	bne.n	2290e <rpc_ip_event_handler+0x1be>
   229b2:	f108 0808 	add.w	r8, r8, #8
   229b6:	e7b6      	b.n	22926 <rpc_ip_event_handler+0x1d6>
   229b8:	2210      	movs	r2, #16
   229ba:	2002      	movs	r0, #2
   229bc:	f828 3c08 	strh.w	r3, [r8, #-8]
   229c0:	f848 0c0c 	str.w	r0, [r8, #-12]
   229c4:	f808 2c10 	strb.w	r2, [r8, #-16]
   229c8:	f855 2c10 	ldr.w	r2, [r5, #-16]
   229cc:	f1a8 0004 	sub.w	r0, r8, #4
   229d0:	f012 f826 	bl	34a20 <memcpy>
   229d4:	e7df      	b.n	22996 <rpc_ip_event_handler+0x246>
   229d6:	f003 ff6f 	bl	268b8 <nrf_free>
   229da:	210c      	movs	r1, #12
   229dc:	4a3d      	ldr	r2, [pc, #244]	; (22ad4 <rpc_ip_event_handler+0x384>)
   229de:	6011      	str	r1, [r2, #0]
   229e0:	9b02      	ldr	r3, [sp, #8]
   229e2:	4a3f      	ldr	r2, [pc, #252]	; (22ae0 <rpc_ip_event_handler+0x390>)
   229e4:	6827      	ldr	r7, [r4, #0]
   229e6:	6013      	str	r3, [r2, #0]
   229e8:	e735      	b.n	22856 <rpc_ip_event_handler+0x106>
   229ea:	f248 0304 	movw	r3, #32772	; 0x8004
   229ee:	429d      	cmp	r5, r3
   229f0:	f000 808f 	beq.w	22b12 <rpc_ip_event_handler+0x3c2>
   229f4:	f248 0305 	movw	r3, #32773	; 0x8005
   229f8:	429d      	cmp	r5, r3
   229fa:	f47f af1d 	bne.w	22838 <rpc_ip_event_handler+0xe8>
   229fe:	683b      	ldr	r3, [r7, #0]
   22a00:	b29b      	uxth	r3, r3
   22a02:	2b03      	cmp	r3, #3
   22a04:	f47f af14 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22a08:	6963      	ldr	r3, [r4, #20]
   22a0a:	2b00      	cmp	r3, #0
   22a0c:	f000 80eb 	beq.w	22be6 <rpc_ip_event_handler+0x496>
   22a10:	2b10      	cmp	r3, #16
   22a12:	f200 80bd 	bhi.w	22b90 <rpc_ip_event_handler+0x440>
   22a16:	4a2c      	ldr	r2, [pc, #176]	; (22ac8 <rpc_ip_event_handler+0x378>)
   22a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   22a1c:	607b      	str	r3, [r7, #4]
   22a1e:	2000      	movs	r0, #0
   22a20:	e6f8      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22a22:	f248 0308 	movw	r3, #32776	; 0x8008
   22a26:	429d      	cmp	r5, r3
   22a28:	f000 8094 	beq.w	22b54 <rpc_ip_event_handler+0x404>
   22a2c:	f248 0309 	movw	r3, #32777	; 0x8009
   22a30:	429d      	cmp	r5, r3
   22a32:	f47f af01 	bne.w	22838 <rpc_ip_event_handler+0xe8>
   22a36:	683b      	ldr	r3, [r7, #0]
   22a38:	b29b      	uxth	r3, r3
   22a3a:	2b0d      	cmp	r3, #13
   22a3c:	f47f aef8 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22a40:	6960      	ldr	r0, [r4, #20]
   22a42:	2800      	cmp	r0, #0
   22a44:	f000 80d7 	beq.w	22bf6 <rpc_ip_event_handler+0x4a6>
   22a48:	2810      	cmp	r0, #16
   22a4a:	f200 80a1 	bhi.w	22b90 <rpc_ip_event_handler+0x440>
   22a4e:	4b1e      	ldr	r3, [pc, #120]	; (22ac8 <rpc_ip_event_handler+0x378>)
   22a50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   22a54:	e7e2      	b.n	22a1c <rpc_ip_event_handler+0x2cc>
   22a56:	2100      	movs	r1, #0
   22a58:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   22a5c:	4403      	add	r3, r0
   22a5e:	f843 1c04 	str.w	r1, [r3, #-4]
   22a62:	4603      	mov	r3, r0
   22a64:	e7bd      	b.n	229e2 <rpc_ip_event_handler+0x292>
   22a66:	683b      	ldr	r3, [r7, #0]
   22a68:	2b01      	cmp	r3, #1
   22a6a:	f47f aee1 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22a6e:	6960      	ldr	r0, [r4, #20]
   22a70:	2800      	cmp	r0, #0
   22a72:	d1e9      	bne.n	22a48 <rpc_ip_event_handler+0x2f8>
   22a74:	2302      	movs	r3, #2
   22a76:	603b      	str	r3, [r7, #0]
   22a78:	69a3      	ldr	r3, [r4, #24]
   22a7a:	61bb      	str	r3, [r7, #24]
   22a7c:	e6ca      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22a7e:	683b      	ldr	r3, [r7, #0]
   22a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   22a84:	603b      	str	r3, [r7, #0]
   22a86:	683b      	ldr	r3, [r7, #0]
   22a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22a8c:	603b      	str	r3, [r7, #0]
   22a8e:	683b      	ldr	r3, [r7, #0]
   22a90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22a94:	603b      	str	r3, [r7, #0]
   22a96:	683b      	ldr	r3, [r7, #0]
   22a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   22a9c:	603b      	str	r3, [r7, #0]
   22a9e:	6923      	ldr	r3, [r4, #16]
   22aa0:	2b6c      	cmp	r3, #108	; 0x6c
   22aa2:	d077      	beq.n	22b94 <rpc_ip_event_handler+0x444>
   22aa4:	2b10      	cmp	r3, #16
   22aa6:	bf8c      	ite	hi
   22aa8:	232d      	movhi	r3, #45	; 0x2d
   22aaa:	4a07      	ldrls	r2, [pc, #28]	; (22ac8 <rpc_ip_event_handler+0x378>)
   22aac:	f04f 0000 	mov.w	r0, #0
   22ab0:	bf98      	it	ls
   22ab2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   22ab6:	607b      	str	r3, [r7, #4]
   22ab8:	60bb      	str	r3, [r7, #8]
   22aba:	e6ab      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22abc:	683b      	ldr	r3, [r7, #0]
   22abe:	b29b      	uxth	r3, r3
   22ac0:	2b07      	cmp	r3, #7
   22ac2:	f47f aeb5 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22ac6:	e6fe      	b.n	228c6 <rpc_ip_event_handler+0x176>
   22ac8:	0003602c 	.word	0x0003602c
   22acc:	20028f80 	.word	0x20028f80
   22ad0:	20022640 	.word	0x20022640
   22ad4:	20022610 	.word	0x20022610
   22ad8:	20022608 	.word	0x20022608
   22adc:	20027558 	.word	0x20027558
   22ae0:	20022618 	.word	0x20022618
   22ae4:	20022614 	.word	0x20022614
   22ae8:	2002260c 	.word	0x2002260c
   22aec:	683b      	ldr	r3, [r7, #0]
   22aee:	b29b      	uxth	r3, r3
   22af0:	2b08      	cmp	r3, #8
   22af2:	f47f ae9d 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22af6:	6963      	ldr	r3, [r4, #20]
   22af8:	2b00      	cmp	r3, #0
   22afa:	d189      	bne.n	22a10 <rpc_ip_event_handler+0x2c0>
   22afc:	4b5e      	ldr	r3, [pc, #376]	; (22c78 <rpc_ip_event_handler+0x528>)
   22afe:	2001      	movs	r0, #1
   22b00:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   22b04:	683b      	ldr	r3, [r7, #0]
   22b06:	0c1b      	lsrs	r3, r3, #16
   22b08:	041b      	lsls	r3, r3, #16
   22b0a:	f043 0309 	orr.w	r3, r3, #9
   22b0e:	603b      	str	r3, [r7, #0]
   22b10:	e680      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22b12:	683b      	ldr	r3, [r7, #0]
   22b14:	01db      	lsls	r3, r3, #7
   22b16:	f57f ae8b 	bpl.w	22830 <rpc_ip_event_handler+0xe0>
   22b1a:	6963      	ldr	r3, [r4, #20]
   22b1c:	2b00      	cmp	r3, #0
   22b1e:	f47f af77 	bne.w	22a10 <rpc_ip_event_handler+0x2c0>
   22b22:	6823      	ldr	r3, [r4, #0]
   22b24:	2b00      	cmp	r3, #0
   22b26:	d071      	beq.n	22c0c <rpc_ip_event_handler+0x4bc>
   22b28:	2001      	movs	r0, #1
   22b2a:	4b53      	ldr	r3, [pc, #332]	; (22c78 <rpc_ip_event_handler+0x528>)
   22b2c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   22b30:	683b      	ldr	r3, [r7, #0]
   22b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22b36:	603b      	str	r3, [r7, #0]
   22b38:	e66c      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22b3a:	683b      	ldr	r3, [r7, #0]
   22b3c:	025a      	lsls	r2, r3, #9
   22b3e:	f57f ae77 	bpl.w	22830 <rpc_ip_event_handler+0xe0>
   22b42:	6960      	ldr	r0, [r4, #20]
   22b44:	2800      	cmp	r0, #0
   22b46:	f47f af7f 	bne.w	22a48 <rpc_ip_event_handler+0x2f8>
   22b4a:	683b      	ldr	r3, [r7, #0]
   22b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22b50:	603b      	str	r3, [r7, #0]
   22b52:	e65f      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22b54:	683b      	ldr	r3, [r7, #0]
   22b56:	b29b      	uxth	r3, r3
   22b58:	2b06      	cmp	r3, #6
   22b5a:	f47f ae69 	bne.w	22830 <rpc_ip_event_handler+0xe0>
   22b5e:	6960      	ldr	r0, [r4, #20]
   22b60:	2800      	cmp	r0, #0
   22b62:	f47f af71 	bne.w	22a48 <rpc_ip_event_handler+0x2f8>
   22b66:	683b      	ldr	r3, [r7, #0]
   22b68:	0c1b      	lsrs	r3, r3, #16
   22b6a:	041b      	lsls	r3, r3, #16
   22b6c:	f043 0307 	orr.w	r3, r3, #7
   22b70:	603b      	str	r3, [r7, #0]
   22b72:	e64f      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22b74:	683b      	ldr	r3, [r7, #0]
   22b76:	0299      	lsls	r1, r3, #10
   22b78:	f57f ae5a 	bpl.w	22830 <rpc_ip_event_handler+0xe0>
   22b7c:	6963      	ldr	r3, [r4, #20]
   22b7e:	b33b      	cbz	r3, 22bd0 <rpc_ip_event_handler+0x480>
   22b80:	2b6b      	cmp	r3, #107	; 0x6b
   22b82:	f47f ae2b 	bne.w	227dc <rpc_ip_event_handler+0x8c>
   22b86:	693b      	ldr	r3, [r7, #16]
   22b88:	2b01      	cmp	r3, #1
   22b8a:	d041      	beq.n	22c10 <rpc_ip_event_handler+0x4c0>
   22b8c:	230c      	movs	r3, #12
   22b8e:	e62b      	b.n	227e8 <rpc_ip_event_handler+0x98>
   22b90:	232d      	movs	r3, #45	; 0x2d
   22b92:	e743      	b.n	22a1c <rpc_ip_event_handler+0x2cc>
   22b94:	2239      	movs	r2, #57	; 0x39
   22b96:	683b      	ldr	r3, [r7, #0]
   22b98:	2000      	movs	r0, #0
   22b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   22b9e:	603b      	str	r3, [r7, #0]
   22ba0:	607a      	str	r2, [r7, #4]
   22ba2:	60ba      	str	r2, [r7, #8]
   22ba4:	e636      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22ba6:	6820      	ldr	r0, [r4, #0]
   22ba8:	f7fe f9e2 	bl	20f70 <rpc_ip_client_data_free>
   22bac:	4628      	mov	r0, r5
   22bae:	e631      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22bb0:	683b      	ldr	r3, [r7, #0]
   22bb2:	2000      	movs	r0, #0
   22bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22bb8:	603b      	str	r3, [r7, #0]
   22bba:	683b      	ldr	r3, [r7, #0]
   22bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22bc0:	603b      	str	r3, [r7, #0]
   22bc2:	683b      	ldr	r3, [r7, #0]
   22bc4:	0c1b      	lsrs	r3, r3, #16
   22bc6:	041b      	lsls	r3, r3, #16
   22bc8:	f043 0305 	orr.w	r3, r3, #5
   22bcc:	603b      	str	r3, [r7, #0]
   22bce:	e621      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22bd0:	683b      	ldr	r3, [r7, #0]
   22bd2:	4a29      	ldr	r2, [pc, #164]	; (22c78 <rpc_ip_event_handler+0x528>)
   22bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22bd8:	603b      	str	r3, [r7, #0]
   22bda:	2001      	movs	r0, #1
   22bdc:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   22be0:	e618      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22be2:	2002      	movs	r0, #2
   22be4:	e616      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22be6:	683b      	ldr	r3, [r7, #0]
   22be8:	2000      	movs	r0, #0
   22bea:	0c1b      	lsrs	r3, r3, #16
   22bec:	041b      	lsls	r3, r3, #16
   22bee:	f043 0304 	orr.w	r3, r3, #4
   22bf2:	603b      	str	r3, [r7, #0]
   22bf4:	e60e      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22bf6:	683b      	ldr	r3, [r7, #0]
   22bf8:	0c1b      	lsrs	r3, r3, #16
   22bfa:	041b      	lsls	r3, r3, #16
   22bfc:	f043 030e 	orr.w	r3, r3, #14
   22c00:	603b      	str	r3, [r7, #0]
   22c02:	e607      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22c04:	8a65      	ldrh	r5, [r4, #18]
   22c06:	b95d      	cbnz	r5, 22c20 <rpc_ip_event_handler+0x4d0>
   22c08:	462e      	mov	r6, r5
   22c0a:	e64e      	b.n	228aa <rpc_ip_event_handler+0x15a>
   22c0c:	2000      	movs	r0, #0
   22c0e:	e78f      	b.n	22b30 <rpc_ip_event_handler+0x3e0>
   22c10:	220c      	movs	r2, #12
   22c12:	683b      	ldr	r3, [r7, #0]
   22c14:	2000      	movs	r0, #0
   22c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   22c1a:	603b      	str	r3, [r7, #0]
   22c1c:	607a      	str	r2, [r7, #4]
   22c1e:	e5f9      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22c20:	2024      	movs	r0, #36	; 0x24
   22c22:	f003 fe3f 	bl	268a4 <nrf_malloc>
   22c26:	4606      	mov	r6, r0
   22c28:	2800      	cmp	r0, #0
   22c2a:	d0da      	beq.n	22be2 <rpc_ip_event_handler+0x492>
   22c2c:	8a62      	ldrh	r2, [r4, #18]
   22c2e:	2a10      	cmp	r2, #16
   22c30:	d009      	beq.n	22c46 <rpc_ip_event_handler+0x4f6>
   22c32:	2a04      	cmp	r2, #4
   22c34:	d013      	beq.n	22c5e <rpc_ip_event_handler+0x50e>
   22c36:	6820      	ldr	r0, [r4, #0]
   22c38:	f7fe f99a 	bl	20f70 <rpc_ip_client_data_free>
   22c3c:	4630      	mov	r0, r6
   22c3e:	f003 fe3b 	bl	268b8 <nrf_free>
   22c42:	2000      	movs	r0, #0
   22c44:	e5e6      	b.n	22814 <rpc_ip_event_handler+0xc4>
   22c46:	230a      	movs	r3, #10
   22c48:	2524      	movs	r5, #36	; 0x24
   22c4a:	6043      	str	r3, [r0, #4]
   22c4c:	7005      	strb	r5, [r0, #0]
   22c4e:	8a23      	ldrh	r3, [r4, #16]
   22c50:	f104 0114 	add.w	r1, r4, #20
   22c54:	8103      	strh	r3, [r0, #8]
   22c56:	3010      	adds	r0, #16
   22c58:	f011 fee2 	bl	34a20 <memcpy>
   22c5c:	e625      	b.n	228aa <rpc_ip_event_handler+0x15a>
   22c5e:	2302      	movs	r3, #2
   22c60:	2510      	movs	r5, #16
   22c62:	6043      	str	r3, [r0, #4]
   22c64:	7005      	strb	r5, [r0, #0]
   22c66:	8a23      	ldrh	r3, [r4, #16]
   22c68:	f104 0114 	add.w	r1, r4, #20
   22c6c:	8103      	strh	r3, [r0, #8]
   22c6e:	300c      	adds	r0, #12
   22c70:	f011 fed6 	bl	34a20 <memcpy>
   22c74:	e619      	b.n	228aa <rpc_ip_event_handler+0x15a>
   22c76:	bf00      	nop
   22c78:	2002261c 	.word	0x2002261c

00022c7c <rpc_handle_ctrl_message>:
   22c7c:	2902      	cmp	r1, #2
   22c7e:	b510      	push	{r4, lr}
   22c80:	4604      	mov	r4, r0
   22c82:	d00c      	beq.n	22c9e <rpc_handle_ctrl_message+0x22>
   22c84:	2904      	cmp	r1, #4
   22c86:	d008      	beq.n	22c9a <rpc_handle_ctrl_message+0x1e>
   22c88:	2901      	cmp	r1, #1
   22c8a:	d006      	beq.n	22c9a <rpc_handle_ctrl_message+0x1e>
   22c8c:	6880      	ldr	r0, [r0, #8]
   22c8e:	b108      	cbz	r0, 22c94 <rpc_handle_ctrl_message+0x18>
   22c90:	f7fc fc9e 	bl	1f5d0 <rpc_transport_data_free>
   22c94:	4620      	mov	r0, r4
   22c96:	f7fc fc99 	bl	1f5cc <rpc_transport_rpc_free>
   22c9a:	2000      	movs	r0, #0
   22c9c:	bd10      	pop	{r4, pc}
   22c9e:	6880      	ldr	r0, [r0, #8]
   22ca0:	2800      	cmp	r0, #0
   22ca2:	d0fa      	beq.n	22c9a <rpc_handle_ctrl_message+0x1e>
   22ca4:	f7fc fc94 	bl	1f5d0 <rpc_transport_data_free>
   22ca8:	2000      	movs	r0, #0
   22caa:	bd10      	pop	{r4, pc}

00022cac <rpc_handle_data_message>:
   22cac:	4b23      	ldr	r3, [pc, #140]	; (22d3c <rpc_handle_data_message+0x90>)
   22cae:	6802      	ldr	r2, [r0, #0]
   22cb0:	8819      	ldrh	r1, [r3, #0]
   22cb2:	b292      	uxth	r2, r2
   22cb4:	4291      	cmp	r1, r2
   22cb6:	d027      	beq.n	22d08 <rpc_handle_data_message+0x5c>
   22cb8:	8a19      	ldrh	r1, [r3, #16]
   22cba:	4291      	cmp	r1, r2
   22cbc:	d02a      	beq.n	22d14 <rpc_handle_data_message+0x68>
   22cbe:	8c19      	ldrh	r1, [r3, #32]
   22cc0:	4291      	cmp	r1, r2
   22cc2:	d02b      	beq.n	22d1c <rpc_handle_data_message+0x70>
   22cc4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   22cc6:	4291      	cmp	r1, r2
   22cc8:	d02a      	beq.n	22d20 <rpc_handle_data_message+0x74>
   22cca:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   22cce:	4291      	cmp	r1, r2
   22cd0:	d028      	beq.n	22d24 <rpc_handle_data_message+0x78>
   22cd2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   22cd6:	4291      	cmp	r1, r2
   22cd8:	d026      	beq.n	22d28 <rpc_handle_data_message+0x7c>
   22cda:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   22cde:	4291      	cmp	r1, r2
   22ce0:	d026      	beq.n	22d30 <rpc_handle_data_message+0x84>
   22ce2:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   22ce6:	4291      	cmp	r1, r2
   22ce8:	d024      	beq.n	22d34 <rpc_handle_data_message+0x88>
   22cea:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   22cee:	4291      	cmp	r1, r2
   22cf0:	d01c      	beq.n	22d2c <rpc_handle_data_message+0x80>
   22cf2:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   22cf6:	4291      	cmp	r1, r2
   22cf8:	d01e      	beq.n	22d38 <rpc_handle_data_message+0x8c>
   22cfa:	6880      	ldr	r0, [r0, #8]
   22cfc:	b160      	cbz	r0, 22d18 <rpc_handle_data_message+0x6c>
   22cfe:	b510      	push	{r4, lr}
   22d00:	f7fc fc66 	bl	1f5d0 <rpc_transport_data_free>
   22d04:	2000      	movs	r0, #0
   22d06:	bd10      	pop	{r4, pc}
   22d08:	2200      	movs	r2, #0
   22d0a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   22d0e:	685a      	ldr	r2, [r3, #4]
   22d10:	68d9      	ldr	r1, [r3, #12]
   22d12:	4710      	bx	r2
   22d14:	2201      	movs	r2, #1
   22d16:	e7f8      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d18:	2000      	movs	r0, #0
   22d1a:	4770      	bx	lr
   22d1c:	2202      	movs	r2, #2
   22d1e:	e7f4      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d20:	2203      	movs	r2, #3
   22d22:	e7f2      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d24:	2204      	movs	r2, #4
   22d26:	e7f0      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d28:	2205      	movs	r2, #5
   22d2a:	e7ee      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d2c:	2208      	movs	r2, #8
   22d2e:	e7ec      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d30:	2206      	movs	r2, #6
   22d32:	e7ea      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d34:	2207      	movs	r2, #7
   22d36:	e7e8      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d38:	2209      	movs	r2, #9
   22d3a:	e7e6      	b.n	22d0a <rpc_handle_data_message+0x5e>
   22d3c:	20022644 	.word	0x20022644

00022d40 <rpc_framework_init>:
   22d40:	b508      	push	{r3, lr}
   22d42:	22a0      	movs	r2, #160	; 0xa0
   22d44:	2100      	movs	r1, #0
   22d46:	4802      	ldr	r0, [pc, #8]	; (22d50 <rpc_framework_init+0x10>)
   22d48:	f011 fea4 	bl	34a94 <memset>
   22d4c:	2000      	movs	r0, #0
   22d4e:	bd08      	pop	{r3, pc}
   22d50:	20022644 	.word	0x20022644

00022d54 <rpc_client_register>:
   22d54:	8803      	ldrh	r3, [r0, #0]
   22d56:	2b00      	cmp	r3, #0
   22d58:	d045      	beq.n	22de6 <rpc_client_register+0x92>
   22d5a:	6842      	ldr	r2, [r0, #4]
   22d5c:	4601      	mov	r1, r0
   22d5e:	2a00      	cmp	r2, #0
   22d60:	d050      	beq.n	22e04 <rpc_client_register+0xb0>
   22d62:	4a30      	ldr	r2, [pc, #192]	; (22e24 <rpc_client_register+0xd0>)
   22d64:	8810      	ldrh	r0, [r2, #0]
   22d66:	4283      	cmp	r3, r0
   22d68:	d03d      	beq.n	22de6 <rpc_client_register+0x92>
   22d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22d6e:	8a14      	ldrh	r4, [r2, #16]
   22d70:	42a3      	cmp	r3, r4
   22d72:	d035      	beq.n	22de0 <rpc_client_register+0x8c>
   22d74:	8c15      	ldrh	r5, [r2, #32]
   22d76:	42ab      	cmp	r3, r5
   22d78:	d032      	beq.n	22de0 <rpc_client_register+0x8c>
   22d7a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   22d7c:	42b3      	cmp	r3, r6
   22d7e:	d02f      	beq.n	22de0 <rpc_client_register+0x8c>
   22d80:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   22d84:	42bb      	cmp	r3, r7
   22d86:	d02b      	beq.n	22de0 <rpc_client_register+0x8c>
   22d88:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   22d8c:	4563      	cmp	r3, ip
   22d8e:	d027      	beq.n	22de0 <rpc_client_register+0x8c>
   22d90:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   22d94:	4573      	cmp	r3, lr
   22d96:	d023      	beq.n	22de0 <rpc_client_register+0x8c>
   22d98:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   22d9c:	4543      	cmp	r3, r8
   22d9e:	d01f      	beq.n	22de0 <rpc_client_register+0x8c>
   22da0:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   22da4:	454b      	cmp	r3, r9
   22da6:	d01b      	beq.n	22de0 <rpc_client_register+0x8c>
   22da8:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   22dac:	4553      	cmp	r3, sl
   22dae:	d017      	beq.n	22de0 <rpc_client_register+0x8c>
   22db0:	b1e0      	cbz	r0, 22dec <rpc_client_register+0x98>
   22db2:	b35c      	cbz	r4, 22e0c <rpc_client_register+0xb8>
   22db4:	b365      	cbz	r5, 22e10 <rpc_client_register+0xbc>
   22db6:	b36e      	cbz	r6, 22e14 <rpc_client_register+0xc0>
   22db8:	b377      	cbz	r7, 22e18 <rpc_client_register+0xc4>
   22dba:	f1bc 0f00 	cmp.w	ip, #0
   22dbe:	d02d      	beq.n	22e1c <rpc_client_register+0xc8>
   22dc0:	f1be 0f00 	cmp.w	lr, #0
   22dc4:	d020      	beq.n	22e08 <rpc_client_register+0xb4>
   22dc6:	f1b8 0f00 	cmp.w	r8, #0
   22dca:	d029      	beq.n	22e20 <rpc_client_register+0xcc>
   22dcc:	f1b9 0f00 	cmp.w	r9, #0
   22dd0:	d00b      	beq.n	22dea <rpc_client_register+0x96>
   22dd2:	2009      	movs	r0, #9
   22dd4:	f1ba 0f00 	cmp.w	sl, #0
   22dd8:	d008      	beq.n	22dec <rpc_client_register+0x98>
   22dda:	2004      	movs	r0, #4
   22ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22de0:	2007      	movs	r0, #7
   22de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22de6:	2007      	movs	r0, #7
   22de8:	4770      	bx	lr
   22dea:	2008      	movs	r0, #8
   22dec:	0100      	lsls	r0, r0, #4
   22dee:	5213      	strh	r3, [r2, r0]
   22df0:	684b      	ldr	r3, [r1, #4]
   22df2:	4402      	add	r2, r0
   22df4:	6053      	str	r3, [r2, #4]
   22df6:	688b      	ldr	r3, [r1, #8]
   22df8:	2000      	movs	r0, #0
   22dfa:	6093      	str	r3, [r2, #8]
   22dfc:	68cb      	ldr	r3, [r1, #12]
   22dfe:	60d3      	str	r3, [r2, #12]
   22e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22e04:	200e      	movs	r0, #14
   22e06:	4770      	bx	lr
   22e08:	2006      	movs	r0, #6
   22e0a:	e7ef      	b.n	22dec <rpc_client_register+0x98>
   22e0c:	2001      	movs	r0, #1
   22e0e:	e7ed      	b.n	22dec <rpc_client_register+0x98>
   22e10:	2002      	movs	r0, #2
   22e12:	e7eb      	b.n	22dec <rpc_client_register+0x98>
   22e14:	2003      	movs	r0, #3
   22e16:	e7e9      	b.n	22dec <rpc_client_register+0x98>
   22e18:	2004      	movs	r0, #4
   22e1a:	e7e7      	b.n	22dec <rpc_client_register+0x98>
   22e1c:	2005      	movs	r0, #5
   22e1e:	e7e5      	b.n	22dec <rpc_client_register+0x98>
   22e20:	2007      	movs	r0, #7
   22e22:	e7e3      	b.n	22dec <rpc_client_register+0x98>
   22e24:	20022644 	.word	0x20022644

00022e28 <rpc_message_send>:
   22e28:	b150      	cbz	r0, 22e40 <rpc_message_send+0x18>
   22e2a:	b159      	cbz	r1, 22e44 <rpc_message_send+0x1c>
   22e2c:	684b      	ldr	r3, [r1, #4]
   22e2e:	8008      	strh	r0, [r1, #0]
   22e30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22e34:	f043 0302 	orr.w	r3, r3, #2
   22e38:	604b      	str	r3, [r1, #4]
   22e3a:	4608      	mov	r0, r1
   22e3c:	f7fc bbc0 	b.w	1f5c0 <rpc_transport_send>
   22e40:	2007      	movs	r0, #7
   22e42:	4770      	bx	lr
   22e44:	200e      	movs	r0, #14
   22e46:	4770      	bx	lr

00022e48 <rpc_message_alloc>:
   22e48:	b342      	cbz	r2, 22e9c <rpc_message_alloc+0x54>
   22e4a:	b328      	cbz	r0, 22e98 <rpc_message_alloc+0x50>
   22e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e4e:	2300      	movs	r3, #0
   22e50:	4616      	mov	r6, r2
   22e52:	460c      	mov	r4, r1
   22e54:	4605      	mov	r5, r0
   22e56:	6013      	str	r3, [r2, #0]
   22e58:	b171      	cbz	r1, 22e78 <rpc_message_alloc+0x30>
   22e5a:	4608      	mov	r0, r1
   22e5c:	f7fc fbb4 	bl	1f5c8 <rpc_transport_data_alloc>
   22e60:	4607      	mov	r7, r0
   22e62:	b1b8      	cbz	r0, 22e94 <rpc_message_alloc+0x4c>
   22e64:	f7fc fbae 	bl	1f5c4 <rpc_transport_rpc_alloc>
   22e68:	4603      	mov	r3, r0
   22e6a:	b180      	cbz	r0, 22e8e <rpc_message_alloc+0x46>
   22e6c:	2000      	movs	r0, #0
   22e6e:	60dc      	str	r4, [r3, #12]
   22e70:	609f      	str	r7, [r3, #8]
   22e72:	801d      	strh	r5, [r3, #0]
   22e74:	6033      	str	r3, [r6, #0]
   22e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e78:	f7fc fba4 	bl	1f5c4 <rpc_transport_rpc_alloc>
   22e7c:	4603      	mov	r3, r0
   22e7e:	b148      	cbz	r0, 22e94 <rpc_message_alloc+0x4c>
   22e80:	4627      	mov	r7, r4
   22e82:	60dc      	str	r4, [r3, #12]
   22e84:	609f      	str	r7, [r3, #8]
   22e86:	801d      	strh	r5, [r3, #0]
   22e88:	2000      	movs	r0, #0
   22e8a:	6033      	str	r3, [r6, #0]
   22e8c:	e7f3      	b.n	22e76 <rpc_message_alloc+0x2e>
   22e8e:	4638      	mov	r0, r7
   22e90:	f7fc fb9e 	bl	1f5d0 <rpc_transport_data_free>
   22e94:	2004      	movs	r0, #4
   22e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e98:	2007      	movs	r0, #7
   22e9a:	4770      	bx	lr
   22e9c:	200e      	movs	r0, #14
   22e9e:	4770      	bx	lr

00022ea0 <rpc_message_free>:
   22ea0:	b130      	cbz	r0, 22eb0 <rpc_message_free+0x10>
   22ea2:	b139      	cbz	r1, 22eb4 <rpc_message_free+0x14>
   22ea4:	b508      	push	{r3, lr}
   22ea6:	4608      	mov	r0, r1
   22ea8:	f7fc fb90 	bl	1f5cc <rpc_transport_rpc_free>
   22eac:	2000      	movs	r0, #0
   22eae:	bd08      	pop	{r3, pc}
   22eb0:	2007      	movs	r0, #7
   22eb2:	4770      	bx	lr
   22eb4:	200e      	movs	r0, #14
   22eb6:	4770      	bx	lr

00022eb8 <rpc_message_data_free>:
   22eb8:	b130      	cbz	r0, 22ec8 <rpc_message_data_free+0x10>
   22eba:	b139      	cbz	r1, 22ecc <rpc_message_data_free+0x14>
   22ebc:	b508      	push	{r3, lr}
   22ebe:	4608      	mov	r0, r1
   22ec0:	f7fc fb86 	bl	1f5d0 <rpc_transport_data_free>
   22ec4:	2000      	movs	r0, #0
   22ec6:	bd08      	pop	{r3, pc}
   22ec8:	2007      	movs	r0, #7
   22eca:	4770      	bx	lr
   22ecc:	200e      	movs	r0, #14
   22ece:	4770      	bx	lr

00022ed0 <packet_free_cb>:
   22ed0:	b510      	push	{r4, lr}
   22ed2:	4604      	mov	r4, r0
   22ed4:	b118      	cbz	r0, 22ede <packet_free_cb+0xe>
   22ed6:	6800      	ldr	r0, [r0, #0]
   22ed8:	b108      	cbz	r0, 22ede <packet_free_cb+0xe>
   22eda:	f002 feff 	bl	25cdc <rpc_gnss_client_data_free>
   22ede:	68a0      	ldr	r0, [r4, #8]
   22ee0:	b118      	cbz	r0, 22eea <packet_free_cb+0x1a>
   22ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22ee6:	f003 bce7 	b.w	268b8 <nrf_free>
   22eea:	bd10      	pop	{r4, pc}

00022eec <rpc_gnss_event_handler>:
   22eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   22eee:	4b64      	ldr	r3, [pc, #400]	; (23080 <rpc_gnss_event_handler+0x194>)
   22ef0:	4606      	mov	r6, r0
   22ef2:	6800      	ldr	r0, [r0, #0]
   22ef4:	881b      	ldrh	r3, [r3, #0]
   22ef6:	6802      	ldr	r2, [r0, #0]
   22ef8:	b085      	sub	sp, #20
   22efa:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   22efe:	460d      	mov	r5, r1
   22f00:	d037      	beq.n	22f72 <rpc_gnss_event_handler+0x86>
   22f02:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   22f06:	33ff      	adds	r3, #255	; 0xff
   22f08:	b29b      	uxth	r3, r3
   22f0a:	2b02      	cmp	r3, #2
   22f0c:	d811      	bhi.n	22f32 <rpc_gnss_event_handler+0x46>
   22f0e:	4c5d      	ldr	r4, [pc, #372]	; (23084 <rpc_gnss_event_handler+0x198>)
   22f10:	6823      	ldr	r3, [r4, #0]
   22f12:	075a      	lsls	r2, r3, #29
   22f14:	d410      	bmi.n	22f38 <rpc_gnss_event_handler+0x4c>
   22f16:	6823      	ldr	r3, [r4, #0]
   22f18:	079b      	lsls	r3, r3, #30
   22f1a:	d503      	bpl.n	22f24 <rpc_gnss_event_handler+0x38>
   22f1c:	f244 0303 	movw	r3, #16387	; 0x4003
   22f20:	429d      	cmp	r5, r3
   22f22:	d009      	beq.n	22f38 <rpc_gnss_event_handler+0x4c>
   22f24:	6830      	ldr	r0, [r6, #0]
   22f26:	b120      	cbz	r0, 22f32 <rpc_gnss_event_handler+0x46>
   22f28:	f002 fed8 	bl	25cdc <rpc_gnss_client_data_free>
   22f2c:	2200      	movs	r2, #0
   22f2e:	4b56      	ldr	r3, [pc, #344]	; (23088 <rpc_gnss_event_handler+0x19c>)
   22f30:	601a      	str	r2, [r3, #0]
   22f32:	2000      	movs	r0, #0
   22f34:	b005      	add	sp, #20
   22f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22f38:	2002      	movs	r0, #2
   22f3a:	f003 fcb3 	bl	268a4 <nrf_malloc>
   22f3e:	4607      	mov	r7, r0
   22f40:	2800      	cmp	r0, #0
   22f42:	f000 8094 	beq.w	2306e <rpc_gnss_event_handler+0x182>
   22f46:	2302      	movs	r3, #2
   22f48:	8005      	strh	r5, [r0, #0]
   22f4a:	6831      	ldr	r1, [r6, #0]
   22f4c:	6872      	ldr	r2, [r6, #4]
   22f4e:	484f      	ldr	r0, [pc, #316]	; (2308c <rpc_gnss_event_handler+0x1a0>)
   22f50:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   22f54:	6800      	ldr	r0, [r0, #0]
   22f56:	9303      	str	r3, [sp, #12]
   22f58:	6803      	ldr	r3, [r0, #0]
   22f5a:	4669      	mov	r1, sp
   22f5c:	685b      	ldr	r3, [r3, #4]
   22f5e:	4798      	blx	r3
   22f60:	3001      	adds	r0, #1
   22f62:	d071      	beq.n	23048 <rpc_gnss_event_handler+0x15c>
   22f64:	2000      	movs	r0, #0
   22f66:	6823      	ldr	r3, [r4, #0]
   22f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22f6c:	6023      	str	r3, [r4, #0]
   22f6e:	b005      	add	sp, #20
   22f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22f72:	4c44      	ldr	r4, [pc, #272]	; (23084 <rpc_gnss_event_handler+0x198>)
   22f74:	4f44      	ldr	r7, [pc, #272]	; (23088 <rpc_gnss_event_handler+0x19c>)
   22f76:	6823      	ldr	r3, [r4, #0]
   22f78:	6038      	str	r0, [r7, #0]
   22f7a:	01d9      	lsls	r1, r3, #7
   22f7c:	d523      	bpl.n	22fc6 <rpc_gnss_event_handler+0xda>
   22f7e:	f242 1302 	movw	r3, #8450	; 0x2102
   22f82:	429d      	cmp	r5, r3
   22f84:	d11f      	bne.n	22fc6 <rpc_gnss_event_handler+0xda>
   22f86:	6843      	ldr	r3, [r0, #4]
   22f88:	b91b      	cbnz	r3, 22f92 <rpc_gnss_event_handler+0xa6>
   22f8a:	6823      	ldr	r3, [r4, #0]
   22f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22f90:	6023      	str	r3, [r4, #0]
   22f92:	6823      	ldr	r3, [r4, #0]
   22f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22f98:	6023      	str	r3, [r4, #0]
   22f9a:	6823      	ldr	r3, [r4, #0]
   22f9c:	025a      	lsls	r2, r3, #9
   22f9e:	d430      	bmi.n	23002 <rpc_gnss_event_handler+0x116>
   22fa0:	f242 0305 	movw	r3, #8197	; 0x2005
   22fa4:	429d      	cmp	r5, r3
   22fa6:	d12c      	bne.n	23002 <rpc_gnss_event_handler+0x116>
   22fa8:	6823      	ldr	r3, [r4, #0]
   22faa:	0299      	lsls	r1, r3, #10
   22fac:	d529      	bpl.n	23002 <rpc_gnss_event_handler+0x116>
   22fae:	6843      	ldr	r3, [r0, #4]
   22fb0:	2b00      	cmp	r3, #0
   22fb2:	d157      	bne.n	23064 <rpc_gnss_event_handler+0x178>
   22fb4:	6823      	ldr	r3, [r4, #0]
   22fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   22fba:	6023      	str	r3, [r4, #0]
   22fbc:	6823      	ldr	r3, [r4, #0]
   22fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22fc2:	6023      	str	r3, [r4, #0]
   22fc4:	e01d      	b.n	23002 <rpc_gnss_event_handler+0x116>
   22fc6:	6823      	ldr	r3, [r4, #0]
   22fc8:	025b      	lsls	r3, r3, #9
   22fca:	d50e      	bpl.n	22fea <rpc_gnss_event_handler+0xfe>
   22fcc:	f242 1303 	movw	r3, #8451	; 0x2103
   22fd0:	429d      	cmp	r5, r3
   22fd2:	d10a      	bne.n	22fea <rpc_gnss_event_handler+0xfe>
   22fd4:	6843      	ldr	r3, [r0, #4]
   22fd6:	b91b      	cbnz	r3, 22fe0 <rpc_gnss_event_handler+0xf4>
   22fd8:	6823      	ldr	r3, [r4, #0]
   22fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22fde:	6023      	str	r3, [r4, #0]
   22fe0:	6823      	ldr	r3, [r4, #0]
   22fe2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   22fe6:	6023      	str	r3, [r4, #0]
   22fe8:	e00b      	b.n	23002 <rpc_gnss_event_handler+0x116>
   22fea:	f242 0301 	movw	r3, #8193	; 0x2001
   22fee:	429d      	cmp	r5, r3
   22ff0:	d10c      	bne.n	2300c <rpc_gnss_event_handler+0x120>
   22ff2:	6843      	ldr	r3, [r0, #4]
   22ff4:	b92b      	cbnz	r3, 23002 <rpc_gnss_event_handler+0x116>
   22ff6:	6823      	ldr	r3, [r4, #0]
   22ff8:	0c1b      	lsrs	r3, r3, #16
   22ffa:	041b      	lsls	r3, r3, #16
   22ffc:	f043 0302 	orr.w	r3, r3, #2
   23000:	6023      	str	r3, [r4, #0]
   23002:	f002 fe6b 	bl	25cdc <rpc_gnss_client_data_free>
   23006:	2300      	movs	r3, #0
   23008:	603b      	str	r3, [r7, #0]
   2300a:	e77a      	b.n	22f02 <rpc_gnss_event_handler+0x16>
   2300c:	f242 0304 	movw	r3, #8196	; 0x2004
   23010:	429d      	cmp	r5, r3
   23012:	d1c5      	bne.n	22fa0 <rpc_gnss_event_handler+0xb4>
   23014:	6843      	ldr	r3, [r0, #4]
   23016:	b993      	cbnz	r3, 2303e <rpc_gnss_event_handler+0x152>
   23018:	6823      	ldr	r3, [r4, #0]
   2301a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2301e:	6023      	str	r3, [r4, #0]
   23020:	6823      	ldr	r3, [r4, #0]
   23022:	b29b      	uxth	r3, r3
   23024:	2b03      	cmp	r3, #3
   23026:	6823      	ldr	r3, [r4, #0]
   23028:	d016      	beq.n	23058 <rpc_gnss_event_handler+0x16c>
   2302a:	b29b      	uxth	r3, r3
   2302c:	2b04      	cmp	r3, #4
   2302e:	d1d7      	bne.n	22fe0 <rpc_gnss_event_handler+0xf4>
   23030:	6823      	ldr	r3, [r4, #0]
   23032:	0c1b      	lsrs	r3, r3, #16
   23034:	041b      	lsls	r3, r3, #16
   23036:	f043 0302 	orr.w	r3, r3, #2
   2303a:	6023      	str	r3, [r4, #0]
   2303c:	e7d0      	b.n	22fe0 <rpc_gnss_event_handler+0xf4>
   2303e:	6823      	ldr	r3, [r4, #0]
   23040:	b29b      	uxth	r3, r3
   23042:	2b03      	cmp	r3, #3
   23044:	d1cc      	bne.n	22fe0 <rpc_gnss_event_handler+0xf4>
   23046:	e7f3      	b.n	23030 <rpc_gnss_event_handler+0x144>
   23048:	4638      	mov	r0, r7
   2304a:	f003 fc35 	bl	268b8 <nrf_free>
   2304e:	6830      	ldr	r0, [r6, #0]
   23050:	2800      	cmp	r0, #0
   23052:	f47f af69 	bne.w	22f28 <rpc_gnss_event_handler+0x3c>
   23056:	e76c      	b.n	22f32 <rpc_gnss_event_handler+0x46>
   23058:	0c1b      	lsrs	r3, r3, #16
   2305a:	041b      	lsls	r3, r3, #16
   2305c:	f043 0304 	orr.w	r3, r3, #4
   23060:	6023      	str	r3, [r4, #0]
   23062:	e7bd      	b.n	22fe0 <rpc_gnss_event_handler+0xf4>
   23064:	6823      	ldr	r3, [r4, #0]
   23066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2306a:	6023      	str	r3, [r4, #0]
   2306c:	e7c9      	b.n	23002 <rpc_gnss_event_handler+0x116>
   2306e:	6830      	ldr	r0, [r6, #0]
   23070:	2800      	cmp	r0, #0
   23072:	f43f af5e 	beq.w	22f32 <rpc_gnss_event_handler+0x46>
   23076:	f002 fe31 	bl	25cdc <rpc_gnss_client_data_free>
   2307a:	4b03      	ldr	r3, [pc, #12]	; (23088 <rpc_gnss_event_handler+0x19c>)
   2307c:	601f      	str	r7, [r3, #0]
   2307e:	e758      	b.n	22f32 <rpc_gnss_event_handler+0x46>
   23080:	2002755a 	.word	0x2002755a
   23084:	200226e4 	.word	0x200226e4
   23088:	200226e8 	.word	0x200226e8
   2308c:	200226ec 	.word	0x200226ec

00023090 <gnss_interface_write>:
   23090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23094:	4a74      	ldr	r2, [pc, #464]	; (23268 <gnss_interface_write+0x1d8>)
   23096:	b09f      	sub	sp, #124	; 0x7c
   23098:	4290      	cmp	r0, r2
   2309a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   2309c:	f040 80d7 	bne.w	2324e <gnss_interface_write+0x1be>
   230a0:	2900      	cmp	r1, #0
   230a2:	f000 80c6 	beq.w	23232 <gnss_interface_write+0x1a2>
   230a6:	2d00      	cmp	r5, #0
   230a8:	f000 80c3 	beq.w	23232 <gnss_interface_write+0x1a2>
   230ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   230ae:	2a02      	cmp	r2, #2
   230b0:	f040 80bf 	bne.w	23232 <gnss_interface_write+0x1a2>
   230b4:	4c6d      	ldr	r4, [pc, #436]	; (2326c <gnss_interface_write+0x1dc>)
   230b6:	6822      	ldr	r2, [r4, #0]
   230b8:	b292      	uxth	r2, r2
   230ba:	2a02      	cmp	r2, #2
   230bc:	d004      	beq.n	230c8 <gnss_interface_write+0x38>
   230be:	6822      	ldr	r2, [r4, #0]
   230c0:	b292      	uxth	r2, r2
   230c2:	2a04      	cmp	r2, #4
   230c4:	f040 80bd 	bne.w	23242 <gnss_interface_write+0x1b2>
   230c8:	2b00      	cmp	r3, #0
   230ca:	f040 80c6 	bne.w	2325a <gnss_interface_write+0x1ca>
   230ce:	6822      	ldr	r2, [r4, #0]
   230d0:	0390      	lsls	r0, r2, #14
   230d2:	d512      	bpl.n	230fa <gnss_interface_write+0x6a>
   230d4:	6822      	ldr	r2, [r4, #0]
   230d6:	882b      	ldrh	r3, [r5, #0]
   230d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   230dc:	6022      	str	r2, [r4, #0]
   230de:	6822      	ldr	r2, [r4, #0]
   230e0:	3b01      	subs	r3, #1
   230e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   230e6:	6022      	str	r2, [r4, #0]
   230e8:	2b07      	cmp	r3, #7
   230ea:	f200 80a2 	bhi.w	23232 <gnss_interface_write+0x1a2>
   230ee:	e8df f003 	tbb	[pc, r3]
   230f2:	7d82      	.short	0x7d82
   230f4:	646e7378 	.word	0x646e7378
   230f8:	0869      	.short	0x0869
   230fa:	2000      	movs	r0, #0
   230fc:	b01f      	add	sp, #124	; 0x7c
   230fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23102:	4608      	mov	r0, r1
   23104:	a902      	add	r1, sp, #8
   23106:	f002 fd9d 	bl	25c44 <rpc_gnss_serialize_integrity>
   2310a:	2172      	movs	r1, #114	; 0x72
   2310c:	4668      	mov	r0, sp
   2310e:	f002 fdb3 	bl	25c78 <rpc_gnss_client_request_alloc>
   23112:	4605      	mov	r5, r0
   23114:	9800      	ldr	r0, [sp, #0]
   23116:	2d00      	cmp	r5, #0
   23118:	d172      	bne.n	23200 <gnss_interface_write+0x170>
   2311a:	2800      	cmp	r0, #0
   2311c:	d077      	beq.n	2320e <gnss_interface_write+0x17e>
   2311e:	f241 0605 	movw	r6, #4101	; 0x1005
   23122:	f04f 0c49 	mov.w	ip, #73	; 0x49
   23126:	2272      	movs	r2, #114	; 0x72
   23128:	f04f 0e76 	mov.w	lr, #118	; 0x76
   2312c:	f04f 0943 	mov.w	r9, #67	; 0x43
   23130:	f04f 0854 	mov.w	r8, #84	; 0x54
   23134:	4f4e      	ldr	r7, [pc, #312]	; (23270 <gnss_interface_write+0x1e0>)
   23136:	a91e      	add	r1, sp, #120	; 0x78
   23138:	883b      	ldrh	r3, [r7, #0]
   2313a:	f880 c00f 	strb.w	ip, [r0, #15]
   2313e:	3301      	adds	r3, #1
   23140:	b29b      	uxth	r3, r3
   23142:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   23146:	f841 cd74 	str.w	ip, [r1, #-116]!
   2314a:	7145      	strb	r5, [r0, #5]
   2314c:	7185      	strb	r5, [r0, #6]
   2314e:	71c5      	strb	r5, [r0, #7]
   23150:	7205      	strb	r5, [r0, #8]
   23152:	7245      	strb	r5, [r0, #9]
   23154:	7285      	strb	r5, [r0, #10]
   23156:	72c5      	strb	r5, [r0, #11]
   23158:	7102      	strb	r2, [r0, #4]
   2315a:	f880 900c 	strb.w	r9, [r0, #12]
   2315e:	f880 800d 	strb.w	r8, [r0, #13]
   23162:	f880 e00e 	strb.w	lr, [r0, #14]
   23166:	6800      	ldr	r0, [r0, #0]
   23168:	803b      	strh	r3, [r7, #0]
   2316a:	f011 fc59 	bl	34a20 <memcpy>
   2316e:	4b41      	ldr	r3, [pc, #260]	; (23274 <gnss_interface_write+0x1e4>)
   23170:	4631      	mov	r1, r6
   23172:	9800      	ldr	r0, [sp, #0]
   23174:	601d      	str	r5, [r3, #0]
   23176:	f002 fd93 	bl	25ca0 <rpc_gnss_client_request_send>
   2317a:	2800      	cmp	r0, #0
   2317c:	d14e      	bne.n	2321c <gnss_interface_write+0x18c>
   2317e:	6823      	ldr	r3, [r4, #0]
   23180:	0299      	lsls	r1, r3, #10
   23182:	d50b      	bpl.n	2319c <gnss_interface_write+0x10c>
   23184:	4e3c      	ldr	r6, [pc, #240]	; (23278 <gnss_interface_write+0x1e8>)
   23186:	4d38      	ldr	r5, [pc, #224]	; (23268 <gnss_interface_write+0x1d8>)
   23188:	e000      	b.n	2318c <gnss_interface_write+0xfc>
   2318a:	b978      	cbnz	r0, 231ac <gnss_interface_write+0x11c>
   2318c:	4631      	mov	r1, r6
   2318e:	4628      	mov	r0, r5
   23190:	f7fa f8c4 	bl	1d31c <bsd_os_timedwait>
   23194:	6823      	ldr	r3, [r4, #0]
   23196:	029a      	lsls	r2, r3, #10
   23198:	d4f7      	bmi.n	2318a <gnss_interface_write+0xfa>
   2319a:	b938      	cbnz	r0, 231ac <gnss_interface_write+0x11c>
   2319c:	6823      	ldr	r3, [r4, #0]
   2319e:	039b      	lsls	r3, r3, #14
   231a0:	d4ab      	bmi.n	230fa <gnss_interface_write+0x6a>
   231a2:	2005      	movs	r0, #5
   231a4:	6823      	ldr	r3, [r4, #0]
   231a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   231aa:	6023      	str	r3, [r4, #0]
   231ac:	f7fa f960 	bl	1d470 <bsd_os_errno_set>
   231b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   231b4:	b01f      	add	sp, #124	; 0x7c
   231b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   231ba:	4608      	mov	r0, r1
   231bc:	a902      	add	r1, sp, #8
   231be:	f002 fcf9 	bl	25bb4 <rpc_gnss_serialize_time_and_sv_tow>
   231c2:	e7a2      	b.n	2310a <gnss_interface_write+0x7a>
   231c4:	4608      	mov	r0, r1
   231c6:	a902      	add	r1, sp, #8
   231c8:	f002 fd1c 	bl	25c04 <rpc_gnss_serialize_location>
   231cc:	e79d      	b.n	2310a <gnss_interface_write+0x7a>
   231ce:	4608      	mov	r0, r1
   231d0:	a902      	add	r1, sp, #8
   231d2:	f002 fcd5 	bl	25b80 <rpc_gnss_serialize_nequick>
   231d6:	e798      	b.n	2310a <gnss_interface_write+0x7a>
   231d8:	4608      	mov	r0, r1
   231da:	a902      	add	r1, sp, #8
   231dc:	f002 fcac 	bl	25b38 <rpc_gnss_serialize_klob>
   231e0:	e793      	b.n	2310a <gnss_interface_write+0x7a>
   231e2:	4608      	mov	r0, r1
   231e4:	a902      	add	r1, sp, #8
   231e6:	f002 fc75 	bl	25ad4 <rpc_gnss_serialize_alm>
   231ea:	e78e      	b.n	2310a <gnss_interface_write+0x7a>
   231ec:	4608      	mov	r0, r1
   231ee:	a902      	add	r1, sp, #8
   231f0:	f002 fc1e 	bl	25a30 <rpc_gnss_serialize_ephe>
   231f4:	e789      	b.n	2310a <gnss_interface_write+0x7a>
   231f6:	4608      	mov	r0, r1
   231f8:	a902      	add	r1, sp, #8
   231fa:	f002 fbf7 	bl	259ec <rpc_gnss_serialize_utc>
   231fe:	e784      	b.n	2310a <gnss_interface_write+0x7a>
   23200:	b128      	cbz	r0, 2320e <gnss_interface_write+0x17e>
   23202:	6803      	ldr	r3, [r0, #0]
   23204:	b11b      	cbz	r3, 2320e <gnss_interface_write+0x17e>
   23206:	4618      	mov	r0, r3
   23208:	f002 fd68 	bl	25cdc <rpc_gnss_client_data_free>
   2320c:	9800      	ldr	r0, [sp, #0]
   2320e:	f002 fd5d 	bl	25ccc <rpc_gnss_client_message_free>
   23212:	2023      	movs	r0, #35	; 0x23
   23214:	f7fa f92c 	bl	1d470 <bsd_os_errno_set>
   23218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2321c:	6823      	ldr	r3, [r4, #0]
   2321e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   23222:	6023      	str	r3, [r4, #0]
   23224:	6823      	ldr	r3, [r4, #0]
   23226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2322a:	6023      	str	r3, [r4, #0]
   2322c:	b01f      	add	sp, #124	; 0x7c
   2322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23232:	2016      	movs	r0, #22
   23234:	f7fa f91c 	bl	1d470 <bsd_os_errno_set>
   23238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2323c:	b01f      	add	sp, #124	; 0x7c
   2323e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23242:	2039      	movs	r0, #57	; 0x39
   23244:	f7fa f914 	bl	1d470 <bsd_os_errno_set>
   23248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2324c:	e756      	b.n	230fc <gnss_interface_write+0x6c>
   2324e:	2009      	movs	r0, #9
   23250:	f7fa f90e 	bl	1d470 <bsd_os_errno_set>
   23254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23258:	e750      	b.n	230fc <gnss_interface_write+0x6c>
   2325a:	202d      	movs	r0, #45	; 0x2d
   2325c:	f7fa f908 	bl	1d470 <bsd_os_errno_set>
   23260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23264:	e74a      	b.n	230fc <gnss_interface_write+0x6c>
   23266:	bf00      	nop
   23268:	49765443 	.word	0x49765443
   2326c:	200226e4 	.word	0x200226e4
   23270:	2002755a 	.word	0x2002755a
   23274:	200226e8 	.word	0x200226e8
   23278:	200201d0 	.word	0x200201d0

0002327c <gnss_interface_read>:
   2327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23280:	4c55      	ldr	r4, [pc, #340]	; (233d8 <gnss_interface_read+0x15c>)
   23282:	b0b7      	sub	sp, #220	; 0xdc
   23284:	42a0      	cmp	r0, r4
   23286:	f040 81fa 	bne.w	2367e <gnss_interface_read+0x402>
   2328a:	460e      	mov	r6, r1
   2328c:	2900      	cmp	r1, #0
   2328e:	f000 81f0 	beq.w	23672 <gnss_interface_read+0x3f6>
   23292:	2ad7      	cmp	r2, #215	; 0xd7
   23294:	f240 81ed 	bls.w	23672 <gnss_interface_read+0x3f6>
   23298:	4d50      	ldr	r5, [pc, #320]	; (233dc <gnss_interface_read+0x160>)
   2329a:	469a      	mov	sl, r3
   2329c:	682b      	ldr	r3, [r5, #0]
   2329e:	b29b      	uxth	r3, r3
   232a0:	2b04      	cmp	r3, #4
   232a2:	d004      	beq.n	232ae <gnss_interface_read+0x32>
   232a4:	682b      	ldr	r3, [r5, #0]
   232a6:	b29b      	uxth	r3, r3
   232a8:	2b02      	cmp	r3, #2
   232aa:	f040 81dc 	bne.w	23666 <gnss_interface_read+0x3ea>
   232ae:	f1ba 0f00 	cmp.w	sl, #0
   232b2:	d178      	bne.n	233a6 <gnss_interface_read+0x12a>
   232b4:	2102      	movs	r1, #2
   232b6:	20b6      	movs	r0, #182	; 0xb6
   232b8:	2400      	movs	r4, #0
   232ba:	682b      	ldr	r3, [r5, #0]
   232bc:	f10d 020e 	add.w	r2, sp, #14
   232c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   232c4:	602b      	str	r3, [r5, #0]
   232c6:	ab08      	add	r3, sp, #32
   232c8:	9304      	str	r3, [sp, #16]
   232ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 233e4 <gnss_interface_read+0x168>
   232ce:	ea0a 0301 	and.w	r3, sl, r1
   232d2:	4f43      	ldr	r7, [pc, #268]	; (233e0 <gnss_interface_read+0x164>)
   232d4:	f8df 9110 	ldr.w	r9, [pc, #272]	; 233e8 <gnss_interface_read+0x16c>
   232d8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 233d8 <gnss_interface_read+0x15c>
   232dc:	9005      	str	r0, [sp, #20]
   232de:	9107      	str	r1, [sp, #28]
   232e0:	9206      	str	r2, [sp, #24]
   232e2:	9301      	str	r3, [sp, #4]
   232e4:	f8db 0000 	ldr.w	r0, [fp]
   232e8:	4652      	mov	r2, sl
   232ea:	6803      	ldr	r3, [r0, #0]
   232ec:	a904      	add	r1, sp, #16
   232ee:	689b      	ldr	r3, [r3, #8]
   232f0:	4798      	blx	r3
   232f2:	2800      	cmp	r0, #0
   232f4:	da2a      	bge.n	2334c <gnss_interface_read+0xd0>
   232f6:	9b01      	ldr	r3, [sp, #4]
   232f8:	b15b      	cbz	r3, 23312 <gnss_interface_read+0x96>
   232fa:	1c42      	adds	r2, r0, #1
   232fc:	4603      	mov	r3, r0
   232fe:	d125      	bne.n	2334c <gnss_interface_read+0xd0>
   23300:	b9dc      	cbnz	r4, 2333a <gnss_interface_read+0xbe>
   23302:	2023      	movs	r0, #35	; 0x23
   23304:	461c      	mov	r4, r3
   23306:	f7fa f8b3 	bl	1d470 <bsd_os_errno_set>
   2330a:	4620      	mov	r0, r4
   2330c:	b037      	add	sp, #220	; 0xdc
   2330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23312:	682a      	ldr	r2, [r5, #0]
   23314:	783b      	ldrb	r3, [r7, #0]
   23316:	03d1      	lsls	r1, r2, #15
   23318:	d40c      	bmi.n	23334 <gnss_interface_read+0xb8>
   2331a:	b95c      	cbnz	r4, 23334 <gnss_interface_read+0xb8>
   2331c:	b163      	cbz	r3, 23338 <gnss_interface_read+0xbc>
   2331e:	4649      	mov	r1, r9
   23320:	4640      	mov	r0, r8
   23322:	f7f9 fffb 	bl	1d31c <bsd_os_timedwait>
   23326:	682b      	ldr	r3, [r5, #0]
   23328:	03db      	lsls	r3, r3, #15
   2332a:	d437      	bmi.n	2339c <gnss_interface_read+0x120>
   2332c:	783b      	ldrb	r3, [r7, #0]
   2332e:	2800      	cmp	r0, #0
   23330:	d0f4      	beq.n	2331c <gnss_interface_read+0xa0>
   23332:	4604      	mov	r4, r0
   23334:	2b00      	cmp	r3, #0
   23336:	d1d5      	bne.n	232e4 <gnss_interface_read+0x68>
   23338:	2470      	movs	r4, #112	; 0x70
   2333a:	4620      	mov	r0, r4
   2333c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23340:	f7fa f896 	bl	1d470 <bsd_os_errno_set>
   23344:	4620      	mov	r0, r4
   23346:	b037      	add	sp, #220	; 0xdc
   23348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2334c:	f244 0202 	movw	r2, #16386	; 0x4002
   23350:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23354:	4293      	cmp	r3, r2
   23356:	d02f      	beq.n	233b8 <gnss_interface_read+0x13c>
   23358:	f244 0201 	movw	r2, #16385	; 0x4001
   2335c:	4293      	cmp	r3, r2
   2335e:	d045      	beq.n	233ec <gnss_interface_read+0x170>
   23360:	f244 0203 	movw	r2, #16387	; 0x4003
   23364:	4293      	cmp	r3, r2
   23366:	f040 8184 	bne.w	23672 <gnss_interface_read+0x3f6>
   2336a:	2203      	movs	r2, #3
   2336c:	2414      	movs	r4, #20
   2336e:	9b08      	ldr	r3, [sp, #32]
   23370:	7032      	strb	r2, [r6, #0]
   23372:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23374:	60b3      	str	r3, [r6, #8]
   23376:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2337a:	e9c6 2303 	strd	r2, r3, [r6, #12]
   2337e:	f8db 0000 	ldr.w	r0, [fp]
   23382:	6803      	ldr	r3, [r0, #0]
   23384:	68db      	ldr	r3, [r3, #12]
   23386:	4798      	blx	r3
   23388:	2800      	cmp	r0, #0
   2338a:	ddbe      	ble.n	2330a <gnss_interface_read+0x8e>
   2338c:	4620      	mov	r0, r4
   2338e:	682b      	ldr	r3, [r5, #0]
   23390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23394:	602b      	str	r3, [r5, #0]
   23396:	b037      	add	sp, #220	; 0xdc
   23398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2339c:	783b      	ldrb	r3, [r7, #0]
   2339e:	4604      	mov	r4, r0
   233a0:	2b00      	cmp	r3, #0
   233a2:	d19f      	bne.n	232e4 <gnss_interface_read+0x68>
   233a4:	e7c8      	b.n	23338 <gnss_interface_read+0xbc>
   233a6:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   233aa:	d183      	bne.n	232b4 <gnss_interface_read+0x38>
   233ac:	202d      	movs	r0, #45	; 0x2d
   233ae:	f7fa f85f 	bl	1d470 <bsd_os_errno_set>
   233b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   233b6:	e7a8      	b.n	2330a <gnss_interface_read+0x8e>
   233b8:	a808      	add	r0, sp, #32
   233ba:	f7ee fe61 	bl	12080 <strlen>
   233be:	2302      	movs	r3, #2
   233c0:	1c44      	adds	r4, r0, #1
   233c2:	b2a4      	uxth	r4, r4
   233c4:	f806 3b08 	strb.w	r3, [r6], #8
   233c8:	4622      	mov	r2, r4
   233ca:	a908      	add	r1, sp, #32
   233cc:	4630      	mov	r0, r6
   233ce:	f011 fb27 	bl	34a20 <memcpy>
   233d2:	3408      	adds	r4, #8
   233d4:	e7d3      	b.n	2337e <gnss_interface_read+0x102>
   233d6:	bf00      	nop
   233d8:	49765443 	.word	0x49765443
   233dc:	200226e4 	.word	0x200226e4
   233e0:	20028f81 	.word	0x20028f81
   233e4:	200226ec 	.word	0x200226ec
   233e8:	200201d0 	.word	0x200201d0
   233ec:	2401      	movs	r4, #1
   233ee:	a809      	add	r0, sp, #36	; 0x24
   233f0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   233f2:	e9c6 0102 	strd	r0, r1, [r6, #8]
   233f6:	e9c6 2304 	strd	r2, r3, [r6, #16]
   233fa:	990d      	ldr	r1, [sp, #52]	; 0x34
   233fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   233fe:	7034      	strb	r4, [r6, #0]
   23400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23402:	61b1      	str	r1, [r6, #24]
   23404:	9910      	ldr	r1, [sp, #64]	; 0x40
   23406:	61f2      	str	r2, [r6, #28]
   23408:	6233      	str	r3, [r6, #32]
   2340a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2340e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   23412:	6271      	str	r1, [r6, #36]	; 0x24
   23414:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   23418:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   2341c:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   23420:	6373      	str	r3, [r6, #52]	; 0x34
   23422:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   23426:	63b1      	str	r1, [r6, #56]	; 0x38
   23428:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2342c:	63f2      	str	r2, [r6, #60]	; 0x3c
   2342e:	6433      	str	r3, [r6, #64]	; 0x40
   23430:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   23434:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   23438:	8531      	strh	r1, [r6, #40]	; 0x28
   2343a:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   2343e:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   23442:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   23446:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   2344a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2344c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   23450:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   23454:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   23458:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2345c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2345e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   23462:	8630      	strh	r0, [r6, #48]	; 0x30
   23464:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   23468:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   2346c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   23470:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   23474:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   23478:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   2347c:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   23480:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   23484:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   23488:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   2348c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23490:	64f3      	str	r3, [r6, #76]	; 0x4c
   23492:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   23496:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   2349a:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   2349e:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   234a2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   234a6:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   234aa:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   234ae:	65b1      	str	r1, [r6, #88]	; 0x58
   234b0:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   234b4:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   234b8:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   234bc:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   234c0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   234c4:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   234c8:	6672      	str	r2, [r6, #100]	; 0x64
   234ca:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   234ce:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   234d2:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   234d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   234d8:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   234dc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   234e0:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   234e4:	f3c2 220f 	ubfx	r2, r2, #8, #16
   234e8:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   234ec:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   234f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   234f4:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   234f8:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   234fc:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   23500:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   23504:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   23508:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   2350c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   23510:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   23514:	6733      	str	r3, [r6, #112]	; 0x70
   23516:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   2351a:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   2351e:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   23522:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   23526:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   2352a:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   2352e:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   23532:	67f1      	str	r1, [r6, #124]	; 0x7c
   23534:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   23538:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   2353c:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   23540:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   23544:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   23548:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   2354c:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   23550:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   23554:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   23558:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2355a:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   2355e:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   23562:	f3c3 210f 	ubfx	r1, r3, #8, #16
   23566:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   23568:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2356c:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   23570:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   23574:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   23578:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2357c:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   23580:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   23584:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   23588:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   2358c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   23590:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   23594:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   23598:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   2359c:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   235a0:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   235a4:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   235a8:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   235ac:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   235b0:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   235b4:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   235b8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   235bc:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   235c0:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   235c4:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   235c8:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   235cc:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   235d0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   235d4:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   235d8:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   235dc:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   235e0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   235e4:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   235e8:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   235ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   235ee:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   235f2:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   235f6:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   235fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   235fe:	f3c2 220f 	ubfx	r2, r2, #8, #16
   23602:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   23606:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   2360a:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   2360e:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   23612:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   23616:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   2361a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   2361e:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   23622:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   23626:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   2362a:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   2362e:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   23632:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   23636:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   2363a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   2363e:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   23642:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   23646:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   2364a:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   2364e:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   23652:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   23656:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   2365a:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   2365e:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   23662:	24d8      	movs	r4, #216	; 0xd8
   23664:	e68b      	b.n	2337e <gnss_interface_read+0x102>
   23666:	2039      	movs	r0, #57	; 0x39
   23668:	f7f9 ff02 	bl	1d470 <bsd_os_errno_set>
   2366c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23670:	e64b      	b.n	2330a <gnss_interface_read+0x8e>
   23672:	2016      	movs	r0, #22
   23674:	f7f9 fefc 	bl	1d470 <bsd_os_errno_set>
   23678:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2367c:	e645      	b.n	2330a <gnss_interface_read+0x8e>
   2367e:	2009      	movs	r0, #9
   23680:	f7f9 fef6 	bl	1d470 <bsd_os_errno_set>
   23684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23688:	e63f      	b.n	2330a <gnss_interface_read+0x8e>
   2368a:	bf00      	nop

0002368c <gnss_interface_setopt>:
   2368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23690:	4db3      	ldr	r5, [pc, #716]	; (23960 <gnss_interface_setopt+0x2d4>)
   23692:	b086      	sub	sp, #24
   23694:	682c      	ldr	r4, [r5, #0]
   23696:	b2a4      	uxth	r4, r4
   23698:	2c02      	cmp	r4, #2
   2369a:	d00d      	beq.n	236b8 <gnss_interface_setopt+0x2c>
   2369c:	2a08      	cmp	r2, #8
   2369e:	d00b      	beq.n	236b8 <gnss_interface_setopt+0x2c>
   236a0:	f1a2 040a 	sub.w	r4, r2, #10
   236a4:	2c01      	cmp	r4, #1
   236a6:	d907      	bls.n	236b8 <gnss_interface_setopt+0x2c>
   236a8:	200e      	movs	r0, #14
   236aa:	f7f9 fee1 	bl	1d470 <bsd_os_errno_set>
   236ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   236b2:	b006      	add	sp, #24
   236b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   236b8:	682c      	ldr	r4, [r5, #0]
   236ba:	0264      	lsls	r4, r4, #9
   236bc:	f100 8149 	bmi.w	23952 <gnss_interface_setopt+0x2c6>
   236c0:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   236c4:	f040 8139 	bne.w	2393a <gnss_interface_setopt+0x2ae>
   236c8:	49a6      	ldr	r1, [pc, #664]	; (23964 <gnss_interface_setopt+0x2d8>)
   236ca:	4288      	cmp	r0, r1
   236cc:	f040 813b 	bne.w	23946 <gnss_interface_setopt+0x2ba>
   236d0:	f1a2 010a 	sub.w	r1, r2, #10
   236d4:	2901      	cmp	r1, #1
   236d6:	d902      	bls.n	236de <gnss_interface_setopt+0x52>
   236d8:	2b00      	cmp	r3, #0
   236da:	f000 8112 	beq.w	23902 <gnss_interface_setopt+0x276>
   236de:	3a01      	subs	r2, #1
   236e0:	2a0a      	cmp	r2, #10
   236e2:	f200 810e 	bhi.w	23902 <gnss_interface_setopt+0x276>
   236e6:	e8df f012 	tbh	[pc, r2, lsl #1]
   236ea:	007f      	.short	0x007f
   236ec:	0098008c 	.word	0x0098008c
   236f0:	00ae00a2 	.word	0x00ae00a2
   236f4:	00c500b9 	.word	0x00c500b9
   236f8:	00f300dd 	.word	0x00f300dd
   236fc:	000b00ff 	.word	0x000b00ff
   23700:	682b      	ldr	r3, [r5, #0]
   23702:	b29b      	uxth	r3, r3
   23704:	2b04      	cmp	r3, #4
   23706:	d1cf      	bne.n	236a8 <gnss_interface_setopt+0x1c>
   23708:	2203      	movs	r2, #3
   2370a:	f241 0604 	movw	r6, #4100	; 0x1004
   2370e:	2300      	movs	r3, #0
   23710:	4637      	mov	r7, r6
   23712:	f88d 2008 	strb.w	r2, [sp, #8]
   23716:	f88d 3009 	strb.w	r3, [sp, #9]
   2371a:	f88d 300a 	strb.w	r3, [sp, #10]
   2371e:	f88d 300b 	strb.w	r3, [sp, #11]
   23722:	f88d 300c 	strb.w	r3, [sp, #12]
   23726:	682b      	ldr	r3, [r5, #0]
   23728:	2112      	movs	r1, #18
   2372a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2372e:	4668      	mov	r0, sp
   23730:	602b      	str	r3, [r5, #0]
   23732:	f002 faa1 	bl	25c78 <rpc_gnss_client_request_alloc>
   23736:	4604      	mov	r4, r0
   23738:	9800      	ldr	r0, [sp, #0]
   2373a:	2c00      	cmp	r4, #0
   2373c:	f040 80e7 	bne.w	2390e <gnss_interface_setopt+0x282>
   23740:	2800      	cmp	r0, #0
   23742:	f000 80eb 	beq.w	2391c <gnss_interface_setopt+0x290>
   23746:	2212      	movs	r2, #18
   23748:	f04f 0876 	mov.w	r8, #118	; 0x76
   2374c:	f04f 0e49 	mov.w	lr, #73	; 0x49
   23750:	f04f 0a43 	mov.w	sl, #67	; 0x43
   23754:	f04f 0954 	mov.w	r9, #84	; 0x54
   23758:	f8df c210 	ldr.w	ip, [pc, #528]	; 2396c <gnss_interface_setopt+0x2e0>
   2375c:	a906      	add	r1, sp, #24
   2375e:	f8bc 3000 	ldrh.w	r3, [ip]
   23762:	f880 800e 	strb.w	r8, [r0, #14]
   23766:	3301      	adds	r3, #1
   23768:	b29b      	uxth	r3, r3
   2376a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   2376e:	f841 6d14 	str.w	r6, [r1, #-20]!
   23772:	7144      	strb	r4, [r0, #5]
   23774:	7184      	strb	r4, [r0, #6]
   23776:	71c4      	strb	r4, [r0, #7]
   23778:	7204      	strb	r4, [r0, #8]
   2377a:	7244      	strb	r4, [r0, #9]
   2377c:	7284      	strb	r4, [r0, #10]
   2377e:	72c4      	strb	r4, [r0, #11]
   23780:	7102      	strb	r2, [r0, #4]
   23782:	f880 a00c 	strb.w	sl, [r0, #12]
   23786:	f880 900d 	strb.w	r9, [r0, #13]
   2378a:	f880 e00f 	strb.w	lr, [r0, #15]
   2378e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 23970 <gnss_interface_setopt+0x2e4>
   23792:	6800      	ldr	r0, [r0, #0]
   23794:	f8ac 3000 	strh.w	r3, [ip]
   23798:	f011 f942 	bl	34a20 <memcpy>
   2379c:	4639      	mov	r1, r7
   2379e:	9800      	ldr	r0, [sp, #0]
   237a0:	f8c8 4000 	str.w	r4, [r8]
   237a4:	f002 fa7c 	bl	25ca0 <rpc_gnss_client_request_send>
   237a8:	2800      	cmp	r0, #0
   237aa:	f040 80bc 	bne.w	23926 <gnss_interface_setopt+0x29a>
   237ae:	4f6e      	ldr	r7, [pc, #440]	; (23968 <gnss_interface_setopt+0x2dc>)
   237b0:	4e6c      	ldr	r6, [pc, #432]	; (23964 <gnss_interface_setopt+0x2d8>)
   237b2:	4639      	mov	r1, r7
   237b4:	4630      	mov	r0, r6
   237b6:	f7f9 fdb1 	bl	1d31c <bsd_os_timedwait>
   237ba:	682c      	ldr	r4, [r5, #0]
   237bc:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   237c0:	d1f7      	bne.n	237b2 <gnss_interface_setopt+0x126>
   237c2:	f8d8 0000 	ldr.w	r0, [r8]
   237c6:	b118      	cbz	r0, 237d0 <gnss_interface_setopt+0x144>
   237c8:	f002 fa88 	bl	25cdc <rpc_gnss_client_data_free>
   237cc:	f8c8 4000 	str.w	r4, [r8]
   237d0:	682b      	ldr	r3, [r5, #0]
   237d2:	021b      	lsls	r3, r3, #8
   237d4:	f140 808f 	bpl.w	238f6 <gnss_interface_setopt+0x26a>
   237d8:	2000      	movs	r0, #0
   237da:	682b      	ldr	r3, [r5, #0]
   237dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   237e0:	602b      	str	r3, [r5, #0]
   237e2:	b006      	add	sp, #24
   237e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   237ea:	2a02      	cmp	r2, #2
   237ec:	f040 8089 	bne.w	23902 <gnss_interface_setopt+0x276>
   237f0:	2208      	movs	r2, #8
   237f2:	f241 1603 	movw	r6, #4355	; 0x1103
   237f6:	881b      	ldrh	r3, [r3, #0]
   237f8:	9202      	str	r2, [sp, #8]
   237fa:	f8ad 300f 	strh.w	r3, [sp, #15]
   237fe:	4637      	mov	r7, r6
   23800:	e791      	b.n	23726 <gnss_interface_setopt+0x9a>
   23802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23804:	2a02      	cmp	r2, #2
   23806:	d17c      	bne.n	23902 <gnss_interface_setopt+0x276>
   23808:	2210      	movs	r2, #16
   2380a:	f241 1603 	movw	r6, #4355	; 0x1103
   2380e:	881b      	ldrh	r3, [r3, #0]
   23810:	9202      	str	r2, [sp, #8]
   23812:	f8ad 3011 	strh.w	r3, [sp, #17]
   23816:	4637      	mov	r7, r6
   23818:	e785      	b.n	23726 <gnss_interface_setopt+0x9a>
   2381a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2381c:	2a01      	cmp	r2, #1
   2381e:	d170      	bne.n	23902 <gnss_interface_setopt+0x276>
   23820:	781b      	ldrb	r3, [r3, #0]
   23822:	2b01      	cmp	r3, #1
   23824:	d16d      	bne.n	23902 <gnss_interface_setopt+0x276>
   23826:	f241 1603 	movw	r6, #4355	; 0x1103
   2382a:	4637      	mov	r7, r6
   2382c:	e77b      	b.n	23726 <gnss_interface_setopt+0x9a>
   2382e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23830:	2a02      	cmp	r2, #2
   23832:	d166      	bne.n	23902 <gnss_interface_setopt+0x276>
   23834:	2220      	movs	r2, #32
   23836:	f241 1603 	movw	r6, #4355	; 0x1103
   2383a:	881b      	ldrh	r3, [r3, #0]
   2383c:	9202      	str	r2, [sp, #8]
   2383e:	f8ad 3013 	strh.w	r3, [sp, #19]
   23842:	4637      	mov	r7, r6
   23844:	e76f      	b.n	23726 <gnss_interface_setopt+0x9a>
   23846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23848:	2a01      	cmp	r2, #1
   2384a:	d15a      	bne.n	23902 <gnss_interface_setopt+0x276>
   2384c:	f241 1603 	movw	r6, #4355	; 0x1103
   23850:	781b      	ldrb	r3, [r3, #0]
   23852:	9202      	str	r2, [sp, #8]
   23854:	f88d 300c 	strb.w	r3, [sp, #12]
   23858:	4637      	mov	r7, r6
   2385a:	e764      	b.n	23726 <gnss_interface_setopt+0x9a>
   2385c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2385e:	2a01      	cmp	r2, #1
   23860:	d14f      	bne.n	23902 <gnss_interface_setopt+0x276>
   23862:	2202      	movs	r2, #2
   23864:	f241 1603 	movw	r6, #4355	; 0x1103
   23868:	781b      	ldrb	r3, [r3, #0]
   2386a:	9202      	str	r2, [sp, #8]
   2386c:	f88d 300d 	strb.w	r3, [sp, #13]
   23870:	4637      	mov	r7, r6
   23872:	e758      	b.n	23726 <gnss_interface_setopt+0x9a>
   23874:	682a      	ldr	r2, [r5, #0]
   23876:	b292      	uxth	r2, r2
   23878:	2a02      	cmp	r2, #2
   2387a:	f47f af15 	bne.w	236a8 <gnss_interface_setopt+0x1c>
   2387e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23880:	2a04      	cmp	r2, #4
   23882:	d13e      	bne.n	23902 <gnss_interface_setopt+0x276>
   23884:	2101      	movs	r1, #1
   23886:	f241 0604 	movw	r6, #4100	; 0x1004
   2388a:	682a      	ldr	r2, [r5, #0]
   2388c:	6818      	ldr	r0, [r3, #0]
   2388e:	0c13      	lsrs	r3, r2, #16
   23890:	041b      	lsls	r3, r3, #16
   23892:	f043 0303 	orr.w	r3, r3, #3
   23896:	f8cd 0009 	str.w	r0, [sp, #9]
   2389a:	602b      	str	r3, [r5, #0]
   2389c:	f88d 1008 	strb.w	r1, [sp, #8]
   238a0:	4637      	mov	r7, r6
   238a2:	e740      	b.n	23726 <gnss_interface_setopt+0x9a>
   238a4:	682a      	ldr	r2, [r5, #0]
   238a6:	b292      	uxth	r2, r2
   238a8:	2a04      	cmp	r2, #4
   238aa:	d004      	beq.n	238b6 <gnss_interface_setopt+0x22a>
   238ac:	682a      	ldr	r2, [r5, #0]
   238ae:	b292      	uxth	r2, r2
   238b0:	2a02      	cmp	r2, #2
   238b2:	f47f aef9 	bne.w	236a8 <gnss_interface_setopt+0x1c>
   238b6:	2200      	movs	r2, #0
   238b8:	f88d 2008 	strb.w	r2, [sp, #8]
   238bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   238be:	2a04      	cmp	r2, #4
   238c0:	d11f      	bne.n	23902 <gnss_interface_setopt+0x276>
   238c2:	f241 0604 	movw	r6, #4100	; 0x1004
   238c6:	681b      	ldr	r3, [r3, #0]
   238c8:	4637      	mov	r7, r6
   238ca:	f8cd 3009 	str.w	r3, [sp, #9]
   238ce:	e72a      	b.n	23726 <gnss_interface_setopt+0x9a>
   238d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   238d2:	2a01      	cmp	r2, #1
   238d4:	d115      	bne.n	23902 <gnss_interface_setopt+0x276>
   238d6:	2240      	movs	r2, #64	; 0x40
   238d8:	f241 1603 	movw	r6, #4355	; 0x1103
   238dc:	781b      	ldrb	r3, [r3, #0]
   238de:	9202      	str	r2, [sp, #8]
   238e0:	f88d 3015 	strb.w	r3, [sp, #21]
   238e4:	4637      	mov	r7, r6
   238e6:	e71e      	b.n	23726 <gnss_interface_setopt+0x9a>
   238e8:	682b      	ldr	r3, [r5, #0]
   238ea:	b29b      	uxth	r3, r3
   238ec:	2b04      	cmp	r3, #4
   238ee:	f47f aedb 	bne.w	236a8 <gnss_interface_setopt+0x1c>
   238f2:	2202      	movs	r2, #2
   238f4:	e709      	b.n	2370a <gnss_interface_setopt+0x7e>
   238f6:	200e      	movs	r0, #14
   238f8:	f7f9 fdba 	bl	1d470 <bsd_os_errno_set>
   238fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23900:	e76b      	b.n	237da <gnss_interface_setopt+0x14e>
   23902:	2016      	movs	r0, #22
   23904:	f7f9 fdb4 	bl	1d470 <bsd_os_errno_set>
   23908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2390c:	e6d1      	b.n	236b2 <gnss_interface_setopt+0x26>
   2390e:	b128      	cbz	r0, 2391c <gnss_interface_setopt+0x290>
   23910:	6803      	ldr	r3, [r0, #0]
   23912:	b11b      	cbz	r3, 2391c <gnss_interface_setopt+0x290>
   23914:	4618      	mov	r0, r3
   23916:	f002 f9e1 	bl	25cdc <rpc_gnss_client_data_free>
   2391a:	9800      	ldr	r0, [sp, #0]
   2391c:	f002 f9d6 	bl	25ccc <rpc_gnss_client_message_free>
   23920:	2023      	movs	r0, #35	; 0x23
   23922:	f7f9 fda5 	bl	1d470 <bsd_os_errno_set>
   23926:	682b      	ldr	r3, [r5, #0]
   23928:	200e      	movs	r0, #14
   2392a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2392e:	602b      	str	r3, [r5, #0]
   23930:	f7f9 fd9e 	bl	1d470 <bsd_os_errno_set>
   23934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23938:	e6bb      	b.n	236b2 <gnss_interface_setopt+0x26>
   2393a:	202a      	movs	r0, #42	; 0x2a
   2393c:	f7f9 fd98 	bl	1d470 <bsd_os_errno_set>
   23940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23944:	e6b5      	b.n	236b2 <gnss_interface_setopt+0x26>
   23946:	2009      	movs	r0, #9
   23948:	f7f9 fd92 	bl	1d470 <bsd_os_errno_set>
   2394c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23950:	e6af      	b.n	236b2 <gnss_interface_setopt+0x26>
   23952:	2073      	movs	r0, #115	; 0x73
   23954:	f7f9 fd8c 	bl	1d470 <bsd_os_errno_set>
   23958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2395c:	e6a9      	b.n	236b2 <gnss_interface_setopt+0x26>
   2395e:	bf00      	nop
   23960:	200226e4 	.word	0x200226e4
   23964:	49765443 	.word	0x49765443
   23968:	200201d0 	.word	0x200201d0
   2396c:	2002755a 	.word	0x2002755a
   23970:	200226e8 	.word	0x200226e8

00023974 <gnss_interface_getopt>:
   23974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23978:	4c81      	ldr	r4, [pc, #516]	; (23b80 <gnss_interface_getopt+0x20c>)
   2397a:	b087      	sub	sp, #28
   2397c:	6825      	ldr	r5, [r4, #0]
   2397e:	4698      	mov	r8, r3
   23980:	b2ad      	uxth	r5, r5
   23982:	2d02      	cmp	r5, #2
   23984:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23986:	f040 80dd 	bne.w	23b44 <gnss_interface_getopt+0x1d0>
   2398a:	6825      	ldr	r5, [r4, #0]
   2398c:	03ee      	lsls	r6, r5, #15
   2398e:	f100 80eb 	bmi.w	23b68 <gnss_interface_getopt+0x1f4>
   23992:	6825      	ldr	r5, [r4, #0]
   23994:	01ed      	lsls	r5, r5, #7
   23996:	f100 80ed 	bmi.w	23b74 <gnss_interface_getopt+0x200>
   2399a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2399e:	f040 80d7 	bne.w	23b50 <gnss_interface_getopt+0x1dc>
   239a2:	4978      	ldr	r1, [pc, #480]	; (23b84 <gnss_interface_getopt+0x210>)
   239a4:	4288      	cmp	r0, r1
   239a6:	f040 80d9 	bne.w	23b5c <gnss_interface_getopt+0x1e8>
   239aa:	f1b8 0f00 	cmp.w	r8, #0
   239ae:	d00b      	beq.n	239c8 <gnss_interface_getopt+0x54>
   239b0:	b153      	cbz	r3, 239c8 <gnss_interface_getopt+0x54>
   239b2:	1e57      	subs	r7, r2, #1
   239b4:	2f05      	cmp	r7, #5
   239b6:	d807      	bhi.n	239c8 <gnss_interface_getopt+0x54>
   239b8:	e8df f007 	tbb	[pc, r7]
   239bc:	0f030f0f 	.word	0x0f030f0f
   239c0:	0303      	.short	0x0303
   239c2:	681b      	ldr	r3, [r3, #0]
   239c4:	2b01      	cmp	r3, #1
   239c6:	d00b      	beq.n	239e0 <gnss_interface_getopt+0x6c>
   239c8:	2016      	movs	r0, #22
   239ca:	f7f9 fd51 	bl	1d470 <bsd_os_errno_set>
   239ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   239d2:	4628      	mov	r0, r5
   239d4:	b007      	add	sp, #28
   239d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239da:	681b      	ldr	r3, [r3, #0]
   239dc:	2b02      	cmp	r3, #2
   239de:	d1f3      	bne.n	239c8 <gnss_interface_getopt+0x54>
   239e0:	6823      	ldr	r3, [r4, #0]
   239e2:	2212      	movs	r2, #18
   239e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   239e8:	2100      	movs	r1, #0
   239ea:	a801      	add	r0, sp, #4
   239ec:	6023      	str	r3, [r4, #0]
   239ee:	f011 f851 	bl	34a94 <memset>
   239f2:	2112      	movs	r1, #18
   239f4:	4668      	mov	r0, sp
   239f6:	f002 f93f 	bl	25c78 <rpc_gnss_client_request_alloc>
   239fa:	4605      	mov	r5, r0
   239fc:	9800      	ldr	r0, [sp, #0]
   239fe:	2d00      	cmp	r5, #0
   23a00:	f040 808a 	bne.w	23b18 <gnss_interface_getopt+0x1a4>
   23a04:	2800      	cmp	r0, #0
   23a06:	f000 808e 	beq.w	23b26 <gnss_interface_getopt+0x1b2>
   23a0a:	f241 1602 	movw	r6, #4354	; 0x1102
   23a0e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   23a12:	2212      	movs	r2, #18
   23a14:	f04f 0976 	mov.w	r9, #118	; 0x76
   23a18:	f04f 0b43 	mov.w	fp, #67	; 0x43
   23a1c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   23a20:	f8df c168 	ldr.w	ip, [pc, #360]	; 23b8c <gnss_interface_getopt+0x218>
   23a24:	f880 e00f 	strb.w	lr, [r0, #15]
   23a28:	f8bc 3000 	ldrh.w	r3, [ip]
   23a2c:	f880 900e 	strb.w	r9, [r0, #14]
   23a30:	3301      	adds	r3, #1
   23a32:	b29b      	uxth	r3, r3
   23a34:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   23a38:	f8cd e004 	str.w	lr, [sp, #4]
   23a3c:	7145      	strb	r5, [r0, #5]
   23a3e:	7185      	strb	r5, [r0, #6]
   23a40:	71c5      	strb	r5, [r0, #7]
   23a42:	7205      	strb	r5, [r0, #8]
   23a44:	7245      	strb	r5, [r0, #9]
   23a46:	7285      	strb	r5, [r0, #10]
   23a48:	72c5      	strb	r5, [r0, #11]
   23a4a:	a901      	add	r1, sp, #4
   23a4c:	7102      	strb	r2, [r0, #4]
   23a4e:	f880 b00c 	strb.w	fp, [r0, #12]
   23a52:	f880 a00d 	strb.w	sl, [r0, #13]
   23a56:	f8df 9138 	ldr.w	r9, [pc, #312]	; 23b90 <gnss_interface_getopt+0x21c>
   23a5a:	6800      	ldr	r0, [r0, #0]
   23a5c:	f8ac 3000 	strh.w	r3, [ip]
   23a60:	f010 ffde 	bl	34a20 <memcpy>
   23a64:	4631      	mov	r1, r6
   23a66:	9800      	ldr	r0, [sp, #0]
   23a68:	f8c9 5000 	str.w	r5, [r9]
   23a6c:	f002 f918 	bl	25ca0 <rpc_gnss_client_request_send>
   23a70:	2800      	cmp	r0, #0
   23a72:	d15d      	bne.n	23b30 <gnss_interface_getopt+0x1bc>
   23a74:	4e44      	ldr	r6, [pc, #272]	; (23b88 <gnss_interface_getopt+0x214>)
   23a76:	4d43      	ldr	r5, [pc, #268]	; (23b84 <gnss_interface_getopt+0x210>)
   23a78:	4631      	mov	r1, r6
   23a7a:	4628      	mov	r0, r5
   23a7c:	f7f9 fc4e 	bl	1d31c <bsd_os_timedwait>
   23a80:	6823      	ldr	r3, [r4, #0]
   23a82:	01db      	lsls	r3, r3, #7
   23a84:	d4f8      	bmi.n	23a78 <gnss_interface_getopt+0x104>
   23a86:	f8d9 0000 	ldr.w	r0, [r9]
   23a8a:	b1d8      	cbz	r0, 23ac4 <gnss_interface_getopt+0x150>
   23a8c:	6825      	ldr	r5, [r4, #0]
   23a8e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   23a92:	d00f      	beq.n	23ab4 <gnss_interface_getopt+0x140>
   23a94:	2f05      	cmp	r7, #5
   23a96:	d837      	bhi.n	23b08 <gnss_interface_getopt+0x194>
   23a98:	e8df f007 	tbb	[pc, r7]
   23a9c:	2b26201a 	.word	0x2b26201a
   23aa0:	0331      	.short	0x0331
   23aa2:	2500      	movs	r5, #0
   23aa4:	7b43      	ldrb	r3, [r0, #13]
   23aa6:	f888 3000 	strb.w	r3, [r8]
   23aaa:	f002 f917 	bl	25cdc <rpc_gnss_client_data_free>
   23aae:	2300      	movs	r3, #0
   23ab0:	f8c9 3000 	str.w	r3, [r9]
   23ab4:	6823      	ldr	r3, [r4, #0]
   23ab6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   23aba:	6023      	str	r3, [r4, #0]
   23abc:	4628      	mov	r0, r5
   23abe:	b007      	add	sp, #28
   23ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ac4:	6823      	ldr	r3, [r4, #0]
   23ac6:	4605      	mov	r5, r0
   23ac8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   23acc:	6023      	str	r3, [r4, #0]
   23ace:	e7f5      	b.n	23abc <gnss_interface_getopt+0x148>
   23ad0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   23ad4:	2500      	movs	r5, #0
   23ad6:	f8a8 3000 	strh.w	r3, [r8]
   23ada:	e7e6      	b.n	23aaa <gnss_interface_getopt+0x136>
   23adc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   23ae0:	2500      	movs	r5, #0
   23ae2:	f8a8 3000 	strh.w	r3, [r8]
   23ae6:	e7e0      	b.n	23aaa <gnss_interface_getopt+0x136>
   23ae8:	7b83      	ldrb	r3, [r0, #14]
   23aea:	2500      	movs	r5, #0
   23aec:	f888 3000 	strb.w	r3, [r8]
   23af0:	e7db      	b.n	23aaa <gnss_interface_getopt+0x136>
   23af2:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   23af6:	2500      	movs	r5, #0
   23af8:	f8a8 3000 	strh.w	r3, [r8]
   23afc:	e7d5      	b.n	23aaa <gnss_interface_getopt+0x136>
   23afe:	7b03      	ldrb	r3, [r0, #12]
   23b00:	2500      	movs	r5, #0
   23b02:	f888 3000 	strb.w	r3, [r8]
   23b06:	e7d0      	b.n	23aaa <gnss_interface_getopt+0x136>
   23b08:	2016      	movs	r0, #22
   23b0a:	f7f9 fcb1 	bl	1d470 <bsd_os_errno_set>
   23b0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b12:	f8d9 0000 	ldr.w	r0, [r9]
   23b16:	e7c8      	b.n	23aaa <gnss_interface_getopt+0x136>
   23b18:	b128      	cbz	r0, 23b26 <gnss_interface_getopt+0x1b2>
   23b1a:	6803      	ldr	r3, [r0, #0]
   23b1c:	b11b      	cbz	r3, 23b26 <gnss_interface_getopt+0x1b2>
   23b1e:	4618      	mov	r0, r3
   23b20:	f002 f8dc 	bl	25cdc <rpc_gnss_client_data_free>
   23b24:	9800      	ldr	r0, [sp, #0]
   23b26:	f002 f8d1 	bl	25ccc <rpc_gnss_client_message_free>
   23b2a:	2023      	movs	r0, #35	; 0x23
   23b2c:	f7f9 fca0 	bl	1d470 <bsd_os_errno_set>
   23b30:	6823      	ldr	r3, [r4, #0]
   23b32:	200e      	movs	r0, #14
   23b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   23b38:	6023      	str	r3, [r4, #0]
   23b3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b3e:	f7f9 fc97 	bl	1d470 <bsd_os_errno_set>
   23b42:	e746      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b44:	200e      	movs	r0, #14
   23b46:	f7f9 fc93 	bl	1d470 <bsd_os_errno_set>
   23b4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b4e:	e740      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b50:	202a      	movs	r0, #42	; 0x2a
   23b52:	f7f9 fc8d 	bl	1d470 <bsd_os_errno_set>
   23b56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b5a:	e73a      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b5c:	2009      	movs	r0, #9
   23b5e:	f7f9 fc87 	bl	1d470 <bsd_os_errno_set>
   23b62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b66:	e734      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b68:	2005      	movs	r0, #5
   23b6a:	f7f9 fc81 	bl	1d470 <bsd_os_errno_set>
   23b6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b72:	e72e      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b74:	2073      	movs	r0, #115	; 0x73
   23b76:	f7f9 fc7b 	bl	1d470 <bsd_os_errno_set>
   23b7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b7e:	e728      	b.n	239d2 <gnss_interface_getopt+0x5e>
   23b80:	200226e4 	.word	0x200226e4
   23b84:	49765443 	.word	0x49765443
   23b88:	200201d0 	.word	0x200201d0
   23b8c:	2002755a 	.word	0x2002755a
   23b90:	200226e8 	.word	0x200226e8

00023b94 <gnss_interface_init>:
   23b94:	2100      	movs	r1, #0
   23b96:	b538      	push	{r3, r4, r5, lr}
   23b98:	4c0a      	ldr	r4, [pc, #40]	; (23bc4 <gnss_interface_init+0x30>)
   23b9a:	4d0b      	ldr	r5, [pc, #44]	; (23bc8 <gnss_interface_init+0x34>)
   23b9c:	6822      	ldr	r2, [r4, #0]
   23b9e:	480b      	ldr	r0, [pc, #44]	; (23bcc <gnss_interface_init+0x38>)
   23ba0:	4b0b      	ldr	r3, [pc, #44]	; (23bd0 <gnss_interface_init+0x3c>)
   23ba2:	402a      	ands	r2, r5
   23ba4:	6022      	str	r2, [r4, #0]
   23ba6:	8001      	strh	r1, [r0, #0]
   23ba8:	6019      	str	r1, [r3, #0]
   23baa:	f002 f85f 	bl	25c6c <rpc_gnss_client_init>
   23bae:	b938      	cbnz	r0, 23bc0 <gnss_interface_init+0x2c>
   23bb0:	2101      	movs	r1, #1
   23bb2:	6823      	ldr	r3, [r4, #0]
   23bb4:	4a07      	ldr	r2, [pc, #28]	; (23bd4 <gnss_interface_init+0x40>)
   23bb6:	402b      	ands	r3, r5
   23bb8:	430b      	orrs	r3, r1
   23bba:	7011      	strb	r1, [r2, #0]
   23bbc:	6023      	str	r3, [r4, #0]
   23bbe:	bd38      	pop	{r3, r4, r5, pc}
   23bc0:	2003      	movs	r0, #3
   23bc2:	bd38      	pop	{r3, r4, r5, pc}
   23bc4:	200226e4 	.word	0x200226e4
   23bc8:	ffff0000 	.word	0xffff0000
   23bcc:	2002755a 	.word	0x2002755a
   23bd0:	200226e8 	.word	0x200226e8
   23bd4:	20028f81 	.word	0x20028f81

00023bd8 <gnss_interface_open>:
   23bd8:	b510      	push	{r4, lr}
   23bda:	4b1c      	ldr	r3, [pc, #112]	; (23c4c <gnss_interface_open+0x74>)
   23bdc:	781b      	ldrb	r3, [r3, #0]
   23bde:	b34b      	cbz	r3, 23c34 <gnss_interface_open+0x5c>
   23be0:	2902      	cmp	r1, #2
   23be2:	d121      	bne.n	23c28 <gnss_interface_open+0x50>
   23be4:	4c1a      	ldr	r4, [pc, #104]	; (23c50 <gnss_interface_open+0x78>)
   23be6:	6823      	ldr	r3, [r4, #0]
   23be8:	b29b      	uxth	r3, r3
   23bea:	2b01      	cmp	r3, #1
   23bec:	d116      	bne.n	23c1c <gnss_interface_open+0x44>
   23bee:	6823      	ldr	r3, [r4, #0]
   23bf0:	4608      	mov	r0, r1
   23bf2:	0c1b      	lsrs	r3, r3, #16
   23bf4:	041b      	lsls	r3, r3, #16
   23bf6:	f043 0302 	orr.w	r3, r3, #2
   23bfa:	2200      	movs	r2, #0
   23bfc:	4915      	ldr	r1, [pc, #84]	; (23c54 <gnss_interface_open+0x7c>)
   23bfe:	6023      	str	r3, [r4, #0]
   23c00:	f002 f956 	bl	25eb0 <packet_handler_create>
   23c04:	4a14      	ldr	r2, [pc, #80]	; (23c58 <gnss_interface_open+0x80>)
   23c06:	6010      	str	r0, [r2, #0]
   23c08:	b1d0      	cbz	r0, 23c40 <gnss_interface_open+0x68>
   23c0a:	6823      	ldr	r3, [r4, #0]
   23c0c:	6802      	ldr	r2, [r0, #0]
   23c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23c12:	6812      	ldr	r2, [r2, #0]
   23c14:	6023      	str	r3, [r4, #0]
   23c16:	4790      	blx	r2
   23c18:	4810      	ldr	r0, [pc, #64]	; (23c5c <gnss_interface_open+0x84>)
   23c1a:	bd10      	pop	{r4, pc}
   23c1c:	2005      	movs	r0, #5
   23c1e:	f7f9 fc27 	bl	1d470 <bsd_os_errno_set>
   23c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c26:	bd10      	pop	{r4, pc}
   23c28:	2029      	movs	r0, #41	; 0x29
   23c2a:	f7f9 fc21 	bl	1d470 <bsd_os_errno_set>
   23c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c32:	bd10      	pop	{r4, pc}
   23c34:	2070      	movs	r0, #112	; 0x70
   23c36:	f7f9 fc1b 	bl	1d470 <bsd_os_errno_set>
   23c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c3e:	bd10      	pop	{r4, pc}
   23c40:	200e      	movs	r0, #14
   23c42:	f7f9 fc15 	bl	1d470 <bsd_os_errno_set>
   23c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c4a:	bd10      	pop	{r4, pc}
   23c4c:	20028f81 	.word	0x20028f81
   23c50:	200226e4 	.word	0x200226e4
   23c54:	00022ed1 	.word	0x00022ed1
   23c58:	200226ec 	.word	0x200226ec
   23c5c:	49765443 	.word	0x49765443

00023c60 <gnss_interface_close>:
   23c60:	b530      	push	{r4, r5, lr}
   23c62:	4b15      	ldr	r3, [pc, #84]	; (23cb8 <gnss_interface_close+0x58>)
   23c64:	b085      	sub	sp, #20
   23c66:	4298      	cmp	r0, r3
   23c68:	d11f      	bne.n	23caa <gnss_interface_close+0x4a>
   23c6a:	4c14      	ldr	r4, [pc, #80]	; (23cbc <gnss_interface_close+0x5c>)
   23c6c:	6822      	ldr	r2, [r4, #0]
   23c6e:	b292      	uxth	r2, r2
   23c70:	2a04      	cmp	r2, #4
   23c72:	d00f      	beq.n	23c94 <gnss_interface_close+0x34>
   23c74:	4d12      	ldr	r5, [pc, #72]	; (23cc0 <gnss_interface_close+0x60>)
   23c76:	6828      	ldr	r0, [r5, #0]
   23c78:	b118      	cbz	r0, 23c82 <gnss_interface_close+0x22>
   23c7a:	f002 f939 	bl	25ef0 <packet_handler_delete>
   23c7e:	2300      	movs	r3, #0
   23c80:	602b      	str	r3, [r5, #0]
   23c82:	2000      	movs	r0, #0
   23c84:	6823      	ldr	r3, [r4, #0]
   23c86:	0c1b      	lsrs	r3, r3, #16
   23c88:	041b      	lsls	r3, r3, #16
   23c8a:	f043 0301 	orr.w	r3, r3, #1
   23c8e:	6023      	str	r3, [r4, #0]
   23c90:	b005      	add	sp, #20
   23c92:	bd30      	pop	{r4, r5, pc}
   23c94:	2100      	movs	r1, #0
   23c96:	ab04      	add	r3, sp, #16
   23c98:	f843 1d04 	str.w	r1, [r3, #-4]!
   23c9c:	9200      	str	r2, [sp, #0]
   23c9e:	f44f 7101 	mov.w	r1, #516	; 0x204
   23ca2:	2208      	movs	r2, #8
   23ca4:	f001 fe62 	bl	2596c <nrf_setsockopt>
   23ca8:	e7e4      	b.n	23c74 <gnss_interface_close+0x14>
   23caa:	2009      	movs	r0, #9
   23cac:	f7f9 fbe0 	bl	1d470 <bsd_os_errno_set>
   23cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23cb4:	e7ec      	b.n	23c90 <gnss_interface_close+0x30>
   23cb6:	bf00      	nop
   23cb8:	49765443 	.word	0x49765443
   23cbc:	200226e4 	.word	0x200226e4
   23cc0:	200226ec 	.word	0x200226ec

00023cc4 <rpc_logobj_client_evt_handler>:
   23cc4:	b120      	cbz	r0, 23cd0 <rpc_logobj_client_evt_handler+0xc>
   23cc6:	f850 1b08 	ldr.w	r1, [r0], #8
   23cca:	0c09      	lsrs	r1, r1, #16
   23ccc:	f7fb b8c8 	b.w	1ee60 <logobj_event_handler>
   23cd0:	4770      	bx	lr
   23cd2:	bf00      	nop

00023cd4 <rpc_logobj_client_init>:
   23cd4:	4801      	ldr	r0, [pc, #4]	; (23cdc <rpc_logobj_client_init+0x8>)
   23cd6:	f7ff b83d 	b.w	22d54 <rpc_client_register>
   23cda:	bf00      	nop
   23cdc:	00036070 	.word	0x00036070

00023ce0 <rpc_logobj_client_request_alloc>:
   23ce0:	2300      	movs	r3, #0
   23ce2:	b510      	push	{r4, lr}
   23ce4:	b082      	sub	sp, #8
   23ce6:	9301      	str	r3, [sp, #4]
   23ce8:	b961      	cbnz	r1, 23d04 <rpc_logobj_client_request_alloc+0x24>
   23cea:	b170      	cbz	r0, 23d0a <rpc_logobj_client_request_alloc+0x2a>
   23cec:	4604      	mov	r4, r0
   23cee:	aa01      	add	r2, sp, #4
   23cf0:	2009      	movs	r0, #9
   23cf2:	f7ff f8a9 	bl	22e48 <rpc_message_alloc>
   23cf6:	b918      	cbnz	r0, 23d00 <rpc_logobj_client_request_alloc+0x20>
   23cf8:	9b01      	ldr	r3, [sp, #4]
   23cfa:	b10b      	cbz	r3, 23d00 <rpc_logobj_client_request_alloc+0x20>
   23cfc:	3308      	adds	r3, #8
   23cfe:	6023      	str	r3, [r4, #0]
   23d00:	b002      	add	sp, #8
   23d02:	bd10      	pop	{r4, pc}
   23d04:	200f      	movs	r0, #15
   23d06:	b002      	add	sp, #8
   23d08:	bd10      	pop	{r4, pc}
   23d0a:	200e      	movs	r0, #14
   23d0c:	b002      	add	sp, #8
   23d0e:	bd10      	pop	{r4, pc}

00023d10 <rpc_logobj_client_request_send>:
   23d10:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   23d14:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   23d18:	d10b      	bne.n	23d32 <rpc_logobj_client_request_send+0x22>
   23d1a:	b160      	cbz	r0, 23d36 <rpc_logobj_client_request_send+0x26>
   23d1c:	4603      	mov	r3, r0
   23d1e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   23d22:	2009      	movs	r0, #9
   23d24:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   23d28:	f843 1d08 	str.w	r1, [r3, #-8]!
   23d2c:	4619      	mov	r1, r3
   23d2e:	f7ff b87b 	b.w	22e28 <rpc_message_send>
   23d32:	200f      	movs	r0, #15
   23d34:	4770      	bx	lr
   23d36:	200e      	movs	r0, #14
   23d38:	4770      	bx	lr
   23d3a:	bf00      	nop

00023d3c <rpc_logobj_client_message_free>:
   23d3c:	b120      	cbz	r0, 23d48 <rpc_logobj_client_message_free+0xc>
   23d3e:	f1a0 0108 	sub.w	r1, r0, #8
   23d42:	2009      	movs	r0, #9
   23d44:	f7ff b8ac 	b.w	22ea0 <rpc_message_free>
   23d48:	200e      	movs	r0, #14
   23d4a:	4770      	bx	lr

00023d4c <rpc_logobj_client_data_free>:
   23d4c:	b118      	cbz	r0, 23d56 <rpc_logobj_client_data_free+0xa>
   23d4e:	4601      	mov	r1, r0
   23d50:	2009      	movs	r0, #9
   23d52:	f7ff b8b1 	b.w	22eb8 <rpc_message_data_free>
   23d56:	200e      	movs	r0, #14
   23d58:	4770      	bx	lr
   23d5a:	bf00      	nop

00023d5c <dfu_client_event_handler>:
   23d5c:	f850 1b08 	ldr.w	r1, [r0], #8
   23d60:	0c09      	lsrs	r1, r1, #16
   23d62:	f002 bdcb 	b.w	268fc <rpc_dfu_event_handler>
   23d66:	bf00      	nop

00023d68 <rpc_dfu_client_init>:
   23d68:	4801      	ldr	r0, [pc, #4]	; (23d70 <rpc_dfu_client_init+0x8>)
   23d6a:	f7fe bff3 	b.w	22d54 <rpc_client_register>
   23d6e:	bf00      	nop
   23d70:	00036080 	.word	0x00036080

00023d74 <rpc_dfu_client_request_alloc>:
   23d74:	2300      	movs	r3, #0
   23d76:	b510      	push	{r4, lr}
   23d78:	b082      	sub	sp, #8
   23d7a:	9301      	str	r3, [sp, #4]
   23d7c:	b158      	cbz	r0, 23d96 <rpc_dfu_client_request_alloc+0x22>
   23d7e:	4604      	mov	r4, r0
   23d80:	aa01      	add	r2, sp, #4
   23d82:	2006      	movs	r0, #6
   23d84:	f7ff f860 	bl	22e48 <rpc_message_alloc>
   23d88:	b918      	cbnz	r0, 23d92 <rpc_dfu_client_request_alloc+0x1e>
   23d8a:	9b01      	ldr	r3, [sp, #4]
   23d8c:	b10b      	cbz	r3, 23d92 <rpc_dfu_client_request_alloc+0x1e>
   23d8e:	3308      	adds	r3, #8
   23d90:	6023      	str	r3, [r4, #0]
   23d92:	b002      	add	sp, #8
   23d94:	bd10      	pop	{r4, pc}
   23d96:	2007      	movs	r0, #7
   23d98:	b002      	add	sp, #8
   23d9a:	bd10      	pop	{r4, pc}

00023d9c <rpc_dfu_client_request_send>:
   23d9c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   23da0:	d10b      	bne.n	23dba <rpc_dfu_client_request_send+0x1e>
   23da2:	b160      	cbz	r0, 23dbe <rpc_dfu_client_request_send+0x22>
   23da4:	4603      	mov	r3, r0
   23da6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   23daa:	2006      	movs	r0, #6
   23dac:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   23db0:	f843 1d08 	str.w	r1, [r3, #-8]!
   23db4:	4619      	mov	r1, r3
   23db6:	f7ff b837 	b.w	22e28 <rpc_message_send>
   23dba:	200f      	movs	r0, #15
   23dbc:	4770      	bx	lr
   23dbe:	2007      	movs	r0, #7
   23dc0:	4770      	bx	lr
   23dc2:	bf00      	nop

00023dc4 <rpc_dfu_client_message_free>:
   23dc4:	b120      	cbz	r0, 23dd0 <rpc_dfu_client_message_free+0xc>
   23dc6:	f1a0 0108 	sub.w	r1, r0, #8
   23dca:	2006      	movs	r0, #6
   23dcc:	f7ff b868 	b.w	22ea0 <rpc_message_free>
   23dd0:	2007      	movs	r0, #7
   23dd2:	4770      	bx	lr

00023dd4 <rpc_dfu_client_data_free>:
   23dd4:	b118      	cbz	r0, 23dde <rpc_dfu_client_data_free+0xa>
   23dd6:	4601      	mov	r1, r0
   23dd8:	2006      	movs	r0, #6
   23dda:	f7ff b86d 	b.w	22eb8 <rpc_message_data_free>
   23dde:	2007      	movs	r0, #7
   23de0:	4770      	bx	lr
   23de2:	bf00      	nop

00023de4 <packet_free_cb>:
   23de4:	6800      	ldr	r0, [r0, #0]
   23de6:	f003 bae3 	b.w	273b0 <rpc_at_client_data_free>
   23dea:	bf00      	nop

00023dec <at_interface_write>:
   23dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23df0:	b083      	sub	sp, #12
   23df2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   23df4:	2c00      	cmp	r4, #0
   23df6:	d16c      	bne.n	23ed2 <at_interface_write+0xe6>
   23df8:	4688      	mov	r8, r1
   23dfa:	4615      	mov	r5, r2
   23dfc:	461e      	mov	r6, r3
   23dfe:	4607      	mov	r7, r0
   23e00:	f003 f9a8 	bl	27154 <interface_socket_from_handle_get>
   23e04:	4604      	mov	r4, r0
   23e06:	2e00      	cmp	r6, #0
   23e08:	d137      	bne.n	23e7a <at_interface_write+0x8e>
   23e0a:	2800      	cmp	r0, #0
   23e0c:	d067      	beq.n	23ede <at_interface_write+0xf2>
   23e0e:	6803      	ldr	r3, [r0, #0]
   23e10:	039b      	lsls	r3, r3, #14
   23e12:	d564      	bpl.n	23ede <at_interface_write+0xf2>
   23e14:	6803      	ldr	r3, [r0, #0]
   23e16:	4629      	mov	r1, r5
   23e18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23e1c:	6003      	str	r3, [r0, #0]
   23e1e:	6803      	ldr	r3, [r0, #0]
   23e20:	4668      	mov	r0, sp
   23e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   23e26:	6023      	str	r3, [r4, #0]
   23e28:	f003 fa98 	bl	2735c <rpc_at_client_request_alloc>
   23e2c:	4606      	mov	r6, r0
   23e2e:	4638      	mov	r0, r7
   23e30:	f003 f990 	bl	27154 <interface_socket_from_handle_get>
   23e34:	4681      	mov	r9, r0
   23e36:	bb56      	cbnz	r6, 23e8e <at_interface_write+0xa2>
   23e38:	2304      	movs	r3, #4
   23e3a:	9800      	ldr	r0, [sp, #0]
   23e3c:	7203      	strb	r3, [r0, #8]
   23e3e:	7246      	strb	r6, [r0, #9]
   23e40:	7286      	strb	r6, [r0, #10]
   23e42:	72c6      	strb	r6, [r0, #11]
   23e44:	60c7      	str	r7, [r0, #12]
   23e46:	bb25      	cbnz	r5, 23e92 <at_interface_write+0xa6>
   23e48:	2101      	movs	r1, #1
   23e4a:	f003 fa9b 	bl	27384 <rpc_at_client_request_send>
   23e4e:	bb78      	cbnz	r0, 23eb0 <at_interface_write+0xc4>
   23e50:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   23e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   23e58:	2900      	cmp	r1, #0
   23e5a:	bf08      	it	eq
   23e5c:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   23e60:	ab02      	add	r3, sp, #8
   23e62:	f843 1d04 	str.w	r1, [r3, #-4]!
   23e66:	4638      	mov	r0, r7
   23e68:	4611      	mov	r1, r2
   23e6a:	f003 f8ff 	bl	2706c <interface_socket_wait>
   23e6e:	b320      	cbz	r0, 23eba <at_interface_write+0xce>
   23e70:	6823      	ldr	r3, [r4, #0]
   23e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23e76:	6023      	str	r3, [r4, #0]
   23e78:	e002      	b.n	23e80 <at_interface_write+0x94>
   23e7a:	b390      	cbz	r0, 23ee2 <at_interface_write+0xf6>
   23e7c:	6803      	ldr	r3, [r0, #0]
   23e7e:	202d      	movs	r0, #45	; 0x2d
   23e80:	f7f9 faf6 	bl	1d470 <bsd_os_errno_set>
   23e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e88:	b003      	add	sp, #12
   23e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e8e:	200c      	movs	r0, #12
   23e90:	e7ee      	b.n	23e70 <at_interface_write+0x84>
   23e92:	4641      	mov	r1, r8
   23e94:	6800      	ldr	r0, [r0, #0]
   23e96:	462a      	mov	r2, r5
   23e98:	f010 fdc2 	bl	34a20 <memcpy>
   23e9c:	2101      	movs	r1, #1
   23e9e:	9800      	ldr	r0, [sp, #0]
   23ea0:	f003 fa70 	bl	27384 <rpc_at_client_request_send>
   23ea4:	2800      	cmp	r0, #0
   23ea6:	d0d3      	beq.n	23e50 <at_interface_write+0x64>
   23ea8:	9b00      	ldr	r3, [sp, #0]
   23eaa:	6818      	ldr	r0, [r3, #0]
   23eac:	f003 fa80 	bl	273b0 <rpc_at_client_data_free>
   23eb0:	9800      	ldr	r0, [sp, #0]
   23eb2:	f003 fa75 	bl	273a0 <rpc_at_client_message_free>
   23eb6:	2023      	movs	r0, #35	; 0x23
   23eb8:	e7da      	b.n	23e70 <at_interface_write+0x84>
   23eba:	4638      	mov	r0, r7
   23ebc:	f003 f94a 	bl	27154 <interface_socket_from_handle_get>
   23ec0:	4603      	mov	r3, r0
   23ec2:	b120      	cbz	r0, 23ece <at_interface_write+0xe2>
   23ec4:	6840      	ldr	r0, [r0, #4]
   23ec6:	b110      	cbz	r0, 23ece <at_interface_write+0xe2>
   23ec8:	2200      	movs	r2, #0
   23eca:	605a      	str	r2, [r3, #4]
   23ecc:	e7d0      	b.n	23e70 <at_interface_write+0x84>
   23ece:	4628      	mov	r0, r5
   23ed0:	e7da      	b.n	23e88 <at_interface_write+0x9c>
   23ed2:	2038      	movs	r0, #56	; 0x38
   23ed4:	f7f9 facc 	bl	1d470 <bsd_os_errno_set>
   23ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23edc:	e7d4      	b.n	23e88 <at_interface_write+0x9c>
   23ede:	2016      	movs	r0, #22
   23ee0:	e7ce      	b.n	23e80 <at_interface_write+0x94>
   23ee2:	202d      	movs	r0, #45	; 0x2d
   23ee4:	e7cc      	b.n	23e80 <at_interface_write+0x94>
   23ee6:	bf00      	nop

00023ee8 <at_interface_init>:
   23ee8:	b508      	push	{r3, lr}
   23eea:	f003 fa31 	bl	27350 <rpc_at_client_init>
   23eee:	b910      	cbnz	r0, 23ef6 <at_interface_init+0xe>
   23ef0:	2201      	movs	r2, #1
   23ef2:	4b01      	ldr	r3, [pc, #4]	; (23ef8 <at_interface_init+0x10>)
   23ef4:	701a      	strb	r2, [r3, #0]
   23ef6:	bd08      	pop	{r3, pc}
   23ef8:	20028f82 	.word	0x20028f82

00023efc <at_interface_open>:
   23efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f00:	2600      	movs	r6, #0
   23f02:	4b34      	ldr	r3, [pc, #208]	; (23fd4 <at_interface_open+0xd8>)
   23f04:	b084      	sub	sp, #16
   23f06:	781b      	ldrb	r3, [r3, #0]
   23f08:	9601      	str	r6, [sp, #4]
   23f0a:	2b00      	cmp	r3, #0
   23f0c:	d05c      	beq.n	23fc8 <at_interface_open+0xcc>
   23f0e:	2902      	cmp	r1, #2
   23f10:	460d      	mov	r5, r1
   23f12:	d153      	bne.n	23fbc <at_interface_open+0xc0>
   23f14:	4680      	mov	r8, r0
   23f16:	4617      	mov	r7, r2
   23f18:	a801      	add	r0, sp, #4
   23f1a:	4a2f      	ldr	r2, [pc, #188]	; (23fd8 <at_interface_open+0xdc>)
   23f1c:	f002 fff4 	bl	26f08 <interface_socket_allocate>
   23f20:	9b01      	ldr	r3, [sp, #4]
   23f22:	4604      	mov	r4, r0
   23f24:	b3c3      	cbz	r3, 23f98 <at_interface_open+0x9c>
   23f26:	615f      	str	r7, [r3, #20]
   23f28:	4631      	mov	r1, r6
   23f2a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   23f2e:	a802      	add	r0, sp, #8
   23f30:	f003 fa14 	bl	2735c <rpc_at_client_request_alloc>
   23f34:	4606      	mov	r6, r0
   23f36:	4620      	mov	r0, r4
   23f38:	f003 f90c 	bl	27154 <interface_socket_from_handle_get>
   23f3c:	4607      	mov	r7, r0
   23f3e:	bb16      	cbnz	r6, 23f86 <at_interface_open+0x8a>
   23f40:	2304      	movs	r3, #4
   23f42:	9802      	ldr	r0, [sp, #8]
   23f44:	2105      	movs	r1, #5
   23f46:	7246      	strb	r6, [r0, #9]
   23f48:	7286      	strb	r6, [r0, #10]
   23f4a:	72c6      	strb	r6, [r0, #11]
   23f4c:	7203      	strb	r3, [r0, #8]
   23f4e:	60c4      	str	r4, [r0, #12]
   23f50:	f003 fa18 	bl	27384 <rpc_at_client_request_send>
   23f54:	4606      	mov	r6, r0
   23f56:	bb60      	cbnz	r0, 23fb2 <at_interface_open+0xb6>
   23f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23f5a:	ab04      	add	r3, sp, #16
   23f5c:	2a00      	cmp	r2, #0
   23f5e:	bf08      	it	eq
   23f60:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   23f64:	4629      	mov	r1, r5
   23f66:	f843 2d04 	str.w	r2, [r3, #-4]!
   23f6a:	4620      	mov	r0, r4
   23f6c:	462a      	mov	r2, r5
   23f6e:	f003 f87d 	bl	2706c <interface_socket_wait>
   23f72:	4605      	mov	r5, r0
   23f74:	b940      	cbnz	r0, 23f88 <at_interface_open+0x8c>
   23f76:	4620      	mov	r0, r4
   23f78:	f003 f8ec 	bl	27154 <interface_socket_from_handle_get>
   23f7c:	b180      	cbz	r0, 23fa0 <at_interface_open+0xa4>
   23f7e:	6845      	ldr	r5, [r0, #4]
   23f80:	b175      	cbz	r5, 23fa0 <at_interface_open+0xa4>
   23f82:	6046      	str	r6, [r0, #4]
   23f84:	e000      	b.n	23f88 <at_interface_open+0x8c>
   23f86:	250c      	movs	r5, #12
   23f88:	4620      	mov	r0, r4
   23f8a:	f003 f821 	bl	26fd0 <interface_socket_free>
   23f8e:	4628      	mov	r0, r5
   23f90:	f7f9 fa6e 	bl	1d470 <bsd_os_errno_set>
   23f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23f98:	4620      	mov	r0, r4
   23f9a:	b004      	add	sp, #16
   23f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23fa0:	4620      	mov	r0, r4
   23fa2:	9a01      	ldr	r2, [sp, #4]
   23fa4:	6813      	ldr	r3, [r2, #0]
   23fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23faa:	6013      	str	r3, [r2, #0]
   23fac:	b004      	add	sp, #16
   23fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23fb2:	9802      	ldr	r0, [sp, #8]
   23fb4:	f003 f9f4 	bl	273a0 <rpc_at_client_message_free>
   23fb8:	2523      	movs	r5, #35	; 0x23
   23fba:	e7e5      	b.n	23f88 <at_interface_open+0x8c>
   23fbc:	2029      	movs	r0, #41	; 0x29
   23fbe:	f7f9 fa57 	bl	1d470 <bsd_os_errno_set>
   23fc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23fc6:	e7e7      	b.n	23f98 <at_interface_open+0x9c>
   23fc8:	2070      	movs	r0, #112	; 0x70
   23fca:	f7f9 fa51 	bl	1d470 <bsd_os_errno_set>
   23fce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23fd2:	e7e1      	b.n	23f98 <at_interface_open+0x9c>
   23fd4:	20028f82 	.word	0x20028f82
   23fd8:	00023de5 	.word	0x00023de5

00023fdc <at_interface_close>:
   23fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23fe0:	b082      	sub	sp, #8
   23fe2:	4606      	mov	r6, r0
   23fe4:	f003 f8b6 	bl	27154 <interface_socket_from_handle_get>
   23fe8:	2800      	cmp	r0, #0
   23fea:	d051      	beq.n	24090 <at_interface_close+0xb4>
   23fec:	230d      	movs	r3, #13
   23fee:	6807      	ldr	r7, [r0, #0]
   23ff0:	6003      	str	r3, [r0, #0]
   23ff2:	6803      	ldr	r3, [r0, #0]
   23ff4:	4604      	mov	r4, r0
   23ff6:	039b      	lsls	r3, r3, #14
   23ff8:	d42e      	bmi.n	24058 <at_interface_close+0x7c>
   23ffa:	2100      	movs	r1, #0
   23ffc:	4668      	mov	r0, sp
   23ffe:	f003 f9ad 	bl	2735c <rpc_at_client_request_alloc>
   24002:	4605      	mov	r5, r0
   24004:	4630      	mov	r0, r6
   24006:	f003 f8a5 	bl	27154 <interface_socket_from_handle_get>
   2400a:	4680      	mov	r8, r0
   2400c:	bb75      	cbnz	r5, 2406c <at_interface_close+0x90>
   2400e:	2304      	movs	r3, #4
   24010:	9800      	ldr	r0, [sp, #0]
   24012:	2106      	movs	r1, #6
   24014:	7203      	strb	r3, [r0, #8]
   24016:	7245      	strb	r5, [r0, #9]
   24018:	7285      	strb	r5, [r0, #10]
   2401a:	72c5      	strb	r5, [r0, #11]
   2401c:	60c6      	str	r6, [r0, #12]
   2401e:	f003 f9b1 	bl	27384 <rpc_at_client_request_send>
   24022:	b9f0      	cbnz	r0, 24062 <at_interface_close+0x86>
   24024:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   24028:	220e      	movs	r2, #14
   2402a:	2900      	cmp	r1, #0
   2402c:	bf08      	it	eq
   2402e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   24032:	ab02      	add	r3, sp, #8
   24034:	f843 1d04 	str.w	r1, [r3, #-4]!
   24038:	4630      	mov	r0, r6
   2403a:	4611      	mov	r1, r2
   2403c:	f003 f816 	bl	2706c <interface_socket_wait>
   24040:	4605      	mov	r5, r0
   24042:	b1a8      	cbz	r0, 24070 <at_interface_close+0x94>
   24044:	6027      	str	r7, [r4, #0]
   24046:	4628      	mov	r0, r5
   24048:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2404c:	f7f9 fa10 	bl	1d470 <bsd_os_errno_set>
   24050:	4628      	mov	r0, r5
   24052:	b002      	add	sp, #8
   24054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24058:	6803      	ldr	r3, [r0, #0]
   2405a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2405e:	6003      	str	r3, [r0, #0]
   24060:	e7cb      	b.n	23ffa <at_interface_close+0x1e>
   24062:	9800      	ldr	r0, [sp, #0]
   24064:	f003 f99c 	bl	273a0 <rpc_at_client_message_free>
   24068:	2523      	movs	r5, #35	; 0x23
   2406a:	e7eb      	b.n	24044 <at_interface_close+0x68>
   2406c:	250c      	movs	r5, #12
   2406e:	e7e9      	b.n	24044 <at_interface_close+0x68>
   24070:	4630      	mov	r0, r6
   24072:	f003 f86f 	bl	27154 <interface_socket_from_handle_get>
   24076:	b120      	cbz	r0, 24082 <at_interface_close+0xa6>
   24078:	6843      	ldr	r3, [r0, #4]
   2407a:	b113      	cbz	r3, 24082 <at_interface_close+0xa6>
   2407c:	6045      	str	r5, [r0, #4]
   2407e:	461d      	mov	r5, r3
   24080:	e7e0      	b.n	24044 <at_interface_close+0x68>
   24082:	4630      	mov	r0, r6
   24084:	f002 ffa4 	bl	26fd0 <interface_socket_free>
   24088:	4628      	mov	r0, r5
   2408a:	b002      	add	sp, #8
   2408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24090:	2516      	movs	r5, #22
   24092:	e7d8      	b.n	24046 <at_interface_close+0x6a>

00024094 <at_interface_read>:
   24094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24098:	b087      	sub	sp, #28
   2409a:	4688      	mov	r8, r1
   2409c:	4615      	mov	r5, r2
   2409e:	461e      	mov	r6, r3
   240a0:	4607      	mov	r7, r0
   240a2:	f003 f857 	bl	27154 <interface_socket_from_handle_get>
   240a6:	2800      	cmp	r0, #0
   240a8:	d056      	beq.n	24158 <at_interface_read+0xc4>
   240aa:	2300      	movs	r3, #0
   240ac:	4604      	mov	r4, r0
   240ae:	e9cd 8502 	strd	r8, r5, [sp, #8]
   240b2:	e9cd 3304 	strd	r3, r3, [sp, #16]
   240b6:	bb66      	cbnz	r6, 24112 <at_interface_read+0x7e>
   240b8:	f016 0502 	ands.w	r5, r6, #2
   240bc:	d136      	bne.n	2412c <at_interface_read+0x98>
   240be:	46a8      	mov	r8, r5
   240c0:	6823      	ldr	r3, [r4, #0]
   240c2:	69e0      	ldr	r0, [r4, #28]
   240c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   240c8:	6023      	str	r3, [r4, #0]
   240ca:	6803      	ldr	r3, [r0, #0]
   240cc:	4632      	mov	r2, r6
   240ce:	689b      	ldr	r3, [r3, #8]
   240d0:	a902      	add	r1, sp, #8
   240d2:	4798      	blx	r3
   240d4:	f1b0 0900 	subs.w	r9, r0, #0
   240d8:	da38      	bge.n	2414c <at_interface_read+0xb8>
   240da:	bb05      	cbnz	r5, 2411e <at_interface_read+0x8a>
   240dc:	6a25      	ldr	r5, [r4, #32]
   240de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   240e2:	2d00      	cmp	r5, #0
   240e4:	bf08      	it	eq
   240e6:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   240ea:	4611      	mov	r1, r2
   240ec:	ab01      	add	r3, sp, #4
   240ee:	4638      	mov	r0, r7
   240f0:	9501      	str	r5, [sp, #4]
   240f2:	f002 ffbb 	bl	2706c <interface_socket_wait>
   240f6:	4605      	mov	r5, r0
   240f8:	2800      	cmp	r0, #0
   240fa:	d1e1      	bne.n	240c0 <at_interface_read+0x2c>
   240fc:	4638      	mov	r0, r7
   240fe:	f003 f829 	bl	27154 <interface_socket_from_handle_get>
   24102:	2800      	cmp	r0, #0
   24104:	d0dc      	beq.n	240c0 <at_interface_read+0x2c>
   24106:	6845      	ldr	r5, [r0, #4]
   24108:	2d00      	cmp	r5, #0
   2410a:	d0d9      	beq.n	240c0 <at_interface_read+0x2c>
   2410c:	f8c0 8004 	str.w	r8, [r0, #4]
   24110:	e7d6      	b.n	240c0 <at_interface_read+0x2c>
   24112:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   24116:	d1cf      	bne.n	240b8 <at_interface_read+0x24>
   24118:	252d      	movs	r5, #45	; 0x2d
   2411a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2411e:	4628      	mov	r0, r5
   24120:	f7f9 f9a6 	bl	1d470 <bsd_os_errno_set>
   24124:	4648      	mov	r0, r9
   24126:	b007      	add	sp, #28
   24128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2412c:	6823      	ldr	r3, [r4, #0]
   2412e:	69e0      	ldr	r0, [r4, #28]
   24130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   24134:	6023      	str	r3, [r4, #0]
   24136:	6803      	ldr	r3, [r0, #0]
   24138:	4632      	mov	r2, r6
   2413a:	689b      	ldr	r3, [r3, #8]
   2413c:	a902      	add	r1, sp, #8
   2413e:	4798      	blx	r3
   24140:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24144:	4681      	mov	r9, r0
   24146:	d1ed      	bne.n	24124 <at_interface_read+0x90>
   24148:	2523      	movs	r5, #35	; 0x23
   2414a:	e7e8      	b.n	2411e <at_interface_read+0x8a>
   2414c:	2d00      	cmp	r5, #0
   2414e:	d1e6      	bne.n	2411e <at_interface_read+0x8a>
   24150:	4648      	mov	r0, r9
   24152:	b007      	add	sp, #28
   24154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24158:	2516      	movs	r5, #22
   2415a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2415e:	e7de      	b.n	2411e <at_interface_read+0x8a>

00024160 <at_interface_getopt>:
   24160:	f003 b866 	b.w	27230 <interface_socket_getopt>

00024164 <at_interface_setopt>:
   24164:	f003 b81e 	b.w	271a4 <interface_socket_setopt>

00024168 <rpc_at_event_handler>:
   24168:	b570      	push	{r4, r5, r6, lr}
   2416a:	4606      	mov	r6, r0
   2416c:	b084      	sub	sp, #16
   2416e:	68c0      	ldr	r0, [r0, #12]
   24170:	460d      	mov	r5, r1
   24172:	f002 ffef 	bl	27154 <interface_socket_from_handle_get>
   24176:	4604      	mov	r4, r0
   24178:	b348      	cbz	r0, 241ce <rpc_at_event_handler+0x66>
   2417a:	6803      	ldr	r3, [r0, #0]
   2417c:	b29b      	uxth	r3, r3
   2417e:	2b01      	cmp	r3, #1
   24180:	d01f      	beq.n	241c2 <rpc_at_event_handler+0x5a>
   24182:	6803      	ldr	r3, [r0, #0]
   24184:	b29b      	uxth	r3, r3
   24186:	2b0d      	cmp	r3, #13
   24188:	d029      	beq.n	241de <rpc_at_event_handler+0x76>
   2418a:	6803      	ldr	r3, [r0, #0]
   2418c:	b29b      	uxth	r3, r3
   2418e:	2b02      	cmp	r3, #2
   24190:	d02d      	beq.n	241ee <rpc_at_event_handler+0x86>
   24192:	3d03      	subs	r5, #3
   24194:	2d01      	cmp	r5, #1
   24196:	d817      	bhi.n	241c8 <rpc_at_event_handler+0x60>
   24198:	2500      	movs	r5, #0
   2419a:	6873      	ldr	r3, [r6, #4]
   2419c:	6832      	ldr	r2, [r6, #0]
   2419e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   241a2:	e9cd 2300 	strd	r2, r3, [sp]
   241a6:	69e0      	ldr	r0, [r4, #28]
   241a8:	4669      	mov	r1, sp
   241aa:	6803      	ldr	r3, [r0, #0]
   241ac:	685b      	ldr	r3, [r3, #4]
   241ae:	4798      	blx	r3
   241b0:	3001      	adds	r0, #1
   241b2:	d019      	beq.n	241e8 <rpc_at_event_handler+0x80>
   241b4:	4628      	mov	r0, r5
   241b6:	6823      	ldr	r3, [r4, #0]
   241b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   241bc:	6023      	str	r3, [r4, #0]
   241be:	b004      	add	sp, #16
   241c0:	bd70      	pop	{r4, r5, r6, pc}
   241c2:	2d02      	cmp	r5, #2
   241c4:	d1e5      	bne.n	24192 <rpc_at_event_handler+0x2a>
   241c6:	6005      	str	r5, [r0, #0]
   241c8:	2000      	movs	r0, #0
   241ca:	b004      	add	sp, #16
   241cc:	bd70      	pop	{r4, r5, r6, pc}
   241ce:	6830      	ldr	r0, [r6, #0]
   241d0:	2800      	cmp	r0, #0
   241d2:	d0f9      	beq.n	241c8 <rpc_at_event_handler+0x60>
   241d4:	f003 f8ec 	bl	273b0 <rpc_at_client_data_free>
   241d8:	4620      	mov	r0, r4
   241da:	b004      	add	sp, #16
   241dc:	bd70      	pop	{r4, r5, r6, pc}
   241de:	2d02      	cmp	r5, #2
   241e0:	d1d7      	bne.n	24192 <rpc_at_event_handler+0x2a>
   241e2:	230e      	movs	r3, #14
   241e4:	6003      	str	r3, [r0, #0]
   241e6:	e7ef      	b.n	241c8 <rpc_at_event_handler+0x60>
   241e8:	2002      	movs	r0, #2
   241ea:	b004      	add	sp, #16
   241ec:	bd70      	pop	{r4, r5, r6, pc}
   241ee:	6803      	ldr	r3, [r0, #0]
   241f0:	029b      	lsls	r3, r3, #10
   241f2:	d5ce      	bpl.n	24192 <rpc_at_event_handler+0x2a>
   241f4:	2d02      	cmp	r5, #2
   241f6:	d1cc      	bne.n	24192 <rpc_at_event_handler+0x2a>
   241f8:	6803      	ldr	r3, [r0, #0]
   241fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   241fe:	6003      	str	r3, [r0, #0]
   24200:	6803      	ldr	r3, [r0, #0]
   24202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   24206:	6003      	str	r3, [r0, #0]
   24208:	e7de      	b.n	241c8 <rpc_at_event_handler+0x60>
   2420a:	bf00      	nop

0002420c <ok_rsp_parser>:
   2420c:	2000      	movs	r0, #0
   2420e:	4770      	bx	lr

00024210 <pdn_state_get_parser>:
   24210:	2200      	movs	r2, #0
   24212:	b570      	push	{r4, r5, r6, lr}
   24214:	780b      	ldrb	r3, [r1, #0]
   24216:	b084      	sub	sp, #16
   24218:	460e      	mov	r6, r1
   2421a:	e9cd 2200 	strd	r2, r2, [sp]
   2421e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   24222:	b323      	cbz	r3, 2426e <pdn_state_get_parser+0x5e>
   24224:	460c      	mov	r4, r1
   24226:	2b20      	cmp	r3, #32
   24228:	460d      	mov	r5, r1
   2422a:	d01b      	beq.n	24264 <pdn_state_get_parser+0x54>
   2422c:	700b      	strb	r3, [r1, #0]
   2422e:	3201      	adds	r2, #1
   24230:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24234:	18b1      	adds	r1, r6, r2
   24236:	460d      	mov	r5, r1
   24238:	2b00      	cmp	r3, #0
   2423a:	d1f4      	bne.n	24226 <pdn_state_get_parser+0x16>
   2423c:	2200      	movs	r2, #0
   2423e:	4b0d      	ldr	r3, [pc, #52]	; (24274 <pdn_state_get_parser+0x64>)
   24240:	702a      	strb	r2, [r5, #0]
   24242:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   24246:	4a0c      	ldr	r2, [pc, #48]	; (24278 <pdn_state_get_parser+0x68>)
   24248:	681b      	ldr	r3, [r3, #0]
   2424a:	2110      	movs	r1, #16
   2424c:	4668      	mov	r0, sp
   2424e:	f00a f811 	bl	2e274 <sniprintf>
   24252:	4669      	mov	r1, sp
   24254:	4630      	mov	r0, r6
   24256:	f010 fd62 	bl	34d1e <strstr>
   2425a:	3000      	adds	r0, #0
   2425c:	bf18      	it	ne
   2425e:	2001      	movne	r0, #1
   24260:	b004      	add	sp, #16
   24262:	bd70      	pop	{r4, r5, r6, pc}
   24264:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24268:	2b00      	cmp	r3, #0
   2426a:	d1dc      	bne.n	24226 <pdn_state_get_parser+0x16>
   2426c:	e7e6      	b.n	2423c <pdn_state_get_parser+0x2c>
   2426e:	460d      	mov	r5, r1
   24270:	e7e4      	b.n	2423c <pdn_state_get_parser+0x2c>
   24272:	bf00      	nop
   24274:	200227f4 	.word	0x200227f4
   24278:	00036138 	.word	0x00036138

0002427c <pdn_id_get_parser>:
   2427c:	b570      	push	{r4, r5, r6, lr}
   2427e:	780b      	ldrb	r3, [r1, #0]
   24280:	4606      	mov	r6, r0
   24282:	b313      	cbz	r3, 242ca <pdn_id_get_parser+0x4e>
   24284:	4608      	mov	r0, r1
   24286:	2400      	movs	r4, #0
   24288:	460a      	mov	r2, r1
   2428a:	2b20      	cmp	r3, #32
   2428c:	4615      	mov	r5, r2
   2428e:	d017      	beq.n	242c0 <pdn_id_get_parser+0x44>
   24290:	7013      	strb	r3, [r2, #0]
   24292:	3401      	adds	r4, #1
   24294:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24298:	190a      	adds	r2, r1, r4
   2429a:	4615      	mov	r5, r2
   2429c:	2b00      	cmp	r3, #0
   2429e:	d1f4      	bne.n	2428a <pdn_id_get_parser+0xe>
   242a0:	2300      	movs	r3, #0
   242a2:	4608      	mov	r0, r1
   242a4:	702b      	strb	r3, [r5, #0]
   242a6:	213a      	movs	r1, #58	; 0x3a
   242a8:	f010 fd12 	bl	34cd0 <strchr>
   242ac:	b130      	cbz	r0, 242bc <pdn_id_get_parser+0x40>
   242ae:	3001      	adds	r0, #1
   242b0:	f010 fb96 	bl	349e0 <atoi>
   242b4:	4b06      	ldr	r3, [pc, #24]	; (242d0 <pdn_id_get_parser+0x54>)
   242b6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   242ba:	6058      	str	r0, [r3, #4]
   242bc:	2000      	movs	r0, #0
   242be:	bd70      	pop	{r4, r5, r6, pc}
   242c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   242c4:	2b00      	cmp	r3, #0
   242c6:	d1e0      	bne.n	2428a <pdn_id_get_parser+0xe>
   242c8:	e7ea      	b.n	242a0 <pdn_id_get_parser+0x24>
   242ca:	460d      	mov	r5, r1
   242cc:	e7e8      	b.n	242a0 <pdn_id_get_parser+0x24>
   242ce:	bf00      	nop
   242d0:	200227f4 	.word	0x200227f4

000242d4 <context_create_parser>:
   242d4:	b570      	push	{r4, r5, r6, lr}
   242d6:	780b      	ldrb	r3, [r1, #0]
   242d8:	4606      	mov	r6, r0
   242da:	b313      	cbz	r3, 24322 <context_create_parser+0x4e>
   242dc:	4608      	mov	r0, r1
   242de:	2400      	movs	r4, #0
   242e0:	460a      	mov	r2, r1
   242e2:	2b20      	cmp	r3, #32
   242e4:	4615      	mov	r5, r2
   242e6:	d017      	beq.n	24318 <context_create_parser+0x44>
   242e8:	7013      	strb	r3, [r2, #0]
   242ea:	3401      	adds	r4, #1
   242ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   242f0:	190a      	adds	r2, r1, r4
   242f2:	4615      	mov	r5, r2
   242f4:	2b00      	cmp	r3, #0
   242f6:	d1f4      	bne.n	242e2 <context_create_parser+0xe>
   242f8:	2300      	movs	r3, #0
   242fa:	4608      	mov	r0, r1
   242fc:	702b      	strb	r3, [r5, #0]
   242fe:	213a      	movs	r1, #58	; 0x3a
   24300:	f010 fce6 	bl	34cd0 <strchr>
   24304:	b130      	cbz	r0, 24314 <context_create_parser+0x40>
   24306:	4b08      	ldr	r3, [pc, #32]	; (24328 <context_create_parser+0x54>)
   24308:	3001      	adds	r0, #1
   2430a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2430e:	f010 fb67 	bl	349e0 <atoi>
   24312:	6020      	str	r0, [r4, #0]
   24314:	2000      	movs	r0, #0
   24316:	bd70      	pop	{r4, r5, r6, pc}
   24318:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2431c:	2b00      	cmp	r3, #0
   2431e:	d1e0      	bne.n	242e2 <context_create_parser+0xe>
   24320:	e7ea      	b.n	242f8 <context_create_parser+0x24>
   24322:	460d      	mov	r5, r1
   24324:	e7e8      	b.n	242f8 <context_create_parser+0x24>
   24326:	bf00      	nop
   24328:	200227f4 	.word	0x200227f4

0002432c <pdn_interface_init>:
   2432c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24330:	b510      	push	{r4, lr}
   24332:	4c0b      	ldr	r4, [pc, #44]	; (24360 <pdn_interface_init+0x34>)
   24334:	2228      	movs	r2, #40	; 0x28
   24336:	2100      	movs	r1, #0
   24338:	480a      	ldr	r0, [pc, #40]	; (24364 <pdn_interface_init+0x38>)
   2433a:	6023      	str	r3, [r4, #0]
   2433c:	f010 fbaa 	bl	34a94 <memset>
   24340:	f240 2201 	movw	r2, #513	; 0x201
   24344:	2102      	movs	r1, #2
   24346:	2066      	movs	r0, #102	; 0x66
   24348:	f7ff fdd8 	bl	23efc <at_interface_open>
   2434c:	2800      	cmp	r0, #0
   2434e:	6020      	str	r0, [r4, #0]
   24350:	db04      	blt.n	2435c <pdn_interface_init+0x30>
   24352:	2201      	movs	r2, #1
   24354:	4b04      	ldr	r3, [pc, #16]	; (24368 <pdn_interface_init+0x3c>)
   24356:	2000      	movs	r0, #0
   24358:	701a      	strb	r2, [r3, #0]
   2435a:	bd10      	pop	{r4, pc}
   2435c:	2003      	movs	r0, #3
   2435e:	bd10      	pop	{r4, pc}
   24360:	200226f0 	.word	0x200226f0
   24364:	200227f4 	.word	0x200227f4
   24368:	20028f83 	.word	0x20028f83

0002436c <pdn_interface_open>:
   2436c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24370:	4b66      	ldr	r3, [pc, #408]	; (2450c <pdn_interface_open+0x1a0>)
   24372:	b083      	sub	sp, #12
   24374:	781b      	ldrb	r3, [r3, #0]
   24376:	2b00      	cmp	r3, #0
   24378:	f000 80c2 	beq.w	24500 <pdn_interface_open+0x194>
   2437c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   24380:	f040 80ad 	bne.w	244de <pdn_interface_open+0x172>
   24384:	4c62      	ldr	r4, [pc, #392]	; (24510 <pdn_interface_open+0x1a4>)
   24386:	6825      	ldr	r5, [r4, #0]
   24388:	b34d      	cbz	r5, 243de <pdn_interface_open+0x72>
   2438a:	6863      	ldr	r3, [r4, #4]
   2438c:	2b00      	cmp	r3, #0
   2438e:	f000 8098 	beq.w	244c2 <pdn_interface_open+0x156>
   24392:	68a3      	ldr	r3, [r4, #8]
   24394:	2b00      	cmp	r3, #0
   24396:	f000 8096 	beq.w	244c6 <pdn_interface_open+0x15a>
   2439a:	68e3      	ldr	r3, [r4, #12]
   2439c:	2b00      	cmp	r3, #0
   2439e:	f000 8094 	beq.w	244ca <pdn_interface_open+0x15e>
   243a2:	6923      	ldr	r3, [r4, #16]
   243a4:	2b00      	cmp	r3, #0
   243a6:	f000 8092 	beq.w	244ce <pdn_interface_open+0x162>
   243aa:	6963      	ldr	r3, [r4, #20]
   243ac:	2b00      	cmp	r3, #0
   243ae:	f000 8090 	beq.w	244d2 <pdn_interface_open+0x166>
   243b2:	69a3      	ldr	r3, [r4, #24]
   243b4:	2b00      	cmp	r3, #0
   243b6:	f000 808e 	beq.w	244d6 <pdn_interface_open+0x16a>
   243ba:	69e3      	ldr	r3, [r4, #28]
   243bc:	2b00      	cmp	r3, #0
   243be:	f000 808c 	beq.w	244da <pdn_interface_open+0x16e>
   243c2:	6a23      	ldr	r3, [r4, #32]
   243c4:	b153      	cbz	r3, 243dc <pdn_interface_open+0x70>
   243c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243c8:	2509      	movs	r5, #9
   243ca:	b143      	cbz	r3, 243de <pdn_interface_open+0x72>
   243cc:	200c      	movs	r0, #12
   243ce:	f7f9 f84f 	bl	1d470 <bsd_os_errno_set>
   243d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   243d6:	b003      	add	sp, #12
   243d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   243dc:	2508      	movs	r5, #8
   243de:	2074      	movs	r0, #116	; 0x74
   243e0:	f002 fa60 	bl	268a4 <nrf_malloc>
   243e4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   243e8:	2800      	cmp	r0, #0
   243ea:	d0ef      	beq.n	243cc <pdn_interface_open+0x60>
   243ec:	2274      	movs	r2, #116	; 0x74
   243ee:	2100      	movs	r1, #0
   243f0:	f010 fb50 	bl	34a94 <memset>
   243f4:	2101      	movs	r1, #1
   243f6:	2003      	movs	r0, #3
   243f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   243fc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   24400:	4a44      	ldr	r2, [pc, #272]	; (24514 <pdn_interface_open+0x1a8>)
   24402:	6099      	str	r1, [r3, #8]
   24404:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   24408:	f44f 7180 	mov.w	r1, #256	; 0x100
   2440c:	6718      	str	r0, [r3, #112]	; 0x70
   2440e:	605f      	str	r7, [r3, #4]
   24410:	4841      	ldr	r0, [pc, #260]	; (24518 <pdn_interface_open+0x1ac>)
   24412:	f8df 8110 	ldr.w	r8, [pc, #272]	; 24524 <pdn_interface_open+0x1b8>
   24416:	f009 ff2d 	bl	2e274 <sniprintf>
   2441a:	483f      	ldr	r0, [pc, #252]	; (24518 <pdn_interface_open+0x1ac>)
   2441c:	f8d8 9000 	ldr.w	r9, [r8]
   24420:	2600      	movs	r6, #0
   24422:	f7ed fe2d 	bl	12080 <strlen>
   24426:	4633      	mov	r3, r6
   24428:	4602      	mov	r2, r0
   2442a:	493b      	ldr	r1, [pc, #236]	; (24518 <pdn_interface_open+0x1ac>)
   2442c:	4648      	mov	r0, r9
   2442e:	9601      	str	r6, [sp, #4]
   24430:	9600      	str	r6, [sp, #0]
   24432:	f7ff fcdb 	bl	23dec <at_interface_write>
   24436:	4681      	mov	r9, r0
   24438:	4837      	ldr	r0, [pc, #220]	; (24518 <pdn_interface_open+0x1ac>)
   2443a:	f7ed fe21 	bl	12080 <strlen>
   2443e:	4548      	cmp	r0, r9
   24440:	d153      	bne.n	244ea <pdn_interface_open+0x17e>
   24442:	4633      	mov	r3, r6
   24444:	e9cd 6600 	strd	r6, r6, [sp]
   24448:	f44f 7280 	mov.w	r2, #256	; 0x100
   2444c:	4932      	ldr	r1, [pc, #200]	; (24518 <pdn_interface_open+0x1ac>)
   2444e:	f8d8 0000 	ldr.w	r0, [r8]
   24452:	f7ff fe1f 	bl	24094 <at_interface_read>
   24456:	4606      	mov	r6, r0
   24458:	4830      	ldr	r0, [pc, #192]	; (2451c <pdn_interface_open+0x1b0>)
   2445a:	f7ed fe11 	bl	12080 <strlen>
   2445e:	4286      	cmp	r6, r0
   24460:	db15      	blt.n	2448e <pdn_interface_open+0x122>
   24462:	4602      	mov	r2, r0
   24464:	492c      	ldr	r1, [pc, #176]	; (24518 <pdn_interface_open+0x1ac>)
   24466:	482d      	ldr	r0, [pc, #180]	; (2451c <pdn_interface_open+0x1b0>)
   24468:	f010 fc47 	bl	34cfa <strncmp>
   2446c:	b978      	cbnz	r0, 2448e <pdn_interface_open+0x122>
   2446e:	492a      	ldr	r1, [pc, #168]	; (24518 <pdn_interface_open+0x1ac>)
   24470:	4628      	mov	r0, r5
   24472:	f7ff ff2f 	bl	242d4 <context_create_parser>
   24476:	b9b0      	cbnz	r0, 244a6 <pdn_interface_open+0x13a>
   24478:	2202      	movs	r2, #2
   2447a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   2447e:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   24482:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   24486:	609a      	str	r2, [r3, #8]
   24488:	b003      	add	sp, #12
   2448a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2448e:	4824      	ldr	r0, [pc, #144]	; (24520 <pdn_interface_open+0x1b4>)
   24490:	f7ed fdf6 	bl	12080 <strlen>
   24494:	4920      	ldr	r1, [pc, #128]	; (24518 <pdn_interface_open+0x1ac>)
   24496:	4602      	mov	r2, r0
   24498:	4821      	ldr	r0, [pc, #132]	; (24520 <pdn_interface_open+0x1b4>)
   2449a:	f010 fc2e 	bl	34cfa <strncmp>
   2449e:	b960      	cbnz	r0, 244ba <pdn_interface_open+0x14e>
   244a0:	2008      	movs	r0, #8
   244a2:	f7f8 ffe5 	bl	1d470 <bsd_os_errno_set>
   244a6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   244aa:	f002 fa05 	bl	268b8 <nrf_free>
   244ae:	2300      	movs	r3, #0
   244b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   244b4:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   244b8:	e78d      	b.n	243d6 <pdn_interface_open+0x6a>
   244ba:	2005      	movs	r0, #5
   244bc:	f7f8 ffd8 	bl	1d470 <bsd_os_errno_set>
   244c0:	e7f1      	b.n	244a6 <pdn_interface_open+0x13a>
   244c2:	2501      	movs	r5, #1
   244c4:	e78b      	b.n	243de <pdn_interface_open+0x72>
   244c6:	2502      	movs	r5, #2
   244c8:	e789      	b.n	243de <pdn_interface_open+0x72>
   244ca:	2503      	movs	r5, #3
   244cc:	e787      	b.n	243de <pdn_interface_open+0x72>
   244ce:	2504      	movs	r5, #4
   244d0:	e785      	b.n	243de <pdn_interface_open+0x72>
   244d2:	2505      	movs	r5, #5
   244d4:	e783      	b.n	243de <pdn_interface_open+0x72>
   244d6:	2506      	movs	r5, #6
   244d8:	e781      	b.n	243de <pdn_interface_open+0x72>
   244da:	2507      	movs	r5, #7
   244dc:	e77f      	b.n	243de <pdn_interface_open+0x72>
   244de:	2029      	movs	r0, #41	; 0x29
   244e0:	f7f8 ffc6 	bl	1d470 <bsd_os_errno_set>
   244e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   244e8:	e775      	b.n	243d6 <pdn_interface_open+0x6a>
   244ea:	2005      	movs	r0, #5
   244ec:	f7f8 ffc0 	bl	1d470 <bsd_os_errno_set>
   244f0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   244f4:	f002 f9e0 	bl	268b8 <nrf_free>
   244f8:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   244fc:	4638      	mov	r0, r7
   244fe:	e76a      	b.n	243d6 <pdn_interface_open+0x6a>
   24500:	2070      	movs	r0, #112	; 0x70
   24502:	f7f8 ffb5 	bl	1d470 <bsd_os_errno_set>
   24506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2450a:	e764      	b.n	243d6 <pdn_interface_open+0x6a>
   2450c:	20028f83 	.word	0x20028f83
   24510:	200227f4 	.word	0x200227f4
   24514:	00036114 	.word	0x00036114
   24518:	200226f4 	.word	0x200226f4
   2451c:	00036124 	.word	0x00036124
   24520:	00036130 	.word	0x00036130
   24524:	200226f0 	.word	0x200226f0

00024528 <pdn_interface_connect>:
   24528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2452c:	b083      	sub	sp, #12
   2452e:	2900      	cmp	r1, #0
   24530:	f000 813d 	beq.w	247ae <pdn_interface_connect+0x286>
   24534:	2a64      	cmp	r2, #100	; 0x64
   24536:	4691      	mov	r9, r2
   24538:	f200 8139 	bhi.w	247ae <pdn_interface_connect+0x286>
   2453c:	4605      	mov	r5, r0
   2453e:	4608      	mov	r0, r1
   24540:	4688      	mov	r8, r1
   24542:	f7ed fd9d 	bl	12080 <strlen>
   24546:	2864      	cmp	r0, #100	; 0x64
   24548:	f200 8131 	bhi.w	247ae <pdn_interface_connect+0x286>
   2454c:	0c2b      	lsrs	r3, r5, #16
   2454e:	4aa5      	ldr	r2, [pc, #660]	; (247e4 <pdn_interface_connect+0x2bc>)
   24550:	041b      	lsls	r3, r3, #16
   24552:	4293      	cmp	r3, r2
   24554:	f040 8122 	bne.w	2479c <pdn_interface_connect+0x274>
   24558:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   2455c:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   24560:	2d09      	cmp	r5, #9
   24562:	f300 811b 	bgt.w	2479c <pdn_interface_connect+0x274>
   24566:	4fa0      	ldr	r7, [pc, #640]	; (247e8 <pdn_interface_connect+0x2c0>)
   24568:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   2456c:	2b00      	cmp	r3, #0
   2456e:	f000 8115 	beq.w	2479c <pdn_interface_connect+0x274>
   24572:	689a      	ldr	r2, [r3, #8]
   24574:	2a00      	cmp	r2, #0
   24576:	f000 8111 	beq.w	2479c <pdn_interface_connect+0x274>
   2457a:	689b      	ldr	r3, [r3, #8]
   2457c:	2b02      	cmp	r3, #2
   2457e:	f040 810d 	bne.w	2479c <pdn_interface_connect+0x274>
   24582:	4e9a      	ldr	r6, [pc, #616]	; (247ec <pdn_interface_connect+0x2c4>)
   24584:	4a9a      	ldr	r2, [pc, #616]	; (247f0 <pdn_interface_connect+0x2c8>)
   24586:	f44f 7180 	mov.w	r1, #256	; 0x100
   2458a:	4630      	mov	r0, r6
   2458c:	f009 fe72 	bl	2e274 <sniprintf>
   24590:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24594:	4604      	mov	r4, r0
   24596:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2459a:	681b      	ldr	r3, [r3, #0]
   2459c:	4a95      	ldr	r2, [pc, #596]	; (247f4 <pdn_interface_connect+0x2cc>)
   2459e:	1830      	adds	r0, r6, r0
   245a0:	f009 fe68 	bl	2e274 <sniprintf>
   245a4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   245a8:	4404      	add	r4, r0
   245aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   245ac:	f003 0203 	and.w	r2, r3, #3
   245b0:	2a03      	cmp	r2, #3
   245b2:	f000 80ea 	beq.w	2478a <pdn_interface_connect+0x262>
   245b6:	079b      	lsls	r3, r3, #30
   245b8:	eb06 0004 	add.w	r0, r6, r4
   245bc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   245c0:	bf4c      	ite	mi
   245c2:	4b8d      	ldrmi	r3, [pc, #564]	; (247f8 <pdn_interface_connect+0x2d0>)
   245c4:	4b8d      	ldrpl	r3, [pc, #564]	; (247fc <pdn_interface_connect+0x2d4>)
   245c6:	4a8e      	ldr	r2, [pc, #568]	; (24800 <pdn_interface_connect+0x2d8>)
   245c8:	f009 fe54 	bl	2e274 <sniprintf>
   245cc:	4404      	add	r4, r0
   245ce:	4643      	mov	r3, r8
   245d0:	4a8c      	ldr	r2, [pc, #560]	; (24804 <pdn_interface_connect+0x2dc>)
   245d2:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   245d6:	1930      	adds	r0, r6, r4
   245d8:	f009 fe4c 	bl	2e274 <sniprintf>
   245dc:	4420      	add	r0, r4
   245de:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   245e2:	f300 80f7 	bgt.w	247d4 <pdn_interface_connect+0x2ac>
   245e6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 24824 <pdn_interface_connect+0x2fc>
   245ea:	4880      	ldr	r0, [pc, #512]	; (247ec <pdn_interface_connect+0x2c4>)
   245ec:	f8da b000 	ldr.w	fp, [sl]
   245f0:	2400      	movs	r4, #0
   245f2:	f7ed fd45 	bl	12080 <strlen>
   245f6:	4623      	mov	r3, r4
   245f8:	4602      	mov	r2, r0
   245fa:	497c      	ldr	r1, [pc, #496]	; (247ec <pdn_interface_connect+0x2c4>)
   245fc:	4658      	mov	r0, fp
   245fe:	9401      	str	r4, [sp, #4]
   24600:	9400      	str	r4, [sp, #0]
   24602:	f7ff fbf3 	bl	23dec <at_interface_write>
   24606:	4683      	mov	fp, r0
   24608:	4878      	ldr	r0, [pc, #480]	; (247ec <pdn_interface_connect+0x2c4>)
   2460a:	f7ed fd39 	bl	12080 <strlen>
   2460e:	4558      	cmp	r0, fp
   24610:	d008      	beq.n	24624 <pdn_interface_connect+0xfc>
   24612:	2005      	movs	r0, #5
   24614:	f7f8 ff2c 	bl	1d470 <bsd_os_errno_set>
   24618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2461c:	4620      	mov	r0, r4
   2461e:	b003      	add	sp, #12
   24620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24624:	4623      	mov	r3, r4
   24626:	e9cd 4400 	strd	r4, r4, [sp]
   2462a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2462e:	496f      	ldr	r1, [pc, #444]	; (247ec <pdn_interface_connect+0x2c4>)
   24630:	f8da 0000 	ldr.w	r0, [sl]
   24634:	f7ff fd2e 	bl	24094 <at_interface_read>
   24638:	4604      	mov	r4, r0
   2463a:	4873      	ldr	r0, [pc, #460]	; (24808 <pdn_interface_connect+0x2e0>)
   2463c:	f7ed fd20 	bl	12080 <strlen>
   24640:	4284      	cmp	r4, r0
   24642:	f2c0 8091 	blt.w	24768 <pdn_interface_connect+0x240>
   24646:	4602      	mov	r2, r0
   24648:	4968      	ldr	r1, [pc, #416]	; (247ec <pdn_interface_connect+0x2c4>)
   2464a:	486f      	ldr	r0, [pc, #444]	; (24808 <pdn_interface_connect+0x2e0>)
   2464c:	f010 fb55 	bl	34cfa <strncmp>
   24650:	2800      	cmp	r0, #0
   24652:	f040 8089 	bne.w	24768 <pdn_interface_connect+0x240>
   24656:	4965      	ldr	r1, [pc, #404]	; (247ec <pdn_interface_connect+0x2c4>)
   24658:	4628      	mov	r0, r5
   2465a:	f7ff fdd7 	bl	2420c <ok_rsp_parser>
   2465e:	4604      	mov	r4, r0
   24660:	2800      	cmp	r0, #0
   24662:	d1db      	bne.n	2461c <pdn_interface_connect+0xf4>
   24664:	4a69      	ldr	r2, [pc, #420]	; (2480c <pdn_interface_connect+0x2e4>)
   24666:	f44f 7180 	mov.w	r1, #256	; 0x100
   2466a:	4860      	ldr	r0, [pc, #384]	; (247ec <pdn_interface_connect+0x2c4>)
   2466c:	f009 fe02 	bl	2e274 <sniprintf>
   24670:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   24674:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   24678:	681b      	ldr	r3, [r3, #0]
   2467a:	4a65      	ldr	r2, [pc, #404]	; (24810 <pdn_interface_connect+0x2e8>)
   2467c:	4430      	add	r0, r6
   2467e:	f009 fdf9 	bl	2e274 <sniprintf>
   24682:	485a      	ldr	r0, [pc, #360]	; (247ec <pdn_interface_connect+0x2c4>)
   24684:	f8da b000 	ldr.w	fp, [sl]
   24688:	f7ed fcfa 	bl	12080 <strlen>
   2468c:	4623      	mov	r3, r4
   2468e:	4602      	mov	r2, r0
   24690:	4956      	ldr	r1, [pc, #344]	; (247ec <pdn_interface_connect+0x2c4>)
   24692:	4658      	mov	r0, fp
   24694:	9401      	str	r4, [sp, #4]
   24696:	9400      	str	r4, [sp, #0]
   24698:	f7ff fba8 	bl	23dec <at_interface_write>
   2469c:	4683      	mov	fp, r0
   2469e:	4853      	ldr	r0, [pc, #332]	; (247ec <pdn_interface_connect+0x2c4>)
   246a0:	f7ed fcee 	bl	12080 <strlen>
   246a4:	4558      	cmp	r0, fp
   246a6:	d1b4      	bne.n	24612 <pdn_interface_connect+0xea>
   246a8:	4623      	mov	r3, r4
   246aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   246ae:	494f      	ldr	r1, [pc, #316]	; (247ec <pdn_interface_connect+0x2c4>)
   246b0:	f8da 0000 	ldr.w	r0, [sl]
   246b4:	e9cd 4400 	strd	r4, r4, [sp]
   246b8:	f7ff fcec 	bl	24094 <at_interface_read>
   246bc:	4683      	mov	fp, r0
   246be:	4852      	ldr	r0, [pc, #328]	; (24808 <pdn_interface_connect+0x2e0>)
   246c0:	f7ed fcde 	bl	12080 <strlen>
   246c4:	4583      	cmp	fp, r0
   246c6:	db4f      	blt.n	24768 <pdn_interface_connect+0x240>
   246c8:	4602      	mov	r2, r0
   246ca:	4948      	ldr	r1, [pc, #288]	; (247ec <pdn_interface_connect+0x2c4>)
   246cc:	484e      	ldr	r0, [pc, #312]	; (24808 <pdn_interface_connect+0x2e0>)
   246ce:	f010 fb14 	bl	34cfa <strncmp>
   246d2:	2800      	cmp	r0, #0
   246d4:	d148      	bne.n	24768 <pdn_interface_connect+0x240>
   246d6:	2103      	movs	r1, #3
   246d8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   246dc:	464a      	mov	r2, r9
   246de:	6099      	str	r1, [r3, #8]
   246e0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   246e4:	4641      	mov	r1, r8
   246e6:	300c      	adds	r0, #12
   246e8:	f010 f99a 	bl	34a20 <memcpy>
   246ec:	4a49      	ldr	r2, [pc, #292]	; (24814 <pdn_interface_connect+0x2ec>)
   246ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   246f2:	483e      	ldr	r0, [pc, #248]	; (247ec <pdn_interface_connect+0x2c4>)
   246f4:	f009 fdbe 	bl	2e274 <sniprintf>
   246f8:	4601      	mov	r1, r0
   246fa:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   246fe:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   24702:	681b      	ldr	r3, [r3, #0]
   24704:	4a42      	ldr	r2, [pc, #264]	; (24810 <pdn_interface_connect+0x2e8>)
   24706:	1830      	adds	r0, r6, r0
   24708:	f009 fdb4 	bl	2e274 <sniprintf>
   2470c:	4837      	ldr	r0, [pc, #220]	; (247ec <pdn_interface_connect+0x2c4>)
   2470e:	f8da 6000 	ldr.w	r6, [sl]
   24712:	f7ed fcb5 	bl	12080 <strlen>
   24716:	4623      	mov	r3, r4
   24718:	4602      	mov	r2, r0
   2471a:	4934      	ldr	r1, [pc, #208]	; (247ec <pdn_interface_connect+0x2c4>)
   2471c:	4630      	mov	r0, r6
   2471e:	9401      	str	r4, [sp, #4]
   24720:	9400      	str	r4, [sp, #0]
   24722:	f7ff fb63 	bl	23dec <at_interface_write>
   24726:	4606      	mov	r6, r0
   24728:	4830      	ldr	r0, [pc, #192]	; (247ec <pdn_interface_connect+0x2c4>)
   2472a:	f7ed fca9 	bl	12080 <strlen>
   2472e:	42b0      	cmp	r0, r6
   24730:	d153      	bne.n	247da <pdn_interface_connect+0x2b2>
   24732:	4623      	mov	r3, r4
   24734:	f44f 7280 	mov.w	r2, #256	; 0x100
   24738:	492c      	ldr	r1, [pc, #176]	; (247ec <pdn_interface_connect+0x2c4>)
   2473a:	f8da 0000 	ldr.w	r0, [sl]
   2473e:	e9cd 4400 	strd	r4, r4, [sp]
   24742:	f7ff fca7 	bl	24094 <at_interface_read>
   24746:	4606      	mov	r6, r0
   24748:	4833      	ldr	r0, [pc, #204]	; (24818 <pdn_interface_connect+0x2f0>)
   2474a:	f7ed fc99 	bl	12080 <strlen>
   2474e:	4286      	cmp	r6, r0
   24750:	db33      	blt.n	247ba <pdn_interface_connect+0x292>
   24752:	4602      	mov	r2, r0
   24754:	4925      	ldr	r1, [pc, #148]	; (247ec <pdn_interface_connect+0x2c4>)
   24756:	4830      	ldr	r0, [pc, #192]	; (24818 <pdn_interface_connect+0x2f0>)
   24758:	f010 facf 	bl	34cfa <strncmp>
   2475c:	bb68      	cbnz	r0, 247ba <pdn_interface_connect+0x292>
   2475e:	4628      	mov	r0, r5
   24760:	4922      	ldr	r1, [pc, #136]	; (247ec <pdn_interface_connect+0x2c4>)
   24762:	f7ff fd8b 	bl	2427c <pdn_id_get_parser>
   24766:	e759      	b.n	2461c <pdn_interface_connect+0xf4>
   24768:	482c      	ldr	r0, [pc, #176]	; (2481c <pdn_interface_connect+0x2f4>)
   2476a:	f7ed fc89 	bl	12080 <strlen>
   2476e:	491f      	ldr	r1, [pc, #124]	; (247ec <pdn_interface_connect+0x2c4>)
   24770:	4602      	mov	r2, r0
   24772:	482a      	ldr	r0, [pc, #168]	; (2481c <pdn_interface_connect+0x2f4>)
   24774:	f010 fac1 	bl	34cfa <strncmp>
   24778:	2800      	cmp	r0, #0
   2477a:	f47f af4a 	bne.w	24612 <pdn_interface_connect+0xea>
   2477e:	2008      	movs	r0, #8
   24780:	f7f8 fe76 	bl	1d470 <bsd_os_errno_set>
   24784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24788:	e748      	b.n	2461c <pdn_interface_connect+0xf4>
   2478a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2478e:	1930      	adds	r0, r6, r4
   24790:	4b23      	ldr	r3, [pc, #140]	; (24820 <pdn_interface_connect+0x2f8>)
   24792:	4a1b      	ldr	r2, [pc, #108]	; (24800 <pdn_interface_connect+0x2d8>)
   24794:	f009 fd6e 	bl	2e274 <sniprintf>
   24798:	4404      	add	r4, r0
   2479a:	e718      	b.n	245ce <pdn_interface_connect+0xa6>
   2479c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   247a0:	2009      	movs	r0, #9
   247a2:	f7f8 fe65 	bl	1d470 <bsd_os_errno_set>
   247a6:	4620      	mov	r0, r4
   247a8:	b003      	add	sp, #12
   247aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247ae:	2016      	movs	r0, #22
   247b0:	f7f8 fe5e 	bl	1d470 <bsd_os_errno_set>
   247b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   247b8:	e730      	b.n	2461c <pdn_interface_connect+0xf4>
   247ba:	4818      	ldr	r0, [pc, #96]	; (2481c <pdn_interface_connect+0x2f4>)
   247bc:	f7ed fc60 	bl	12080 <strlen>
   247c0:	490a      	ldr	r1, [pc, #40]	; (247ec <pdn_interface_connect+0x2c4>)
   247c2:	4602      	mov	r2, r0
   247c4:	4815      	ldr	r0, [pc, #84]	; (2481c <pdn_interface_connect+0x2f4>)
   247c6:	f010 fa98 	bl	34cfa <strncmp>
   247ca:	b930      	cbnz	r0, 247da <pdn_interface_connect+0x2b2>
   247cc:	2008      	movs	r0, #8
   247ce:	f7f8 fe4f 	bl	1d470 <bsd_os_errno_set>
   247d2:	e723      	b.n	2461c <pdn_interface_connect+0xf4>
   247d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   247d8:	e720      	b.n	2461c <pdn_interface_connect+0xf4>
   247da:	2005      	movs	r0, #5
   247dc:	f7f8 fe48 	bl	1d470 <bsd_os_errno_set>
   247e0:	e71c      	b.n	2461c <pdn_interface_connect+0xf4>
   247e2:	bf00      	nop
   247e4:	789a0000 	.word	0x789a0000
   247e8:	200227f4 	.word	0x200227f4
   247ec:	200226f4 	.word	0x200226f4
   247f0:	0003609c 	.word	0x0003609c
   247f4:	000360a8 	.word	0x000360a8
   247f8:	000360bc 	.word	0x000360bc
   247fc:	000360c4 	.word	0x000360c4
   24800:	000360b4 	.word	0x000360b4
   24804:	000360f8 	.word	0x000360f8
   24808:	000360c8 	.word	0x000360c8
   2480c:	000360cc 	.word	0x000360cc
   24810:	000360d8 	.word	0x000360d8
   24814:	000360dc 	.word	0x000360dc
   24818:	000360ec 	.word	0x000360ec
   2481c:	00036130 	.word	0x00036130
   24820:	000360ac 	.word	0x000360ac
   24824:	200226f0 	.word	0x200226f0

00024828 <pdn_interface_close>:
   24828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2482c:	4a6b      	ldr	r2, [pc, #428]	; (249dc <pdn_interface_close+0x1b4>)
   2482e:	0c03      	lsrs	r3, r0, #16
   24830:	041b      	lsls	r3, r3, #16
   24832:	4293      	cmp	r3, r2
   24834:	b083      	sub	sp, #12
   24836:	f040 80ac 	bne.w	24992 <pdn_interface_close+0x16a>
   2483a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   2483e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   24842:	2c09      	cmp	r4, #9
   24844:	f300 80a5 	bgt.w	24992 <pdn_interface_close+0x16a>
   24848:	4d65      	ldr	r5, [pc, #404]	; (249e0 <pdn_interface_close+0x1b8>)
   2484a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2484e:	2800      	cmp	r0, #0
   24850:	f000 809f 	beq.w	24992 <pdn_interface_close+0x16a>
   24854:	6883      	ldr	r3, [r0, #8]
   24856:	2b00      	cmp	r3, #0
   24858:	f000 809b 	beq.w	24992 <pdn_interface_close+0x16a>
   2485c:	6883      	ldr	r3, [r0, #8]
   2485e:	2b03      	cmp	r3, #3
   24860:	d00b      	beq.n	2487a <pdn_interface_close+0x52>
   24862:	6883      	ldr	r3, [r0, #8]
   24864:	2b02      	cmp	r3, #2
   24866:	d055      	beq.n	24914 <pdn_interface_close+0xec>
   24868:	f002 f826 	bl	268b8 <nrf_free>
   2486c:	2300      	movs	r3, #0
   2486e:	4618      	mov	r0, r3
   24870:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   24874:	b003      	add	sp, #12
   24876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2487a:	4e5a      	ldr	r6, [pc, #360]	; (249e4 <pdn_interface_close+0x1bc>)
   2487c:	4a5a      	ldr	r2, [pc, #360]	; (249e8 <pdn_interface_close+0x1c0>)
   2487e:	f44f 7180 	mov.w	r1, #256	; 0x100
   24882:	4630      	mov	r0, r6
   24884:	f009 fcf6 	bl	2e274 <sniprintf>
   24888:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2488c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   24890:	681b      	ldr	r3, [r3, #0]
   24892:	4a56      	ldr	r2, [pc, #344]	; (249ec <pdn_interface_close+0x1c4>)
   24894:	4430      	add	r0, r6
   24896:	f8df 8164 	ldr.w	r8, [pc, #356]	; 249fc <pdn_interface_close+0x1d4>
   2489a:	f009 fceb 	bl	2e274 <sniprintf>
   2489e:	4630      	mov	r0, r6
   248a0:	f8d8 9000 	ldr.w	r9, [r8]
   248a4:	2700      	movs	r7, #0
   248a6:	f7ed fbeb 	bl	12080 <strlen>
   248aa:	4631      	mov	r1, r6
   248ac:	4602      	mov	r2, r0
   248ae:	463b      	mov	r3, r7
   248b0:	4648      	mov	r0, r9
   248b2:	9701      	str	r7, [sp, #4]
   248b4:	9700      	str	r7, [sp, #0]
   248b6:	f7ff fa99 	bl	23dec <at_interface_write>
   248ba:	4681      	mov	r9, r0
   248bc:	4630      	mov	r0, r6
   248be:	f7ed fbdf 	bl	12080 <strlen>
   248c2:	4548      	cmp	r0, r9
   248c4:	f040 8082 	bne.w	249cc <pdn_interface_close+0x1a4>
   248c8:	463b      	mov	r3, r7
   248ca:	e9cd 7700 	strd	r7, r7, [sp]
   248ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   248d2:	4631      	mov	r1, r6
   248d4:	f8d8 0000 	ldr.w	r0, [r8]
   248d8:	f7ff fbdc 	bl	24094 <at_interface_read>
   248dc:	4607      	mov	r7, r0
   248de:	4844      	ldr	r0, [pc, #272]	; (249f0 <pdn_interface_close+0x1c8>)
   248e0:	f7ed fbce 	bl	12080 <strlen>
   248e4:	4287      	cmp	r7, r0
   248e6:	da5a      	bge.n	2499e <pdn_interface_close+0x176>
   248e8:	4842      	ldr	r0, [pc, #264]	; (249f4 <pdn_interface_close+0x1cc>)
   248ea:	f7ed fbc9 	bl	12080 <strlen>
   248ee:	493d      	ldr	r1, [pc, #244]	; (249e4 <pdn_interface_close+0x1bc>)
   248f0:	4602      	mov	r2, r0
   248f2:	4840      	ldr	r0, [pc, #256]	; (249f4 <pdn_interface_close+0x1cc>)
   248f4:	f010 fa01 	bl	34cfa <strncmp>
   248f8:	2800      	cmp	r0, #0
   248fa:	d167      	bne.n	249cc <pdn_interface_close+0x1a4>
   248fc:	2008      	movs	r0, #8
   248fe:	f7f8 fdb7 	bl	1d470 <bsd_os_errno_set>
   24902:	2202      	movs	r2, #2
   24904:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   24908:	609a      	str	r2, [r3, #8]
   2490a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2490e:	6883      	ldr	r3, [r0, #8]
   24910:	2b02      	cmp	r3, #2
   24912:	d1a9      	bne.n	24868 <pdn_interface_close+0x40>
   24914:	4e33      	ldr	r6, [pc, #204]	; (249e4 <pdn_interface_close+0x1bc>)
   24916:	4a38      	ldr	r2, [pc, #224]	; (249f8 <pdn_interface_close+0x1d0>)
   24918:	f44f 7180 	mov.w	r1, #256	; 0x100
   2491c:	4630      	mov	r0, r6
   2491e:	f009 fca9 	bl	2e274 <sniprintf>
   24922:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   24926:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2492a:	681b      	ldr	r3, [r3, #0]
   2492c:	4a2f      	ldr	r2, [pc, #188]	; (249ec <pdn_interface_close+0x1c4>)
   2492e:	4430      	add	r0, r6
   24930:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 249fc <pdn_interface_close+0x1d4>
   24934:	f009 fc9e 	bl	2e274 <sniprintf>
   24938:	4630      	mov	r0, r6
   2493a:	f8d8 9000 	ldr.w	r9, [r8]
   2493e:	2700      	movs	r7, #0
   24940:	f7ed fb9e 	bl	12080 <strlen>
   24944:	4631      	mov	r1, r6
   24946:	4602      	mov	r2, r0
   24948:	463b      	mov	r3, r7
   2494a:	4648      	mov	r0, r9
   2494c:	9701      	str	r7, [sp, #4]
   2494e:	9700      	str	r7, [sp, #0]
   24950:	f7ff fa4c 	bl	23dec <at_interface_write>
   24954:	4681      	mov	r9, r0
   24956:	4630      	mov	r0, r6
   24958:	f7ed fb92 	bl	12080 <strlen>
   2495c:	4548      	cmp	r0, r9
   2495e:	d139      	bne.n	249d4 <pdn_interface_close+0x1ac>
   24960:	463b      	mov	r3, r7
   24962:	e9cd 7700 	strd	r7, r7, [sp]
   24966:	f44f 7280 	mov.w	r2, #256	; 0x100
   2496a:	4631      	mov	r1, r6
   2496c:	f8d8 0000 	ldr.w	r0, [r8]
   24970:	f7ff fb90 	bl	24094 <at_interface_read>
   24974:	4607      	mov	r7, r0
   24976:	481e      	ldr	r0, [pc, #120]	; (249f0 <pdn_interface_close+0x1c8>)
   24978:	f7ed fb82 	bl	12080 <strlen>
   2497c:	4287      	cmp	r7, r0
   2497e:	db16      	blt.n	249ae <pdn_interface_close+0x186>
   24980:	4602      	mov	r2, r0
   24982:	4631      	mov	r1, r6
   24984:	481a      	ldr	r0, [pc, #104]	; (249f0 <pdn_interface_close+0x1c8>)
   24986:	f010 f9b8 	bl	34cfa <strncmp>
   2498a:	b980      	cbnz	r0, 249ae <pdn_interface_close+0x186>
   2498c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   24990:	e76a      	b.n	24868 <pdn_interface_close+0x40>
   24992:	2009      	movs	r0, #9
   24994:	f7f8 fd6c 	bl	1d470 <bsd_os_errno_set>
   24998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2499c:	e76a      	b.n	24874 <pdn_interface_close+0x4c>
   2499e:	4602      	mov	r2, r0
   249a0:	4631      	mov	r1, r6
   249a2:	4813      	ldr	r0, [pc, #76]	; (249f0 <pdn_interface_close+0x1c8>)
   249a4:	f010 f9a9 	bl	34cfa <strncmp>
   249a8:	2800      	cmp	r0, #0
   249aa:	d0aa      	beq.n	24902 <pdn_interface_close+0xda>
   249ac:	e79c      	b.n	248e8 <pdn_interface_close+0xc0>
   249ae:	4811      	ldr	r0, [pc, #68]	; (249f4 <pdn_interface_close+0x1cc>)
   249b0:	f7ed fb66 	bl	12080 <strlen>
   249b4:	490b      	ldr	r1, [pc, #44]	; (249e4 <pdn_interface_close+0x1bc>)
   249b6:	4602      	mov	r2, r0
   249b8:	480e      	ldr	r0, [pc, #56]	; (249f4 <pdn_interface_close+0x1cc>)
   249ba:	f010 f99e 	bl	34cfa <strncmp>
   249be:	b948      	cbnz	r0, 249d4 <pdn_interface_close+0x1ac>
   249c0:	2008      	movs	r0, #8
   249c2:	f7f8 fd55 	bl	1d470 <bsd_os_errno_set>
   249c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   249ca:	e74d      	b.n	24868 <pdn_interface_close+0x40>
   249cc:	2005      	movs	r0, #5
   249ce:	f7f8 fd4f 	bl	1d470 <bsd_os_errno_set>
   249d2:	e796      	b.n	24902 <pdn_interface_close+0xda>
   249d4:	2005      	movs	r0, #5
   249d6:	f7f8 fd4b 	bl	1d470 <bsd_os_errno_set>
   249da:	e7d7      	b.n	2498c <pdn_interface_close+0x164>
   249dc:	789a0000 	.word	0x789a0000
   249e0:	200227f4 	.word	0x200227f4
   249e4:	200226f4 	.word	0x200226f4
   249e8:	00036090 	.word	0x00036090
   249ec:	000360d8 	.word	0x000360d8
   249f0:	000360c8 	.word	0x000360c8
   249f4:	00036130 	.word	0x00036130
   249f8:	0003609c 	.word	0x0003609c
   249fc:	200226f0 	.word	0x200226f0

00024a00 <pdn_interface_setopt>:
   24a00:	b538      	push	{r3, r4, r5, lr}
   24a02:	f240 2502 	movw	r5, #514	; 0x202
   24a06:	42a9      	cmp	r1, r5
   24a08:	9c04      	ldr	r4, [sp, #16]
   24a0a:	d140      	bne.n	24a8e <pdn_interface_setopt+0x8e>
   24a0c:	2b00      	cmp	r3, #0
   24a0e:	d03e      	beq.n	24a8e <pdn_interface_setopt+0x8e>
   24a10:	2c00      	cmp	r4, #0
   24a12:	d03c      	beq.n	24a8e <pdn_interface_setopt+0x8e>
   24a14:	0c01      	lsrs	r1, r0, #16
   24a16:	4d22      	ldr	r5, [pc, #136]	; (24aa0 <pdn_interface_setopt+0xa0>)
   24a18:	0409      	lsls	r1, r1, #16
   24a1a:	42a9      	cmp	r1, r5
   24a1c:	d005      	beq.n	24a2a <pdn_interface_setopt+0x2a>
   24a1e:	2009      	movs	r0, #9
   24a20:	f7f8 fd26 	bl	1d470 <bsd_os_errno_set>
   24a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24a28:	bd38      	pop	{r3, r4, r5, pc}
   24a2a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   24a2e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   24a32:	2809      	cmp	r0, #9
   24a34:	dcf3      	bgt.n	24a1e <pdn_interface_setopt+0x1e>
   24a36:	491b      	ldr	r1, [pc, #108]	; (24aa4 <pdn_interface_setopt+0xa4>)
   24a38:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   24a3c:	2900      	cmp	r1, #0
   24a3e:	d0ee      	beq.n	24a1e <pdn_interface_setopt+0x1e>
   24a40:	6888      	ldr	r0, [r1, #8]
   24a42:	2800      	cmp	r0, #0
   24a44:	d0eb      	beq.n	24a1e <pdn_interface_setopt+0x1e>
   24a46:	2a01      	cmp	r2, #1
   24a48:	d128      	bne.n	24a9c <pdn_interface_setopt+0x9c>
   24a4a:	688a      	ldr	r2, [r1, #8]
   24a4c:	b1ea      	cbz	r2, 24a8a <pdn_interface_setopt+0x8a>
   24a4e:	688a      	ldr	r2, [r1, #8]
   24a50:	2a03      	cmp	r2, #3
   24a52:	d01a      	beq.n	24a8a <pdn_interface_setopt+0x8a>
   24a54:	688a      	ldr	r2, [r1, #8]
   24a56:	2a04      	cmp	r2, #4
   24a58:	d017      	beq.n	24a8a <pdn_interface_setopt+0x8a>
   24a5a:	08a2      	lsrs	r2, r4, #2
   24a5c:	1e50      	subs	r0, r2, #1
   24a5e:	2801      	cmp	r0, #1
   24a60:	d815      	bhi.n	24a8e <pdn_interface_setopt+0x8e>
   24a62:	07a0      	lsls	r0, r4, #30
   24a64:	d113      	bne.n	24a8e <pdn_interface_setopt+0x8e>
   24a66:	6818      	ldr	r0, [r3, #0]
   24a68:	2802      	cmp	r0, #2
   24a6a:	d012      	beq.n	24a92 <pdn_interface_setopt+0x92>
   24a6c:	280a      	cmp	r0, #10
   24a6e:	d10e      	bne.n	24a8e <pdn_interface_setopt+0x8e>
   24a70:	2002      	movs	r0, #2
   24a72:	2a02      	cmp	r2, #2
   24a74:	d106      	bne.n	24a84 <pdn_interface_setopt+0x84>
   24a76:	685b      	ldr	r3, [r3, #4]
   24a78:	2b02      	cmp	r3, #2
   24a7a:	d00c      	beq.n	24a96 <pdn_interface_setopt+0x96>
   24a7c:	2b0a      	cmp	r3, #10
   24a7e:	d106      	bne.n	24a8e <pdn_interface_setopt+0x8e>
   24a80:	f040 0002 	orr.w	r0, r0, #2
   24a84:	6708      	str	r0, [r1, #112]	; 0x70
   24a86:	2000      	movs	r0, #0
   24a88:	bd38      	pop	{r3, r4, r5, pc}
   24a8a:	200e      	movs	r0, #14
   24a8c:	e7c8      	b.n	24a20 <pdn_interface_setopt+0x20>
   24a8e:	2016      	movs	r0, #22
   24a90:	e7c6      	b.n	24a20 <pdn_interface_setopt+0x20>
   24a92:	2001      	movs	r0, #1
   24a94:	e7ed      	b.n	24a72 <pdn_interface_setopt+0x72>
   24a96:	f040 0001 	orr.w	r0, r0, #1
   24a9a:	e7f3      	b.n	24a84 <pdn_interface_setopt+0x84>
   24a9c:	202d      	movs	r0, #45	; 0x2d
   24a9e:	e7bf      	b.n	24a20 <pdn_interface_setopt+0x20>
   24aa0:	789a0000 	.word	0x789a0000
   24aa4:	200227f4 	.word	0x200227f4

00024aa8 <pdn_interface_getopt>:
   24aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24aac:	f240 2402 	movw	r4, #514	; 0x202
   24ab0:	b083      	sub	sp, #12
   24ab2:	42a1      	cmp	r1, r4
   24ab4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   24ab6:	f040 809f 	bne.w	24bf8 <pdn_interface_getopt+0x150>
   24aba:	461e      	mov	r6, r3
   24abc:	2b00      	cmp	r3, #0
   24abe:	f000 809b 	beq.w	24bf8 <pdn_interface_getopt+0x150>
   24ac2:	2d00      	cmp	r5, #0
   24ac4:	f000 8098 	beq.w	24bf8 <pdn_interface_getopt+0x150>
   24ac8:	0c03      	lsrs	r3, r0, #16
   24aca:	4955      	ldr	r1, [pc, #340]	; (24c20 <pdn_interface_getopt+0x178>)
   24acc:	041b      	lsls	r3, r3, #16
   24ace:	428b      	cmp	r3, r1
   24ad0:	f040 8094 	bne.w	24bfc <pdn_interface_getopt+0x154>
   24ad4:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   24ad8:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   24adc:	2c09      	cmp	r4, #9
   24ade:	f300 808d 	bgt.w	24bfc <pdn_interface_getopt+0x154>
   24ae2:	4b50      	ldr	r3, [pc, #320]	; (24c24 <pdn_interface_getopt+0x17c>)
   24ae4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   24ae8:	2b00      	cmp	r3, #0
   24aea:	f000 8087 	beq.w	24bfc <pdn_interface_getopt+0x154>
   24aee:	6899      	ldr	r1, [r3, #8]
   24af0:	2900      	cmp	r1, #0
   24af2:	f000 8083 	beq.w	24bfc <pdn_interface_getopt+0x154>
   24af6:	2a02      	cmp	r2, #2
   24af8:	d04c      	beq.n	24b94 <pdn_interface_getopt+0xec>
   24afa:	2a03      	cmp	r2, #3
   24afc:	d009      	beq.n	24b12 <pdn_interface_getopt+0x6a>
   24afe:	2a01      	cmp	r2, #1
   24b00:	d052      	beq.n	24ba8 <pdn_interface_getopt+0x100>
   24b02:	202d      	movs	r0, #45	; 0x2d
   24b04:	f7f8 fcb4 	bl	1d470 <bsd_os_errno_set>
   24b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24b0c:	b003      	add	sp, #12
   24b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24b12:	682b      	ldr	r3, [r5, #0]
   24b14:	2b00      	cmp	r3, #0
   24b16:	d06f      	beq.n	24bf8 <pdn_interface_getopt+0x150>
   24b18:	4a43      	ldr	r2, [pc, #268]	; (24c28 <pdn_interface_getopt+0x180>)
   24b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   24b1e:	4843      	ldr	r0, [pc, #268]	; (24c2c <pdn_interface_getopt+0x184>)
   24b20:	f8df 8114 	ldr.w	r8, [pc, #276]	; 24c38 <pdn_interface_getopt+0x190>
   24b24:	f009 fba6 	bl	2e274 <sniprintf>
   24b28:	4840      	ldr	r0, [pc, #256]	; (24c2c <pdn_interface_getopt+0x184>)
   24b2a:	f8d8 9000 	ldr.w	r9, [r8]
   24b2e:	2700      	movs	r7, #0
   24b30:	f7ed faa6 	bl	12080 <strlen>
   24b34:	463b      	mov	r3, r7
   24b36:	4602      	mov	r2, r0
   24b38:	493c      	ldr	r1, [pc, #240]	; (24c2c <pdn_interface_getopt+0x184>)
   24b3a:	4648      	mov	r0, r9
   24b3c:	9701      	str	r7, [sp, #4]
   24b3e:	9700      	str	r7, [sp, #0]
   24b40:	f7ff f954 	bl	23dec <at_interface_write>
   24b44:	4681      	mov	r9, r0
   24b46:	4839      	ldr	r0, [pc, #228]	; (24c2c <pdn_interface_getopt+0x184>)
   24b48:	f7ed fa9a 	bl	12080 <strlen>
   24b4c:	4548      	cmp	r0, r9
   24b4e:	d160      	bne.n	24c12 <pdn_interface_getopt+0x16a>
   24b50:	463b      	mov	r3, r7
   24b52:	e9cd 7700 	strd	r7, r7, [sp]
   24b56:	f44f 7280 	mov.w	r2, #256	; 0x100
   24b5a:	4934      	ldr	r1, [pc, #208]	; (24c2c <pdn_interface_getopt+0x184>)
   24b5c:	f8d8 0000 	ldr.w	r0, [r8]
   24b60:	f7ff fa98 	bl	24094 <at_interface_read>
   24b64:	4607      	mov	r7, r0
   24b66:	4832      	ldr	r0, [pc, #200]	; (24c30 <pdn_interface_getopt+0x188>)
   24b68:	f7ed fa8a 	bl	12080 <strlen>
   24b6c:	4287      	cmp	r7, r0
   24b6e:	db32      	blt.n	24bd6 <pdn_interface_getopt+0x12e>
   24b70:	4602      	mov	r2, r0
   24b72:	492e      	ldr	r1, [pc, #184]	; (24c2c <pdn_interface_getopt+0x184>)
   24b74:	482e      	ldr	r0, [pc, #184]	; (24c30 <pdn_interface_getopt+0x188>)
   24b76:	f010 f8c0 	bl	34cfa <strncmp>
   24b7a:	4607      	mov	r7, r0
   24b7c:	bb58      	cbnz	r0, 24bd6 <pdn_interface_getopt+0x12e>
   24b7e:	4620      	mov	r0, r4
   24b80:	492a      	ldr	r1, [pc, #168]	; (24c2c <pdn_interface_getopt+0x184>)
   24b82:	f7ff fb45 	bl	24210 <pdn_state_get_parser>
   24b86:	2800      	cmp	r0, #0
   24b88:	dbbc      	blt.n	24b04 <pdn_interface_getopt+0x5c>
   24b8a:	2301      	movs	r3, #1
   24b8c:	7030      	strb	r0, [r6, #0]
   24b8e:	4638      	mov	r0, r7
   24b90:	602b      	str	r3, [r5, #0]
   24b92:	e7bb      	b.n	24b0c <pdn_interface_getopt+0x64>
   24b94:	682a      	ldr	r2, [r5, #0]
   24b96:	b37a      	cbz	r2, 24bf8 <pdn_interface_getopt+0x150>
   24b98:	2201      	movs	r2, #1
   24b9a:	2000      	movs	r0, #0
   24b9c:	681b      	ldr	r3, [r3, #0]
   24b9e:	7033      	strb	r3, [r6, #0]
   24ba0:	602a      	str	r2, [r5, #0]
   24ba2:	b003      	add	sp, #12
   24ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24ba8:	689a      	ldr	r2, [r3, #8]
   24baa:	b31a      	cbz	r2, 24bf4 <pdn_interface_getopt+0x14c>
   24bac:	689a      	ldr	r2, [r3, #8]
   24bae:	2a04      	cmp	r2, #4
   24bb0:	d020      	beq.n	24bf4 <pdn_interface_getopt+0x14c>
   24bb2:	682a      	ldr	r2, [r5, #0]
   24bb4:	2a07      	cmp	r2, #7
   24bb6:	d91f      	bls.n	24bf8 <pdn_interface_getopt+0x150>
   24bb8:	f012 0203 	ands.w	r2, r2, #3
   24bbc:	d11c      	bne.n	24bf8 <pdn_interface_getopt+0x150>
   24bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   24bc0:	0799      	lsls	r1, r3, #30
   24bc2:	d421      	bmi.n	24c08 <pdn_interface_getopt+0x160>
   24bc4:	2104      	movs	r1, #4
   24bc6:	07db      	lsls	r3, r3, #31
   24bc8:	d502      	bpl.n	24bd0 <pdn_interface_getopt+0x128>
   24bca:	2302      	movs	r3, #2
   24bcc:	50b3      	str	r3, [r6, r2]
   24bce:	460a      	mov	r2, r1
   24bd0:	602a      	str	r2, [r5, #0]
   24bd2:	2000      	movs	r0, #0
   24bd4:	e79a      	b.n	24b0c <pdn_interface_getopt+0x64>
   24bd6:	4817      	ldr	r0, [pc, #92]	; (24c34 <pdn_interface_getopt+0x18c>)
   24bd8:	f7ed fa52 	bl	12080 <strlen>
   24bdc:	4913      	ldr	r1, [pc, #76]	; (24c2c <pdn_interface_getopt+0x184>)
   24bde:	4602      	mov	r2, r0
   24be0:	4814      	ldr	r0, [pc, #80]	; (24c34 <pdn_interface_getopt+0x18c>)
   24be2:	f010 f88a 	bl	34cfa <strncmp>
   24be6:	b9a0      	cbnz	r0, 24c12 <pdn_interface_getopt+0x16a>
   24be8:	2008      	movs	r0, #8
   24bea:	f7f8 fc41 	bl	1d470 <bsd_os_errno_set>
   24bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24bf2:	e787      	b.n	24b04 <pdn_interface_getopt+0x5c>
   24bf4:	200e      	movs	r0, #14
   24bf6:	e785      	b.n	24b04 <pdn_interface_getopt+0x5c>
   24bf8:	2016      	movs	r0, #22
   24bfa:	e783      	b.n	24b04 <pdn_interface_getopt+0x5c>
   24bfc:	2009      	movs	r0, #9
   24bfe:	f7f8 fc37 	bl	1d470 <bsd_os_errno_set>
   24c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c06:	e781      	b.n	24b0c <pdn_interface_getopt+0x64>
   24c08:	220a      	movs	r2, #10
   24c0a:	2108      	movs	r1, #8
   24c0c:	6032      	str	r2, [r6, #0]
   24c0e:	2204      	movs	r2, #4
   24c10:	e7d9      	b.n	24bc6 <pdn_interface_getopt+0x11e>
   24c12:	2005      	movs	r0, #5
   24c14:	f7f8 fc2c 	bl	1d470 <bsd_os_errno_set>
   24c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c1c:	e772      	b.n	24b04 <pdn_interface_getopt+0x5c>
   24c1e:	bf00      	nop
   24c20:	789a0000 	.word	0x789a0000
   24c24:	200227f4 	.word	0x200227f4
   24c28:	00036100 	.word	0x00036100
   24c2c:	200226f4 	.word	0x200226f4
   24c30:	0003610c 	.word	0x0003610c
   24c34:	00036130 	.word	0x00036130
   24c38:	200226f0 	.word	0x200226f0

00024c3c <pdn_interface_pdn_id_get>:
   24c3c:	2900      	cmp	r1, #0
   24c3e:	f000 83b9 	beq.w	253b4 <pdn_interface_pdn_id_get+0x778>
   24c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24c46:	4ca3      	ldr	r4, [pc, #652]	; (24ed4 <pdn_interface_pdn_id_get+0x298>)
   24c48:	2802      	cmp	r0, #2
   24c4a:	b083      	sub	sp, #12
   24c4c:	460d      	mov	r5, r1
   24c4e:	6823      	ldr	r3, [r4, #0]
   24c50:	f000 8094 	beq.w	24d7c <pdn_interface_pdn_id_get+0x140>
   24c54:	280a      	cmp	r0, #10
   24c56:	d03f      	beq.n	24cd8 <pdn_interface_pdn_id_get+0x9c>
   24c58:	b11b      	cbz	r3, 24c62 <pdn_interface_pdn_id_get+0x26>
   24c5a:	689b      	ldr	r3, [r3, #8]
   24c5c:	2b03      	cmp	r3, #3
   24c5e:	f000 8127 	beq.w	24eb0 <pdn_interface_pdn_id_get+0x274>
   24c62:	6863      	ldr	r3, [r4, #4]
   24c64:	b11b      	cbz	r3, 24c6e <pdn_interface_pdn_id_get+0x32>
   24c66:	689b      	ldr	r3, [r3, #8]
   24c68:	2b03      	cmp	r3, #3
   24c6a:	f000 8110 	beq.w	24e8e <pdn_interface_pdn_id_get+0x252>
   24c6e:	68a3      	ldr	r3, [r4, #8]
   24c70:	b11b      	cbz	r3, 24c7a <pdn_interface_pdn_id_get+0x3e>
   24c72:	689b      	ldr	r3, [r3, #8]
   24c74:	2b03      	cmp	r3, #3
   24c76:	f000 80f9 	beq.w	24e6c <pdn_interface_pdn_id_get+0x230>
   24c7a:	68e3      	ldr	r3, [r4, #12]
   24c7c:	b11b      	cbz	r3, 24c86 <pdn_interface_pdn_id_get+0x4a>
   24c7e:	689b      	ldr	r3, [r3, #8]
   24c80:	2b03      	cmp	r3, #3
   24c82:	f000 80e2 	beq.w	24e4a <pdn_interface_pdn_id_get+0x20e>
   24c86:	6923      	ldr	r3, [r4, #16]
   24c88:	b11b      	cbz	r3, 24c92 <pdn_interface_pdn_id_get+0x56>
   24c8a:	689b      	ldr	r3, [r3, #8]
   24c8c:	2b03      	cmp	r3, #3
   24c8e:	f000 8123 	beq.w	24ed8 <pdn_interface_pdn_id_get+0x29c>
   24c92:	6963      	ldr	r3, [r4, #20]
   24c94:	b11b      	cbz	r3, 24c9e <pdn_interface_pdn_id_get+0x62>
   24c96:	689b      	ldr	r3, [r3, #8]
   24c98:	2b03      	cmp	r3, #3
   24c9a:	f000 8161 	beq.w	24f60 <pdn_interface_pdn_id_get+0x324>
   24c9e:	69a3      	ldr	r3, [r4, #24]
   24ca0:	b11b      	cbz	r3, 24caa <pdn_interface_pdn_id_get+0x6e>
   24ca2:	689b      	ldr	r3, [r3, #8]
   24ca4:	2b03      	cmp	r3, #3
   24ca6:	f000 814a 	beq.w	24f3e <pdn_interface_pdn_id_get+0x302>
   24caa:	69e3      	ldr	r3, [r4, #28]
   24cac:	b11b      	cbz	r3, 24cb6 <pdn_interface_pdn_id_get+0x7a>
   24cae:	689b      	ldr	r3, [r3, #8]
   24cb0:	2b03      	cmp	r3, #3
   24cb2:	f000 8133 	beq.w	24f1c <pdn_interface_pdn_id_get+0x2e0>
   24cb6:	6a23      	ldr	r3, [r4, #32]
   24cb8:	b11b      	cbz	r3, 24cc2 <pdn_interface_pdn_id_get+0x86>
   24cba:	689b      	ldr	r3, [r3, #8]
   24cbc:	2b03      	cmp	r3, #3
   24cbe:	f000 811c 	beq.w	24efa <pdn_interface_pdn_id_get+0x2be>
   24cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24cc4:	b11b      	cbz	r3, 24cce <pdn_interface_pdn_id_get+0x92>
   24cc6:	689b      	ldr	r3, [r3, #8]
   24cc8:	2b03      	cmp	r3, #3
   24cca:	f000 80ad 	beq.w	24e28 <pdn_interface_pdn_id_get+0x1ec>
   24cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24cd2:	b003      	add	sp, #12
   24cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24cd8:	b11b      	cbz	r3, 24ce2 <pdn_interface_pdn_id_get+0xa6>
   24cda:	689b      	ldr	r3, [r3, #8]
   24cdc:	2b03      	cmp	r3, #3
   24cde:	f000 8335 	beq.w	2534c <pdn_interface_pdn_id_get+0x710>
   24ce2:	6863      	ldr	r3, [r4, #4]
   24ce4:	b11b      	cbz	r3, 24cee <pdn_interface_pdn_id_get+0xb2>
   24ce6:	689b      	ldr	r3, [r3, #8]
   24ce8:	2b03      	cmp	r3, #3
   24cea:	f000 82fd 	beq.w	252e8 <pdn_interface_pdn_id_get+0x6ac>
   24cee:	68a3      	ldr	r3, [r4, #8]
   24cf0:	b11b      	cbz	r3, 24cfa <pdn_interface_pdn_id_get+0xbe>
   24cf2:	689b      	ldr	r3, [r3, #8]
   24cf4:	2b03      	cmp	r3, #3
   24cf6:	f000 82d5 	beq.w	252a4 <pdn_interface_pdn_id_get+0x668>
   24cfa:	68e3      	ldr	r3, [r4, #12]
   24cfc:	b11b      	cbz	r3, 24d06 <pdn_interface_pdn_id_get+0xca>
   24cfe:	689e      	ldr	r6, [r3, #8]
   24d00:	2e03      	cmp	r6, #3
   24d02:	f000 81f0 	beq.w	250e6 <pdn_interface_pdn_id_get+0x4aa>
   24d06:	6923      	ldr	r3, [r4, #16]
   24d08:	b11b      	cbz	r3, 24d12 <pdn_interface_pdn_id_get+0xd6>
   24d0a:	689b      	ldr	r3, [r3, #8]
   24d0c:	2b03      	cmp	r3, #3
   24d0e:	f000 8203 	beq.w	25118 <pdn_interface_pdn_id_get+0x4dc>
   24d12:	6963      	ldr	r3, [r4, #20]
   24d14:	b11b      	cbz	r3, 24d1e <pdn_interface_pdn_id_get+0xe2>
   24d16:	689b      	ldr	r3, [r3, #8]
   24d18:	2b03      	cmp	r3, #3
   24d1a:	f000 8215 	beq.w	25148 <pdn_interface_pdn_id_get+0x50c>
   24d1e:	69a3      	ldr	r3, [r4, #24]
   24d20:	b11b      	cbz	r3, 24d2a <pdn_interface_pdn_id_get+0xee>
   24d22:	689b      	ldr	r3, [r3, #8]
   24d24:	2b03      	cmp	r3, #3
   24d26:	f000 8227 	beq.w	25178 <pdn_interface_pdn_id_get+0x53c>
   24d2a:	69e3      	ldr	r3, [r4, #28]
   24d2c:	b11b      	cbz	r3, 24d36 <pdn_interface_pdn_id_get+0xfa>
   24d2e:	689b      	ldr	r3, [r3, #8]
   24d30:	2b03      	cmp	r3, #3
   24d32:	f000 8239 	beq.w	251a8 <pdn_interface_pdn_id_get+0x56c>
   24d36:	6a23      	ldr	r3, [r4, #32]
   24d38:	b11b      	cbz	r3, 24d42 <pdn_interface_pdn_id_get+0x106>
   24d3a:	689b      	ldr	r3, [r3, #8]
   24d3c:	2b03      	cmp	r3, #3
   24d3e:	f000 824d 	beq.w	251dc <pdn_interface_pdn_id_get+0x5a0>
   24d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24d44:	2b00      	cmp	r3, #0
   24d46:	d0c2      	beq.n	24cce <pdn_interface_pdn_id_get+0x92>
   24d48:	689b      	ldr	r3, [r3, #8]
   24d4a:	2b03      	cmp	r3, #3
   24d4c:	d1bf      	bne.n	24cce <pdn_interface_pdn_id_get+0x92>
   24d4e:	4628      	mov	r0, r5
   24d50:	f7ed f996 	bl	12080 <strlen>
   24d54:	4606      	mov	r6, r0
   24d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24d58:	300c      	adds	r0, #12
   24d5a:	f7ed f991 	bl	12080 <strlen>
   24d5e:	42b0      	cmp	r0, r6
   24d60:	d1b5      	bne.n	24cce <pdn_interface_pdn_id_get+0x92>
   24d62:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24d64:	4628      	mov	r0, r5
   24d66:	310c      	adds	r1, #12
   24d68:	f7ed f980 	bl	1206c <strcmp>
   24d6c:	2800      	cmp	r0, #0
   24d6e:	d1ae      	bne.n	24cce <pdn_interface_pdn_id_get+0x92>
   24d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24d74:	0792      	lsls	r2, r2, #30
   24d76:	d5aa      	bpl.n	24cce <pdn_interface_pdn_id_get+0x92>
   24d78:	2609      	movs	r6, #9
   24d7a:	e11a      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   24d7c:	b11b      	cbz	r3, 24d86 <pdn_interface_pdn_id_get+0x14a>
   24d7e:	689b      	ldr	r3, [r3, #8]
   24d80:	2b03      	cmp	r3, #3
   24d82:	f000 82fd 	beq.w	25380 <pdn_interface_pdn_id_get+0x744>
   24d86:	6863      	ldr	r3, [r4, #4]
   24d88:	b11b      	cbz	r3, 24d92 <pdn_interface_pdn_id_get+0x156>
   24d8a:	689b      	ldr	r3, [r3, #8]
   24d8c:	2b03      	cmp	r3, #3
   24d8e:	f000 82c5 	beq.w	2531c <pdn_interface_pdn_id_get+0x6e0>
   24d92:	68a3      	ldr	r3, [r4, #8]
   24d94:	b11b      	cbz	r3, 24d9e <pdn_interface_pdn_id_get+0x162>
   24d96:	689b      	ldr	r3, [r3, #8]
   24d98:	2b03      	cmp	r3, #3
   24d9a:	f000 8269 	beq.w	25270 <pdn_interface_pdn_id_get+0x634>
   24d9e:	68e3      	ldr	r3, [r4, #12]
   24da0:	b11b      	cbz	r3, 24daa <pdn_interface_pdn_id_get+0x16e>
   24da2:	689e      	ldr	r6, [r3, #8]
   24da4:	2e03      	cmp	r6, #3
   24da6:	f000 80ec 	beq.w	24f82 <pdn_interface_pdn_id_get+0x346>
   24daa:	6923      	ldr	r3, [r4, #16]
   24dac:	b11b      	cbz	r3, 24db6 <pdn_interface_pdn_id_get+0x17a>
   24dae:	689b      	ldr	r3, [r3, #8]
   24db0:	2b03      	cmp	r3, #3
   24db2:	f000 814a 	beq.w	2504a <pdn_interface_pdn_id_get+0x40e>
   24db6:	6963      	ldr	r3, [r4, #20]
   24db8:	b11b      	cbz	r3, 24dc2 <pdn_interface_pdn_id_get+0x186>
   24dba:	689b      	ldr	r3, [r3, #8]
   24dbc:	2b03      	cmp	r3, #3
   24dbe:	f000 815e 	beq.w	2507e <pdn_interface_pdn_id_get+0x442>
   24dc2:	69a3      	ldr	r3, [r4, #24]
   24dc4:	b11b      	cbz	r3, 24dce <pdn_interface_pdn_id_get+0x192>
   24dc6:	689b      	ldr	r3, [r3, #8]
   24dc8:	2b03      	cmp	r3, #3
   24dca:	f000 8172 	beq.w	250b2 <pdn_interface_pdn_id_get+0x476>
   24dce:	69e3      	ldr	r3, [r4, #28]
   24dd0:	b11b      	cbz	r3, 24dda <pdn_interface_pdn_id_get+0x19e>
   24dd2:	689b      	ldr	r3, [r3, #8]
   24dd4:	2b03      	cmp	r3, #3
   24dd6:	f000 821b 	beq.w	25210 <pdn_interface_pdn_id_get+0x5d4>
   24dda:	6a23      	ldr	r3, [r4, #32]
   24ddc:	b11b      	cbz	r3, 24de6 <pdn_interface_pdn_id_get+0x1aa>
   24dde:	689b      	ldr	r3, [r3, #8]
   24de0:	2b03      	cmp	r3, #3
   24de2:	f000 822d 	beq.w	25240 <pdn_interface_pdn_id_get+0x604>
   24de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24de8:	2b00      	cmp	r3, #0
   24dea:	f43f af70 	beq.w	24cce <pdn_interface_pdn_id_get+0x92>
   24dee:	689b      	ldr	r3, [r3, #8]
   24df0:	2b03      	cmp	r3, #3
   24df2:	f47f af6c 	bne.w	24cce <pdn_interface_pdn_id_get+0x92>
   24df6:	4628      	mov	r0, r5
   24df8:	f7ed f942 	bl	12080 <strlen>
   24dfc:	4606      	mov	r6, r0
   24dfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24e00:	300c      	adds	r0, #12
   24e02:	f7ed f93d 	bl	12080 <strlen>
   24e06:	4286      	cmp	r6, r0
   24e08:	f47f af61 	bne.w	24cce <pdn_interface_pdn_id_get+0x92>
   24e0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24e0e:	4628      	mov	r0, r5
   24e10:	310c      	adds	r1, #12
   24e12:	f7ed f92b 	bl	1206c <strcmp>
   24e16:	2800      	cmp	r0, #0
   24e18:	f47f af59 	bne.w	24cce <pdn_interface_pdn_id_get+0x92>
   24e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24e20:	07d2      	lsls	r2, r2, #31
   24e22:	f57f af54 	bpl.w	24cce <pdn_interface_pdn_id_get+0x92>
   24e26:	e7a7      	b.n	24d78 <pdn_interface_pdn_id_get+0x13c>
   24e28:	4628      	mov	r0, r5
   24e2a:	f7ed f929 	bl	12080 <strlen>
   24e2e:	4606      	mov	r6, r0
   24e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24e32:	300c      	adds	r0, #12
   24e34:	f7ed f924 	bl	12080 <strlen>
   24e38:	42b0      	cmp	r0, r6
   24e3a:	f47f af48 	bne.w	24cce <pdn_interface_pdn_id_get+0x92>
   24e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24e40:	4628      	mov	r0, r5
   24e42:	310c      	adds	r1, #12
   24e44:	f7ed f912 	bl	1206c <strcmp>
   24e48:	e741      	b.n	24cce <pdn_interface_pdn_id_get+0x92>
   24e4a:	4628      	mov	r0, r5
   24e4c:	f7ed f918 	bl	12080 <strlen>
   24e50:	4606      	mov	r6, r0
   24e52:	68e0      	ldr	r0, [r4, #12]
   24e54:	300c      	adds	r0, #12
   24e56:	f7ed f913 	bl	12080 <strlen>
   24e5a:	4286      	cmp	r6, r0
   24e5c:	f47f af13 	bne.w	24c86 <pdn_interface_pdn_id_get+0x4a>
   24e60:	68e1      	ldr	r1, [r4, #12]
   24e62:	4628      	mov	r0, r5
   24e64:	310c      	adds	r1, #12
   24e66:	f7ed f901 	bl	1206c <strcmp>
   24e6a:	e70c      	b.n	24c86 <pdn_interface_pdn_id_get+0x4a>
   24e6c:	4628      	mov	r0, r5
   24e6e:	f7ed f907 	bl	12080 <strlen>
   24e72:	4606      	mov	r6, r0
   24e74:	68a0      	ldr	r0, [r4, #8]
   24e76:	300c      	adds	r0, #12
   24e78:	f7ed f902 	bl	12080 <strlen>
   24e7c:	4286      	cmp	r6, r0
   24e7e:	f47f aefc 	bne.w	24c7a <pdn_interface_pdn_id_get+0x3e>
   24e82:	68a1      	ldr	r1, [r4, #8]
   24e84:	4628      	mov	r0, r5
   24e86:	310c      	adds	r1, #12
   24e88:	f7ed f8f0 	bl	1206c <strcmp>
   24e8c:	e6f5      	b.n	24c7a <pdn_interface_pdn_id_get+0x3e>
   24e8e:	4628      	mov	r0, r5
   24e90:	f7ed f8f6 	bl	12080 <strlen>
   24e94:	4606      	mov	r6, r0
   24e96:	6860      	ldr	r0, [r4, #4]
   24e98:	300c      	adds	r0, #12
   24e9a:	f7ed f8f1 	bl	12080 <strlen>
   24e9e:	4286      	cmp	r6, r0
   24ea0:	f47f aee5 	bne.w	24c6e <pdn_interface_pdn_id_get+0x32>
   24ea4:	6861      	ldr	r1, [r4, #4]
   24ea6:	4628      	mov	r0, r5
   24ea8:	310c      	adds	r1, #12
   24eaa:	f7ed f8df 	bl	1206c <strcmp>
   24eae:	e6de      	b.n	24c6e <pdn_interface_pdn_id_get+0x32>
   24eb0:	4608      	mov	r0, r1
   24eb2:	f7ed f8e5 	bl	12080 <strlen>
   24eb6:	4606      	mov	r6, r0
   24eb8:	6820      	ldr	r0, [r4, #0]
   24eba:	300c      	adds	r0, #12
   24ebc:	f7ed f8e0 	bl	12080 <strlen>
   24ec0:	4286      	cmp	r6, r0
   24ec2:	f47f aece 	bne.w	24c62 <pdn_interface_pdn_id_get+0x26>
   24ec6:	6821      	ldr	r1, [r4, #0]
   24ec8:	4628      	mov	r0, r5
   24eca:	310c      	adds	r1, #12
   24ecc:	f7ed f8ce 	bl	1206c <strcmp>
   24ed0:	e6c7      	b.n	24c62 <pdn_interface_pdn_id_get+0x26>
   24ed2:	bf00      	nop
   24ed4:	200227f4 	.word	0x200227f4
   24ed8:	4628      	mov	r0, r5
   24eda:	f7ed f8d1 	bl	12080 <strlen>
   24ede:	4606      	mov	r6, r0
   24ee0:	6920      	ldr	r0, [r4, #16]
   24ee2:	300c      	adds	r0, #12
   24ee4:	f7ed f8cc 	bl	12080 <strlen>
   24ee8:	4286      	cmp	r6, r0
   24eea:	f47f aed2 	bne.w	24c92 <pdn_interface_pdn_id_get+0x56>
   24eee:	6921      	ldr	r1, [r4, #16]
   24ef0:	4628      	mov	r0, r5
   24ef2:	310c      	adds	r1, #12
   24ef4:	f7ed f8ba 	bl	1206c <strcmp>
   24ef8:	e6cb      	b.n	24c92 <pdn_interface_pdn_id_get+0x56>
   24efa:	4628      	mov	r0, r5
   24efc:	f7ed f8c0 	bl	12080 <strlen>
   24f00:	4606      	mov	r6, r0
   24f02:	6a20      	ldr	r0, [r4, #32]
   24f04:	300c      	adds	r0, #12
   24f06:	f7ed f8bb 	bl	12080 <strlen>
   24f0a:	4286      	cmp	r6, r0
   24f0c:	f47f aed9 	bne.w	24cc2 <pdn_interface_pdn_id_get+0x86>
   24f10:	6a21      	ldr	r1, [r4, #32]
   24f12:	4628      	mov	r0, r5
   24f14:	310c      	adds	r1, #12
   24f16:	f7ed f8a9 	bl	1206c <strcmp>
   24f1a:	e6d2      	b.n	24cc2 <pdn_interface_pdn_id_get+0x86>
   24f1c:	4628      	mov	r0, r5
   24f1e:	f7ed f8af 	bl	12080 <strlen>
   24f22:	4606      	mov	r6, r0
   24f24:	69e0      	ldr	r0, [r4, #28]
   24f26:	300c      	adds	r0, #12
   24f28:	f7ed f8aa 	bl	12080 <strlen>
   24f2c:	4286      	cmp	r6, r0
   24f2e:	f47f aec2 	bne.w	24cb6 <pdn_interface_pdn_id_get+0x7a>
   24f32:	69e1      	ldr	r1, [r4, #28]
   24f34:	4628      	mov	r0, r5
   24f36:	310c      	adds	r1, #12
   24f38:	f7ed f898 	bl	1206c <strcmp>
   24f3c:	e6bb      	b.n	24cb6 <pdn_interface_pdn_id_get+0x7a>
   24f3e:	4628      	mov	r0, r5
   24f40:	f7ed f89e 	bl	12080 <strlen>
   24f44:	4606      	mov	r6, r0
   24f46:	69a0      	ldr	r0, [r4, #24]
   24f48:	300c      	adds	r0, #12
   24f4a:	f7ed f899 	bl	12080 <strlen>
   24f4e:	4286      	cmp	r6, r0
   24f50:	f47f aeab 	bne.w	24caa <pdn_interface_pdn_id_get+0x6e>
   24f54:	69a1      	ldr	r1, [r4, #24]
   24f56:	4628      	mov	r0, r5
   24f58:	310c      	adds	r1, #12
   24f5a:	f7ed f887 	bl	1206c <strcmp>
   24f5e:	e6a4      	b.n	24caa <pdn_interface_pdn_id_get+0x6e>
   24f60:	4628      	mov	r0, r5
   24f62:	f7ed f88d 	bl	12080 <strlen>
   24f66:	4606      	mov	r6, r0
   24f68:	6960      	ldr	r0, [r4, #20]
   24f6a:	300c      	adds	r0, #12
   24f6c:	f7ed f888 	bl	12080 <strlen>
   24f70:	4286      	cmp	r6, r0
   24f72:	f47f ae94 	bne.w	24c9e <pdn_interface_pdn_id_get+0x62>
   24f76:	6961      	ldr	r1, [r4, #20]
   24f78:	4628      	mov	r0, r5
   24f7a:	310c      	adds	r1, #12
   24f7c:	f7ed f876 	bl	1206c <strcmp>
   24f80:	e68d      	b.n	24c9e <pdn_interface_pdn_id_get+0x62>
   24f82:	4628      	mov	r0, r5
   24f84:	f7ed f87c 	bl	12080 <strlen>
   24f88:	4607      	mov	r7, r0
   24f8a:	68e0      	ldr	r0, [r4, #12]
   24f8c:	300c      	adds	r0, #12
   24f8e:	f7ed f877 	bl	12080 <strlen>
   24f92:	4287      	cmp	r7, r0
   24f94:	f47f af09 	bne.w	24daa <pdn_interface_pdn_id_get+0x16e>
   24f98:	68e1      	ldr	r1, [r4, #12]
   24f9a:	4628      	mov	r0, r5
   24f9c:	310c      	adds	r1, #12
   24f9e:	f7ed f865 	bl	1206c <strcmp>
   24fa2:	2800      	cmp	r0, #0
   24fa4:	f47f af01 	bne.w	24daa <pdn_interface_pdn_id_get+0x16e>
   24fa8:	68e3      	ldr	r3, [r4, #12]
   24faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   24fac:	07d1      	lsls	r1, r2, #31
   24fae:	f57f aefc 	bpl.w	24daa <pdn_interface_pdn_id_get+0x16e>
   24fb2:	6858      	ldr	r0, [r3, #4]
   24fb4:	1c43      	adds	r3, r0, #1
   24fb6:	f47f ae8c 	bne.w	24cd2 <pdn_interface_pdn_id_get+0x96>
   24fba:	4dc6      	ldr	r5, [pc, #792]	; (252d4 <pdn_interface_pdn_id_get+0x698>)
   24fbc:	4ac6      	ldr	r2, [pc, #792]	; (252d8 <pdn_interface_pdn_id_get+0x69c>)
   24fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
   24fc2:	4628      	mov	r0, r5
   24fc4:	f009 f956 	bl	2e274 <sniprintf>
   24fc8:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   24fcc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   24fd0:	681b      	ldr	r3, [r3, #0]
   24fd2:	4ac2      	ldr	r2, [pc, #776]	; (252dc <pdn_interface_pdn_id_get+0x6a0>)
   24fd4:	4428      	add	r0, r5
   24fd6:	f8df 830c 	ldr.w	r8, [pc, #780]	; 252e4 <pdn_interface_pdn_id_get+0x6a8>
   24fda:	f009 f94b 	bl	2e274 <sniprintf>
   24fde:	4628      	mov	r0, r5
   24fe0:	f8d8 9000 	ldr.w	r9, [r8]
   24fe4:	2700      	movs	r7, #0
   24fe6:	f7ed f84b 	bl	12080 <strlen>
   24fea:	4629      	mov	r1, r5
   24fec:	4602      	mov	r2, r0
   24fee:	463b      	mov	r3, r7
   24ff0:	4648      	mov	r0, r9
   24ff2:	9701      	str	r7, [sp, #4]
   24ff4:	9700      	str	r7, [sp, #0]
   24ff6:	f7fe fef9 	bl	23dec <at_interface_write>
   24ffa:	4681      	mov	r9, r0
   24ffc:	4628      	mov	r0, r5
   24ffe:	f7ed f83f 	bl	12080 <strlen>
   25002:	4548      	cmp	r0, r9
   25004:	f040 81e9 	bne.w	253da <pdn_interface_pdn_id_get+0x79e>
   25008:	463b      	mov	r3, r7
   2500a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2500e:	e9cd 7700 	strd	r7, r7, [sp]
   25012:	4629      	mov	r1, r5
   25014:	f8d8 0000 	ldr.w	r0, [r8]
   25018:	f7ff f83c 	bl	24094 <at_interface_read>
   2501c:	4607      	mov	r7, r0
   2501e:	48b0      	ldr	r0, [pc, #704]	; (252e0 <pdn_interface_pdn_id_get+0x6a4>)
   25020:	f7ed f82e 	bl	12080 <strlen>
   25024:	4287      	cmp	r7, r0
   25026:	4602      	mov	r2, r0
   25028:	f2c0 81c7 	blt.w	253ba <pdn_interface_pdn_id_get+0x77e>
   2502c:	4629      	mov	r1, r5
   2502e:	48ac      	ldr	r0, [pc, #688]	; (252e0 <pdn_interface_pdn_id_get+0x6a4>)
   25030:	f00f fe63 	bl	34cfa <strncmp>
   25034:	2800      	cmp	r0, #0
   25036:	f040 81c0 	bne.w	253ba <pdn_interface_pdn_id_get+0x77e>
   2503a:	4629      	mov	r1, r5
   2503c:	4630      	mov	r0, r6
   2503e:	f7ff f91d 	bl	2427c <pdn_id_get_parser>
   25042:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   25046:	6858      	ldr	r0, [r3, #4]
   25048:	e643      	b.n	24cd2 <pdn_interface_pdn_id_get+0x96>
   2504a:	4628      	mov	r0, r5
   2504c:	f7ed f818 	bl	12080 <strlen>
   25050:	4606      	mov	r6, r0
   25052:	6920      	ldr	r0, [r4, #16]
   25054:	300c      	adds	r0, #12
   25056:	f7ed f813 	bl	12080 <strlen>
   2505a:	4286      	cmp	r6, r0
   2505c:	f47f aeab 	bne.w	24db6 <pdn_interface_pdn_id_get+0x17a>
   25060:	6921      	ldr	r1, [r4, #16]
   25062:	4628      	mov	r0, r5
   25064:	310c      	adds	r1, #12
   25066:	f7ed f801 	bl	1206c <strcmp>
   2506a:	2800      	cmp	r0, #0
   2506c:	f47f aea3 	bne.w	24db6 <pdn_interface_pdn_id_get+0x17a>
   25070:	6923      	ldr	r3, [r4, #16]
   25072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25074:	07d2      	lsls	r2, r2, #31
   25076:	f57f ae9e 	bpl.w	24db6 <pdn_interface_pdn_id_get+0x17a>
   2507a:	2604      	movs	r6, #4
   2507c:	e799      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   2507e:	4628      	mov	r0, r5
   25080:	f7ec fffe 	bl	12080 <strlen>
   25084:	4606      	mov	r6, r0
   25086:	6960      	ldr	r0, [r4, #20]
   25088:	300c      	adds	r0, #12
   2508a:	f7ec fff9 	bl	12080 <strlen>
   2508e:	4286      	cmp	r6, r0
   25090:	f47f ae97 	bne.w	24dc2 <pdn_interface_pdn_id_get+0x186>
   25094:	6961      	ldr	r1, [r4, #20]
   25096:	4628      	mov	r0, r5
   25098:	310c      	adds	r1, #12
   2509a:	f7ec ffe7 	bl	1206c <strcmp>
   2509e:	2800      	cmp	r0, #0
   250a0:	f47f ae8f 	bne.w	24dc2 <pdn_interface_pdn_id_get+0x186>
   250a4:	6963      	ldr	r3, [r4, #20]
   250a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   250a8:	07d7      	lsls	r7, r2, #31
   250aa:	f57f ae8a 	bpl.w	24dc2 <pdn_interface_pdn_id_get+0x186>
   250ae:	2605      	movs	r6, #5
   250b0:	e77f      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   250b2:	4628      	mov	r0, r5
   250b4:	f7ec ffe4 	bl	12080 <strlen>
   250b8:	4606      	mov	r6, r0
   250ba:	69a0      	ldr	r0, [r4, #24]
   250bc:	300c      	adds	r0, #12
   250be:	f7ec ffdf 	bl	12080 <strlen>
   250c2:	4286      	cmp	r6, r0
   250c4:	f47f ae83 	bne.w	24dce <pdn_interface_pdn_id_get+0x192>
   250c8:	69a1      	ldr	r1, [r4, #24]
   250ca:	4628      	mov	r0, r5
   250cc:	310c      	adds	r1, #12
   250ce:	f7ec ffcd 	bl	1206c <strcmp>
   250d2:	2800      	cmp	r0, #0
   250d4:	f47f ae7b 	bne.w	24dce <pdn_interface_pdn_id_get+0x192>
   250d8:	69a3      	ldr	r3, [r4, #24]
   250da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   250dc:	07d6      	lsls	r6, r2, #31
   250de:	f57f ae76 	bpl.w	24dce <pdn_interface_pdn_id_get+0x192>
   250e2:	2606      	movs	r6, #6
   250e4:	e765      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   250e6:	4628      	mov	r0, r5
   250e8:	f7ec ffca 	bl	12080 <strlen>
   250ec:	4607      	mov	r7, r0
   250ee:	68e0      	ldr	r0, [r4, #12]
   250f0:	300c      	adds	r0, #12
   250f2:	f7ec ffc5 	bl	12080 <strlen>
   250f6:	4287      	cmp	r7, r0
   250f8:	f47f ae05 	bne.w	24d06 <pdn_interface_pdn_id_get+0xca>
   250fc:	68e1      	ldr	r1, [r4, #12]
   250fe:	4628      	mov	r0, r5
   25100:	310c      	adds	r1, #12
   25102:	f7ec ffb3 	bl	1206c <strcmp>
   25106:	2800      	cmp	r0, #0
   25108:	f47f adfd 	bne.w	24d06 <pdn_interface_pdn_id_get+0xca>
   2510c:	68e3      	ldr	r3, [r4, #12]
   2510e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25110:	0791      	lsls	r1, r2, #30
   25112:	f53f af4e 	bmi.w	24fb2 <pdn_interface_pdn_id_get+0x376>
   25116:	e5f6      	b.n	24d06 <pdn_interface_pdn_id_get+0xca>
   25118:	4628      	mov	r0, r5
   2511a:	f7ec ffb1 	bl	12080 <strlen>
   2511e:	4606      	mov	r6, r0
   25120:	6920      	ldr	r0, [r4, #16]
   25122:	300c      	adds	r0, #12
   25124:	f7ec ffac 	bl	12080 <strlen>
   25128:	4286      	cmp	r6, r0
   2512a:	f47f adf2 	bne.w	24d12 <pdn_interface_pdn_id_get+0xd6>
   2512e:	6921      	ldr	r1, [r4, #16]
   25130:	4628      	mov	r0, r5
   25132:	310c      	adds	r1, #12
   25134:	f7ec ff9a 	bl	1206c <strcmp>
   25138:	2800      	cmp	r0, #0
   2513a:	f47f adea 	bne.w	24d12 <pdn_interface_pdn_id_get+0xd6>
   2513e:	6923      	ldr	r3, [r4, #16]
   25140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25142:	0792      	lsls	r2, r2, #30
   25144:	d499      	bmi.n	2507a <pdn_interface_pdn_id_get+0x43e>
   25146:	e5e4      	b.n	24d12 <pdn_interface_pdn_id_get+0xd6>
   25148:	4628      	mov	r0, r5
   2514a:	f7ec ff99 	bl	12080 <strlen>
   2514e:	4606      	mov	r6, r0
   25150:	6960      	ldr	r0, [r4, #20]
   25152:	300c      	adds	r0, #12
   25154:	f7ec ff94 	bl	12080 <strlen>
   25158:	4286      	cmp	r6, r0
   2515a:	f47f ade0 	bne.w	24d1e <pdn_interface_pdn_id_get+0xe2>
   2515e:	6961      	ldr	r1, [r4, #20]
   25160:	4628      	mov	r0, r5
   25162:	310c      	adds	r1, #12
   25164:	f7ec ff82 	bl	1206c <strcmp>
   25168:	2800      	cmp	r0, #0
   2516a:	f47f add8 	bne.w	24d1e <pdn_interface_pdn_id_get+0xe2>
   2516e:	6963      	ldr	r3, [r4, #20]
   25170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25172:	0797      	lsls	r7, r2, #30
   25174:	d49b      	bmi.n	250ae <pdn_interface_pdn_id_get+0x472>
   25176:	e5d2      	b.n	24d1e <pdn_interface_pdn_id_get+0xe2>
   25178:	4628      	mov	r0, r5
   2517a:	f7ec ff81 	bl	12080 <strlen>
   2517e:	4606      	mov	r6, r0
   25180:	69a0      	ldr	r0, [r4, #24]
   25182:	300c      	adds	r0, #12
   25184:	f7ec ff7c 	bl	12080 <strlen>
   25188:	4286      	cmp	r6, r0
   2518a:	f47f adce 	bne.w	24d2a <pdn_interface_pdn_id_get+0xee>
   2518e:	69a1      	ldr	r1, [r4, #24]
   25190:	4628      	mov	r0, r5
   25192:	310c      	adds	r1, #12
   25194:	f7ec ff6a 	bl	1206c <strcmp>
   25198:	2800      	cmp	r0, #0
   2519a:	f47f adc6 	bne.w	24d2a <pdn_interface_pdn_id_get+0xee>
   2519e:	69a3      	ldr	r3, [r4, #24]
   251a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   251a2:	0796      	lsls	r6, r2, #30
   251a4:	d49d      	bmi.n	250e2 <pdn_interface_pdn_id_get+0x4a6>
   251a6:	e5c0      	b.n	24d2a <pdn_interface_pdn_id_get+0xee>
   251a8:	4628      	mov	r0, r5
   251aa:	f7ec ff69 	bl	12080 <strlen>
   251ae:	4606      	mov	r6, r0
   251b0:	69e0      	ldr	r0, [r4, #28]
   251b2:	300c      	adds	r0, #12
   251b4:	f7ec ff64 	bl	12080 <strlen>
   251b8:	4286      	cmp	r6, r0
   251ba:	f47f adbc 	bne.w	24d36 <pdn_interface_pdn_id_get+0xfa>
   251be:	69e1      	ldr	r1, [r4, #28]
   251c0:	4628      	mov	r0, r5
   251c2:	310c      	adds	r1, #12
   251c4:	f7ec ff52 	bl	1206c <strcmp>
   251c8:	2800      	cmp	r0, #0
   251ca:	f47f adb4 	bne.w	24d36 <pdn_interface_pdn_id_get+0xfa>
   251ce:	69e3      	ldr	r3, [r4, #28]
   251d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   251d2:	0790      	lsls	r0, r2, #30
   251d4:	f57f adaf 	bpl.w	24d36 <pdn_interface_pdn_id_get+0xfa>
   251d8:	2607      	movs	r6, #7
   251da:	e6ea      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   251dc:	4628      	mov	r0, r5
   251de:	f7ec ff4f 	bl	12080 <strlen>
   251e2:	4606      	mov	r6, r0
   251e4:	6a20      	ldr	r0, [r4, #32]
   251e6:	300c      	adds	r0, #12
   251e8:	f7ec ff4a 	bl	12080 <strlen>
   251ec:	4286      	cmp	r6, r0
   251ee:	f47f ada8 	bne.w	24d42 <pdn_interface_pdn_id_get+0x106>
   251f2:	6a21      	ldr	r1, [r4, #32]
   251f4:	4628      	mov	r0, r5
   251f6:	310c      	adds	r1, #12
   251f8:	f7ec ff38 	bl	1206c <strcmp>
   251fc:	2800      	cmp	r0, #0
   251fe:	f47f ada0 	bne.w	24d42 <pdn_interface_pdn_id_get+0x106>
   25202:	6a23      	ldr	r3, [r4, #32]
   25204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25206:	0791      	lsls	r1, r2, #30
   25208:	f57f ad9b 	bpl.w	24d42 <pdn_interface_pdn_id_get+0x106>
   2520c:	2608      	movs	r6, #8
   2520e:	e6d0      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   25210:	4628      	mov	r0, r5
   25212:	f7ec ff35 	bl	12080 <strlen>
   25216:	4606      	mov	r6, r0
   25218:	69e0      	ldr	r0, [r4, #28]
   2521a:	300c      	adds	r0, #12
   2521c:	f7ec ff30 	bl	12080 <strlen>
   25220:	4286      	cmp	r6, r0
   25222:	f47f adda 	bne.w	24dda <pdn_interface_pdn_id_get+0x19e>
   25226:	69e1      	ldr	r1, [r4, #28]
   25228:	4628      	mov	r0, r5
   2522a:	310c      	adds	r1, #12
   2522c:	f7ec ff1e 	bl	1206c <strcmp>
   25230:	2800      	cmp	r0, #0
   25232:	f47f add2 	bne.w	24dda <pdn_interface_pdn_id_get+0x19e>
   25236:	69e3      	ldr	r3, [r4, #28]
   25238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2523a:	07d0      	lsls	r0, r2, #31
   2523c:	d4cc      	bmi.n	251d8 <pdn_interface_pdn_id_get+0x59c>
   2523e:	e5cc      	b.n	24dda <pdn_interface_pdn_id_get+0x19e>
   25240:	4628      	mov	r0, r5
   25242:	f7ec ff1d 	bl	12080 <strlen>
   25246:	4606      	mov	r6, r0
   25248:	6a20      	ldr	r0, [r4, #32]
   2524a:	300c      	adds	r0, #12
   2524c:	f7ec ff18 	bl	12080 <strlen>
   25250:	4286      	cmp	r6, r0
   25252:	f47f adc8 	bne.w	24de6 <pdn_interface_pdn_id_get+0x1aa>
   25256:	6a21      	ldr	r1, [r4, #32]
   25258:	4628      	mov	r0, r5
   2525a:	310c      	adds	r1, #12
   2525c:	f7ec ff06 	bl	1206c <strcmp>
   25260:	2800      	cmp	r0, #0
   25262:	f47f adc0 	bne.w	24de6 <pdn_interface_pdn_id_get+0x1aa>
   25266:	6a23      	ldr	r3, [r4, #32]
   25268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2526a:	07d1      	lsls	r1, r2, #31
   2526c:	d4ce      	bmi.n	2520c <pdn_interface_pdn_id_get+0x5d0>
   2526e:	e5ba      	b.n	24de6 <pdn_interface_pdn_id_get+0x1aa>
   25270:	4628      	mov	r0, r5
   25272:	f7ec ff05 	bl	12080 <strlen>
   25276:	4606      	mov	r6, r0
   25278:	68a0      	ldr	r0, [r4, #8]
   2527a:	300c      	adds	r0, #12
   2527c:	f7ec ff00 	bl	12080 <strlen>
   25280:	4286      	cmp	r6, r0
   25282:	f47f ad8c 	bne.w	24d9e <pdn_interface_pdn_id_get+0x162>
   25286:	68a1      	ldr	r1, [r4, #8]
   25288:	4628      	mov	r0, r5
   2528a:	310c      	adds	r1, #12
   2528c:	f7ec feee 	bl	1206c <strcmp>
   25290:	2800      	cmp	r0, #0
   25292:	f47f ad84 	bne.w	24d9e <pdn_interface_pdn_id_get+0x162>
   25296:	68a3      	ldr	r3, [r4, #8]
   25298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2529a:	07d0      	lsls	r0, r2, #31
   2529c:	f57f ad7f 	bpl.w	24d9e <pdn_interface_pdn_id_get+0x162>
   252a0:	2602      	movs	r6, #2
   252a2:	e686      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   252a4:	4628      	mov	r0, r5
   252a6:	f7ec feeb 	bl	12080 <strlen>
   252aa:	4606      	mov	r6, r0
   252ac:	68a0      	ldr	r0, [r4, #8]
   252ae:	300c      	adds	r0, #12
   252b0:	f7ec fee6 	bl	12080 <strlen>
   252b4:	4286      	cmp	r6, r0
   252b6:	f47f ad20 	bne.w	24cfa <pdn_interface_pdn_id_get+0xbe>
   252ba:	68a1      	ldr	r1, [r4, #8]
   252bc:	4628      	mov	r0, r5
   252be:	310c      	adds	r1, #12
   252c0:	f7ec fed4 	bl	1206c <strcmp>
   252c4:	2800      	cmp	r0, #0
   252c6:	f47f ad18 	bne.w	24cfa <pdn_interface_pdn_id_get+0xbe>
   252ca:	68a3      	ldr	r3, [r4, #8]
   252cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   252ce:	0790      	lsls	r0, r2, #30
   252d0:	d4e6      	bmi.n	252a0 <pdn_interface_pdn_id_get+0x664>
   252d2:	e512      	b.n	24cfa <pdn_interface_pdn_id_get+0xbe>
   252d4:	200226f4 	.word	0x200226f4
   252d8:	000360dc 	.word	0x000360dc
   252dc:	000360d8 	.word	0x000360d8
   252e0:	000360ec 	.word	0x000360ec
   252e4:	200226f0 	.word	0x200226f0
   252e8:	4628      	mov	r0, r5
   252ea:	f7ec fec9 	bl	12080 <strlen>
   252ee:	4606      	mov	r6, r0
   252f0:	6860      	ldr	r0, [r4, #4]
   252f2:	300c      	adds	r0, #12
   252f4:	f7ec fec4 	bl	12080 <strlen>
   252f8:	4286      	cmp	r6, r0
   252fa:	f47f acf8 	bne.w	24cee <pdn_interface_pdn_id_get+0xb2>
   252fe:	6861      	ldr	r1, [r4, #4]
   25300:	4628      	mov	r0, r5
   25302:	310c      	adds	r1, #12
   25304:	f7ec feb2 	bl	1206c <strcmp>
   25308:	2800      	cmp	r0, #0
   2530a:	f47f acf0 	bne.w	24cee <pdn_interface_pdn_id_get+0xb2>
   2530e:	6863      	ldr	r3, [r4, #4]
   25310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25312:	0796      	lsls	r6, r2, #30
   25314:	f57f aceb 	bpl.w	24cee <pdn_interface_pdn_id_get+0xb2>
   25318:	2601      	movs	r6, #1
   2531a:	e64a      	b.n	24fb2 <pdn_interface_pdn_id_get+0x376>
   2531c:	4628      	mov	r0, r5
   2531e:	f7ec feaf 	bl	12080 <strlen>
   25322:	4606      	mov	r6, r0
   25324:	6860      	ldr	r0, [r4, #4]
   25326:	300c      	adds	r0, #12
   25328:	f7ec feaa 	bl	12080 <strlen>
   2532c:	4286      	cmp	r6, r0
   2532e:	f47f ad30 	bne.w	24d92 <pdn_interface_pdn_id_get+0x156>
   25332:	6861      	ldr	r1, [r4, #4]
   25334:	4628      	mov	r0, r5
   25336:	310c      	adds	r1, #12
   25338:	f7ec fe98 	bl	1206c <strcmp>
   2533c:	2800      	cmp	r0, #0
   2533e:	f47f ad28 	bne.w	24d92 <pdn_interface_pdn_id_get+0x156>
   25342:	6863      	ldr	r3, [r4, #4]
   25344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25346:	07d6      	lsls	r6, r2, #31
   25348:	d4e6      	bmi.n	25318 <pdn_interface_pdn_id_get+0x6dc>
   2534a:	e522      	b.n	24d92 <pdn_interface_pdn_id_get+0x156>
   2534c:	4608      	mov	r0, r1
   2534e:	f7ec fe97 	bl	12080 <strlen>
   25352:	4606      	mov	r6, r0
   25354:	6820      	ldr	r0, [r4, #0]
   25356:	300c      	adds	r0, #12
   25358:	f7ec fe92 	bl	12080 <strlen>
   2535c:	4286      	cmp	r6, r0
   2535e:	f47f acc0 	bne.w	24ce2 <pdn_interface_pdn_id_get+0xa6>
   25362:	6821      	ldr	r1, [r4, #0]
   25364:	4628      	mov	r0, r5
   25366:	310c      	adds	r1, #12
   25368:	f7ec fe80 	bl	1206c <strcmp>
   2536c:	4606      	mov	r6, r0
   2536e:	2800      	cmp	r0, #0
   25370:	f47f acb7 	bne.w	24ce2 <pdn_interface_pdn_id_get+0xa6>
   25374:	6823      	ldr	r3, [r4, #0]
   25376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   25378:	0797      	lsls	r7, r2, #30
   2537a:	f53f ae1a 	bmi.w	24fb2 <pdn_interface_pdn_id_get+0x376>
   2537e:	e4b0      	b.n	24ce2 <pdn_interface_pdn_id_get+0xa6>
   25380:	4608      	mov	r0, r1
   25382:	f7ec fe7d 	bl	12080 <strlen>
   25386:	4606      	mov	r6, r0
   25388:	6820      	ldr	r0, [r4, #0]
   2538a:	300c      	adds	r0, #12
   2538c:	f7ec fe78 	bl	12080 <strlen>
   25390:	4286      	cmp	r6, r0
   25392:	f47f acf8 	bne.w	24d86 <pdn_interface_pdn_id_get+0x14a>
   25396:	6821      	ldr	r1, [r4, #0]
   25398:	4628      	mov	r0, r5
   2539a:	310c      	adds	r1, #12
   2539c:	f7ec fe66 	bl	1206c <strcmp>
   253a0:	4606      	mov	r6, r0
   253a2:	2800      	cmp	r0, #0
   253a4:	f47f acef 	bne.w	24d86 <pdn_interface_pdn_id_get+0x14a>
   253a8:	6823      	ldr	r3, [r4, #0]
   253aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   253ac:	07d7      	lsls	r7, r2, #31
   253ae:	f53f ae00 	bmi.w	24fb2 <pdn_interface_pdn_id_get+0x376>
   253b2:	e4e8      	b.n	24d86 <pdn_interface_pdn_id_get+0x14a>
   253b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253b8:	4770      	bx	lr
   253ba:	480b      	ldr	r0, [pc, #44]	; (253e8 <pdn_interface_pdn_id_get+0x7ac>)
   253bc:	f7ec fe60 	bl	12080 <strlen>
   253c0:	490a      	ldr	r1, [pc, #40]	; (253ec <pdn_interface_pdn_id_get+0x7b0>)
   253c2:	4602      	mov	r2, r0
   253c4:	4808      	ldr	r0, [pc, #32]	; (253e8 <pdn_interface_pdn_id_get+0x7ac>)
   253c6:	f00f fc98 	bl	34cfa <strncmp>
   253ca:	b930      	cbnz	r0, 253da <pdn_interface_pdn_id_get+0x79e>
   253cc:	2008      	movs	r0, #8
   253ce:	f7f8 f84f 	bl	1d470 <bsd_os_errno_set>
   253d2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   253d6:	6858      	ldr	r0, [r3, #4]
   253d8:	e47b      	b.n	24cd2 <pdn_interface_pdn_id_get+0x96>
   253da:	2005      	movs	r0, #5
   253dc:	f7f8 f848 	bl	1d470 <bsd_os_errno_set>
   253e0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   253e4:	6858      	ldr	r0, [r3, #4]
   253e6:	e474      	b.n	24cd2 <pdn_interface_pdn_id_get+0x96>
   253e8:	00036130 	.word	0x00036130
   253ec:	200226f4 	.word	0x200226f4

000253f0 <bsd_recoverable_error_handler>:
   253f0:	4770      	bx	lr
   253f2:	bf00      	nop

000253f4 <bsd_platform_error_handler>:
   253f4:	b508      	push	{r3, lr}
   253f6:	f7ff fffb 	bl	253f0 <bsd_recoverable_error_handler>
   253fa:	bd08      	pop	{r3, pc}

000253fc <bsd_init>:
   253fc:	b160      	cbz	r0, 25418 <bsd_init+0x1c>
   253fe:	b510      	push	{r4, lr}
   25400:	4c07      	ldr	r4, [pc, #28]	; (25420 <bsd_init+0x24>)
   25402:	7823      	ldrb	r3, [r4, #0]
   25404:	b92b      	cbnz	r3, 25412 <bsd_init+0x16>
   25406:	f000 f81b 	bl	25440 <bsd_platform_init>
   2540a:	b908      	cbnz	r0, 25410 <bsd_init+0x14>
   2540c:	2301      	movs	r3, #1
   2540e:	7023      	strb	r3, [r4, #0]
   25410:	bd10      	pop	{r4, pc}
   25412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25416:	bd10      	pop	{r4, pc}
   25418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2541c:	4770      	bx	lr
   2541e:	bf00      	nop
   25420:	20028f84 	.word	0x20028f84

00025424 <unimplemented_method>:
   25424:	b40f      	push	{r0, r1, r2, r3}
   25426:	b508      	push	{r3, lr}
   25428:	202d      	movs	r0, #45	; 0x2d
   2542a:	f7f8 f821 	bl	1d470 <bsd_os_errno_set>
   2542e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25436:	b004      	add	sp, #16
   25438:	4770      	bx	lr
   2543a:	bf00      	nop

0002543c <rpc_transport_ipc_fault_handler>:
   2543c:	f7ff bfda 	b.w	253f4 <bsd_platform_error_handler>

00025440 <bsd_platform_init>:
   25440:	b5f0      	push	{r4, r5, r6, r7, lr}
   25442:	f04f 0c00 	mov.w	ip, #0
   25446:	f247 0660 	movw	r6, #28768	; 0x7060
   2544a:	f24b 0260 	movw	r2, #45152	; 0xb060
   2544e:	6843      	ldr	r3, [r0, #4]
   25450:	4d3a      	ldr	r5, [pc, #232]	; (2553c <bsd_platform_init+0xfc>)
   25452:	4607      	mov	r7, r0
   25454:	602b      	str	r3, [r5, #0]
   25456:	7801      	ldrb	r1, [r0, #0]
   25458:	2006      	movs	r0, #6
   2545a:	4561      	cmp	r1, ip
   2545c:	bf08      	it	eq
   2545e:	4632      	moveq	r2, r6
   25460:	4413      	add	r3, r2
   25462:	4c37      	ldr	r4, [pc, #220]	; (25540 <bsd_platform_init+0x100>)
   25464:	60ab      	str	r3, [r5, #8]
   25466:	68b9      	ldr	r1, [r7, #8]
   25468:	6063      	str	r3, [r4, #4]
   2546a:	4b36      	ldr	r3, [pc, #216]	; (25544 <bsd_platform_init+0x104>)
   2546c:	b093      	sub	sp, #76	; 0x4c
   2546e:	606a      	str	r2, [r5, #4]
   25470:	f8a4 c000 	strh.w	ip, [r4]
   25474:	1a8a      	subs	r2, r1, r2
   25476:	60ea      	str	r2, [r5, #12]
   25478:	60a2      	str	r2, [r4, #8]
   2547a:	81a0      	strh	r0, [r4, #12]
   2547c:	6123      	str	r3, [r4, #16]
   2547e:	f001 f883 	bl	26588 <nrf_mem_init>
   25482:	2800      	cmp	r0, #0
   25484:	d156      	bne.n	25534 <bsd_platform_init+0xf4>
   25486:	4621      	mov	r1, r4
   25488:	a801      	add	r0, sp, #4
   2548a:	f001 f8f1 	bl	26670 <nrf_mem_register>
   2548e:	2800      	cmp	r0, #0
   25490:	d150      	bne.n	25534 <bsd_platform_init+0xf4>
   25492:	f7f8 f8f1 	bl	1d678 <bsd_os_init>
   25496:	f7fd fc53 	bl	22d40 <rpc_framework_init>
   2549a:	2800      	cmp	r0, #0
   2549c:	d14a      	bne.n	25534 <bsd_platform_init+0xf4>
   2549e:	783a      	ldrb	r2, [r7, #0]
   254a0:	682b      	ldr	r3, [r5, #0]
   254a2:	bb32      	cbnz	r2, 254f2 <bsd_platform_init+0xb2>
   254a4:	4606      	mov	r6, r0
   254a6:	2220      	movs	r2, #32
   254a8:	2408      	movs	r4, #8
   254aa:	2500      	movs	r5, #0
   254ac:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   254b0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   254b4:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   254b8:	4411      	add	r1, r2
   254ba:	9302      	str	r3, [sp, #8]
   254bc:	e9cd 6008 	strd	r6, r0, [sp, #32]
   254c0:	910c      	str	r1, [sp, #48]	; 0x30
   254c2:	9203      	str	r2, [sp, #12]
   254c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
   254c8:	9205      	str	r2, [sp, #20]
   254ca:	9207      	str	r2, [sp, #28]
   254cc:	eb0d 0004 	add.w	r0, sp, r4
   254d0:	189a      	adds	r2, r3, r2
   254d2:	3360      	adds	r3, #96	; 0x60
   254d4:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   254d8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   254dc:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   254e0:	940f      	str	r4, [sp, #60]	; 0x3c
   254e2:	9104      	str	r1, [sp, #16]
   254e4:	9206      	str	r2, [sp, #24]
   254e6:	930a      	str	r3, [sp, #40]	; 0x28
   254e8:	f7fa fafa 	bl	1fae0 <rpc_transport_ipc_init>
   254ec:	b128      	cbz	r0, 254fa <bsd_platform_init+0xba>
   254ee:	b013      	add	sp, #76	; 0x4c
   254f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   254f2:	441e      	add	r6, r3
   254f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   254f8:	e7d5      	b.n	254a6 <bsd_platform_init+0x66>
   254fa:	f001 fcf9 	bl	26ef0 <interface_init>
   254fe:	b9c8      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   25500:	f7fe fcf2 	bl	23ee8 <at_interface_init>
   25504:	b9b0      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   25506:	f7fb fe1d 	bl	21144 <ip_interface_init>
   2550a:	b998      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   2550c:	f7fb f8ba 	bl	20684 <tls_interface_init>
   25510:	b980      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   25512:	f001 fa09 	bl	26928 <mfu_interface_init>
   25516:	b968      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   25518:	f7fe ff08 	bl	2432c <pdn_interface_init>
   2551c:	b950      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   2551e:	f7fe fb39 	bl	23b94 <gnss_interface_init>
   25522:	b938      	cbnz	r0, 25534 <bsd_platform_init+0xf4>
   25524:	f7f9 fd1a 	bl	1ef5c <logobj_interface_init>
   25528:	1b40      	subs	r0, r0, r5
   2552a:	bf18      	it	ne
   2552c:	2001      	movne	r0, #1
   2552e:	4240      	negs	r0, r0
   25530:	b013      	add	sp, #76	; 0x4c
   25532:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25538:	b013      	add	sp, #76	; 0x4c
   2553a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2553c:	20022830 	.word	0x20022830
   25540:	2002281c 	.word	0x2002281c
   25544:	00036284 	.word	0x00036284

00025548 <bsd_platform_af_method_table_get>:
   25548:	2805      	cmp	r0, #5
   2554a:	d02a      	beq.n	255a2 <bsd_platform_af_method_table_get+0x5a>
   2554c:	b508      	push	{r3, lr}
   2554e:	d914      	bls.n	2557a <bsd_platform_af_method_table_get+0x32>
   25550:	280a      	cmp	r0, #10
   25552:	d016      	beq.n	25582 <bsd_platform_af_method_table_get+0x3a>
   25554:	2866      	cmp	r0, #102	; 0x66
   25556:	d11f      	bne.n	25598 <bsd_platform_af_method_table_get+0x50>
   25558:	f240 2302 	movw	r3, #514	; 0x202
   2555c:	429a      	cmp	r2, r3
   2555e:	d035      	beq.n	255cc <bsd_platform_af_method_table_get+0x84>
   25560:	f240 2305 	movw	r3, #517	; 0x205
   25564:	429a      	cmp	r2, r3
   25566:	d035      	beq.n	255d4 <bsd_platform_af_method_table_get+0x8c>
   25568:	f240 2301 	movw	r3, #513	; 0x201
   2556c:	429a      	cmp	r2, r3
   2556e:	d02f      	beq.n	255d0 <bsd_platform_af_method_table_get+0x88>
   25570:	202b      	movs	r0, #43	; 0x2b
   25572:	f7f7 ff7d 	bl	1d470 <bsd_os_errno_set>
   25576:	2000      	movs	r0, #0
   25578:	bd08      	pop	{r3, pc}
   2557a:	2801      	cmp	r0, #1
   2557c:	d016      	beq.n	255ac <bsd_platform_af_method_table_get+0x64>
   2557e:	2802      	cmp	r0, #2
   25580:	d10a      	bne.n	25598 <bsd_platform_af_method_table_get+0x50>
   25582:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   25586:	d21a      	bcs.n	255be <bsd_platform_af_method_table_get+0x76>
   25588:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2558c:	d21a      	bcs.n	255c4 <bsd_platform_af_method_table_get+0x7c>
   2558e:	3a01      	subs	r2, #1
   25590:	2a01      	cmp	r2, #1
   25592:	d8ed      	bhi.n	25570 <bsd_platform_af_method_table_get+0x28>
   25594:	4810      	ldr	r0, [pc, #64]	; (255d8 <bsd_platform_af_method_table_get+0x90>)
   25596:	bd08      	pop	{r3, pc}
   25598:	2016      	movs	r0, #22
   2559a:	f7f7 ff69 	bl	1d470 <bsd_os_errno_set>
   2559e:	2000      	movs	r0, #0
   255a0:	bd08      	pop	{r3, pc}
   255a2:	2903      	cmp	r1, #3
   255a4:	480d      	ldr	r0, [pc, #52]	; (255dc <bsd_platform_af_method_table_get+0x94>)
   255a6:	bf18      	it	ne
   255a8:	2000      	movne	r0, #0
   255aa:	4770      	bx	lr
   255ac:	f240 2303 	movw	r3, #515	; 0x203
   255b0:	429a      	cmp	r2, r3
   255b2:	d009      	beq.n	255c8 <bsd_platform_af_method_table_get+0x80>
   255b4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   255b8:	d1da      	bne.n	25570 <bsd_platform_af_method_table_get+0x28>
   255ba:	4809      	ldr	r0, [pc, #36]	; (255e0 <bsd_platform_af_method_table_get+0x98>)
   255bc:	bd08      	pop	{r3, pc}
   255be:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   255c2:	d1d5      	bne.n	25570 <bsd_platform_af_method_table_get+0x28>
   255c4:	4807      	ldr	r0, [pc, #28]	; (255e4 <bsd_platform_af_method_table_get+0x9c>)
   255c6:	bd08      	pop	{r3, pc}
   255c8:	4807      	ldr	r0, [pc, #28]	; (255e8 <bsd_platform_af_method_table_get+0xa0>)
   255ca:	bd08      	pop	{r3, pc}
   255cc:	4807      	ldr	r0, [pc, #28]	; (255ec <bsd_platform_af_method_table_get+0xa4>)
   255ce:	bd08      	pop	{r3, pc}
   255d0:	4807      	ldr	r0, [pc, #28]	; (255f0 <bsd_platform_af_method_table_get+0xa8>)
   255d2:	bd08      	pop	{r3, pc}
   255d4:	4807      	ldr	r0, [pc, #28]	; (255f4 <bsd_platform_af_method_table_get+0xac>)
   255d6:	bd08      	pop	{r3, pc}
   255d8:	0003616c 	.word	0x0003616c
   255dc:	0003625c 	.word	0x0003625c
   255e0:	0003620c 	.word	0x0003620c
   255e4:	00036194 	.word	0x00036194
   255e8:	000361bc 	.word	0x000361bc
   255ec:	000361e4 	.word	0x000361e4
   255f0:	00036144 	.word	0x00036144
   255f4:	00036234 	.word	0x00036234

000255f8 <bsd_platform_fd_method_table_get>:
   255f8:	b538      	push	{r3, r4, r5, lr}
   255fa:	4605      	mov	r5, r0
   255fc:	f001 fdaa 	bl	27154 <interface_socket_from_handle_get>
   25600:	4604      	mov	r4, r0
   25602:	b960      	cbnz	r0, 2561e <bsd_platform_fd_method_table_get+0x26>
   25604:	4b2c      	ldr	r3, [pc, #176]	; (256b8 <bsd_platform_fd_method_table_get+0xc0>)
   25606:	429d      	cmp	r5, r3
   25608:	d02f      	beq.n	2566a <bsd_platform_fd_method_table_get+0x72>
   2560a:	0c2b      	lsrs	r3, r5, #16
   2560c:	4a2b      	ldr	r2, [pc, #172]	; (256bc <bsd_platform_fd_method_table_get+0xc4>)
   2560e:	041b      	lsls	r3, r3, #16
   25610:	4293      	cmp	r3, r2
   25612:	d03d      	beq.n	25690 <bsd_platform_fd_method_table_get+0x98>
   25614:	4b2a      	ldr	r3, [pc, #168]	; (256c0 <bsd_platform_fd_method_table_get+0xc8>)
   25616:	429d      	cmp	r5, r3
   25618:	d149      	bne.n	256ae <bsd_platform_fd_method_table_get+0xb6>
   2561a:	482a      	ldr	r0, [pc, #168]	; (256c4 <bsd_platform_fd_method_table_get+0xcc>)
   2561c:	bd38      	pop	{r3, r4, r5, pc}
   2561e:	68c3      	ldr	r3, [r0, #12]
   25620:	6942      	ldr	r2, [r0, #20]
   25622:	2b05      	cmp	r3, #5
   25624:	d036      	beq.n	25694 <bsd_platform_fd_method_table_get+0x9c>
   25626:	d911      	bls.n	2564c <bsd_platform_fd_method_table_get+0x54>
   25628:	2b0a      	cmp	r3, #10
   2562a:	d013      	beq.n	25654 <bsd_platform_fd_method_table_get+0x5c>
   2562c:	2b66      	cmp	r3, #102	; 0x66
   2562e:	d11e      	bne.n	2566e <bsd_platform_fd_method_table_get+0x76>
   25630:	f240 2302 	movw	r3, #514	; 0x202
   25634:	429a      	cmp	r2, r3
   25636:	d02b      	beq.n	25690 <bsd_platform_fd_method_table_get+0x98>
   25638:	f240 2305 	movw	r3, #517	; 0x205
   2563c:	429a      	cmp	r2, r3
   2563e:	d02f      	beq.n	256a0 <bsd_platform_fd_method_table_get+0xa8>
   25640:	f240 2301 	movw	r3, #513	; 0x201
   25644:	429a      	cmp	r2, r3
   25646:	d11e      	bne.n	25686 <bsd_platform_fd_method_table_get+0x8e>
   25648:	481f      	ldr	r0, [pc, #124]	; (256c8 <bsd_platform_fd_method_table_get+0xd0>)
   2564a:	bd38      	pop	{r3, r4, r5, pc}
   2564c:	2b01      	cmp	r3, #1
   2564e:	d013      	beq.n	25678 <bsd_platform_fd_method_table_get+0x80>
   25650:	2b02      	cmp	r3, #2
   25652:	d10c      	bne.n	2566e <bsd_platform_fd_method_table_get+0x76>
   25654:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   25658:	d224      	bcs.n	256a4 <bsd_platform_fd_method_table_get+0xac>
   2565a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2565e:	d224      	bcs.n	256aa <bsd_platform_fd_method_table_get+0xb2>
   25660:	3a01      	subs	r2, #1
   25662:	2a01      	cmp	r2, #1
   25664:	d80f      	bhi.n	25686 <bsd_platform_fd_method_table_get+0x8e>
   25666:	4819      	ldr	r0, [pc, #100]	; (256cc <bsd_platform_fd_method_table_get+0xd4>)
   25668:	bd38      	pop	{r3, r4, r5, pc}
   2566a:	4819      	ldr	r0, [pc, #100]	; (256d0 <bsd_platform_fd_method_table_get+0xd8>)
   2566c:	bd38      	pop	{r3, r4, r5, pc}
   2566e:	2016      	movs	r0, #22
   25670:	f7f7 fefe 	bl	1d470 <bsd_os_errno_set>
   25674:	2000      	movs	r0, #0
   25676:	bd38      	pop	{r3, r4, r5, pc}
   25678:	f240 2303 	movw	r3, #515	; 0x203
   2567c:	429a      	cmp	r2, r3
   2567e:	d0f4      	beq.n	2566a <bsd_platform_fd_method_table_get+0x72>
   25680:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   25684:	d0c9      	beq.n	2561a <bsd_platform_fd_method_table_get+0x22>
   25686:	202b      	movs	r0, #43	; 0x2b
   25688:	f7f7 fef2 	bl	1d470 <bsd_os_errno_set>
   2568c:	2000      	movs	r0, #0
   2568e:	bd38      	pop	{r3, r4, r5, pc}
   25690:	4810      	ldr	r0, [pc, #64]	; (256d4 <bsd_platform_fd_method_table_get+0xdc>)
   25692:	bd38      	pop	{r3, r4, r5, pc}
   25694:	6903      	ldr	r3, [r0, #16]
   25696:	4810      	ldr	r0, [pc, #64]	; (256d8 <bsd_platform_fd_method_table_get+0xe0>)
   25698:	2b03      	cmp	r3, #3
   2569a:	bf18      	it	ne
   2569c:	2000      	movne	r0, #0
   2569e:	bd38      	pop	{r3, r4, r5, pc}
   256a0:	480e      	ldr	r0, [pc, #56]	; (256dc <bsd_platform_fd_method_table_get+0xe4>)
   256a2:	bd38      	pop	{r3, r4, r5, pc}
   256a4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   256a8:	d1ed      	bne.n	25686 <bsd_platform_fd_method_table_get+0x8e>
   256aa:	480d      	ldr	r0, [pc, #52]	; (256e0 <bsd_platform_fd_method_table_get+0xe8>)
   256ac:	bd38      	pop	{r3, r4, r5, pc}
   256ae:	2009      	movs	r0, #9
   256b0:	f7f7 fede 	bl	1d470 <bsd_os_errno_set>
   256b4:	4620      	mov	r0, r4
   256b6:	bd38      	pop	{r3, r4, r5, pc}
   256b8:	49765432 	.word	0x49765432
   256bc:	789a0000 	.word	0x789a0000
   256c0:	49765443 	.word	0x49765443
   256c4:	0003620c 	.word	0x0003620c
   256c8:	00036144 	.word	0x00036144
   256cc:	0003616c 	.word	0x0003616c
   256d0:	000361bc 	.word	0x000361bc
   256d4:	000361e4 	.word	0x000361e4
   256d8:	0003625c 	.word	0x0003625c
   256dc:	00036234 	.word	0x00036234
   256e0:	00036194 	.word	0x00036194

000256e4 <bsd_platform_getaddrinfo>:
   256e4:	f7fc bf1a 	b.w	2251c <ip_interface_getaddrinfo>

000256e8 <bsd_platform_freeaddrinfo>:
   256e8:	f7fd b816 	b.w	22718 <ip_interface_freeaddrinfo>

000256ec <bsd_platform_poll>:
   256ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   256f0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   256f4:	b083      	sub	sp, #12
   256f6:	9200      	str	r2, [sp, #0]
   256f8:	2800      	cmp	r0, #0
   256fa:	d048      	beq.n	2578e <bsd_platform_poll+0xa2>
   256fc:	1e4b      	subs	r3, r1, #1
   256fe:	2b08      	cmp	r3, #8
   25700:	d845      	bhi.n	2578e <bsd_platform_poll+0xa2>
   25702:	4680      	mov	r8, r0
   25704:	4605      	mov	r5, r0
   25706:	2400      	movs	r4, #0
   25708:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   2570c:	88ab      	ldrh	r3, [r5, #4]
   2570e:	6828      	ldr	r0, [r5, #0]
   25710:	f003 0303 	and.w	r3, r3, #3
   25714:	a901      	add	r1, sp, #4
   25716:	f043 061c 	orr.w	r6, r3, #28
   2571a:	f001 fd29 	bl	27170 <interface_socket_event_get>
   2571e:	9b01      	ldr	r3, [sp, #4]
   25720:	3508      	adds	r5, #8
   25722:	4033      	ands	r3, r6
   25724:	f825 3c02 	strh.w	r3, [r5, #-2]
   25728:	b103      	cbz	r3, 2572c <bsd_platform_poll+0x40>
   2572a:	3401      	adds	r4, #1
   2572c:	42af      	cmp	r7, r5
   2572e:	d1ed      	bne.n	2570c <bsd_platform_poll+0x20>
   25730:	bb9c      	cbnz	r4, 2579a <bsd_platform_poll+0xae>
   25732:	4669      	mov	r1, sp
   25734:	4640      	mov	r0, r8
   25736:	f7f7 fdf1 	bl	1d31c <bsd_os_timedwait>
   2573a:	4607      	mov	r7, r0
   2573c:	b108      	cbz	r0, 25742 <bsd_platform_poll+0x56>
   2573e:	283c      	cmp	r0, #60	; 0x3c
   25740:	d11d      	bne.n	2577e <bsd_platform_poll+0x92>
   25742:	46c1      	mov	r9, r8
   25744:	2600      	movs	r6, #0
   25746:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2574a:	f8d9 0000 	ldr.w	r0, [r9]
   2574e:	f003 0303 	and.w	r3, r3, #3
   25752:	a901      	add	r1, sp, #4
   25754:	f043 041c 	orr.w	r4, r3, #28
   25758:	f001 fd0a 	bl	27170 <interface_socket_event_get>
   2575c:	9b01      	ldr	r3, [sp, #4]
   2575e:	f109 0908 	add.w	r9, r9, #8
   25762:	4023      	ands	r3, r4
   25764:	f829 3c02 	strh.w	r3, [r9, #-2]
   25768:	b103      	cbz	r3, 2576c <bsd_platform_poll+0x80>
   2576a:	3601      	adds	r6, #1
   2576c:	454d      	cmp	r5, r9
   2576e:	d1ea      	bne.n	25746 <bsd_platform_poll+0x5a>
   25770:	b90e      	cbnz	r6, 25776 <bsd_platform_poll+0x8a>
   25772:	2f00      	cmp	r7, #0
   25774:	d0dd      	beq.n	25732 <bsd_platform_poll+0x46>
   25776:	4630      	mov	r0, r6
   25778:	b003      	add	sp, #12
   2577a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2577e:	2023      	movs	r0, #35	; 0x23
   25780:	f7f7 fe76 	bl	1d470 <bsd_os_errno_set>
   25784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25788:	b003      	add	sp, #12
   2578a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2578e:	2016      	movs	r0, #22
   25790:	f7f7 fe6e 	bl	1d470 <bsd_os_errno_set>
   25794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25798:	e7ee      	b.n	25778 <bsd_platform_poll+0x8c>
   2579a:	4620      	mov	r0, r4
   2579c:	e7ec      	b.n	25778 <bsd_platform_poll+0x8c>
   2579e:	bf00      	nop

000257a0 <bsd_platform_fcntl>:
   257a0:	b508      	push	{r3, lr}
   257a2:	4b06      	ldr	r3, [pc, #24]	; (257bc <bsd_platform_fcntl+0x1c>)
   257a4:	4298      	cmp	r0, r3
   257a6:	d003      	beq.n	257b0 <bsd_platform_fcntl+0x10>
   257a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   257ac:	f001 bd8a 	b.w	272c4 <interface_socket_fcntl>
   257b0:	202d      	movs	r0, #45	; 0x2d
   257b2:	f7f7 fe5d 	bl	1d470 <bsd_os_errno_set>
   257b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257ba:	bd08      	pop	{r3, pc}
   257bc:	49765432 	.word	0x49765432

000257c0 <linked_list_init>:
   257c0:	b128      	cbz	r0, 257ce <linked_list_init+0xe>
   257c2:	2300      	movs	r3, #0
   257c4:	6003      	str	r3, [r0, #0]
   257c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   257ca:	4618      	mov	r0, r3
   257cc:	4770      	bx	lr
   257ce:	2007      	movs	r0, #7
   257d0:	4770      	bx	lr
   257d2:	bf00      	nop

000257d4 <linked_list_push>:
   257d4:	6802      	ldr	r2, [r0, #0]
   257d6:	4603      	mov	r3, r0
   257d8:	3201      	adds	r2, #1
   257da:	d00e      	beq.n	257fa <linked_list_push+0x26>
   257dc:	2200      	movs	r2, #0
   257de:	600a      	str	r2, [r1, #0]
   257e0:	6802      	ldr	r2, [r0, #0]
   257e2:	b13a      	cbz	r2, 257f4 <linked_list_push+0x20>
   257e4:	6882      	ldr	r2, [r0, #8]
   257e6:	6011      	str	r1, [r2, #0]
   257e8:	6081      	str	r1, [r0, #8]
   257ea:	681a      	ldr	r2, [r3, #0]
   257ec:	2000      	movs	r0, #0
   257ee:	3201      	adds	r2, #1
   257f0:	601a      	str	r2, [r3, #0]
   257f2:	4770      	bx	lr
   257f4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   257f8:	e7f7      	b.n	257ea <linked_list_push+0x16>
   257fa:	2004      	movs	r0, #4
   257fc:	4770      	bx	lr
   257fe:	bf00      	nop

00025800 <linked_list_pop>:
   25800:	4603      	mov	r3, r0
   25802:	6800      	ldr	r0, [r0, #0]
   25804:	b128      	cbz	r0, 25812 <linked_list_pop+0x12>
   25806:	6858      	ldr	r0, [r3, #4]
   25808:	681a      	ldr	r2, [r3, #0]
   2580a:	6801      	ldr	r1, [r0, #0]
   2580c:	3a01      	subs	r2, #1
   2580e:	6059      	str	r1, [r3, #4]
   25810:	601a      	str	r2, [r3, #0]
   25812:	4770      	bx	lr

00025814 <linked_list_peek>:
   25814:	6803      	ldr	r3, [r0, #0]
   25816:	b10b      	cbz	r3, 2581c <linked_list_peek+0x8>
   25818:	6840      	ldr	r0, [r0, #4]
   2581a:	4770      	bx	lr
   2581c:	4618      	mov	r0, r3
   2581e:	4770      	bx	lr

00025820 <linked_list_size_get>:
   25820:	6800      	ldr	r0, [r0, #0]
   25822:	4770      	bx	lr

00025824 <linked_list_get_next>:
   25824:	6800      	ldr	r0, [r0, #0]
   25826:	4770      	bx	lr

00025828 <nrf_socket>:
   25828:	b570      	push	{r4, r5, r6, lr}
   2582a:	4604      	mov	r4, r0
   2582c:	460d      	mov	r5, r1
   2582e:	4616      	mov	r6, r2
   25830:	f7ff fe8a 	bl	25548 <bsd_platform_af_method_table_get>
   25834:	b130      	cbz	r0, 25844 <nrf_socket+0x1c>
   25836:	6803      	ldr	r3, [r0, #0]
   25838:	4632      	mov	r2, r6
   2583a:	4629      	mov	r1, r5
   2583c:	4620      	mov	r0, r4
   2583e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25842:	4718      	bx	r3
   25844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25848:	bd70      	pop	{r4, r5, r6, pc}
   2584a:	bf00      	nop

0002584c <nrf_close>:
   2584c:	b510      	push	{r4, lr}
   2584e:	4604      	mov	r4, r0
   25850:	f7ff fed2 	bl	255f8 <bsd_platform_fd_method_table_get>
   25854:	b120      	cbz	r0, 25860 <nrf_close+0x14>
   25856:	6843      	ldr	r3, [r0, #4]
   25858:	4620      	mov	r0, r4
   2585a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2585e:	4718      	bx	r3
   25860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25864:	bd10      	pop	{r4, pc}
   25866:	bf00      	nop

00025868 <nrf_sendto>:
   25868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2586c:	460d      	mov	r5, r1
   2586e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   25872:	4616      	mov	r6, r2
   25874:	461f      	mov	r7, r3
   25876:	4604      	mov	r4, r0
   25878:	f7ff febe 	bl	255f8 <bsd_platform_fd_method_table_get>
   2587c:	b158      	cbz	r0, 25896 <nrf_sendto+0x2e>
   2587e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   25882:	f8d0 e008 	ldr.w	lr, [r0, #8]
   25886:	463b      	mov	r3, r7
   25888:	4632      	mov	r2, r6
   2588a:	4629      	mov	r1, r5
   2588c:	4620      	mov	r0, r4
   2588e:	46f4      	mov	ip, lr
   25890:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25894:	4760      	bx	ip
   25896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2589a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2589e:	bf00      	nop

000258a0 <nrf_recvfrom>:
   258a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   258a4:	460d      	mov	r5, r1
   258a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   258aa:	4616      	mov	r6, r2
   258ac:	461f      	mov	r7, r3
   258ae:	4604      	mov	r4, r0
   258b0:	f7ff fea2 	bl	255f8 <bsd_platform_fd_method_table_get>
   258b4:	b158      	cbz	r0, 258ce <nrf_recvfrom+0x2e>
   258b6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   258ba:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   258be:	463b      	mov	r3, r7
   258c0:	4632      	mov	r2, r6
   258c2:	4629      	mov	r1, r5
   258c4:	4620      	mov	r0, r4
   258c6:	46f4      	mov	ip, lr
   258c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   258cc:	4760      	bx	ip
   258ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   258d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   258d6:	bf00      	nop

000258d8 <nrf_connect>:
   258d8:	b570      	push	{r4, r5, r6, lr}
   258da:	460d      	mov	r5, r1
   258dc:	4616      	mov	r6, r2
   258de:	4604      	mov	r4, r0
   258e0:	f7ff fe8a 	bl	255f8 <bsd_platform_fd_method_table_get>
   258e4:	b130      	cbz	r0, 258f4 <nrf_connect+0x1c>
   258e6:	6943      	ldr	r3, [r0, #20]
   258e8:	4632      	mov	r2, r6
   258ea:	4629      	mov	r1, r5
   258ec:	4620      	mov	r0, r4
   258ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   258f2:	4718      	bx	r3
   258f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   258f8:	bd70      	pop	{r4, r5, r6, pc}
   258fa:	bf00      	nop

000258fc <nrf_listen>:
   258fc:	b570      	push	{r4, r5, r6, lr}
   258fe:	460d      	mov	r5, r1
   25900:	4604      	mov	r4, r0
   25902:	f7ff fe79 	bl	255f8 <bsd_platform_fd_method_table_get>
   25906:	b128      	cbz	r0, 25914 <nrf_listen+0x18>
   25908:	6983      	ldr	r3, [r0, #24]
   2590a:	4629      	mov	r1, r5
   2590c:	4620      	mov	r0, r4
   2590e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25912:	4718      	bx	r3
   25914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25918:	bd70      	pop	{r4, r5, r6, pc}
   2591a:	bf00      	nop

0002591c <nrf_accept>:
   2591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25920:	460d      	mov	r5, r1
   25922:	4616      	mov	r6, r2
   25924:	4604      	mov	r4, r0
   25926:	f7ff fe67 	bl	255f8 <bsd_platform_fd_method_table_get>
   2592a:	b140      	cbz	r0, 2593e <nrf_accept+0x22>
   2592c:	69c7      	ldr	r7, [r0, #28]
   2592e:	4632      	mov	r2, r6
   25930:	4629      	mov	r1, r5
   25932:	4620      	mov	r0, r4
   25934:	46bc      	mov	ip, r7
   25936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2593a:	2300      	movs	r3, #0
   2593c:	4760      	bx	ip
   2593e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25946:	bf00      	nop

00025948 <nrf_bind>:
   25948:	b570      	push	{r4, r5, r6, lr}
   2594a:	460d      	mov	r5, r1
   2594c:	4616      	mov	r6, r2
   2594e:	4604      	mov	r4, r0
   25950:	f7ff fe52 	bl	255f8 <bsd_platform_fd_method_table_get>
   25954:	b130      	cbz	r0, 25964 <nrf_bind+0x1c>
   25956:	6903      	ldr	r3, [r0, #16]
   25958:	4632      	mov	r2, r6
   2595a:	4629      	mov	r1, r5
   2595c:	4620      	mov	r0, r4
   2595e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25962:	4718      	bx	r3
   25964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25968:	bd70      	pop	{r4, r5, r6, pc}
   2596a:	bf00      	nop

0002596c <nrf_setsockopt>:
   2596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25970:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25974:	460d      	mov	r5, r1
   25976:	4616      	mov	r6, r2
   25978:	461f      	mov	r7, r3
   2597a:	4604      	mov	r4, r0
   2597c:	f7ff fe3c 	bl	255f8 <bsd_platform_fd_method_table_get>
   25980:	b158      	cbz	r0, 2599a <nrf_setsockopt+0x2e>
   25982:	f8cd 8018 	str.w	r8, [sp, #24]
   25986:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2598a:	463b      	mov	r3, r7
   2598c:	4632      	mov	r2, r6
   2598e:	4629      	mov	r1, r5
   25990:	4620      	mov	r0, r4
   25992:	46f4      	mov	ip, lr
   25994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25998:	4760      	bx	ip
   2599a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   259a2:	bf00      	nop

000259a4 <nrf_getsockopt>:
   259a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   259ac:	460d      	mov	r5, r1
   259ae:	4616      	mov	r6, r2
   259b0:	461f      	mov	r7, r3
   259b2:	4604      	mov	r4, r0
   259b4:	f7ff fe20 	bl	255f8 <bsd_platform_fd_method_table_get>
   259b8:	b158      	cbz	r0, 259d2 <nrf_getsockopt+0x2e>
   259ba:	f8cd 8018 	str.w	r8, [sp, #24]
   259be:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   259c2:	463b      	mov	r3, r7
   259c4:	4632      	mov	r2, r6
   259c6:	4629      	mov	r1, r5
   259c8:	4620      	mov	r0, r4
   259ca:	46f4      	mov	ip, lr
   259cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   259d0:	4760      	bx	ip
   259d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   259d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   259da:	bf00      	nop

000259dc <nrf_getaddrinfo>:
   259dc:	f7ff be82 	b.w	256e4 <bsd_platform_getaddrinfo>

000259e0 <nrf_freeaddrinfo>:
   259e0:	f7ff be82 	b.w	256e8 <bsd_platform_freeaddrinfo>

000259e4 <nrf_poll>:
   259e4:	f7ff be82 	b.w	256ec <bsd_platform_poll>

000259e8 <nrf_fcntl>:
   259e8:	f7ff beda 	b.w	257a0 <bsd_platform_fcntl>

000259ec <rpc_gnss_serialize_utc>:
   259ec:	4603      	mov	r3, r0
   259ee:	b1d8      	cbz	r0, 25a28 <rpc_gnss_serialize_utc+0x3c>
   259f0:	b1d1      	cbz	r1, 25a28 <rpc_gnss_serialize_utc+0x3c>
   259f2:	2000      	movs	r0, #0
   259f4:	2201      	movs	r2, #1
   259f6:	7048      	strb	r0, [r1, #1]
   259f8:	700a      	strb	r2, [r1, #0]
   259fa:	685a      	ldr	r2, [r3, #4]
   259fc:	2010      	movs	r0, #16
   259fe:	f8c1 2006 	str.w	r2, [r1, #6]
   25a02:	681a      	ldr	r2, [r3, #0]
   25a04:	f8c1 2002 	str.w	r2, [r1, #2]
   25a08:	f993 200a 	ldrsb.w	r2, [r3, #10]
   25a0c:	730a      	strb	r2, [r1, #12]
   25a0e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   25a12:	73ca      	strb	r2, [r1, #15]
   25a14:	f993 200c 	ldrsb.w	r2, [r3, #12]
   25a18:	738a      	strb	r2, [r1, #14]
   25a1a:	7a1a      	ldrb	r2, [r3, #8]
   25a1c:	728a      	strb	r2, [r1, #10]
   25a1e:	7ada      	ldrb	r2, [r3, #11]
   25a20:	734a      	strb	r2, [r1, #13]
   25a22:	7a5b      	ldrb	r3, [r3, #9]
   25a24:	72cb      	strb	r3, [r1, #11]
   25a26:	4770      	bx	lr
   25a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a2c:	4770      	bx	lr
   25a2e:	bf00      	nop

00025a30 <rpc_gnss_serialize_ephe>:
   25a30:	4603      	mov	r3, r0
   25a32:	2800      	cmp	r0, #0
   25a34:	d04b      	beq.n	25ace <rpc_gnss_serialize_ephe+0x9e>
   25a36:	2900      	cmp	r1, #0
   25a38:	d049      	beq.n	25ace <rpc_gnss_serialize_ephe+0x9e>
   25a3a:	2000      	movs	r0, #0
   25a3c:	2202      	movs	r2, #2
   25a3e:	7048      	strb	r0, [r1, #1]
   25a40:	700a      	strb	r2, [r1, #0]
   25a42:	68da      	ldr	r2, [r3, #12]
   25a44:	2040      	movs	r0, #64	; 0x40
   25a46:	f8c1 200b 	str.w	r2, [r1, #11]
   25a4a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   25a4e:	f8a1 2009 	strh.w	r2, [r1, #9]
   25a52:	f993 2006 	ldrsb.w	r2, [r3, #6]
   25a56:	720a      	strb	r2, [r1, #8]
   25a58:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   25a5c:	878a      	strh	r2, [r1, #60]	; 0x3c
   25a5e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   25a62:	86ca      	strh	r2, [r1, #54]	; 0x36
   25a64:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   25a68:	874a      	strh	r2, [r1, #58]	; 0x3a
   25a6a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   25a6e:	868a      	strh	r2, [r1, #52]	; 0x34
   25a70:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   25a74:	87ca      	strh	r2, [r1, #62]	; 0x3e
   25a76:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   25a7a:	870a      	strh	r2, [r1, #56]	; 0x38
   25a7c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   25a80:	830a      	strh	r2, [r1, #24]
   25a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25a84:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   25a88:	7c9a      	ldrb	r2, [r3, #18]
   25a8a:	744a      	strb	r2, [r1, #17]
   25a8c:	785a      	ldrb	r2, [r3, #1]
   25a8e:	70ca      	strb	r2, [r1, #3]
   25a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   25a92:	62ca      	str	r2, [r1, #44]	; 0x2c
   25a94:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   25a98:	84ca      	strh	r2, [r1, #38]	; 0x26
   25a9a:	885a      	ldrh	r2, [r3, #2]
   25a9c:	808a      	strh	r2, [r1, #4]
   25a9e:	6a1a      	ldr	r2, [r3, #32]
   25aa0:	f8c1 201a 	str.w	r2, [r1, #26]
   25aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   25aa6:	630a      	str	r2, [r1, #48]	; 0x30
   25aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   25aaa:	f8c1 201e 	str.w	r2, [r1, #30]
   25aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   25ab0:	628a      	str	r2, [r1, #40]	; 0x28
   25ab2:	781a      	ldrb	r2, [r3, #0]
   25ab4:	708a      	strb	r2, [r1, #2]
   25ab6:	f993 2010 	ldrsb.w	r2, [r3, #16]
   25aba:	73ca      	strb	r2, [r1, #15]
   25abc:	889a      	ldrh	r2, [r3, #4]
   25abe:	80ca      	strh	r2, [r1, #6]
   25ac0:	8a9a      	ldrh	r2, [r3, #20]
   25ac2:	824a      	strh	r2, [r1, #18]
   25ac4:	7c5a      	ldrb	r2, [r3, #17]
   25ac6:	740a      	strb	r2, [r1, #16]
   25ac8:	699b      	ldr	r3, [r3, #24]
   25aca:	614b      	str	r3, [r1, #20]
   25acc:	4770      	bx	lr
   25ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ad2:	4770      	bx	lr

00025ad4 <rpc_gnss_serialize_alm>:
   25ad4:	4603      	mov	r3, r0
   25ad6:	b360      	cbz	r0, 25b32 <rpc_gnss_serialize_alm+0x5e>
   25ad8:	b359      	cbz	r1, 25b32 <rpc_gnss_serialize_alm+0x5e>
   25ada:	2000      	movs	r0, #0
   25adc:	2203      	movs	r2, #3
   25ade:	7048      	strb	r0, [r1, #1]
   25ae0:	700a      	strb	r2, [r1, #0]
   25ae2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   25ae6:	2021      	movs	r0, #33	; 0x21
   25ae8:	f8a1 201d 	strh.w	r2, [r1, #29]
   25aec:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   25af0:	f8a1 201f 	strh.w	r2, [r1, #31]
   25af4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   25af8:	810a      	strh	r2, [r1, #8]
   25afa:	889a      	ldrh	r2, [r3, #4]
   25afc:	80ca      	strh	r2, [r1, #6]
   25afe:	78da      	ldrb	r2, [r3, #3]
   25b00:	714a      	strb	r2, [r1, #5]
   25b02:	699a      	ldr	r2, [r3, #24]
   25b04:	f8c1 2019 	str.w	r2, [r1, #25]
   25b08:	691a      	ldr	r2, [r3, #16]
   25b0a:	f8c1 2011 	str.w	r2, [r1, #17]
   25b0e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   25b12:	814a      	strh	r2, [r1, #10]
   25b14:	68da      	ldr	r2, [r3, #12]
   25b16:	f8c1 200d 	str.w	r2, [r1, #13]
   25b1a:	7a9a      	ldrb	r2, [r3, #10]
   25b1c:	730a      	strb	r2, [r1, #12]
   25b1e:	781a      	ldrb	r2, [r3, #0]
   25b20:	708a      	strb	r2, [r1, #2]
   25b22:	789a      	ldrb	r2, [r3, #2]
   25b24:	710a      	strb	r2, [r1, #4]
   25b26:	695a      	ldr	r2, [r3, #20]
   25b28:	f8c1 2015 	str.w	r2, [r1, #21]
   25b2c:	785b      	ldrb	r3, [r3, #1]
   25b2e:	70cb      	strb	r3, [r1, #3]
   25b30:	4770      	bx	lr
   25b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b36:	4770      	bx	lr

00025b38 <rpc_gnss_serialize_klob>:
   25b38:	4603      	mov	r3, r0
   25b3a:	b1f0      	cbz	r0, 25b7a <rpc_gnss_serialize_klob+0x42>
   25b3c:	b1e9      	cbz	r1, 25b7a <rpc_gnss_serialize_klob+0x42>
   25b3e:	2000      	movs	r0, #0
   25b40:	2204      	movs	r2, #4
   25b42:	7048      	strb	r0, [r1, #1]
   25b44:	700a      	strb	r2, [r1, #0]
   25b46:	f993 2000 	ldrsb.w	r2, [r3]
   25b4a:	200a      	movs	r0, #10
   25b4c:	708a      	strb	r2, [r1, #2]
   25b4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   25b52:	70ca      	strb	r2, [r1, #3]
   25b54:	f993 2002 	ldrsb.w	r2, [r3, #2]
   25b58:	710a      	strb	r2, [r1, #4]
   25b5a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   25b5e:	714a      	strb	r2, [r1, #5]
   25b60:	f993 2004 	ldrsb.w	r2, [r3, #4]
   25b64:	718a      	strb	r2, [r1, #6]
   25b66:	f993 2005 	ldrsb.w	r2, [r3, #5]
   25b6a:	71ca      	strb	r2, [r1, #7]
   25b6c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   25b70:	720a      	strb	r2, [r1, #8]
   25b72:	f993 3007 	ldrsb.w	r3, [r3, #7]
   25b76:	724b      	strb	r3, [r1, #9]
   25b78:	4770      	bx	lr
   25b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b7e:	4770      	bx	lr

00025b80 <rpc_gnss_serialize_nequick>:
   25b80:	4603      	mov	r3, r0
   25b82:	b198      	cbz	r0, 25bac <rpc_gnss_serialize_nequick+0x2c>
   25b84:	b191      	cbz	r1, 25bac <rpc_gnss_serialize_nequick+0x2c>
   25b86:	2000      	movs	r0, #0
   25b88:	2205      	movs	r2, #5
   25b8a:	7048      	strb	r0, [r1, #1]
   25b8c:	700a      	strb	r2, [r1, #0]
   25b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
   25b92:	200a      	movs	r0, #10
   25b94:	804a      	strh	r2, [r1, #2]
   25b96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   25b9a:	808a      	strh	r2, [r1, #4]
   25b9c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   25ba0:	80ca      	strh	r2, [r1, #6]
   25ba2:	799a      	ldrb	r2, [r3, #6]
   25ba4:	720a      	strb	r2, [r1, #8]
   25ba6:	79db      	ldrb	r3, [r3, #7]
   25ba8:	724b      	strb	r3, [r1, #9]
   25baa:	4770      	bx	lr
   25bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25bb0:	4770      	bx	lr
   25bb2:	bf00      	nop

00025bb4 <rpc_gnss_serialize_time_and_sv_tow>:
   25bb4:	b310      	cbz	r0, 25bfc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   25bb6:	b309      	cbz	r1, 25bfc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   25bb8:	b470      	push	{r4, r5, r6}
   25bba:	2500      	movs	r5, #0
   25bbc:	2606      	movs	r6, #6
   25bbe:	460c      	mov	r4, r1
   25bc0:	704d      	strb	r5, [r1, #1]
   25bc2:	700e      	strb	r6, [r1, #0]
   25bc4:	462b      	mov	r3, r5
   25bc6:	8805      	ldrh	r5, [r0, #0]
   25bc8:	4602      	mov	r2, r0
   25bca:	804d      	strh	r5, [r1, #2]
   25bcc:	68c5      	ldr	r5, [r0, #12]
   25bce:	f8c1 500a 	str.w	r5, [r1, #10]
   25bd2:	8905      	ldrh	r5, [r0, #8]
   25bd4:	810d      	strh	r5, [r1, #8]
   25bd6:	6840      	ldr	r0, [r0, #4]
   25bd8:	6048      	str	r0, [r1, #4]
   25bda:	8a15      	ldrh	r5, [r2, #16]
   25bdc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   25be0:	4408      	add	r0, r1
   25be2:	81c5      	strh	r5, [r0, #14]
   25be4:	7c90      	ldrb	r0, [r2, #18]
   25be6:	3301      	adds	r3, #1
   25be8:	2b20      	cmp	r3, #32
   25bea:	7420      	strb	r0, [r4, #16]
   25bec:	f102 0204 	add.w	r2, r2, #4
   25bf0:	f104 0403 	add.w	r4, r4, #3
   25bf4:	d1f1      	bne.n	25bda <rpc_gnss_serialize_time_and_sv_tow+0x26>
   25bf6:	206e      	movs	r0, #110	; 0x6e
   25bf8:	bc70      	pop	{r4, r5, r6}
   25bfa:	4770      	bx	lr
   25bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25c00:	4770      	bx	lr
   25c02:	bf00      	nop

00025c04 <rpc_gnss_serialize_location>:
   25c04:	4603      	mov	r3, r0
   25c06:	b1c8      	cbz	r0, 25c3c <rpc_gnss_serialize_location+0x38>
   25c08:	b1c1      	cbz	r1, 25c3c <rpc_gnss_serialize_location+0x38>
   25c0a:	2000      	movs	r0, #0
   25c0c:	2207      	movs	r2, #7
   25c0e:	7048      	strb	r0, [r1, #1]
   25c10:	700a      	strb	r2, [r1, #0]
   25c12:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   25c16:	2011      	movs	r0, #17
   25c18:	814a      	strh	r2, [r1, #10]
   25c1a:	7b9a      	ldrb	r2, [r3, #14]
   25c1c:	740a      	strb	r2, [r1, #16]
   25c1e:	681a      	ldr	r2, [r3, #0]
   25c20:	f8c1 2002 	str.w	r2, [r1, #2]
   25c24:	685a      	ldr	r2, [r3, #4]
   25c26:	f8c1 2006 	str.w	r2, [r1, #6]
   25c2a:	7b1a      	ldrb	r2, [r3, #12]
   25c2c:	738a      	strb	r2, [r1, #14]
   25c2e:	7b5a      	ldrb	r2, [r3, #13]
   25c30:	73ca      	strb	r2, [r1, #15]
   25c32:	7a9a      	ldrb	r2, [r3, #10]
   25c34:	730a      	strb	r2, [r1, #12]
   25c36:	7adb      	ldrb	r3, [r3, #11]
   25c38:	734b      	strb	r3, [r1, #13]
   25c3a:	4770      	bx	lr
   25c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25c40:	4770      	bx	lr
   25c42:	bf00      	nop

00025c44 <rpc_gnss_serialize_integrity>:
   25c44:	b148      	cbz	r0, 25c5a <rpc_gnss_serialize_integrity+0x16>
   25c46:	b141      	cbz	r1, 25c5a <rpc_gnss_serialize_integrity+0x16>
   25c48:	2200      	movs	r2, #0
   25c4a:	2308      	movs	r3, #8
   25c4c:	704a      	strb	r2, [r1, #1]
   25c4e:	700b      	strb	r3, [r1, #0]
   25c50:	6803      	ldr	r3, [r0, #0]
   25c52:	2006      	movs	r0, #6
   25c54:	f8c1 3002 	str.w	r3, [r1, #2]
   25c58:	4770      	bx	lr
   25c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25c5e:	4770      	bx	lr

00025c60 <gnss_client_event_handler>:
   25c60:	f850 1b08 	ldr.w	r1, [r0], #8
   25c64:	0c09      	lsrs	r1, r1, #16
   25c66:	f7fd b941 	b.w	22eec <rpc_gnss_event_handler>
   25c6a:	bf00      	nop

00025c6c <rpc_gnss_client_init>:
   25c6c:	4801      	ldr	r0, [pc, #4]	; (25c74 <rpc_gnss_client_init+0x8>)
   25c6e:	f7fd b871 	b.w	22d54 <rpc_client_register>
   25c72:	bf00      	nop
   25c74:	0003629c 	.word	0x0003629c

00025c78 <rpc_gnss_client_request_alloc>:
   25c78:	2300      	movs	r3, #0
   25c7a:	b510      	push	{r4, lr}
   25c7c:	b082      	sub	sp, #8
   25c7e:	9301      	str	r3, [sp, #4]
   25c80:	b158      	cbz	r0, 25c9a <rpc_gnss_client_request_alloc+0x22>
   25c82:	4604      	mov	r4, r0
   25c84:	aa01      	add	r2, sp, #4
   25c86:	2007      	movs	r0, #7
   25c88:	f7fd f8de 	bl	22e48 <rpc_message_alloc>
   25c8c:	b918      	cbnz	r0, 25c96 <rpc_gnss_client_request_alloc+0x1e>
   25c8e:	9b01      	ldr	r3, [sp, #4]
   25c90:	b10b      	cbz	r3, 25c96 <rpc_gnss_client_request_alloc+0x1e>
   25c92:	3308      	adds	r3, #8
   25c94:	6023      	str	r3, [r4, #0]
   25c96:	b002      	add	sp, #8
   25c98:	bd10      	pop	{r4, pc}
   25c9a:	2007      	movs	r0, #7
   25c9c:	b002      	add	sp, #8
   25c9e:	bd10      	pop	{r4, pc}

00025ca0 <rpc_gnss_client_request_send>:
   25ca0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   25ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   25ca8:	d10b      	bne.n	25cc2 <rpc_gnss_client_request_send+0x22>
   25caa:	b160      	cbz	r0, 25cc6 <rpc_gnss_client_request_send+0x26>
   25cac:	4603      	mov	r3, r0
   25cae:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   25cb2:	2007      	movs	r0, #7
   25cb4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   25cb8:	f843 1d08 	str.w	r1, [r3, #-8]!
   25cbc:	4619      	mov	r1, r3
   25cbe:	f7fd b8b3 	b.w	22e28 <rpc_message_send>
   25cc2:	200f      	movs	r0, #15
   25cc4:	4770      	bx	lr
   25cc6:	2007      	movs	r0, #7
   25cc8:	4770      	bx	lr
   25cca:	bf00      	nop

00025ccc <rpc_gnss_client_message_free>:
   25ccc:	b120      	cbz	r0, 25cd8 <rpc_gnss_client_message_free+0xc>
   25cce:	f1a0 0108 	sub.w	r1, r0, #8
   25cd2:	2007      	movs	r0, #7
   25cd4:	f7fd b8e4 	b.w	22ea0 <rpc_message_free>
   25cd8:	2007      	movs	r0, #7
   25cda:	4770      	bx	lr

00025cdc <rpc_gnss_client_data_free>:
   25cdc:	b118      	cbz	r0, 25ce6 <rpc_gnss_client_data_free+0xa>
   25cde:	4601      	mov	r1, r0
   25ce0:	2007      	movs	r0, #7
   25ce2:	f7fd b8e9 	b.w	22eb8 <rpc_message_data_free>
   25ce6:	2007      	movs	r0, #7
   25ce8:	4770      	bx	lr
   25cea:	bf00      	nop

00025cec <datagram_handler_init>:
   25cec:	b510      	push	{r4, lr}
   25cee:	4604      	mov	r4, r0
   25cf0:	200c      	movs	r0, #12
   25cf2:	f000 fdd7 	bl	268a4 <nrf_malloc>
   25cf6:	60e0      	str	r0, [r4, #12]
   25cf8:	b118      	cbz	r0, 25d02 <datagram_handler_init+0x16>
   25cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25cfe:	f7ff bd5f 	b.w	257c0 <linked_list_init>
   25d02:	2004      	movs	r0, #4
   25d04:	bd10      	pop	{r4, pc}
   25d06:	bf00      	nop

00025d08 <datagram_handler_put>:
   25d08:	b570      	push	{r4, r5, r6, lr}
   25d0a:	4606      	mov	r6, r0
   25d0c:	2014      	movs	r0, #20
   25d0e:	460d      	mov	r5, r1
   25d10:	f000 fdc8 	bl	268a4 <nrf_malloc>
   25d14:	b178      	cbz	r0, 25d36 <datagram_handler_put+0x2e>
   25d16:	682b      	ldr	r3, [r5, #0]
   25d18:	4604      	mov	r4, r0
   25d1a:	6043      	str	r3, [r0, #4]
   25d1c:	686b      	ldr	r3, [r5, #4]
   25d1e:	4601      	mov	r1, r0
   25d20:	6083      	str	r3, [r0, #8]
   25d22:	68eb      	ldr	r3, [r5, #12]
   25d24:	60c3      	str	r3, [r0, #12]
   25d26:	68ab      	ldr	r3, [r5, #8]
   25d28:	6103      	str	r3, [r0, #16]
   25d2a:	68f0      	ldr	r0, [r6, #12]
   25d2c:	f7ff fd52 	bl	257d4 <linked_list_push>
   25d30:	b920      	cbnz	r0, 25d3c <datagram_handler_put+0x34>
   25d32:	6868      	ldr	r0, [r5, #4]
   25d34:	bd70      	pop	{r4, r5, r6, pc}
   25d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d3a:	bd70      	pop	{r4, r5, r6, pc}
   25d3c:	4620      	mov	r0, r4
   25d3e:	f000 fdbb 	bl	268b8 <nrf_free>
   25d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d46:	bd70      	pop	{r4, r5, r6, pc}

00025d48 <datagram_handler_get>:
   25d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d4c:	4607      	mov	r7, r0
   25d4e:	b084      	sub	sp, #16
   25d50:	68c0      	ldr	r0, [r0, #12]
   25d52:	460c      	mov	r4, r1
   25d54:	4616      	mov	r6, r2
   25d56:	f7ff fd5d 	bl	25814 <linked_list_peek>
   25d5a:	2800      	cmp	r0, #0
   25d5c:	d03b      	beq.n	25dd6 <datagram_handler_get+0x8e>
   25d5e:	6882      	ldr	r2, [r0, #8]
   25d60:	4605      	mov	r5, r0
   25d62:	e9d4 0300 	ldrd	r0, r3, [r4]
   25d66:	429a      	cmp	r2, r3
   25d68:	bf28      	it	cs
   25d6a:	461a      	movcs	r2, r3
   25d6c:	6062      	str	r2, [r4, #4]
   25d6e:	b110      	cbz	r0, 25d76 <datagram_handler_get+0x2e>
   25d70:	6869      	ldr	r1, [r5, #4]
   25d72:	f00e fe55 	bl	34a20 <memcpy>
   25d76:	68a0      	ldr	r0, [r4, #8]
   25d78:	b118      	cbz	r0, 25d82 <datagram_handler_get+0x3a>
   25d7a:	692b      	ldr	r3, [r5, #16]
   25d7c:	b10b      	cbz	r3, 25d82 <datagram_handler_get+0x3a>
   25d7e:	68ea      	ldr	r2, [r5, #12]
   25d80:	bb02      	cbnz	r2, 25dc4 <datagram_handler_get+0x7c>
   25d82:	2300      	movs	r3, #0
   25d84:	60e3      	str	r3, [r4, #12]
   25d86:	0732      	lsls	r2, r6, #28
   25d88:	d506      	bpl.n	25d98 <datagram_handler_get+0x50>
   25d8a:	06b3      	lsls	r3, r6, #26
   25d8c:	bf4c      	ite	mi
   25d8e:	68a8      	ldrmi	r0, [r5, #8]
   25d90:	6860      	ldrpl	r0, [r4, #4]
   25d92:	b004      	add	sp, #16
   25d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25d98:	68f8      	ldr	r0, [r7, #12]
   25d9a:	f7ff fd31 	bl	25800 <linked_list_pop>
   25d9e:	4680      	mov	r8, r0
   25da0:	2800      	cmp	r0, #0
   25da2:	d0f2      	beq.n	25d8a <datagram_handler_get+0x42>
   25da4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25da8:	6902      	ldr	r2, [r0, #16]
   25daa:	9300      	str	r3, [sp, #0]
   25dac:	68c3      	ldr	r3, [r0, #12]
   25dae:	e9cd 1201 	strd	r1, r2, [sp, #4]
   25db2:	9303      	str	r3, [sp, #12]
   25db4:	4668      	mov	r0, sp
   25db6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   25dba:	4798      	blx	r3
   25dbc:	4640      	mov	r0, r8
   25dbe:	f000 fd7b 	bl	268b8 <nrf_free>
   25dc2:	e7e2      	b.n	25d8a <datagram_handler_get+0x42>
   25dc4:	68e3      	ldr	r3, [r4, #12]
   25dc6:	429a      	cmp	r2, r3
   25dc8:	bf28      	it	cs
   25dca:	461a      	movcs	r2, r3
   25dcc:	60e2      	str	r2, [r4, #12]
   25dce:	6929      	ldr	r1, [r5, #16]
   25dd0:	f00e fe26 	bl	34a20 <memcpy>
   25dd4:	e7d7      	b.n	25d86 <datagram_handler_get+0x3e>
   25dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25dda:	e7da      	b.n	25d92 <datagram_handler_get+0x4a>

00025ddc <datagram_handler_available>:
   25ddc:	b508      	push	{r3, lr}
   25dde:	68c0      	ldr	r0, [r0, #12]
   25de0:	f7ff fd18 	bl	25814 <linked_list_peek>
   25de4:	b108      	cbz	r0, 25dea <datagram_handler_available+0xe>
   25de6:	6880      	ldr	r0, [r0, #8]
   25de8:	bd08      	pop	{r3, pc}
   25dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25dee:	bd08      	pop	{r3, pc}

00025df0 <datagram_handler_flush>:
   25df0:	b530      	push	{r4, r5, lr}
   25df2:	4605      	mov	r5, r0
   25df4:	68c0      	ldr	r0, [r0, #12]
   25df6:	b085      	sub	sp, #20
   25df8:	b9a8      	cbnz	r0, 25e26 <datagram_handler_flush+0x36>
   25dfa:	e01a      	b.n	25e32 <datagram_handler_flush+0x42>
   25dfc:	68e8      	ldr	r0, [r5, #12]
   25dfe:	f7ff fcff 	bl	25800 <linked_list_pop>
   25e02:	4604      	mov	r4, r0
   25e04:	b170      	cbz	r0, 25e24 <datagram_handler_flush+0x34>
   25e06:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   25e0a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   25e0e:	e9cd 0100 	strd	r0, r1, [sp]
   25e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25e16:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25e1a:	4668      	mov	r0, sp
   25e1c:	4798      	blx	r3
   25e1e:	4620      	mov	r0, r4
   25e20:	f000 fd4a 	bl	268b8 <nrf_free>
   25e24:	68e8      	ldr	r0, [r5, #12]
   25e26:	f7ff fcfb 	bl	25820 <linked_list_size_get>
   25e2a:	2800      	cmp	r0, #0
   25e2c:	d1e6      	bne.n	25dfc <datagram_handler_flush+0xc>
   25e2e:	b005      	add	sp, #20
   25e30:	bd30      	pop	{r4, r5, pc}
   25e32:	2008      	movs	r0, #8
   25e34:	b005      	add	sp, #20
   25e36:	bd30      	pop	{r4, r5, pc}

00025e38 <datagram_handler_free>:
   25e38:	b530      	push	{r4, r5, lr}
   25e3a:	4605      	mov	r5, r0
   25e3c:	68c0      	ldr	r0, [r0, #12]
   25e3e:	b085      	sub	sp, #20
   25e40:	b9a0      	cbnz	r0, 25e6c <datagram_handler_free+0x34>
   25e42:	e01c      	b.n	25e7e <datagram_handler_free+0x46>
   25e44:	f7ff fcdc 	bl	25800 <linked_list_pop>
   25e48:	4604      	mov	r4, r0
   25e4a:	b170      	cbz	r0, 25e6a <datagram_handler_free+0x32>
   25e4c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   25e50:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   25e54:	e9cd 0100 	strd	r0, r1, [sp]
   25e58:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25e5c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25e60:	4668      	mov	r0, sp
   25e62:	4798      	blx	r3
   25e64:	4620      	mov	r0, r4
   25e66:	f000 fd27 	bl	268b8 <nrf_free>
   25e6a:	68e8      	ldr	r0, [r5, #12]
   25e6c:	f7ff fcd8 	bl	25820 <linked_list_size_get>
   25e70:	4604      	mov	r4, r0
   25e72:	68e8      	ldr	r0, [r5, #12]
   25e74:	2c00      	cmp	r4, #0
   25e76:	d1e5      	bne.n	25e44 <datagram_handler_free+0xc>
   25e78:	f000 fd1e 	bl	268b8 <nrf_free>
   25e7c:	60ec      	str	r4, [r5, #12]
   25e7e:	b005      	add	sp, #20
   25e80:	bd30      	pop	{r4, r5, pc}
   25e82:	bf00      	nop

00025e84 <null_handler_init>:
   25e84:	2000      	movs	r0, #0
   25e86:	4770      	bx	lr

00025e88 <null_handler_put>:
   25e88:	b510      	push	{r4, lr}
   25e8a:	460c      	mov	r4, r1
   25e8c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25e90:	4620      	mov	r0, r4
   25e92:	4798      	blx	r3
   25e94:	6860      	ldr	r0, [r4, #4]
   25e96:	bd10      	pop	{r4, pc}

00025e98 <null_handler_get>:
   25e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25e9c:	4770      	bx	lr
   25e9e:	bf00      	nop

00025ea0 <null_handler_available>:
   25ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ea4:	4770      	bx	lr
   25ea6:	bf00      	nop

00025ea8 <null_handler_flush>:
   25ea8:	2000      	movs	r0, #0
   25eaa:	4770      	bx	lr

00025eac <null_handler_free>:
   25eac:	4770      	bx	lr
   25eae:	bf00      	nop

00025eb0 <packet_handler_create>:
   25eb0:	2801      	cmp	r0, #1
   25eb2:	b538      	push	{r3, r4, r5, lr}
   25eb4:	460d      	mov	r5, r1
   25eb6:	4614      	mov	r4, r2
   25eb8:	d00d      	beq.n	25ed6 <packet_handler_create+0x26>
   25eba:	db11      	blt.n	25ee0 <packet_handler_create+0x30>
   25ebc:	2803      	cmp	r0, #3
   25ebe:	dc0f      	bgt.n	25ee0 <packet_handler_create+0x30>
   25ec0:	2010      	movs	r0, #16
   25ec2:	f000 fcef 	bl	268a4 <nrf_malloc>
   25ec6:	2218      	movs	r2, #24
   25ec8:	b120      	cbz	r0, 25ed4 <packet_handler_create+0x24>
   25eca:	4b08      	ldr	r3, [pc, #32]	; (25eec <packet_handler_create+0x3c>)
   25ecc:	6045      	str	r5, [r0, #4]
   25ece:	4413      	add	r3, r2
   25ed0:	6084      	str	r4, [r0, #8]
   25ed2:	6003      	str	r3, [r0, #0]
   25ed4:	bd38      	pop	{r3, r4, r5, pc}
   25ed6:	2014      	movs	r0, #20
   25ed8:	f000 fce4 	bl	268a4 <nrf_malloc>
   25edc:	2230      	movs	r2, #48	; 0x30
   25ede:	e7f3      	b.n	25ec8 <packet_handler_create+0x18>
   25ee0:	200c      	movs	r0, #12
   25ee2:	f000 fcdf 	bl	268a4 <nrf_malloc>
   25ee6:	2200      	movs	r2, #0
   25ee8:	e7ee      	b.n	25ec8 <packet_handler_create+0x18>
   25eea:	bf00      	nop
   25eec:	000362ac 	.word	0x000362ac

00025ef0 <packet_handler_delete>:
   25ef0:	b510      	push	{r4, lr}
   25ef2:	4604      	mov	r4, r0
   25ef4:	6803      	ldr	r3, [r0, #0]
   25ef6:	691b      	ldr	r3, [r3, #16]
   25ef8:	4798      	blx	r3
   25efa:	6823      	ldr	r3, [r4, #0]
   25efc:	4620      	mov	r0, r4
   25efe:	695b      	ldr	r3, [r3, #20]
   25f00:	4798      	blx	r3
   25f02:	4620      	mov	r0, r4
   25f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25f08:	f000 bcd6 	b.w	268b8 <nrf_free>

00025f0c <stream_handler_init>:
   25f0c:	b510      	push	{r4, lr}
   25f0e:	4604      	mov	r4, r0
   25f10:	200c      	movs	r0, #12
   25f12:	f000 fcc7 	bl	268a4 <nrf_malloc>
   25f16:	60e0      	str	r0, [r4, #12]
   25f18:	b128      	cbz	r0, 25f26 <stream_handler_init+0x1a>
   25f1a:	2300      	movs	r3, #0
   25f1c:	6123      	str	r3, [r4, #16]
   25f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25f22:	f7ff bc4d 	b.w	257c0 <linked_list_init>
   25f26:	2004      	movs	r0, #4
   25f28:	bd10      	pop	{r4, pc}
   25f2a:	bf00      	nop

00025f2c <stream_handler_put>:
   25f2c:	b570      	push	{r4, r5, r6, lr}
   25f2e:	4606      	mov	r6, r0
   25f30:	2014      	movs	r0, #20
   25f32:	460d      	mov	r5, r1
   25f34:	f000 fcb6 	bl	268a4 <nrf_malloc>
   25f38:	b178      	cbz	r0, 25f5a <stream_handler_put+0x2e>
   25f3a:	682b      	ldr	r3, [r5, #0]
   25f3c:	4604      	mov	r4, r0
   25f3e:	6043      	str	r3, [r0, #4]
   25f40:	686b      	ldr	r3, [r5, #4]
   25f42:	4601      	mov	r1, r0
   25f44:	6083      	str	r3, [r0, #8]
   25f46:	68eb      	ldr	r3, [r5, #12]
   25f48:	60c3      	str	r3, [r0, #12]
   25f4a:	68ab      	ldr	r3, [r5, #8]
   25f4c:	6103      	str	r3, [r0, #16]
   25f4e:	68f0      	ldr	r0, [r6, #12]
   25f50:	f7ff fc40 	bl	257d4 <linked_list_push>
   25f54:	b920      	cbnz	r0, 25f60 <stream_handler_put+0x34>
   25f56:	6868      	ldr	r0, [r5, #4]
   25f58:	bd70      	pop	{r4, r5, r6, pc}
   25f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f5e:	bd70      	pop	{r4, r5, r6, pc}
   25f60:	4620      	mov	r0, r4
   25f62:	f000 fca9 	bl	268b8 <nrf_free>
   25f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f6a:	bd70      	pop	{r4, r5, r6, pc}

00025f6c <stream_handler_get>:
   25f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f70:	4682      	mov	sl, r0
   25f72:	b089      	sub	sp, #36	; 0x24
   25f74:	68c0      	ldr	r0, [r0, #12]
   25f76:	4689      	mov	r9, r1
   25f78:	4693      	mov	fp, r2
   25f7a:	f7ff fc4b 	bl	25814 <linked_list_peek>
   25f7e:	2800      	cmp	r0, #0
   25f80:	d071      	beq.n	26066 <stream_handler_get+0xfa>
   25f82:	4605      	mov	r5, r0
   25f84:	f8d9 0008 	ldr.w	r0, [r9, #8]
   25f88:	b120      	cbz	r0, 25f94 <stream_handler_get+0x28>
   25f8a:	692b      	ldr	r3, [r5, #16]
   25f8c:	b113      	cbz	r3, 25f94 <stream_handler_get+0x28>
   25f8e:	68ea      	ldr	r2, [r5, #12]
   25f90:	2a00      	cmp	r2, #0
   25f92:	d15d      	bne.n	26050 <stream_handler_get+0xe4>
   25f94:	2300      	movs	r3, #0
   25f96:	f8c9 300c 	str.w	r3, [r9, #12]
   25f9a:	f8d9 2000 	ldr.w	r2, [r9]
   25f9e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   25fa2:	f8da 1010 	ldr.w	r1, [sl, #16]
   25fa6:	9203      	str	r2, [sp, #12]
   25fa8:	f1b8 0f00 	cmp.w	r8, #0
   25fac:	d030      	beq.n	26010 <stream_handler_get+0xa4>
   25fae:	2400      	movs	r4, #0
   25fb0:	f00b 0320 	and.w	r3, fp, #32
   25fb4:	9301      	str	r3, [sp, #4]
   25fb6:	f00b 0b08 	and.w	fp, fp, #8
   25fba:	68ae      	ldr	r6, [r5, #8]
   25fbc:	eba8 0304 	sub.w	r3, r8, r4
   25fc0:	1a76      	subs	r6, r6, r1
   25fc2:	429e      	cmp	r6, r3
   25fc4:	4637      	mov	r7, r6
   25fc6:	bf28      	it	cs
   25fc8:	461f      	movcs	r7, r3
   25fca:	b10a      	cbz	r2, 25fd0 <stream_handler_get+0x64>
   25fcc:	9a01      	ldr	r2, [sp, #4]
   25fce:	b1aa      	cbz	r2, 25ffc <stream_handler_get+0x90>
   25fd0:	f1bb 0f00 	cmp.w	fp, #0
   25fd4:	d106      	bne.n	25fe4 <stream_handler_get+0x78>
   25fd6:	429e      	cmp	r6, r3
   25fd8:	d921      	bls.n	2601e <stream_handler_get+0xb2>
   25fda:	f8da 3010 	ldr.w	r3, [sl, #16]
   25fde:	443b      	add	r3, r7
   25fe0:	f8ca 3010 	str.w	r3, [sl, #16]
   25fe4:	4628      	mov	r0, r5
   25fe6:	f7ff fc1d 	bl	25824 <linked_list_get_next>
   25fea:	443c      	add	r4, r7
   25fec:	4605      	mov	r5, r0
   25fee:	b180      	cbz	r0, 26012 <stream_handler_get+0xa6>
   25ff0:	45a0      	cmp	r8, r4
   25ff2:	d90e      	bls.n	26012 <stream_handler_get+0xa6>
   25ff4:	f8d9 2000 	ldr.w	r2, [r9]
   25ff8:	2100      	movs	r1, #0
   25ffa:	e7de      	b.n	25fba <stream_handler_get+0x4e>
   25ffc:	6868      	ldr	r0, [r5, #4]
   25ffe:	9302      	str	r3, [sp, #8]
   26000:	9b03      	ldr	r3, [sp, #12]
   26002:	4401      	add	r1, r0
   26004:	463a      	mov	r2, r7
   26006:	1918      	adds	r0, r3, r4
   26008:	f00e fd0a 	bl	34a20 <memcpy>
   2600c:	9b02      	ldr	r3, [sp, #8]
   2600e:	e7df      	b.n	25fd0 <stream_handler_get+0x64>
   26010:	4644      	mov	r4, r8
   26012:	4620      	mov	r0, r4
   26014:	f8c9 4004 	str.w	r4, [r9, #4]
   26018:	b009      	add	sp, #36	; 0x24
   2601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2601e:	f8da 000c 	ldr.w	r0, [sl, #12]
   26022:	f7ff fbed 	bl	25800 <linked_list_pop>
   26026:	4606      	mov	r6, r0
   26028:	b170      	cbz	r0, 26048 <stream_handler_get+0xdc>
   2602a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2602e:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   26032:	e9cd 2304 	strd	r2, r3, [sp, #16]
   26036:	e9cd 1006 	strd	r1, r0, [sp, #24]
   2603a:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   2603e:	a804      	add	r0, sp, #16
   26040:	4798      	blx	r3
   26042:	4630      	mov	r0, r6
   26044:	f000 fc38 	bl	268b8 <nrf_free>
   26048:	2300      	movs	r3, #0
   2604a:	f8ca 3010 	str.w	r3, [sl, #16]
   2604e:	e7c9      	b.n	25fe4 <stream_handler_get+0x78>
   26050:	f8d9 300c 	ldr.w	r3, [r9, #12]
   26054:	429a      	cmp	r2, r3
   26056:	bf28      	it	cs
   26058:	461a      	movcs	r2, r3
   2605a:	f8c9 200c 	str.w	r2, [r9, #12]
   2605e:	6929      	ldr	r1, [r5, #16]
   26060:	f00e fcde 	bl	34a20 <memcpy>
   26064:	e799      	b.n	25f9a <stream_handler_get+0x2e>
   26066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2606a:	e7d5      	b.n	26018 <stream_handler_get+0xac>

0002606c <stream_handler_available>:
   2606c:	b510      	push	{r4, lr}
   2606e:	4604      	mov	r4, r0
   26070:	68c0      	ldr	r0, [r0, #12]
   26072:	f7ff fbcf 	bl	25814 <linked_list_peek>
   26076:	b150      	cbz	r0, 2608e <stream_handler_available+0x22>
   26078:	6924      	ldr	r4, [r4, #16]
   2607a:	4264      	negs	r4, r4
   2607c:	6883      	ldr	r3, [r0, #8]
   2607e:	441c      	add	r4, r3
   26080:	f7ff fbd0 	bl	25824 <linked_list_get_next>
   26084:	2800      	cmp	r0, #0
   26086:	d1f9      	bne.n	2607c <stream_handler_available+0x10>
   26088:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2608c:	bd10      	pop	{r4, pc}
   2608e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26092:	bd10      	pop	{r4, pc}

00026094 <stream_handler_flush>:
   26094:	b530      	push	{r4, r5, lr}
   26096:	4605      	mov	r5, r0
   26098:	68c0      	ldr	r0, [r0, #12]
   2609a:	b085      	sub	sp, #20
   2609c:	b9a8      	cbnz	r0, 260ca <stream_handler_flush+0x36>
   2609e:	e01a      	b.n	260d6 <stream_handler_flush+0x42>
   260a0:	68e8      	ldr	r0, [r5, #12]
   260a2:	f7ff fbad 	bl	25800 <linked_list_pop>
   260a6:	4604      	mov	r4, r0
   260a8:	b170      	cbz	r0, 260c8 <stream_handler_flush+0x34>
   260aa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   260ae:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   260b2:	e9cd 0100 	strd	r0, r1, [sp]
   260b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   260ba:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   260be:	4668      	mov	r0, sp
   260c0:	4798      	blx	r3
   260c2:	4620      	mov	r0, r4
   260c4:	f000 fbf8 	bl	268b8 <nrf_free>
   260c8:	68e8      	ldr	r0, [r5, #12]
   260ca:	f7ff fba9 	bl	25820 <linked_list_size_get>
   260ce:	2800      	cmp	r0, #0
   260d0:	d1e6      	bne.n	260a0 <stream_handler_flush+0xc>
   260d2:	b005      	add	sp, #20
   260d4:	bd30      	pop	{r4, r5, pc}
   260d6:	2008      	movs	r0, #8
   260d8:	b005      	add	sp, #20
   260da:	bd30      	pop	{r4, r5, pc}

000260dc <stream_handler_free>:
   260dc:	b530      	push	{r4, r5, lr}
   260de:	4605      	mov	r5, r0
   260e0:	68c0      	ldr	r0, [r0, #12]
   260e2:	b085      	sub	sp, #20
   260e4:	b9a0      	cbnz	r0, 26110 <stream_handler_free+0x34>
   260e6:	e01c      	b.n	26122 <stream_handler_free+0x46>
   260e8:	f7ff fb8a 	bl	25800 <linked_list_pop>
   260ec:	4604      	mov	r4, r0
   260ee:	b170      	cbz	r0, 2610e <stream_handler_free+0x32>
   260f0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   260f4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   260f8:	e9cd 0100 	strd	r0, r1, [sp]
   260fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   26100:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   26104:	4668      	mov	r0, sp
   26106:	4798      	blx	r3
   26108:	4620      	mov	r0, r4
   2610a:	f000 fbd5 	bl	268b8 <nrf_free>
   2610e:	68e8      	ldr	r0, [r5, #12]
   26110:	f7ff fb86 	bl	25820 <linked_list_size_get>
   26114:	4604      	mov	r4, r0
   26116:	68e8      	ldr	r0, [r5, #12]
   26118:	2c00      	cmp	r4, #0
   2611a:	d1e5      	bne.n	260e8 <stream_handler_free+0xc>
   2611c:	f000 fbcc 	bl	268b8 <nrf_free>
   26120:	60ec      	str	r4, [r5, #12]
   26122:	b005      	add	sp, #20
   26124:	bd30      	pop	{r4, r5, pc}
   26126:	bf00      	nop

00026128 <mem_free>:
   26128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2612c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 261fc <mem_free+0xd4>
   26130:	b083      	sub	sp, #12
   26132:	9000      	str	r0, [sp, #0]
   26134:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   26138:	f8dc 3008 	ldr.w	r3, [ip, #8]
   2613c:	b12b      	cbz	r3, 2614a <mem_free+0x22>
   2613e:	f8dc 2000 	ldr.w	r2, [ip]
   26142:	9c00      	ldr	r4, [sp, #0]
   26144:	7810      	ldrb	r0, [r2, #0]
   26146:	42a0      	cmp	r0, r4
   26148:	d006      	beq.n	26158 <mem_free+0x30>
   2614a:	f10c 0c0c 	add.w	ip, ip, #12
   2614e:	45e3      	cmp	fp, ip
   26150:	d1f2      	bne.n	26138 <mem_free+0x10>
   26152:	b003      	add	sp, #12
   26154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26158:	f8dc a004 	ldr.w	sl, [ip, #4]
   2615c:	eb03 080a 	add.w	r8, r3, sl
   26160:	45c2      	cmp	sl, r8
   26162:	d2f2      	bcs.n	2614a <mem_free+0x22>
   26164:	6853      	ldr	r3, [r2, #4]
   26166:	f8cd c004 	str.w	ip, [sp, #4]
   2616a:	46d6      	mov	lr, sl
   2616c:	469c      	mov	ip, r3
   2616e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   26172:	8997      	ldrh	r7, [r2, #12]
   26174:	ebae 000a 	sub.w	r0, lr, sl
   26178:	b3df      	cbz	r7, 261f2 <mem_free+0xca>
   2617a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   2617e:	4290      	cmp	r0, r2
   26180:	d31c      	bcc.n	261bc <mem_free+0x94>
   26182:	4665      	mov	r5, ip
   26184:	2400      	movs	r4, #0
   26186:	f109 0304 	add.w	r3, r9, #4
   2618a:	e003      	b.n	26194 <mem_free+0x6c>
   2618c:	885a      	ldrh	r2, [r3, #2]
   2618e:	3304      	adds	r3, #4
   26190:	4282      	cmp	r2, r0
   26192:	d815      	bhi.n	261c0 <mem_free+0x98>
   26194:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   26198:	3401      	adds	r4, #1
   2619a:	42a7      	cmp	r7, r4
   2619c:	fb02 5506 	mla	r5, r2, r6, r5
   261a0:	eba0 0002 	sub.w	r0, r0, r2
   261a4:	461e      	mov	r6, r3
   261a6:	d1f1      	bne.n	2618c <mem_free+0x64>
   261a8:	2000      	movs	r0, #0
   261aa:	4281      	cmp	r1, r0
   261ac:	d00d      	beq.n	261ca <mem_free+0xa2>
   261ae:	f10e 0e01 	add.w	lr, lr, #1
   261b2:	45f0      	cmp	r8, lr
   261b4:	d1de      	bne.n	26174 <mem_free+0x4c>
   261b6:	f8dd c004 	ldr.w	ip, [sp, #4]
   261ba:	e7c6      	b.n	2614a <mem_free+0x22>
   261bc:	4665      	mov	r5, ip
   261be:	464e      	mov	r6, r9
   261c0:	8833      	ldrh	r3, [r6, #0]
   261c2:	fb00 5003 	mla	r0, r0, r3, r5
   261c6:	4281      	cmp	r1, r0
   261c8:	d1f1      	bne.n	261ae <mem_free+0x86>
   261ca:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   261ce:	f8dd c004 	ldr.w	ip, [sp, #4]
   261d2:	d0ba      	beq.n	2614a <mem_free+0x22>
   261d4:	2301      	movs	r3, #1
   261d6:	4a08      	ldr	r2, [pc, #32]	; (261f8 <mem_free+0xd0>)
   261d8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   261dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   261e0:	f00e 0e1f 	and.w	lr, lr, #31
   261e4:	fa03 fe0e 	lsl.w	lr, r3, lr
   261e8:	ea4e 0000 	orr.w	r0, lr, r0
   261ec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   261f0:	e7af      	b.n	26152 <mem_free+0x2a>
   261f2:	4638      	mov	r0, r7
   261f4:	e7d9      	b.n	261aa <mem_free+0x82>
   261f6:	bf00      	nop
   261f8:	20022840 	.word	0x20022840
   261fc:	20022884 	.word	0x20022884

00026200 <mem_alloc.constprop.5>:
   26200:	2800      	cmp	r0, #0
   26202:	d050      	beq.n	262a6 <mem_alloc.constprop.5+0xa6>
   26204:	4b6d      	ldr	r3, [pc, #436]	; (263bc <mem_alloc.constprop.5+0x1bc>)
   26206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2620a:	4290      	cmp	r0, r2
   2620c:	d84b      	bhi.n	262a6 <mem_alloc.constprop.5+0xa6>
   2620e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26212:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   26216:	b083      	sub	sp, #12
   26218:	f1bb 0f00 	cmp.w	fp, #0
   2621c:	d054      	beq.n	262c8 <mem_alloc.constprop.5+0xc8>
   2621e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   26222:	4691      	mov	r9, r2
   26224:	2600      	movs	r6, #0
   26226:	f04f 0812 	mov.w	r8, #18
   2622a:	4f65      	ldr	r7, [pc, #404]	; (263c0 <mem_alloc.constprop.5+0x1c0>)
   2622c:	9201      	str	r2, [sp, #4]
   2622e:	f10b 0e11 	add.w	lr, fp, #17
   26232:	eb06 0209 	add.w	r2, r6, r9
   26236:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   2623a:	3201      	adds	r2, #1
   2623c:	0852      	lsrs	r2, r2, #1
   2623e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   26242:	f102 0112 	add.w	r1, r2, #18
   26246:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   2624a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   2624e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   26252:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   26256:	f8dc c004 	ldr.w	ip, [ip, #4]
   2625a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2625e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   26262:	f8da a010 	ldr.w	sl, [sl, #16]
   26266:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   2626a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   2626e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   26272:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   26276:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   2627a:	6849      	ldr	r1, [r1, #4]
   2627c:	692d      	ldr	r5, [r5, #16]
   2627e:	6924      	ldr	r4, [r4, #16]
   26280:	f8dc c004 	ldr.w	ip, [ip, #4]
   26284:	4550      	cmp	r0, sl
   26286:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   2628a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   2628e:	d915      	bls.n	262bc <mem_alloc.constprop.5+0xbc>
   26290:	4288      	cmp	r0, r1
   26292:	d211      	bcs.n	262b8 <mem_alloc.constprop.5+0xb8>
   26294:	42a8      	cmp	r0, r5
   26296:	d908      	bls.n	262aa <mem_alloc.constprop.5+0xaa>
   26298:	1c56      	adds	r6, r2, #1
   2629a:	45b1      	cmp	r9, r6
   2629c:	f0c0 8087 	bcc.w	263ae <mem_alloc.constprop.5+0x1ae>
   262a0:	f102 0813 	add.w	r8, r2, #19
   262a4:	e7c5      	b.n	26232 <mem_alloc.constprop.5+0x32>
   262a6:	2000      	movs	r0, #0
   262a8:	4770      	bx	lr
   262aa:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   262ae:	454e      	cmp	r6, r9
   262b0:	d87d      	bhi.n	263ae <mem_alloc.constprop.5+0x1ae>
   262b2:	f102 0e11 	add.w	lr, r2, #17
   262b6:	e7bc      	b.n	26232 <mem_alloc.constprop.5+0x32>
   262b8:	f109 0601 	add.w	r6, r9, #1
   262bc:	45b3      	cmp	fp, r6
   262be:	d007      	beq.n	262d0 <mem_alloc.constprop.5+0xd0>
   262c0:	2e10      	cmp	r6, #16
   262c2:	d001      	beq.n	262c8 <mem_alloc.constprop.5+0xc8>
   262c4:	45b3      	cmp	fp, r6
   262c6:	d808      	bhi.n	262da <mem_alloc.constprop.5+0xda>
   262c8:	2000      	movs	r0, #0
   262ca:	b003      	add	sp, #12
   262cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262d0:	9a01      	ldr	r2, [sp, #4]
   262d2:	2a10      	cmp	r2, #16
   262d4:	bf18      	it	ne
   262d6:	4616      	movne	r6, r2
   262d8:	d0f6      	beq.n	262c8 <mem_alloc.constprop.5+0xc8>
   262da:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 263c4 <mem_alloc.constprop.5+0x1c4>
   262de:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   262e2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   262e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   262ea:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   262ee:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   262f2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   262f6:	691d      	ldr	r5, [r3, #16]
   262f8:	2c00      	cmp	r4, #0
   262fa:	d056      	beq.n	263aa <mem_alloc.constprop.5+0x1aa>
   262fc:	462a      	mov	r2, r5
   262fe:	4670      	mov	r0, lr
   26300:	00a4      	lsls	r4, r4, #2
   26302:	eb05 0904 	add.w	r9, r5, r4
   26306:	8851      	ldrh	r1, [r2, #2]
   26308:	3204      	adds	r2, #4
   2630a:	4591      	cmp	r9, r2
   2630c:	4408      	add	r0, r1
   2630e:	d1fa      	bne.n	26306 <mem_alloc.constprop.5+0x106>
   26310:	1929      	adds	r1, r5, r4
   26312:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   26316:	4482      	add	sl, r0
   26318:	4582      	cmp	sl, r0
   2631a:	d918      	bls.n	2634e <mem_alloc.constprop.5+0x14e>
   2631c:	0941      	lsrs	r1, r0, #5
   2631e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   26322:	f000 041f 	and.w	r4, r0, #31
   26326:	fa22 f904 	lsr.w	r9, r2, r4
   2632a:	f019 0f01 	tst.w	r9, #1
   2632e:	d007      	beq.n	26340 <mem_alloc.constprop.5+0x140>
   26330:	e013      	b.n	2635a <mem_alloc.constprop.5+0x15a>
   26332:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   26336:	fa22 f904 	lsr.w	r9, r2, r4
   2633a:	f019 0f01 	tst.w	r9, #1
   2633e:	d10c      	bne.n	2635a <mem_alloc.constprop.5+0x15a>
   26340:	3001      	adds	r0, #1
   26342:	4582      	cmp	sl, r0
   26344:	ea4f 1150 	mov.w	r1, r0, lsr #5
   26348:	f000 041f 	and.w	r4, r0, #31
   2634c:	d1f1      	bne.n	26332 <mem_alloc.constprop.5+0x132>
   2634e:	3601      	adds	r6, #1
   26350:	455e      	cmp	r6, fp
   26352:	f108 0808 	add.w	r8, r8, #8
   26356:	d3c4      	bcc.n	262e2 <mem_alloc.constprop.5+0xe2>
   26358:	e7b6      	b.n	262c8 <mem_alloc.constprop.5+0xc8>
   2635a:	2601      	movs	r6, #1
   2635c:	fa06 f404 	lsl.w	r4, r6, r4
   26360:	899e      	ldrh	r6, [r3, #12]
   26362:	ea22 0204 	bic.w	r2, r2, r4
   26366:	eba0 000e 	sub.w	r0, r0, lr
   2636a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   2636e:	685c      	ldr	r4, [r3, #4]
   26370:	2e00      	cmp	r6, #0
   26372:	d0a9      	beq.n	262c8 <mem_alloc.constprop.5+0xc8>
   26374:	886a      	ldrh	r2, [r5, #2]
   26376:	4282      	cmp	r2, r0
   26378:	d811      	bhi.n	2639e <mem_alloc.constprop.5+0x19e>
   2637a:	2100      	movs	r1, #0
   2637c:	1d2b      	adds	r3, r5, #4
   2637e:	e003      	b.n	26388 <mem_alloc.constprop.5+0x188>
   26380:	885a      	ldrh	r2, [r3, #2]
   26382:	3304      	adds	r3, #4
   26384:	4282      	cmp	r2, r0
   26386:	d80a      	bhi.n	2639e <mem_alloc.constprop.5+0x19e>
   26388:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   2638c:	3101      	adds	r1, #1
   2638e:	428e      	cmp	r6, r1
   26390:	fb02 4405 	mla	r4, r2, r5, r4
   26394:	eba0 0002 	sub.w	r0, r0, r2
   26398:	461d      	mov	r5, r3
   2639a:	d1f1      	bne.n	26380 <mem_alloc.constprop.5+0x180>
   2639c:	e794      	b.n	262c8 <mem_alloc.constprop.5+0xc8>
   2639e:	882b      	ldrh	r3, [r5, #0]
   263a0:	fb00 4003 	mla	r0, r0, r3, r4
   263a4:	b003      	add	sp, #12
   263a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263aa:	4670      	mov	r0, lr
   263ac:	e7b0      	b.n	26310 <mem_alloc.constprop.5+0x110>
   263ae:	f1bb 0f10 	cmp.w	fp, #16
   263b2:	bf08      	it	eq
   263b4:	260f      	moveq	r6, #15
   263b6:	d090      	beq.n	262da <mem_alloc.constprop.5+0xda>
   263b8:	e786      	b.n	262c8 <mem_alloc.constprop.5+0xc8>
   263ba:	bf00      	nop
   263bc:	200228c0 	.word	0x200228c0
   263c0:	20022884 	.word	0x20022884
   263c4:	20022840 	.word	0x20022840

000263c8 <mem_alloc.constprop.4>:
   263c8:	2800      	cmp	r0, #0
   263ca:	d04c      	beq.n	26466 <mem_alloc.constprop.4+0x9e>
   263cc:	4b6b      	ldr	r3, [pc, #428]	; (2657c <mem_alloc.constprop.4+0x1b4>)
   263ce:	681a      	ldr	r2, [r3, #0]
   263d0:	4290      	cmp	r0, r2
   263d2:	d848      	bhi.n	26466 <mem_alloc.constprop.4+0x9e>
   263d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d8:	685f      	ldr	r7, [r3, #4]
   263da:	b083      	sub	sp, #12
   263dc:	9700      	str	r7, [sp, #0]
   263de:	2f00      	cmp	r7, #0
   263e0:	d051      	beq.n	26486 <mem_alloc.constprop.4+0xbe>
   263e2:	1e7a      	subs	r2, r7, #1
   263e4:	4696      	mov	lr, r2
   263e6:	2100      	movs	r1, #0
   263e8:	f04f 0c01 	mov.w	ip, #1
   263ec:	4c64      	ldr	r4, [pc, #400]	; (26580 <mem_alloc.constprop.4+0x1b8>)
   263ee:	9201      	str	r2, [sp, #4]
   263f0:	eb01 020e 	add.w	r2, r1, lr
   263f4:	3201      	adds	r2, #1
   263f6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   263fa:	0852      	lsrs	r2, r2, #1
   263fc:	f102 0801 	add.w	r8, r2, #1
   26400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26404:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   26408:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   2640c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   26410:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   26414:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   26418:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2641c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   26420:	f8da a010 	ldr.w	sl, [sl, #16]
   26424:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   26428:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   2642c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   26430:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   26434:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   26438:	6936      	ldr	r6, [r6, #16]
   2643a:	f8db b004 	ldr.w	fp, [fp, #4]
   2643e:	692d      	ldr	r5, [r5, #16]
   26440:	f8d9 9004 	ldr.w	r9, [r9, #4]
   26444:	4550      	cmp	r0, sl
   26446:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   2644a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   2644e:	d913      	bls.n	26478 <mem_alloc.constprop.4+0xb0>
   26450:	42a8      	cmp	r0, r5
   26452:	d210      	bcs.n	26476 <mem_alloc.constprop.4+0xae>
   26454:	42b0      	cmp	r0, r6
   26456:	d908      	bls.n	2646a <mem_alloc.constprop.4+0xa2>
   26458:	45c6      	cmp	lr, r8
   2645a:	4641      	mov	r1, r8
   2645c:	f0c0 8087 	bcc.w	2656e <mem_alloc.constprop.4+0x1a6>
   26460:	f108 0c01 	add.w	ip, r8, #1
   26464:	e7c4      	b.n	263f0 <mem_alloc.constprop.4+0x28>
   26466:	2000      	movs	r0, #0
   26468:	4770      	bx	lr
   2646a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   2646e:	4571      	cmp	r1, lr
   26470:	d87d      	bhi.n	2656e <mem_alloc.constprop.4+0x1a6>
   26472:	4617      	mov	r7, r2
   26474:	e7bc      	b.n	263f0 <mem_alloc.constprop.4+0x28>
   26476:	4639      	mov	r1, r7
   26478:	9a00      	ldr	r2, [sp, #0]
   2647a:	428a      	cmp	r2, r1
   2647c:	d007      	beq.n	2648e <mem_alloc.constprop.4+0xc6>
   2647e:	2910      	cmp	r1, #16
   26480:	d001      	beq.n	26486 <mem_alloc.constprop.4+0xbe>
   26482:	428a      	cmp	r2, r1
   26484:	d808      	bhi.n	26498 <mem_alloc.constprop.4+0xd0>
   26486:	2000      	movs	r0, #0
   26488:	b003      	add	sp, #12
   2648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2648e:	9a01      	ldr	r2, [sp, #4]
   26490:	2a10      	cmp	r2, #16
   26492:	bf18      	it	ne
   26494:	4611      	movne	r1, r2
   26496:	d0f6      	beq.n	26486 <mem_alloc.constprop.4+0xbe>
   26498:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 26584 <mem_alloc.constprop.4+0x1bc>
   2649c:	f8dd 9000 	ldr.w	r9, [sp]
   264a0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   264a4:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   264a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   264ac:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   264b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   264b4:	f8d2 e004 	ldr.w	lr, [r2, #4]
   264b8:	691f      	ldr	r7, [r3, #16]
   264ba:	2e00      	cmp	r6, #0
   264bc:	d055      	beq.n	2656a <mem_alloc.constprop.4+0x1a2>
   264be:	463a      	mov	r2, r7
   264c0:	4670      	mov	r0, lr
   264c2:	00b6      	lsls	r6, r6, #2
   264c4:	eb07 0a06 	add.w	sl, r7, r6
   264c8:	8855      	ldrh	r5, [r2, #2]
   264ca:	3204      	adds	r2, #4
   264cc:	4592      	cmp	sl, r2
   264ce:	4428      	add	r0, r5
   264d0:	d1fa      	bne.n	264c8 <mem_alloc.constprop.4+0x100>
   264d2:	19bd      	adds	r5, r7, r6
   264d4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   264d8:	4483      	add	fp, r0
   264da:	4583      	cmp	fp, r0
   264dc:	d918      	bls.n	26510 <mem_alloc.constprop.4+0x148>
   264de:	0945      	lsrs	r5, r0, #5
   264e0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   264e4:	f000 061f 	and.w	r6, r0, #31
   264e8:	fa22 fa06 	lsr.w	sl, r2, r6
   264ec:	f01a 0f01 	tst.w	sl, #1
   264f0:	d007      	beq.n	26502 <mem_alloc.constprop.4+0x13a>
   264f2:	e013      	b.n	2651c <mem_alloc.constprop.4+0x154>
   264f4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   264f8:	fa22 fa06 	lsr.w	sl, r2, r6
   264fc:	f01a 0f01 	tst.w	sl, #1
   26500:	d10c      	bne.n	2651c <mem_alloc.constprop.4+0x154>
   26502:	3001      	adds	r0, #1
   26504:	4583      	cmp	fp, r0
   26506:	ea4f 1550 	mov.w	r5, r0, lsr #5
   2650a:	f000 061f 	and.w	r6, r0, #31
   2650e:	d1f1      	bne.n	264f4 <mem_alloc.constprop.4+0x12c>
   26510:	3101      	adds	r1, #1
   26512:	4549      	cmp	r1, r9
   26514:	f108 0808 	add.w	r8, r8, #8
   26518:	d3c4      	bcc.n	264a4 <mem_alloc.constprop.4+0xdc>
   2651a:	e7b4      	b.n	26486 <mem_alloc.constprop.4+0xbe>
   2651c:	2101      	movs	r1, #1
   2651e:	40b1      	lsls	r1, r6
   26520:	899e      	ldrh	r6, [r3, #12]
   26522:	ea22 0201 	bic.w	r2, r2, r1
   26526:	eba0 000e 	sub.w	r0, r0, lr
   2652a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   2652e:	685c      	ldr	r4, [r3, #4]
   26530:	2e00      	cmp	r6, #0
   26532:	d0a8      	beq.n	26486 <mem_alloc.constprop.4+0xbe>
   26534:	887a      	ldrh	r2, [r7, #2]
   26536:	4282      	cmp	r2, r0
   26538:	d811      	bhi.n	2655e <mem_alloc.constprop.4+0x196>
   2653a:	2100      	movs	r1, #0
   2653c:	1d3b      	adds	r3, r7, #4
   2653e:	e003      	b.n	26548 <mem_alloc.constprop.4+0x180>
   26540:	885a      	ldrh	r2, [r3, #2]
   26542:	3304      	adds	r3, #4
   26544:	4282      	cmp	r2, r0
   26546:	d80a      	bhi.n	2655e <mem_alloc.constprop.4+0x196>
   26548:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   2654c:	3101      	adds	r1, #1
   2654e:	428e      	cmp	r6, r1
   26550:	eba0 0002 	sub.w	r0, r0, r2
   26554:	fb02 4405 	mla	r4, r2, r5, r4
   26558:	461f      	mov	r7, r3
   2655a:	d1f1      	bne.n	26540 <mem_alloc.constprop.4+0x178>
   2655c:	e793      	b.n	26486 <mem_alloc.constprop.4+0xbe>
   2655e:	883b      	ldrh	r3, [r7, #0]
   26560:	fb00 4003 	mla	r0, r0, r3, r4
   26564:	b003      	add	sp, #12
   26566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2656a:	4670      	mov	r0, lr
   2656c:	e7b1      	b.n	264d2 <mem_alloc.constprop.4+0x10a>
   2656e:	9a00      	ldr	r2, [sp, #0]
   26570:	2a10      	cmp	r2, #16
   26572:	bf08      	it	eq
   26574:	210f      	moveq	r1, #15
   26576:	d08f      	beq.n	26498 <mem_alloc.constprop.4+0xd0>
   26578:	e785      	b.n	26486 <mem_alloc.constprop.4+0xbe>
   2657a:	bf00      	nop
   2657c:	200228c0 	.word	0x200228c0
   26580:	20022884 	.word	0x20022884
   26584:	20022840 	.word	0x20022840

00026588 <nrf_mem_init>:
   26588:	b570      	push	{r4, r5, r6, lr}
   2658a:	2200      	movs	r2, #0
   2658c:	2501      	movs	r5, #1
   2658e:	4833      	ldr	r0, [pc, #204]	; (2665c <nrf_mem_init+0xd4>)
   26590:	0951      	lsrs	r1, r2, #5
   26592:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   26596:	f002 031f 	and.w	r3, r2, #31
   2659a:	fa05 f303 	lsl.w	r3, r5, r3
   2659e:	3201      	adds	r2, #1
   265a0:	4323      	orrs	r3, r4
   265a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   265a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   265aa:	d1f1      	bne.n	26590 <nrf_mem_init+0x8>
   265ac:	2400      	movs	r4, #0
   265ae:	4b2c      	ldr	r3, [pc, #176]	; (26660 <nrf_mem_init+0xd8>)
   265b0:	4621      	mov	r1, r4
   265b2:	223c      	movs	r2, #60	; 0x3c
   265b4:	482b      	ldr	r0, [pc, #172]	; (26664 <nrf_mem_init+0xdc>)
   265b6:	601c      	str	r4, [r3, #0]
   265b8:	f00e fa6c 	bl	34a94 <memset>
   265bc:	2110      	movs	r1, #16
   265be:	2205      	movs	r2, #5
   265c0:	4b29      	ldr	r3, [pc, #164]	; (26668 <nrf_mem_init+0xe0>)
   265c2:	4e2a      	ldr	r6, [pc, #168]	; (2666c <nrf_mem_init+0xe4>)
   265c4:	e9c3 4400 	strd	r4, r4, [r3]
   265c8:	60d9      	str	r1, [r3, #12]
   265ca:	6159      	str	r1, [r3, #20]
   265cc:	61d9      	str	r1, [r3, #28]
   265ce:	6259      	str	r1, [r3, #36]	; 0x24
   265d0:	62d9      	str	r1, [r3, #44]	; 0x2c
   265d2:	6359      	str	r1, [r3, #52]	; 0x34
   265d4:	63d9      	str	r1, [r3, #60]	; 0x3c
   265d6:	6459      	str	r1, [r3, #68]	; 0x44
   265d8:	64d9      	str	r1, [r3, #76]	; 0x4c
   265da:	6559      	str	r1, [r3, #84]	; 0x54
   265dc:	65d9      	str	r1, [r3, #92]	; 0x5c
   265de:	6659      	str	r1, [r3, #100]	; 0x64
   265e0:	66d9      	str	r1, [r3, #108]	; 0x6c
   265e2:	6759      	str	r1, [r3, #116]	; 0x74
   265e4:	67d9      	str	r1, [r3, #124]	; 0x7c
   265e6:	609a      	str	r2, [r3, #8]
   265e8:	611a      	str	r2, [r3, #16]
   265ea:	619a      	str	r2, [r3, #24]
   265ec:	621a      	str	r2, [r3, #32]
   265ee:	629a      	str	r2, [r3, #40]	; 0x28
   265f0:	631a      	str	r2, [r3, #48]	; 0x30
   265f2:	639a      	str	r2, [r3, #56]	; 0x38
   265f4:	641a      	str	r2, [r3, #64]	; 0x40
   265f6:	649a      	str	r2, [r3, #72]	; 0x48
   265f8:	651a      	str	r2, [r3, #80]	; 0x50
   265fa:	659a      	str	r2, [r3, #88]	; 0x58
   265fc:	661a      	str	r2, [r3, #96]	; 0x60
   265fe:	669a      	str	r2, [r3, #104]	; 0x68
   26600:	671a      	str	r2, [r3, #112]	; 0x70
   26602:	679a      	str	r2, [r3, #120]	; 0x78
   26604:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   26608:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   2660c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   26610:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   26614:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   26618:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   2661c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   26620:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   26624:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   26628:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   2662c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   26630:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   26634:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   26638:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   2663c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   26640:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   26644:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   26648:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2664c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   26650:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   26654:	4620      	mov	r0, r4
   26656:	7035      	strb	r5, [r6, #0]
   26658:	bd70      	pop	{r4, r5, r6, pc}
   2665a:	bf00      	nop
   2665c:	20022840 	.word	0x20022840
   26660:	20022880 	.word	0x20022880
   26664:	20022884 	.word	0x20022884
   26668:	200228c0 	.word	0x200228c0
   2666c:	20028f85 	.word	0x20028f85

00026670 <nrf_mem_register>:
   26670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26674:	4b87      	ldr	r3, [pc, #540]	; (26894 <nrf_mem_register+0x224>)
   26676:	b087      	sub	sp, #28
   26678:	781b      	ldrb	r3, [r3, #0]
   2667a:	2b00      	cmp	r3, #0
   2667c:	f000 808c 	beq.w	26798 <nrf_mem_register+0x128>
   26680:	b328      	cbz	r0, 266ce <nrf_mem_register+0x5e>
   26682:	b321      	cbz	r1, 266ce <nrf_mem_register+0x5e>
   26684:	780b      	ldrb	r3, [r1, #0]
   26686:	f8df 8218 	ldr.w	r8, [pc, #536]	; 268a0 <nrf_mem_register+0x230>
   2668a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   2668e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   26692:	685b      	ldr	r3, [r3, #4]
   26694:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   26698:	4463      	add	r3, ip
   2669a:	2b10      	cmp	r3, #16
   2669c:	d811      	bhi.n	266c2 <nrf_mem_register+0x52>
   2669e:	f04f 0a00 	mov.w	sl, #0
   266a2:	4689      	mov	r9, r1
   266a4:	4b7c      	ldr	r3, [pc, #496]	; (26898 <nrf_mem_register+0x228>)
   266a6:	4f7d      	ldr	r7, [pc, #500]	; (2689c <nrf_mem_register+0x22c>)
   266a8:	681b      	ldr	r3, [r3, #0]
   266aa:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   266ae:	9300      	str	r3, [sp, #0]
   266b0:	68b9      	ldr	r1, [r7, #8]
   266b2:	b191      	cbz	r1, 266da <nrf_mem_register+0x6a>
   266b4:	f10a 0a01 	add.w	sl, sl, #1
   266b8:	f1ba 0f05 	cmp.w	sl, #5
   266bc:	f107 070c 	add.w	r7, r7, #12
   266c0:	d1f6      	bne.n	266b0 <nrf_mem_register+0x40>
   266c2:	f248 1b07 	movw	fp, #33031	; 0x8107
   266c6:	4658      	mov	r0, fp
   266c8:	b007      	add	sp, #28
   266ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266ce:	f248 1b0e 	movw	fp, #33038	; 0x810e
   266d2:	4658      	mov	r0, fp
   266d4:	b007      	add	sp, #28
   266d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266da:	f1bc 0f00 	cmp.w	ip, #0
   266de:	d061      	beq.n	267a4 <nrf_mem_register+0x134>
   266e0:	460d      	mov	r5, r1
   266e2:	460c      	mov	r4, r1
   266e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   266e8:	eb0e 0b03 	add.w	fp, lr, r3
   266ec:	885a      	ldrh	r2, [r3, #2]
   266ee:	f833 6b04 	ldrh.w	r6, [r3], #4
   266f2:	4415      	add	r5, r2
   266f4:	459b      	cmp	fp, r3
   266f6:	fb02 4406 	mla	r4, r2, r6, r4
   266fa:	d1f7      	bne.n	266ec <nrf_mem_register+0x7c>
   266fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   26700:	42a3      	cmp	r3, r4
   26702:	d3d7      	bcc.n	266b4 <nrf_mem_register+0x44>
   26704:	9b00      	ldr	r3, [sp, #0]
   26706:	442b      	add	r3, r5
   26708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2670c:	d2d2      	bcs.n	266b4 <nrf_mem_register+0x44>
   2670e:	4c63      	ldr	r4, [pc, #396]	; (2689c <nrf_mem_register+0x22c>)
   26710:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   26714:	0092      	lsls	r2, r2, #2
   26716:	f8c0 a000 	str.w	sl, [r0]
   2671a:	18a0      	adds	r0, r4, r2
   2671c:	f844 9002 	str.w	r9, [r4, r2]
   26720:	9a00      	ldr	r2, [sp, #0]
   26722:	468b      	mov	fp, r1
   26724:	e9c0 2501 	strd	r2, r5, [r0, #4]
   26728:	f899 2001 	ldrb.w	r2, [r9, #1]
   2672c:	485a      	ldr	r0, [pc, #360]	; (26898 <nrf_mem_register+0x228>)
   2672e:	2a01      	cmp	r2, #1
   26730:	6003      	str	r3, [r0, #0]
   26732:	d0c8      	beq.n	266c6 <nrf_mem_register+0x56>
   26734:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   26738:	2b00      	cmp	r3, #0
   2673a:	d0c4      	beq.n	266c6 <nrf_mem_register+0x56>
   2673c:	2500      	movs	r5, #0
   2673e:	f8cd 9004 	str.w	r9, [sp, #4]
   26742:	f8cd a00c 	str.w	sl, [sp, #12]
   26746:	f8cd b014 	str.w	fp, [sp, #20]
   2674a:	9b01      	ldr	r3, [sp, #4]
   2674c:	781f      	ldrb	r7, [r3, #0]
   2674e:	691a      	ldr	r2, [r3, #16]
   26750:	013b      	lsls	r3, r7, #4
   26752:	eb03 0907 	add.w	r9, r3, r7
   26756:	9300      	str	r3, [sp, #0]
   26758:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   2675c:	6859      	ldr	r1, [r3, #4]
   2675e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   26762:	9102      	str	r1, [sp, #8]
   26764:	bb39      	cbnz	r1, 267b6 <nrf_mem_register+0x146>
   26766:	9a03      	ldr	r2, [sp, #12]
   26768:	60dd      	str	r5, [r3, #12]
   2676a:	609a      	str	r2, [r3, #8]
   2676c:	9b00      	ldr	r3, [sp, #0]
   2676e:	443b      	add	r3, r7
   26770:	461f      	mov	r7, r3
   26772:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   26776:	684b      	ldr	r3, [r1, #4]
   26778:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   2677c:	3301      	adds	r3, #1
   2677e:	4294      	cmp	r4, r2
   26780:	604b      	str	r3, [r1, #4]
   26782:	d912      	bls.n	267aa <nrf_mem_register+0x13a>
   26784:	9b01      	ldr	r3, [sp, #4]
   26786:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   2678a:	899b      	ldrh	r3, [r3, #12]
   2678c:	3501      	adds	r5, #1
   2678e:	429d      	cmp	r5, r3
   26790:	d3db      	bcc.n	2674a <nrf_mem_register+0xda>
   26792:	f8dd b014 	ldr.w	fp, [sp, #20]
   26796:	e796      	b.n	266c6 <nrf_mem_register+0x56>
   26798:	f248 1b08 	movw	fp, #33032	; 0x8108
   2679c:	4658      	mov	r0, fp
   2679e:	b007      	add	sp, #28
   267a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267a4:	9b00      	ldr	r3, [sp, #0]
   267a6:	4665      	mov	r5, ip
   267a8:	e7ae      	b.n	26708 <nrf_mem_register+0x98>
   267aa:	9b01      	ldr	r3, [sp, #4]
   267ac:	3501      	adds	r5, #1
   267ae:	899b      	ldrh	r3, [r3, #12]
   267b0:	42ab      	cmp	r3, r5
   267b2:	d8ca      	bhi.n	2674a <nrf_mem_register+0xda>
   267b4:	e7ed      	b.n	26792 <nrf_mem_register+0x122>
   267b6:	2600      	movs	r6, #0
   267b8:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   267bc:	9504      	str	r5, [sp, #16]
   267be:	eb06 000a 	add.w	r0, r6, sl
   267c2:	eb09 0206 	add.w	r2, r9, r6
   267c6:	3201      	adds	r2, #1
   267c8:	3001      	adds	r0, #1
   267ca:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   267ce:	0840      	lsrs	r0, r0, #1
   267d0:	4d32      	ldr	r5, [pc, #200]	; (2689c <nrf_mem_register+0x22c>)
   267d2:	eb09 0100 	add.w	r1, r9, r0
   267d6:	eb09 030a 	add.w	r3, r9, sl
   267da:	3101      	adds	r1, #1
   267dc:	3301      	adds	r3, #1
   267de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   267e2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   267e6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   267ea:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   267ee:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   267f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   267f6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   267fa:	f8db b010 	ldr.w	fp, [fp, #16]
   267fe:	6852      	ldr	r2, [r2, #4]
   26800:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   26804:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   26808:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   2680c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   26810:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   26814:	f8de e010 	ldr.w	lr, [lr, #16]
   26818:	6849      	ldr	r1, [r1, #4]
   2681a:	f8dc c010 	ldr.w	ip, [ip, #16]
   2681e:	685b      	ldr	r3, [r3, #4]
   26820:	4294      	cmp	r4, r2
   26822:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   26826:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   2682a:	d92d      	bls.n	26888 <nrf_mem_register+0x218>
   2682c:	429c      	cmp	r4, r3
   2682e:	d22d      	bcs.n	2688c <nrf_mem_register+0x21c>
   26830:	428c      	cmp	r4, r1
   26832:	d924      	bls.n	2687e <nrf_mem_register+0x20e>
   26834:	1c46      	adds	r6, r0, #1
   26836:	45b2      	cmp	sl, r6
   26838:	d2c1      	bcs.n	267be <nrf_mem_register+0x14e>
   2683a:	2610      	movs	r6, #16
   2683c:	9d04      	ldr	r5, [sp, #16]
   2683e:	9a02      	ldr	r2, [sp, #8]
   26840:	42b2      	cmp	r2, r6
   26842:	d911      	bls.n	26868 <nrf_mem_register+0x1f8>
   26844:	9b00      	ldr	r3, [sp, #0]
   26846:	443b      	add	r3, r7
   26848:	441a      	add	r2, r3
   2684a:	4433      	add	r3, r6
   2684c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   26850:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   26854:	2208      	movs	r2, #8
   26856:	4651      	mov	r1, sl
   26858:	eb0a 0002 	add.w	r0, sl, r2
   2685c:	f1aa 0a08 	sub.w	sl, sl, #8
   26860:	f00e f8de 	bl	34a20 <memcpy>
   26864:	45d1      	cmp	r9, sl
   26866:	d1f5      	bne.n	26854 <nrf_mem_register+0x1e4>
   26868:	9b00      	ldr	r3, [sp, #0]
   2686a:	9903      	ldr	r1, [sp, #12]
   2686c:	443b      	add	r3, r7
   2686e:	4433      	add	r3, r6
   26870:	3301      	adds	r3, #1
   26872:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   26876:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   2687a:	6055      	str	r5, [r2, #4]
   2687c:	e776      	b.n	2676c <nrf_mem_register+0xfc>
   2687e:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   26882:	4556      	cmp	r6, sl
   26884:	d99b      	bls.n	267be <nrf_mem_register+0x14e>
   26886:	e7d8      	b.n	2683a <nrf_mem_register+0x1ca>
   26888:	9d04      	ldr	r5, [sp, #16]
   2688a:	e7d8      	b.n	2683e <nrf_mem_register+0x1ce>
   2688c:	9d04      	ldr	r5, [sp, #16]
   2688e:	f10a 0601 	add.w	r6, sl, #1
   26892:	e7d4      	b.n	2683e <nrf_mem_register+0x1ce>
   26894:	20028f85 	.word	0x20028f85
   26898:	20022880 	.word	0x20022880
   2689c:	20022884 	.word	0x20022884
   268a0:	200228c0 	.word	0x200228c0

000268a4 <nrf_malloc>:
   268a4:	4b03      	ldr	r3, [pc, #12]	; (268b4 <nrf_malloc+0x10>)
   268a6:	781b      	ldrb	r3, [r3, #0]
   268a8:	b10b      	cbz	r3, 268ae <nrf_malloc+0xa>
   268aa:	f7ff bd8d 	b.w	263c8 <mem_alloc.constprop.4>
   268ae:	4618      	mov	r0, r3
   268b0:	4770      	bx	lr
   268b2:	bf00      	nop
   268b4:	20028f85 	.word	0x20028f85

000268b8 <nrf_free>:
   268b8:	4b04      	ldr	r3, [pc, #16]	; (268cc <nrf_free+0x14>)
   268ba:	781b      	ldrb	r3, [r3, #0]
   268bc:	b123      	cbz	r3, 268c8 <nrf_free+0x10>
   268be:	b118      	cbz	r0, 268c8 <nrf_free+0x10>
   268c0:	4601      	mov	r1, r0
   268c2:	2000      	movs	r0, #0
   268c4:	f7ff bc30 	b.w	26128 <mem_free>
   268c8:	4770      	bx	lr
   268ca:	bf00      	nop
   268cc:	20028f85 	.word	0x20028f85

000268d0 <nrf_shared_malloc>:
   268d0:	4b03      	ldr	r3, [pc, #12]	; (268e0 <nrf_shared_malloc+0x10>)
   268d2:	781b      	ldrb	r3, [r3, #0]
   268d4:	b10b      	cbz	r3, 268da <nrf_shared_malloc+0xa>
   268d6:	f7ff bc93 	b.w	26200 <mem_alloc.constprop.5>
   268da:	4618      	mov	r0, r3
   268dc:	4770      	bx	lr
   268de:	bf00      	nop
   268e0:	20028f85 	.word	0x20028f85

000268e4 <nrf_shared_free>:
   268e4:	4b04      	ldr	r3, [pc, #16]	; (268f8 <nrf_shared_free+0x14>)
   268e6:	781b      	ldrb	r3, [r3, #0]
   268e8:	b123      	cbz	r3, 268f4 <nrf_shared_free+0x10>
   268ea:	b118      	cbz	r0, 268f4 <nrf_shared_free+0x10>
   268ec:	4601      	mov	r1, r0
   268ee:	2001      	movs	r0, #1
   268f0:	f7ff bc1a 	b.w	26128 <mem_free>
   268f4:	4770      	bx	lr
   268f6:	bf00      	nop
   268f8:	20028f85 	.word	0x20028f85

000268fc <rpc_dfu_event_handler>:
   268fc:	b508      	push	{r3, lr}
   268fe:	4a08      	ldr	r2, [pc, #32]	; (26920 <rpc_dfu_event_handler+0x24>)
   26900:	68c1      	ldr	r1, [r0, #12]
   26902:	8812      	ldrh	r2, [r2, #0]
   26904:	4603      	mov	r3, r0
   26906:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   2690a:	d005      	beq.n	26918 <rpc_dfu_event_handler+0x1c>
   2690c:	6800      	ldr	r0, [r0, #0]
   2690e:	b110      	cbz	r0, 26916 <rpc_dfu_event_handler+0x1a>
   26910:	f7fd fa60 	bl	23dd4 <rpc_dfu_client_data_free>
   26914:	2000      	movs	r0, #0
   26916:	bd08      	pop	{r3, pc}
   26918:	4a02      	ldr	r2, [pc, #8]	; (26924 <rpc_dfu_event_handler+0x28>)
   2691a:	2001      	movs	r0, #1
   2691c:	6013      	str	r3, [r2, #0]
   2691e:	bd08      	pop	{r3, pc}
   26920:	2002755c 	.word	0x2002755c
   26924:	200229dc 	.word	0x200229dc

00026928 <mfu_interface_init>:
   26928:	2300      	movs	r3, #0
   2692a:	b510      	push	{r4, lr}
   2692c:	4808      	ldr	r0, [pc, #32]	; (26950 <mfu_interface_init+0x28>)
   2692e:	4909      	ldr	r1, [pc, #36]	; (26954 <mfu_interface_init+0x2c>)
   26930:	4a09      	ldr	r2, [pc, #36]	; (26958 <mfu_interface_init+0x30>)
   26932:	4c0a      	ldr	r4, [pc, #40]	; (2695c <mfu_interface_init+0x34>)
   26934:	8003      	strh	r3, [r0, #0]
   26936:	600b      	str	r3, [r1, #0]
   26938:	6013      	str	r3, [r2, #0]
   2693a:	6023      	str	r3, [r4, #0]
   2693c:	f7fd fa14 	bl	23d68 <rpc_dfu_client_init>
   26940:	b910      	cbnz	r0, 26948 <mfu_interface_init+0x20>
   26942:	2301      	movs	r3, #1
   26944:	6023      	str	r3, [r4, #0]
   26946:	bd10      	pop	{r4, pc}
   26948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2694c:	bd10      	pop	{r4, pc}
   2694e:	bf00      	nop
   26950:	2002755c 	.word	0x2002755c
   26954:	200229dc 	.word	0x200229dc
   26958:	200229d8 	.word	0x200229d8
   2695c:	200229d0 	.word	0x200229d0

00026960 <mfu_interface_open>:
   26960:	b508      	push	{r3, lr}
   26962:	4b07      	ldr	r3, [pc, #28]	; (26980 <mfu_interface_open+0x20>)
   26964:	681a      	ldr	r2, [r3, #0]
   26966:	2a01      	cmp	r2, #1
   26968:	d103      	bne.n	26972 <mfu_interface_open+0x12>
   2696a:	2202      	movs	r2, #2
   2696c:	601a      	str	r2, [r3, #0]
   2696e:	4805      	ldr	r0, [pc, #20]	; (26984 <mfu_interface_open+0x24>)
   26970:	bd08      	pop	{r3, pc}
   26972:	2001      	movs	r0, #1
   26974:	f7f6 fd7c 	bl	1d470 <bsd_os_errno_set>
   26978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2697c:	bd08      	pop	{r3, pc}
   2697e:	bf00      	nop
   26980:	200229d0 	.word	0x200229d0
   26984:	49765432 	.word	0x49765432

00026988 <mfu_interface_close>:
   26988:	b5f0      	push	{r4, r5, r6, r7, lr}
   2698a:	4c32      	ldr	r4, [pc, #200]	; (26a54 <mfu_interface_close+0xcc>)
   2698c:	b083      	sub	sp, #12
   2698e:	6823      	ldr	r3, [r4, #0]
   26990:	1e9a      	subs	r2, r3, #2
   26992:	2a01      	cmp	r2, #1
   26994:	d857      	bhi.n	26a46 <mfu_interface_close+0xbe>
   26996:	2b03      	cmp	r3, #3
   26998:	d004      	beq.n	269a4 <mfu_interface_close+0x1c>
   2699a:	2301      	movs	r3, #1
   2699c:	2000      	movs	r0, #0
   2699e:	6023      	str	r3, [r4, #0]
   269a0:	b003      	add	sp, #12
   269a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269a4:	2100      	movs	r1, #0
   269a6:	4668      	mov	r0, sp
   269a8:	f7fd f9e4 	bl	23d74 <rpc_dfu_client_request_alloc>
   269ac:	4603      	mov	r3, r0
   269ae:	2800      	cmp	r0, #0
   269b0:	d13d      	bne.n	26a2e <mfu_interface_close+0xa6>
   269b2:	2104      	movs	r1, #4
   269b4:	4e28      	ldr	r6, [pc, #160]	; (26a58 <mfu_interface_close+0xd0>)
   269b6:	9800      	ldr	r0, [sp, #0]
   269b8:	8832      	ldrh	r2, [r6, #0]
   269ba:	7201      	strb	r1, [r0, #8]
   269bc:	3201      	adds	r2, #1
   269be:	b292      	uxth	r2, r2
   269c0:	0411      	lsls	r1, r2, #16
   269c2:	f041 0106 	orr.w	r1, r1, #6
   269c6:	4d25      	ldr	r5, [pc, #148]	; (26a5c <mfu_interface_close+0xd4>)
   269c8:	60c1      	str	r1, [r0, #12]
   269ca:	7103      	strb	r3, [r0, #4]
   269cc:	7143      	strb	r3, [r0, #5]
   269ce:	7183      	strb	r3, [r0, #6]
   269d0:	71c3      	strb	r3, [r0, #7]
   269d2:	7243      	strb	r3, [r0, #9]
   269d4:	7283      	strb	r3, [r0, #10]
   269d6:	72c3      	strb	r3, [r0, #11]
   269d8:	2106      	movs	r1, #6
   269da:	8032      	strh	r2, [r6, #0]
   269dc:	602b      	str	r3, [r5, #0]
   269de:	f7fd f9dd 	bl	23d9c <rpc_dfu_client_request_send>
   269e2:	b9d8      	cbnz	r0, 26a1c <mfu_interface_close+0x94>
   269e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   269e8:	ae02      	add	r6, sp, #8
   269ea:	4627      	mov	r7, r4
   269ec:	f846 3d04 	str.w	r3, [r6, #-4]!
   269f0:	e004      	b.n	269fc <mfu_interface_close+0x74>
   269f2:	4631      	mov	r1, r6
   269f4:	4638      	mov	r0, r7
   269f6:	f7f6 fc91 	bl	1d31c <bsd_os_timedwait>
   269fa:	b9f0      	cbnz	r0, 26a3a <mfu_interface_close+0xb2>
   269fc:	6828      	ldr	r0, [r5, #0]
   269fe:	2800      	cmp	r0, #0
   26a00:	d0f7      	beq.n	269f2 <mfu_interface_close+0x6a>
   26a02:	6905      	ldr	r5, [r0, #16]
   26a04:	f7fd f9de 	bl	23dc4 <rpc_dfu_client_message_free>
   26a08:	2d00      	cmp	r5, #0
   26a0a:	d0c6      	beq.n	2699a <mfu_interface_close+0x12>
   26a0c:	4b14      	ldr	r3, [pc, #80]	; (26a60 <mfu_interface_close+0xd8>)
   26a0e:	2008      	movs	r0, #8
   26a10:	601d      	str	r5, [r3, #0]
   26a12:	f7f6 fd2d 	bl	1d470 <bsd_os_errno_set>
   26a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a1a:	e7c1      	b.n	269a0 <mfu_interface_close+0x18>
   26a1c:	9800      	ldr	r0, [sp, #0]
   26a1e:	6803      	ldr	r3, [r0, #0]
   26a20:	b11b      	cbz	r3, 26a2a <mfu_interface_close+0xa2>
   26a22:	4618      	mov	r0, r3
   26a24:	f7fd f9d6 	bl	23dd4 <rpc_dfu_client_data_free>
   26a28:	9800      	ldr	r0, [sp, #0]
   26a2a:	f7fd f9cb 	bl	23dc4 <rpc_dfu_client_message_free>
   26a2e:	200c      	movs	r0, #12
   26a30:	f7f6 fd1e 	bl	1d470 <bsd_os_errno_set>
   26a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a38:	e7b2      	b.n	269a0 <mfu_interface_close+0x18>
   26a3a:	203c      	movs	r0, #60	; 0x3c
   26a3c:	f7f6 fd18 	bl	1d470 <bsd_os_errno_set>
   26a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a44:	e7ac      	b.n	269a0 <mfu_interface_close+0x18>
   26a46:	2001      	movs	r0, #1
   26a48:	f7f6 fd12 	bl	1d470 <bsd_os_errno_set>
   26a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a50:	e7a6      	b.n	269a0 <mfu_interface_close+0x18>
   26a52:	bf00      	nop
   26a54:	200229d0 	.word	0x200229d0
   26a58:	2002755c 	.word	0x2002755c
   26a5c:	200229dc 	.word	0x200229dc
   26a60:	200229d4 	.word	0x200229d4

00026a64 <mfu_interface_sendto>:
   26a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26a68:	4e64      	ldr	r6, [pc, #400]	; (26bfc <mfu_interface_sendto+0x198>)
   26a6a:	460f      	mov	r7, r1
   26a6c:	6831      	ldr	r1, [r6, #0]
   26a6e:	4615      	mov	r5, r2
   26a70:	1e8a      	subs	r2, r1, #2
   26a72:	2a01      	cmp	r2, #1
   26a74:	b082      	sub	sp, #8
   26a76:	f200 80b4 	bhi.w	26be2 <mfu_interface_sendto+0x17e>
   26a7a:	2f00      	cmp	r7, #0
   26a7c:	f000 80a5 	beq.w	26bca <mfu_interface_sendto+0x166>
   26a80:	2d00      	cmp	r5, #0
   26a82:	f000 80a2 	beq.w	26bca <mfu_interface_sendto+0x166>
   26a86:	2b00      	cmp	r3, #0
   26a88:	f040 80b1 	bne.w	26bee <mfu_interface_sendto+0x18a>
   26a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26a8e:	2b00      	cmp	r3, #0
   26a90:	f040 80a1 	bne.w	26bd6 <mfu_interface_sendto+0x172>
   26a94:	2902      	cmp	r1, #2
   26a96:	d04f      	beq.n	26b38 <mfu_interface_sendto+0xd4>
   26a98:	46e8      	mov	r8, sp
   26a9a:	4640      	mov	r0, r8
   26a9c:	4629      	mov	r1, r5
   26a9e:	f7fd f969 	bl	23d74 <rpc_dfu_client_request_alloc>
   26aa2:	4606      	mov	r6, r0
   26aa4:	b140      	cbz	r0, 26ab8 <mfu_interface_sendto+0x54>
   26aa6:	200c      	movs	r0, #12
   26aa8:	f7f6 fce2 	bl	1d470 <bsd_os_errno_set>
   26aac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26ab0:	4628      	mov	r0, r5
   26ab2:	b002      	add	sp, #8
   26ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26ab8:	9b00      	ldr	r3, [sp, #0]
   26aba:	4639      	mov	r1, r7
   26abc:	6818      	ldr	r0, [r3, #0]
   26abe:	462a      	mov	r2, r5
   26ac0:	f00d ffae 	bl	34a20 <memcpy>
   26ac4:	2104      	movs	r1, #4
   26ac6:	4c4e      	ldr	r4, [pc, #312]	; (26c00 <mfu_interface_sendto+0x19c>)
   26ac8:	9800      	ldr	r0, [sp, #0]
   26aca:	8823      	ldrh	r3, [r4, #0]
   26acc:	6045      	str	r5, [r0, #4]
   26ace:	3301      	adds	r3, #1
   26ad0:	b29b      	uxth	r3, r3
   26ad2:	041a      	lsls	r2, r3, #16
   26ad4:	8023      	strh	r3, [r4, #0]
   26ad6:	430a      	orrs	r2, r1
   26ad8:	4c4a      	ldr	r4, [pc, #296]	; (26c04 <mfu_interface_sendto+0x1a0>)
   26ada:	60c2      	str	r2, [r0, #12]
   26adc:	7246      	strb	r6, [r0, #9]
   26ade:	7286      	strb	r6, [r0, #10]
   26ae0:	72c6      	strb	r6, [r0, #11]
   26ae2:	7201      	strb	r1, [r0, #8]
   26ae4:	6026      	str	r6, [r4, #0]
   26ae6:	f7fd f959 	bl	23d9c <rpc_dfu_client_request_send>
   26aea:	2800      	cmp	r0, #0
   26aec:	d163      	bne.n	26bb6 <mfu_interface_sendto+0x152>
   26aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26af2:	ae02      	add	r6, sp, #8
   26af4:	4f41      	ldr	r7, [pc, #260]	; (26bfc <mfu_interface_sendto+0x198>)
   26af6:	f846 3d04 	str.w	r3, [r6, #-4]!
   26afa:	e004      	b.n	26b06 <mfu_interface_sendto+0xa2>
   26afc:	4631      	mov	r1, r6
   26afe:	4638      	mov	r0, r7
   26b00:	f7f6 fc0c 	bl	1d31c <bsd_os_timedwait>
   26b04:	b978      	cbnz	r0, 26b26 <mfu_interface_sendto+0xc2>
   26b06:	6820      	ldr	r0, [r4, #0]
   26b08:	2800      	cmp	r0, #0
   26b0a:	d0f7      	beq.n	26afc <mfu_interface_sendto+0x98>
   26b0c:	6904      	ldr	r4, [r0, #16]
   26b0e:	f7fd f959 	bl	23dc4 <rpc_dfu_client_message_free>
   26b12:	2c00      	cmp	r4, #0
   26b14:	d0cc      	beq.n	26ab0 <mfu_interface_sendto+0x4c>
   26b16:	4b3c      	ldr	r3, [pc, #240]	; (26c08 <mfu_interface_sendto+0x1a4>)
   26b18:	2008      	movs	r0, #8
   26b1a:	601c      	str	r4, [r3, #0]
   26b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26b20:	f7f6 fca6 	bl	1d470 <bsd_os_errno_set>
   26b24:	e7c4      	b.n	26ab0 <mfu_interface_sendto+0x4c>
   26b26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26b2a:	203c      	movs	r0, #60	; 0x3c
   26b2c:	f7f6 fca0 	bl	1d470 <bsd_os_errno_set>
   26b30:	4628      	mov	r0, r5
   26b32:	b002      	add	sp, #8
   26b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26b38:	46e8      	mov	r8, sp
   26b3a:	4619      	mov	r1, r3
   26b3c:	4640      	mov	r0, r8
   26b3e:	f7fd f919 	bl	23d74 <rpc_dfu_client_request_alloc>
   26b42:	4602      	mov	r2, r0
   26b44:	2800      	cmp	r0, #0
   26b46:	d1ae      	bne.n	26aa6 <mfu_interface_sendto+0x42>
   26b48:	f04f 0c08 	mov.w	ip, #8
   26b4c:	492c      	ldr	r1, [pc, #176]	; (26c00 <mfu_interface_sendto+0x19c>)
   26b4e:	482f      	ldr	r0, [pc, #188]	; (26c0c <mfu_interface_sendto+0x1a8>)
   26b50:	880b      	ldrh	r3, [r1, #0]
   26b52:	6804      	ldr	r4, [r0, #0]
   26b54:	3301      	adds	r3, #1
   26b56:	9800      	ldr	r0, [sp, #0]
   26b58:	b29b      	uxth	r3, r3
   26b5a:	800b      	strh	r3, [r1, #0]
   26b5c:	041b      	lsls	r3, r3, #16
   26b5e:	f043 0303 	orr.w	r3, r3, #3
   26b62:	6104      	str	r4, [r0, #16]
   26b64:	4c27      	ldr	r4, [pc, #156]	; (26c04 <mfu_interface_sendto+0x1a0>)
   26b66:	60c3      	str	r3, [r0, #12]
   26b68:	7102      	strb	r2, [r0, #4]
   26b6a:	7142      	strb	r2, [r0, #5]
   26b6c:	7182      	strb	r2, [r0, #6]
   26b6e:	71c2      	strb	r2, [r0, #7]
   26b70:	7242      	strb	r2, [r0, #9]
   26b72:	7282      	strb	r2, [r0, #10]
   26b74:	72c2      	strb	r2, [r0, #11]
   26b76:	f880 c008 	strb.w	ip, [r0, #8]
   26b7a:	2103      	movs	r1, #3
   26b7c:	6022      	str	r2, [r4, #0]
   26b7e:	f7fd f90d 	bl	23d9c <rpc_dfu_client_request_send>
   26b82:	b9c0      	cbnz	r0, 26bb6 <mfu_interface_sendto+0x152>
   26b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26b88:	f10d 0908 	add.w	r9, sp, #8
   26b8c:	f849 3d04 	str.w	r3, [r9, #-4]!
   26b90:	46b2      	mov	sl, r6
   26b92:	e005      	b.n	26ba0 <mfu_interface_sendto+0x13c>
   26b94:	4649      	mov	r1, r9
   26b96:	4650      	mov	r0, sl
   26b98:	f7f6 fbc0 	bl	1d31c <bsd_os_timedwait>
   26b9c:	2800      	cmp	r0, #0
   26b9e:	d1c2      	bne.n	26b26 <mfu_interface_sendto+0xc2>
   26ba0:	6820      	ldr	r0, [r4, #0]
   26ba2:	2800      	cmp	r0, #0
   26ba4:	d0f6      	beq.n	26b94 <mfu_interface_sendto+0x130>
   26ba6:	6904      	ldr	r4, [r0, #16]
   26ba8:	f7fd f90c 	bl	23dc4 <rpc_dfu_client_message_free>
   26bac:	2c00      	cmp	r4, #0
   26bae:	d1b2      	bne.n	26b16 <mfu_interface_sendto+0xb2>
   26bb0:	2303      	movs	r3, #3
   26bb2:	6033      	str	r3, [r6, #0]
   26bb4:	e771      	b.n	26a9a <mfu_interface_sendto+0x36>
   26bb6:	9800      	ldr	r0, [sp, #0]
   26bb8:	6803      	ldr	r3, [r0, #0]
   26bba:	b11b      	cbz	r3, 26bc4 <mfu_interface_sendto+0x160>
   26bbc:	4618      	mov	r0, r3
   26bbe:	f7fd f909 	bl	23dd4 <rpc_dfu_client_data_free>
   26bc2:	9800      	ldr	r0, [sp, #0]
   26bc4:	f7fd f8fe 	bl	23dc4 <rpc_dfu_client_message_free>
   26bc8:	e76d      	b.n	26aa6 <mfu_interface_sendto+0x42>
   26bca:	2016      	movs	r0, #22
   26bcc:	f7f6 fc50 	bl	1d470 <bsd_os_errno_set>
   26bd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26bd4:	e76c      	b.n	26ab0 <mfu_interface_sendto+0x4c>
   26bd6:	2038      	movs	r0, #56	; 0x38
   26bd8:	f7f6 fc4a 	bl	1d470 <bsd_os_errno_set>
   26bdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26be0:	e766      	b.n	26ab0 <mfu_interface_sendto+0x4c>
   26be2:	2001      	movs	r0, #1
   26be4:	f7f6 fc44 	bl	1d470 <bsd_os_errno_set>
   26be8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26bec:	e760      	b.n	26ab0 <mfu_interface_sendto+0x4c>
   26bee:	202d      	movs	r0, #45	; 0x2d
   26bf0:	f7f6 fc3e 	bl	1d470 <bsd_os_errno_set>
   26bf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26bf8:	e75a      	b.n	26ab0 <mfu_interface_sendto+0x4c>
   26bfa:	bf00      	nop
   26bfc:	200229d0 	.word	0x200229d0
   26c00:	2002755c 	.word	0x2002755c
   26c04:	200229dc 	.word	0x200229dc
   26c08:	200229d4 	.word	0x200229d4
   26c0c:	200229d8 	.word	0x200229d8

00026c10 <mfu_interface_setopt>:
   26c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c12:	4846      	ldr	r0, [pc, #280]	; (26d2c <mfu_interface_setopt+0x11c>)
   26c14:	b083      	sub	sp, #12
   26c16:	6800      	ldr	r0, [r0, #0]
   26c18:	3802      	subs	r0, #2
   26c1a:	2801      	cmp	r0, #1
   26c1c:	d877      	bhi.n	26d0e <mfu_interface_setopt+0xfe>
   26c1e:	f240 2003 	movw	r0, #515	; 0x203
   26c22:	4281      	cmp	r1, r0
   26c24:	d16d      	bne.n	26d02 <mfu_interface_setopt+0xf2>
   26c26:	3a04      	subs	r2, #4
   26c28:	2a03      	cmp	r2, #3
   26c2a:	d85c      	bhi.n	26ce6 <mfu_interface_setopt+0xd6>
   26c2c:	e8df f002 	tbb	[pc, r2]
   26c30:	514e024b 	.word	0x514e024b
   26c34:	2407      	movs	r4, #7
   26c36:	4625      	mov	r5, r4
   26c38:	2100      	movs	r1, #0
   26c3a:	4668      	mov	r0, sp
   26c3c:	f7fd f89a 	bl	23d74 <rpc_dfu_client_request_alloc>
   26c40:	4603      	mov	r3, r0
   26c42:	2800      	cmp	r0, #0
   26c44:	d138      	bne.n	26cb8 <mfu_interface_setopt+0xa8>
   26c46:	2704      	movs	r7, #4
   26c48:	4e39      	ldr	r6, [pc, #228]	; (26d30 <mfu_interface_setopt+0x120>)
   26c4a:	9800      	ldr	r0, [sp, #0]
   26c4c:	8832      	ldrh	r2, [r6, #0]
   26c4e:	4629      	mov	r1, r5
   26c50:	3201      	adds	r2, #1
   26c52:	b292      	uxth	r2, r2
   26c54:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   26c58:	4c36      	ldr	r4, [pc, #216]	; (26d34 <mfu_interface_setopt+0x124>)
   26c5a:	60c5      	str	r5, [r0, #12]
   26c5c:	7103      	strb	r3, [r0, #4]
   26c5e:	7143      	strb	r3, [r0, #5]
   26c60:	7183      	strb	r3, [r0, #6]
   26c62:	71c3      	strb	r3, [r0, #7]
   26c64:	7243      	strb	r3, [r0, #9]
   26c66:	7283      	strb	r3, [r0, #10]
   26c68:	72c3      	strb	r3, [r0, #11]
   26c6a:	7207      	strb	r7, [r0, #8]
   26c6c:	8032      	strh	r2, [r6, #0]
   26c6e:	6023      	str	r3, [r4, #0]
   26c70:	f7fd f894 	bl	23d9c <rpc_dfu_client_request_send>
   26c74:	b9b8      	cbnz	r0, 26ca6 <mfu_interface_setopt+0x96>
   26c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c7a:	ad02      	add	r5, sp, #8
   26c7c:	4e2b      	ldr	r6, [pc, #172]	; (26d2c <mfu_interface_setopt+0x11c>)
   26c7e:	f845 3d04 	str.w	r3, [r5, #-4]!
   26c82:	e005      	b.n	26c90 <mfu_interface_setopt+0x80>
   26c84:	4629      	mov	r1, r5
   26c86:	4630      	mov	r0, r6
   26c88:	f7f6 fb48 	bl	1d31c <bsd_os_timedwait>
   26c8c:	2800      	cmp	r0, #0
   26c8e:	d131      	bne.n	26cf4 <mfu_interface_setopt+0xe4>
   26c90:	6820      	ldr	r0, [r4, #0]
   26c92:	2800      	cmp	r0, #0
   26c94:	d0f6      	beq.n	26c84 <mfu_interface_setopt+0x74>
   26c96:	6904      	ldr	r4, [r0, #16]
   26c98:	f7fd f894 	bl	23dc4 <rpc_dfu_client_message_free>
   26c9c:	2c00      	cmp	r4, #0
   26c9e:	d13c      	bne.n	26d1a <mfu_interface_setopt+0x10a>
   26ca0:	4620      	mov	r0, r4
   26ca2:	b003      	add	sp, #12
   26ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ca6:	9800      	ldr	r0, [sp, #0]
   26ca8:	6803      	ldr	r3, [r0, #0]
   26caa:	b11b      	cbz	r3, 26cb4 <mfu_interface_setopt+0xa4>
   26cac:	4618      	mov	r0, r3
   26cae:	f7fd f891 	bl	23dd4 <rpc_dfu_client_data_free>
   26cb2:	9800      	ldr	r0, [sp, #0]
   26cb4:	f7fd f886 	bl	23dc4 <rpc_dfu_client_message_free>
   26cb8:	200c      	movs	r0, #12
   26cba:	f7f6 fbd9 	bl	1d470 <bsd_os_errno_set>
   26cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cc2:	b003      	add	sp, #12
   26cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26cc6:	2405      	movs	r4, #5
   26cc8:	4625      	mov	r5, r4
   26cca:	e7b5      	b.n	26c38 <mfu_interface_setopt+0x28>
   26ccc:	2408      	movs	r4, #8
   26cce:	4625      	mov	r5, r4
   26cd0:	e7b2      	b.n	26c38 <mfu_interface_setopt+0x28>
   26cd2:	b1b3      	cbz	r3, 26d02 <mfu_interface_setopt+0xf2>
   26cd4:	9a08      	ldr	r2, [sp, #32]
   26cd6:	2a04      	cmp	r2, #4
   26cd8:	d113      	bne.n	26d02 <mfu_interface_setopt+0xf2>
   26cda:	2000      	movs	r0, #0
   26cdc:	681a      	ldr	r2, [r3, #0]
   26cde:	4b16      	ldr	r3, [pc, #88]	; (26d38 <mfu_interface_setopt+0x128>)
   26ce0:	601a      	str	r2, [r3, #0]
   26ce2:	b003      	add	sp, #12
   26ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ce6:	202a      	movs	r0, #42	; 0x2a
   26ce8:	f7f6 fbc2 	bl	1d470 <bsd_os_errno_set>
   26cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cf0:	b003      	add	sp, #12
   26cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26cf4:	203c      	movs	r0, #60	; 0x3c
   26cf6:	f7f6 fbbb 	bl	1d470 <bsd_os_errno_set>
   26cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cfe:	b003      	add	sp, #12
   26d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d02:	2016      	movs	r0, #22
   26d04:	f7f6 fbb4 	bl	1d470 <bsd_os_errno_set>
   26d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d0c:	e7c9      	b.n	26ca2 <mfu_interface_setopt+0x92>
   26d0e:	2001      	movs	r0, #1
   26d10:	f7f6 fbae 	bl	1d470 <bsd_os_errno_set>
   26d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d18:	e7c3      	b.n	26ca2 <mfu_interface_setopt+0x92>
   26d1a:	4b08      	ldr	r3, [pc, #32]	; (26d3c <mfu_interface_setopt+0x12c>)
   26d1c:	2008      	movs	r0, #8
   26d1e:	601c      	str	r4, [r3, #0]
   26d20:	f7f6 fba6 	bl	1d470 <bsd_os_errno_set>
   26d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d28:	e7bb      	b.n	26ca2 <mfu_interface_setopt+0x92>
   26d2a:	bf00      	nop
   26d2c:	200229d0 	.word	0x200229d0
   26d30:	2002755c 	.word	0x2002755c
   26d34:	200229dc 	.word	0x200229dc
   26d38:	200229d8 	.word	0x200229d8
   26d3c:	200229d4 	.word	0x200229d4

00026d40 <mfu_interface_getopt>:
   26d40:	f240 2003 	movw	r0, #515	; 0x203
   26d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d48:	4281      	cmp	r1, r0
   26d4a:	b082      	sub	sp, #8
   26d4c:	9e08      	ldr	r6, [sp, #32]
   26d4e:	f040 80ae 	bne.w	26eae <mfu_interface_getopt+0x16e>
   26d52:	461d      	mov	r5, r3
   26d54:	2b00      	cmp	r3, #0
   26d56:	f000 80aa 	beq.w	26eae <mfu_interface_getopt+0x16e>
   26d5a:	2e00      	cmp	r6, #0
   26d5c:	f000 80a7 	beq.w	26eae <mfu_interface_getopt+0x16e>
   26d60:	4b5e      	ldr	r3, [pc, #376]	; (26edc <mfu_interface_getopt+0x19c>)
   26d62:	681b      	ldr	r3, [r3, #0]
   26d64:	3b02      	subs	r3, #2
   26d66:	2b01      	cmp	r3, #1
   26d68:	f200 80a7 	bhi.w	26eba <mfu_interface_getopt+0x17a>
   26d6c:	3a01      	subs	r2, #1
   26d6e:	2a13      	cmp	r2, #19
   26d70:	d879      	bhi.n	26e66 <mfu_interface_getopt+0x126>
   26d72:	e8df f002 	tbb	[pc, r2]
   26d76:	5f17      	.short	0x5f17
   26d78:	78787878 	.word	0x78787878
   26d7c:	78787872 	.word	0x78787872
   26d80:	78787878 	.word	0x78787878
   26d84:	78787878 	.word	0x78787878
   26d88:	0a78      	.short	0x0a78
   26d8a:	6833      	ldr	r3, [r6, #0]
   26d8c:	2b04      	cmp	r3, #4
   26d8e:	f040 808e 	bne.w	26eae <mfu_interface_getopt+0x16e>
   26d92:	2200      	movs	r2, #0
   26d94:	4610      	mov	r0, r2
   26d96:	4b52      	ldr	r3, [pc, #328]	; (26ee0 <mfu_interface_getopt+0x1a0>)
   26d98:	6819      	ldr	r1, [r3, #0]
   26d9a:	601a      	str	r2, [r3, #0]
   26d9c:	6029      	str	r1, [r5, #0]
   26d9e:	b002      	add	sp, #8
   26da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26da4:	6833      	ldr	r3, [r6, #0]
   26da6:	2b24      	cmp	r3, #36	; 0x24
   26da8:	f040 8081 	bne.w	26eae <mfu_interface_getopt+0x16e>
   26dac:	2401      	movs	r4, #1
   26dae:	46a0      	mov	r8, r4
   26db0:	2100      	movs	r1, #0
   26db2:	4668      	mov	r0, sp
   26db4:	f7fc ffde 	bl	23d74 <rpc_dfu_client_request_alloc>
   26db8:	2800      	cmp	r0, #0
   26dba:	d146      	bne.n	26e4a <mfu_interface_getopt+0x10a>
   26dbc:	4949      	ldr	r1, [pc, #292]	; (26ee4 <mfu_interface_getopt+0x1a4>)
   26dbe:	9b00      	ldr	r3, [sp, #0]
   26dc0:	880a      	ldrh	r2, [r1, #0]
   26dc2:	f1b8 0f03 	cmp.w	r8, #3
   26dc6:	f102 0201 	add.w	r2, r2, #1
   26dca:	b292      	uxth	r2, r2
   26dcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   26dd0:	7118      	strb	r0, [r3, #4]
   26dd2:	800a      	strh	r2, [r1, #0]
   26dd4:	60dc      	str	r4, [r3, #12]
   26dd6:	7158      	strb	r0, [r3, #5]
   26dd8:	7198      	strb	r0, [r3, #6]
   26dda:	71d8      	strb	r0, [r3, #7]
   26ddc:	d04b      	beq.n	26e76 <mfu_interface_getopt+0x136>
   26dde:	2104      	movs	r1, #4
   26de0:	2200      	movs	r2, #0
   26de2:	4f41      	ldr	r7, [pc, #260]	; (26ee8 <mfu_interface_getopt+0x1a8>)
   26de4:	6099      	str	r1, [r3, #8]
   26de6:	4618      	mov	r0, r3
   26de8:	4641      	mov	r1, r8
   26dea:	603a      	str	r2, [r7, #0]
   26dec:	f7fc ffd6 	bl	23d9c <rpc_dfu_client_request_send>
   26df0:	2800      	cmp	r0, #0
   26df2:	d14d      	bne.n	26e90 <mfu_interface_getopt+0x150>
   26df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26df8:	ac02      	add	r4, sp, #8
   26dfa:	f844 3d04 	str.w	r3, [r4, #-4]!
   26dfe:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 26edc <mfu_interface_getopt+0x19c>
   26e02:	e005      	b.n	26e10 <mfu_interface_getopt+0xd0>
   26e04:	4621      	mov	r1, r4
   26e06:	4640      	mov	r0, r8
   26e08:	f7f6 fa88 	bl	1d31c <bsd_os_timedwait>
   26e0c:	2800      	cmp	r0, #0
   26e0e:	d137      	bne.n	26e80 <mfu_interface_getopt+0x140>
   26e10:	6839      	ldr	r1, [r7, #0]
   26e12:	2900      	cmp	r1, #0
   26e14:	d0f6      	beq.n	26e04 <mfu_interface_getopt+0xc4>
   26e16:	690c      	ldr	r4, [r1, #16]
   26e18:	2c00      	cmp	r4, #0
   26e1a:	d154      	bne.n	26ec6 <mfu_interface_getopt+0x186>
   26e1c:	6832      	ldr	r2, [r6, #0]
   26e1e:	3114      	adds	r1, #20
   26e20:	4628      	mov	r0, r5
   26e22:	f00d fdfd 	bl	34a20 <memcpy>
   26e26:	6838      	ldr	r0, [r7, #0]
   26e28:	f7fc ffcc 	bl	23dc4 <rpc_dfu_client_message_free>
   26e2c:	4620      	mov	r0, r4
   26e2e:	b002      	add	sp, #8
   26e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e34:	6833      	ldr	r3, [r6, #0]
   26e36:	2b04      	cmp	r3, #4
   26e38:	d139      	bne.n	26eae <mfu_interface_getopt+0x16e>
   26e3a:	2402      	movs	r4, #2
   26e3c:	2100      	movs	r1, #0
   26e3e:	4668      	mov	r0, sp
   26e40:	46a0      	mov	r8, r4
   26e42:	f7fc ff97 	bl	23d74 <rpc_dfu_client_request_alloc>
   26e46:	2800      	cmp	r0, #0
   26e48:	d0b8      	beq.n	26dbc <mfu_interface_getopt+0x7c>
   26e4a:	200c      	movs	r0, #12
   26e4c:	f7f6 fb10 	bl	1d470 <bsd_os_errno_set>
   26e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e54:	b002      	add	sp, #8
   26e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e5a:	6833      	ldr	r3, [r6, #0]
   26e5c:	2b04      	cmp	r3, #4
   26e5e:	d126      	bne.n	26eae <mfu_interface_getopt+0x16e>
   26e60:	2409      	movs	r4, #9
   26e62:	46a0      	mov	r8, r4
   26e64:	e7a4      	b.n	26db0 <mfu_interface_getopt+0x70>
   26e66:	202a      	movs	r0, #42	; 0x2a
   26e68:	f7f6 fb02 	bl	1d470 <bsd_os_errno_set>
   26e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e70:	b002      	add	sp, #8
   26e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e76:	4a1d      	ldr	r2, [pc, #116]	; (26eec <mfu_interface_getopt+0x1ac>)
   26e78:	2108      	movs	r1, #8
   26e7a:	6812      	ldr	r2, [r2, #0]
   26e7c:	611a      	str	r2, [r3, #16]
   26e7e:	e7af      	b.n	26de0 <mfu_interface_getopt+0xa0>
   26e80:	203c      	movs	r0, #60	; 0x3c
   26e82:	f7f6 faf5 	bl	1d470 <bsd_os_errno_set>
   26e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e8a:	b002      	add	sp, #8
   26e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e90:	9800      	ldr	r0, [sp, #0]
   26e92:	6803      	ldr	r3, [r0, #0]
   26e94:	b11b      	cbz	r3, 26e9e <mfu_interface_getopt+0x15e>
   26e96:	4618      	mov	r0, r3
   26e98:	f7fc ff9c 	bl	23dd4 <rpc_dfu_client_data_free>
   26e9c:	9800      	ldr	r0, [sp, #0]
   26e9e:	f7fc ff91 	bl	23dc4 <rpc_dfu_client_message_free>
   26ea2:	200c      	movs	r0, #12
   26ea4:	f7f6 fae4 	bl	1d470 <bsd_os_errno_set>
   26ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26eac:	e7d2      	b.n	26e54 <mfu_interface_getopt+0x114>
   26eae:	2016      	movs	r0, #22
   26eb0:	f7f6 fade 	bl	1d470 <bsd_os_errno_set>
   26eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26eb8:	e771      	b.n	26d9e <mfu_interface_getopt+0x5e>
   26eba:	2001      	movs	r0, #1
   26ebc:	f7f6 fad8 	bl	1d470 <bsd_os_errno_set>
   26ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26ec4:	e76b      	b.n	26d9e <mfu_interface_getopt+0x5e>
   26ec6:	4b06      	ldr	r3, [pc, #24]	; (26ee0 <mfu_interface_getopt+0x1a0>)
   26ec8:	2008      	movs	r0, #8
   26eca:	601c      	str	r4, [r3, #0]
   26ecc:	f7f6 fad0 	bl	1d470 <bsd_os_errno_set>
   26ed0:	6838      	ldr	r0, [r7, #0]
   26ed2:	f7fc ff77 	bl	23dc4 <rpc_dfu_client_message_free>
   26ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26eda:	e760      	b.n	26d9e <mfu_interface_getopt+0x5e>
   26edc:	200229d0 	.word	0x200229d0
   26ee0:	200229d4 	.word	0x200229d4
   26ee4:	2002755c 	.word	0x2002755c
   26ee8:	200229dc 	.word	0x200229dc
   26eec:	200229d8 	.word	0x200229d8

00026ef0 <interface_init>:
   26ef0:	b508      	push	{r3, lr}
   26ef2:	f44f 72b4 	mov.w	r2, #360	; 0x168
   26ef6:	2100      	movs	r1, #0
   26ef8:	4802      	ldr	r0, [pc, #8]	; (26f04 <interface_init+0x14>)
   26efa:	f00d fdcb 	bl	34a94 <memset>
   26efe:	2000      	movs	r0, #0
   26f00:	bd08      	pop	{r3, pc}
   26f02:	bf00      	nop
   26f04:	20028f88 	.word	0x20028f88

00026f08 <interface_socket_allocate>:
   26f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f0a:	4b30      	ldr	r3, [pc, #192]	; (26fcc <interface_socket_allocate+0xc4>)
   26f0c:	4606      	mov	r6, r0
   26f0e:	681d      	ldr	r5, [r3, #0]
   26f10:	4608      	mov	r0, r1
   26f12:	b31d      	cbz	r5, 26f5c <interface_socket_allocate+0x54>
   26f14:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   26f16:	2c00      	cmp	r4, #0
   26f18:	d04a      	beq.n	26fb0 <interface_socket_allocate+0xa8>
   26f1a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   26f1c:	2c00      	cmp	r4, #0
   26f1e:	d049      	beq.n	26fb4 <interface_socket_allocate+0xac>
   26f20:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   26f22:	2c00      	cmp	r4, #0
   26f24:	d048      	beq.n	26fb8 <interface_socket_allocate+0xb0>
   26f26:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   26f2a:	2900      	cmp	r1, #0
   26f2c:	d046      	beq.n	26fbc <interface_socket_allocate+0xb4>
   26f2e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   26f32:	b191      	cbz	r1, 26f5a <interface_socket_allocate+0x52>
   26f34:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   26f38:	2900      	cmp	r1, #0
   26f3a:	d043      	beq.n	26fc4 <interface_socket_allocate+0xbc>
   26f3c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   26f40:	2900      	cmp	r1, #0
   26f42:	d041      	beq.n	26fc8 <interface_socket_allocate+0xc0>
   26f44:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   26f48:	2900      	cmp	r1, #0
   26f4a:	d039      	beq.n	26fc0 <interface_socket_allocate+0xb8>
   26f4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f50:	2069      	movs	r0, #105	; 0x69
   26f52:	f7f6 fa8d 	bl	1d470 <bsd_os_errno_set>
   26f56:	4628      	mov	r0, r5
   26f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f5a:	2505      	movs	r5, #5
   26f5c:	f04f 0c01 	mov.w	ip, #1
   26f60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26f64:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   26f68:	00e4      	lsls	r4, r4, #3
   26f6a:	f843 c004 	str.w	ip, [r3, r4]
   26f6e:	441c      	add	r4, r3
   26f70:	4611      	mov	r1, r2
   26f72:	61a7      	str	r7, [r4, #24]
   26f74:	4622      	mov	r2, r4
   26f76:	f7fe ff9b 	bl	25eb0 <packet_handler_create>
   26f7a:	4603      	mov	r3, r0
   26f7c:	61e0      	str	r0, [r4, #28]
   26f7e:	b158      	cbz	r0, 26f98 <interface_socket_allocate+0x90>
   26f80:	681b      	ldr	r3, [r3, #0]
   26f82:	681b      	ldr	r3, [r3, #0]
   26f84:	4798      	blx	r3
   26f86:	b910      	cbnz	r0, 26f8e <interface_socket_allocate+0x86>
   26f88:	6034      	str	r4, [r6, #0]
   26f8a:	4628      	mov	r0, r5
   26f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f8e:	69e0      	ldr	r0, [r4, #28]
   26f90:	f7fe ffae 	bl	25ef0 <packet_handler_delete>
   26f94:	2300      	movs	r3, #0
   26f96:	61e3      	str	r3, [r4, #28]
   26f98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f9c:	2228      	movs	r2, #40	; 0x28
   26f9e:	2100      	movs	r1, #0
   26fa0:	4620      	mov	r0, r4
   26fa2:	f00d fd77 	bl	34a94 <memset>
   26fa6:	200c      	movs	r0, #12
   26fa8:	f7f6 fa62 	bl	1d470 <bsd_os_errno_set>
   26fac:	4628      	mov	r0, r5
   26fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26fb0:	2501      	movs	r5, #1
   26fb2:	e7d3      	b.n	26f5c <interface_socket_allocate+0x54>
   26fb4:	2502      	movs	r5, #2
   26fb6:	e7d1      	b.n	26f5c <interface_socket_allocate+0x54>
   26fb8:	2503      	movs	r5, #3
   26fba:	e7cf      	b.n	26f5c <interface_socket_allocate+0x54>
   26fbc:	2504      	movs	r5, #4
   26fbe:	e7cd      	b.n	26f5c <interface_socket_allocate+0x54>
   26fc0:	2508      	movs	r5, #8
   26fc2:	e7cb      	b.n	26f5c <interface_socket_allocate+0x54>
   26fc4:	2506      	movs	r5, #6
   26fc6:	e7c9      	b.n	26f5c <interface_socket_allocate+0x54>
   26fc8:	2507      	movs	r5, #7
   26fca:	e7c7      	b.n	26f5c <interface_socket_allocate+0x54>
   26fcc:	20028f88 	.word	0x20028f88

00026fd0 <interface_socket_free>:
   26fd0:	2808      	cmp	r0, #8
   26fd2:	d900      	bls.n	26fd6 <interface_socket_free+0x6>
   26fd4:	4770      	bx	lr
   26fd6:	b510      	push	{r4, lr}
   26fd8:	4c07      	ldr	r4, [pc, #28]	; (26ff8 <interface_socket_free+0x28>)
   26fda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26fde:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   26fe2:	69e0      	ldr	r0, [r4, #28]
   26fe4:	b108      	cbz	r0, 26fea <interface_socket_free+0x1a>
   26fe6:	f7fe ff83 	bl	25ef0 <packet_handler_delete>
   26fea:	4620      	mov	r0, r4
   26fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26ff0:	2228      	movs	r2, #40	; 0x28
   26ff2:	2100      	movs	r1, #0
   26ff4:	f00d bd4e 	b.w	34a94 <memset>
   26ff8:	20028f88 	.word	0x20028f88

00026ffc <interface_socket_packet_handler_update>:
   26ffc:	2808      	cmp	r0, #8
   26ffe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27002:	d81e      	bhi.n	27042 <interface_socket_packet_handler_update+0x46>
   27004:	ea4f 0880 	mov.w	r8, r0, lsl #2
   27008:	4e17      	ldr	r6, [pc, #92]	; (27068 <interface_socket_packet_handler_update+0x6c>)
   2700a:	eb08 0300 	add.w	r3, r8, r0
   2700e:	00db      	lsls	r3, r3, #3
   27010:	58f4      	ldr	r4, [r6, r3]
   27012:	18f5      	adds	r5, r6, r3
   27014:	b1ac      	cbz	r4, 27042 <interface_socket_packet_handler_update+0x46>
   27016:	460b      	mov	r3, r1
   27018:	4604      	mov	r4, r0
   2701a:	4611      	mov	r1, r2
   2701c:	4618      	mov	r0, r3
   2701e:	462a      	mov	r2, r5
   27020:	f8d5 901c 	ldr.w	r9, [r5, #28]
   27024:	f7fe ff44 	bl	25eb0 <packet_handler_create>
   27028:	61e8      	str	r0, [r5, #28]
   2702a:	b1d0      	cbz	r0, 27062 <interface_socket_packet_handler_update+0x66>
   2702c:	6803      	ldr	r3, [r0, #0]
   2702e:	681b      	ldr	r3, [r3, #0]
   27030:	4798      	blx	r3
   27032:	4607      	mov	r7, r0
   27034:	b948      	cbnz	r0, 2704a <interface_socket_packet_handler_update+0x4e>
   27036:	4648      	mov	r0, r9
   27038:	f7fe ff5a 	bl	25ef0 <packet_handler_delete>
   2703c:	4638      	mov	r0, r7
   2703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27042:	2705      	movs	r7, #5
   27044:	4638      	mov	r0, r7
   27046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2704a:	69e8      	ldr	r0, [r5, #28]
   2704c:	f7fe ff50 	bl	25ef0 <packet_handler_delete>
   27050:	eb08 0004 	add.w	r0, r8, r4
   27054:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   27058:	f8c6 901c 	str.w	r9, [r6, #28]
   2705c:	4638      	mov	r0, r7
   2705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27062:	2704      	movs	r7, #4
   27064:	e7f4      	b.n	27050 <interface_socket_packet_handler_update+0x54>
   27066:	bf00      	nop
   27068:	20028f88 	.word	0x20028f88

0002706c <interface_socket_wait>:
   2706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27070:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27074:	4c0d      	ldr	r4, [pc, #52]	; (270ac <interface_socket_wait+0x40>)
   27076:	00c0      	lsls	r0, r0, #3
   27078:	5825      	ldr	r5, [r4, r0]
   2707a:	4404      	add	r4, r0
   2707c:	4015      	ands	r5, r2
   2707e:	428d      	cmp	r5, r1
   27080:	d011      	beq.n	270a6 <interface_socket_wait+0x3a>
   27082:	6860      	ldr	r0, [r4, #4]
   27084:	b978      	cbnz	r0, 270a6 <interface_socket_wait+0x3a>
   27086:	4698      	mov	r8, r3
   27088:	460f      	mov	r7, r1
   2708a:	4616      	mov	r6, r2
   2708c:	4625      	mov	r5, r4
   2708e:	e006      	b.n	2709e <interface_socket_wait+0x32>
   27090:	686b      	ldr	r3, [r5, #4]
   27092:	b943      	cbnz	r3, 270a6 <interface_socket_wait+0x3a>
   27094:	4641      	mov	r1, r8
   27096:	4620      	mov	r0, r4
   27098:	f7f6 f940 	bl	1d31c <bsd_os_timedwait>
   2709c:	b920      	cbnz	r0, 270a8 <interface_socket_wait+0x3c>
   2709e:	6828      	ldr	r0, [r5, #0]
   270a0:	4030      	ands	r0, r6
   270a2:	42b8      	cmp	r0, r7
   270a4:	d1f4      	bne.n	27090 <interface_socket_wait+0x24>
   270a6:	2000      	movs	r0, #0
   270a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   270ac:	20028f88 	.word	0x20028f88

000270b0 <interface_from_internal_id_search>:
   270b0:	4b27      	ldr	r3, [pc, #156]	; (27150 <interface_from_internal_id_search+0xa0>)
   270b2:	681a      	ldr	r2, [r3, #0]
   270b4:	b112      	cbz	r2, 270bc <interface_from_internal_id_search+0xc>
   270b6:	699a      	ldr	r2, [r3, #24]
   270b8:	4282      	cmp	r2, r0
   270ba:	d039      	beq.n	27130 <interface_from_internal_id_search+0x80>
   270bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   270be:	b112      	cbz	r2, 270c6 <interface_from_internal_id_search+0x16>
   270c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   270c2:	4282      	cmp	r2, r0
   270c4:	d036      	beq.n	27134 <interface_from_internal_id_search+0x84>
   270c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   270c8:	b112      	cbz	r2, 270d0 <interface_from_internal_id_search+0x20>
   270ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   270cc:	4282      	cmp	r2, r0
   270ce:	d033      	beq.n	27138 <interface_from_internal_id_search+0x88>
   270d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   270d2:	b11a      	cbz	r2, 270dc <interface_from_internal_id_search+0x2c>
   270d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   270d8:	4282      	cmp	r2, r0
   270da:	d02f      	beq.n	2713c <interface_from_internal_id_search+0x8c>
   270dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   270e0:	b11a      	cbz	r2, 270ea <interface_from_internal_id_search+0x3a>
   270e2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   270e6:	4282      	cmp	r2, r0
   270e8:	d02a      	beq.n	27140 <interface_from_internal_id_search+0x90>
   270ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   270ee:	b11a      	cbz	r2, 270f8 <interface_from_internal_id_search+0x48>
   270f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   270f4:	4282      	cmp	r2, r0
   270f6:	d025      	beq.n	27144 <interface_from_internal_id_search+0x94>
   270f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   270fc:	b11a      	cbz	r2, 27106 <interface_from_internal_id_search+0x56>
   270fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   27102:	4282      	cmp	r2, r0
   27104:	d020      	beq.n	27148 <interface_from_internal_id_search+0x98>
   27106:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   2710a:	b11a      	cbz	r2, 27114 <interface_from_internal_id_search+0x64>
   2710c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   27110:	4282      	cmp	r2, r0
   27112:	d01b      	beq.n	2714c <interface_from_internal_id_search+0x9c>
   27114:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   27118:	b13a      	cbz	r2, 2712a <interface_from_internal_id_search+0x7a>
   2711a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   2711e:	4283      	cmp	r3, r0
   27120:	bf14      	ite	ne
   27122:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   27126:	2008      	moveq	r0, #8
   27128:	4770      	bx	lr
   2712a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2712e:	4770      	bx	lr
   27130:	2000      	movs	r0, #0
   27132:	4770      	bx	lr
   27134:	2001      	movs	r0, #1
   27136:	4770      	bx	lr
   27138:	2002      	movs	r0, #2
   2713a:	4770      	bx	lr
   2713c:	2003      	movs	r0, #3
   2713e:	4770      	bx	lr
   27140:	2004      	movs	r0, #4
   27142:	4770      	bx	lr
   27144:	2005      	movs	r0, #5
   27146:	4770      	bx	lr
   27148:	2006      	movs	r0, #6
   2714a:	4770      	bx	lr
   2714c:	2007      	movs	r0, #7
   2714e:	4770      	bx	lr
   27150:	20028f88 	.word	0x20028f88

00027154 <interface_socket_from_handle_get>:
   27154:	2808      	cmp	r0, #8
   27156:	d807      	bhi.n	27168 <interface_socket_from_handle_get+0x14>
   27158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2715c:	4b03      	ldr	r3, [pc, #12]	; (2716c <interface_socket_from_handle_get+0x18>)
   2715e:	00c0      	lsls	r0, r0, #3
   27160:	581a      	ldr	r2, [r3, r0]
   27162:	b10a      	cbz	r2, 27168 <interface_socket_from_handle_get+0x14>
   27164:	4418      	add	r0, r3
   27166:	4770      	bx	lr
   27168:	2000      	movs	r0, #0
   2716a:	4770      	bx	lr
   2716c:	20028f88 	.word	0x20028f88

00027170 <interface_socket_event_get>:
   27170:	b119      	cbz	r1, 2717a <interface_socket_event_get+0xa>
   27172:	2808      	cmp	r0, #8
   27174:	d902      	bls.n	2717c <interface_socket_event_get+0xc>
   27176:	2310      	movs	r3, #16
   27178:	600b      	str	r3, [r1, #0]
   2717a:	4770      	bx	lr
   2717c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27180:	4b07      	ldr	r3, [pc, #28]	; (271a0 <interface_socket_event_get+0x30>)
   27182:	00c0      	lsls	r0, r0, #3
   27184:	581a      	ldr	r2, [r3, r0]
   27186:	2a00      	cmp	r2, #0
   27188:	d0f5      	beq.n	27176 <interface_socket_event_get+0x6>
   2718a:	581b      	ldr	r3, [r3, r0]
   2718c:	0c1b      	lsrs	r3, r3, #16
   2718e:	f003 020a 	and.w	r2, r3, #10
   27192:	2a0a      	cmp	r2, #10
   27194:	bf14      	ite	ne
   27196:	f003 030f 	andne.w	r3, r3, #15
   2719a:	f003 030d 	andeq.w	r3, r3, #13
   2719e:	e7eb      	b.n	27178 <interface_socket_event_get+0x8>
   271a0:	20028f88 	.word	0x20028f88

000271a4 <interface_socket_setopt>:
   271a4:	2808      	cmp	r0, #8
   271a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271a8:	d82c      	bhi.n	27204 <interface_socket_setopt+0x60>
   271aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   271ae:	4e1e      	ldr	r6, [pc, #120]	; (27228 <interface_socket_setopt+0x84>)
   271b0:	00c0      	lsls	r0, r0, #3
   271b2:	5834      	ldr	r4, [r6, r0]
   271b4:	b334      	cbz	r4, 27204 <interface_socket_setopt+0x60>
   271b6:	2901      	cmp	r1, #1
   271b8:	d11e      	bne.n	271f8 <interface_socket_setopt+0x54>
   271ba:	f1a2 0114 	sub.w	r1, r2, #20
   271be:	2901      	cmp	r1, #1
   271c0:	d81a      	bhi.n	271f8 <interface_socket_setopt+0x54>
   271c2:	9906      	ldr	r1, [sp, #24]
   271c4:	2908      	cmp	r1, #8
   271c6:	d123      	bne.n	27210 <interface_socket_setopt+0x6c>
   271c8:	b313      	cbz	r3, 27210 <interface_socket_setopt+0x6c>
   271ca:	6859      	ldr	r1, [r3, #4]
   271cc:	4c17      	ldr	r4, [pc, #92]	; (2722c <interface_socket_setopt+0x88>)
   271ce:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   271d2:	fba4 4101 	umull	r4, r1, r4, r1
   271d6:	0989      	lsrs	r1, r1, #6
   271d8:	460c      	mov	r4, r1
   271da:	2500      	movs	r5, #0
   271dc:	681b      	ldr	r3, [r3, #0]
   271de:	fbe7 4503 	umlal	r4, r5, r7, r3
   271e2:	2d01      	cmp	r5, #1
   271e4:	bf08      	it	eq
   271e6:	2c00      	cmpeq	r4, #0
   271e8:	d218      	bcs.n	2721c <interface_socket_setopt+0x78>
   271ea:	4430      	add	r0, r6
   271ec:	2a14      	cmp	r2, #20
   271ee:	bf0c      	ite	eq
   271f0:	6204      	streq	r4, [r0, #32]
   271f2:	6244      	strne	r4, [r0, #36]	; 0x24
   271f4:	2000      	movs	r0, #0
   271f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   271f8:	202a      	movs	r0, #42	; 0x2a
   271fa:	f7f6 f939 	bl	1d470 <bsd_os_errno_set>
   271fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27204:	2009      	movs	r0, #9
   27206:	f7f6 f933 	bl	1d470 <bsd_os_errno_set>
   2720a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27210:	2016      	movs	r0, #22
   27212:	f7f6 f92d 	bl	1d470 <bsd_os_errno_set>
   27216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2721c:	2025      	movs	r0, #37	; 0x25
   2721e:	f7f6 f927 	bl	1d470 <bsd_os_errno_set>
   27222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27228:	20028f88 	.word	0x20028f88
   2722c:	10624dd3 	.word	0x10624dd3

00027230 <interface_socket_getopt>:
   27230:	b570      	push	{r4, r5, r6, lr}
   27232:	2808      	cmp	r0, #8
   27234:	9d04      	ldr	r5, [sp, #16]
   27236:	d835      	bhi.n	272a4 <interface_socket_getopt+0x74>
   27238:	4c20      	ldr	r4, [pc, #128]	; (272bc <interface_socket_getopt+0x8c>)
   2723a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2723e:	00c0      	lsls	r0, r0, #3
   27240:	5826      	ldr	r6, [r4, r0]
   27242:	4404      	add	r4, r0
   27244:	b376      	cbz	r6, 272a4 <interface_socket_getopt+0x74>
   27246:	2901      	cmp	r1, #1
   27248:	d132      	bne.n	272b0 <interface_socket_getopt+0x80>
   2724a:	b32b      	cbz	r3, 27298 <interface_socket_getopt+0x68>
   2724c:	b325      	cbz	r5, 27298 <interface_socket_getopt+0x68>
   2724e:	2a04      	cmp	r2, #4
   27250:	d019      	beq.n	27286 <interface_socket_getopt+0x56>
   27252:	f1a2 0114 	sub.w	r1, r2, #20
   27256:	2901      	cmp	r1, #1
   27258:	d82a      	bhi.n	272b0 <interface_socket_getopt+0x80>
   2725a:	6829      	ldr	r1, [r5, #0]
   2725c:	2908      	cmp	r1, #8
   2725e:	d11b      	bne.n	27298 <interface_socket_getopt+0x68>
   27260:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   27264:	2a14      	cmp	r2, #20
   27266:	bf18      	it	ne
   27268:	4601      	movne	r1, r0
   2726a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2726e:	4a14      	ldr	r2, [pc, #80]	; (272c0 <interface_socket_getopt+0x90>)
   27270:	2000      	movs	r0, #0
   27272:	fba2 5201 	umull	r5, r2, r2, r1
   27276:	0992      	lsrs	r2, r2, #6
   27278:	fb04 1112 	mls	r1, r4, r2, r1
   2727c:	fb04 f101 	mul.w	r1, r4, r1
   27280:	e9c3 2100 	strd	r2, r1, [r3]
   27284:	bd70      	pop	{r4, r5, r6, pc}
   27286:	682a      	ldr	r2, [r5, #0]
   27288:	2a04      	cmp	r2, #4
   2728a:	d105      	bne.n	27298 <interface_socket_getopt+0x68>
   2728c:	2200      	movs	r2, #0
   2728e:	6861      	ldr	r1, [r4, #4]
   27290:	4610      	mov	r0, r2
   27292:	6019      	str	r1, [r3, #0]
   27294:	6062      	str	r2, [r4, #4]
   27296:	bd70      	pop	{r4, r5, r6, pc}
   27298:	2016      	movs	r0, #22
   2729a:	f7f6 f8e9 	bl	1d470 <bsd_os_errno_set>
   2729e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272a2:	bd70      	pop	{r4, r5, r6, pc}
   272a4:	2009      	movs	r0, #9
   272a6:	f7f6 f8e3 	bl	1d470 <bsd_os_errno_set>
   272aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272ae:	bd70      	pop	{r4, r5, r6, pc}
   272b0:	202a      	movs	r0, #42	; 0x2a
   272b2:	f7f6 f8dd 	bl	1d470 <bsd_os_errno_set>
   272b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272ba:	bd70      	pop	{r4, r5, r6, pc}
   272bc:	20028f88 	.word	0x20028f88
   272c0:	10624dd3 	.word	0x10624dd3

000272c4 <interface_socket_fcntl>:
   272c4:	2808      	cmp	r0, #8
   272c6:	b510      	push	{r4, lr}
   272c8:	d826      	bhi.n	27318 <interface_socket_fcntl+0x54>
   272ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   272ce:	4c1b      	ldr	r4, [pc, #108]	; (2733c <interface_socket_fcntl+0x78>)
   272d0:	00c3      	lsls	r3, r0, #3
   272d2:	58e0      	ldr	r0, [r4, r3]
   272d4:	b300      	cbz	r0, 27318 <interface_socket_fcntl+0x54>
   272d6:	2901      	cmp	r1, #1
   272d8:	d005      	beq.n	272e6 <interface_socket_fcntl+0x22>
   272da:	2902      	cmp	r1, #2
   272dc:	d122      	bne.n	27324 <interface_socket_fcntl+0x60>
   272de:	58e0      	ldr	r0, [r4, r3]
   272e0:	f3c0 7000 	ubfx	r0, r0, #28, #1
   272e4:	bd10      	pop	{r4, pc}
   272e6:	07d2      	lsls	r2, r2, #31
   272e8:	d410      	bmi.n	2730c <interface_socket_fcntl+0x48>
   272ea:	58e0      	ldr	r0, [r4, r3]
   272ec:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   272f0:	d11e      	bne.n	27330 <interface_socket_fcntl+0x6c>
   272f2:	58e2      	ldr	r2, [r4, r3]
   272f4:	b292      	uxth	r2, r2
   272f6:	2a0a      	cmp	r2, #10
   272f8:	d01a      	beq.n	27330 <interface_socket_fcntl+0x6c>
   272fa:	58e2      	ldr	r2, [r4, r3]
   272fc:	b292      	uxth	r2, r2
   272fe:	2a0b      	cmp	r2, #11
   27300:	d016      	beq.n	27330 <interface_socket_fcntl+0x6c>
   27302:	58e2      	ldr	r2, [r4, r3]
   27304:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   27308:	50e2      	str	r2, [r4, r3]
   2730a:	bd10      	pop	{r4, pc}
   2730c:	58e2      	ldr	r2, [r4, r3]
   2730e:	2000      	movs	r0, #0
   27310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   27314:	50e2      	str	r2, [r4, r3]
   27316:	bd10      	pop	{r4, pc}
   27318:	2009      	movs	r0, #9
   2731a:	f7f6 f8a9 	bl	1d470 <bsd_os_errno_set>
   2731e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27322:	bd10      	pop	{r4, pc}
   27324:	2016      	movs	r0, #22
   27326:	f7f6 f8a3 	bl	1d470 <bsd_os_errno_set>
   2732a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2732e:	bd10      	pop	{r4, pc}
   27330:	2023      	movs	r0, #35	; 0x23
   27332:	f7f6 f89d 	bl	1d470 <bsd_os_errno_set>
   27336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2733a:	bd10      	pop	{r4, pc}
   2733c:	20028f88 	.word	0x20028f88

00027340 <at_client_evt_handler>:
   27340:	b120      	cbz	r0, 2734c <at_client_evt_handler+0xc>
   27342:	f850 1b08 	ldr.w	r1, [r0], #8
   27346:	0c09      	lsrs	r1, r1, #16
   27348:	f7fc bf0e 	b.w	24168 <rpc_at_event_handler>
   2734c:	4770      	bx	lr
   2734e:	bf00      	nop

00027350 <rpc_at_client_init>:
   27350:	4801      	ldr	r0, [pc, #4]	; (27358 <rpc_at_client_init+0x8>)
   27352:	f7fb bcff 	b.w	22d54 <rpc_client_register>
   27356:	bf00      	nop
   27358:	000362f4 	.word	0x000362f4

0002735c <rpc_at_client_request_alloc>:
   2735c:	b180      	cbz	r0, 27380 <rpc_at_client_request_alloc+0x24>
   2735e:	2300      	movs	r3, #0
   27360:	b510      	push	{r4, lr}
   27362:	b082      	sub	sp, #8
   27364:	aa02      	add	r2, sp, #8
   27366:	4604      	mov	r4, r0
   27368:	f842 3d04 	str.w	r3, [r2, #-4]!
   2736c:	2003      	movs	r0, #3
   2736e:	f7fb fd6b 	bl	22e48 <rpc_message_alloc>
   27372:	b918      	cbnz	r0, 2737c <rpc_at_client_request_alloc+0x20>
   27374:	9b01      	ldr	r3, [sp, #4]
   27376:	b10b      	cbz	r3, 2737c <rpc_at_client_request_alloc+0x20>
   27378:	3308      	adds	r3, #8
   2737a:	6023      	str	r3, [r4, #0]
   2737c:	b002      	add	sp, #8
   2737e:	bd10      	pop	{r4, pc}
   27380:	200e      	movs	r0, #14
   27382:	4770      	bx	lr

00027384 <rpc_at_client_request_send>:
   27384:	b150      	cbz	r0, 2739c <rpc_at_client_request_send+0x18>
   27386:	4603      	mov	r3, r0
   27388:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2738c:	2003      	movs	r0, #3
   2738e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   27392:	f843 1d08 	str.w	r1, [r3, #-8]!
   27396:	4619      	mov	r1, r3
   27398:	f7fb bd46 	b.w	22e28 <rpc_message_send>
   2739c:	200e      	movs	r0, #14
   2739e:	4770      	bx	lr

000273a0 <rpc_at_client_message_free>:
   273a0:	b120      	cbz	r0, 273ac <rpc_at_client_message_free+0xc>
   273a2:	f1a0 0108 	sub.w	r1, r0, #8
   273a6:	2003      	movs	r0, #3
   273a8:	f7fb bd7a 	b.w	22ea0 <rpc_message_free>
   273ac:	200e      	movs	r0, #14
   273ae:	4770      	bx	lr

000273b0 <rpc_at_client_data_free>:
   273b0:	b118      	cbz	r0, 273ba <rpc_at_client_data_free+0xa>
   273b2:	4601      	mov	r1, r0
   273b4:	2003      	movs	r0, #3
   273b6:	f7fb bd7f 	b.w	22eb8 <rpc_message_data_free>
   273ba:	200e      	movs	r0, #14
   273bc:	4770      	bx	lr
   273be:	bf00      	nop

000273c0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   273c0:	4a07      	ldr	r2, [pc, #28]	; (273e0 <SystemInit+0x20>)
   273c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   273c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   273ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   273ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   273d2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   273d6:	4b03      	ldr	r3, [pc, #12]	; (273e4 <SystemInit+0x24>)
   273d8:	4a03      	ldr	r2, [pc, #12]	; (273e8 <SystemInit+0x28>)
   273da:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   273dc:	4770      	bx	lr
   273de:	bf00      	nop
   273e0:	e000ed00 	.word	0xe000ed00
   273e4:	200201d4 	.word	0x200201d4
   273e8:	03d09000 	.word	0x03d09000

000273ec <nrf_gpio_pin_port_decode.isra.0>:
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   273ec:	b508      	push	{r3, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   273ee:	0943      	lsrs	r3, r0, #5
   273f0:	bf0c      	ite	eq
   273f2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   273f6:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   273f8:	f000 001f 	and.w	r0, r0, #31

    return (mask & (1UL << pin_number)) ? true : false;
   273fc:	fa23 f000 	lsr.w	r0, r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   27400:	07c3      	lsls	r3, r0, #31
   27402:	d40b      	bmi.n	2741c <nrf_gpio_pin_port_decode.isra.0+0x30>
   27404:	4906      	ldr	r1, [pc, #24]	; (27420 <nrf_gpio_pin_port_decode.isra.0+0x34>)
   27406:	4807      	ldr	r0, [pc, #28]	; (27424 <nrf_gpio_pin_port_decode.isra.0+0x38>)
   27408:	f240 230d 	movw	r3, #525	; 0x20d
   2740c:	4a06      	ldr	r2, [pc, #24]	; (27428 <nrf_gpio_pin_port_decode.isra.0+0x3c>)
   2740e:	f007 ff20 	bl	2f252 <printk>
   27412:	f240 210d 	movw	r1, #525	; 0x20d
   27416:	4804      	ldr	r0, [pc, #16]	; (27428 <nrf_gpio_pin_port_decode.isra.0+0x3c>)
   27418:	f008 fa1c 	bl	2f854 <assert_post_action>
}
   2741c:	4803      	ldr	r0, [pc, #12]	; (2742c <nrf_gpio_pin_port_decode.isra.0+0x40>)
   2741e:	bd08      	pop	{r3, pc}
   27420:	00037ecb 	.word	0x00037ecb
   27424:	00036be5 	.word	0x00036be5
   27428:	00037e98 	.word	0x00037e98
   2742c:	40842500 	.word	0x40842500

00027430 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   27430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27434:	4681      	mov	r9, r0
   27436:	4692      	mov	sl, r2
   27438:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   2743a:	460c      	mov	r4, r1
   2743c:	b949      	cbnz	r1, 27452 <nrfx_spim_init+0x22>
   2743e:	4953      	ldr	r1, [pc, #332]	; (2758c <nrfx_spim_init+0x15c>)
   27440:	4853      	ldr	r0, [pc, #332]	; (27590 <nrfx_spim_init+0x160>)
   27442:	23ff      	movs	r3, #255	; 0xff
   27444:	4a53      	ldr	r2, [pc, #332]	; (27594 <nrfx_spim_init+0x164>)
   27446:	f007 ff04 	bl	2f252 <printk>
   2744a:	21ff      	movs	r1, #255	; 0xff
   2744c:	4851      	ldr	r0, [pc, #324]	; (27594 <nrfx_spim_init+0x164>)
   2744e:	f008 fa01 	bl	2f854 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   27452:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27454:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   27458:	4e4f      	ldr	r6, [pc, #316]	; (27598 <nrfx_spim_init+0x168>)
   2745a:	436b      	muls	r3, r5
   2745c:	18f2      	adds	r2, r6, r3
   2745e:	7f11      	ldrb	r1, [r2, #28]
   27460:	2900      	cmp	r1, #0
   27462:	f040 8091 	bne.w	27588 <nrfx_spim_init+0x158>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   27466:	f8d9 8000 	ldr.w	r8, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   2746a:	f846 a003 	str.w	sl, [r6, r3]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2746e:	7b23      	ldrb	r3, [r4, #12]
    p_cb->p_context = p_context;
   27470:	6057      	str	r7, [r2, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   27472:	2b01      	cmp	r3, #1
   27474:	7820      	ldrb	r0, [r4, #0]
   27476:	d875      	bhi.n	27564 <nrfx_spim_init+0x134>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   27478:	f00d f828 	bl	344cc <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   2747c:	7827      	ldrb	r7, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2747e:	4638      	mov	r0, r7
   27480:	f7ff ffb4 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   27484:	2301      	movs	r3, #1
   27486:	3780      	adds	r7, #128	; 0x80
   27488:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2748c:	7867      	ldrb	r7, [r4, #1]
   2748e:	2fff      	cmp	r7, #255	; 0xff
   27490:	d06b      	beq.n	2756a <nrfx_spim_init+0x13a>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   27492:	4638      	mov	r0, r7
   27494:	f00d f81a 	bl	344cc <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27498:	4638      	mov	r0, r7
   2749a:	f7ff ffa7 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2749e:	2203      	movs	r2, #3
   274a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
   274a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   274a8:	f894 a002 	ldrb.w	sl, [r4, #2]
   274ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   274b0:	d05e      	beq.n	27570 <nrfx_spim_init+0x140>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   274b2:	4650      	mov	r0, sl
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   274b4:	f894 b00e 	ldrb.w	fp, [r4, #14]
   274b8:	f7ff ff98 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   274bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   274c0:	f10a 0280 	add.w	r2, sl, #128	; 0x80
   274c4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   274c8:	2324      	movs	r3, #36	; 0x24
   274ca:	fb03 6305 	mla	r3, r3, r5, r6
   274ce:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   274d0:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   274d2:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   274d4:	d013      	beq.n	274fe <nrfx_spim_init+0xce>
    {
        if (p_config->ss_active_high)
   274d6:	7923      	ldrb	r3, [r4, #4]
   274d8:	2b00      	cmp	r3, #0
   274da:	d04c      	beq.n	27576 <nrfx_spim_init+0x146>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   274dc:	f00c fff6 	bl	344cc <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
   274e0:	f894 b003 	ldrb.w	fp, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   274e4:	4658      	mov	r0, fp
   274e6:	f7ff ff81 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   274ea:	2303      	movs	r3, #3
   274ec:	f10b 0b80 	add.w	fp, fp, #128	; 0x80
   274f0:	f840 302b 	str.w	r3, [r0, fp, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   274f4:	2324      	movs	r3, #36	; 0x24
   274f6:	fb03 6305 	mla	r3, r3, r5, r6
   274fa:	7922      	ldrb	r2, [r4, #4]
   274fc:	779a      	strb	r2, [r3, #30]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   274fe:	7823      	ldrb	r3, [r4, #0]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   27500:	7b22      	ldrb	r2, [r4, #12]
    p_reg->PSEL.SCK  = sck_pin;
   27502:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   27506:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   27508:	f8c8 750c 	str.w	r7, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2750c:	f8c8 a510 	str.w	sl, [r8, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   27510:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   27514:	7b63      	ldrb	r3, [r4, #13]
   27516:	3300      	adds	r3, #0
   27518:	bf18      	it	ne
   2751a:	2301      	movne	r3, #1
    switch (spi_mode)
   2751c:	2a02      	cmp	r2, #2
   2751e:	d02d      	beq.n	2757c <nrfx_spim_init+0x14c>
   27520:	2a03      	cmp	r2, #3
   27522:	d02e      	beq.n	27582 <nrfx_spim_init+0x152>
   27524:	2a01      	cmp	r2, #1
   27526:	d101      	bne.n	2752c <nrfx_spim_init+0xfc>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   27528:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   2752c:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   27530:	79a3      	ldrb	r3, [r4, #6]
   27532:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   27536:	2307      	movs	r3, #7
   27538:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2753c:	2324      	movs	r3, #36	; 0x24
   2753e:	436b      	muls	r3, r5
   27540:	58f3      	ldr	r3, [r6, r3]
   27542:	b12b      	cbz	r3, 27550 <nrfx_spim_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   27544:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   27548:	f340 3007 	sbfx	r0, r0, #12, #8
   2754c:	f7f1 fb40 	bl	18bd0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   27550:	2324      	movs	r3, #36	; 0x24
   27552:	fb03 6505 	mla	r5, r3, r5, r6
   27556:	2300      	movs	r3, #0
   27558:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2755a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2755c:	480f      	ldr	r0, [pc, #60]	; (2759c <nrfx_spim_init+0x16c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2755e:	772b      	strb	r3, [r5, #28]
}
   27560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   27564:	f00c ffba 	bl	344dc <nrf_gpio_pin_set>
   27568:	e788      	b.n	2747c <nrfx_spim_init+0x4c>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2756a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2756e:	e79b      	b.n	274a8 <nrfx_spim_init+0x78>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   27570:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   27574:	e7a8      	b.n	274c8 <nrfx_spim_init+0x98>
            nrf_gpio_pin_set(p_config->ss_pin);
   27576:	f00c ffb1 	bl	344dc <nrf_gpio_pin_set>
   2757a:	e7b1      	b.n	274e0 <nrfx_spim_init+0xb0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2757c:	f043 0304 	orr.w	r3, r3, #4
        break;
   27580:	e7d4      	b.n	2752c <nrfx_spim_init+0xfc>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   27582:	f043 0306 	orr.w	r3, r3, #6
        break;
   27586:	e7d1      	b.n	2752c <nrfx_spim_init+0xfc>
        return err_code;
   27588:	4805      	ldr	r0, [pc, #20]	; (275a0 <nrfx_spim_init+0x170>)
   2758a:	e7e9      	b.n	27560 <nrfx_spim_init+0x130>
   2758c:	00038476 	.word	0x00038476
   27590:	00036be5 	.word	0x00036be5
   27594:	0003843a 	.word	0x0003843a
   27598:	200229e0 	.word	0x200229e0
   2759c:	0bad0000 	.word	0x0bad0000
   275a0:	0bad0005 	.word	0x0bad0005

000275a4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   275a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   275a8:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   275aa:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   275ac:	4e6e      	ldr	r6, [pc, #440]	; (27768 <nrfx_spim_xfer+0x1c4>)
{
   275ae:	4681      	mov	r9, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   275b0:	fb03 6305 	mla	r3, r3, r5, r6
   275b4:	7f1b      	ldrb	r3, [r3, #28]
{
   275b6:	460c      	mov	r4, r1
   275b8:	4617      	mov	r7, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   275ba:	b95b      	cbnz	r3, 275d4 <nrfx_spim_xfer+0x30>
   275bc:	496b      	ldr	r1, [pc, #428]	; (2776c <nrfx_spim_xfer+0x1c8>)
   275be:	486c      	ldr	r0, [pc, #432]	; (27770 <nrfx_spim_xfer+0x1cc>)
   275c0:	f240 2396 	movw	r3, #662	; 0x296
   275c4:	4a6b      	ldr	r2, [pc, #428]	; (27774 <nrfx_spim_xfer+0x1d0>)
   275c6:	f007 fe44 	bl	2f252 <printk>
   275ca:	f240 2196 	movw	r1, #662	; 0x296
   275ce:	4869      	ldr	r0, [pc, #420]	; (27774 <nrfx_spim_xfer+0x1d0>)
   275d0:	f008 f940 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   275d4:	6823      	ldr	r3, [r4, #0]
   275d6:	b96b      	cbnz	r3, 275f4 <nrfx_spim_xfer+0x50>
   275d8:	6863      	ldr	r3, [r4, #4]
   275da:	b15b      	cbz	r3, 275f4 <nrfx_spim_xfer+0x50>
   275dc:	4966      	ldr	r1, [pc, #408]	; (27778 <nrfx_spim_xfer+0x1d4>)
   275de:	4864      	ldr	r0, [pc, #400]	; (27770 <nrfx_spim_xfer+0x1cc>)
   275e0:	f240 2397 	movw	r3, #663	; 0x297
   275e4:	4a63      	ldr	r2, [pc, #396]	; (27774 <nrfx_spim_xfer+0x1d0>)
   275e6:	f007 fe34 	bl	2f252 <printk>
   275ea:	f240 2197 	movw	r1, #663	; 0x297
   275ee:	4861      	ldr	r0, [pc, #388]	; (27774 <nrfx_spim_xfer+0x1d0>)
   275f0:	f008 f930 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   275f4:	68a3      	ldr	r3, [r4, #8]
   275f6:	b96b      	cbnz	r3, 27614 <nrfx_spim_xfer+0x70>
   275f8:	68e3      	ldr	r3, [r4, #12]
   275fa:	b15b      	cbz	r3, 27614 <nrfx_spim_xfer+0x70>
   275fc:	495f      	ldr	r1, [pc, #380]	; (2777c <nrfx_spim_xfer+0x1d8>)
   275fe:	485c      	ldr	r0, [pc, #368]	; (27770 <nrfx_spim_xfer+0x1cc>)
   27600:	f44f 7326 	mov.w	r3, #664	; 0x298
   27604:	4a5b      	ldr	r2, [pc, #364]	; (27774 <nrfx_spim_xfer+0x1d0>)
   27606:	f007 fe24 	bl	2f252 <printk>
   2760a:	f44f 7126 	mov.w	r1, #664	; 0x298
   2760e:	4859      	ldr	r0, [pc, #356]	; (27774 <nrfx_spim_xfer+0x1d0>)
   27610:	f008 f920 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   27614:	f899 3004 	ldrb.w	r3, [r9, #4]
   27618:	b93b      	cbnz	r3, 2762a <nrfx_spim_xfer+0x86>
   2761a:	68e3      	ldr	r3, [r4, #12]
   2761c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   27620:	d203      	bcs.n	2762a <nrfx_spim_xfer+0x86>
   27622:	6863      	ldr	r3, [r4, #4]
   27624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   27628:	d30b      	bcc.n	27642 <nrfx_spim_xfer+0x9e>
   2762a:	4955      	ldr	r1, [pc, #340]	; (27780 <nrfx_spim_xfer+0x1dc>)
   2762c:	4850      	ldr	r0, [pc, #320]	; (27770 <nrfx_spim_xfer+0x1cc>)
   2762e:	f240 239b 	movw	r3, #667	; 0x29b
   27632:	4a50      	ldr	r2, [pc, #320]	; (27774 <nrfx_spim_xfer+0x1d0>)
   27634:	f007 fe0d 	bl	2f252 <printk>
   27638:	f240 219b 	movw	r1, #667	; 0x29b
   2763c:	484d      	ldr	r0, [pc, #308]	; (27774 <nrfx_spim_xfer+0x1d0>)
   2763e:	f008 f909 	bl	2f854 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   27642:	f017 0808 	ands.w	r8, r7, #8
   27646:	d011      	beq.n	2766c <nrfx_spim_xfer+0xc8>
   27648:	2324      	movs	r3, #36	; 0x24
   2764a:	fb03 6305 	mla	r3, r3, r5, r6
   2764e:	7fdb      	ldrb	r3, [r3, #31]
   27650:	2bff      	cmp	r3, #255	; 0xff
   27652:	d00b      	beq.n	2766c <nrfx_spim_xfer+0xc8>
   27654:	494b      	ldr	r1, [pc, #300]	; (27784 <nrfx_spim_xfer+0x1e0>)
   27656:	4846      	ldr	r0, [pc, #280]	; (27770 <nrfx_spim_xfer+0x1cc>)
   27658:	f240 239d 	movw	r3, #669	; 0x29d
   2765c:	4a45      	ldr	r2, [pc, #276]	; (27774 <nrfx_spim_xfer+0x1d0>)
   2765e:	f007 fdf8 	bl	2f252 <printk>
   27662:	f240 219d 	movw	r1, #669	; 0x29d
   27666:	4843      	ldr	r0, [pc, #268]	; (27774 <nrfx_spim_xfer+0x1d0>)
   27668:	f008 f8f4 	bl	2f854 <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2766c:	2324      	movs	r3, #36	; 0x24
   2766e:	436b      	muls	r3, r5
   27670:	18f2      	adds	r2, r6, r3
   27672:	7f51      	ldrb	r1, [r2, #29]
   27674:	2900      	cmp	r1, #0
   27676:	d175      	bne.n	27764 <nrfx_spim_xfer+0x1c0>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   27678:	58f3      	ldr	r3, [r6, r3]
   2767a:	b123      	cbz	r3, 27686 <nrfx_spim_xfer+0xe2>
   2767c:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   27680:	bf04      	itt	eq
   27682:	2301      	moveq	r3, #1
   27684:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   27686:	f04f 0c24 	mov.w	ip, #36	; 0x24
   2768a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2768e:	fb0c 6c05 	mla	ip, ip, r5, r6
   27692:	f10c 0e0c 	add.w	lr, ip, #12
   27696:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2769a:	f89c 001f 	ldrb.w	r0, [ip, #31]
   2769e:	28ff      	cmp	r0, #255	; 0xff
   276a0:	d004      	beq.n	276ac <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   276a2:	f89c 301e 	ldrb.w	r3, [ip, #30]
   276a6:	b1bb      	cbz	r3, 276d8 <nrfx_spim_xfer+0x134>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   276a8:	f00c ff18 	bl	344dc <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   276ac:	6821      	ldr	r1, [r4, #0]
   276ae:	b121      	cbz	r1, 276ba <nrfx_spim_xfer+0x116>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   276b0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   276b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   276b8:	d106      	bne.n	276c8 <nrfx_spim_xfer+0x124>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   276ba:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   276bc:	b17a      	cbz	r2, 276de <nrfx_spim_xfer+0x13a>
   276be:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   276c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   276c6:	d00a      	beq.n	276de <nrfx_spim_xfer+0x13a>
        p_cb->transfer_in_progress = false;
   276c8:	2324      	movs	r3, #36	; 0x24
   276ca:	fb03 6505 	mla	r5, r3, r5, r6
   276ce:	2300      	movs	r3, #0
        return err_code;
   276d0:	482d      	ldr	r0, [pc, #180]	; (27788 <nrfx_spim_xfer+0x1e4>)
        p_cb->transfer_in_progress = false;
   276d2:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   276d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   276d8:	f00c fef8 	bl	344cc <nrf_gpio_pin_clear>
   276dc:	e7e6      	b.n	276ac <nrfx_spim_xfer+0x108>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   276de:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   276e2:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   276e4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   276e8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   276ec:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   276ee:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276f2:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   276f4:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   276fc:	f017 0201 	ands.w	r2, r7, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   27700:	bf18      	it	ne
   27702:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   27704:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   27708:	f017 0202 	ands.w	r2, r7, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   2770c:	bf18      	it	ne
   2770e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   27710:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   27714:	f1b8 0f00 	cmp.w	r8, #0
   27718:	d101      	bne.n	2771e <nrfx_spim_xfer+0x17a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2771a:	2201      	movs	r2, #1
   2771c:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   2771e:	2224      	movs	r2, #36	; 0x24
   27720:	436a      	muls	r2, r5
   27722:	58b2      	ldr	r2, [r6, r2]
   27724:	b9aa      	cbnz	r2, 27752 <nrfx_spim_xfer+0x1ae>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   27726:	f1b8 0f00 	cmp.w	r8, #0
   2772a:	d103      	bne.n	27734 <nrfx_spim_xfer+0x190>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2772c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   27730:	2a00      	cmp	r2, #0
   27732:	d0fb      	beq.n	2772c <nrfx_spim_xfer+0x188>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   27734:	2324      	movs	r3, #36	; 0x24
   27736:	fb03 6505 	mla	r5, r3, r5, r6
   2773a:	7fe8      	ldrb	r0, [r5, #31]
   2773c:	28ff      	cmp	r0, #255	; 0xff
   2773e:	d003      	beq.n	27748 <nrfx_spim_xfer+0x1a4>
                if (p_cb->ss_active_high)
   27740:	7fab      	ldrb	r3, [r5, #30]
   27742:	b11b      	cbz	r3, 2774c <nrfx_spim_xfer+0x1a8>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   27744:	f00c fec2 	bl	344cc <nrf_gpio_pin_clear>
    return err_code;
   27748:	4810      	ldr	r0, [pc, #64]	; (2778c <nrfx_spim_xfer+0x1e8>)
   2774a:	e7c3      	b.n	276d4 <nrfx_spim_xfer+0x130>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   2774c:	f00c fec6 	bl	344dc <nrf_gpio_pin_set>
   27750:	e7fa      	b.n	27748 <nrfx_spim_xfer+0x1a4>
    if (!enable)
   27752:	2240      	movs	r2, #64	; 0x40
   27754:	f017 0f04 	tst.w	r7, #4
    p_reg->INTENCLR = mask;
   27758:	bf14      	ite	ne
   2775a:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2775e:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   27762:	e7f1      	b.n	27748 <nrfx_spim_xfer+0x1a4>
        return err_code;
   27764:	480a      	ldr	r0, [pc, #40]	; (27790 <nrfx_spim_xfer+0x1ec>)
   27766:	e7b5      	b.n	276d4 <nrfx_spim_xfer+0x130>
   27768:	200229e0 	.word	0x200229e0
   2776c:	0003847f 	.word	0x0003847f
   27770:	00036be5 	.word	0x00036be5
   27774:	0003843a 	.word	0x0003843a
   27778:	000384ab 	.word	0x000384ab
   2777c:	000384f2 	.word	0x000384f2
   27780:	00038539 	.word	0x00038539
   27784:	000385dd 	.word	0x000385dd
   27788:	0bad000a 	.word	0x0bad000a
   2778c:	0bad0000 	.word	0x0bad0000
   27790:	0bad000b 	.word	0x0bad000b

00027794 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27794:	4b15      	ldr	r3, [pc, #84]	; (277ec <nrfx_spim_3_irq_handler+0x58>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   27796:	b510      	push	{r4, lr}
   27798:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2779c:	b322      	cbz	r2, 277e8 <nrfx_spim_3_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2779e:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   277a0:	4c13      	ldr	r4, [pc, #76]	; (277f0 <nrfx_spim_3_irq_handler+0x5c>)
   277a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   277a6:	6823      	ldr	r3, [r4, #0]
   277a8:	b95b      	cbnz	r3, 277c2 <nrfx_spim_3_irq_handler+0x2e>
   277aa:	4912      	ldr	r1, [pc, #72]	; (277f4 <nrfx_spim_3_irq_handler+0x60>)
   277ac:	4812      	ldr	r0, [pc, #72]	; (277f8 <nrfx_spim_3_irq_handler+0x64>)
   277ae:	f240 23ff 	movw	r3, #767	; 0x2ff
   277b2:	4a12      	ldr	r2, [pc, #72]	; (277fc <nrfx_spim_3_irq_handler+0x68>)
   277b4:	f007 fd4d 	bl	2f252 <printk>
   277b8:	f240 21ff 	movw	r1, #767	; 0x2ff
   277bc:	480f      	ldr	r0, [pc, #60]	; (277fc <nrfx_spim_3_irq_handler+0x68>)
   277be:	f008 f849 	bl	2f854 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   277c2:	7fe0      	ldrb	r0, [r4, #31]
   277c4:	28ff      	cmp	r0, #255	; 0xff
   277c6:	d003      	beq.n	277d0 <nrfx_spim_3_irq_handler+0x3c>
            if (p_cb->ss_active_high)
   277c8:	7fa3      	ldrb	r3, [r4, #30]
   277ca:	b153      	cbz	r3, 277e2 <nrfx_spim_3_irq_handler+0x4e>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   277cc:	f00c fe7e 	bl	344cc <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   277d0:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   277d2:	480b      	ldr	r0, [pc, #44]	; (27800 <nrfx_spim_3_irq_handler+0x6c>)
    p_cb->transfer_in_progress = false;
   277d4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   277d6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   277d8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   277dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   277e0:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   277e2:	f00c fe7b 	bl	344dc <nrf_gpio_pin_set>
   277e6:	e7f3      	b.n	277d0 <nrfx_spim_3_irq_handler+0x3c>
}
   277e8:	bd10      	pop	{r4, pc}
   277ea:	bf00      	nop
   277ec:	4000b000 	.word	0x4000b000
   277f0:	200229e0 	.word	0x200229e0
   277f4:	0003842c 	.word	0x0003842c
   277f8:	00036be5 	.word	0x00036be5
   277fc:	0003843a 	.word	0x0003843a
   27800:	200229e8 	.word	0x200229e8

00027804 <nrf_gpio_pin_port_decode.isra.1>:
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   27804:	b508      	push	{r3, lr}
    switch (port)
   27806:	0943      	lsrs	r3, r0, #5
   27808:	bf0c      	ite	eq
   2780a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2780e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   27810:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   27814:	fa23 f000 	lsr.w	r0, r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   27818:	07c3      	lsls	r3, r0, #31
   2781a:	d40b      	bmi.n	27834 <nrf_gpio_pin_port_decode.isra.1+0x30>
   2781c:	4906      	ldr	r1, [pc, #24]	; (27838 <nrf_gpio_pin_port_decode.isra.1+0x34>)
   2781e:	4807      	ldr	r0, [pc, #28]	; (2783c <nrf_gpio_pin_port_decode.isra.1+0x38>)
   27820:	f240 230d 	movw	r3, #525	; 0x20d
   27824:	4a06      	ldr	r2, [pc, #24]	; (27840 <nrf_gpio_pin_port_decode.isra.1+0x3c>)
   27826:	f007 fd14 	bl	2f252 <printk>
   2782a:	f240 210d 	movw	r1, #525	; 0x20d
   2782e:	4804      	ldr	r0, [pc, #16]	; (27840 <nrf_gpio_pin_port_decode.isra.1+0x3c>)
   27830:	f008 f810 	bl	2f854 <assert_post_action>
}
   27834:	4803      	ldr	r0, [pc, #12]	; (27844 <nrf_gpio_pin_port_decode.isra.1+0x40>)
   27836:	bd08      	pop	{r3, pc}
   27838:	00037ecb 	.word	0x00037ecb
   2783c:	00036be5 	.word	0x00036be5
   27840:	00037e98 	.word	0x00037e98
   27844:	40842500 	.word	0x40842500

00027848 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   27848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2784c:	4681      	mov	r9, r0
   2784e:	4692      	mov	sl, r2
   27850:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   27852:	460c      	mov	r4, r1
   27854:	b949      	cbnz	r1, 2786a <nrfx_twim_init+0x22>
   27856:	492e      	ldr	r1, [pc, #184]	; (27910 <nrfx_twim_init+0xc8>)
   27858:	482e      	ldr	r0, [pc, #184]	; (27914 <nrfx_twim_init+0xcc>)
   2785a:	23de      	movs	r3, #222	; 0xde
   2785c:	4a2e      	ldr	r2, [pc, #184]	; (27918 <nrfx_twim_init+0xd0>)
   2785e:	f007 fcf8 	bl	2f252 <printk>
   27862:	21de      	movs	r1, #222	; 0xde
   27864:	482c      	ldr	r0, [pc, #176]	; (27918 <nrfx_twim_init+0xd0>)
   27866:	f007 fff5 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   2786a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2786e:	429a      	cmp	r2, r3
   27870:	d109      	bne.n	27886 <nrfx_twim_init+0x3e>
   27872:	492a      	ldr	r1, [pc, #168]	; (2791c <nrfx_twim_init+0xd4>)
   27874:	4827      	ldr	r0, [pc, #156]	; (27914 <nrfx_twim_init+0xcc>)
   27876:	23df      	movs	r3, #223	; 0xdf
   27878:	4a27      	ldr	r2, [pc, #156]	; (27918 <nrfx_twim_init+0xd0>)
   2787a:	f007 fcea 	bl	2f252 <printk>
   2787e:	21df      	movs	r1, #223	; 0xdf
   27880:	4825      	ldr	r0, [pc, #148]	; (27918 <nrfx_twim_init+0xd0>)
   27882:	f007 ffe7 	bl	2f854 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   27886:	2634      	movs	r6, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   27888:	f899 7004 	ldrb.w	r7, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2788c:	4d24      	ldr	r5, [pc, #144]	; (27920 <nrfx_twim_init+0xd8>)
   2788e:	437e      	muls	r6, r7
   27890:	19ab      	adds	r3, r5, r6
   27892:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   27896:	bbca      	cbnz	r2, 2790c <nrfx_twim_init+0xc4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   27898:	609a      	str	r2, [r3, #8]
    p_cb->p_context       = p_context;
   2789a:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->repeated        = false;
   2789e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
   278a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   278a6:	f8d4 8000 	ldr.w	r8, [r4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   278aa:	7b62      	ldrb	r2, [r4, #13]
    p_cb->handler         = event_handler;
   278ac:	f845 a006 	str.w	sl, [r5, r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   278b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   278b4:	4640      	mov	r0, r8
   278b6:	f7ff ffa5 	bl	27804 <nrf_gpio_pin_port_decode.isra.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   278ba:	f240 6a0c 	movw	sl, #1548	; 0x60c
   278be:	f108 0880 	add.w	r8, r8, #128	; 0x80
   278c2:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   278c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   278ca:	4640      	mov	r0, r8
   278cc:	f7ff ff9a 	bl	27804 <nrf_gpio_pin_port_decode.isra.1>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   278d0:	e9d4 2300 	ldrd	r2, r3, [r4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   278d4:	f108 0880 	add.w	r8, r8, #128	; 0x80
   278d8:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   278dc:	f8d9 0000 	ldr.w	r0, [r9]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   278e0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   278e4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   278e8:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   278ea:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   278ee:	59ab      	ldr	r3, [r5, r6]
   278f0:	b11b      	cbz	r3, 278fa <nrfx_twim_init+0xb2>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   278f2:	f340 3007 	sbfx	r0, r0, #12, #8
   278f6:	f7f1 f96b 	bl	18bd0 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   278fa:	2334      	movs	r3, #52	; 0x34
   278fc:	fb03 5507 	mla	r5, r3, r7, r5
   27900:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   27902:	4808      	ldr	r0, [pc, #32]	; (27924 <nrfx_twim_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27904:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   27908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   2790c:	4806      	ldr	r0, [pc, #24]	; (27928 <nrfx_twim_init+0xe0>)
   2790e:	e7fb      	b.n	27908 <nrfx_twim_init+0xc0>
   27910:	00038476 	.word	0x00038476
   27914:	00036be5 	.word	0x00036be5
   27918:	00038637 	.word	0x00038637
   2791c:	00038673 	.word	0x00038673
   27920:	20022a04 	.word	0x20022a04
   27924:	0bad0000 	.word	0x0bad0000
   27928:	0bad0005 	.word	0x0bad0005

0002792c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2792c:	2234      	movs	r2, #52	; 0x34
{
   2792e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   27930:	4d0f      	ldr	r5, [pc, #60]	; (27970 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27932:	7904      	ldrb	r4, [r0, #4]
{
   27934:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   27936:	fb02 5204 	mla	r2, r2, r4, r5
   2793a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2793e:	2a01      	cmp	r2, #1
   27940:	d00b      	beq.n	2795a <nrfx_twim_enable+0x2e>
   27942:	490c      	ldr	r1, [pc, #48]	; (27974 <nrfx_twim_enable+0x48>)
   27944:	480c      	ldr	r0, [pc, #48]	; (27978 <nrfx_twim_enable+0x4c>)
   27946:	f44f 73a3 	mov.w	r3, #326	; 0x146
   2794a:	4a0c      	ldr	r2, [pc, #48]	; (2797c <nrfx_twim_enable+0x50>)
   2794c:	f007 fc81 	bl	2f252 <printk>
   27950:	f44f 71a3 	mov.w	r1, #326	; 0x146
   27954:	4809      	ldr	r0, [pc, #36]	; (2797c <nrfx_twim_enable+0x50>)
   27956:	f007 ff7d 	bl	2f854 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2795a:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   2795c:	6833      	ldr	r3, [r6, #0]
   2795e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   27962:	2334      	movs	r3, #52	; 0x34
   27964:	fb03 5404 	mla	r4, r3, r4, r5
   27968:	2302      	movs	r3, #2
   2796a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2796e:	bd70      	pop	{r4, r5, r6, pc}
   27970:	20022a04 	.word	0x20022a04
   27974:	0003860d 	.word	0x0003860d
   27978:	00036be5 	.word	0x00036be5
   2797c:	00038637 	.word	0x00038637

00027980 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   27980:	2234      	movs	r2, #52	; 0x34
{
   27982:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   27984:	4d14      	ldr	r5, [pc, #80]	; (279d8 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27986:	7904      	ldrb	r4, [r0, #4]
{
   27988:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2798a:	fb02 5204 	mla	r2, r2, r4, r5
   2798e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   27992:	b95a      	cbnz	r2, 279ac <nrfx_twim_disable+0x2c>
   27994:	4911      	ldr	r1, [pc, #68]	; (279dc <nrfx_twim_disable+0x5c>)
   27996:	4812      	ldr	r0, [pc, #72]	; (279e0 <nrfx_twim_disable+0x60>)
   27998:	f240 1351 	movw	r3, #337	; 0x151
   2799c:	4a11      	ldr	r2, [pc, #68]	; (279e4 <nrfx_twim_disable+0x64>)
   2799e:	f007 fc58 	bl	2f252 <printk>
   279a2:	f240 1151 	movw	r1, #337	; 0x151
   279a6:	480f      	ldr	r0, [pc, #60]	; (279e4 <nrfx_twim_disable+0x64>)
   279a8:	f007 ff54 	bl	2f854 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   279ac:	2234      	movs	r2, #52	; 0x34
   279ae:	2100      	movs	r1, #0
   279b0:	fb02 5404 	mla	r4, r2, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   279b4:	6833      	ldr	r3, [r6, #0]
    p_reg->INTENCLR = mask;
   279b6:	4a0c      	ldr	r2, [pc, #48]	; (279e8 <nrfx_twim_disable+0x68>)
    p_cb->int_mask = 0;
   279b8:	60a1      	str	r1, [r4, #8]
   279ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   279be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   279c2:	f422 52bc 	bic.w	r2, r2, #6016	; 0x1780
   279c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   279ca:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   279ce:	2301      	movs	r3, #1
   279d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   279d4:	bd70      	pop	{r4, r5, r6, pc}
   279d6:	bf00      	nop
   279d8:	20022a04 	.word	0x20022a04
   279dc:	0003847f 	.word	0x0003847f
   279e0:	00036be5 	.word	0x00036be5
   279e4:	00038637 	.word	0x00038637
   279e8:	019c0202 	.word	0x019c0202

000279ec <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   279ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   279f0:	7903      	ldrb	r3, [r0, #4]
{
   279f2:	4606      	mov	r6, r0
   279f4:	460d      	mov	r5, r1
   279f6:	4690      	mov	r8, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   279f8:	b93b      	cbnz	r3, 27a0a <nrfx_twim_xfer+0x1e>
   279fa:	684b      	ldr	r3, [r1, #4]
   279fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   27a00:	d203      	bcs.n	27a0a <nrfx_twim_xfer+0x1e>
   27a02:	688b      	ldr	r3, [r1, #8]
   27a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   27a08:	d30b      	bcc.n	27a22 <nrfx_twim_xfer+0x36>
   27a0a:	49b1      	ldr	r1, [pc, #708]	; (27cd0 <nrfx_twim_xfer+0x2e4>)
   27a0c:	48b1      	ldr	r0, [pc, #708]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27a0e:	f240 2363 	movw	r3, #611	; 0x263
   27a12:	4ab1      	ldr	r2, [pc, #708]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a14:	f007 fc1d 	bl	2f252 <printk>
   27a18:	f240 2163 	movw	r1, #611	; 0x263
   27a1c:	48ae      	ldr	r0, [pc, #696]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a1e:	f007 ff19 	bl	2f854 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   27a22:	2434      	movs	r4, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27a24:	f896 9004 	ldrb.w	r9, [r6, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   27a28:	4fac      	ldr	r7, [pc, #688]	; (27cdc <nrfx_twim_xfer+0x2f0>)
   27a2a:	fb04 f409 	mul.w	r4, r4, r9
   27a2e:	593b      	ldr	r3, [r7, r4]
   27a30:	bb0b      	cbnz	r3, 27a76 <nrfx_twim_xfer+0x8a>
   27a32:	782b      	ldrb	r3, [r5, #0]
   27a34:	2b02      	cmp	r3, #2
   27a36:	d00f      	beq.n	27a58 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   27a38:	782b      	ldrb	r3, [r5, #0]
   27a3a:	2b03      	cmp	r3, #3
   27a3c:	d11b      	bne.n	27a76 <nrfx_twim_xfer+0x8a>
   27a3e:	f240 236a 	movw	r3, #618	; 0x26a
   27a42:	4aa5      	ldr	r2, [pc, #660]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a44:	49a6      	ldr	r1, [pc, #664]	; (27ce0 <nrfx_twim_xfer+0x2f4>)
   27a46:	48a3      	ldr	r0, [pc, #652]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27a48:	f007 fc03 	bl	2f252 <printk>
   27a4c:	f240 216a 	movw	r1, #618	; 0x26a
   27a50:	48a1      	ldr	r0, [pc, #644]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a52:	f007 feff 	bl	2f854 <assert_post_action>
   27a56:	e00e      	b.n	27a76 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   27a58:	f240 2369 	movw	r3, #617	; 0x269
   27a5c:	4a9e      	ldr	r2, [pc, #632]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a5e:	49a1      	ldr	r1, [pc, #644]	; (27ce4 <nrfx_twim_xfer+0x2f8>)
   27a60:	489c      	ldr	r0, [pc, #624]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27a62:	f007 fbf6 	bl	2f252 <printk>
   27a66:	f240 2169 	movw	r1, #617	; 0x269
   27a6a:	489b      	ldr	r0, [pc, #620]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27a6c:	f007 fef2 	bl	2f854 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   27a70:	593b      	ldr	r3, [r7, r4]
   27a72:	2b00      	cmp	r3, #0
   27a74:	d0e0      	beq.n	27a38 <nrfx_twim_xfer+0x4c>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   27a76:	6834      	ldr	r4, [r6, #0]
    p_cb->error = false;
   27a78:	2634      	movs	r6, #52	; 0x34
   27a7a:	2300      	movs	r3, #0
   27a7c:	fb06 7609 	mla	r6, r6, r9, r7
   27a80:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   27a84:	68eb      	ldr	r3, [r5, #12]
   27a86:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   27a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   27a8e:	d003      	beq.n	27a98 <nrfx_twim_xfer+0xac>
        return err_code;
   27a90:	4e95      	ldr	r6, [pc, #596]	; (27ce8 <nrfx_twim_xfer+0x2fc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   27a92:	4630      	mov	r0, r6
   27a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   27a98:	4b94      	ldr	r3, [pc, #592]	; (27cec <nrfx_twim_xfer+0x300>)
   27a9a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   27a9e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   27aa2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   27aa6:	b123      	cbz	r3, 27ab2 <nrfx_twim_xfer+0xc6>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   27aa8:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   27aaa:	4e91      	ldr	r6, [pc, #580]	; (27cf0 <nrfx_twim_xfer+0x304>)
    p_reg->INTENSET = mask;
   27aac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   27ab0:	e7ef      	b.n	27a92 <nrfx_twim_xfer+0xa6>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   27ab2:	f018 0f14 	tst.w	r8, #20
   27ab6:	bf0c      	ite	eq
   27ab8:	2301      	moveq	r3, #1
   27aba:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   27abc:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   27abe:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   27ac2:	f106 0c0c 	add.w	ip, r6, #12
   27ac6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   27aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   27ace:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   27ad2:	f8c6 8020 	str.w	r8, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   27ad6:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   27ada:	f3c8 1300 	ubfx	r3, r8, #4, #1
   27ade:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   27ae2:	786b      	ldrb	r3, [r5, #1]
   27ae4:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   27ae8:	f018 0301 	ands.w	r3, r8, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   27aec:	bf18      	it	ne
   27aee:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27af0:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   27af4:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   27af8:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   27afc:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   27b00:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   27b04:	f018 0302 	ands.w	r3, r8, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   27b08:	bf18      	it	ne
   27b0a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   27b0c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   27b10:	782b      	ldrb	r3, [r5, #0]
   27b12:	2b03      	cmp	r3, #3
   27b14:	f200 80d9 	bhi.w	27cca <nrfx_twim_xfer+0x2de>
   27b18:	e8df f003 	tbb	[pc, r3]
   27b1c:	028dc4a8 	.word	0x028dc4a8
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   27b20:	f018 0f10 	tst.w	r8, #16
   27b24:	d00b      	beq.n	27b3e <nrfx_twim_xfer+0x152>
   27b26:	4973      	ldr	r1, [pc, #460]	; (27cf4 <nrfx_twim_xfer+0x308>)
   27b28:	486a      	ldr	r0, [pc, #424]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27b2a:	f240 13a9 	movw	r3, #425	; 0x1a9
   27b2e:	4a6a      	ldr	r2, [pc, #424]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b30:	f007 fb8f 	bl	2f252 <printk>
   27b34:	f240 11a9 	movw	r1, #425	; 0x1a9
   27b38:	4867      	ldr	r0, [pc, #412]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b3a:	f007 fe8b 	bl	2f854 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   27b3e:	f018 0f08 	tst.w	r8, #8
   27b42:	d00b      	beq.n	27b5c <nrfx_twim_xfer+0x170>
   27b44:	496c      	ldr	r1, [pc, #432]	; (27cf8 <nrfx_twim_xfer+0x30c>)
   27b46:	4863      	ldr	r0, [pc, #396]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27b48:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   27b4c:	4a62      	ldr	r2, [pc, #392]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b4e:	f007 fb80 	bl	2f252 <printk>
   27b52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   27b56:	4860      	ldr	r0, [pc, #384]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b58:	f007 fe7c 	bl	2f854 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   27b5c:	f018 0f04 	tst.w	r8, #4
   27b60:	d00b      	beq.n	27b7a <nrfx_twim_xfer+0x18e>
   27b62:	4966      	ldr	r1, [pc, #408]	; (27cfc <nrfx_twim_xfer+0x310>)
   27b64:	485b      	ldr	r0, [pc, #364]	; (27cd4 <nrfx_twim_xfer+0x2e8>)
   27b66:	f240 13ab 	movw	r3, #427	; 0x1ab
   27b6a:	4a5b      	ldr	r2, [pc, #364]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b6c:	f007 fb71 	bl	2f252 <printk>
   27b70:	f240 11ab 	movw	r1, #427	; 0x1ab
   27b74:	4858      	ldr	r0, [pc, #352]	; (27cd8 <nrfx_twim_xfer+0x2ec>)
   27b76:	f007 fe6d 	bl	2f854 <assert_post_action>
   27b7a:	692a      	ldr	r2, [r5, #16]
   27b7c:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   27b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   27b84:	d184      	bne.n	27a90 <nrfx_twim_xfer+0xa4>
    p_reg->SHORTS = mask;
   27b86:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27b8a:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   27b8c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   27b90:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27b92:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27b96:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27b9a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27b9c:	2300      	movs	r3, #0
   27b9e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27ba2:	6221      	str	r1, [r4, #32]
   27ba4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27ba6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   27baa:	2900      	cmp	r1, #0
   27bac:	d0fb      	beq.n	27ba6 <nrfx_twim_xfer+0x1ba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27bae:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   27bb2:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27bb4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27bb8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   27bbc:	2334      	movs	r3, #52	; 0x34
   27bbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   27bc2:	fb03 7309 	mla	r3, r3, r9, r7
   27bc6:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   27bc8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   27bca:	4e4d      	ldr	r6, [pc, #308]	; (27d00 <nrfx_twim_xfer+0x314>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   27bcc:	f018 0f08 	tst.w	r8, #8
   27bd0:	d104      	bne.n	27bdc <nrfx_twim_xfer+0x1f0>
   27bd2:	782a      	ldrb	r2, [r5, #0]
   27bd4:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27bd6:	bf1c      	itt	ne
   27bd8:	2201      	movne	r2, #1
   27bda:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   27bdc:	2334      	movs	r3, #52	; 0x34
   27bde:	fb03 f309 	mul.w	r3, r3, r9
   27be2:	18fa      	adds	r2, r7, r3
   27be4:	58fb      	ldr	r3, [r7, r3]
   27be6:	2b00      	cmp	r3, #0
   27be8:	f040 808e 	bne.w	27d08 <nrfx_twim_xfer+0x31c>
                transmission_finished = true;
   27bec:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27bee:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   27bf2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   27bf6:	2800      	cmp	r0, #0
   27bf8:	f040 80a0 	bne.w	27d3c <nrfx_twim_xfer+0x350>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   27bfc:	3200      	adds	r2, #0
   27bfe:	bf18      	it	ne
   27c00:	2201      	movne	r2, #1
   27c02:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   27c06:	2800      	cmp	r0, #0
   27c08:	f000 809c 	beq.w	27d44 <nrfx_twim_xfer+0x358>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27c0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27c10:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   27c14:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   27c18:	b115      	cbz	r5, 27c20 <nrfx_twim_xfer+0x234>
   27c1a:	f410 7f00 	tst.w	r0, #512	; 0x200
   27c1e:	d104      	bne.n	27c2a <nrfx_twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27c20:	6221      	str	r1, [r4, #32]
   27c22:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   27c24:	2d00      	cmp	r5, #0
   27c26:	d0e2      	beq.n	27bee <nrfx_twim_xfer+0x202>
                    transmission_finished = false;
   27c28:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   27c2a:	05c0      	lsls	r0, r0, #23
   27c2c:	f140 808a 	bpl.w	27d44 <nrfx_twim_xfer+0x358>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27c30:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   27c34:	e7db      	b.n	27bee <nrfx_twim_xfer+0x202>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   27c36:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27c38:	68ea      	ldr	r2, [r5, #12]
   27c3a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27c3e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   27c42:	692b      	ldr	r3, [r5, #16]
   27c44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   27c48:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   27c4c:	f47f af20 	bne.w	27a90 <nrfx_twim_xfer+0xa4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   27c50:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   27c52:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   27c56:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   27c5a:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   27c5e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   27c62:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   27c64:	fb03 7309 	mla	r3, r3, r9, r7
   27c68:	2202      	movs	r2, #2
   27c6a:	e012      	b.n	27c92 <nrfx_twim_xfer+0x2a6>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   27c6c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27c6e:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   27c70:	f018 0f20 	tst.w	r8, #32
   27c74:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27c78:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   27c7c:	f04f 0334 	mov.w	r3, #52	; 0x34
   27c80:	d00b      	beq.n	27c9a <nrfx_twim_xfer+0x2ae>
    p_reg->SHORTS = mask;
   27c82:	f44f 7280 	mov.w	r2, #256	; 0x100
   27c86:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   27c8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   27c8e:	fb03 7309 	mla	r3, r3, r9, r7
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   27c92:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27c94:	2301      	movs	r3, #1
   27c96:	6223      	str	r3, [r4, #32]
   27c98:	e796      	b.n	27bc8 <nrfx_twim_xfer+0x1dc>
    p_reg->SHORTS = mask;
   27c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   27c9e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   27ca2:	e7df      	b.n	27c64 <nrfx_twim_xfer+0x278>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   27ca4:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   27ca6:	68ea      	ldr	r2, [r5, #12]
   27ca8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   27cac:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   27cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   27cb4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   27cb8:	2334      	movs	r3, #52	; 0x34
   27cba:	2202      	movs	r2, #2
   27cbc:	fb03 7309 	mla	r3, r3, r9, r7
   27cc0:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27cc2:	2301      	movs	r3, #1
   27cc4:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   27cc6:	2300      	movs	r3, #0
   27cc8:	e77f      	b.n	27bca <nrfx_twim_xfer+0x1de>
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   27cca:	2308      	movs	r3, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
   27ccc:	4e0d      	ldr	r6, [pc, #52]	; (27d04 <nrfx_twim_xfer+0x318>)
   27cce:	e77d      	b.n	27bcc <nrfx_twim_xfer+0x1e0>
   27cd0:	00038692 	.word	0x00038692
   27cd4:	00036be5 	.word	0x00036be5
   27cd8:	00038637 	.word	0x00038637
   27cdc:	20022a04 	.word	0x20022a04
   27ce0:	0003878d 	.word	0x0003878d
   27ce4:	0003873d 	.word	0x0003873d
   27ce8:	0bad000a 	.word	0x0bad000a
   27cec:	019c0202 	.word	0x019c0202
   27cf0:	0bad000b 	.word	0x0bad000b
   27cf4:	000387dd 	.word	0x000387dd
   27cf8:	000387f3 	.word	0x000387f3
   27cfc:	00038809 	.word	0x00038809
   27d00:	0bad0000 	.word	0x0bad0000
   27d04:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   27d08:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = 0;
   27d0c:	bf1c      	itt	ne
   27d0e:	2300      	movne	r3, #0
   27d10:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   27d12:	f018 0f40 	tst.w	r8, #64	; 0x40
   27d16:	d106      	bne.n	27d26 <nrfx_twim_xfer+0x33a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   27d18:	2334      	movs	r3, #52	; 0x34
   27d1a:	fb03 7309 	mla	r3, r3, r9, r7
   27d1e:	689a      	ldr	r2, [r3, #8]
   27d20:	f042 0202 	orr.w	r2, r2, #2
   27d24:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   27d26:	2334      	movs	r3, #52	; 0x34
   27d28:	fb03 7709 	mla	r7, r3, r9, r7
   27d2c:	68bb      	ldr	r3, [r7, #8]
   27d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   27d32:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   27d34:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   27d36:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   27d3a:	e6aa      	b.n	27a92 <nrfx_twim_xfer+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27d3c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   27d40:	2201      	movs	r2, #1
   27d42:	e75e      	b.n	27c02 <nrfx_twim_xfer+0x216>
        } while (!transmission_finished);
   27d44:	2a00      	cmp	r2, #0
   27d46:	f43f af52 	beq.w	27bee <nrfx_twim_xfer+0x202>
        p_cb->busy = false;
   27d4a:	2134      	movs	r1, #52	; 0x34
   27d4c:	2000      	movs	r0, #0
   27d4e:	fb01 7209 	mla	r2, r1, r9, r7
    uint32_t error_source = p_reg->ERRORSRC;
   27d52:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   27d56:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   27d5a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   27d5e:	b18b      	cbz	r3, 27d84 <nrfx_twim_xfer+0x398>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   27d60:	4a0f      	ldr	r2, [pc, #60]	; (27da0 <nrfx_twim_xfer+0x3b4>)
   27d62:	f013 0f01 	tst.w	r3, #1
   27d66:	4e0f      	ldr	r6, [pc, #60]	; (27da4 <nrfx_twim_xfer+0x3b8>)
   27d68:	bf18      	it	ne
   27d6a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   27d6c:	f013 0f02 	tst.w	r3, #2
   27d70:	f102 0201 	add.w	r2, r2, #1
   27d74:	bf18      	it	ne
   27d76:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   27d78:	f013 0f04 	tst.w	r3, #4
   27d7c:	4b0a      	ldr	r3, [pc, #40]	; (27da8 <nrfx_twim_xfer+0x3bc>)
   27d7e:	bf18      	it	ne
   27d80:	461e      	movne	r6, r3
   27d82:	e686      	b.n	27a92 <nrfx_twim_xfer+0xa6>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   27d84:	f018 0f40 	tst.w	r8, #64	; 0x40
   27d88:	f47f ae83 	bne.w	27a92 <nrfx_twim_xfer+0xa6>
                !xfer_completeness_check(p_twim, p_cb))
   27d8c:	fb09 7101 	mla	r1, r9, r1, r7
   27d90:	4620      	mov	r0, r4
   27d92:	f00c fbab 	bl	344ec <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   27d96:	4b03      	ldr	r3, [pc, #12]	; (27da4 <nrfx_twim_xfer+0x3b8>)
   27d98:	2800      	cmp	r0, #0
   27d9a:	bf08      	it	eq
   27d9c:	461e      	moveq	r6, r3
   27d9e:	e678      	b.n	27a92 <nrfx_twim_xfer+0xa6>
   27da0:	0bae0000 	.word	0x0bae0000
   27da4:	0bad0001 	.word	0x0bad0001
   27da8:	0bae0002 	.word	0x0bae0002

00027dac <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   27dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   27dae:	4c5d      	ldr	r4, [pc, #372]	; (27f24 <nrfx_twim_2_irq_handler+0x178>)
{
   27db0:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   27db2:	6823      	ldr	r3, [r4, #0]
   27db4:	b95b      	cbnz	r3, 27dce <nrfx_twim_2_irq_handler+0x22>
   27db6:	495c      	ldr	r1, [pc, #368]	; (27f28 <nrfx_twim_2_irq_handler+0x17c>)
   27db8:	485c      	ldr	r0, [pc, #368]	; (27f2c <nrfx_twim_2_irq_handler+0x180>)
   27dba:	f44f 7329 	mov.w	r3, #676	; 0x2a4
   27dbe:	4a5c      	ldr	r2, [pc, #368]	; (27f30 <nrfx_twim_2_irq_handler+0x184>)
   27dc0:	f007 fa47 	bl	2f252 <printk>
   27dc4:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   27dc8:	4859      	ldr	r0, [pc, #356]	; (27f30 <nrfx_twim_2_irq_handler+0x184>)
   27dca:	f007 fd43 	bl	2f854 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27dce:	4b59      	ldr	r3, [pc, #356]	; (27f34 <nrfx_twim_2_irq_handler+0x188>)
   27dd0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   27dd4:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   27dd6:	b1ea      	cbz	r2, 27e14 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27dd8:	2200      	movs	r2, #0
   27dda:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27dde:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   27de2:	b9ba      	cbnz	r2, 27e14 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   27de4:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   27de6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   27dea:	2202      	movs	r2, #2
   27dec:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   27dee:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   27df0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27df4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   27df8:	b11a      	cbz	r2, 27e02 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   27dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   27dfe:	059e      	lsls	r6, r3, #22
   27e00:	d403      	bmi.n	27e0a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27e02:	2201      	movs	r2, #1
   27e04:	4b4b      	ldr	r3, [pc, #300]	; (27f34 <nrfx_twim_2_irq_handler+0x188>)
   27e06:	621a      	str	r2, [r3, #32]
   27e08:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   27e0a:	2301      	movs	r3, #1
   27e0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   27e10:	b007      	add	sp, #28
   27e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27e14:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   27e18:	2b00      	cmp	r3, #0
   27e1a:	d04e      	beq.n	27eba <nrfx_twim_2_irq_handler+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27e1c:	2300      	movs	r3, #0
   27e1e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   27e22:	6a23      	ldr	r3, [r4, #32]
   27e24:	065d      	lsls	r5, r3, #25
   27e26:	d40a      	bmi.n	27e3e <nrfx_twim_2_irq_handler+0x92>
   27e28:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   27e2c:	b93b      	cbnz	r3, 27e3e <nrfx_twim_2_irq_handler+0x92>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   27e2e:	493d      	ldr	r1, [pc, #244]	; (27f24 <nrfx_twim_2_irq_handler+0x178>)
   27e30:	4840      	ldr	r0, [pc, #256]	; (27f34 <nrfx_twim_2_irq_handler+0x188>)
   27e32:	f00c fb5b 	bl	344ec <xfer_completeness_check>
   27e36:	f080 0001 	eor.w	r0, r0, #1
   27e3a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   27e3e:	6a23      	ldr	r3, [r4, #32]
   27e40:	f013 0704 	ands.w	r7, r3, #4
   27e44:	d11e      	bne.n	27e84 <nrfx_twim_2_irq_handler+0xd8>
            event.xfer_desc = p_cb->xfer_desc;
   27e46:	4e3c      	ldr	r6, [pc, #240]	; (27f38 <nrfx_twim_2_irq_handler+0x18c>)
   27e48:	ad01      	add	r5, sp, #4
   27e4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   27e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   27e4e:	6833      	ldr	r3, [r6, #0]
   27e50:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   27e54:	602b      	str	r3, [r5, #0]
   27e56:	4b37      	ldr	r3, [pc, #220]	; (27f34 <nrfx_twim_2_irq_handler+0x188>)
   27e58:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   27e5c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   27e60:	f1bc 0f00 	cmp.w	ip, #0
   27e64:	d002      	beq.n	27e6c <nrfx_twim_2_irq_handler+0xc0>
   27e66:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   27e6a:	b15a      	cbz	r2, 27e84 <nrfx_twim_2_irq_handler+0xd8>
    p_reg->SHORTS = mask;
   27e6c:	2200      	movs	r2, #0
   27e6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   27e72:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   27e74:	4a31      	ldr	r2, [pc, #196]	; (27f3c <nrfx_twim_2_irq_handler+0x190>)
   27e76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   27e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27e7e:	4b30      	ldr	r3, [pc, #192]	; (27f40 <nrfx_twim_2_irq_handler+0x194>)
   27e80:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   27e84:	4a2b      	ldr	r2, [pc, #172]	; (27f34 <nrfx_twim_2_irq_handler+0x188>)
   27e86:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   27e8a:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   27e8c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   27e90:	d53a      	bpl.n	27f08 <nrfx_twim_2_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   27e92:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   27e94:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   27e98:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   27e9c:	b90b      	cbnz	r3, 27ea2 <nrfx_twim_2_irq_handler+0xf6>
        p_cb->busy = false;
   27e9e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   27ea2:	6a23      	ldr	r3, [r4, #32]
   27ea4:	075b      	lsls	r3, r3, #29
   27ea6:	d503      	bpl.n	27eb0 <nrfx_twim_2_irq_handler+0x104>
   27ea8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   27eac:	2b00      	cmp	r3, #0
   27eae:	d0af      	beq.n	27e10 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   27eb0:	e9d4 3100 	ldrd	r3, r1, [r4]
   27eb4:	4668      	mov	r0, sp
   27eb6:	4798      	blx	r3
}
   27eb8:	e7aa      	b.n	27e10 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27eba:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   27ebe:	7b23      	ldrb	r3, [r4, #12]
   27ec0:	b983      	cbnz	r3, 27ee4 <nrfx_twim_2_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
   27ec2:	4f1d      	ldr	r7, [pc, #116]	; (27f38 <nrfx_twim_2_irq_handler+0x18c>)
   27ec4:	ae01      	add	r6, sp, #4
   27ec6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   27ec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27eca:	683b      	ldr	r3, [r7, #0]
   27ecc:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   27ece:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   27ed2:	2b00      	cmp	r3, #0
   27ed4:	d1d6      	bne.n	27e84 <nrfx_twim_2_irq_handler+0xd8>
    p_reg->SHORTS = mask;
   27ed6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   27eda:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   27edc:	4b17      	ldr	r3, [pc, #92]	; (27f3c <nrfx_twim_2_irq_handler+0x190>)
   27ede:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   27ee2:	e7ca      	b.n	27e7a <nrfx_twim_2_irq_handler+0xce>
    p_reg->SHORTS = mask;
   27ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
   27ee8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   27eec:	f240 2302 	movw	r3, #514	; 0x202
   27ef0:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   27ef2:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   27ef6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   27efa:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   27efc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f00:	2301      	movs	r3, #1
   27f02:	60ab      	str	r3, [r5, #8]
   27f04:	622b      	str	r3, [r5, #32]
            return;
   27f06:	e783      	b.n	27e10 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   27f08:	0759      	lsls	r1, r3, #29
   27f0a:	d501      	bpl.n	27f10 <nrfx_twim_2_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   27f0c:	2302      	movs	r3, #2
   27f0e:	e7c1      	b.n	27e94 <nrfx_twim_2_irq_handler+0xe8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   27f10:	07da      	lsls	r2, r3, #31
   27f12:	d501      	bpl.n	27f18 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   27f14:	2303      	movs	r3, #3
   27f16:	e7bd      	b.n	27e94 <nrfx_twim_2_irq_handler+0xe8>
    else if (p_cb->error)
   27f18:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   27f1c:	2b00      	cmp	r3, #0
   27f1e:	d0b9      	beq.n	27e94 <nrfx_twim_2_irq_handler+0xe8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   27f20:	2304      	movs	r3, #4
   27f22:	e7b7      	b.n	27e94 <nrfx_twim_2_irq_handler+0xe8>
   27f24:	20022a04 	.word	0x20022a04
   27f28:	0003842c 	.word	0x0003842c
   27f2c:	00036be5 	.word	0x00036be5
   27f30:	00038637 	.word	0x00038637
   27f34:	4000a000 	.word	0x4000a000
   27f38:	20022a10 	.word	0x20022a10
   27f3c:	019c0202 	.word	0x019c0202
   27f40:	e000e100 	.word	0xe000e100

00027f44 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   27f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f48:	4606      	mov	r6, r0
   27f4a:	4617      	mov	r7, r2
    NRFX_ASSERT(p_config);
   27f4c:	460c      	mov	r4, r1
   27f4e:	b949      	cbnz	r1, 27f64 <nrfx_wdt_init+0x20>
   27f50:	4921      	ldr	r1, [pc, #132]	; (27fd8 <nrfx_wdt_init+0x94>)
   27f52:	4822      	ldr	r0, [pc, #136]	; (27fdc <nrfx_wdt_init+0x98>)
   27f54:	233d      	movs	r3, #61	; 0x3d
   27f56:	4a22      	ldr	r2, [pc, #136]	; (27fe0 <nrfx_wdt_init+0x9c>)
   27f58:	f007 f97b 	bl	2f252 <printk>
   27f5c:	213d      	movs	r1, #61	; 0x3d
   27f5e:	4820      	ldr	r0, [pc, #128]	; (27fe0 <nrfx_wdt_init+0x9c>)
   27f60:	f007 fc78 	bl	2f854 <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27f64:	7932      	ldrb	r2, [r6, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   27f66:	4b1f      	ldr	r3, [pc, #124]	; (27fe4 <nrfx_wdt_init+0xa0>)
   27f68:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   27f6c:	604f      	str	r7, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   27f6e:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   27f72:	bb69      	cbnz	r1, 27fd0 <nrfx_wdt_init+0x8c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   27f74:	2001      	movs	r0, #1
   27f76:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   27f7a:	7822      	ldrb	r2, [r4, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   27f7c:	6833      	ldr	r3, [r6, #0]
   27f7e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   27f82:	6863      	ldr	r3, [r4, #4]
   27f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27f88:	0c5d      	lsrs	r5, r3, #17
   27f8a:	03dc      	lsls	r4, r3, #15
   27f8c:	4620      	mov	r0, r4
   27f8e:	2300      	movs	r3, #0
   27f90:	4629      	mov	r1, r5
   27f92:	f7e5 fbed 	bl	d770 <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   27f96:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   27f9a:	bf08      	it	eq
   27f9c:	2c00      	cmpeq	r4, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   27f9e:	4680      	mov	r8, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   27fa0:	d309      	bcc.n	27fb6 <nrfx_wdt_init+0x72>
   27fa2:	4911      	ldr	r1, [pc, #68]	; (27fe8 <nrfx_wdt_init+0xa4>)
   27fa4:	480d      	ldr	r0, [pc, #52]	; (27fdc <nrfx_wdt_init+0x98>)
   27fa6:	2358      	movs	r3, #88	; 0x58
   27fa8:	4a0d      	ldr	r2, [pc, #52]	; (27fe0 <nrfx_wdt_init+0x9c>)
   27faa:	f007 f952 	bl	2f252 <printk>
   27fae:	2158      	movs	r1, #88	; 0x58
   27fb0:	480b      	ldr	r0, [pc, #44]	; (27fe0 <nrfx_wdt_init+0x9c>)
   27fb2:	f007 fc4f 	bl	2f854 <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   27fb6:	6830      	ldr	r0, [r6, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   27fb8:	f8c0 8504 	str.w	r8, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   27fbc:	b137      	cbz	r7, 27fcc <nrfx_wdt_init+0x88>
    p_reg->INTENSET = mask;
   27fbe:	2301      	movs	r3, #1
   27fc0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   27fc4:	f340 3007 	sbfx	r0, r0, #12, #8
   27fc8:	f7f0 fe02 	bl	18bd0 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   27fcc:	4807      	ldr	r0, [pc, #28]	; (27fec <nrfx_wdt_init+0xa8>)
   27fce:	e000      	b.n	27fd2 <nrfx_wdt_init+0x8e>
        return err_code;
   27fd0:	4807      	ldr	r0, [pc, #28]	; (27ff0 <nrfx_wdt_init+0xac>)
}
   27fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27fd6:	bf00      	nop
   27fd8:	00038476 	.word	0x00038476
   27fdc:	00036be5 	.word	0x00036be5
   27fe0:	00038885 	.word	0x00038885
   27fe4:	20022a38 	.word	0x20022a38
   27fe8:	000388c0 	.word	0x000388c0
   27fec:	0bad0000 	.word	0x0bad0000
   27ff0:	0bad0005 	.word	0x0bad0005

00027ff4 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   27ff4:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   27ff6:	4c13      	ldr	r4, [pc, #76]	; (28044 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   27ff8:	7905      	ldrb	r5, [r0, #4]
{
   27ffa:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   27ffc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   28000:	785b      	ldrb	r3, [r3, #1]
   28002:	b94b      	cbnz	r3, 28018 <nrfx_wdt_enable+0x24>
   28004:	4910      	ldr	r1, [pc, #64]	; (28048 <nrfx_wdt_enable+0x54>)
   28006:	4811      	ldr	r0, [pc, #68]	; (2804c <nrfx_wdt_enable+0x58>)
   28008:	236e      	movs	r3, #110	; 0x6e
   2800a:	4a11      	ldr	r2, [pc, #68]	; (28050 <nrfx_wdt_enable+0x5c>)
   2800c:	f007 f921 	bl	2f252 <printk>
   28010:	216e      	movs	r1, #110	; 0x6e
   28012:	480f      	ldr	r0, [pc, #60]	; (28050 <nrfx_wdt_enable+0x5c>)
   28014:	f007 fc1e 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   28018:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   2801c:	2b01      	cmp	r3, #1
   2801e:	d009      	beq.n	28034 <nrfx_wdt_enable+0x40>
   28020:	490c      	ldr	r1, [pc, #48]	; (28054 <nrfx_wdt_enable+0x60>)
   28022:	480a      	ldr	r0, [pc, #40]	; (2804c <nrfx_wdt_enable+0x58>)
   28024:	236f      	movs	r3, #111	; 0x6f
   28026:	4a0a      	ldr	r2, [pc, #40]	; (28050 <nrfx_wdt_enable+0x5c>)
   28028:	f007 f913 	bl	2f252 <printk>
   2802c:	216f      	movs	r1, #111	; 0x6f
   2802e:	4808      	ldr	r0, [pc, #32]	; (28050 <nrfx_wdt_enable+0x5c>)
   28030:	f007 fc10 	bl	2f854 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   28034:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   28036:	6833      	ldr	r3, [r6, #0]
   28038:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2803a:	2302      	movs	r3, #2
   2803c:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   28040:	bd70      	pop	{r4, r5, r6, pc}
   28042:	bf00      	nop
   28044:	20022a38 	.word	0x20022a38
   28048:	0003886e 	.word	0x0003886e
   2804c:	00036be5 	.word	0x00036be5
   28050:	00038885 	.word	0x00038885
   28054:	0003860d 	.word	0x0003860d

00028058 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   28058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2805a:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2805c:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
   2805e:	460e      	mov	r6, r1
   28060:	b949      	cbnz	r1, 28076 <nrfx_wdt_channel_alloc+0x1e>
   28062:	491c      	ldr	r1, [pc, #112]	; (280d4 <nrfx_wdt_channel_alloc+0x7c>)
   28064:	481c      	ldr	r0, [pc, #112]	; (280d8 <nrfx_wdt_channel_alloc+0x80>)
   28066:	2385      	movs	r3, #133	; 0x85
   28068:	4a1c      	ldr	r2, [pc, #112]	; (280dc <nrfx_wdt_channel_alloc+0x84>)
   2806a:	f007 f8f2 	bl	2f252 <printk>
   2806e:	2185      	movs	r1, #133	; 0x85
   28070:	481a      	ldr	r0, [pc, #104]	; (280dc <nrfx_wdt_channel_alloc+0x84>)
   28072:	f007 fbef 	bl	2f854 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   28076:	4c1a      	ldr	r4, [pc, #104]	; (280e0 <nrfx_wdt_channel_alloc+0x88>)
   28078:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   2807c:	2a01      	cmp	r2, #1
   2807e:	d009      	beq.n	28094 <nrfx_wdt_channel_alloc+0x3c>
   28080:	4918      	ldr	r1, [pc, #96]	; (280e4 <nrfx_wdt_channel_alloc+0x8c>)
   28082:	4815      	ldr	r0, [pc, #84]	; (280d8 <nrfx_wdt_channel_alloc+0x80>)
   28084:	2386      	movs	r3, #134	; 0x86
   28086:	4a15      	ldr	r2, [pc, #84]	; (280dc <nrfx_wdt_channel_alloc+0x84>)
   28088:	f007 f8e3 	bl	2f252 <printk>
   2808c:	2186      	movs	r1, #134	; 0x86
   2808e:	4813      	ldr	r0, [pc, #76]	; (280dc <nrfx_wdt_channel_alloc+0x84>)
   28090:	f007 fbe0 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28094:	f04f 0320 	mov.w	r3, #32
   28098:	f3ef 8c11 	mrs	ip, BASEPRI
   2809c:	f383 8811 	msr	BASEPRI, r3
   280a0:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   280a4:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   280a8:	785a      	ldrb	r2, [r3, #1]
   280aa:	2a07      	cmp	r2, #7
   280ac:	d810      	bhi.n	280d0 <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   280ae:	1c51      	adds	r1, r2, #1
   280b0:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   280b2:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   280b4:	6829      	ldr	r1, [r5, #0]
   280b6:	4093      	lsls	r3, r2
   280b8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   280bc:	7032      	strb	r2, [r6, #0]
   280be:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   280c0:	4809      	ldr	r0, [pc, #36]	; (280e8 <nrfx_wdt_channel_alloc+0x90>)
   280c2:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   280c6:	f38c 8811 	msr	BASEPRI, ip
   280ca:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   280ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   280d0:	4806      	ldr	r0, [pc, #24]	; (280ec <nrfx_wdt_channel_alloc+0x94>)
   280d2:	e7f8      	b.n	280c6 <nrfx_wdt_channel_alloc+0x6e>
   280d4:	0003881f 	.word	0x0003881f
   280d8:	00036be5 	.word	0x00036be5
   280dc:	00038885 	.word	0x00038885
   280e0:	20022a38 	.word	0x20022a38
   280e4:	0003860d 	.word	0x0003860d
   280e8:	0bad0000 	.word	0x0bad0000
   280ec:	0bad0002 	.word	0x0bad0002

000280f0 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   280f0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   280f2:	4b0c      	ldr	r3, [pc, #48]	; (28124 <nrfx_wdt_channel_feed+0x34>)
   280f4:	7902      	ldrb	r2, [r0, #4]
{
   280f6:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   280f8:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   280fc:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   280fe:	2b02      	cmp	r3, #2
   28100:	d009      	beq.n	28116 <nrfx_wdt_channel_feed+0x26>
   28102:	4909      	ldr	r1, [pc, #36]	; (28128 <nrfx_wdt_channel_feed+0x38>)
   28104:	4809      	ldr	r0, [pc, #36]	; (2812c <nrfx_wdt_channel_feed+0x3c>)
   28106:	239b      	movs	r3, #155	; 0x9b
   28108:	4a09      	ldr	r2, [pc, #36]	; (28130 <nrfx_wdt_channel_feed+0x40>)
   2810a:	f007 f8a2 	bl	2f252 <printk>
   2810e:	219b      	movs	r1, #155	; 0x9b
   28110:	4807      	ldr	r0, [pc, #28]	; (28130 <nrfx_wdt_channel_feed+0x40>)
   28112:	f007 fb9f 	bl	2f854 <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   28116:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   28118:	4a06      	ldr	r2, [pc, #24]	; (28134 <nrfx_wdt_channel_feed+0x44>)
   2811a:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   2811e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   28122:	bd38      	pop	{r3, r4, r5, pc}
   28124:	20022a38 	.word	0x20022a38
   28128:	0003882c 	.word	0x0003882c
   2812c:	00036be5 	.word	0x00036be5
   28130:	00038885 	.word	0x00038885
   28134:	6e524635 	.word	0x6e524635

00028138 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   28138:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2813a:	4c04      	ldr	r4, [pc, #16]	; (2814c <nrfx_wdt_0_irq_handler+0x14>)
   2813c:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2813e:	b123      	cbz	r3, 2814a <nrfx_wdt_0_irq_handler+0x12>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   28140:	4b03      	ldr	r3, [pc, #12]	; (28150 <nrfx_wdt_0_irq_handler+0x18>)
   28142:	685b      	ldr	r3, [r3, #4]
   28144:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28146:	2300      	movs	r3, #0
   28148:	6023      	str	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   2814a:	bd10      	pop	{r4, pc}
   2814c:	40018100 	.word	0x40018100
   28150:	20022a38 	.word	0x20022a38

00028154 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   28154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   28156:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   28158:	4b08      	ldr	r3, [pc, #32]	; (2817c <z_sys_init_run_level+0x28>)
   2815a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2815e:	3001      	adds	r0, #1
   28160:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   28164:	42a6      	cmp	r6, r4
   28166:	d800      	bhi.n	2816a <z_sys_init_run_level+0x16>
			}
		}
	}
}
   28168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   2816a:	e9d4 3500 	ldrd	r3, r5, [r4]
   2816e:	4628      	mov	r0, r5
   28170:	4798      	blx	r3
		if (retval != 0) {
   28172:	b108      	cbz	r0, 28178 <z_sys_init_run_level+0x24>
			if (dev) {
   28174:	b105      	cbz	r5, 28178 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   28176:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   28178:	3408      	adds	r4, #8
   2817a:	e7f3      	b.n	28164 <z_sys_init_run_level+0x10>
   2817c:	00036304 	.word	0x00036304

00028180 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   28180:	4b0f      	ldr	r3, [pc, #60]	; (281c0 <z_impl_device_get_binding+0x40>)
{
   28182:	b570      	push	{r4, r5, r6, lr}
   28184:	4605      	mov	r5, r0
   28186:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   28188:	4c0e      	ldr	r4, [pc, #56]	; (281c4 <z_impl_device_get_binding+0x44>)
   2818a:	429c      	cmp	r4, r3
   2818c:	d104      	bne.n	28198 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   2818e:	4c0d      	ldr	r4, [pc, #52]	; (281c4 <z_impl_device_get_binding+0x44>)
   28190:	42b4      	cmp	r4, r6
   28192:	d108      	bne.n	281a6 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   28194:	2400      	movs	r4, #0
   28196:	e010      	b.n	281ba <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   28198:	68a2      	ldr	r2, [r4, #8]
   2819a:	b112      	cbz	r2, 281a2 <z_impl_device_get_binding+0x22>
   2819c:	6822      	ldr	r2, [r4, #0]
   2819e:	42aa      	cmp	r2, r5
   281a0:	d00b      	beq.n	281ba <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   281a2:	3410      	adds	r4, #16
   281a4:	e7f1      	b.n	2818a <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   281a6:	68a3      	ldr	r3, [r4, #8]
   281a8:	b90b      	cbnz	r3, 281ae <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   281aa:	3410      	adds	r4, #16
   281ac:	e7f0      	b.n	28190 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   281ae:	6821      	ldr	r1, [r4, #0]
   281b0:	4628      	mov	r0, r5
   281b2:	f7e9 ff5b 	bl	1206c <strcmp>
		if ((dev->driver_api != NULL) &&
   281b6:	2800      	cmp	r0, #0
   281b8:	d1f7      	bne.n	281aa <z_impl_device_get_binding+0x2a>
}
   281ba:	4620      	mov	r0, r4
   281bc:	bd70      	pop	{r4, r5, r6, pc}
   281be:	bf00      	nop
   281c0:	20020534 	.word	0x20020534
   281c4:	200204a4 	.word	0x200204a4

000281c8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   281c8:	4b01      	ldr	r3, [pc, #4]	; (281d0 <z_impl_z_errno+0x8>)
   281ca:	6898      	ldr	r0, [r3, #8]
}
   281cc:	305c      	adds	r0, #92	; 0x5c
   281ce:	4770      	bx	lr
   281d0:	20027418 	.word	0x20027418

000281d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   281d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281d6:	4604      	mov	r4, r0
   281d8:	460f      	mov	r7, r1
	__asm__ volatile(
   281da:	f04f 0320 	mov.w	r3, #32
   281de:	f3ef 8611 	mrs	r6, BASEPRI
   281e2:	f383 8811 	msr	BASEPRI, r3
   281e6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   281ea:	f002 fb4b 	bl	2a884 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   281ee:	4639      	mov	r1, r7
   281f0:	4605      	mov	r5, r0
   281f2:	4620      	mov	r0, r4
   281f4:	f00c f94c 	bl	34490 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   281f8:	2c04      	cmp	r4, #4
   281fa:	d10c      	bne.n	28216 <z_fatal_error+0x42>
   281fc:	490a      	ldr	r1, [pc, #40]	; (28228 <z_fatal_error+0x54>)
   281fe:	238c      	movs	r3, #140	; 0x8c
   28200:	4a0a      	ldr	r2, [pc, #40]	; (2822c <z_fatal_error+0x58>)
   28202:	480b      	ldr	r0, [pc, #44]	; (28230 <z_fatal_error+0x5c>)
   28204:	f007 f825 	bl	2f252 <printk>
   28208:	480a      	ldr	r0, [pc, #40]	; (28234 <z_fatal_error+0x60>)
   2820a:	f007 f822 	bl	2f252 <printk>
   2820e:	218c      	movs	r1, #140	; 0x8c
   28210:	4806      	ldr	r0, [pc, #24]	; (2822c <z_fatal_error+0x58>)
   28212:	f007 fb1f 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28216:	f386 8811 	msr	BASEPRI, r6
   2821a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2821e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   28220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28224:	f7f0 bf26 	b.w	19074 <z_impl_k_thread_abort>
   28228:	000388f8 	.word	0x000388f8
   2822c:	000388d6 	.word	0x000388d6
   28230:	00036be5 	.word	0x00036be5
   28234:	00038915 	.word	0x00038915

00028238 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   28238:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2823a:	4d0b      	ldr	r5, [pc, #44]	; (28268 <idle+0x30>)
	__asm__ volatile(
   2823c:	f04f 0220 	mov.w	r2, #32
   28240:	f3ef 8311 	mrs	r3, BASEPRI
   28244:	f382 8811 	msr	BASEPRI, r2
   28248:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2824c:	f003 f85e 	bl	2b30c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   28250:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   28252:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   28254:	2802      	cmp	r0, #2
   28256:	bfd8      	it	le
   28258:	4608      	movle	r0, r1
   2825a:	f003 f89f 	bl	2b39c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2825e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   28260:	f7f0 fd50 	bl	18d04 <arch_cpu_idle>
   28264:	e7ea      	b.n	2823c <idle+0x4>
   28266:	bf00      	nop
   28268:	20027418 	.word	0x20027418

0002826c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2826c:	4802      	ldr	r0, [pc, #8]	; (28278 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2826e:	4a03      	ldr	r2, [pc, #12]	; (2827c <z_bss_zero+0x10>)
   28270:	2100      	movs	r1, #0
   28272:	1a12      	subs	r2, r2, r0
   28274:	f00c bc0e 	b.w	34a94 <memset>
   28278:	20020860 	.word	0x20020860
   2827c:	20029100 	.word	0x20029100

00028280 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   28280:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28282:	4806      	ldr	r0, [pc, #24]	; (2829c <z_data_copy+0x1c>)
   28284:	4a06      	ldr	r2, [pc, #24]	; (282a0 <z_data_copy+0x20>)
   28286:	4907      	ldr	r1, [pc, #28]	; (282a4 <z_data_copy+0x24>)
   28288:	1a12      	subs	r2, r2, r0
   2828a:	f00c fbc9 	bl	34a20 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2828e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28292:	4a05      	ldr	r2, [pc, #20]	; (282a8 <z_data_copy+0x28>)
   28294:	4905      	ldr	r1, [pc, #20]	; (282ac <z_data_copy+0x2c>)
   28296:	4806      	ldr	r0, [pc, #24]	; (282b0 <z_data_copy+0x30>)
   28298:	f00c bbc2 	b.w	34a20 <memcpy>
   2829c:	20020000 	.word	0x20020000
   282a0:	2002085c 	.word	0x2002085c
   282a4:	00039084 	.word	0x00039084
   282a8:	00000000 	.word	0x00000000
   282ac:	00039084 	.word	0x00039084
   282b0:	20020000 	.word	0x20020000

000282b4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   282b4:	2201      	movs	r2, #1
{
   282b6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   282b8:	4b08      	ldr	r3, [pc, #32]	; (282dc <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   282ba:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   282bc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   282be:	f7ff ff49 	bl	28154 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   282c2:	2003      	movs	r0, #3
   282c4:	f7ff ff46 	bl	28154 <z_sys_init_run_level>

	z_init_static_threads();
   282c8:	f002 fcd2 	bl	2ac70 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   282cc:	f7ec fa1c 	bl	14708 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   282d0:	4a03      	ldr	r2, [pc, #12]	; (282e0 <bg_thread_main+0x2c>)
   282d2:	7b13      	ldrb	r3, [r2, #12]
   282d4:	f023 0301 	bic.w	r3, r3, #1
   282d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   282da:	bd08      	pop	{r3, pc}
   282dc:	20028f86 	.word	0x20028f86
   282e0:	20022af8 	.word	0x20022af8

000282e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   282e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   282e8:	4b36      	ldr	r3, [pc, #216]	; (283c4 <z_cstart+0xe0>)
   282ea:	b0b5      	sub	sp, #212	; 0xd4
   282ec:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   282f0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   282f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   282f8:	2400      	movs	r4, #0
   282fa:	23e0      	movs	r3, #224	; 0xe0
   282fc:	4d32      	ldr	r5, [pc, #200]	; (283c8 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   282fe:	4e33      	ldr	r6, [pc, #204]	; (283cc <z_cstart+0xe8>)
   28300:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   28304:	77ec      	strb	r4, [r5, #31]
   28306:	762c      	strb	r4, [r5, #24]
   28308:	766c      	strb	r4, [r5, #25]
   2830a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2830c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2830e:	f04f 0b01 	mov.w	fp, #1
   28312:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   28316:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   28318:	f7f0 fe74 	bl	19004 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2831c:	f7f0 fcec 	bl	18cf8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   28320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28324:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   28326:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   28328:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   2832c:	4d28      	ldr	r5, [pc, #160]	; (283d0 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2832e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   28332:	ab06      	add	r3, sp, #24
   28334:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   28336:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   28338:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   2833c:	f7ff ff0a 	bl	28154 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   28340:	2001      	movs	r0, #1
   28342:	f7ff ff07 	bl	28154 <z_sys_init_run_level>
	z_sched_init();
   28346:	f002 f913 	bl	2a570 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2834a:	4b22      	ldr	r3, [pc, #136]	; (283d4 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   2834c:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2834e:	9305      	str	r3, [sp, #20]
   28350:	2307      	movs	r3, #7
   28352:	f8df a090 	ldr.w	sl, [pc, #144]	; 283e4 <z_cstart+0x100>
   28356:	f8df 8090 	ldr.w	r8, [pc, #144]	; 283e8 <z_cstart+0x104>
   2835a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2835e:	4641      	mov	r1, r8
   28360:	e9cd 3b03 	strd	r3, fp, [sp, #12]
   28364:	4630      	mov	r0, r6
   28366:	4653      	mov	r3, sl
   28368:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2836c:	9400      	str	r4, [sp, #0]
   2836e:	f002 fbd3 	bl	2ab18 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28372:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   28374:	4630      	mov	r0, r6
   28376:	f023 0304 	bic.w	r3, r3, #4
   2837a:	7373      	strb	r3, [r6, #13]
   2837c:	f001 fbb8 	bl	29af0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   28380:	230f      	movs	r3, #15
   28382:	4f15      	ldr	r7, [pc, #84]	; (283d8 <z_cstart+0xf4>)
   28384:	e9cd 4302 	strd	r4, r3, [sp, #8]
   28388:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2838c:	4b13      	ldr	r3, [pc, #76]	; (283dc <z_cstart+0xf8>)
   2838e:	4914      	ldr	r1, [pc, #80]	; (283e0 <z_cstart+0xfc>)
   28390:	4638      	mov	r0, r7
   28392:	e9cd b404 	strd	fp, r4, [sp, #16]
   28396:	e9cd 4400 	strd	r4, r4, [sp]
   2839a:	f002 fbbd 	bl	2ab18 <z_setup_new_thread>
   2839e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   283a0:	60ef      	str	r7, [r5, #12]
   283a2:	f023 0304 	bic.w	r3, r3, #4
   283a6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   283a8:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   283ac:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   283b0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   283b2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   283b6:	4653      	mov	r3, sl
   283b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   283bc:	4641      	mov	r1, r8
   283be:	4630      	mov	r0, r6
   283c0:	f7f0 fc72 	bl	18ca8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   283c4:	200348d0 	.word	0x200348d0
   283c8:	e000ed00 	.word	0xe000ed00
   283cc:	20022af8 	.word	0x20022af8
   283d0:	20027418 	.word	0x20027418
   283d4:	0003894a 	.word	0x0003894a
   283d8:	20022a40 	.word	0x20022a40
   283dc:	00028239 	.word	0x00028239
   283e0:	20034790 	.word	0x20034790
   283e4:	000282b5 	.word	0x000282b5
   283e8:	20032790 	.word	0x20032790

000283ec <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   283ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   283ee:	4d0f      	ldr	r5, [pc, #60]	; (2842c <statics_init+0x40>)
   283f0:	4c0f      	ldr	r4, [pc, #60]	; (28430 <statics_init+0x44>)
   283f2:	462f      	mov	r7, r5
   283f4:	4e0f      	ldr	r6, [pc, #60]	; (28434 <statics_init+0x48>)
   283f6:	42ac      	cmp	r4, r5
   283f8:	d90c      	bls.n	28414 <statics_init+0x28>
   283fa:	490f      	ldr	r1, [pc, #60]	; (28438 <statics_init+0x4c>)
   283fc:	2315      	movs	r3, #21
   283fe:	4632      	mov	r2, r6
   28400:	480e      	ldr	r0, [pc, #56]	; (2843c <statics_init+0x50>)
   28402:	f006 ff26 	bl	2f252 <printk>
   28406:	480e      	ldr	r0, [pc, #56]	; (28440 <statics_init+0x54>)
   28408:	f006 ff23 	bl	2f252 <printk>
   2840c:	2115      	movs	r1, #21
   2840e:	4630      	mov	r0, r6
   28410:	f007 fa20 	bl	2f854 <assert_post_action>
   28414:	42bc      	cmp	r4, r7
   28416:	d301      	bcc.n	2841c <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   28418:	2000      	movs	r0, #0
   2841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2841c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   28420:	4620      	mov	r0, r4
   28422:	f00c f895 	bl	34550 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   28426:	3418      	adds	r4, #24
   28428:	e7e5      	b.n	283f6 <statics_init+0xa>
   2842a:	bf00      	nop
   2842c:	20020654 	.word	0x20020654
   28430:	2002063c 	.word	0x2002063c
   28434:	00038977 	.word	0x00038977
   28438:	00038999 	.word	0x00038999
   2843c:	00036be5 	.word	0x00036be5
   28440:	00037104 	.word	0x00037104

00028444 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   28444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28448:	4606      	mov	r6, r0
   2844a:	b085      	sub	sp, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   2844c:	4610      	mov	r0, r2
{
   2844e:	468b      	mov	fp, r1
   28450:	4617      	mov	r7, r2
	s64_t now, end = z_timeout_end_calc(timeout);
   28452:	f00c fa19 	bl	34888 <z_timeout_end_calc>
   28456:	4680      	mov	r8, r0
   28458:	9003      	str	r0, [sp, #12]
   2845a:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2845c:	f106 0414 	add.w	r4, r6, #20
   28460:	f04f 0320 	mov.w	r3, #32
   28464:	f3ef 8511 	mrs	r5, BASEPRI
   28468:	f383 8811 	msr	BASEPRI, r3
   2846c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28470:	4620      	mov	r0, r4
   28472:	f002 fc87 	bl	2ad84 <z_spin_lock_valid>
   28476:	b968      	cbnz	r0, 28494 <k_heap_alloc+0x50>
   28478:	235c      	movs	r3, #92	; 0x5c
   2847a:	4a41      	ldr	r2, [pc, #260]	; (28580 <k_heap_alloc+0x13c>)
   2847c:	4941      	ldr	r1, [pc, #260]	; (28584 <k_heap_alloc+0x140>)
   2847e:	4842      	ldr	r0, [pc, #264]	; (28588 <k_heap_alloc+0x144>)
   28480:	f006 fee7 	bl	2f252 <printk>
   28484:	4621      	mov	r1, r4
   28486:	4841      	ldr	r0, [pc, #260]	; (2858c <k_heap_alloc+0x148>)
   28488:	f006 fee3 	bl	2f252 <printk>
   2848c:	215c      	movs	r1, #92	; 0x5c
   2848e:	483c      	ldr	r0, [pc, #240]	; (28580 <k_heap_alloc+0x13c>)
   28490:	f007 f9e0 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28494:	4620      	mov	r0, r4
   28496:	f002 fc93 	bl	2adc0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2849a:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2849e:	b16b      	cbz	r3, 284bc <k_heap_alloc+0x78>
   284a0:	b167      	cbz	r7, 284bc <k_heap_alloc+0x78>
   284a2:	493b      	ldr	r1, [pc, #236]	; (28590 <k_heap_alloc+0x14c>)
   284a4:	2323      	movs	r3, #35	; 0x23
   284a6:	4a3b      	ldr	r2, [pc, #236]	; (28594 <k_heap_alloc+0x150>)
   284a8:	4837      	ldr	r0, [pc, #220]	; (28588 <k_heap_alloc+0x144>)
   284aa:	f006 fed2 	bl	2f252 <printk>
   284ae:	483a      	ldr	r0, [pc, #232]	; (28598 <k_heap_alloc+0x154>)
   284b0:	f006 fecf 	bl	2f252 <printk>
   284b4:	2123      	movs	r1, #35	; 0x23
   284b6:	4837      	ldr	r0, [pc, #220]	; (28594 <k_heap_alloc+0x150>)
   284b8:	f007 f9cc 	bl	2f854 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   284bc:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 28580 <k_heap_alloc+0x13c>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   284c0:	4659      	mov	r1, fp
   284c2:	4630      	mov	r0, r6
   284c4:	f007 f8d0 	bl	2f668 <sys_heap_alloc>
   284c8:	4607      	mov	r7, r0

		now = z_tick_get();
   284ca:	f003 f869 	bl	2b5a0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   284ce:	b1cf      	cbz	r7, 28504 <k_heap_alloc+0xc0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284d0:	4620      	mov	r0, r4
   284d2:	f002 fc65 	bl	2ada0 <z_spin_unlock_valid>
   284d6:	b968      	cbnz	r0, 284f4 <k_heap_alloc+0xb0>
   284d8:	2384      	movs	r3, #132	; 0x84
   284da:	4a29      	ldr	r2, [pc, #164]	; (28580 <k_heap_alloc+0x13c>)
   284dc:	492f      	ldr	r1, [pc, #188]	; (2859c <k_heap_alloc+0x158>)
   284de:	482a      	ldr	r0, [pc, #168]	; (28588 <k_heap_alloc+0x144>)
   284e0:	f006 feb7 	bl	2f252 <printk>
   284e4:	4621      	mov	r1, r4
   284e6:	482e      	ldr	r0, [pc, #184]	; (285a0 <k_heap_alloc+0x15c>)
   284e8:	f006 feb3 	bl	2f252 <printk>
   284ec:	2184      	movs	r1, #132	; 0x84
   284ee:	4824      	ldr	r0, [pc, #144]	; (28580 <k_heap_alloc+0x13c>)
   284f0:	f007 f9b0 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   284f4:	f385 8811 	msr	BASEPRI, r5
   284f8:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   284fc:	4638      	mov	r0, r7
   284fe:	b005      	add	sp, #20
   28500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   28504:	9b03      	ldr	r3, [sp, #12]
   28506:	1a1b      	subs	r3, r3, r0
   28508:	9300      	str	r3, [sp, #0]
   2850a:	eb6a 0301 	sbc.w	r3, sl, r1
   2850e:	9301      	str	r3, [sp, #4]
   28510:	e9dd 2300 	ldrd	r2, r3, [sp]
   28514:	2a01      	cmp	r2, #1
   28516:	f173 0300 	sbcs.w	r3, r3, #0
   2851a:	dbd9      	blt.n	284d0 <k_heap_alloc+0x8c>
			return (u32_t)((t * to_hz + off) / from_hz);
   2851c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28520:	f647 71ff 	movw	r1, #32767	; 0x7fff
   28524:	2200      	movs	r2, #0
				   K_TICKS(end - now));
   28526:	eba8 0000 	sub.w	r0, r8, r0
   2852a:	fbe3 1200 	umlal	r1, r2, r3, r0
   2852e:	4608      	mov	r0, r1
   28530:	4611      	mov	r1, r2
   28532:	0bc2      	lsrs	r2, r0, #15
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28534:	ea42 4341 	orr.w	r3, r2, r1, lsl #17
   28538:	4620      	mov	r0, r4
   2853a:	f106 020c 	add.w	r2, r6, #12
   2853e:	4629      	mov	r1, r5
   28540:	f001 fec8 	bl	2a2d4 <z_pend_curr>
	__asm__ volatile(
   28544:	f04f 0320 	mov.w	r3, #32
   28548:	f3ef 8511 	mrs	r5, BASEPRI
   2854c:	f383 8811 	msr	BASEPRI, r3
   28550:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28554:	4620      	mov	r0, r4
   28556:	f002 fc15 	bl	2ad84 <z_spin_lock_valid>
   2855a:	b968      	cbnz	r0, 28578 <k_heap_alloc+0x134>
   2855c:	235c      	movs	r3, #92	; 0x5c
   2855e:	464a      	mov	r2, r9
   28560:	4908      	ldr	r1, [pc, #32]	; (28584 <k_heap_alloc+0x140>)
   28562:	4809      	ldr	r0, [pc, #36]	; (28588 <k_heap_alloc+0x144>)
   28564:	f006 fe75 	bl	2f252 <printk>
   28568:	4621      	mov	r1, r4
   2856a:	4808      	ldr	r0, [pc, #32]	; (2858c <k_heap_alloc+0x148>)
   2856c:	f006 fe71 	bl	2f252 <printk>
   28570:	215c      	movs	r1, #92	; 0x5c
   28572:	4648      	mov	r0, r9
   28574:	f007 f96e 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28578:	4620      	mov	r0, r4
   2857a:	f002 fc21 	bl	2adc0 <z_spin_lock_set_owner>
	return k;
   2857e:	e79f      	b.n	284c0 <k_heap_alloc+0x7c>
   28580:	00036fbb 	.word	0x00036fbb
   28584:	00036fe1 	.word	0x00036fe1
   28588:	00036be5 	.word	0x00036be5
   2858c:	00036ff6 	.word	0x00036ff6
   28590:	0003894f 	.word	0x0003894f
   28594:	00038977 	.word	0x00038977
   28598:	00037086 	.word	0x00037086
   2859c:	0003700e 	.word	0x0003700e
   285a0:	00037025 	.word	0x00037025

000285a4 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   285a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   285a6:	4605      	mov	r5, r0
   285a8:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   285aa:	f100 0414 	add.w	r4, r0, #20
   285ae:	f04f 0320 	mov.w	r3, #32
   285b2:	f3ef 8611 	mrs	r6, BASEPRI
   285b6:	f383 8811 	msr	BASEPRI, r3
   285ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   285be:	4620      	mov	r0, r4
   285c0:	f002 fbe0 	bl	2ad84 <z_spin_lock_valid>
   285c4:	b968      	cbnz	r0, 285e2 <k_heap_free+0x3e>
   285c6:	235c      	movs	r3, #92	; 0x5c
   285c8:	4a1a      	ldr	r2, [pc, #104]	; (28634 <k_heap_free+0x90>)
   285ca:	491b      	ldr	r1, [pc, #108]	; (28638 <k_heap_free+0x94>)
   285cc:	481b      	ldr	r0, [pc, #108]	; (2863c <k_heap_free+0x98>)
   285ce:	f006 fe40 	bl	2f252 <printk>
   285d2:	4621      	mov	r1, r4
   285d4:	481a      	ldr	r0, [pc, #104]	; (28640 <k_heap_free+0x9c>)
   285d6:	f006 fe3c 	bl	2f252 <printk>
   285da:	215c      	movs	r1, #92	; 0x5c
   285dc:	4815      	ldr	r0, [pc, #84]	; (28634 <k_heap_free+0x90>)
   285de:	f007 f939 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   285e2:	4620      	mov	r0, r4
   285e4:	f002 fbec 	bl	2adc0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   285e8:	4628      	mov	r0, r5
   285ea:	4639      	mov	r1, r7
   285ec:	f006 ff8a 	bl	2f504 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   285f0:	f105 000c 	add.w	r0, r5, #12
   285f4:	f00c f8ab 	bl	3474e <z_unpend_all>
   285f8:	b128      	cbz	r0, 28606 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   285fa:	4631      	mov	r1, r6
   285fc:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   285fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   28602:	f001 b853 	b.w	296ac <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28606:	4620      	mov	r0, r4
   28608:	f002 fbca 	bl	2ada0 <z_spin_unlock_valid>
   2860c:	b968      	cbnz	r0, 2862a <k_heap_free+0x86>
   2860e:	2384      	movs	r3, #132	; 0x84
   28610:	4a08      	ldr	r2, [pc, #32]	; (28634 <k_heap_free+0x90>)
   28612:	490c      	ldr	r1, [pc, #48]	; (28644 <k_heap_free+0xa0>)
   28614:	4809      	ldr	r0, [pc, #36]	; (2863c <k_heap_free+0x98>)
   28616:	f006 fe1c 	bl	2f252 <printk>
   2861a:	4621      	mov	r1, r4
   2861c:	480a      	ldr	r0, [pc, #40]	; (28648 <k_heap_free+0xa4>)
   2861e:	f006 fe18 	bl	2f252 <printk>
   28622:	2184      	movs	r1, #132	; 0x84
   28624:	4803      	ldr	r0, [pc, #12]	; (28634 <k_heap_free+0x90>)
   28626:	f007 f915 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2862a:	f386 8811 	msr	BASEPRI, r6
   2862e:	f3bf 8f6f 	isb	sy
}
   28632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28634:	00036fbb 	.word	0x00036fbb
   28638:	00036fe1 	.word	0x00036fe1
   2863c:	00036be5 	.word	0x00036be5
   28640:	00036ff6 	.word	0x00036ff6
   28644:	0003700e 	.word	0x0003700e
   28648:	00037025 	.word	0x00037025

0002864c <mbox_message_put>:
	struct k_thread *receiving_thread;
	struct k_mbox_msg *rx_msg;
	k_spinlock_key_t key;

	/* save sender id so it can be used during message matching */
	tx_msg->rx_source_thread = _current;
   2864c:	4b4d      	ldr	r3, [pc, #308]	; (28784 <mbox_message_put+0x138>)
{
   2864e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tx_msg->rx_source_thread = _current;
   28652:	689b      	ldr	r3, [r3, #8]

	/* finish readying sending thread (actual or dummy) for send */
	sending_thread = tx_msg->_syncing_thread;
   28654:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
	tx_msg->rx_source_thread = _current;
   28658:	61cb      	str	r3, [r1, #28]
{
   2865a:	4680      	mov	r8, r0
   2865c:	468a      	mov	sl, r1
   2865e:	4693      	mov	fp, r2
	sending_thread->base.swap_data = tx_msg;
   28660:	f8c9 1014 	str.w	r1, [r9, #20]

	/* search mailbox's rx queue for a compatible receiver */
	key = k_spin_lock(&mbox->lock);
   28664:	f100 0410 	add.w	r4, r0, #16
	__asm__ volatile(
   28668:	f04f 0320 	mov.w	r3, #32
   2866c:	f3ef 8711 	mrs	r7, BASEPRI
   28670:	f383 8811 	msr	BASEPRI, r3
   28674:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28678:	4620      	mov	r0, r4
   2867a:	f002 fb83 	bl	2ad84 <z_spin_lock_valid>
   2867e:	b968      	cbnz	r0, 2869c <mbox_message_put+0x50>
   28680:	235c      	movs	r3, #92	; 0x5c
   28682:	4a41      	ldr	r2, [pc, #260]	; (28788 <mbox_message_put+0x13c>)
   28684:	4941      	ldr	r1, [pc, #260]	; (2878c <mbox_message_put+0x140>)
   28686:	4842      	ldr	r0, [pc, #264]	; (28790 <mbox_message_put+0x144>)
   28688:	f006 fde3 	bl	2f252 <printk>
   2868c:	4621      	mov	r1, r4
   2868e:	4841      	ldr	r0, [pc, #260]	; (28794 <mbox_message_put+0x148>)
   28690:	f006 fddf 	bl	2f252 <printk>
   28694:	215c      	movs	r1, #92	; 0x5c
   28696:	483c      	ldr	r0, [pc, #240]	; (28788 <mbox_message_put+0x13c>)
   28698:	f007 f8dc 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2869c:	4620      	mov	r0, r4
   2869e:	f002 fb8f 	bl	2adc0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   286a2:	4643      	mov	r3, r8
   286a4:	f853 5f08 	ldr.w	r5, [r3, #8]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286a8:	429d      	cmp	r5, r3
   286aa:	d129      	bne.n	28700 <mbox_message_put+0xb4>

		}
	}

	/* didn't find a matching receiver: don't wait for one */
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   286ac:	f1bb 0f00 	cmp.w	fp, #0
   286b0:	d143      	bne.n	2873a <mbox_message_put+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   286b2:	4620      	mov	r0, r4
   286b4:	f002 fb74 	bl	2ada0 <z_spin_unlock_valid>
   286b8:	b968      	cbnz	r0, 286d6 <mbox_message_put+0x8a>
   286ba:	2384      	movs	r3, #132	; 0x84
   286bc:	4a32      	ldr	r2, [pc, #200]	; (28788 <mbox_message_put+0x13c>)
   286be:	4936      	ldr	r1, [pc, #216]	; (28798 <mbox_message_put+0x14c>)
   286c0:	4833      	ldr	r0, [pc, #204]	; (28790 <mbox_message_put+0x144>)
   286c2:	f006 fdc6 	bl	2f252 <printk>
   286c6:	4621      	mov	r1, r4
   286c8:	4834      	ldr	r0, [pc, #208]	; (2879c <mbox_message_put+0x150>)
   286ca:	f006 fdc2 	bl	2f252 <printk>
   286ce:	2184      	movs	r1, #132	; 0x84
   286d0:	482d      	ldr	r0, [pc, #180]	; (28788 <mbox_message_put+0x13c>)
   286d2:	f007 f8bf 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   286d6:	f387 8811 	msr	BASEPRI, r7
   286da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   286de:	f06f 0622 	mvn.w	r6, #34	; 0x22
   286e2:	e026      	b.n	28732 <mbox_message_put+0xe6>
			return z_pend_curr(&mbox->lock, key, NULL, K_FOREVER);
   286e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		return 0;
	}
#endif

	/* synchronous send: sender waits on tx queue for receiver or timeout */
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   286e8:	4639      	mov	r1, r7
   286ea:	4620      	mov	r0, r4
}
   286ec:	b001      	add	sp, #4
   286ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   286f2:	f001 bdef 	b.w	2a2d4 <z_pend_curr>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   286f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   286fa:	429d      	cmp	r5, r3
   286fc:	d0d6      	beq.n	286ac <mbox_message_put+0x60>
   286fe:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->rx_msg_queue, receiving_thread) {
   28700:	2d00      	cmp	r5, #0
   28702:	d0d3      	beq.n	286ac <mbox_message_put+0x60>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   28704:	6969      	ldr	r1, [r5, #20]
   28706:	4650      	mov	r0, sl
   28708:	f00b ff45 	bl	34596 <mbox_message_match>
   2870c:	4606      	mov	r6, r0
   2870e:	2800      	cmp	r0, #0
   28710:	d1f1      	bne.n	286f6 <mbox_message_put+0xaa>
			z_unpend_thread(receiving_thread);
   28712:	4628      	mov	r0, r5
   28714:	f001 f8ac 	bl	29870 <z_unpend_thread>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28718:	672e      	str	r6, [r5, #112]	; 0x70
			z_ready_thread(receiving_thread);
   2871a:	4628      	mov	r0, r5
   2871c:	f001 f9e8 	bl	29af0 <z_ready_thread>
			if ((sending_thread->base.thread_state & _THREAD_DUMMY)
   28720:	f899 200d 	ldrb.w	r2, [r9, #13]
   28724:	f012 0201 	ands.w	r2, r2, #1
   28728:	d0dc      	beq.n	286e4 <mbox_message_put+0x98>
				z_reschedule(&mbox->lock, key);
   2872a:	4639      	mov	r1, r7
   2872c:	4620      	mov	r0, r4
   2872e:	f000 ffbd 	bl	296ac <z_reschedule>
}
   28732:	4630      	mov	r0, r6
   28734:	b001      	add	sp, #4
   28736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   2873a:	f899 300d 	ldrb.w	r3, [r9, #13]
   2873e:	07db      	lsls	r3, r3, #31
   28740:	d51d      	bpl.n	2877e <mbox_message_put+0x132>
		z_pend_thread(sending_thread, &mbox->tx_msg_queue, K_FOREVER);
   28742:	4648      	mov	r0, r9
   28744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28748:	4641      	mov	r1, r8
   2874a:	f001 fd9d 	bl	2a288 <z_pend_thread>
   2874e:	4620      	mov	r0, r4
   28750:	f002 fb26 	bl	2ada0 <z_spin_unlock_valid>
   28754:	b968      	cbnz	r0, 28772 <mbox_message_put+0x126>
   28756:	2384      	movs	r3, #132	; 0x84
   28758:	4a0b      	ldr	r2, [pc, #44]	; (28788 <mbox_message_put+0x13c>)
   2875a:	490f      	ldr	r1, [pc, #60]	; (28798 <mbox_message_put+0x14c>)
   2875c:	480c      	ldr	r0, [pc, #48]	; (28790 <mbox_message_put+0x144>)
   2875e:	f006 fd78 	bl	2f252 <printk>
   28762:	4621      	mov	r1, r4
   28764:	480d      	ldr	r0, [pc, #52]	; (2879c <mbox_message_put+0x150>)
   28766:	f006 fd74 	bl	2f252 <printk>
   2876a:	2184      	movs	r1, #132	; 0x84
   2876c:	4806      	ldr	r0, [pc, #24]	; (28788 <mbox_message_put+0x13c>)
   2876e:	f007 f871 	bl	2f854 <assert_post_action>
   28772:	f387 8811 	msr	BASEPRI, r7
   28776:	f3bf 8f6f 	isb	sy
		return 0;
   2877a:	2600      	movs	r6, #0
   2877c:	e7d9      	b.n	28732 <mbox_message_put+0xe6>
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   2877e:	465b      	mov	r3, fp
   28780:	4642      	mov	r2, r8
   28782:	e7b1      	b.n	286e8 <mbox_message_put+0x9c>
   28784:	20027418 	.word	0x20027418
   28788:	00036fbb 	.word	0x00036fbb
   2878c:	00036fe1 	.word	0x00036fe1
   28790:	00036be5 	.word	0x00036be5
   28794:	00036ff6 	.word	0x00036ff6
   28798:	0003700e 	.word	0x0003700e
   2879c:	00037025 	.word	0x00037025

000287a0 <mbox_message_dispose>:
	if (rx_msg->_syncing_thread == NULL) {
   287a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   287a2:	b510      	push	{r4, lr}
   287a4:	4604      	mov	r4, r0
	if (rx_msg->_syncing_thread == NULL) {
   287a6:	b36b      	cbz	r3, 28804 <mbox_message_dispose+0x64>
	if (rx_msg->tx_block.data != NULL) {
   287a8:	6943      	ldr	r3, [r0, #20]
   287aa:	b123      	cbz	r3, 287b6 <mbox_message_dispose+0x16>
		k_mem_pool_free(&rx_msg->tx_block);
   287ac:	3014      	adds	r0, #20
   287ae:	f00b ff3e 	bl	3462e <k_mem_pool_free>
		rx_msg->tx_block.data = NULL;
   287b2:	2300      	movs	r3, #0
   287b4:	6163      	str	r3, [r4, #20]
	rx_msg->_syncing_thread = NULL;
   287b6:	2300      	movs	r3, #0
	sending_thread = rx_msg->_syncing_thread;
   287b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
	rx_msg->_syncing_thread = NULL;
   287ba:	6263      	str	r3, [r4, #36]	; 0x24
	tx_msg = (struct k_mbox_msg *)sending_thread->base.swap_data;
   287bc:	694a      	ldr	r2, [r1, #20]
	tx_msg->size = rx_msg->size;
   287be:	6863      	ldr	r3, [r4, #4]
   287c0:	6053      	str	r3, [r2, #4]
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   287c2:	7b4b      	ldrb	r3, [r1, #13]
   287c4:	f013 0001 	ands.w	r0, r3, #1
   287c8:	d009      	beq.n	287de <mbox_message_dispose+0x3e>
		struct k_sem *async_sem = tx_msg->_async_sem;
   287ca:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return z_impl_k_stack_push(stack, data);
   287cc:	480e      	ldr	r0, [pc, #56]	; (28808 <mbox_message_dispose+0x68>)
   287ce:	f002 f927 	bl	2aa20 <z_impl_k_stack_push>
		if (async_sem != NULL) {
   287d2:	b1bc      	cbz	r4, 28804 <mbox_message_dispose+0x64>
	z_impl_k_sem_give(sem);
   287d4:	4620      	mov	r0, r4
}
   287d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   287da:	f002 b859 	b.w	2a890 <z_impl_k_sem_give>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   287de:	f023 0302 	bic.w	r3, r3, #2
   287e2:	6708      	str	r0, [r1, #112]	; 0x70
   287e4:	734b      	strb	r3, [r1, #13]
	z_ready_thread(sending_thread);
   287e6:	4608      	mov	r0, r1
   287e8:	f001 f982 	bl	29af0 <z_ready_thread>
	__asm__ volatile(
   287ec:	f04f 0320 	mov.w	r3, #32
   287f0:	f3ef 8011 	mrs	r0, BASEPRI
   287f4:	f383 8811 	msr	BASEPRI, r3
   287f8:	f3bf 8f6f 	isb	sy
}
   287fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   28800:	f00b bf89 	b.w	34716 <z_reschedule_irqlock>
   28804:	bd10      	pop	{r4, pc}
   28806:	bf00      	nop
   28808:	200206ec 	.word	0x200206ec

0002880c <init_mbox_module>:
{
   2880c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   2880e:	2500      	movs	r5, #0
   28810:	4c09      	ldr	r4, [pc, #36]	; (28838 <init_mbox_module+0x2c>)
	return z_impl_k_stack_push(stack, data);
   28812:	4e0a      	ldr	r6, [pc, #40]	; (2883c <init_mbox_module+0x30>)
		z_init_thread_base(&async_msg[i].thread, 0, _THREAD_DUMMY, 0);
   28814:	2300      	movs	r3, #0
   28816:	2201      	movs	r2, #1
   28818:	4619      	mov	r1, r3
   2881a:	4620      	mov	r0, r4
   2881c:	f00b ffc2 	bl	347a4 <z_init_thread_base>
   28820:	4621      	mov	r1, r4
   28822:	4630      	mov	r0, r6
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   28824:	3501      	adds	r5, #1
   28826:	f002 f8fb 	bl	2aa20 <z_impl_k_stack_push>
   2882a:	2d0a      	cmp	r5, #10
   2882c:	f104 045c 	add.w	r4, r4, #92	; 0x5c
   28830:	d1f0      	bne.n	28814 <init_mbox_module+0x8>
}
   28832:	2000      	movs	r0, #0
   28834:	bd70      	pop	{r4, r5, r6, pc}
   28836:	bf00      	nop
   28838:	200373d0 	.word	0x200373d0
   2883c:	200206ec 	.word	0x200206ec

00028840 <k_mbox_put>:

int k_mbox_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
	       k_timeout_t timeout)
{
	/* configure things for a synchronous send, then send the message */
	tx_msg->_syncing_thread = _current;
   28840:	4b02      	ldr	r3, [pc, #8]	; (2884c <k_mbox_put+0xc>)
   28842:	689b      	ldr	r3, [r3, #8]
   28844:	624b      	str	r3, [r1, #36]	; 0x24

	return mbox_message_put(mbox, tx_msg, timeout);
   28846:	f7ff bf01 	b.w	2864c <mbox_message_put>
   2884a:	bf00      	nop
   2884c:	20027418 	.word	0x20027418

00028850 <k_mbox_get>:
	return 0;
}

int k_mbox_get(struct k_mbox *mbox, struct k_mbox_msg *rx_msg, void *buffer,
	       k_timeout_t timeout)
{
   28850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct k_mbox_msg *tx_msg;
	k_spinlock_key_t key;
	int result;

	/* save receiver id so it can be used during message matching */
	rx_msg->tx_target_thread = _current;
   28854:	4d43      	ldr	r5, [pc, #268]	; (28964 <k_mbox_get+0x114>)
{
   28856:	469a      	mov	sl, r3
	rx_msg->tx_target_thread = _current;
   28858:	68ab      	ldr	r3, [r5, #8]
{
   2885a:	4607      	mov	r7, r0
   2885c:	460e      	mov	r6, r1
   2885e:	4690      	mov	r8, r2
	rx_msg->tx_target_thread = _current;
   28860:	620b      	str	r3, [r1, #32]

	/* search mailbox's tx queue for a compatible sender */
	key = k_spin_lock(&mbox->lock);
   28862:	f100 0410 	add.w	r4, r0, #16
   28866:	f04f 0320 	mov.w	r3, #32
   2886a:	f3ef 8911 	mrs	r9, BASEPRI
   2886e:	f383 8811 	msr	BASEPRI, r3
   28872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28876:	4620      	mov	r0, r4
   28878:	f002 fa84 	bl	2ad84 <z_spin_lock_valid>
   2887c:	46ab      	mov	fp, r5
   2887e:	b968      	cbnz	r0, 2889c <k_mbox_get+0x4c>
   28880:	235c      	movs	r3, #92	; 0x5c
   28882:	4a39      	ldr	r2, [pc, #228]	; (28968 <k_mbox_get+0x118>)
   28884:	4939      	ldr	r1, [pc, #228]	; (2896c <k_mbox_get+0x11c>)
   28886:	483a      	ldr	r0, [pc, #232]	; (28970 <k_mbox_get+0x120>)
   28888:	f006 fce3 	bl	2f252 <printk>
   2888c:	4621      	mov	r1, r4
   2888e:	4839      	ldr	r0, [pc, #228]	; (28974 <k_mbox_get+0x124>)
   28890:	f006 fcdf 	bl	2f252 <printk>
   28894:	215c      	movs	r1, #92	; 0x5c
   28896:	4834      	ldr	r0, [pc, #208]	; (28968 <k_mbox_get+0x118>)
   28898:	f006 ffdc 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2889c:	4620      	mov	r0, r4
   2889e:	f002 fa8f 	bl	2adc0 <z_spin_lock_set_owner>
	return list->head == list;
   288a2:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288a4:	42af      	cmp	r7, r5
   288a6:	d125      	bne.n	288f4 <k_mbox_get+0xa4>
		}
	}

	/* didn't find a matching sender */

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   288a8:	f1ba 0f00 	cmp.w	sl, #0
   288ac:	d14d      	bne.n	2894a <k_mbox_get+0xfa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   288ae:	4620      	mov	r0, r4
   288b0:	f002 fa76 	bl	2ada0 <z_spin_unlock_valid>
   288b4:	b968      	cbnz	r0, 288d2 <k_mbox_get+0x82>
   288b6:	2384      	movs	r3, #132	; 0x84
   288b8:	4a2b      	ldr	r2, [pc, #172]	; (28968 <k_mbox_get+0x118>)
   288ba:	492f      	ldr	r1, [pc, #188]	; (28978 <k_mbox_get+0x128>)
   288bc:	482c      	ldr	r0, [pc, #176]	; (28970 <k_mbox_get+0x120>)
   288be:	f006 fcc8 	bl	2f252 <printk>
   288c2:	4621      	mov	r1, r4
   288c4:	482d      	ldr	r0, [pc, #180]	; (2897c <k_mbox_get+0x12c>)
   288c6:	f006 fcc4 	bl	2f252 <printk>
   288ca:	2184      	movs	r1, #132	; 0x84
   288cc:	4826      	ldr	r0, [pc, #152]	; (28968 <k_mbox_get+0x118>)
   288ce:	f006 ffc1 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   288d2:	f389 8811 	msr	BASEPRI, r9
   288d6:	f3bf 8f6f 	isb	sy
		/* don't wait for a matching sender to appear */
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   288da:	f06f 0022 	mvn.w	r0, #34	; 0x22
   288de:	e032      	b.n	28946 <k_mbox_get+0xf6>
	} else if (rx_msg->size == 0) {
   288e0:	6873      	ldr	r3, [r6, #4]
   288e2:	bb7b      	cbnz	r3, 28944 <k_mbox_get+0xf4>
		mbox_message_dispose(rx_msg);
   288e4:	4630      	mov	r0, r6
   288e6:	f7ff ff5b 	bl	287a0 <mbox_message_dispose>
   288ea:	e02b      	b.n	28944 <k_mbox_get+0xf4>
	return (node == list->tail) ? NULL : node->next;
   288ec:	687b      	ldr	r3, [r7, #4]
   288ee:	429d      	cmp	r5, r3
   288f0:	d0da      	beq.n	288a8 <k_mbox_get+0x58>
   288f2:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->tx_msg_queue, sending_thread) {
   288f4:	2d00      	cmp	r5, #0
   288f6:	d0d7      	beq.n	288a8 <k_mbox_get+0x58>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   288f8:	4631      	mov	r1, r6
   288fa:	6968      	ldr	r0, [r5, #20]
   288fc:	f00b fe4b 	bl	34596 <mbox_message_match>
   28900:	2800      	cmp	r0, #0
   28902:	d1f3      	bne.n	288ec <k_mbox_get+0x9c>
			z_unpend_thread(sending_thread);
   28904:	4628      	mov	r0, r5
   28906:	f000 ffb3 	bl	29870 <z_unpend_thread>
   2890a:	4620      	mov	r0, r4
   2890c:	f002 fa48 	bl	2ada0 <z_spin_unlock_valid>
   28910:	b968      	cbnz	r0, 2892e <k_mbox_get+0xde>
   28912:	2384      	movs	r3, #132	; 0x84
   28914:	4a14      	ldr	r2, [pc, #80]	; (28968 <k_mbox_get+0x118>)
   28916:	4918      	ldr	r1, [pc, #96]	; (28978 <k_mbox_get+0x128>)
   28918:	4815      	ldr	r0, [pc, #84]	; (28970 <k_mbox_get+0x120>)
   2891a:	f006 fc9a 	bl	2f252 <printk>
   2891e:	4621      	mov	r1, r4
   28920:	4816      	ldr	r0, [pc, #88]	; (2897c <k_mbox_get+0x12c>)
   28922:	f006 fc96 	bl	2f252 <printk>
   28926:	2184      	movs	r1, #132	; 0x84
   28928:	480f      	ldr	r0, [pc, #60]	; (28968 <k_mbox_get+0x118>)
   2892a:	f006 ff93 	bl	2f854 <assert_post_action>
   2892e:	f389 8811 	msr	BASEPRI, r9
   28932:	f3bf 8f6f 	isb	sy
	if (buffer != NULL) {
   28936:	f1b8 0f00 	cmp.w	r8, #0
   2893a:	d0d1      	beq.n	288e0 <k_mbox_get+0x90>
		k_mbox_data_get(rx_msg, buffer);
   2893c:	4641      	mov	r1, r8
   2893e:	4630      	mov	r0, r6
   28940:	f00b fe63 	bl	3460a <k_mbox_data_get>
			return mbox_message_data_check(rx_msg, buffer);
   28944:	2000      	movs	r0, #0
	if (result == 0) {
		result = mbox_message_data_check(rx_msg, buffer);
	}

	return result;
}
   28946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_current->base.swap_data = rx_msg;
   2894a:	f8db 3008 	ldr.w	r3, [fp, #8]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   2894e:	f107 0208 	add.w	r2, r7, #8
	_current->base.swap_data = rx_msg;
   28952:	615e      	str	r6, [r3, #20]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   28954:	4649      	mov	r1, r9
   28956:	4653      	mov	r3, sl
   28958:	4620      	mov	r0, r4
   2895a:	f001 fcbb 	bl	2a2d4 <z_pend_curr>
	if (result == 0) {
   2895e:	2800      	cmp	r0, #0
   28960:	d1f1      	bne.n	28946 <k_mbox_get+0xf6>
   28962:	e7e8      	b.n	28936 <k_mbox_get+0xe6>
   28964:	20027418 	.word	0x20027418
   28968:	00036fbb 	.word	0x00036fbb
   2896c:	00036fe1 	.word	0x00036fe1
   28970:	00036be5 	.word	0x00036be5
   28974:	00036ff6 	.word	0x00036ff6
   28978:	0003700e 	.word	0x0003700e
   2897c:	00037025 	.word	0x00037025

00028980 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   28980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   28984:	4d16      	ldr	r5, [pc, #88]	; (289e0 <init_mem_slab_module+0x60>)
   28986:	4c17      	ldr	r4, [pc, #92]	; (289e4 <init_mem_slab_module+0x64>)
   28988:	46a8      	mov	r8, r5
   2898a:	4e17      	ldr	r6, [pc, #92]	; (289e8 <init_mem_slab_module+0x68>)
   2898c:	42ac      	cmp	r4, r5
   2898e:	d90c      	bls.n	289aa <init_mem_slab_module+0x2a>
   28990:	4916      	ldr	r1, [pc, #88]	; (289ec <init_mem_slab_module+0x6c>)
   28992:	2342      	movs	r3, #66	; 0x42
   28994:	4632      	mov	r2, r6
   28996:	4816      	ldr	r0, [pc, #88]	; (289f0 <init_mem_slab_module+0x70>)
   28998:	f006 fc5b 	bl	2f252 <printk>
   2899c:	4815      	ldr	r0, [pc, #84]	; (289f4 <init_mem_slab_module+0x74>)
   2899e:	f006 fc58 	bl	2f252 <printk>
   289a2:	2142      	movs	r1, #66	; 0x42
   289a4:	4630      	mov	r0, r6
   289a6:	f006 ff55 	bl	2f854 <assert_post_action>
   289aa:	4544      	cmp	r4, r8
   289ac:	d302      	bcc.n	289b4 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   289ae:	2000      	movs	r0, #0
	return rc;
}
   289b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   289b4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   289b8:	ea42 0301 	orr.w	r3, r2, r1
   289bc:	f013 0303 	ands.w	r3, r3, #3
   289c0:	d10b      	bne.n	289da <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   289c2:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   289c4:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   289c6:	4283      	cmp	r3, r0
   289c8:	d101      	bne.n	289ce <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   289ca:	341c      	adds	r4, #28
   289cc:	e7de      	b.n	2898c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   289ce:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   289d0:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   289d2:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   289d4:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   289d6:	440a      	add	r2, r1
   289d8:	e7f5      	b.n	289c6 <init_mem_slab_module+0x46>
		return -EINVAL;
   289da:	f06f 0015 	mvn.w	r0, #21
	return rc;
   289de:	e7e7      	b.n	289b0 <init_mem_slab_module+0x30>
   289e0:	2002063c 	.word	0x2002063c
   289e4:	200205e8 	.word	0x200205e8
   289e8:	000389af 	.word	0x000389af
   289ec:	000389d4 	.word	0x000389d4
   289f0:	00036be5 	.word	0x00036be5
   289f4:	00037104 	.word	0x00037104

000289f8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   289f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289fa:	4604      	mov	r4, r0
   289fc:	460d      	mov	r5, r1
   289fe:	4616      	mov	r6, r2
	__asm__ volatile(
   28a00:	f04f 0320 	mov.w	r3, #32
   28a04:	f3ef 8711 	mrs	r7, BASEPRI
   28a08:	f383 8811 	msr	BASEPRI, r3
   28a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a10:	4823      	ldr	r0, [pc, #140]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a12:	f002 f9b7 	bl	2ad84 <z_spin_lock_valid>
   28a16:	b968      	cbnz	r0, 28a34 <k_mem_slab_alloc+0x3c>
   28a18:	235c      	movs	r3, #92	; 0x5c
   28a1a:	4a22      	ldr	r2, [pc, #136]	; (28aa4 <k_mem_slab_alloc+0xac>)
   28a1c:	4922      	ldr	r1, [pc, #136]	; (28aa8 <k_mem_slab_alloc+0xb0>)
   28a1e:	4823      	ldr	r0, [pc, #140]	; (28aac <k_mem_slab_alloc+0xb4>)
   28a20:	f006 fc17 	bl	2f252 <printk>
   28a24:	491e      	ldr	r1, [pc, #120]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a26:	4822      	ldr	r0, [pc, #136]	; (28ab0 <k_mem_slab_alloc+0xb8>)
   28a28:	f006 fc13 	bl	2f252 <printk>
   28a2c:	215c      	movs	r1, #92	; 0x5c
   28a2e:	481d      	ldr	r0, [pc, #116]	; (28aa4 <k_mem_slab_alloc+0xac>)
   28a30:	f006 ff10 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28a34:	481a      	ldr	r0, [pc, #104]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a36:	f002 f9c3 	bl	2adc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   28a3a:	6963      	ldr	r3, [r4, #20]
   28a3c:	b1eb      	cbz	r3, 28a7a <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   28a3e:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   28a40:	681b      	ldr	r3, [r3, #0]
   28a42:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   28a44:	69a3      	ldr	r3, [r4, #24]
   28a46:	3301      	adds	r3, #1
   28a48:	61a3      	str	r3, [r4, #24]
		result = 0;
   28a4a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28a4c:	4814      	ldr	r0, [pc, #80]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a4e:	f002 f9a7 	bl	2ada0 <z_spin_unlock_valid>
   28a52:	b968      	cbnz	r0, 28a70 <k_mem_slab_alloc+0x78>
   28a54:	2384      	movs	r3, #132	; 0x84
   28a56:	4a13      	ldr	r2, [pc, #76]	; (28aa4 <k_mem_slab_alloc+0xac>)
   28a58:	4916      	ldr	r1, [pc, #88]	; (28ab4 <k_mem_slab_alloc+0xbc>)
   28a5a:	4814      	ldr	r0, [pc, #80]	; (28aac <k_mem_slab_alloc+0xb4>)
   28a5c:	f006 fbf9 	bl	2f252 <printk>
   28a60:	490f      	ldr	r1, [pc, #60]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a62:	4815      	ldr	r0, [pc, #84]	; (28ab8 <k_mem_slab_alloc+0xc0>)
   28a64:	f006 fbf5 	bl	2f252 <printk>
   28a68:	2184      	movs	r1, #132	; 0x84
   28a6a:	480e      	ldr	r0, [pc, #56]	; (28aa4 <k_mem_slab_alloc+0xac>)
   28a6c:	f006 fef2 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28a70:	f387 8811 	msr	BASEPRI, r7
   28a74:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   28a78:	e010      	b.n	28a9c <k_mem_slab_alloc+0xa4>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28a7a:	b91e      	cbnz	r6, 28a84 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   28a7c:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   28a7e:	f06f 040b 	mvn.w	r4, #11
   28a82:	e7e3      	b.n	28a4c <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   28a84:	4622      	mov	r2, r4
   28a86:	4633      	mov	r3, r6
   28a88:	4639      	mov	r1, r7
   28a8a:	4805      	ldr	r0, [pc, #20]	; (28aa0 <k_mem_slab_alloc+0xa8>)
   28a8c:	f001 fc22 	bl	2a2d4 <z_pend_curr>
		if (result == 0) {
   28a90:	4604      	mov	r4, r0
   28a92:	b918      	cbnz	r0, 28a9c <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   28a94:	4b09      	ldr	r3, [pc, #36]	; (28abc <k_mem_slab_alloc+0xc4>)
   28a96:	689b      	ldr	r3, [r3, #8]
   28a98:	695b      	ldr	r3, [r3, #20]
   28a9a:	602b      	str	r3, [r5, #0]
}
   28a9c:	4620      	mov	r0, r4
   28a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28aa0:	20022bb0 	.word	0x20022bb0
   28aa4:	00036fbb 	.word	0x00036fbb
   28aa8:	00036fe1 	.word	0x00036fe1
   28aac:	00036be5 	.word	0x00036be5
   28ab0:	00036ff6 	.word	0x00036ff6
   28ab4:	0003700e 	.word	0x0003700e
   28ab8:	00037025 	.word	0x00037025
   28abc:	20027418 	.word	0x20027418

00028ac0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28ac0:	b570      	push	{r4, r5, r6, lr}
   28ac2:	4604      	mov	r4, r0
   28ac4:	460d      	mov	r5, r1
	__asm__ volatile(
   28ac6:	f04f 0320 	mov.w	r3, #32
   28aca:	f3ef 8611 	mrs	r6, BASEPRI
   28ace:	f383 8811 	msr	BASEPRI, r3
   28ad2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ad6:	4822      	ldr	r0, [pc, #136]	; (28b60 <k_mem_slab_free+0xa0>)
   28ad8:	f002 f954 	bl	2ad84 <z_spin_lock_valid>
   28adc:	b968      	cbnz	r0, 28afa <k_mem_slab_free+0x3a>
   28ade:	235c      	movs	r3, #92	; 0x5c
   28ae0:	4a20      	ldr	r2, [pc, #128]	; (28b64 <k_mem_slab_free+0xa4>)
   28ae2:	4921      	ldr	r1, [pc, #132]	; (28b68 <k_mem_slab_free+0xa8>)
   28ae4:	4821      	ldr	r0, [pc, #132]	; (28b6c <k_mem_slab_free+0xac>)
   28ae6:	f006 fbb4 	bl	2f252 <printk>
   28aea:	491d      	ldr	r1, [pc, #116]	; (28b60 <k_mem_slab_free+0xa0>)
   28aec:	4820      	ldr	r0, [pc, #128]	; (28b70 <k_mem_slab_free+0xb0>)
   28aee:	f006 fbb0 	bl	2f252 <printk>
   28af2:	215c      	movs	r1, #92	; 0x5c
   28af4:	481b      	ldr	r0, [pc, #108]	; (28b64 <k_mem_slab_free+0xa4>)
   28af6:	f006 fead 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28afa:	4819      	ldr	r0, [pc, #100]	; (28b60 <k_mem_slab_free+0xa0>)
   28afc:	f002 f960 	bl	2adc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   28b00:	4620      	mov	r0, r4
   28b02:	f001 fca5 	bl	2a450 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   28b06:	b158      	cbz	r0, 28b20 <k_mem_slab_free+0x60>
   28b08:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   28b0a:	682a      	ldr	r2, [r5, #0]
   28b0c:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28b0e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   28b10:	f000 ffee 	bl	29af0 <z_ready_thread>
		z_reschedule(&lock, key);
   28b14:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   28b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   28b1a:	4811      	ldr	r0, [pc, #68]	; (28b60 <k_mem_slab_free+0xa0>)
   28b1c:	f000 bdc6 	b.w	296ac <z_reschedule>
		**(char ***)mem = slab->free_list;
   28b20:	682b      	ldr	r3, [r5, #0]
   28b22:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b24:	480e      	ldr	r0, [pc, #56]	; (28b60 <k_mem_slab_free+0xa0>)
   28b26:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   28b28:	682b      	ldr	r3, [r5, #0]
   28b2a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   28b2c:	69a3      	ldr	r3, [r4, #24]
   28b2e:	3b01      	subs	r3, #1
   28b30:	61a3      	str	r3, [r4, #24]
   28b32:	f002 f935 	bl	2ada0 <z_spin_unlock_valid>
   28b36:	b968      	cbnz	r0, 28b54 <k_mem_slab_free+0x94>
   28b38:	2384      	movs	r3, #132	; 0x84
   28b3a:	4a0a      	ldr	r2, [pc, #40]	; (28b64 <k_mem_slab_free+0xa4>)
   28b3c:	490d      	ldr	r1, [pc, #52]	; (28b74 <k_mem_slab_free+0xb4>)
   28b3e:	480b      	ldr	r0, [pc, #44]	; (28b6c <k_mem_slab_free+0xac>)
   28b40:	f006 fb87 	bl	2f252 <printk>
   28b44:	4906      	ldr	r1, [pc, #24]	; (28b60 <k_mem_slab_free+0xa0>)
   28b46:	480c      	ldr	r0, [pc, #48]	; (28b78 <k_mem_slab_free+0xb8>)
   28b48:	f006 fb83 	bl	2f252 <printk>
   28b4c:	2184      	movs	r1, #132	; 0x84
   28b4e:	4805      	ldr	r0, [pc, #20]	; (28b64 <k_mem_slab_free+0xa4>)
   28b50:	f006 fe80 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28b54:	f386 8811 	msr	BASEPRI, r6
   28b58:	f3bf 8f6f 	isb	sy
}
   28b5c:	bd70      	pop	{r4, r5, r6, pc}
   28b5e:	bf00      	nop
   28b60:	20022bb0 	.word	0x20022bb0
   28b64:	00036fbb 	.word	0x00036fbb
   28b68:	00036fe1 	.word	0x00036fe1
   28b6c:	00036be5 	.word	0x00036be5
   28b70:	00036ff6 	.word	0x00036ff6
   28b74:	0003700e 	.word	0x0003700e
   28b78:	00037025 	.word	0x00037025

00028b7c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   28b7c:	4601      	mov	r1, r0
   28b7e:	4801      	ldr	r0, [pc, #4]	; (28b84 <k_malloc+0x8>)
   28b80:	f00b bd57 	b.w	34632 <k_mem_pool_malloc>
   28b84:	200201d8 	.word	0x200201d8

00028b88 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   28b88:	b510      	push	{r4, lr}
   28b8a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   28b8c:	f00b fdff 	bl	3478e <k_is_in_isr>
   28b90:	b948      	cbnz	r0, 28ba6 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   28b92:	4b06      	ldr	r3, [pc, #24]	; (28bac <z_thread_malloc+0x24>)
   28b94:	689b      	ldr	r3, [r3, #8]
   28b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   28b98:	b13b      	cbz	r3, 28baa <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   28b9a:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   28b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   28ba0:	4618      	mov	r0, r3
   28ba2:	f00b bd46 	b.w	34632 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   28ba6:	4b02      	ldr	r3, [pc, #8]	; (28bb0 <z_thread_malloc+0x28>)
   28ba8:	e7f7      	b.n	28b9a <z_thread_malloc+0x12>
}
   28baa:	bd10      	pop	{r4, pc}
   28bac:	20027418 	.word	0x20027418
   28bb0:	200201d8 	.word	0x200201d8

00028bb4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   28bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bb8:	4604      	mov	r4, r0
   28bba:	4688      	mov	r8, r1
   28bbc:	4616      	mov	r6, r2
   28bbe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28bc2:	b16b      	cbz	r3, 28be0 <z_impl_k_msgq_put+0x2c>
   28bc4:	b162      	cbz	r2, 28be0 <z_impl_k_msgq_put+0x2c>
   28bc6:	493e      	ldr	r1, [pc, #248]	; (28cc0 <z_impl_k_msgq_put+0x10c>)
   28bc8:	2376      	movs	r3, #118	; 0x76
   28bca:	4a3e      	ldr	r2, [pc, #248]	; (28cc4 <z_impl_k_msgq_put+0x110>)
   28bcc:	483e      	ldr	r0, [pc, #248]	; (28cc8 <z_impl_k_msgq_put+0x114>)
   28bce:	f006 fb40 	bl	2f252 <printk>
   28bd2:	483e      	ldr	r0, [pc, #248]	; (28ccc <z_impl_k_msgq_put+0x118>)
   28bd4:	f006 fb3d 	bl	2f252 <printk>
   28bd8:	2176      	movs	r1, #118	; 0x76
   28bda:	483a      	ldr	r0, [pc, #232]	; (28cc4 <z_impl_k_msgq_put+0x110>)
   28bdc:	f006 fe3a 	bl	2f854 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   28be0:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   28be4:	f04f 0320 	mov.w	r3, #32
   28be8:	f3ef 8711 	mrs	r7, BASEPRI
   28bec:	f383 8811 	msr	BASEPRI, r3
   28bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28bf4:	4628      	mov	r0, r5
   28bf6:	f002 f8c5 	bl	2ad84 <z_spin_lock_valid>
   28bfa:	b968      	cbnz	r0, 28c18 <z_impl_k_msgq_put+0x64>
   28bfc:	235c      	movs	r3, #92	; 0x5c
   28bfe:	4a34      	ldr	r2, [pc, #208]	; (28cd0 <z_impl_k_msgq_put+0x11c>)
   28c00:	4934      	ldr	r1, [pc, #208]	; (28cd4 <z_impl_k_msgq_put+0x120>)
   28c02:	4831      	ldr	r0, [pc, #196]	; (28cc8 <z_impl_k_msgq_put+0x114>)
   28c04:	f006 fb25 	bl	2f252 <printk>
   28c08:	4629      	mov	r1, r5
   28c0a:	4833      	ldr	r0, [pc, #204]	; (28cd8 <z_impl_k_msgq_put+0x124>)
   28c0c:	f006 fb21 	bl	2f252 <printk>
   28c10:	215c      	movs	r1, #92	; 0x5c
   28c12:	482f      	ldr	r0, [pc, #188]	; (28cd0 <z_impl_k_msgq_put+0x11c>)
   28c14:	f006 fe1e 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28c18:	4628      	mov	r0, r5
   28c1a:	f002 f8d1 	bl	2adc0 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   28c1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   28c20:	6923      	ldr	r3, [r4, #16]
   28c22:	429a      	cmp	r2, r3
   28c24:	d23c      	bcs.n	28ca0 <z_impl_k_msgq_put+0xec>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   28c26:	4620      	mov	r0, r4
   28c28:	f001 fc12 	bl	2a450 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   28c2c:	68e2      	ldr	r2, [r4, #12]
   28c2e:	4606      	mov	r6, r0
   28c30:	4641      	mov	r1, r8
   28c32:	b170      	cbz	r0, 28c52 <z_impl_k_msgq_put+0x9e>
   28c34:	2400      	movs	r4, #0
   28c36:	6940      	ldr	r0, [r0, #20]
   28c38:	f00b fef2 	bl	34a20 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   28c3c:	4630      	mov	r0, r6
   28c3e:	6734      	str	r4, [r6, #112]	; 0x70
   28c40:	f000 ff56 	bl	29af0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   28c44:	4639      	mov	r1, r7
   28c46:	4628      	mov	r0, r5
   28c48:	f000 fd30 	bl	296ac <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   28c4c:	4620      	mov	r0, r4
   28c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28c52:	6a20      	ldr	r0, [r4, #32]
   28c54:	f00b fee4 	bl	34a20 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   28c58:	6a23      	ldr	r3, [r4, #32]
   28c5a:	68e2      	ldr	r2, [r4, #12]
   28c5c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   28c5e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   28c60:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   28c62:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   28c64:	bf04      	itt	eq
   28c66:	6963      	ldreq	r3, [r4, #20]
   28c68:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   28c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28c6c:	3301      	adds	r3, #1
   28c6e:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   28c70:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28c72:	4628      	mov	r0, r5
   28c74:	f002 f894 	bl	2ada0 <z_spin_unlock_valid>
   28c78:	b968      	cbnz	r0, 28c96 <z_impl_k_msgq_put+0xe2>
   28c7a:	2384      	movs	r3, #132	; 0x84
   28c7c:	4a14      	ldr	r2, [pc, #80]	; (28cd0 <z_impl_k_msgq_put+0x11c>)
   28c7e:	4917      	ldr	r1, [pc, #92]	; (28cdc <z_impl_k_msgq_put+0x128>)
   28c80:	4811      	ldr	r0, [pc, #68]	; (28cc8 <z_impl_k_msgq_put+0x114>)
   28c82:	f006 fae6 	bl	2f252 <printk>
   28c86:	4629      	mov	r1, r5
   28c88:	4815      	ldr	r0, [pc, #84]	; (28ce0 <z_impl_k_msgq_put+0x12c>)
   28c8a:	f006 fae2 	bl	2f252 <printk>
   28c8e:	2184      	movs	r1, #132	; 0x84
   28c90:	480f      	ldr	r0, [pc, #60]	; (28cd0 <z_impl_k_msgq_put+0x11c>)
   28c92:	f006 fddf 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28c96:	f387 8811 	msr	BASEPRI, r7
   28c9a:	f3bf 8f6f 	isb	sy
	return result;
   28c9e:	e7d5      	b.n	28c4c <z_impl_k_msgq_put+0x98>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28ca0:	b15e      	cbz	r6, 28cba <z_impl_k_msgq_put+0x106>
		_current->base.swap_data = data;
   28ca2:	4b10      	ldr	r3, [pc, #64]	; (28ce4 <z_impl_k_msgq_put+0x130>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28ca4:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   28ca6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28ca8:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   28caa:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28cae:	4628      	mov	r0, r5
   28cb0:	4633      	mov	r3, r6
}
   28cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28cb6:	f001 bb0d 	b.w	2a2d4 <z_pend_curr>
		result = -ENOMSG;
   28cba:	f06f 0422 	mvn.w	r4, #34	; 0x22
   28cbe:	e7d8      	b.n	28c72 <z_impl_k_msgq_put+0xbe>
   28cc0:	0003894f 	.word	0x0003894f
   28cc4:	000389f1 	.word	0x000389f1
   28cc8:	00036be5 	.word	0x00036be5
   28ccc:	00037086 	.word	0x00037086
   28cd0:	00036fbb 	.word	0x00036fbb
   28cd4:	00036fe1 	.word	0x00036fe1
   28cd8:	00036ff6 	.word	0x00036ff6
   28cdc:	0003700e 	.word	0x0003700e
   28ce0:	00037025 	.word	0x00037025
   28ce4:	20027418 	.word	0x20027418

00028ce8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   28ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28cec:	4604      	mov	r4, r0
   28cee:	4688      	mov	r8, r1
   28cf0:	4615      	mov	r5, r2
   28cf2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28cf6:	b16b      	cbz	r3, 28d14 <z_impl_k_msgq_get+0x2c>
   28cf8:	b162      	cbz	r2, 28d14 <z_impl_k_msgq_get+0x2c>
   28cfa:	4944      	ldr	r1, [pc, #272]	; (28e0c <z_impl_k_msgq_get+0x124>)
   28cfc:	23c2      	movs	r3, #194	; 0xc2
   28cfe:	4a44      	ldr	r2, [pc, #272]	; (28e10 <z_impl_k_msgq_get+0x128>)
   28d00:	4844      	ldr	r0, [pc, #272]	; (28e14 <z_impl_k_msgq_get+0x12c>)
   28d02:	f006 faa6 	bl	2f252 <printk>
   28d06:	4844      	ldr	r0, [pc, #272]	; (28e18 <z_impl_k_msgq_get+0x130>)
   28d08:	f006 faa3 	bl	2f252 <printk>
   28d0c:	21c2      	movs	r1, #194	; 0xc2
   28d0e:	4840      	ldr	r0, [pc, #256]	; (28e10 <z_impl_k_msgq_get+0x128>)
   28d10:	f006 fda0 	bl	2f854 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   28d14:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   28d18:	f04f 0320 	mov.w	r3, #32
   28d1c:	f3ef 8711 	mrs	r7, BASEPRI
   28d20:	f383 8811 	msr	BASEPRI, r3
   28d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28d28:	4630      	mov	r0, r6
   28d2a:	f002 f82b 	bl	2ad84 <z_spin_lock_valid>
   28d2e:	b968      	cbnz	r0, 28d4c <z_impl_k_msgq_get+0x64>
   28d30:	235c      	movs	r3, #92	; 0x5c
   28d32:	4a3a      	ldr	r2, [pc, #232]	; (28e1c <z_impl_k_msgq_get+0x134>)
   28d34:	493a      	ldr	r1, [pc, #232]	; (28e20 <z_impl_k_msgq_get+0x138>)
   28d36:	4837      	ldr	r0, [pc, #220]	; (28e14 <z_impl_k_msgq_get+0x12c>)
   28d38:	f006 fa8b 	bl	2f252 <printk>
   28d3c:	4631      	mov	r1, r6
   28d3e:	4839      	ldr	r0, [pc, #228]	; (28e24 <z_impl_k_msgq_get+0x13c>)
   28d40:	f006 fa87 	bl	2f252 <printk>
   28d44:	215c      	movs	r1, #92	; 0x5c
   28d46:	4835      	ldr	r0, [pc, #212]	; (28e1c <z_impl_k_msgq_get+0x134>)
   28d48:	f006 fd84 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28d4c:	4630      	mov	r0, r6
   28d4e:	f002 f837 	bl	2adc0 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   28d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28d54:	2b00      	cmp	r3, #0
   28d56:	d033      	beq.n	28dc0 <z_impl_k_msgq_get+0xd8>
   28d58:	68e2      	ldr	r2, [r4, #12]
   28d5a:	69e1      	ldr	r1, [r4, #28]
   28d5c:	4640      	mov	r0, r8
   28d5e:	f00b fe5f 	bl	34a20 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   28d62:	69e3      	ldr	r3, [r4, #28]
   28d64:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   28d66:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   28d68:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   28d6a:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   28d6c:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   28d6e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   28d70:	bf04      	itt	eq
   28d72:	6963      	ldreq	r3, [r4, #20]
   28d74:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   28d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28d78:	3b01      	subs	r3, #1
   28d7a:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   28d7c:	f001 fb68 	bl	2a450 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   28d80:	4605      	mov	r5, r0
   28d82:	b360      	cbz	r0, 28dde <z_impl_k_msgq_get+0xf6>
   28d84:	6941      	ldr	r1, [r0, #20]
   28d86:	68e2      	ldr	r2, [r4, #12]
   28d88:	6a20      	ldr	r0, [r4, #32]
   28d8a:	f00b fe49 	bl	34a20 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   28d8e:	6a23      	ldr	r3, [r4, #32]
   28d90:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   28d92:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   28d94:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   28d96:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   28d98:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   28d9a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   28d9c:	bf04      	itt	eq
   28d9e:	6963      	ldreq	r3, [r4, #20]
   28da0:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   28da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28da4:	3301      	adds	r3, #1
   28da6:	6263      	str	r3, [r4, #36]	; 0x24
   28da8:	2400      	movs	r4, #0
   28daa:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   28dac:	f000 fea0 	bl	29af0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   28db0:	4639      	mov	r1, r7
   28db2:	4630      	mov	r0, r6
   28db4:	f000 fc7a 	bl	296ac <z_reschedule>
			return 0;
   28db8:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   28dba:	4628      	mov	r0, r5
   28dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28dc0:	b15d      	cbz	r5, 28dda <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   28dc2:	4b19      	ldr	r3, [pc, #100]	; (28e28 <z_impl_k_msgq_get+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28dc4:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   28dc6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28dc8:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   28dca:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28dce:	4630      	mov	r0, r6
   28dd0:	462b      	mov	r3, r5
}
   28dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   28dd6:	f001 ba7d 	b.w	2a2d4 <z_pend_curr>
		result = -ENOMSG;
   28dda:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28dde:	4630      	mov	r0, r6
   28de0:	f001 ffde 	bl	2ada0 <z_spin_unlock_valid>
   28de4:	b968      	cbnz	r0, 28e02 <z_impl_k_msgq_get+0x11a>
   28de6:	2384      	movs	r3, #132	; 0x84
   28de8:	4a0c      	ldr	r2, [pc, #48]	; (28e1c <z_impl_k_msgq_get+0x134>)
   28dea:	4910      	ldr	r1, [pc, #64]	; (28e2c <z_impl_k_msgq_get+0x144>)
   28dec:	4809      	ldr	r0, [pc, #36]	; (28e14 <z_impl_k_msgq_get+0x12c>)
   28dee:	f006 fa30 	bl	2f252 <printk>
   28df2:	4631      	mov	r1, r6
   28df4:	480e      	ldr	r0, [pc, #56]	; (28e30 <z_impl_k_msgq_get+0x148>)
   28df6:	f006 fa2c 	bl	2f252 <printk>
   28dfa:	2184      	movs	r1, #132	; 0x84
   28dfc:	4807      	ldr	r0, [pc, #28]	; (28e1c <z_impl_k_msgq_get+0x134>)
   28dfe:	f006 fd29 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28e02:	f387 8811 	msr	BASEPRI, r7
   28e06:	f3bf 8f6f 	isb	sy
	return result;
   28e0a:	e7d6      	b.n	28dba <z_impl_k_msgq_get+0xd2>
   28e0c:	0003894f 	.word	0x0003894f
   28e10:	000389f1 	.word	0x000389f1
   28e14:	00036be5 	.word	0x00036be5
   28e18:	00037086 	.word	0x00037086
   28e1c:	00036fbb 	.word	0x00036fbb
   28e20:	00036fe1 	.word	0x00036fe1
   28e24:	00036ff6 	.word	0x00036ff6
   28e28:	20027418 	.word	0x20027418
   28e2c:	0003700e 	.word	0x0003700e
   28e30:	00037025 	.word	0x00037025

00028e34 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   28e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e36:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   28e38:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28e3c:	f04f 0320 	mov.w	r3, #32
   28e40:	f3ef 8611 	mrs	r6, BASEPRI
   28e44:	f383 8811 	msr	BASEPRI, r3
   28e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e4c:	4628      	mov	r0, r5
   28e4e:	f001 ff99 	bl	2ad84 <z_spin_lock_valid>
   28e52:	b968      	cbnz	r0, 28e70 <z_impl_k_msgq_purge+0x3c>
   28e54:	235c      	movs	r3, #92	; 0x5c
   28e56:	4a12      	ldr	r2, [pc, #72]	; (28ea0 <z_impl_k_msgq_purge+0x6c>)
   28e58:	4912      	ldr	r1, [pc, #72]	; (28ea4 <z_impl_k_msgq_purge+0x70>)
   28e5a:	4813      	ldr	r0, [pc, #76]	; (28ea8 <z_impl_k_msgq_purge+0x74>)
   28e5c:	f006 f9f9 	bl	2f252 <printk>
   28e60:	4629      	mov	r1, r5
   28e62:	4812      	ldr	r0, [pc, #72]	; (28eac <z_impl_k_msgq_purge+0x78>)
   28e64:	f006 f9f5 	bl	2f252 <printk>
   28e68:	215c      	movs	r1, #92	; 0x5c
   28e6a:	480d      	ldr	r0, [pc, #52]	; (28ea0 <z_impl_k_msgq_purge+0x6c>)
   28e6c:	f006 fcf2 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28e70:	4628      	mov	r0, r5
   28e72:	f001 ffa5 	bl	2adc0 <z_spin_lock_set_owner>
   28e76:	f06f 0722 	mvn.w	r7, #34	; 0x22

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   28e7a:	4620      	mov	r0, r4
   28e7c:	f001 fae8 	bl	2a450 <z_unpend_first_thread>
   28e80:	4603      	mov	r3, r0
   28e82:	b940      	cbnz	r0, 28e96 <z_impl_k_msgq_purge+0x62>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   28e84:	6a23      	ldr	r3, [r4, #32]
	msgq->used_msgs = 0;
   28e86:	6260      	str	r0, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
   28e88:	61e3      	str	r3, [r4, #28]

	z_reschedule(&msgq->lock, key);
   28e8a:	4631      	mov	r1, r6
   28e8c:	4628      	mov	r0, r5
}
   28e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   28e92:	f000 bc0b 	b.w	296ac <z_reschedule>
   28e96:	671f      	str	r7, [r3, #112]	; 0x70
		z_ready_thread(pending_thread);
   28e98:	f000 fe2a 	bl	29af0 <z_ready_thread>
   28e9c:	e7ed      	b.n	28e7a <z_impl_k_msgq_purge+0x46>
   28e9e:	bf00      	nop
   28ea0:	00036fbb 	.word	0x00036fbb
   28ea4:	00036fe1 	.word	0x00036fe1
   28ea8:	00036be5 	.word	0x00036be5
   28eac:	00036ff6 	.word	0x00036ff6

00028eb0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   28eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28eb2:	4604      	mov	r4, r0
   28eb4:	460e      	mov	r6, r1
   28eb6:	f04f 0320 	mov.w	r3, #32
   28eba:	f3ef 8511 	mrs	r5, BASEPRI
   28ebe:	f383 8811 	msr	BASEPRI, r3
   28ec2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ec6:	4861      	ldr	r0, [pc, #388]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28ec8:	f001 ff5c 	bl	2ad84 <z_spin_lock_valid>
   28ecc:	b968      	cbnz	r0, 28eea <z_impl_k_mutex_lock+0x3a>
   28ece:	235c      	movs	r3, #92	; 0x5c
   28ed0:	4a5f      	ldr	r2, [pc, #380]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28ed2:	4960      	ldr	r1, [pc, #384]	; (29054 <z_impl_k_mutex_lock+0x1a4>)
   28ed4:	4860      	ldr	r0, [pc, #384]	; (29058 <z_impl_k_mutex_lock+0x1a8>)
   28ed6:	f006 f9bc 	bl	2f252 <printk>
   28eda:	495c      	ldr	r1, [pc, #368]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28edc:	485f      	ldr	r0, [pc, #380]	; (2905c <z_impl_k_mutex_lock+0x1ac>)
   28ede:	f006 f9b8 	bl	2f252 <printk>
   28ee2:	215c      	movs	r1, #92	; 0x5c
   28ee4:	485a      	ldr	r0, [pc, #360]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28ee6:	f006 fcb5 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28eea:	4858      	ldr	r0, [pc, #352]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28eec:	f001 ff68 	bl	2adc0 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   28ef0:	68e3      	ldr	r3, [r4, #12]
   28ef2:	4a5b      	ldr	r2, [pc, #364]	; (29060 <z_impl_k_mutex_lock+0x1b0>)
   28ef4:	b1f3      	cbz	r3, 28f34 <z_impl_k_mutex_lock+0x84>
   28ef6:	68a0      	ldr	r0, [r4, #8]
   28ef8:	6891      	ldr	r1, [r2, #8]
   28efa:	4288      	cmp	r0, r1
   28efc:	d03a      	beq.n	28f74 <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   28efe:	2e00      	cmp	r6, #0
   28f00:	d13a      	bne.n	28f78 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f02:	4852      	ldr	r0, [pc, #328]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28f04:	f001 ff4c 	bl	2ada0 <z_spin_unlock_valid>
   28f08:	b968      	cbnz	r0, 28f26 <z_impl_k_mutex_lock+0x76>
   28f0a:	2384      	movs	r3, #132	; 0x84
   28f0c:	4a50      	ldr	r2, [pc, #320]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28f0e:	4955      	ldr	r1, [pc, #340]	; (29064 <z_impl_k_mutex_lock+0x1b4>)
   28f10:	4851      	ldr	r0, [pc, #324]	; (29058 <z_impl_k_mutex_lock+0x1a8>)
   28f12:	f006 f99e 	bl	2f252 <printk>
   28f16:	494d      	ldr	r1, [pc, #308]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28f18:	4853      	ldr	r0, [pc, #332]	; (29068 <z_impl_k_mutex_lock+0x1b8>)
   28f1a:	f006 f99a 	bl	2f252 <printk>
   28f1e:	2184      	movs	r1, #132	; 0x84
   28f20:	484b      	ldr	r0, [pc, #300]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28f22:	f006 fc97 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   28f26:	f385 8811 	msr	BASEPRI, r5
   28f2a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   28f2e:	f06f 000f 	mvn.w	r0, #15
   28f32:	e01e      	b.n	28f72 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   28f34:	6891      	ldr	r1, [r2, #8]
   28f36:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   28f3a:	3301      	adds	r3, #1
   28f3c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   28f3e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   28f40:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   28f42:	60a3      	str	r3, [r4, #8]
   28f44:	4841      	ldr	r0, [pc, #260]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28f46:	f001 ff2b 	bl	2ada0 <z_spin_unlock_valid>
   28f4a:	b968      	cbnz	r0, 28f68 <z_impl_k_mutex_lock+0xb8>
   28f4c:	2384      	movs	r3, #132	; 0x84
   28f4e:	4a40      	ldr	r2, [pc, #256]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28f50:	4944      	ldr	r1, [pc, #272]	; (29064 <z_impl_k_mutex_lock+0x1b4>)
   28f52:	4841      	ldr	r0, [pc, #260]	; (29058 <z_impl_k_mutex_lock+0x1a8>)
   28f54:	f006 f97d 	bl	2f252 <printk>
   28f58:	493c      	ldr	r1, [pc, #240]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28f5a:	4843      	ldr	r0, [pc, #268]	; (29068 <z_impl_k_mutex_lock+0x1b8>)
   28f5c:	f006 f979 	bl	2f252 <printk>
   28f60:	2184      	movs	r1, #132	; 0x84
   28f62:	483b      	ldr	r0, [pc, #236]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28f64:	f006 fc76 	bl	2f854 <assert_post_action>
   28f68:	f385 8811 	msr	BASEPRI, r5
   28f6c:	f3bf 8f6f 	isb	sy
		return 0;
   28f70:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   28f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   28f74:	6921      	ldr	r1, [r4, #16]
   28f76:	e7e0      	b.n	28f3a <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   28f78:	f990 300e 	ldrsb.w	r3, [r0, #14]
   28f7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   28f80:	4299      	cmp	r1, r3
   28f82:	bfa8      	it	ge
   28f84:	4619      	movge	r1, r3
   28f86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   28f8a:	4299      	cmp	r1, r3
   28f8c:	da40      	bge.n	29010 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   28f8e:	f001 f9cf 	bl	2a330 <z_set_prio>
   28f92:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   28f94:	4633      	mov	r3, r6
   28f96:	4622      	mov	r2, r4
   28f98:	4629      	mov	r1, r5
   28f9a:	482c      	ldr	r0, [pc, #176]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28f9c:	f001 f99a 	bl	2a2d4 <z_pend_curr>
	if (got_mutex == 0) {
   28fa0:	2800      	cmp	r0, #0
   28fa2:	d0e6      	beq.n	28f72 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   28fa4:	f04f 0320 	mov.w	r3, #32
   28fa8:	f3ef 8511 	mrs	r5, BASEPRI
   28fac:	f383 8811 	msr	BASEPRI, r3
   28fb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28fb4:	4825      	ldr	r0, [pc, #148]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28fb6:	f001 fee5 	bl	2ad84 <z_spin_lock_valid>
   28fba:	b968      	cbnz	r0, 28fd8 <z_impl_k_mutex_lock+0x128>
   28fbc:	235c      	movs	r3, #92	; 0x5c
   28fbe:	4a24      	ldr	r2, [pc, #144]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28fc0:	4924      	ldr	r1, [pc, #144]	; (29054 <z_impl_k_mutex_lock+0x1a4>)
   28fc2:	4825      	ldr	r0, [pc, #148]	; (29058 <z_impl_k_mutex_lock+0x1a8>)
   28fc4:	f006 f945 	bl	2f252 <printk>
   28fc8:	4920      	ldr	r1, [pc, #128]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28fca:	4824      	ldr	r0, [pc, #144]	; (2905c <z_impl_k_mutex_lock+0x1ac>)
   28fcc:	f006 f941 	bl	2f252 <printk>
   28fd0:	215c      	movs	r1, #92	; 0x5c
   28fd2:	481f      	ldr	r0, [pc, #124]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   28fd4:	f006 fc3e 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   28fd8:	481c      	ldr	r0, [pc, #112]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   28fda:	f001 fef1 	bl	2adc0 <z_spin_lock_set_owner>
	return list->head == list;
   28fde:	6823      	ldr	r3, [r4, #0]
   28fe0:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28fe2:	429c      	cmp	r4, r3
   28fe4:	d007      	beq.n	28ff6 <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   28fe6:	b133      	cbz	r3, 28ff6 <z_impl_k_mutex_lock+0x146>
   28fe8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   28fec:	4299      	cmp	r1, r3
   28fee:	bfa8      	it	ge
   28ff0:	4619      	movge	r1, r3
   28ff2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   28ff6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   28ff8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   28ffc:	4299      	cmp	r1, r3
   28ffe:	d109      	bne.n	29014 <z_impl_k_mutex_lock+0x164>
	if (resched) {
   29000:	b16f      	cbz	r7, 2901e <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   29002:	4629      	mov	r1, r5
   29004:	4811      	ldr	r0, [pc, #68]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   29006:	f000 fb51 	bl	296ac <z_reschedule>
	return -EAGAIN;
   2900a:	f06f 000a 	mvn.w	r0, #10
   2900e:	e7b0      	b.n	28f72 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   29010:	2700      	movs	r7, #0
   29012:	e7bf      	b.n	28f94 <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   29014:	f001 f98c 	bl	2a330 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   29018:	2800      	cmp	r0, #0
   2901a:	d1f2      	bne.n	29002 <z_impl_k_mutex_lock+0x152>
   2901c:	e7f0      	b.n	29000 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2901e:	480b      	ldr	r0, [pc, #44]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   29020:	f001 febe 	bl	2ada0 <z_spin_unlock_valid>
   29024:	b968      	cbnz	r0, 29042 <z_impl_k_mutex_lock+0x192>
   29026:	2384      	movs	r3, #132	; 0x84
   29028:	4a09      	ldr	r2, [pc, #36]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   2902a:	490e      	ldr	r1, [pc, #56]	; (29064 <z_impl_k_mutex_lock+0x1b4>)
   2902c:	480a      	ldr	r0, [pc, #40]	; (29058 <z_impl_k_mutex_lock+0x1a8>)
   2902e:	f006 f910 	bl	2f252 <printk>
   29032:	4906      	ldr	r1, [pc, #24]	; (2904c <z_impl_k_mutex_lock+0x19c>)
   29034:	480c      	ldr	r0, [pc, #48]	; (29068 <z_impl_k_mutex_lock+0x1b8>)
   29036:	f006 f90c 	bl	2f252 <printk>
   2903a:	2184      	movs	r1, #132	; 0x84
   2903c:	4804      	ldr	r0, [pc, #16]	; (29050 <z_impl_k_mutex_lock+0x1a0>)
   2903e:	f006 fc09 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29042:	f385 8811 	msr	BASEPRI, r5
   29046:	f3bf 8f6f 	isb	sy
   2904a:	e7de      	b.n	2900a <z_impl_k_mutex_lock+0x15a>
   2904c:	20027414 	.word	0x20027414
   29050:	00036fbb 	.word	0x00036fbb
   29054:	00036fe1 	.word	0x00036fe1
   29058:	00036be5 	.word	0x00036be5
   2905c:	00036ff6 	.word	0x00036ff6
   29060:	20027418 	.word	0x20027418
   29064:	0003700e 	.word	0x0003700e
   29068:	00037025 	.word	0x00037025

0002906c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2906c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   2906e:	6883      	ldr	r3, [r0, #8]
{
   29070:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   29072:	2b00      	cmp	r3, #0
   29074:	f000 8091 	beq.w	2919a <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   29078:	4d4b      	ldr	r5, [pc, #300]	; (291a8 <z_impl_k_mutex_unlock+0x13c>)
   2907a:	68aa      	ldr	r2, [r5, #8]
   2907c:	4293      	cmp	r3, r2
   2907e:	f040 808f 	bne.w	291a0 <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   29082:	68c3      	ldr	r3, [r0, #12]
   29084:	b94b      	cbnz	r3, 2909a <z_impl_k_mutex_unlock+0x2e>
   29086:	4949      	ldr	r1, [pc, #292]	; (291ac <z_impl_k_mutex_unlock+0x140>)
   29088:	4849      	ldr	r0, [pc, #292]	; (291b0 <z_impl_k_mutex_unlock+0x144>)
   2908a:	23e6      	movs	r3, #230	; 0xe6
   2908c:	4a49      	ldr	r2, [pc, #292]	; (291b4 <z_impl_k_mutex_unlock+0x148>)
   2908e:	f006 f8e0 	bl	2f252 <printk>
   29092:	21e6      	movs	r1, #230	; 0xe6
   29094:	4847      	ldr	r0, [pc, #284]	; (291b4 <z_impl_k_mutex_unlock+0x148>)
   29096:	f006 fbdd 	bl	2f854 <assert_post_action>
   2909a:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   2909e:	b173      	cbz	r3, 290be <z_impl_k_mutex_unlock+0x52>
   290a0:	4945      	ldr	r1, [pc, #276]	; (291b8 <z_impl_k_mutex_unlock+0x14c>)
   290a2:	f240 130b 	movw	r3, #267	; 0x10b
   290a6:	4a45      	ldr	r2, [pc, #276]	; (291bc <z_impl_k_mutex_unlock+0x150>)
   290a8:	4841      	ldr	r0, [pc, #260]	; (291b0 <z_impl_k_mutex_unlock+0x144>)
   290aa:	f006 f8d2 	bl	2f252 <printk>
   290ae:	4844      	ldr	r0, [pc, #272]	; (291c0 <z_impl_k_mutex_unlock+0x154>)
   290b0:	f006 f8cf 	bl	2f252 <printk>
   290b4:	f240 110b 	movw	r1, #267	; 0x10b
   290b8:	4840      	ldr	r0, [pc, #256]	; (291bc <z_impl_k_mutex_unlock+0x150>)
   290ba:	f006 fbcb 	bl	2f854 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   290be:	68ab      	ldr	r3, [r5, #8]
   290c0:	7bdb      	ldrb	r3, [r3, #15]
   290c2:	2b01      	cmp	r3, #1
   290c4:	d10e      	bne.n	290e4 <z_impl_k_mutex_unlock+0x78>
   290c6:	493f      	ldr	r1, [pc, #252]	; (291c4 <z_impl_k_mutex_unlock+0x158>)
   290c8:	f44f 7386 	mov.w	r3, #268	; 0x10c
   290cc:	4a3b      	ldr	r2, [pc, #236]	; (291bc <z_impl_k_mutex_unlock+0x150>)
   290ce:	4838      	ldr	r0, [pc, #224]	; (291b0 <z_impl_k_mutex_unlock+0x144>)
   290d0:	f006 f8bf 	bl	2f252 <printk>
   290d4:	483a      	ldr	r0, [pc, #232]	; (291c0 <z_impl_k_mutex_unlock+0x154>)
   290d6:	f006 f8bc 	bl	2f252 <printk>
   290da:	f44f 7186 	mov.w	r1, #268	; 0x10c
   290de:	4837      	ldr	r0, [pc, #220]	; (291bc <z_impl_k_mutex_unlock+0x150>)
   290e0:	f006 fbb8 	bl	2f854 <assert_post_action>

	--_current->base.sched_locked;
   290e4:	68aa      	ldr	r2, [r5, #8]
   290e6:	7bd3      	ldrb	r3, [r2, #15]
   290e8:	3b01      	subs	r3, #1
   290ea:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   290ec:	68e3      	ldr	r3, [r4, #12]
   290ee:	2b01      	cmp	r3, #1
   290f0:	d005      	beq.n	290fe <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   290f2:	3b01      	subs	r3, #1
   290f4:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   290f6:	f000 fc35 	bl	29964 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   290fa:	2000      	movs	r0, #0
}
   290fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   290fe:	f04f 0320 	mov.w	r3, #32
   29102:	f3ef 8511 	mrs	r5, BASEPRI
   29106:	f383 8811 	msr	BASEPRI, r3
   2910a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2910e:	482e      	ldr	r0, [pc, #184]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   29110:	f001 fe38 	bl	2ad84 <z_spin_lock_valid>
   29114:	b968      	cbnz	r0, 29132 <z_impl_k_mutex_unlock+0xc6>
   29116:	235c      	movs	r3, #92	; 0x5c
   29118:	4a2c      	ldr	r2, [pc, #176]	; (291cc <z_impl_k_mutex_unlock+0x160>)
   2911a:	492d      	ldr	r1, [pc, #180]	; (291d0 <z_impl_k_mutex_unlock+0x164>)
   2911c:	4824      	ldr	r0, [pc, #144]	; (291b0 <z_impl_k_mutex_unlock+0x144>)
   2911e:	f006 f898 	bl	2f252 <printk>
   29122:	4929      	ldr	r1, [pc, #164]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   29124:	482b      	ldr	r0, [pc, #172]	; (291d4 <z_impl_k_mutex_unlock+0x168>)
   29126:	f006 f894 	bl	2f252 <printk>
   2912a:	215c      	movs	r1, #92	; 0x5c
   2912c:	4827      	ldr	r0, [pc, #156]	; (291cc <z_impl_k_mutex_unlock+0x160>)
   2912e:	f006 fb91 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29132:	4825      	ldr	r0, [pc, #148]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   29134:	f001 fe44 	bl	2adc0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   29138:	68a0      	ldr	r0, [r4, #8]
   2913a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2913c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29140:	4299      	cmp	r1, r3
   29142:	d001      	beq.n	29148 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   29144:	f001 f8f4 	bl	2a330 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   29148:	4620      	mov	r0, r4
   2914a:	f001 f981 	bl	2a450 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2914e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   29150:	b158      	cbz	r0, 2916a <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
   29152:	f990 200e 	ldrsb.w	r2, [r0, #14]
   29156:	6122      	str	r2, [r4, #16]
   29158:	2200      	movs	r2, #0
   2915a:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   2915c:	f000 fcc8 	bl	29af0 <z_ready_thread>
		z_reschedule(&lock, key);
   29160:	4629      	mov	r1, r5
   29162:	4819      	ldr	r0, [pc, #100]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   29164:	f000 faa2 	bl	296ac <z_reschedule>
   29168:	e7c5      	b.n	290f6 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   2916a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2916c:	4816      	ldr	r0, [pc, #88]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   2916e:	f001 fe17 	bl	2ada0 <z_spin_unlock_valid>
   29172:	b968      	cbnz	r0, 29190 <z_impl_k_mutex_unlock+0x124>
   29174:	2384      	movs	r3, #132	; 0x84
   29176:	4a15      	ldr	r2, [pc, #84]	; (291cc <z_impl_k_mutex_unlock+0x160>)
   29178:	4917      	ldr	r1, [pc, #92]	; (291d8 <z_impl_k_mutex_unlock+0x16c>)
   2917a:	480d      	ldr	r0, [pc, #52]	; (291b0 <z_impl_k_mutex_unlock+0x144>)
   2917c:	f006 f869 	bl	2f252 <printk>
   29180:	4911      	ldr	r1, [pc, #68]	; (291c8 <z_impl_k_mutex_unlock+0x15c>)
   29182:	4816      	ldr	r0, [pc, #88]	; (291dc <z_impl_k_mutex_unlock+0x170>)
   29184:	f006 f865 	bl	2f252 <printk>
   29188:	2184      	movs	r1, #132	; 0x84
   2918a:	4810      	ldr	r0, [pc, #64]	; (291cc <z_impl_k_mutex_unlock+0x160>)
   2918c:	f006 fb62 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29190:	f385 8811 	msr	BASEPRI, r5
   29194:	f3bf 8f6f 	isb	sy
   29198:	e7ad      	b.n	290f6 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   2919a:	f06f 0015 	mvn.w	r0, #21
   2919e:	e7ad      	b.n	290fc <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   291a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   291a4:	e7aa      	b.n	290fc <z_impl_k_mutex_unlock+0x90>
   291a6:	bf00      	nop
   291a8:	20027418 	.word	0x20027418
   291ac:	00038a35 	.word	0x00038a35
   291b0:	00036be5 	.word	0x00036be5
   291b4:	00038a13 	.word	0x00038a13
   291b8:	00038a77 	.word	0x00038a77
   291bc:	00038a4c 	.word	0x00038a4c
   291c0:	00037086 	.word	0x00037086
   291c4:	00038a89 	.word	0x00038a89
   291c8:	20027414 	.word	0x20027414
   291cc:	00036fbb 	.word	0x00036fbb
   291d0:	00036fe1 	.word	0x00036fe1
   291d4:	00036ff6 	.word	0x00036ff6
   291d8:	0003700e 	.word	0x0003700e
   291dc:	00037025 	.word	0x00037025

000291e0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   291e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   291e4:	4604      	mov	r4, r0
   291e6:	460e      	mov	r6, r1
   291e8:	4690      	mov	r8, r2
   291ea:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   291ec:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   291f0:	f04f 0320 	mov.w	r3, #32
   291f4:	f3ef 8711 	mrs	r7, BASEPRI
   291f8:	f383 8811 	msr	BASEPRI, r3
   291fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29200:	4628      	mov	r0, r5
   29202:	f001 fdbf 	bl	2ad84 <z_spin_lock_valid>
   29206:	b968      	cbnz	r0, 29224 <queue_insert+0x44>
   29208:	235c      	movs	r3, #92	; 0x5c
   2920a:	4a39      	ldr	r2, [pc, #228]	; (292f0 <queue_insert+0x110>)
   2920c:	4939      	ldr	r1, [pc, #228]	; (292f4 <queue_insert+0x114>)
   2920e:	483a      	ldr	r0, [pc, #232]	; (292f8 <queue_insert+0x118>)
   29210:	f006 f81f 	bl	2f252 <printk>
   29214:	4629      	mov	r1, r5
   29216:	4839      	ldr	r0, [pc, #228]	; (292fc <queue_insert+0x11c>)
   29218:	f006 f81b 	bl	2f252 <printk>
   2921c:	215c      	movs	r1, #92	; 0x5c
   2921e:	4834      	ldr	r0, [pc, #208]	; (292f0 <queue_insert+0x110>)
   29220:	f006 fb18 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29224:	4628      	mov	r0, r5
   29226:	f001 fdcb 	bl	2adc0 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2922a:	f104 000c 	add.w	r0, r4, #12
   2922e:	f001 f90f 	bl	2a450 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   29232:	b158      	cbz	r0, 2924c <queue_insert+0x6c>
   29234:	2400      	movs	r4, #0
   29236:	f8c0 8014 	str.w	r8, [r0, #20]
   2923a:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   2923c:	f000 fc58 	bl	29af0 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   29240:	4628      	mov	r0, r5
   29242:	4639      	mov	r1, r7
   29244:	f000 fa32 	bl	296ac <z_reschedule>
	return 0;
   29248:	2000      	movs	r0, #0
   2924a:	e01e      	b.n	2928a <queue_insert+0xaa>
	if (alloc) {
   2924c:	f1b9 0f00 	cmp.w	r9, #0
   29250:	d02d      	beq.n	292ae <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   29252:	2008      	movs	r0, #8
   29254:	f7ff fc98 	bl	28b88 <z_thread_malloc>
		if (anode == NULL) {
   29258:	b9c8      	cbnz	r0, 2928e <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2925a:	4628      	mov	r0, r5
   2925c:	f001 fda0 	bl	2ada0 <z_spin_unlock_valid>
   29260:	b968      	cbnz	r0, 2927e <queue_insert+0x9e>
   29262:	2384      	movs	r3, #132	; 0x84
   29264:	4a22      	ldr	r2, [pc, #136]	; (292f0 <queue_insert+0x110>)
   29266:	4926      	ldr	r1, [pc, #152]	; (29300 <queue_insert+0x120>)
   29268:	4823      	ldr	r0, [pc, #140]	; (292f8 <queue_insert+0x118>)
   2926a:	f005 fff2 	bl	2f252 <printk>
   2926e:	4629      	mov	r1, r5
   29270:	4824      	ldr	r0, [pc, #144]	; (29304 <queue_insert+0x124>)
   29272:	f005 ffee 	bl	2f252 <printk>
   29276:	2184      	movs	r1, #132	; 0x84
   29278:	481d      	ldr	r0, [pc, #116]	; (292f0 <queue_insert+0x110>)
   2927a:	f006 faeb 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2927e:	f387 8811 	msr	BASEPRI, r7
   29282:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   29286:	f06f 000b 	mvn.w	r0, #11
}
   2928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2928e:	2301      	movs	r3, #1
		anode->data = data;
   29290:	f8c0 8004 	str.w	r8, [r0, #4]
   29294:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   29296:	6803      	ldr	r3, [r0, #0]
   29298:	f003 0303 	and.w	r3, r3, #3
   2929c:	b95e      	cbnz	r6, 292b6 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2929e:	6822      	ldr	r2, [r4, #0]
   292a0:	4313      	orrs	r3, r2
   292a2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   292a4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   292a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   292a8:	b973      	cbnz	r3, 292c8 <queue_insert+0xe8>
	list->tail = node;
   292aa:	6060      	str	r0, [r4, #4]
   292ac:	e00c      	b.n	292c8 <queue_insert+0xe8>
	node->next_and_flags = flags;
   292ae:	f8c8 9000 	str.w	r9, [r8]
   292b2:	4640      	mov	r0, r8
   292b4:	e7ef      	b.n	29296 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   292b6:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   292b8:	f032 0203 	bics.w	r2, r2, #3
   292bc:	d110      	bne.n	292e0 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   292be:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   292c0:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   292c2:	b93a      	cbnz	r2, 292d4 <queue_insert+0xf4>
	list->head = node;
   292c4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   292c8:	2104      	movs	r1, #4
   292ca:	f104 0014 	add.w	r0, r4, #20
   292ce:	f00b fb78 	bl	349c2 <z_handle_obj_poll_events>
   292d2:	e7b5      	b.n	29240 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   292d4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   292d6:	f003 0303 	and.w	r3, r3, #3
   292da:	4303      	orrs	r3, r0
   292dc:	6013      	str	r3, [r2, #0]
   292de:	e7e4      	b.n	292aa <queue_insert+0xca>
   292e0:	4313      	orrs	r3, r2
   292e2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   292e4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   292e6:	f003 0303 	and.w	r3, r3, #3
   292ea:	4318      	orrs	r0, r3
   292ec:	6030      	str	r0, [r6, #0]
   292ee:	e7eb      	b.n	292c8 <queue_insert+0xe8>
   292f0:	00036fbb 	.word	0x00036fbb
   292f4:	00036fe1 	.word	0x00036fe1
   292f8:	00036be5 	.word	0x00036be5
   292fc:	00036ff6 	.word	0x00036ff6
   29300:	0003700e 	.word	0x0003700e
   29304:	00037025 	.word	0x00037025

00029308 <z_impl_k_queue_cancel_wait>:
{
   29308:	b570      	push	{r4, r5, r6, lr}
   2930a:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2930c:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   29310:	f04f 0320 	mov.w	r3, #32
   29314:	f3ef 8611 	mrs	r6, BASEPRI
   29318:	f383 8811 	msr	BASEPRI, r3
   2931c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29320:	4620      	mov	r0, r4
   29322:	f001 fd2f 	bl	2ad84 <z_spin_lock_valid>
   29326:	b968      	cbnz	r0, 29344 <z_impl_k_queue_cancel_wait+0x3c>
   29328:	235c      	movs	r3, #92	; 0x5c
   2932a:	4a12      	ldr	r2, [pc, #72]	; (29374 <z_impl_k_queue_cancel_wait+0x6c>)
   2932c:	4912      	ldr	r1, [pc, #72]	; (29378 <z_impl_k_queue_cancel_wait+0x70>)
   2932e:	4813      	ldr	r0, [pc, #76]	; (2937c <z_impl_k_queue_cancel_wait+0x74>)
   29330:	f005 ff8f 	bl	2f252 <printk>
   29334:	4621      	mov	r1, r4
   29336:	4812      	ldr	r0, [pc, #72]	; (29380 <z_impl_k_queue_cancel_wait+0x78>)
   29338:	f005 ff8b 	bl	2f252 <printk>
   2933c:	215c      	movs	r1, #92	; 0x5c
   2933e:	480d      	ldr	r0, [pc, #52]	; (29374 <z_impl_k_queue_cancel_wait+0x6c>)
   29340:	f006 fa88 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29344:	4620      	mov	r0, r4
   29346:	f001 fd3b 	bl	2adc0 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2934a:	f105 000c 	add.w	r0, r5, #12
   2934e:	f001 f87f 	bl	2a450 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   29352:	b120      	cbz	r0, 2935e <z_impl_k_queue_cancel_wait+0x56>
   29354:	2200      	movs	r2, #0
   29356:	6702      	str	r2, [r0, #112]	; 0x70
   29358:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   2935a:	f000 fbc9 	bl	29af0 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2935e:	f105 0014 	add.w	r0, r5, #20
   29362:	2108      	movs	r1, #8
   29364:	f00b fb2d 	bl	349c2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   29368:	4631      	mov	r1, r6
   2936a:	4620      	mov	r0, r4
}
   2936c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   29370:	f000 b99c 	b.w	296ac <z_reschedule>
   29374:	00036fbb 	.word	0x00036fbb
   29378:	00036fe1 	.word	0x00036fe1
   2937c:	00036be5 	.word	0x00036be5
   29380:	00036ff6 	.word	0x00036ff6

00029384 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   29384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29388:	4606      	mov	r6, r0
   2938a:	4688      	mov	r8, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2938c:	f100 0408 	add.w	r4, r0, #8
   29390:	f04f 0320 	mov.w	r3, #32
   29394:	f3ef 8711 	mrs	r7, BASEPRI
   29398:	f383 8811 	msr	BASEPRI, r3
   2939c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   293a0:	4620      	mov	r0, r4
   293a2:	f001 fcef 	bl	2ad84 <z_spin_lock_valid>
   293a6:	b968      	cbnz	r0, 293c4 <z_impl_k_queue_get+0x40>
   293a8:	235c      	movs	r3, #92	; 0x5c
   293aa:	4a24      	ldr	r2, [pc, #144]	; (2943c <z_impl_k_queue_get+0xb8>)
   293ac:	4924      	ldr	r1, [pc, #144]	; (29440 <z_impl_k_queue_get+0xbc>)
   293ae:	4825      	ldr	r0, [pc, #148]	; (29444 <z_impl_k_queue_get+0xc0>)
   293b0:	f005 ff4f 	bl	2f252 <printk>
   293b4:	4621      	mov	r1, r4
   293b6:	4824      	ldr	r0, [pc, #144]	; (29448 <z_impl_k_queue_get+0xc4>)
   293b8:	f005 ff4b 	bl	2f252 <printk>
   293bc:	215c      	movs	r1, #92	; 0x5c
   293be:	481f      	ldr	r0, [pc, #124]	; (2943c <z_impl_k_queue_get+0xb8>)
   293c0:	f006 fa48 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   293c4:	4620      	mov	r0, r4
   293c6:	f001 fcfb 	bl	2adc0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   293ca:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   293cc:	b32d      	cbz	r5, 2941a <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   293ce:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   293d0:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   293d2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   293d6:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   293d8:	4628      	mov	r0, r5
	list->head = node;
   293da:	6033      	str	r3, [r6, #0]
	list->tail = node;
   293dc:	bf08      	it	eq
   293de:	6073      	streq	r3, [r6, #4]
   293e0:	2101      	movs	r1, #1
   293e2:	f00b f96c 	bl	346be <z_queue_node_peek>
   293e6:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   293e8:	4620      	mov	r0, r4
   293ea:	f001 fcd9 	bl	2ada0 <z_spin_unlock_valid>
   293ee:	b968      	cbnz	r0, 2940c <z_impl_k_queue_get+0x88>
   293f0:	2384      	movs	r3, #132	; 0x84
   293f2:	4a12      	ldr	r2, [pc, #72]	; (2943c <z_impl_k_queue_get+0xb8>)
   293f4:	4915      	ldr	r1, [pc, #84]	; (2944c <z_impl_k_queue_get+0xc8>)
   293f6:	4813      	ldr	r0, [pc, #76]	; (29444 <z_impl_k_queue_get+0xc0>)
   293f8:	f005 ff2b 	bl	2f252 <printk>
   293fc:	4621      	mov	r1, r4
   293fe:	4814      	ldr	r0, [pc, #80]	; (29450 <z_impl_k_queue_get+0xcc>)
   29400:	f005 ff27 	bl	2f252 <printk>
   29404:	2184      	movs	r1, #132	; 0x84
   29406:	480d      	ldr	r0, [pc, #52]	; (2943c <z_impl_k_queue_get+0xb8>)
   29408:	f006 fa24 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2940c:	f387 8811 	msr	BASEPRI, r7
   29410:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   29414:	4628      	mov	r0, r5
   29416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2941a:	f1b8 0f00 	cmp.w	r8, #0
   2941e:	d0e3      	beq.n	293e8 <z_impl_k_queue_get+0x64>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   29420:	4643      	mov	r3, r8
   29422:	f106 020c 	add.w	r2, r6, #12
   29426:	4639      	mov	r1, r7
   29428:	4620      	mov	r0, r4
   2942a:	f000 ff53 	bl	2a2d4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2942e:	2800      	cmp	r0, #0
   29430:	d1f0      	bne.n	29414 <z_impl_k_queue_get+0x90>
   29432:	4b08      	ldr	r3, [pc, #32]	; (29454 <z_impl_k_queue_get+0xd0>)
   29434:	689b      	ldr	r3, [r3, #8]
   29436:	695d      	ldr	r5, [r3, #20]
   29438:	e7ec      	b.n	29414 <z_impl_k_queue_get+0x90>
   2943a:	bf00      	nop
   2943c:	00036fbb 	.word	0x00036fbb
   29440:	00036fe1 	.word	0x00036fe1
   29444:	00036be5 	.word	0x00036be5
   29448:	00036ff6 	.word	0x00036ff6
   2944c:	0003700e 	.word	0x0003700e
   29450:	00037025 	.word	0x00037025
   29454:	20027418 	.word	0x20027418

00029458 <pended_on.isra.18>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   29458:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2945a:	b510      	push	{r4, lr}
   2945c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2945e:	b95b      	cbnz	r3, 29478 <pended_on.isra.18+0x20>
   29460:	4906      	ldr	r1, [pc, #24]	; (2947c <pended_on.isra.18+0x24>)
   29462:	4807      	ldr	r0, [pc, #28]	; (29480 <pended_on.isra.18+0x28>)
   29464:	f240 13d9 	movw	r3, #473	; 0x1d9
   29468:	4a06      	ldr	r2, [pc, #24]	; (29484 <pended_on.isra.18+0x2c>)
   2946a:	f005 fef2 	bl	2f252 <printk>
   2946e:	f240 11d9 	movw	r1, #473	; 0x1d9
   29472:	4804      	ldr	r0, [pc, #16]	; (29484 <pended_on.isra.18+0x2c>)
   29474:	f006 f9ee 	bl	2f854 <assert_post_action>

	return thread->base.pended_on;
}
   29478:	6820      	ldr	r0, [r4, #0]
   2947a:	bd10      	pop	{r4, pc}
   2947c:	00038b0b 	.word	0x00038b0b
   29480:	00036be5 	.word	0x00036be5
   29484:	00038ae9 	.word	0x00038ae9

00029488 <z_reset_time_slice>:
{
   29488:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2948a:	4c08      	ldr	r4, [pc, #32]	; (294ac <z_reset_time_slice+0x24>)
   2948c:	6823      	ldr	r3, [r4, #0]
   2948e:	b15b      	cbz	r3, 294a8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   29490:	f7ee ffd6 	bl	18440 <z_clock_elapsed>
   29494:	6823      	ldr	r3, [r4, #0]
   29496:	4a06      	ldr	r2, [pc, #24]	; (294b0 <z_reset_time_slice+0x28>)
   29498:	4418      	add	r0, r3
   2949a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2949c:	2100      	movs	r1, #0
}
   2949e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   294a2:	4618      	mov	r0, r3
   294a4:	f001 bf7a 	b.w	2b39c <z_set_timeout_expiry>
}
   294a8:	bd10      	pop	{r4, pc}
   294aa:	bf00      	nop
   294ac:	20027458 	.word	0x20027458
   294b0:	20027418 	.word	0x20027418

000294b4 <k_sched_time_slice_set>:
{
   294b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   294b6:	4607      	mov	r7, r0
   294b8:	460d      	mov	r5, r1
	__asm__ volatile(
   294ba:	f04f 0320 	mov.w	r3, #32
   294be:	f3ef 8411 	mrs	r4, BASEPRI
   294c2:	f383 8811 	msr	BASEPRI, r3
   294c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   294ca:	4820      	ldr	r0, [pc, #128]	; (2954c <k_sched_time_slice_set+0x98>)
   294cc:	f001 fc5a 	bl	2ad84 <z_spin_lock_valid>
   294d0:	b968      	cbnz	r0, 294ee <k_sched_time_slice_set+0x3a>
   294d2:	235c      	movs	r3, #92	; 0x5c
   294d4:	4a1e      	ldr	r2, [pc, #120]	; (29550 <k_sched_time_slice_set+0x9c>)
   294d6:	491f      	ldr	r1, [pc, #124]	; (29554 <k_sched_time_slice_set+0xa0>)
   294d8:	481f      	ldr	r0, [pc, #124]	; (29558 <k_sched_time_slice_set+0xa4>)
   294da:	f005 feba 	bl	2f252 <printk>
   294de:	491b      	ldr	r1, [pc, #108]	; (2954c <k_sched_time_slice_set+0x98>)
   294e0:	481e      	ldr	r0, [pc, #120]	; (2955c <k_sched_time_slice_set+0xa8>)
   294e2:	f005 feb6 	bl	2f252 <printk>
   294e6:	215c      	movs	r1, #92	; 0x5c
   294e8:	4819      	ldr	r0, [pc, #100]	; (29550 <k_sched_time_slice_set+0x9c>)
   294ea:	f006 f9b3 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   294ee:	4817      	ldr	r0, [pc, #92]	; (2954c <k_sched_time_slice_set+0x98>)
   294f0:	f001 fc66 	bl	2adc0 <z_spin_lock_set_owner>
   294f4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   294f8:	2200      	movs	r2, #0
   294fa:	f240 30e7 	movw	r0, #999	; 0x3e7
   294fe:	2100      	movs	r1, #0
   29500:	4b17      	ldr	r3, [pc, #92]	; (29560 <k_sched_time_slice_set+0xac>)
   29502:	fbe6 0107 	umlal	r0, r1, r6, r7
   29506:	611a      	str	r2, [r3, #16]
   29508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2950c:	2300      	movs	r3, #0
   2950e:	f7e4 f92f 	bl	d770 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   29512:	4b14      	ldr	r3, [pc, #80]	; (29564 <k_sched_time_slice_set+0xb0>)
   29514:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   29516:	4b14      	ldr	r3, [pc, #80]	; (29568 <k_sched_time_slice_set+0xb4>)
   29518:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2951a:	f7ff ffb5 	bl	29488 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2951e:	480b      	ldr	r0, [pc, #44]	; (2954c <k_sched_time_slice_set+0x98>)
   29520:	f001 fc3e 	bl	2ada0 <z_spin_unlock_valid>
   29524:	b968      	cbnz	r0, 29542 <k_sched_time_slice_set+0x8e>
   29526:	2384      	movs	r3, #132	; 0x84
   29528:	4a09      	ldr	r2, [pc, #36]	; (29550 <k_sched_time_slice_set+0x9c>)
   2952a:	4910      	ldr	r1, [pc, #64]	; (2956c <k_sched_time_slice_set+0xb8>)
   2952c:	480a      	ldr	r0, [pc, #40]	; (29558 <k_sched_time_slice_set+0xa4>)
   2952e:	f005 fe90 	bl	2f252 <printk>
   29532:	4906      	ldr	r1, [pc, #24]	; (2954c <k_sched_time_slice_set+0x98>)
   29534:	480e      	ldr	r0, [pc, #56]	; (29570 <k_sched_time_slice_set+0xbc>)
   29536:	f005 fe8c 	bl	2f252 <printk>
   2953a:	2184      	movs	r1, #132	; 0x84
   2953c:	4804      	ldr	r0, [pc, #16]	; (29550 <k_sched_time_slice_set+0x9c>)
   2953e:	f006 f989 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29542:	f384 8811 	msr	BASEPRI, r4
   29546:	f3bf 8f6f 	isb	sy
}
   2954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2954c:	20027450 	.word	0x20027450
   29550:	00036fbb 	.word	0x00036fbb
   29554:	00036fe1 	.word	0x00036fe1
   29558:	00036be5 	.word	0x00036be5
   2955c:	00036ff6 	.word	0x00036ff6
   29560:	20027418 	.word	0x20027418
   29564:	20027458 	.word	0x20027458
   29568:	20027454 	.word	0x20027454
   2956c:	0003700e 	.word	0x0003700e
   29570:	00037025 	.word	0x00037025

00029574 <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   29574:	b538      	push	{r3, r4, r5, lr}
   29576:	4604      	mov	r4, r0
	__asm__ volatile(
   29578:	f04f 0320 	mov.w	r3, #32
   2957c:	f3ef 8511 	mrs	r5, BASEPRI
   29580:	f383 8811 	msr	BASEPRI, r3
   29584:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29588:	4818      	ldr	r0, [pc, #96]	; (295ec <z_find_first_thread_to_unpend+0x78>)
   2958a:	f001 fbfb 	bl	2ad84 <z_spin_lock_valid>
   2958e:	b968      	cbnz	r0, 295ac <z_find_first_thread_to_unpend+0x38>
   29590:	235c      	movs	r3, #92	; 0x5c
   29592:	4a17      	ldr	r2, [pc, #92]	; (295f0 <z_find_first_thread_to_unpend+0x7c>)
   29594:	4917      	ldr	r1, [pc, #92]	; (295f4 <z_find_first_thread_to_unpend+0x80>)
   29596:	4818      	ldr	r0, [pc, #96]	; (295f8 <z_find_first_thread_to_unpend+0x84>)
   29598:	f005 fe5b 	bl	2f252 <printk>
   2959c:	4913      	ldr	r1, [pc, #76]	; (295ec <z_find_first_thread_to_unpend+0x78>)
   2959e:	4817      	ldr	r0, [pc, #92]	; (295fc <z_find_first_thread_to_unpend+0x88>)
   295a0:	f005 fe57 	bl	2f252 <printk>
   295a4:	215c      	movs	r1, #92	; 0x5c
   295a6:	4812      	ldr	r0, [pc, #72]	; (295f0 <z_find_first_thread_to_unpend+0x7c>)
   295a8:	f006 f954 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   295ac:	480f      	ldr	r0, [pc, #60]	; (295ec <z_find_first_thread_to_unpend+0x78>)
   295ae:	f001 fc07 	bl	2adc0 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   295b2:	4620      	mov	r0, r4
   295b4:	f00b f8c5 	bl	34742 <z_priq_dumb_best>
   295b8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   295ba:	480c      	ldr	r0, [pc, #48]	; (295ec <z_find_first_thread_to_unpend+0x78>)
   295bc:	f001 fbf0 	bl	2ada0 <z_spin_unlock_valid>
   295c0:	b968      	cbnz	r0, 295de <z_find_first_thread_to_unpend+0x6a>
   295c2:	2384      	movs	r3, #132	; 0x84
   295c4:	4a0a      	ldr	r2, [pc, #40]	; (295f0 <z_find_first_thread_to_unpend+0x7c>)
   295c6:	490e      	ldr	r1, [pc, #56]	; (29600 <z_find_first_thread_to_unpend+0x8c>)
   295c8:	480b      	ldr	r0, [pc, #44]	; (295f8 <z_find_first_thread_to_unpend+0x84>)
   295ca:	f005 fe42 	bl	2f252 <printk>
   295ce:	4907      	ldr	r1, [pc, #28]	; (295ec <z_find_first_thread_to_unpend+0x78>)
   295d0:	480c      	ldr	r0, [pc, #48]	; (29604 <z_find_first_thread_to_unpend+0x90>)
   295d2:	f005 fe3e 	bl	2f252 <printk>
   295d6:	2184      	movs	r1, #132	; 0x84
   295d8:	4805      	ldr	r0, [pc, #20]	; (295f0 <z_find_first_thread_to_unpend+0x7c>)
   295da:	f006 f93b 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   295de:	f385 8811 	msr	BASEPRI, r5
   295e2:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   295e6:	4620      	mov	r0, r4
   295e8:	bd38      	pop	{r3, r4, r5, pc}
   295ea:	bf00      	nop
   295ec:	20027450 	.word	0x20027450
   295f0:	00036fbb 	.word	0x00036fbb
   295f4:	00036fe1 	.word	0x00036fe1
   295f8:	00036be5 	.word	0x00036be5
   295fc:	00036ff6 	.word	0x00036ff6
   29600:	0003700e 	.word	0x0003700e
   29604:	00037025 	.word	0x00037025

00029608 <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   29608:	b538      	push	{r3, r4, r5, lr}
   2960a:	4604      	mov	r4, r0
	__asm__ volatile(
   2960c:	f04f 0320 	mov.w	r3, #32
   29610:	f3ef 8511 	mrs	r5, BASEPRI
   29614:	f383 8811 	msr	BASEPRI, r3
   29618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2961c:	481c      	ldr	r0, [pc, #112]	; (29690 <z_unpend_thread_no_timeout+0x88>)
   2961e:	f001 fbb1 	bl	2ad84 <z_spin_lock_valid>
   29622:	b968      	cbnz	r0, 29640 <z_unpend_thread_no_timeout+0x38>
   29624:	235c      	movs	r3, #92	; 0x5c
   29626:	4a1b      	ldr	r2, [pc, #108]	; (29694 <z_unpend_thread_no_timeout+0x8c>)
   29628:	491b      	ldr	r1, [pc, #108]	; (29698 <z_unpend_thread_no_timeout+0x90>)
   2962a:	481c      	ldr	r0, [pc, #112]	; (2969c <z_unpend_thread_no_timeout+0x94>)
   2962c:	f005 fe11 	bl	2f252 <printk>
   29630:	4917      	ldr	r1, [pc, #92]	; (29690 <z_unpend_thread_no_timeout+0x88>)
   29632:	481b      	ldr	r0, [pc, #108]	; (296a0 <z_unpend_thread_no_timeout+0x98>)
   29634:	f005 fe0d 	bl	2f252 <printk>
   29638:	215c      	movs	r1, #92	; 0x5c
   2963a:	4816      	ldr	r0, [pc, #88]	; (29694 <z_unpend_thread_no_timeout+0x8c>)
   2963c:	f006 f90a 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29640:	4813      	ldr	r0, [pc, #76]	; (29690 <z_unpend_thread_no_timeout+0x88>)
   29642:	f001 fbbd 	bl	2adc0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   29646:	f104 0008 	add.w	r0, r4, #8
   2964a:	f7ff ff05 	bl	29458 <pended_on.isra.18>
   2964e:	4621      	mov	r1, r4
   29650:	f000 f8e0 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   29654:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29656:	480e      	ldr	r0, [pc, #56]	; (29690 <z_unpend_thread_no_timeout+0x88>)
   29658:	f023 0302 	bic.w	r3, r3, #2
   2965c:	7363      	strb	r3, [r4, #13]
		z_mark_thread_as_not_pending(thread);
		thread->base.pended_on = NULL;
   2965e:	2300      	movs	r3, #0
   29660:	60a3      	str	r3, [r4, #8]
   29662:	f001 fb9d 	bl	2ada0 <z_spin_unlock_valid>
   29666:	b968      	cbnz	r0, 29684 <z_unpend_thread_no_timeout+0x7c>
   29668:	2384      	movs	r3, #132	; 0x84
   2966a:	4a0a      	ldr	r2, [pc, #40]	; (29694 <z_unpend_thread_no_timeout+0x8c>)
   2966c:	490d      	ldr	r1, [pc, #52]	; (296a4 <z_unpend_thread_no_timeout+0x9c>)
   2966e:	480b      	ldr	r0, [pc, #44]	; (2969c <z_unpend_thread_no_timeout+0x94>)
   29670:	f005 fdef 	bl	2f252 <printk>
   29674:	4906      	ldr	r1, [pc, #24]	; (29690 <z_unpend_thread_no_timeout+0x88>)
   29676:	480c      	ldr	r0, [pc, #48]	; (296a8 <z_unpend_thread_no_timeout+0xa0>)
   29678:	f005 fdeb 	bl	2f252 <printk>
   2967c:	2184      	movs	r1, #132	; 0x84
   2967e:	4805      	ldr	r0, [pc, #20]	; (29694 <z_unpend_thread_no_timeout+0x8c>)
   29680:	f006 f8e8 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29684:	f385 8811 	msr	BASEPRI, r5
   29688:	f3bf 8f6f 	isb	sy
	}
}
   2968c:	bd38      	pop	{r3, r4, r5, pc}
   2968e:	bf00      	nop
   29690:	20027450 	.word	0x20027450
   29694:	00036fbb 	.word	0x00036fbb
   29698:	00036fe1 	.word	0x00036fe1
   2969c:	00036be5 	.word	0x00036be5
   296a0:	00036ff6 	.word	0x00036ff6
   296a4:	0003700e 	.word	0x0003700e
   296a8:	00037025 	.word	0x00037025

000296ac <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   296ac:	b538      	push	{r3, r4, r5, lr}
   296ae:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   296b0:	460d      	mov	r5, r1
   296b2:	b9c1      	cbnz	r1, 296e6 <z_reschedule+0x3a>
   296b4:	f3ef 8305 	mrs	r3, IPSR
   296b8:	b9ab      	cbnz	r3, 296e6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   296ba:	f001 fb71 	bl	2ada0 <z_spin_unlock_valid>
   296be:	b968      	cbnz	r0, 296dc <z_reschedule+0x30>
   296c0:	239b      	movs	r3, #155	; 0x9b
   296c2:	4a14      	ldr	r2, [pc, #80]	; (29714 <z_reschedule+0x68>)
   296c4:	4914      	ldr	r1, [pc, #80]	; (29718 <z_reschedule+0x6c>)
   296c6:	4815      	ldr	r0, [pc, #84]	; (2971c <z_reschedule+0x70>)
   296c8:	f005 fdc3 	bl	2f252 <printk>
   296cc:	4621      	mov	r1, r4
   296ce:	4814      	ldr	r0, [pc, #80]	; (29720 <z_reschedule+0x74>)
   296d0:	f005 fdbf 	bl	2f252 <printk>
   296d4:	219b      	movs	r1, #155	; 0x9b
   296d6:	480f      	ldr	r0, [pc, #60]	; (29714 <z_reschedule+0x68>)
   296d8:	f006 f8bc 	bl	2f854 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   296dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   296e0:	2000      	movs	r0, #0
   296e2:	f7ef b9f3 	b.w	18acc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   296e6:	4620      	mov	r0, r4
   296e8:	f001 fb5a 	bl	2ada0 <z_spin_unlock_valid>
   296ec:	b968      	cbnz	r0, 2970a <z_reschedule+0x5e>
   296ee:	2384      	movs	r3, #132	; 0x84
   296f0:	4a08      	ldr	r2, [pc, #32]	; (29714 <z_reschedule+0x68>)
   296f2:	4909      	ldr	r1, [pc, #36]	; (29718 <z_reschedule+0x6c>)
   296f4:	4809      	ldr	r0, [pc, #36]	; (2971c <z_reschedule+0x70>)
   296f6:	f005 fdac 	bl	2f252 <printk>
   296fa:	4621      	mov	r1, r4
   296fc:	4808      	ldr	r0, [pc, #32]	; (29720 <z_reschedule+0x74>)
   296fe:	f005 fda8 	bl	2f252 <printk>
   29702:	2184      	movs	r1, #132	; 0x84
   29704:	4803      	ldr	r0, [pc, #12]	; (29714 <z_reschedule+0x68>)
   29706:	f006 f8a5 	bl	2f854 <assert_post_action>
   2970a:	f385 8811 	msr	BASEPRI, r5
   2970e:	f3bf 8f6f 	isb	sy
   29712:	bd38      	pop	{r3, r4, r5, pc}
   29714:	00036fbb 	.word	0x00036fbb
   29718:	0003700e 	.word	0x0003700e
   2971c:	00036be5 	.word	0x00036be5
   29720:	00037025 	.word	0x00037025

00029724 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   29724:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29726:	f04f 0320 	mov.w	r3, #32
   2972a:	f3ef 8511 	mrs	r5, BASEPRI
   2972e:	f383 8811 	msr	BASEPRI, r3
   29732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29736:	482b      	ldr	r0, [pc, #172]	; (297e4 <k_sched_lock+0xc0>)
   29738:	f001 fb24 	bl	2ad84 <z_spin_lock_valid>
   2973c:	b968      	cbnz	r0, 2975a <k_sched_lock+0x36>
   2973e:	235c      	movs	r3, #92	; 0x5c
   29740:	4a29      	ldr	r2, [pc, #164]	; (297e8 <k_sched_lock+0xc4>)
   29742:	492a      	ldr	r1, [pc, #168]	; (297ec <k_sched_lock+0xc8>)
   29744:	482a      	ldr	r0, [pc, #168]	; (297f0 <k_sched_lock+0xcc>)
   29746:	f005 fd84 	bl	2f252 <printk>
   2974a:	4926      	ldr	r1, [pc, #152]	; (297e4 <k_sched_lock+0xc0>)
   2974c:	4829      	ldr	r0, [pc, #164]	; (297f4 <k_sched_lock+0xd0>)
   2974e:	f005 fd80 	bl	2f252 <printk>
   29752:	215c      	movs	r1, #92	; 0x5c
   29754:	4824      	ldr	r0, [pc, #144]	; (297e8 <k_sched_lock+0xc4>)
   29756:	f006 f87d 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2975a:	4822      	ldr	r0, [pc, #136]	; (297e4 <k_sched_lock+0xc0>)
   2975c:	f001 fb30 	bl	2adc0 <z_spin_lock_set_owner>
   29760:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   29764:	b173      	cbz	r3, 29784 <k_sched_lock+0x60>
   29766:	4924      	ldr	r1, [pc, #144]	; (297f8 <k_sched_lock+0xd4>)
   29768:	f240 130b 	movw	r3, #267	; 0x10b
   2976c:	4a23      	ldr	r2, [pc, #140]	; (297fc <k_sched_lock+0xd8>)
   2976e:	4820      	ldr	r0, [pc, #128]	; (297f0 <k_sched_lock+0xcc>)
   29770:	f005 fd6f 	bl	2f252 <printk>
   29774:	4822      	ldr	r0, [pc, #136]	; (29800 <k_sched_lock+0xdc>)
   29776:	f005 fd6c 	bl	2f252 <printk>
   2977a:	f240 110b 	movw	r1, #267	; 0x10b
   2977e:	481f      	ldr	r0, [pc, #124]	; (297fc <k_sched_lock+0xd8>)
   29780:	f006 f868 	bl	2f854 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   29784:	4c1f      	ldr	r4, [pc, #124]	; (29804 <k_sched_lock+0xe0>)
   29786:	68a2      	ldr	r2, [r4, #8]
   29788:	7bd2      	ldrb	r2, [r2, #15]
   2978a:	2a01      	cmp	r2, #1
   2978c:	d10e      	bne.n	297ac <k_sched_lock+0x88>
   2978e:	491e      	ldr	r1, [pc, #120]	; (29808 <k_sched_lock+0xe4>)
   29790:	f44f 7386 	mov.w	r3, #268	; 0x10c
   29794:	4a19      	ldr	r2, [pc, #100]	; (297fc <k_sched_lock+0xd8>)
   29796:	4816      	ldr	r0, [pc, #88]	; (297f0 <k_sched_lock+0xcc>)
   29798:	f005 fd5b 	bl	2f252 <printk>
   2979c:	4818      	ldr	r0, [pc, #96]	; (29800 <k_sched_lock+0xdc>)
   2979e:	f005 fd58 	bl	2f252 <printk>
   297a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
   297a6:	4815      	ldr	r0, [pc, #84]	; (297fc <k_sched_lock+0xd8>)
   297a8:	f006 f854 	bl	2f854 <assert_post_action>
	--_current->base.sched_locked;
   297ac:	68a2      	ldr	r2, [r4, #8]
   297ae:	7bd3      	ldrb	r3, [r2, #15]
   297b0:	3b01      	subs	r3, #1
   297b2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   297b4:	480b      	ldr	r0, [pc, #44]	; (297e4 <k_sched_lock+0xc0>)
   297b6:	f001 faf3 	bl	2ada0 <z_spin_unlock_valid>
   297ba:	b968      	cbnz	r0, 297d8 <k_sched_lock+0xb4>
   297bc:	2384      	movs	r3, #132	; 0x84
   297be:	4a0a      	ldr	r2, [pc, #40]	; (297e8 <k_sched_lock+0xc4>)
   297c0:	4912      	ldr	r1, [pc, #72]	; (2980c <k_sched_lock+0xe8>)
   297c2:	480b      	ldr	r0, [pc, #44]	; (297f0 <k_sched_lock+0xcc>)
   297c4:	f005 fd45 	bl	2f252 <printk>
   297c8:	4906      	ldr	r1, [pc, #24]	; (297e4 <k_sched_lock+0xc0>)
   297ca:	4811      	ldr	r0, [pc, #68]	; (29810 <k_sched_lock+0xec>)
   297cc:	f005 fd41 	bl	2f252 <printk>
   297d0:	2184      	movs	r1, #132	; 0x84
   297d2:	4805      	ldr	r0, [pc, #20]	; (297e8 <k_sched_lock+0xc4>)
   297d4:	f006 f83e 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   297d8:	f385 8811 	msr	BASEPRI, r5
   297dc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   297e0:	bd38      	pop	{r3, r4, r5, pc}
   297e2:	bf00      	nop
   297e4:	20027450 	.word	0x20027450
   297e8:	00036fbb 	.word	0x00036fbb
   297ec:	00036fe1 	.word	0x00036fe1
   297f0:	00036be5 	.word	0x00036be5
   297f4:	00036ff6 	.word	0x00036ff6
   297f8:	00038a77 	.word	0x00038a77
   297fc:	00038a4c 	.word	0x00038a4c
   29800:	00037086 	.word	0x00037086
   29804:	20027418 	.word	0x20027418
   29808:	00038a89 	.word	0x00038a89
   2980c:	0003700e 	.word	0x0003700e
   29810:	00037025 	.word	0x00037025

00029814 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   29814:	4b11      	ldr	r3, [pc, #68]	; (2985c <z_priq_dumb_remove+0x48>)
{
   29816:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   29818:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2981c:	4282      	cmp	r2, r0
{
   2981e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   29820:	d105      	bne.n	2982e <z_priq_dumb_remove+0x1a>
   29822:	689b      	ldr	r3, [r3, #8]
   29824:	428b      	cmp	r3, r1
   29826:	d102      	bne.n	2982e <z_priq_dumb_remove+0x1a>
   29828:	7b4b      	ldrb	r3, [r1, #13]
   2982a:	06db      	lsls	r3, r3, #27
   2982c:	d115      	bne.n	2985a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2982e:	4b0c      	ldr	r3, [pc, #48]	; (29860 <z_priq_dumb_remove+0x4c>)
   29830:	429c      	cmp	r4, r3
   29832:	d10b      	bne.n	2984c <z_priq_dumb_remove+0x38>
   29834:	490b      	ldr	r1, [pc, #44]	; (29864 <z_priq_dumb_remove+0x50>)
   29836:	480c      	ldr	r0, [pc, #48]	; (29868 <z_priq_dumb_remove+0x54>)
   29838:	f240 336b 	movw	r3, #875	; 0x36b
   2983c:	4a0b      	ldr	r2, [pc, #44]	; (2986c <z_priq_dumb_remove+0x58>)
   2983e:	f005 fd08 	bl	2f252 <printk>
   29842:	f240 316b 	movw	r1, #875	; 0x36b
   29846:	4809      	ldr	r0, [pc, #36]	; (2986c <z_priq_dumb_remove+0x58>)
   29848:	f006 f804 	bl	2f854 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2984c:	e9d4 3200 	ldrd	r3, r2, [r4]
   29850:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   29852:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29854:	2300      	movs	r3, #0
	node->prev = NULL;
   29856:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2985a:	bd10      	pop	{r4, pc}
   2985c:	20027418 	.word	0x20027418
   29860:	20022a40 	.word	0x20022a40
   29864:	00038b5f 	.word	0x00038b5f
   29868:	00036be5 	.word	0x00036be5
   2986c:	00038ae9 	.word	0x00038ae9

00029870 <z_unpend_thread>:
{
   29870:	b538      	push	{r3, r4, r5, lr}
   29872:	4604      	mov	r4, r0
	__asm__ volatile(
   29874:	f04f 0320 	mov.w	r3, #32
   29878:	f3ef 8511 	mrs	r5, BASEPRI
   2987c:	f383 8811 	msr	BASEPRI, r3
   29880:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29884:	481e      	ldr	r0, [pc, #120]	; (29900 <z_unpend_thread+0x90>)
   29886:	f001 fa7d 	bl	2ad84 <z_spin_lock_valid>
   2988a:	b968      	cbnz	r0, 298a8 <z_unpend_thread+0x38>
   2988c:	235c      	movs	r3, #92	; 0x5c
   2988e:	4a1d      	ldr	r2, [pc, #116]	; (29904 <z_unpend_thread+0x94>)
   29890:	491d      	ldr	r1, [pc, #116]	; (29908 <z_unpend_thread+0x98>)
   29892:	481e      	ldr	r0, [pc, #120]	; (2990c <z_unpend_thread+0x9c>)
   29894:	f005 fcdd 	bl	2f252 <printk>
   29898:	4919      	ldr	r1, [pc, #100]	; (29900 <z_unpend_thread+0x90>)
   2989a:	481d      	ldr	r0, [pc, #116]	; (29910 <z_unpend_thread+0xa0>)
   2989c:	f005 fcd9 	bl	2f252 <printk>
   298a0:	215c      	movs	r1, #92	; 0x5c
   298a2:	4818      	ldr	r0, [pc, #96]	; (29904 <z_unpend_thread+0x94>)
   298a4:	f005 ffd6 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   298a8:	4815      	ldr	r0, [pc, #84]	; (29900 <z_unpend_thread+0x90>)
   298aa:	f001 fa89 	bl	2adc0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   298ae:	f104 0008 	add.w	r0, r4, #8
   298b2:	f7ff fdd1 	bl	29458 <pended_on.isra.18>
   298b6:	4621      	mov	r1, r4
   298b8:	f7ff ffac 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   298bc:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298be:	4810      	ldr	r0, [pc, #64]	; (29900 <z_unpend_thread+0x90>)
   298c0:	f023 0302 	bic.w	r3, r3, #2
   298c4:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   298c6:	2300      	movs	r3, #0
   298c8:	60a3      	str	r3, [r4, #8]
   298ca:	f001 fa69 	bl	2ada0 <z_spin_unlock_valid>
   298ce:	b968      	cbnz	r0, 298ec <z_unpend_thread+0x7c>
   298d0:	2384      	movs	r3, #132	; 0x84
   298d2:	4a0c      	ldr	r2, [pc, #48]	; (29904 <z_unpend_thread+0x94>)
   298d4:	490f      	ldr	r1, [pc, #60]	; (29914 <z_unpend_thread+0xa4>)
   298d6:	480d      	ldr	r0, [pc, #52]	; (2990c <z_unpend_thread+0x9c>)
   298d8:	f005 fcbb 	bl	2f252 <printk>
   298dc:	4908      	ldr	r1, [pc, #32]	; (29900 <z_unpend_thread+0x90>)
   298de:	480e      	ldr	r0, [pc, #56]	; (29918 <z_unpend_thread+0xa8>)
   298e0:	f005 fcb7 	bl	2f252 <printk>
   298e4:	2184      	movs	r1, #132	; 0x84
   298e6:	4807      	ldr	r0, [pc, #28]	; (29904 <z_unpend_thread+0x94>)
   298e8:	f005 ffb4 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   298ec:	f385 8811 	msr	BASEPRI, r5
   298f0:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   298f4:	f104 0018 	add.w	r0, r4, #24
}
   298f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   298fc:	f001 bc6e 	b.w	2b1dc <z_abort_timeout>
   29900:	20027450 	.word	0x20027450
   29904:	00036fbb 	.word	0x00036fbb
   29908:	00036fe1 	.word	0x00036fe1
   2990c:	00036be5 	.word	0x00036be5
   29910:	00036ff6 	.word	0x00036ff6
   29914:	0003700e 	.word	0x0003700e
   29918:	00037025 	.word	0x00037025

0002991c <update_cache>:
{
   2991c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2991e:	4c10      	ldr	r4, [pc, #64]	; (29960 <update_cache+0x44>)
{
   29920:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   29922:	f104 0028 	add.w	r0, r4, #40	; 0x28
   29926:	f00a ff0c 	bl	34742 <z_priq_dumb_best>
   2992a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   2992c:	68a3      	ldr	r3, [r4, #8]
   2992e:	7b59      	ldrb	r1, [r3, #13]
   29930:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   29932:	bf44      	itt	mi
   29934:	f041 0108 	orrmi.w	r1, r1, #8
   29938:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   2993a:	b905      	cbnz	r5, 2993e <update_cache+0x22>
   2993c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2993e:	b94e      	cbnz	r6, 29954 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   29940:	7b5a      	ldrb	r2, [r3, #13]
   29942:	06d2      	lsls	r2, r2, #27
   29944:	d106      	bne.n	29954 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   29946:	69aa      	ldr	r2, [r5, #24]
   29948:	b922      	cbnz	r2, 29954 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   2994a:	89da      	ldrh	r2, [r3, #14]
   2994c:	2a7f      	cmp	r2, #127	; 0x7f
   2994e:	d901      	bls.n	29954 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   29950:	6263      	str	r3, [r4, #36]	; 0x24
}
   29952:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   29954:	42ab      	cmp	r3, r5
   29956:	d001      	beq.n	2995c <update_cache+0x40>
			z_reset_time_slice();
   29958:	f7ff fd96 	bl	29488 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2995c:	6265      	str	r5, [r4, #36]	; 0x24
}
   2995e:	e7f8      	b.n	29952 <update_cache+0x36>
   29960:	20027418 	.word	0x20027418

00029964 <k_sched_unlock>:
{
   29964:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29966:	f04f 0320 	mov.w	r3, #32
   2996a:	f3ef 8511 	mrs	r5, BASEPRI
   2996e:	f383 8811 	msr	BASEPRI, r3
   29972:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29976:	482d      	ldr	r0, [pc, #180]	; (29a2c <k_sched_unlock+0xc8>)
   29978:	f001 fa04 	bl	2ad84 <z_spin_lock_valid>
   2997c:	b968      	cbnz	r0, 2999a <k_sched_unlock+0x36>
   2997e:	235c      	movs	r3, #92	; 0x5c
   29980:	4a2b      	ldr	r2, [pc, #172]	; (29a30 <k_sched_unlock+0xcc>)
   29982:	492c      	ldr	r1, [pc, #176]	; (29a34 <k_sched_unlock+0xd0>)
   29984:	482c      	ldr	r0, [pc, #176]	; (29a38 <k_sched_unlock+0xd4>)
   29986:	f005 fc64 	bl	2f252 <printk>
   2998a:	4928      	ldr	r1, [pc, #160]	; (29a2c <k_sched_unlock+0xc8>)
   2998c:	482b      	ldr	r0, [pc, #172]	; (29a3c <k_sched_unlock+0xd8>)
   2998e:	f005 fc60 	bl	2f252 <printk>
   29992:	215c      	movs	r1, #92	; 0x5c
   29994:	4826      	ldr	r0, [pc, #152]	; (29a30 <k_sched_unlock+0xcc>)
   29996:	f005 ff5d 	bl	2f854 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   2999a:	4c29      	ldr	r4, [pc, #164]	; (29a40 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   2999c:	4823      	ldr	r0, [pc, #140]	; (29a2c <k_sched_unlock+0xc8>)
   2999e:	f001 fa0f 	bl	2adc0 <z_spin_lock_set_owner>
   299a2:	68a2      	ldr	r2, [r4, #8]
   299a4:	7bd2      	ldrb	r2, [r2, #15]
   299a6:	b972      	cbnz	r2, 299c6 <k_sched_unlock+0x62>
   299a8:	4926      	ldr	r1, [pc, #152]	; (29a44 <k_sched_unlock+0xe0>)
   299aa:	f240 330a 	movw	r3, #778	; 0x30a
   299ae:	4a26      	ldr	r2, [pc, #152]	; (29a48 <k_sched_unlock+0xe4>)
   299b0:	4821      	ldr	r0, [pc, #132]	; (29a38 <k_sched_unlock+0xd4>)
   299b2:	f005 fc4e 	bl	2f252 <printk>
   299b6:	4825      	ldr	r0, [pc, #148]	; (29a4c <k_sched_unlock+0xe8>)
   299b8:	f005 fc4b 	bl	2f252 <printk>
   299bc:	f240 310a 	movw	r1, #778	; 0x30a
   299c0:	4821      	ldr	r0, [pc, #132]	; (29a48 <k_sched_unlock+0xe4>)
   299c2:	f005 ff47 	bl	2f854 <assert_post_action>
   299c6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   299ca:	b173      	cbz	r3, 299ea <k_sched_unlock+0x86>
   299cc:	4920      	ldr	r1, [pc, #128]	; (29a50 <k_sched_unlock+0xec>)
   299ce:	f240 330b 	movw	r3, #779	; 0x30b
   299d2:	4a1d      	ldr	r2, [pc, #116]	; (29a48 <k_sched_unlock+0xe4>)
   299d4:	4818      	ldr	r0, [pc, #96]	; (29a38 <k_sched_unlock+0xd4>)
   299d6:	f005 fc3c 	bl	2f252 <printk>
   299da:	481c      	ldr	r0, [pc, #112]	; (29a4c <k_sched_unlock+0xe8>)
   299dc:	f005 fc39 	bl	2f252 <printk>
   299e0:	f240 310b 	movw	r1, #779	; 0x30b
   299e4:	4818      	ldr	r0, [pc, #96]	; (29a48 <k_sched_unlock+0xe4>)
   299e6:	f005 ff35 	bl	2f854 <assert_post_action>
		++_current->base.sched_locked;
   299ea:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   299ec:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   299ee:	7bd3      	ldrb	r3, [r2, #15]
   299f0:	3301      	adds	r3, #1
   299f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   299f4:	f7ff ff92 	bl	2991c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   299f8:	480c      	ldr	r0, [pc, #48]	; (29a2c <k_sched_unlock+0xc8>)
   299fa:	f001 f9d1 	bl	2ada0 <z_spin_unlock_valid>
   299fe:	b968      	cbnz	r0, 29a1c <k_sched_unlock+0xb8>
   29a00:	2384      	movs	r3, #132	; 0x84
   29a02:	4a0b      	ldr	r2, [pc, #44]	; (29a30 <k_sched_unlock+0xcc>)
   29a04:	4913      	ldr	r1, [pc, #76]	; (29a54 <k_sched_unlock+0xf0>)
   29a06:	480c      	ldr	r0, [pc, #48]	; (29a38 <k_sched_unlock+0xd4>)
   29a08:	f005 fc23 	bl	2f252 <printk>
   29a0c:	4907      	ldr	r1, [pc, #28]	; (29a2c <k_sched_unlock+0xc8>)
   29a0e:	4812      	ldr	r0, [pc, #72]	; (29a58 <k_sched_unlock+0xf4>)
   29a10:	f005 fc1f 	bl	2f252 <printk>
   29a14:	2184      	movs	r1, #132	; 0x84
   29a16:	4806      	ldr	r0, [pc, #24]	; (29a30 <k_sched_unlock+0xcc>)
   29a18:	f005 ff1c 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29a1c:	f385 8811 	msr	BASEPRI, r5
   29a20:	f3bf 8f6f 	isb	sy
}
   29a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   29a28:	f00a be81 	b.w	3472e <z_reschedule_unlocked>
   29a2c:	20027450 	.word	0x20027450
   29a30:	00036fbb 	.word	0x00036fbb
   29a34:	00036fe1 	.word	0x00036fe1
   29a38:	00036be5 	.word	0x00036be5
   29a3c:	00036ff6 	.word	0x00036ff6
   29a40:	20027418 	.word	0x20027418
   29a44:	00038ab9 	.word	0x00038ab9
   29a48:	00038ae9 	.word	0x00038ae9
   29a4c:	00037086 	.word	0x00037086
   29a50:	00038a77 	.word	0x00038a77
   29a54:	0003700e 	.word	0x0003700e
   29a58:	00037025 	.word	0x00037025

00029a5c <ready_thread>:
{
   29a5c:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29a5e:	7b43      	ldrb	r3, [r0, #13]
   29a60:	4604      	mov	r4, r0
   29a62:	06db      	lsls	r3, r3, #27
   29a64:	d138      	bne.n	29ad8 <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
   29a66:	6983      	ldr	r3, [r0, #24]
   29a68:	2b00      	cmp	r3, #0
   29a6a:	d135      	bne.n	29ad8 <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29a6c:	4b1b      	ldr	r3, [pc, #108]	; (29adc <ready_thread+0x80>)
   29a6e:	4298      	cmp	r0, r3
   29a70:	d10b      	bne.n	29a8a <ready_thread+0x2e>
   29a72:	491b      	ldr	r1, [pc, #108]	; (29ae0 <ready_thread+0x84>)
   29a74:	481b      	ldr	r0, [pc, #108]	; (29ae4 <ready_thread+0x88>)
   29a76:	f240 3355 	movw	r3, #853	; 0x355
   29a7a:	4a1b      	ldr	r2, [pc, #108]	; (29ae8 <ready_thread+0x8c>)
   29a7c:	f005 fbe9 	bl	2f252 <printk>
   29a80:	f240 3155 	movw	r1, #853	; 0x355
   29a84:	4818      	ldr	r0, [pc, #96]	; (29ae8 <ready_thread+0x8c>)
   29a86:	f005 fee5 	bl	2f854 <assert_post_action>
	return list->head == list;
   29a8a:	4a18      	ldr	r2, [pc, #96]	; (29aec <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a8c:	f102 0128 	add.w	r1, r2, #40	; 0x28
   29a90:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   29a94:	428b      	cmp	r3, r1
   29a96:	d019      	beq.n	29acc <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29a98:	b1c3      	cbz	r3, 29acc <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   29a9a:	f994 500e 	ldrsb.w	r5, [r4, #14]
   29a9e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   29aa2:	42ae      	cmp	r6, r5
   29aa4:	dd0d      	ble.n	29ac2 <ready_thread+0x66>
	node->prev = successor->prev;
   29aa6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   29aa8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   29aac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   29aae:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   29ab0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   29ab2:	2000      	movs	r0, #0
   29ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   29ab8:	7363      	strb	r3, [r4, #13]
}
   29aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   29abe:	f7ff bf2d 	b.w	2991c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   29ac2:	4298      	cmp	r0, r3
   29ac4:	d002      	beq.n	29acc <ready_thread+0x70>
   29ac6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29ac8:	2b00      	cmp	r3, #0
   29aca:	d1e8      	bne.n	29a9e <ready_thread+0x42>
	node->prev = list->tail;
   29acc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   29ad0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   29ad2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29ad4:	62d4      	str	r4, [r2, #44]	; 0x2c
   29ad6:	e7eb      	b.n	29ab0 <ready_thread+0x54>
}
   29ad8:	bd70      	pop	{r4, r5, r6, pc}
   29ada:	bf00      	nop
   29adc:	20022a40 	.word	0x20022a40
   29ae0:	00038b5f 	.word	0x00038b5f
   29ae4:	00036be5 	.word	0x00036be5
   29ae8:	00038ae9 	.word	0x00038ae9
   29aec:	20027418 	.word	0x20027418

00029af0 <z_ready_thread>:
{
   29af0:	b538      	push	{r3, r4, r5, lr}
   29af2:	4605      	mov	r5, r0
	__asm__ volatile(
   29af4:	f04f 0320 	mov.w	r3, #32
   29af8:	f3ef 8411 	mrs	r4, BASEPRI
   29afc:	f383 8811 	msr	BASEPRI, r3
   29b00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29b04:	4817      	ldr	r0, [pc, #92]	; (29b64 <z_ready_thread+0x74>)
   29b06:	f001 f93d 	bl	2ad84 <z_spin_lock_valid>
   29b0a:	b968      	cbnz	r0, 29b28 <z_ready_thread+0x38>
   29b0c:	235c      	movs	r3, #92	; 0x5c
   29b0e:	4a16      	ldr	r2, [pc, #88]	; (29b68 <z_ready_thread+0x78>)
   29b10:	4916      	ldr	r1, [pc, #88]	; (29b6c <z_ready_thread+0x7c>)
   29b12:	4817      	ldr	r0, [pc, #92]	; (29b70 <z_ready_thread+0x80>)
   29b14:	f005 fb9d 	bl	2f252 <printk>
   29b18:	4912      	ldr	r1, [pc, #72]	; (29b64 <z_ready_thread+0x74>)
   29b1a:	4816      	ldr	r0, [pc, #88]	; (29b74 <z_ready_thread+0x84>)
   29b1c:	f005 fb99 	bl	2f252 <printk>
   29b20:	215c      	movs	r1, #92	; 0x5c
   29b22:	4811      	ldr	r0, [pc, #68]	; (29b68 <z_ready_thread+0x78>)
   29b24:	f005 fe96 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29b28:	480e      	ldr	r0, [pc, #56]	; (29b64 <z_ready_thread+0x74>)
   29b2a:	f001 f949 	bl	2adc0 <z_spin_lock_set_owner>
		ready_thread(thread);
   29b2e:	4628      	mov	r0, r5
   29b30:	f7ff ff94 	bl	29a5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29b34:	480b      	ldr	r0, [pc, #44]	; (29b64 <z_ready_thread+0x74>)
   29b36:	f001 f933 	bl	2ada0 <z_spin_unlock_valid>
   29b3a:	b968      	cbnz	r0, 29b58 <z_ready_thread+0x68>
   29b3c:	2384      	movs	r3, #132	; 0x84
   29b3e:	4a0a      	ldr	r2, [pc, #40]	; (29b68 <z_ready_thread+0x78>)
   29b40:	490d      	ldr	r1, [pc, #52]	; (29b78 <z_ready_thread+0x88>)
   29b42:	480b      	ldr	r0, [pc, #44]	; (29b70 <z_ready_thread+0x80>)
   29b44:	f005 fb85 	bl	2f252 <printk>
   29b48:	4906      	ldr	r1, [pc, #24]	; (29b64 <z_ready_thread+0x74>)
   29b4a:	480c      	ldr	r0, [pc, #48]	; (29b7c <z_ready_thread+0x8c>)
   29b4c:	f005 fb81 	bl	2f252 <printk>
   29b50:	2184      	movs	r1, #132	; 0x84
   29b52:	4805      	ldr	r0, [pc, #20]	; (29b68 <z_ready_thread+0x78>)
   29b54:	f005 fe7e 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29b58:	f384 8811 	msr	BASEPRI, r4
   29b5c:	f3bf 8f6f 	isb	sy
}
   29b60:	bd38      	pop	{r3, r4, r5, pc}
   29b62:	bf00      	nop
   29b64:	20027450 	.word	0x20027450
   29b68:	00036fbb 	.word	0x00036fbb
   29b6c:	00036fe1 	.word	0x00036fe1
   29b70:	00036be5 	.word	0x00036be5
   29b74:	00036ff6 	.word	0x00036ff6
   29b78:	0003700e 	.word	0x0003700e
   29b7c:	00037025 	.word	0x00037025

00029b80 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   29b80:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   29b84:	b570      	push	{r4, r5, r6, lr}
   29b86:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   29b88:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   29b8c:	2b00      	cmp	r3, #0
   29b8e:	d042      	beq.n	29c16 <z_thread_timeout+0x96>
	__asm__ volatile(
   29b90:	f04f 0320 	mov.w	r3, #32
   29b94:	f3ef 8611 	mrs	r6, BASEPRI
   29b98:	f383 8811 	msr	BASEPRI, r3
   29b9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29ba0:	4822      	ldr	r0, [pc, #136]	; (29c2c <z_thread_timeout+0xac>)
   29ba2:	f001 f8ef 	bl	2ad84 <z_spin_lock_valid>
   29ba6:	b968      	cbnz	r0, 29bc4 <z_thread_timeout+0x44>
   29ba8:	235c      	movs	r3, #92	; 0x5c
   29baa:	4a21      	ldr	r2, [pc, #132]	; (29c30 <z_thread_timeout+0xb0>)
   29bac:	4921      	ldr	r1, [pc, #132]	; (29c34 <z_thread_timeout+0xb4>)
   29bae:	4822      	ldr	r0, [pc, #136]	; (29c38 <z_thread_timeout+0xb8>)
   29bb0:	f005 fb4f 	bl	2f252 <printk>
   29bb4:	491d      	ldr	r1, [pc, #116]	; (29c2c <z_thread_timeout+0xac>)
   29bb6:	4821      	ldr	r0, [pc, #132]	; (29c3c <z_thread_timeout+0xbc>)
   29bb8:	f005 fb4b 	bl	2f252 <printk>
   29bbc:	215c      	movs	r1, #92	; 0x5c
   29bbe:	481c      	ldr	r0, [pc, #112]	; (29c30 <z_thread_timeout+0xb0>)
   29bc0:	f005 fe48 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29bc4:	4819      	ldr	r0, [pc, #100]	; (29c2c <z_thread_timeout+0xac>)
   29bc6:	f001 f8fb 	bl	2adc0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   29bca:	f1a4 0010 	sub.w	r0, r4, #16
   29bce:	f7ff fc43 	bl	29458 <pended_on.isra.18>
   29bd2:	4629      	mov	r1, r5
   29bd4:	f7ff fe1e 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   29bd8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29bdc:	4813      	ldr	r0, [pc, #76]	; (29c2c <z_thread_timeout+0xac>)
   29bde:	f023 0302 	bic.w	r3, r3, #2
   29be2:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   29be6:	2300      	movs	r3, #0
   29be8:	f844 3c10 	str.w	r3, [r4, #-16]
   29bec:	f001 f8d8 	bl	2ada0 <z_spin_unlock_valid>
   29bf0:	b968      	cbnz	r0, 29c0e <z_thread_timeout+0x8e>
   29bf2:	2384      	movs	r3, #132	; 0x84
   29bf4:	4a0e      	ldr	r2, [pc, #56]	; (29c30 <z_thread_timeout+0xb0>)
   29bf6:	4912      	ldr	r1, [pc, #72]	; (29c40 <z_thread_timeout+0xc0>)
   29bf8:	480f      	ldr	r0, [pc, #60]	; (29c38 <z_thread_timeout+0xb8>)
   29bfa:	f005 fb2a 	bl	2f252 <printk>
   29bfe:	490b      	ldr	r1, [pc, #44]	; (29c2c <z_thread_timeout+0xac>)
   29c00:	4810      	ldr	r0, [pc, #64]	; (29c44 <z_thread_timeout+0xc4>)
   29c02:	f005 fb26 	bl	2f252 <printk>
   29c06:	2184      	movs	r1, #132	; 0x84
   29c08:	4809      	ldr	r0, [pc, #36]	; (29c30 <z_thread_timeout+0xb0>)
   29c0a:	f005 fe23 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29c0e:	f386 8811 	msr	BASEPRI, r6
   29c12:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   29c16:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   29c1a:	4628      	mov	r0, r5
   29c1c:	f023 0314 	bic.w	r3, r3, #20
   29c20:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   29c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   29c28:	f7ff bf62 	b.w	29af0 <z_ready_thread>
   29c2c:	20027450 	.word	0x20027450
   29c30:	00036fbb 	.word	0x00036fbb
   29c34:	00036fe1 	.word	0x00036fe1
   29c38:	00036be5 	.word	0x00036be5
   29c3c:	00036ff6 	.word	0x00036ff6
   29c40:	0003700e 	.word	0x0003700e
   29c44:	00037025 	.word	0x00037025

00029c48 <z_sched_start>:
{
   29c48:	b538      	push	{r3, r4, r5, lr}
   29c4a:	4604      	mov	r4, r0
	__asm__ volatile(
   29c4c:	f04f 0320 	mov.w	r3, #32
   29c50:	f3ef 8511 	mrs	r5, BASEPRI
   29c54:	f383 8811 	msr	BASEPRI, r3
   29c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29c5c:	481d      	ldr	r0, [pc, #116]	; (29cd4 <z_sched_start+0x8c>)
   29c5e:	f001 f891 	bl	2ad84 <z_spin_lock_valid>
   29c62:	b968      	cbnz	r0, 29c80 <z_sched_start+0x38>
   29c64:	235c      	movs	r3, #92	; 0x5c
   29c66:	4a1c      	ldr	r2, [pc, #112]	; (29cd8 <z_sched_start+0x90>)
   29c68:	491c      	ldr	r1, [pc, #112]	; (29cdc <z_sched_start+0x94>)
   29c6a:	481d      	ldr	r0, [pc, #116]	; (29ce0 <z_sched_start+0x98>)
   29c6c:	f005 faf1 	bl	2f252 <printk>
   29c70:	4918      	ldr	r1, [pc, #96]	; (29cd4 <z_sched_start+0x8c>)
   29c72:	481c      	ldr	r0, [pc, #112]	; (29ce4 <z_sched_start+0x9c>)
   29c74:	f005 faed 	bl	2f252 <printk>
   29c78:	215c      	movs	r1, #92	; 0x5c
   29c7a:	4817      	ldr	r0, [pc, #92]	; (29cd8 <z_sched_start+0x90>)
   29c7c:	f005 fdea 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29c80:	4814      	ldr	r0, [pc, #80]	; (29cd4 <z_sched_start+0x8c>)
   29c82:	f001 f89d 	bl	2adc0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   29c86:	7b63      	ldrb	r3, [r4, #13]
   29c88:	075a      	lsls	r2, r3, #29
   29c8a:	d416      	bmi.n	29cba <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c8c:	4811      	ldr	r0, [pc, #68]	; (29cd4 <z_sched_start+0x8c>)
   29c8e:	f001 f887 	bl	2ada0 <z_spin_unlock_valid>
   29c92:	b968      	cbnz	r0, 29cb0 <z_sched_start+0x68>
   29c94:	2384      	movs	r3, #132	; 0x84
   29c96:	4a10      	ldr	r2, [pc, #64]	; (29cd8 <z_sched_start+0x90>)
   29c98:	4913      	ldr	r1, [pc, #76]	; (29ce8 <z_sched_start+0xa0>)
   29c9a:	4811      	ldr	r0, [pc, #68]	; (29ce0 <z_sched_start+0x98>)
   29c9c:	f005 fad9 	bl	2f252 <printk>
   29ca0:	490c      	ldr	r1, [pc, #48]	; (29cd4 <z_sched_start+0x8c>)
   29ca2:	4812      	ldr	r0, [pc, #72]	; (29cec <z_sched_start+0xa4>)
   29ca4:	f005 fad5 	bl	2f252 <printk>
   29ca8:	2184      	movs	r1, #132	; 0x84
   29caa:	480b      	ldr	r0, [pc, #44]	; (29cd8 <z_sched_start+0x90>)
   29cac:	f005 fdd2 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29cb0:	f385 8811 	msr	BASEPRI, r5
   29cb4:	f3bf 8f6f 	isb	sy
}
   29cb8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29cba:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   29cbe:	4620      	mov	r0, r4
   29cc0:	7363      	strb	r3, [r4, #13]
   29cc2:	f7ff fecb 	bl	29a5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   29cc6:	4629      	mov	r1, r5
}
   29cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   29ccc:	4801      	ldr	r0, [pc, #4]	; (29cd4 <z_sched_start+0x8c>)
   29cce:	f7ff bced 	b.w	296ac <z_reschedule>
   29cd2:	bf00      	nop
   29cd4:	20027450 	.word	0x20027450
   29cd8:	00036fbb 	.word	0x00036fbb
   29cdc:	00036fe1 	.word	0x00036fe1
   29ce0:	00036be5 	.word	0x00036be5
   29ce4:	00036ff6 	.word	0x00036ff6
   29ce8:	0003700e 	.word	0x0003700e
   29cec:	00037025 	.word	0x00037025

00029cf0 <z_move_thread_to_end_of_prio_q>:
{
   29cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29cf2:	4604      	mov	r4, r0
	__asm__ volatile(
   29cf4:	f04f 0320 	mov.w	r3, #32
   29cf8:	f3ef 8511 	mrs	r5, BASEPRI
   29cfc:	f383 8811 	msr	BASEPRI, r3
   29d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29d04:	4835      	ldr	r0, [pc, #212]	; (29ddc <z_move_thread_to_end_of_prio_q+0xec>)
   29d06:	f001 f83d 	bl	2ad84 <z_spin_lock_valid>
   29d0a:	b968      	cbnz	r0, 29d28 <z_move_thread_to_end_of_prio_q+0x38>
   29d0c:	235c      	movs	r3, #92	; 0x5c
   29d0e:	4a34      	ldr	r2, [pc, #208]	; (29de0 <z_move_thread_to_end_of_prio_q+0xf0>)
   29d10:	4934      	ldr	r1, [pc, #208]	; (29de4 <z_move_thread_to_end_of_prio_q+0xf4>)
   29d12:	4835      	ldr	r0, [pc, #212]	; (29de8 <z_move_thread_to_end_of_prio_q+0xf8>)
   29d14:	f005 fa9d 	bl	2f252 <printk>
   29d18:	4930      	ldr	r1, [pc, #192]	; (29ddc <z_move_thread_to_end_of_prio_q+0xec>)
   29d1a:	4834      	ldr	r0, [pc, #208]	; (29dec <z_move_thread_to_end_of_prio_q+0xfc>)
   29d1c:	f005 fa99 	bl	2f252 <printk>
   29d20:	215c      	movs	r1, #92	; 0x5c
   29d22:	482f      	ldr	r0, [pc, #188]	; (29de0 <z_move_thread_to_end_of_prio_q+0xf0>)
   29d24:	f005 fd96 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29d28:	482c      	ldr	r0, [pc, #176]	; (29ddc <z_move_thread_to_end_of_prio_q+0xec>)
   29d2a:	f001 f849 	bl	2adc0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   29d2e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   29d32:	2b00      	cmp	r3, #0
   29d34:	da03      	bge.n	29d3e <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   29d36:	4621      	mov	r1, r4
   29d38:	482d      	ldr	r0, [pc, #180]	; (29df0 <z_move_thread_to_end_of_prio_q+0x100>)
   29d3a:	f7ff fd6b 	bl	29814 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29d3e:	4b2d      	ldr	r3, [pc, #180]	; (29df4 <z_move_thread_to_end_of_prio_q+0x104>)
   29d40:	429c      	cmp	r4, r3
   29d42:	d10b      	bne.n	29d5c <z_move_thread_to_end_of_prio_q+0x6c>
   29d44:	492c      	ldr	r1, [pc, #176]	; (29df8 <z_move_thread_to_end_of_prio_q+0x108>)
   29d46:	4828      	ldr	r0, [pc, #160]	; (29de8 <z_move_thread_to_end_of_prio_q+0xf8>)
   29d48:	f240 3355 	movw	r3, #853	; 0x355
   29d4c:	4a2b      	ldr	r2, [pc, #172]	; (29dfc <z_move_thread_to_end_of_prio_q+0x10c>)
   29d4e:	f005 fa80 	bl	2f252 <printk>
   29d52:	f240 3155 	movw	r1, #853	; 0x355
   29d56:	4829      	ldr	r0, [pc, #164]	; (29dfc <z_move_thread_to_end_of_prio_q+0x10c>)
   29d58:	f005 fd7c 	bl	2f854 <assert_post_action>
	return list->head == list;
   29d5c:	4a28      	ldr	r2, [pc, #160]	; (29e00 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29d5e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   29d62:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   29d66:	428b      	cmp	r3, r1
   29d68:	d032      	beq.n	29dd0 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29d6a:	2b00      	cmp	r3, #0
   29d6c:	d030      	beq.n	29dd0 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   29d6e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   29d72:	f993 700e 	ldrsb.w	r7, [r3, #14]
   29d76:	42b7      	cmp	r7, r6
   29d78:	dd25      	ble.n	29dc6 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   29d7a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   29d7c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   29d80:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   29d82:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   29d84:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   29d86:	6890      	ldr	r0, [r2, #8]
   29d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
   29d8c:	7363      	strb	r3, [r4, #13]
   29d8e:	1b03      	subs	r3, r0, r4
   29d90:	4258      	negs	r0, r3
   29d92:	4158      	adcs	r0, r3
   29d94:	f7ff fdc2 	bl	2991c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29d98:	4810      	ldr	r0, [pc, #64]	; (29ddc <z_move_thread_to_end_of_prio_q+0xec>)
   29d9a:	f001 f801 	bl	2ada0 <z_spin_unlock_valid>
   29d9e:	b968      	cbnz	r0, 29dbc <z_move_thread_to_end_of_prio_q+0xcc>
   29da0:	2384      	movs	r3, #132	; 0x84
   29da2:	4a0f      	ldr	r2, [pc, #60]	; (29de0 <z_move_thread_to_end_of_prio_q+0xf0>)
   29da4:	4917      	ldr	r1, [pc, #92]	; (29e04 <z_move_thread_to_end_of_prio_q+0x114>)
   29da6:	4810      	ldr	r0, [pc, #64]	; (29de8 <z_move_thread_to_end_of_prio_q+0xf8>)
   29da8:	f005 fa53 	bl	2f252 <printk>
   29dac:	490b      	ldr	r1, [pc, #44]	; (29ddc <z_move_thread_to_end_of_prio_q+0xec>)
   29dae:	4816      	ldr	r0, [pc, #88]	; (29e08 <z_move_thread_to_end_of_prio_q+0x118>)
   29db0:	f005 fa4f 	bl	2f252 <printk>
   29db4:	2184      	movs	r1, #132	; 0x84
   29db6:	480a      	ldr	r0, [pc, #40]	; (29de0 <z_move_thread_to_end_of_prio_q+0xf0>)
   29db8:	f005 fd4c 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29dbc:	f385 8811 	msr	BASEPRI, r5
   29dc0:	f3bf 8f6f 	isb	sy
}
   29dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29dc6:	4298      	cmp	r0, r3
   29dc8:	d002      	beq.n	29dd0 <z_move_thread_to_end_of_prio_q+0xe0>
   29dca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29dcc:	2b00      	cmp	r3, #0
   29dce:	d1d0      	bne.n	29d72 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   29dd0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   29dd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   29dd6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29dd8:	62d4      	str	r4, [r2, #44]	; 0x2c
   29dda:	e7d3      	b.n	29d84 <z_move_thread_to_end_of_prio_q+0x94>
   29ddc:	20027450 	.word	0x20027450
   29de0:	00036fbb 	.word	0x00036fbb
   29de4:	00036fe1 	.word	0x00036fe1
   29de8:	00036be5 	.word	0x00036be5
   29dec:	00036ff6 	.word	0x00036ff6
   29df0:	20027440 	.word	0x20027440
   29df4:	20022a40 	.word	0x20022a40
   29df8:	00038b5f 	.word	0x00038b5f
   29dfc:	00038ae9 	.word	0x00038ae9
   29e00:	20027418 	.word	0x20027418
   29e04:	0003700e 	.word	0x0003700e
   29e08:	00037025 	.word	0x00037025

00029e0c <z_time_slice>:
	if (pending_current == _current) {
   29e0c:	4a15      	ldr	r2, [pc, #84]	; (29e64 <z_time_slice+0x58>)
   29e0e:	4916      	ldr	r1, [pc, #88]	; (29e68 <z_time_slice+0x5c>)
{
   29e10:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   29e12:	680c      	ldr	r4, [r1, #0]
   29e14:	6893      	ldr	r3, [r2, #8]
   29e16:	42a3      	cmp	r3, r4
   29e18:	4614      	mov	r4, r2
   29e1a:	d103      	bne.n	29e24 <z_time_slice+0x18>
}
   29e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   29e20:	f7ff bb32 	b.w	29488 <z_reset_time_slice>
	pending_current = NULL;
   29e24:	2500      	movs	r5, #0
   29e26:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   29e28:	4910      	ldr	r1, [pc, #64]	; (29e6c <z_time_slice+0x60>)
   29e2a:	6809      	ldr	r1, [r1, #0]
   29e2c:	b1b9      	cbz	r1, 29e5e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   29e2e:	89d9      	ldrh	r1, [r3, #14]
   29e30:	297f      	cmp	r1, #127	; 0x7f
   29e32:	d814      	bhi.n	29e5e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   29e34:	490e      	ldr	r1, [pc, #56]	; (29e70 <z_time_slice+0x64>)
   29e36:	f993 500e 	ldrsb.w	r5, [r3, #14]
   29e3a:	6809      	ldr	r1, [r1, #0]
   29e3c:	428d      	cmp	r5, r1
   29e3e:	db0e      	blt.n	29e5e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   29e40:	490c      	ldr	r1, [pc, #48]	; (29e74 <z_time_slice+0x68>)
   29e42:	428b      	cmp	r3, r1
   29e44:	d00b      	beq.n	29e5e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   29e46:	6999      	ldr	r1, [r3, #24]
   29e48:	b949      	cbnz	r1, 29e5e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   29e4a:	6911      	ldr	r1, [r2, #16]
   29e4c:	4281      	cmp	r1, r0
   29e4e:	dc03      	bgt.n	29e58 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   29e50:	4618      	mov	r0, r3
   29e52:	f7ff ff4d 	bl	29cf0 <z_move_thread_to_end_of_prio_q>
   29e56:	e7e1      	b.n	29e1c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   29e58:	1a09      	subs	r1, r1, r0
   29e5a:	6111      	str	r1, [r2, #16]
}
   29e5c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   29e5e:	2300      	movs	r3, #0
   29e60:	6123      	str	r3, [r4, #16]
   29e62:	e7fb      	b.n	29e5c <z_time_slice+0x50>
   29e64:	20027418 	.word	0x20027418
   29e68:	2002744c 	.word	0x2002744c
   29e6c:	20027458 	.word	0x20027458
   29e70:	20027454 	.word	0x20027454
   29e74:	20022a40 	.word	0x20022a40

00029e78 <z_impl_k_thread_suspend>:
{
   29e78:	b570      	push	{r4, r5, r6, lr}
   29e7a:	4604      	mov	r4, r0
   29e7c:	3018      	adds	r0, #24
   29e7e:	f001 f9ad 	bl	2b1dc <z_abort_timeout>
	__asm__ volatile(
   29e82:	f04f 0320 	mov.w	r3, #32
   29e86:	f3ef 8611 	mrs	r6, BASEPRI
   29e8a:	f383 8811 	msr	BASEPRI, r3
   29e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29e92:	4825      	ldr	r0, [pc, #148]	; (29f28 <z_impl_k_thread_suspend+0xb0>)
   29e94:	f000 ff76 	bl	2ad84 <z_spin_lock_valid>
   29e98:	b968      	cbnz	r0, 29eb6 <z_impl_k_thread_suspend+0x3e>
   29e9a:	235c      	movs	r3, #92	; 0x5c
   29e9c:	4a23      	ldr	r2, [pc, #140]	; (29f2c <z_impl_k_thread_suspend+0xb4>)
   29e9e:	4924      	ldr	r1, [pc, #144]	; (29f30 <z_impl_k_thread_suspend+0xb8>)
   29ea0:	4824      	ldr	r0, [pc, #144]	; (29f34 <z_impl_k_thread_suspend+0xbc>)
   29ea2:	f005 f9d6 	bl	2f252 <printk>
   29ea6:	4920      	ldr	r1, [pc, #128]	; (29f28 <z_impl_k_thread_suspend+0xb0>)
   29ea8:	4823      	ldr	r0, [pc, #140]	; (29f38 <z_impl_k_thread_suspend+0xc0>)
   29eaa:	f005 f9d2 	bl	2f252 <printk>
   29eae:	215c      	movs	r1, #92	; 0x5c
   29eb0:	481e      	ldr	r0, [pc, #120]	; (29f2c <z_impl_k_thread_suspend+0xb4>)
   29eb2:	f005 fccf 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29eb6:	481c      	ldr	r0, [pc, #112]	; (29f28 <z_impl_k_thread_suspend+0xb0>)
   29eb8:	f000 ff82 	bl	2adc0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   29ebc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   29ec0:	2b00      	cmp	r3, #0
   29ec2:	da07      	bge.n	29ed4 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   29ec4:	4621      	mov	r1, r4
   29ec6:	481d      	ldr	r0, [pc, #116]	; (29f3c <z_impl_k_thread_suspend+0xc4>)
   29ec8:	f7ff fca4 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   29ecc:	7b63      	ldrb	r3, [r4, #13]
   29ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   29ed2:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   29ed4:	4d1a      	ldr	r5, [pc, #104]	; (29f40 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   29ed6:	7b63      	ldrb	r3, [r4, #13]
   29ed8:	68a8      	ldr	r0, [r5, #8]
   29eda:	f043 0310 	orr.w	r3, r3, #16
   29ede:	7363      	strb	r3, [r4, #13]
   29ee0:	1b03      	subs	r3, r0, r4
   29ee2:	4258      	negs	r0, r3
   29ee4:	4158      	adcs	r0, r3
   29ee6:	f7ff fd19 	bl	2991c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29eea:	480f      	ldr	r0, [pc, #60]	; (29f28 <z_impl_k_thread_suspend+0xb0>)
   29eec:	f000 ff58 	bl	2ada0 <z_spin_unlock_valid>
   29ef0:	b968      	cbnz	r0, 29f0e <z_impl_k_thread_suspend+0x96>
   29ef2:	2384      	movs	r3, #132	; 0x84
   29ef4:	4a0d      	ldr	r2, [pc, #52]	; (29f2c <z_impl_k_thread_suspend+0xb4>)
   29ef6:	4913      	ldr	r1, [pc, #76]	; (29f44 <z_impl_k_thread_suspend+0xcc>)
   29ef8:	480e      	ldr	r0, [pc, #56]	; (29f34 <z_impl_k_thread_suspend+0xbc>)
   29efa:	f005 f9aa 	bl	2f252 <printk>
   29efe:	490a      	ldr	r1, [pc, #40]	; (29f28 <z_impl_k_thread_suspend+0xb0>)
   29f00:	4811      	ldr	r0, [pc, #68]	; (29f48 <z_impl_k_thread_suspend+0xd0>)
   29f02:	f005 f9a6 	bl	2f252 <printk>
   29f06:	2184      	movs	r1, #132	; 0x84
   29f08:	4808      	ldr	r0, [pc, #32]	; (29f2c <z_impl_k_thread_suspend+0xb4>)
   29f0a:	f005 fca3 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   29f0e:	f386 8811 	msr	BASEPRI, r6
   29f12:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   29f16:	68ab      	ldr	r3, [r5, #8]
   29f18:	42a3      	cmp	r3, r4
   29f1a:	d103      	bne.n	29f24 <z_impl_k_thread_suspend+0xac>
}
   29f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   29f20:	f00a bc05 	b.w	3472e <z_reschedule_unlocked>
}
   29f24:	bd70      	pop	{r4, r5, r6, pc}
   29f26:	bf00      	nop
   29f28:	20027450 	.word	0x20027450
   29f2c:	00036fbb 	.word	0x00036fbb
   29f30:	00036fe1 	.word	0x00036fe1
   29f34:	00036be5 	.word	0x00036be5
   29f38:	00036ff6 	.word	0x00036ff6
   29f3c:	20027440 	.word	0x20027440
   29f40:	20027418 	.word	0x20027418
   29f44:	0003700e 	.word	0x0003700e
   29f48:	00037025 	.word	0x00037025

00029f4c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   29f4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   29f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f52:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29f54:	b103      	cbz	r3, 29f58 <z_thread_single_abort+0xc>
		thread->fn_abort();
   29f56:	4798      	blx	r3
   29f58:	f104 0018 	add.w	r0, r4, #24
   29f5c:	f001 f93e 	bl	2b1dc <z_abort_timeout>
	__asm__ volatile(
   29f60:	f04f 0320 	mov.w	r3, #32
   29f64:	f3ef 8611 	mrs	r6, BASEPRI
   29f68:	f383 8811 	msr	BASEPRI, r3
   29f6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29f70:	4839      	ldr	r0, [pc, #228]	; (2a058 <z_thread_single_abort+0x10c>)
   29f72:	f000 ff07 	bl	2ad84 <z_spin_lock_valid>
   29f76:	b968      	cbnz	r0, 29f94 <z_thread_single_abort+0x48>
   29f78:	235c      	movs	r3, #92	; 0x5c
   29f7a:	4a38      	ldr	r2, [pc, #224]	; (2a05c <z_thread_single_abort+0x110>)
   29f7c:	4938      	ldr	r1, [pc, #224]	; (2a060 <z_thread_single_abort+0x114>)
   29f7e:	4839      	ldr	r0, [pc, #228]	; (2a064 <z_thread_single_abort+0x118>)
   29f80:	f005 f967 	bl	2f252 <printk>
   29f84:	4934      	ldr	r1, [pc, #208]	; (2a058 <z_thread_single_abort+0x10c>)
   29f86:	4838      	ldr	r0, [pc, #224]	; (2a068 <z_thread_single_abort+0x11c>)
   29f88:	f005 f963 	bl	2f252 <printk>
   29f8c:	215c      	movs	r1, #92	; 0x5c
   29f8e:	4833      	ldr	r0, [pc, #204]	; (2a05c <z_thread_single_abort+0x110>)
   29f90:	f005 fc60 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   29f94:	4830      	ldr	r0, [pc, #192]	; (2a058 <z_thread_single_abort+0x10c>)
   29f96:	f000 ff13 	bl	2adc0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   29f9a:	7b63      	ldrb	r3, [r4, #13]
   29f9c:	06d8      	lsls	r0, r3, #27
   29f9e:	d136      	bne.n	2a00e <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   29fa0:	69a2      	ldr	r2, [r4, #24]
   29fa2:	2a00      	cmp	r2, #0
   29fa4:	d133      	bne.n	2a00e <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   29fa6:	0619      	lsls	r1, r3, #24
   29fa8:	d507      	bpl.n	29fba <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   29faa:	4621      	mov	r1, r4
   29fac:	482f      	ldr	r0, [pc, #188]	; (2a06c <z_thread_single_abort+0x120>)
   29fae:	f7ff fc31 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   29fb2:	7b63      	ldrb	r3, [r4, #13]
   29fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   29fb8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   29fba:	4b2d      	ldr	r3, [pc, #180]	; (2a070 <z_thread_single_abort+0x124>)
   29fbc:	6898      	ldr	r0, [r3, #8]
   29fbe:	1b02      	subs	r2, r0, r4
   29fc0:	4250      	negs	r0, r2
   29fc2:	4150      	adcs	r0, r2
   29fc4:	f7ff fcaa 	bl	2991c <update_cache>
			waiter->base.pended_on = NULL;
   29fc8:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   29fca:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   29fcc:	f104 0828 	add.w	r8, r4, #40	; 0x28
   29fd0:	f043 0308 	orr.w	r3, r3, #8
   29fd4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   29fd6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29fd8:	4545      	cmp	r5, r8
   29fda:	d000      	beq.n	29fde <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   29fdc:	bb3d      	cbnz	r5, 2a02e <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29fde:	481e      	ldr	r0, [pc, #120]	; (2a058 <z_thread_single_abort+0x10c>)
   29fe0:	f000 fede 	bl	2ada0 <z_spin_unlock_valid>
   29fe4:	b968      	cbnz	r0, 2a002 <z_thread_single_abort+0xb6>
   29fe6:	2384      	movs	r3, #132	; 0x84
   29fe8:	4a1c      	ldr	r2, [pc, #112]	; (2a05c <z_thread_single_abort+0x110>)
   29fea:	4922      	ldr	r1, [pc, #136]	; (2a074 <z_thread_single_abort+0x128>)
   29fec:	481d      	ldr	r0, [pc, #116]	; (2a064 <z_thread_single_abort+0x118>)
   29fee:	f005 f930 	bl	2f252 <printk>
   29ff2:	4919      	ldr	r1, [pc, #100]	; (2a058 <z_thread_single_abort+0x10c>)
   29ff4:	4820      	ldr	r0, [pc, #128]	; (2a078 <z_thread_single_abort+0x12c>)
   29ff6:	f005 f92c 	bl	2f252 <printk>
   29ffa:	2184      	movs	r1, #132	; 0x84
   29ffc:	4817      	ldr	r0, [pc, #92]	; (2a05c <z_thread_single_abort+0x110>)
   29ffe:	f005 fc29 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a002:	f386 8811 	msr	BASEPRI, r6
   2a006:	f3bf 8f6f 	isb	sy
}
   2a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2a00e:	079b      	lsls	r3, r3, #30
   2a010:	d5da      	bpl.n	29fc8 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2a012:	f104 0008 	add.w	r0, r4, #8
   2a016:	f7ff fa1f 	bl	29458 <pended_on.isra.18>
   2a01a:	4621      	mov	r1, r4
   2a01c:	f7ff fbfa 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a020:	7b63      	ldrb	r3, [r4, #13]
   2a022:	f023 0302 	bic.w	r3, r3, #2
   2a026:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2a028:	2300      	movs	r3, #0
   2a02a:	60a3      	str	r3, [r4, #8]
   2a02c:	e7cc      	b.n	29fc8 <z_thread_single_abort+0x7c>
   2a02e:	f105 0018 	add.w	r0, r5, #24
   2a032:	f001 f8d3 	bl	2b1dc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   2a036:	f105 0008 	add.w	r0, r5, #8
   2a03a:	f7ff fa0d 	bl	29458 <pended_on.isra.18>
   2a03e:	4629      	mov	r1, r5
   2a040:	f7ff fbe8 	bl	29814 <z_priq_dumb_remove>
   2a044:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2a046:	60af      	str	r7, [r5, #8]
   2a048:	f023 0302 	bic.w	r3, r3, #2
   2a04c:	736b      	strb	r3, [r5, #13]
   2a04e:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   2a050:	4628      	mov	r0, r5
   2a052:	f7ff fd03 	bl	29a5c <ready_thread>
   2a056:	e7be      	b.n	29fd6 <z_thread_single_abort+0x8a>
   2a058:	20027450 	.word	0x20027450
   2a05c:	00036fbb 	.word	0x00036fbb
   2a060:	00036fe1 	.word	0x00036fe1
   2a064:	00036be5 	.word	0x00036be5
   2a068:	00036ff6 	.word	0x00036ff6
   2a06c:	20027440 	.word	0x20027440
   2a070:	20027418 	.word	0x20027418
   2a074:	0003700e 	.word	0x0003700e
   2a078:	00037025 	.word	0x00037025

0002a07c <unready_thread>:
{
   2a07c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2a07e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   2a082:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2a084:	2b00      	cmp	r3, #0
   2a086:	da07      	bge.n	2a098 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   2a088:	4601      	mov	r1, r0
   2a08a:	4808      	ldr	r0, [pc, #32]	; (2a0ac <unready_thread+0x30>)
   2a08c:	f7ff fbc2 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2a090:	7b63      	ldrb	r3, [r4, #13]
   2a092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2a096:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   2a098:	4b05      	ldr	r3, [pc, #20]	; (2a0b0 <unready_thread+0x34>)
   2a09a:	6898      	ldr	r0, [r3, #8]
   2a09c:	1b03      	subs	r3, r0, r4
   2a09e:	4258      	negs	r0, r3
   2a0a0:	4158      	adcs	r0, r3
}
   2a0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2a0a6:	f7ff bc39 	b.w	2991c <update_cache>
   2a0aa:	bf00      	nop
   2a0ac:	20027440 	.word	0x20027440
   2a0b0:	20027418 	.word	0x20027418

0002a0b4 <z_remove_thread_from_ready_q>:
{
   2a0b4:	b538      	push	{r3, r4, r5, lr}
   2a0b6:	4605      	mov	r5, r0
	__asm__ volatile(
   2a0b8:	f04f 0320 	mov.w	r3, #32
   2a0bc:	f3ef 8411 	mrs	r4, BASEPRI
   2a0c0:	f383 8811 	msr	BASEPRI, r3
   2a0c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a0c8:	4817      	ldr	r0, [pc, #92]	; (2a128 <z_remove_thread_from_ready_q+0x74>)
   2a0ca:	f000 fe5b 	bl	2ad84 <z_spin_lock_valid>
   2a0ce:	b968      	cbnz	r0, 2a0ec <z_remove_thread_from_ready_q+0x38>
   2a0d0:	235c      	movs	r3, #92	; 0x5c
   2a0d2:	4a16      	ldr	r2, [pc, #88]	; (2a12c <z_remove_thread_from_ready_q+0x78>)
   2a0d4:	4916      	ldr	r1, [pc, #88]	; (2a130 <z_remove_thread_from_ready_q+0x7c>)
   2a0d6:	4817      	ldr	r0, [pc, #92]	; (2a134 <z_remove_thread_from_ready_q+0x80>)
   2a0d8:	f005 f8bb 	bl	2f252 <printk>
   2a0dc:	4912      	ldr	r1, [pc, #72]	; (2a128 <z_remove_thread_from_ready_q+0x74>)
   2a0de:	4816      	ldr	r0, [pc, #88]	; (2a138 <z_remove_thread_from_ready_q+0x84>)
   2a0e0:	f005 f8b7 	bl	2f252 <printk>
   2a0e4:	215c      	movs	r1, #92	; 0x5c
   2a0e6:	4811      	ldr	r0, [pc, #68]	; (2a12c <z_remove_thread_from_ready_q+0x78>)
   2a0e8:	f005 fbb4 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a0ec:	480e      	ldr	r0, [pc, #56]	; (2a128 <z_remove_thread_from_ready_q+0x74>)
   2a0ee:	f000 fe67 	bl	2adc0 <z_spin_lock_set_owner>
		unready_thread(thread);
   2a0f2:	4628      	mov	r0, r5
   2a0f4:	f7ff ffc2 	bl	2a07c <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a0f8:	480b      	ldr	r0, [pc, #44]	; (2a128 <z_remove_thread_from_ready_q+0x74>)
   2a0fa:	f000 fe51 	bl	2ada0 <z_spin_unlock_valid>
   2a0fe:	b968      	cbnz	r0, 2a11c <z_remove_thread_from_ready_q+0x68>
   2a100:	2384      	movs	r3, #132	; 0x84
   2a102:	4a0a      	ldr	r2, [pc, #40]	; (2a12c <z_remove_thread_from_ready_q+0x78>)
   2a104:	490d      	ldr	r1, [pc, #52]	; (2a13c <z_remove_thread_from_ready_q+0x88>)
   2a106:	480b      	ldr	r0, [pc, #44]	; (2a134 <z_remove_thread_from_ready_q+0x80>)
   2a108:	f005 f8a3 	bl	2f252 <printk>
   2a10c:	4906      	ldr	r1, [pc, #24]	; (2a128 <z_remove_thread_from_ready_q+0x74>)
   2a10e:	480c      	ldr	r0, [pc, #48]	; (2a140 <z_remove_thread_from_ready_q+0x8c>)
   2a110:	f005 f89f 	bl	2f252 <printk>
   2a114:	2184      	movs	r1, #132	; 0x84
   2a116:	4805      	ldr	r0, [pc, #20]	; (2a12c <z_remove_thread_from_ready_q+0x78>)
   2a118:	f005 fb9c 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a11c:	f384 8811 	msr	BASEPRI, r4
   2a120:	f3bf 8f6f 	isb	sy
}
   2a124:	bd38      	pop	{r3, r4, r5, pc}
   2a126:	bf00      	nop
   2a128:	20027450 	.word	0x20027450
   2a12c:	00036fbb 	.word	0x00036fbb
   2a130:	00036fe1 	.word	0x00036fe1
   2a134:	00036be5 	.word	0x00036be5
   2a138:	00036ff6 	.word	0x00036ff6
   2a13c:	0003700e 	.word	0x0003700e
   2a140:	00037025 	.word	0x00037025

0002a144 <add_to_waitq_locked>:
{
   2a144:	b538      	push	{r3, r4, r5, lr}
   2a146:	4604      	mov	r4, r0
   2a148:	460d      	mov	r5, r1
	unready_thread(thread);
   2a14a:	f7ff ff97 	bl	2a07c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a14e:	7b63      	ldrb	r3, [r4, #13]
   2a150:	f043 0302 	orr.w	r3, r3, #2
   2a154:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2a156:	b1f5      	cbz	r5, 2a196 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a158:	4b16      	ldr	r3, [pc, #88]	; (2a1b4 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   2a15a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a15c:	429c      	cmp	r4, r3
   2a15e:	d10b      	bne.n	2a178 <add_to_waitq_locked+0x34>
   2a160:	4915      	ldr	r1, [pc, #84]	; (2a1b8 <add_to_waitq_locked+0x74>)
   2a162:	4816      	ldr	r0, [pc, #88]	; (2a1bc <add_to_waitq_locked+0x78>)
   2a164:	f240 3355 	movw	r3, #853	; 0x355
   2a168:	4a15      	ldr	r2, [pc, #84]	; (2a1c0 <add_to_waitq_locked+0x7c>)
   2a16a:	f005 f872 	bl	2f252 <printk>
   2a16e:	f240 3155 	movw	r1, #853	; 0x355
   2a172:	4813      	ldr	r0, [pc, #76]	; (2a1c0 <add_to_waitq_locked+0x7c>)
   2a174:	f005 fb6e 	bl	2f854 <assert_post_action>
	return list->head == list;
   2a178:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a17a:	429d      	cmp	r5, r3
   2a17c:	d012      	beq.n	2a1a4 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a17e:	b18b      	cbz	r3, 2a1a4 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   2a180:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2a184:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2a188:	4291      	cmp	r1, r2
   2a18a:	dd05      	ble.n	2a198 <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   2a18c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a18e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2a192:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a194:	605c      	str	r4, [r3, #4]
}
   2a196:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2a198:	6869      	ldr	r1, [r5, #4]
   2a19a:	428b      	cmp	r3, r1
   2a19c:	d002      	beq.n	2a1a4 <add_to_waitq_locked+0x60>
   2a19e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a1a0:	2b00      	cmp	r3, #0
   2a1a2:	d1ef      	bne.n	2a184 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   2a1a4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2a1a6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2a1a8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2a1aa:	686b      	ldr	r3, [r5, #4]
   2a1ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a1ae:	606c      	str	r4, [r5, #4]
}
   2a1b0:	e7f1      	b.n	2a196 <add_to_waitq_locked+0x52>
   2a1b2:	bf00      	nop
   2a1b4:	20022a40 	.word	0x20022a40
   2a1b8:	00038b5f 	.word	0x00038b5f
   2a1bc:	00036be5 	.word	0x00036be5
   2a1c0:	00038ae9 	.word	0x00038ae9

0002a1c4 <pend>:
{
   2a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a1c6:	4604      	mov	r4, r0
   2a1c8:	460f      	mov	r7, r1
   2a1ca:	4615      	mov	r5, r2
	__asm__ volatile(
   2a1cc:	f04f 0320 	mov.w	r3, #32
   2a1d0:	f3ef 8611 	mrs	r6, BASEPRI
   2a1d4:	f383 8811 	msr	BASEPRI, r3
   2a1d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1dc:	4822      	ldr	r0, [pc, #136]	; (2a268 <pend+0xa4>)
   2a1de:	f000 fdd1 	bl	2ad84 <z_spin_lock_valid>
   2a1e2:	b968      	cbnz	r0, 2a200 <pend+0x3c>
   2a1e4:	235c      	movs	r3, #92	; 0x5c
   2a1e6:	4a21      	ldr	r2, [pc, #132]	; (2a26c <pend+0xa8>)
   2a1e8:	4921      	ldr	r1, [pc, #132]	; (2a270 <pend+0xac>)
   2a1ea:	4822      	ldr	r0, [pc, #136]	; (2a274 <pend+0xb0>)
   2a1ec:	f005 f831 	bl	2f252 <printk>
   2a1f0:	491d      	ldr	r1, [pc, #116]	; (2a268 <pend+0xa4>)
   2a1f2:	4821      	ldr	r0, [pc, #132]	; (2a278 <pend+0xb4>)
   2a1f4:	f005 f82d 	bl	2f252 <printk>
   2a1f8:	215c      	movs	r1, #92	; 0x5c
   2a1fa:	481c      	ldr	r0, [pc, #112]	; (2a26c <pend+0xa8>)
   2a1fc:	f005 fb2a 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a200:	4819      	ldr	r0, [pc, #100]	; (2a268 <pend+0xa4>)
   2a202:	f000 fddd 	bl	2adc0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2a206:	4620      	mov	r0, r4
   2a208:	4639      	mov	r1, r7
   2a20a:	f7ff ff9b 	bl	2a144 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a20e:	4816      	ldr	r0, [pc, #88]	; (2a268 <pend+0xa4>)
   2a210:	f000 fdc6 	bl	2ada0 <z_spin_unlock_valid>
   2a214:	b968      	cbnz	r0, 2a232 <pend+0x6e>
   2a216:	2384      	movs	r3, #132	; 0x84
   2a218:	4a14      	ldr	r2, [pc, #80]	; (2a26c <pend+0xa8>)
   2a21a:	4918      	ldr	r1, [pc, #96]	; (2a27c <pend+0xb8>)
   2a21c:	4815      	ldr	r0, [pc, #84]	; (2a274 <pend+0xb0>)
   2a21e:	f005 f818 	bl	2f252 <printk>
   2a222:	4911      	ldr	r1, [pc, #68]	; (2a268 <pend+0xa4>)
   2a224:	4816      	ldr	r0, [pc, #88]	; (2a280 <pend+0xbc>)
   2a226:	f005 f814 	bl	2f252 <printk>
   2a22a:	2184      	movs	r1, #132	; 0x84
   2a22c:	480f      	ldr	r0, [pc, #60]	; (2a26c <pend+0xa8>)
   2a22e:	f005 fb11 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a232:	f386 8811 	msr	BASEPRI, r6
   2a236:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a23a:	1c6b      	adds	r3, r5, #1
   2a23c:	d013      	beq.n	2a266 <pend+0xa2>
   2a23e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2a242:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a246:	2100      	movs	r1, #0
   2a248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a24c:	2300      	movs	r3, #0
   2a24e:	fbe6 0105 	umlal	r0, r1, r6, r5
   2a252:	f7e3 fa8d 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2a256:	490b      	ldr	r1, [pc, #44]	; (2a284 <pend+0xc0>)
   2a258:	1c42      	adds	r2, r0, #1
   2a25a:	f104 0018 	add.w	r0, r4, #24
}
   2a25e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a262:	f000 bf13 	b.w	2b08c <z_add_timeout>
   2a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a268:	20027450 	.word	0x20027450
   2a26c:	00036fbb 	.word	0x00036fbb
   2a270:	00036fe1 	.word	0x00036fe1
   2a274:	00036be5 	.word	0x00036be5
   2a278:	00036ff6 	.word	0x00036ff6
   2a27c:	0003700e 	.word	0x0003700e
   2a280:	00037025 	.word	0x00037025
   2a284:	00029b81 	.word	0x00029b81

0002a288 <z_pend_thread>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2a288:	4b0e      	ldr	r3, [pc, #56]	; (2a2c4 <z_pend_thread+0x3c>)
{
   2a28a:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2a28c:	689b      	ldr	r3, [r3, #8]
{
   2a28e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2a290:	4283      	cmp	r3, r0
{
   2a292:	460d      	mov	r5, r1
   2a294:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2a296:	d00e      	beq.n	2a2b6 <z_pend_thread+0x2e>
   2a298:	7b43      	ldrb	r3, [r0, #13]
   2a29a:	07db      	lsls	r3, r3, #31
   2a29c:	d40b      	bmi.n	2a2b6 <z_pend_thread+0x2e>
   2a29e:	490a      	ldr	r1, [pc, #40]	; (2a2c8 <z_pend_thread+0x40>)
   2a2a0:	480a      	ldr	r0, [pc, #40]	; (2a2cc <z_pend_thread+0x44>)
   2a2a2:	f240 2361 	movw	r3, #609	; 0x261
   2a2a6:	4a0a      	ldr	r2, [pc, #40]	; (2a2d0 <z_pend_thread+0x48>)
   2a2a8:	f004 ffd3 	bl	2f252 <printk>
   2a2ac:	f240 2161 	movw	r1, #609	; 0x261
   2a2b0:	4807      	ldr	r0, [pc, #28]	; (2a2d0 <z_pend_thread+0x48>)
   2a2b2:	f005 facf 	bl	2f854 <assert_post_action>
	pend(thread, wait_q, timeout);
   2a2b6:	4632      	mov	r2, r6
   2a2b8:	4629      	mov	r1, r5
   2a2ba:	4620      	mov	r0, r4
}
   2a2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	pend(thread, wait_q, timeout);
   2a2c0:	f7ff bf80 	b.w	2a1c4 <pend>
   2a2c4:	20027418 	.word	0x20027418
   2a2c8:	00038b22 	.word	0x00038b22
   2a2cc:	00036be5 	.word	0x00036be5
   2a2d0:	00038ae9 	.word	0x00038ae9

0002a2d4 <z_pend_curr>:
{
   2a2d4:	b538      	push	{r3, r4, r5, lr}
   2a2d6:	4604      	mov	r4, r0
   2a2d8:	460d      	mov	r5, r1
   2a2da:	4611      	mov	r1, r2
	pending_current = _current;
   2a2dc:	4a0e      	ldr	r2, [pc, #56]	; (2a318 <z_pend_curr+0x44>)
   2a2de:	6890      	ldr	r0, [r2, #8]
   2a2e0:	4a0e      	ldr	r2, [pc, #56]	; (2a31c <z_pend_curr+0x48>)
   2a2e2:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   2a2e4:	461a      	mov	r2, r3
   2a2e6:	f7ff ff6d 	bl	2a1c4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a2ea:	4620      	mov	r0, r4
   2a2ec:	f000 fd58 	bl	2ada0 <z_spin_unlock_valid>
   2a2f0:	b968      	cbnz	r0, 2a30e <z_pend_curr+0x3a>
   2a2f2:	239b      	movs	r3, #155	; 0x9b
   2a2f4:	4a0a      	ldr	r2, [pc, #40]	; (2a320 <z_pend_curr+0x4c>)
   2a2f6:	490b      	ldr	r1, [pc, #44]	; (2a324 <z_pend_curr+0x50>)
   2a2f8:	480b      	ldr	r0, [pc, #44]	; (2a328 <z_pend_curr+0x54>)
   2a2fa:	f004 ffaa 	bl	2f252 <printk>
   2a2fe:	4621      	mov	r1, r4
   2a300:	480a      	ldr	r0, [pc, #40]	; (2a32c <z_pend_curr+0x58>)
   2a302:	f004 ffa6 	bl	2f252 <printk>
   2a306:	219b      	movs	r1, #155	; 0x9b
   2a308:	4805      	ldr	r0, [pc, #20]	; (2a320 <z_pend_curr+0x4c>)
   2a30a:	f005 faa3 	bl	2f854 <assert_post_action>
   2a30e:	4628      	mov	r0, r5
}
   2a310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a314:	f7ee bbda 	b.w	18acc <arch_swap>
   2a318:	20027418 	.word	0x20027418
   2a31c:	2002744c 	.word	0x2002744c
   2a320:	00036fbb 	.word	0x00036fbb
   2a324:	0003700e 	.word	0x0003700e
   2a328:	00036be5 	.word	0x00036be5
   2a32c:	00037025 	.word	0x00037025

0002a330 <z_set_prio>:
{
   2a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a332:	4604      	mov	r4, r0
   2a334:	460d      	mov	r5, r1
	__asm__ volatile(
   2a336:	f04f 0320 	mov.w	r3, #32
   2a33a:	f3ef 8611 	mrs	r6, BASEPRI
   2a33e:	f383 8811 	msr	BASEPRI, r3
   2a342:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a346:	4836      	ldr	r0, [pc, #216]	; (2a420 <z_set_prio+0xf0>)
   2a348:	f000 fd1c 	bl	2ad84 <z_spin_lock_valid>
   2a34c:	b968      	cbnz	r0, 2a36a <z_set_prio+0x3a>
   2a34e:	235c      	movs	r3, #92	; 0x5c
   2a350:	4a34      	ldr	r2, [pc, #208]	; (2a424 <z_set_prio+0xf4>)
   2a352:	4935      	ldr	r1, [pc, #212]	; (2a428 <z_set_prio+0xf8>)
   2a354:	4835      	ldr	r0, [pc, #212]	; (2a42c <z_set_prio+0xfc>)
   2a356:	f004 ff7c 	bl	2f252 <printk>
   2a35a:	4931      	ldr	r1, [pc, #196]	; (2a420 <z_set_prio+0xf0>)
   2a35c:	4834      	ldr	r0, [pc, #208]	; (2a430 <z_set_prio+0x100>)
   2a35e:	f004 ff78 	bl	2f252 <printk>
   2a362:	215c      	movs	r1, #92	; 0x5c
   2a364:	482f      	ldr	r0, [pc, #188]	; (2a424 <z_set_prio+0xf4>)
   2a366:	f005 fa75 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a36a:	482d      	ldr	r0, [pc, #180]	; (2a420 <z_set_prio+0xf0>)
   2a36c:	f000 fd28 	bl	2adc0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2a370:	7b63      	ldrb	r3, [r4, #13]
   2a372:	b26d      	sxtb	r5, r5
   2a374:	06db      	lsls	r3, r3, #27
   2a376:	d150      	bne.n	2a41a <z_set_prio+0xea>
		if (need_sched) {
   2a378:	69a3      	ldr	r3, [r4, #24]
   2a37a:	2b00      	cmp	r3, #0
   2a37c:	d14d      	bne.n	2a41a <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2a37e:	4621      	mov	r1, r4
   2a380:	482c      	ldr	r0, [pc, #176]	; (2a434 <z_set_prio+0x104>)
   2a382:	f7ff fa47 	bl	29814 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a386:	4b2c      	ldr	r3, [pc, #176]	; (2a438 <z_set_prio+0x108>)
				thread->base.prio = prio;
   2a388:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a38a:	429c      	cmp	r4, r3
   2a38c:	d10b      	bne.n	2a3a6 <z_set_prio+0x76>
   2a38e:	492b      	ldr	r1, [pc, #172]	; (2a43c <z_set_prio+0x10c>)
   2a390:	4826      	ldr	r0, [pc, #152]	; (2a42c <z_set_prio+0xfc>)
   2a392:	f240 3355 	movw	r3, #853	; 0x355
   2a396:	4a2a      	ldr	r2, [pc, #168]	; (2a440 <z_set_prio+0x110>)
   2a398:	f004 ff5b 	bl	2f252 <printk>
   2a39c:	f240 3155 	movw	r1, #853	; 0x355
   2a3a0:	4827      	ldr	r0, [pc, #156]	; (2a440 <z_set_prio+0x110>)
   2a3a2:	f005 fa57 	bl	2f854 <assert_post_action>
	return list->head == list;
   2a3a6:	4a27      	ldr	r2, [pc, #156]	; (2a444 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a3a8:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2a3ac:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2a3b0:	428b      	cmp	r3, r1
   2a3b2:	d02c      	beq.n	2a40e <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a3b4:	b35b      	cbz	r3, 2a40e <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   2a3b6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2a3ba:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2a3be:	42af      	cmp	r7, r5
   2a3c0:	dd20      	ble.n	2a404 <z_set_prio+0xd4>
	node->prev = successor->prev;
   2a3c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a3c4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2a3c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a3ca:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2a3cc:	2001      	movs	r0, #1
   2a3ce:	f7ff faa5 	bl	2991c <update_cache>
   2a3d2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a3d4:	4812      	ldr	r0, [pc, #72]	; (2a420 <z_set_prio+0xf0>)
   2a3d6:	f000 fce3 	bl	2ada0 <z_spin_unlock_valid>
   2a3da:	b968      	cbnz	r0, 2a3f8 <z_set_prio+0xc8>
   2a3dc:	2384      	movs	r3, #132	; 0x84
   2a3de:	4a11      	ldr	r2, [pc, #68]	; (2a424 <z_set_prio+0xf4>)
   2a3e0:	4919      	ldr	r1, [pc, #100]	; (2a448 <z_set_prio+0x118>)
   2a3e2:	4812      	ldr	r0, [pc, #72]	; (2a42c <z_set_prio+0xfc>)
   2a3e4:	f004 ff35 	bl	2f252 <printk>
   2a3e8:	490d      	ldr	r1, [pc, #52]	; (2a420 <z_set_prio+0xf0>)
   2a3ea:	4818      	ldr	r0, [pc, #96]	; (2a44c <z_set_prio+0x11c>)
   2a3ec:	f004 ff31 	bl	2f252 <printk>
   2a3f0:	2184      	movs	r1, #132	; 0x84
   2a3f2:	480c      	ldr	r0, [pc, #48]	; (2a424 <z_set_prio+0xf4>)
   2a3f4:	f005 fa2e 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a3f8:	f386 8811 	msr	BASEPRI, r6
   2a3fc:	f3bf 8f6f 	isb	sy
}
   2a400:	4620      	mov	r0, r4
   2a402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2a404:	4298      	cmp	r0, r3
   2a406:	d002      	beq.n	2a40e <z_set_prio+0xde>
   2a408:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a40a:	2b00      	cmp	r3, #0
   2a40c:	d1d5      	bne.n	2a3ba <z_set_prio+0x8a>
	node->prev = list->tail;
   2a40e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2a412:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2a414:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a416:	62d4      	str	r4, [r2, #44]	; 0x2c
   2a418:	e7d8      	b.n	2a3cc <z_set_prio+0x9c>
			thread->base.prio = prio;
   2a41a:	73a5      	strb	r5, [r4, #14]
   2a41c:	2400      	movs	r4, #0
   2a41e:	e7d9      	b.n	2a3d4 <z_set_prio+0xa4>
   2a420:	20027450 	.word	0x20027450
   2a424:	00036fbb 	.word	0x00036fbb
   2a428:	00036fe1 	.word	0x00036fe1
   2a42c:	00036be5 	.word	0x00036be5
   2a430:	00036ff6 	.word	0x00036ff6
   2a434:	20027440 	.word	0x20027440
   2a438:	20022a40 	.word	0x20022a40
   2a43c:	00038b5f 	.word	0x00038b5f
   2a440:	00038ae9 	.word	0x00038ae9
   2a444:	20027418 	.word	0x20027418
   2a448:	0003700e 	.word	0x0003700e
   2a44c:	00037025 	.word	0x00037025

0002a450 <z_unpend_first_thread>:
{
   2a450:	b538      	push	{r3, r4, r5, lr}
   2a452:	4604      	mov	r4, r0
	__asm__ volatile(
   2a454:	f04f 0320 	mov.w	r3, #32
   2a458:	f3ef 8511 	mrs	r5, BASEPRI
   2a45c:	f383 8811 	msr	BASEPRI, r3
   2a460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a464:	483b      	ldr	r0, [pc, #236]	; (2a554 <z_unpend_first_thread+0x104>)
   2a466:	f000 fc8d 	bl	2ad84 <z_spin_lock_valid>
   2a46a:	b968      	cbnz	r0, 2a488 <z_unpend_first_thread+0x38>
   2a46c:	235c      	movs	r3, #92	; 0x5c
   2a46e:	4a3a      	ldr	r2, [pc, #232]	; (2a558 <z_unpend_first_thread+0x108>)
   2a470:	493a      	ldr	r1, [pc, #232]	; (2a55c <z_unpend_first_thread+0x10c>)
   2a472:	483b      	ldr	r0, [pc, #236]	; (2a560 <z_unpend_first_thread+0x110>)
   2a474:	f004 feed 	bl	2f252 <printk>
   2a478:	4936      	ldr	r1, [pc, #216]	; (2a554 <z_unpend_first_thread+0x104>)
   2a47a:	483a      	ldr	r0, [pc, #232]	; (2a564 <z_unpend_first_thread+0x114>)
   2a47c:	f004 fee9 	bl	2f252 <printk>
   2a480:	215c      	movs	r1, #92	; 0x5c
   2a482:	4835      	ldr	r0, [pc, #212]	; (2a558 <z_unpend_first_thread+0x108>)
   2a484:	f005 f9e6 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a488:	4832      	ldr	r0, [pc, #200]	; (2a554 <z_unpend_first_thread+0x104>)
   2a48a:	f000 fc99 	bl	2adc0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   2a48e:	4620      	mov	r0, r4
   2a490:	f00a f957 	bl	34742 <z_priq_dumb_best>
   2a494:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a496:	482f      	ldr	r0, [pc, #188]	; (2a554 <z_unpend_first_thread+0x104>)
   2a498:	f000 fc82 	bl	2ada0 <z_spin_unlock_valid>
   2a49c:	b968      	cbnz	r0, 2a4ba <z_unpend_first_thread+0x6a>
   2a49e:	2384      	movs	r3, #132	; 0x84
   2a4a0:	4a2d      	ldr	r2, [pc, #180]	; (2a558 <z_unpend_first_thread+0x108>)
   2a4a2:	4931      	ldr	r1, [pc, #196]	; (2a568 <z_unpend_first_thread+0x118>)
   2a4a4:	482e      	ldr	r0, [pc, #184]	; (2a560 <z_unpend_first_thread+0x110>)
   2a4a6:	f004 fed4 	bl	2f252 <printk>
   2a4aa:	492a      	ldr	r1, [pc, #168]	; (2a554 <z_unpend_first_thread+0x104>)
   2a4ac:	482f      	ldr	r0, [pc, #188]	; (2a56c <z_unpend_first_thread+0x11c>)
   2a4ae:	f004 fed0 	bl	2f252 <printk>
   2a4b2:	2184      	movs	r1, #132	; 0x84
   2a4b4:	4828      	ldr	r0, [pc, #160]	; (2a558 <z_unpend_first_thread+0x108>)
   2a4b6:	f005 f9cd 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a4ba:	f385 8811 	msr	BASEPRI, r5
   2a4be:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2a4c2:	2c00      	cmp	r4, #0
   2a4c4:	d043      	beq.n	2a54e <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   2a4c6:	f04f 0320 	mov.w	r3, #32
   2a4ca:	f3ef 8511 	mrs	r5, BASEPRI
   2a4ce:	f383 8811 	msr	BASEPRI, r3
   2a4d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a4d6:	481f      	ldr	r0, [pc, #124]	; (2a554 <z_unpend_first_thread+0x104>)
   2a4d8:	f000 fc54 	bl	2ad84 <z_spin_lock_valid>
   2a4dc:	b968      	cbnz	r0, 2a4fa <z_unpend_first_thread+0xaa>
   2a4de:	235c      	movs	r3, #92	; 0x5c
   2a4e0:	4a1d      	ldr	r2, [pc, #116]	; (2a558 <z_unpend_first_thread+0x108>)
   2a4e2:	491e      	ldr	r1, [pc, #120]	; (2a55c <z_unpend_first_thread+0x10c>)
   2a4e4:	481e      	ldr	r0, [pc, #120]	; (2a560 <z_unpend_first_thread+0x110>)
   2a4e6:	f004 feb4 	bl	2f252 <printk>
   2a4ea:	491a      	ldr	r1, [pc, #104]	; (2a554 <z_unpend_first_thread+0x104>)
   2a4ec:	481d      	ldr	r0, [pc, #116]	; (2a564 <z_unpend_first_thread+0x114>)
   2a4ee:	f004 feb0 	bl	2f252 <printk>
   2a4f2:	215c      	movs	r1, #92	; 0x5c
   2a4f4:	4818      	ldr	r0, [pc, #96]	; (2a558 <z_unpend_first_thread+0x108>)
   2a4f6:	f005 f9ad 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a4fa:	4816      	ldr	r0, [pc, #88]	; (2a554 <z_unpend_first_thread+0x104>)
   2a4fc:	f000 fc60 	bl	2adc0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2a500:	f104 0008 	add.w	r0, r4, #8
   2a504:	f7fe ffa8 	bl	29458 <pended_on.isra.18>
   2a508:	4621      	mov	r1, r4
   2a50a:	f7ff f983 	bl	29814 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a50e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a510:	4810      	ldr	r0, [pc, #64]	; (2a554 <z_unpend_first_thread+0x104>)
   2a512:	f023 0302 	bic.w	r3, r3, #2
   2a516:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2a518:	2300      	movs	r3, #0
   2a51a:	60a3      	str	r3, [r4, #8]
   2a51c:	f000 fc40 	bl	2ada0 <z_spin_unlock_valid>
   2a520:	b968      	cbnz	r0, 2a53e <z_unpend_first_thread+0xee>
   2a522:	2384      	movs	r3, #132	; 0x84
   2a524:	4a0c      	ldr	r2, [pc, #48]	; (2a558 <z_unpend_first_thread+0x108>)
   2a526:	4910      	ldr	r1, [pc, #64]	; (2a568 <z_unpend_first_thread+0x118>)
   2a528:	480d      	ldr	r0, [pc, #52]	; (2a560 <z_unpend_first_thread+0x110>)
   2a52a:	f004 fe92 	bl	2f252 <printk>
   2a52e:	4909      	ldr	r1, [pc, #36]	; (2a554 <z_unpend_first_thread+0x104>)
   2a530:	480e      	ldr	r0, [pc, #56]	; (2a56c <z_unpend_first_thread+0x11c>)
   2a532:	f004 fe8e 	bl	2f252 <printk>
   2a536:	2184      	movs	r1, #132	; 0x84
   2a538:	4807      	ldr	r0, [pc, #28]	; (2a558 <z_unpend_first_thread+0x108>)
   2a53a:	f005 f98b 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a53e:	f385 8811 	msr	BASEPRI, r5
   2a542:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2a546:	f104 0018 	add.w	r0, r4, #24
   2a54a:	f000 fe47 	bl	2b1dc <z_abort_timeout>
}
   2a54e:	4620      	mov	r0, r4
   2a550:	bd38      	pop	{r3, r4, r5, pc}
   2a552:	bf00      	nop
   2a554:	20027450 	.word	0x20027450
   2a558:	00036fbb 	.word	0x00036fbb
   2a55c:	00036fe1 	.word	0x00036fe1
   2a560:	00036be5 	.word	0x00036be5
   2a564:	00036ff6 	.word	0x00036ff6
   2a568:	0003700e 	.word	0x0003700e
   2a56c:	00037025 	.word	0x00037025

0002a570 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2a570:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2a572:	4b04      	ldr	r3, [pc, #16]	; (2a584 <z_sched_init+0x14>)
   2a574:	4608      	mov	r0, r1
   2a576:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2a57a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2a57e:	f7fe bf99 	b.w	294b4 <k_sched_time_slice_set>
   2a582:	bf00      	nop
   2a584:	20027418 	.word	0x20027418

0002a588 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a58a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2a58e:	b173      	cbz	r3, 2a5ae <z_impl_k_yield+0x26>
   2a590:	4945      	ldr	r1, [pc, #276]	; (2a6a8 <z_impl_k_yield+0x120>)
   2a592:	f44f 638c 	mov.w	r3, #1120	; 0x460
   2a596:	4a45      	ldr	r2, [pc, #276]	; (2a6ac <z_impl_k_yield+0x124>)
   2a598:	4845      	ldr	r0, [pc, #276]	; (2a6b0 <z_impl_k_yield+0x128>)
   2a59a:	f004 fe5a 	bl	2f252 <printk>
   2a59e:	4845      	ldr	r0, [pc, #276]	; (2a6b4 <z_impl_k_yield+0x12c>)
   2a5a0:	f004 fe57 	bl	2f252 <printk>
   2a5a4:	f44f 618c 	mov.w	r1, #1120	; 0x460
   2a5a8:	4840      	ldr	r0, [pc, #256]	; (2a6ac <z_impl_k_yield+0x124>)
   2a5aa:	f005 f953 	bl	2f854 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2a5ae:	4c42      	ldr	r4, [pc, #264]	; (2a6b8 <z_impl_k_yield+0x130>)
   2a5b0:	4e42      	ldr	r6, [pc, #264]	; (2a6bc <z_impl_k_yield+0x134>)
   2a5b2:	68a2      	ldr	r2, [r4, #8]
   2a5b4:	42b2      	cmp	r2, r6
   2a5b6:	d05f      	beq.n	2a678 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   2a5b8:	f04f 0320 	mov.w	r3, #32
   2a5bc:	f3ef 8711 	mrs	r7, BASEPRI
   2a5c0:	f383 8811 	msr	BASEPRI, r3
   2a5c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a5c8:	483d      	ldr	r0, [pc, #244]	; (2a6c0 <z_impl_k_yield+0x138>)
   2a5ca:	f000 fbdb 	bl	2ad84 <z_spin_lock_valid>
   2a5ce:	b968      	cbnz	r0, 2a5ec <z_impl_k_yield+0x64>
   2a5d0:	235c      	movs	r3, #92	; 0x5c
   2a5d2:	4a3c      	ldr	r2, [pc, #240]	; (2a6c4 <z_impl_k_yield+0x13c>)
   2a5d4:	493c      	ldr	r1, [pc, #240]	; (2a6c8 <z_impl_k_yield+0x140>)
   2a5d6:	4836      	ldr	r0, [pc, #216]	; (2a6b0 <z_impl_k_yield+0x128>)
   2a5d8:	f004 fe3b 	bl	2f252 <printk>
   2a5dc:	4938      	ldr	r1, [pc, #224]	; (2a6c0 <z_impl_k_yield+0x138>)
   2a5de:	483b      	ldr	r0, [pc, #236]	; (2a6cc <z_impl_k_yield+0x144>)
   2a5e0:	f004 fe37 	bl	2f252 <printk>
   2a5e4:	215c      	movs	r1, #92	; 0x5c
   2a5e6:	4837      	ldr	r0, [pc, #220]	; (2a6c4 <z_impl_k_yield+0x13c>)
   2a5e8:	f005 f934 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a5ec:	4834      	ldr	r0, [pc, #208]	; (2a6c0 <z_impl_k_yield+0x138>)
   2a5ee:	f000 fbe7 	bl	2adc0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   2a5f2:	68a1      	ldr	r1, [r4, #8]
   2a5f4:	4836      	ldr	r0, [pc, #216]	; (2a6d0 <z_impl_k_yield+0x148>)
   2a5f6:	f7ff f90d 	bl	29814 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2a5fa:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a5fc:	42b5      	cmp	r5, r6
   2a5fe:	d10b      	bne.n	2a618 <z_impl_k_yield+0x90>
   2a600:	4934      	ldr	r1, [pc, #208]	; (2a6d4 <z_impl_k_yield+0x14c>)
   2a602:	482b      	ldr	r0, [pc, #172]	; (2a6b0 <z_impl_k_yield+0x128>)
   2a604:	f240 3355 	movw	r3, #853	; 0x355
   2a608:	4a28      	ldr	r2, [pc, #160]	; (2a6ac <z_impl_k_yield+0x124>)
   2a60a:	f004 fe22 	bl	2f252 <printk>
   2a60e:	f240 3155 	movw	r1, #853	; 0x355
   2a612:	4826      	ldr	r0, [pc, #152]	; (2a6ac <z_impl_k_yield+0x124>)
   2a614:	f005 f91e 	bl	2f854 <assert_post_action>
	return list->head == list;
   2a618:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a61c:	4a2c      	ldr	r2, [pc, #176]	; (2a6d0 <z_impl_k_yield+0x148>)
   2a61e:	4293      	cmp	r3, r2
   2a620:	d03b      	beq.n	2a69a <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a622:	2b00      	cmp	r3, #0
   2a624:	d039      	beq.n	2a69a <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   2a626:	f995 000e 	ldrsb.w	r0, [r5, #14]
   2a62a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2a62e:	4286      	cmp	r6, r0
   2a630:	dd2e      	ble.n	2a690 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   2a632:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a634:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2a638:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2a63a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2a63c:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2a63e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   2a640:	7b53      	ldrb	r3, [r2, #13]
   2a642:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2a646:	7353      	strb	r3, [r2, #13]
   2a648:	f7ff f968 	bl	2991c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a64c:	481c      	ldr	r0, [pc, #112]	; (2a6c0 <z_impl_k_yield+0x138>)
   2a64e:	f000 fba7 	bl	2ada0 <z_spin_unlock_valid>
   2a652:	b968      	cbnz	r0, 2a670 <z_impl_k_yield+0xe8>
   2a654:	2384      	movs	r3, #132	; 0x84
   2a656:	4a1b      	ldr	r2, [pc, #108]	; (2a6c4 <z_impl_k_yield+0x13c>)
   2a658:	491f      	ldr	r1, [pc, #124]	; (2a6d8 <z_impl_k_yield+0x150>)
   2a65a:	4815      	ldr	r0, [pc, #84]	; (2a6b0 <z_impl_k_yield+0x128>)
   2a65c:	f004 fdf9 	bl	2f252 <printk>
   2a660:	4917      	ldr	r1, [pc, #92]	; (2a6c0 <z_impl_k_yield+0x138>)
   2a662:	481e      	ldr	r0, [pc, #120]	; (2a6dc <z_impl_k_yield+0x154>)
   2a664:	f004 fdf5 	bl	2f252 <printk>
   2a668:	2184      	movs	r1, #132	; 0x84
   2a66a:	4816      	ldr	r0, [pc, #88]	; (2a6c4 <z_impl_k_yield+0x13c>)
   2a66c:	f005 f8f2 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a670:	f387 8811 	msr	BASEPRI, r7
   2a674:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2a678:	f04f 0320 	mov.w	r3, #32
   2a67c:	f3ef 8011 	mrs	r0, BASEPRI
   2a680:	f383 8811 	msr	BASEPRI, r3
   2a684:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2a688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a68c:	f7ee ba1e 	b.w	18acc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2a690:	4299      	cmp	r1, r3
   2a692:	d002      	beq.n	2a69a <z_impl_k_yield+0x112>
   2a694:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a696:	2b00      	cmp	r3, #0
   2a698:	d1c7      	bne.n	2a62a <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   2a69a:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   2a69e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a6a0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a6a2:	62e5      	str	r5, [r4, #44]	; 0x2c
   2a6a4:	e7ca      	b.n	2a63c <z_impl_k_yield+0xb4>
   2a6a6:	bf00      	nop
   2a6a8:	00038a77 	.word	0x00038a77
   2a6ac:	00038ae9 	.word	0x00038ae9
   2a6b0:	00036be5 	.word	0x00036be5
   2a6b4:	00037086 	.word	0x00037086
   2a6b8:	20027418 	.word	0x20027418
   2a6bc:	20022a40 	.word	0x20022a40
   2a6c0:	20027450 	.word	0x20027450
   2a6c4:	00036fbb 	.word	0x00036fbb
   2a6c8:	00036fe1 	.word	0x00036fe1
   2a6cc:	00036ff6 	.word	0x00036ff6
   2a6d0:	20027440 	.word	0x20027440
   2a6d4:	00038b5f 	.word	0x00038b5f
   2a6d8:	0003700e 	.word	0x0003700e
   2a6dc:	00037025 	.word	0x00037025

0002a6e0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   2a6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a6e2:	4604      	mov	r4, r0
   2a6e4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   2a6e8:	b173      	cbz	r3, 2a708 <z_tick_sleep+0x28>
   2a6ea:	493b      	ldr	r1, [pc, #236]	; (2a7d8 <z_tick_sleep+0xf8>)
   2a6ec:	f240 437e 	movw	r3, #1150	; 0x47e
   2a6f0:	4a3a      	ldr	r2, [pc, #232]	; (2a7dc <z_tick_sleep+0xfc>)
   2a6f2:	483b      	ldr	r0, [pc, #236]	; (2a7e0 <z_tick_sleep+0x100>)
   2a6f4:	f004 fdad 	bl	2f252 <printk>
   2a6f8:	483a      	ldr	r0, [pc, #232]	; (2a7e4 <z_tick_sleep+0x104>)
   2a6fa:	f004 fdaa 	bl	2f252 <printk>
   2a6fe:	f240 417e 	movw	r1, #1150	; 0x47e
   2a702:	4836      	ldr	r0, [pc, #216]	; (2a7dc <z_tick_sleep+0xfc>)
   2a704:	f005 f8a6 	bl	2f854 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2a708:	b924      	cbnz	r4, 2a714 <z_tick_sleep+0x34>
	z_impl_k_yield();
   2a70a:	f7ff ff3d 	bl	2a588 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   2a70e:	4620      	mov	r0, r4
   2a710:	b003      	add	sp, #12
   2a712:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2a714:	f00a f8b2 	bl	3487c <z_tick_get_32>
	struct k_spinlock local_lock = {};
   2a718:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   2a71a:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   2a71c:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   2a71e:	9301      	str	r3, [sp, #4]
   2a720:	f04f 0320 	mov.w	r3, #32
   2a724:	f3ef 8711 	mrs	r7, BASEPRI
   2a728:	f383 8811 	msr	BASEPRI, r3
   2a72c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a730:	a801      	add	r0, sp, #4
   2a732:	f000 fb27 	bl	2ad84 <z_spin_lock_valid>
   2a736:	b968      	cbnz	r0, 2a754 <z_tick_sleep+0x74>
   2a738:	235c      	movs	r3, #92	; 0x5c
   2a73a:	4a2b      	ldr	r2, [pc, #172]	; (2a7e8 <z_tick_sleep+0x108>)
   2a73c:	492b      	ldr	r1, [pc, #172]	; (2a7ec <z_tick_sleep+0x10c>)
   2a73e:	4828      	ldr	r0, [pc, #160]	; (2a7e0 <z_tick_sleep+0x100>)
   2a740:	f004 fd87 	bl	2f252 <printk>
   2a744:	a901      	add	r1, sp, #4
   2a746:	482a      	ldr	r0, [pc, #168]	; (2a7f0 <z_tick_sleep+0x110>)
   2a748:	f004 fd83 	bl	2f252 <printk>
   2a74c:	215c      	movs	r1, #92	; 0x5c
   2a74e:	4826      	ldr	r0, [pc, #152]	; (2a7e8 <z_tick_sleep+0x108>)
   2a750:	f005 f880 	bl	2f854 <assert_post_action>
	pending_current = _current;
   2a754:	4d27      	ldr	r5, [pc, #156]	; (2a7f4 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   2a756:	a801      	add	r0, sp, #4
   2a758:	f000 fb32 	bl	2adc0 <z_spin_lock_set_owner>
   2a75c:	4b26      	ldr	r3, [pc, #152]	; (2a7f8 <z_tick_sleep+0x118>)
   2a75e:	68a8      	ldr	r0, [r5, #8]
   2a760:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   2a762:	f7ff fca7 	bl	2a0b4 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2a766:	68a8      	ldr	r0, [r5, #8]
   2a768:	4632      	mov	r2, r6
   2a76a:	3018      	adds	r0, #24
   2a76c:	4923      	ldr	r1, [pc, #140]	; (2a7fc <z_tick_sleep+0x11c>)
   2a76e:	f000 fc8d 	bl	2b08c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2a772:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a774:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2a776:	7b53      	ldrb	r3, [r2, #13]
   2a778:	f043 0310 	orr.w	r3, r3, #16
   2a77c:	7353      	strb	r3, [r2, #13]
   2a77e:	f000 fb0f 	bl	2ada0 <z_spin_unlock_valid>
   2a782:	b968      	cbnz	r0, 2a7a0 <z_tick_sleep+0xc0>
   2a784:	239b      	movs	r3, #155	; 0x9b
   2a786:	4a18      	ldr	r2, [pc, #96]	; (2a7e8 <z_tick_sleep+0x108>)
   2a788:	491d      	ldr	r1, [pc, #116]	; (2a800 <z_tick_sleep+0x120>)
   2a78a:	4815      	ldr	r0, [pc, #84]	; (2a7e0 <z_tick_sleep+0x100>)
   2a78c:	f004 fd61 	bl	2f252 <printk>
   2a790:	a901      	add	r1, sp, #4
   2a792:	481c      	ldr	r0, [pc, #112]	; (2a804 <z_tick_sleep+0x124>)
   2a794:	f004 fd5d 	bl	2f252 <printk>
   2a798:	219b      	movs	r1, #155	; 0x9b
   2a79a:	4813      	ldr	r0, [pc, #76]	; (2a7e8 <z_tick_sleep+0x108>)
   2a79c:	f005 f85a 	bl	2f854 <assert_post_action>
   2a7a0:	4638      	mov	r0, r7
   2a7a2:	f7ee f993 	bl	18acc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2a7a6:	68ab      	ldr	r3, [r5, #8]
   2a7a8:	7b5b      	ldrb	r3, [r3, #13]
   2a7aa:	06db      	lsls	r3, r3, #27
   2a7ac:	d50e      	bpl.n	2a7cc <z_tick_sleep+0xec>
   2a7ae:	4916      	ldr	r1, [pc, #88]	; (2a808 <z_tick_sleep+0x128>)
   2a7b0:	f240 43a3 	movw	r3, #1187	; 0x4a3
   2a7b4:	4a09      	ldr	r2, [pc, #36]	; (2a7dc <z_tick_sleep+0xfc>)
   2a7b6:	480a      	ldr	r0, [pc, #40]	; (2a7e0 <z_tick_sleep+0x100>)
   2a7b8:	f004 fd4b 	bl	2f252 <printk>
   2a7bc:	4809      	ldr	r0, [pc, #36]	; (2a7e4 <z_tick_sleep+0x104>)
   2a7be:	f004 fd48 	bl	2f252 <printk>
   2a7c2:	f240 41a3 	movw	r1, #1187	; 0x4a3
   2a7c6:	4805      	ldr	r0, [pc, #20]	; (2a7dc <z_tick_sleep+0xfc>)
   2a7c8:	f005 f844 	bl	2f854 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   2a7cc:	f00a f856 	bl	3487c <z_tick_get_32>
   2a7d0:	1a24      	subs	r4, r4, r0
   2a7d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2a7d6:	e79a      	b.n	2a70e <z_tick_sleep+0x2e>
   2a7d8:	00038a77 	.word	0x00038a77
   2a7dc:	00038ae9 	.word	0x00038ae9
   2a7e0:	00036be5 	.word	0x00036be5
   2a7e4:	00037086 	.word	0x00037086
   2a7e8:	00036fbb 	.word	0x00036fbb
   2a7ec:	00036fe1 	.word	0x00036fe1
   2a7f0:	00036ff6 	.word	0x00036ff6
   2a7f4:	20027418 	.word	0x20027418
   2a7f8:	2002744c 	.word	0x2002744c
   2a7fc:	00029b81 	.word	0x00029b81
   2a800:	0003700e 	.word	0x0003700e
   2a804:	00037025 	.word	0x00037025
   2a808:	00038b80 	.word	0x00038b80

0002a80c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2a80c:	b538      	push	{r3, r4, r5, lr}
   2a80e:	4604      	mov	r4, r0
   2a810:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2a814:	b173      	cbz	r3, 2a834 <z_impl_k_sleep+0x28>
   2a816:	4916      	ldr	r1, [pc, #88]	; (2a870 <z_impl_k_sleep+0x64>)
   2a818:	f240 43b2 	movw	r3, #1202	; 0x4b2
   2a81c:	4a15      	ldr	r2, [pc, #84]	; (2a874 <z_impl_k_sleep+0x68>)
   2a81e:	4816      	ldr	r0, [pc, #88]	; (2a878 <z_impl_k_sleep+0x6c>)
   2a820:	f004 fd17 	bl	2f252 <printk>
   2a824:	4815      	ldr	r0, [pc, #84]	; (2a87c <z_impl_k_sleep+0x70>)
   2a826:	f004 fd14 	bl	2f252 <printk>
   2a82a:	f240 41b2 	movw	r1, #1202	; 0x4b2
   2a82e:	4811      	ldr	r0, [pc, #68]	; (2a874 <z_impl_k_sleep+0x68>)
   2a830:	f005 f810 	bl	2f854 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a834:	1c63      	adds	r3, r4, #1
   2a836:	d105      	bne.n	2a844 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   2a838:	4b11      	ldr	r3, [pc, #68]	; (2a880 <z_impl_k_sleep+0x74>)
   2a83a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2a83c:	f7ff fb1c 	bl	29e78 <z_impl_k_thread_suspend>
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   2a840:	4620      	mov	r0, r4
   2a842:	bd38      	pop	{r3, r4, r5, pc}
   2a844:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2a848:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a84c:	2100      	movs	r1, #0
   2a84e:	2300      	movs	r3, #0
   2a850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a854:	fbe5 0104 	umlal	r0, r1, r5, r4
   2a858:	f7e2 ff8a 	bl	d770 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   2a85c:	f7ff ff40 	bl	2a6e0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   2a860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2a864:	fba0 0103 	umull	r0, r1, r0, r3
   2a868:	0bc4      	lsrs	r4, r0, #15
   2a86a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2a86e:	e7e7      	b.n	2a840 <z_impl_k_sleep+0x34>
   2a870:	00038a77 	.word	0x00038a77
   2a874:	00038ae9 	.word	0x00038ae9
   2a878:	00036be5 	.word	0x00036be5
   2a87c:	00037086 	.word	0x00037086
   2a880:	20027418 	.word	0x20027418

0002a884 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2a884:	4b01      	ldr	r3, [pc, #4]	; (2a88c <z_impl_k_current_get+0x8>)
   2a886:	6898      	ldr	r0, [r3, #8]
   2a888:	4770      	bx	lr
   2a88a:	bf00      	nop
   2a88c:	20027418 	.word	0x20027418

0002a890 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2a890:	b538      	push	{r3, r4, r5, lr}
   2a892:	4604      	mov	r4, r0
   2a894:	f04f 0320 	mov.w	r3, #32
   2a898:	f3ef 8511 	mrs	r5, BASEPRI
   2a89c:	f383 8811 	msr	BASEPRI, r3
   2a8a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a8a4:	4817      	ldr	r0, [pc, #92]	; (2a904 <z_impl_k_sem_give+0x74>)
   2a8a6:	f000 fa6d 	bl	2ad84 <z_spin_lock_valid>
   2a8aa:	b968      	cbnz	r0, 2a8c8 <z_impl_k_sem_give+0x38>
   2a8ac:	235c      	movs	r3, #92	; 0x5c
   2a8ae:	4a16      	ldr	r2, [pc, #88]	; (2a908 <z_impl_k_sem_give+0x78>)
   2a8b0:	4916      	ldr	r1, [pc, #88]	; (2a90c <z_impl_k_sem_give+0x7c>)
   2a8b2:	4817      	ldr	r0, [pc, #92]	; (2a910 <z_impl_k_sem_give+0x80>)
   2a8b4:	f004 fccd 	bl	2f252 <printk>
   2a8b8:	4912      	ldr	r1, [pc, #72]	; (2a904 <z_impl_k_sem_give+0x74>)
   2a8ba:	4816      	ldr	r0, [pc, #88]	; (2a914 <z_impl_k_sem_give+0x84>)
   2a8bc:	f004 fcc9 	bl	2f252 <printk>
   2a8c0:	215c      	movs	r1, #92	; 0x5c
   2a8c2:	4811      	ldr	r0, [pc, #68]	; (2a908 <z_impl_k_sem_give+0x78>)
   2a8c4:	f004 ffc6 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a8c8:	480e      	ldr	r0, [pc, #56]	; (2a904 <z_impl_k_sem_give+0x74>)
   2a8ca:	f000 fa79 	bl	2adc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2a8ce:	4620      	mov	r0, r4
   2a8d0:	f7ff fdbe 	bl	2a450 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   2a8d4:	b148      	cbz	r0, 2a8ea <z_impl_k_sem_give+0x5a>
   2a8d6:	2200      	movs	r2, #0
   2a8d8:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2a8da:	f7ff f909 	bl	29af0 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2a8de:	4629      	mov	r1, r5
}
   2a8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2a8e4:	4807      	ldr	r0, [pc, #28]	; (2a904 <z_impl_k_sem_give+0x74>)
   2a8e6:	f7fe bee1 	b.w	296ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2a8ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2a8ee:	429a      	cmp	r2, r3
   2a8f0:	bf18      	it	ne
   2a8f2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2a8f4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2a8f6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2a8f8:	f104 0010 	add.w	r0, r4, #16
   2a8fc:	f00a f861 	bl	349c2 <z_handle_obj_poll_events>
   2a900:	e7ed      	b.n	2a8de <z_impl_k_sem_give+0x4e>
   2a902:	bf00      	nop
   2a904:	2002745c 	.word	0x2002745c
   2a908:	00036fbb 	.word	0x00036fbb
   2a90c:	00036fe1 	.word	0x00036fe1
   2a910:	00036be5 	.word	0x00036be5
   2a914:	00036ff6 	.word	0x00036ff6

0002a918 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2a918:	b570      	push	{r4, r5, r6, lr}
   2a91a:	4605      	mov	r5, r0
   2a91c:	460e      	mov	r6, r1
   2a91e:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2a922:	b16b      	cbz	r3, 2a940 <z_impl_k_sem_take+0x28>
   2a924:	b161      	cbz	r1, 2a940 <z_impl_k_sem_take+0x28>
   2a926:	4934      	ldr	r1, [pc, #208]	; (2a9f8 <z_impl_k_sem_take+0xe0>)
   2a928:	238d      	movs	r3, #141	; 0x8d
   2a92a:	4a34      	ldr	r2, [pc, #208]	; (2a9fc <z_impl_k_sem_take+0xe4>)
   2a92c:	4834      	ldr	r0, [pc, #208]	; (2aa00 <z_impl_k_sem_take+0xe8>)
   2a92e:	f004 fc90 	bl	2f252 <printk>
   2a932:	4834      	ldr	r0, [pc, #208]	; (2aa04 <z_impl_k_sem_take+0xec>)
   2a934:	f004 fc8d 	bl	2f252 <printk>
   2a938:	218d      	movs	r1, #141	; 0x8d
   2a93a:	4830      	ldr	r0, [pc, #192]	; (2a9fc <z_impl_k_sem_take+0xe4>)
   2a93c:	f004 ff8a 	bl	2f854 <assert_post_action>
   2a940:	f04f 0320 	mov.w	r3, #32
   2a944:	f3ef 8411 	mrs	r4, BASEPRI
   2a948:	f383 8811 	msr	BASEPRI, r3
   2a94c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a950:	482d      	ldr	r0, [pc, #180]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a952:	f000 fa17 	bl	2ad84 <z_spin_lock_valid>
   2a956:	b968      	cbnz	r0, 2a974 <z_impl_k_sem_take+0x5c>
   2a958:	235c      	movs	r3, #92	; 0x5c
   2a95a:	4a2c      	ldr	r2, [pc, #176]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a95c:	492c      	ldr	r1, [pc, #176]	; (2aa10 <z_impl_k_sem_take+0xf8>)
   2a95e:	4828      	ldr	r0, [pc, #160]	; (2aa00 <z_impl_k_sem_take+0xe8>)
   2a960:	f004 fc77 	bl	2f252 <printk>
   2a964:	4928      	ldr	r1, [pc, #160]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a966:	482b      	ldr	r0, [pc, #172]	; (2aa14 <z_impl_k_sem_take+0xfc>)
   2a968:	f004 fc73 	bl	2f252 <printk>
   2a96c:	215c      	movs	r1, #92	; 0x5c
   2a96e:	4827      	ldr	r0, [pc, #156]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a970:	f004 ff70 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a974:	4824      	ldr	r0, [pc, #144]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a976:	f000 fa23 	bl	2adc0 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2a97a:	68ab      	ldr	r3, [r5, #8]
   2a97c:	b1cb      	cbz	r3, 2a9b2 <z_impl_k_sem_take+0x9a>
		sem->count--;
   2a97e:	3b01      	subs	r3, #1
   2a980:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a982:	4821      	ldr	r0, [pc, #132]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a984:	f000 fa0c 	bl	2ada0 <z_spin_unlock_valid>
   2a988:	b968      	cbnz	r0, 2a9a6 <z_impl_k_sem_take+0x8e>
   2a98a:	2384      	movs	r3, #132	; 0x84
   2a98c:	4a1f      	ldr	r2, [pc, #124]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a98e:	4922      	ldr	r1, [pc, #136]	; (2aa18 <z_impl_k_sem_take+0x100>)
   2a990:	481b      	ldr	r0, [pc, #108]	; (2aa00 <z_impl_k_sem_take+0xe8>)
   2a992:	f004 fc5e 	bl	2f252 <printk>
   2a996:	491c      	ldr	r1, [pc, #112]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a998:	4820      	ldr	r0, [pc, #128]	; (2aa1c <z_impl_k_sem_take+0x104>)
   2a99a:	f004 fc5a 	bl	2f252 <printk>
   2a99e:	2184      	movs	r1, #132	; 0x84
   2a9a0:	481a      	ldr	r0, [pc, #104]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a9a2:	f004 ff57 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2a9a6:	f384 8811 	msr	BASEPRI, r4
   2a9aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2a9ae:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2a9b0:	bd70      	pop	{r4, r5, r6, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a9b2:	b9c6      	cbnz	r6, 2a9e6 <z_impl_k_sem_take+0xce>
   2a9b4:	4814      	ldr	r0, [pc, #80]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a9b6:	f000 f9f3 	bl	2ada0 <z_spin_unlock_valid>
   2a9ba:	b968      	cbnz	r0, 2a9d8 <z_impl_k_sem_take+0xc0>
   2a9bc:	2384      	movs	r3, #132	; 0x84
   2a9be:	4a13      	ldr	r2, [pc, #76]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a9c0:	4915      	ldr	r1, [pc, #84]	; (2aa18 <z_impl_k_sem_take+0x100>)
   2a9c2:	480f      	ldr	r0, [pc, #60]	; (2aa00 <z_impl_k_sem_take+0xe8>)
   2a9c4:	f004 fc45 	bl	2f252 <printk>
   2a9c8:	490f      	ldr	r1, [pc, #60]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a9ca:	4814      	ldr	r0, [pc, #80]	; (2aa1c <z_impl_k_sem_take+0x104>)
   2a9cc:	f004 fc41 	bl	2f252 <printk>
   2a9d0:	2184      	movs	r1, #132	; 0x84
   2a9d2:	480e      	ldr	r0, [pc, #56]	; (2aa0c <z_impl_k_sem_take+0xf4>)
   2a9d4:	f004 ff3e 	bl	2f854 <assert_post_action>
   2a9d8:	f384 8811 	msr	BASEPRI, r4
   2a9dc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2a9e0:	f06f 000f 	mvn.w	r0, #15
		goto out;
   2a9e4:	e7e4      	b.n	2a9b0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2a9e6:	4633      	mov	r3, r6
   2a9e8:	462a      	mov	r2, r5
   2a9ea:	4621      	mov	r1, r4
}
   2a9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2a9f0:	4805      	ldr	r0, [pc, #20]	; (2aa08 <z_impl_k_sem_take+0xf0>)
   2a9f2:	f7ff bc6f 	b.w	2a2d4 <z_pend_curr>
   2a9f6:	bf00      	nop
   2a9f8:	00038be0 	.word	0x00038be0
   2a9fc:	00038bc0 	.word	0x00038bc0
   2aa00:	00036be5 	.word	0x00036be5
   2aa04:	00037086 	.word	0x00037086
   2aa08:	2002745c 	.word	0x2002745c
   2aa0c:	00036fbb 	.word	0x00036fbb
   2aa10:	00036fe1 	.word	0x00036fe1
   2aa14:	00036ff6 	.word	0x00036ff6
   2aa18:	0003700e 	.word	0x0003700e
   2aa1c:	00037025 	.word	0x00037025

0002aa20 <z_impl_k_stack_push>:
int z_impl_k_stack_push(struct k_stack *stack, stack_data_t data)
{
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key;

	CHECKIF(stack->next == stack->top) {
   2aa20:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2aa24:	429a      	cmp	r2, r3
{
   2aa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa2a:	4604      	mov	r4, r0
   2aa2c:	460f      	mov	r7, r1
	CHECKIF(stack->next == stack->top) {
   2aa2e:	d04c      	beq.n	2aaca <z_impl_k_stack_push+0xaa>
		return -ENOMEM;
	}

	key = k_spin_lock(&stack->lock);
   2aa30:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2aa34:	f04f 0320 	mov.w	r3, #32
   2aa38:	f3ef 8611 	mrs	r6, BASEPRI
   2aa3c:	f383 8811 	msr	BASEPRI, r3
   2aa40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aa44:	4628      	mov	r0, r5
   2aa46:	f000 f99d 	bl	2ad84 <z_spin_lock_valid>
   2aa4a:	b968      	cbnz	r0, 2aa68 <z_impl_k_stack_push+0x48>
   2aa4c:	235c      	movs	r3, #92	; 0x5c
   2aa4e:	4a20      	ldr	r2, [pc, #128]	; (2aad0 <z_impl_k_stack_push+0xb0>)
   2aa50:	4920      	ldr	r1, [pc, #128]	; (2aad4 <z_impl_k_stack_push+0xb4>)
   2aa52:	4821      	ldr	r0, [pc, #132]	; (2aad8 <z_impl_k_stack_push+0xb8>)
   2aa54:	f004 fbfd 	bl	2f252 <printk>
   2aa58:	4629      	mov	r1, r5
   2aa5a:	4820      	ldr	r0, [pc, #128]	; (2aadc <z_impl_k_stack_push+0xbc>)
   2aa5c:	f004 fbf9 	bl	2f252 <printk>
   2aa60:	215c      	movs	r1, #92	; 0x5c
   2aa62:	481b      	ldr	r0, [pc, #108]	; (2aad0 <z_impl_k_stack_push+0xb0>)
   2aa64:	f004 fef6 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2aa68:	4628      	mov	r0, r5
   2aa6a:	f000 f9a9 	bl	2adc0 <z_spin_lock_set_owner>

	first_pending_thread = z_unpend_first_thread(&stack->wait_q);
   2aa6e:	4620      	mov	r0, r4
   2aa70:	f7ff fcee 	bl	2a450 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2aa74:	4680      	mov	r8, r0
   2aa76:	b168      	cbz	r0, 2aa94 <z_impl_k_stack_push+0x74>
   2aa78:	2400      	movs	r4, #0
		z_ready_thread(first_pending_thread);
   2aa7a:	f7ff f839 	bl	29af0 <z_ready_thread>
   2aa7e:	f8c8 4070 	str.w	r4, [r8, #112]	; 0x70
   2aa82:	f8c8 7014 	str.w	r7, [r8, #20]

		z_thread_return_value_set_with_data(first_pending_thread,
						   0, (void *)data);
		z_reschedule(&stack->lock, key);
   2aa86:	4631      	mov	r1, r6
   2aa88:	4628      	mov	r0, r5
   2aa8a:	f7fe fe0f 	bl	296ac <z_reschedule>
		*(stack->next) = data;
		stack->next++;
		k_spin_unlock(&stack->lock, key);
	}

	return 0;
   2aa8e:	2000      	movs	r0, #0
}
   2aa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(stack->next) = data;
   2aa94:	6923      	ldr	r3, [r4, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aa96:	4628      	mov	r0, r5
   2aa98:	f843 7b04 	str.w	r7, [r3], #4
		stack->next++;
   2aa9c:	6123      	str	r3, [r4, #16]
   2aa9e:	f000 f97f 	bl	2ada0 <z_spin_unlock_valid>
   2aaa2:	b968      	cbnz	r0, 2aac0 <z_impl_k_stack_push+0xa0>
   2aaa4:	2384      	movs	r3, #132	; 0x84
   2aaa6:	4a0a      	ldr	r2, [pc, #40]	; (2aad0 <z_impl_k_stack_push+0xb0>)
   2aaa8:	490d      	ldr	r1, [pc, #52]	; (2aae0 <z_impl_k_stack_push+0xc0>)
   2aaaa:	480b      	ldr	r0, [pc, #44]	; (2aad8 <z_impl_k_stack_push+0xb8>)
   2aaac:	f004 fbd1 	bl	2f252 <printk>
   2aab0:	4629      	mov	r1, r5
   2aab2:	480c      	ldr	r0, [pc, #48]	; (2aae4 <z_impl_k_stack_push+0xc4>)
   2aab4:	f004 fbcd 	bl	2f252 <printk>
   2aab8:	2184      	movs	r1, #132	; 0x84
   2aaba:	4805      	ldr	r0, [pc, #20]	; (2aad0 <z_impl_k_stack_push+0xb0>)
   2aabc:	f004 feca 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2aac0:	f386 8811 	msr	BASEPRI, r6
   2aac4:	f3bf 8f6f 	isb	sy
   2aac8:	e7e1      	b.n	2aa8e <z_impl_k_stack_push+0x6e>
		return -ENOMEM;
   2aaca:	f06f 000b 	mvn.w	r0, #11
   2aace:	e7df      	b.n	2aa90 <z_impl_k_stack_push+0x70>
   2aad0:	00036fbb 	.word	0x00036fbb
   2aad4:	00036fe1 	.word	0x00036fe1
   2aad8:	00036be5 	.word	0x00036be5
   2aadc:	00036ff6 	.word	0x00036ff6
   2aae0:	0003700e 	.word	0x0003700e
   2aae4:	00037025 	.word	0x00037025

0002aae8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2aae8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2aaea:	4c08      	ldr	r4, [pc, #32]	; (2ab0c <k_sys_work_q_init+0x24>)
   2aaec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aaf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2aaf4:	4906      	ldr	r1, [pc, #24]	; (2ab10 <k_sys_work_q_init+0x28>)
   2aaf6:	4620      	mov	r0, r4
   2aaf8:	f000 f96a 	bl	2add0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   2aafc:	4905      	ldr	r1, [pc, #20]	; (2ab14 <k_sys_work_q_init+0x2c>)
   2aafe:	f104 001c 	add.w	r0, r4, #28
   2ab02:	f009 fe4c 	bl	3479e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2ab06:	2000      	movs	r0, #0
   2ab08:	bd10      	pop	{r4, pc}
   2ab0a:	bf00      	nop
   2ab0c:	20027460 	.word	0x20027460
   2ab10:	200350d0 	.word	0x200350d0
   2ab14:	00038c10 	.word	0x00038c10

0002ab18 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2ab18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ab1c:	b086      	sub	sp, #24
   2ab1e:	e9dd 6811 	ldrd	r6, r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   2ab22:	2e0f      	cmp	r6, #15
{
   2ab24:	4604      	mov	r4, r0
   2ab26:	4689      	mov	r9, r1
   2ab28:	4692      	mov	sl, r2
   2ab2a:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2ab2c:	d127      	bne.n	2ab7e <z_setup_new_thread+0x66>
   2ab2e:	4b20      	ldr	r3, [pc, #128]	; (2abb0 <z_setup_new_thread+0x98>)
   2ab30:	429f      	cmp	r7, r3
   2ab32:	d128      	bne.n	2ab86 <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
   2ab34:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2ab38:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   2ab3c:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   2ab3e:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
   2ab40:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2ab42:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->user_options = (u8_t)options;
   2ab44:	f884 800c 	strb.w	r8, [r4, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2ab48:	9302      	str	r3, [sp, #8]
   2ab4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	thread_base->prio = priority;
   2ab4c:	73a6      	strb	r6, [r4, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2ab4e:	9301      	str	r3, [sp, #4]
   2ab50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->sched_locked = 0U;
   2ab52:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2ab54:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
   2ab56:	e9c4 5506 	strd	r5, r5, [r4, #24]
   2ab5a:	463b      	mov	r3, r7
   2ab5c:	e9cd 6803 	strd	r6, r8, [sp, #12]
   2ab60:	4652      	mov	r2, sl
   2ab62:	4649      	mov	r1, r9
   2ab64:	4620      	mov	r0, r4
   2ab66:	f7ee f883 	bl	18c70 <arch_new_thread>
	if (!_current) {
   2ab6a:	4b12      	ldr	r3, [pc, #72]	; (2abb4 <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
   2ab6c:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   2ab70:	689b      	ldr	r3, [r3, #8]
   2ab72:	b103      	cbz	r3, 2ab76 <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   2ab74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2ab76:	66a3      	str	r3, [r4, #104]	; 0x68
}
   2ab78:	b006      	add	sp, #24
   2ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2ab7e:	f106 0310 	add.w	r3, r6, #16
   2ab82:	2b1e      	cmp	r3, #30
   2ab84:	d9d6      	bls.n	2ab34 <z_setup_new_thread+0x1c>
   2ab86:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2ab8a:	4a0b      	ldr	r2, [pc, #44]	; (2abb8 <z_setup_new_thread+0xa0>)
   2ab8c:	490b      	ldr	r1, [pc, #44]	; (2abbc <z_setup_new_thread+0xa4>)
   2ab8e:	480c      	ldr	r0, [pc, #48]	; (2abc0 <z_setup_new_thread+0xa8>)
   2ab90:	f004 fb5f 	bl	2f252 <printk>
   2ab94:	4631      	mov	r1, r6
   2ab96:	f06f 030f 	mvn.w	r3, #15
   2ab9a:	220e      	movs	r2, #14
   2ab9c:	4809      	ldr	r0, [pc, #36]	; (2abc4 <z_setup_new_thread+0xac>)
   2ab9e:	f004 fb58 	bl	2f252 <printk>
   2aba2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2aba6:	4804      	ldr	r0, [pc, #16]	; (2abb8 <z_setup_new_thread+0xa0>)
   2aba8:	f004 fe54 	bl	2f854 <assert_post_action>
   2abac:	e7c2      	b.n	2ab34 <z_setup_new_thread+0x1c>
   2abae:	bf00      	nop
   2abb0:	00028239 	.word	0x00028239
   2abb4:	20027418 	.word	0x20027418
   2abb8:	00038c6b 	.word	0x00038c6b
   2abbc:	00038c8e 	.word	0x00038c8e
   2abc0:	00036be5 	.word	0x00036be5
   2abc4:	00038d0e 	.word	0x00038d0e

0002abc8 <z_impl_k_thread_create>:
{
   2abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abcc:	b086      	sub	sp, #24
   2abce:	4604      	mov	r4, r0
   2abd0:	460e      	mov	r6, r1
   2abd2:	4617      	mov	r7, r2
   2abd4:	4698      	mov	r8, r3
   2abd6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2abd8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2abdc:	b173      	cbz	r3, 2abfc <z_impl_k_thread_create+0x34>
   2abde:	491f      	ldr	r1, [pc, #124]	; (2ac5c <z_impl_k_thread_create+0x94>)
   2abe0:	f240 2343 	movw	r3, #579	; 0x243
   2abe4:	4a1e      	ldr	r2, [pc, #120]	; (2ac60 <z_impl_k_thread_create+0x98>)
   2abe6:	481f      	ldr	r0, [pc, #124]	; (2ac64 <z_impl_k_thread_create+0x9c>)
   2abe8:	f004 fb33 	bl	2f252 <printk>
   2abec:	481e      	ldr	r0, [pc, #120]	; (2ac68 <z_impl_k_thread_create+0xa0>)
   2abee:	f004 fb30 	bl	2f252 <printk>
   2abf2:	f240 2143 	movw	r1, #579	; 0x243
   2abf6:	481a      	ldr	r0, [pc, #104]	; (2ac60 <z_impl_k_thread_create+0x98>)
   2abf8:	f004 fe2c 	bl	2f854 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2abfc:	2300      	movs	r3, #0
   2abfe:	9305      	str	r3, [sp, #20]
   2ac00:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2ac02:	463a      	mov	r2, r7
   2ac04:	9304      	str	r3, [sp, #16]
   2ac06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2ac08:	4631      	mov	r1, r6
   2ac0a:	9303      	str	r3, [sp, #12]
   2ac0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ac0e:	4620      	mov	r0, r4
   2ac10:	9302      	str	r3, [sp, #8]
   2ac12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2ac14:	9301      	str	r3, [sp, #4]
   2ac16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ac18:	9300      	str	r3, [sp, #0]
   2ac1a:	4643      	mov	r3, r8
   2ac1c:	f7ff ff7c 	bl	2ab18 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2ac20:	1c6b      	adds	r3, r5, #1
   2ac22:	d003      	beq.n	2ac2c <z_impl_k_thread_create+0x64>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2ac24:	b935      	cbnz	r5, 2ac34 <z_impl_k_thread_create+0x6c>
	z_sched_start(thread);
   2ac26:	4620      	mov	r0, r4
   2ac28:	f7ff f80e 	bl	29c48 <z_sched_start>
}
   2ac2c:	4620      	mov	r0, r4
   2ac2e:	b006      	add	sp, #24
   2ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   2ac34:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2ac38:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ac3c:	2100      	movs	r1, #0
   2ac3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ac42:	2300      	movs	r3, #0
   2ac44:	fbe6 0105 	umlal	r0, r1, r6, r5
   2ac48:	f7e2 fd92 	bl	d770 <__aeabi_uldivmod>
   2ac4c:	4907      	ldr	r1, [pc, #28]	; (2ac6c <z_impl_k_thread_create+0xa4>)
   2ac4e:	1c42      	adds	r2, r0, #1
   2ac50:	f104 0018 	add.w	r0, r4, #24
   2ac54:	f000 fa1a 	bl	2b08c <z_add_timeout>
   2ac58:	e7e8      	b.n	2ac2c <z_impl_k_thread_create+0x64>
   2ac5a:	bf00      	nop
   2ac5c:	00038a77 	.word	0x00038a77
   2ac60:	00038c6b 	.word	0x00038c6b
   2ac64:	00036be5 	.word	0x00036be5
   2ac68:	00038c19 	.word	0x00038c19
   2ac6c:	00029b81 	.word	0x00029b81

0002ac70 <z_init_static_threads>:
{
   2ac70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2ac74:	4f3c      	ldr	r7, [pc, #240]	; (2ad68 <z_init_static_threads+0xf8>)
   2ac76:	4d3d      	ldr	r5, [pc, #244]	; (2ad6c <z_init_static_threads+0xfc>)
   2ac78:	463e      	mov	r6, r7
   2ac7a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2ad7c <z_init_static_threads+0x10c>
{
   2ac7e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2ac80:	42bd      	cmp	r5, r7
   2ac82:	d90e      	bls.n	2aca2 <z_init_static_threads+0x32>
   2ac84:	493a      	ldr	r1, [pc, #232]	; (2ad70 <z_init_static_threads+0x100>)
   2ac86:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   2ac8a:	4642      	mov	r2, r8
   2ac8c:	4839      	ldr	r0, [pc, #228]	; (2ad74 <z_init_static_threads+0x104>)
   2ac8e:	f004 fae0 	bl	2f252 <printk>
   2ac92:	4839      	ldr	r0, [pc, #228]	; (2ad78 <z_init_static_threads+0x108>)
   2ac94:	f004 fadd 	bl	2f252 <printk>
   2ac98:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   2ac9c:	4640      	mov	r0, r8
   2ac9e:	f004 fdd9 	bl	2f854 <assert_post_action>
   2aca2:	42b5      	cmp	r5, r6
   2aca4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2aca8:	d31f      	bcc.n	2acea <z_init_static_threads+0x7a>
	k_sched_lock();
   2acaa:	f7fe fd3b 	bl	29724 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2acae:	4c2f      	ldr	r4, [pc, #188]	; (2ad6c <z_init_static_threads+0xfc>)
   2acb0:	4d32      	ldr	r5, [pc, #200]	; (2ad7c <z_init_static_threads+0x10c>)
   2acb2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2ad70 <z_init_static_threads+0x100>
   2acb6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2ad74 <z_init_static_threads+0x104>
   2acba:	42b4      	cmp	r4, r6
   2acbc:	d90e      	bls.n	2acdc <z_init_static_threads+0x6c>
   2acbe:	4641      	mov	r1, r8
   2acc0:	f240 23c7 	movw	r3, #711	; 0x2c7
   2acc4:	462a      	mov	r2, r5
   2acc6:	4648      	mov	r0, r9
   2acc8:	f004 fac3 	bl	2f252 <printk>
   2accc:	482a      	ldr	r0, [pc, #168]	; (2ad78 <z_init_static_threads+0x108>)
   2acce:	f004 fac0 	bl	2f252 <printk>
   2acd2:	f240 21c7 	movw	r1, #711	; 0x2c7
   2acd6:	4628      	mov	r0, r5
   2acd8:	f004 fdbc 	bl	2f854 <assert_post_action>
   2acdc:	42b4      	cmp	r4, r6
   2acde:	d321      	bcc.n	2ad24 <z_init_static_threads+0xb4>
}
   2ace0:	b007      	add	sp, #28
   2ace2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2ace6:	f7fe be3d 	b.w	29964 <k_sched_unlock>
		z_setup_new_thread(
   2acea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2acee:	9305      	str	r3, [sp, #20]
   2acf0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2acf4:	9304      	str	r3, [sp, #16]
   2acf6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2acfa:	9303      	str	r3, [sp, #12]
   2acfc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2ad00:	9302      	str	r3, [sp, #8]
   2ad02:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2ad06:	9301      	str	r3, [sp, #4]
   2ad08:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2ad0c:	9300      	str	r3, [sp, #0]
   2ad0e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2ad12:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2ad16:	f7ff feff 	bl	2ab18 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2ad1a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2ad1e:	655d      	str	r5, [r3, #84]	; 0x54
   2ad20:	4625      	mov	r5, r4
   2ad22:	e7ad      	b.n	2ac80 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2ad24:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   2ad28:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   2ad2c:	d006      	beq.n	2ad3c <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2ad2e:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2ad30:	f1bc 0f00 	cmp.w	ip, #0
   2ad34:	d104      	bne.n	2ad40 <z_init_static_threads+0xd0>
	z_sched_start(thread);
   2ad36:	4638      	mov	r0, r7
   2ad38:	f7fe ff86 	bl	29c48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2ad3c:	3430      	adds	r4, #48	; 0x30
   2ad3e:	e7bc      	b.n	2acba <z_init_static_threads+0x4a>
   2ad40:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2ad44:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ad48:	2100      	movs	r1, #0
   2ad4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ad4e:	2300      	movs	r3, #0
   2ad50:	fbee 010c 	umlal	r0, r1, lr, ip
   2ad54:	f7e2 fd0c 	bl	d770 <__aeabi_uldivmod>
   2ad58:	4909      	ldr	r1, [pc, #36]	; (2ad80 <z_init_static_threads+0x110>)
   2ad5a:	1c42      	adds	r2, r0, #1
   2ad5c:	f107 0018 	add.w	r0, r7, #24
   2ad60:	f000 f994 	bl	2b08c <z_add_timeout>
   2ad64:	e7ea      	b.n	2ad3c <z_init_static_threads+0xcc>
   2ad66:	bf00      	nop
   2ad68:	20020564 	.word	0x20020564
   2ad6c:	20020534 	.word	0x20020534
   2ad70:	00038c3e 	.word	0x00038c3e
   2ad74:	00036be5 	.word	0x00036be5
   2ad78:	00037104 	.word	0x00037104
   2ad7c:	00038c6b 	.word	0x00038c6b
   2ad80:	00029b81 	.word	0x00029b81

0002ad84 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2ad84:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2ad86:	b138      	cbz	r0, 2ad98 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   2ad88:	4b04      	ldr	r3, [pc, #16]	; (2ad9c <z_spin_lock_valid+0x18>)
   2ad8a:	f000 0003 	and.w	r0, r0, #3
   2ad8e:	7d1b      	ldrb	r3, [r3, #20]
   2ad90:	1ac0      	subs	r0, r0, r3
   2ad92:	bf18      	it	ne
   2ad94:	2001      	movne	r0, #1
   2ad96:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2ad98:	2001      	movs	r0, #1
}
   2ad9a:	4770      	bx	lr
   2ad9c:	20027418 	.word	0x20027418

0002ada0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2ada0:	4a06      	ldr	r2, [pc, #24]	; (2adbc <z_spin_unlock_valid+0x1c>)
   2ada2:	7d11      	ldrb	r1, [r2, #20]
   2ada4:	6893      	ldr	r3, [r2, #8]
   2ada6:	6802      	ldr	r2, [r0, #0]
   2ada8:	430b      	orrs	r3, r1
   2adaa:	429a      	cmp	r2, r3
   2adac:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   2adb0:	bf06      	itte	eq
   2adb2:	6003      	streq	r3, [r0, #0]
	return true;
   2adb4:	2001      	moveq	r0, #1
		return false;
   2adb6:	4618      	movne	r0, r3
}
   2adb8:	4770      	bx	lr
   2adba:	bf00      	nop
   2adbc:	20027418 	.word	0x20027418

0002adc0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2adc0:	4a02      	ldr	r2, [pc, #8]	; (2adcc <z_spin_lock_set_owner+0xc>)
   2adc2:	7d11      	ldrb	r1, [r2, #20]
   2adc4:	6893      	ldr	r3, [r2, #8]
   2adc6:	430b      	orrs	r3, r1
   2adc8:	6003      	str	r3, [r0, #0]
}
   2adca:	4770      	bx	lr
   2adcc:	20027418 	.word	0x20027418

0002add0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2add4:	4605      	mov	r5, r0
   2add6:	b086      	sub	sp, #24
   2add8:	460e      	mov	r6, r1
   2adda:	4617      	mov	r7, r2
   2addc:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2adde:	f009 fc7a 	bl	346d6 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2ade2:	f105 041c 	add.w	r4, r5, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2ade6:	2000      	movs	r0, #0
   2ade8:	4b09      	ldr	r3, [pc, #36]	; (2ae10 <k_work_q_start+0x40>)
   2adea:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2adee:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2adf2:	e9cd 5000 	strd	r5, r0, [sp]
   2adf6:	463a      	mov	r2, r7
   2adf8:	4631      	mov	r1, r6
   2adfa:	4620      	mov	r0, r4
   2adfc:	f7ff fee4 	bl	2abc8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2ae00:	4620      	mov	r0, r4
   2ae02:	4904      	ldr	r1, [pc, #16]	; (2ae14 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   2ae04:	b006      	add	sp, #24
   2ae06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2ae0a:	f009 bcc8 	b.w	3479e <z_impl_k_thread_name_set>
   2ae0e:	bf00      	nop
   2ae10:	0002f2c3 	.word	0x0002f2c3
   2ae14:	00038d3f 	.word	0x00038d3f

0002ae18 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   2ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae1c:	4606      	mov	r6, r0
   2ae1e:	460d      	mov	r5, r1
   2ae20:	4690      	mov	r8, r2
	__asm__ volatile(
   2ae22:	f04f 0320 	mov.w	r3, #32
   2ae26:	f3ef 8711 	mrs	r7, BASEPRI
   2ae2a:	f383 8811 	msr	BASEPRI, r3
   2ae2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ae32:	483a      	ldr	r0, [pc, #232]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2ae34:	f7ff ffa6 	bl	2ad84 <z_spin_lock_valid>
   2ae38:	b968      	cbnz	r0, 2ae56 <k_delayed_work_submit_to_queue+0x3e>
   2ae3a:	235c      	movs	r3, #92	; 0x5c
   2ae3c:	4a38      	ldr	r2, [pc, #224]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2ae3e:	4939      	ldr	r1, [pc, #228]	; (2af24 <k_delayed_work_submit_to_queue+0x10c>)
   2ae40:	4839      	ldr	r0, [pc, #228]	; (2af28 <k_delayed_work_submit_to_queue+0x110>)
   2ae42:	f004 fa06 	bl	2f252 <printk>
   2ae46:	4935      	ldr	r1, [pc, #212]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2ae48:	4838      	ldr	r0, [pc, #224]	; (2af2c <k_delayed_work_submit_to_queue+0x114>)
   2ae4a:	f004 fa02 	bl	2f252 <printk>
   2ae4e:	215c      	movs	r1, #92	; 0x5c
   2ae50:	4833      	ldr	r0, [pc, #204]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2ae52:	f004 fcff 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ae56:	4831      	ldr	r0, [pc, #196]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2ae58:	f7ff ffb2 	bl	2adc0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   2ae5c:	69eb      	ldr	r3, [r5, #28]
   2ae5e:	b30b      	cbz	r3, 2aea4 <k_delayed_work_submit_to_queue+0x8c>
   2ae60:	42b3      	cmp	r3, r6
   2ae62:	d157      	bne.n	2af14 <k_delayed_work_submit_to_queue+0xfc>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   2ae64:	4628      	mov	r0, r5
   2ae66:	f009 fcbe 	bl	347e6 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   2ae6a:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   2ae6e:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   2ae70:	d01a      	beq.n	2aea8 <k_delayed_work_submit_to_queue+0x90>
			err = 0;
		} else if (err < 0) {
   2ae72:	2800      	cmp	r0, #0
   2ae74:	da19      	bge.n	2aeaa <k_delayed_work_submit_to_queue+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ae76:	4829      	ldr	r0, [pc, #164]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2ae78:	f7ff ff92 	bl	2ada0 <z_spin_unlock_valid>
   2ae7c:	b968      	cbnz	r0, 2ae9a <k_delayed_work_submit_to_queue+0x82>
   2ae7e:	2384      	movs	r3, #132	; 0x84
   2ae80:	4a27      	ldr	r2, [pc, #156]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2ae82:	492b      	ldr	r1, [pc, #172]	; (2af30 <k_delayed_work_submit_to_queue+0x118>)
   2ae84:	4828      	ldr	r0, [pc, #160]	; (2af28 <k_delayed_work_submit_to_queue+0x110>)
   2ae86:	f004 f9e4 	bl	2f252 <printk>
   2ae8a:	4924      	ldr	r1, [pc, #144]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2ae8c:	4829      	ldr	r0, [pc, #164]	; (2af34 <k_delayed_work_submit_to_queue+0x11c>)
   2ae8e:	f004 f9e0 	bl	2f252 <printk>
   2ae92:	2184      	movs	r1, #132	; 0x84
   2ae94:	4822      	ldr	r0, [pc, #136]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2ae96:	f004 fcdd 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2ae9a:	f387 8811 	msr	BASEPRI, r7
   2ae9e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   2aea2:	e021      	b.n	2aee8 <k_delayed_work_submit_to_queue+0xd0>
	if (work->work_q == work_q) {
   2aea4:	2e00      	cmp	r6, #0
   2aea6:	d0dd      	beq.n	2ae64 <k_delayed_work_submit_to_queue+0x4c>
	int err = 0;
   2aea8:	2400      	movs	r4, #0
	work->work_q = work_q;
   2aeaa:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2aeac:	f1b8 0f00 	cmp.w	r8, #0
   2aeb0:	d11d      	bne.n	2aeee <k_delayed_work_submit_to_queue+0xd6>
   2aeb2:	481a      	ldr	r0, [pc, #104]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2aeb4:	f7ff ff74 	bl	2ada0 <z_spin_unlock_valid>
   2aeb8:	b968      	cbnz	r0, 2aed6 <k_delayed_work_submit_to_queue+0xbe>
   2aeba:	2384      	movs	r3, #132	; 0x84
   2aebc:	4a18      	ldr	r2, [pc, #96]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2aebe:	491c      	ldr	r1, [pc, #112]	; (2af30 <k_delayed_work_submit_to_queue+0x118>)
   2aec0:	4819      	ldr	r0, [pc, #100]	; (2af28 <k_delayed_work_submit_to_queue+0x110>)
   2aec2:	f004 f9c6 	bl	2f252 <printk>
   2aec6:	4915      	ldr	r1, [pc, #84]	; (2af1c <k_delayed_work_submit_to_queue+0x104>)
   2aec8:	481a      	ldr	r0, [pc, #104]	; (2af34 <k_delayed_work_submit_to_queue+0x11c>)
   2aeca:	f004 f9c2 	bl	2f252 <printk>
   2aece:	2184      	movs	r1, #132	; 0x84
   2aed0:	4813      	ldr	r0, [pc, #76]	; (2af20 <k_delayed_work_submit_to_queue+0x108>)
   2aed2:	f004 fcbf 	bl	2f854 <assert_post_action>
   2aed6:	f387 8811 	msr	BASEPRI, r7
   2aeda:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2aede:	4629      	mov	r1, r5
   2aee0:	4630      	mov	r0, r6
   2aee2:	f009 fc67 	bl	347b4 <k_work_submit_to_queue>
		return 0;
   2aee6:	2400      	movs	r4, #0
}
   2aee8:	4620      	mov	r0, r4
   2aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aeee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2aef2:	f240 30e7 	movw	r0, #999	; 0x3e7
   2aef6:	2100      	movs	r1, #0
   2aef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2aefc:	2300      	movs	r3, #0
   2aefe:	fbe6 0108 	umlal	r0, r1, r6, r8
   2af02:	f7e2 fc35 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout, delay);
   2af06:	490c      	ldr	r1, [pc, #48]	; (2af38 <k_delayed_work_submit_to_queue+0x120>)
   2af08:	1c42      	adds	r2, r0, #1
   2af0a:	f105 000c 	add.w	r0, r5, #12
   2af0e:	f000 f8bd 	bl	2b08c <z_add_timeout>
   2af12:	e7b0      	b.n	2ae76 <k_delayed_work_submit_to_queue+0x5e>
		err = -EADDRINUSE;
   2af14:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   2af18:	e7ad      	b.n	2ae76 <k_delayed_work_submit_to_queue+0x5e>
   2af1a:	bf00      	nop
   2af1c:	20027534 	.word	0x20027534
   2af20:	00036fbb 	.word	0x00036fbb
   2af24:	00036fe1 	.word	0x00036fe1
   2af28:	00036be5 	.word	0x00036be5
   2af2c:	00036ff6 	.word	0x00036ff6
   2af30:	0003700e 	.word	0x0003700e
   2af34:	00037025 	.word	0x00037025
   2af38:	000347dd 	.word	0x000347dd

0002af3c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2af3c:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   2af3e:	69c3      	ldr	r3, [r0, #28]
{
   2af40:	4604      	mov	r4, r0
	if (!work->work_q) {
   2af42:	2b00      	cmp	r3, #0
   2af44:	d038      	beq.n	2afb8 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   2af46:	f04f 0320 	mov.w	r3, #32
   2af4a:	f3ef 8511 	mrs	r5, BASEPRI
   2af4e:	f383 8811 	msr	BASEPRI, r3
   2af52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2af56:	481a      	ldr	r0, [pc, #104]	; (2afc0 <k_delayed_work_cancel+0x84>)
   2af58:	f7ff ff14 	bl	2ad84 <z_spin_lock_valid>
   2af5c:	b968      	cbnz	r0, 2af7a <k_delayed_work_cancel+0x3e>
   2af5e:	235c      	movs	r3, #92	; 0x5c
   2af60:	4a18      	ldr	r2, [pc, #96]	; (2afc4 <k_delayed_work_cancel+0x88>)
   2af62:	4919      	ldr	r1, [pc, #100]	; (2afc8 <k_delayed_work_cancel+0x8c>)
   2af64:	4819      	ldr	r0, [pc, #100]	; (2afcc <k_delayed_work_cancel+0x90>)
   2af66:	f004 f974 	bl	2f252 <printk>
   2af6a:	4915      	ldr	r1, [pc, #84]	; (2afc0 <k_delayed_work_cancel+0x84>)
   2af6c:	4818      	ldr	r0, [pc, #96]	; (2afd0 <k_delayed_work_cancel+0x94>)
   2af6e:	f004 f970 	bl	2f252 <printk>
   2af72:	215c      	movs	r1, #92	; 0x5c
   2af74:	4813      	ldr	r0, [pc, #76]	; (2afc4 <k_delayed_work_cancel+0x88>)
   2af76:	f004 fc6d 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2af7a:	4811      	ldr	r0, [pc, #68]	; (2afc0 <k_delayed_work_cancel+0x84>)
   2af7c:	f7ff ff20 	bl	2adc0 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   2af80:	4620      	mov	r0, r4
   2af82:	f009 fc30 	bl	347e6 <work_cancel>
   2af86:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2af88:	480d      	ldr	r0, [pc, #52]	; (2afc0 <k_delayed_work_cancel+0x84>)
   2af8a:	f7ff ff09 	bl	2ada0 <z_spin_unlock_valid>
   2af8e:	b968      	cbnz	r0, 2afac <k_delayed_work_cancel+0x70>
   2af90:	2384      	movs	r3, #132	; 0x84
   2af92:	4a0c      	ldr	r2, [pc, #48]	; (2afc4 <k_delayed_work_cancel+0x88>)
   2af94:	490f      	ldr	r1, [pc, #60]	; (2afd4 <k_delayed_work_cancel+0x98>)
   2af96:	480d      	ldr	r0, [pc, #52]	; (2afcc <k_delayed_work_cancel+0x90>)
   2af98:	f004 f95b 	bl	2f252 <printk>
   2af9c:	4908      	ldr	r1, [pc, #32]	; (2afc0 <k_delayed_work_cancel+0x84>)
   2af9e:	480e      	ldr	r0, [pc, #56]	; (2afd8 <k_delayed_work_cancel+0x9c>)
   2afa0:	f004 f957 	bl	2f252 <printk>
   2afa4:	2184      	movs	r1, #132	; 0x84
   2afa6:	4807      	ldr	r0, [pc, #28]	; (2afc4 <k_delayed_work_cancel+0x88>)
   2afa8:	f004 fc54 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2afac:	f385 8811 	msr	BASEPRI, r5
   2afb0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2afb4:	4620      	mov	r0, r4
   2afb6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2afb8:	f06f 0415 	mvn.w	r4, #21
   2afbc:	e7fa      	b.n	2afb4 <k_delayed_work_cancel+0x78>
   2afbe:	bf00      	nop
   2afc0:	20027534 	.word	0x20027534
   2afc4:	00036fbb 	.word	0x00036fbb
   2afc8:	00036fe1 	.word	0x00036fe1
   2afcc:	00036be5 	.word	0x00036be5
   2afd0:	00036ff6 	.word	0x00036ff6
   2afd4:	0003700e 	.word	0x0003700e
   2afd8:	00037025 	.word	0x00037025

0002afdc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2afdc:	4b03      	ldr	r3, [pc, #12]	; (2afec <elapsed+0x10>)
   2afde:	681b      	ldr	r3, [r3, #0]
   2afe0:	b90b      	cbnz	r3, 2afe6 <elapsed+0xa>
   2afe2:	f7ed ba2d 	b.w	18440 <z_clock_elapsed>
}
   2afe6:	2000      	movs	r0, #0
   2afe8:	4770      	bx	lr
   2afea:	bf00      	nop
   2afec:	20027538 	.word	0x20027538

0002aff0 <next_timeout>:
	return list->head == list;
   2aff0:	4b0b      	ldr	r3, [pc, #44]	; (2b020 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   2aff2:	b510      	push	{r4, lr}
   2aff4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aff6:	429c      	cmp	r4, r3
   2aff8:	bf08      	it	eq
   2affa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   2affc:	f7ff ffee 	bl	2afdc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2b000:	b154      	cbz	r4, 2b018 <next_timeout+0x28>
   2b002:	68a3      	ldr	r3, [r4, #8]
   2b004:	1a18      	subs	r0, r3, r0
   2b006:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2b00a:	4b06      	ldr	r3, [pc, #24]	; (2b024 <next_timeout+0x34>)
   2b00c:	691b      	ldr	r3, [r3, #16]
   2b00e:	b113      	cbz	r3, 2b016 <next_timeout+0x26>
   2b010:	4298      	cmp	r0, r3
   2b012:	bfa8      	it	ge
   2b014:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2b016:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2b018:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2b01c:	e7f5      	b.n	2b00a <next_timeout+0x1a>
   2b01e:	bf00      	nop
   2b020:	200201dc 	.word	0x200201dc
   2b024:	20027418 	.word	0x20027418

0002b028 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   2b028:	b510      	push	{r4, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   2b02a:	6804      	ldr	r4, [r0, #0]
   2b02c:	b1b4      	cbz	r4, 2b05c <timeout_rem+0x34>
	return list->head == list;
   2b02e:	4a0c      	ldr	r2, [pc, #48]	; (2b060 <timeout_rem+0x38>)
   2b030:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b032:	4293      	cmp	r3, r2
   2b034:	d010      	beq.n	2b058 <timeout_rem+0x30>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b036:	2400      	movs	r4, #0
   2b038:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   2b03a:	b91b      	cbnz	r3, 2b044 <timeout_rem+0x1c>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   2b03c:	f7ff ffce 	bl	2afdc <elapsed>
   2b040:	1a20      	subs	r0, r4, r0
}
   2b042:	bd10      	pop	{r4, pc}
		ticks += t->dticks;
   2b044:	6899      	ldr	r1, [r3, #8]
		if (timeout == t) {
   2b046:	4283      	cmp	r3, r0
		ticks += t->dticks;
   2b048:	440c      	add	r4, r1
		if (timeout == t) {
   2b04a:	d0f7      	beq.n	2b03c <timeout_rem+0x14>
   2b04c:	2b00      	cmp	r3, #0
   2b04e:	d0f5      	beq.n	2b03c <timeout_rem+0x14>
	return (node == list->tail) ? NULL : node->next;
   2b050:	4293      	cmp	r3, r2
   2b052:	d0f3      	beq.n	2b03c <timeout_rem+0x14>
   2b054:	681b      	ldr	r3, [r3, #0]
   2b056:	e7f0      	b.n	2b03a <timeout_rem+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b058:	2400      	movs	r4, #0
   2b05a:	e7ef      	b.n	2b03c <timeout_rem+0x14>
		return 0;
   2b05c:	4620      	mov	r0, r4
   2b05e:	e7f0      	b.n	2b042 <timeout_rem+0x1a>
   2b060:	200201dc 	.word	0x200201dc

0002b064 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b064:	6803      	ldr	r3, [r0, #0]
   2b066:	b140      	cbz	r0, 2b07a <remove_timeout+0x16>
   2b068:	4a07      	ldr	r2, [pc, #28]	; (2b088 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   2b06a:	6852      	ldr	r2, [r2, #4]
   2b06c:	4290      	cmp	r0, r2
   2b06e:	d004      	beq.n	2b07a <remove_timeout+0x16>
	if (next(t) != NULL) {
   2b070:	b11b      	cbz	r3, 2b07a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2b072:	689a      	ldr	r2, [r3, #8]
   2b074:	6881      	ldr	r1, [r0, #8]
   2b076:	440a      	add	r2, r1
   2b078:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2b07a:	6842      	ldr	r2, [r0, #4]
   2b07c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b07e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b080:	2300      	movs	r3, #0
	node->prev = NULL;
   2b082:	e9c0 3300 	strd	r3, r3, [r0]
}
   2b086:	4770      	bx	lr
   2b088:	200201dc 	.word	0x200201dc

0002b08c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b08c:	1c53      	adds	r3, r2, #1
{
   2b08e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b092:	4604      	mov	r4, r0
   2b094:	460e      	mov	r6, r1
   2b096:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b098:	d07f      	beq.n	2b19a <z_add_timeout+0x10e>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2b09a:	6803      	ldr	r3, [r0, #0]
   2b09c:	b163      	cbz	r3, 2b0b8 <z_add_timeout+0x2c>
   2b09e:	4943      	ldr	r1, [pc, #268]	; (2b1ac <z_add_timeout+0x120>)
   2b0a0:	2367      	movs	r3, #103	; 0x67
   2b0a2:	4a43      	ldr	r2, [pc, #268]	; (2b1b0 <z_add_timeout+0x124>)
   2b0a4:	4843      	ldr	r0, [pc, #268]	; (2b1b4 <z_add_timeout+0x128>)
   2b0a6:	f004 f8d4 	bl	2f252 <printk>
   2b0aa:	4843      	ldr	r0, [pc, #268]	; (2b1b8 <z_add_timeout+0x12c>)
   2b0ac:	f004 f8d1 	bl	2f252 <printk>
   2b0b0:	2167      	movs	r1, #103	; 0x67
   2b0b2:	483f      	ldr	r0, [pc, #252]	; (2b1b0 <z_add_timeout+0x124>)
   2b0b4:	f004 fbce 	bl	2f854 <assert_post_action>
	ticks = MAX(1, ticks);
   2b0b8:	2d00      	cmp	r5, #0
   2b0ba:	bf08      	it	eq
   2b0bc:	2501      	moveq	r5, #1
	to->fn = fn;
   2b0be:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2b0c0:	f04f 0320 	mov.w	r3, #32
   2b0c4:	f3ef 8811 	mrs	r8, BASEPRI
   2b0c8:	f383 8811 	msr	BASEPRI, r3
   2b0cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b0d0:	483a      	ldr	r0, [pc, #232]	; (2b1bc <z_add_timeout+0x130>)
   2b0d2:	f7ff fe57 	bl	2ad84 <z_spin_lock_valid>
   2b0d6:	b968      	cbnz	r0, 2b0f4 <z_add_timeout+0x68>
   2b0d8:	235c      	movs	r3, #92	; 0x5c
   2b0da:	4a39      	ldr	r2, [pc, #228]	; (2b1c0 <z_add_timeout+0x134>)
   2b0dc:	4939      	ldr	r1, [pc, #228]	; (2b1c4 <z_add_timeout+0x138>)
   2b0de:	4835      	ldr	r0, [pc, #212]	; (2b1b4 <z_add_timeout+0x128>)
   2b0e0:	f004 f8b7 	bl	2f252 <printk>
   2b0e4:	4935      	ldr	r1, [pc, #212]	; (2b1bc <z_add_timeout+0x130>)
   2b0e6:	4838      	ldr	r0, [pc, #224]	; (2b1c8 <z_add_timeout+0x13c>)
   2b0e8:	f004 f8b3 	bl	2f252 <printk>
   2b0ec:	215c      	movs	r1, #92	; 0x5c
   2b0ee:	4834      	ldr	r0, [pc, #208]	; (2b1c0 <z_add_timeout+0x134>)
   2b0f0:	f004 fbb0 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b0f4:	4831      	ldr	r0, [pc, #196]	; (2b1bc <z_add_timeout+0x130>)
   2b0f6:	f7ff fe63 	bl	2adc0 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   2b0fa:	f7ff ff6f 	bl	2afdc <elapsed>
   2b0fe:	4405      	add	r5, r0
   2b100:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2b102:	4d32      	ldr	r5, [pc, #200]	; (2b1cc <z_add_timeout+0x140>)
   2b104:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b106:	42ae      	cmp	r6, r5
   2b108:	d005      	beq.n	2b116 <z_add_timeout+0x8a>
			__ASSERT(t->dticks >= 0, "");
   2b10a:	4f29      	ldr	r7, [pc, #164]	; (2b1b0 <z_add_timeout+0x124>)
   2b10c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2b1d8 <z_add_timeout+0x14c>
   2b110:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2b1b4 <z_add_timeout+0x128>
		for (t = first(); t != NULL; t = next(t)) {
   2b114:	b936      	cbnz	r6, 2b124 <z_add_timeout+0x98>
	node->prev = list->tail;
   2b116:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2b118:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2b11a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2b11c:	686b      	ldr	r3, [r5, #4]
   2b11e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b120:	606c      	str	r4, [r5, #4]
   2b122:	e01a      	b.n	2b15a <z_add_timeout+0xce>
			__ASSERT(t->dticks >= 0, "");
   2b124:	68b3      	ldr	r3, [r6, #8]
   2b126:	2b00      	cmp	r3, #0
   2b128:	da0c      	bge.n	2b144 <z_add_timeout+0xb8>
   2b12a:	4649      	mov	r1, r9
   2b12c:	2370      	movs	r3, #112	; 0x70
   2b12e:	463a      	mov	r2, r7
   2b130:	4650      	mov	r0, sl
   2b132:	f004 f88e 	bl	2f252 <printk>
   2b136:	4820      	ldr	r0, [pc, #128]	; (2b1b8 <z_add_timeout+0x12c>)
   2b138:	f004 f88b 	bl	2f252 <printk>
   2b13c:	2170      	movs	r1, #112	; 0x70
   2b13e:	4638      	mov	r0, r7
   2b140:	f004 fb88 	bl	2f854 <assert_post_action>
			if (t->dticks > to->dticks) {
   2b144:	68b2      	ldr	r2, [r6, #8]
   2b146:	68a3      	ldr	r3, [r4, #8]
   2b148:	429a      	cmp	r2, r3
   2b14a:	dd28      	ble.n	2b19e <z_add_timeout+0x112>
				t->dticks -= to->dticks;
   2b14c:	1ad3      	subs	r3, r2, r3
   2b14e:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   2b150:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b152:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   2b156:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2b158:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2b15a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b15c:	42ab      	cmp	r3, r5
   2b15e:	d006      	beq.n	2b16e <z_add_timeout+0xe2>
		if (to == first()) {
   2b160:	429c      	cmp	r4, r3
   2b162:	d104      	bne.n	2b16e <z_add_timeout+0xe2>
			z_clock_set_timeout(next_timeout(), false);
   2b164:	f7ff ff44 	bl	2aff0 <next_timeout>
   2b168:	2100      	movs	r1, #0
   2b16a:	f7ed f905 	bl	18378 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b16e:	4813      	ldr	r0, [pc, #76]	; (2b1bc <z_add_timeout+0x130>)
   2b170:	f7ff fe16 	bl	2ada0 <z_spin_unlock_valid>
   2b174:	b968      	cbnz	r0, 2b192 <z_add_timeout+0x106>
   2b176:	2384      	movs	r3, #132	; 0x84
   2b178:	4a11      	ldr	r2, [pc, #68]	; (2b1c0 <z_add_timeout+0x134>)
   2b17a:	4915      	ldr	r1, [pc, #84]	; (2b1d0 <z_add_timeout+0x144>)
   2b17c:	480d      	ldr	r0, [pc, #52]	; (2b1b4 <z_add_timeout+0x128>)
   2b17e:	f004 f868 	bl	2f252 <printk>
   2b182:	490e      	ldr	r1, [pc, #56]	; (2b1bc <z_add_timeout+0x130>)
   2b184:	4813      	ldr	r0, [pc, #76]	; (2b1d4 <z_add_timeout+0x148>)
   2b186:	f004 f864 	bl	2f252 <printk>
   2b18a:	2184      	movs	r1, #132	; 0x84
   2b18c:	480c      	ldr	r0, [pc, #48]	; (2b1c0 <z_add_timeout+0x134>)
   2b18e:	f004 fb61 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b192:	f388 8811 	msr	BASEPRI, r8
   2b196:	f3bf 8f6f 	isb	sy
}
   2b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2b19e:	1a9b      	subs	r3, r3, r2
   2b1a0:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2b1a2:	686b      	ldr	r3, [r5, #4]
   2b1a4:	42b3      	cmp	r3, r6
   2b1a6:	d0b6      	beq.n	2b116 <z_add_timeout+0x8a>
   2b1a8:	6836      	ldr	r6, [r6, #0]
   2b1aa:	e7b3      	b.n	2b114 <z_add_timeout+0x88>
   2b1ac:	00038d6d 	.word	0x00038d6d
   2b1b0:	00038d49 	.word	0x00038d49
   2b1b4:	00036be5 	.word	0x00036be5
   2b1b8:	00037086 	.word	0x00037086
   2b1bc:	2002753c 	.word	0x2002753c
   2b1c0:	00036fbb 	.word	0x00036fbb
   2b1c4:	00036fe1 	.word	0x00036fe1
   2b1c8:	00036ff6 	.word	0x00036ff6
   2b1cc:	200201dc 	.word	0x200201dc
   2b1d0:	0003700e 	.word	0x0003700e
   2b1d4:	00037025 	.word	0x00037025
   2b1d8:	00038d8d 	.word	0x00038d8d

0002b1dc <z_abort_timeout>:
{
   2b1dc:	b538      	push	{r3, r4, r5, lr}
   2b1de:	4604      	mov	r4, r0
	__asm__ volatile(
   2b1e0:	f04f 0320 	mov.w	r3, #32
   2b1e4:	f3ef 8511 	mrs	r5, BASEPRI
   2b1e8:	f383 8811 	msr	BASEPRI, r3
   2b1ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b1f0:	481a      	ldr	r0, [pc, #104]	; (2b25c <z_abort_timeout+0x80>)
   2b1f2:	f7ff fdc7 	bl	2ad84 <z_spin_lock_valid>
   2b1f6:	b968      	cbnz	r0, 2b214 <z_abort_timeout+0x38>
   2b1f8:	235c      	movs	r3, #92	; 0x5c
   2b1fa:	4a19      	ldr	r2, [pc, #100]	; (2b260 <z_abort_timeout+0x84>)
   2b1fc:	4919      	ldr	r1, [pc, #100]	; (2b264 <z_abort_timeout+0x88>)
   2b1fe:	481a      	ldr	r0, [pc, #104]	; (2b268 <z_abort_timeout+0x8c>)
   2b200:	f004 f827 	bl	2f252 <printk>
   2b204:	4915      	ldr	r1, [pc, #84]	; (2b25c <z_abort_timeout+0x80>)
   2b206:	4819      	ldr	r0, [pc, #100]	; (2b26c <z_abort_timeout+0x90>)
   2b208:	f004 f823 	bl	2f252 <printk>
   2b20c:	215c      	movs	r1, #92	; 0x5c
   2b20e:	4814      	ldr	r0, [pc, #80]	; (2b260 <z_abort_timeout+0x84>)
   2b210:	f004 fb20 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b214:	4811      	ldr	r0, [pc, #68]	; (2b25c <z_abort_timeout+0x80>)
   2b216:	f7ff fdd3 	bl	2adc0 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2b21a:	6823      	ldr	r3, [r4, #0]
   2b21c:	b1db      	cbz	r3, 2b256 <z_abort_timeout+0x7a>
			remove_timeout(to);
   2b21e:	4620      	mov	r0, r4
   2b220:	f7ff ff20 	bl	2b064 <remove_timeout>
			ret = 0;
   2b224:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b226:	480d      	ldr	r0, [pc, #52]	; (2b25c <z_abort_timeout+0x80>)
   2b228:	f7ff fdba 	bl	2ada0 <z_spin_unlock_valid>
   2b22c:	b968      	cbnz	r0, 2b24a <z_abort_timeout+0x6e>
   2b22e:	2384      	movs	r3, #132	; 0x84
   2b230:	4a0b      	ldr	r2, [pc, #44]	; (2b260 <z_abort_timeout+0x84>)
   2b232:	490f      	ldr	r1, [pc, #60]	; (2b270 <z_abort_timeout+0x94>)
   2b234:	480c      	ldr	r0, [pc, #48]	; (2b268 <z_abort_timeout+0x8c>)
   2b236:	f004 f80c 	bl	2f252 <printk>
   2b23a:	4908      	ldr	r1, [pc, #32]	; (2b25c <z_abort_timeout+0x80>)
   2b23c:	480d      	ldr	r0, [pc, #52]	; (2b274 <z_abort_timeout+0x98>)
   2b23e:	f004 f808 	bl	2f252 <printk>
   2b242:	2184      	movs	r1, #132	; 0x84
   2b244:	4806      	ldr	r0, [pc, #24]	; (2b260 <z_abort_timeout+0x84>)
   2b246:	f004 fb05 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b24a:	f385 8811 	msr	BASEPRI, r5
   2b24e:	f3bf 8f6f 	isb	sy
}
   2b252:	4620      	mov	r0, r4
   2b254:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2b256:	f06f 0415 	mvn.w	r4, #21
   2b25a:	e7e4      	b.n	2b226 <z_abort_timeout+0x4a>
   2b25c:	2002753c 	.word	0x2002753c
   2b260:	00036fbb 	.word	0x00036fbb
   2b264:	00036fe1 	.word	0x00036fe1
   2b268:	00036be5 	.word	0x00036be5
   2b26c:	00036ff6 	.word	0x00036ff6
   2b270:	0003700e 	.word	0x0003700e
   2b274:	00037025 	.word	0x00037025

0002b278 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   2b278:	b538      	push	{r3, r4, r5, lr}
   2b27a:	4604      	mov	r4, r0
	__asm__ volatile(
   2b27c:	f04f 0320 	mov.w	r3, #32
   2b280:	f3ef 8511 	mrs	r5, BASEPRI
   2b284:	f383 8811 	msr	BASEPRI, r3
   2b288:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b28c:	4818      	ldr	r0, [pc, #96]	; (2b2f0 <z_timeout_remaining+0x78>)
   2b28e:	f7ff fd79 	bl	2ad84 <z_spin_lock_valid>
   2b292:	b968      	cbnz	r0, 2b2b0 <z_timeout_remaining+0x38>
   2b294:	235c      	movs	r3, #92	; 0x5c
   2b296:	4a17      	ldr	r2, [pc, #92]	; (2b2f4 <z_timeout_remaining+0x7c>)
   2b298:	4917      	ldr	r1, [pc, #92]	; (2b2f8 <z_timeout_remaining+0x80>)
   2b29a:	4818      	ldr	r0, [pc, #96]	; (2b2fc <z_timeout_remaining+0x84>)
   2b29c:	f003 ffd9 	bl	2f252 <printk>
   2b2a0:	4913      	ldr	r1, [pc, #76]	; (2b2f0 <z_timeout_remaining+0x78>)
   2b2a2:	4817      	ldr	r0, [pc, #92]	; (2b300 <z_timeout_remaining+0x88>)
   2b2a4:	f003 ffd5 	bl	2f252 <printk>
   2b2a8:	215c      	movs	r1, #92	; 0x5c
   2b2aa:	4812      	ldr	r0, [pc, #72]	; (2b2f4 <z_timeout_remaining+0x7c>)
   2b2ac:	f004 fad2 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b2b0:	480f      	ldr	r0, [pc, #60]	; (2b2f0 <z_timeout_remaining+0x78>)
   2b2b2:	f7ff fd85 	bl	2adc0 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   2b2b6:	4620      	mov	r0, r4
   2b2b8:	f7ff feb6 	bl	2b028 <timeout_rem>
   2b2bc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b2be:	480c      	ldr	r0, [pc, #48]	; (2b2f0 <z_timeout_remaining+0x78>)
   2b2c0:	f7ff fd6e 	bl	2ada0 <z_spin_unlock_valid>
   2b2c4:	b968      	cbnz	r0, 2b2e2 <z_timeout_remaining+0x6a>
   2b2c6:	2384      	movs	r3, #132	; 0x84
   2b2c8:	4a0a      	ldr	r2, [pc, #40]	; (2b2f4 <z_timeout_remaining+0x7c>)
   2b2ca:	490e      	ldr	r1, [pc, #56]	; (2b304 <z_timeout_remaining+0x8c>)
   2b2cc:	480b      	ldr	r0, [pc, #44]	; (2b2fc <z_timeout_remaining+0x84>)
   2b2ce:	f003 ffc0 	bl	2f252 <printk>
   2b2d2:	4907      	ldr	r1, [pc, #28]	; (2b2f0 <z_timeout_remaining+0x78>)
   2b2d4:	480c      	ldr	r0, [pc, #48]	; (2b308 <z_timeout_remaining+0x90>)
   2b2d6:	f003 ffbc 	bl	2f252 <printk>
   2b2da:	2184      	movs	r1, #132	; 0x84
   2b2dc:	4805      	ldr	r0, [pc, #20]	; (2b2f4 <z_timeout_remaining+0x7c>)
   2b2de:	f004 fab9 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b2e2:	f385 8811 	msr	BASEPRI, r5
   2b2e6:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   2b2ea:	4620      	mov	r0, r4
   2b2ec:	bd38      	pop	{r3, r4, r5, pc}
   2b2ee:	bf00      	nop
   2b2f0:	2002753c 	.word	0x2002753c
   2b2f4:	00036fbb 	.word	0x00036fbb
   2b2f8:	00036fe1 	.word	0x00036fe1
   2b2fc:	00036be5 	.word	0x00036be5
   2b300:	00036ff6 	.word	0x00036ff6
   2b304:	0003700e 	.word	0x0003700e
   2b308:	00037025 	.word	0x00037025

0002b30c <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   2b30c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b30e:	f04f 0320 	mov.w	r3, #32
   2b312:	f3ef 8511 	mrs	r5, BASEPRI
   2b316:	f383 8811 	msr	BASEPRI, r3
   2b31a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b31e:	4818      	ldr	r0, [pc, #96]	; (2b380 <z_get_next_timeout_expiry+0x74>)
   2b320:	f7ff fd30 	bl	2ad84 <z_spin_lock_valid>
   2b324:	b968      	cbnz	r0, 2b342 <z_get_next_timeout_expiry+0x36>
   2b326:	235c      	movs	r3, #92	; 0x5c
   2b328:	4a16      	ldr	r2, [pc, #88]	; (2b384 <z_get_next_timeout_expiry+0x78>)
   2b32a:	4917      	ldr	r1, [pc, #92]	; (2b388 <z_get_next_timeout_expiry+0x7c>)
   2b32c:	4817      	ldr	r0, [pc, #92]	; (2b38c <z_get_next_timeout_expiry+0x80>)
   2b32e:	f003 ff90 	bl	2f252 <printk>
   2b332:	4913      	ldr	r1, [pc, #76]	; (2b380 <z_get_next_timeout_expiry+0x74>)
   2b334:	4816      	ldr	r0, [pc, #88]	; (2b390 <z_get_next_timeout_expiry+0x84>)
   2b336:	f003 ff8c 	bl	2f252 <printk>
   2b33a:	215c      	movs	r1, #92	; 0x5c
   2b33c:	4811      	ldr	r0, [pc, #68]	; (2b384 <z_get_next_timeout_expiry+0x78>)
   2b33e:	f004 fa89 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b342:	480f      	ldr	r0, [pc, #60]	; (2b380 <z_get_next_timeout_expiry+0x74>)
   2b344:	f7ff fd3c 	bl	2adc0 <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2b348:	f7ff fe52 	bl	2aff0 <next_timeout>
   2b34c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b34e:	480c      	ldr	r0, [pc, #48]	; (2b380 <z_get_next_timeout_expiry+0x74>)
   2b350:	f7ff fd26 	bl	2ada0 <z_spin_unlock_valid>
   2b354:	b968      	cbnz	r0, 2b372 <z_get_next_timeout_expiry+0x66>
   2b356:	2384      	movs	r3, #132	; 0x84
   2b358:	4a0a      	ldr	r2, [pc, #40]	; (2b384 <z_get_next_timeout_expiry+0x78>)
   2b35a:	490e      	ldr	r1, [pc, #56]	; (2b394 <z_get_next_timeout_expiry+0x88>)
   2b35c:	480b      	ldr	r0, [pc, #44]	; (2b38c <z_get_next_timeout_expiry+0x80>)
   2b35e:	f003 ff78 	bl	2f252 <printk>
   2b362:	4907      	ldr	r1, [pc, #28]	; (2b380 <z_get_next_timeout_expiry+0x74>)
   2b364:	480c      	ldr	r0, [pc, #48]	; (2b398 <z_get_next_timeout_expiry+0x8c>)
   2b366:	f003 ff74 	bl	2f252 <printk>
   2b36a:	2184      	movs	r1, #132	; 0x84
   2b36c:	4805      	ldr	r0, [pc, #20]	; (2b384 <z_get_next_timeout_expiry+0x78>)
   2b36e:	f004 fa71 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b372:	f385 8811 	msr	BASEPRI, r5
   2b376:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2b37a:	4620      	mov	r0, r4
   2b37c:	bd38      	pop	{r3, r4, r5, pc}
   2b37e:	bf00      	nop
   2b380:	2002753c 	.word	0x2002753c
   2b384:	00036fbb 	.word	0x00036fbb
   2b388:	00036fe1 	.word	0x00036fe1
   2b38c:	00036be5 	.word	0x00036be5
   2b390:	00036ff6 	.word	0x00036ff6
   2b394:	0003700e 	.word	0x0003700e
   2b398:	00037025 	.word	0x00037025

0002b39c <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2b39c:	b570      	push	{r4, r5, r6, lr}
   2b39e:	4604      	mov	r4, r0
   2b3a0:	460e      	mov	r6, r1
	__asm__ volatile(
   2b3a2:	f04f 0320 	mov.w	r3, #32
   2b3a6:	f3ef 8511 	mrs	r5, BASEPRI
   2b3aa:	f383 8811 	msr	BASEPRI, r3
   2b3ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b3b2:	481b      	ldr	r0, [pc, #108]	; (2b420 <z_set_timeout_expiry+0x84>)
   2b3b4:	f7ff fce6 	bl	2ad84 <z_spin_lock_valid>
   2b3b8:	b968      	cbnz	r0, 2b3d6 <z_set_timeout_expiry+0x3a>
   2b3ba:	235c      	movs	r3, #92	; 0x5c
   2b3bc:	4a19      	ldr	r2, [pc, #100]	; (2b424 <z_set_timeout_expiry+0x88>)
   2b3be:	491a      	ldr	r1, [pc, #104]	; (2b428 <z_set_timeout_expiry+0x8c>)
   2b3c0:	481a      	ldr	r0, [pc, #104]	; (2b42c <z_set_timeout_expiry+0x90>)
   2b3c2:	f003 ff46 	bl	2f252 <printk>
   2b3c6:	4916      	ldr	r1, [pc, #88]	; (2b420 <z_set_timeout_expiry+0x84>)
   2b3c8:	4819      	ldr	r0, [pc, #100]	; (2b430 <z_set_timeout_expiry+0x94>)
   2b3ca:	f003 ff42 	bl	2f252 <printk>
   2b3ce:	215c      	movs	r1, #92	; 0x5c
   2b3d0:	4814      	ldr	r0, [pc, #80]	; (2b424 <z_set_timeout_expiry+0x88>)
   2b3d2:	f004 fa3f 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b3d6:	4812      	ldr	r0, [pc, #72]	; (2b420 <z_set_timeout_expiry+0x84>)
   2b3d8:	f7ff fcf2 	bl	2adc0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   2b3dc:	f7ff fe08 	bl	2aff0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2b3e0:	2801      	cmp	r0, #1
   2b3e2:	dd05      	ble.n	2b3f0 <z_set_timeout_expiry+0x54>
   2b3e4:	42a0      	cmp	r0, r4
   2b3e6:	dd03      	ble.n	2b3f0 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   2b3e8:	4631      	mov	r1, r6
   2b3ea:	4620      	mov	r0, r4
   2b3ec:	f7ec ffc4 	bl	18378 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b3f0:	480b      	ldr	r0, [pc, #44]	; (2b420 <z_set_timeout_expiry+0x84>)
   2b3f2:	f7ff fcd5 	bl	2ada0 <z_spin_unlock_valid>
   2b3f6:	b968      	cbnz	r0, 2b414 <z_set_timeout_expiry+0x78>
   2b3f8:	2384      	movs	r3, #132	; 0x84
   2b3fa:	4a0a      	ldr	r2, [pc, #40]	; (2b424 <z_set_timeout_expiry+0x88>)
   2b3fc:	490d      	ldr	r1, [pc, #52]	; (2b434 <z_set_timeout_expiry+0x98>)
   2b3fe:	480b      	ldr	r0, [pc, #44]	; (2b42c <z_set_timeout_expiry+0x90>)
   2b400:	f003 ff27 	bl	2f252 <printk>
   2b404:	4906      	ldr	r1, [pc, #24]	; (2b420 <z_set_timeout_expiry+0x84>)
   2b406:	480c      	ldr	r0, [pc, #48]	; (2b438 <z_set_timeout_expiry+0x9c>)
   2b408:	f003 ff23 	bl	2f252 <printk>
   2b40c:	2184      	movs	r1, #132	; 0x84
   2b40e:	4805      	ldr	r0, [pc, #20]	; (2b424 <z_set_timeout_expiry+0x88>)
   2b410:	f004 fa20 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b414:	f385 8811 	msr	BASEPRI, r5
   2b418:	f3bf 8f6f 	isb	sy
		}
	}
}
   2b41c:	bd70      	pop	{r4, r5, r6, pc}
   2b41e:	bf00      	nop
   2b420:	2002753c 	.word	0x2002753c
   2b424:	00036fbb 	.word	0x00036fbb
   2b428:	00036fe1 	.word	0x00036fe1
   2b42c:	00036be5 	.word	0x00036be5
   2b430:	00036ff6 	.word	0x00036ff6
   2b434:	0003700e 	.word	0x0003700e
   2b438:	00037025 	.word	0x00037025

0002b43c <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   2b43c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2b440:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2b442:	f7fe fce3 	bl	29e0c <z_time_slice>
	__asm__ volatile(
   2b446:	f04f 0320 	mov.w	r3, #32
   2b44a:	f3ef 8511 	mrs	r5, BASEPRI
   2b44e:	f383 8811 	msr	BASEPRI, r3
   2b452:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b456:	4848      	ldr	r0, [pc, #288]	; (2b578 <z_clock_announce+0x13c>)
   2b458:	f7ff fc94 	bl	2ad84 <z_spin_lock_valid>
   2b45c:	b968      	cbnz	r0, 2b47a <z_clock_announce+0x3e>
   2b45e:	235c      	movs	r3, #92	; 0x5c
   2b460:	4a46      	ldr	r2, [pc, #280]	; (2b57c <z_clock_announce+0x140>)
   2b462:	4947      	ldr	r1, [pc, #284]	; (2b580 <z_clock_announce+0x144>)
   2b464:	4847      	ldr	r0, [pc, #284]	; (2b584 <z_clock_announce+0x148>)
   2b466:	f003 fef4 	bl	2f252 <printk>
   2b46a:	4943      	ldr	r1, [pc, #268]	; (2b578 <z_clock_announce+0x13c>)
   2b46c:	4846      	ldr	r0, [pc, #280]	; (2b588 <z_clock_announce+0x14c>)
   2b46e:	f003 fef0 	bl	2f252 <printk>
   2b472:	215c      	movs	r1, #92	; 0x5c
   2b474:	4841      	ldr	r0, [pc, #260]	; (2b57c <z_clock_announce+0x140>)
   2b476:	f004 f9ed 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b47a:	4f44      	ldr	r7, [pc, #272]	; (2b58c <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2b47c:	4e44      	ldr	r6, [pc, #272]	; (2b590 <z_clock_announce+0x154>)
   2b47e:	46b9      	mov	r9, r7
   2b480:	483d      	ldr	r0, [pc, #244]	; (2b578 <z_clock_announce+0x13c>)
	return list->head == list;
   2b482:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2b59c <z_clock_announce+0x160>
   2b486:	f7ff fc9b 	bl	2adc0 <z_spin_lock_set_owner>
   2b48a:	6034      	str	r4, [r6, #0]
   2b48c:	f8d8 4000 	ldr.w	r4, [r8]
   2b490:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b492:	4544      	cmp	r4, r8
   2b494:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2b498:	d005      	beq.n	2b4a6 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2b49a:	b124      	cbz	r4, 2b4a6 <z_clock_announce+0x6a>
   2b49c:	68a3      	ldr	r3, [r4, #8]
   2b49e:	4293      	cmp	r3, r2
   2b4a0:	dd26      	ble.n	2b4f0 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2b4a2:	1a9b      	subs	r3, r3, r2
   2b4a4:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2b4a6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2b4a8:	eb1b 0002 	adds.w	r0, fp, r2
   2b4ac:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2b4b0:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2b4b4:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2b4b6:	f7ff fd9b 	bl	2aff0 <next_timeout>
   2b4ba:	4621      	mov	r1, r4
   2b4bc:	f7ec ff5c 	bl	18378 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b4c0:	482d      	ldr	r0, [pc, #180]	; (2b578 <z_clock_announce+0x13c>)
   2b4c2:	f7ff fc6d 	bl	2ada0 <z_spin_unlock_valid>
   2b4c6:	b968      	cbnz	r0, 2b4e4 <z_clock_announce+0xa8>
   2b4c8:	2384      	movs	r3, #132	; 0x84
   2b4ca:	4a2c      	ldr	r2, [pc, #176]	; (2b57c <z_clock_announce+0x140>)
   2b4cc:	4931      	ldr	r1, [pc, #196]	; (2b594 <z_clock_announce+0x158>)
   2b4ce:	482d      	ldr	r0, [pc, #180]	; (2b584 <z_clock_announce+0x148>)
   2b4d0:	f003 febf 	bl	2f252 <printk>
   2b4d4:	4928      	ldr	r1, [pc, #160]	; (2b578 <z_clock_announce+0x13c>)
   2b4d6:	4830      	ldr	r0, [pc, #192]	; (2b598 <z_clock_announce+0x15c>)
   2b4d8:	f003 febb 	bl	2f252 <printk>
   2b4dc:	2184      	movs	r1, #132	; 0x84
   2b4de:	4827      	ldr	r0, [pc, #156]	; (2b57c <z_clock_announce+0x140>)
   2b4e0:	f004 f9b8 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b4e4:	f385 8811 	msr	BASEPRI, r5
   2b4e8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2b4ec:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   2b4f0:	eb1b 0003 	adds.w	r0, fp, r3
   2b4f4:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2b4f8:	1ad3      	subs	r3, r2, r3
   2b4fa:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2b4fc:	2300      	movs	r3, #0
		curr_tick += dt;
   2b4fe:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   2b502:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   2b504:	4620      	mov	r0, r4
   2b506:	f7ff fdad 	bl	2b064 <remove_timeout>
   2b50a:	481b      	ldr	r0, [pc, #108]	; (2b578 <z_clock_announce+0x13c>)
   2b50c:	f7ff fc48 	bl	2ada0 <z_spin_unlock_valid>
   2b510:	b968      	cbnz	r0, 2b52e <z_clock_announce+0xf2>
   2b512:	2384      	movs	r3, #132	; 0x84
   2b514:	4a19      	ldr	r2, [pc, #100]	; (2b57c <z_clock_announce+0x140>)
   2b516:	491f      	ldr	r1, [pc, #124]	; (2b594 <z_clock_announce+0x158>)
   2b518:	481a      	ldr	r0, [pc, #104]	; (2b584 <z_clock_announce+0x148>)
   2b51a:	f003 fe9a 	bl	2f252 <printk>
   2b51e:	4916      	ldr	r1, [pc, #88]	; (2b578 <z_clock_announce+0x13c>)
   2b520:	481d      	ldr	r0, [pc, #116]	; (2b598 <z_clock_announce+0x15c>)
   2b522:	f003 fe96 	bl	2f252 <printk>
   2b526:	2184      	movs	r1, #132	; 0x84
   2b528:	4814      	ldr	r0, [pc, #80]	; (2b57c <z_clock_announce+0x140>)
   2b52a:	f004 f993 	bl	2f854 <assert_post_action>
   2b52e:	f385 8811 	msr	BASEPRI, r5
   2b532:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2b536:	68e3      	ldr	r3, [r4, #12]
   2b538:	4620      	mov	r0, r4
   2b53a:	4798      	blx	r3
	__asm__ volatile(
   2b53c:	f04f 0320 	mov.w	r3, #32
   2b540:	f3ef 8511 	mrs	r5, BASEPRI
   2b544:	f383 8811 	msr	BASEPRI, r3
   2b548:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b54c:	480a      	ldr	r0, [pc, #40]	; (2b578 <z_clock_announce+0x13c>)
   2b54e:	f7ff fc19 	bl	2ad84 <z_spin_lock_valid>
   2b552:	b968      	cbnz	r0, 2b570 <z_clock_announce+0x134>
   2b554:	235c      	movs	r3, #92	; 0x5c
   2b556:	4a09      	ldr	r2, [pc, #36]	; (2b57c <z_clock_announce+0x140>)
   2b558:	4909      	ldr	r1, [pc, #36]	; (2b580 <z_clock_announce+0x144>)
   2b55a:	480a      	ldr	r0, [pc, #40]	; (2b584 <z_clock_announce+0x148>)
   2b55c:	f003 fe79 	bl	2f252 <printk>
   2b560:	4905      	ldr	r1, [pc, #20]	; (2b578 <z_clock_announce+0x13c>)
   2b562:	4809      	ldr	r0, [pc, #36]	; (2b588 <z_clock_announce+0x14c>)
   2b564:	f003 fe75 	bl	2f252 <printk>
   2b568:	215c      	movs	r1, #92	; 0x5c
   2b56a:	4804      	ldr	r0, [pc, #16]	; (2b57c <z_clock_announce+0x140>)
   2b56c:	f004 f972 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b570:	4801      	ldr	r0, [pc, #4]	; (2b578 <z_clock_announce+0x13c>)
   2b572:	f7ff fc25 	bl	2adc0 <z_spin_lock_set_owner>
	return k;
   2b576:	e789      	b.n	2b48c <z_clock_announce+0x50>
   2b578:	2002753c 	.word	0x2002753c
   2b57c:	00036fbb 	.word	0x00036fbb
   2b580:	00036fe1 	.word	0x00036fe1
   2b584:	00036be5 	.word	0x00036be5
   2b588:	00036ff6 	.word	0x00036ff6
   2b58c:	20020968 	.word	0x20020968
   2b590:	20027538 	.word	0x20027538
   2b594:	0003700e 	.word	0x0003700e
   2b598:	00037025 	.word	0x00037025
   2b59c:	200201dc 	.word	0x200201dc

0002b5a0 <z_tick_get>:

s64_t z_tick_get(void)
{
   2b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5a4:	f04f 0320 	mov.w	r3, #32
   2b5a8:	f3ef 8611 	mrs	r6, BASEPRI
   2b5ac:	f383 8811 	msr	BASEPRI, r3
   2b5b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b5b4:	481b      	ldr	r0, [pc, #108]	; (2b624 <z_tick_get+0x84>)
   2b5b6:	f7ff fbe5 	bl	2ad84 <z_spin_lock_valid>
   2b5ba:	b968      	cbnz	r0, 2b5d8 <z_tick_get+0x38>
   2b5bc:	235c      	movs	r3, #92	; 0x5c
   2b5be:	4a1a      	ldr	r2, [pc, #104]	; (2b628 <z_tick_get+0x88>)
   2b5c0:	491a      	ldr	r1, [pc, #104]	; (2b62c <z_tick_get+0x8c>)
   2b5c2:	481b      	ldr	r0, [pc, #108]	; (2b630 <z_tick_get+0x90>)
   2b5c4:	f003 fe45 	bl	2f252 <printk>
   2b5c8:	4916      	ldr	r1, [pc, #88]	; (2b624 <z_tick_get+0x84>)
   2b5ca:	481a      	ldr	r0, [pc, #104]	; (2b634 <z_tick_get+0x94>)
   2b5cc:	f003 fe41 	bl	2f252 <printk>
   2b5d0:	215c      	movs	r1, #92	; 0x5c
   2b5d2:	4815      	ldr	r0, [pc, #84]	; (2b628 <z_tick_get+0x88>)
   2b5d4:	f004 f93e 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b5d8:	4812      	ldr	r0, [pc, #72]	; (2b624 <z_tick_get+0x84>)
   2b5da:	f7ff fbf1 	bl	2adc0 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2b5de:	f7ec ff2f 	bl	18440 <z_clock_elapsed>
   2b5e2:	4b15      	ldr	r3, [pc, #84]	; (2b638 <z_tick_get+0x98>)
   2b5e4:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b5e8:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b5ea:	480e      	ldr	r0, [pc, #56]	; (2b624 <z_tick_get+0x84>)
   2b5ec:	f145 0800 	adc.w	r8, r5, #0
   2b5f0:	f7ff fbd6 	bl	2ada0 <z_spin_unlock_valid>
   2b5f4:	b968      	cbnz	r0, 2b612 <z_tick_get+0x72>
   2b5f6:	2384      	movs	r3, #132	; 0x84
   2b5f8:	4a0b      	ldr	r2, [pc, #44]	; (2b628 <z_tick_get+0x88>)
   2b5fa:	4910      	ldr	r1, [pc, #64]	; (2b63c <z_tick_get+0x9c>)
   2b5fc:	480c      	ldr	r0, [pc, #48]	; (2b630 <z_tick_get+0x90>)
   2b5fe:	f003 fe28 	bl	2f252 <printk>
   2b602:	4908      	ldr	r1, [pc, #32]	; (2b624 <z_tick_get+0x84>)
   2b604:	480e      	ldr	r0, [pc, #56]	; (2b640 <z_tick_get+0xa0>)
   2b606:	f003 fe24 	bl	2f252 <printk>
   2b60a:	2184      	movs	r1, #132	; 0x84
   2b60c:	4806      	ldr	r0, [pc, #24]	; (2b628 <z_tick_get+0x88>)
   2b60e:	f004 f921 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b612:	f386 8811 	msr	BASEPRI, r6
   2b616:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2b61a:	4638      	mov	r0, r7
   2b61c:	4641      	mov	r1, r8
   2b61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b622:	bf00      	nop
   2b624:	2002753c 	.word	0x2002753c
   2b628:	00036fbb 	.word	0x00036fbb
   2b62c:	00036fe1 	.word	0x00036fe1
   2b630:	00036be5 	.word	0x00036be5
   2b634:	00036ff6 	.word	0x00036ff6
   2b638:	20020968 	.word	0x20020968
   2b63c:	0003700e 	.word	0x0003700e
   2b640:	00037025 	.word	0x00037025

0002b644 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2b644:	6a02      	ldr	r2, [r0, #32]
{
   2b646:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2b648:	1c53      	adds	r3, r2, #1
   2b64a:	2b01      	cmp	r3, #1
{
   2b64c:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2b64e:	d902      	bls.n	2b656 <z_timer_expiration_handler+0x12>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b650:	490b      	ldr	r1, [pc, #44]	; (2b680 <z_timer_expiration_handler+0x3c>)
   2b652:	f7ff fd1b 	bl	2b08c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2b656:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b658:	3301      	adds	r3, #1
   2b65a:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2b65c:	69a3      	ldr	r3, [r4, #24]
   2b65e:	b10b      	cbz	r3, 2b664 <z_timer_expiration_handler+0x20>
		timer->expiry_fn(timer);
   2b660:	4620      	mov	r0, r4
   2b662:	4798      	blx	r3
	return list->head == list;
   2b664:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b668:	42a5      	cmp	r5, r4
   2b66a:	d008      	beq.n	2b67e <z_timer_expiration_handler+0x3a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2b66c:	b13d      	cbz	r5, 2b67e <z_timer_expiration_handler+0x3a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2b66e:	4628      	mov	r0, r5
   2b670:	f7fd ffca 	bl	29608 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2b674:	4628      	mov	r0, r5
   2b676:	f7fe fa3b 	bl	29af0 <z_ready_thread>
   2b67a:	2300      	movs	r3, #0
   2b67c:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   2b67e:	bd38      	pop	{r3, r4, r5, pc}
   2b680:	0002b645 	.word	0x0002b645

0002b684 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2b684:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2b688:	f240 36e7 	movw	r6, #999	; 0x3e7
   2b68c:	2700      	movs	r7, #0
   2b68e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2b692:	46b3      	mov	fp, r6
   2b694:	46bc      	mov	ip, r7
   2b696:	fbe5 bc01 	umlal	fp, ip, r5, r1
   2b69a:	4604      	mov	r4, r0
   2b69c:	4691      	mov	r9, r2
   2b69e:	4661      	mov	r1, ip
   2b6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b6a4:	2300      	movs	r3, #0
   2b6a6:	4658      	mov	r0, fp
   2b6a8:	f7e2 f862 	bl	d770 <__aeabi_uldivmod>
   2b6ac:	4639      	mov	r1, r7
   2b6ae:	4680      	mov	r8, r0
   2b6b0:	4630      	mov	r0, r6
   2b6b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b6b6:	2300      	movs	r3, #0
   2b6b8:	fbe5 0109 	umlal	r0, r1, r5, r9
   2b6bc:	f7e2 f858 	bl	d770 <__aeabi_uldivmod>
   2b6c0:	4605      	mov	r5, r0
	if (Z_TICK_ABS(duration.ticks) < 0) {
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   2b6c2:	4620      	mov	r0, r4
   2b6c4:	f7ff fd8a 	bl	2b1dc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2b6c8:	2300      	movs	r3, #0
	period = k_ms_to_ticks_ceil32(period);
   2b6ca:	6225      	str	r5, [r4, #32]
	timer->status = 0U;
   2b6cc:	6263      	str	r3, [r4, #36]	; 0x24

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b6ce:	4642      	mov	r2, r8
   2b6d0:	4620      	mov	r0, r4
		     duration);
}
   2b6d2:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b6d6:	4901      	ldr	r1, [pc, #4]	; (2b6dc <z_impl_k_timer_start+0x58>)
   2b6d8:	f7ff bcd8 	b.w	2b08c <z_add_timeout>
   2b6dc:	0002b645 	.word	0x0002b645

0002b6e0 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   2b6e0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2b6e2:	6883      	ldr	r3, [r0, #8]
{
   2b6e4:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2b6e6:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2b6e8:	b964      	cbnz	r4, 2b704 <k_poll_poller_cb+0x24>
   2b6ea:	4915      	ldr	r1, [pc, #84]	; (2b740 <k_poll_poller_cb+0x60>)
   2b6ec:	23e0      	movs	r3, #224	; 0xe0
   2b6ee:	4a15      	ldr	r2, [pc, #84]	; (2b744 <k_poll_poller_cb+0x64>)
   2b6f0:	4815      	ldr	r0, [pc, #84]	; (2b748 <k_poll_poller_cb+0x68>)
   2b6f2:	f003 fdae 	bl	2f252 <printk>
   2b6f6:	4815      	ldr	r0, [pc, #84]	; (2b74c <k_poll_poller_cb+0x6c>)
   2b6f8:	f003 fdab 	bl	2f252 <printk>
   2b6fc:	21e0      	movs	r1, #224	; 0xe0
   2b6fe:	4811      	ldr	r0, [pc, #68]	; (2b744 <k_poll_poller_cb+0x64>)
   2b700:	f004 f8a8 	bl	2f854 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2b704:	7b63      	ldrb	r3, [r4, #13]
   2b706:	079a      	lsls	r2, r3, #30
   2b708:	d401      	bmi.n	2b70e <k_poll_poller_cb+0x2e>
		return 0;
   2b70a:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2b70c:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   2b70e:	6a23      	ldr	r3, [r4, #32]
   2b710:	3302      	adds	r3, #2
   2b712:	d012      	beq.n	2b73a <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   2b714:	4620      	mov	r0, r4
   2b716:	f7fe f8ab 	bl	29870 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b71a:	2d08      	cmp	r5, #8
   2b71c:	bf0c      	ite	eq
   2b71e:	f06f 0303 	mvneq.w	r3, #3
   2b722:	2300      	movne	r3, #0
   2b724:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b726:	7b63      	ldrb	r3, [r4, #13]
   2b728:	06db      	lsls	r3, r3, #27
   2b72a:	d1ee      	bne.n	2b70a <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   2b72c:	69a5      	ldr	r5, [r4, #24]
   2b72e:	2d00      	cmp	r5, #0
   2b730:	d1eb      	bne.n	2b70a <k_poll_poller_cb+0x2a>
	z_ready_thread(thread);
   2b732:	4620      	mov	r0, r4
   2b734:	f7fe f9dc 	bl	29af0 <z_ready_thread>
	return 0;
   2b738:	e7e7      	b.n	2b70a <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   2b73a:	f06f 000a 	mvn.w	r0, #10
   2b73e:	e7e5      	b.n	2b70c <k_poll_poller_cb+0x2c>
   2b740:	00038e63 	.word	0x00038e63
   2b744:	00038e42 	.word	0x00038e42
   2b748:	00036be5 	.word	0x00036be5
   2b74c:	00038e79 	.word	0x00038e79

0002b750 <clear_event_registrations>:
{
   2b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b754:	2414      	movs	r4, #20
   2b756:	4680      	mov	r8, r0
   2b758:	4617      	mov	r7, r2
	while (num_events--) {
   2b75a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2b75e:	4d48      	ldr	r5, [pc, #288]	; (2b880 <clear_event_registrations+0x130>)
   2b760:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2b8bc <clear_event_registrations+0x16c>
   2b764:	4e47      	ldr	r6, [pc, #284]	; (2b884 <clear_event_registrations+0x134>)
	while (num_events--) {
   2b766:	4544      	cmp	r4, r8
   2b768:	d101      	bne.n	2b76e <clear_event_registrations+0x1e>
}
   2b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2b76e:	2300      	movs	r3, #0
   2b770:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2b774:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2b778:	f003 030f 	and.w	r3, r3, #15
   2b77c:	2b04      	cmp	r3, #4
   2b77e:	d83d      	bhi.n	2b7fc <clear_event_registrations+0xac>
   2b780:	e8df f003 	tbb	[pc, r3]
   2b784:	3c032d49 	.word	0x3c032d49
   2b788:	1e          	.byte	0x1e
   2b789:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2b78a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2b78e:	b963      	cbnz	r3, 2b7aa <clear_event_registrations+0x5a>
   2b790:	493d      	ldr	r1, [pc, #244]	; (2b888 <clear_event_registrations+0x138>)
   2b792:	2396      	movs	r3, #150	; 0x96
   2b794:	462a      	mov	r2, r5
   2b796:	4630      	mov	r0, r6
   2b798:	f003 fd5b 	bl	2f252 <printk>
   2b79c:	483b      	ldr	r0, [pc, #236]	; (2b88c <clear_event_registrations+0x13c>)
   2b79e:	f003 fd58 	bl	2f252 <printk>
   2b7a2:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2b7a4:	4628      	mov	r0, r5
   2b7a6:	f004 f855 	bl	2f854 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2b7aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2b7ae:	b393      	cbz	r3, 2b816 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   2b7b0:	f854 2c10 	ldr.w	r2, [r4, #-16]
   2b7b4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b7b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b7b8:	2300      	movs	r3, #0
	node->prev = NULL;
   2b7ba:	e944 3305 	strd	r3, r3, [r4, #-20]
   2b7be:	e02a      	b.n	2b816 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2b7c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2b7c4:	2b00      	cmp	r3, #0
   2b7c6:	d1f0      	bne.n	2b7aa <clear_event_registrations+0x5a>
   2b7c8:	4931      	ldr	r1, [pc, #196]	; (2b890 <clear_event_registrations+0x140>)
   2b7ca:	239a      	movs	r3, #154	; 0x9a
   2b7cc:	462a      	mov	r2, r5
   2b7ce:	4630      	mov	r0, r6
   2b7d0:	f003 fd3f 	bl	2f252 <printk>
   2b7d4:	482f      	ldr	r0, [pc, #188]	; (2b894 <clear_event_registrations+0x144>)
   2b7d6:	f003 fd3c 	bl	2f252 <printk>
   2b7da:	219a      	movs	r1, #154	; 0x9a
   2b7dc:	e7e2      	b.n	2b7a4 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2b7de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2b7e2:	2b00      	cmp	r3, #0
   2b7e4:	d1e1      	bne.n	2b7aa <clear_event_registrations+0x5a>
   2b7e6:	492c      	ldr	r1, [pc, #176]	; (2b898 <clear_event_registrations+0x148>)
   2b7e8:	239e      	movs	r3, #158	; 0x9e
   2b7ea:	462a      	mov	r2, r5
   2b7ec:	4630      	mov	r0, r6
   2b7ee:	f003 fd30 	bl	2f252 <printk>
   2b7f2:	482a      	ldr	r0, [pc, #168]	; (2b89c <clear_event_registrations+0x14c>)
   2b7f4:	f003 fd2d 	bl	2f252 <printk>
   2b7f8:	219e      	movs	r1, #158	; 0x9e
   2b7fa:	e7d3      	b.n	2b7a4 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   2b7fc:	4649      	mov	r1, r9
   2b7fe:	23a5      	movs	r3, #165	; 0xa5
   2b800:	462a      	mov	r2, r5
   2b802:	4630      	mov	r0, r6
   2b804:	f003 fd25 	bl	2f252 <printk>
   2b808:	4825      	ldr	r0, [pc, #148]	; (2b8a0 <clear_event_registrations+0x150>)
   2b80a:	f003 fd22 	bl	2f252 <printk>
   2b80e:	21a5      	movs	r1, #165	; 0xa5
   2b810:	4628      	mov	r0, r5
   2b812:	f004 f81f 	bl	2f854 <assert_post_action>
   2b816:	4823      	ldr	r0, [pc, #140]	; (2b8a4 <clear_event_registrations+0x154>)
   2b818:	f7ff fac2 	bl	2ada0 <z_spin_unlock_valid>
   2b81c:	b968      	cbnz	r0, 2b83a <clear_event_registrations+0xea>
   2b81e:	2384      	movs	r3, #132	; 0x84
   2b820:	4a21      	ldr	r2, [pc, #132]	; (2b8a8 <clear_event_registrations+0x158>)
   2b822:	4922      	ldr	r1, [pc, #136]	; (2b8ac <clear_event_registrations+0x15c>)
   2b824:	4630      	mov	r0, r6
   2b826:	f003 fd14 	bl	2f252 <printk>
   2b82a:	491e      	ldr	r1, [pc, #120]	; (2b8a4 <clear_event_registrations+0x154>)
   2b82c:	4820      	ldr	r0, [pc, #128]	; (2b8b0 <clear_event_registrations+0x160>)
   2b82e:	f003 fd10 	bl	2f252 <printk>
   2b832:	2184      	movs	r1, #132	; 0x84
   2b834:	481c      	ldr	r0, [pc, #112]	; (2b8a8 <clear_event_registrations+0x158>)
   2b836:	f004 f80d 	bl	2f854 <assert_post_action>
   2b83a:	f387 8811 	msr	BASEPRI, r7
   2b83e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b842:	f04f 0320 	mov.w	r3, #32
   2b846:	f3ef 8711 	mrs	r7, BASEPRI
   2b84a:	f383 8811 	msr	BASEPRI, r3
   2b84e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b852:	4814      	ldr	r0, [pc, #80]	; (2b8a4 <clear_event_registrations+0x154>)
   2b854:	f7ff fa96 	bl	2ad84 <z_spin_lock_valid>
   2b858:	b968      	cbnz	r0, 2b876 <clear_event_registrations+0x126>
   2b85a:	235c      	movs	r3, #92	; 0x5c
   2b85c:	4a12      	ldr	r2, [pc, #72]	; (2b8a8 <clear_event_registrations+0x158>)
   2b85e:	4915      	ldr	r1, [pc, #84]	; (2b8b4 <clear_event_registrations+0x164>)
   2b860:	4630      	mov	r0, r6
   2b862:	f003 fcf6 	bl	2f252 <printk>
   2b866:	490f      	ldr	r1, [pc, #60]	; (2b8a4 <clear_event_registrations+0x154>)
   2b868:	4813      	ldr	r0, [pc, #76]	; (2b8b8 <clear_event_registrations+0x168>)
   2b86a:	f003 fcf2 	bl	2f252 <printk>
   2b86e:	215c      	movs	r1, #92	; 0x5c
   2b870:	480d      	ldr	r0, [pc, #52]	; (2b8a8 <clear_event_registrations+0x158>)
   2b872:	f003 ffef 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b876:	480b      	ldr	r0, [pc, #44]	; (2b8a4 <clear_event_registrations+0x154>)
   2b878:	f7ff faa2 	bl	2adc0 <z_spin_lock_set_owner>
	return k;
   2b87c:	3c14      	subs	r4, #20
   2b87e:	e772      	b.n	2b766 <clear_event_registrations+0x16>
   2b880:	00038e42 	.word	0x00038e42
   2b884:	00036be5 	.word	0x00036be5
   2b888:	00038d9c 	.word	0x00038d9c
   2b88c:	00038db6 	.word	0x00038db6
   2b890:	00038dcb 	.word	0x00038dcb
   2b894:	00038de7 	.word	0x00038de7
   2b898:	00038df8 	.word	0x00038df8
   2b89c:	00038e15 	.word	0x00038e15
   2b8a0:	00038e2c 	.word	0x00038e2c
   2b8a4:	20027540 	.word	0x20027540
   2b8a8:	00036fbb 	.word	0x00036fbb
   2b8ac:	0003700e 	.word	0x0003700e
   2b8b0:	00037025 	.word	0x00037025
   2b8b4:	00036fe1 	.word	0x00036fe1
   2b8b8:	00036ff6 	.word	0x00036ff6
   2b8bc:	00038ae7 	.word	0x00038ae7

0002b8c0 <register_events>:
{
   2b8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b8c4:	2700      	movs	r7, #0
{
   2b8c6:	468a      	mov	sl, r1
   2b8c8:	4615      	mov	r5, r2
   2b8ca:	4604      	mov	r4, r0
	int events_registered = 0;
   2b8cc:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b8ce:	4e69      	ldr	r6, [pc, #420]	; (2ba74 <register_events+0x1b4>)
   2b8d0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2bab4 <register_events+0x1f4>
{
   2b8d4:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2b8d6:	4557      	cmp	r7, sl
   2b8d8:	db03      	blt.n	2b8e2 <register_events+0x22>
}
   2b8da:	4648      	mov	r0, r9
   2b8dc:	b003      	add	sp, #12
   2b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8e2:	f04f 0320 	mov.w	r3, #32
   2b8e6:	f3ef 8b11 	mrs	fp, BASEPRI
   2b8ea:	f383 8811 	msr	BASEPRI, r3
   2b8ee:	f3bf 8f6f 	isb	sy
   2b8f2:	4630      	mov	r0, r6
   2b8f4:	f7ff fa46 	bl	2ad84 <z_spin_lock_valid>
   2b8f8:	b968      	cbnz	r0, 2b916 <register_events+0x56>
   2b8fa:	235c      	movs	r3, #92	; 0x5c
   2b8fc:	4642      	mov	r2, r8
   2b8fe:	495e      	ldr	r1, [pc, #376]	; (2ba78 <register_events+0x1b8>)
   2b900:	485e      	ldr	r0, [pc, #376]	; (2ba7c <register_events+0x1bc>)
   2b902:	f003 fca6 	bl	2f252 <printk>
   2b906:	4631      	mov	r1, r6
   2b908:	485d      	ldr	r0, [pc, #372]	; (2ba80 <register_events+0x1c0>)
   2b90a:	f003 fca2 	bl	2f252 <printk>
   2b90e:	215c      	movs	r1, #92	; 0x5c
   2b910:	4640      	mov	r0, r8
   2b912:	f003 ff9f 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b916:	4630      	mov	r0, r6
   2b918:	f7ff fa52 	bl	2adc0 <z_spin_lock_set_owner>
	switch (event->type) {
   2b91c:	7b63      	ldrb	r3, [r4, #13]
   2b91e:	f003 030f 	and.w	r3, r3, #15
   2b922:	2b04      	cmp	r3, #4
   2b924:	d844      	bhi.n	2b9b0 <register_events+0xf0>
   2b926:	e8df f003 	tbb	[pc, r3]
   2b92a:	3d2d      	.short	0x3d2d
   2b92c:	4303      	.short	0x4303
   2b92e:	2a          	.byte	0x2a
   2b92f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2b930:	6923      	ldr	r3, [r4, #16]
   2b932:	689b      	ldr	r3, [r3, #8]
   2b934:	b333      	cbz	r3, 2b984 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2b936:	2202      	movs	r2, #2
	event->poller = NULL;
   2b938:	2100      	movs	r1, #0
	event->state |= state;
   2b93a:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2b93c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2b93e:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2b942:	4302      	orrs	r2, r0
   2b944:	f362 3310 	bfi	r3, r2, #12, #5
   2b948:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2b94a:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b94c:	4630      	mov	r0, r6
   2b94e:	f7ff fa27 	bl	2ada0 <z_spin_unlock_valid>
   2b952:	b968      	cbnz	r0, 2b970 <register_events+0xb0>
   2b954:	2384      	movs	r3, #132	; 0x84
   2b956:	4642      	mov	r2, r8
   2b958:	494a      	ldr	r1, [pc, #296]	; (2ba84 <register_events+0x1c4>)
   2b95a:	4848      	ldr	r0, [pc, #288]	; (2ba7c <register_events+0x1bc>)
   2b95c:	f003 fc79 	bl	2f252 <printk>
   2b960:	4631      	mov	r1, r6
   2b962:	4849      	ldr	r0, [pc, #292]	; (2ba88 <register_events+0x1c8>)
   2b964:	f003 fc75 	bl	2f252 <printk>
   2b968:	2184      	movs	r1, #132	; 0x84
   2b96a:	4640      	mov	r0, r8
   2b96c:	f003 ff72 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2b970:	f38b 8811 	msr	BASEPRI, fp
   2b974:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b978:	3701      	adds	r7, #1
   2b97a:	3414      	adds	r4, #20
   2b97c:	e7ab      	b.n	2b8d6 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   2b97e:	6923      	ldr	r3, [r4, #16]
   2b980:	681b      	ldr	r3, [r3, #0]
   2b982:	bb33      	cbnz	r3, 2b9d2 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   2b984:	9b01      	ldr	r3, [sp, #4]
   2b986:	2b00      	cmp	r3, #0
   2b988:	d1e0      	bne.n	2b94c <register_events+0x8c>
   2b98a:	782b      	ldrb	r3, [r5, #0]
   2b98c:	2b00      	cmp	r3, #0
   2b98e:	d0dd      	beq.n	2b94c <register_events+0x8c>
	switch (event->type) {
   2b990:	7b63      	ldrb	r3, [r4, #13]
   2b992:	f003 030f 	and.w	r3, r3, #15
   2b996:	2b04      	cmp	r3, #4
   2b998:	d85d      	bhi.n	2ba56 <register_events+0x196>
   2b99a:	e8df f003 	tbb	[pc, r3]
   2b99e:	4931      	.short	0x4931
   2b9a0:	5c1c      	.short	0x5c1c
   2b9a2:	35          	.byte	0x35
   2b9a3:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2b9a4:	6923      	ldr	r3, [r4, #16]
   2b9a6:	689b      	ldr	r3, [r3, #8]
   2b9a8:	2b00      	cmp	r3, #0
   2b9aa:	d0eb      	beq.n	2b984 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   2b9ac:	2201      	movs	r2, #1
   2b9ae:	e7c3      	b.n	2b938 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2b9b0:	2350      	movs	r3, #80	; 0x50
   2b9b2:	4a36      	ldr	r2, [pc, #216]	; (2ba8c <register_events+0x1cc>)
   2b9b4:	4936      	ldr	r1, [pc, #216]	; (2ba90 <register_events+0x1d0>)
   2b9b6:	4831      	ldr	r0, [pc, #196]	; (2ba7c <register_events+0x1bc>)
   2b9b8:	f003 fc4b 	bl	2f252 <printk>
   2b9bc:	7b61      	ldrb	r1, [r4, #13]
   2b9be:	4835      	ldr	r0, [pc, #212]	; (2ba94 <register_events+0x1d4>)
   2b9c0:	f001 010f 	and.w	r1, r1, #15
   2b9c4:	f003 fc45 	bl	2f252 <printk>
   2b9c8:	2150      	movs	r1, #80	; 0x50
   2b9ca:	4830      	ldr	r0, [pc, #192]	; (2ba8c <register_events+0x1cc>)
   2b9cc:	f003 ff42 	bl	2f854 <assert_post_action>
		break;
   2b9d0:	e7d8      	b.n	2b984 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2b9d2:	2204      	movs	r2, #4
   2b9d4:	e7b0      	b.n	2b938 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2b9d6:	6923      	ldr	r3, [r4, #16]
   2b9d8:	b963      	cbnz	r3, 2b9f4 <register_events+0x134>
   2b9da:	492f      	ldr	r1, [pc, #188]	; (2ba98 <register_events+0x1d8>)
   2b9dc:	2375      	movs	r3, #117	; 0x75
   2b9de:	4a2b      	ldr	r2, [pc, #172]	; (2ba8c <register_events+0x1cc>)
   2b9e0:	4826      	ldr	r0, [pc, #152]	; (2ba7c <register_events+0x1bc>)
   2b9e2:	f003 fc36 	bl	2f252 <printk>
   2b9e6:	482d      	ldr	r0, [pc, #180]	; (2ba9c <register_events+0x1dc>)
   2b9e8:	f003 fc33 	bl	2f252 <printk>
   2b9ec:	2175      	movs	r1, #117	; 0x75
   2b9ee:	4827      	ldr	r0, [pc, #156]	; (2ba8c <register_events+0x1cc>)
   2b9f0:	f003 ff30 	bl	2f854 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2b9f4:	462a      	mov	r2, r5
   2b9f6:	4621      	mov	r1, r4
   2b9f8:	6920      	ldr	r0, [r4, #16]
   2b9fa:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2b9fc:	f008 ffb3 	bl	34966 <add_event>
	event->poller = poller;
   2ba00:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2ba02:	f109 0901 	add.w	r9, r9, #1
   2ba06:	e7a1      	b.n	2b94c <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2ba08:	6923      	ldr	r3, [r4, #16]
   2ba0a:	b963      	cbnz	r3, 2ba26 <register_events+0x166>
   2ba0c:	4924      	ldr	r1, [pc, #144]	; (2baa0 <register_events+0x1e0>)
   2ba0e:	2379      	movs	r3, #121	; 0x79
   2ba10:	4a1e      	ldr	r2, [pc, #120]	; (2ba8c <register_events+0x1cc>)
   2ba12:	481a      	ldr	r0, [pc, #104]	; (2ba7c <register_events+0x1bc>)
   2ba14:	f003 fc1d 	bl	2f252 <printk>
   2ba18:	4822      	ldr	r0, [pc, #136]	; (2baa4 <register_events+0x1e4>)
   2ba1a:	f003 fc1a 	bl	2f252 <printk>
   2ba1e:	2179      	movs	r1, #121	; 0x79
   2ba20:	481a      	ldr	r0, [pc, #104]	; (2ba8c <register_events+0x1cc>)
   2ba22:	f003 ff17 	bl	2f854 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2ba26:	6920      	ldr	r0, [r4, #16]
   2ba28:	462a      	mov	r2, r5
   2ba2a:	4621      	mov	r1, r4
   2ba2c:	3014      	adds	r0, #20
   2ba2e:	e7e5      	b.n	2b9fc <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2ba30:	6923      	ldr	r3, [r4, #16]
   2ba32:	b963      	cbnz	r3, 2ba4e <register_events+0x18e>
   2ba34:	491c      	ldr	r1, [pc, #112]	; (2baa8 <register_events+0x1e8>)
   2ba36:	237d      	movs	r3, #125	; 0x7d
   2ba38:	4a14      	ldr	r2, [pc, #80]	; (2ba8c <register_events+0x1cc>)
   2ba3a:	4810      	ldr	r0, [pc, #64]	; (2ba7c <register_events+0x1bc>)
   2ba3c:	f003 fc09 	bl	2f252 <printk>
   2ba40:	481a      	ldr	r0, [pc, #104]	; (2baac <register_events+0x1ec>)
   2ba42:	f003 fc06 	bl	2f252 <printk>
   2ba46:	217d      	movs	r1, #125	; 0x7d
   2ba48:	4810      	ldr	r0, [pc, #64]	; (2ba8c <register_events+0x1cc>)
   2ba4a:	f003 ff03 	bl	2f854 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2ba4e:	462a      	mov	r2, r5
   2ba50:	4621      	mov	r1, r4
   2ba52:	6920      	ldr	r0, [r4, #16]
   2ba54:	e7d2      	b.n	2b9fc <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   2ba56:	2384      	movs	r3, #132	; 0x84
   2ba58:	4a0c      	ldr	r2, [pc, #48]	; (2ba8c <register_events+0x1cc>)
   2ba5a:	490d      	ldr	r1, [pc, #52]	; (2ba90 <register_events+0x1d0>)
   2ba5c:	4807      	ldr	r0, [pc, #28]	; (2ba7c <register_events+0x1bc>)
   2ba5e:	f003 fbf8 	bl	2f252 <printk>
   2ba62:	4813      	ldr	r0, [pc, #76]	; (2bab0 <register_events+0x1f0>)
   2ba64:	f003 fbf5 	bl	2f252 <printk>
   2ba68:	2184      	movs	r1, #132	; 0x84
   2ba6a:	4808      	ldr	r0, [pc, #32]	; (2ba8c <register_events+0x1cc>)
   2ba6c:	f003 fef2 	bl	2f854 <assert_post_action>
		break;
   2ba70:	e7c6      	b.n	2ba00 <register_events+0x140>
   2ba72:	bf00      	nop
   2ba74:	20027540 	.word	0x20027540
   2ba78:	00036fe1 	.word	0x00036fe1
   2ba7c:	00036be5 	.word	0x00036be5
   2ba80:	00036ff6 	.word	0x00036ff6
   2ba84:	0003700e 	.word	0x0003700e
   2ba88:	00037025 	.word	0x00037025
   2ba8c:	00038e42 	.word	0x00038e42
   2ba90:	00038ae7 	.word	0x00038ae7
   2ba94:	00038e98 	.word	0x00038e98
   2ba98:	00038d9c 	.word	0x00038d9c
   2ba9c:	00038db6 	.word	0x00038db6
   2baa0:	00038dcb 	.word	0x00038dcb
   2baa4:	00038de7 	.word	0x00038de7
   2baa8:	00038df8 	.word	0x00038df8
   2baac:	00038e15 	.word	0x00038e15
   2bab0:	00038e2c 	.word	0x00038e2c
   2bab4:	00036fbb 	.word	0x00036fbb

0002bab8 <z_impl_k_poll>:
int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2bab8:	2301      	movs	r3, #1
{
   2baba:	b5f0      	push	{r4, r5, r6, r7, lr}
   2babc:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   2babe:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   2bac2:	4b71      	ldr	r3, [pc, #452]	; (2bc88 <z_impl_k_poll+0x1d0>)
{
   2bac4:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2bac6:	689b      	ldr	r3, [r3, #8]
{
   2bac8:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2baca:	9304      	str	r3, [sp, #16]
   2bacc:	4b6f      	ldr	r3, [pc, #444]	; (2bc8c <z_impl_k_poll+0x1d4>)
{
   2bace:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   2bad0:	9305      	str	r3, [sp, #20]
   2bad2:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   2bad6:	b173      	cbz	r3, 2baf6 <z_impl_k_poll+0x3e>
   2bad8:	496d      	ldr	r1, [pc, #436]	; (2bc90 <z_impl_k_poll+0x1d8>)
   2bada:	f44f 7380 	mov.w	r3, #256	; 0x100
   2bade:	4a6d      	ldr	r2, [pc, #436]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2bae0:	486d      	ldr	r0, [pc, #436]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bae2:	f003 fbb6 	bl	2f252 <printk>
   2bae6:	486d      	ldr	r0, [pc, #436]	; (2bc9c <z_impl_k_poll+0x1e4>)
   2bae8:	f003 fbb3 	bl	2f252 <printk>
   2baec:	f44f 7180 	mov.w	r1, #256	; 0x100
   2baf0:	4868      	ldr	r0, [pc, #416]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2baf2:	f003 feaf 	bl	2f854 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2baf6:	b974      	cbnz	r4, 2bb16 <z_impl_k_poll+0x5e>
   2baf8:	4969      	ldr	r1, [pc, #420]	; (2bca0 <z_impl_k_poll+0x1e8>)
   2bafa:	f240 1301 	movw	r3, #257	; 0x101
   2bafe:	4a65      	ldr	r2, [pc, #404]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2bb00:	4865      	ldr	r0, [pc, #404]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bb02:	f003 fba6 	bl	2f252 <printk>
   2bb06:	4867      	ldr	r0, [pc, #412]	; (2bca4 <z_impl_k_poll+0x1ec>)
   2bb08:	f003 fba3 	bl	2f252 <printk>
   2bb0c:	f240 1101 	movw	r1, #257	; 0x101
   2bb10:	4860      	ldr	r0, [pc, #384]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2bb12:	f003 fe9f 	bl	2f854 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2bb16:	2d00      	cmp	r5, #0
   2bb18:	da0e      	bge.n	2bb38 <z_impl_k_poll+0x80>
   2bb1a:	4963      	ldr	r1, [pc, #396]	; (2bca8 <z_impl_k_poll+0x1f0>)
   2bb1c:	f44f 7381 	mov.w	r3, #258	; 0x102
   2bb20:	4a5c      	ldr	r2, [pc, #368]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2bb22:	485d      	ldr	r0, [pc, #372]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bb24:	f003 fb95 	bl	2f252 <printk>
   2bb28:	4860      	ldr	r0, [pc, #384]	; (2bcac <z_impl_k_poll+0x1f4>)
   2bb2a:	f003 fb92 	bl	2f252 <printk>
   2bb2e:	f44f 7181 	mov.w	r1, #258	; 0x102
   2bb32:	4858      	ldr	r0, [pc, #352]	; (2bc94 <z_impl_k_poll+0x1dc>)
   2bb34:	f003 fe8e 	bl	2f854 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   2bb38:	fab6 f386 	clz	r3, r6
   2bb3c:	aa03      	add	r2, sp, #12
   2bb3e:	095b      	lsrs	r3, r3, #5
   2bb40:	4629      	mov	r1, r5
   2bb42:	4620      	mov	r0, r4
   2bb44:	f7ff febc 	bl	2b8c0 <register_events>
   2bb48:	4607      	mov	r7, r0
	__asm__ volatile(
   2bb4a:	f04f 0320 	mov.w	r3, #32
   2bb4e:	f3ef 8511 	mrs	r5, BASEPRI
   2bb52:	f383 8811 	msr	BASEPRI, r3
   2bb56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bb5a:	4855      	ldr	r0, [pc, #340]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bb5c:	f7ff f912 	bl	2ad84 <z_spin_lock_valid>
   2bb60:	b968      	cbnz	r0, 2bb7e <z_impl_k_poll+0xc6>
   2bb62:	235c      	movs	r3, #92	; 0x5c
   2bb64:	4a53      	ldr	r2, [pc, #332]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bb66:	4954      	ldr	r1, [pc, #336]	; (2bcb8 <z_impl_k_poll+0x200>)
   2bb68:	484b      	ldr	r0, [pc, #300]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bb6a:	f003 fb72 	bl	2f252 <printk>
   2bb6e:	4950      	ldr	r1, [pc, #320]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bb70:	4852      	ldr	r0, [pc, #328]	; (2bcbc <z_impl_k_poll+0x204>)
   2bb72:	f003 fb6e 	bl	2f252 <printk>
   2bb76:	215c      	movs	r1, #92	; 0x5c
   2bb78:	484e      	ldr	r0, [pc, #312]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bb7a:	f003 fe6b 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bb7e:	484c      	ldr	r0, [pc, #304]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bb80:	f7ff f91e 	bl	2adc0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2bb84:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2bb88:	b9f3      	cbnz	r3, 2bbc8 <z_impl_k_poll+0x110>
		clear_event_registrations(events, events_registered, key);
   2bb8a:	4620      	mov	r0, r4
   2bb8c:	462a      	mov	r2, r5
   2bb8e:	4639      	mov	r1, r7
   2bb90:	f7ff fdde 	bl	2b750 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bb94:	4846      	ldr	r0, [pc, #280]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bb96:	f7ff f903 	bl	2ada0 <z_spin_unlock_valid>
   2bb9a:	b968      	cbnz	r0, 2bbb8 <z_impl_k_poll+0x100>
   2bb9c:	2384      	movs	r3, #132	; 0x84
   2bb9e:	4a45      	ldr	r2, [pc, #276]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bba0:	4947      	ldr	r1, [pc, #284]	; (2bcc0 <z_impl_k_poll+0x208>)
   2bba2:	483d      	ldr	r0, [pc, #244]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bba4:	f003 fb55 	bl	2f252 <printk>
   2bba8:	4941      	ldr	r1, [pc, #260]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bbaa:	4846      	ldr	r0, [pc, #280]	; (2bcc4 <z_impl_k_poll+0x20c>)
   2bbac:	f003 fb51 	bl	2f252 <printk>
   2bbb0:	2184      	movs	r1, #132	; 0x84
   2bbb2:	4840      	ldr	r0, [pc, #256]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bbb4:	f003 fe4e 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2bbb8:	f385 8811 	msr	BASEPRI, r5
   2bbbc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   2bbc0:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2bbc2:	4628      	mov	r0, r5
   2bbc4:	b007      	add	sp, #28
   2bbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   2bbc8:	2300      	movs	r3, #0
   2bbca:	f88d 300c 	strb.w	r3, [sp, #12]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bbce:	b9c6      	cbnz	r6, 2bc02 <z_impl_k_poll+0x14a>
   2bbd0:	4837      	ldr	r0, [pc, #220]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bbd2:	f7ff f8e5 	bl	2ada0 <z_spin_unlock_valid>
   2bbd6:	b968      	cbnz	r0, 2bbf4 <z_impl_k_poll+0x13c>
   2bbd8:	2384      	movs	r3, #132	; 0x84
   2bbda:	4a36      	ldr	r2, [pc, #216]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bbdc:	4938      	ldr	r1, [pc, #224]	; (2bcc0 <z_impl_k_poll+0x208>)
   2bbde:	482e      	ldr	r0, [pc, #184]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bbe0:	f003 fb37 	bl	2f252 <printk>
   2bbe4:	4932      	ldr	r1, [pc, #200]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bbe6:	4837      	ldr	r0, [pc, #220]	; (2bcc4 <z_impl_k_poll+0x20c>)
   2bbe8:	f003 fb33 	bl	2f252 <printk>
   2bbec:	2184      	movs	r1, #132	; 0x84
   2bbee:	4831      	ldr	r0, [pc, #196]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bbf0:	f003 fe30 	bl	2f854 <assert_post_action>
   2bbf4:	f385 8811 	msr	BASEPRI, r5
   2bbf8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2bbfc:	f06f 050a 	mvn.w	r5, #10
   2bc00:	e7df      	b.n	2bbc2 <z_impl_k_poll+0x10a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2bc02:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2bc04:	4629      	mov	r1, r5
   2bc06:	4633      	mov	r3, r6
   2bc08:	4829      	ldr	r0, [pc, #164]	; (2bcb0 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2bc0a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2bc0e:	f7fe fb61 	bl	2a2d4 <z_pend_curr>
   2bc12:	4605      	mov	r5, r0
	__asm__ volatile(
   2bc14:	f04f 0320 	mov.w	r3, #32
   2bc18:	f3ef 8611 	mrs	r6, BASEPRI
   2bc1c:	f383 8811 	msr	BASEPRI, r3
   2bc20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc24:	4822      	ldr	r0, [pc, #136]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bc26:	f7ff f8ad 	bl	2ad84 <z_spin_lock_valid>
   2bc2a:	b968      	cbnz	r0, 2bc48 <z_impl_k_poll+0x190>
   2bc2c:	235c      	movs	r3, #92	; 0x5c
   2bc2e:	4a21      	ldr	r2, [pc, #132]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bc30:	4921      	ldr	r1, [pc, #132]	; (2bcb8 <z_impl_k_poll+0x200>)
   2bc32:	4819      	ldr	r0, [pc, #100]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bc34:	f003 fb0d 	bl	2f252 <printk>
   2bc38:	491d      	ldr	r1, [pc, #116]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bc3a:	4820      	ldr	r0, [pc, #128]	; (2bcbc <z_impl_k_poll+0x204>)
   2bc3c:	f003 fb09 	bl	2f252 <printk>
   2bc40:	215c      	movs	r1, #92	; 0x5c
   2bc42:	481c      	ldr	r0, [pc, #112]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bc44:	f003 fe06 	bl	2f854 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bc48:	4819      	ldr	r0, [pc, #100]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bc4a:	f7ff f8b9 	bl	2adc0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2bc4e:	4620      	mov	r0, r4
   2bc50:	4632      	mov	r2, r6
   2bc52:	4639      	mov	r1, r7
   2bc54:	f7ff fd7c 	bl	2b750 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bc58:	4815      	ldr	r0, [pc, #84]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bc5a:	f7ff f8a1 	bl	2ada0 <z_spin_unlock_valid>
   2bc5e:	b968      	cbnz	r0, 2bc7c <z_impl_k_poll+0x1c4>
   2bc60:	2384      	movs	r3, #132	; 0x84
   2bc62:	4a14      	ldr	r2, [pc, #80]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bc64:	4916      	ldr	r1, [pc, #88]	; (2bcc0 <z_impl_k_poll+0x208>)
   2bc66:	480c      	ldr	r0, [pc, #48]	; (2bc98 <z_impl_k_poll+0x1e0>)
   2bc68:	f003 faf3 	bl	2f252 <printk>
   2bc6c:	4910      	ldr	r1, [pc, #64]	; (2bcb0 <z_impl_k_poll+0x1f8>)
   2bc6e:	4815      	ldr	r0, [pc, #84]	; (2bcc4 <z_impl_k_poll+0x20c>)
   2bc70:	f003 faef 	bl	2f252 <printk>
   2bc74:	2184      	movs	r1, #132	; 0x84
   2bc76:	480f      	ldr	r0, [pc, #60]	; (2bcb4 <z_impl_k_poll+0x1fc>)
   2bc78:	f003 fdec 	bl	2f854 <assert_post_action>
	__asm__ volatile(
   2bc7c:	f386 8811 	msr	BASEPRI, r6
   2bc80:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2bc84:	e79d      	b.n	2bbc2 <z_impl_k_poll+0x10a>
   2bc86:	bf00      	nop
   2bc88:	20027418 	.word	0x20027418
   2bc8c:	0002b6e1 	.word	0x0002b6e1
   2bc90:	00038a77 	.word	0x00038a77
   2bc94:	00038e42 	.word	0x00038e42
   2bc98:	00036be5 	.word	0x00036be5
   2bc9c:	00037086 	.word	0x00037086
   2bca0:	00038eb5 	.word	0x00038eb5
   2bca4:	00038ecb 	.word	0x00038ecb
   2bca8:	00038eda 	.word	0x00038eda
   2bcac:	00038eea 	.word	0x00038eea
   2bcb0:	20027540 	.word	0x20027540
   2bcb4:	00036fbb 	.word	0x00036fbb
   2bcb8:	00036fe1 	.word	0x00036fe1
   2bcbc:	00036ff6 	.word	0x00036ff6
   2bcc0:	0003700e 	.word	0x0003700e
   2bcc4:	00037025 	.word	0x00037025

0002bcc8 <fabs>:
   2bcc8:	ec51 0b10 	vmov	r0, r1, d0
   2bccc:	ee10 2a10 	vmov	r2, s0
   2bcd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2bcd4:	ec43 2b10 	vmov	d0, r2, r3
   2bcd8:	4770      	bx	lr
   2bcda:	bf00      	nop

0002bcdc <fabsf>:
   2bcdc:	ee10 3a10 	vmov	r3, s0
   2bce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2bce4:	ee00 3a10 	vmov	s0, r3
   2bce8:	4770      	bx	lr
   2bcea:	bf00      	nop

0002bcec <floorf>:
   2bcec:	febb 0a40 	vrintm.f32	s0, s0
   2bcf0:	4770      	bx	lr
   2bcf2:	bf00      	nop

0002bcf4 <fmaxf>:
   2bcf4:	b508      	push	{r3, lr}
   2bcf6:	ed2d 8b02 	vpush	{d8}
   2bcfa:	eeb0 8a60 	vmov.f32	s16, s1
   2bcfe:	eef0 8a40 	vmov.f32	s17, s0
   2bd02:	f000 f833 	bl	2bd6c <__fpclassifyf>
   2bd06:	b920      	cbnz	r0, 2bd12 <fmaxf+0x1e>
   2bd08:	eeb0 0a48 	vmov.f32	s0, s16
   2bd0c:	ecbd 8b02 	vpop	{d8}
   2bd10:	bd08      	pop	{r3, pc}
   2bd12:	eeb0 0a48 	vmov.f32	s0, s16
   2bd16:	f000 f829 	bl	2bd6c <__fpclassifyf>
   2bd1a:	b120      	cbz	r0, 2bd26 <fmaxf+0x32>
   2bd1c:	eef4 8ac8 	vcmpe.f32	s17, s16
   2bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bd24:	ddf0      	ble.n	2bd08 <fmaxf+0x14>
   2bd26:	eeb0 0a68 	vmov.f32	s0, s17
   2bd2a:	ecbd 8b02 	vpop	{d8}
   2bd2e:	bd08      	pop	{r3, pc}

0002bd30 <fminf>:
   2bd30:	b508      	push	{r3, lr}
   2bd32:	ed2d 8b02 	vpush	{d8}
   2bd36:	eeb0 8a60 	vmov.f32	s16, s1
   2bd3a:	eef0 8a40 	vmov.f32	s17, s0
   2bd3e:	f000 f815 	bl	2bd6c <__fpclassifyf>
   2bd42:	b920      	cbnz	r0, 2bd4e <fminf+0x1e>
   2bd44:	eeb0 0a48 	vmov.f32	s0, s16
   2bd48:	ecbd 8b02 	vpop	{d8}
   2bd4c:	bd08      	pop	{r3, pc}
   2bd4e:	eeb0 0a48 	vmov.f32	s0, s16
   2bd52:	f000 f80b 	bl	2bd6c <__fpclassifyf>
   2bd56:	b120      	cbz	r0, 2bd62 <fminf+0x32>
   2bd58:	eef4 8ac8 	vcmpe.f32	s17, s16
   2bd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bd60:	d5f0      	bpl.n	2bd44 <fminf+0x14>
   2bd62:	eeb0 0a68 	vmov.f32	s0, s17
   2bd66:	ecbd 8b02 	vpop	{d8}
   2bd6a:	bd08      	pop	{r3, pc}

0002bd6c <__fpclassifyf>:
   2bd6c:	ee10 3a10 	vmov	r3, s0
   2bd70:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   2bd74:	d00e      	beq.n	2bd94 <__fpclassifyf+0x28>
   2bd76:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   2bd7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   2bd7e:	d30d      	bcc.n	2bd9c <__fpclassifyf+0x30>
   2bd80:	1e42      	subs	r2, r0, #1
   2bd82:	4b07      	ldr	r3, [pc, #28]	; (2bda0 <__fpclassifyf+0x34>)
   2bd84:	429a      	cmp	r2, r3
   2bd86:	d907      	bls.n	2bd98 <__fpclassifyf+0x2c>
   2bd88:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   2bd8c:	fab0 f080 	clz	r0, r0
   2bd90:	0940      	lsrs	r0, r0, #5
   2bd92:	4770      	bx	lr
   2bd94:	2002      	movs	r0, #2
   2bd96:	4770      	bx	lr
   2bd98:	2003      	movs	r0, #3
   2bd9a:	4770      	bx	lr
   2bd9c:	2004      	movs	r0, #4
   2bd9e:	4770      	bx	lr
   2bda0:	007ffffe 	.word	0x007ffffe

0002bda4 <roundf>:
   2bda4:	feb8 0a40 	vrinta.f32	s0, s0
   2bda8:	4770      	bx	lr
   2bdaa:	bf00      	nop

0002bdac <sinf>:
   2bdac:	ee10 3a10 	vmov	r3, s0
   2bdb0:	4a21      	ldr	r2, [pc, #132]	; (2be38 <sinf+0x8c>)
   2bdb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2bdb6:	4293      	cmp	r3, r2
   2bdb8:	b500      	push	{lr}
   2bdba:	b083      	sub	sp, #12
   2bdbc:	dd1a      	ble.n	2bdf4 <sinf+0x48>
   2bdbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2bdc2:	db04      	blt.n	2bdce <sinf+0x22>
   2bdc4:	ee30 0a40 	vsub.f32	s0, s0, s0
   2bdc8:	b003      	add	sp, #12
   2bdca:	f85d fb04 	ldr.w	pc, [sp], #4
   2bdce:	4668      	mov	r0, sp
   2bdd0:	f000 ffc0 	bl	2cd54 <__ieee754_rem_pio2f>
   2bdd4:	f000 0003 	and.w	r0, r0, #3
   2bdd8:	2801      	cmp	r0, #1
   2bdda:	d013      	beq.n	2be04 <sinf+0x58>
   2bddc:	2802      	cmp	r0, #2
   2bdde:	d020      	beq.n	2be22 <sinf+0x76>
   2bde0:	b1b8      	cbz	r0, 2be12 <sinf+0x66>
   2bde2:	eddd 0a01 	vldr	s1, [sp, #4]
   2bde6:	ed9d 0a00 	vldr	s0, [sp]
   2bdea:	f001 f8ed 	bl	2cfc8 <__kernel_cosf>
   2bdee:	eeb1 0a40 	vneg.f32	s0, s0
   2bdf2:	e7e9      	b.n	2bdc8 <sinf+0x1c>
   2bdf4:	2000      	movs	r0, #0
   2bdf6:	eddf 0a11 	vldr	s1, [pc, #68]	; 2be3c <sinf+0x90>
   2bdfa:	f001 fcb9 	bl	2d770 <__kernel_sinf>
   2bdfe:	b003      	add	sp, #12
   2be00:	f85d fb04 	ldr.w	pc, [sp], #4
   2be04:	eddd 0a01 	vldr	s1, [sp, #4]
   2be08:	ed9d 0a00 	vldr	s0, [sp]
   2be0c:	f001 f8dc 	bl	2cfc8 <__kernel_cosf>
   2be10:	e7da      	b.n	2bdc8 <sinf+0x1c>
   2be12:	2001      	movs	r0, #1
   2be14:	eddd 0a01 	vldr	s1, [sp, #4]
   2be18:	ed9d 0a00 	vldr	s0, [sp]
   2be1c:	f001 fca8 	bl	2d770 <__kernel_sinf>
   2be20:	e7d2      	b.n	2bdc8 <sinf+0x1c>
   2be22:	2001      	movs	r0, #1
   2be24:	eddd 0a01 	vldr	s1, [sp, #4]
   2be28:	ed9d 0a00 	vldr	s0, [sp]
   2be2c:	f001 fca0 	bl	2d770 <__kernel_sinf>
   2be30:	eeb1 0a40 	vneg.f32	s0, s0
   2be34:	e7c8      	b.n	2bdc8 <sinf+0x1c>
   2be36:	bf00      	nop
   2be38:	3f490fd8 	.word	0x3f490fd8
   2be3c:	00000000 	.word	0x00000000

0002be40 <expf>:
   2be40:	b508      	push	{r3, lr}
   2be42:	ed2d 8b02 	vpush	{d8}
   2be46:	eeb0 8a40 	vmov.f32	s16, s0
   2be4a:	f000 fa37 	bl	2c2bc <__ieee754_expf>
   2be4e:	4b16      	ldr	r3, [pc, #88]	; (2bea8 <expf+0x68>)
   2be50:	eef0 8a40 	vmov.f32	s17, s0
   2be54:	f993 3000 	ldrsb.w	r3, [r3]
   2be58:	3301      	adds	r3, #1
   2be5a:	d012      	beq.n	2be82 <expf+0x42>
   2be5c:	eeb0 0a48 	vmov.f32	s0, s16
   2be60:	f001 fd6e 	bl	2d940 <finitef>
   2be64:	b168      	cbz	r0, 2be82 <expf+0x42>
   2be66:	eddf 7a11 	vldr	s15, [pc, #68]	; 2beac <expf+0x6c>
   2be6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2be6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be72:	dc12      	bgt.n	2be9a <expf+0x5a>
   2be74:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2beb0 <expf+0x70>
   2be78:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2be7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be80:	d404      	bmi.n	2be8c <expf+0x4c>
   2be82:	eeb0 0a68 	vmov.f32	s0, s17
   2be86:	ecbd 8b02 	vpop	{d8}
   2be8a:	bd08      	pop	{r3, pc}
   2be8c:	f005 f912 	bl	310b4 <__errno>
   2be90:	2322      	movs	r3, #34	; 0x22
   2be92:	eddf 8a08 	vldr	s17, [pc, #32]	; 2beb4 <expf+0x74>
   2be96:	6003      	str	r3, [r0, #0]
   2be98:	e7f3      	b.n	2be82 <expf+0x42>
   2be9a:	f005 f90b 	bl	310b4 <__errno>
   2be9e:	2322      	movs	r3, #34	; 0x22
   2bea0:	eddf 8a05 	vldr	s17, [pc, #20]	; 2beb8 <expf+0x78>
   2bea4:	6003      	str	r3, [r0, #0]
   2bea6:	e7ec      	b.n	2be82 <expf+0x42>
   2bea8:	200204a0 	.word	0x200204a0
   2beac:	42b17180 	.word	0x42b17180
   2beb0:	c2cff1b5 	.word	0xc2cff1b5
   2beb4:	00000000 	.word	0x00000000
   2beb8:	7f800000 	.word	0x7f800000

0002bebc <logf>:
   2bebc:	b508      	push	{r3, lr}
   2bebe:	ed2d 8b02 	vpush	{d8}
   2bec2:	eeb0 8a40 	vmov.f32	s16, s0
   2bec6:	f000 faf1 	bl	2c4ac <__ieee754_logf>
   2beca:	4b14      	ldr	r3, [pc, #80]	; (2bf1c <logf+0x60>)
   2becc:	f993 3000 	ldrsb.w	r3, [r3]
   2bed0:	3301      	adds	r3, #1
   2bed2:	d014      	beq.n	2befe <logf+0x42>
   2bed4:	eeb4 8a48 	vcmp.f32	s16, s16
   2bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bedc:	d60f      	bvs.n	2befe <logf+0x42>
   2bede:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2bee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bee6:	dc0a      	bgt.n	2befe <logf+0x42>
   2bee8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2beec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bef0:	d108      	bne.n	2bf04 <logf+0x48>
   2bef2:	f005 f8df 	bl	310b4 <__errno>
   2bef6:	2322      	movs	r3, #34	; 0x22
   2bef8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2bf20 <logf+0x64>
   2befc:	6003      	str	r3, [r0, #0]
   2befe:	ecbd 8b02 	vpop	{d8}
   2bf02:	bd08      	pop	{r3, pc}
   2bf04:	f005 f8d6 	bl	310b4 <__errno>
   2bf08:	2321      	movs	r3, #33	; 0x21
   2bf0a:	ecbd 8b02 	vpop	{d8}
   2bf0e:	6003      	str	r3, [r0, #0]
   2bf10:	4804      	ldr	r0, [pc, #16]	; (2bf24 <logf+0x68>)
   2bf12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bf16:	f001 bd1d 	b.w	2d954 <nanf>
   2bf1a:	bf00      	nop
   2bf1c:	200204a0 	.word	0x200204a0
   2bf20:	ff800000 	.word	0xff800000
   2bf24:	000360fc 	.word	0x000360fc

0002bf28 <log10f>:
   2bf28:	b508      	push	{r3, lr}
   2bf2a:	ed2d 8b02 	vpush	{d8}
   2bf2e:	eeb0 8a40 	vmov.f32	s16, s0
   2bf32:	f000 fbb7 	bl	2c6a4 <__ieee754_log10f>
   2bf36:	4b14      	ldr	r3, [pc, #80]	; (2bf88 <log10f+0x60>)
   2bf38:	f993 3000 	ldrsb.w	r3, [r3]
   2bf3c:	3301      	adds	r3, #1
   2bf3e:	d014      	beq.n	2bf6a <log10f+0x42>
   2bf40:	eeb4 8a48 	vcmp.f32	s16, s16
   2bf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bf48:	d60f      	bvs.n	2bf6a <log10f+0x42>
   2bf4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2bf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bf52:	d80a      	bhi.n	2bf6a <log10f+0x42>
   2bf54:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bf5c:	d108      	bne.n	2bf70 <log10f+0x48>
   2bf5e:	f005 f8a9 	bl	310b4 <__errno>
   2bf62:	2322      	movs	r3, #34	; 0x22
   2bf64:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2bf8c <log10f+0x64>
   2bf68:	6003      	str	r3, [r0, #0]
   2bf6a:	ecbd 8b02 	vpop	{d8}
   2bf6e:	bd08      	pop	{r3, pc}
   2bf70:	f005 f8a0 	bl	310b4 <__errno>
   2bf74:	2321      	movs	r3, #33	; 0x21
   2bf76:	ecbd 8b02 	vpop	{d8}
   2bf7a:	6003      	str	r3, [r0, #0]
   2bf7c:	4804      	ldr	r0, [pc, #16]	; (2bf90 <log10f+0x68>)
   2bf7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bf82:	f001 bce7 	b.w	2d954 <nanf>
   2bf86:	bf00      	nop
   2bf88:	200204a0 	.word	0x200204a0
   2bf8c:	ff800000 	.word	0xff800000
   2bf90:	000360fc 	.word	0x000360fc

0002bf94 <powf>:
   2bf94:	b508      	push	{r3, lr}
   2bf96:	ed2d 8b04 	vpush	{d8-d9}
   2bf9a:	eef0 8a40 	vmov.f32	s17, s0
   2bf9e:	eeb0 8a60 	vmov.f32	s16, s1
   2bfa2:	f000 fbdf 	bl	2c764 <__ieee754_powf>
   2bfa6:	4b47      	ldr	r3, [pc, #284]	; (2c0c4 <powf+0x130>)
   2bfa8:	eeb0 9a40 	vmov.f32	s18, s0
   2bfac:	f993 3000 	ldrsb.w	r3, [r3]
   2bfb0:	3301      	adds	r3, #1
   2bfb2:	d01f      	beq.n	2bff4 <powf+0x60>
   2bfb4:	eeb4 8a48 	vcmp.f32	s16, s16
   2bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bfbc:	d61a      	bvs.n	2bff4 <powf+0x60>
   2bfbe:	eef4 8a68 	vcmp.f32	s17, s17
   2bfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bfc6:	d659      	bvs.n	2c07c <powf+0xe8>
   2bfc8:	eddf 9a3f 	vldr	s19, [pc, #252]	; 2c0c8 <powf+0x134>
   2bfcc:	eef4 8a69 	vcmp.f32	s17, s19
   2bfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bfd4:	d113      	bne.n	2bffe <powf+0x6a>
   2bfd6:	eeb4 8a69 	vcmp.f32	s16, s19
   2bfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bfde:	d029      	beq.n	2c034 <powf+0xa0>
   2bfe0:	eeb0 0a48 	vmov.f32	s0, s16
   2bfe4:	f001 fcac 	bl	2d940 <finitef>
   2bfe8:	b120      	cbz	r0, 2bff4 <powf+0x60>
   2bfea:	eeb4 8ae9 	vcmpe.f32	s16, s19
   2bfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bff2:	d44c      	bmi.n	2c08e <powf+0xfa>
   2bff4:	eeb0 0a49 	vmov.f32	s0, s18
   2bff8:	ecbd 8b04 	vpop	{d8-d9}
   2bffc:	bd08      	pop	{r3, pc}
   2bffe:	f001 fc9f 	bl	2d940 <finitef>
   2c002:	b1f0      	cbz	r0, 2c042 <powf+0xae>
   2c004:	eeb5 9a40 	vcmp.f32	s18, #0.0
   2c008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c00c:	d1f2      	bne.n	2bff4 <powf+0x60>
   2c00e:	eeb0 0a68 	vmov.f32	s0, s17
   2c012:	f001 fc95 	bl	2d940 <finitef>
   2c016:	2800      	cmp	r0, #0
   2c018:	d0ec      	beq.n	2bff4 <powf+0x60>
   2c01a:	eeb0 0a48 	vmov.f32	s0, s16
   2c01e:	f001 fc8f 	bl	2d940 <finitef>
   2c022:	2800      	cmp	r0, #0
   2c024:	d0e6      	beq.n	2bff4 <powf+0x60>
   2c026:	f005 f845 	bl	310b4 <__errno>
   2c02a:	2322      	movs	r3, #34	; 0x22
   2c02c:	ed9f 9a26 	vldr	s18, [pc, #152]	; 2c0c8 <powf+0x134>
   2c030:	6003      	str	r3, [r0, #0]
   2c032:	e7df      	b.n	2bff4 <powf+0x60>
   2c034:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   2c038:	eeb0 0a49 	vmov.f32	s0, s18
   2c03c:	ecbd 8b04 	vpop	{d8-d9}
   2c040:	bd08      	pop	{r3, pc}
   2c042:	eeb0 0a68 	vmov.f32	s0, s17
   2c046:	f001 fc7b 	bl	2d940 <finitef>
   2c04a:	2800      	cmp	r0, #0
   2c04c:	d0da      	beq.n	2c004 <powf+0x70>
   2c04e:	eeb0 0a48 	vmov.f32	s0, s16
   2c052:	f001 fc75 	bl	2d940 <finitef>
   2c056:	2800      	cmp	r0, #0
   2c058:	d0d4      	beq.n	2c004 <powf+0x70>
   2c05a:	eeb4 9a49 	vcmp.f32	s18, s18
   2c05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c062:	d627      	bvs.n	2c0b4 <powf+0x120>
   2c064:	f005 f826 	bl	310b4 <__errno>
   2c068:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   2c06c:	2322      	movs	r3, #34	; 0x22
   2c06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c072:	6003      	str	r3, [r0, #0]
   2c074:	d412      	bmi.n	2c09c <powf+0x108>
   2c076:	ed9f 9a15 	vldr	s18, [pc, #84]	; 2c0cc <powf+0x138>
   2c07a:	e7bb      	b.n	2bff4 <powf+0x60>
   2c07c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2c080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2c084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c088:	fe07 9a80 	vseleq.f32	s18, s15, s0
   2c08c:	e7b2      	b.n	2bff4 <powf+0x60>
   2c08e:	f005 f811 	bl	310b4 <__errno>
   2c092:	2321      	movs	r3, #33	; 0x21
   2c094:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 2c0d0 <powf+0x13c>
   2c098:	6003      	str	r3, [r0, #0]
   2c09a:	e7ab      	b.n	2bff4 <powf+0x60>
   2c09c:	eeb0 0a48 	vmov.f32	s0, s16
   2c0a0:	f001 fc5e 	bl	2d960 <rintf>
   2c0a4:	eeb4 0a48 	vcmp.f32	s0, s16
   2c0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c0ac:	d0e3      	beq.n	2c076 <powf+0xe2>
   2c0ae:	ed9f 9a08 	vldr	s18, [pc, #32]	; 2c0d0 <powf+0x13c>
   2c0b2:	e79f      	b.n	2bff4 <powf+0x60>
   2c0b4:	f004 fffe 	bl	310b4 <__errno>
   2c0b8:	2321      	movs	r3, #33	; 0x21
   2c0ba:	ee89 9aa9 	vdiv.f32	s18, s19, s19
   2c0be:	6003      	str	r3, [r0, #0]
   2c0c0:	e798      	b.n	2bff4 <powf+0x60>
   2c0c2:	bf00      	nop
   2c0c4:	200204a0 	.word	0x200204a0
   2c0c8:	00000000 	.word	0x00000000
   2c0cc:	7f800000 	.word	0x7f800000
   2c0d0:	ff800000 	.word	0xff800000

0002c0d4 <sqrtf>:
   2c0d4:	b508      	push	{r3, lr}
   2c0d6:	ed2d 8b02 	vpush	{d8}
   2c0da:	eeb0 8a40 	vmov.f32	s16, s0
   2c0de:	f000 ff6f 	bl	2cfc0 <__ieee754_sqrtf>
   2c0e2:	4b0e      	ldr	r3, [pc, #56]	; (2c11c <sqrtf+0x48>)
   2c0e4:	f993 3000 	ldrsb.w	r3, [r3]
   2c0e8:	3301      	adds	r3, #1
   2c0ea:	d00b      	beq.n	2c104 <sqrtf+0x30>
   2c0ec:	eeb4 8a48 	vcmp.f32	s16, s16
   2c0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c0f4:	d606      	bvs.n	2c104 <sqrtf+0x30>
   2c0f6:	eddf 8a0a 	vldr	s17, [pc, #40]	; 2c120 <sqrtf+0x4c>
   2c0fa:	eeb4 8ae8 	vcmpe.f32	s16, s17
   2c0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c102:	d402      	bmi.n	2c10a <sqrtf+0x36>
   2c104:	ecbd 8b02 	vpop	{d8}
   2c108:	bd08      	pop	{r3, pc}
   2c10a:	f004 ffd3 	bl	310b4 <__errno>
   2c10e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   2c112:	2321      	movs	r3, #33	; 0x21
   2c114:	6003      	str	r3, [r0, #0]
   2c116:	ecbd 8b02 	vpop	{d8}
   2c11a:	bd08      	pop	{r3, pc}
   2c11c:	200204a0 	.word	0x200204a0
   2c120:	00000000 	.word	0x00000000

0002c124 <__ieee754_sqrt>:
   2c124:	4a63      	ldr	r2, [pc, #396]	; (2c2b4 <__ieee754_sqrt+0x190>)
   2c126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c12a:	ec55 4b10 	vmov	r4, r5, d0
   2c12e:	43aa      	bics	r2, r5
   2c130:	f000 8098 	beq.w	2c264 <__ieee754_sqrt+0x140>
   2c134:	2d00      	cmp	r5, #0
   2c136:	462b      	mov	r3, r5
   2c138:	ee10 0a10 	vmov	r0, s0
   2c13c:	dd5a      	ble.n	2c1f4 <__ieee754_sqrt+0xd0>
   2c13e:	ea5f 5e25 	movs.w	lr, r5, asr #20
   2c142:	f000 80ab 	beq.w	2c29c <__ieee754_sqrt+0x178>
   2c146:	f3c3 0113 	ubfx	r1, r3, #0, #20
   2c14a:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
   2c14e:	0fc3      	lsrs	r3, r0, #31
   2c150:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2c154:	f01e 0f01 	tst.w	lr, #1
   2c158:	ea4f 0240 	mov.w	r2, r0, lsl #1
   2c15c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   2c160:	d003      	beq.n	2c16a <__ieee754_sqrt+0x46>
   2c162:	0fd1      	lsrs	r1, r2, #31
   2c164:	0082      	lsls	r2, r0, #2
   2c166:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2c16a:	f04f 0c00 	mov.w	ip, #0
   2c16e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   2c172:	2416      	movs	r4, #22
   2c174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   2c178:	4665      	mov	r5, ip
   2c17a:	1868      	adds	r0, r5, r1
   2c17c:	4298      	cmp	r0, r3
   2c17e:	dc02      	bgt.n	2c186 <__ieee754_sqrt+0x62>
   2c180:	1a1b      	subs	r3, r3, r0
   2c182:	1845      	adds	r5, r0, r1
   2c184:	448c      	add	ip, r1
   2c186:	005b      	lsls	r3, r3, #1
   2c188:	3c01      	subs	r4, #1
   2c18a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2c18e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   2c192:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2c196:	d1f0      	bne.n	2c17a <__ieee754_sqrt+0x56>
   2c198:	4627      	mov	r7, r4
   2c19a:	2620      	movs	r6, #32
   2c19c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   2c1a0:	e014      	b.n	2c1cc <__ieee754_sqrt+0xa8>
   2c1a2:	d10a      	bne.n	2c1ba <__ieee754_sqrt+0x96>
   2c1a4:	4290      	cmp	r0, r2
   2c1a6:	d808      	bhi.n	2c1ba <__ieee754_sqrt+0x96>
   2c1a8:	2800      	cmp	r0, #0
   2c1aa:	eb00 0401 	add.w	r4, r0, r1
   2c1ae:	db1c      	blt.n	2c1ea <__ieee754_sqrt+0xc6>
   2c1b0:	46a8      	mov	r8, r5
   2c1b2:	2300      	movs	r3, #0
   2c1b4:	1a12      	subs	r2, r2, r0
   2c1b6:	440f      	add	r7, r1
   2c1b8:	4645      	mov	r5, r8
   2c1ba:	0fd0      	lsrs	r0, r2, #31
   2c1bc:	3e01      	subs	r6, #1
   2c1be:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2c1c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   2c1c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2c1ca:	d034      	beq.n	2c236 <__ieee754_sqrt+0x112>
   2c1cc:	42ab      	cmp	r3, r5
   2c1ce:	eb01 0004 	add.w	r0, r1, r4
   2c1d2:	dde6      	ble.n	2c1a2 <__ieee754_sqrt+0x7e>
   2c1d4:	2800      	cmp	r0, #0
   2c1d6:	eb00 0401 	add.w	r4, r0, r1
   2c1da:	db06      	blt.n	2c1ea <__ieee754_sqrt+0xc6>
   2c1dc:	46a8      	mov	r8, r5
   2c1de:	1b5b      	subs	r3, r3, r5
   2c1e0:	4290      	cmp	r0, r2
   2c1e2:	bf88      	it	hi
   2c1e4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   2c1e8:	e7e4      	b.n	2c1b4 <__ieee754_sqrt+0x90>
   2c1ea:	2c00      	cmp	r4, #0
   2c1ec:	dbf6      	blt.n	2c1dc <__ieee754_sqrt+0xb8>
   2c1ee:	f105 0801 	add.w	r8, r5, #1
   2c1f2:	e7f4      	b.n	2c1de <__ieee754_sqrt+0xba>
   2c1f4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2c1f8:	4322      	orrs	r2, r4
   2c1fa:	d02c      	beq.n	2c256 <__ieee754_sqrt+0x132>
   2c1fc:	2d00      	cmp	r5, #0
   2c1fe:	d141      	bne.n	2c284 <__ieee754_sqrt+0x160>
   2c200:	0ac4      	lsrs	r4, r0, #11
   2c202:	3b15      	subs	r3, #21
   2c204:	0540      	lsls	r0, r0, #21
   2c206:	4622      	mov	r2, r4
   2c208:	2c00      	cmp	r4, #0
   2c20a:	d0f9      	beq.n	2c200 <__ieee754_sqrt+0xdc>
   2c20c:	02e5      	lsls	r5, r4, #11
   2c20e:	d44b      	bmi.n	2c2a8 <__ieee754_sqrt+0x184>
   2c210:	2100      	movs	r1, #0
   2c212:	e000      	b.n	2c216 <__ieee754_sqrt+0xf2>
   2c214:	4629      	mov	r1, r5
   2c216:	0052      	lsls	r2, r2, #1
   2c218:	1c4d      	adds	r5, r1, #1
   2c21a:	02d4      	lsls	r4, r2, #11
   2c21c:	d5fa      	bpl.n	2c214 <__ieee754_sqrt+0xf0>
   2c21e:	4614      	mov	r4, r2
   2c220:	4602      	mov	r2, r0
   2c222:	40a8      	lsls	r0, r5
   2c224:	f1c5 0520 	rsb	r5, r5, #32
   2c228:	fa22 f505 	lsr.w	r5, r2, r5
   2c22c:	eba3 0e01 	sub.w	lr, r3, r1
   2c230:	ea45 0304 	orr.w	r3, r5, r4
   2c234:	e787      	b.n	2c146 <__ieee754_sqrt+0x22>
   2c236:	4313      	orrs	r3, r2
   2c238:	d10f      	bne.n	2c25a <__ieee754_sqrt+0x136>
   2c23a:	087e      	lsrs	r6, r7, #1
   2c23c:	491e      	ldr	r1, [pc, #120]	; (2c2b8 <__ieee754_sqrt+0x194>)
   2c23e:	f01c 0f01 	tst.w	ip, #1
   2c242:	eb01 016c 	add.w	r1, r1, ip, asr #1
   2c246:	bf18      	it	ne
   2c248:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   2c24c:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   2c250:	4632      	mov	r2, r6
   2c252:	ec43 2b10 	vmov	d0, r2, r3
   2c256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c25a:	1c7b      	adds	r3, r7, #1
   2c25c:	d021      	beq.n	2c2a2 <__ieee754_sqrt+0x17e>
   2c25e:	1c7e      	adds	r6, r7, #1
   2c260:	0876      	lsrs	r6, r6, #1
   2c262:	e7eb      	b.n	2c23c <__ieee754_sqrt+0x118>
   2c264:	ee10 2a10 	vmov	r2, s0
   2c268:	462b      	mov	r3, r5
   2c26a:	ee10 0a10 	vmov	r0, s0
   2c26e:	4629      	mov	r1, r5
   2c270:	f7e0 ff1c 	bl	d0ac <__aeabi_dmul>
   2c274:	4622      	mov	r2, r4
   2c276:	462b      	mov	r3, r5
   2c278:	f7e0 fd62 	bl	cd40 <__adddf3>
   2c27c:	ec41 0b10 	vmov	d0, r0, r1
   2c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c284:	ee10 2a10 	vmov	r2, s0
   2c288:	4629      	mov	r1, r5
   2c28a:	f7e0 fd57 	bl	cd3c <__aeabi_dsub>
   2c28e:	4602      	mov	r2, r0
   2c290:	460b      	mov	r3, r1
   2c292:	f7e1 f835 	bl	d300 <__aeabi_ddiv>
   2c296:	ec41 0b10 	vmov	d0, r0, r1
   2c29a:	e7dc      	b.n	2c256 <__ieee754_sqrt+0x132>
   2c29c:	462a      	mov	r2, r5
   2c29e:	4673      	mov	r3, lr
   2c2a0:	e7b6      	b.n	2c210 <__ieee754_sqrt+0xec>
   2c2a2:	f10c 0c01 	add.w	ip, ip, #1
   2c2a6:	e7c9      	b.n	2c23c <__ieee754_sqrt+0x118>
   2c2a8:	4602      	mov	r2, r0
   2c2aa:	2520      	movs	r5, #32
   2c2ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c2b0:	e7ba      	b.n	2c228 <__ieee754_sqrt+0x104>
   2c2b2:	bf00      	nop
   2c2b4:	7ff00000 	.word	0x7ff00000
   2c2b8:	3fe00000 	.word	0x3fe00000

0002c2bc <__ieee754_expf>:
   2c2bc:	ee10 3a10 	vmov	r3, s0
   2c2c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2c2c4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2c2c8:	d85d      	bhi.n	2c386 <__ieee754_expf+0xca>
   2c2ca:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   2c2ce:	f000 8099 	beq.w	2c404 <__ieee754_expf+0x148>
   2c2d2:	4864      	ldr	r0, [pc, #400]	; (2c464 <__ieee754_expf+0x1a8>)
   2c2d4:	4283      	cmp	r3, r0
   2c2d6:	dc59      	bgt.n	2c38c <__ieee754_expf+0xd0>
   2c2d8:	b129      	cbz	r1, 2c2e6 <__ieee754_expf+0x2a>
   2c2da:	4b63      	ldr	r3, [pc, #396]	; (2c468 <__ieee754_expf+0x1ac>)
   2c2dc:	429a      	cmp	r2, r3
   2c2de:	d902      	bls.n	2c2e6 <__ieee754_expf+0x2a>
   2c2e0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 2c46c <__ieee754_expf+0x1b0>
   2c2e4:	4770      	bx	lr
   2c2e6:	4b62      	ldr	r3, [pc, #392]	; (2c470 <__ieee754_expf+0x1b4>)
   2c2e8:	429a      	cmp	r2, r3
   2c2ea:	b410      	push	{r4}
   2c2ec:	d953      	bls.n	2c396 <__ieee754_expf+0xda>
   2c2ee:	4b61      	ldr	r3, [pc, #388]	; (2c474 <__ieee754_expf+0x1b8>)
   2c2f0:	429a      	cmp	r2, r3
   2c2f2:	f200 8099 	bhi.w	2c428 <__ieee754_expf+0x16c>
   2c2f6:	008c      	lsls	r4, r1, #2
   2c2f8:	485f      	ldr	r0, [pc, #380]	; (2c478 <__ieee754_expf+0x1bc>)
   2c2fa:	4a60      	ldr	r2, [pc, #384]	; (2c47c <__ieee754_expf+0x1c0>)
   2c2fc:	f1c1 0301 	rsb	r3, r1, #1
   2c300:	4420      	add	r0, r4
   2c302:	4422      	add	r2, r4
   2c304:	1a59      	subs	r1, r3, r1
   2c306:	edd0 4a00 	vldr	s9, [r0]
   2c30a:	edd2 7a00 	vldr	s15, [r2]
   2c30e:	ee70 4a64 	vsub.f32	s9, s0, s9
   2c312:	ee34 0ae7 	vsub.f32	s0, s9, s15
   2c316:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 2c480 <__ieee754_expf+0x1c4>
   2c31a:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 2c484 <__ieee754_expf+0x1c8>
   2c31e:	eddf 5a5a 	vldr	s11, [pc, #360]	; 2c488 <__ieee754_expf+0x1cc>
   2c322:	ee20 7a00 	vmul.f32	s14, s0, s0
   2c326:	ed9f 6a59 	vldr	s12, [pc, #356]	; 2c48c <__ieee754_expf+0x1d0>
   2c32a:	eddf 6a59 	vldr	s13, [pc, #356]	; 2c490 <__ieee754_expf+0x1d4>
   2c32e:	eea7 5a04 	vfma.f32	s10, s14, s8
   2c332:	eee5 5a07 	vfma.f32	s11, s10, s14
   2c336:	eea5 6a87 	vfma.f32	s12, s11, s14
   2c33a:	eee6 6a07 	vfma.f32	s13, s12, s14
   2c33e:	eeb0 6a40 	vmov.f32	s12, s0
   2c342:	eea6 6ac7 	vfms.f32	s12, s13, s14
   2c346:	eeb0 7a46 	vmov.f32	s14, s12
   2c34a:	ee20 6a06 	vmul.f32	s12, s0, s12
   2c34e:	2900      	cmp	r1, #0
   2c350:	d04b      	beq.n	2c3ea <__ieee754_expf+0x12e>
   2c352:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   2c356:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
   2c35a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c35e:	ee36 7ac7 	vsub.f32	s14, s13, s14
   2c362:	eec6 6a07 	vdiv.f32	s13, s12, s14
   2c366:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2c36a:	ee77 7ae4 	vsub.f32	s15, s15, s9
   2c36e:	ee30 0a67 	vsub.f32	s0, s0, s15
   2c372:	db4d      	blt.n	2c410 <__ieee754_expf+0x154>
   2c374:	ee10 3a10 	vmov	r3, s0
   2c378:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2c37c:	ee00 3a10 	vmov	s0, r3
   2c380:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c384:	4770      	bx	lr
   2c386:	ee30 0a00 	vadd.f32	s0, s0, s0
   2c38a:	4770      	bx	lr
   2c38c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 2c494 <__ieee754_expf+0x1d8>
   2c390:	ee20 0a00 	vmul.f32	s0, s0, s0
   2c394:	4770      	bx	lr
   2c396:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   2c39a:	d20a      	bcs.n	2c3b2 <__ieee754_expf+0xf6>
   2c39c:	eddf 7a3d 	vldr	s15, [pc, #244]	; 2c494 <__ieee754_expf+0x1d8>
   2c3a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2c3a4:	ee70 7a27 	vadd.f32	s15, s0, s15
   2c3a8:	eef4 7ac7 	vcmpe.f32	s15, s14
   2c3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c3b0:	dc54      	bgt.n	2c45c <__ieee754_expf+0x1a0>
   2c3b2:	ee60 7a00 	vmul.f32	s15, s0, s0
   2c3b6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2c480 <__ieee754_expf+0x1c4>
   2c3ba:	eddf 5a32 	vldr	s11, [pc, #200]	; 2c484 <__ieee754_expf+0x1c8>
   2c3be:	ed9f 6a32 	vldr	s12, [pc, #200]	; 2c488 <__ieee754_expf+0x1cc>
   2c3c2:	eee7 5a87 	vfma.f32	s11, s15, s14
   2c3c6:	eddf 6a31 	vldr	s13, [pc, #196]	; 2c48c <__ieee754_expf+0x1d0>
   2c3ca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2c490 <__ieee754_expf+0x1d4>
   2c3ce:	eea7 6aa5 	vfma.f32	s12, s15, s11
   2c3d2:	eee7 6a86 	vfma.f32	s13, s15, s12
   2c3d6:	eea7 7aa6 	vfma.f32	s14, s15, s13
   2c3da:	eef0 6a40 	vmov.f32	s13, s0
   2c3de:	eee7 6ac7 	vfms.f32	s13, s15, s14
   2c3e2:	eeb0 7a66 	vmov.f32	s14, s13
   2c3e6:	ee20 6a26 	vmul.f32	s12, s0, s13
   2c3ea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2c3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2c3f2:	ee37 7a67 	vsub.f32	s14, s14, s15
   2c3f6:	eec6 7a07 	vdiv.f32	s15, s12, s14
   2c3fa:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2c3fe:	ee36 0ac0 	vsub.f32	s0, s13, s0
   2c402:	e7bd      	b.n	2c380 <__ieee754_expf+0xc4>
   2c404:	2900      	cmp	r1, #0
   2c406:	eddf 7a19 	vldr	s15, [pc, #100]	; 2c46c <__ieee754_expf+0x1b0>
   2c40a:	fe00 0a27 	vseleq.f32	s0, s0, s15
   2c40e:	4770      	bx	lr
   2c410:	ee10 3a10 	vmov	r3, s0
   2c414:	3164      	adds	r1, #100	; 0x64
   2c416:	eddf 7a20 	vldr	s15, [pc, #128]	; 2c498 <__ieee754_expf+0x1dc>
   2c41a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2c41e:	ee00 3a10 	vmov	s0, r3
   2c422:	ee20 0a27 	vmul.f32	s0, s0, s15
   2c426:	e7ab      	b.n	2c380 <__ieee754_expf+0xc4>
   2c428:	4b1c      	ldr	r3, [pc, #112]	; (2c49c <__ieee754_expf+0x1e0>)
   2c42a:	eef0 4a40 	vmov.f32	s9, s0
   2c42e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2c4a0 <__ieee754_expf+0x1e4>
   2c432:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2c436:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 2c4a4 <__ieee754_expf+0x1e8>
   2c43a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 2c4a8 <__ieee754_expf+0x1ec>
   2c43e:	ed91 7a00 	vldr	s14, [r1]
   2c442:	eea0 7a27 	vfma.f32	s14, s0, s15
   2c446:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2c44a:	ee17 1a90 	vmov	r1, s15
   2c44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c452:	eee7 4ac6 	vfms.f32	s9, s15, s12
   2c456:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2c45a:	e75a      	b.n	2c312 <__ieee754_expf+0x56>
   2c45c:	ee30 0a07 	vadd.f32	s0, s0, s14
   2c460:	e78e      	b.n	2c380 <__ieee754_expf+0xc4>
   2c462:	bf00      	nop
   2c464:	42b17217 	.word	0x42b17217
   2c468:	42cff1b5 	.word	0x42cff1b5
   2c46c:	00000000 	.word	0x00000000
   2c470:	3eb17218 	.word	0x3eb17218
   2c474:	3f851591 	.word	0x3f851591
   2c478:	00036670 	.word	0x00036670
   2c47c:	00036678 	.word	0x00036678
   2c480:	3331bb4c 	.word	0x3331bb4c
   2c484:	b5ddea0e 	.word	0xb5ddea0e
   2c488:	388ab355 	.word	0x388ab355
   2c48c:	bb360b61 	.word	0xbb360b61
   2c490:	3e2aaaab 	.word	0x3e2aaaab
   2c494:	7149f2ca 	.word	0x7149f2ca
   2c498:	0d800000 	.word	0x0d800000
   2c49c:	00036668 	.word	0x00036668
   2c4a0:	3fb8aa3b 	.word	0x3fb8aa3b
   2c4a4:	3f317180 	.word	0x3f317180
   2c4a8:	3717f7d1 	.word	0x3717f7d1

0002c4ac <__ieee754_logf>:
   2c4ac:	ee10 3a10 	vmov	r3, s0
   2c4b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2c4b4:	d02e      	beq.n	2c514 <__ieee754_logf+0x68>
   2c4b6:	2b00      	cmp	r3, #0
   2c4b8:	db33      	blt.n	2c522 <__ieee754_logf+0x76>
   2c4ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2c4be:	da40      	bge.n	2c542 <__ieee754_logf+0x96>
   2c4c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2c4c4:	b430      	push	{r4, r5}
   2c4c6:	db33      	blt.n	2c530 <__ieee754_logf+0x84>
   2c4c8:	2500      	movs	r5, #0
   2c4ca:	f3c3 0416 	ubfx	r4, r3, #0, #23
   2c4ce:	4a64      	ldr	r2, [pc, #400]	; (2c660 <__ieee754_logf+0x1b4>)
   2c4d0:	15db      	asrs	r3, r3, #23
   2c4d2:	4964      	ldr	r1, [pc, #400]	; (2c664 <__ieee754_logf+0x1b8>)
   2c4d4:	4422      	add	r2, r4
   2c4d6:	f104 000f 	add.w	r0, r4, #15
   2c4da:	3b7f      	subs	r3, #127	; 0x7f
   2c4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2c4e0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
   2c4e4:	4001      	ands	r1, r0
   2c4e6:	442b      	add	r3, r5
   2c4e8:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
   2c4ec:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
   2c4f0:	ea40 0204 	orr.w	r2, r0, r4
   2c4f4:	ee00 2a10 	vmov	s0, r2
   2c4f8:	ee30 7a47 	vsub.f32	s14, s0, s14
   2c4fc:	bb21      	cbnz	r1, 2c548 <__ieee754_logf+0x9c>
   2c4fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
   2c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c506:	d160      	bne.n	2c5ca <__ieee754_logf+0x11e>
   2c508:	2b00      	cmp	r3, #0
   2c50a:	f040 808d 	bne.w	2c628 <__ieee754_logf+0x17c>
   2c50e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 2c668 <__ieee754_logf+0x1bc>
   2c512:	e069      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c514:	ed9f 7a55 	vldr	s14, [pc, #340]	; 2c66c <__ieee754_logf+0x1c0>
   2c518:	eddf 7a53 	vldr	s15, [pc, #332]	; 2c668 <__ieee754_logf+0x1bc>
   2c51c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2c520:	4770      	bx	lr
   2c522:	ee70 7a40 	vsub.f32	s15, s0, s0
   2c526:	ed9f 7a50 	vldr	s14, [pc, #320]	; 2c668 <__ieee754_logf+0x1bc>
   2c52a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2c52e:	4770      	bx	lr
   2c530:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2c670 <__ieee754_logf+0x1c4>
   2c534:	f06f 0518 	mvn.w	r5, #24
   2c538:	ee60 7a27 	vmul.f32	s15, s0, s15
   2c53c:	ee17 3a90 	vmov	r3, s15
   2c540:	e7c3      	b.n	2c4ca <__ieee754_logf+0x1e>
   2c542:	ee30 0a00 	vadd.f32	s0, s0, s0
   2c546:	4770      	bx	lr
   2c548:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2c54c:	eddf 2a49 	vldr	s5, [pc, #292]	; 2c674 <__ieee754_logf+0x1c8>
   2c550:	eddf 4a49 	vldr	s9, [pc, #292]	; 2c678 <__ieee754_logf+0x1cc>
   2c554:	ee06 3a90 	vmov	s13, r3
   2c558:	eddf 5a48 	vldr	s11, [pc, #288]	; 2c67c <__ieee754_logf+0x1d0>
   2c55c:	ee77 7a27 	vadd.f32	s15, s14, s15
   2c560:	eddf 3a47 	vldr	s7, [pc, #284]	; 2c680 <__ieee754_logf+0x1d4>
   2c564:	ed9f 5a47 	vldr	s10, [pc, #284]	; 2c684 <__ieee754_logf+0x1d8>
   2c568:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
   2c56c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 2c688 <__ieee754_logf+0x1dc>
   2c570:	ee87 4a27 	vdiv.f32	s8, s14, s15
   2c574:	eddf 6a45 	vldr	s13, [pc, #276]	; 2c68c <__ieee754_logf+0x1e0>
   2c578:	4945      	ldr	r1, [pc, #276]	; (2c690 <__ieee754_logf+0x1e4>)
   2c57a:	4a46      	ldr	r2, [pc, #280]	; (2c694 <__ieee754_logf+0x1e8>)
   2c57c:	4421      	add	r1, r4
   2c57e:	1b12      	subs	r2, r2, r4
   2c580:	430a      	orrs	r2, r1
   2c582:	2a00      	cmp	r2, #0
   2c584:	ee24 6a04 	vmul.f32	s12, s8, s8
   2c588:	ee66 7a06 	vmul.f32	s15, s12, s12
   2c58c:	eee7 4aa2 	vfma.f32	s9, s15, s5
   2c590:	eea7 5aa3 	vfma.f32	s10, s15, s7
   2c594:	eee4 5aa7 	vfma.f32	s11, s9, s15
   2c598:	eee5 6a27 	vfma.f32	s13, s10, s15
   2c59c:	eea5 0aa7 	vfma.f32	s0, s11, s15
   2c5a0:	ee20 0a06 	vmul.f32	s0, s0, s12
   2c5a4:	eea6 0aa7 	vfma.f32	s0, s13, s15
   2c5a8:	dd20      	ble.n	2c5ec <__ieee754_logf+0x140>
   2c5aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2c5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
   2c5b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   2c5b6:	ee30 0a27 	vadd.f32	s0, s0, s15
   2c5ba:	ee20 0a04 	vmul.f32	s0, s0, s8
   2c5be:	bb33      	cbnz	r3, 2c60e <__ieee754_logf+0x162>
   2c5c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2c5c4:	ee37 0a40 	vsub.f32	s0, s14, s0
   2c5c8:	e00e      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c5ca:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   2c5ce:	eddf 7a32 	vldr	s15, [pc, #200]	; 2c698 <__ieee754_logf+0x1ec>
   2c5d2:	ee67 6a07 	vmul.f32	s13, s14, s14
   2c5d6:	eea7 0a67 	vfms.f32	s0, s14, s15
   2c5da:	eef0 7a40 	vmov.f32	s15, s0
   2c5de:	ee27 0aa6 	vmul.f32	s0, s15, s13
   2c5e2:	bb73      	cbnz	r3, 2c642 <__ieee754_logf+0x196>
   2c5e4:	ee37 0a40 	vsub.f32	s0, s14, s0
   2c5e8:	bc30      	pop	{r4, r5}
   2c5ea:	4770      	bx	lr
   2c5ec:	ee37 0a40 	vsub.f32	s0, s14, s0
   2c5f0:	ee20 0a04 	vmul.f32	s0, s0, s8
   2c5f4:	2b00      	cmp	r3, #0
   2c5f6:	d0f5      	beq.n	2c5e4 <__ieee754_logf+0x138>
   2c5f8:	eddf 6a28 	vldr	s13, [pc, #160]	; 2c69c <__ieee754_logf+0x1f0>
   2c5fc:	eddf 7a28 	vldr	s15, [pc, #160]	; 2c6a0 <__ieee754_logf+0x1f4>
   2c600:	eea3 0a66 	vfms.f32	s0, s6, s13
   2c604:	ee30 0a47 	vsub.f32	s0, s0, s14
   2c608:	ee93 0a27 	vfnms.f32	s0, s6, s15
   2c60c:	e7ec      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c60e:	ed9f 6a23 	vldr	s12, [pc, #140]	; 2c69c <__ieee754_logf+0x1f0>
   2c612:	eddf 6a23 	vldr	s13, [pc, #140]	; 2c6a0 <__ieee754_logf+0x1f4>
   2c616:	eea3 0a06 	vfma.f32	s0, s6, s12
   2c61a:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2c61e:	ee30 0a47 	vsub.f32	s0, s0, s14
   2c622:	ee93 0a26 	vfnms.f32	s0, s6, s13
   2c626:	e7df      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c628:	ee07 3a90 	vmov	s15, r3
   2c62c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 2c69c <__ieee754_logf+0x1f0>
   2c630:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 2c6a0 <__ieee754_logf+0x1f4>
   2c634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c638:	ee27 0a80 	vmul.f32	s0, s15, s0
   2c63c:	eea7 0a87 	vfma.f32	s0, s15, s14
   2c640:	e7d2      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c642:	ee07 3a90 	vmov	s15, r3
   2c646:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2c69c <__ieee754_logf+0x1f0>
   2c64a:	eddf 6a15 	vldr	s13, [pc, #84]	; 2c6a0 <__ieee754_logf+0x1f4>
   2c64e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2c652:	eea7 0ac6 	vfms.f32	s0, s15, s12
   2c656:	ee30 0a47 	vsub.f32	s0, s0, s14
   2c65a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   2c65e:	e7c3      	b.n	2c5e8 <__ieee754_logf+0x13c>
   2c660:	004afb20 	.word	0x004afb20
   2c664:	007ffff0 	.word	0x007ffff0
   2c668:	00000000 	.word	0x00000000
   2c66c:	cc000000 	.word	0xcc000000
   2c670:	4c000000 	.word	0x4c000000
   2c674:	3e178897 	.word	0x3e178897
   2c678:	3e3a3325 	.word	0x3e3a3325
   2c67c:	3e924925 	.word	0x3e924925
   2c680:	3e1cd04f 	.word	0x3e1cd04f
   2c684:	3e638e29 	.word	0x3e638e29
   2c688:	3f2aaaab 	.word	0x3f2aaaab
   2c68c:	3ecccccd 	.word	0x3ecccccd
   2c690:	ffcf5c30 	.word	0xffcf5c30
   2c694:	0035c288 	.word	0x0035c288
   2c698:	3eaaaaab 	.word	0x3eaaaaab
   2c69c:	3717f7d1 	.word	0x3717f7d1
   2c6a0:	3f317180 	.word	0x3f317180

0002c6a4 <__ieee754_log10f>:
   2c6a4:	b508      	push	{r3, lr}
   2c6a6:	ee10 3a10 	vmov	r3, s0
   2c6aa:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2c6ae:	ed2d 8b02 	vpush	{d8}
   2c6b2:	d02a      	beq.n	2c70a <__ieee754_log10f+0x66>
   2c6b4:	2b00      	cmp	r3, #0
   2c6b6:	db31      	blt.n	2c71c <__ieee754_log10f+0x78>
   2c6b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2c6bc:	da40      	bge.n	2c740 <__ieee754_log10f+0x9c>
   2c6be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2c6c2:	db34      	blt.n	2c72e <__ieee754_log10f+0x8a>
   2c6c4:	2100      	movs	r1, #0
   2c6c6:	15da      	asrs	r2, r3, #23
   2c6c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2c6cc:	3a7f      	subs	r2, #127	; 0x7f
   2c6ce:	440a      	add	r2, r1
   2c6d0:	0fd1      	lsrs	r1, r2, #31
   2c6d2:	f1c1 007f 	rsb	r0, r1, #127	; 0x7f
   2c6d6:	440a      	add	r2, r1
   2c6d8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
   2c6dc:	ee07 2a90 	vmov	s15, r2
   2c6e0:	ee00 3a10 	vmov	s0, r3
   2c6e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2c6e8:	f7ff fee0 	bl	2c4ac <__ieee754_logf>
   2c6ec:	eddf 7a17 	vldr	s15, [pc, #92]	; 2c74c <__ieee754_log10f+0xa8>
   2c6f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2c750 <__ieee754_log10f+0xac>
   2c6f4:	ee20 0a27 	vmul.f32	s0, s0, s15
   2c6f8:	eddf 7a16 	vldr	s15, [pc, #88]	; 2c754 <__ieee754_log10f+0xb0>
   2c6fc:	eea8 0a07 	vfma.f32	s0, s16, s14
   2c700:	eea8 0a27 	vfma.f32	s0, s16, s15
   2c704:	ecbd 8b02 	vpop	{d8}
   2c708:	bd08      	pop	{r3, pc}
   2c70a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 2c758 <__ieee754_log10f+0xb4>
   2c70e:	eddf 7a13 	vldr	s15, [pc, #76]	; 2c75c <__ieee754_log10f+0xb8>
   2c712:	ecbd 8b02 	vpop	{d8}
   2c716:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2c71a:	bd08      	pop	{r3, pc}
   2c71c:	ee70 7a40 	vsub.f32	s15, s0, s0
   2c720:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2c75c <__ieee754_log10f+0xb8>
   2c724:	ecbd 8b02 	vpop	{d8}
   2c728:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2c72c:	bd08      	pop	{r3, pc}
   2c72e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2c760 <__ieee754_log10f+0xbc>
   2c732:	f06f 0118 	mvn.w	r1, #24
   2c736:	ee60 7a27 	vmul.f32	s15, s0, s15
   2c73a:	ee17 3a90 	vmov	r3, s15
   2c73e:	e7c2      	b.n	2c6c6 <__ieee754_log10f+0x22>
   2c740:	ecbd 8b02 	vpop	{d8}
   2c744:	ee30 0a00 	vadd.f32	s0, s0, s0
   2c748:	bd08      	pop	{r3, pc}
   2c74a:	bf00      	nop
   2c74c:	3ede5bd9 	.word	0x3ede5bd9
   2c750:	355427db 	.word	0x355427db
   2c754:	3e9a2080 	.word	0x3e9a2080
   2c758:	cc000000 	.word	0xcc000000
   2c75c:	00000000 	.word	0x00000000
   2c760:	4c000000 	.word	0x4c000000

0002c764 <__ieee754_powf>:
   2c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c768:	ed2d 8b06 	vpush	{d8-d10}
   2c76c:	b082      	sub	sp, #8
   2c76e:	edcd 0a00 	vstr	s1, [sp]
   2c772:	9c00      	ldr	r4, [sp, #0]
   2c774:	ed8d 0a01 	vstr	s0, [sp, #4]
   2c778:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   2c77c:	f000 8109 	beq.w	2c992 <__ieee754_powf+0x22e>
   2c780:	9f01      	ldr	r7, [sp, #4]
   2c782:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   2c786:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
   2c78a:	f300 80ff 	bgt.w	2c98c <__ieee754_powf+0x228>
   2c78e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2c792:	bfd4      	ite	le
   2c794:	2300      	movle	r3, #0
   2c796:	2301      	movgt	r3, #1
   2c798:	2b00      	cmp	r3, #0
   2c79a:	f040 80f7 	bne.w	2c98c <__ieee754_powf+0x228>
   2c79e:	2f00      	cmp	r7, #0
   2c7a0:	f2c0 8106 	blt.w	2c9b0 <__ieee754_powf+0x24c>
   2c7a4:	4698      	mov	r8, r3
   2c7a6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2c7aa:	f000 8117 	beq.w	2c9dc <__ieee754_powf+0x278>
   2c7ae:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2c7b2:	f000 811c 	beq.w	2c9ee <__ieee754_powf+0x28a>
   2c7b6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   2c7ba:	f000 814f 	beq.w	2ca5c <__ieee754_powf+0x2f8>
   2c7be:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   2c7c2:	d102      	bne.n	2c7ca <__ieee754_powf+0x66>
   2c7c4:	2f00      	cmp	r7, #0
   2c7c6:	f280 812d 	bge.w	2ca24 <__ieee754_powf+0x2c0>
   2c7ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
   2c7ce:	9d00      	ldr	r5, [sp, #0]
   2c7d0:	ee00 9a10 	vmov	s0, r9
   2c7d4:	f7ff fa82 	bl	2bcdc <fabsf>
   2c7d8:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   2c7dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   2c7e0:	f000 8129 	beq.w	2ca36 <__ieee754_powf+0x2d2>
   2c7e4:	faba f38a 	clz	r3, sl
   2c7e8:	095b      	lsrs	r3, r3, #5
   2c7ea:	2b00      	cmp	r3, #0
   2c7ec:	f040 8123 	bne.w	2ca36 <__ieee754_powf+0x2d2>
   2c7f0:	0ffa      	lsrs	r2, r7, #31
   2c7f2:	3a01      	subs	r2, #1
   2c7f4:	ea58 0102 	orrs.w	r1, r8, r2
   2c7f8:	f000 810d 	beq.w	2ca16 <__ieee754_powf+0x2b2>
   2c7fc:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   2c800:	f340 8158 	ble.w	2cab4 <__ieee754_powf+0x350>
   2c804:	4b9a      	ldr	r3, [pc, #616]	; (2ca70 <__ieee754_powf+0x30c>)
   2c806:	459a      	cmp	sl, r3
   2c808:	f340 825e 	ble.w	2ccc8 <__ieee754_powf+0x564>
   2c80c:	4b99      	ldr	r3, [pc, #612]	; (2ca74 <__ieee754_powf+0x310>)
   2c80e:	459a      	cmp	sl, r3
   2c810:	f300 8272 	bgt.w	2ccf8 <__ieee754_powf+0x594>
   2c814:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   2c818:	eddf 6a97 	vldr	s13, [pc, #604]	; 2ca78 <__ieee754_powf+0x314>
   2c81c:	eeb5 4a00 	vmov.f32	s8, #80	; 0x3e800000  0.250
   2c820:	eddf 7a96 	vldr	s15, [pc, #600]	; 2ca7c <__ieee754_powf+0x318>
   2c824:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2c828:	ed9f 6a95 	vldr	s12, [pc, #596]	; 2ca80 <__ieee754_powf+0x31c>
   2c82c:	ee30 0a65 	vsub.f32	s0, s0, s11
   2c830:	eddf 5a94 	vldr	s11, [pc, #592]	; 2ca84 <__ieee754_powf+0x320>
   2c834:	eeb1 5a40 	vneg.f32	s10, s0
   2c838:	ee60 4a00 	vmul.f32	s9, s0, s0
   2c83c:	eee5 6a04 	vfma.f32	s13, s10, s8
   2c840:	eea6 7ac0 	vfms.f32	s14, s13, s0
   2c844:	ee27 7a24 	vmul.f32	s14, s14, s9
   2c848:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   2c84c:	eee0 7a06 	vfma.f32	s15, s0, s12
   2c850:	eeb0 6a67 	vmov.f32	s12, s15
   2c854:	eea0 6a25 	vfma.f32	s12, s0, s11
   2c858:	ee16 3a10 	vmov	r3, s12
   2c85c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2c860:	f023 030f 	bic.w	r3, r3, #15
   2c864:	ee07 3a10 	vmov	s14, r3
   2c868:	ee06 3a10 	vmov	s12, r3
   2c86c:	eea5 7a25 	vfma.f32	s14, s10, s11
   2c870:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2c874:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   2c878:	ee07 5a10 	vmov	s14, r5
   2c87c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2c880:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c884:	f024 040f 	bic.w	r4, r4, #15
   2c888:	ee67 7a87 	vmul.f32	s15, s15, s14
   2c88c:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
   2c890:	4313      	orrs	r3, r2
   2c892:	ee06 4a90 	vmov	s13, r4
   2c896:	ee77 6a66 	vsub.f32	s13, s14, s13
   2c89a:	ee07 4a10 	vmov	s14, r4
   2c89e:	fe05 8a80 	vseleq.f32	s16, s11, s0
   2c8a2:	ee26 7a07 	vmul.f32	s14, s12, s14
   2c8a6:	eee6 7a86 	vfma.f32	s15, s13, s12
   2c8aa:	ee77 6a87 	vadd.f32	s13, s15, s14
   2c8ae:	ee16 3a90 	vmov	r3, s13
   2c8b2:	2b00      	cmp	r3, #0
   2c8b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2c8b8:	f340 81b3 	ble.w	2cc22 <__ieee754_powf+0x4be>
   2c8bc:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
   2c8c0:	f300 81fb 	bgt.w	2ccba <__ieee754_powf+0x556>
   2c8c4:	f000 81ee 	beq.w	2cca4 <__ieee754_powf+0x540>
   2c8c8:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
   2c8cc:	f300 81b5 	bgt.w	2cc3a <__ieee754_powf+0x4d6>
   2c8d0:	2200      	movs	r2, #0
   2c8d2:	4610      	mov	r0, r2
   2c8d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2c8d8:	eddf 6a6b 	vldr	s13, [pc, #428]	; 2ca88 <__ieee754_powf+0x324>
   2c8dc:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 2ca8c <__ieee754_powf+0x328>
   2c8e0:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
   2c8e4:	f023 030f 	bic.w	r3, r3, #15
   2c8e8:	eddf 3a69 	vldr	s7, [pc, #420]	; 2ca90 <__ieee754_powf+0x32c>
   2c8ec:	ed9f 4a69 	vldr	s8, [pc, #420]	; 2ca94 <__ieee754_powf+0x330>
   2c8f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c8f4:	ee06 3a10 	vmov	s12, r3
   2c8f8:	eddf 2a67 	vldr	s5, [pc, #412]	; 2ca98 <__ieee754_powf+0x334>
   2c8fc:	eddf 4a67 	vldr	s9, [pc, #412]	; 2ca9c <__ieee754_powf+0x338>
   2c900:	ee36 7a47 	vsub.f32	s14, s12, s14
   2c904:	ed9f 5a66 	vldr	s10, [pc, #408]	; 2caa0 <__ieee754_powf+0x33c>
   2c908:	ee66 6a26 	vmul.f32	s13, s12, s13
   2c90c:	eddf 5a65 	vldr	s11, [pc, #404]	; 2caa4 <__ieee754_powf+0x340>
   2c910:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2c914:	eee7 6a82 	vfma.f32	s13, s15, s4
   2c918:	eeb0 7a66 	vmov.f32	s14, s13
   2c91c:	eef0 7a66 	vmov.f32	s15, s13
   2c920:	eea6 7a23 	vfma.f32	s14, s12, s7
   2c924:	eeb0 2a47 	vmov.f32	s4, s14
   2c928:	ee67 6a07 	vmul.f32	s13, s14, s14
   2c92c:	eea6 2a63 	vfms.f32	s4, s12, s7
   2c930:	eeb0 6a44 	vmov.f32	s12, s8
   2c934:	eea6 6aa2 	vfma.f32	s12, s13, s5
   2c938:	ee77 7ac2 	vsub.f32	s15, s15, s4
   2c93c:	eee7 7a27 	vfma.f32	s15, s14, s15
   2c940:	eee6 4a26 	vfma.f32	s9, s12, s13
   2c944:	eea4 5aa6 	vfma.f32	s10, s9, s13
   2c948:	eee5 5a26 	vfma.f32	s11, s10, s13
   2c94c:	eeb0 6a65 	vmov.f32	s12, s11
   2c950:	eef0 5a47 	vmov.f32	s11, s14
   2c954:	eee6 5a66 	vfms.f32	s11, s12, s13
   2c958:	eef0 6a65 	vmov.f32	s13, s11
   2c95c:	ee67 5a25 	vmul.f32	s11, s14, s11
   2c960:	ee36 6ac3 	vsub.f32	s12, s13, s6
   2c964:	eec5 6a86 	vdiv.f32	s13, s11, s12
   2c968:	ee76 7ae7 	vsub.f32	s15, s13, s15
   2c96c:	ee37 7ac7 	vsub.f32	s14, s15, s14
   2c970:	ee30 0a47 	vsub.f32	s0, s0, s14
   2c974:	ee10 3a10 	vmov	r3, s0
   2c978:	4413      	add	r3, r2
   2c97a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2c97e:	f2c0 81be 	blt.w	2ccfe <__ieee754_powf+0x59a>
   2c982:	ee00 3a10 	vmov	s0, r3
   2c986:	ee20 0a08 	vmul.f32	s0, s0, s16
   2c98a:	e004      	b.n	2c996 <__ieee754_powf+0x232>
   2c98c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   2c990:	d106      	bne.n	2c9a0 <__ieee754_powf+0x23c>
   2c992:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2c996:	b002      	add	sp, #8
   2c998:	ecbd 8b06 	vpop	{d8-d10}
   2c99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c9a0:	4841      	ldr	r0, [pc, #260]	; (2caa8 <__ieee754_powf+0x344>)
   2c9a2:	b002      	add	sp, #8
   2c9a4:	ecbd 8b06 	vpop	{d8-d10}
   2c9a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c9ac:	f000 bfd2 	b.w	2d954 <nanf>
   2c9b0:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   2c9b4:	da20      	bge.n	2c9f8 <__ieee754_powf+0x294>
   2c9b6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2c9ba:	db0d      	blt.n	2c9d8 <__ieee754_powf+0x274>
   2c9bc:	15f2      	asrs	r2, r6, #23
   2c9be:	f1c2 0296 	rsb	r2, r2, #150	; 0x96
   2c9c2:	fa46 f102 	asr.w	r1, r6, r2
   2c9c6:	fa01 f202 	lsl.w	r2, r1, r2
   2c9ca:	42b2      	cmp	r2, r6
   2c9cc:	d104      	bne.n	2c9d8 <__ieee754_powf+0x274>
   2c9ce:	f001 0301 	and.w	r3, r1, #1
   2c9d2:	f1c3 0802 	rsb	r8, r3, #2
   2c9d6:	e6ea      	b.n	2c7ae <__ieee754_powf+0x4a>
   2c9d8:	4698      	mov	r8, r3
   2c9da:	e6e8      	b.n	2c7ae <__ieee754_powf+0x4a>
   2c9dc:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   2c9e0:	d0d7      	beq.n	2c992 <__ieee754_powf+0x22e>
   2c9e2:	dd0c      	ble.n	2c9fe <__ieee754_powf+0x29a>
   2c9e4:	2c00      	cmp	r4, #0
   2c9e6:	db0c      	blt.n	2ca02 <__ieee754_powf+0x29e>
   2c9e8:	ed9d 0a00 	vldr	s0, [sp]
   2c9ec:	e7d3      	b.n	2c996 <__ieee754_powf+0x232>
   2c9ee:	2c00      	cmp	r4, #0
   2c9f0:	db0a      	blt.n	2ca08 <__ieee754_powf+0x2a4>
   2c9f2:	ed9d 0a01 	vldr	s0, [sp, #4]
   2c9f6:	e7ce      	b.n	2c996 <__ieee754_powf+0x232>
   2c9f8:	f04f 0802 	mov.w	r8, #2
   2c9fc:	e6d3      	b.n	2c7a6 <__ieee754_powf+0x42>
   2c9fe:	2c00      	cmp	r4, #0
   2ca00:	db31      	blt.n	2ca66 <__ieee754_powf+0x302>
   2ca02:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 2caac <__ieee754_powf+0x348>
   2ca06:	e7c6      	b.n	2c996 <__ieee754_powf+0x232>
   2ca08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2ca0c:	ed9d 7a01 	vldr	s14, [sp, #4]
   2ca10:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2ca14:	e7bf      	b.n	2c996 <__ieee754_powf+0x232>
   2ca16:	ee07 9a90 	vmov	s15, r9
   2ca1a:	ee77 7ae7 	vsub.f32	s15, s15, s15
   2ca1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   2ca22:	e7b8      	b.n	2c996 <__ieee754_powf+0x232>
   2ca24:	ed9d 0a01 	vldr	s0, [sp, #4]
   2ca28:	b002      	add	sp, #8
   2ca2a:	ecbd 8b06 	vpop	{d8-d10}
   2ca2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ca32:	f000 bac5 	b.w	2cfc0 <__ieee754_sqrtf>
   2ca36:	2c00      	cmp	r4, #0
   2ca38:	da03      	bge.n	2ca42 <__ieee754_powf+0x2de>
   2ca3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2ca3e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   2ca42:	2f00      	cmp	r7, #0
   2ca44:	daa7      	bge.n	2c996 <__ieee754_powf+0x232>
   2ca46:	f1aa 5a7e 	sub.w	sl, sl, #1065353216	; 0x3f800000
   2ca4a:	ea5a 0308 	orrs.w	r3, sl, r8
   2ca4e:	f040 811a 	bne.w	2cc86 <__ieee754_powf+0x522>
   2ca52:	ee70 7a40 	vsub.f32	s15, s0, s0
   2ca56:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   2ca5a:	e79c      	b.n	2c996 <__ieee754_powf+0x232>
   2ca5c:	eddd 7a01 	vldr	s15, [sp, #4]
   2ca60:	ee27 0aa7 	vmul.f32	s0, s15, s15
   2ca64:	e797      	b.n	2c996 <__ieee754_powf+0x232>
   2ca66:	eddd 7a00 	vldr	s15, [sp]
   2ca6a:	eeb1 0a67 	vneg.f32	s0, s15
   2ca6e:	e792      	b.n	2c996 <__ieee754_powf+0x232>
   2ca70:	3f7ffff7 	.word	0x3f7ffff7
   2ca74:	3f800007 	.word	0x3f800007
   2ca78:	3eaaaaab 	.word	0x3eaaaaab
   2ca7c:	3fb8aa3b 	.word	0x3fb8aa3b
   2ca80:	36eca570 	.word	0x36eca570
   2ca84:	3fb8aa00 	.word	0x3fb8aa00
   2ca88:	35bfbe8c 	.word	0x35bfbe8c
   2ca8c:	3f317218 	.word	0x3f317218
   2ca90:	3f317200 	.word	0x3f317200
   2ca94:	b5ddea0e 	.word	0xb5ddea0e
   2ca98:	3331bb4c 	.word	0x3331bb4c
   2ca9c:	388ab355 	.word	0x388ab355
   2caa0:	bb360b61 	.word	0xbb360b61
   2caa4:	3e2aaaab 	.word	0x3e2aaaab
   2caa8:	000360fc 	.word	0x000360fc
   2caac:	00000000 	.word	0x00000000
   2cab0:	4b800000 	.word	0x4b800000
   2cab4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
   2cab8:	d107      	bne.n	2caca <__ieee754_powf+0x366>
   2caba:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 2cab0 <__ieee754_powf+0x34c>
   2cabe:	f06f 0317 	mvn.w	r3, #23
   2cac2:	ee60 7a27 	vmul.f32	s15, s0, s15
   2cac6:	ee17 aa90 	vmov	sl, s15
   2caca:	ea4f 50ea 	mov.w	r0, sl, asr #23
   2cace:	4e8d      	ldr	r6, [pc, #564]	; (2cd04 <__ieee754_powf+0x5a0>)
   2cad0:	f3ca 0a16 	ubfx	sl, sl, #0, #23
   2cad4:	387f      	subs	r0, #127	; 0x7f
   2cad6:	45b2      	cmp	sl, r6
   2cad8:	f04a 517e 	orr.w	r1, sl, #1065353216	; 0x3f800000
   2cadc:	4403      	add	r3, r0
   2cade:	f340 80d9 	ble.w	2cc94 <__ieee754_powf+0x530>
   2cae2:	4889      	ldr	r0, [pc, #548]	; (2cd08 <__ieee754_powf+0x5a4>)
   2cae4:	4582      	cmp	sl, r0
   2cae6:	f340 80f7 	ble.w	2ccd8 <__ieee754_powf+0x574>
   2caea:	ed9f 3a88 	vldr	s6, [pc, #544]	; 2cd0c <__ieee754_powf+0x5a8>
   2caee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2caf2:	3301      	adds	r3, #1
   2caf4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
   2caf8:	eeb0 2a43 	vmov.f32	s4, s6
   2cafc:	2600      	movs	r6, #0
   2cafe:	ee07 1a90 	vmov	s15, r1
   2cb02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2cb06:	1048      	asrs	r0, r1, #1
   2cb08:	ed9f aa81 	vldr	s20, [pc, #516]	; 2cd10 <__ieee754_powf+0x5ac>
   2cb0c:	ee77 6a87 	vadd.f32	s13, s15, s14
   2cb10:	ed9f 9a80 	vldr	s18, [pc, #512]	; 2cd14 <__ieee754_powf+0x5b0>
   2cb14:	ee77 5ac7 	vsub.f32	s11, s15, s14
   2cb18:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
   2cb1c:	497e      	ldr	r1, [pc, #504]	; (2cd18 <__ieee754_powf+0x5b4>)
   2cb1e:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
   2cb22:	eec6 9a26 	vdiv.f32	s19, s12, s13
   2cb26:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   2cb2a:	eddf 8a7c 	vldr	s17, [pc, #496]	; 2cd1c <__ieee754_powf+0x5b8>
   2cb2e:	4430      	add	r0, r6
   2cb30:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 2cd20 <__ieee754_powf+0x5bc>
   2cb34:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 2cd24 <__ieee754_powf+0x5c0>
   2cb38:	ee06 0a10 	vmov	s12, r0
   2cb3c:	eddf 0a7a 	vldr	s1, [pc, #488]	; 2cd28 <__ieee754_powf+0x5c4>
   2cb40:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 2cd2c <__ieee754_powf+0x5c8>
   2cb44:	ee36 7a47 	vsub.f32	s14, s12, s14
   2cb48:	eddf 1a79 	vldr	s3, [pc, #484]	; 2cd30 <__ieee754_powf+0x5cc>
   2cb4c:	eddf 3a79 	vldr	s7, [pc, #484]	; 2cd34 <__ieee754_powf+0x5d0>
   2cb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2cb54:	ee07 3a10 	vmov	s14, r3
   2cb58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   2cb5c:	ee65 2aa9 	vmul.f32	s5, s11, s19
   2cb60:	ee22 5aa2 	vmul.f32	s10, s5, s5
   2cb64:	ee12 3a90 	vmov	r3, s5
   2cb68:	400b      	ands	r3, r1
   2cb6a:	eea5 9a0a 	vfma.f32	s18, s10, s20
   2cb6e:	ee04 3a90 	vmov	s9, r3
   2cb72:	eeb1 7a64 	vneg.f32	s14, s9
   2cb76:	eee9 8a05 	vfma.f32	s17, s18, s10
   2cb7a:	eee7 5a06 	vfma.f32	s11, s14, s12
   2cb7e:	eea8 8a85 	vfma.f32	s16, s17, s10
   2cb82:	eee7 5a27 	vfma.f32	s11, s14, s15
   2cb86:	ee72 7aa4 	vadd.f32	s15, s5, s9
   2cb8a:	ee65 8a05 	vmul.f32	s17, s10, s10
   2cb8e:	eea8 0a05 	vfma.f32	s0, s16, s10
   2cb92:	ee25 6aa9 	vmul.f32	s12, s11, s19
   2cb96:	eef0 5a44 	vmov.f32	s11, s8
   2cb9a:	ee67 7a86 	vmul.f32	s15, s15, s12
   2cb9e:	eee4 5aa4 	vfma.f32	s11, s9, s9
   2cba2:	eee0 0a05 	vfma.f32	s1, s0, s10
   2cba6:	eee8 7aa0 	vfma.f32	s15, s17, s1
   2cbaa:	ee75 5aa7 	vadd.f32	s11, s11, s15
   2cbae:	ee15 3a90 	vmov	r3, s11
   2cbb2:	400b      	ands	r3, r1
   2cbb4:	ee05 3a90 	vmov	s11, r3
   2cbb8:	ee35 5ac4 	vsub.f32	s10, s11, s8
   2cbbc:	eea7 5a24 	vfma.f32	s10, s14, s9
   2cbc0:	ee77 7ac5 	vsub.f32	s15, s15, s10
   2cbc4:	ee67 7aa2 	vmul.f32	s15, s15, s5
   2cbc8:	eee6 7a25 	vfma.f32	s15, s12, s11
   2cbcc:	eeb0 5a67 	vmov.f32	s10, s15
   2cbd0:	eea4 5aa5 	vfma.f32	s10, s9, s11
   2cbd4:	ee15 3a10 	vmov	r3, s10
   2cbd8:	400b      	ands	r3, r1
   2cbda:	ee06 3a10 	vmov	s12, r3
   2cbde:	ee05 3a10 	vmov	s10, r3
   2cbe2:	eea7 6a25 	vfma.f32	s12, s14, s11
   2cbe6:	ee37 7ac6 	vsub.f32	s14, s15, s12
   2cbea:	ee27 7a01 	vmul.f32	s14, s14, s2
   2cbee:	eea5 7a21 	vfma.f32	s14, s10, s3
   2cbf2:	ee37 7a02 	vadd.f32	s14, s14, s4
   2cbf6:	eeb0 6a47 	vmov.f32	s12, s14
   2cbfa:	eea5 6a23 	vfma.f32	s12, s10, s7
   2cbfe:	ee36 6a03 	vadd.f32	s12, s12, s6
   2cc02:	ee36 6a26 	vadd.f32	s12, s12, s13
   2cc06:	ee16 3a10 	vmov	r3, s12
   2cc0a:	400b      	ands	r3, r1
   2cc0c:	ee06 3a10 	vmov	s12, r3
   2cc10:	ee76 7a66 	vsub.f32	s15, s12, s13
   2cc14:	ee77 7ac3 	vsub.f32	s15, s15, s6
   2cc18:	eee5 7a63 	vfms.f32	s15, s10, s7
   2cc1c:	ee77 7a67 	vsub.f32	s15, s14, s15
   2cc20:	e628      	b.n	2c874 <__ieee754_powf+0x110>
   2cc22:	4945      	ldr	r1, [pc, #276]	; (2cd38 <__ieee754_powf+0x5d4>)
   2cc24:	428a      	cmp	r2, r1
   2cc26:	dc60      	bgt.n	2ccea <__ieee754_powf+0x586>
   2cc28:	f47f ae4e 	bne.w	2c8c8 <__ieee754_powf+0x164>
   2cc2c:	ee76 6ac7 	vsub.f32	s13, s13, s14
   2cc30:	eef4 6ae7 	vcmpe.f32	s13, s15
   2cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cc38:	da57      	bge.n	2ccea <__ieee754_powf+0x586>
   2cc3a:	15d2      	asrs	r2, r2, #23
   2cc3c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2cc40:	4c3e      	ldr	r4, [pc, #248]	; (2cd3c <__ieee754_powf+0x5d8>)
   2cc42:	2b00      	cmp	r3, #0
   2cc44:	f1a2 027e 	sub.w	r2, r2, #126	; 0x7e
   2cc48:	fa41 f202 	asr.w	r2, r1, r2
   2cc4c:	441a      	add	r2, r3
   2cc4e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   2cc52:	f3c2 0016 	ubfx	r0, r2, #0, #23
   2cc56:	f1a1 017f 	sub.w	r1, r1, #127	; 0x7f
   2cc5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2cc5e:	fa44 f401 	asr.w	r4, r4, r1
   2cc62:	f1c1 0117 	rsb	r1, r1, #23
   2cc66:	ea22 0204 	bic.w	r2, r2, r4
   2cc6a:	fa40 f001 	asr.w	r0, r0, r1
   2cc6e:	ee06 2a90 	vmov	s13, r2
   2cc72:	bfb8      	it	lt
   2cc74:	4240      	neglt	r0, r0
   2cc76:	ee37 7a66 	vsub.f32	s14, s14, s13
   2cc7a:	05c2      	lsls	r2, r0, #23
   2cc7c:	ee77 6a87 	vadd.f32	s13, s15, s14
   2cc80:	ee16 3a90 	vmov	r3, s13
   2cc84:	e626      	b.n	2c8d4 <__ieee754_powf+0x170>
   2cc86:	f1b8 0f01 	cmp.w	r8, #1
   2cc8a:	f47f ae84 	bne.w	2c996 <__ieee754_powf+0x232>
   2cc8e:	eeb1 0a40 	vneg.f32	s0, s0
   2cc92:	e680      	b.n	2c996 <__ieee754_powf+0x232>
   2cc94:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 2cd0c <__ieee754_powf+0x5a8>
   2cc98:	2600      	movs	r6, #0
   2cc9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2cc9e:	eeb0 2a43 	vmov.f32	s4, s6
   2cca2:	e72c      	b.n	2cafe <__ieee754_powf+0x39a>
   2cca4:	ed9f 6a26 	vldr	s12, [pc, #152]	; 2cd40 <__ieee754_powf+0x5dc>
   2cca8:	ee76 6ac7 	vsub.f32	s13, s13, s14
   2ccac:	ee37 6a86 	vadd.f32	s12, s15, s12
   2ccb0:	eeb4 6ae6 	vcmpe.f32	s12, s13
   2ccb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ccb8:	ddbf      	ble.n	2cc3a <__ieee754_powf+0x4d6>
   2ccba:	eddf 7a22 	vldr	s15, [pc, #136]	; 2cd44 <__ieee754_powf+0x5e0>
   2ccbe:	ee28 0a27 	vmul.f32	s0, s16, s15
   2ccc2:	ee20 0a27 	vmul.f32	s0, s0, s15
   2ccc6:	e666      	b.n	2c996 <__ieee754_powf+0x232>
   2ccc8:	2c00      	cmp	r4, #0
   2ccca:	f6bf ae9a 	bge.w	2ca02 <__ieee754_powf+0x29e>
   2ccce:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 2cd44 <__ieee754_powf+0x5e0>
   2ccd2:	ee20 0a00 	vmul.f32	s0, s0, s0
   2ccd6:	e65e      	b.n	2c996 <__ieee754_powf+0x232>
   2ccd8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   2ccdc:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 2cd48 <__ieee754_powf+0x5e4>
   2cce0:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 2cd4c <__ieee754_powf+0x5e8>
   2cce4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   2cce8:	e709      	b.n	2cafe <__ieee754_powf+0x39a>
   2ccea:	eddf 7a19 	vldr	s15, [pc, #100]	; 2cd50 <__ieee754_powf+0x5ec>
   2ccee:	ee28 0a27 	vmul.f32	s0, s16, s15
   2ccf2:	ee20 0a27 	vmul.f32	s0, s0, s15
   2ccf6:	e64e      	b.n	2c996 <__ieee754_powf+0x232>
   2ccf8:	2c00      	cmp	r4, #0
   2ccfa:	dce8      	bgt.n	2ccce <__ieee754_powf+0x56a>
   2ccfc:	e681      	b.n	2ca02 <__ieee754_powf+0x29e>
   2ccfe:	f000 fe33 	bl	2d968 <scalbnf>
   2cd02:	e640      	b.n	2c986 <__ieee754_powf+0x222>
   2cd04:	001cc471 	.word	0x001cc471
   2cd08:	005db3d6 	.word	0x005db3d6
   2cd0c:	00000000 	.word	0x00000000
   2cd10:	3e53f142 	.word	0x3e53f142
   2cd14:	3e6c3255 	.word	0x3e6c3255
   2cd18:	fffff000 	.word	0xfffff000
   2cd1c:	3e8ba305 	.word	0x3e8ba305
   2cd20:	3eaaaaab 	.word	0x3eaaaaab
   2cd24:	3edb6db7 	.word	0x3edb6db7
   2cd28:	3f19999a 	.word	0x3f19999a
   2cd2c:	3f76384f 	.word	0x3f76384f
   2cd30:	369dc3a0 	.word	0x369dc3a0
   2cd34:	3f763800 	.word	0x3f763800
   2cd38:	43160000 	.word	0x43160000
   2cd3c:	007fffff 	.word	0x007fffff
   2cd40:	3338aa3c 	.word	0x3338aa3c
   2cd44:	7149f2ca 	.word	0x7149f2ca
   2cd48:	3f15c000 	.word	0x3f15c000
   2cd4c:	35d1cfdc 	.word	0x35d1cfdc
   2cd50:	0da24260 	.word	0x0da24260

0002cd54 <__ieee754_rem_pio2f>:
   2cd54:	ee10 3a10 	vmov	r3, s0
   2cd58:	4a8b      	ldr	r2, [pc, #556]	; (2cf88 <__ieee754_rem_pio2f+0x234>)
   2cd5a:	b570      	push	{r4, r5, r6, lr}
   2cd5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2cd60:	b086      	sub	sp, #24
   2cd62:	4605      	mov	r5, r0
   2cd64:	4294      	cmp	r4, r2
   2cd66:	dd68      	ble.n	2ce3a <__ieee754_rem_pio2f+0xe6>
   2cd68:	4a88      	ldr	r2, [pc, #544]	; (2cf8c <__ieee754_rem_pio2f+0x238>)
   2cd6a:	ee10 6a10 	vmov	r6, s0
   2cd6e:	4294      	cmp	r4, r2
   2cd70:	dc1a      	bgt.n	2cda8 <__ieee754_rem_pio2f+0x54>
   2cd72:	2b00      	cmp	r3, #0
   2cd74:	f024 040f 	bic.w	r4, r4, #15
   2cd78:	eddf 7a85 	vldr	s15, [pc, #532]	; 2cf90 <__ieee754_rem_pio2f+0x23c>
   2cd7c:	4a85      	ldr	r2, [pc, #532]	; (2cf94 <__ieee754_rem_pio2f+0x240>)
   2cd7e:	f340 80e7 	ble.w	2cf50 <__ieee754_rem_pio2f+0x1fc>
   2cd82:	4294      	cmp	r4, r2
   2cd84:	ee70 7a67 	vsub.f32	s15, s0, s15
   2cd88:	d066      	beq.n	2ce58 <__ieee754_rem_pio2f+0x104>
   2cd8a:	ed9f 7a83 	vldr	s14, [pc, #524]	; 2cf98 <__ieee754_rem_pio2f+0x244>
   2cd8e:	2001      	movs	r0, #1
   2cd90:	ee77 6ac7 	vsub.f32	s13, s15, s14
   2cd94:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2cd98:	edc5 6a00 	vstr	s13, [r5]
   2cd9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2cda0:	edc5 7a01 	vstr	s15, [r5, #4]
   2cda4:	b006      	add	sp, #24
   2cda6:	bd70      	pop	{r4, r5, r6, pc}
   2cda8:	4a7c      	ldr	r2, [pc, #496]	; (2cf9c <__ieee754_rem_pio2f+0x248>)
   2cdaa:	4294      	cmp	r4, r2
   2cdac:	dd5c      	ble.n	2ce68 <__ieee754_rem_pio2f+0x114>
   2cdae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   2cdb2:	da49      	bge.n	2ce48 <__ieee754_rem_pio2f+0xf4>
   2cdb4:	15e2      	asrs	r2, r4, #23
   2cdb6:	eddf 6a7a 	vldr	s13, [pc, #488]	; 2cfa0 <__ieee754_rem_pio2f+0x24c>
   2cdba:	3a86      	subs	r2, #134	; 0x86
   2cdbc:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   2cdc0:	ee07 3a90 	vmov	s15, r3
   2cdc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2cdc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2cdcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2cdd0:	ed8d 7a03 	vstr	s14, [sp, #12]
   2cdd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2cdd8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2cddc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2cde0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2cde4:	ed8d 7a04 	vstr	s14, [sp, #16]
   2cde8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2cdec:	eef5 7a40 	vcmp.f32	s15, #0.0
   2cdf0:	edcd 7a05 	vstr	s15, [sp, #20]
   2cdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cdf8:	f040 8097 	bne.w	2cf2a <__ieee754_rem_pio2f+0x1d6>
   2cdfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
   2ce00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ce04:	bf14      	ite	ne
   2ce06:	2302      	movne	r3, #2
   2ce08:	2301      	moveq	r3, #1
   2ce0a:	4966      	ldr	r1, [pc, #408]	; (2cfa4 <__ieee754_rem_pio2f+0x250>)
   2ce0c:	2002      	movs	r0, #2
   2ce0e:	9101      	str	r1, [sp, #4]
   2ce10:	4629      	mov	r1, r5
   2ce12:	9000      	str	r0, [sp, #0]
   2ce14:	a803      	add	r0, sp, #12
   2ce16:	f000 f959 	bl	2d0cc <__kernel_rem_pio2f>
   2ce1a:	2e00      	cmp	r6, #0
   2ce1c:	dac2      	bge.n	2cda4 <__ieee754_rem_pio2f+0x50>
   2ce1e:	ed95 7a00 	vldr	s14, [r5]
   2ce22:	4240      	negs	r0, r0
   2ce24:	edd5 7a01 	vldr	s15, [r5, #4]
   2ce28:	eeb1 7a47 	vneg.f32	s14, s14
   2ce2c:	eef1 7a67 	vneg.f32	s15, s15
   2ce30:	ed85 7a00 	vstr	s14, [r5]
   2ce34:	edc5 7a01 	vstr	s15, [r5, #4]
   2ce38:	e7b4      	b.n	2cda4 <__ieee754_rem_pio2f+0x50>
   2ce3a:	2200      	movs	r2, #0
   2ce3c:	2000      	movs	r0, #0
   2ce3e:	ed85 0a00 	vstr	s0, [r5]
   2ce42:	606a      	str	r2, [r5, #4]
   2ce44:	b006      	add	sp, #24
   2ce46:	bd70      	pop	{r4, r5, r6, pc}
   2ce48:	ee70 7a40 	vsub.f32	s15, s0, s0
   2ce4c:	2000      	movs	r0, #0
   2ce4e:	edc5 7a01 	vstr	s15, [r5, #4]
   2ce52:	edc5 7a00 	vstr	s15, [r5]
   2ce56:	e7a5      	b.n	2cda4 <__ieee754_rem_pio2f+0x50>
   2ce58:	eddf 6a53 	vldr	s13, [pc, #332]	; 2cfa8 <__ieee754_rem_pio2f+0x254>
   2ce5c:	2001      	movs	r0, #1
   2ce5e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2cfac <__ieee754_rem_pio2f+0x258>
   2ce62:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2ce66:	e793      	b.n	2cd90 <__ieee754_rem_pio2f+0x3c>
   2ce68:	f7fe ff38 	bl	2bcdc <fabsf>
   2ce6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2ce70:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2cfb0 <__ieee754_rem_pio2f+0x25c>
   2ce74:	eddf 5a46 	vldr	s11, [pc, #280]	; 2cf90 <__ieee754_rem_pio2f+0x23c>
   2ce78:	eea0 7a26 	vfma.f32	s14, s0, s13
   2ce7c:	eddf 7a46 	vldr	s15, [pc, #280]	; 2cf98 <__ieee754_rem_pio2f+0x244>
   2ce80:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2ce84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   2ce88:	ee17 0a10 	vmov	r0, s14
   2ce8c:	281f      	cmp	r0, #31
   2ce8e:	eeb1 6a66 	vneg.f32	s12, s13
   2ce92:	ee66 7aa7 	vmul.f32	s15, s13, s15
   2ce96:	eea6 0a25 	vfma.f32	s0, s12, s11
   2ce9a:	dc1e      	bgt.n	2ceda <__ieee754_rem_pio2f+0x186>
   2ce9c:	4a45      	ldr	r2, [pc, #276]	; (2cfb4 <__ieee754_rem_pio2f+0x260>)
   2ce9e:	1e41      	subs	r1, r0, #1
   2cea0:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   2cea4:	ee30 7a67 	vsub.f32	s14, s0, s15
   2cea8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2ceac:	4293      	cmp	r3, r2
   2ceae:	d016      	beq.n	2cede <__ieee754_rem_pio2f+0x18a>
   2ceb0:	ed85 7a00 	vstr	s14, [r5]
   2ceb4:	ee30 0a47 	vsub.f32	s0, s0, s14
   2ceb8:	2e00      	cmp	r6, #0
   2ceba:	ee30 0a67 	vsub.f32	s0, s0, s15
   2cebe:	ed85 0a01 	vstr	s0, [r5, #4]
   2cec2:	f6bf af6f 	bge.w	2cda4 <__ieee754_rem_pio2f+0x50>
   2cec6:	eeb1 7a47 	vneg.f32	s14, s14
   2ceca:	4240      	negs	r0, r0
   2cecc:	eeb1 0a40 	vneg.f32	s0, s0
   2ced0:	ed85 7a00 	vstr	s14, [r5]
   2ced4:	ed85 0a01 	vstr	s0, [r5, #4]
   2ced8:	e764      	b.n	2cda4 <__ieee754_rem_pio2f+0x50>
   2ceda:	ee30 7a67 	vsub.f32	s14, s0, s15
   2cede:	ee17 3a10 	vmov	r3, s14
   2cee2:	15e4      	asrs	r4, r4, #23
   2cee4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   2cee8:	1ae3      	subs	r3, r4, r3
   2ceea:	2b08      	cmp	r3, #8
   2ceec:	dde0      	ble.n	2ceb0 <__ieee754_rem_pio2f+0x15c>
   2ceee:	eef0 5a40 	vmov.f32	s11, s0
   2cef2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 2cfa8 <__ieee754_rem_pio2f+0x254>
   2cef6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 2cfac <__ieee754_rem_pio2f+0x258>
   2cefa:	eee6 5a27 	vfma.f32	s11, s12, s15
   2cefe:	ee30 0a65 	vsub.f32	s0, s0, s11
   2cf02:	eea6 0a27 	vfma.f32	s0, s12, s15
   2cf06:	eef0 7a40 	vmov.f32	s15, s0
   2cf0a:	eed6 7a87 	vfnms.f32	s15, s13, s14
   2cf0e:	ee35 7ae7 	vsub.f32	s14, s11, s15
   2cf12:	ee17 3a10 	vmov	r3, s14
   2cf16:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   2cf1a:	1ae4      	subs	r4, r4, r3
   2cf1c:	2c19      	cmp	r4, #25
   2cf1e:	dc06      	bgt.n	2cf2e <__ieee754_rem_pio2f+0x1da>
   2cf20:	ed85 7a00 	vstr	s14, [r5]
   2cf24:	eeb0 0a65 	vmov.f32	s0, s11
   2cf28:	e7c4      	b.n	2ceb4 <__ieee754_rem_pio2f+0x160>
   2cf2a:	2303      	movs	r3, #3
   2cf2c:	e76d      	b.n	2ce0a <__ieee754_rem_pio2f+0xb6>
   2cf2e:	eeb0 0a65 	vmov.f32	s0, s11
   2cf32:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2cfb8 <__ieee754_rem_pio2f+0x264>
   2cf36:	ed9f 5a21 	vldr	s10, [pc, #132]	; 2cfbc <__ieee754_rem_pio2f+0x268>
   2cf3a:	eea6 0a07 	vfma.f32	s0, s12, s14
   2cf3e:	ee75 7ac0 	vsub.f32	s15, s11, s0
   2cf42:	eee6 7a07 	vfma.f32	s15, s12, s14
   2cf46:	eed6 7a85 	vfnms.f32	s15, s13, s10
   2cf4a:	ee30 7a67 	vsub.f32	s14, s0, s15
   2cf4e:	e7af      	b.n	2ceb0 <__ieee754_rem_pio2f+0x15c>
   2cf50:	4294      	cmp	r4, r2
   2cf52:	ee70 7a27 	vadd.f32	s15, s0, s15
   2cf56:	d00e      	beq.n	2cf76 <__ieee754_rem_pio2f+0x222>
   2cf58:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2cf98 <__ieee754_rem_pio2f+0x244>
   2cf5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf60:	ee77 6a87 	vadd.f32	s13, s15, s14
   2cf64:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2cf68:	edc5 6a00 	vstr	s13, [r5]
   2cf6c:	ee77 7a87 	vadd.f32	s15, s15, s14
   2cf70:	edc5 7a01 	vstr	s15, [r5, #4]
   2cf74:	e716      	b.n	2cda4 <__ieee754_rem_pio2f+0x50>
   2cf76:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2cfa8 <__ieee754_rem_pio2f+0x254>
   2cf7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf7e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2cfac <__ieee754_rem_pio2f+0x258>
   2cf82:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2cf86:	e7eb      	b.n	2cf60 <__ieee754_rem_pio2f+0x20c>
   2cf88:	3f490fd8 	.word	0x3f490fd8
   2cf8c:	4016cbe3 	.word	0x4016cbe3
   2cf90:	3fc90f80 	.word	0x3fc90f80
   2cf94:	3fc90fd0 	.word	0x3fc90fd0
   2cf98:	37354443 	.word	0x37354443
   2cf9c:	43490f80 	.word	0x43490f80
   2cfa0:	43800000 	.word	0x43800000
   2cfa4:	00036700 	.word	0x00036700
   2cfa8:	37354400 	.word	0x37354400
   2cfac:	2e85a308 	.word	0x2e85a308
   2cfb0:	3f22f984 	.word	0x3f22f984
   2cfb4:	00036680 	.word	0x00036680
   2cfb8:	2e85a300 	.word	0x2e85a300
   2cfbc:	248d3132 	.word	0x248d3132

0002cfc0 <__ieee754_sqrtf>:
   2cfc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
   2cfc4:	4770      	bx	lr
   2cfc6:	bf00      	nop

0002cfc8 <__kernel_cosf>:
   2cfc8:	ee10 3a10 	vmov	r3, s0
   2cfcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2cfd0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2cfd4:	da2c      	bge.n	2d030 <__kernel_cosf+0x68>
   2cfd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2cfda:	ee17 3a90 	vmov	r3, s15
   2cfde:	2b00      	cmp	r3, #0
   2cfe0:	d060      	beq.n	2d0a4 <__kernel_cosf+0xdc>
   2cfe2:	ee20 7a00 	vmul.f32	s14, s0, s0
   2cfe6:	eddf 7a31 	vldr	s15, [pc, #196]	; 2d0ac <__kernel_cosf+0xe4>
   2cfea:	ed9f 5a31 	vldr	s10, [pc, #196]	; 2d0b0 <__kernel_cosf+0xe8>
   2cfee:	eddf 5a31 	vldr	s11, [pc, #196]	; 2d0b4 <__kernel_cosf+0xec>
   2cff2:	eea7 5a27 	vfma.f32	s10, s14, s15
   2cff6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 2d0b8 <__kernel_cosf+0xf0>
   2cffa:	eddf 7a30 	vldr	s15, [pc, #192]	; 2d0bc <__kernel_cosf+0xf4>
   2cffe:	eddf 6a30 	vldr	s13, [pc, #192]	; 2d0c0 <__kernel_cosf+0xf8>
   2d002:	eee7 5a05 	vfma.f32	s11, s14, s10
   2d006:	eea7 6a25 	vfma.f32	s12, s14, s11
   2d00a:	eee7 7a06 	vfma.f32	s15, s14, s12
   2d00e:	eee7 6a27 	vfma.f32	s13, s14, s15
   2d012:	ee66 6a87 	vmul.f32	s13, s13, s14
   2d016:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2d01a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   2d01e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2d022:	eee7 0a26 	vfma.f32	s1, s14, s13
   2d026:	eed7 0a06 	vfnms.f32	s1, s14, s12
   2d02a:	ee37 0ae0 	vsub.f32	s0, s15, s1
   2d02e:	4770      	bx	lr
   2d030:	ee20 7a00 	vmul.f32	s14, s0, s0
   2d034:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2d0ac <__kernel_cosf+0xe4>
   2d038:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 2d0b0 <__kernel_cosf+0xe8>
   2d03c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2d0b4 <__kernel_cosf+0xec>
   2d040:	eea7 5a27 	vfma.f32	s10, s14, s15
   2d044:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 2d0b8 <__kernel_cosf+0xf0>
   2d048:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2d0bc <__kernel_cosf+0xf4>
   2d04c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 2d0c0 <__kernel_cosf+0xf8>
   2d050:	4a1c      	ldr	r2, [pc, #112]	; (2d0c4 <__kernel_cosf+0xfc>)
   2d052:	4293      	cmp	r3, r2
   2d054:	eee5 5a07 	vfma.f32	s11, s10, s14
   2d058:	eea5 6a87 	vfma.f32	s12, s11, s14
   2d05c:	eee6 7a07 	vfma.f32	s15, s12, s14
   2d060:	eee7 6a87 	vfma.f32	s13, s15, s14
   2d064:	ee66 6a87 	vmul.f32	s13, s13, s14
   2d068:	ddd5      	ble.n	2d016 <__kernel_cosf+0x4e>
   2d06a:	4a17      	ldr	r2, [pc, #92]	; (2d0c8 <__kernel_cosf+0x100>)
   2d06c:	4293      	cmp	r3, r2
   2d06e:	dc14      	bgt.n	2d09a <__kernel_cosf+0xd2>
   2d070:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   2d074:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2d078:	ee07 3a90 	vmov	s15, r3
   2d07c:	ee36 6a67 	vsub.f32	s12, s12, s15
   2d080:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2d084:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   2d088:	eee7 0a26 	vfma.f32	s1, s14, s13
   2d08c:	eed7 7a25 	vfnms.f32	s15, s14, s11
   2d090:	ee77 7ae0 	vsub.f32	s15, s15, s1
   2d094:	ee36 0a67 	vsub.f32	s0, s12, s15
   2d098:	4770      	bx	lr
   2d09a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   2d09e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   2d0a2:	e7ed      	b.n	2d080 <__kernel_cosf+0xb8>
   2d0a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2d0a8:	4770      	bx	lr
   2d0aa:	bf00      	nop
   2d0ac:	ad47d74e 	.word	0xad47d74e
   2d0b0:	310f74f6 	.word	0x310f74f6
   2d0b4:	b493f27c 	.word	0xb493f27c
   2d0b8:	37d00d01 	.word	0x37d00d01
   2d0bc:	bab60b61 	.word	0xbab60b61
   2d0c0:	3d2aaaab 	.word	0x3d2aaaab
   2d0c4:	3e999999 	.word	0x3e999999
   2d0c8:	3f480000 	.word	0x3f480000

0002d0cc <__kernel_rem_pio2f>:
   2d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0d0:	ed2d 8b04 	vpush	{d8-d9}
   2d0d4:	b0db      	sub	sp, #364	; 0x16c
   2d0d6:	461c      	mov	r4, r3
   2d0d8:	4681      	mov	r9, r0
   2d0da:	9304      	str	r3, [sp, #16]
   2d0dc:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   2d0e0:	4bd4      	ldr	r3, [pc, #848]	; (2d434 <__kernel_rem_pio2f+0x368>)
   2d0e2:	9107      	str	r1, [sp, #28]
   2d0e4:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   2d0e6:	9209      	str	r2, [sp, #36]	; 0x24
   2d0e8:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   2d0ec:	1d11      	adds	r1, r2, #4
   2d0ee:	f2c0 8274 	blt.w	2d5da <__kernel_rem_pio2f+0x50e>
   2d0f2:	1ed3      	subs	r3, r2, #3
   2d0f4:	f100 82f1 	bmi.w	2d6da <__kernel_rem_pio2f+0x60e>
   2d0f8:	10db      	asrs	r3, r3, #3
   2d0fa:	9303      	str	r3, [sp, #12]
   2d0fc:	3301      	adds	r3, #1
   2d0fe:	00db      	lsls	r3, r3, #3
   2d100:	9308      	str	r3, [sp, #32]
   2d102:	eb15 0108 	adds.w	r1, r5, r8
   2d106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2d10a:	eba3 0302 	sub.w	r3, r3, r2
   2d10e:	9306      	str	r3, [sp, #24]
   2d110:	9b03      	ldr	r3, [sp, #12]
   2d112:	eba3 0308 	sub.w	r3, r3, r8
   2d116:	d414      	bmi.n	2d142 <__kernel_rem_pio2f+0x76>
   2d118:	3101      	adds	r1, #1
   2d11a:	aa1e      	add	r2, sp, #120	; 0x78
   2d11c:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 2d440 <__kernel_rem_pio2f+0x374>
   2d120:	4419      	add	r1, r3
   2d122:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   2d124:	2b00      	cmp	r3, #0
   2d126:	eef0 7a47 	vmov.f32	s15, s14
   2d12a:	db05      	blt.n	2d138 <__kernel_rem_pio2f+0x6c>
   2d12c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2d130:	ee07 4a90 	vmov	s15, r4
   2d134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2d138:	3301      	adds	r3, #1
   2d13a:	ece2 7a01 	vstmia	r2!, {s15}
   2d13e:	428b      	cmp	r3, r1
   2d140:	d1f0      	bne.n	2d124 <__kernel_rem_pio2f+0x58>
   2d142:	9b04      	ldr	r3, [sp, #16]
   2d144:	2d00      	cmp	r5, #0
   2d146:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   2d14a:	ea4f 0483 	mov.w	r4, r3, lsl #2
   2d14e:	db1d      	blt.n	2d18c <__kernel_rem_pio2f+0xc0>
   2d150:	ab1e      	add	r3, sp, #120	; 0x78
   2d152:	eb09 0104 	add.w	r1, r9, r4
   2d156:	a846      	add	r0, sp, #280	; 0x118
   2d158:	191e      	adds	r6, r3, r4
   2d15a:	ab47      	add	r3, sp, #284	; 0x11c
   2d15c:	eb03 070a 	add.w	r7, r3, sl
   2d160:	f1b8 0f00 	cmp.w	r8, #0
   2d164:	f2c0 8187 	blt.w	2d476 <__kernel_rem_pio2f+0x3aa>
   2d168:	4632      	mov	r2, r6
   2d16a:	464b      	mov	r3, r9
   2d16c:	eddf 7ab4 	vldr	s15, [pc, #720]	; 2d440 <__kernel_rem_pio2f+0x374>
   2d170:	ecf3 6a01 	vldmia	r3!, {s13}
   2d174:	ed32 7a01 	vldmdb	r2!, {s14}
   2d178:	428b      	cmp	r3, r1
   2d17a:	eee6 7a87 	vfma.f32	s15, s13, s14
   2d17e:	d1f7      	bne.n	2d170 <__kernel_rem_pio2f+0xa4>
   2d180:	ece0 7a01 	vstmia	r0!, {s15}
   2d184:	42b8      	cmp	r0, r7
   2d186:	f106 0604 	add.w	r6, r6, #4
   2d18a:	d1e9      	bne.n	2d160 <__kernel_rem_pio2f+0x94>
   2d18c:	f1aa 0308 	sub.w	r3, sl, #8
   2d190:	af0a      	add	r7, sp, #40	; 0x28
   2d192:	aa09      	add	r2, sp, #36	; 0x24
   2d194:	9500      	str	r5, [sp, #0]
   2d196:	18fb      	adds	r3, r7, r3
   2d198:	444c      	add	r4, r9
   2d19a:	4492      	add	sl, r2
   2d19c:	ae46      	add	r6, sp, #280	; 0x118
   2d19e:	9305      	str	r3, [sp, #20]
   2d1a0:	462b      	mov	r3, r5
   2d1a2:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 2d438 <__kernel_rem_pio2f+0x36c>
   2d1a6:	eddf 8aa5 	vldr	s17, [pc, #660]	; 2d43c <__kernel_rem_pio2f+0x370>
   2d1aa:	9d06      	ldr	r5, [sp, #24]
   2d1ac:	0099      	lsls	r1, r3, #2
   2d1ae:	aa5a      	add	r2, sp, #360	; 0x168
   2d1b0:	2b00      	cmp	r3, #0
   2d1b2:	440a      	add	r2, r1
   2d1b4:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   2d1b8:	dd16      	ble.n	2d1e8 <__kernel_rem_pio2f+0x11c>
   2d1ba:	eb06 0283 	add.w	r2, r6, r3, lsl #2
   2d1be:	4638      	mov	r0, r7
   2d1c0:	ee60 7a09 	vmul.f32	s15, s0, s18
   2d1c4:	ed72 6a01 	vldmdb	r2!, {s13}
   2d1c8:	eeb0 7a40 	vmov.f32	s14, s0
   2d1cc:	42b2      	cmp	r2, r6
   2d1ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2d1d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2d1d6:	eea7 7ae8 	vfms.f32	s14, s15, s17
   2d1da:	ee37 0aa6 	vadd.f32	s0, s15, s13
   2d1de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2d1e2:	eca0 7a01 	vstmia	r0!, {s14}
   2d1e6:	d1eb      	bne.n	2d1c0 <__kernel_rem_pio2f+0xf4>
   2d1e8:	4628      	mov	r0, r5
   2d1ea:	e9cd 1301 	strd	r1, r3, [sp, #4]
   2d1ee:	f000 fbbb 	bl	2d968 <scalbnf>
   2d1f2:	eeb0 8a40 	vmov.f32	s16, s0
   2d1f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   2d1fa:	ee28 0a00 	vmul.f32	s0, s16, s0
   2d1fe:	f7fe fd75 	bl	2bcec <floorf>
   2d202:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   2d206:	2d00      	cmp	r5, #0
   2d208:	eea0 8a67 	vfms.f32	s16, s0, s15
   2d20c:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   2d210:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   2d214:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   2d218:	ee38 8a67 	vsub.f32	s16, s16, s15
   2d21c:	f340 8081 	ble.w	2d322 <__kernel_rem_pio2f+0x256>
   2d220:	1e58      	subs	r0, r3, #1
   2d222:	f1c5 0208 	rsb	r2, r5, #8
   2d226:	f1c5 0b07 	rsb	fp, r5, #7
   2d22a:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
   2d22e:	fa4c fe02 	asr.w	lr, ip, r2
   2d232:	fa0e f202 	lsl.w	r2, lr, r2
   2d236:	9201      	str	r2, [sp, #4]
   2d238:	ee19 2a90 	vmov	r2, s19
   2d23c:	4472      	add	r2, lr
   2d23e:	ee09 2a90 	vmov	s19, r2
   2d242:	9a01      	ldr	r2, [sp, #4]
   2d244:	ebac 0202 	sub.w	r2, ip, r2
   2d248:	fa42 fb0b 	asr.w	fp, r2, fp
   2d24c:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   2d250:	f1bb 0f00 	cmp.w	fp, #0
   2d254:	dc6f      	bgt.n	2d336 <__kernel_rem_pio2f+0x26a>
   2d256:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d25e:	f040 80aa 	bne.w	2d3b6 <__kernel_rem_pio2f+0x2ea>
   2d262:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   2d266:	9a00      	ldr	r2, [sp, #0]
   2d268:	4562      	cmp	r2, ip
   2d26a:	dc0e      	bgt.n	2d28a <__kernel_rem_pio2f+0x1be>
   2d26c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   2d270:	2100      	movs	r1, #0
   2d272:	441a      	add	r2, r3
   2d274:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2d278:	f852 0904 	ldr.w	r0, [r2], #-4
   2d27c:	4552      	cmp	r2, sl
   2d27e:	ea41 0100 	orr.w	r1, r1, r0
   2d282:	d1f9      	bne.n	2d278 <__kernel_rem_pio2f+0x1ac>
   2d284:	2900      	cmp	r1, #0
   2d286:	f040 80ff 	bne.w	2d488 <__kernel_rem_pio2f+0x3bc>
   2d28a:	9a00      	ldr	r2, [sp, #0]
   2d28c:	3a01      	subs	r2, #1
   2d28e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   2d292:	2a00      	cmp	r2, #0
   2d294:	f040 80ea 	bne.w	2d46c <__kernel_rem_pio2f+0x3a0>
   2d298:	9a05      	ldr	r2, [sp, #20]
   2d29a:	2001      	movs	r0, #1
   2d29c:	f852 1904 	ldr.w	r1, [r2], #-4
   2d2a0:	3001      	adds	r0, #1
   2d2a2:	2900      	cmp	r1, #0
   2d2a4:	d0fa      	beq.n	2d29c <__kernel_rem_pio2f+0x1d0>
   2d2a6:	f103 0e01 	add.w	lr, r3, #1
   2d2aa:	4418      	add	r0, r3
   2d2ac:	46f4      	mov	ip, lr
   2d2ae:	9a03      	ldr	r2, [sp, #12]
   2d2b0:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
   2d2b4:	9904      	ldr	r1, [sp, #16]
   2d2b6:	4472      	add	r2, lr
   2d2b8:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   2d2bc:	440b      	add	r3, r1
   2d2be:	4493      	add	fp, r2
   2d2c0:	aa1e      	add	r2, sp, #120	; 0x78
   2d2c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2d2c6:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
   2d2c8:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
   2d2cc:	f85b 3f04 	ldr.w	r3, [fp, #4]!
   2d2d0:	4611      	mov	r1, r2
   2d2d2:	f1b8 0f00 	cmp.w	r8, #0
   2d2d6:	ee07 3a90 	vmov	s15, r3
   2d2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2d2de:	ece1 7a01 	vstmia	r1!, {s15}
   2d2e2:	db14      	blt.n	2d30e <__kernel_rem_pio2f+0x242>
   2d2e4:	464b      	mov	r3, r9
   2d2e6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 2d440 <__kernel_rem_pio2f+0x374>
   2d2ea:	e001      	b.n	2d2f0 <__kernel_rem_pio2f+0x224>
   2d2ec:	ed72 7a01 	vldmdb	r2!, {s15}
   2d2f0:	ecf3 6a01 	vldmia	r3!, {s13}
   2d2f4:	42a3      	cmp	r3, r4
   2d2f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2d2fa:	d1f7      	bne.n	2d2ec <__kernel_rem_pio2f+0x220>
   2d2fc:	f10c 0c01 	add.w	ip, ip, #1
   2d300:	ecae 7a01 	vstmia	lr!, {s14}
   2d304:	460a      	mov	r2, r1
   2d306:	4584      	cmp	ip, r0
   2d308:	dde0      	ble.n	2d2cc <__kernel_rem_pio2f+0x200>
   2d30a:	4603      	mov	r3, r0
   2d30c:	e74e      	b.n	2d1ac <__kernel_rem_pio2f+0xe0>
   2d30e:	f10c 0c01 	add.w	ip, ip, #1
   2d312:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2d440 <__kernel_rem_pio2f+0x374>
   2d316:	460a      	mov	r2, r1
   2d318:	4584      	cmp	ip, r0
   2d31a:	ecae 7a01 	vstmia	lr!, {s14}
   2d31e:	ddd5      	ble.n	2d2cc <__kernel_rem_pio2f+0x200>
   2d320:	e7f3      	b.n	2d30a <__kernel_rem_pio2f+0x23e>
   2d322:	f040 8098 	bne.w	2d456 <__kernel_rem_pio2f+0x38a>
   2d326:	1e5a      	subs	r2, r3, #1
   2d328:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   2d32c:	ea4f 2b22 	mov.w	fp, r2, asr #8
   2d330:	f1bb 0f00 	cmp.w	fp, #0
   2d334:	dd8f      	ble.n	2d256 <__kernel_rem_pio2f+0x18a>
   2d336:	ee19 2a90 	vmov	r2, s19
   2d33a:	2b00      	cmp	r3, #0
   2d33c:	f102 0201 	add.w	r2, r2, #1
   2d340:	ee09 2a90 	vmov	s19, r2
   2d344:	f340 81cc 	ble.w	2d6e0 <__kernel_rem_pio2f+0x614>
   2d348:	6838      	ldr	r0, [r7, #0]
   2d34a:	2800      	cmp	r0, #0
   2d34c:	d162      	bne.n	2d414 <__kernel_rem_pio2f+0x348>
   2d34e:	2b01      	cmp	r3, #1
   2d350:	d00b      	beq.n	2d36a <__kernel_rem_pio2f+0x29e>
   2d352:	46be      	mov	lr, r7
   2d354:	f04f 0c01 	mov.w	ip, #1
   2d358:	f85e 0f04 	ldr.w	r0, [lr, #4]!
   2d35c:	f10c 0201 	add.w	r2, ip, #1
   2d360:	2800      	cmp	r0, #0
   2d362:	d15a      	bne.n	2d41a <__kernel_rem_pio2f+0x34e>
   2d364:	4293      	cmp	r3, r2
   2d366:	4694      	mov	ip, r2
   2d368:	d1f6      	bne.n	2d358 <__kernel_rem_pio2f+0x28c>
   2d36a:	2d00      	cmp	r5, #0
   2d36c:	dd0b      	ble.n	2d386 <__kernel_rem_pio2f+0x2ba>
   2d36e:	2d01      	cmp	r5, #1
   2d370:	f000 811f 	beq.w	2d5b2 <__kernel_rem_pio2f+0x4e6>
   2d374:	2d02      	cmp	r5, #2
   2d376:	d106      	bne.n	2d386 <__kernel_rem_pio2f+0x2ba>
   2d378:	1e59      	subs	r1, r3, #1
   2d37a:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   2d37e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2d382:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   2d386:	f1bb 0f02 	cmp.w	fp, #2
   2d38a:	f47f af64 	bne.w	2d256 <__kernel_rem_pio2f+0x18a>
   2d38e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2d392:	ee30 8a48 	vsub.f32	s16, s0, s16
   2d396:	2800      	cmp	r0, #0
   2d398:	f43f af5d 	beq.w	2d256 <__kernel_rem_pio2f+0x18a>
   2d39c:	4628      	mov	r0, r5
   2d39e:	9301      	str	r3, [sp, #4]
   2d3a0:	f000 fae2 	bl	2d968 <scalbnf>
   2d3a4:	ee38 8a40 	vsub.f32	s16, s16, s0
   2d3a8:	9b01      	ldr	r3, [sp, #4]
   2d3aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2d3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d3b2:	f43f af56 	beq.w	2d262 <__kernel_rem_pio2f+0x196>
   2d3b6:	9301      	str	r3, [sp, #4]
   2d3b8:	eeb0 0a48 	vmov.f32	s0, s16
   2d3bc:	9d00      	ldr	r5, [sp, #0]
   2d3be:	46d8      	mov	r8, fp
   2d3c0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2d3c4:	1a98      	subs	r0, r3, r2
   2d3c6:	f000 facf 	bl	2d968 <scalbnf>
   2d3ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 2d43c <__kernel_rem_pio2f+0x370>
   2d3ce:	9b01      	ldr	r3, [sp, #4]
   2d3d0:	eeb4 0ac7 	vcmpe.f32	s0, s14
   2d3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d3d8:	f2c0 8184 	blt.w	2d6e4 <__kernel_rem_pio2f+0x618>
   2d3dc:	eddf 7a16 	vldr	s15, [pc, #88]	; 2d438 <__kernel_rem_pio2f+0x36c>
   2d3e0:	f103 0b01 	add.w	fp, r3, #1
   2d3e4:	9a06      	ldr	r2, [sp, #24]
   2d3e6:	ee60 7a27 	vmul.f32	s15, s0, s15
   2d3ea:	3208      	adds	r2, #8
   2d3ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2d3f0:	9206      	str	r2, [sp, #24]
   2d3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2d3f6:	eea7 0ac7 	vfms.f32	s0, s15, s14
   2d3fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2d3fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2d402:	ee10 2a10 	vmov	r2, s0
   2d406:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   2d40a:	ee17 3a90 	vmov	r3, s15
   2d40e:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   2d412:	e04f      	b.n	2d4b4 <__kernel_rem_pio2f+0x3e8>
   2d414:	2201      	movs	r2, #1
   2d416:	f04f 0c00 	mov.w	ip, #0
   2d41a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
   2d41e:	4293      	cmp	r3, r2
   2d420:	f847 002c 	str.w	r0, [r7, ip, lsl #2]
   2d424:	dd15      	ble.n	2d452 <__kernel_rem_pio2f+0x386>
   2d426:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   2d42a:	4439      	add	r1, r7
   2d42c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2d430:	e009      	b.n	2d446 <__kernel_rem_pio2f+0x37a>
   2d432:	bf00      	nop
   2d434:	00036a44 	.word	0x00036a44
   2d438:	3b800000 	.word	0x3b800000
   2d43c:	43800000 	.word	0x43800000
   2d440:	00000000 	.word	0x00000000
   2d444:	6810      	ldr	r0, [r2, #0]
   2d446:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
   2d44a:	f842 0b04 	str.w	r0, [r2], #4
   2d44e:	428a      	cmp	r2, r1
   2d450:	d1f8      	bne.n	2d444 <__kernel_rem_pio2f+0x378>
   2d452:	2001      	movs	r0, #1
   2d454:	e789      	b.n	2d36a <__kernel_rem_pio2f+0x29e>
   2d456:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2d45a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2d45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d462:	f280 80ae 	bge.w	2d5c2 <__kernel_rem_pio2f+0x4f6>
   2d466:	f04f 0b00 	mov.w	fp, #0
   2d46a:	e6f4      	b.n	2d256 <__kernel_rem_pio2f+0x18a>
   2d46c:	f103 0e01 	add.w	lr, r3, #1
   2d470:	46f4      	mov	ip, lr
   2d472:	4670      	mov	r0, lr
   2d474:	e71b      	b.n	2d2ae <__kernel_rem_pio2f+0x1e2>
   2d476:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 2d440 <__kernel_rem_pio2f+0x374>
   2d47a:	3604      	adds	r6, #4
   2d47c:	ece0 7a01 	vstmia	r0!, {s15}
   2d480:	42b8      	cmp	r0, r7
   2d482:	f47f ae6d 	bne.w	2d160 <__kernel_rem_pio2f+0x94>
   2d486:	e681      	b.n	2d18c <__kernel_rem_pio2f+0xc0>
   2d488:	9906      	ldr	r1, [sp, #24]
   2d48a:	46d8      	mov	r8, fp
   2d48c:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
   2d490:	46e3      	mov	fp, ip
   2d492:	3908      	subs	r1, #8
   2d494:	9d00      	ldr	r5, [sp, #0]
   2d496:	9106      	str	r1, [sp, #24]
   2d498:	b962      	cbnz	r2, 2d4b4 <__kernel_rem_pio2f+0x3e8>
   2d49a:	4ab0      	ldr	r2, [pc, #704]	; (2d75c <__kernel_rem_pio2f+0x690>)
   2d49c:	441a      	add	r2, r3
   2d49e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   2d4a2:	460a      	mov	r2, r1
   2d4a4:	f853 1904 	ldr.w	r1, [r3], #-4
   2d4a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2d4ac:	3a08      	subs	r2, #8
   2d4ae:	2900      	cmp	r1, #0
   2d4b0:	d0f8      	beq.n	2d4a4 <__kernel_rem_pio2f+0x3d8>
   2d4b2:	9206      	str	r2, [sp, #24]
   2d4b4:	9806      	ldr	r0, [sp, #24]
   2d4b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2d4ba:	f000 fa55 	bl	2d968 <scalbnf>
   2d4be:	f1bb 0f00 	cmp.w	fp, #0
   2d4c2:	f2c0 8136 	blt.w	2d732 <__kernel_rem_pio2f+0x666>
   2d4c6:	ea4f 048b 	mov.w	r4, fp, lsl #2
   2d4ca:	ab46      	add	r3, sp, #280	; 0x118
   2d4cc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 2d760 <__kernel_rem_pio2f+0x694>
   2d4d0:	1d26      	adds	r6, r4, #4
   2d4d2:	441c      	add	r4, r3
   2d4d4:	19bb      	adds	r3, r7, r6
   2d4d6:	1d22      	adds	r2, r4, #4
   2d4d8:	ed73 7a01 	vldmdb	r3!, {s15}
   2d4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2d4e0:	42bb      	cmp	r3, r7
   2d4e2:	ee67 7a80 	vmul.f32	s15, s15, s0
   2d4e6:	ee20 0a07 	vmul.f32	s0, s0, s14
   2d4ea:	ed62 7a01 	vstmdb	r2!, {s15}
   2d4ee:	d1f3      	bne.n	2d4d8 <__kernel_rem_pio2f+0x40c>
   2d4f0:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   2d4f4:	2d00      	cmp	r5, #0
   2d4f6:	f04f 0000 	mov.w	r0, #0
   2d4fa:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 2d764 <__kernel_rem_pio2f+0x698>
   2d4fe:	4667      	mov	r7, ip
   2d500:	db1d      	blt.n	2d53e <__kernel_rem_pio2f+0x472>
   2d502:	4999      	ldr	r1, [pc, #612]	; (2d768 <__kernel_rem_pio2f+0x69c>)
   2d504:	4622      	mov	r2, r4
   2d506:	eeb0 7a46 	vmov.f32	s14, s12
   2d50a:	eddf 7a98 	vldr	s15, [pc, #608]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d50e:	2300      	movs	r3, #0
   2d510:	e003      	b.n	2d51a <__kernel_rem_pio2f+0x44e>
   2d512:	4283      	cmp	r3, r0
   2d514:	dc08      	bgt.n	2d528 <__kernel_rem_pio2f+0x45c>
   2d516:	ecb1 7a01 	vldmia	r1!, {s14}
   2d51a:	3301      	adds	r3, #1
   2d51c:	ecf2 6a01 	vldmia	r2!, {s13}
   2d520:	429d      	cmp	r5, r3
   2d522:	eee6 7a87 	vfma.f32	s15, s13, s14
   2d526:	daf4      	bge.n	2d512 <__kernel_rem_pio2f+0x446>
   2d528:	4558      	cmp	r0, fp
   2d52a:	ece7 7a01 	vstmia	r7!, {s15}
   2d52e:	f1a4 0404 	sub.w	r4, r4, #4
   2d532:	f100 0301 	add.w	r3, r0, #1
   2d536:	d00c      	beq.n	2d552 <__kernel_rem_pio2f+0x486>
   2d538:	2d00      	cmp	r5, #0
   2d53a:	4618      	mov	r0, r3
   2d53c:	dae1      	bge.n	2d502 <__kernel_rem_pio2f+0x436>
   2d53e:	eddf 7a8b 	vldr	s15, [pc, #556]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d542:	4558      	cmp	r0, fp
   2d544:	f1a4 0404 	sub.w	r4, r4, #4
   2d548:	f100 0301 	add.w	r3, r0, #1
   2d54c:	ece7 7a01 	vstmia	r7!, {s15}
   2d550:	d1f2      	bne.n	2d538 <__kernel_rem_pio2f+0x46c>
   2d552:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2d554:	2b03      	cmp	r3, #3
   2d556:	d823      	bhi.n	2d5a0 <__kernel_rem_pio2f+0x4d4>
   2d558:	e8df f003 	tbb	[pc, r3]
   2d55c:	449c9cae 	.word	0x449c9cae
   2d560:	eddf 7a82 	vldr	s15, [pc, #520]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d564:	4643      	mov	r3, r8
   2d566:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   2d56a:	ee37 7a67 	vsub.f32	s14, s14, s15
   2d56e:	2b00      	cmp	r3, #0
   2d570:	f040 80c0 	bne.w	2d6f4 <__kernel_rem_pio2f+0x628>
   2d574:	9b07      	ldr	r3, [sp, #28]
   2d576:	f1bb 0f00 	cmp.w	fp, #0
   2d57a:	edc3 7a00 	vstr	s15, [r3]
   2d57e:	dd0c      	ble.n	2d59a <__kernel_rem_pio2f+0x4ce>
   2d580:	aa33      	add	r2, sp, #204	; 0xcc
   2d582:	2301      	movs	r3, #1
   2d584:	3301      	adds	r3, #1
   2d586:	ecf2 7a01 	vldmia	r2!, {s15}
   2d58a:	459b      	cmp	fp, r3
   2d58c:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d590:	daf8      	bge.n	2d584 <__kernel_rem_pio2f+0x4b8>
   2d592:	4643      	mov	r3, r8
   2d594:	b10b      	cbz	r3, 2d59a <__kernel_rem_pio2f+0x4ce>
   2d596:	eeb1 7a47 	vneg.f32	s14, s14
   2d59a:	9b07      	ldr	r3, [sp, #28]
   2d59c:	ed83 7a01 	vstr	s14, [r3, #4]
   2d5a0:	ee19 3a90 	vmov	r3, s19
   2d5a4:	f003 0007 	and.w	r0, r3, #7
   2d5a8:	b05b      	add	sp, #364	; 0x16c
   2d5aa:	ecbd 8b04 	vpop	{d8-d9}
   2d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d5b2:	1e59      	subs	r1, r3, #1
   2d5b4:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   2d5b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2d5bc:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   2d5c0:	e6e1      	b.n	2d386 <__kernel_rem_pio2f+0x2ba>
   2d5c2:	ee19 2a90 	vmov	r2, s19
   2d5c6:	2b00      	cmp	r3, #0
   2d5c8:	f102 0201 	add.w	r2, r2, #1
   2d5cc:	ee09 2a90 	vmov	s19, r2
   2d5d0:	f340 80a8 	ble.w	2d724 <__kernel_rem_pio2f+0x658>
   2d5d4:	f04f 0b02 	mov.w	fp, #2
   2d5d8:	e6b6      	b.n	2d348 <__kernel_rem_pio2f+0x27c>
   2d5da:	2308      	movs	r3, #8
   2d5dc:	9308      	str	r3, [sp, #32]
   2d5de:	2300      	movs	r3, #0
   2d5e0:	9303      	str	r3, [sp, #12]
   2d5e2:	e58e      	b.n	2d102 <__kernel_rem_pio2f+0x36>
   2d5e4:	f1bb 0f00 	cmp.w	fp, #0
   2d5e8:	f340 80b5 	ble.w	2d756 <__kernel_rem_pio2f+0x68a>
   2d5ec:	ab5a      	add	r3, sp, #360	; 0x168
   2d5ee:	ea4f 028b 	mov.w	r2, fp, lsl #2
   2d5f2:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   2d5f6:	1899      	adds	r1, r3, r2
   2d5f8:	eb0c 038b 	add.w	r3, ip, fp, lsl #2
   2d5fc:	ed51 6a28 	vldr	s13, [r1, #-160]	; 0xffffff60
   2d600:	ed73 7a01 	vldmdb	r3!, {s15}
   2d604:	ee37 7aa6 	vadd.f32	s14, s15, s13
   2d608:	459c      	cmp	ip, r3
   2d60a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2d60e:	ed83 7a00 	vstr	s14, [r3]
   2d612:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d616:	eef0 6a47 	vmov.f32	s13, s14
   2d61a:	edc3 7a01 	vstr	s15, [r3, #4]
   2d61e:	d1ef      	bne.n	2d600 <__kernel_rem_pio2f+0x534>
   2d620:	f1bb 0f01 	cmp.w	fp, #1
   2d624:	f340 8097 	ble.w	2d756 <__kernel_rem_pio2f+0x68a>
   2d628:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   2d62c:	a95a      	add	r1, sp, #360	; 0x168
   2d62e:	445b      	add	r3, fp
   2d630:	440a      	add	r2, r1
   2d632:	a933      	add	r1, sp, #204	; 0xcc
   2d634:	009b      	lsls	r3, r3, #2
   2d636:	ed52 6a28 	vldr	s13, [r2, #-160]	; 0xffffff60
   2d63a:	1d1a      	adds	r2, r3, #4
   2d63c:	4462      	add	r2, ip
   2d63e:	ed72 7a01 	vldmdb	r2!, {s15}
   2d642:	ee37 7aa6 	vadd.f32	s14, s15, s13
   2d646:	4291      	cmp	r1, r2
   2d648:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2d64c:	ed82 7a00 	vstr	s14, [r2]
   2d650:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d654:	eef0 6a47 	vmov.f32	s13, s14
   2d658:	edc2 7a01 	vstr	s15, [r2, #4]
   2d65c:	d1ef      	bne.n	2d63e <__kernel_rem_pio2f+0x572>
   2d65e:	3308      	adds	r3, #8
   2d660:	f10c 0208 	add.w	r2, ip, #8
   2d664:	eddf 7a41 	vldr	s15, [pc, #260]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d668:	449c      	add	ip, r3
   2d66a:	ed3c 7a01 	vldmdb	ip!, {s14}
   2d66e:	4562      	cmp	r2, ip
   2d670:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d674:	d1f9      	bne.n	2d66a <__kernel_rem_pio2f+0x59e>
   2d676:	4643      	mov	r3, r8
   2d678:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   2d67c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   2d680:	2b00      	cmp	r3, #0
   2d682:	d141      	bne.n	2d708 <__kernel_rem_pio2f+0x63c>
   2d684:	9b07      	ldr	r3, [sp, #28]
   2d686:	edc3 6a00 	vstr	s13, [r3]
   2d68a:	ed83 7a01 	vstr	s14, [r3, #4]
   2d68e:	edc3 7a02 	vstr	s15, [r3, #8]
   2d692:	e785      	b.n	2d5a0 <__kernel_rem_pio2f+0x4d4>
   2d694:	4466      	add	r6, ip
   2d696:	eddf 7a35 	vldr	s15, [pc, #212]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d69a:	ed36 7a01 	vldmdb	r6!, {s14}
   2d69e:	45b4      	cmp	ip, r6
   2d6a0:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d6a4:	d1f9      	bne.n	2d69a <__kernel_rem_pio2f+0x5ce>
   2d6a6:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   2d6aa:	4643      	mov	r3, r8
   2d6ac:	ee37 7a67 	vsub.f32	s14, s14, s15
   2d6b0:	2b00      	cmp	r3, #0
   2d6b2:	f43f af5f 	beq.w	2d574 <__kernel_rem_pio2f+0x4a8>
   2d6b6:	e01d      	b.n	2d6f4 <__kernel_rem_pio2f+0x628>
   2d6b8:	4466      	add	r6, ip
   2d6ba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d6be:	ed36 7a01 	vldmdb	r6!, {s14}
   2d6c2:	45b4      	cmp	ip, r6
   2d6c4:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d6c8:	d1f9      	bne.n	2d6be <__kernel_rem_pio2f+0x5f2>
   2d6ca:	4643      	mov	r3, r8
   2d6cc:	b10b      	cbz	r3, 2d6d2 <__kernel_rem_pio2f+0x606>
   2d6ce:	eef1 7a67 	vneg.f32	s15, s15
   2d6d2:	9b07      	ldr	r3, [sp, #28]
   2d6d4:	edc3 7a00 	vstr	s15, [r3]
   2d6d8:	e762      	b.n	2d5a0 <__kernel_rem_pio2f+0x4d4>
   2d6da:	4613      	mov	r3, r2
   2d6dc:	3304      	adds	r3, #4
   2d6de:	e50b      	b.n	2d0f8 <__kernel_rem_pio2f+0x2c>
   2d6e0:	2000      	movs	r0, #0
   2d6e2:	e642      	b.n	2d36a <__kernel_rem_pio2f+0x29e>
   2d6e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2d6e8:	469b      	mov	fp, r3
   2d6ea:	ee10 2a10 	vmov	r2, s0
   2d6ee:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   2d6f2:	e6df      	b.n	2d4b4 <__kernel_rem_pio2f+0x3e8>
   2d6f4:	eef1 7a67 	vneg.f32	s15, s15
   2d6f8:	9b07      	ldr	r3, [sp, #28]
   2d6fa:	f1bb 0f00 	cmp.w	fp, #0
   2d6fe:	edc3 7a00 	vstr	s15, [r3]
   2d702:	f73f af3d 	bgt.w	2d580 <__kernel_rem_pio2f+0x4b4>
   2d706:	e746      	b.n	2d596 <__kernel_rem_pio2f+0x4ca>
   2d708:	eef1 6a66 	vneg.f32	s13, s13
   2d70c:	9b07      	ldr	r3, [sp, #28]
   2d70e:	eeb1 7a47 	vneg.f32	s14, s14
   2d712:	eef1 7a67 	vneg.f32	s15, s15
   2d716:	edc3 6a00 	vstr	s13, [r3]
   2d71a:	ed83 7a01 	vstr	s14, [r3, #4]
   2d71e:	edc3 7a02 	vstr	s15, [r3, #8]
   2d722:	e73d      	b.n	2d5a0 <__kernel_rem_pio2f+0x4d4>
   2d724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2d728:	f04f 0b02 	mov.w	fp, #2
   2d72c:	ee37 8ac8 	vsub.f32	s16, s15, s16
   2d730:	e591      	b.n	2d256 <__kernel_rem_pio2f+0x18a>
   2d732:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2d734:	2b03      	cmp	r3, #3
   2d736:	f63f af33 	bhi.w	2d5a0 <__kernel_rem_pio2f+0x4d4>
   2d73a:	a201      	add	r2, pc, #4	; (adr r2, 2d740 <__kernel_rem_pio2f+0x674>)
   2d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2d740:	0002d751 	.word	0x0002d751
   2d744:	0002d561 	.word	0x0002d561
   2d748:	0002d561 	.word	0x0002d561
   2d74c:	0002d5e5 	.word	0x0002d5e5
   2d750:	eddf 7a06 	vldr	s15, [pc, #24]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d754:	e7b9      	b.n	2d6ca <__kernel_rem_pio2f+0x5fe>
   2d756:	eddf 7a05 	vldr	s15, [pc, #20]	; 2d76c <__kernel_rem_pio2f+0x6a0>
   2d75a:	e78c      	b.n	2d676 <__kernel_rem_pio2f+0x5aa>
   2d75c:	3ffffffe 	.word	0x3ffffffe
   2d760:	3b800000 	.word	0x3b800000
   2d764:	3fc90000 	.word	0x3fc90000
   2d768:	00036a1c 	.word	0x00036a1c
   2d76c:	00000000 	.word	0x00000000

0002d770 <__kernel_sinf>:
   2d770:	ee10 3a10 	vmov	r3, s0
   2d774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2d778:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2d77c:	da04      	bge.n	2d788 <__kernel_sinf+0x18>
   2d77e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2d782:	ee17 3a90 	vmov	r3, s15
   2d786:	b35b      	cbz	r3, 2d7e0 <__kernel_sinf+0x70>
   2d788:	ee60 7a00 	vmul.f32	s15, s0, s0
   2d78c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2d7e4 <__kernel_sinf+0x74>
   2d790:	eddf 5a15 	vldr	s11, [pc, #84]	; 2d7e8 <__kernel_sinf+0x78>
   2d794:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2d7ec <__kernel_sinf+0x7c>
   2d798:	eee7 5a87 	vfma.f32	s11, s15, s14
   2d79c:	eddf 6a14 	vldr	s13, [pc, #80]	; 2d7f0 <__kernel_sinf+0x80>
   2d7a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 2d7f4 <__kernel_sinf+0x84>
   2d7a4:	ee20 5a27 	vmul.f32	s10, s0, s15
   2d7a8:	eea5 6aa7 	vfma.f32	s12, s11, s15
   2d7ac:	eee6 6a27 	vfma.f32	s13, s12, s15
   2d7b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2d7b4:	b930      	cbnz	r0, 2d7c4 <__kernel_sinf+0x54>
   2d7b6:	eddf 6a10 	vldr	s13, [pc, #64]	; 2d7f8 <__kernel_sinf+0x88>
   2d7ba:	eee7 6a87 	vfma.f32	s13, s15, s14
   2d7be:	eea6 0a85 	vfma.f32	s0, s13, s10
   2d7c2:	4770      	bx	lr
   2d7c4:	ee27 7a45 	vnmul.f32	s14, s14, s10
   2d7c8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2d7fc <__kernel_sinf+0x8c>
   2d7cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   2d7d0:	eea0 7a86 	vfma.f32	s14, s1, s12
   2d7d4:	eed7 0a27 	vfnms.f32	s1, s14, s15
   2d7d8:	eee5 0a26 	vfma.f32	s1, s10, s13
   2d7dc:	ee30 0a60 	vsub.f32	s0, s0, s1
   2d7e0:	4770      	bx	lr
   2d7e2:	bf00      	nop
   2d7e4:	2f2ec9d3 	.word	0x2f2ec9d3
   2d7e8:	b2d72f34 	.word	0xb2d72f34
   2d7ec:	3638ef1b 	.word	0x3638ef1b
   2d7f0:	b9500d01 	.word	0xb9500d01
   2d7f4:	3c088889 	.word	0x3c088889
   2d7f8:	be2aaaab 	.word	0xbe2aaaab
   2d7fc:	3e2aaaab 	.word	0x3e2aaaab

0002d800 <finite>:
   2d800:	ee10 3a90 	vmov	r3, s1
   2d804:	4802      	ldr	r0, [pc, #8]	; (2d810 <finite+0x10>)
   2d806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2d80a:	4418      	add	r0, r3
   2d80c:	0fc0      	lsrs	r0, r0, #31
   2d80e:	4770      	bx	lr
   2d810:	80100000 	.word	0x80100000

0002d814 <rint>:
   2d814:	ec53 2b10 	vmov	r2, r3, d0
   2d818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d81c:	f3c3 560a 	ubfx	r6, r3, #20, #11
   2d820:	b083      	sub	sp, #12
   2d822:	4619      	mov	r1, r3
   2d824:	ee10 5a10 	vmov	r5, s0
   2d828:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   2d82c:	0fdc      	lsrs	r4, r3, #31
   2d82e:	2813      	cmp	r0, #19
   2d830:	dc38      	bgt.n	2d8a4 <rint+0x90>
   2d832:	2800      	cmp	r0, #0
   2d834:	db2d      	blt.n	2d892 <rint+0x7e>
   2d836:	4e3f      	ldr	r6, [pc, #252]	; (2d934 <_flash_used+0x54>)
   2d838:	4106      	asrs	r6, r0
   2d83a:	ea03 0706 	and.w	r7, r3, r6
   2d83e:	4317      	orrs	r7, r2
   2d840:	d02b      	beq.n	2d89a <rint+0x86>
   2d842:	0876      	lsrs	r6, r6, #1
   2d844:	4033      	ands	r3, r6
   2d846:	431d      	orrs	r5, r3
   2d848:	d00b      	beq.n	2d862 <rint+0x4e>
   2d84a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2d84e:	2813      	cmp	r0, #19
   2d850:	ea21 0606 	bic.w	r6, r1, r6
   2d854:	fa43 f100 	asr.w	r1, r3, r0
   2d858:	bf0c      	ite	eq
   2d85a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   2d85e:	2500      	movne	r5, #0
   2d860:	4331      	orrs	r1, r6
   2d862:	4835      	ldr	r0, [pc, #212]	; (2d938 <_flash_used+0x58>)
   2d864:	462a      	mov	r2, r5
   2d866:	460b      	mov	r3, r1
   2d868:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   2d86c:	e9d4 4500 	ldrd	r4, r5, [r4]
   2d870:	4620      	mov	r0, r4
   2d872:	4629      	mov	r1, r5
   2d874:	f7df fa64 	bl	cd40 <__adddf3>
   2d878:	4622      	mov	r2, r4
   2d87a:	462b      	mov	r3, r5
   2d87c:	e9cd 0100 	strd	r0, r1, [sp]
   2d880:	e9dd 0100 	ldrd	r0, r1, [sp]
   2d884:	f7df fa5a 	bl	cd3c <__aeabi_dsub>
   2d888:	ec41 0b10 	vmov	d0, r0, r1
   2d88c:	b003      	add	sp, #12
   2d88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d892:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2d896:	4310      	orrs	r0, r2
   2d898:	d123      	bne.n	2d8e2 <_flash_used+0x2>
   2d89a:	ec43 2b10 	vmov	d0, r2, r3
   2d89e:	b003      	add	sp, #12
   2d8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d8a4:	2833      	cmp	r0, #51	; 0x33
   2d8a6:	dd09      	ble.n	2d8bc <rint+0xa8>
   2d8a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   2d8ac:	d1f5      	bne.n	2d89a <rint+0x86>
   2d8ae:	ee10 0a10 	vmov	r0, s0
   2d8b2:	f7df fa45 	bl	cd40 <__adddf3>
   2d8b6:	ec41 0b10 	vmov	d0, r0, r1
   2d8ba:	e7f0      	b.n	2d89e <rint+0x8a>
   2d8bc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   2d8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8c4:	40f0      	lsrs	r0, r6
   2d8c6:	4202      	tst	r2, r0
   2d8c8:	d0e7      	beq.n	2d89a <rint+0x86>
   2d8ca:	0840      	lsrs	r0, r0, #1
   2d8cc:	4202      	tst	r2, r0
   2d8ce:	d0c8      	beq.n	2d862 <rint+0x4e>
   2d8d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d8d4:	ea25 0000 	bic.w	r0, r5, r0
   2d8d8:	fa43 f606 	asr.w	r6, r3, r6
   2d8dc:	ea40 0506 	orr.w	r5, r0, r6
   2d8e0:	e7bf      	b.n	2d862 <rint+0x4e>
   2d8e2:	f3c3 0613 	ubfx	r6, r3, #0, #20
   2d8e6:	4815      	ldr	r0, [pc, #84]	; (2d93c <_flash_used+0x5c>)
   2d8e8:	4a13      	ldr	r2, [pc, #76]	; (2d938 <_flash_used+0x58>)
   2d8ea:	4335      	orrs	r5, r6
   2d8ec:	4018      	ands	r0, r3
   2d8ee:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   2d8f2:	426b      	negs	r3, r5
   2d8f4:	432b      	orrs	r3, r5
   2d8f6:	0b1b      	lsrs	r3, r3, #12
   2d8f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   2d8fc:	e9d2 6700 	ldrd	r6, r7, [r2]
   2d900:	ea43 0900 	orr.w	r9, r3, r0
   2d904:	ee10 2a10 	vmov	r2, s0
   2d908:	4630      	mov	r0, r6
   2d90a:	4639      	mov	r1, r7
   2d90c:	464b      	mov	r3, r9
   2d90e:	f7df fa17 	bl	cd40 <__adddf3>
   2d912:	463b      	mov	r3, r7
   2d914:	4632      	mov	r2, r6
   2d916:	e9cd 0100 	strd	r0, r1, [sp]
   2d91a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2d91e:	f7df fa0d 	bl	cd3c <__aeabi_dsub>
   2d922:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2d926:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   2d92a:	ec41 0b10 	vmov	d0, r0, r1
   2d92e:	b003      	add	sp, #12
   2d930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d934:	000fffff 	.word	0x000fffff
   2d938:	000358d8 	.word	0x000358d8
   2d93c:	fffe0000 	.word	0xfffe0000

0002d940 <finitef>:
   2d940:	ee10 3a10 	vmov	r3, s0
   2d944:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2d948:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   2d94c:	bfac      	ite	ge
   2d94e:	2000      	movge	r0, #0
   2d950:	2001      	movlt	r0, #1
   2d952:	4770      	bx	lr

0002d954 <nanf>:
   2d954:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2d95c <nanf+0x8>
   2d958:	4770      	bx	lr
   2d95a:	bf00      	nop
   2d95c:	7fc00000 	.word	0x7fc00000

0002d960 <rintf>:
   2d960:	eeb7 0a40 	vrintx.f32	s0, s0
   2d964:	4770      	bx	lr
   2d966:	bf00      	nop

0002d968 <scalbnf>:
   2d968:	b082      	sub	sp, #8
   2d96a:	ed8d 0a01 	vstr	s0, [sp, #4]
   2d96e:	9b01      	ldr	r3, [sp, #4]
   2d970:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2d974:	d029      	beq.n	2d9ca <scalbnf+0x62>
   2d976:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2d97a:	d222      	bcs.n	2d9c2 <scalbnf+0x5a>
   2d97c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   2d980:	d127      	bne.n	2d9d2 <scalbnf+0x6a>
   2d982:	ed9d 7a01 	vldr	s14, [sp, #4]
   2d986:	eddf 7a2d 	vldr	s15, [pc, #180]	; 2da3c <scalbnf+0xd4>
   2d98a:	4b2d      	ldr	r3, [pc, #180]	; (2da40 <scalbnf+0xd8>)
   2d98c:	ee67 7a27 	vmul.f32	s15, s14, s15
   2d990:	4298      	cmp	r0, r3
   2d992:	edcd 7a01 	vstr	s15, [sp, #4]
   2d996:	db3e      	blt.n	2da16 <scalbnf+0xae>
   2d998:	9b01      	ldr	r3, [sp, #4]
   2d99a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   2d99e:	3a19      	subs	r2, #25
   2d9a0:	4402      	add	r2, r0
   2d9a2:	2afe      	cmp	r2, #254	; 0xfe
   2d9a4:	dd19      	ble.n	2d9da <scalbnf+0x72>
   2d9a6:	9b01      	ldr	r3, [sp, #4]
   2d9a8:	ed9f 0a26 	vldr	s0, [pc, #152]	; 2da44 <scalbnf+0xdc>
   2d9ac:	2b00      	cmp	r3, #0
   2d9ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 2da48 <scalbnf+0xe0>
   2d9b2:	eef0 7a40 	vmov.f32	s15, s0
   2d9b6:	fe20 0a07 	vselge.f32	s0, s0, s14
   2d9ba:	ee20 0a27 	vmul.f32	s0, s0, s15
   2d9be:	b002      	add	sp, #8
   2d9c0:	4770      	bx	lr
   2d9c2:	ee30 0a00 	vadd.f32	s0, s0, s0
   2d9c6:	b002      	add	sp, #8
   2d9c8:	4770      	bx	lr
   2d9ca:	ed9d 0a01 	vldr	s0, [sp, #4]
   2d9ce:	b002      	add	sp, #8
   2d9d0:	4770      	bx	lr
   2d9d2:	0dd2      	lsrs	r2, r2, #23
   2d9d4:	4402      	add	r2, r0
   2d9d6:	2afe      	cmp	r2, #254	; 0xfe
   2d9d8:	dce5      	bgt.n	2d9a6 <scalbnf+0x3e>
   2d9da:	2a00      	cmp	r2, #0
   2d9dc:	dc13      	bgt.n	2da06 <scalbnf+0x9e>
   2d9de:	f112 0f16 	cmn.w	r2, #22
   2d9e2:	da1f      	bge.n	2da24 <scalbnf+0xbc>
   2d9e4:	f24c 3350 	movw	r3, #50000	; 0xc350
   2d9e8:	4298      	cmp	r0, r3
   2d9ea:	9b01      	ldr	r3, [sp, #4]
   2d9ec:	dcdc      	bgt.n	2d9a8 <scalbnf+0x40>
   2d9ee:	ed9f 0a17 	vldr	s0, [pc, #92]	; 2da4c <scalbnf+0xe4>
   2d9f2:	2b00      	cmp	r3, #0
   2d9f4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2da50 <scalbnf+0xe8>
   2d9f8:	eef0 7a40 	vmov.f32	s15, s0
   2d9fc:	fe20 0a07 	vselge.f32	s0, s0, s14
   2da00:	ee20 0a27 	vmul.f32	s0, s0, s15
   2da04:	e7df      	b.n	2d9c6 <scalbnf+0x5e>
   2da06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2da0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2da0e:	ee00 3a10 	vmov	s0, r3
   2da12:	b002      	add	sp, #8
   2da14:	4770      	bx	lr
   2da16:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 2da4c <scalbnf+0xe4>
   2da1a:	eddd 7a01 	vldr	s15, [sp, #4]
   2da1e:	ee27 0a80 	vmul.f32	s0, s15, s0
   2da22:	e7d0      	b.n	2d9c6 <scalbnf+0x5e>
   2da24:	3219      	adds	r2, #25
   2da26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2da2a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 2da54 <scalbnf+0xec>
   2da2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2da32:	ee07 3a10 	vmov	s14, r3
   2da36:	ee27 0a27 	vmul.f32	s0, s14, s15
   2da3a:	e7c4      	b.n	2d9c6 <scalbnf+0x5e>
   2da3c:	4c000000 	.word	0x4c000000
   2da40:	ffff3cb0 	.word	0xffff3cb0
   2da44:	7149f2ca 	.word	0x7149f2ca
   2da48:	f149f2ca 	.word	0xf149f2ca
   2da4c:	0da24260 	.word	0x0da24260
   2da50:	8da24260 	.word	0x8da24260
   2da54:	33000000 	.word	0x33000000

0002da58 <calloc>:
   2da58:	4b02      	ldr	r3, [pc, #8]	; (2da64 <calloc+0xc>)
   2da5a:	460a      	mov	r2, r1
   2da5c:	4601      	mov	r1, r0
   2da5e:	6818      	ldr	r0, [r3, #0]
   2da60:	f007 b820 	b.w	34aa4 <_calloc_r>
   2da64:	200201e4 	.word	0x200201e4

0002da68 <malloc>:
   2da68:	4b02      	ldr	r3, [pc, #8]	; (2da74 <malloc+0xc>)
   2da6a:	4601      	mov	r1, r0
   2da6c:	6818      	ldr	r0, [r3, #0]
   2da6e:	f000 b859 	b.w	2db24 <_malloc_r>
   2da72:	bf00      	nop
   2da74:	200201e4 	.word	0x200201e4

0002da78 <free>:
   2da78:	4b02      	ldr	r3, [pc, #8]	; (2da84 <free+0xc>)
   2da7a:	4601      	mov	r1, r0
   2da7c:	6818      	ldr	r0, [r3, #0]
   2da7e:	f000 b803 	b.w	2da88 <_free_r>
   2da82:	bf00      	nop
   2da84:	200201e4 	.word	0x200201e4

0002da88 <_free_r>:
   2da88:	b538      	push	{r3, r4, r5, lr}
   2da8a:	4605      	mov	r5, r0
   2da8c:	2900      	cmp	r1, #0
   2da8e:	d045      	beq.n	2db1c <_free_r+0x94>
   2da90:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2da94:	1f0c      	subs	r4, r1, #4
   2da96:	2b00      	cmp	r3, #0
   2da98:	bfb8      	it	lt
   2da9a:	18e4      	addlt	r4, r4, r3
   2da9c:	f000 fd66 	bl	2e56c <__malloc_lock>
   2daa0:	4a1f      	ldr	r2, [pc, #124]	; (2db20 <_free_r+0x98>)
   2daa2:	6813      	ldr	r3, [r2, #0]
   2daa4:	4610      	mov	r0, r2
   2daa6:	b933      	cbnz	r3, 2dab6 <_free_r+0x2e>
   2daa8:	6063      	str	r3, [r4, #4]
   2daaa:	6014      	str	r4, [r2, #0]
   2daac:	4628      	mov	r0, r5
   2daae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2dab2:	f000 bd61 	b.w	2e578 <__malloc_unlock>
   2dab6:	42a3      	cmp	r3, r4
   2dab8:	d90c      	bls.n	2dad4 <_free_r+0x4c>
   2daba:	6821      	ldr	r1, [r4, #0]
   2dabc:	1862      	adds	r2, r4, r1
   2dabe:	4293      	cmp	r3, r2
   2dac0:	bf02      	ittt	eq
   2dac2:	681a      	ldreq	r2, [r3, #0]
   2dac4:	685b      	ldreq	r3, [r3, #4]
   2dac6:	1852      	addeq	r2, r2, r1
   2dac8:	6063      	str	r3, [r4, #4]
   2daca:	bf08      	it	eq
   2dacc:	6022      	streq	r2, [r4, #0]
   2dace:	6004      	str	r4, [r0, #0]
   2dad0:	e7ec      	b.n	2daac <_free_r+0x24>
   2dad2:	4613      	mov	r3, r2
   2dad4:	685a      	ldr	r2, [r3, #4]
   2dad6:	b10a      	cbz	r2, 2dadc <_free_r+0x54>
   2dad8:	42a2      	cmp	r2, r4
   2dada:	d9fa      	bls.n	2dad2 <_free_r+0x4a>
   2dadc:	6819      	ldr	r1, [r3, #0]
   2dade:	1858      	adds	r0, r3, r1
   2dae0:	42a0      	cmp	r0, r4
   2dae2:	d10b      	bne.n	2dafc <_free_r+0x74>
   2dae4:	6820      	ldr	r0, [r4, #0]
   2dae6:	4401      	add	r1, r0
   2dae8:	1858      	adds	r0, r3, r1
   2daea:	6019      	str	r1, [r3, #0]
   2daec:	4282      	cmp	r2, r0
   2daee:	d1dd      	bne.n	2daac <_free_r+0x24>
   2daf0:	6810      	ldr	r0, [r2, #0]
   2daf2:	6852      	ldr	r2, [r2, #4]
   2daf4:	4401      	add	r1, r0
   2daf6:	605a      	str	r2, [r3, #4]
   2daf8:	6019      	str	r1, [r3, #0]
   2dafa:	e7d7      	b.n	2daac <_free_r+0x24>
   2dafc:	d902      	bls.n	2db04 <_free_r+0x7c>
   2dafe:	230c      	movs	r3, #12
   2db00:	602b      	str	r3, [r5, #0]
   2db02:	e7d3      	b.n	2daac <_free_r+0x24>
   2db04:	6820      	ldr	r0, [r4, #0]
   2db06:	1821      	adds	r1, r4, r0
   2db08:	428a      	cmp	r2, r1
   2db0a:	bf02      	ittt	eq
   2db0c:	6811      	ldreq	r1, [r2, #0]
   2db0e:	6852      	ldreq	r2, [r2, #4]
   2db10:	1809      	addeq	r1, r1, r0
   2db12:	6062      	str	r2, [r4, #4]
   2db14:	bf08      	it	eq
   2db16:	6021      	streq	r1, [r4, #0]
   2db18:	605c      	str	r4, [r3, #4]
   2db1a:	e7c7      	b.n	2daac <_free_r+0x24>
   2db1c:	bd38      	pop	{r3, r4, r5, pc}
   2db1e:	bf00      	nop
   2db20:	20027544 	.word	0x20027544

0002db24 <_malloc_r>:
   2db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db26:	1ccd      	adds	r5, r1, #3
   2db28:	4606      	mov	r6, r0
   2db2a:	f025 0503 	bic.w	r5, r5, #3
   2db2e:	3508      	adds	r5, #8
   2db30:	2d0c      	cmp	r5, #12
   2db32:	bf38      	it	cc
   2db34:	250c      	movcc	r5, #12
   2db36:	2d00      	cmp	r5, #0
   2db38:	db01      	blt.n	2db3e <_malloc_r+0x1a>
   2db3a:	42a9      	cmp	r1, r5
   2db3c:	d903      	bls.n	2db46 <_malloc_r+0x22>
   2db3e:	230c      	movs	r3, #12
   2db40:	6033      	str	r3, [r6, #0]
   2db42:	2000      	movs	r0, #0
   2db44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2db46:	f000 fd11 	bl	2e56c <__malloc_lock>
   2db4a:	4921      	ldr	r1, [pc, #132]	; (2dbd0 <_malloc_r+0xac>)
   2db4c:	680a      	ldr	r2, [r1, #0]
   2db4e:	4614      	mov	r4, r2
   2db50:	b99c      	cbnz	r4, 2db7a <_malloc_r+0x56>
   2db52:	4f20      	ldr	r7, [pc, #128]	; (2dbd4 <_malloc_r+0xb0>)
   2db54:	683b      	ldr	r3, [r7, #0]
   2db56:	b923      	cbnz	r3, 2db62 <_malloc_r+0x3e>
   2db58:	4621      	mov	r1, r4
   2db5a:	4630      	mov	r0, r6
   2db5c:	f000 fb7a 	bl	2e254 <_sbrk_r>
   2db60:	6038      	str	r0, [r7, #0]
   2db62:	4629      	mov	r1, r5
   2db64:	4630      	mov	r0, r6
   2db66:	f000 fb75 	bl	2e254 <_sbrk_r>
   2db6a:	1c43      	adds	r3, r0, #1
   2db6c:	d123      	bne.n	2dbb6 <_malloc_r+0x92>
   2db6e:	230c      	movs	r3, #12
   2db70:	4630      	mov	r0, r6
   2db72:	6033      	str	r3, [r6, #0]
   2db74:	f000 fd00 	bl	2e578 <__malloc_unlock>
   2db78:	e7e3      	b.n	2db42 <_malloc_r+0x1e>
   2db7a:	6823      	ldr	r3, [r4, #0]
   2db7c:	1b5b      	subs	r3, r3, r5
   2db7e:	d417      	bmi.n	2dbb0 <_malloc_r+0x8c>
   2db80:	2b0b      	cmp	r3, #11
   2db82:	d903      	bls.n	2db8c <_malloc_r+0x68>
   2db84:	6023      	str	r3, [r4, #0]
   2db86:	441c      	add	r4, r3
   2db88:	6025      	str	r5, [r4, #0]
   2db8a:	e004      	b.n	2db96 <_malloc_r+0x72>
   2db8c:	6863      	ldr	r3, [r4, #4]
   2db8e:	42a2      	cmp	r2, r4
   2db90:	bf0c      	ite	eq
   2db92:	600b      	streq	r3, [r1, #0]
   2db94:	6053      	strne	r3, [r2, #4]
   2db96:	4630      	mov	r0, r6
   2db98:	f000 fcee 	bl	2e578 <__malloc_unlock>
   2db9c:	f104 000b 	add.w	r0, r4, #11
   2dba0:	1d23      	adds	r3, r4, #4
   2dba2:	f020 0007 	bic.w	r0, r0, #7
   2dba6:	1ac2      	subs	r2, r0, r3
   2dba8:	d0cc      	beq.n	2db44 <_malloc_r+0x20>
   2dbaa:	1a1b      	subs	r3, r3, r0
   2dbac:	50a3      	str	r3, [r4, r2]
   2dbae:	e7c9      	b.n	2db44 <_malloc_r+0x20>
   2dbb0:	4622      	mov	r2, r4
   2dbb2:	6864      	ldr	r4, [r4, #4]
   2dbb4:	e7cc      	b.n	2db50 <_malloc_r+0x2c>
   2dbb6:	1cc4      	adds	r4, r0, #3
   2dbb8:	f024 0403 	bic.w	r4, r4, #3
   2dbbc:	42a0      	cmp	r0, r4
   2dbbe:	d0e3      	beq.n	2db88 <_malloc_r+0x64>
   2dbc0:	1a21      	subs	r1, r4, r0
   2dbc2:	4630      	mov	r0, r6
   2dbc4:	f000 fb46 	bl	2e254 <_sbrk_r>
   2dbc8:	3001      	adds	r0, #1
   2dbca:	d1dd      	bne.n	2db88 <_malloc_r+0x64>
   2dbcc:	e7cf      	b.n	2db6e <_malloc_r+0x4a>
   2dbce:	bf00      	nop
   2dbd0:	20027544 	.word	0x20027544
   2dbd4:	20027548 	.word	0x20027548

0002dbd8 <_printf_float>:
   2dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dbdc:	b08d      	sub	sp, #52	; 0x34
   2dbde:	460c      	mov	r4, r1
   2dbe0:	4616      	mov	r6, r2
   2dbe2:	461f      	mov	r7, r3
   2dbe4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2dbe8:	4605      	mov	r5, r0
   2dbea:	f000 fcbb 	bl	2e564 <_localeconv_r>
   2dbee:	6803      	ldr	r3, [r0, #0]
   2dbf0:	4618      	mov	r0, r3
   2dbf2:	9306      	str	r3, [sp, #24]
   2dbf4:	f7e4 fa44 	bl	12080 <strlen>
   2dbf8:	2300      	movs	r3, #0
   2dbfa:	9007      	str	r0, [sp, #28]
   2dbfc:	930a      	str	r3, [sp, #40]	; 0x28
   2dbfe:	f8d8 3000 	ldr.w	r3, [r8]
   2dc02:	f894 a018 	ldrb.w	sl, [r4, #24]
   2dc06:	3307      	adds	r3, #7
   2dc08:	f8d4 b000 	ldr.w	fp, [r4]
   2dc0c:	f023 0307 	bic.w	r3, r3, #7
   2dc10:	f103 0208 	add.w	r2, r3, #8
   2dc14:	f8c8 2000 	str.w	r2, [r8]
   2dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
   2dc1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2dc20:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   2dc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dc28:	ed8d 7b04 	vstr	d7, [sp, #16]
   2dc2c:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   2dc30:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   2dc34:	4640      	mov	r0, r8
   2dc36:	4ba6      	ldr	r3, [pc, #664]	; (2ded0 <_printf_float+0x2f8>)
   2dc38:	4649      	mov	r1, r9
   2dc3a:	f7e4 f89d 	bl	11d78 <__aeabi_dcmpun>
   2dc3e:	bb70      	cbnz	r0, 2dc9e <_printf_float+0xc6>
   2dc40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dc44:	4ba2      	ldr	r3, [pc, #648]	; (2ded0 <_printf_float+0x2f8>)
   2dc46:	4640      	mov	r0, r8
   2dc48:	4649      	mov	r1, r9
   2dc4a:	f7df fcab 	bl	d5a4 <__aeabi_dcmple>
   2dc4e:	bb30      	cbnz	r0, 2dc9e <_printf_float+0xc6>
   2dc50:	2200      	movs	r2, #0
   2dc52:	2300      	movs	r3, #0
   2dc54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2dc58:	f7df fc9a 	bl	d590 <__aeabi_dcmplt>
   2dc5c:	b110      	cbz	r0, 2dc64 <_printf_float+0x8c>
   2dc5e:	232d      	movs	r3, #45	; 0x2d
   2dc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2dc64:	4a9b      	ldr	r2, [pc, #620]	; (2ded4 <_printf_float+0x2fc>)
   2dc66:	4b9c      	ldr	r3, [pc, #624]	; (2ded8 <_printf_float+0x300>)
   2dc68:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2dc6c:	bf94      	ite	ls
   2dc6e:	4690      	movls	r8, r2
   2dc70:	4698      	movhi	r8, r3
   2dc72:	f04f 0900 	mov.w	r9, #0
   2dc76:	2303      	movs	r3, #3
   2dc78:	f02b 0204 	bic.w	r2, fp, #4
   2dc7c:	6123      	str	r3, [r4, #16]
   2dc7e:	6022      	str	r2, [r4, #0]
   2dc80:	9700      	str	r7, [sp, #0]
   2dc82:	4633      	mov	r3, r6
   2dc84:	aa0b      	add	r2, sp, #44	; 0x2c
   2dc86:	4621      	mov	r1, r4
   2dc88:	4628      	mov	r0, r5
   2dc8a:	f006 ffa9 	bl	34be0 <_printf_common>
   2dc8e:	3001      	adds	r0, #1
   2dc90:	f040 808c 	bne.w	2ddac <_printf_float+0x1d4>
   2dc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dc98:	b00d      	add	sp, #52	; 0x34
   2dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2dca2:	4610      	mov	r0, r2
   2dca4:	4619      	mov	r1, r3
   2dca6:	f7e4 f867 	bl	11d78 <__aeabi_dcmpun>
   2dcaa:	b140      	cbz	r0, 2dcbe <_printf_float+0xe6>
   2dcac:	9b05      	ldr	r3, [sp, #20]
   2dcae:	4a8b      	ldr	r2, [pc, #556]	; (2dedc <_printf_float+0x304>)
   2dcb0:	2b00      	cmp	r3, #0
   2dcb2:	bfbc      	itt	lt
   2dcb4:	232d      	movlt	r3, #45	; 0x2d
   2dcb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2dcba:	4b89      	ldr	r3, [pc, #548]	; (2dee0 <_printf_float+0x308>)
   2dcbc:	e7d4      	b.n	2dc68 <_printf_float+0x90>
   2dcbe:	6863      	ldr	r3, [r4, #4]
   2dcc0:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   2dcc4:	1c5a      	adds	r2, r3, #1
   2dcc6:	d13e      	bne.n	2dd46 <_printf_float+0x16e>
   2dcc8:	2306      	movs	r3, #6
   2dcca:	6063      	str	r3, [r4, #4]
   2dccc:	2300      	movs	r3, #0
   2dcce:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   2dcd2:	6861      	ldr	r1, [r4, #4]
   2dcd4:	4628      	mov	r0, r5
   2dcd6:	9303      	str	r3, [sp, #12]
   2dcd8:	ab0a      	add	r3, sp, #40	; 0x28
   2dcda:	6022      	str	r2, [r4, #0]
   2dcdc:	e9cd a301 	strd	sl, r3, [sp, #4]
   2dce0:	ab09      	add	r3, sp, #36	; 0x24
   2dce2:	ed9d 0b04 	vldr	d0, [sp, #16]
   2dce6:	9300      	str	r3, [sp, #0]
   2dce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2dcec:	f006 fee8 	bl	34ac0 <__cvt>
   2dcf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2dcf4:	4680      	mov	r8, r0
   2dcf6:	9909      	ldr	r1, [sp, #36]	; 0x24
   2dcf8:	d108      	bne.n	2dd0c <_printf_float+0x134>
   2dcfa:	1cc8      	adds	r0, r1, #3
   2dcfc:	db02      	blt.n	2dd04 <_printf_float+0x12c>
   2dcfe:	6863      	ldr	r3, [r4, #4]
   2dd00:	4299      	cmp	r1, r3
   2dd02:	dd41      	ble.n	2dd88 <_printf_float+0x1b0>
   2dd04:	f1aa 0a02 	sub.w	sl, sl, #2
   2dd08:	fa5f fa8a 	uxtb.w	sl, sl
   2dd0c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2dd10:	d820      	bhi.n	2dd54 <_printf_float+0x17c>
   2dd12:	3901      	subs	r1, #1
   2dd14:	4652      	mov	r2, sl
   2dd16:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2dd1a:	9109      	str	r1, [sp, #36]	; 0x24
   2dd1c:	f006 ff2d 	bl	34b7a <__exponent>
   2dd20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2dd22:	4681      	mov	r9, r0
   2dd24:	1813      	adds	r3, r2, r0
   2dd26:	2a01      	cmp	r2, #1
   2dd28:	6123      	str	r3, [r4, #16]
   2dd2a:	dc02      	bgt.n	2dd32 <_printf_float+0x15a>
   2dd2c:	6822      	ldr	r2, [r4, #0]
   2dd2e:	07d2      	lsls	r2, r2, #31
   2dd30:	d501      	bpl.n	2dd36 <_printf_float+0x15e>
   2dd32:	3301      	adds	r3, #1
   2dd34:	6123      	str	r3, [r4, #16]
   2dd36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2dd3a:	2b00      	cmp	r3, #0
   2dd3c:	d0a0      	beq.n	2dc80 <_printf_float+0xa8>
   2dd3e:	232d      	movs	r3, #45	; 0x2d
   2dd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2dd44:	e79c      	b.n	2dc80 <_printf_float+0xa8>
   2dd46:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2dd4a:	d1bf      	bne.n	2dccc <_printf_float+0xf4>
   2dd4c:	2b00      	cmp	r3, #0
   2dd4e:	d1bd      	bne.n	2dccc <_printf_float+0xf4>
   2dd50:	2301      	movs	r3, #1
   2dd52:	e7ba      	b.n	2dcca <_printf_float+0xf2>
   2dd54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2dd58:	d118      	bne.n	2dd8c <_printf_float+0x1b4>
   2dd5a:	2900      	cmp	r1, #0
   2dd5c:	6863      	ldr	r3, [r4, #4]
   2dd5e:	dd0b      	ble.n	2dd78 <_printf_float+0x1a0>
   2dd60:	6121      	str	r1, [r4, #16]
   2dd62:	b913      	cbnz	r3, 2dd6a <_printf_float+0x192>
   2dd64:	6822      	ldr	r2, [r4, #0]
   2dd66:	07d0      	lsls	r0, r2, #31
   2dd68:	d502      	bpl.n	2dd70 <_printf_float+0x198>
   2dd6a:	3301      	adds	r3, #1
   2dd6c:	440b      	add	r3, r1
   2dd6e:	6123      	str	r3, [r4, #16]
   2dd70:	65a1      	str	r1, [r4, #88]	; 0x58
   2dd72:	f04f 0900 	mov.w	r9, #0
   2dd76:	e7de      	b.n	2dd36 <_printf_float+0x15e>
   2dd78:	b913      	cbnz	r3, 2dd80 <_printf_float+0x1a8>
   2dd7a:	6822      	ldr	r2, [r4, #0]
   2dd7c:	07d2      	lsls	r2, r2, #31
   2dd7e:	d501      	bpl.n	2dd84 <_printf_float+0x1ac>
   2dd80:	3302      	adds	r3, #2
   2dd82:	e7f4      	b.n	2dd6e <_printf_float+0x196>
   2dd84:	2301      	movs	r3, #1
   2dd86:	e7f2      	b.n	2dd6e <_printf_float+0x196>
   2dd88:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2dd8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dd8e:	4299      	cmp	r1, r3
   2dd90:	db05      	blt.n	2dd9e <_printf_float+0x1c6>
   2dd92:	6823      	ldr	r3, [r4, #0]
   2dd94:	6121      	str	r1, [r4, #16]
   2dd96:	07d8      	lsls	r0, r3, #31
   2dd98:	d5ea      	bpl.n	2dd70 <_printf_float+0x198>
   2dd9a:	1c4b      	adds	r3, r1, #1
   2dd9c:	e7e7      	b.n	2dd6e <_printf_float+0x196>
   2dd9e:	2900      	cmp	r1, #0
   2dda0:	bfd4      	ite	le
   2dda2:	f1c1 0202 	rsble	r2, r1, #2
   2dda6:	2201      	movgt	r2, #1
   2dda8:	4413      	add	r3, r2
   2ddaa:	e7e0      	b.n	2dd6e <_printf_float+0x196>
   2ddac:	6823      	ldr	r3, [r4, #0]
   2ddae:	055a      	lsls	r2, r3, #21
   2ddb0:	d407      	bmi.n	2ddc2 <_printf_float+0x1ea>
   2ddb2:	6923      	ldr	r3, [r4, #16]
   2ddb4:	4642      	mov	r2, r8
   2ddb6:	4631      	mov	r1, r6
   2ddb8:	4628      	mov	r0, r5
   2ddba:	47b8      	blx	r7
   2ddbc:	3001      	adds	r0, #1
   2ddbe:	d12b      	bne.n	2de18 <_printf_float+0x240>
   2ddc0:	e768      	b.n	2dc94 <_printf_float+0xbc>
   2ddc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2ddc6:	f240 80dc 	bls.w	2df82 <_printf_float+0x3aa>
   2ddca:	2200      	movs	r2, #0
   2ddcc:	2300      	movs	r3, #0
   2ddce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2ddd2:	f7df fbd3 	bl	d57c <__aeabi_dcmpeq>
   2ddd6:	2800      	cmp	r0, #0
   2ddd8:	d033      	beq.n	2de42 <_printf_float+0x26a>
   2ddda:	2301      	movs	r3, #1
   2dddc:	4a41      	ldr	r2, [pc, #260]	; (2dee4 <_printf_float+0x30c>)
   2ddde:	4631      	mov	r1, r6
   2dde0:	4628      	mov	r0, r5
   2dde2:	47b8      	blx	r7
   2dde4:	3001      	adds	r0, #1
   2dde6:	f43f af55 	beq.w	2dc94 <_printf_float+0xbc>
   2ddea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2ddee:	429a      	cmp	r2, r3
   2ddf0:	db02      	blt.n	2ddf8 <_printf_float+0x220>
   2ddf2:	6823      	ldr	r3, [r4, #0]
   2ddf4:	07d8      	lsls	r0, r3, #31
   2ddf6:	d50f      	bpl.n	2de18 <_printf_float+0x240>
   2ddf8:	4631      	mov	r1, r6
   2ddfa:	4628      	mov	r0, r5
   2ddfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2de00:	47b8      	blx	r7
   2de02:	3001      	adds	r0, #1
   2de04:	f43f af46 	beq.w	2dc94 <_printf_float+0xbc>
   2de08:	f04f 0800 	mov.w	r8, #0
   2de0c:	f104 091a 	add.w	r9, r4, #26
   2de10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2de12:	3b01      	subs	r3, #1
   2de14:	4543      	cmp	r3, r8
   2de16:	dc09      	bgt.n	2de2c <_printf_float+0x254>
   2de18:	6823      	ldr	r3, [r4, #0]
   2de1a:	079b      	lsls	r3, r3, #30
   2de1c:	f100 8101 	bmi.w	2e022 <_printf_float+0x44a>
   2de20:	68e0      	ldr	r0, [r4, #12]
   2de22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2de24:	4298      	cmp	r0, r3
   2de26:	bfb8      	it	lt
   2de28:	4618      	movlt	r0, r3
   2de2a:	e735      	b.n	2dc98 <_printf_float+0xc0>
   2de2c:	2301      	movs	r3, #1
   2de2e:	464a      	mov	r2, r9
   2de30:	4631      	mov	r1, r6
   2de32:	4628      	mov	r0, r5
   2de34:	47b8      	blx	r7
   2de36:	3001      	adds	r0, #1
   2de38:	f43f af2c 	beq.w	2dc94 <_printf_float+0xbc>
   2de3c:	f108 0801 	add.w	r8, r8, #1
   2de40:	e7e6      	b.n	2de10 <_printf_float+0x238>
   2de42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2de44:	2b00      	cmp	r3, #0
   2de46:	dc2b      	bgt.n	2dea0 <_printf_float+0x2c8>
   2de48:	2301      	movs	r3, #1
   2de4a:	4a26      	ldr	r2, [pc, #152]	; (2dee4 <_printf_float+0x30c>)
   2de4c:	4631      	mov	r1, r6
   2de4e:	4628      	mov	r0, r5
   2de50:	47b8      	blx	r7
   2de52:	3001      	adds	r0, #1
   2de54:	f43f af1e 	beq.w	2dc94 <_printf_float+0xbc>
   2de58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2de5c:	4313      	orrs	r3, r2
   2de5e:	d102      	bne.n	2de66 <_printf_float+0x28e>
   2de60:	6823      	ldr	r3, [r4, #0]
   2de62:	07d9      	lsls	r1, r3, #31
   2de64:	d5d8      	bpl.n	2de18 <_printf_float+0x240>
   2de66:	4631      	mov	r1, r6
   2de68:	4628      	mov	r0, r5
   2de6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2de6e:	47b8      	blx	r7
   2de70:	3001      	adds	r0, #1
   2de72:	f43f af0f 	beq.w	2dc94 <_printf_float+0xbc>
   2de76:	f04f 0900 	mov.w	r9, #0
   2de7a:	f104 0a1a 	add.w	sl, r4, #26
   2de7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2de80:	425b      	negs	r3, r3
   2de82:	454b      	cmp	r3, r9
   2de84:	dc01      	bgt.n	2de8a <_printf_float+0x2b2>
   2de86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2de88:	e794      	b.n	2ddb4 <_printf_float+0x1dc>
   2de8a:	2301      	movs	r3, #1
   2de8c:	4652      	mov	r2, sl
   2de8e:	4631      	mov	r1, r6
   2de90:	4628      	mov	r0, r5
   2de92:	47b8      	blx	r7
   2de94:	3001      	adds	r0, #1
   2de96:	f43f aefd 	beq.w	2dc94 <_printf_float+0xbc>
   2de9a:	f109 0901 	add.w	r9, r9, #1
   2de9e:	e7ee      	b.n	2de7e <_printf_float+0x2a6>
   2dea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2dea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2dea4:	429a      	cmp	r2, r3
   2dea6:	bfa8      	it	ge
   2dea8:	461a      	movge	r2, r3
   2deaa:	2a00      	cmp	r2, #0
   2deac:	4691      	mov	r9, r2
   2deae:	dd07      	ble.n	2dec0 <_printf_float+0x2e8>
   2deb0:	4613      	mov	r3, r2
   2deb2:	4631      	mov	r1, r6
   2deb4:	4642      	mov	r2, r8
   2deb6:	4628      	mov	r0, r5
   2deb8:	47b8      	blx	r7
   2deba:	3001      	adds	r0, #1
   2debc:	f43f aeea 	beq.w	2dc94 <_printf_float+0xbc>
   2dec0:	f104 031a 	add.w	r3, r4, #26
   2dec4:	f04f 0b00 	mov.w	fp, #0
   2dec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2decc:	9304      	str	r3, [sp, #16]
   2dece:	e015      	b.n	2defc <_printf_float+0x324>
   2ded0:	7fefffff 	.word	0x7fefffff
   2ded4:	00038ff8 	.word	0x00038ff8
   2ded8:	00038ffc 	.word	0x00038ffc
   2dedc:	00039000 	.word	0x00039000
   2dee0:	00039004 	.word	0x00039004
   2dee4:	00038ae7 	.word	0x00038ae7
   2dee8:	2301      	movs	r3, #1
   2deea:	9a04      	ldr	r2, [sp, #16]
   2deec:	4631      	mov	r1, r6
   2deee:	4628      	mov	r0, r5
   2def0:	47b8      	blx	r7
   2def2:	3001      	adds	r0, #1
   2def4:	f43f aece 	beq.w	2dc94 <_printf_float+0xbc>
   2def8:	f10b 0b01 	add.w	fp, fp, #1
   2defc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2df00:	ebaa 0309 	sub.w	r3, sl, r9
   2df04:	455b      	cmp	r3, fp
   2df06:	dcef      	bgt.n	2dee8 <_printf_float+0x310>
   2df08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2df0c:	429a      	cmp	r2, r3
   2df0e:	db1b      	blt.n	2df48 <_printf_float+0x370>
   2df10:	6823      	ldr	r3, [r4, #0]
   2df12:	07da      	lsls	r2, r3, #31
   2df14:	d418      	bmi.n	2df48 <_printf_float+0x370>
   2df16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2df1a:	4592      	cmp	sl, r2
   2df1c:	db1c      	blt.n	2df58 <_printf_float+0x380>
   2df1e:	eba3 090a 	sub.w	r9, r3, sl
   2df22:	f1b9 0f00 	cmp.w	r9, #0
   2df26:	dd08      	ble.n	2df3a <_printf_float+0x362>
   2df28:	464b      	mov	r3, r9
   2df2a:	eb08 020a 	add.w	r2, r8, sl
   2df2e:	4631      	mov	r1, r6
   2df30:	4628      	mov	r0, r5
   2df32:	47b8      	blx	r7
   2df34:	3001      	adds	r0, #1
   2df36:	f43f aead 	beq.w	2dc94 <_printf_float+0xbc>
   2df3a:	f04f 0800 	mov.w	r8, #0
   2df3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2df42:	f104 0a1a 	add.w	sl, r4, #26
   2df46:	e014      	b.n	2df72 <_printf_float+0x39a>
   2df48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2df4c:	4631      	mov	r1, r6
   2df4e:	4628      	mov	r0, r5
   2df50:	47b8      	blx	r7
   2df52:	3001      	adds	r0, #1
   2df54:	d1df      	bne.n	2df16 <_printf_float+0x33e>
   2df56:	e69d      	b.n	2dc94 <_printf_float+0xbc>
   2df58:	eba3 0902 	sub.w	r9, r3, r2
   2df5c:	e7e1      	b.n	2df22 <_printf_float+0x34a>
   2df5e:	2301      	movs	r3, #1
   2df60:	4652      	mov	r2, sl
   2df62:	4631      	mov	r1, r6
   2df64:	4628      	mov	r0, r5
   2df66:	47b8      	blx	r7
   2df68:	3001      	adds	r0, #1
   2df6a:	f43f ae93 	beq.w	2dc94 <_printf_float+0xbc>
   2df6e:	f108 0801 	add.w	r8, r8, #1
   2df72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2df76:	1a9b      	subs	r3, r3, r2
   2df78:	eba3 0309 	sub.w	r3, r3, r9
   2df7c:	4543      	cmp	r3, r8
   2df7e:	dcee      	bgt.n	2df5e <_printf_float+0x386>
   2df80:	e74a      	b.n	2de18 <_printf_float+0x240>
   2df82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2df84:	2a01      	cmp	r2, #1
   2df86:	dc01      	bgt.n	2df8c <_printf_float+0x3b4>
   2df88:	07db      	lsls	r3, r3, #31
   2df8a:	d537      	bpl.n	2dffc <_printf_float+0x424>
   2df8c:	2301      	movs	r3, #1
   2df8e:	4642      	mov	r2, r8
   2df90:	4631      	mov	r1, r6
   2df92:	4628      	mov	r0, r5
   2df94:	47b8      	blx	r7
   2df96:	3001      	adds	r0, #1
   2df98:	f43f ae7c 	beq.w	2dc94 <_printf_float+0xbc>
   2df9c:	4631      	mov	r1, r6
   2df9e:	4628      	mov	r0, r5
   2dfa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2dfa4:	47b8      	blx	r7
   2dfa6:	3001      	adds	r0, #1
   2dfa8:	f43f ae74 	beq.w	2dc94 <_printf_float+0xbc>
   2dfac:	2200      	movs	r2, #0
   2dfae:	2300      	movs	r3, #0
   2dfb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2dfb4:	f7df fae2 	bl	d57c <__aeabi_dcmpeq>
   2dfb8:	b9d8      	cbnz	r0, 2dff2 <_printf_float+0x41a>
   2dfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dfbc:	f108 0201 	add.w	r2, r8, #1
   2dfc0:	3b01      	subs	r3, #1
   2dfc2:	4631      	mov	r1, r6
   2dfc4:	4628      	mov	r0, r5
   2dfc6:	47b8      	blx	r7
   2dfc8:	3001      	adds	r0, #1
   2dfca:	d10e      	bne.n	2dfea <_printf_float+0x412>
   2dfcc:	e662      	b.n	2dc94 <_printf_float+0xbc>
   2dfce:	2301      	movs	r3, #1
   2dfd0:	4652      	mov	r2, sl
   2dfd2:	4631      	mov	r1, r6
   2dfd4:	4628      	mov	r0, r5
   2dfd6:	47b8      	blx	r7
   2dfd8:	3001      	adds	r0, #1
   2dfda:	f43f ae5b 	beq.w	2dc94 <_printf_float+0xbc>
   2dfde:	f108 0801 	add.w	r8, r8, #1
   2dfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dfe4:	3b01      	subs	r3, #1
   2dfe6:	4543      	cmp	r3, r8
   2dfe8:	dcf1      	bgt.n	2dfce <_printf_float+0x3f6>
   2dfea:	464b      	mov	r3, r9
   2dfec:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2dff0:	e6e1      	b.n	2ddb6 <_printf_float+0x1de>
   2dff2:	f04f 0800 	mov.w	r8, #0
   2dff6:	f104 0a1a 	add.w	sl, r4, #26
   2dffa:	e7f2      	b.n	2dfe2 <_printf_float+0x40a>
   2dffc:	2301      	movs	r3, #1
   2dffe:	4642      	mov	r2, r8
   2e000:	e7df      	b.n	2dfc2 <_printf_float+0x3ea>
   2e002:	2301      	movs	r3, #1
   2e004:	464a      	mov	r2, r9
   2e006:	4631      	mov	r1, r6
   2e008:	4628      	mov	r0, r5
   2e00a:	47b8      	blx	r7
   2e00c:	3001      	adds	r0, #1
   2e00e:	f43f ae41 	beq.w	2dc94 <_printf_float+0xbc>
   2e012:	f108 0801 	add.w	r8, r8, #1
   2e016:	68e3      	ldr	r3, [r4, #12]
   2e018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2e01a:	1a9b      	subs	r3, r3, r2
   2e01c:	4543      	cmp	r3, r8
   2e01e:	dcf0      	bgt.n	2e002 <_printf_float+0x42a>
   2e020:	e6fe      	b.n	2de20 <_printf_float+0x248>
   2e022:	f04f 0800 	mov.w	r8, #0
   2e026:	f104 0919 	add.w	r9, r4, #25
   2e02a:	e7f4      	b.n	2e016 <_printf_float+0x43e>

0002e02c <_printf_i>:
   2e02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e030:	4606      	mov	r6, r0
   2e032:	460c      	mov	r4, r1
   2e034:	f101 0043 	add.w	r0, r1, #67	; 0x43
   2e038:	7e09      	ldrb	r1, [r1, #24]
   2e03a:	b085      	sub	sp, #20
   2e03c:	4698      	mov	r8, r3
   2e03e:	296e      	cmp	r1, #110	; 0x6e
   2e040:	4617      	mov	r7, r2
   2e042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e044:	f000 80ba 	beq.w	2e1bc <_printf_i+0x190>
   2e048:	d824      	bhi.n	2e094 <_printf_i+0x68>
   2e04a:	2963      	cmp	r1, #99	; 0x63
   2e04c:	d039      	beq.n	2e0c2 <_printf_i+0x96>
   2e04e:	d80a      	bhi.n	2e066 <_printf_i+0x3a>
   2e050:	2900      	cmp	r1, #0
   2e052:	f000 80c3 	beq.w	2e1dc <_printf_i+0x1b0>
   2e056:	2958      	cmp	r1, #88	; 0x58
   2e058:	f000 8091 	beq.w	2e17e <_printf_i+0x152>
   2e05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2e060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   2e064:	e035      	b.n	2e0d2 <_printf_i+0xa6>
   2e066:	2964      	cmp	r1, #100	; 0x64
   2e068:	d001      	beq.n	2e06e <_printf_i+0x42>
   2e06a:	2969      	cmp	r1, #105	; 0x69
   2e06c:	d1f6      	bne.n	2e05c <_printf_i+0x30>
   2e06e:	6825      	ldr	r5, [r4, #0]
   2e070:	681a      	ldr	r2, [r3, #0]
   2e072:	f015 0f80 	tst.w	r5, #128	; 0x80
   2e076:	f102 0104 	add.w	r1, r2, #4
   2e07a:	d02c      	beq.n	2e0d6 <_printf_i+0xaa>
   2e07c:	6812      	ldr	r2, [r2, #0]
   2e07e:	6019      	str	r1, [r3, #0]
   2e080:	2a00      	cmp	r2, #0
   2e082:	da03      	bge.n	2e08c <_printf_i+0x60>
   2e084:	232d      	movs	r3, #45	; 0x2d
   2e086:	4252      	negs	r2, r2
   2e088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2e08c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 2e24c <_printf_i+0x220>
   2e090:	230a      	movs	r3, #10
   2e092:	e03f      	b.n	2e114 <_printf_i+0xe8>
   2e094:	2973      	cmp	r1, #115	; 0x73
   2e096:	f000 80a5 	beq.w	2e1e4 <_printf_i+0x1b8>
   2e09a:	d808      	bhi.n	2e0ae <_printf_i+0x82>
   2e09c:	296f      	cmp	r1, #111	; 0x6f
   2e09e:	d021      	beq.n	2e0e4 <_printf_i+0xb8>
   2e0a0:	2970      	cmp	r1, #112	; 0x70
   2e0a2:	d1db      	bne.n	2e05c <_printf_i+0x30>
   2e0a4:	6822      	ldr	r2, [r4, #0]
   2e0a6:	f042 0220 	orr.w	r2, r2, #32
   2e0aa:	6022      	str	r2, [r4, #0]
   2e0ac:	e003      	b.n	2e0b6 <_printf_i+0x8a>
   2e0ae:	2975      	cmp	r1, #117	; 0x75
   2e0b0:	d018      	beq.n	2e0e4 <_printf_i+0xb8>
   2e0b2:	2978      	cmp	r1, #120	; 0x78
   2e0b4:	d1d2      	bne.n	2e05c <_printf_i+0x30>
   2e0b6:	2278      	movs	r2, #120	; 0x78
   2e0b8:	f8df c194 	ldr.w	ip, [pc, #404]	; 2e250 <_printf_i+0x224>
   2e0bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   2e0c0:	e061      	b.n	2e186 <_printf_i+0x15a>
   2e0c2:	681a      	ldr	r2, [r3, #0]
   2e0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2e0c8:	1d11      	adds	r1, r2, #4
   2e0ca:	6019      	str	r1, [r3, #0]
   2e0cc:	6813      	ldr	r3, [r2, #0]
   2e0ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2e0d2:	2301      	movs	r3, #1
   2e0d4:	e093      	b.n	2e1fe <_printf_i+0x1d2>
   2e0d6:	6812      	ldr	r2, [r2, #0]
   2e0d8:	f015 0f40 	tst.w	r5, #64	; 0x40
   2e0dc:	6019      	str	r1, [r3, #0]
   2e0de:	bf18      	it	ne
   2e0e0:	b212      	sxthne	r2, r2
   2e0e2:	e7cd      	b.n	2e080 <_printf_i+0x54>
   2e0e4:	f8d4 c000 	ldr.w	ip, [r4]
   2e0e8:	681a      	ldr	r2, [r3, #0]
   2e0ea:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2e0ee:	f102 0504 	add.w	r5, r2, #4
   2e0f2:	601d      	str	r5, [r3, #0]
   2e0f4:	d001      	beq.n	2e0fa <_printf_i+0xce>
   2e0f6:	6812      	ldr	r2, [r2, #0]
   2e0f8:	e003      	b.n	2e102 <_printf_i+0xd6>
   2e0fa:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2e0fe:	d0fa      	beq.n	2e0f6 <_printf_i+0xca>
   2e100:	8812      	ldrh	r2, [r2, #0]
   2e102:	296f      	cmp	r1, #111	; 0x6f
   2e104:	f8df c144 	ldr.w	ip, [pc, #324]	; 2e24c <_printf_i+0x220>
   2e108:	bf0c      	ite	eq
   2e10a:	2308      	moveq	r3, #8
   2e10c:	230a      	movne	r3, #10
   2e10e:	2100      	movs	r1, #0
   2e110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2e114:	6865      	ldr	r5, [r4, #4]
   2e116:	2d00      	cmp	r5, #0
   2e118:	60a5      	str	r5, [r4, #8]
   2e11a:	bfa2      	ittt	ge
   2e11c:	6821      	ldrge	r1, [r4, #0]
   2e11e:	f021 0104 	bicge.w	r1, r1, #4
   2e122:	6021      	strge	r1, [r4, #0]
   2e124:	b90a      	cbnz	r2, 2e12a <_printf_i+0xfe>
   2e126:	2d00      	cmp	r5, #0
   2e128:	d046      	beq.n	2e1b8 <_printf_i+0x18c>
   2e12a:	4605      	mov	r5, r0
   2e12c:	4293      	cmp	r3, r2
   2e12e:	fbb2 f1f3 	udiv	r1, r2, r3
   2e132:	fb03 2e11 	mls	lr, r3, r1, r2
   2e136:	f81c e00e 	ldrb.w	lr, [ip, lr]
   2e13a:	f805 ed01 	strb.w	lr, [r5, #-1]!
   2e13e:	d939      	bls.n	2e1b4 <_printf_i+0x188>
   2e140:	2b08      	cmp	r3, #8
   2e142:	d10b      	bne.n	2e15c <_printf_i+0x130>
   2e144:	6823      	ldr	r3, [r4, #0]
   2e146:	07da      	lsls	r2, r3, #31
   2e148:	d508      	bpl.n	2e15c <_printf_i+0x130>
   2e14a:	6923      	ldr	r3, [r4, #16]
   2e14c:	6862      	ldr	r2, [r4, #4]
   2e14e:	429a      	cmp	r2, r3
   2e150:	bfde      	ittt	le
   2e152:	2330      	movle	r3, #48	; 0x30
   2e154:	f805 3c01 	strble.w	r3, [r5, #-1]
   2e158:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   2e15c:	1b40      	subs	r0, r0, r5
   2e15e:	6120      	str	r0, [r4, #16]
   2e160:	f8cd 8000 	str.w	r8, [sp]
   2e164:	463b      	mov	r3, r7
   2e166:	aa03      	add	r2, sp, #12
   2e168:	4621      	mov	r1, r4
   2e16a:	4630      	mov	r0, r6
   2e16c:	f006 fd38 	bl	34be0 <_printf_common>
   2e170:	3001      	adds	r0, #1
   2e172:	d149      	bne.n	2e208 <_printf_i+0x1dc>
   2e174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e178:	b005      	add	sp, #20
   2e17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e17e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2e24c <_printf_i+0x220>
   2e182:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   2e186:	681d      	ldr	r5, [r3, #0]
   2e188:	6821      	ldr	r1, [r4, #0]
   2e18a:	f855 2b04 	ldr.w	r2, [r5], #4
   2e18e:	601d      	str	r5, [r3, #0]
   2e190:	060d      	lsls	r5, r1, #24
   2e192:	d50b      	bpl.n	2e1ac <_printf_i+0x180>
   2e194:	07cd      	lsls	r5, r1, #31
   2e196:	bf44      	itt	mi
   2e198:	f041 0120 	orrmi.w	r1, r1, #32
   2e19c:	6021      	strmi	r1, [r4, #0]
   2e19e:	b91a      	cbnz	r2, 2e1a8 <_printf_i+0x17c>
   2e1a0:	6823      	ldr	r3, [r4, #0]
   2e1a2:	f023 0320 	bic.w	r3, r3, #32
   2e1a6:	6023      	str	r3, [r4, #0]
   2e1a8:	2310      	movs	r3, #16
   2e1aa:	e7b0      	b.n	2e10e <_printf_i+0xe2>
   2e1ac:	064b      	lsls	r3, r1, #25
   2e1ae:	bf48      	it	mi
   2e1b0:	b292      	uxthmi	r2, r2
   2e1b2:	e7ef      	b.n	2e194 <_printf_i+0x168>
   2e1b4:	460a      	mov	r2, r1
   2e1b6:	e7b9      	b.n	2e12c <_printf_i+0x100>
   2e1b8:	4605      	mov	r5, r0
   2e1ba:	e7c1      	b.n	2e140 <_printf_i+0x114>
   2e1bc:	681a      	ldr	r2, [r3, #0]
   2e1be:	f8d4 c000 	ldr.w	ip, [r4]
   2e1c2:	1d15      	adds	r5, r2, #4
   2e1c4:	6961      	ldr	r1, [r4, #20]
   2e1c6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   2e1ca:	601d      	str	r5, [r3, #0]
   2e1cc:	6813      	ldr	r3, [r2, #0]
   2e1ce:	d001      	beq.n	2e1d4 <_printf_i+0x1a8>
   2e1d0:	6019      	str	r1, [r3, #0]
   2e1d2:	e003      	b.n	2e1dc <_printf_i+0x1b0>
   2e1d4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2e1d8:	d0fa      	beq.n	2e1d0 <_printf_i+0x1a4>
   2e1da:	8019      	strh	r1, [r3, #0]
   2e1dc:	2300      	movs	r3, #0
   2e1de:	4605      	mov	r5, r0
   2e1e0:	6123      	str	r3, [r4, #16]
   2e1e2:	e7bd      	b.n	2e160 <_printf_i+0x134>
   2e1e4:	681a      	ldr	r2, [r3, #0]
   2e1e6:	1d11      	adds	r1, r2, #4
   2e1e8:	6019      	str	r1, [r3, #0]
   2e1ea:	2100      	movs	r1, #0
   2e1ec:	6815      	ldr	r5, [r2, #0]
   2e1ee:	6862      	ldr	r2, [r4, #4]
   2e1f0:	4628      	mov	r0, r5
   2e1f2:	f006 fbf9 	bl	349e8 <memchr>
   2e1f6:	b108      	cbz	r0, 2e1fc <_printf_i+0x1d0>
   2e1f8:	1b40      	subs	r0, r0, r5
   2e1fa:	6060      	str	r0, [r4, #4]
   2e1fc:	6863      	ldr	r3, [r4, #4]
   2e1fe:	6123      	str	r3, [r4, #16]
   2e200:	2300      	movs	r3, #0
   2e202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2e206:	e7ab      	b.n	2e160 <_printf_i+0x134>
   2e208:	6923      	ldr	r3, [r4, #16]
   2e20a:	462a      	mov	r2, r5
   2e20c:	4639      	mov	r1, r7
   2e20e:	4630      	mov	r0, r6
   2e210:	47c0      	blx	r8
   2e212:	3001      	adds	r0, #1
   2e214:	d0ae      	beq.n	2e174 <_printf_i+0x148>
   2e216:	6823      	ldr	r3, [r4, #0]
   2e218:	079b      	lsls	r3, r3, #30
   2e21a:	d413      	bmi.n	2e244 <_printf_i+0x218>
   2e21c:	68e0      	ldr	r0, [r4, #12]
   2e21e:	9b03      	ldr	r3, [sp, #12]
   2e220:	4298      	cmp	r0, r3
   2e222:	bfb8      	it	lt
   2e224:	4618      	movlt	r0, r3
   2e226:	e7a7      	b.n	2e178 <_printf_i+0x14c>
   2e228:	2301      	movs	r3, #1
   2e22a:	464a      	mov	r2, r9
   2e22c:	4639      	mov	r1, r7
   2e22e:	4630      	mov	r0, r6
   2e230:	47c0      	blx	r8
   2e232:	3001      	adds	r0, #1
   2e234:	d09e      	beq.n	2e174 <_printf_i+0x148>
   2e236:	3501      	adds	r5, #1
   2e238:	68e3      	ldr	r3, [r4, #12]
   2e23a:	9a03      	ldr	r2, [sp, #12]
   2e23c:	1a9b      	subs	r3, r3, r2
   2e23e:	42ab      	cmp	r3, r5
   2e240:	dcf2      	bgt.n	2e228 <_printf_i+0x1fc>
   2e242:	e7eb      	b.n	2e21c <_printf_i+0x1f0>
   2e244:	2500      	movs	r5, #0
   2e246:	f104 0919 	add.w	r9, r4, #25
   2e24a:	e7f5      	b.n	2e238 <_printf_i+0x20c>
   2e24c:	00039008 	.word	0x00039008
   2e250:	00039019 	.word	0x00039019

0002e254 <_sbrk_r>:
   2e254:	b538      	push	{r3, r4, r5, lr}
   2e256:	2300      	movs	r3, #0
   2e258:	4c05      	ldr	r4, [pc, #20]	; (2e270 <_sbrk_r+0x1c>)
   2e25a:	4605      	mov	r5, r0
   2e25c:	4608      	mov	r0, r1
   2e25e:	6023      	str	r3, [r4, #0]
   2e260:	f7eb f940 	bl	194e4 <_sbrk>
   2e264:	1c43      	adds	r3, r0, #1
   2e266:	d102      	bne.n	2e26e <_sbrk_r+0x1a>
   2e268:	6823      	ldr	r3, [r4, #0]
   2e26a:	b103      	cbz	r3, 2e26e <_sbrk_r+0x1a>
   2e26c:	602b      	str	r3, [r5, #0]
   2e26e:	bd38      	pop	{r3, r4, r5, pc}
   2e270:	200290f0 	.word	0x200290f0

0002e274 <sniprintf>:
   2e274:	b40c      	push	{r2, r3}
   2e276:	4b18      	ldr	r3, [pc, #96]	; (2e2d8 <sniprintf+0x64>)
   2e278:	b530      	push	{r4, r5, lr}
   2e27a:	1e0c      	subs	r4, r1, #0
   2e27c:	b09d      	sub	sp, #116	; 0x74
   2e27e:	681d      	ldr	r5, [r3, #0]
   2e280:	da08      	bge.n	2e294 <sniprintf+0x20>
   2e282:	238b      	movs	r3, #139	; 0x8b
   2e284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e288:	602b      	str	r3, [r5, #0]
   2e28a:	b01d      	add	sp, #116	; 0x74
   2e28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2e290:	b002      	add	sp, #8
   2e292:	4770      	bx	lr
   2e294:	f44f 7302 	mov.w	r3, #520	; 0x208
   2e298:	9002      	str	r0, [sp, #8]
   2e29a:	9006      	str	r0, [sp, #24]
   2e29c:	a902      	add	r1, sp, #8
   2e29e:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e2a2:	bf14      	ite	ne
   2e2a4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2e2a8:	4623      	moveq	r3, r4
   2e2aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2e2ac:	4628      	mov	r0, r5
   2e2ae:	9304      	str	r3, [sp, #16]
   2e2b0:	9307      	str	r3, [sp, #28]
   2e2b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e2b6:	f8ad 3016 	strh.w	r3, [sp, #22]
   2e2ba:	ab21      	add	r3, sp, #132	; 0x84
   2e2bc:	9301      	str	r3, [sp, #4]
   2e2be:	f000 f9af 	bl	2e620 <_svfiprintf_r>
   2e2c2:	1c43      	adds	r3, r0, #1
   2e2c4:	bfbc      	itt	lt
   2e2c6:	238b      	movlt	r3, #139	; 0x8b
   2e2c8:	602b      	strlt	r3, [r5, #0]
   2e2ca:	2c00      	cmp	r4, #0
   2e2cc:	d0dd      	beq.n	2e28a <sniprintf+0x16>
   2e2ce:	9b02      	ldr	r3, [sp, #8]
   2e2d0:	2200      	movs	r2, #0
   2e2d2:	701a      	strb	r2, [r3, #0]
   2e2d4:	e7d9      	b.n	2e28a <sniprintf+0x16>
   2e2d6:	bf00      	nop
   2e2d8:	200201e4 	.word	0x200201e4

0002e2dc <siprintf>:
   2e2dc:	b40e      	push	{r1, r2, r3}
   2e2de:	b500      	push	{lr}
   2e2e0:	b09c      	sub	sp, #112	; 0x70
   2e2e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2e2e6:	ab1d      	add	r3, sp, #116	; 0x74
   2e2e8:	9002      	str	r0, [sp, #8]
   2e2ea:	9006      	str	r0, [sp, #24]
   2e2ec:	9107      	str	r1, [sp, #28]
   2e2ee:	9104      	str	r1, [sp, #16]
   2e2f0:	4808      	ldr	r0, [pc, #32]	; (2e314 <siprintf+0x38>)
   2e2f2:	4909      	ldr	r1, [pc, #36]	; (2e318 <siprintf+0x3c>)
   2e2f4:	f853 2b04 	ldr.w	r2, [r3], #4
   2e2f8:	9105      	str	r1, [sp, #20]
   2e2fa:	a902      	add	r1, sp, #8
   2e2fc:	6800      	ldr	r0, [r0, #0]
   2e2fe:	9301      	str	r3, [sp, #4]
   2e300:	f000 f98e 	bl	2e620 <_svfiprintf_r>
   2e304:	9b02      	ldr	r3, [sp, #8]
   2e306:	2200      	movs	r2, #0
   2e308:	701a      	strb	r2, [r3, #0]
   2e30a:	b01c      	add	sp, #112	; 0x70
   2e30c:	f85d eb04 	ldr.w	lr, [sp], #4
   2e310:	b003      	add	sp, #12
   2e312:	4770      	bx	lr
   2e314:	200201e4 	.word	0x200201e4
   2e318:	ffff0208 	.word	0xffff0208

0002e31c <_strtol_l.isra.0>:
   2e31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e320:	4686      	mov	lr, r0
   2e322:	4f39      	ldr	r7, [pc, #228]	; (2e408 <_strtol_l.isra.0+0xec>)
   2e324:	4608      	mov	r0, r1
   2e326:	4605      	mov	r5, r0
   2e328:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e32c:	5de6      	ldrb	r6, [r4, r7]
   2e32e:	f016 0608 	ands.w	r6, r6, #8
   2e332:	d135      	bne.n	2e3a0 <_strtol_l.isra.0+0x84>
   2e334:	2c2d      	cmp	r4, #45	; 0x2d
   2e336:	d135      	bne.n	2e3a4 <_strtol_l.isra.0+0x88>
   2e338:	782c      	ldrb	r4, [r5, #0]
   2e33a:	f04f 0801 	mov.w	r8, #1
   2e33e:	1c85      	adds	r5, r0, #2
   2e340:	2b00      	cmp	r3, #0
   2e342:	d05c      	beq.n	2e3fe <_strtol_l.isra.0+0xe2>
   2e344:	2b10      	cmp	r3, #16
   2e346:	d109      	bne.n	2e35c <_strtol_l.isra.0+0x40>
   2e348:	2c30      	cmp	r4, #48	; 0x30
   2e34a:	d107      	bne.n	2e35c <_strtol_l.isra.0+0x40>
   2e34c:	7828      	ldrb	r0, [r5, #0]
   2e34e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2e352:	2858      	cmp	r0, #88	; 0x58
   2e354:	d14e      	bne.n	2e3f4 <_strtol_l.isra.0+0xd8>
   2e356:	786c      	ldrb	r4, [r5, #1]
   2e358:	2310      	movs	r3, #16
   2e35a:	3502      	adds	r5, #2
   2e35c:	f1b8 0f00 	cmp.w	r8, #0
   2e360:	f04f 0700 	mov.w	r7, #0
   2e364:	bf14      	ite	ne
   2e366:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   2e36a:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   2e36e:	4638      	mov	r0, r7
   2e370:	fbbc f9f3 	udiv	r9, ip, r3
   2e374:	fb03 ca19 	mls	sl, r3, r9, ip
   2e378:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2e37c:	2e09      	cmp	r6, #9
   2e37e:	d817      	bhi.n	2e3b0 <_strtol_l.isra.0+0x94>
   2e380:	4634      	mov	r4, r6
   2e382:	42a3      	cmp	r3, r4
   2e384:	dd23      	ble.n	2e3ce <_strtol_l.isra.0+0xb2>
   2e386:	1c7e      	adds	r6, r7, #1
   2e388:	d007      	beq.n	2e39a <_strtol_l.isra.0+0x7e>
   2e38a:	4581      	cmp	r9, r0
   2e38c:	d31c      	bcc.n	2e3c8 <_strtol_l.isra.0+0xac>
   2e38e:	d101      	bne.n	2e394 <_strtol_l.isra.0+0x78>
   2e390:	45a2      	cmp	sl, r4
   2e392:	db19      	blt.n	2e3c8 <_strtol_l.isra.0+0xac>
   2e394:	fb00 4003 	mla	r0, r0, r3, r4
   2e398:	2701      	movs	r7, #1
   2e39a:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e39e:	e7eb      	b.n	2e378 <_strtol_l.isra.0+0x5c>
   2e3a0:	4628      	mov	r0, r5
   2e3a2:	e7c0      	b.n	2e326 <_strtol_l.isra.0+0xa>
   2e3a4:	2c2b      	cmp	r4, #43	; 0x2b
   2e3a6:	46b0      	mov	r8, r6
   2e3a8:	bf04      	itt	eq
   2e3aa:	782c      	ldrbeq	r4, [r5, #0]
   2e3ac:	1c85      	addeq	r5, r0, #2
   2e3ae:	e7c7      	b.n	2e340 <_strtol_l.isra.0+0x24>
   2e3b0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2e3b4:	2e19      	cmp	r6, #25
   2e3b6:	d801      	bhi.n	2e3bc <_strtol_l.isra.0+0xa0>
   2e3b8:	3c37      	subs	r4, #55	; 0x37
   2e3ba:	e7e2      	b.n	2e382 <_strtol_l.isra.0+0x66>
   2e3bc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2e3c0:	2e19      	cmp	r6, #25
   2e3c2:	d804      	bhi.n	2e3ce <_strtol_l.isra.0+0xb2>
   2e3c4:	3c57      	subs	r4, #87	; 0x57
   2e3c6:	e7dc      	b.n	2e382 <_strtol_l.isra.0+0x66>
   2e3c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2e3cc:	e7e5      	b.n	2e39a <_strtol_l.isra.0+0x7e>
   2e3ce:	1c7b      	adds	r3, r7, #1
   2e3d0:	d106      	bne.n	2e3e0 <_strtol_l.isra.0+0xc4>
   2e3d2:	2322      	movs	r3, #34	; 0x22
   2e3d4:	4660      	mov	r0, ip
   2e3d6:	f8ce 3000 	str.w	r3, [lr]
   2e3da:	b942      	cbnz	r2, 2e3ee <_strtol_l.isra.0+0xd2>
   2e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e3e0:	f1b8 0f00 	cmp.w	r8, #0
   2e3e4:	d000      	beq.n	2e3e8 <_strtol_l.isra.0+0xcc>
   2e3e6:	4240      	negs	r0, r0
   2e3e8:	2a00      	cmp	r2, #0
   2e3ea:	d0f7      	beq.n	2e3dc <_strtol_l.isra.0+0xc0>
   2e3ec:	b107      	cbz	r7, 2e3f0 <_strtol_l.isra.0+0xd4>
   2e3ee:	1e69      	subs	r1, r5, #1
   2e3f0:	6011      	str	r1, [r2, #0]
   2e3f2:	e7f3      	b.n	2e3dc <_strtol_l.isra.0+0xc0>
   2e3f4:	2430      	movs	r4, #48	; 0x30
   2e3f6:	2b00      	cmp	r3, #0
   2e3f8:	d1b0      	bne.n	2e35c <_strtol_l.isra.0+0x40>
   2e3fa:	2308      	movs	r3, #8
   2e3fc:	e7ae      	b.n	2e35c <_strtol_l.isra.0+0x40>
   2e3fe:	2c30      	cmp	r4, #48	; 0x30
   2e400:	d0a4      	beq.n	2e34c <_strtol_l.isra.0+0x30>
   2e402:	230a      	movs	r3, #10
   2e404:	e7aa      	b.n	2e35c <_strtol_l.isra.0+0x40>
   2e406:	bf00      	nop
   2e408:	00038ef8 	.word	0x00038ef8

0002e40c <strtol>:
   2e40c:	4613      	mov	r3, r2
   2e40e:	460a      	mov	r2, r1
   2e410:	4601      	mov	r1, r0
   2e412:	4802      	ldr	r0, [pc, #8]	; (2e41c <strtol+0x10>)
   2e414:	6800      	ldr	r0, [r0, #0]
   2e416:	f7ff bf81 	b.w	2e31c <_strtol_l.isra.0>
   2e41a:	bf00      	nop
   2e41c:	200201e4 	.word	0x200201e4

0002e420 <_strtoul_l.isra.0>:
   2e420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e424:	4686      	mov	lr, r0
   2e426:	4f37      	ldr	r7, [pc, #220]	; (2e504 <_strtoul_l.isra.0+0xe4>)
   2e428:	4608      	mov	r0, r1
   2e42a:	4605      	mov	r5, r0
   2e42c:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e430:	5de6      	ldrb	r6, [r4, r7]
   2e432:	f016 0608 	ands.w	r6, r6, #8
   2e436:	d131      	bne.n	2e49c <_strtoul_l.isra.0+0x7c>
   2e438:	2c2d      	cmp	r4, #45	; 0x2d
   2e43a:	d131      	bne.n	2e4a0 <_strtoul_l.isra.0+0x80>
   2e43c:	782c      	ldrb	r4, [r5, #0]
   2e43e:	f04f 0801 	mov.w	r8, #1
   2e442:	1c85      	adds	r5, r0, #2
   2e444:	2b00      	cmp	r3, #0
   2e446:	d059      	beq.n	2e4fc <_strtoul_l.isra.0+0xdc>
   2e448:	2b10      	cmp	r3, #16
   2e44a:	d109      	bne.n	2e460 <_strtoul_l.isra.0+0x40>
   2e44c:	2c30      	cmp	r4, #48	; 0x30
   2e44e:	d107      	bne.n	2e460 <_strtoul_l.isra.0+0x40>
   2e450:	7828      	ldrb	r0, [r5, #0]
   2e452:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2e456:	2858      	cmp	r0, #88	; 0x58
   2e458:	d14b      	bne.n	2e4f2 <_strtoul_l.isra.0+0xd2>
   2e45a:	786c      	ldrb	r4, [r5, #1]
   2e45c:	2310      	movs	r3, #16
   2e45e:	3502      	adds	r5, #2
   2e460:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2e464:	2600      	movs	r6, #0
   2e466:	fbbc fcf3 	udiv	ip, ip, r3
   2e46a:	fb03 f90c 	mul.w	r9, r3, ip
   2e46e:	4630      	mov	r0, r6
   2e470:	ea6f 0909 	mvn.w	r9, r9
   2e474:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2e478:	2f09      	cmp	r7, #9
   2e47a:	d817      	bhi.n	2e4ac <_strtoul_l.isra.0+0x8c>
   2e47c:	463c      	mov	r4, r7
   2e47e:	42a3      	cmp	r3, r4
   2e480:	dd23      	ble.n	2e4ca <_strtoul_l.isra.0+0xaa>
   2e482:	2e00      	cmp	r6, #0
   2e484:	db1e      	blt.n	2e4c4 <_strtoul_l.isra.0+0xa4>
   2e486:	4584      	cmp	ip, r0
   2e488:	d31c      	bcc.n	2e4c4 <_strtoul_l.isra.0+0xa4>
   2e48a:	d101      	bne.n	2e490 <_strtoul_l.isra.0+0x70>
   2e48c:	45a1      	cmp	r9, r4
   2e48e:	db19      	blt.n	2e4c4 <_strtoul_l.isra.0+0xa4>
   2e490:	fb00 4003 	mla	r0, r0, r3, r4
   2e494:	2601      	movs	r6, #1
   2e496:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e49a:	e7eb      	b.n	2e474 <_strtoul_l.isra.0+0x54>
   2e49c:	4628      	mov	r0, r5
   2e49e:	e7c4      	b.n	2e42a <_strtoul_l.isra.0+0xa>
   2e4a0:	2c2b      	cmp	r4, #43	; 0x2b
   2e4a2:	46b0      	mov	r8, r6
   2e4a4:	bf04      	itt	eq
   2e4a6:	782c      	ldrbeq	r4, [r5, #0]
   2e4a8:	1c85      	addeq	r5, r0, #2
   2e4aa:	e7cb      	b.n	2e444 <_strtoul_l.isra.0+0x24>
   2e4ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   2e4b0:	2f19      	cmp	r7, #25
   2e4b2:	d801      	bhi.n	2e4b8 <_strtoul_l.isra.0+0x98>
   2e4b4:	3c37      	subs	r4, #55	; 0x37
   2e4b6:	e7e2      	b.n	2e47e <_strtoul_l.isra.0+0x5e>
   2e4b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   2e4bc:	2f19      	cmp	r7, #25
   2e4be:	d804      	bhi.n	2e4ca <_strtoul_l.isra.0+0xaa>
   2e4c0:	3c57      	subs	r4, #87	; 0x57
   2e4c2:	e7dc      	b.n	2e47e <_strtoul_l.isra.0+0x5e>
   2e4c4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2e4c8:	e7e5      	b.n	2e496 <_strtoul_l.isra.0+0x76>
   2e4ca:	2e00      	cmp	r6, #0
   2e4cc:	da07      	bge.n	2e4de <_strtoul_l.isra.0+0xbe>
   2e4ce:	2322      	movs	r3, #34	; 0x22
   2e4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e4d4:	f8ce 3000 	str.w	r3, [lr]
   2e4d8:	b942      	cbnz	r2, 2e4ec <_strtoul_l.isra.0+0xcc>
   2e4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e4de:	f1b8 0f00 	cmp.w	r8, #0
   2e4e2:	d000      	beq.n	2e4e6 <_strtoul_l.isra.0+0xc6>
   2e4e4:	4240      	negs	r0, r0
   2e4e6:	2a00      	cmp	r2, #0
   2e4e8:	d0f7      	beq.n	2e4da <_strtoul_l.isra.0+0xba>
   2e4ea:	b106      	cbz	r6, 2e4ee <_strtoul_l.isra.0+0xce>
   2e4ec:	1e69      	subs	r1, r5, #1
   2e4ee:	6011      	str	r1, [r2, #0]
   2e4f0:	e7f3      	b.n	2e4da <_strtoul_l.isra.0+0xba>
   2e4f2:	2430      	movs	r4, #48	; 0x30
   2e4f4:	2b00      	cmp	r3, #0
   2e4f6:	d1b3      	bne.n	2e460 <_strtoul_l.isra.0+0x40>
   2e4f8:	2308      	movs	r3, #8
   2e4fa:	e7b1      	b.n	2e460 <_strtoul_l.isra.0+0x40>
   2e4fc:	2c30      	cmp	r4, #48	; 0x30
   2e4fe:	d0a7      	beq.n	2e450 <_strtoul_l.isra.0+0x30>
   2e500:	230a      	movs	r3, #10
   2e502:	e7ad      	b.n	2e460 <_strtoul_l.isra.0+0x40>
   2e504:	00038ef8 	.word	0x00038ef8

0002e508 <strtoul>:
   2e508:	4613      	mov	r3, r2
   2e50a:	460a      	mov	r2, r1
   2e50c:	4601      	mov	r1, r0
   2e50e:	4802      	ldr	r0, [pc, #8]	; (2e518 <strtoul+0x10>)
   2e510:	6800      	ldr	r0, [r0, #0]
   2e512:	f7ff bf85 	b.w	2e420 <_strtoul_l.isra.0>
   2e516:	bf00      	nop
   2e518:	200201e4 	.word	0x200201e4

0002e51c <__chk_fail>:
   2e51c:	b500      	push	{lr}
   2e51e:	b08d      	sub	sp, #52	; 0x34
   2e520:	4b0f      	ldr	r3, [pc, #60]	; (2e560 <__chk_fail+0x44>)
   2e522:	466a      	mov	r2, sp
   2e524:	f103 0628 	add.w	r6, r3, #40	; 0x28
   2e528:	4615      	mov	r5, r2
   2e52a:	6818      	ldr	r0, [r3, #0]
   2e52c:	3308      	adds	r3, #8
   2e52e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   2e532:	4614      	mov	r4, r2
   2e534:	42b3      	cmp	r3, r6
   2e536:	c403      	stmia	r4!, {r0, r1}
   2e538:	4622      	mov	r2, r4
   2e53a:	d1f6      	bne.n	2e52a <__chk_fail+0xe>
   2e53c:	6818      	ldr	r0, [r3, #0]
   2e53e:	889b      	ldrh	r3, [r3, #4]
   2e540:	6020      	str	r0, [r4, #0]
   2e542:	4628      	mov	r0, r5
   2e544:	80a3      	strh	r3, [r4, #4]
   2e546:	f7e3 fd9b 	bl	12080 <strlen>
   2e54a:	4629      	mov	r1, r5
   2e54c:	4602      	mov	r2, r0
   2e54e:	2002      	movs	r0, #2
   2e550:	f002 fda8 	bl	310a4 <_write>
   2e554:	2006      	movs	r0, #6
   2e556:	f000 f95b 	bl	2e810 <raise>
   2e55a:	207f      	movs	r0, #127	; 0x7f
   2e55c:	f7ea ffba 	bl	194d4 <_exit>
   2e560:	0003902a 	.word	0x0003902a

0002e564 <_localeconv_r>:
   2e564:	4800      	ldr	r0, [pc, #0]	; (2e568 <_localeconv_r+0x4>)
   2e566:	4770      	bx	lr
   2e568:	20020338 	.word	0x20020338

0002e56c <__malloc_lock>:
   2e56c:	4801      	ldr	r0, [pc, #4]	; (2e574 <__malloc_lock+0x8>)
   2e56e:	f006 bc7b 	b.w	34e68 <__retarget_lock_acquire_recursive>
   2e572:	bf00      	nop
   2e574:	200290f8 	.word	0x200290f8

0002e578 <__malloc_unlock>:
   2e578:	4801      	ldr	r0, [pc, #4]	; (2e580 <__malloc_unlock+0x8>)
   2e57a:	f006 bc76 	b.w	34e6a <__retarget_lock_release_recursive>
   2e57e:	bf00      	nop
   2e580:	200290f8 	.word	0x200290f8

0002e584 <__pow5mult>:
   2e584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e588:	4615      	mov	r5, r2
   2e58a:	f012 0203 	ands.w	r2, r2, #3
   2e58e:	4606      	mov	r6, r0
   2e590:	460f      	mov	r7, r1
   2e592:	d007      	beq.n	2e5a4 <__pow5mult+0x20>
   2e594:	3a01      	subs	r2, #1
   2e596:	4c21      	ldr	r4, [pc, #132]	; (2e61c <__pow5mult+0x98>)
   2e598:	2300      	movs	r3, #0
   2e59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2e59e:	f006 fcb0 	bl	34f02 <__multadd>
   2e5a2:	4607      	mov	r7, r0
   2e5a4:	10ad      	asrs	r5, r5, #2
   2e5a6:	d035      	beq.n	2e614 <__pow5mult+0x90>
   2e5a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2e5aa:	b93c      	cbnz	r4, 2e5bc <__pow5mult+0x38>
   2e5ac:	2010      	movs	r0, #16
   2e5ae:	f7ff fa5b 	bl	2da68 <malloc>
   2e5b2:	6270      	str	r0, [r6, #36]	; 0x24
   2e5b4:	6004      	str	r4, [r0, #0]
   2e5b6:	60c4      	str	r4, [r0, #12]
   2e5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2e5bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2e5c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2e5c4:	b94c      	cbnz	r4, 2e5da <__pow5mult+0x56>
   2e5c6:	f240 2171 	movw	r1, #625	; 0x271
   2e5ca:	4630      	mov	r0, r6
   2e5cc:	f006 fd26 	bl	3501c <__i2b>
   2e5d0:	2300      	movs	r3, #0
   2e5d2:	4604      	mov	r4, r0
   2e5d4:	f8c8 0008 	str.w	r0, [r8, #8]
   2e5d8:	6003      	str	r3, [r0, #0]
   2e5da:	f04f 0800 	mov.w	r8, #0
   2e5de:	07eb      	lsls	r3, r5, #31
   2e5e0:	d50a      	bpl.n	2e5f8 <__pow5mult+0x74>
   2e5e2:	4639      	mov	r1, r7
   2e5e4:	4622      	mov	r2, r4
   2e5e6:	4630      	mov	r0, r6
   2e5e8:	f006 fd21 	bl	3502e <__multiply>
   2e5ec:	4681      	mov	r9, r0
   2e5ee:	4639      	mov	r1, r7
   2e5f0:	4630      	mov	r0, r6
   2e5f2:	464f      	mov	r7, r9
   2e5f4:	f006 fc6e 	bl	34ed4 <_Bfree>
   2e5f8:	106d      	asrs	r5, r5, #1
   2e5fa:	d00b      	beq.n	2e614 <__pow5mult+0x90>
   2e5fc:	6820      	ldr	r0, [r4, #0]
   2e5fe:	b938      	cbnz	r0, 2e610 <__pow5mult+0x8c>
   2e600:	4622      	mov	r2, r4
   2e602:	4621      	mov	r1, r4
   2e604:	4630      	mov	r0, r6
   2e606:	f006 fd12 	bl	3502e <__multiply>
   2e60a:	6020      	str	r0, [r4, #0]
   2e60c:	f8c0 8000 	str.w	r8, [r0]
   2e610:	4604      	mov	r4, r0
   2e612:	e7e4      	b.n	2e5de <__pow5mult+0x5a>
   2e614:	4638      	mov	r0, r7
   2e616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e61a:	bf00      	nop
   2e61c:	00036ab0 	.word	0x00036ab0

0002e620 <_svfiprintf_r>:
   2e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e624:	461e      	mov	r6, r3
   2e626:	898b      	ldrh	r3, [r1, #12]
   2e628:	b09d      	sub	sp, #116	; 0x74
   2e62a:	4607      	mov	r7, r0
   2e62c:	061b      	lsls	r3, r3, #24
   2e62e:	460d      	mov	r5, r1
   2e630:	4614      	mov	r4, r2
   2e632:	d50e      	bpl.n	2e652 <_svfiprintf_r+0x32>
   2e634:	690b      	ldr	r3, [r1, #16]
   2e636:	b963      	cbnz	r3, 2e652 <_svfiprintf_r+0x32>
   2e638:	2140      	movs	r1, #64	; 0x40
   2e63a:	f7ff fa73 	bl	2db24 <_malloc_r>
   2e63e:	6028      	str	r0, [r5, #0]
   2e640:	6128      	str	r0, [r5, #16]
   2e642:	b920      	cbnz	r0, 2e64e <_svfiprintf_r+0x2e>
   2e644:	230c      	movs	r3, #12
   2e646:	603b      	str	r3, [r7, #0]
   2e648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e64c:	e0c9      	b.n	2e7e2 <_svfiprintf_r+0x1c2>
   2e64e:	2340      	movs	r3, #64	; 0x40
   2e650:	616b      	str	r3, [r5, #20]
   2e652:	2300      	movs	r3, #0
   2e654:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2e7fc <_svfiprintf_r+0x1dc>
   2e658:	f04f 0a01 	mov.w	sl, #1
   2e65c:	9603      	str	r6, [sp, #12]
   2e65e:	9309      	str	r3, [sp, #36]	; 0x24
   2e660:	2320      	movs	r3, #32
   2e662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2e666:	2330      	movs	r3, #48	; 0x30
   2e668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2e66c:	4623      	mov	r3, r4
   2e66e:	461e      	mov	r6, r3
   2e670:	f813 2b01 	ldrb.w	r2, [r3], #1
   2e674:	b10a      	cbz	r2, 2e67a <_svfiprintf_r+0x5a>
   2e676:	2a25      	cmp	r2, #37	; 0x25
   2e678:	d1f9      	bne.n	2e66e <_svfiprintf_r+0x4e>
   2e67a:	ebb6 0b04 	subs.w	fp, r6, r4
   2e67e:	d00b      	beq.n	2e698 <_svfiprintf_r+0x78>
   2e680:	465b      	mov	r3, fp
   2e682:	4622      	mov	r2, r4
   2e684:	4629      	mov	r1, r5
   2e686:	4638      	mov	r0, r7
   2e688:	f006 fea1 	bl	353ce <__ssputs_r>
   2e68c:	3001      	adds	r0, #1
   2e68e:	f000 80a3 	beq.w	2e7d8 <_svfiprintf_r+0x1b8>
   2e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e694:	445b      	add	r3, fp
   2e696:	9309      	str	r3, [sp, #36]	; 0x24
   2e698:	7833      	ldrb	r3, [r6, #0]
   2e69a:	2b00      	cmp	r3, #0
   2e69c:	f000 809c 	beq.w	2e7d8 <_svfiprintf_r+0x1b8>
   2e6a0:	2300      	movs	r3, #0
   2e6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e6a6:	3601      	adds	r6, #1
   2e6a8:	9304      	str	r3, [sp, #16]
   2e6aa:	9307      	str	r3, [sp, #28]
   2e6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2e6b0:	931a      	str	r3, [sp, #104]	; 0x68
   2e6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2e6b6:	4634      	mov	r4, r6
   2e6b8:	2205      	movs	r2, #5
   2e6ba:	4850      	ldr	r0, [pc, #320]	; (2e7fc <_svfiprintf_r+0x1dc>)
   2e6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e6c0:	f006 f992 	bl	349e8 <memchr>
   2e6c4:	9b04      	ldr	r3, [sp, #16]
   2e6c6:	b9c0      	cbnz	r0, 2e6fa <_svfiprintf_r+0xda>
   2e6c8:	06d9      	lsls	r1, r3, #27
   2e6ca:	bf44      	itt	mi
   2e6cc:	2220      	movmi	r2, #32
   2e6ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e6d2:	071a      	lsls	r2, r3, #28
   2e6d4:	bf44      	itt	mi
   2e6d6:	222b      	movmi	r2, #43	; 0x2b
   2e6d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e6dc:	7832      	ldrb	r2, [r6, #0]
   2e6de:	2a2a      	cmp	r2, #42	; 0x2a
   2e6e0:	d013      	beq.n	2e70a <_svfiprintf_r+0xea>
   2e6e2:	4634      	mov	r4, r6
   2e6e4:	9a07      	ldr	r2, [sp, #28]
   2e6e6:	2000      	movs	r0, #0
   2e6e8:	260a      	movs	r6, #10
   2e6ea:	4621      	mov	r1, r4
   2e6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   2e6f0:	3b30      	subs	r3, #48	; 0x30
   2e6f2:	2b09      	cmp	r3, #9
   2e6f4:	d94b      	bls.n	2e78e <_svfiprintf_r+0x16e>
   2e6f6:	b970      	cbnz	r0, 2e716 <_svfiprintf_r+0xf6>
   2e6f8:	e014      	b.n	2e724 <_svfiprintf_r+0x104>
   2e6fa:	eba0 0009 	sub.w	r0, r0, r9
   2e6fe:	4626      	mov	r6, r4
   2e700:	fa0a f000 	lsl.w	r0, sl, r0
   2e704:	4318      	orrs	r0, r3
   2e706:	9004      	str	r0, [sp, #16]
   2e708:	e7d5      	b.n	2e6b6 <_svfiprintf_r+0x96>
   2e70a:	9a03      	ldr	r2, [sp, #12]
   2e70c:	1d11      	adds	r1, r2, #4
   2e70e:	6812      	ldr	r2, [r2, #0]
   2e710:	2a00      	cmp	r2, #0
   2e712:	9103      	str	r1, [sp, #12]
   2e714:	db01      	blt.n	2e71a <_svfiprintf_r+0xfa>
   2e716:	9207      	str	r2, [sp, #28]
   2e718:	e004      	b.n	2e724 <_svfiprintf_r+0x104>
   2e71a:	4252      	negs	r2, r2
   2e71c:	f043 0302 	orr.w	r3, r3, #2
   2e720:	9207      	str	r2, [sp, #28]
   2e722:	9304      	str	r3, [sp, #16]
   2e724:	7823      	ldrb	r3, [r4, #0]
   2e726:	2b2e      	cmp	r3, #46	; 0x2e
   2e728:	d10c      	bne.n	2e744 <_svfiprintf_r+0x124>
   2e72a:	7863      	ldrb	r3, [r4, #1]
   2e72c:	2b2a      	cmp	r3, #42	; 0x2a
   2e72e:	d133      	bne.n	2e798 <_svfiprintf_r+0x178>
   2e730:	9b03      	ldr	r3, [sp, #12]
   2e732:	3402      	adds	r4, #2
   2e734:	1d1a      	adds	r2, r3, #4
   2e736:	681b      	ldr	r3, [r3, #0]
   2e738:	2b00      	cmp	r3, #0
   2e73a:	9203      	str	r2, [sp, #12]
   2e73c:	bfb8      	it	lt
   2e73e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2e742:	9305      	str	r3, [sp, #20]
   2e744:	4e2e      	ldr	r6, [pc, #184]	; (2e800 <_svfiprintf_r+0x1e0>)
   2e746:	2203      	movs	r2, #3
   2e748:	7821      	ldrb	r1, [r4, #0]
   2e74a:	4630      	mov	r0, r6
   2e74c:	f006 f94c 	bl	349e8 <memchr>
   2e750:	b138      	cbz	r0, 2e762 <_svfiprintf_r+0x142>
   2e752:	2340      	movs	r3, #64	; 0x40
   2e754:	1b80      	subs	r0, r0, r6
   2e756:	3401      	adds	r4, #1
   2e758:	fa03 f000 	lsl.w	r0, r3, r0
   2e75c:	9b04      	ldr	r3, [sp, #16]
   2e75e:	4303      	orrs	r3, r0
   2e760:	9304      	str	r3, [sp, #16]
   2e762:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e766:	2206      	movs	r2, #6
   2e768:	4826      	ldr	r0, [pc, #152]	; (2e804 <_svfiprintf_r+0x1e4>)
   2e76a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2e76e:	f006 f93b 	bl	349e8 <memchr>
   2e772:	2800      	cmp	r0, #0
   2e774:	d038      	beq.n	2e7e8 <_svfiprintf_r+0x1c8>
   2e776:	4b24      	ldr	r3, [pc, #144]	; (2e808 <_svfiprintf_r+0x1e8>)
   2e778:	bb13      	cbnz	r3, 2e7c0 <_svfiprintf_r+0x1a0>
   2e77a:	9b03      	ldr	r3, [sp, #12]
   2e77c:	3307      	adds	r3, #7
   2e77e:	f023 0307 	bic.w	r3, r3, #7
   2e782:	3308      	adds	r3, #8
   2e784:	9303      	str	r3, [sp, #12]
   2e786:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e788:	4443      	add	r3, r8
   2e78a:	9309      	str	r3, [sp, #36]	; 0x24
   2e78c:	e76e      	b.n	2e66c <_svfiprintf_r+0x4c>
   2e78e:	fb06 3202 	mla	r2, r6, r2, r3
   2e792:	2001      	movs	r0, #1
   2e794:	460c      	mov	r4, r1
   2e796:	e7a8      	b.n	2e6ea <_svfiprintf_r+0xca>
   2e798:	2300      	movs	r3, #0
   2e79a:	3401      	adds	r4, #1
   2e79c:	260a      	movs	r6, #10
   2e79e:	4619      	mov	r1, r3
   2e7a0:	9305      	str	r3, [sp, #20]
   2e7a2:	4620      	mov	r0, r4
   2e7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   2e7a8:	3a30      	subs	r2, #48	; 0x30
   2e7aa:	2a09      	cmp	r2, #9
   2e7ac:	d903      	bls.n	2e7b6 <_svfiprintf_r+0x196>
   2e7ae:	2b00      	cmp	r3, #0
   2e7b0:	d0c8      	beq.n	2e744 <_svfiprintf_r+0x124>
   2e7b2:	9105      	str	r1, [sp, #20]
   2e7b4:	e7c6      	b.n	2e744 <_svfiprintf_r+0x124>
   2e7b6:	fb06 2101 	mla	r1, r6, r1, r2
   2e7ba:	2301      	movs	r3, #1
   2e7bc:	4604      	mov	r4, r0
   2e7be:	e7f0      	b.n	2e7a2 <_svfiprintf_r+0x182>
   2e7c0:	ab03      	add	r3, sp, #12
   2e7c2:	462a      	mov	r2, r5
   2e7c4:	a904      	add	r1, sp, #16
   2e7c6:	4638      	mov	r0, r7
   2e7c8:	9300      	str	r3, [sp, #0]
   2e7ca:	4b10      	ldr	r3, [pc, #64]	; (2e80c <_svfiprintf_r+0x1ec>)
   2e7cc:	f7ff fa04 	bl	2dbd8 <_printf_float>
   2e7d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2e7d4:	4680      	mov	r8, r0
   2e7d6:	d1d6      	bne.n	2e786 <_svfiprintf_r+0x166>
   2e7d8:	89ab      	ldrh	r3, [r5, #12]
   2e7da:	065b      	lsls	r3, r3, #25
   2e7dc:	f53f af34 	bmi.w	2e648 <_svfiprintf_r+0x28>
   2e7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e7e2:	b01d      	add	sp, #116	; 0x74
   2e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e7e8:	ab03      	add	r3, sp, #12
   2e7ea:	462a      	mov	r2, r5
   2e7ec:	a904      	add	r1, sp, #16
   2e7ee:	4638      	mov	r0, r7
   2e7f0:	9300      	str	r3, [sp, #0]
   2e7f2:	4b06      	ldr	r3, [pc, #24]	; (2e80c <_svfiprintf_r+0x1ec>)
   2e7f4:	f7ff fc1a 	bl	2e02c <_printf_i>
   2e7f8:	e7ea      	b.n	2e7d0 <_svfiprintf_r+0x1b0>
   2e7fa:	bf00      	nop
   2e7fc:	00039065 	.word	0x00039065
   2e800:	0003906b 	.word	0x0003906b
   2e804:	0003906f 	.word	0x0003906f
   2e808:	0002dbd9 	.word	0x0002dbd9
   2e80c:	000353cf 	.word	0x000353cf

0002e810 <raise>:
   2e810:	4b02      	ldr	r3, [pc, #8]	; (2e81c <raise+0xc>)
   2e812:	4601      	mov	r1, r0
   2e814:	6818      	ldr	r0, [r3, #0]
   2e816:	f006 be35 	b.w	35484 <_raise_r>
   2e81a:	bf00      	nop
   2e81c:	200201e4 	.word	0x200201e4

0002e820 <_kill_r>:
   2e820:	b538      	push	{r3, r4, r5, lr}
   2e822:	2300      	movs	r3, #0
   2e824:	4c06      	ldr	r4, [pc, #24]	; (2e840 <_kill_r+0x20>)
   2e826:	4605      	mov	r5, r0
   2e828:	4608      	mov	r0, r1
   2e82a:	4611      	mov	r1, r2
   2e82c:	6023      	str	r3, [r4, #0]
   2e82e:	f002 fc3d 	bl	310ac <_kill>
   2e832:	1c43      	adds	r3, r0, #1
   2e834:	d102      	bne.n	2e83c <_kill_r+0x1c>
   2e836:	6823      	ldr	r3, [r4, #0]
   2e838:	b103      	cbz	r3, 2e83c <_kill_r+0x1c>
   2e83a:	602b      	str	r3, [r5, #0]
   2e83c:	bd38      	pop	{r3, r4, r5, pc}
   2e83e:	bf00      	nop
   2e840:	200290f0 	.word	0x200290f0

0002e844 <received_config_handler>:
void received_config_handler(const struct mqtt_publish_message *message) {
   2e844:	b508      	push	{r3, lr}
	cJSON * data_json = cJSON_Parse(message->payload.data);
   2e846:	68c0      	ldr	r0, [r0, #12]
   2e848:	f000 f8f0 	bl	2ea2c <cJSON_Parse>
}
   2e84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cJSON_Delete(data_json);
   2e850:	f7e7 b852 	b.w	158f8 <cJSON_Delete>

0002e854 <calculate_avg_val>:
{
   2e854:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(s32_t i=0; i<sz; i++) {
   2e856:	2400      	movs	r4, #0
        } else if (is_qual && a[i] != EXCLUDE) {
   2e858:	f240 37e7 	movw	r7, #999	; 0x3e7
    s32_t excl_cnt = 0;
   2e85c:	4625      	mov	r5, r4
    s32_t sum = 0;
   2e85e:	4623      	mov	r3, r4
    for(s32_t i=0; i<sz; i++) {
   2e860:	428c      	cmp	r4, r1
   2e862:	db07      	blt.n	2e874 <calculate_avg_val+0x20>
    if (excl_cnt == sz) {
   2e864:	428d      	cmp	r5, r1
        return (sum/(sz-excl_cnt));
   2e866:	bf1a      	itte	ne
   2e868:	1b48      	subne	r0, r1, r5
   2e86a:	fb93 f0f0 	sdivne	r0, r3, r0
        return (EXCLUDE);
   2e86e:	f240 30e7 	movweq	r0, #999	; 0x3e7
}
   2e872:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!is_qual) {
   2e874:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
   2e878:	b912      	cbnz	r2, 2e880 <calculate_avg_val+0x2c>
            sum += a[i];
   2e87a:	4433      	add	r3, r6
    for(s32_t i=0; i<sz; i++) {
   2e87c:	3401      	adds	r4, #1
   2e87e:	e7ef      	b.n	2e860 <calculate_avg_val+0xc>
        } else if (is_qual && a[i] != EXCLUDE) {
   2e880:	42be      	cmp	r6, r7
   2e882:	d1fa      	bne.n	2e87a <calculate_avg_val+0x26>
            excl_cnt += 1;
   2e884:	3501      	adds	r5, #1
   2e886:	e7f9      	b.n	2e87c <calculate_avg_val+0x28>

0002e888 <calculate_min_val>:
    for(i=1; i<sz; i++) {
   2e888:	2301      	movs	r3, #1
{
   2e88a:	b510      	push	{r4, lr}
 	min=a[0];
   2e88c:	6802      	ldr	r2, [r0, #0]
    for(i=1; i<sz; i++) {
   2e88e:	428b      	cmp	r3, r1
   2e890:	db01      	blt.n	2e896 <calculate_min_val+0xe>
}
   2e892:	4610      	mov	r0, r2
   2e894:	bd10      	pop	{r4, pc}
        if(min>a[i])
   2e896:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    for(i=1; i<sz; i++) {
   2e89a:	3301      	adds	r3, #1
   2e89c:	42a2      	cmp	r2, r4
   2e89e:	bfa8      	it	ge
   2e8a0:	4622      	movge	r2, r4
   2e8a2:	e7f4      	b.n	2e88e <calculate_min_val+0x6>

0002e8a4 <calculate_max_val>:
    for(i=1; i<sz; i++) {
   2e8a4:	2301      	movs	r3, #1
{
   2e8a6:	b510      	push	{r4, lr}
 	max=a[0];
   2e8a8:	6802      	ldr	r2, [r0, #0]
    for(i=1; i<sz; i++) {
   2e8aa:	428b      	cmp	r3, r1
   2e8ac:	db01      	blt.n	2e8b2 <calculate_max_val+0xe>
}
   2e8ae:	4610      	mov	r0, r2
   2e8b0:	bd10      	pop	{r4, pc}
        if(max<a[i])
   2e8b2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    for(i=1; i<sz; i++) {
   2e8b6:	3301      	adds	r3, #1
   2e8b8:	42a2      	cmp	r2, r4
   2e8ba:	bfb8      	it	lt
   2e8bc:	4622      	movlt	r2, r4
   2e8be:	e7f4      	b.n	2e8aa <calculate_max_val+0x6>

0002e8c0 <get_modem_info>:
{
   2e8c0:	b510      	push	{r4, lr}
    modem_info_string_get(MODEM_INFO_CELLID, info->cid, sizeof(info->cid));
   2e8c2:	4601      	mov	r1, r0
{
   2e8c4:	4604      	mov	r4, r0
    modem_info_string_get(MODEM_INFO_CELLID, info->cid, sizeof(info->cid));
   2e8c6:	221e      	movs	r2, #30
   2e8c8:	2008      	movs	r0, #8
   2e8ca:	f7ef ffa5 	bl	1e818 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_AREA_CODE, info->tac, sizeof(info->tac));
   2e8ce:	221e      	movs	r2, #30
   2e8d0:	2003      	movs	r0, #3
   2e8d2:	18a1      	adds	r1, r4, r2
   2e8d4:	f7ef ffa0 	bl	1e818 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_RSRP, info->rssi, sizeof(info->rssi));
   2e8d8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   2e8dc:	221e      	movs	r2, #30
   2e8de:	2000      	movs	r0, #0
   2e8e0:	f7ef ff9a 	bl	1e818 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_APN, info->apn, sizeof(info->apn));
   2e8e4:	f104 015a 	add.w	r1, r4, #90	; 0x5a
   2e8e8:	223c      	movs	r2, #60	; 0x3c
   2e8ea:	2015      	movs	r0, #21
   2e8ec:	f7ef ff94 	bl	1e818 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_FW_VERSION, info->fwv, sizeof(info->fwv));
   2e8f0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2e8f4:	223c      	movs	r2, #60	; 0x3c
   2e8f6:	200d      	movs	r0, #13
   2e8f8:	f7ef ff8e 	bl	1e818 <modem_info_string_get>
	modem_info_short_get(MODEM_INFO_BATTERY, &info->vltg);
   2e8fc:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
   2e900:	200b      	movs	r0, #11
   2e902:	f7ef ff57 	bl	1e7b4 <modem_info_short_get>
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   2e906:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
   2e90a:	200c      	movs	r0, #12
}
   2e90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   2e910:	f7ef bf50 	b.w	1e7b4 <modem_info_short_get>

0002e914 <k_msgq_get_atomic>:
int k_msgq_get_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2e914:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e916:	f04f 0320 	mov.w	r3, #32
   2e91a:	f3ef 8411 	mrs	r4, BASEPRI
   2e91e:	f383 8811 	msr	BASEPRI, r3
   2e922:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_get(msgq, data, timeout);
   2e926:	f7fa f9df 	bl	28ce8 <z_impl_k_msgq_get>
	__asm__ volatile(
   2e92a:	f384 8811 	msr	BASEPRI, r4
   2e92e:	f3bf 8f6f 	isb	sy
}
   2e932:	bd10      	pop	{r4, pc}

0002e934 <k_msgq_put_atomic>:
int k_msgq_put_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2e934:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e936:	f04f 0320 	mov.w	r3, #32
   2e93a:	f3ef 8411 	mrs	r4, BASEPRI
   2e93e:	f383 8811 	msr	BASEPRI, r3
   2e942:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_put(msgq, data, timeout);
   2e946:	f7fa f935 	bl	28bb4 <z_impl_k_msgq_put>
	__asm__ volatile(
   2e94a:	f384 8811 	msr	BASEPRI, r4
   2e94e:	f3bf 8f6f 	isb	sy
}
   2e952:	bd10      	pop	{r4, pc}

0002e954 <parse_hex4>:
{
   2e954:	b510      	push	{r4, lr}
	if (*str >= '0' && *str <= '9')
   2e956:	7802      	ldrb	r2, [r0, #0]
   2e958:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   2e95c:	b2d9      	uxtb	r1, r3
   2e95e:	2909      	cmp	r1, #9
   2e960:	d905      	bls.n	2e96e <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2e962:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   2e966:	2b05      	cmp	r3, #5
   2e968:	d81a      	bhi.n	2e9a0 <parse_hex4+0x4c>
		h += 10 + (*str) - 'A';
   2e96a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
	if (*str >= '0' && *str <= '9')
   2e96e:	7842      	ldrb	r2, [r0, #1]
	h = h << 4;
   2e970:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2e972:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2e976:	b2cc      	uxtb	r4, r1
   2e978:	2c09      	cmp	r4, #9
   2e97a:	d818      	bhi.n	2e9ae <parse_hex4+0x5a>
		h += (*str) - '0';
   2e97c:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2e97e:	7882      	ldrb	r2, [r0, #2]
	h = h << 4;
   2e980:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2e982:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2e986:	b2cc      	uxtb	r4, r1
   2e988:	2c09      	cmp	r4, #9
   2e98a:	d81d      	bhi.n	2e9c8 <parse_hex4+0x74>
		h += (*str) - '0';
   2e98c:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2e98e:	78c0      	ldrb	r0, [r0, #3]
	h = h << 4;
   2e990:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2e992:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   2e996:	b2d1      	uxtb	r1, r2
   2e998:	2909      	cmp	r1, #9
   2e99a:	d822      	bhi.n	2e9e2 <parse_hex4+0x8e>
		h += (*str) - '0';
   2e99c:	18d0      	adds	r0, r2, r3
}
   2e99e:	bd10      	pop	{r4, pc}
	else if (*str >= 'a' && *str <= 'f')
   2e9a0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   2e9a4:	2b05      	cmp	r3, #5
   2e9a6:	d829      	bhi.n	2e9fc <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2e9a8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   2e9ac:	e7df      	b.n	2e96e <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2e9ae:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2e9b2:	2905      	cmp	r1, #5
   2e9b4:	d802      	bhi.n	2e9bc <parse_hex4+0x68>
		h += 10 + (*str) - 'A';
   2e9b6:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2e9b8:	4413      	add	r3, r2
   2e9ba:	e7e0      	b.n	2e97e <parse_hex4+0x2a>
	else if (*str >= 'a' && *str <= 'f')
   2e9bc:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2e9c0:	2905      	cmp	r1, #5
   2e9c2:	d81b      	bhi.n	2e9fc <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2e9c4:	3a57      	subs	r2, #87	; 0x57
   2e9c6:	e7f7      	b.n	2e9b8 <parse_hex4+0x64>
	else if (*str >= 'A' && *str <= 'F')
   2e9c8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2e9cc:	2905      	cmp	r1, #5
   2e9ce:	d802      	bhi.n	2e9d6 <parse_hex4+0x82>
		h += 10 + (*str) - 'A';
   2e9d0:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2e9d2:	4413      	add	r3, r2
   2e9d4:	e7db      	b.n	2e98e <parse_hex4+0x3a>
	else if (*str >= 'a' && *str <= 'f')
   2e9d6:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2e9da:	2905      	cmp	r1, #5
   2e9dc:	d80e      	bhi.n	2e9fc <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2e9de:	3a57      	subs	r2, #87	; 0x57
   2e9e0:	e7f7      	b.n	2e9d2 <parse_hex4+0x7e>
	else if (*str >= 'A' && *str <= 'F')
   2e9e2:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
   2e9e6:	2a05      	cmp	r2, #5
   2e9e8:	d802      	bhi.n	2e9f0 <parse_hex4+0x9c>
		h += 10 + (*str) - 'A';
   2e9ea:	3837      	subs	r0, #55	; 0x37
		h += 10 + (*str) - 'a';
   2e9ec:	4418      	add	r0, r3
   2e9ee:	e7d6      	b.n	2e99e <parse_hex4+0x4a>
	else if (*str >= 'a' && *str <= 'f')
   2e9f0:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
   2e9f4:	2a05      	cmp	r2, #5
   2e9f6:	d801      	bhi.n	2e9fc <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2e9f8:	3857      	subs	r0, #87	; 0x57
   2e9fa:	e7f7      	b.n	2e9ec <parse_hex4+0x98>
		return 0;
   2e9fc:	2000      	movs	r0, #0
   2e9fe:	e7ce      	b.n	2e99e <parse_hex4+0x4a>

0002ea00 <skip>:
{
   2ea00:	4603      	mov	r3, r0
	while (in && *in && (unsigned char)*in <= 32)
   2ea02:	4618      	mov	r0, r3
   2ea04:	b123      	cbz	r3, 2ea10 <skip+0x10>
   2ea06:	7802      	ldrb	r2, [r0, #0]
   2ea08:	3301      	adds	r3, #1
   2ea0a:	3a01      	subs	r2, #1
   2ea0c:	2a1f      	cmp	r2, #31
   2ea0e:	d9f8      	bls.n	2ea02 <skip+0x2>
}
   2ea10:	4770      	bx	lr

0002ea12 <update>:
{
   2ea12:	b510      	push	{r4, lr}
	if (!p || !p->buffer)
   2ea14:	b138      	cbz	r0, 2ea26 <update+0x14>
   2ea16:	6803      	ldr	r3, [r0, #0]
   2ea18:	b133      	cbz	r3, 2ea28 <update+0x16>
	str = p->buffer + p->offset;
   2ea1a:	6884      	ldr	r4, [r0, #8]
	return p->offset + strlens(str);
   2ea1c:	1918      	adds	r0, r3, r4
   2ea1e:	d001      	beq.n	2ea24 <update+0x12>
   2ea20:	f7e3 fb2e 	bl	12080 <strlen>
   2ea24:	4420      	add	r0, r4
}
   2ea26:	bd10      	pop	{r4, pc}
		return 0;
   2ea28:	4618      	mov	r0, r3
   2ea2a:	e7fc      	b.n	2ea26 <update+0x14>

0002ea2c <cJSON_Parse>:
	return cJSON_ParseWithOpts(value, 0, 0);
   2ea2c:	2200      	movs	r2, #0
   2ea2e:	4611      	mov	r1, r2
   2ea30:	f7e6 bf86 	b.w	15940 <cJSON_ParseWithOpts>

0002ea34 <cJSON_Print>:
char *cJSON_Print(cJSON *item) { return print_value(item, 0, 1, 0); }
   2ea34:	2300      	movs	r3, #0
   2ea36:	2201      	movs	r2, #1
   2ea38:	4619      	mov	r1, r3
   2ea3a:	f7e6 bd0d 	b.w	15458 <print_value>

0002ea3e <cJSON_AddItemToArray>:
	if (!item)
   2ea3e:	b149      	cbz	r1, 2ea54 <cJSON_AddItemToArray+0x16>
	cJSON *c = array->child;
   2ea40:	6883      	ldr	r3, [r0, #8]
	if (!c) {
   2ea42:	b913      	cbnz	r3, 2ea4a <cJSON_AddItemToArray+0xc>
		array->child = item;
   2ea44:	6081      	str	r1, [r0, #8]
   2ea46:	4770      	bx	lr
   2ea48:	4613      	mov	r3, r2
		while (c && c->next)
   2ea4a:	681a      	ldr	r2, [r3, #0]
   2ea4c:	2a00      	cmp	r2, #0
   2ea4e:	d1fb      	bne.n	2ea48 <cJSON_AddItemToArray+0xa>
	prev->next = item;
   2ea50:	6019      	str	r1, [r3, #0]
	item->prev = prev;
   2ea52:	604b      	str	r3, [r1, #4]
}
   2ea54:	4770      	bx	lr

0002ea56 <cJSON_CreateNumber>:
	if (item)
		item->type = b ? cJSON_True : cJSON_False;
	return item;
}
cJSON *cJSON_CreateNumber(double num)
{
   2ea56:	b513      	push	{r0, r1, r4, lr}
   2ea58:	ed8d 0b00 	vstr	d0, [sp]
	cJSON *item = cJSON_New_Item();
   2ea5c:	f7e6 f9ea 	bl	14e34 <cJSON_New_Item>
	if (item) {
   2ea60:	4604      	mov	r4, r0
   2ea62:	b150      	cbz	r0, 2ea7a <cJSON_CreateNumber+0x24>
		item->type = cJSON_Number;
		item->valuedouble = num;
   2ea64:	ed9d 0b00 	vldr	d0, [sp]
		item->type = cJSON_Number;
   2ea68:	2303      	movs	r3, #3
		item->valuedouble = num;
   2ea6a:	ed80 0b06 	vstr	d0, [r0, #24]
		item->type = cJSON_Number;
   2ea6e:	60c3      	str	r3, [r0, #12]
		item->valueint = (int)num;
   2ea70:	ec51 0b10 	vmov	r0, r1, d0
   2ea74:	f7de fdb4 	bl	d5e0 <__aeabi_d2iz>
   2ea78:	6160      	str	r0, [r4, #20]
	}
	return item;
}
   2ea7a:	4620      	mov	r0, r4
   2ea7c:	b002      	add	sp, #8
   2ea7e:	bd10      	pop	{r4, pc}

0002ea80 <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)
{
   2ea80:	b538      	push	{r3, r4, r5, lr}
   2ea82:	4605      	mov	r5, r0
	cJSON *item = cJSON_New_Item();
   2ea84:	f7e6 f9d6 	bl	14e34 <cJSON_New_Item>
	if (item) {
   2ea88:	4604      	mov	r4, r0
   2ea8a:	b128      	cbz	r0, 2ea98 <cJSON_CreateString+0x18>
		item->type = cJSON_String;
   2ea8c:	2304      	movs	r3, #4
   2ea8e:	60c3      	str	r3, [r0, #12]
		item->valuestring = cJSON_strdup(string);
   2ea90:	4628      	mov	r0, r5
   2ea92:	f7e6 fb11 	bl	150b8 <cJSON_strdup>
   2ea96:	6120      	str	r0, [r4, #16]
	}
	return item;
}
   2ea98:	4620      	mov	r0, r4
   2ea9a:	bd38      	pop	{r3, r4, r5, pc}

0002ea9c <cJSON_CreateObject>:
	if (item)
		item->type = cJSON_Array;
	return item;
}
cJSON *cJSON_CreateObject(void)
{
   2ea9c:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   2ea9e:	f7e6 f9c9 	bl	14e34 <cJSON_New_Item>
	if (item)
   2eaa2:	b108      	cbz	r0, 2eaa8 <cJSON_CreateObject+0xc>
		item->type = cJSON_Object;
   2eaa4:	2306      	movs	r3, #6
   2eaa6:	60c3      	str	r3, [r0, #12]
	return item;
}
   2eaa8:	bd08      	pop	{r3, pc}

0002eaaa <config_load>:
}
   2eaaa:	2000      	movs	r0, #0
   2eaac:	4770      	bx	lr

0002eaae <get_timestamp_us>:
{
   2eaae:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
   2eab0:	f005 fee8 	bl	34884 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   2eab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2eab8:	fba0 4502 	umull	r4, r5, r0, r2
   2eabc:	fb02 5501 	mla	r5, r2, r1, r5
   2eac0:	0be3      	lsrs	r3, r4, #15
   2eac2:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
	return k_uptime_get()*1000;
   2eac6:	fba3 0102 	umull	r0, r1, r3, r2
   2eaca:	0bec      	lsrs	r4, r5, #15
   2eacc:	fb02 1104 	mla	r1, r2, r4, r1
}
   2ead0:	bd38      	pop	{r3, r4, r5, pc}

0002ead2 <k_sleep>:
	return z_impl_k_sleep(timeout);
   2ead2:	f7fb be9b 	b.w	2a80c <z_impl_k_sleep>

0002ead6 <delay_ms>:
	k_sleep(K_MSEC(period));
   2ead6:	f7ff bffc 	b.w	2ead2 <k_sleep>

0002eada <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   2eada:	b148      	cbz	r0, 2eaf0 <null_ptr_check+0x16>
   2eadc:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2eade:	b13b      	cbz	r3, 2eaf0 <null_ptr_check+0x16>
   2eae0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2eae2:	b12b      	cbz	r3, 2eaf0 <null_ptr_check+0x16>
   2eae4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2eae6:	fab0 f080 	clz	r0, r0
   2eaea:	0940      	lsrs	r0, r0, #5
   2eaec:	4240      	negs	r0, r0
   2eaee:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   2eaf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   2eaf4:	4770      	bx	lr

0002eaf6 <set_mem_page>:
{
   2eaf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2eaf8:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
   2eafa:	4608      	mov	r0, r1
{
   2eafc:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   2eafe:	f7ff ffec 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2eb02:	4605      	mov	r5, r0
   2eb04:	bb40      	cbnz	r0, 2eb58 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
   2eb06:	f012 0f80 	tst.w	r2, #128	; 0x80
   2eb0a:	bf14      	ite	ne
   2eb0c:	2300      	movne	r3, #0
   2eb0e:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
   2eb10:	78ca      	ldrb	r2, [r1, #3]
   2eb12:	429a      	cmp	r2, r3
   2eb14:	d020      	beq.n	2eb58 <set_mem_page+0x62>
			dev->mem_page = mem_page;
   2eb16:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2eb18:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   2eb1a:	2301      	movs	r3, #1
   2eb1c:	f10d 0207 	add.w	r2, sp, #7
   2eb20:	21f3      	movs	r1, #243	; 0xf3
   2eb22:	7860      	ldrb	r0, [r4, #1]
   2eb24:	47b0      	blx	r6
   2eb26:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   2eb2a:	b998      	cbnz	r0, 2eb54 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   2eb2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   2eb30:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
   2eb32:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   2eb36:	f003 0310 	and.w	r3, r3, #16
   2eb3a:	4313      	orrs	r3, r2
   2eb3c:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   2eb40:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   2eb42:	2301      	movs	r3, #1
   2eb44:	f10d 0207 	add.w	r2, sp, #7
   2eb48:	2173      	movs	r1, #115	; 0x73
   2eb4a:	7860      	ldrb	r0, [r4, #1]
   2eb4c:	47b0      	blx	r6
   2eb4e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
   2eb52:	b108      	cbz	r0, 2eb58 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
   2eb54:	f06f 0501 	mvn.w	r5, #1
}
   2eb58:	4628      	mov	r0, r5
   2eb5a:	b002      	add	sp, #8
   2eb5c:	bd70      	pop	{r4, r5, r6, pc}

0002eb5e <get_mem_page.part.3>:
static int8_t get_mem_page(struct bme680_dev *dev)
   2eb5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2eb60:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
   2eb62:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   2eb64:	6c85      	ldr	r5, [r0, #72]	; 0x48
   2eb66:	f10d 0207 	add.w	r2, sp, #7
   2eb6a:	21f3      	movs	r1, #243	; 0xf3
   2eb6c:	7840      	ldrb	r0, [r0, #1]
   2eb6e:	47a8      	blx	r5
   2eb70:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   2eb74:	b930      	cbnz	r0, 2eb84 <get_mem_page.part.3+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   2eb76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2eb7a:	f003 0310 	and.w	r3, r3, #16
   2eb7e:	70e3      	strb	r3, [r4, #3]
}
   2eb80:	b003      	add	sp, #12
   2eb82:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
   2eb84:	f06f 0001 	mvn.w	r0, #1
   2eb88:	e7fa      	b.n	2eb80 <get_mem_page.part.3+0x22>

0002eb8a <boundary_check.isra.1.constprop.6>:
		if (*value > max) {
   2eb8a:	7803      	ldrb	r3, [r0, #0]
   2eb8c:	428b      	cmp	r3, r1
			*value = max;
   2eb8e:	bf84      	itt	hi
   2eb90:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   2eb92:	7813      	ldrbhi	r3, [r2, #0]
}
   2eb94:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   2eb98:	bf84      	itt	hi
   2eb9a:	f043 0302 	orrhi.w	r3, r3, #2
   2eb9e:	7013      	strbhi	r3, [r2, #0]
}
   2eba0:	4770      	bx	lr

0002eba2 <bme680_get_regs>:
{
   2eba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2eba6:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
   2eba8:	4618      	mov	r0, r3
{
   2ebaa:	4688      	mov	r8, r1
   2ebac:	4691      	mov	r9, r2
   2ebae:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
   2ebb0:	f7ff ff93 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ebb4:	4604      	mov	r4, r0
   2ebb6:	b9a8      	cbnz	r0, 2ebe4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   2ebb8:	78ab      	ldrb	r3, [r5, #2]
   2ebba:	b93b      	cbnz	r3, 2ebcc <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
   2ebbc:	4629      	mov	r1, r5
   2ebbe:	4630      	mov	r0, r6
   2ebc0:	f7ff ff99 	bl	2eaf6 <set_mem_page>
			if (rslt == BME680_OK)
   2ebc4:	4604      	mov	r4, r0
   2ebc6:	b908      	cbnz	r0, 2ebcc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   2ebc8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   2ebcc:	6caf      	ldr	r7, [r5, #72]	; 0x48
   2ebce:	464b      	mov	r3, r9
   2ebd0:	4642      	mov	r2, r8
   2ebd2:	4631      	mov	r1, r6
   2ebd4:	7868      	ldrb	r0, [r5, #1]
   2ebd6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   2ebd8:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
   2ebda:	bf18      	it	ne
   2ebdc:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   2ebe0:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
   2ebe4:	4620      	mov	r0, r4
   2ebe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002ebea <bme680_set_regs>:
{
   2ebea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ebee:	461e      	mov	r6, r3
   2ebf0:	b08a      	sub	sp, #40	; 0x28
   2ebf2:	4680      	mov	r8, r0
   2ebf4:	4689      	mov	r9, r1
   2ebf6:	4615      	mov	r5, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   2ebf8:	2100      	movs	r1, #0
   2ebfa:	2228      	movs	r2, #40	; 0x28
   2ebfc:	4668      	mov	r0, sp
   2ebfe:	f005 ff49 	bl	34a94 <memset>
	rslt = null_ptr_check(dev);
   2ec02:	4630      	mov	r0, r6
   2ec04:	f7ff ff69 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ec08:	bb68      	cbnz	r0, 2ec66 <bme680_set_regs+0x7c>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   2ec0a:	1e6b      	subs	r3, r5, #1
   2ec0c:	2b12      	cmp	r3, #18
   2ec0e:	d82d      	bhi.n	2ec6c <bme680_set_regs+0x82>
   2ec10:	466c      	mov	r4, sp
   2ec12:	4607      	mov	r7, r0
			for (index = 0; index < len; index++) {
   2ec14:	fa1f fa85 	uxth.w	sl, r5
				if (dev->intf == BME680_SPI_INTF) {
   2ec18:	78b2      	ldrb	r2, [r6, #2]
   2ec1a:	f818 3007 	ldrb.w	r3, [r8, r7]
   2ec1e:	b93a      	cbnz	r2, 2ec30 <bme680_set_regs+0x46>
					rslt = set_mem_page(reg_addr[index], dev);
   2ec20:	4618      	mov	r0, r3
   2ec22:	4631      	mov	r1, r6
   2ec24:	f7ff ff67 	bl	2eaf6 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   2ec28:	f818 3007 	ldrb.w	r3, [r8, r7]
   2ec2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
					tmp_buff[(2 * index)] = reg_addr[index];
   2ec30:	7023      	strb	r3, [r4, #0]
				tmp_buff[(2 * index) + 1] = reg_data[index];
   2ec32:	f819 3007 	ldrb.w	r3, [r9, r7]
   2ec36:	3701      	adds	r7, #1
   2ec38:	7063      	strb	r3, [r4, #1]
			for (index = 0; index < len; index++) {
   2ec3a:	b2bb      	uxth	r3, r7
   2ec3c:	4553      	cmp	r3, sl
   2ec3e:	f104 0402 	add.w	r4, r4, #2
   2ec42:	d3e9      	bcc.n	2ec18 <bme680_set_regs+0x2e>
			if (rslt == BME680_OK) {
   2ec44:	b978      	cbnz	r0, 2ec66 <bme680_set_regs+0x7c>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   2ec46:	006b      	lsls	r3, r5, #1
   2ec48:	3b01      	subs	r3, #1
   2ec4a:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   2ec4c:	b29b      	uxth	r3, r3
   2ec4e:	f10d 0201 	add.w	r2, sp, #1
   2ec52:	f89d 1000 	ldrb.w	r1, [sp]
   2ec56:	7870      	ldrb	r0, [r6, #1]
   2ec58:	47a0      	blx	r4
					rslt = BME680_E_COM_FAIL;
   2ec5a:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   2ec5c:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
   2ec60:	bf18      	it	ne
   2ec62:	f06f 0001 	mvnne.w	r0, #1
}
   2ec66:	b00a      	add	sp, #40	; 0x28
   2ec68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rslt = BME680_E_INVALID_LENGTH;
   2ec6c:	f06f 0003 	mvn.w	r0, #3
   2ec70:	e7f9      	b.n	2ec66 <bme680_set_regs+0x7c>

0002ec72 <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   2ec72:	23e0      	movs	r3, #224	; 0xe0
{
   2ec74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   2ec76:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   2ec7a:	23b6      	movs	r3, #182	; 0xb6
{
   2ec7c:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   2ec7e:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   2ec82:	f7ff ff2a 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ec86:	4604      	mov	r4, r0
   2ec88:	b970      	cbnz	r0, 2eca8 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
   2ec8a:	78ab      	ldrb	r3, [r5, #2]
   2ec8c:	b17b      	cbz	r3, 2ecae <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   2ec8e:	462b      	mov	r3, r5
   2ec90:	2201      	movs	r2, #1
   2ec92:	f10d 0107 	add.w	r1, sp, #7
   2ec96:	f10d 0006 	add.w	r0, sp, #6
   2ec9a:	f7ff ffa6 	bl	2ebea <bme680_set_regs>
   2ec9e:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
   2eca0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2eca2:	200a      	movs	r0, #10
   2eca4:	4798      	blx	r3
			if (rslt == BME680_OK) {
   2eca6:	b14c      	cbz	r4, 2ecbc <bme680_soft_reset+0x4a>
}
   2eca8:	4620      	mov	r0, r4
   2ecaa:	b003      	add	sp, #12
   2ecac:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
   2ecae:	4628      	mov	r0, r5
   2ecb0:	f7ff ff55 	bl	2eb5e <get_mem_page.part.3>
		if (rslt == BME680_OK) {
   2ecb4:	4604      	mov	r4, r0
   2ecb6:	2800      	cmp	r0, #0
   2ecb8:	d1f6      	bne.n	2eca8 <bme680_soft_reset+0x36>
   2ecba:	e7e8      	b.n	2ec8e <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
   2ecbc:	78ab      	ldrb	r3, [r5, #2]
   2ecbe:	2b00      	cmp	r3, #0
   2ecc0:	d1f2      	bne.n	2eca8 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
   2ecc2:	4628      	mov	r0, r5
   2ecc4:	f7ff ff09 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ecc8:	4604      	mov	r4, r0
   2ecca:	2800      	cmp	r0, #0
   2eccc:	d1ec      	bne.n	2eca8 <bme680_soft_reset+0x36>
   2ecce:	4628      	mov	r0, r5
   2ecd0:	f7ff ff45 	bl	2eb5e <get_mem_page.part.3>
   2ecd4:	4604      	mov	r4, r0
   2ecd6:	e7e7      	b.n	2eca8 <bme680_soft_reset+0x36>

0002ecd8 <bme680_init>:
{
   2ecd8:	b530      	push	{r4, r5, lr}
   2ecda:	b08d      	sub	sp, #52	; 0x34
   2ecdc:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   2ecde:	f7ff fefc 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ece2:	4605      	mov	r5, r0
   2ece4:	2800      	cmp	r0, #0
   2ece6:	f040 80c8 	bne.w	2ee7a <bme680_init+0x1a2>
		rslt = bme680_soft_reset(dev);
   2ecea:	4620      	mov	r0, r4
   2ecec:	f7ff ffc1 	bl	2ec72 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   2ecf0:	4605      	mov	r5, r0
   2ecf2:	2800      	cmp	r0, #0
   2ecf4:	f040 80c1 	bne.w	2ee7a <bme680_init+0x1a2>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   2ecf8:	4623      	mov	r3, r4
   2ecfa:	2201      	movs	r2, #1
   2ecfc:	4621      	mov	r1, r4
   2ecfe:	20d0      	movs	r0, #208	; 0xd0
   2ed00:	f7ff ff4f 	bl	2eba2 <bme680_get_regs>
			if (rslt == BME680_OK) {
   2ed04:	4605      	mov	r5, r0
   2ed06:	2800      	cmp	r0, #0
   2ed08:	f040 80b7 	bne.w	2ee7a <bme680_init+0x1a2>
				if (dev->chip_id == BME680_CHIP_ID) {
   2ed0c:	7823      	ldrb	r3, [r4, #0]
   2ed0e:	2b61      	cmp	r3, #97	; 0x61
   2ed10:	f040 80b6 	bne.w	2ee80 <bme680_init+0x1a8>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   2ed14:	4601      	mov	r1, r0
   2ed16:	2229      	movs	r2, #41	; 0x29
   2ed18:	a801      	add	r0, sp, #4
   2ed1a:	f005 febb 	bl	34a94 <memset>
	rslt = null_ptr_check(dev);
   2ed1e:	4620      	mov	r0, r4
	uint8_t temp_var = 0; /* Temporary variable */
   2ed20:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
   2ed24:	f7ff fed9 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ed28:	4605      	mov	r5, r0
   2ed2a:	2800      	cmp	r0, #0
   2ed2c:	f040 80a5 	bne.w	2ee7a <bme680_init+0x1a2>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   2ed30:	4623      	mov	r3, r4
   2ed32:	2219      	movs	r2, #25
   2ed34:	a901      	add	r1, sp, #4
   2ed36:	2089      	movs	r0, #137	; 0x89
   2ed38:	f7ff ff33 	bl	2eba2 <bme680_get_regs>
		if (rslt == BME680_OK)
   2ed3c:	4605      	mov	r5, r0
   2ed3e:	b938      	cbnz	r0, 2ed50 <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   2ed40:	4623      	mov	r3, r4
   2ed42:	2210      	movs	r2, #16
   2ed44:	f10d 011d 	add.w	r1, sp, #29
   2ed48:	20e1      	movs	r0, #225	; 0xe1
   2ed4a:	f7ff ff2a 	bl	2eba2 <bme680_get_regs>
   2ed4e:	4605      	mov	r5, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   2ed50:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   2ed54:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   2ed58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ed5c:	82e3      	strh	r3, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   2ed5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2ed62:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2ed66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ed6a:	8323      	strh	r3, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   2ed6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   2ed70:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   2ed74:	76a3      	strb	r3, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   2ed76:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2ed7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ed7e:	83a3      	strh	r3, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   2ed80:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2ed84:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2ed88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ed8c:	83e3      	strh	r3, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   2ed8e:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   2ed92:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   2ed96:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   2ed9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2ed9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2eda2:	8463      	strh	r3, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   2eda4:	f89d 2012 	ldrb.w	r2, [sp, #18]
   2eda8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2edac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2edb0:	84a3      	strh	r3, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   2edb2:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   2edb6:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   2edba:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   2edbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2edc2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   2edc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2edca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2edce:	8523      	strh	r3, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   2edd0:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2edd4:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2edd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2eddc:	8563      	strh	r3, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   2edde:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2ede2:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   2ede6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   2edea:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2edee:	f003 020f 	and.w	r2, r3, #15
   2edf2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2edf6:	8122      	strh	r2, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2edf8:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   2edfc:	091b      	lsrs	r3, r3, #4
   2edfe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   2ee02:	8163      	strh	r3, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   2ee04:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   2ee06:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   2ee0a:	60e3      	str	r3, [r4, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   2ee0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2ee10:	7423      	strb	r3, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   2ee12:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   2ee16:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   2ee18:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2ee1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ee20:	8263      	strh	r3, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   2ee22:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   2ee26:	7523      	strb	r3, [r4, #20]
		if (rslt == BME680_OK) {
   2ee28:	bb15      	cbnz	r5, 2ee70 <bme680_init+0x198>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   2ee2a:	4623      	mov	r3, r4
   2ee2c:	2201      	movs	r2, #1
   2ee2e:	f10d 0103 	add.w	r1, sp, #3
   2ee32:	2002      	movs	r0, #2
   2ee34:	f7ff feb5 	bl	2eba2 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   2ee38:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
   2ee3c:	4605      	mov	r5, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   2ee3e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   2ee42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   2ee46:	b998      	cbnz	r0, 2ee70 <bme680_init+0x198>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   2ee48:	4623      	mov	r3, r4
   2ee4a:	2201      	movs	r2, #1
   2ee4c:	f10d 0103 	add.w	r1, sp, #3
   2ee50:	f7ff fea7 	bl	2eba2 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
   2ee54:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
   2ee58:	4605      	mov	r5, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
   2ee5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   2ee5e:	b938      	cbnz	r0, 2ee70 <bme680_init+0x198>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   2ee60:	4623      	mov	r3, r4
   2ee62:	2201      	movs	r2, #1
   2ee64:	f10d 0103 	add.w	r1, sp, #3
   2ee68:	2004      	movs	r0, #4
   2ee6a:	f7ff fe9a 	bl	2eba2 <bme680_get_regs>
   2ee6e:	4605      	mov	r5, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   2ee70:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   2ee74:	111b      	asrs	r3, r3, #4
   2ee76:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
   2ee7a:	4628      	mov	r0, r5
   2ee7c:	b00d      	add	sp, #52	; 0x34
   2ee7e:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
   2ee80:	f06f 0502 	mvn.w	r5, #2
   2ee84:	e7f9      	b.n	2ee7a <bme680_init+0x1a2>

0002ee86 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   2ee86:	2374      	movs	r3, #116	; 0x74
{
   2ee88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ee8a:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   2ee8c:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   2ee90:	f7ff fe23 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ee94:	bba0      	cbnz	r0, 2ef00 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
   2ee96:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   2ee98:	4623      	mov	r3, r4
   2ee9a:	2201      	movs	r2, #1
   2ee9c:	f10d 0106 	add.w	r1, sp, #6
   2eea0:	2074      	movs	r0, #116	; 0x74
   2eea2:	f7ff fe7e 	bl	2eba2 <bme680_get_regs>
			if (rslt == BME680_OK) {
   2eea6:	b9a0      	cbnz	r0, 2eed2 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   2eea8:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
   2eeac:	f013 0503 	ands.w	r5, r3, #3
   2eeb0:	d011      	beq.n	2eed6 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   2eeb2:	f023 0303 	bic.w	r3, r3, #3
   2eeb6:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   2eeba:	2201      	movs	r2, #1
   2eebc:	4623      	mov	r3, r4
   2eebe:	f10d 0106 	add.w	r1, sp, #6
   2eec2:	f10d 0007 	add.w	r0, sp, #7
   2eec6:	f7ff fe90 	bl	2ebea <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   2eeca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2eecc:	200a      	movs	r0, #10
   2eece:	4798      	blx	r3
   2eed0:	e7e2      	b.n	2ee98 <bme680_set_sensor_mode+0x12>
		} while (pow_mode != BME680_SLEEP_MODE);
   2eed2:	2d00      	cmp	r5, #0
   2eed4:	d1e0      	bne.n	2ee98 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
   2eed6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   2eeda:	b18a      	cbz	r2, 2ef00 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   2eedc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2eee0:	f002 0203 	and.w	r2, r2, #3
   2eee4:	f023 0303 	bic.w	r3, r3, #3
   2eee8:	4313      	orrs	r3, r2
   2eeea:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   2eeee:	b938      	cbnz	r0, 2ef00 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   2eef0:	4623      	mov	r3, r4
   2eef2:	2201      	movs	r2, #1
   2eef4:	f10d 0106 	add.w	r1, sp, #6
   2eef8:	f10d 0007 	add.w	r0, sp, #7
   2eefc:	f7ff fe75 	bl	2ebea <bme680_set_regs>
}
   2ef00:	b003      	add	sp, #12
   2ef02:	bd30      	pop	{r4, r5, pc}

0002ef04 <bme680_get_sensor_mode>:
{
   2ef04:	b513      	push	{r0, r1, r4, lr}
   2ef06:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   2ef08:	f7ff fde7 	bl	2eada <null_ptr_check>
	if (rslt == BME680_OK) {
   2ef0c:	b960      	cbnz	r0, 2ef28 <bme680_get_sensor_mode+0x24>
		rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &mode, 1, dev);
   2ef0e:	4623      	mov	r3, r4
   2ef10:	2201      	movs	r2, #1
   2ef12:	f10d 0107 	add.w	r1, sp, #7
   2ef16:	2074      	movs	r0, #116	; 0x74
   2ef18:	f7ff fe43 	bl	2eba2 <bme680_get_regs>
		dev->power_mode = mode & BME680_MODE_MSK;
   2ef1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ef20:	f003 0303 	and.w	r3, r3, #3
   2ef24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
   2ef28:	b002      	add	sp, #8
   2ef2a:	bd10      	pop	{r4, pc}

0002ef2c <arch_printk_char_out>:
}
   2ef2c:	2000      	movs	r0, #0
   2ef2e:	4770      	bx	lr

0002ef30 <print_err>:
{
   2ef30:	b570      	push	{r4, r5, r6, lr}
   2ef32:	460d      	mov	r5, r1
   2ef34:	4604      	mov	r4, r0
	out('E', ctx);
   2ef36:	2045      	movs	r0, #69	; 0x45
   2ef38:	47a0      	blx	r4
	out('R', ctx);
   2ef3a:	4629      	mov	r1, r5
   2ef3c:	2052      	movs	r0, #82	; 0x52
   2ef3e:	47a0      	blx	r4
	out('R', ctx);
   2ef40:	4629      	mov	r1, r5
   2ef42:	4623      	mov	r3, r4
}
   2ef44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2ef48:	2052      	movs	r0, #82	; 0x52
   2ef4a:	4718      	bx	r3

0002ef4c <str_out>:
{
   2ef4c:	b530      	push	{r4, r5, lr}
   2ef4e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2ef50:	680c      	ldr	r4, [r1, #0]
   2ef52:	1c55      	adds	r5, r2, #1
   2ef54:	b114      	cbz	r4, 2ef5c <str_out+0x10>
   2ef56:	684b      	ldr	r3, [r1, #4]
   2ef58:	4293      	cmp	r3, r2
   2ef5a:	dc01      	bgt.n	2ef60 <str_out+0x14>
		ctx->count++;
   2ef5c:	608d      	str	r5, [r1, #8]
}
   2ef5e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2ef60:	3b01      	subs	r3, #1
   2ef62:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2ef64:	bf08      	it	eq
   2ef66:	2200      	moveq	r2, #0
   2ef68:	608d      	str	r5, [r1, #8]
   2ef6a:	bf0c      	ite	eq
   2ef6c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2ef6e:	54a0      	strbne	r0, [r4, r2]
   2ef70:	e7f5      	b.n	2ef5e <str_out+0x12>

0002ef72 <z_vprintk>:
{
   2ef72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   2ef76:	f04f 0800 	mov.w	r8, #0
{
   2ef7a:	4606      	mov	r6, r0
   2ef7c:	460f      	mov	r7, r1
	int min_width = -1;
   2ef7e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   2ef82:	46c1      	mov	r9, r8
{
   2ef84:	b08b      	sub	sp, #44	; 0x2c
   2ef86:	461c      	mov	r4, r3
	while (*fmt) {
   2ef88:	1e53      	subs	r3, r2, #1
   2ef8a:	9302      	str	r3, [sp, #8]
			might_format = 0;
   2ef8c:	2500      	movs	r5, #0
					break;
   2ef8e:	e005      	b.n	2ef9c <z_vprintk+0x2a>
		if (!might_format) {
   2ef90:	b96d      	cbnz	r5, 2efae <z_vprintk+0x3c>
			if (*fmt != '%') {
   2ef92:	2825      	cmp	r0, #37	; 0x25
   2ef94:	f000 814f 	beq.w	2f236 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   2ef98:	4639      	mov	r1, r7
   2ef9a:	47b0      	blx	r6
	while (*fmt) {
   2ef9c:	9b02      	ldr	r3, [sp, #8]
   2ef9e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2efa2:	9302      	str	r3, [sp, #8]
   2efa4:	2800      	cmp	r0, #0
   2efa6:	d1f3      	bne.n	2ef90 <z_vprintk+0x1e>
}
   2efa8:	b00b      	add	sp, #44	; 0x2c
   2efaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   2efae:	2864      	cmp	r0, #100	; 0x64
   2efb0:	d06e      	beq.n	2f090 <z_vprintk+0x11e>
   2efb2:	d81a      	bhi.n	2efea <z_vprintk+0x78>
   2efb4:	2839      	cmp	r0, #57	; 0x39
   2efb6:	d80a      	bhi.n	2efce <z_vprintk+0x5c>
   2efb8:	2831      	cmp	r0, #49	; 0x31
   2efba:	d260      	bcs.n	2f07e <z_vprintk+0x10c>
   2efbc:	282d      	cmp	r0, #45	; 0x2d
   2efbe:	f000 8140 	beq.w	2f242 <z_vprintk+0x2d0>
   2efc2:	2830      	cmp	r0, #48	; 0x30
   2efc4:	d04c      	beq.n	2f060 <z_vprintk+0xee>
   2efc6:	2825      	cmp	r0, #37	; 0x25
   2efc8:	d107      	bne.n	2efda <z_vprintk+0x68>
				out((int)'%', ctx);
   2efca:	4639      	mov	r1, r7
   2efcc:	e00b      	b.n	2efe6 <z_vprintk+0x74>
			switch (*fmt) {
   2efce:	2858      	cmp	r0, #88	; 0x58
   2efd0:	f000 80bb 	beq.w	2f14a <z_vprintk+0x1d8>
   2efd4:	2863      	cmp	r0, #99	; 0x63
   2efd6:	f000 812a 	beq.w	2f22e <z_vprintk+0x2bc>
					out((int)'%', ctx);
   2efda:	4639      	mov	r1, r7
   2efdc:	2025      	movs	r0, #37	; 0x25
   2efde:	47b0      	blx	r6
					out((int)*fmt, ctx);
   2efe0:	4639      	mov	r1, r7
   2efe2:	9b02      	ldr	r3, [sp, #8]
   2efe4:	7818      	ldrb	r0, [r3, #0]
   2efe6:	47b0      	blx	r6
   2efe8:	e7d0      	b.n	2ef8c <z_vprintk+0x1a>
			switch (*fmt) {
   2efea:	2870      	cmp	r0, #112	; 0x70
   2efec:	f000 80a3 	beq.w	2f136 <z_vprintk+0x1c4>
   2eff0:	d811      	bhi.n	2f016 <z_vprintk+0xa4>
   2eff2:	2869      	cmp	r0, #105	; 0x69
   2eff4:	d04c      	beq.n	2f090 <z_vprintk+0x11e>
   2eff6:	286c      	cmp	r0, #108	; 0x6c
   2eff8:	d105      	bne.n	2f006 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   2effa:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2effe:	d12a      	bne.n	2f056 <z_vprintk+0xe4>
					length_mod = 'L';
   2f000:	f04f 084c 	mov.w	r8, #76	; 0x4c
   2f004:	e7ca      	b.n	2ef9c <z_vprintk+0x2a>
			switch (*fmt) {
   2f006:	2868      	cmp	r0, #104	; 0x68
   2f008:	d1e7      	bne.n	2efda <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   2f00a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   2f00e:	d122      	bne.n	2f056 <z_vprintk+0xe4>
					length_mod = 'H';
   2f010:	f04f 0848 	mov.w	r8, #72	; 0x48
   2f014:	e7c2      	b.n	2ef9c <z_vprintk+0x2a>
			switch (*fmt) {
   2f016:	2875      	cmp	r0, #117	; 0x75
   2f018:	d071      	beq.n	2f0fe <z_vprintk+0x18c>
   2f01a:	d818      	bhi.n	2f04e <z_vprintk+0xdc>
   2f01c:	2873      	cmp	r0, #115	; 0x73
   2f01e:	d1dc      	bne.n	2efda <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   2f020:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   2f024:	46ab      	mov	fp, r5
   2f026:	465b      	mov	r3, fp
   2f028:	f81b 0b01 	ldrb.w	r0, [fp], #1
   2f02c:	2800      	cmp	r0, #0
   2f02e:	f040 80fb 	bne.w	2f228 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   2f032:	f1b9 0f03 	cmp.w	r9, #3
   2f036:	f040 810a 	bne.w	2f24e <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   2f03a:	1b5d      	subs	r5, r3, r5
   2f03c:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   2f040:	2d00      	cmp	r5, #0
   2f042:	dda3      	ble.n	2ef8c <z_vprintk+0x1a>
						out(' ', ctx);
   2f044:	4639      	mov	r1, r7
   2f046:	2020      	movs	r0, #32
   2f048:	47b0      	blx	r6
   2f04a:	3d01      	subs	r5, #1
   2f04c:	e7f8      	b.n	2f040 <z_vprintk+0xce>
			switch (*fmt) {
   2f04e:	2878      	cmp	r0, #120	; 0x78
   2f050:	d07b      	beq.n	2f14a <z_vprintk+0x1d8>
   2f052:	287a      	cmp	r0, #122	; 0x7a
   2f054:	d1c1      	bne.n	2efda <z_vprintk+0x68>
				} else if (length_mod == 0) {
   2f056:	f1b8 0f00 	cmp.w	r8, #0
   2f05a:	d1be      	bne.n	2efda <z_vprintk+0x68>
   2f05c:	4680      	mov	r8, r0
   2f05e:	e79d      	b.n	2ef9c <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   2f060:	f1ba 0f00 	cmp.w	sl, #0
   2f064:	da0e      	bge.n	2f084 <z_vprintk+0x112>
   2f066:	f1b9 0f00 	cmp.w	r9, #0
   2f06a:	f000 80ed 	beq.w	2f248 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   2f06e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   2f072:	f1b9 0f00 	cmp.w	r9, #0
   2f076:	bf08      	it	eq
   2f078:	f04f 0902 	moveq.w	r9, #2
   2f07c:	e78e      	b.n	2ef9c <z_vprintk+0x2a>
				if (min_width < 0) {
   2f07e:	f1ba 0f00 	cmp.w	sl, #0
   2f082:	dbf4      	blt.n	2f06e <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   2f084:	230a      	movs	r3, #10
   2f086:	fb03 0a0a 	mla	sl, r3, sl, r0
   2f08a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   2f08e:	e7f0      	b.n	2f072 <z_vprintk+0x100>
				if (length_mod == 'z') {
   2f090:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2f094:	d102      	bne.n	2f09c <z_vprintk+0x12a>
					d = va_arg(ap, int);
   2f096:	f854 5b04 	ldr.w	r5, [r4], #4
   2f09a:	e01f      	b.n	2f0dc <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   2f09c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2f0a0:	d0f9      	beq.n	2f096 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   2f0a2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2f0a6:	d1f6      	bne.n	2f096 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   2f0a8:	3407      	adds	r4, #7
   2f0aa:	f024 0407 	bic.w	r4, r4, #7
   2f0ae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   2f0b2:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   2f0b6:	9106      	str	r1, [sp, #24]
   2f0b8:	f143 0100 	adc.w	r1, r3, #0
   2f0bc:	9107      	str	r1, [sp, #28]
   2f0be:	2100      	movs	r1, #0
   2f0c0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   2f0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f0c8:	4561      	cmp	r1, ip
   2f0ca:	bf08      	it	eq
   2f0cc:	4558      	cmpeq	r0, fp
   2f0ce:	d204      	bcs.n	2f0da <z_vprintk+0x168>
						print_err(out, ctx);
   2f0d0:	4639      	mov	r1, r7
   2f0d2:	4630      	mov	r0, r6
   2f0d4:	f7ff ff2c 	bl	2ef30 <print_err>
						break;
   2f0d8:	e758      	b.n	2ef8c <z_vprintk+0x1a>
					d = lld;
   2f0da:	4615      	mov	r5, r2
				if (d < 0) {
   2f0dc:	2d00      	cmp	r5, #0
   2f0de:	da05      	bge.n	2f0ec <z_vprintk+0x17a>
					out((int)'-', ctx);
   2f0e0:	4639      	mov	r1, r7
   2f0e2:	202d      	movs	r0, #45	; 0x2d
   2f0e4:	47b0      	blx	r6
					d = -d;
   2f0e6:	426d      	negs	r5, r5
					min_width--;
   2f0e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   2f0ec:	464b      	mov	r3, r9
   2f0ee:	462a      	mov	r2, r5
   2f0f0:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   2f0f4:	4639      	mov	r1, r7
   2f0f6:	4630      	mov	r0, r6
   2f0f8:	f7e7 ff04 	bl	16f04 <_printk_dec_ulong>
				break;
   2f0fc:	e746      	b.n	2ef8c <z_vprintk+0x1a>
				if (length_mod == 'z') {
   2f0fe:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   2f102:	d102      	bne.n	2f10a <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   2f104:	f854 2b04 	ldr.w	r2, [r4], #4
   2f108:	e011      	b.n	2f12e <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   2f10a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2f10e:	d0f9      	beq.n	2f104 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   2f110:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2f114:	d1f6      	bne.n	2f104 <z_vprintk+0x192>
					if (llu > ~0UL) {
   2f116:	2100      	movs	r1, #0
   2f118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   2f11c:	3407      	adds	r4, #7
   2f11e:	f024 0407 	bic.w	r4, r4, #7
   2f122:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   2f126:	4299      	cmp	r1, r3
   2f128:	bf08      	it	eq
   2f12a:	4290      	cmpeq	r0, r2
   2f12c:	d3d0      	bcc.n	2f0d0 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   2f12e:	f8cd a000 	str.w	sl, [sp]
   2f132:	464b      	mov	r3, r9
   2f134:	e7de      	b.n	2f0f4 <z_vprintk+0x182>
				out('0', ctx);
   2f136:	4639      	mov	r1, r7
   2f138:	2030      	movs	r0, #48	; 0x30
   2f13a:	47b0      	blx	r6
				out('x', ctx);
   2f13c:	4639      	mov	r1, r7
   2f13e:	2078      	movs	r0, #120	; 0x78
   2f140:	47b0      	blx	r6
					min_width = 8;
   2f142:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   2f146:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   2f14a:	9b02      	ldr	r3, [sp, #8]
   2f14c:	781b      	ldrb	r3, [r3, #0]
   2f14e:	2b70      	cmp	r3, #112	; 0x70
   2f150:	d104      	bne.n	2f15c <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   2f152:	f854 3b04 	ldr.w	r3, [r4], #4
   2f156:	9304      	str	r3, [sp, #16]
   2f158:	2300      	movs	r3, #0
   2f15a:	e00d      	b.n	2f178 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   2f15c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   2f160:	d0f7      	beq.n	2f152 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   2f162:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   2f166:	d1f4      	bne.n	2f152 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   2f168:	3407      	adds	r4, #7
   2f16a:	f024 0307 	bic.w	r3, r4, #7
   2f16e:	461c      	mov	r4, r3
   2f170:	f854 2b08 	ldr.w	r2, [r4], #8
   2f174:	685b      	ldr	r3, [r3, #4]
   2f176:	9204      	str	r2, [sp, #16]
	int digits = 0;
   2f178:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   2f17a:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   2f17c:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   2f180:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   2f182:	9105      	str	r1, [sp, #20]
		shift -= 4;
   2f184:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   2f188:	9804      	ldr	r0, [sp, #16]
   2f18a:	f1cb 0c20 	rsb	ip, fp, #32
   2f18e:	f1ab 0120 	sub.w	r1, fp, #32
   2f192:	fa20 f00b 	lsr.w	r0, r0, fp
   2f196:	fa03 fc0c 	lsl.w	ip, r3, ip
   2f19a:	ea40 000c 	orr.w	r0, r0, ip
   2f19e:	fa23 f101 	lsr.w	r1, r3, r1
   2f1a2:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   2f1a4:	f010 000f 	ands.w	r0, r0, #15
   2f1a8:	d106      	bne.n	2f1b8 <z_vprintk+0x246>
   2f1aa:	9905      	ldr	r1, [sp, #20]
   2f1ac:	b911      	cbnz	r1, 2f1b4 <z_vprintk+0x242>
   2f1ae:	f1bb 0f00 	cmp.w	fp, #0
   2f1b2:	d122      	bne.n	2f1fa <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   2f1b4:	2130      	movs	r1, #48	; 0x30
   2f1b6:	e003      	b.n	2f1c0 <z_vprintk+0x24e>
   2f1b8:	2809      	cmp	r0, #9
   2f1ba:	bf8c      	ite	hi
   2f1bc:	2157      	movhi	r1, #87	; 0x57
   2f1be:	2130      	movls	r1, #48	; 0x30
   2f1c0:	4408      	add	r0, r1
			out((int)nibble, ctx);
   2f1c2:	b240      	sxtb	r0, r0
   2f1c4:	4639      	mov	r1, r7
   2f1c6:	9308      	str	r3, [sp, #32]
   2f1c8:	9205      	str	r2, [sp, #20]
   2f1ca:	47b0      	blx	r6
			digits++;
   2f1cc:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   2f1ce:	9a05      	ldr	r2, [sp, #20]
			digits++;
   2f1d0:	3301      	adds	r3, #1
   2f1d2:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   2f1d4:	9b08      	ldr	r3, [sp, #32]
   2f1d6:	f1bb 0f00 	cmp.w	fp, #0
   2f1da:	d123      	bne.n	2f224 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   2f1dc:	f1b9 0f03 	cmp.w	r9, #3
   2f1e0:	f47f aed4 	bne.w	2ef8c <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   2f1e4:	9b03      	ldr	r3, [sp, #12]
   2f1e6:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   2f1ea:	2d00      	cmp	r5, #0
   2f1ec:	f77f aece 	ble.w	2ef8c <z_vprintk+0x1a>
			out(' ', ctx);
   2f1f0:	4639      	mov	r1, r7
   2f1f2:	2020      	movs	r0, #32
   2f1f4:	47b0      	blx	r6
   2f1f6:	3d01      	subs	r5, #1
   2f1f8:	e7f7      	b.n	2f1ea <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   2f1fa:	1e51      	subs	r1, r2, #1
   2f1fc:	4592      	cmp	sl, r2
   2f1fe:	9108      	str	r1, [sp, #32]
   2f200:	db07      	blt.n	2f212 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   2f202:	f1b9 0f01 	cmp.w	r9, #1
   2f206:	d106      	bne.n	2f216 <z_vprintk+0x2a4>
				out('0', ctx);
   2f208:	4639      	mov	r1, r7
   2f20a:	2030      	movs	r0, #48	; 0x30
   2f20c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2f20e:	47b0      	blx	r6
   2f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   2f212:	9a08      	ldr	r2, [sp, #32]
   2f214:	e7b6      	b.n	2f184 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   2f216:	f1b9 0f02 	cmp.w	r9, #2
   2f21a:	d1fa      	bne.n	2f212 <z_vprintk+0x2a0>
   2f21c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   2f21e:	4639      	mov	r1, r7
   2f220:	2020      	movs	r0, #32
   2f222:	e7f4      	b.n	2f20e <z_vprintk+0x29c>
			found_largest_digit = 1;
   2f224:	9505      	str	r5, [sp, #20]
   2f226:	e7ad      	b.n	2f184 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   2f228:	4639      	mov	r1, r7
   2f22a:	47b0      	blx	r6
   2f22c:	e6fb      	b.n	2f026 <z_vprintk+0xb4>
				out(c, ctx);
   2f22e:	4639      	mov	r1, r7
   2f230:	f854 0b04 	ldr.w	r0, [r4], #4
   2f234:	e6d7      	b.n	2efe6 <z_vprintk+0x74>
				length_mod = 0;
   2f236:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   2f238:	46a9      	mov	r9, r5
				min_width = -1;
   2f23a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   2f23e:	2501      	movs	r5, #1
   2f240:	e6ac      	b.n	2ef9c <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   2f242:	f04f 0903 	mov.w	r9, #3
   2f246:	e6a9      	b.n	2ef9c <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   2f248:	f04f 0901 	mov.w	r9, #1
   2f24c:	e6a6      	b.n	2ef9c <z_vprintk+0x2a>
			might_format = 0;
   2f24e:	4605      	mov	r5, r0
		++fmt;
   2f250:	e6a4      	b.n	2ef9c <z_vprintk+0x2a>

0002f252 <printk>:
{
   2f252:	b40f      	push	{r0, r1, r2, r3}
   2f254:	b507      	push	{r0, r1, r2, lr}
   2f256:	a904      	add	r1, sp, #16
   2f258:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2f25c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2f25e:	f7e7 fe9d 	bl	16f9c <vprintk>
}
   2f262:	b003      	add	sp, #12
   2f264:	f85d eb04 	ldr.w	lr, [sp], #4
   2f268:	b004      	add	sp, #16
   2f26a:	4770      	bx	lr

0002f26c <snprintk>:
{
   2f26c:	b40c      	push	{r2, r3}
   2f26e:	b507      	push	{r0, r1, r2, lr}
   2f270:	ab04      	add	r3, sp, #16
   2f272:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2f276:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2f278:	f7e7 fe9e 	bl	16fb8 <vsnprintk>
}
   2f27c:	b003      	add	sp, #12
   2f27e:	f85d eb04 	ldr.w	lr, [sp], #4
   2f282:	b002      	add	sp, #8
   2f284:	4770      	bx	lr

0002f286 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2f286:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2f288:	f7fb fb02 	bl	2a890 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2f28c:	2000      	movs	r0, #0
   2f28e:	bd08      	pop	{r3, pc}

0002f290 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2f290:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2f292:	f7fb fb41 	bl	2a918 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2f296:	f110 0f0b 	cmn.w	r0, #11
   2f29a:	d005      	beq.n	2f2a8 <sys_sem_take+0x18>
   2f29c:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2f2a0:	bf08      	it	eq
   2f2a2:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2f2a6:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2f2a8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2f2ac:	e7fb      	b.n	2f2a6 <sys_sem_take+0x16>

0002f2ae <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2f2ae:	4604      	mov	r4, r0
   2f2b0:	b508      	push	{r3, lr}
   2f2b2:	4608      	mov	r0, r1
   2f2b4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2f2b6:	461a      	mov	r2, r3
   2f2b8:	47a0      	blx	r4
	return z_impl_k_current_get();
   2f2ba:	f7fb fae3 	bl	2a884 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2f2be:	f7e9 fed9 	bl	19074 <z_impl_k_thread_abort>

0002f2c2 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2f2c2:	b510      	push	{r4, lr}
   2f2c4:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2f2c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2f2ca:	4620      	mov	r0, r4
   2f2cc:	f7fa f85a 	bl	29384 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2f2d0:	4603      	mov	r3, r0
   2f2d2:	2800      	cmp	r0, #0
   2f2d4:	d0f7      	beq.n	2f2c6 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2f2d6:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f2d8:	3308      	adds	r3, #8
   2f2da:	e8d3 1fef 	ldaex	r1, [r3]
   2f2de:	f021 0c01 	bic.w	ip, r1, #1
   2f2e2:	e8c3 cfee 	stlex	lr, ip, [r3]
   2f2e6:	f1be 0f00 	cmp.w	lr, #0
   2f2ea:	d1f6      	bne.n	2f2da <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2f2ec:	07cb      	lsls	r3, r1, #31
   2f2ee:	d500      	bpl.n	2f2f2 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2f2f0:	4790      	blx	r2
	z_impl_k_yield();
   2f2f2:	f7fb f949 	bl	2a588 <z_impl_k_yield>
   2f2f6:	e7e6      	b.n	2f2c6 <z_work_q_main+0x4>

0002f2f8 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   2f2f8:	6803      	ldr	r3, [r0, #0]
   2f2fa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   2f2fe:	6883      	ldr	r3, [r0, #8]
   2f300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   2f304:	bf2c      	ite	cs
   2f306:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   2f30a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   2f30e:	4770      	bx	lr

0002f310 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   2f310:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   2f312:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   2f314:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   2f316:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   2f31a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   2f31e:	bf2c      	ite	cs
   2f320:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   2f324:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2f328:	bd10      	pop	{r4, pc}

0002f32a <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   2f32a:	b538      	push	{r3, r4, r5, lr}
   2f32c:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f32e:	2200      	movs	r2, #0
{
   2f330:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f332:	f7ff ffe1 	bl	2f2f8 <chunk_field>
   2f336:	68eb      	ldr	r3, [r5, #12]
   2f338:	4018      	ands	r0, r3
	return c + size(h, c);
}
   2f33a:	4420      	add	r0, r4
   2f33c:	bd38      	pop	{r3, r4, r5, pc}

0002f33e <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   2f33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   2f342:	6847      	ldr	r7, [r0, #4]
{
   2f344:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   2f346:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   2f34a:	6853      	ldr	r3, [r2, #4]
{
   2f34c:	4604      	mov	r4, r0
	b->list_size--;
   2f34e:	3b01      	subs	r3, #1
{
   2f350:	460d      	mov	r5, r1
	b->list_size--;
   2f352:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   2f354:	b953      	cbnz	r3, 2f36c <free_list_remove+0x2e>
		h->avail_buckets &= ~(1 << bidx);
   2f356:	2201      	movs	r2, #1
   2f358:	fa02 f101 	lsl.w	r1, r2, r1
   2f35c:	6942      	ldr	r2, [r0, #20]
   2f35e:	ea22 0201 	bic.w	r2, r2, r1
   2f362:	6142      	str	r2, [r0, #20]
		b->next = 0;
   2f364:	f847 3035 	str.w	r3, [r7, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   2f368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2f36c:	4631      	mov	r1, r6
   2f36e:	2202      	movs	r2, #2
   2f370:	f7ff ffc2 	bl	2f2f8 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   2f374:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   2f376:	4680      	mov	r8, r0
	return chunk_field(h, c, FREE_NEXT);
   2f378:	2203      	movs	r2, #3
   2f37a:	4620      	mov	r0, r4
   2f37c:	f7ff ffbc 	bl	2f2f8 <chunk_field>
   2f380:	4606      	mov	r6, r0
		b->next = second;
   2f382:	f847 0035 	str.w	r0, [r7, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   2f386:	4603      	mov	r3, r0
   2f388:	4641      	mov	r1, r8
   2f38a:	4620      	mov	r0, r4
   2f38c:	2203      	movs	r2, #3
   2f38e:	f7ff ffbf 	bl	2f310 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   2f392:	4643      	mov	r3, r8
   2f394:	4631      	mov	r1, r6
   2f396:	4620      	mov	r0, r4
}
   2f398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   2f39c:	2202      	movs	r2, #2
   2f39e:	f7ff bfb7 	b.w	2f310 <chunk_set>

0002f3a2 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2f3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f3a6:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f3a8:	2200      	movs	r2, #0
   2f3aa:	460d      	mov	r5, r1
   2f3ac:	f7ff ffa4 	bl	2f2f8 <chunk_field>
   2f3b0:	68e3      	ldr	r3, [r4, #12]
   2f3b2:	4018      	ands	r0, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f3b4:	68a3      	ldr	r3, [r4, #8]
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f3b6:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2f3be:	bf34      	ite	cc
   2f3c0:	2000      	movcc	r0, #0
   2f3c2:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   2f3c4:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f3c6:	f1c0 001f 	rsb	r0, r0, #31
   2f3ca:	1a80      	subs	r0, r0, r2
   2f3cc:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2f3d0:	684a      	ldr	r2, [r1, #4]
   2f3d2:	1c56      	adds	r6, r2, #1
   2f3d4:	604e      	str	r6, [r1, #4]
   2f3d6:	b9a2      	cbnz	r2, 2f402 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   2f3d8:	2201      	movs	r2, #1
   2f3da:	fa02 f100 	lsl.w	r1, r2, r0
   2f3de:	6962      	ldr	r2, [r4, #20]
   2f3e0:	430a      	orrs	r2, r1
   2f3e2:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   2f3e4:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   2f3e6:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   2f3ea:	2202      	movs	r2, #2
   2f3ec:	462b      	mov	r3, r5
   2f3ee:	4620      	mov	r0, r4
   2f3f0:	f7ff ff8e 	bl	2f310 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   2f3f4:	2203      	movs	r2, #3
   2f3f6:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   2f3f8:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   2f3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   2f3fe:	f7ff bf87 	b.w	2f310 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   2f402:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   2f406:	2202      	movs	r2, #2
   2f408:	4631      	mov	r1, r6
   2f40a:	4620      	mov	r0, r4
   2f40c:	f7ff ff74 	bl	2f2f8 <chunk_field>
   2f410:	4607      	mov	r7, r0
		chunk_set(h, c, FREE_PREV, first);
   2f412:	4603      	mov	r3, r0
   2f414:	2202      	movs	r2, #2
   2f416:	4629      	mov	r1, r5
   2f418:	4620      	mov	r0, r4
   2f41a:	f7ff ff79 	bl	2f310 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   2f41e:	4633      	mov	r3, r6
   2f420:	2203      	movs	r2, #3
   2f422:	4629      	mov	r1, r5
   2f424:	4620      	mov	r0, r4
   2f426:	f7ff ff73 	bl	2f310 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   2f42a:	2203      	movs	r2, #3
   2f42c:	4639      	mov	r1, r7
   2f42e:	462b      	mov	r3, r5
   2f430:	4620      	mov	r0, r4
   2f432:	f7ff ff6d 	bl	2f310 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   2f436:	2202      	movs	r2, #2
   2f438:	4631      	mov	r1, r6
   2f43a:	e7dd      	b.n	2f3f8 <free_list_add+0x56>

0002f43c <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   2f43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f440:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   2f442:	6843      	ldr	r3, [r0, #4]
{
   2f444:	4691      	mov	r9, r2
	chunkid_t c = h->buckets[bidx].next;
   2f446:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   2f44a:	462a      	mov	r2, r5
   2f44c:	f7ff ff77 	bl	2f33e <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f450:	2200      	movs	r2, #0
   2f452:	4629      	mov	r1, r5
   2f454:	4620      	mov	r0, r4
   2f456:	f7ff ff4f 	bl	2f2f8 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   2f45a:	68a3      	ldr	r3, [r4, #8]
   2f45c:	68e6      	ldr	r6, [r4, #12]
   2f45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2f462:	bf2c      	ite	cs
   2f464:	2302      	movcs	r3, #2
   2f466:	2301      	movcc	r3, #1
   2f468:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   2f46a:	eba6 0609 	sub.w	r6, r6, r9
	if (rem >= (big_heap(h) ? 2 : 1)) {
   2f46e:	42b3      	cmp	r3, r6
   2f470:	d82d      	bhi.n	2f4ce <split_alloc+0x92>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   2f472:	4629      	mov	r1, r5
   2f474:	4620      	mov	r0, r4
   2f476:	f7ff ff58 	bl	2f32a <right_chunk>
		chunkid_t c2 = c + sz;
   2f47a:	eb05 0709 	add.w	r7, r5, r9

		chunk_set(h, c, SIZE_AND_USED, sz);
   2f47e:	464b      	mov	r3, r9
   2f480:	2200      	movs	r2, #0
   2f482:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   2f484:	4680      	mov	r8, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   2f486:	4620      	mov	r0, r4
   2f488:	f7ff ff42 	bl	2f310 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   2f48c:	4633      	mov	r3, r6
   2f48e:	2200      	movs	r2, #0
   2f490:	4639      	mov	r1, r7
   2f492:	4620      	mov	r0, r4
   2f494:	f7ff ff3c 	bl	2f310 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   2f498:	464b      	mov	r3, r9
   2f49a:	2201      	movs	r2, #1
   2f49c:	4639      	mov	r1, r7
   2f49e:	4620      	mov	r0, r4
   2f4a0:	f7ff ff36 	bl	2f310 <chunk_set>
   2f4a4:	2200      	movs	r2, #0
   2f4a6:	4639      	mov	r1, r7
   2f4a8:	4620      	mov	r0, r4
   2f4aa:	f7ff ff25 	bl	2f2f8 <chunk_field>
   2f4ae:	68e3      	ldr	r3, [r4, #12]
   2f4b0:	4018      	ands	r0, r3
		if (!last_chunk(h, c2)) {
   2f4b2:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2f4b4:	4438      	add	r0, r7
		if (!last_chunk(h, c2)) {
   2f4b6:	4298      	cmp	r0, r3
   2f4b8:	d005      	beq.n	2f4c6 <split_alloc+0x8a>
			chunk_set(h, c3, LEFT_SIZE, rem);
   2f4ba:	4633      	mov	r3, r6
   2f4bc:	2201      	movs	r2, #1
   2f4be:	4641      	mov	r1, r8
   2f4c0:	4620      	mov	r0, r4
   2f4c2:	f7ff ff25 	bl	2f310 <chunk_set>
		}
		free_list_add(h, c2);
   2f4c6:	4639      	mov	r1, r7
   2f4c8:	4620      	mov	r0, r4
   2f4ca:	f7ff ff6a 	bl	2f3a2 <free_list_add>
   2f4ce:	4629      	mov	r1, r5
   2f4d0:	2200      	movs	r2, #0
   2f4d2:	4620      	mov	r0, r4
   2f4d4:	f7ff ff10 	bl	2f2f8 <chunk_field>
   2f4d8:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   2f4da:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f4dc:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   2f4e0:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   2f4e2:	4313      	orrs	r3, r2
   2f4e4:	4620      	mov	r0, r4
   2f4e6:	2200      	movs	r2, #0
   2f4e8:	f7ff ff12 	bl	2f310 <chunk_set>
	return big_heap(h) ? 8 : 4;
   2f4ec:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   2f4ee:	6820      	ldr	r0, [r4, #0]
   2f4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2f4f4:	bf2c      	ite	cs
   2f4f6:	2308      	movcs	r3, #8
   2f4f8:	2304      	movcc	r3, #4
   2f4fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   2f4fe:	4428      	add	r0, r5
   2f500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002f504 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   2f504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   2f508:	2900      	cmp	r1, #0
   2f50a:	f000 80ab 	beq.w	2f664 <sys_heap_free+0x160>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   2f50e:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f510:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   2f512:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f514:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   2f516:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2f51a:	bf2c      	ite	cs
   2f51c:	2508      	movcs	r5, #8
   2f51e:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   2f520:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   2f522:	6821      	ldr	r1, [r4, #0]
   2f524:	1a6d      	subs	r5, r5, r1
   2f526:	bf48      	it	mi
   2f528:	3507      	addmi	r5, #7
   2f52a:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f52c:	4629      	mov	r1, r5
   2f52e:	f7ff fee3 	bl	2f2f8 <chunk_field>
   2f532:	68e6      	ldr	r6, [r4, #12]
   2f534:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   2f538:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   2f53c:	42bb      	cmp	r3, r7
   2f53e:	d036      	beq.n	2f5ae <sys_heap_free+0xaa>
   2f540:	4629      	mov	r1, r5
   2f542:	4620      	mov	r0, r4
   2f544:	f7ff fef1 	bl	2f32a <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   2f548:	2200      	movs	r2, #0
   2f54a:	4601      	mov	r1, r0
   2f54c:	4682      	mov	sl, r0
   2f54e:	4620      	mov	r0, r4
   2f550:	f7ff fed2 	bl	2f2f8 <chunk_field>
   2f554:	ea30 0906 	bics.w	r9, r0, r6
   2f558:	d129      	bne.n	2f5ae <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f55a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2f55e:	bf34      	ite	cc
   2f560:	2100      	movcc	r1, #0
   2f562:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f564:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   2f566:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f568:	fab6 f686 	clz	r6, r6
   2f56c:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   2f570:	4652      	mov	r2, sl
   2f572:	1b89      	subs	r1, r1, r6
   2f574:	4620      	mov	r0, r4
   2f576:	f7ff fee2 	bl	2f33e <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   2f57a:	4643      	mov	r3, r8
   2f57c:	464a      	mov	r2, r9
   2f57e:	4629      	mov	r1, r5
   2f580:	4620      	mov	r0, r4
   2f582:	f7ff fec5 	bl	2f310 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f586:	4629      	mov	r1, r5
   2f588:	4620      	mov	r0, r4
   2f58a:	f7ff feb5 	bl	2f2f8 <chunk_field>
   2f58e:	68e3      	ldr	r3, [r4, #12]
   2f590:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   2f592:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2f594:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   2f596:	4283      	cmp	r3, r0
   2f598:	d009      	beq.n	2f5ae <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   2f59a:	4629      	mov	r1, r5
   2f59c:	4620      	mov	r0, r4
   2f59e:	f7ff fec4 	bl	2f32a <right_chunk>
   2f5a2:	4643      	mov	r3, r8
   2f5a4:	4601      	mov	r1, r0
   2f5a6:	2201      	movs	r2, #1
   2f5a8:	4620      	mov	r0, r4
   2f5aa:	f7ff feb1 	bl	2f310 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   2f5ae:	6923      	ldr	r3, [r4, #16]
   2f5b0:	42ab      	cmp	r3, r5
   2f5b2:	d045      	beq.n	2f640 <sys_heap_free+0x13c>
	return chunk_field(h, c, LEFT_SIZE);
   2f5b4:	2201      	movs	r2, #1
   2f5b6:	4629      	mov	r1, r5
   2f5b8:	4620      	mov	r0, r4
   2f5ba:	f7ff fe9d 	bl	2f2f8 <chunk_field>
	return c - left_size(h, c);
   2f5be:	eba5 0800 	sub.w	r8, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   2f5c2:	2200      	movs	r2, #0
   2f5c4:	4641      	mov	r1, r8
   2f5c6:	4620      	mov	r0, r4
   2f5c8:	f7ff fe96 	bl	2f2f8 <chunk_field>
   2f5cc:	68e7      	ldr	r7, [r4, #12]
   2f5ce:	4606      	mov	r6, r0
   2f5d0:	ea30 0907 	bics.w	r9, r0, r7
   2f5d4:	d134      	bne.n	2f640 <sys_heap_free+0x13c>
   2f5d6:	464a      	mov	r2, r9
   2f5d8:	4629      	mov	r1, r5
   2f5da:	4620      	mov	r0, r4
   2f5dc:	f7ff fe8c 	bl	2f2f8 <chunk_field>
   2f5e0:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   2f5e2:	4629      	mov	r1, r5
   2f5e4:	4620      	mov	r0, r4
   2f5e6:	f7ff fea0 	bl	2f32a <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f5ea:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f5ec:	403e      	ands	r6, r7
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f5ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2f5f2:	bf34      	ite	cc
   2f5f4:	2100      	movcc	r1, #0
   2f5f6:	2101      	movcs	r1, #1
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   2f5f8:	ea07 070a 	and.w	r7, r7, sl
   2f5fc:	4437      	add	r7, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f5fe:	fab6 f686 	clz	r6, r6
   2f602:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   2f606:	4642      	mov	r2, r8
   2f608:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   2f60a:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   2f60c:	4620      	mov	r0, r4
   2f60e:	f7ff fe96 	bl	2f33e <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   2f612:	463b      	mov	r3, r7
   2f614:	464a      	mov	r2, r9
   2f616:	4641      	mov	r1, r8
   2f618:	4620      	mov	r0, r4
   2f61a:	f7ff fe79 	bl	2f310 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f61e:	4641      	mov	r1, r8
   2f620:	4620      	mov	r0, r4
   2f622:	f7ff fe69 	bl	2f2f8 <chunk_field>
   2f626:	68e3      	ldr	r3, [r4, #12]
   2f628:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   2f62a:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   2f62c:	4440      	add	r0, r8
		if (!last_chunk(h, lc)) {
   2f62e:	4298      	cmp	r0, r3
   2f630:	d005      	beq.n	2f63e <sys_heap_free+0x13a>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   2f632:	463b      	mov	r3, r7
   2f634:	2201      	movs	r2, #1
   2f636:	4629      	mov	r1, r5
   2f638:	4620      	mov	r0, r4
   2f63a:	f7ff fe69 	bl	2f310 <chunk_set>
		}

		c = lc;
   2f63e:	4645      	mov	r5, r8
   2f640:	4629      	mov	r1, r5
   2f642:	2200      	movs	r2, #0
   2f644:	4620      	mov	r0, r4
   2f646:	f7ff fe57 	bl	2f2f8 <chunk_field>
   2f64a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   2f64c:	4629      	mov	r1, r5
   2f64e:	4003      	ands	r3, r0
   2f650:	2200      	movs	r2, #0
   2f652:	4620      	mov	r0, r4
   2f654:	f7ff fe5c 	bl	2f310 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   2f658:	4629      	mov	r1, r5
   2f65a:	4620      	mov	r0, r4
}
   2f65c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   2f660:	f7ff be9f 	b.w	2f3a2 <free_list_add>
}
   2f664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f668 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2f668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   2f66c:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2f66e:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   2f670:	68a2      	ldr	r2, [r4, #8]
   2f672:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2f676:	bf2c      	ite	cs
   2f678:	2308      	movcs	r3, #8
   2f67a:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2f67c:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f67e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2f682:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f686:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f68a:	bf34      	ite	cc
   2f68c:	2300      	movcc	r3, #0
   2f68e:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f690:	441e      	add	r6, r3
   2f692:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   2f696:	2900      	cmp	r1, #0
   2f698:	d03b      	beq.n	2f712 <sys_heap_alloc+0xaa>
   2f69a:	fab2 f282 	clz	r2, r2
   2f69e:	f1c3 031f 	rsb	r3, r3, #31
   2f6a2:	1a9b      	subs	r3, r3, r2
   2f6a4:	4598      	cmp	r8, r3
   2f6a6:	dc34      	bgt.n	2f712 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   2f6a8:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   2f6aa:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   2f6ae:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   2f6b2:	687b      	ldr	r3, [r7, #4]
   2f6b4:	2b03      	cmp	r3, #3
   2f6b6:	bf28      	it	cs
   2f6b8:	2303      	movcs	r3, #3
   2f6ba:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   2f6bc:	45ca      	cmp	sl, r9
   2f6be:	db0d      	blt.n	2f6dc <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2f6c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2f6c4:	f1c6 0620 	rsb	r6, r6, #32
   2f6c8:	6963      	ldr	r3, [r4, #20]
   2f6ca:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   2f6cc:	4019      	ands	r1, r3
   2f6ce:	d020      	beq.n	2f712 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   2f6d0:	fa91 f1a1 	rbit	r1, r1
   2f6d4:	462a      	mov	r2, r5
   2f6d6:	fab1 f181 	clz	r1, r1
   2f6da:	e00c      	b.n	2f6f6 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   2f6dc:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2f6e0:	2200      	movs	r2, #0
   2f6e2:	4659      	mov	r1, fp
   2f6e4:	4620      	mov	r0, r4
   2f6e6:	f7ff fe07 	bl	2f2f8 <chunk_field>
   2f6ea:	68e3      	ldr	r3, [r4, #12]
   2f6ec:	4018      	ands	r0, r3
   2f6ee:	42a8      	cmp	r0, r5
   2f6f0:	d306      	bcc.n	2f700 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   2f6f2:	462a      	mov	r2, r5
   2f6f4:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   2f6f6:	4620      	mov	r0, r4
	}

	return NULL;
}
   2f6f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   2f6fc:	f7ff be9e 	b.w	2f43c <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   2f700:	2203      	movs	r2, #3
   2f702:	4659      	mov	r1, fp
   2f704:	4620      	mov	r0, r4
   2f706:	f7ff fdf7 	bl	2f2f8 <chunk_field>
	for (int i = 0; i < loops; i++) {
   2f70a:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   2f70e:	6038      	str	r0, [r7, #0]
   2f710:	e7d4      	b.n	2f6bc <sys_heap_alloc+0x54>
}
   2f712:	2000      	movs	r0, #0
   2f714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f718 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   2f71a:	1dcc      	adds	r4, r1, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2f71c:	4411      	add	r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2f71e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   2f722:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2f726:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2f72a:	1b09      	subs	r1, r1, r4
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2f72c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2f730:	ea4f 03d1 	mov.w	r3, r1, lsr #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2f734:	bf2c      	ite	cs
   2f736:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   2f73a:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   2f73c:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   2f73e:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f740:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2f742:	60e1      	str	r1, [r4, #12]
   2f744:	bf94      	ite	ls
   2f746:	2100      	movls	r1, #0
   2f748:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f74a:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f74e:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   2f750:	4684      	mov	ip, r0
				* sizeof(struct z_heap_bucket));
   2f752:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   2f756:	f104 0518 	add.w	r5, r4, #24
				* sizeof(struct z_heap_bucket));
   2f75a:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2f75c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   2f760:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2f764:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   2f766:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   2f768:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2f76a:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2f76c:	68a2      	ldr	r2, [r4, #8]
   2f76e:	42ba      	cmp	r2, r7
   2f770:	bf94      	ite	ls
   2f772:	2200      	movls	r2, #0
   2f774:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2f776:	f1c2 021f 	rsb	r2, r2, #31
   2f77a:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2f77c:	4290      	cmp	r0, r2
   2f77e:	dd0a      	ble.n	2f796 <sys_heap_init+0x7e>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   2f780:	1a5b      	subs	r3, r3, r1
   2f782:	4620      	mov	r0, r4
   2f784:	2200      	movs	r2, #0
   2f786:	f7ff fdc3 	bl	2f310 <chunk_set>
	free_list_add(h, h->chunk0);
   2f78a:	6921      	ldr	r1, [r4, #16]
   2f78c:	4620      	mov	r0, r4
}
   2f78e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   2f792:	f7ff be06 	b.w	2f3a2 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   2f796:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2f79a:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   2f79c:	f845 cb08 	str.w	ip, [r5], #8
   2f7a0:	e7e4      	b.n	2f76c <sys_heap_init+0x54>

0002f7a2 <get_elem_size>:
{
   2f7a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f7a6:	4605      	mov	r5, r0
   2f7a8:	2701      	movs	r7, #1
	switch (descr->type) {
   2f7aa:	796b      	ldrb	r3, [r5, #5]
   2f7ac:	085b      	lsrs	r3, r3, #1
   2f7ae:	2b5b      	cmp	r3, #91	; 0x5b
   2f7b0:	d02d      	beq.n	2f80e <get_elem_size+0x6c>
   2f7b2:	d80b      	bhi.n	2f7cc <get_elem_size+0x2a>
   2f7b4:	2b22      	cmp	r3, #34	; 0x22
   2f7b6:	d02e      	beq.n	2f816 <get_elem_size+0x74>
		return -EINVAL;
   2f7b8:	2b30      	cmp	r3, #48	; 0x30
   2f7ba:	bf08      	it	eq
   2f7bc:	2404      	moveq	r4, #4
   2f7be:	bf18      	it	ne
   2f7c0:	f06f 0415 	mvnne.w	r4, #21
}
   2f7c4:	fb07 f004 	mul.w	r0, r7, r4
   2f7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   2f7cc:	2b74      	cmp	r3, #116	; 0x74
   2f7ce:	d024      	beq.n	2f81a <get_elem_size+0x78>
   2f7d0:	2b7b      	cmp	r3, #123	; 0x7b
   2f7d2:	d003      	beq.n	2f7dc <get_elem_size+0x3a>
		return -EINVAL;
   2f7d4:	2b66      	cmp	r3, #102	; 0x66
   2f7d6:	bf08      	it	eq
   2f7d8:	2401      	moveq	r4, #1
   2f7da:	e7f0      	b.n	2f7be <get_elem_size+0x1c>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2f7dc:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   2f7de:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   2f7e2:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2f7e4:	f8d5 800c 	ldr.w	r8, [r5, #12]
   2f7e8:	45b0      	cmp	r8, r6
   2f7ea:	d0eb      	beq.n	2f7c4 <get_elem_size+0x22>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   2f7ec:	68a8      	ldr	r0, [r5, #8]
   2f7ee:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   2f7f2:	f7ff ffd6 	bl	2f7a2 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   2f7f6:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2f7f8:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   2f7fa:	f003 0303 	and.w	r3, r3, #3
   2f7fe:	fa09 f303 	lsl.w	r3, r9, r3
   2f802:	1e5a      	subs	r2, r3, #1
   2f804:	4410      	add	r0, r2
   2f806:	425b      	negs	r3, r3
   2f808:	4003      	ands	r3, r0
   2f80a:	441c      	add	r4, r3
   2f80c:	e7ec      	b.n	2f7e8 <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   2f80e:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   2f812:	435f      	muls	r7, r3
   2f814:	e7c9      	b.n	2f7aa <get_elem_size+0x8>
		return sizeof(s32_t);
   2f816:	2404      	movs	r4, #4
   2f818:	e7d4      	b.n	2f7c4 <get_elem_size+0x22>
		return sizeof(bool);
   2f81a:	2401      	movs	r4, #1
   2f81c:	e7d2      	b.n	2f7c4 <get_elem_size+0x22>

0002f81e <escape_as>:
	switch (chr) {
   2f81e:	280c      	cmp	r0, #12
   2f820:	d012      	beq.n	2f848 <escape_as+0x2a>
   2f822:	d809      	bhi.n	2f838 <escape_as+0x1a>
   2f824:	2809      	cmp	r0, #9
   2f826:	d011      	beq.n	2f84c <escape_as+0x2e>
   2f828:	280a      	cmp	r0, #10
   2f82a:	d011      	beq.n	2f850 <escape_as+0x32>
	return 0;
   2f82c:	2808      	cmp	r0, #8
   2f82e:	bf08      	it	eq
   2f830:	2062      	moveq	r0, #98	; 0x62
   2f832:	bf18      	it	ne
   2f834:	2000      	movne	r0, #0
   2f836:	4770      	bx	lr
	switch (chr) {
   2f838:	2822      	cmp	r0, #34	; 0x22
   2f83a:	d00a      	beq.n	2f852 <escape_as+0x34>
   2f83c:	285c      	cmp	r0, #92	; 0x5c
   2f83e:	d008      	beq.n	2f852 <escape_as+0x34>
	return 0;
   2f840:	280d      	cmp	r0, #13
   2f842:	bf08      	it	eq
   2f844:	2072      	moveq	r0, #114	; 0x72
   2f846:	e7f4      	b.n	2f832 <escape_as+0x14>
		return 'f';
   2f848:	2066      	movs	r0, #102	; 0x66
   2f84a:	4770      	bx	lr
		return 't';
   2f84c:	2074      	movs	r0, #116	; 0x74
   2f84e:	4770      	bx	lr
		return 'n';
   2f850:	206e      	movs	r0, #110	; 0x6e
}
   2f852:	4770      	bx	lr

0002f854 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2f854:	4040      	eors	r0, r0
   2f856:	f380 8811 	msr	BASEPRI, r0
   2f85a:	f04f 0004 	mov.w	r0, #4
   2f85e:	df02      	svc	2
}
   2f860:	4770      	bx	lr

0002f862 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2f862:	4770      	bx	lr

0002f864 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2f864:	f7f7 bdac 	b.w	273c0 <SystemInit>

0002f868 <sntp_init>:
{
   2f868:	b570      	push	{r4, r5, r6, lr}
   2f86a:	460d      	mov	r5, r1
   2f86c:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2f86e:	4604      	mov	r4, r0
   2f870:	b330      	cbz	r0, 2f8c0 <sntp_init+0x58>
   2f872:	b329      	cbz	r1, 2f8c0 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2f874:	2214      	movs	r2, #20
   2f876:	2100      	movs	r1, #0
   2f878:	f005 f90c 	bl	34a94 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2f87c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2f87e:	2211      	movs	r2, #17
   2f880:	2102      	movs	r1, #2
   2f882:	f7e7 fdd9 	bl	17438 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2f886:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2f888:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2f88a:	da04      	bge.n	2f896 <sntp_init+0x2e>
		return -errno;
   2f88c:	f001 fc12 	bl	310b4 <__errno>
   2f890:	6800      	ldr	r0, [r0, #0]
   2f892:	4240      	negs	r0, r0
}
   2f894:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2f896:	4632      	mov	r2, r6
   2f898:	4629      	mov	r1, r5
   2f89a:	f000 f8c7 	bl	2fa2c <z_impl_zsock_connect>
	if (ret < 0) {
   2f89e:	2800      	cmp	r0, #0
   2f8a0:	68e0      	ldr	r0, [r4, #12]
   2f8a2:	da02      	bge.n	2f8aa <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2f8a4:	f000 f8a9 	bl	2f9fa <z_impl_zsock_close>
   2f8a8:	e7f0      	b.n	2f88c <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2f8aa:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2f8ac:	68a3      	ldr	r3, [r4, #8]
   2f8ae:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2f8b2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2f8b6:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2f8b8:	8091      	strh	r1, [r2, #4]
	return 0;
   2f8ba:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2f8bc:	60a3      	str	r3, [r4, #8]
	return 0;
   2f8be:	e7e9      	b.n	2f894 <sntp_init+0x2c>
		return -EFAULT;
   2f8c0:	f06f 000d 	mvn.w	r0, #13
   2f8c4:	e7e6      	b.n	2f894 <sntp_init+0x2c>

0002f8c6 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2f8c6:	b110      	cbz	r0, 2f8ce <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2f8c8:	68c0      	ldr	r0, [r0, #12]
   2f8ca:	f000 b896 	b.w	2f9fa <z_impl_zsock_close>
	}
}
   2f8ce:	4770      	bx	lr

0002f8d0 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2f8d0:	f7e8 b98a 	b.w	17be8 <socket_offload_getaddrinfo>

0002f8d4 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2f8d4:	f7e8 b9bc 	b.w	17c50 <socket_offload_freeaddrinfo>

0002f8d8 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2f8d8:	b40c      	push	{r2, r3}
   2f8da:	b513      	push	{r0, r1, r4, lr}
   2f8dc:	460c      	mov	r4, r1
   2f8de:	aa04      	add	r2, sp, #16
   2f8e0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2f8e4:	6883      	ldr	r3, [r0, #8]
   2f8e6:	4620      	mov	r0, r4
	va_start(args, request);
   2f8e8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2f8ea:	4798      	blx	r3
	va_end(args);

	return res;
}
   2f8ec:	b002      	add	sp, #8
   2f8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f8f2:	b002      	add	sp, #8
   2f8f4:	4770      	bx	lr

0002f8f6 <sock_getsockopt_vmeth>:
   2f8f6:	b508      	push	{r3, lr}
   2f8f8:	f001 fbdc 	bl	310b4 <__errno>
   2f8fc:	236d      	movs	r3, #109	; 0x6d
   2f8fe:	6003      	str	r3, [r0, #0]
   2f900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f904:	bd08      	pop	{r3, pc}

0002f906 <k_fifo_wait_non_empty>:
{
   2f906:	b530      	push	{r4, r5, lr}
   2f908:	b087      	sub	sp, #28
   2f90a:	4605      	mov	r5, r0
   2f90c:	460c      	mov	r4, r1
	struct k_poll_event events[] = {
   2f90e:	2210      	movs	r2, #16
   2f910:	2100      	movs	r1, #0
   2f912:	a801      	add	r0, sp, #4
   2f914:	f005 f8be 	bl	34a94 <memset>
   2f918:	2304      	movs	r3, #4
   2f91a:	9505      	str	r5, [sp, #20]
   2f91c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   2f920:	2101      	movs	r1, #1
   2f922:	4622      	mov	r2, r4
   2f924:	eb0d 0003 	add.w	r0, sp, r3
   2f928:	f7fc f8c6 	bl	2bab8 <z_impl_k_poll>
}
   2f92c:	b007      	add	sp, #28
   2f92e:	bd30      	pop	{r4, r5, pc}

0002f930 <zsock_received_cb>:
{
   2f930:	b570      	push	{r4, r5, r6, lr}
   2f932:	4604      	mov	r4, r0
   2f934:	f100 065c 	add.w	r6, r0, #92	; 0x5c
	if (!pkt) {
   2f938:	460d      	mov	r5, r1
   2f93a:	b999      	cbnz	r1, 2f964 <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   2f93c:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2f93e:	f004 febe 	bl	346be <z_queue_node_peek>
		if (!last_pkt) {
   2f942:	b940      	cbnz	r0, 2f956 <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
   2f944:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2f946:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   2f94a:	65a3      	str	r3, [r4, #88]	; 0x58
	z_impl_k_queue_cancel_wait(queue);
   2f94c:	4630      	mov	r0, r6
}
   2f94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f952:	f7f9 bcd9 	b.w	29308 <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
   2f956:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   2f95a:	f043 0302 	orr.w	r3, r3, #2
   2f95e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   2f962:	bd70      	pop	{r4, r5, r6, pc}
   2f964:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   2f968:	f36f 0341 	bfc	r3, #1, #1
   2f96c:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   2f970:	f7e7 fcf0 	bl	17354 <net_context_get_type>
   2f974:	2801      	cmp	r0, #1
   2f976:	d106      	bne.n	2f986 <zsock_received_cb+0x56>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   2f978:	4628      	mov	r0, r5
   2f97a:	f002 f8fb 	bl	31b74 <net_pkt_remaining_data>
   2f97e:	4241      	negs	r1, r0
   2f980:	4620      	mov	r0, r4
   2f982:	f001 feaa 	bl	316da <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   2f986:	4629      	mov	r1, r5
   2f988:	4630      	mov	r0, r6
}
   2f98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   2f98e:	f004 beaf 	b.w	346f0 <k_queue_append>

0002f992 <zsock_close_ctx>:
{
   2f992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f994:	4604      	mov	r4, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2f996:	f7e7 fcbd 	bl	17314 <net_context_get_state>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2f99a:	2300      	movs	r3, #0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2f99c:	2803      	cmp	r0, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2f99e:	461a      	mov	r2, r3
   2f9a0:	4619      	mov	r1, r3
   2f9a2:	4620      	mov	r0, r4
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   2f9a4:	d11c      	bne.n	2f9e0 <zsock_close_ctx+0x4e>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2f9a6:	f7eb f803 	bl	1a9b0 <net_context_accept>
	bool is_listen = net_context_get_state(ctx) == NET_CONTEXT_LISTENING;
   2f9aa:	4620      	mov	r0, r4
   2f9ac:	f7e7 fcb2 	bl	17314 <net_context_get_state>
   2f9b0:	4607      	mov	r7, r0
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   2f9b2:	f104 065c 	add.w	r6, r4, #92	; 0x5c
	return z_impl_k_queue_get(queue, timeout);
   2f9b6:	2100      	movs	r1, #0
   2f9b8:	4630      	mov	r0, r6
   2f9ba:	f7f9 fce3 	bl	29384 <z_impl_k_queue_get>
   2f9be:	4605      	mov	r5, r0
   2f9c0:	b988      	cbnz	r0, 2f9e6 <zsock_close_ctx+0x54>
	z_impl_k_queue_cancel_wait(queue);
   2f9c2:	4630      	mov	r0, r6
   2f9c4:	f7f9 fca0 	bl	29308 <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   2f9c8:	4620      	mov	r0, r4
   2f9ca:	f7ea fcd3 	bl	1a374 <net_context_put>
   2f9ce:	1e04      	subs	r4, r0, #0
   2f9d0:	da11      	bge.n	2f9f6 <zsock_close_ctx+0x64>
   2f9d2:	f001 fb6f 	bl	310b4 <__errno>
   2f9d6:	4264      	negs	r4, r4
   2f9d8:	6004      	str	r4, [r0, #0]
   2f9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   2f9e0:	f7eb f836 	bl	1aa50 <net_context_recv>
   2f9e4:	e7e1      	b.n	2f9aa <zsock_close_ctx+0x18>
		if (is_listen) {
   2f9e6:	2f03      	cmp	r7, #3
   2f9e8:	d102      	bne.n	2f9f0 <zsock_close_ctx+0x5e>
			net_context_put(p);
   2f9ea:	f7ea fcc3 	bl	1a374 <net_context_put>
   2f9ee:	e7e2      	b.n	2f9b6 <zsock_close_ctx+0x24>
			net_pkt_unref(p);
   2f9f0:	f001 ff58 	bl	318a4 <net_pkt_unref>
   2f9f4:	e7df      	b.n	2f9b6 <zsock_close_ctx+0x24>
	return 0;
   2f9f6:	4628      	mov	r0, r5
   2f9f8:	e7f1      	b.n	2f9de <zsock_close_ctx+0x4c>

0002f9fa <z_impl_zsock_close>:
{
   2f9fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   2f9fc:	a901      	add	r1, sp, #4
{
   2f9fe:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   2fa00:	f7e7 fa30 	bl	16e64 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2fa04:	4604      	mov	r4, r0
   2fa06:	b150      	cbz	r0, 2fa1e <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   2fa08:	4628      	mov	r0, r5
   2fa0a:	f7e7 fa6b 	bl	16ee4 <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   2fa0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   2fa12:	4621      	mov	r1, r4
   2fa14:	9801      	ldr	r0, [sp, #4]
   2fa16:	f7ff ff5f 	bl	2f8d8 <z_fdtable_call_ioctl>
}
   2fa1a:	b003      	add	sp, #12
   2fa1c:	bd30      	pop	{r4, r5, pc}
		return -1;
   2fa1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa22:	e7fa      	b.n	2fa1a <z_impl_zsock_close+0x20>

0002fa24 <sock_bind_vmeth>:
}

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   2fa24:	f7e7 bd5c 	b.w	174e0 <zsock_bind_ctx>

0002fa28 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   2fa28:	f7e7 bd7e 	b.w	17528 <zsock_connect_ctx>

0002fa2c <z_impl_zsock_connect>:
{
   2fa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fa2e:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   2fa30:	a901      	add	r1, sp, #4
{
   2fa32:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   2fa34:	f7e7 fa16 	bl	16e64 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2fa38:	b138      	cbz	r0, 2fa4a <z_impl_zsock_connect+0x1e>
   2fa3a:	9b01      	ldr	r3, [sp, #4]
   2fa3c:	691b      	ldr	r3, [r3, #16]
   2fa3e:	b123      	cbz	r3, 2fa4a <z_impl_zsock_connect+0x1e>
   2fa40:	462a      	mov	r2, r5
   2fa42:	4621      	mov	r1, r4
   2fa44:	4798      	blx	r3
}
   2fa46:	b003      	add	sp, #12
   2fa48:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2fa4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa4e:	e7fa      	b.n	2fa46 <z_impl_zsock_connect+0x1a>

0002fa50 <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   2fa50:	f7e7 bd8a 	b.w	17568 <zsock_listen_ctx>

0002fa54 <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   2fa54:	f7e7 bda2 	b.w	1759c <zsock_accept_ctx>

0002fa58 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   2fa58:	f7e7 be08 	b.w	1766c <zsock_sendto_ctx>

0002fa5c <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   2fa5c:	2300      	movs	r3, #0
{
   2fa5e:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   2fa60:	e9cd 3300 	strd	r3, r3, [sp]
   2fa64:	f7e7 fe02 	bl	1766c <zsock_sendto_ctx>
}
   2fa68:	b003      	add	sp, #12
   2fa6a:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa6e <z_impl_zsock_sendto>:
{
   2fa6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa70:	b085      	sub	sp, #20
   2fa72:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2fa74:	a903      	add	r1, sp, #12
{
   2fa76:	4616      	mov	r6, r2
   2fa78:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2fa7a:	f7e7 f9f3 	bl	16e64 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2fa7e:	b160      	cbz	r0, 2fa9a <z_impl_zsock_sendto+0x2c>
   2fa80:	9b03      	ldr	r3, [sp, #12]
   2fa82:	69dc      	ldr	r4, [r3, #28]
   2fa84:	b14c      	cbz	r4, 2fa9a <z_impl_zsock_sendto+0x2c>
   2fa86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fa88:	4632      	mov	r2, r6
   2fa8a:	9301      	str	r3, [sp, #4]
   2fa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fa8e:	4629      	mov	r1, r5
   2fa90:	9300      	str	r3, [sp, #0]
   2fa92:	463b      	mov	r3, r7
   2fa94:	47a0      	blx	r4
}
   2fa96:	b005      	add	sp, #20
   2fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2fa9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fa9e:	e7fa      	b.n	2fa96 <z_impl_zsock_sendto+0x28>

0002faa0 <zsock_sendmsg_ctx>:
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2faa0:	0653      	lsls	r3, r2, #25
{
   2faa2:	b513      	push	{r0, r1, r4, lr}
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   2faa4:	f04f 0300 	mov.w	r3, #0
		timeout = K_NO_WAIT;
   2faa8:	bf4f      	iteee	mi
   2faaa:	2400      	movmi	r4, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2faac:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
   2faae:	f084 0402 	eorpl.w	r4, r4, #2
   2fab2:	f344 0440 	sbfxpl	r4, r4, #1, #1
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   2fab6:	e9cd 4300 	strd	r4, r3, [sp]
   2faba:	f001 fdd0 	bl	3165e <net_context_sendmsg>
	if (status < 0) {
   2fabe:	1e04      	subs	r4, r0, #0
   2fac0:	da05      	bge.n	2face <zsock_sendmsg_ctx+0x2e>
		errno = -status;
   2fac2:	f001 faf7 	bl	310b4 <__errno>
   2fac6:	4264      	negs	r4, r4
   2fac8:	6004      	str	r4, [r0, #0]
		return -1;
   2faca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2face:	4620      	mov	r0, r4
   2fad0:	b002      	add	sp, #8
   2fad2:	bd10      	pop	{r4, pc}

0002fad4 <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
   2fad4:	f7ff bfe4 	b.w	2faa0 <zsock_sendmsg_ctx>

0002fad8 <z_impl_zsock_sendmsg>:
{
   2fad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fada:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   2fadc:	a901      	add	r1, sp, #4
{
   2fade:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   2fae0:	f7e7 f9c0 	bl	16e64 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2fae4:	b138      	cbz	r0, 2faf6 <z_impl_zsock_sendmsg+0x1e>
   2fae6:	9b01      	ldr	r3, [sp, #4]
   2fae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2faea:	b123      	cbz	r3, 2faf6 <z_impl_zsock_sendmsg+0x1e>
   2faec:	462a      	mov	r2, r5
   2faee:	4621      	mov	r1, r4
   2faf0:	4798      	blx	r3
}
   2faf2:	b003      	add	sp, #12
   2faf4:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2faf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fafa:	e7fa      	b.n	2faf2 <z_impl_zsock_sendmsg+0x1a>

0002fafc <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   2fafc:	f7e7 bdfa 	b.w	176f4 <zsock_recvfrom_ctx>

0002fb00 <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   2fb00:	2300      	movs	r3, #0
{
   2fb02:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   2fb04:	e9cd 3300 	strd	r3, r3, [sp]
   2fb08:	f7e7 fdf4 	bl	176f4 <zsock_recvfrom_ctx>
}
   2fb0c:	b003      	add	sp, #12
   2fb0e:	f85d fb04 	ldr.w	pc, [sp], #4

0002fb12 <z_impl_zsock_recvfrom>:
{
   2fb12:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb14:	b085      	sub	sp, #20
   2fb16:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2fb18:	a903      	add	r1, sp, #12
{
   2fb1a:	4616      	mov	r6, r2
   2fb1c:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2fb1e:	f7e7 f9a1 	bl	16e64 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2fb22:	b160      	cbz	r0, 2fb3e <z_impl_zsock_recvfrom+0x2c>
   2fb24:	9b03      	ldr	r3, [sp, #12]
   2fb26:	6a1c      	ldr	r4, [r3, #32]
   2fb28:	b14c      	cbz	r4, 2fb3e <z_impl_zsock_recvfrom+0x2c>
   2fb2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fb2c:	4632      	mov	r2, r6
   2fb2e:	9301      	str	r3, [sp, #4]
   2fb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fb32:	4629      	mov	r1, r5
   2fb34:	9300      	str	r3, [sp, #0]
   2fb36:	463b      	mov	r3, r7
   2fb38:	47a0      	blx	r4
}
   2fb3a:	b005      	add	sp, #20
   2fb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2fb3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fb42:	e7fa      	b.n	2fb3a <z_impl_zsock_recvfrom+0x28>

0002fb44 <zsock_setsockopt_ctx>:
	switch (level) {
   2fb44:	2906      	cmp	r1, #6
{
   2fb46:	b508      	push	{r3, lr}
	switch (level) {
   2fb48:	d00c      	beq.n	2fb64 <zsock_setsockopt_ctx+0x20>
   2fb4a:	2929      	cmp	r1, #41	; 0x29
   2fb4c:	d00c      	beq.n	2fb68 <zsock_setsockopt_ctx+0x24>
   2fb4e:	2901      	cmp	r1, #1
   2fb50:	d101      	bne.n	2fb56 <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   2fb52:	2a02      	cmp	r2, #2
   2fb54:	d00a      	beq.n	2fb6c <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   2fb56:	f001 faad 	bl	310b4 <__errno>
   2fb5a:	236d      	movs	r3, #109	; 0x6d
   2fb5c:	6003      	str	r3, [r0, #0]
   2fb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2fb62:	bd08      	pop	{r3, pc}
		switch (optname) {
   2fb64:	2a01      	cmp	r2, #1
   2fb66:	e7f5      	b.n	2fb54 <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   2fb68:	2a1a      	cmp	r2, #26
   2fb6a:	e7f3      	b.n	2fb54 <zsock_setsockopt_ctx+0x10>
			return 0;
   2fb6c:	2000      	movs	r0, #0
   2fb6e:	e7f8      	b.n	2fb62 <zsock_setsockopt_ctx+0x1e>

0002fb70 <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   2fb70:	f7ff bfe8 	b.w	2fb44 <zsock_setsockopt_ctx>

0002fb74 <z_impl_zsock_setsockopt>:
{
   2fb74:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb76:	b085      	sub	sp, #20
   2fb78:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   2fb7a:	a903      	add	r1, sp, #12
{
   2fb7c:	4616      	mov	r6, r2
   2fb7e:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   2fb80:	f7e7 f970 	bl	16e64 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2fb84:	b150      	cbz	r0, 2fb9c <z_impl_zsock_setsockopt+0x28>
   2fb86:	9b03      	ldr	r3, [sp, #12]
   2fb88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2fb8a:	b13c      	cbz	r4, 2fb9c <z_impl_zsock_setsockopt+0x28>
   2fb8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fb8e:	4632      	mov	r2, r6
   2fb90:	9300      	str	r3, [sp, #0]
   2fb92:	4629      	mov	r1, r5
   2fb94:	463b      	mov	r3, r7
   2fb96:	47a0      	blx	r4
}
   2fb98:	b005      	add	sp, #20
   2fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2fb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fba0:	e7fa      	b.n	2fb98 <z_impl_zsock_setsockopt+0x24>

0002fba2 <zsock_getsockname_ctx>:
{
   2fba2:	4603      	mov	r3, r0
   2fba4:	b513      	push	{r0, r1, r4, lr}
   2fba6:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   2fba8:	8b9a      	ldrh	r2, [r3, #28]
{
   2fbaa:	4608      	mov	r0, r1
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   2fbac:	2a01      	cmp	r2, #1
   2fbae:	d113      	bne.n	2fbd8 <zsock_getsockname_ctx+0x36>
		addr4.sin_family = AF_INET;
   2fbb0:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   2fbb4:	8bda      	ldrh	r2, [r3, #30]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   2fbb6:	6a1b      	ldr	r3, [r3, #32]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   2fbb8:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   2fbbc:	6822      	ldr	r2, [r4, #0]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   2fbbe:	681b      	ldr	r3, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fbc0:	2a08      	cmp	r2, #8
   2fbc2:	bf28      	it	cs
   2fbc4:	2208      	movcs	r2, #8
   2fbc6:	4669      	mov	r1, sp
   2fbc8:	9301      	str	r3, [sp, #4]
   2fbca:	f004 ff29 	bl	34a20 <memcpy>
		newlen = sizeof(struct sockaddr_in);
   2fbce:	2308      	movs	r3, #8
}
   2fbd0:	2000      	movs	r0, #0
	*addrlen = newlen;
   2fbd2:	6023      	str	r3, [r4, #0]
}
   2fbd4:	b002      	add	sp, #8
   2fbd6:	bd10      	pop	{r4, pc}
	socklen_t newlen = 0;
   2fbd8:	2300      	movs	r3, #0
   2fbda:	e7f9      	b.n	2fbd0 <zsock_getsockname_ctx+0x2e>

0002fbdc <sock_ioctl_vmeth>:
	switch (request) {
   2fbdc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
   2fbe0:	b538      	push	{r3, r4, r5, lr}
   2fbe2:	4604      	mov	r4, r0
   2fbe4:	4613      	mov	r3, r2
	switch (request) {
   2fbe6:	d04e      	beq.n	2fc86 <sock_ioctl_vmeth+0xaa>
   2fbe8:	d80a      	bhi.n	2fc00 <sock_ioctl_vmeth+0x24>
   2fbea:	2903      	cmp	r1, #3
   2fbec:	d039      	beq.n	2fc62 <sock_ioctl_vmeth+0x86>
   2fbee:	2904      	cmp	r1, #4
   2fbf0:	d03c      	beq.n	2fc6c <sock_ioctl_vmeth+0x90>
		errno = EOPNOTSUPP;
   2fbf2:	f001 fa5f 	bl	310b4 <__errno>
   2fbf6:	235f      	movs	r3, #95	; 0x5f
   2fbf8:	6003      	str	r3, [r0, #0]
		return -1;
   2fbfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fbfe:	e034      	b.n	2fc6a <sock_ioctl_vmeth+0x8e>
	switch (request) {
   2fc00:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   2fc04:	d043      	beq.n	2fc8e <sock_ioctl_vmeth+0xb2>
   2fc06:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
   2fc0a:	d05a      	beq.n	2fcc2 <sock_ioctl_vmeth+0xe6>
   2fc0c:	f240 1203 	movw	r2, #259	; 0x103
   2fc10:	4291      	cmp	r1, r2
   2fc12:	d1ee      	bne.n	2fbf2 <sock_ioctl_vmeth+0x16>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   2fc14:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   2fc16:	8891      	ldrh	r1, [r2, #4]
   2fc18:	07c8      	lsls	r0, r1, #31
   2fc1a:	d51a      	bpl.n	2fc52 <sock_ioctl_vmeth+0x76>
		pev = va_arg(args, struct k_poll_event **);
   2fc1c:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
   2fc1e:	689b      	ldr	r3, [r3, #8]
   2fc20:	6810      	ldr	r0, [r2, #0]
   2fc22:	4283      	cmp	r3, r0
   2fc24:	d056      	beq.n	2fcd4 <sock_ioctl_vmeth+0xf8>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   2fc26:	2504      	movs	r5, #4
		(*pev)->obj = &ctx->recv_q;
   2fc28:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   2fc2c:	6103      	str	r3, [r0, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   2fc2e:	6813      	ldr	r3, [r2, #0]
   2fc30:	7b58      	ldrb	r0, [r3, #13]
   2fc32:	f365 0003 	bfi	r0, r5, #0, #4
   2fc36:	7358      	strb	r0, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   2fc38:	6813      	ldr	r3, [r2, #0]
   2fc3a:	7b98      	ldrb	r0, [r3, #14]
   2fc3c:	f36f 0041 	bfc	r0, #1, #1
   2fc40:	7398      	strb	r0, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   2fc42:	6813      	ldr	r3, [r2, #0]
   2fc44:	68d8      	ldr	r0, [r3, #12]
   2fc46:	f36f 3010 	bfc	r0, #12, #5
   2fc4a:	60d8      	str	r0, [r3, #12]
		(*pev)++;
   2fc4c:	6813      	ldr	r3, [r2, #0]
   2fc4e:	3314      	adds	r3, #20
   2fc50:	6013      	str	r3, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   2fc52:	0749      	lsls	r1, r1, #29
   2fc54:	d402      	bmi.n	2fc5c <sock_ioctl_vmeth+0x80>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   2fc56:	6da3      	ldr	r3, [r4, #88]	; 0x58
	if (sock_is_eof(ctx)) {
   2fc58:	07da      	lsls	r2, r3, #31
   2fc5a:	d505      	bpl.n	2fc68 <sock_ioctl_vmeth+0x8c>
		return -EALREADY;
   2fc5c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2fc60:	e003      	b.n	2fc6a <sock_ioctl_vmeth+0x8e>
   2fc62:	6d83      	ldr	r3, [r0, #88]	; 0x58
		if (sock_is_nonblock(obj)) {
   2fc64:	079c      	lsls	r4, r3, #30
   2fc66:	d432      	bmi.n	2fcce <sock_ioctl_vmeth+0xf2>
		return 0;
   2fc68:	2000      	movs	r0, #0
}
   2fc6a:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
   2fc6c:	6810      	ldr	r0, [r2, #0]
   2fc6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2fc70:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2fc74:	f023 0302 	bic.w	r3, r3, #2
   2fc78:	d003      	beq.n	2fc82 <sock_ioctl_vmeth+0xa6>
	val = (val & ~mask) | flag;
   2fc7a:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   2fc7e:	65a3      	str	r3, [r4, #88]	; 0x58
   2fc80:	e7f2      	b.n	2fc68 <sock_ioctl_vmeth+0x8c>
   2fc82:	65a3      	str	r3, [r4, #88]	; 0x58
   2fc84:	e7f1      	b.n	2fc6a <sock_ioctl_vmeth+0x8e>
}
   2fc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_close_ctx(obj);
   2fc8a:	f7ff be82 	b.w	2f992 <zsock_close_ctx>
		pev = va_arg(args, struct k_poll_event **);
   2fc8e:	e9d2 2000 	ldrd	r2, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
   2fc92:	8891      	ldrh	r1, [r2, #4]
   2fc94:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
   2fc96:	bf42      	ittt	mi
   2fc98:	88d3      	ldrhmi	r3, [r2, #6]
   2fc9a:	f043 0304 	orrmi.w	r3, r3, #4
   2fc9e:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
   2fca0:	07cd      	lsls	r5, r1, #31
   2fca2:	d5e1      	bpl.n	2fc68 <sock_ioctl_vmeth+0x8c>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   2fca4:	6803      	ldr	r3, [r0, #0]
   2fca6:	68d9      	ldr	r1, [r3, #12]
   2fca8:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
   2fcac:	d102      	bne.n	2fcb4 <sock_ioctl_vmeth+0xd8>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   2fcae:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2fcb0:	07c9      	lsls	r1, r1, #31
   2fcb2:	d503      	bpl.n	2fcbc <sock_ioctl_vmeth+0xe0>
			pfd->revents |= ZSOCK_POLLIN;
   2fcb4:	88d1      	ldrh	r1, [r2, #6]
   2fcb6:	f041 0101 	orr.w	r1, r1, #1
   2fcba:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
   2fcbc:	3314      	adds	r3, #20
   2fcbe:	6003      	str	r3, [r0, #0]
   2fcc0:	e7d2      	b.n	2fc68 <sock_ioctl_vmeth+0x8c>
		return zsock_getsockname_ctx(obj, addr, addrlen);
   2fcc2:	e9d2 1200 	ldrd	r1, r2, [r2]
}
   2fcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
   2fcca:	f7ff bf6a 	b.w	2fba2 <zsock_getsockname_ctx>
		    return O_NONBLOCK;
   2fcce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   2fcd2:	e7ca      	b.n	2fc6a <sock_ioctl_vmeth+0x8e>
			return -ENOMEM;
   2fcd4:	f06f 000b 	mvn.w	r0, #11
   2fcd8:	e7c7      	b.n	2fc6a <sock_ioctl_vmeth+0x8e>

0002fcda <settings_load>:
	return settings_load_subtree(NULL);
   2fcda:	2000      	movs	r0, #0
   2fcdc:	f7e8 b806 	b.w	17cec <settings_load_subtree>

0002fce0 <settings_name_steq>:
{
   2fce0:	b530      	push	{r4, r5, lr}
	if (next) {
   2fce2:	b10a      	cbz	r2, 2fce8 <settings_name_steq+0x8>
		*next = NULL;
   2fce4:	2300      	movs	r3, #0
   2fce6:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   2fce8:	b190      	cbz	r0, 2fd10 <settings_name_steq+0x30>
   2fcea:	b151      	cbz	r1, 2fd02 <settings_name_steq+0x22>
   2fcec:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   2fcee:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   2fcf2:	4603      	mov	r3, r0
   2fcf4:	f810 1b01 	ldrb.w	r1, [r0], #1
   2fcf8:	b15c      	cbz	r4, 2fd12 <settings_name_steq+0x32>
   2fcfa:	428c      	cmp	r4, r1
   2fcfc:	d101      	bne.n	2fd02 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2fcfe:	2c3d      	cmp	r4, #61	; 0x3d
   2fd00:	d1f5      	bne.n	2fcee <settings_name_steq+0xe>
	return 0;
   2fd02:	2000      	movs	r0, #0
   2fd04:	e004      	b.n	2fd10 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2fd06:	293d      	cmp	r1, #61	; 0x3d
   2fd08:	d008      	beq.n	2fd1c <settings_name_steq+0x3c>
   2fd0a:	fab1 f081 	clz	r0, r1
   2fd0e:	0940      	lsrs	r0, r0, #5
}
   2fd10:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2fd12:	292f      	cmp	r1, #47	; 0x2f
   2fd14:	d1f7      	bne.n	2fd06 <settings_name_steq+0x26>
		if (next) {
   2fd16:	b10a      	cbz	r2, 2fd1c <settings_name_steq+0x3c>
			*next = name + 1;
   2fd18:	3301      	adds	r3, #1
   2fd1a:	6013      	str	r3, [r2, #0]
		return 1;
   2fd1c:	2001      	movs	r0, #1
   2fd1e:	e7f7      	b.n	2fd10 <settings_name_steq+0x30>

0002fd20 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   2fd20:	2000      	movs	r0, #0
   2fd22:	4770      	bx	lr

0002fd24 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   2fd24:	2200      	movs	r2, #0
   2fd26:	f7e8 b90d 	b.w	17f44 <clock_async_start>

0002fd2a <wdt_nrf_disable>:
}
   2fd2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fd2e:	4770      	bx	lr

0002fd30 <wdt_nrf_feed>:
{
   2fd30:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   2fd32:	68c3      	ldr	r3, [r0, #12]
   2fd34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2fd38:	428b      	cmp	r3, r1
   2fd3a:	db05      	blt.n	2fd48 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   2fd3c:	6840      	ldr	r0, [r0, #4]
   2fd3e:	b2c9      	uxtb	r1, r1
   2fd40:	f7f8 f9d6 	bl	280f0 <nrfx_wdt_channel_feed>
	return 0;
   2fd44:	2000      	movs	r0, #0
}
   2fd46:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2fd48:	f06f 0015 	mvn.w	r0, #21
   2fd4c:	e7fb      	b.n	2fd46 <wdt_nrf_feed+0x16>

0002fd4e <wdt_nrf_setup>:
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   2fd4e:	f011 0f01 	tst.w	r1, #1
{
   2fd52:	b538      	push	{r3, r4, r5, lr}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   2fd54:	bf0c      	ite	eq
   2fd56:	2309      	moveq	r3, #9
   2fd58:	2308      	movne	r3, #8
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   2fd5a:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   2fd5c:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   2fd5e:	6825      	ldr	r5, [r4, #0]
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   2fd60:	bf48      	it	mi
   2fd62:	f003 0301 	andmi.w	r3, r3, #1
    p_reg->CONFIG = behaviour;
   2fd66:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   2fd6a:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   2fd6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   2fd70:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   2fd72:	2300      	movs	r3, #0
   2fd74:	03c8      	lsls	r0, r1, #15
   2fd76:	0c49      	lsrs	r1, r1, #17
   2fd78:	f7dd fcfa 	bl	d770 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   2fd7c:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   2fd80:	4620      	mov	r0, r4
   2fd82:	f7f8 f937 	bl	27ff4 <nrfx_wdt_enable>
}
   2fd86:	2000      	movs	r0, #0
   2fd88:	bd38      	pop	{r3, r4, r5, pc}

0002fd8a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2fd8a:	4770      	bx	lr

0002fd8c <sys_clock_disable>:
   2fd8c:	4770      	bx	lr

0002fd8e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2fd8e:	428b      	cmp	r3, r1
{
   2fd90:	b538      	push	{r3, r4, r5, lr}
   2fd92:	4615      	mov	r5, r2
   2fd94:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2fd96:	d805      	bhi.n	2fda4 <_copy+0x16>
   2fd98:	461a      	mov	r2, r3
   2fd9a:	4629      	mov	r1, r5
   2fd9c:	f004 fe40 	bl	34a20 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2fda0:	4620      	mov	r0, r4
   2fda2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2fda4:	2400      	movs	r4, #0
   2fda6:	e7fb      	b.n	2fda0 <_copy+0x12>

0002fda8 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2fda8:	f004 be74 	b.w	34a94 <memset>

0002fdac <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2fdac:	09c3      	lsrs	r3, r0, #7
   2fdae:	005a      	lsls	r2, r3, #1
   2fdb0:	4413      	add	r3, r2
   2fdb2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2fdb6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2fdba:	b2c0      	uxtb	r0, r0
   2fdbc:	4770      	bx	lr

0002fdbe <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
   2fdbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fdc2:	461f      	mov	r7, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2fdc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2fdc8:	4689      	mov	r9, r1
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2fdca:	f113 011f 	adds.w	r1, r3, #31
   2fdce:	bf48      	it	mi
   2fdd0:	f103 013e 	addmi.w	r1, r3, #62	; 0x3e
   2fdd4:	114d      	asrs	r5, r1, #5
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2fdd6:	1dd9      	adds	r1, r3, #7
   2fdd8:	bf48      	it	mi
   2fdda:	f103 010e 	addmi.w	r1, r3, #14
   2fdde:	10cc      	asrs	r4, r1, #3
   2fde0:	4294      	cmp	r4, r2
   2fde2:	bf28      	it	cs
   2fde4:	4614      	movcs	r4, r2
{
   2fde6:	4606      	mov	r6, r0

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
   2fde8:	fa4f f885 	sxtb.w	r8, r5
   2fdec:	4641      	mov	r1, r8
   2fdee:	f000 f9c2 	bl	30176 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
   2fdf2:	4622      	mov	r2, r4
   2fdf4:	4649      	mov	r1, r9
   2fdf6:	4630      	mov	r0, r6
   2fdf8:	f000 febd 	bl	30b76 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
   2fdfc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   2fe00:	00e4      	lsls	r4, r4, #3
   2fe02:	4294      	cmp	r4, r2
   2fe04:	d920      	bls.n	2fe48 <bits2int+0x8a>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
   2fe06:	1aa4      	subs	r4, r4, r2
	carry = 0;
   2fe08:	2200      	movs	r2, #0
	ptr = native + num_n_words;
   2fe0a:	eb06 0185 	add.w	r1, r6, r5, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
   2fe0e:	f1c4 0520 	rsb	r5, r4, #32
	while (ptr-- > native) {
   2fe12:	428e      	cmp	r6, r1
   2fe14:	d30f      	bcc.n	2fe36 <bits2int+0x78>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
   2fe16:	3724      	adds	r7, #36	; 0x24
   2fe18:	4642      	mov	r2, r8
   2fe1a:	4631      	mov	r1, r6
   2fe1c:	4638      	mov	r0, r7
   2fe1e:	f000 f9fb 	bl	30218 <uECC_vli_cmp_unsafe>
   2fe22:	2801      	cmp	r0, #1
   2fe24:	d010      	beq.n	2fe48 <bits2int+0x8a>
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2fe26:	4643      	mov	r3, r8
   2fe28:	463a      	mov	r2, r7
   2fe2a:	4631      	mov	r1, r6
   2fe2c:	4630      	mov	r0, r6
	}
}
   2fe2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2fe32:	f000 ba08 	b.w	30246 <uECC_vli_sub>
		uECC_word_t temp = *ptr;
   2fe36:	f851 0d04 	ldr.w	r0, [r1, #-4]!
		*ptr = (temp >> shift) | carry;
   2fe3a:	fa20 f304 	lsr.w	r3, r0, r4
   2fe3e:	4313      	orrs	r3, r2
   2fe40:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - shift);
   2fe42:	fa00 f205 	lsl.w	r2, r0, r5
   2fe46:	e7e4      	b.n	2fe12 <bits2int+0x54>
}
   2fe48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002fe4c <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
   2fe4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe50:	461e      	mov	r6, r3
   2fe52:	b0a9      	sub	sp, #164	; 0xa4
   2fe54:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   2fe56:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   2fe5a:	f995 a000 	ldrsb.w	sl, [r5]
	uECC_word_t *k2[2] = {tmp, s};
   2fe5e:	f10d 0920 	add.w	r9, sp, #32
   2fe62:	ab10      	add	r3, sp, #64	; 0x40
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
   2fe64:	4651      	mov	r1, sl
   2fe66:	4630      	mov	r0, r6
{
   2fe68:	9205      	str	r2, [sp, #20]
	uECC_word_t *k2[2] = {tmp, s};
   2fe6a:	f8cd 9018 	str.w	r9, [sp, #24]
   2fe6e:	9307      	str	r3, [sp, #28]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2fe70:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
  	if (uECC_vli_isZero(k, num_words) ||
   2fe74:	f000 f98a 	bl	3018c <uECC_vli_isZero>
   2fe78:	b118      	cbz	r0, 2fe82 <uECC_sign_with_k+0x36>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
   2fe7a:	2000      	movs	r0, #0
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
   2fe7c:	b029      	add	sp, #164	; 0xa4
   2fe7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2fe82:	f117 041f 	adds.w	r4, r7, #31
   2fe86:	bf48      	it	mi
   2fe88:	f107 043e 	addmi.w	r4, r7, #62	; 0x3e
   2fe8c:	f344 1447 	sbfx	r4, r4, #5, #8
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2fe90:	f105 0824 	add.w	r8, r5, #36	; 0x24
   2fe94:	4622      	mov	r2, r4
   2fe96:	4631      	mov	r1, r6
   2fe98:	4640      	mov	r0, r8
   2fe9a:	f000 f9ed 	bl	30278 <uECC_vli_cmp>
  	if (uECC_vli_isZero(k, num_words) ||
   2fe9e:	2801      	cmp	r0, #1
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2fea0:	4683      	mov	fp, r0
  	if (uECC_vli_isZero(k, num_words) ||
   2fea2:	d1ea      	bne.n	2fe7a <uECC_sign_with_k+0x2e>
	carry = regularize_k(k, tmp, s, curve);
   2fea4:	462b      	mov	r3, r5
   2fea6:	aa10      	add	r2, sp, #64	; 0x40
   2fea8:	4649      	mov	r1, r9
   2feaa:	4630      	mov	r0, r6
   2feac:	f000 fe22 	bl	30af4 <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
   2feb0:	fab0 f080 	clz	r0, r0
   2feb4:	3701      	adds	r7, #1
   2feb6:	ab28      	add	r3, sp, #160	; 0xa0
   2feb8:	0940      	lsrs	r0, r0, #5
   2feba:	b23f      	sxth	r7, r7
   2febc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2fec0:	9501      	str	r5, [sp, #4]
   2fec2:	9700      	str	r7, [sp, #0]
   2fec4:	f850 2c88 	ldr.w	r2, [r0, #-136]
   2fec8:	f105 0144 	add.w	r1, r5, #68	; 0x44
   2fecc:	a818      	add	r0, sp, #96	; 0x60
   2fece:	2300      	movs	r3, #0
   2fed0:	f000 fd41 	bl	30956 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
   2fed4:	4651      	mov	r1, sl
   2fed6:	a818      	add	r0, sp, #96	; 0x60
   2fed8:	f000 f958 	bl	3018c <uECC_vli_isZero>
   2fedc:	2800      	cmp	r0, #0
   2fede:	d1cc      	bne.n	2fe7a <uECC_sign_with_k+0x2e>
		uECC_vli_clear(tmp, num_n_words);
   2fee0:	4621      	mov	r1, r4
   2fee2:	4648      	mov	r0, r9
   2fee4:	f000 f947 	bl	30176 <uECC_vli_clear>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2fee8:	4643      	mov	r3, r8
   2feea:	464a      	mov	r2, r9
   2feec:	4631      	mov	r1, r6
   2feee:	4630      	mov	r0, r6
   2fef0:	9400      	str	r4, [sp, #0]
		tmp[0] = 1;
   2fef2:	f8cd b020 	str.w	fp, [sp, #32]
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2fef6:	f000 faa0 	bl	3043a <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
   2fefa:	4623      	mov	r3, r4
   2fefc:	4642      	mov	r2, r8
   2fefe:	4631      	mov	r1, r6
   2ff00:	4630      	mov	r0, r6
   2ff02:	f000 fc21 	bl	30748 <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
   2ff06:	4643      	mov	r3, r8
   2ff08:	464a      	mov	r2, r9
   2ff0a:	4631      	mov	r1, r6
   2ff0c:	4630      	mov	r0, r6
   2ff0e:	9400      	str	r4, [sp, #0]
   2ff10:	f000 fa93 	bl	3043a <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
   2ff14:	aa18      	add	r2, sp, #96	; 0x60
   2ff16:	f995 1001 	ldrsb.w	r1, [r5, #1]
   2ff1a:	9832      	ldr	r0, [sp, #200]	; 0xc8
   2ff1c:	f000 fe17 	bl	30b4e <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
   2ff20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   2ff24:	9903      	ldr	r1, [sp, #12]
   2ff26:	1dda      	adds	r2, r3, #7
   2ff28:	bf48      	it	mi
   2ff2a:	f103 020e 	addmi.w	r2, r3, #14
   2ff2e:	10d2      	asrs	r2, r2, #3
   2ff30:	a808      	add	r0, sp, #32
   2ff32:	f000 fe20 	bl	30b76 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
   2ff36:	aa28      	add	r2, sp, #160	; 0xa0
   2ff38:	1e63      	subs	r3, r4, #1
   2ff3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2ff3e:	2200      	movs	r2, #0
	uECC_vli_set(s, p, num_words);
   2ff40:	a918      	add	r1, sp, #96	; 0x60
	s[num_n_words - 1] = 0;
   2ff42:	f843 2c60 	str.w	r2, [r3, #-96]
	uECC_vli_set(s, p, num_words);
   2ff46:	a810      	add	r0, sp, #64	; 0x40
   2ff48:	4652      	mov	r2, sl
   2ff4a:	f000 f959 	bl	30200 <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
   2ff4e:	aa10      	add	r2, sp, #64	; 0x40
   2ff50:	4610      	mov	r0, r2
   2ff52:	4643      	mov	r3, r8
   2ff54:	a908      	add	r1, sp, #32
   2ff56:	9400      	str	r4, [sp, #0]
   2ff58:	f000 fa6f 	bl	3043a <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
   2ff5c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2ff60:	462b      	mov	r3, r5
   2ff62:	a808      	add	r0, sp, #32
   2ff64:	f7ff ff2b 	bl	2fdbe <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
   2ff68:	aa10      	add	r2, sp, #64	; 0x40
   2ff6a:	4610      	mov	r0, r2
   2ff6c:	4643      	mov	r3, r8
   2ff6e:	a908      	add	r1, sp, #32
   2ff70:	9400      	str	r4, [sp, #0]
   2ff72:	f000 f99a 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
   2ff76:	a910      	add	r1, sp, #64	; 0x40
   2ff78:	4608      	mov	r0, r1
   2ff7a:	4643      	mov	r3, r8
   2ff7c:	4632      	mov	r2, r6
   2ff7e:	9400      	str	r4, [sp, #0]
   2ff80:	f000 fa5b 	bl	3043a <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
   2ff84:	4621      	mov	r1, r4
   2ff86:	a810      	add	r0, sp, #64	; 0x40
   2ff88:	f000 f919 	bl	301be <uECC_vli_numBits>
   2ff8c:	f995 1001 	ldrsb.w	r1, [r5, #1]
   2ff90:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   2ff94:	f73f af71 	bgt.w	2fe7a <uECC_sign_with_k+0x2e>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
   2ff98:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   2ff9a:	aa10      	add	r2, sp, #64	; 0x40
   2ff9c:	1858      	adds	r0, r3, r1
   2ff9e:	f000 fdd6 	bl	30b4e <uECC_vli_nativeToBytes>
	return 1;
   2ffa2:	2001      	movs	r0, #1
   2ffa4:	e76a      	b.n	2fe7c <uECC_sign_with_k+0x30>

0002ffa6 <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
   2ffa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ffaa:	4606      	mov	r6, r0
   2ffac:	460f      	mov	r7, r1
   2ffae:	4690      	mov	r8, r2
   2ffb0:	4699      	mov	r9, r3
   2ffb2:	2440      	movs	r4, #64	; 0x40
   2ffb4:	b09a      	sub	sp, #104	; 0x68
   2ffb6:	9d22      	ldr	r5, [sp, #136]	; 0x88
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2ffb8:	f105 0a24 	add.w	sl, r5, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2ffbc:	f7e8 fae8 	bl	18590 <uECC_get_rng>
		if (!rng_function ||
   2ffc0:	4603      	mov	r3, r0
   2ffc2:	b1e0      	cbz	r0, 2fffe <uECC_sign+0x58>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2ffc4:	2140      	movs	r1, #64	; 0x40
   2ffc6:	a80a      	add	r0, sp, #40	; 0x28
   2ffc8:	4798      	blx	r3
		if (!rng_function ||
   2ffca:	b1c0      	cbz	r0, 2fffe <uECC_sign+0x58>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2ffcc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   2ffd0:	a90a      	add	r1, sp, #40	; 0x28
   2ffd2:	f112 031f 	adds.w	r3, r2, #31
   2ffd6:	bf48      	it	mi
   2ffd8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2ffdc:	f343 1347 	sbfx	r3, r3, #5, #8
   2ffe0:	4652      	mov	r2, sl
   2ffe2:	a802      	add	r0, sp, #8
   2ffe4:	f000 f98c 	bl	30300 <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
   2ffe8:	e9cd 9500 	strd	r9, r5, [sp]
   2ffec:	ab02      	add	r3, sp, #8
   2ffee:	4642      	mov	r2, r8
   2fff0:	4639      	mov	r1, r7
   2fff2:	4630      	mov	r0, r6
   2fff4:	f7ff ff2a 	bl	2fe4c <uECC_sign_with_k>
   2fff8:	b928      	cbnz	r0, 30006 <uECC_sign+0x60>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2fffa:	3c01      	subs	r4, #1
   2fffc:	d1de      	bne.n	2ffbc <uECC_sign+0x16>
			return 0;
   2fffe:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
   30000:	b01a      	add	sp, #104	; 0x68
   30002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return 1;
   30006:	2001      	movs	r0, #1
   30008:	e7fa      	b.n	30000 <uECC_sign+0x5a>

0003000a <uECC_vli_add>:
{
   3000a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   3000c:	2400      	movs	r4, #0
{
   3000e:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   30010:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   30012:	b265      	sxtb	r5, r4
   30014:	42ab      	cmp	r3, r5
   30016:	dc00      	bgt.n	3001a <uECC_vli_add+0x10>
}
   30018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   3001a:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   3001e:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   30022:	4435      	add	r5, r6
   30024:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   30026:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   30028:	bf8c      	ite	hi
   3002a:	2601      	movhi	r6, #1
   3002c:	2600      	movls	r6, #0
		result[i] = sum;
   3002e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   30032:	bf18      	it	ne
   30034:	4630      	movne	r0, r6
		result[i] = sum;
   30036:	3401      	adds	r4, #1
   30038:	e7eb      	b.n	30012 <uECC_vli_add+0x8>

0003003a <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
   3003a:	2300      	movs	r3, #0
	vli += num_words;
   3003c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
   30040:	4288      	cmp	r0, r1
   30042:	d300      	bcc.n	30046 <uECC_vli_rshift1+0xc>
}
   30044:	4770      	bx	lr
		uECC_word_t temp = *vli;
   30046:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   3004a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   3004e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   30050:	07d3      	lsls	r3, r2, #31
   30052:	e7f5      	b.n	30040 <uECC_vli_rshift1+0x6>

00030054 <vli_modInv_update>:
	if (!EVEN(uv)) {
   30054:	6803      	ldr	r3, [r0, #0]
{
   30056:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   30058:	f013 0601 	ands.w	r6, r3, #1
{
   3005c:	4605      	mov	r5, r0
   3005e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   30060:	d005      	beq.n	3006e <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   30062:	4613      	mov	r3, r2
   30064:	460a      	mov	r2, r1
   30066:	4601      	mov	r1, r0
   30068:	f7ff ffcf 	bl	3000a <uECC_vli_add>
   3006c:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   3006e:	4621      	mov	r1, r4
   30070:	4628      	mov	r0, r5
   30072:	f7ff ffe2 	bl	3003a <uECC_vli_rshift1>
	if (carry) {
   30076:	b146      	cbz	r6, 3008a <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   30078:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   3007c:	3a01      	subs	r2, #1
   3007e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   30082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30086:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   3008a:	bd70      	pop	{r4, r5, r6, pc}

0003008c <uECC_vli_mult>:
{
   3008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   30090:	2500      	movs	r5, #0
{
   30092:	b087      	sub	sp, #28
   30094:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   30098:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   3009a:	462a      	mov	r2, r5
   3009c:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   300a0:	4543      	cmp	r3, r8
   300a2:	dc16      	bgt.n	300d2 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   300a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   300a8:	f04f 0a00 	mov.w	sl, #0
   300ac:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   300b0:	9502      	str	r5, [sp, #8]
   300b2:	fa5f f58a 	uxtb.w	r5, sl
   300b6:	eb05 0c03 	add.w	ip, r5, r3
   300ba:	9e02      	ldr	r6, [sp, #8]
   300bc:	fa4f fc8c 	sxtb.w	ip, ip
   300c0:	45b4      	cmp	ip, r6
   300c2:	db2d      	blt.n	30120 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   300c4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   300c8:	f840 2c04 	str.w	r2, [r0, #-4]
}
   300cc:	b007      	add	sp, #28
   300ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   300d2:	f04f 0c00 	mov.w	ip, #0
   300d6:	46e6      	mov	lr, ip
   300d8:	9e01      	ldr	r6, [sp, #4]
   300da:	eb06 0985 	add.w	r9, r6, r5, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
   300de:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   300e0:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   300e4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   300e8:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   300ec:	fba7 ab06 	umull	sl, fp, r7, r6
   300f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   300f4:	eb1a 0601 	adds.w	r6, sl, r1
   300f8:	eb5b 0702 	adcs.w	r7, fp, r2
   300fc:	bf2c      	ite	cs
   300fe:	2201      	movcs	r2, #1
   30100:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   30102:	f10c 0c01 	add.w	ip, ip, #1
		for (i = 0; i <= k; ++i) {
   30106:	fa4f fa8c 	sxtb.w	sl, ip
   3010a:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   3010c:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   3010e:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   30110:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   30112:	dde4      	ble.n	300de <uECC_vli_mult+0x52>
		result[k] = r0;
   30114:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   30118:	463a      	mov	r2, r7
   3011a:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   3011c:	4674      	mov	r4, lr
   3011e:	e7bd      	b.n	3009c <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   30120:	3501      	adds	r5, #1
   30122:	b26d      	sxtb	r5, r5
   30124:	9e01      	ldr	r6, [sp, #4]
   30126:	ebac 0e05 	sub.w	lr, ip, r5
   3012a:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   3012e:	4626      	mov	r6, r4
   30130:	2400      	movs	r4, #0
   30132:	9900      	ldr	r1, [sp, #0]
   30134:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   30138:	429d      	cmp	r5, r3
   3013a:	db05      	blt.n	30148 <uECC_vli_mult+0xbc>
		result[k] = r0;
   3013c:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   30140:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   30144:	4632      	mov	r2, r6
   30146:	e7b4      	b.n	300b2 <uECC_vli_mult+0x26>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   30148:	f85e 7904 	ldr.w	r7, [lr], #-4
   3014c:	f85b 8b04 	ldr.w	r8, [fp], #4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   30150:	e9cd 2604 	strd	r2, r6, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   30154:	fba8 8907 	umull	r8, r9, r8, r7
   30158:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   3015c:	eb18 0601 	adds.w	r6, r8, r1
   30160:	eb59 0702 	adcs.w	r7, r9, r2
   30164:	bf2c      	ite	cs
   30166:	2201      	movcs	r2, #1
   30168:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   3016a:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   3016c:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   3016e:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   30170:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   30172:	463e      	mov	r6, r7
   30174:	e7e0      	b.n	30138 <uECC_vli_mult+0xac>

00030176 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   30176:	2300      	movs	r3, #0
{
   30178:	b510      	push	{r4, lr}
		 vli[i] = 0;
   3017a:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   3017c:	b25a      	sxtb	r2, r3
   3017e:	4291      	cmp	r1, r2
   30180:	dc00      	bgt.n	30184 <uECC_vli_clear+0xe>
}
   30182:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   30184:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   30188:	3301      	adds	r3, #1
   3018a:	e7f7      	b.n	3017c <uECC_vli_clear+0x6>

0003018c <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   3018c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   3018e:	461a      	mov	r2, r3
{
   30190:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   30192:	b25c      	sxtb	r4, r3
   30194:	42a1      	cmp	r1, r4
   30196:	dc03      	bgt.n	301a0 <uECC_vli_isZero+0x14>
}
   30198:	fab2 f082 	clz	r0, r2
   3019c:	0940      	lsrs	r0, r0, #5
   3019e:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   301a0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   301a4:	3301      	adds	r3, #1
   301a6:	4322      	orrs	r2, r4
   301a8:	e7f3      	b.n	30192 <uECC_vli_isZero+0x6>

000301aa <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   301aa:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   301ac:	114a      	asrs	r2, r1, #5
   301ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   301b2:	f001 011f 	and.w	r1, r1, #31
   301b6:	fa03 f101 	lsl.w	r1, r3, r1
}
   301ba:	4008      	ands	r0, r1
   301bc:	4770      	bx	lr

000301be <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   301be:	3901      	subs	r1, #1
   301c0:	b249      	sxtb	r1, r1
   301c2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   301c6:	2900      	cmp	r1, #0
   301c8:	da04      	bge.n	301d4 <uECC_vli_numBits+0x16>
	return (i + 1);
   301ca:	3101      	adds	r1, #1
   301cc:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   301ce:	b941      	cbnz	r1, 301e2 <uECC_vli_numBits+0x24>
		return 0;
   301d0:	4608      	mov	r0, r1
}
   301d2:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   301d4:	f853 2904 	ldr.w	r2, [r3], #-4
   301d8:	2a00      	cmp	r2, #0
   301da:	d1f6      	bne.n	301ca <uECC_vli_numBits+0xc>
   301dc:	3901      	subs	r1, #1
   301de:	b249      	sxtb	r1, r1
   301e0:	e7f1      	b.n	301c6 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   301e2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   301e6:	3b01      	subs	r3, #1
   301e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   301ec:	2000      	movs	r0, #0
   301ee:	b923      	cbnz	r3, 301fa <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   301f0:	3901      	subs	r1, #1
   301f2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   301f6:	b208      	sxth	r0, r1
   301f8:	4770      	bx	lr
		digit >>= 1;
   301fa:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   301fc:	3001      	adds	r0, #1
   301fe:	e7f6      	b.n	301ee <uECC_vli_numBits+0x30>

00030200 <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   30200:	2300      	movs	r3, #0
{
   30202:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   30204:	b25c      	sxtb	r4, r3
   30206:	42a2      	cmp	r2, r4
   30208:	dc00      	bgt.n	3020c <uECC_vli_set+0xc>
}
   3020a:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   3020c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   30210:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   30214:	3301      	adds	r3, #1
   30216:	e7f5      	b.n	30204 <uECC_vli_set+0x4>

00030218 <uECC_vli_cmp_unsafe>:
{
   30218:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   3021a:	3a01      	subs	r2, #1
   3021c:	b252      	sxtb	r2, r2
   3021e:	0093      	lsls	r3, r2, #2
   30220:	2a00      	cmp	r2, #0
   30222:	da01      	bge.n	30228 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   30224:	2000      	movs	r0, #0
}
   30226:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   30228:	58c5      	ldr	r5, [r0, r3]
   3022a:	58cc      	ldr	r4, [r1, r3]
   3022c:	42a5      	cmp	r5, r4
   3022e:	d805      	bhi.n	3023c <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   30230:	f1a3 0304 	sub.w	r3, r3, #4
   30234:	d304      	bcc.n	30240 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   30236:	3a01      	subs	r2, #1
   30238:	b252      	sxtb	r2, r2
   3023a:	e7f1      	b.n	30220 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   3023c:	2001      	movs	r0, #1
   3023e:	e7f2      	b.n	30226 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   30240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30244:	e7ef      	b.n	30226 <uECC_vli_cmp_unsafe+0xe>

00030246 <uECC_vli_sub>:
{
   30246:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   30248:	2400      	movs	r4, #0
{
   3024a:	4607      	mov	r7, r0
   3024c:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   3024e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   30250:	b265      	sxtb	r5, r4
   30252:	45ac      	cmp	ip, r5
   30254:	dc00      	bgt.n	30258 <uECC_vli_sub+0x12>
}
   30256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   30258:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   3025c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   30260:	1a35      	subs	r5, r6, r0
   30262:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   30264:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   30266:	bf34      	ite	cc
   30268:	2601      	movcc	r6, #1
   3026a:	2600      	movcs	r6, #0
		result[i] = diff;
   3026c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   30270:	bf18      	it	ne
   30272:	4630      	movne	r0, r6
		result[i] = diff;
   30274:	3401      	adds	r4, #1
   30276:	e7eb      	b.n	30250 <uECC_vli_sub+0xa>

00030278 <uECC_vli_cmp>:
{
   30278:	b530      	push	{r4, r5, lr}
   3027a:	b089      	sub	sp, #36	; 0x24
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   3027c:	4613      	mov	r3, r2
{
   3027e:	4615      	mov	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   30280:	460a      	mov	r2, r1
   30282:	4601      	mov	r1, r0
   30284:	4668      	mov	r0, sp
   30286:	f7ff ffde 	bl	30246 <uECC_vli_sub>
   3028a:	4604      	mov	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
   3028c:	4629      	mov	r1, r5
   3028e:	4668      	mov	r0, sp
   30290:	f7ff ff7c 	bl	3018c <uECC_vli_isZero>
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   30294:	3400      	adds	r4, #0
   30296:	bf18      	it	ne
   30298:	2401      	movne	r4, #1
	return (!equal - 2 * neg);
   3029a:	0064      	lsls	r4, r4, #1
}
   3029c:	2800      	cmp	r0, #0
   3029e:	bf14      	ite	ne
   302a0:	4260      	negne	r0, r4
   302a2:	f1c4 0001 	rsbeq	r0, r4, #1
   302a6:	b009      	add	sp, #36	; 0x24
   302a8:	bd30      	pop	{r4, r5, pc}

000302aa <uECC_vli_modAdd>:
{
   302aa:	b570      	push	{r4, r5, r6, lr}
   302ac:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   302b0:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   302b2:	4623      	mov	r3, r4
{
   302b4:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   302b6:	f7ff fea8 	bl	3000a <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   302ba:	b930      	cbnz	r0, 302ca <uECC_vli_modAdd+0x20>
   302bc:	4622      	mov	r2, r4
   302be:	4629      	mov	r1, r5
   302c0:	4630      	mov	r0, r6
   302c2:	f7ff ffa9 	bl	30218 <uECC_vli_cmp_unsafe>
   302c6:	2801      	cmp	r0, #1
   302c8:	d007      	beq.n	302da <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   302ca:	4623      	mov	r3, r4
   302cc:	4632      	mov	r2, r6
   302ce:	4629      	mov	r1, r5
   302d0:	4628      	mov	r0, r5
}
   302d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   302d6:	f7ff bfb6 	b.w	30246 <uECC_vli_sub>
}
   302da:	bd70      	pop	{r4, r5, r6, pc}

000302dc <uECC_vli_modSub>:
{
   302dc:	b570      	push	{r4, r5, r6, lr}
   302de:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   302e2:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   302e4:	4623      	mov	r3, r4
{
   302e6:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   302e8:	f7ff ffad 	bl	30246 <uECC_vli_sub>
	if (l_borrow) {
   302ec:	b138      	cbz	r0, 302fe <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   302ee:	4623      	mov	r3, r4
   302f0:	4632      	mov	r2, r6
   302f2:	4629      	mov	r1, r5
   302f4:	4628      	mov	r0, r5
}
   302f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   302fa:	f7ff be86 	b.w	3000a <uECC_vli_add>
}
   302fe:	bd70      	pop	{r4, r5, r6, pc}

00030300 <uECC_vli_mmod>:
{
   30300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30304:	461d      	mov	r5, r3
   30306:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
   30308:	ab14      	add	r3, sp, #80	; 0x50
   3030a:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   3030e:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   30310:	4629      	mov	r1, r5
   30312:	4610      	mov	r0, r2
{
   30314:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   30316:	f7ff ff52 	bl	301be <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   3031a:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   3031e:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   30320:	4626      	mov	r6, r4
   30322:	2c00      	cmp	r4, #0
   30324:	bfb8      	it	lt
   30326:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   3032a:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   3032c:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   30330:	f003 031f 	and.w	r3, r3, #31
   30334:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   30338:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   3033a:	bf58      	it	pl
   3033c:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   30340:	4631      	mov	r1, r6
   30342:	f7ff ff18 	bl	30176 <uECC_vli_clear>
	if (bit_shift > 0) {
   30346:	f1b8 0f00 	cmp.w	r8, #0
   3034a:	b230      	sxth	r0, r6
   3034c:	dd2d      	ble.n	303aa <uECC_vli_mmod+0xaa>
	uECC_word_t carry = 0;
   3034e:	2200      	movs	r2, #0
   30350:	ab04      	add	r3, sp, #16
   30352:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   30356:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   30358:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   3035c:	429d      	cmp	r5, r3
   3035e:	d819      	bhi.n	30394 <uECC_vli_mmod+0x94>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   30360:	2601      	movs	r6, #1
		for (i = 0; i < num_words * 2; ++i) {
   30362:	b22f      	sxth	r7, r5
   30364:	007b      	lsls	r3, r7, #1
   30366:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   30368:	ab04      	add	r3, sp, #16
   3036a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   3036e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   30372:	ab24      	add	r3, sp, #144	; 0x90
   30374:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   30378:	2c00      	cmp	r4, #0
   3037a:	da54      	bge.n	30426 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   3037c:	ab24      	add	r3, sp, #144	; 0x90
   3037e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   30382:	462a      	mov	r2, r5
   30384:	f856 1c88 	ldr.w	r1, [r6, #-136]
   30388:	4648      	mov	r0, r9
   3038a:	f7ff ff39 	bl	30200 <uECC_vli_set>
}
   3038e:	b025      	add	sp, #148	; 0x94
   30390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   30394:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   30398:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   3039a:	fa06 f108 	lsl.w	r1, r6, r8
   3039e:	430a      	orrs	r2, r1
   303a0:	f840 2b04 	str.w	r2, [r0], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   303a4:	fa26 f20c 	lsr.w	r2, r6, ip
   303a8:	e7d8      	b.n	3035c <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   303aa:	ab04      	add	r3, sp, #16
   303ac:	462a      	mov	r2, r5
   303ae:	4639      	mov	r1, r7
   303b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   303b4:	f7ff ff24 	bl	30200 <uECC_vli_set>
   303b8:	e7d2      	b.n	30360 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   303ba:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   303be:	fa0f fe82 	sxth.w	lr, r2
   303c2:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   303c6:	ab24      	add	r3, sp, #144	; 0x90
   303c8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   303cc:	f852 3c80 	ldr.w	r3, [r2, #-128]
   303d0:	3001      	adds	r0, #1
   303d2:	440b      	add	r3, r1
   303d4:	ebbb 0303 	subs.w	r3, fp, r3
   303d8:	bf34      	ite	cc
   303da:	2201      	movcc	r2, #1
   303dc:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   303de:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   303e0:	bf18      	it	ne
   303e2:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   303e4:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   303e8:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   303ec:	9b01      	ldr	r3, [sp, #4]
   303ee:	b242      	sxtb	r2, r0
   303f0:	429a      	cmp	r2, r3
   303f2:	dbe2      	blt.n	303ba <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   303f4:	1a73      	subs	r3, r6, r1
   303f6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   303f8:	4629      	mov	r1, r5
   303fa:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   303fc:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   303fe:	f7ff fe1c 	bl	3003a <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   30402:	ab24      	add	r3, sp, #144	; 0x90
   30404:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   30408:	f853 2c80 	ldr.w	r2, [r3, #-128]
   3040c:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   30410:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   30412:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   30416:	4638      	mov	r0, r7
	for (index = 1; shift >= 0; --shift) {
   30418:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   3041a:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   3041e:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   30420:	f7ff fe0b 	bl	3003a <uECC_vli_rshift1>
   30424:	e7a8      	b.n	30378 <uECC_vli_mmod+0x78>
   30426:	2000      	movs	r0, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   30428:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
   3042a:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   3042e:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   30430:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   30434:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   30438:	e7d8      	b.n	303ec <uECC_vli_mmod+0xec>

0003043a <uECC_vli_modMult>:
{
   3043a:	b570      	push	{r4, r5, r6, lr}
   3043c:	4605      	mov	r5, r0
   3043e:	461e      	mov	r6, r3
   30440:	b090      	sub	sp, #64	; 0x40
   30442:	f99d 4050 	ldrsb.w	r4, [sp, #80]	; 0x50
	uECC_vli_mult(product, left, right, num_words);
   30446:	4668      	mov	r0, sp
   30448:	4623      	mov	r3, r4
   3044a:	f7ff fe1f 	bl	3008c <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
   3044e:	4632      	mov	r2, r6
   30450:	4669      	mov	r1, sp
   30452:	4628      	mov	r0, r5
   30454:	f7ff ff54 	bl	30300 <uECC_vli_mmod>
}
   30458:	b010      	add	sp, #64	; 0x40
   3045a:	bd70      	pop	{r4, r5, r6, pc}

0003045c <uECC_vli_modMult_fast>:
{
   3045c:	b530      	push	{r4, r5, lr}
   3045e:	4605      	mov	r5, r0
   30460:	461c      	mov	r4, r3
   30462:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
   30464:	4668      	mov	r0, sp
   30466:	f993 3000 	ldrsb.w	r3, [r3]
   3046a:	f7ff fe0f 	bl	3008c <uECC_vli_mult>
	curve->mmod_fast(result, product);
   3046e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   30472:	4669      	mov	r1, sp
   30474:	4628      	mov	r0, r5
   30476:	4798      	blx	r3
}
   30478:	b011      	add	sp, #68	; 0x44
   3047a:	bd30      	pop	{r4, r5, pc}

0003047c <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   3047c:	4613      	mov	r3, r2
   3047e:	460a      	mov	r2, r1
   30480:	f7ff bfec 	b.w	3045c <uECC_vli_modMult_fast>

00030484 <double_jacobian_default>:
{
   30484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   30488:	f993 6000 	ldrsb.w	r6, [r3]
{
   3048c:	b092      	sub	sp, #72	; 0x48
   3048e:	4604      	mov	r4, r0
   30490:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   30492:	4610      	mov	r0, r2
   30494:	4631      	mov	r1, r6
{
   30496:	4615      	mov	r5, r2
   30498:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   3049a:	f7ff fe77 	bl	3018c <uECC_vli_isZero>
   3049e:	2800      	cmp	r0, #0
   304a0:	f040 8091 	bne.w	305c6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   304a4:	4642      	mov	r2, r8
   304a6:	4649      	mov	r1, r9
   304a8:	a802      	add	r0, sp, #8
   304aa:	f7ff ffe7 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   304ae:	4643      	mov	r3, r8
   304b0:	aa02      	add	r2, sp, #8
   304b2:	4621      	mov	r1, r4
   304b4:	a80a      	add	r0, sp, #40	; 0x28
   304b6:	f7ff ffd1 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   304ba:	a902      	add	r1, sp, #8
   304bc:	4608      	mov	r0, r1
   304be:	4642      	mov	r2, r8
   304c0:	f7ff ffdc 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   304c4:	4643      	mov	r3, r8
   304c6:	462a      	mov	r2, r5
   304c8:	4649      	mov	r1, r9
   304ca:	4648      	mov	r0, r9
   304cc:	f7ff ffc6 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   304d0:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   304d4:	4642      	mov	r2, r8
   304d6:	4629      	mov	r1, r5
   304d8:	4628      	mov	r0, r5
   304da:	f7ff ffcf 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   304de:	463b      	mov	r3, r7
   304e0:	462a      	mov	r2, r5
   304e2:	4621      	mov	r1, r4
   304e4:	4620      	mov	r0, r4
   304e6:	9600      	str	r6, [sp, #0]
   304e8:	f7ff fedf 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   304ec:	463b      	mov	r3, r7
   304ee:	462a      	mov	r2, r5
   304f0:	4629      	mov	r1, r5
   304f2:	4628      	mov	r0, r5
   304f4:	9600      	str	r6, [sp, #0]
   304f6:	f7ff fed8 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   304fa:	463b      	mov	r3, r7
   304fc:	462a      	mov	r2, r5
   304fe:	4621      	mov	r1, r4
   30500:	4628      	mov	r0, r5
   30502:	9600      	str	r6, [sp, #0]
   30504:	f7ff feea 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   30508:	4643      	mov	r3, r8
   3050a:	462a      	mov	r2, r5
   3050c:	4621      	mov	r1, r4
   3050e:	4620      	mov	r0, r4
   30510:	f7ff ffa4 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   30514:	463b      	mov	r3, r7
   30516:	4622      	mov	r2, r4
   30518:	4621      	mov	r1, r4
   3051a:	4628      	mov	r0, r5
   3051c:	9600      	str	r6, [sp, #0]
   3051e:	f7ff fec4 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   30522:	463b      	mov	r3, r7
   30524:	9600      	str	r6, [sp, #0]
   30526:	462a      	mov	r2, r5
   30528:	4621      	mov	r1, r4
   3052a:	4620      	mov	r0, r4
   3052c:	f7ff febd 	bl	302aa <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   30530:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   30532:	07db      	lsls	r3, r3, #31
   30534:	d54a      	bpl.n	305cc <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   30536:	4633      	mov	r3, r6
   30538:	463a      	mov	r2, r7
   3053a:	4621      	mov	r1, r4
   3053c:	4620      	mov	r0, r4
   3053e:	f7ff fd64 	bl	3000a <uECC_vli_add>
   30542:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   30544:	4631      	mov	r1, r6
   30546:	4620      	mov	r0, r4
   30548:	f7ff fd77 	bl	3003a <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   3054c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   30550:	3b01      	subs	r3, #1
   30552:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   30556:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   3055a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   3055e:	4642      	mov	r2, r8
   30560:	4621      	mov	r1, r4
   30562:	4628      	mov	r0, r5
   30564:	f7ff ff8a 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   30568:	463b      	mov	r3, r7
   3056a:	aa0a      	add	r2, sp, #40	; 0x28
   3056c:	4629      	mov	r1, r5
   3056e:	4628      	mov	r0, r5
   30570:	9600      	str	r6, [sp, #0]
   30572:	f7ff feb3 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   30576:	463b      	mov	r3, r7
   30578:	aa0a      	add	r2, sp, #40	; 0x28
   3057a:	4629      	mov	r1, r5
   3057c:	4628      	mov	r0, r5
   3057e:	9600      	str	r6, [sp, #0]
   30580:	f7ff feac 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   30584:	a90a      	add	r1, sp, #40	; 0x28
   30586:	4608      	mov	r0, r1
   30588:	463b      	mov	r3, r7
   3058a:	462a      	mov	r2, r5
   3058c:	9600      	str	r6, [sp, #0]
   3058e:	f7ff fea5 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   30592:	4643      	mov	r3, r8
   30594:	aa0a      	add	r2, sp, #40	; 0x28
   30596:	4621      	mov	r1, r4
   30598:	4620      	mov	r0, r4
   3059a:	f7ff ff5f 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   3059e:	aa02      	add	r2, sp, #8
   305a0:	463b      	mov	r3, r7
   305a2:	4610      	mov	r0, r2
   305a4:	4621      	mov	r1, r4
   305a6:	9600      	str	r6, [sp, #0]
   305a8:	f7ff fe98 	bl	302dc <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   305ac:	4632      	mov	r2, r6
   305ae:	4629      	mov	r1, r5
   305b0:	4620      	mov	r0, r4
   305b2:	f7ff fe25 	bl	30200 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   305b6:	4649      	mov	r1, r9
   305b8:	4628      	mov	r0, r5
   305ba:	f7ff fe21 	bl	30200 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   305be:	a902      	add	r1, sp, #8
   305c0:	4648      	mov	r0, r9
   305c2:	f7ff fe1d 	bl	30200 <uECC_vli_set>
}
   305c6:	b012      	add	sp, #72	; 0x48
   305c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   305cc:	4631      	mov	r1, r6
   305ce:	4620      	mov	r0, r4
   305d0:	f7ff fd33 	bl	3003a <uECC_vli_rshift1>
   305d4:	e7c3      	b.n	3055e <double_jacobian_default+0xda>

000305d6 <x_side_default>:
{
   305d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   305da:	4615      	mov	r5, r2
   305dc:	b08a      	sub	sp, #40	; 0x28
   305de:	4604      	mov	r4, r0
   305e0:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   305e2:	221c      	movs	r2, #28
   305e4:	2100      	movs	r1, #0
   305e6:	a803      	add	r0, sp, #12
   305e8:	f004 fa54 	bl	34a94 <memset>
   305ec:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
   305ee:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   305f2:	462a      	mov	r2, r5
   305f4:	4641      	mov	r1, r8
   305f6:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   305f8:	1d2e      	adds	r6, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   305fa:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   305fc:	f7ff ff3e 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   30600:	4633      	mov	r3, r6
   30602:	aa02      	add	r2, sp, #8
   30604:	4621      	mov	r1, r4
   30606:	4620      	mov	r0, r4
   30608:	9700      	str	r7, [sp, #0]
   3060a:	f7ff fe67 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   3060e:	462b      	mov	r3, r5
   30610:	4642      	mov	r2, r8
   30612:	4621      	mov	r1, r4
   30614:	4620      	mov	r0, r4
   30616:	f7ff ff21 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   3061a:	9700      	str	r7, [sp, #0]
   3061c:	4633      	mov	r3, r6
   3061e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   30622:	4621      	mov	r1, r4
   30624:	4620      	mov	r0, r4
   30626:	f7ff fe40 	bl	302aa <uECC_vli_modAdd>
}
   3062a:	b00a      	add	sp, #40	; 0x28
   3062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030630 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   30630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30634:	4616      	mov	r6, r2
   30636:	4607      	mov	r7, r0
   30638:	4698      	mov	r8, r3
   3063a:	4689      	mov	r9, r1
   3063c:	b09b      	sub	sp, #108	; 0x6c
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   3063e:	9c22      	ldr	r4, [sp, #136]	; 0x88

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   30640:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   30642:	f914 5b04 	ldrsb.w	r5, [r4], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   30646:	4631      	mov	r1, r6
   30648:	4623      	mov	r3, r4
   3064a:	a802      	add	r0, sp, #8
   3064c:	9500      	str	r5, [sp, #0]
   3064e:	f7ff fe45 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   30652:	a902      	add	r1, sp, #8
   30654:	9a22      	ldr	r2, [sp, #136]	; 0x88
   30656:	4608      	mov	r0, r1
   30658:	f7ff ff10 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   3065c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   3065e:	aa02      	add	r2, sp, #8
   30660:	4639      	mov	r1, r7
   30662:	4638      	mov	r0, r7
   30664:	f7ff fefa 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   30668:	9b22      	ldr	r3, [sp, #136]	; 0x88
   3066a:	aa02      	add	r2, sp, #8
   3066c:	4631      	mov	r1, r6
   3066e:	4630      	mov	r0, r6
   30670:	f7ff fef4 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   30674:	4623      	mov	r3, r4
   30676:	464a      	mov	r2, r9
   30678:	4641      	mov	r1, r8
   3067a:	a802      	add	r0, sp, #8
   3067c:	9500      	str	r5, [sp, #0]
   3067e:	f7ff fe14 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   30682:	4623      	mov	r3, r4
   30684:	464a      	mov	r2, r9
   30686:	4641      	mov	r1, r8
   30688:	4640      	mov	r0, r8
   3068a:	9500      	str	r5, [sp, #0]
   3068c:	f7ff fe26 	bl	302dc <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   30690:	4623      	mov	r3, r4
   30692:	463a      	mov	r2, r7
   30694:	4631      	mov	r1, r6
   30696:	a80a      	add	r0, sp, #40	; 0x28
   30698:	9500      	str	r5, [sp, #0]
   3069a:	f7ff fe1f 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   3069e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   306a0:	aa0a      	add	r2, sp, #40	; 0x28
   306a2:	4649      	mov	r1, r9
   306a4:	4648      	mov	r0, r9
   306a6:	f7ff fed9 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   306aa:	4623      	mov	r3, r4
   306ac:	4632      	mov	r2, r6
   306ae:	4639      	mov	r1, r7
   306b0:	a80a      	add	r0, sp, #40	; 0x28
   306b2:	9500      	str	r5, [sp, #0]
   306b4:	f7ff fdf9 	bl	302aa <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   306b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   306ba:	4641      	mov	r1, r8
   306bc:	4630      	mov	r0, r6
   306be:	f7ff fedd 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   306c2:	4623      	mov	r3, r4
   306c4:	aa0a      	add	r2, sp, #40	; 0x28
   306c6:	4631      	mov	r1, r6
   306c8:	4630      	mov	r0, r6
   306ca:	9500      	str	r5, [sp, #0]
   306cc:	f7ff fe06 	bl	302dc <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   306d0:	4623      	mov	r3, r4
   306d2:	4632      	mov	r2, r6
   306d4:	4639      	mov	r1, r7
   306d6:	a812      	add	r0, sp, #72	; 0x48
   306d8:	9500      	str	r5, [sp, #0]
   306da:	f7ff fdff 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   306de:	9b22      	ldr	r3, [sp, #136]	; 0x88
   306e0:	aa12      	add	r2, sp, #72	; 0x48
   306e2:	4641      	mov	r1, r8
   306e4:	4640      	mov	r0, r8
   306e6:	f7ff feb9 	bl	3045c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   306ea:	4623      	mov	r3, r4
   306ec:	464a      	mov	r2, r9
   306ee:	4641      	mov	r1, r8
   306f0:	4640      	mov	r0, r8
   306f2:	9500      	str	r5, [sp, #0]
   306f4:	f7ff fdf2 	bl	302dc <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   306f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   306fa:	a902      	add	r1, sp, #8
   306fc:	a812      	add	r0, sp, #72	; 0x48
   306fe:	f7ff febd 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   30702:	a912      	add	r1, sp, #72	; 0x48
   30704:	4623      	mov	r3, r4
   30706:	aa0a      	add	r2, sp, #40	; 0x28
   30708:	4608      	mov	r0, r1
   3070a:	9500      	str	r5, [sp, #0]
   3070c:	f7ff fde6 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   30710:	4623      	mov	r3, r4
   30712:	463a      	mov	r2, r7
   30714:	a912      	add	r1, sp, #72	; 0x48
   30716:	a80a      	add	r0, sp, #40	; 0x28
   30718:	9500      	str	r5, [sp, #0]
   3071a:	f7ff fddf 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   3071e:	a90a      	add	r1, sp, #40	; 0x28
   30720:	9b22      	ldr	r3, [sp, #136]	; 0x88
   30722:	aa02      	add	r2, sp, #8
   30724:	4608      	mov	r0, r1
   30726:	f7ff fe99 	bl	3045c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   3072a:	4623      	mov	r3, r4
   3072c:	464a      	mov	r2, r9
   3072e:	a90a      	add	r1, sp, #40	; 0x28
   30730:	4648      	mov	r0, r9
   30732:	9500      	str	r5, [sp, #0]
   30734:	f7ff fdd2 	bl	302dc <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   30738:	462a      	mov	r2, r5
   3073a:	a912      	add	r1, sp, #72	; 0x48
   3073c:	4638      	mov	r0, r7
   3073e:	f7ff fd5f 	bl	30200 <uECC_vli_set>
}
   30742:	b01b      	add	sp, #108	; 0x6c
   30744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00030748 <uECC_vli_modInv>:
{
   30748:	b5f0      	push	{r4, r5, r6, r7, lr}
   3074a:	460f      	mov	r7, r1
   3074c:	b0a1      	sub	sp, #132	; 0x84
   3074e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   30750:	4619      	mov	r1, r3
   30752:	4638      	mov	r0, r7
{
   30754:	4615      	mov	r5, r2
   30756:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   30758:	f7ff fd18 	bl	3018c <uECC_vli_isZero>
   3075c:	b120      	cbz	r0, 30768 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   3075e:	4630      	mov	r0, r6
   30760:	f7ff fd09 	bl	30176 <uECC_vli_clear>
}
   30764:	b021      	add	sp, #132	; 0x84
   30766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   30768:	4622      	mov	r2, r4
   3076a:	4639      	mov	r1, r7
   3076c:	4668      	mov	r0, sp
   3076e:	f7ff fd47 	bl	30200 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   30772:	4629      	mov	r1, r5
   30774:	a808      	add	r0, sp, #32
   30776:	f7ff fd43 	bl	30200 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   3077a:	a810      	add	r0, sp, #64	; 0x40
   3077c:	4621      	mov	r1, r4
   3077e:	f7ff fcfa 	bl	30176 <uECC_vli_clear>
	u[0] = 1;
   30782:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   30784:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   30786:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   30788:	f7ff fcf5 	bl	30176 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   3078c:	4622      	mov	r2, r4
   3078e:	a908      	add	r1, sp, #32
   30790:	4668      	mov	r0, sp
   30792:	f7ff fd41 	bl	30218 <uECC_vli_cmp_unsafe>
   30796:	b928      	cbnz	r0, 307a4 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   30798:	4622      	mov	r2, r4
   3079a:	a910      	add	r1, sp, #64	; 0x40
   3079c:	4630      	mov	r0, r6
   3079e:	f7ff fd2f 	bl	30200 <uECC_vli_set>
   307a2:	e7df      	b.n	30764 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   307a4:	9b00      	ldr	r3, [sp, #0]
   307a6:	07da      	lsls	r2, r3, #31
   307a8:	d409      	bmi.n	307be <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   307aa:	4621      	mov	r1, r4
   307ac:	4668      	mov	r0, sp
   307ae:	f7ff fc44 	bl	3003a <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   307b2:	4622      	mov	r2, r4
   307b4:	4629      	mov	r1, r5
   307b6:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   307b8:	f7ff fc4c 	bl	30054 <vli_modInv_update>
   307bc:	e7e6      	b.n	3078c <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   307be:	9b08      	ldr	r3, [sp, #32]
   307c0:	07db      	lsls	r3, r3, #31
   307c2:	d407      	bmi.n	307d4 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   307c4:	4621      	mov	r1, r4
   307c6:	a808      	add	r0, sp, #32
   307c8:	f7ff fc37 	bl	3003a <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   307cc:	4622      	mov	r2, r4
   307ce:	4629      	mov	r1, r5
   307d0:	a818      	add	r0, sp, #96	; 0x60
   307d2:	e7f1      	b.n	307b8 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   307d4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   307d6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   307d8:	dd1c      	ble.n	30814 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   307da:	aa08      	add	r2, sp, #32
   307dc:	4669      	mov	r1, sp
   307de:	4668      	mov	r0, sp
   307e0:	f7ff fd31 	bl	30246 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   307e4:	4621      	mov	r1, r4
   307e6:	4668      	mov	r0, sp
   307e8:	f7ff fc27 	bl	3003a <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   307ec:	4622      	mov	r2, r4
   307ee:	a918      	add	r1, sp, #96	; 0x60
   307f0:	a810      	add	r0, sp, #64	; 0x40
   307f2:	f7ff fd11 	bl	30218 <uECC_vli_cmp_unsafe>
   307f6:	2800      	cmp	r0, #0
   307f8:	da05      	bge.n	30806 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   307fa:	a910      	add	r1, sp, #64	; 0x40
   307fc:	4623      	mov	r3, r4
   307fe:	462a      	mov	r2, r5
   30800:	4608      	mov	r0, r1
   30802:	f7ff fc02 	bl	3000a <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   30806:	a910      	add	r1, sp, #64	; 0x40
   30808:	4623      	mov	r3, r4
   3080a:	aa18      	add	r2, sp, #96	; 0x60
   3080c:	4608      	mov	r0, r1
   3080e:	f7ff fd1a 	bl	30246 <uECC_vli_sub>
   30812:	e7ce      	b.n	307b2 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   30814:	a908      	add	r1, sp, #32
   30816:	466a      	mov	r2, sp
   30818:	4608      	mov	r0, r1
   3081a:	f7ff fd14 	bl	30246 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   3081e:	4621      	mov	r1, r4
   30820:	a808      	add	r0, sp, #32
   30822:	f7ff fc0a 	bl	3003a <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   30826:	4622      	mov	r2, r4
   30828:	a910      	add	r1, sp, #64	; 0x40
   3082a:	a818      	add	r0, sp, #96	; 0x60
   3082c:	f7ff fcf4 	bl	30218 <uECC_vli_cmp_unsafe>
   30830:	2800      	cmp	r0, #0
   30832:	da05      	bge.n	30840 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   30834:	a918      	add	r1, sp, #96	; 0x60
   30836:	4623      	mov	r3, r4
   30838:	462a      	mov	r2, r5
   3083a:	4608      	mov	r0, r1
   3083c:	f7ff fbe5 	bl	3000a <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   30840:	a918      	add	r1, sp, #96	; 0x60
   30842:	4623      	mov	r3, r4
   30844:	aa10      	add	r2, sp, #64	; 0x40
   30846:	4608      	mov	r0, r1
   30848:	f7ff fcfd 	bl	30246 <uECC_vli_sub>
   3084c:	e7be      	b.n	307cc <uECC_vli_modInv+0x84>

0003084e <apply_z>:
{
   3084e:	b5f0      	push	{r4, r5, r6, r7, lr}
   30850:	4615      	mov	r5, r2
   30852:	461c      	mov	r4, r3
   30854:	4607      	mov	r7, r0
   30856:	460e      	mov	r6, r1
   30858:	b089      	sub	sp, #36	; 0x24
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   3085a:	461a      	mov	r2, r3
   3085c:	4629      	mov	r1, r5
   3085e:	4668      	mov	r0, sp
   30860:	f7ff fe0c 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   30864:	4623      	mov	r3, r4
   30866:	466a      	mov	r2, sp
   30868:	4639      	mov	r1, r7
   3086a:	4638      	mov	r0, r7
   3086c:	f7ff fdf6 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   30870:	4623      	mov	r3, r4
   30872:	462a      	mov	r2, r5
   30874:	4669      	mov	r1, sp
   30876:	4668      	mov	r0, sp
   30878:	f7ff fdf0 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   3087c:	4623      	mov	r3, r4
   3087e:	466a      	mov	r2, sp
   30880:	4631      	mov	r1, r6
   30882:	4630      	mov	r0, r6
   30884:	f7ff fdea 	bl	3045c <uECC_vli_modMult_fast>
}
   30888:	b009      	add	sp, #36	; 0x24
   3088a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003088c <XYcZ_add>:
{
   3088c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30890:	4614      	mov	r4, r2
   30892:	4680      	mov	r8, r0
   30894:	461f      	mov	r7, r3
   30896:	4689      	mov	r9, r1
   30898:	b08b      	sub	sp, #44	; 0x2c
	wordcount_t num_words = curve->num_words;
   3089a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   3089c:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   3089e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   308a2:	4621      	mov	r1, r4
   308a4:	462b      	mov	r3, r5
   308a6:	a802      	add	r0, sp, #8
   308a8:	9600      	str	r6, [sp, #0]
   308aa:	f7ff fd17 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   308ae:	a902      	add	r1, sp, #8
   308b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   308b2:	4608      	mov	r0, r1
   308b4:	f7ff fde2 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   308b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   308ba:	aa02      	add	r2, sp, #8
   308bc:	4641      	mov	r1, r8
   308be:	4640      	mov	r0, r8
   308c0:	f7ff fdcc 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   308c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   308c6:	aa02      	add	r2, sp, #8
   308c8:	4621      	mov	r1, r4
   308ca:	4620      	mov	r0, r4
   308cc:	f7ff fdc6 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   308d0:	462b      	mov	r3, r5
   308d2:	464a      	mov	r2, r9
   308d4:	4639      	mov	r1, r7
   308d6:	4638      	mov	r0, r7
   308d8:	9600      	str	r6, [sp, #0]
   308da:	f7ff fcff 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   308de:	9a12      	ldr	r2, [sp, #72]	; 0x48
   308e0:	4639      	mov	r1, r7
   308e2:	a802      	add	r0, sp, #8
   308e4:	f7ff fdca 	bl	3047c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   308e8:	a902      	add	r1, sp, #8
   308ea:	462b      	mov	r3, r5
   308ec:	4642      	mov	r2, r8
   308ee:	4608      	mov	r0, r1
   308f0:	9600      	str	r6, [sp, #0]
   308f2:	f7ff fcf3 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   308f6:	a902      	add	r1, sp, #8
   308f8:	462b      	mov	r3, r5
   308fa:	4622      	mov	r2, r4
   308fc:	4608      	mov	r0, r1
   308fe:	9600      	str	r6, [sp, #0]
   30900:	f7ff fcec 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   30904:	462b      	mov	r3, r5
   30906:	4642      	mov	r2, r8
   30908:	4621      	mov	r1, r4
   3090a:	4620      	mov	r0, r4
   3090c:	9600      	str	r6, [sp, #0]
   3090e:	f7ff fce5 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   30912:	9b12      	ldr	r3, [sp, #72]	; 0x48
   30914:	4622      	mov	r2, r4
   30916:	4649      	mov	r1, r9
   30918:	4648      	mov	r0, r9
   3091a:	f7ff fd9f 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   3091e:	462b      	mov	r3, r5
   30920:	aa02      	add	r2, sp, #8
   30922:	4641      	mov	r1, r8
   30924:	4620      	mov	r0, r4
   30926:	9600      	str	r6, [sp, #0]
   30928:	f7ff fcd8 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   3092c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3092e:	4622      	mov	r2, r4
   30930:	4639      	mov	r1, r7
   30932:	4638      	mov	r0, r7
   30934:	f7ff fd92 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   30938:	462b      	mov	r3, r5
   3093a:	464a      	mov	r2, r9
   3093c:	4639      	mov	r1, r7
   3093e:	4638      	mov	r0, r7
   30940:	9600      	str	r6, [sp, #0]
   30942:	f7ff fccb 	bl	302dc <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   30946:	4632      	mov	r2, r6
   30948:	a902      	add	r1, sp, #8
   3094a:	4620      	mov	r0, r4
   3094c:	f7ff fc58 	bl	30200 <uECC_vli_set>
}
   30950:	b00b      	add	sp, #44	; 0x2c
   30952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00030956 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   30956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3095a:	461e      	mov	r6, r3
   3095c:	b0b1      	sub	sp, #196	; 0xc4
   3095e:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   30960:	e9cd 0104 	strd	r0, r1, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   30964:	f994 7000 	ldrsb.w	r7, [r4]
{
   30968:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
   3096a:	a818      	add	r0, sp, #96	; 0x60
   3096c:	463a      	mov	r2, r7
   3096e:	f7ff fc47 	bl	30200 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   30972:	00bb      	lsls	r3, r7, #2
   30974:	9307      	str	r3, [sp, #28]
   30976:	9b05      	ldr	r3, [sp, #20]
   30978:	00ba      	lsls	r2, r7, #2
   3097a:	4413      	add	r3, r2
   3097c:	4619      	mov	r1, r3
   3097e:	463a      	mov	r2, r7
   30980:	a828      	add	r0, sp, #160	; 0xa0
   30982:	9302      	str	r3, [sp, #8]
   30984:	f7ff fc3c 	bl	30200 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   30988:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   3098c:	2e00      	cmp	r6, #0
   3098e:	f000 8087 	beq.w	30aa0 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   30992:	462a      	mov	r2, r5
   30994:	4631      	mov	r1, r6
   30996:	a808      	add	r0, sp, #32
   30998:	f7ff fc32 	bl	30200 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   3099c:	ae10      	add	r6, sp, #64	; 0x40
   3099e:	462a      	mov	r2, r5
   309a0:	a918      	add	r1, sp, #96	; 0x60
   309a2:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   309a4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   309a8:	f7ff fc2a 	bl	30200 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   309ac:	a928      	add	r1, sp, #160	; 0xa0
   309ae:	4648      	mov	r0, r9
   309b0:	f7ff fc26 	bl	30200 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   309b4:	4623      	mov	r3, r4
   309b6:	aa08      	add	r2, sp, #32
   309b8:	a928      	add	r1, sp, #160	; 0xa0
   309ba:	a818      	add	r0, sp, #96	; 0x60
   309bc:	f7ff ff47 	bl	3084e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   309c0:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   309c4:	4623      	mov	r3, r4
   309c6:	aa08      	add	r2, sp, #32
   309c8:	a928      	add	r1, sp, #160	; 0xa0
   309ca:	a818      	add	r0, sp, #96	; 0x60
   309cc:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   309ce:	4623      	mov	r3, r4
   309d0:	aa08      	add	r2, sp, #32
   309d2:	4649      	mov	r1, r9
   309d4:	4630      	mov	r0, r6
   309d6:	f7ff ff3a 	bl	3084e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   309da:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   309de:	3d02      	subs	r5, #2
   309e0:	b22d      	sxth	r5, r5
   309e2:	2d00      	cmp	r5, #0
   309e4:	dc63      	bgt.n	30aae <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   309e6:	9b06      	ldr	r3, [sp, #24]

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   309e8:	f104 0a04 	add.w	sl, r4, #4
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   309ec:	681d      	ldr	r5, [r3, #0]
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   309ee:	ab10      	add	r3, sp, #64	; 0x40
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   309f0:	f005 0601 	and.w	r6, r5, #1
   309f4:	43ed      	mvns	r5, r5
   309f6:	0176      	lsls	r6, r6, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   309f8:	eb03 0806 	add.w	r8, r3, r6
   309fc:	f005 0501 	and.w	r5, r5, #1
   30a00:	ab20      	add	r3, sp, #128	; 0x80
   30a02:	441e      	add	r6, r3
   30a04:	016d      	lsls	r5, r5, #5
   30a06:	ab10      	add	r3, sp, #64	; 0x40
   30a08:	eb03 0905 	add.w	r9, r3, r5
   30a0c:	ab20      	add	r3, sp, #128	; 0x80
   30a0e:	441d      	add	r5, r3
   30a10:	9400      	str	r4, [sp, #0]
   30a12:	462b      	mov	r3, r5
   30a14:	464a      	mov	r2, r9
   30a16:	4631      	mov	r1, r6
   30a18:	4640      	mov	r0, r8
   30a1a:	f7ff fe09 	bl	30630 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   30a1e:	4653      	mov	r3, sl
   30a20:	aa10      	add	r2, sp, #64	; 0x40
   30a22:	a918      	add	r1, sp, #96	; 0x60
   30a24:	a808      	add	r0, sp, #32
   30a26:	9700      	str	r7, [sp, #0]
   30a28:	f7ff fc58 	bl	302dc <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   30a2c:	a908      	add	r1, sp, #32
   30a2e:	4623      	mov	r3, r4
   30a30:	4632      	mov	r2, r6
   30a32:	4608      	mov	r0, r1
   30a34:	f7ff fd12 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   30a38:	a908      	add	r1, sp, #32
   30a3a:	4623      	mov	r3, r4
   30a3c:	9a05      	ldr	r2, [sp, #20]
   30a3e:	4608      	mov	r0, r1
   30a40:	f7ff fd0c 	bl	3045c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   30a44:	a908      	add	r1, sp, #32
   30a46:	463b      	mov	r3, r7
   30a48:	4652      	mov	r2, sl
   30a4a:	4608      	mov	r0, r1
   30a4c:	f7ff fe7c 	bl	30748 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   30a50:	a908      	add	r1, sp, #32
   30a52:	4623      	mov	r3, r4
   30a54:	9a02      	ldr	r2, [sp, #8]
   30a56:	4608      	mov	r0, r1
   30a58:	f7ff fd00 	bl	3045c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   30a5c:	a908      	add	r1, sp, #32
   30a5e:	4623      	mov	r3, r4
   30a60:	4642      	mov	r2, r8
   30a62:	4608      	mov	r0, r1
   30a64:	f7ff fcfa 	bl	3045c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   30a68:	9400      	str	r4, [sp, #0]
   30a6a:	4633      	mov	r3, r6
   30a6c:	4642      	mov	r2, r8
   30a6e:	4629      	mov	r1, r5
   30a70:	4648      	mov	r0, r9
   30a72:	f7ff ff0b 	bl	3088c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   30a76:	4623      	mov	r3, r4
   30a78:	aa08      	add	r2, sp, #32
   30a7a:	a920      	add	r1, sp, #128	; 0x80
   30a7c:	a810      	add	r0, sp, #64	; 0x40
   30a7e:	f7ff fee6 	bl	3084e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   30a82:	463a      	mov	r2, r7
   30a84:	a910      	add	r1, sp, #64	; 0x40
   30a86:	9804      	ldr	r0, [sp, #16]
   30a88:	f7ff fbba 	bl	30200 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   30a8c:	9b04      	ldr	r3, [sp, #16]
   30a8e:	9c07      	ldr	r4, [sp, #28]
   30a90:	a920      	add	r1, sp, #128	; 0x80
   30a92:	4423      	add	r3, r4
   30a94:	4618      	mov	r0, r3
   30a96:	f7ff fbb3 	bl	30200 <uECC_vli_set>
}
   30a9a:	b031      	add	sp, #196	; 0xc4
   30a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   30aa0:	4629      	mov	r1, r5
   30aa2:	a808      	add	r0, sp, #32
   30aa4:	f7ff fb67 	bl	30176 <uECC_vli_clear>
		z[0] = 1;
   30aa8:	2301      	movs	r3, #1
   30aaa:	9308      	str	r3, [sp, #32]
   30aac:	e776      	b.n	3099c <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   30aae:	4629      	mov	r1, r5
   30ab0:	9806      	ldr	r0, [sp, #24]
   30ab2:	f7ff fb7a 	bl	301aa <uECC_vli_testBit>
   30ab6:	fab0 f080 	clz	r0, r0
   30aba:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   30abc:	f1c0 0801 	rsb	r8, r0, #1
   30ac0:	ea4f 1848 	mov.w	r8, r8, lsl #5
   30ac4:	0140      	lsls	r0, r0, #5
   30ac6:	eb06 0b08 	add.w	fp, r6, r8
   30aca:	eb06 0a00 	add.w	sl, r6, r0
   30ace:	44c8      	add	r8, r9
   30ad0:	eb09 0300 	add.w	r3, r9, r0
   30ad4:	4652      	mov	r2, sl
   30ad6:	4641      	mov	r1, r8
   30ad8:	4658      	mov	r0, fp
   30ada:	9400      	str	r4, [sp, #0]
   30adc:	9303      	str	r3, [sp, #12]
   30ade:	f7ff fda7 	bl	30630 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   30ae2:	9400      	str	r4, [sp, #0]
   30ae4:	4643      	mov	r3, r8
   30ae6:	465a      	mov	r2, fp
   30ae8:	9903      	ldr	r1, [sp, #12]
   30aea:	4650      	mov	r0, sl
   30aec:	f7ff fece 	bl	3088c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   30af0:	3d01      	subs	r5, #1
   30af2:	e775      	b.n	309e0 <EccPoint_mult+0x8a>

00030af4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   30af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30af8:	460f      	mov	r7, r1

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30afa:	f9b3 4002 	ldrsh.w	r4, [r3, #2]

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   30afe:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   30b02:	f114 051f 	adds.w	r5, r4, #31
   30b06:	bf48      	it	mi
   30b08:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
   30b0c:	f345 1547 	sbfx	r5, r5, #5, #8
{
   30b10:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   30b12:	4601      	mov	r1, r0
   30b14:	462b      	mov	r3, r5
   30b16:	4632      	mov	r2, r6
   30b18:	4638      	mov	r0, r7
   30b1a:	f7ff fa76 	bl	3000a <uECC_vli_add>
   30b1e:	b990      	cbnz	r0, 30b46 <regularize_k+0x52>
   30b20:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   30b24:	da11      	bge.n	30b4a <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   30b26:	4621      	mov	r1, r4
   30b28:	4638      	mov	r0, r7
   30b2a:	f7ff fb3e 	bl	301aa <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   30b2e:	1c04      	adds	r4, r0, #0
   30b30:	bf18      	it	ne
   30b32:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   30b34:	462b      	mov	r3, r5
   30b36:	4632      	mov	r2, r6
   30b38:	4639      	mov	r1, r7
   30b3a:	4640      	mov	r0, r8
   30b3c:	f7ff fa65 	bl	3000a <uECC_vli_add>

	return carry;
}
   30b40:	4620      	mov	r0, r4
   30b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   30b46:	2401      	movs	r4, #1
   30b48:	e7f4      	b.n	30b34 <regularize_k+0x40>
   30b4a:	4604      	mov	r4, r0
   30b4c:	e7f2      	b.n	30b34 <regularize_k+0x40>

00030b4e <uECC_vli_nativeToBytes>:
}

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   30b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   30b50:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   30b52:	1e4f      	subs	r7, r1, #1
   30b54:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   30b56:	428c      	cmp	r4, r1
   30b58:	f105 0501 	add.w	r5, r5, #1
   30b5c:	db00      	blt.n	30b60 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   30b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   30b60:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   30b62:	f023 0603 	bic.w	r6, r3, #3
   30b66:	5996      	ldr	r6, [r2, r6]
   30b68:	f003 0303 	and.w	r3, r3, #3
   30b6c:	00db      	lsls	r3, r3, #3
   30b6e:	fa26 f303 	lsr.w	r3, r6, r3
   30b72:	5503      	strb	r3, [r0, r4]
   30b74:	e7ee      	b.n	30b54 <uECC_vli_nativeToBytes+0x6>

00030b76 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   30b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b78:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   30b7a:	1cd1      	adds	r1, r2, #3
   30b7c:	bf48      	it	mi
   30b7e:	1d91      	addmi	r1, r2, #6
{
   30b80:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   30b82:	f341 0187 	sbfx	r1, r1, #2, #8
{
   30b86:	4605      	mov	r5, r0
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   30b88:	f7ff faf5 	bl	30176 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   30b8c:	2100      	movs	r1, #0
		unsigned b = num_bytes - 1 - i;
   30b8e:	1e67      	subs	r7, r4, #1
   30b90:	b24a      	sxtb	r2, r1
	for (i = 0; i < num_bytes; ++i) {
   30b92:	42a2      	cmp	r2, r4
   30b94:	f101 0101 	add.w	r1, r1, #1
   30b98:	db00      	blt.n	30b9c <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   30b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   30b9c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   30b9e:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   30ba2:	5cb2      	ldrb	r2, [r6, r2]
   30ba4:	f003 0303 	and.w	r3, r3, #3
   30ba8:	00db      	lsls	r3, r3, #3
   30baa:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   30bae:	582a      	ldr	r2, [r5, r0]
   30bb0:	431a      	orrs	r2, r3
   30bb2:	502a      	str	r2, [r5, r0]
   30bb4:	e7ec      	b.n	30b90 <uECC_vli_bytesToNative+0x1a>

00030bb6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   30bb6:	78cb      	ldrb	r3, [r1, #3]
   30bb8:	7802      	ldrb	r2, [r0, #0]
   30bba:	4053      	eors	r3, r2
   30bbc:	7003      	strb	r3, [r0, #0]
   30bbe:	884b      	ldrh	r3, [r1, #2]
   30bc0:	7842      	ldrb	r2, [r0, #1]
   30bc2:	4053      	eors	r3, r2
   30bc4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   30bc6:	680a      	ldr	r2, [r1, #0]
   30bc8:	7883      	ldrb	r3, [r0, #2]
   30bca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   30bce:	7083      	strb	r3, [r0, #2]
   30bd0:	680a      	ldr	r2, [r1, #0]
   30bd2:	78c3      	ldrb	r3, [r0, #3]
   30bd4:	4053      	eors	r3, r2
   30bd6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   30bd8:	79cb      	ldrb	r3, [r1, #7]
   30bda:	7902      	ldrb	r2, [r0, #4]
   30bdc:	4053      	eors	r3, r2
   30bde:	7103      	strb	r3, [r0, #4]
   30be0:	88cb      	ldrh	r3, [r1, #6]
   30be2:	7942      	ldrb	r2, [r0, #5]
   30be4:	4053      	eors	r3, r2
   30be6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   30be8:	684a      	ldr	r2, [r1, #4]
   30bea:	7983      	ldrb	r3, [r0, #6]
   30bec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   30bf0:	7183      	strb	r3, [r0, #6]
   30bf2:	684a      	ldr	r2, [r1, #4]
   30bf4:	79c3      	ldrb	r3, [r0, #7]
   30bf6:	4053      	eors	r3, r2
   30bf8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   30bfa:	7acb      	ldrb	r3, [r1, #11]
   30bfc:	7a02      	ldrb	r2, [r0, #8]
   30bfe:	4053      	eors	r3, r2
   30c00:	7203      	strb	r3, [r0, #8]
   30c02:	7a42      	ldrb	r2, [r0, #9]
   30c04:	894b      	ldrh	r3, [r1, #10]
   30c06:	4053      	eors	r3, r2
   30c08:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   30c0a:	688a      	ldr	r2, [r1, #8]
   30c0c:	7a83      	ldrb	r3, [r0, #10]
   30c0e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   30c12:	7283      	strb	r3, [r0, #10]
   30c14:	688a      	ldr	r2, [r1, #8]
   30c16:	7ac3      	ldrb	r3, [r0, #11]
   30c18:	4053      	eors	r3, r2
   30c1a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   30c1c:	7bcb      	ldrb	r3, [r1, #15]
   30c1e:	7b02      	ldrb	r2, [r0, #12]
   30c20:	4053      	eors	r3, r2
   30c22:	7303      	strb	r3, [r0, #12]
   30c24:	89cb      	ldrh	r3, [r1, #14]
   30c26:	7b42      	ldrb	r2, [r0, #13]
   30c28:	4053      	eors	r3, r2
   30c2a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   30c2c:	68ca      	ldr	r2, [r1, #12]
   30c2e:	7b83      	ldrb	r3, [r0, #14]
   30c30:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   30c34:	7383      	strb	r3, [r0, #14]
   30c36:	68ca      	ldr	r2, [r1, #12]
   30c38:	7bc3      	ldrb	r3, [r0, #15]
   30c3a:	4053      	eors	r3, r2
   30c3c:	73c3      	strb	r3, [r0, #15]
}
   30c3e:	4770      	bx	lr

00030c40 <shift_rows>:
{
   30c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   30c42:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   30c44:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   30c46:	f88d 2000 	strb.w	r2, [sp]
   30c4a:	7942      	ldrb	r2, [r0, #5]
   30c4c:	f88d 2001 	strb.w	r2, [sp, #1]
   30c50:	7a82      	ldrb	r2, [r0, #10]
   30c52:	f88d 2002 	strb.w	r2, [sp, #2]
   30c56:	7bc2      	ldrb	r2, [r0, #15]
   30c58:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   30c5c:	7902      	ldrb	r2, [r0, #4]
   30c5e:	f88d 2004 	strb.w	r2, [sp, #4]
   30c62:	7a42      	ldrb	r2, [r0, #9]
   30c64:	f88d 2005 	strb.w	r2, [sp, #5]
   30c68:	7b82      	ldrb	r2, [r0, #14]
   30c6a:	f88d 2006 	strb.w	r2, [sp, #6]
   30c6e:	78c2      	ldrb	r2, [r0, #3]
   30c70:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   30c74:	7a02      	ldrb	r2, [r0, #8]
   30c76:	f88d 2008 	strb.w	r2, [sp, #8]
   30c7a:	7b42      	ldrb	r2, [r0, #13]
   30c7c:	f88d 2009 	strb.w	r2, [sp, #9]
   30c80:	7882      	ldrb	r2, [r0, #2]
   30c82:	f88d 200a 	strb.w	r2, [sp, #10]
   30c86:	79c2      	ldrb	r2, [r0, #7]
   30c88:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   30c8c:	7b02      	ldrb	r2, [r0, #12]
   30c8e:	f88d 200c 	strb.w	r2, [sp, #12]
   30c92:	7842      	ldrb	r2, [r0, #1]
   30c94:	f88d 200d 	strb.w	r2, [sp, #13]
   30c98:	7982      	ldrb	r2, [r0, #6]
   30c9a:	f88d 200e 	strb.w	r2, [sp, #14]
   30c9e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   30ca2:	2310      	movs	r3, #16
   30ca4:	466a      	mov	r2, sp
   30ca6:	4619      	mov	r1, r3
   30ca8:	f7ff f871 	bl	2fd8e <_copy>
}
   30cac:	b005      	add	sp, #20
   30cae:	f85d fb04 	ldr.w	pc, [sp], #4

00030cb2 <mult_row_column>:
{
   30cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30cb4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   30cb6:	7808      	ldrb	r0, [r1, #0]
{
   30cb8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   30cba:	f7ff f877 	bl	2fdac <_double_byte>
   30cbe:	4605      	mov	r5, r0
   30cc0:	7860      	ldrb	r0, [r4, #1]
   30cc2:	f7ff f873 	bl	2fdac <_double_byte>
   30cc6:	78a2      	ldrb	r2, [r4, #2]
   30cc8:	7863      	ldrb	r3, [r4, #1]
   30cca:	4053      	eors	r3, r2
   30ccc:	78e2      	ldrb	r2, [r4, #3]
   30cce:	4053      	eors	r3, r2
   30cd0:	405d      	eors	r5, r3
   30cd2:	4045      	eors	r5, r0
   30cd4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   30cd6:	7860      	ldrb	r0, [r4, #1]
   30cd8:	7827      	ldrb	r7, [r4, #0]
   30cda:	f7ff f867 	bl	2fdac <_double_byte>
   30cde:	4605      	mov	r5, r0
   30ce0:	78a0      	ldrb	r0, [r4, #2]
   30ce2:	f7ff f863 	bl	2fdac <_double_byte>
   30ce6:	78a3      	ldrb	r3, [r4, #2]
   30ce8:	405f      	eors	r7, r3
   30cea:	78e3      	ldrb	r3, [r4, #3]
   30cec:	405f      	eors	r7, r3
   30cee:	407d      	eors	r5, r7
   30cf0:	4045      	eors	r5, r0
   30cf2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   30cf4:	78a0      	ldrb	r0, [r4, #2]
   30cf6:	7865      	ldrb	r5, [r4, #1]
   30cf8:	7827      	ldrb	r7, [r4, #0]
   30cfa:	f7ff f857 	bl	2fdac <_double_byte>
   30cfe:	406f      	eors	r7, r5
   30d00:	4605      	mov	r5, r0
   30d02:	78e0      	ldrb	r0, [r4, #3]
   30d04:	f7ff f852 	bl	2fdac <_double_byte>
   30d08:	78e3      	ldrb	r3, [r4, #3]
   30d0a:	405f      	eors	r7, r3
   30d0c:	407d      	eors	r5, r7
   30d0e:	4045      	eors	r5, r0
   30d10:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   30d12:	7820      	ldrb	r0, [r4, #0]
   30d14:	f7ff f84a 	bl	2fdac <_double_byte>
   30d18:	7863      	ldrb	r3, [r4, #1]
   30d1a:	7825      	ldrb	r5, [r4, #0]
   30d1c:	405d      	eors	r5, r3
   30d1e:	78a3      	ldrb	r3, [r4, #2]
   30d20:	405d      	eors	r5, r3
   30d22:	4045      	eors	r5, r0
   30d24:	78e0      	ldrb	r0, [r4, #3]
   30d26:	f7ff f841 	bl	2fdac <_double_byte>
   30d2a:	b2ed      	uxtb	r5, r5
   30d2c:	4068      	eors	r0, r5
   30d2e:	70f0      	strb	r0, [r6, #3]
}
   30d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030d32 <tc_sha256_update>:
{
   30d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30d36:	460d      	mov	r5, r1
	if (s == (TCSha256State_t) 0 ||
   30d38:	4604      	mov	r4, r0
   30d3a:	b110      	cbz	r0, 30d42 <tc_sha256_update+0x10>
   30d3c:	b319      	cbz	r1, 30d86 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
   30d3e:	b912      	cbnz	r2, 30d46 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
   30d40:	2001      	movs	r0, #1
}
   30d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
   30d46:	f04f 0800 	mov.w	r8, #0
   30d4a:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
   30d4c:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   30d50:	42ae      	cmp	r6, r5
   30d52:	d0f5      	beq.n	30d40 <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
   30d54:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   30d56:	1c5a      	adds	r2, r3, #1
   30d58:	66a2      	str	r2, [r4, #104]	; 0x68
   30d5a:	f815 1b01 	ldrb.w	r1, [r5], #1
   30d5e:	4423      	add	r3, r4
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   30d60:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   30d62:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   30d66:	d9f3      	bls.n	30d50 <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
   30d68:	4639      	mov	r1, r7
   30d6a:	4620      	mov	r0, r4
   30d6c:	f7e7 fda6 	bl	188bc <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   30d70:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   30d74:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   30d78:	f142 0200 	adc.w	r2, r2, #0
			s->leftover_offset = 0;
   30d7c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   30d80:	e9c4 3208 	strd	r3, r2, [r4, #32]
   30d84:	e7e4      	b.n	30d50 <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
   30d86:	4608      	mov	r0, r1
   30d88:	e7db      	b.n	30d42 <tc_sha256_update+0x10>

00030d8a <tc_sha256_final>:
{
   30d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30d8c:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   30d8e:	4605      	mov	r5, r0
   30d90:	2800      	cmp	r0, #0
   30d92:	d054      	beq.n	30e3e <tc_sha256_final+0xb4>
   30d94:	2900      	cmp	r1, #0
   30d96:	d053      	beq.n	30e40 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   30d98:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   30d9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
   30d9e:	00c8      	lsls	r0, r1, #3
   30da0:	1816      	adds	r6, r2, r0
   30da2:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   30da6:	2380      	movs	r3, #128	; 0x80
   30da8:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   30daa:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   30dac:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
   30dae:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   30db2:	66a0      	str	r0, [r4, #104]	; 0x68
   30db4:	f104 0628 	add.w	r6, r4, #40	; 0x28
   30db8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   30dbc:	d90b      	bls.n	30dd6 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   30dbe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   30dc2:	2100      	movs	r1, #0
   30dc4:	4430      	add	r0, r6
   30dc6:	f7fe ffef 	bl	2fda8 <_set>
		compress(s->iv, s->leftover);
   30dca:	4631      	mov	r1, r6
   30dcc:	4620      	mov	r0, r4
   30dce:	f7e7 fd75 	bl	188bc <compress>
		s->leftover_offset = 0;
   30dd2:	2300      	movs	r3, #0
   30dd4:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   30dd6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   30dd8:	2100      	movs	r1, #0
   30dda:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   30dde:	4430      	add	r0, r6
   30de0:	f7fe ffe2 	bl	2fda8 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   30de4:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   30de6:	4631      	mov	r1, r6
   30de8:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   30dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   30dec:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   30dee:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   30df0:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   30df4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   30df8:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   30dfa:	0e1b      	lsrs	r3, r3, #24
   30dfc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   30e00:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   30e02:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   30e06:	f7e7 fd59 	bl	188bc <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   30e0a:	1d2b      	adds	r3, r5, #4
   30e0c:	1f21      	subs	r1, r4, #4
   30e0e:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   30e12:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
   30e16:	3304      	adds	r3, #4
   30e18:	0e15      	lsrs	r5, r2, #24
   30e1a:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   30e1e:	0c15      	lsrs	r5, r2, #16
   30e20:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   30e24:	0a15      	lsrs	r5, r2, #8
   30e26:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
   30e2a:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   30e2e:	4283      	cmp	r3, r0
   30e30:	d1ef      	bne.n	30e12 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   30e32:	4620      	mov	r0, r4
   30e34:	2270      	movs	r2, #112	; 0x70
   30e36:	2100      	movs	r1, #0
   30e38:	f7fe ffb6 	bl	2fda8 <_set>
	return TC_CRYPTO_SUCCESS;
   30e3c:	2001      	movs	r0, #1
}
   30e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   30e40:	4608      	mov	r0, r1
   30e42:	e7fc      	b.n	30e3e <tc_sha256_final+0xb4>

00030e44 <tc_ctr_prng_update.part.1>:
 *  @return none
 *  @note Assumes: providedData is (TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE) bytes long
 *  @param ctx IN/OUT -- CTR PRNG state
 *  @param providedData IN -- data used when updating the internal state
 */
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   30e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30e48:	4604      	mov	r4, r0
   30e4a:	460e      	mov	r6, r1
{
	if (0 != ctx) {
		/* 10.2.1.2 step 1 */
		uint8_t temp[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
		unsigned int len = 0U;
   30e4c:	2500      	movs	r5, #0
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   30e4e:	b08c      	sub	sp, #48	; 0x30
   30e50:	f100 0810 	add.w	r8, r0, #16

		/* 10.2.1.2 step 2 */
		while (len < sizeof temp) {
			unsigned int blocklen = sizeof(temp) - len;
   30e54:	f1c5 0720 	rsb	r7, r5, #32
	if (0 != arr) {
   30e58:	b144      	cbz	r4, 30e6c <tc_ctr_prng_update.part.1+0x28>
   30e5a:	4642      	mov	r2, r8
			if (++arr[i-1] != 0U) {
   30e5c:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   30e60:	3301      	adds	r3, #1
   30e62:	b2db      	uxtb	r3, r3
   30e64:	7013      	strb	r3, [r2, #0]
   30e66:	b90b      	cbnz	r3, 30e6c <tc_ctr_prng_update.part.1+0x28>
		for (i = len; i > 0U; i--) {
   30e68:	42a2      	cmp	r2, r4
   30e6a:	d1f7      	bne.n	30e5c <tc_ctr_prng_update.part.1+0x18>

			/* 10.2.1.2 step 2.1 */
			arrInc(ctx->V, sizeof ctx->V);

			/* 10.2.1.2 step 2.2 */
			if (blocklen > TC_AES_BLOCK_SIZE) {
   30e6c:	2f10      	cmp	r7, #16
   30e6e:	bf28      	it	cs
   30e70:	2710      	movcs	r7, #16
				blocklen = TC_AES_BLOCK_SIZE;
			}
			(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   30e72:	4642      	mov	r2, r8
   30e74:	4621      	mov	r1, r4
   30e76:	4668      	mov	r0, sp
   30e78:	f7e7 fcb6 	bl	187e8 <tc_aes_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30e7c:	ab04      	add	r3, sp, #16
   30e7e:	1958      	adds	r0, r3, r5
   30e80:	463a      	mov	r2, r7
   30e82:	4669      	mov	r1, sp

			/* 10.2.1.2 step 2.3/step 3 */
			memcpy(&(temp[len]), output_block, blocklen);

			len += blocklen;
   30e84:	443d      	add	r5, r7
   30e86:	f003 fdcb 	bl	34a20 <memcpy>
		while (len < sizeof temp) {
   30e8a:	2d1f      	cmp	r5, #31
   30e8c:	d9e2      	bls.n	30e54 <tc_ctr_prng_update.part.1+0x10>
   30e8e:	1e73      	subs	r3, r6, #1
   30e90:	aa04      	add	r2, sp, #16
   30e92:	361f      	adds	r6, #31

		/* 10.2.1.2 step 4 */
		if (0 != providedData) {
			unsigned int i;
			for (i = 0U; i < sizeof temp; i++) {
				temp[i] ^= providedData[i];
   30e94:	7811      	ldrb	r1, [r2, #0]
   30e96:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   30e9a:	4041      	eors	r1, r0
			for (i = 0U; i < sizeof temp; i++) {
   30e9c:	42b3      	cmp	r3, r6
				temp[i] ^= providedData[i];
   30e9e:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0U; i < sizeof temp; i++) {
   30ea2:	d1f7      	bne.n	30e94 <tc_ctr_prng_update.part.1+0x50>
			}
		}

		/* 10.2.1.2 step 5 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, temp);
   30ea4:	a904      	add	r1, sp, #16
   30ea6:	4640      	mov	r0, r8
   30ea8:	f7e7 fc48 	bl	1873c <tc_aes128_set_encrypt_key>
   30eac:	ad0c      	add	r5, sp, #48	; 0x30
   30eae:	aa08      	add	r2, sp, #32
   30eb0:	4613      	mov	r3, r2
   30eb2:	cb03      	ldmia	r3!, {r0, r1}
   30eb4:	42ab      	cmp	r3, r5
   30eb6:	6020      	str	r0, [r4, #0]
   30eb8:	6061      	str	r1, [r4, #4]
   30eba:	461a      	mov	r2, r3
   30ebc:	f104 0408 	add.w	r4, r4, #8
   30ec0:	d1f6      	bne.n	30eb0 <tc_ctr_prng_update.part.1+0x6c>
    
		/* 10.2.1.2 step 6 */
		memcpy(ctx->V, &(temp[TC_AES_KEY_SIZE]), TC_AES_BLOCK_SIZE);
	}
}
   30ec2:	b00c      	add	sp, #48	; 0x30
   30ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030ec8 <tc_ctr_prng_init>:
int tc_ctr_prng_init(TCCtrPrng_t * const ctx, 
		     uint8_t const * const entropy,
		     unsigned int entropyLen, 
		     uint8_t const * const personalization,
		     unsigned int pLen)
{
   30ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   30eca:	461e      	mov	r6, r3
   30ecc:	b095      	sub	sp, #84	; 0x54
   30ece:	4605      	mov	r5, r0
   30ed0:	460c      	mov	r4, r1
   30ed2:	4617      	mov	r7, r2
	int result = TC_CRYPTO_FAIL;	
	unsigned int i;
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   30ed4:	2100      	movs	r1, #0
   30ed6:	2220      	movs	r2, #32
   30ed8:	a804      	add	r0, sp, #16
   30eda:	f003 fddb 	bl	34a94 <memset>
	uint8_t seed_material[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
	uint8_t zeroArr[TC_AES_BLOCK_SIZE] = {0U};
   30ede:	2210      	movs	r2, #16
   30ee0:	2100      	movs	r1, #0
   30ee2:	4668      	mov	r0, sp
   30ee4:	f003 fdd6 	bl	34a94 <memset>
  
	if (0 != personalization) {
   30ee8:	b146      	cbz	r6, 30efc <tc_ctr_prng_init+0x34>
		if (len > sizeof personalization_buf) {
			len = sizeof personalization_buf;
		}

		/* 10.2.1.3.1 step 2 */
		memcpy(personalization_buf, personalization, len);
   30eea:	2320      	movs	r3, #32
   30eec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   30eee:	4631      	mov	r1, r6
   30ef0:	429a      	cmp	r2, r3
   30ef2:	bf28      	it	cs
   30ef4:	461a      	movcs	r2, r3
   30ef6:	a804      	add	r0, sp, #16
   30ef8:	f003 fd9f 	bl	34a3a <__memcpy_chk>
	}

	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   30efc:	b385      	cbz	r5, 30f60 <tc_ctr_prng_init+0x98>
   30efe:	b37c      	cbz	r4, 30f60 <tc_ctr_prng_init+0x98>
   30f00:	2f1f      	cmp	r7, #31
   30f02:	d92d      	bls.n	30f60 <tc_ctr_prng_init+0x98>
		/* 10.2.1.3.1 step 3 */
		memcpy(seed_material, entropy, sizeof seed_material);
   30f04:	aa0c      	add	r2, sp, #48	; 0x30
   30f06:	4623      	mov	r3, r4
   30f08:	4616      	mov	r6, r2
   30f0a:	f104 0720 	add.w	r7, r4, #32
   30f0e:	4614      	mov	r4, r2
   30f10:	6818      	ldr	r0, [r3, #0]
   30f12:	6859      	ldr	r1, [r3, #4]
   30f14:	3308      	adds	r3, #8
   30f16:	c403      	stmia	r4!, {r0, r1}
   30f18:	42bb      	cmp	r3, r7
   30f1a:	4622      	mov	r2, r4
   30f1c:	d1f7      	bne.n	30f0e <tc_ctr_prng_init+0x46>
		for (i = 0U; i < sizeof seed_material; i++) {
   30f1e:	4632      	mov	r2, r6
		memcpy(seed_material, entropy, sizeof seed_material);
   30f20:	2420      	movs	r4, #32
   30f22:	ab04      	add	r3, sp, #16
			seed_material[i] ^= personalization_buf[i];
   30f24:	7811      	ldrb	r1, [r2, #0]
   30f26:	f813 0b01 	ldrb.w	r0, [r3], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   30f2a:	3c01      	subs	r4, #1
			seed_material[i] ^= personalization_buf[i];
   30f2c:	ea81 0100 	eor.w	r1, r1, r0
   30f30:	f802 1b01 	strb.w	r1, [r2], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   30f34:	d1f6      	bne.n	30f24 <tc_ctr_prng_init+0x5c>
		}

		/* 10.2.1.3.1 step 4 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, zeroArr);
   30f36:	4669      	mov	r1, sp
   30f38:	f105 0010 	add.w	r0, r5, #16
   30f3c:	f7e7 fbfe 	bl	1873c <tc_aes128_set_encrypt_key>
__ssp_bos_icheck3(memset, void *, int)
   30f40:	2210      	movs	r2, #16
   30f42:	4621      	mov	r1, r4
   30f44:	4628      	mov	r0, r5
   30f46:	f003 fda5 	bl	34a94 <memset>
	if (0 != ctx) {
   30f4a:	4628      	mov	r0, r5
   30f4c:	4631      	mov	r1, r6
   30f4e:	f7ff ff79 	bl	30e44 <tc_ctr_prng_update.part.1>
    
		/* 10.2.1.3.1 step 6 */    
		tc_ctr_prng_update(ctx, seed_material);

		/* 10.2.1.3.1 step 7 */
		ctx->reseedCount = 1U;
   30f52:	2201      	movs	r2, #1
   30f54:	2300      	movs	r3, #0

		result = TC_CRYPTO_SUCCESS;
   30f56:	2001      	movs	r0, #1
		ctx->reseedCount = 1U;
   30f58:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
	}
	return result;
}
   30f5c:	b015      	add	sp, #84	; 0x54
   30f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int result = TC_CRYPTO_FAIL;	
   30f60:	2000      	movs	r0, #0
	return result;
   30f62:	e7fb      	b.n	30f5c <tc_ctr_prng_init+0x94>

00030f64 <tc_ctr_prng_generate>:
int tc_ctr_prng_generate(TCCtrPrng_t * const ctx,
			uint8_t const * const additional_input,
			unsigned int additionallen,
			uint8_t * const out,
			unsigned int outlen)
{
   30f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30f68:	b08c      	sub	sp, #48	; 0x30
   30f6a:	460e      	mov	r6, r1
   30f6c:	4690      	mov	r8, r2
   30f6e:	461d      	mov	r5, r3
   30f70:	9f12      	ldr	r7, [sp, #72]	; 0x48
	/* 2^19 bits - see section 10.2.1 */ 
	static const unsigned int MAX_BYTES_PER_REQ = 65536U; 

	unsigned int result = TC_CRYPTO_FAIL;

	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   30f72:	4604      	mov	r4, r0
   30f74:	2800      	cmp	r0, #0
   30f76:	d04d      	beq.n	31014 <tc_ctr_prng_generate+0xb0>
   30f78:	2b00      	cmp	r3, #0
   30f7a:	d04b      	beq.n	31014 <tc_ctr_prng_generate+0xb0>
   30f7c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   30f80:	d248      	bcs.n	31014 <tc_ctr_prng_generate+0xb0>
		/* 10.2.1.5.1 step 1 */
		if (ctx->reseedCount > MAX_REQS_BEFORE_RESEED) {
   30f82:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
   30f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   30f8a:	bf08      	it	eq
   30f8c:	2a01      	cmpeq	r2, #1
   30f8e:	d243      	bcs.n	31018 <tc_ctr_prng_generate+0xb4>
			result = TC_CTR_PRNG_RESEED_REQ;
		} else {
			uint8_t additional_input_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   30f90:	2220      	movs	r2, #32
   30f92:	2100      	movs	r1, #0
   30f94:	a804      	add	r0, sp, #16
   30f96:	f003 fd7d 	bl	34a94 <memset>
			if (0 != additional_input) {
   30f9a:	b166      	cbz	r6, 30fb6 <tc_ctr_prng_generate+0x52>
				/* 10.2.1.5.1 step 2  */
				unsigned int len = additionallen;
				if (len > sizeof additional_input_buf) {
					len = sizeof additional_input_buf;
				}
				memcpy(additional_input_buf, additional_input, len);
   30f9c:	2320      	movs	r3, #32
   30f9e:	4598      	cmp	r8, r3
   30fa0:	4642      	mov	r2, r8
   30fa2:	4631      	mov	r1, r6
   30fa4:	bf28      	it	cs
   30fa6:	461a      	movcs	r2, r3
   30fa8:	a804      	add	r0, sp, #16
   30faa:	f003 fd46 	bl	34a3a <__memcpy_chk>
	if (0 != ctx) {
   30fae:	a904      	add	r1, sp, #16
   30fb0:	4620      	mov	r0, r4
   30fb2:	f7ff ff47 	bl	30e44 <tc_ctr_prng_update.part.1>
{
   30fb6:	2600      	movs	r6, #0
   30fb8:	e01b      	b.n	30ff2 <tc_ctr_prng_generate+0x8e>
			/* 10.2.1.5.1 step 3 - implicit */

			/* 10.2.1.5.1 step 4 */
			unsigned int len = 0U;      
			while (len < outlen) {
				unsigned int blocklen = outlen - len;
   30fba:	f104 0110 	add.w	r1, r4, #16
   30fbe:	460a      	mov	r2, r1
   30fc0:	eba7 0806 	sub.w	r8, r7, r6
			if (++arr[i-1] != 0U) {
   30fc4:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   30fc8:	3301      	adds	r3, #1
   30fca:	b2db      	uxtb	r3, r3
   30fcc:	700b      	strb	r3, [r1, #0]
   30fce:	b90b      	cbnz	r3, 30fd4 <tc_ctr_prng_generate+0x70>
		for (i = len; i > 0U; i--) {
   30fd0:	42a1      	cmp	r1, r4
   30fd2:	d1f7      	bne.n	30fc4 <tc_ctr_prng_generate+0x60>

				/* 10.2.1.5.1 step 4.1 */
				arrInc(ctx->V, sizeof ctx->V);

				/* 10.2.1.5.1 step 4.2 */
				(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   30fd4:	4621      	mov	r1, r4
   30fd6:	4668      	mov	r0, sp
   30fd8:	f7e7 fc06 	bl	187e8 <tc_aes_encrypt>
      
				/* 10.2.1.5.1 step 4.3/step 5 */
				if (blocklen > TC_AES_BLOCK_SIZE) {
   30fdc:	f1b8 0f10 	cmp.w	r8, #16
   30fe0:	bf28      	it	cs
   30fe2:	f04f 0810 	movcs.w	r8, #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30fe6:	19a8      	adds	r0, r5, r6
   30fe8:	4642      	mov	r2, r8
   30fea:	4669      	mov	r1, sp
   30fec:	f003 fd18 	bl	34a20 <memcpy>
					blocklen = TC_AES_BLOCK_SIZE;
				}
				memcpy(&(out[len]), output_block, blocklen);

				len += blocklen;
   30ff0:	4446      	add	r6, r8
			while (len < outlen) {
   30ff2:	42be      	cmp	r6, r7
   30ff4:	d3e1      	bcc.n	30fba <tc_ctr_prng_generate+0x56>
	if (0 != ctx) {
   30ff6:	4620      	mov	r0, r4
   30ff8:	a904      	add	r1, sp, #16
   30ffa:	f7ff ff23 	bl	30e44 <tc_ctr_prng_update.part.1>
      
			/* 10.2.1.5.1 step 6 */
			tc_ctr_prng_update(ctx, additional_input_buf);

			/* 10.2.1.5.1 step 7 */
			ctx->reseedCount++;
   30ffe:	e9d4 3230 	ldrd	r3, r2, [r4, #192]	; 0xc0

			/* 10.2.1.5.1 step 8 */
			result = TC_CRYPTO_SUCCESS;
   31002:	2001      	movs	r0, #1
			ctx->reseedCount++;
   31004:	3301      	adds	r3, #1
   31006:	f142 0200 	adc.w	r2, r2, #0
   3100a:	e9c4 3230 	strd	r3, r2, [r4, #192]	; 0xc0
		}
	}

	return result;
}
   3100e:	b00c      	add	sp, #48	; 0x30
   31010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	unsigned int result = TC_CRYPTO_FAIL;
   31014:	2000      	movs	r0, #0
   31016:	e7fa      	b.n	3100e <tc_ctr_prng_generate+0xaa>
			result = TC_CTR_PRNG_RESEED_REQ;
   31018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3101c:	e7f7      	b.n	3100e <tc_ctr_prng_generate+0xaa>

0003101e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3101e:	2100      	movs	r1, #0
   31020:	2001      	movs	r0, #1
   31022:	f000 b804 	b.w	3102e <z_arm_fatal_error>

00031026 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   31026:	6e03      	ldr	r3, [r0, #96]	; 0x60
   31028:	f383 880b 	msr	PSPLIM, r3
}
   3102c:	4770      	bx	lr

0003102e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   3102e:	f7f7 b8d1 	b.w	281d4 <z_fatal_error>

00031032 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   31032:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   31034:	6800      	ldr	r0, [r0, #0]
   31036:	f7f7 b8cd 	b.w	281d4 <z_fatal_error>

0003103a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3103a:	b508      	push	{r3, lr}
	handler();
   3103c:	f7e7 fe70 	bl	18d20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   31040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   31044:	f7e7 bfea 	b.w	1901c <z_arm_exc_exit>

00031048 <mpu_configure_region>:
{
   31048:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   3104a:	680b      	ldr	r3, [r1, #0]
{
   3104c:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3104e:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   31050:	f89d 2008 	ldrb.w	r2, [sp, #8]
   31054:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31056:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   31058:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   3105a:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3105c:	f023 031f 	bic.w	r3, r3, #31
   31060:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   31062:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   31066:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3106a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   3106e:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   31070:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   31074:	9303      	str	r3, [sp, #12]
   31076:	4604      	mov	r4, r0
   31078:	d805      	bhi.n	31086 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   3107a:	4669      	mov	r1, sp
   3107c:	f7e8 f862 	bl	19144 <region_init>
}
   31080:	4620      	mov	r0, r4
   31082:	b005      	add	sp, #20
   31084:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   31086:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   3108a:	e7f9      	b.n	31080 <mpu_configure_region+0x38>

0003108c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3108c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   31090:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   31094:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   31096:	bf08      	it	eq
   31098:	f06f 0015 	mvneq.w	r0, #21
   3109c:	4770      	bx	lr

0003109e <_stdout_hook_default>:
}
   3109e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   310a2:	4770      	bx	lr

000310a4 <_write>:
{
   310a4:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   310a6:	4611      	mov	r1, r2
   310a8:	f7e8 b9fc 	b.w	194a4 <z_impl_zephyr_write_stdout>

000310ac <_kill>:
}
   310ac:	2000      	movs	r0, #0
   310ae:	4770      	bx	lr

000310b0 <_getpid>:
}
   310b0:	2000      	movs	r0, #0
   310b2:	4770      	bx	lr

000310b4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   310b4:	f7f7 b888 	b.w	281c8 <z_impl_z_errno>

000310b8 <close>:
   310b8:	f7fe bc9f 	b.w	2f9fa <z_impl_zsock_close>

000310bc <fixed_data_unref>:
}
   310bc:	4770      	bx	lr

000310be <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   310be:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   310c0:	460a      	mov	r2, r1
   310c2:	685b      	ldr	r3, [r3, #4]
   310c4:	6819      	ldr	r1, [r3, #0]
   310c6:	f7e8 bb03 	b.w	196d0 <net_buf_alloc_len>

000310ca <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   310ca:	8883      	ldrh	r3, [r0, #4]
   310cc:	88c2      	ldrh	r2, [r0, #6]
   310ce:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   310d0:	6803      	ldr	r3, [r0, #0]
   310d2:	6880      	ldr	r0, [r0, #8]
   310d4:	1a18      	subs	r0, r3, r0
}
   310d6:	1a10      	subs	r0, r2, r0
   310d8:	4770      	bx	lr

000310da <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   310da:	6903      	ldr	r3, [r0, #16]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   310dc:	b510      	push	{r4, lr}
   310de:	4604      	mov	r4, r0
	if (!pkt->frags) {
   310e0:	b923      	cbnz	r3, 310ec <processing_data+0x12>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   310e2:	4620      	mov	r0, r4
		break;
	}
}
   310e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   310e8:	f000 bbdc 	b.w	318a4 <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   310ec:	b169      	cbz	r1, 3110a <processing_data+0x30>
	net_pkt_cursor_init(pkt);
   310ee:	4620      	mov	r0, r4
   310f0:	f000 fc3c 	bl	3196c <net_pkt_cursor_init>
	return pkt->frags->data;
   310f4:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   310f6:	689b      	ldr	r3, [r3, #8]
   310f8:	781b      	ldrb	r3, [r3, #0]
   310fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   310fe:	2b40      	cmp	r3, #64	; 0x40
   31100:	d1ef      	bne.n	310e2 <processing_data+0x8>
		return net_ipv4_input(pkt);
   31102:	4620      	mov	r0, r4
   31104:	f000 ffd9 	bl	320ba <net_ipv4_input>
   31108:	e005      	b.n	31116 <processing_data+0x3c>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   3110a:	4601      	mov	r1, r0
   3110c:	6a00      	ldr	r0, [r0, #32]
   3110e:	f000 f908 	bl	31322 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   31112:	2801      	cmp	r0, #1
   31114:	d0eb      	beq.n	310ee <processing_data+0x14>
	switch (process_data(pkt, is_loopback)) {
   31116:	2800      	cmp	r0, #0
   31118:	d1e3      	bne.n	310e2 <processing_data+0x8>
}
   3111a:	bd10      	pop	{r4, pc}

0003111c <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3111c:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   3111e:	f000 fe28 	bl	31d72 <net_pkt_init>

	net_context_init();
   31122:	f7e9 fd31 	bl	1ab88 <net_context_init>
	net_icmpv4_init();
   31126:	f7e9 fea1 	bl	1ae6c <net_icmpv4_init>
		net_conn_init();
   3112a:	f7ea f895 	bl	1b258 <net_conn_init>
	net_tcp_init();
   3112e:	f001 fa73 	bl	32618 <net_tcp_init>
	net_if_init();
   31132:	f7e8 fed1 	bl	19ed8 <net_if_init>
	net_tc_rx_init();
   31136:	f7e9 fe35 	bl	1ada4 <net_tc_rx_init>
	net_if_post_init();
   3113a:	f7e8 fefb 	bl	19f34 <net_if_post_init>
	dns_init_resolver();
   3113e:	f002 fbac 	bl	3389a <dns_init_resolver>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   31142:	2000      	movs	r0, #0
   31144:	bd08      	pop	{r3, pc}

00031146 <net_send_data>:
{
   31146:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
   31148:	4604      	mov	r4, r0
   3114a:	2800      	cmp	r0, #0
   3114c:	d065      	beq.n	3121a <net_send_data+0xd4>
   3114e:	6903      	ldr	r3, [r0, #16]
   31150:	2b00      	cmp	r3, #0
   31152:	d062      	beq.n	3121a <net_send_data+0xd4>
	if (!net_pkt_iface(pkt)) {
   31154:	6a03      	ldr	r3, [r0, #32]
   31156:	2b00      	cmp	r3, #0
   31158:	d062      	beq.n	31220 <net_send_data+0xda>
	net_pkt_trim_buffer(pkt);
   3115a:	f000 fbed 	bl	31938 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   3115e:	4620      	mov	r0, r4
   31160:	f000 fc04 	bl	3196c <net_pkt_cursor_init>
	return pkt->family;
   31164:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (net_pkt_family(pkt) == AF_INET) {
   31168:	f3c3 0342 	ubfx	r3, r3, #1, #3
   3116c:	2b01      	cmp	r3, #1
   3116e:	d14a      	bne.n	31206 <net_send_data+0xc0>
	return pkt->frags->data;
   31170:	6923      	ldr	r3, [r4, #16]
   31172:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp(&NET_IPV4_HDR(pkt)->dst,
   31174:	f7e8 fef2 	bl	19f5c <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   31178:	692a      	ldr	r2, [r5, #16]
   3117a:	6803      	ldr	r3, [r0, #0]
   3117c:	429a      	cmp	r2, r3
   3117e:	d102      	bne.n	31186 <net_send_data+0x40>
			return -EADDRNOTAVAIL;
   31180:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   31184:	bd70      	pop	{r4, r5, r6, pc}
   31186:	6923      	ldr	r3, [r4, #16]
   31188:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   3118a:	7c2b      	ldrb	r3, [r5, #16]
   3118c:	2b7f      	cmp	r3, #127	; 0x7f
   3118e:	d10f      	bne.n	311b0 <net_send_data+0x6a>
   31190:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&addr, &NET_IPV4_HDR(pkt)->src);
   31192:	689b      	ldr	r3, [r3, #8]
   31194:	68da      	ldr	r2, [r3, #12]
   31196:	6923      	ldr	r3, [r4, #16]
   31198:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->src,
   3119a:	6919      	ldr	r1, [r3, #16]
   3119c:	60d9      	str	r1, [r3, #12]
   3119e:	6923      	ldr	r3, [r4, #16]
   311a0:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->dst, &addr);
   311a2:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
   311a4:	2101      	movs	r1, #1
   311a6:	4620      	mov	r0, r4
   311a8:	f7ff ff97 	bl	310da <processing_data>
		return 0;
   311ac:	2000      	movs	r0, #0
   311ae:	e7e9      	b.n	31184 <net_send_data+0x3e>
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   311b0:	6a26      	ldr	r6, [r4, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   311b2:	f7e8 fed7 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   311b6:	692a      	ldr	r2, [r5, #16]
   311b8:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   311ba:	429a      	cmp	r2, r3
   311bc:	d01e      	beq.n	311fc <net_send_data+0xb6>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   311be:	f105 0110 	add.w	r1, r5, #16
   311c2:	4630      	mov	r0, r6
   311c4:	f7e8 fd02 	bl	19bcc <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   311c8:	4601      	mov	r1, r0
   311ca:	b9b8      	cbnz	r0, 311fc <net_send_data+0xb6>
   311cc:	6923      	ldr	r3, [r4, #16]
   311ce:	689e      	ldr	r6, [r3, #8]
		     net_ipv4_is_my_addr(&NET_IPV4_HDR(pkt)->dst))) {
   311d0:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   311d4:	4628      	mov	r0, r5
   311d6:	f7e8 fd79 	bl	19ccc <net_if_ipv4_addr_lookup>
   311da:	2800      	cmp	r0, #0
   311dc:	bf14      	ite	ne
   311de:	2001      	movne	r0, #1
   311e0:	2000      	moveq	r0, #0
	if (!ret) {
   311e2:	d109      	bne.n	311f8 <net_send_data+0xb2>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   311e4:	f7e8 febe 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   311e8:	6932      	ldr	r2, [r6, #16]
   311ea:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   311ec:	429a      	cmp	r2, r3
   311ee:	d0cf      	beq.n	31190 <net_send_data+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   311f0:	4629      	mov	r1, r5
   311f2:	2000      	movs	r0, #0
   311f4:	f7e8 fcea 	bl	19bcc <net_if_ipv4_is_addr_bcast>
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   311f8:	2800      	cmp	r0, #0
   311fa:	d1c9      	bne.n	31190 <net_send_data+0x4a>
   311fc:	6923      	ldr	r3, [r4, #16]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->src)) {
   311fe:	689b      	ldr	r3, [r3, #8]
   31200:	7b1b      	ldrb	r3, [r3, #12]
   31202:	2b7f      	cmp	r3, #127	; 0x7f
   31204:	d0bc      	beq.n	31180 <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   31206:	4621      	mov	r1, r4
   31208:	6a20      	ldr	r0, [r4, #32]
   3120a:	f000 f893 	bl	31334 <net_if_send_data>
		return -EIO;
   3120e:	2802      	cmp	r0, #2
   31210:	bf14      	ite	ne
   31212:	2000      	movne	r0, #0
   31214:	f06f 0004 	mvneq.w	r0, #4
   31218:	e7b4      	b.n	31184 <net_send_data+0x3e>
		return -ENODATA;
   3121a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   3121e:	e7b1      	b.n	31184 <net_send_data+0x3e>
		return -EINVAL;
   31220:	f06f 0015 	mvn.w	r0, #21
   31224:	e7ae      	b.n	31184 <net_send_data+0x3e>

00031226 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   31226:	6800      	ldr	r0, [r0, #0]
   31228:	ba00      	rev	r0, r0
   3122a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   3122e:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   31232:	4258      	negs	r0, r3
   31234:	4158      	adcs	r0, r3
   31236:	4770      	bx	lr

00031238 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   31238:	b110      	cbz	r0, 31240 <net_if_l2+0x8>
   3123a:	6800      	ldr	r0, [r0, #0]
   3123c:	b100      	cbz	r0, 31240 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3123e:	6840      	ldr	r0, [r0, #4]
}
   31240:	4770      	bx	lr

00031242 <net_context_send_cb>:
	if (!context) {
   31242:	b118      	cbz	r0, 3124c <net_context_send_cb+0xa>
	if (context->send_cb) {
   31244:	6b43      	ldr	r3, [r0, #52]	; 0x34
   31246:	b10b      	cbz	r3, 3124c <net_context_send_cb+0xa>
		context->send_cb(context, status, context->user_data);
   31248:	6802      	ldr	r2, [r0, #0]
   3124a:	4718      	bx	r3
}
   3124c:	4770      	bx	lr

0003124e <l2_flags_get>:
{
   3124e:	b510      	push	{r4, lr}
   31250:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   31252:	f7ff fff1 	bl	31238 <net_if_l2>
   31256:	b128      	cbz	r0, 31264 <l2_flags_get+0x16>
   31258:	68c3      	ldr	r3, [r0, #12]
   3125a:	b11b      	cbz	r3, 31264 <l2_flags_get+0x16>
}
   3125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   31260:	4610      	mov	r0, r2
   31262:	4718      	bx	r3
}
   31264:	2000      	movs	r0, #0
   31266:	bd10      	pop	{r4, pc}

00031268 <if_ipv4_get_addr>:
{
   31268:	b538      	push	{r3, r4, r5, lr}
   3126a:	4615      	mov	r5, r2
	if (!iface) {
   3126c:	4604      	mov	r4, r0
   3126e:	b1c0      	cbz	r0, 312a2 <if_ipv4_get_addr+0x3a>
	ipv4 = iface->config.ip.ipv4;
   31270:	6844      	ldr	r4, [r0, #4]
	if (!ipv4) {
   31272:	b1b4      	cbz	r4, 312a2 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   31274:	7da3      	ldrb	r3, [r4, #22]
   31276:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3127a:	b90b      	cbnz	r3, 31280 <if_ipv4_get_addr+0x18>
	return NULL;
   3127c:	461c      	mov	r4, r3
   3127e:	e010      	b.n	312a2 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   31280:	1c4b      	adds	r3, r1, #1
   31282:	d003      	beq.n	3128c <if_ipv4_get_addr+0x24>
		    (addr_state != NET_ADDR_ANY_STATE &&
   31284:	f994 3015 	ldrsb.w	r3, [r4, #21]
   31288:	428b      	cmp	r3, r1
   3128a:	d110      	bne.n	312ae <if_ipv4_get_addr+0x46>
		     ipv4->unicast[i].addr_state != addr_state) ||
   3128c:	8823      	ldrh	r3, [r4, #0]
   3128e:	2b01      	cmp	r3, #1
   31290:	d10d      	bne.n	312ae <if_ipv4_get_addr+0x46>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   31292:	3404      	adds	r4, #4
   31294:	4620      	mov	r0, r4
   31296:	f7e8 fb7f 	bl	19998 <net_ipv4_is_ll_addr>
   3129a:	b120      	cbz	r0, 312a6 <if_ipv4_get_addr+0x3e>
	return NULL;
   3129c:	2d00      	cmp	r5, #0
   3129e:	bf08      	it	eq
   312a0:	2400      	moveq	r4, #0
}
   312a2:	4620      	mov	r0, r4
   312a4:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   312a6:	2d00      	cmp	r5, #0
   312a8:	bf18      	it	ne
   312aa:	2400      	movne	r4, #0
   312ac:	e7f9      	b.n	312a2 <if_ipv4_get_addr+0x3a>
   312ae:	2400      	movs	r4, #0
   312b0:	e7f7      	b.n	312a2 <if_ipv4_get_addr+0x3a>

000312b2 <k_uptime_get_32>:
{
   312b2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   312b4:	f003 fae6 	bl	34884 <z_impl_k_uptime_ticks>
   312b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   312bc:	fba0 2304 	umull	r2, r3, r0, r4
   312c0:	fb04 3301 	mla	r3, r4, r1, r3
   312c4:	0bd0      	lsrs	r0, r2, #15
}
   312c6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   312ca:	bd10      	pop	{r4, pc}

000312cc <net_if_ipv4_addr_mask_cmp>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   312cc:	6843      	ldr	r3, [r0, #4]
	if (!ipv4) {
   312ce:	b17b      	cbz	r3, 312f0 <net_if_ipv4_addr_mask_cmp+0x24>
		if (!ipv4->unicast[i].is_used ||
   312d0:	7d98      	ldrb	r0, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   312d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   312d4:	6809      	ldr	r1, [r1, #0]
		if (!ipv4->unicast[i].is_used ||
   312d6:	f3c0 0040 	ubfx	r0, r0, #1, #1
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   312da:	4011      	ands	r1, r2
		if (!ipv4->unicast[i].is_used ||
   312dc:	b148      	cbz	r0, 312f2 <net_if_ipv4_addr_mask_cmp+0x26>
   312de:	8818      	ldrh	r0, [r3, #0]
   312e0:	2801      	cmp	r0, #1
   312e2:	d105      	bne.n	312f0 <net_if_ipv4_addr_mask_cmp+0x24>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   312e4:	6858      	ldr	r0, [r3, #4]
   312e6:	4010      	ands	r0, r2
   312e8:	1a43      	subs	r3, r0, r1
   312ea:	4258      	negs	r0, r3
   312ec:	4158      	adcs	r0, r3
   312ee:	4770      	bx	lr
		return false;
   312f0:	2000      	movs	r0, #0
}
   312f2:	4770      	bx	lr

000312f4 <ipv4_is_broadcast_address>:
{
   312f4:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   312f6:	6844      	ldr	r4, [r0, #4]
{
   312f8:	460d      	mov	r5, r1
	if (!ipv4) {
   312fa:	b154      	cbz	r4, 31312 <ipv4_is_broadcast_address+0x1e>
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   312fc:	f7ff ffe6 	bl	312cc <net_if_ipv4_addr_mask_cmp>
   31300:	b130      	cbz	r0, 31310 <ipv4_is_broadcast_address+0x1c>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   31302:	6b63      	ldr	r3, [r4, #52]	; 0x34
   31304:	682a      	ldr	r2, [r5, #0]
   31306:	43db      	mvns	r3, r3
   31308:	4393      	bics	r3, r2
   3130a:	bf0c      	ite	eq
   3130c:	2001      	moveq	r0, #1
   3130e:	2000      	movne	r0, #0
}
   31310:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   31312:	4620      	mov	r0, r4
   31314:	e7fc      	b.n	31310 <ipv4_is_broadcast_address+0x1c>

00031316 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
   31316:	2201      	movs	r2, #1
   31318:	f7ff bfa6 	b.w	31268 <if_ipv4_get_addr>

0003131c <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
   3131c:	2200      	movs	r2, #0
   3131e:	f7ff bfa3 	b.w	31268 <if_ipv4_get_addr>

00031322 <net_if_recv_data>:
{
   31322:	b510      	push	{r4, lr}
   31324:	4602      	mov	r2, r0
	return net_if_l2(iface)->recv(iface, pkt);
   31326:	f7ff ff87 	bl	31238 <net_if_l2>
}
   3132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   3132e:	6803      	ldr	r3, [r0, #0]
   31330:	4610      	mov	r0, r2
   31332:	4718      	bx	r3

00031334 <net_if_send_data>:
{
   31334:	b570      	push	{r4, r5, r6, lr}
   31336:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   31338:	69ce      	ldr	r6, [r1, #28]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   3133a:	2100      	movs	r1, #0
{
   3133c:	4605      	mov	r5, r0
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   3133e:	f7e8 fb37 	bl	199b0 <net_if_flag_is_set>
   31342:	b958      	cbnz	r0, 3135c <net_if_send_data+0x28>
		if (context) {
   31344:	bb26      	cbnz	r6, 31390 <net_if_send_data+0x5c>
		if (dst->addr) {
   31346:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31348:	b133      	cbz	r3, 31358 <net_if_send_data+0x24>
			net_if_call_link_cb(iface, dst, status);
   3134a:	f06f 0272 	mvn.w	r2, #114	; 0x72
   3134e:	f104 0130 	add.w	r1, r4, #48	; 0x30
   31352:	4628      	mov	r0, r5
   31354:	f7e8 fcfc 	bl	19d50 <net_if_call_link_cb>
		verdict = NET_DROP;
   31358:	2002      	movs	r0, #2
   3135a:	e018      	b.n	3138e <net_if_send_data+0x5a>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
   3135c:	2104      	movs	r1, #4
   3135e:	4628      	mov	r0, r5
   31360:	f7e8 fb26 	bl	199b0 <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   31364:	2800      	cmp	r0, #0
   31366:	d1ed      	bne.n	31344 <net_if_send_data+0x10>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   31368:	2101      	movs	r1, #1
   3136a:	4628      	mov	r0, r5
   3136c:	f7e8 fb20 	bl	199b0 <net_if_flag_is_set>
   31370:	b940      	cbnz	r0, 31384 <net_if_send_data+0x50>
   31372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   31374:	b933      	cbnz	r3, 31384 <net_if_send_data+0x50>
	return net_if_get_link_addr(pkt->iface);
   31376:	6a23      	ldr	r3, [r4, #32]
   31378:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   3137a:	691a      	ldr	r2, [r3, #16]
   3137c:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   3137e:	7d1b      	ldrb	r3, [r3, #20]
   31380:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
   31384:	4628      	mov	r0, r5
   31386:	4621      	mov	r1, r4
   31388:	f7e8 fc04 	bl	19b94 <net_if_queue_tx>
   3138c:	2000      	movs	r0, #0
}
   3138e:	bd70      	pop	{r4, r5, r6, pc}
			net_context_send_cb(context, status);
   31390:	f06f 0172 	mvn.w	r1, #114	; 0x72
   31394:	4630      	mov	r0, r6
   31396:	f7ff ff54 	bl	31242 <net_context_send_cb>
   3139a:	e7d4      	b.n	31346 <net_if_send_data+0x12>

0003139c <net_if_need_calc_tx_checksum>:
   3139c:	2001      	movs	r0, #1
   3139e:	4770      	bx	lr

000313a0 <net_if_need_calc_rx_checksum>:
}
   313a0:	2001      	movs	r0, #1
   313a2:	4770      	bx	lr

000313a4 <calc_chksum>:
{
   313a4:	b510      	push	{r4, lr}
	end = data + len - 1;
   313a6:	3a01      	subs	r2, #1
   313a8:	440a      	add	r2, r1
	while (data < end) {
   313aa:	4291      	cmp	r1, r2
   313ac:	d309      	bcc.n	313c2 <calc_chksum+0x1e>
	if (data == end) {
   313ae:	d107      	bne.n	313c0 <calc_chksum+0x1c>
		tmp = data[0] << 8;
   313b0:	780b      	ldrb	r3, [r1, #0]
   313b2:	021b      	lsls	r3, r3, #8
		sum += tmp;
   313b4:	4418      	add	r0, r3
   313b6:	b280      	uxth	r0, r0
		if (sum < tmp) {
   313b8:	4283      	cmp	r3, r0
			sum++;
   313ba:	bf84      	itt	hi
   313bc:	3001      	addhi	r0, #1
   313be:	b280      	uxthhi	r0, r0
}
   313c0:	bd10      	pop	{r4, pc}
		tmp = (data[0] << 8) + data[1];
   313c2:	780c      	ldrb	r4, [r1, #0]
   313c4:	784b      	ldrb	r3, [r1, #1]
		data += 2;
   313c6:	3102      	adds	r1, #2
		tmp = (data[0] << 8) + data[1];
   313c8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   313cc:	b29b      	uxth	r3, r3
		sum += tmp;
   313ce:	4418      	add	r0, r3
   313d0:	b280      	uxth	r0, r0
		if (sum < tmp) {
   313d2:	4283      	cmp	r3, r0
			sum++;
   313d4:	bf84      	itt	hi
   313d6:	3001      	addhi	r0, #1
   313d8:	b280      	uxthhi	r0, r0
		data += 2;
   313da:	e7e6      	b.n	313aa <calc_chksum+0x6>

000313dc <net_calc_chksum>:
	return pkt->family;
   313dc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
{
   313e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   313e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   313e8:	2b01      	cmp	r3, #1
{
   313ea:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   313ec:	d179      	bne.n	314e2 <net_calc_chksum+0x106>
		if (proto != IPPROTO_ICMP) {
   313ee:	2901      	cmp	r1, #1
   313f0:	d050      	beq.n	31494 <net_calc_chksum+0xb8>
	size_t bytes = 0;
   313f2:	2200      	movs	r2, #0
			sum = net_pkt_get_len(pkt) -
   313f4:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   313f6:	2b00      	cmp	r3, #0
   313f8:	d148      	bne.n	3148c <net_calc_chksum+0xb0>
			len = 2 * sizeof(struct in_addr);
   313fa:	f04f 0908 	mov.w	r9, #8
				net_pkt_ip_hdr_len(pkt) -
   313fe:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
				net_pkt_ipv4_opts_len(pkt) + proto;
   31402:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
			sum = net_pkt_get_len(pkt) -
   31406:	441d      	add	r5, r3
   31408:	1b4d      	subs	r5, r1, r5
   3140a:	4415      	add	r5, r2
   3140c:	b2ad      	uxth	r5, r5
	net_pkt_cursor_init(pkt);
   3140e:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
   31410:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
   31414:	f000 faaa 	bl	3196c <net_pkt_cursor_init>
	return pkt->overwrite;
   31418:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   3141c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   31420:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   31424:	f043 0301 	orr.w	r3, r3, #1
   31428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   3142c:	eba1 0109 	sub.w	r1, r1, r9
   31430:	4620      	mov	r0, r4
   31432:	f000 fb25 	bl	31a80 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   31436:	464a      	mov	r2, r9
   31438:	69a1      	ldr	r1, [r4, #24]
   3143a:	4628      	mov	r0, r5
   3143c:	f7ff ffb2 	bl	313a4 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   31440:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   31444:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   31446:	4449      	add	r1, r9
   31448:	4620      	mov	r0, r4
   3144a:	f000 fb19 	bl	31a80 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   3144e:	6962      	ldr	r2, [r4, #20]
   31450:	b162      	cbz	r2, 3146c <net_calc_chksum+0x90>
   31452:	69a3      	ldr	r3, [r4, #24]
   31454:	b153      	cbz	r3, 3146c <net_calc_chksum+0x90>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   31456:	f8b2 900c 	ldrh.w	r9, [r2, #12]
   3145a:	6892      	ldr	r2, [r2, #8]
   3145c:	1a9b      	subs	r3, r3, r2
   3145e:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   31462:	f8d4 a014 	ldr.w	sl, [r4, #20]
   31466:	f1ba 0f00 	cmp.w	sl, #0
   3146a:	d116      	bne.n	3149a <net_calc_chksum+0xbe>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   3146c:	2d00      	cmp	r5, #0
   3146e:	d035      	beq.n	314dc <net_calc_chksum+0x100>
   31470:	ba68      	rev16	r0, r5
   31472:	b280      	uxth	r0, r0
	return ~sum;
   31474:	43c0      	mvns	r0, r0
   31476:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	pkt->cursor.pos = backup->pos;
   3147a:	e9c4 8705 	strd	r8, r7, [r4, #20]
	pkt->overwrite = overwrite;
   3147e:	f366 0300 	bfi	r3, r6, #0, #1
   31482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   31486:	b280      	uxth	r0, r0
}
   31488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   3148c:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   3148e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   31490:	4402      	add	r2, r0
		buf = buf->frags;
   31492:	e7b0      	b.n	313f6 <net_calc_chksum+0x1a>
	u16_t sum = 0U;
   31494:	2500      	movs	r5, #0
	size_t len = 0U;
   31496:	46a9      	mov	r9, r5
   31498:	e7b9      	b.n	3140e <net_calc_chksum+0x32>
		sum = calc_chksum(sum, cur->pos, len);
   3149a:	4628      	mov	r0, r5
   3149c:	464a      	mov	r2, r9
   3149e:	69a1      	ldr	r1, [r4, #24]
   314a0:	f7ff ff80 	bl	313a4 <calc_chksum>
		cur->buf = cur->buf->frags;
   314a4:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   314a8:	4605      	mov	r5, r0
		cur->buf = cur->buf->frags;
   314aa:	6163      	str	r3, [r4, #20]
		if (!cur->buf || !cur->buf->len) {
   314ac:	2b00      	cmp	r3, #0
   314ae:	d0dd      	beq.n	3146c <net_calc_chksum+0x90>
   314b0:	899a      	ldrh	r2, [r3, #12]
   314b2:	2a00      	cmp	r2, #0
   314b4:	d0da      	beq.n	3146c <net_calc_chksum+0x90>
		cur->pos = cur->buf->data;
   314b6:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   314b8:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   314bc:	61a3      	str	r3, [r4, #24]
		if (len % 2) {
   314be:	d00b      	beq.n	314d8 <net_calc_chksum+0xfc>
			sum += *cur->pos;
   314c0:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   314c2:	3301      	adds	r3, #1
			sum += *cur->pos;
   314c4:	440d      	add	r5, r1
   314c6:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
   314c8:	42a9      	cmp	r1, r5
				sum++;
   314ca:	bf84      	itt	hi
   314cc:	3501      	addhi	r5, #1
   314ce:	b2ad      	uxthhi	r5, r5
			cur->pos++;
   314d0:	61a3      	str	r3, [r4, #24]
			len = cur->buf->len - 1;
   314d2:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   314d6:	e7c4      	b.n	31462 <net_calc_chksum+0x86>
			len = cur->buf->len;
   314d8:	4691      	mov	r9, r2
   314da:	e7c2      	b.n	31462 <net_calc_chksum+0x86>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   314dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   314e0:	e7c8      	b.n	31474 <net_calc_chksum+0x98>
		return 0;
   314e2:	2000      	movs	r0, #0
   314e4:	e7d0      	b.n	31488 <net_calc_chksum+0xac>

000314e6 <net_calc_chksum_ipv4>:
{
   314e6:	b508      	push	{r3, lr}
			  net_pkt_ipv4_opts_len(pkt));
   314e8:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
			  net_pkt_ip_hdr_len(pkt) +
   314ec:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	sum = calc_chksum(0, pkt->buffer->data,
   314f0:	6903      	ldr	r3, [r0, #16]
   314f2:	440a      	add	r2, r1
   314f4:	2000      	movs	r0, #0
   314f6:	6899      	ldr	r1, [r3, #8]
   314f8:	f7ff ff54 	bl	313a4 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   314fc:	b120      	cbz	r0, 31508 <net_calc_chksum_ipv4+0x22>
   314fe:	ba40      	rev16	r0, r0
   31500:	b280      	uxth	r0, r0
	return ~sum;
   31502:	43c0      	mvns	r0, r0
}
   31504:	b280      	uxth	r0, r0
   31506:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
   31508:	f64f 70ff 	movw	r0, #65535	; 0xffff
   3150c:	e7f9      	b.n	31502 <net_calc_chksum_ipv4+0x1c>

0003150e <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   3150e:	6800      	ldr	r0, [r0, #0]
   31510:	ba00      	rev	r0, r0
   31512:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   31516:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   3151a:	4258      	negs	r0, r3
   3151c:	4158      	adcs	r0, r3
   3151e:	4770      	bx	lr

00031520 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   31520:	f7f7 bda4 	b.w	2906c <z_impl_k_mutex_unlock>

00031524 <context_write_data>:
{
   31524:	b570      	push	{r4, r5, r6, lr}
   31526:	4606      	mov	r6, r0
	if (msghdr) {
   31528:	461d      	mov	r5, r3
   3152a:	b99b      	cbnz	r3, 31554 <context_write_data+0x30>
}
   3152c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
   31530:	f000 bbdf 	b.w	31cf2 <net_pkt_write>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   31534:	68ab      	ldr	r3, [r5, #8]
   31536:	4630      	mov	r0, r6
   31538:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   3153c:	6852      	ldr	r2, [r2, #4]
   3153e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   31542:	f000 fbd6 	bl	31cf2 <net_pkt_write>
			if (ret < 0) {
   31546:	2800      	cmp	r0, #0
   31548:	db03      	blt.n	31552 <context_write_data+0x2e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   3154a:	3401      	adds	r4, #1
   3154c:	68eb      	ldr	r3, [r5, #12]
   3154e:	42a3      	cmp	r3, r4
   31550:	d8f0      	bhi.n	31534 <context_write_data+0x10>
}
   31552:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   31554:	2400      	movs	r4, #0
	int ret = 0;
   31556:	4620      	mov	r0, r4
   31558:	e7f8      	b.n	3154c <context_write_data+0x28>

0003155a <k_mutex_lock.constprop.28>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3155a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3155e:	f7f7 bca7 	b.w	28eb0 <z_impl_k_mutex_lock>

00031562 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   31562:	1d03      	adds	r3, r0, #4
   31564:	e8d3 0fef 	ldaex	r0, [r3]
   31568:	1c42      	adds	r2, r0, #1
   3156a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   3156e:	2900      	cmp	r1, #0
   31570:	d1f8      	bne.n	31564 <net_context_ref+0x2>
}
   31572:	3001      	adds	r0, #1
   31574:	4770      	bx	lr

00031576 <net_context_unref>:
{
   31576:	b538      	push	{r3, r4, r5, lr}
   31578:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3157a:	1d03      	adds	r3, r0, #4
   3157c:	e8d3 0fef 	ldaex	r0, [r3]
   31580:	1e42      	subs	r2, r0, #1
   31582:	e8c3 2fe1 	stlex	r1, r2, [r3]
   31586:	2900      	cmp	r1, #0
   31588:	d1f8      	bne.n	3157c <net_context_unref+0x6>
	if (old_rc != 1) {
   3158a:	2801      	cmp	r0, #1
   3158c:	d001      	beq.n	31592 <net_context_unref+0x1c>
		return old_rc - 1;
   3158e:	3801      	subs	r0, #1
}
   31590:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   31592:	f104 0508 	add.w	r5, r4, #8
   31596:	4628      	mov	r0, r5
   31598:	f7ff ffdf 	bl	3155a <k_mutex_lock.constprop.28>
	net_tcp_unref(context);
   3159c:	4620      	mov	r0, r4
   3159e:	f7ea fe2d 	bl	1c1fc <net_tcp_unref>
	if (context->conn_handler) {
   315a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   315a4:	b118      	cbz	r0, 315ae <net_context_unref+0x38>
			net_conn_unregister(context->conn_handler);
   315a6:	f7e9 fd39 	bl	1b01c <net_conn_unregister>
		context->conn_handler = NULL;
   315aa:	2300      	movs	r3, #0
   315ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   315ae:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   315b2:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   315b4:	f023 0307 	bic.w	r3, r3, #7
   315b8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   315bc:	f7ff ffb0 	bl	31520 <k_mutex_unlock>
   315c0:	2000      	movs	r0, #0
   315c2:	e7e5      	b.n	31590 <net_context_unref+0x1a>

000315c4 <bind_default>:
{
   315c4:	b513      	push	{r0, r1, r4, lr}
   315c6:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(context);
   315c8:	f7e8 fd36 	bl	1a038 <net_context_get_family>
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   315cc:	2801      	cmp	r0, #1
   315ce:	d113      	bne.n	315f8 <bind_default+0x34>
		if (net_sin_ptr(&context->local)->sin_addr) {
   315d0:	6a23      	ldr	r3, [r4, #32]
   315d2:	b97b      	cbnz	r3, 315f4 <bind_default+0x30>
		addr4.sin_family = AF_INET;
   315d4:	f8ad 0000 	strh.w	r0, [sp]
			find_available_port(context,
   315d8:	4669      	mov	r1, sp
   315da:	4620      	mov	r0, r4
		addr4.sin_addr.s_addr = INADDR_ANY;
   315dc:	9301      	str	r3, [sp, #4]
			find_available_port(context,
   315de:	f7e8 fd6b 	bl	1a0b8 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
   315e2:	2208      	movs	r2, #8
		addr4.sin_port =
   315e4:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
   315e8:	4669      	mov	r1, sp
   315ea:	4620      	mov	r0, r4
   315ec:	f7e8 fefc 	bl	1a3e8 <net_context_bind>
}
   315f0:	b002      	add	sp, #8
   315f2:	bd10      	pop	{r4, pc}
			return 0;
   315f4:	2000      	movs	r0, #0
   315f6:	e7fb      	b.n	315f0 <bind_default+0x2c>
	return -EINVAL;
   315f8:	f06f 0015 	mvn.w	r0, #21
   315fc:	e7f8      	b.n	315f0 <bind_default+0x2c>

000315fe <net_context_send>:
{
   315fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   31602:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   31604:	f100 0508 	add.w	r5, r0, #8
   31608:	4628      	mov	r0, r5
{
   3160a:	4698      	mov	r8, r3
   3160c:	460e      	mov	r6, r1
   3160e:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   31610:	f7ff ffa3 	bl	3155a <k_mutex_lock.constprop.28>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   31614:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   31618:	05db      	lsls	r3, r3, #23
   3161a:	d51d      	bpl.n	31658 <net_context_send+0x5a>
   3161c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   3161e:	b1db      	cbz	r3, 31658 <net_context_send+0x5a>
		   net_context_get_family(context) == AF_INET) {
   31620:	4620      	mov	r0, r4
   31622:	f7e8 fd09 	bl	1a038 <net_context_get_family>
	ret = context_sendto(context, buf, len, &context->remote,
   31626:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   31628:	2801      	cmp	r0, #1
		addrlen = 0;
   3162a:	bf0c      	ite	eq
   3162c:	2308      	moveq	r3, #8
   3162e:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
   31630:	9203      	str	r2, [sp, #12]
   31632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   31634:	9300      	str	r3, [sp, #0]
   31636:	e9cd 8201 	strd	r8, r2, [sp, #4]
   3163a:	f104 0324 	add.w	r3, r4, #36	; 0x24
   3163e:	4620      	mov	r0, r4
   31640:	463a      	mov	r2, r7
   31642:	4631      	mov	r1, r6
   31644:	f7e8 ffd2 	bl	1a5ec <context_sendto.isra.21>
   31648:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   3164a:	4628      	mov	r0, r5
   3164c:	f7ff ff68 	bl	31520 <k_mutex_unlock>
}
   31650:	4620      	mov	r0, r4
   31652:	b004      	add	sp, #16
   31654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
   31658:	f06f 0478 	mvn.w	r4, #120	; 0x78
   3165c:	e7f5      	b.n	3164a <net_context_send+0x4c>

0003165e <net_context_sendmsg>:
{
   3165e:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   31660:	f100 0408 	add.w	r4, r0, #8
{
   31664:	b085      	sub	sp, #20
   31666:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   31668:	4620      	mov	r0, r4
{
   3166a:	461f      	mov	r7, r3
   3166c:	460e      	mov	r6, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   3166e:	f7ff ff74 	bl	3155a <k_mutex_lock.constprop.28>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   31672:	2301      	movs	r3, #1
   31674:	9303      	str	r3, [sp, #12]
   31676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31678:	4631      	mov	r1, r6
   3167a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   3167e:	2300      	movs	r3, #0
   31680:	4628      	mov	r0, r5
   31682:	9300      	str	r3, [sp, #0]
   31684:	461a      	mov	r2, r3
   31686:	f7e8 ffb1 	bl	1a5ec <context_sendto.isra.21>
   3168a:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   3168c:	4620      	mov	r0, r4
   3168e:	f7ff ff47 	bl	31520 <k_mutex_unlock>
}
   31692:	4628      	mov	r0, r5
   31694:	b005      	add	sp, #20
   31696:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031698 <net_context_sendto>:
{
   31698:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   3169c:	f100 0408 	add.w	r4, r0, #8
{
   316a0:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   316a2:	4620      	mov	r0, r4
{
   316a4:	4698      	mov	r8, r3
   316a6:	460e      	mov	r6, r1
   316a8:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   316aa:	f7ff ff56 	bl	3155a <k_mutex_lock.constprop.28>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   316ae:	2301      	movs	r3, #1
   316b0:	9303      	str	r3, [sp, #12]
   316b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   316b4:	463a      	mov	r2, r7
   316b6:	9302      	str	r3, [sp, #8]
   316b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   316ba:	4631      	mov	r1, r6
   316bc:	9301      	str	r3, [sp, #4]
   316be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   316c0:	4628      	mov	r0, r5
   316c2:	9300      	str	r3, [sp, #0]
   316c4:	4643      	mov	r3, r8
   316c6:	f7e8 ff91 	bl	1a5ec <context_sendto.isra.21>
   316ca:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   316cc:	4620      	mov	r0, r4
   316ce:	f7ff ff27 	bl	31520 <k_mutex_unlock>
}
   316d2:	4628      	mov	r0, r5
   316d4:	b004      	add	sp, #16
   316d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000316da <net_context_update_recv_wnd>:

int net_context_update_recv_wnd(struct net_context *context,
				s32_t delta)
{
   316da:	b570      	push	{r4, r5, r6, lr}
   316dc:	4605      	mov	r5, r0
   316de:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
		return 0;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   316e0:	f100 0408 	add.w	r4, r0, #8
   316e4:	4620      	mov	r0, r4
   316e6:	f7ff ff38 	bl	3155a <k_mutex_lock.constprop.28>

	ret = net_tcp_update_recv_wnd(context, delta);
   316ea:	4631      	mov	r1, r6
   316ec:	4628      	mov	r0, r5
   316ee:	f001 fa54 	bl	32b9a <net_tcp_update_recv_wnd>
   316f2:	4605      	mov	r5, r0

	k_mutex_unlock(&context->lock);
   316f4:	4620      	mov	r0, r4
   316f6:	f7ff ff13 	bl	31520 <k_mutex_unlock>

	return ret;
}
   316fa:	4628      	mov	r0, r5
   316fc:	bd70      	pop	{r4, r5, r6, pc}

000316fe <net_buf_frags_len>:
{
   316fe:	4603      	mov	r3, r0
	size_t bytes = 0;
   31700:	2000      	movs	r0, #0
	while (buf) {
   31702:	b903      	cbnz	r3, 31706 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   31704:	4770      	bx	lr
		bytes += buf->len;
   31706:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   31708:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   3170a:	4410      	add	r0, r2
		buf = buf->frags;
   3170c:	e7f9      	b.n	31702 <net_buf_frags_len+0x4>

0003170e <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   3170e:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   31710:	681b      	ldr	r3, [r3, #0]
   31712:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   31714:	6943      	ldr	r3, [r0, #20]
   31716:	b90b      	cbnz	r3, 3171c <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   31718:	6183      	str	r3, [r0, #24]
	}
}
   3171a:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   3171c:	b121      	cbz	r1, 31728 <pkt_cursor_jump+0x1a>
   3171e:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   31720:	2a00      	cmp	r2, #0
   31722:	d0f5      	beq.n	31710 <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   31724:	689b      	ldr	r3, [r3, #8]
   31726:	e7f7      	b.n	31718 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   31728:	899a      	ldrh	r2, [r3, #12]
   3172a:	e7f9      	b.n	31720 <pkt_cursor_jump+0x12>

0003172c <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   3172c:	6943      	ldr	r3, [r0, #20]
{
   3172e:	b410      	push	{r4}
	if (!cursor->buf) {
   31730:	b163      	cbz	r3, 3174c <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   31732:	b149      	cbz	r1, 31748 <pkt_cursor_advance+0x1c>
   31734:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   31736:	6982      	ldr	r2, [r0, #24]
   31738:	689b      	ldr	r3, [r3, #8]
   3173a:	1ad2      	subs	r2, r2, r3
   3173c:	42a2      	cmp	r2, r4
   3173e:	d105      	bne.n	3174c <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   31740:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   31744:	f7ff bfe3 	b.w	3170e <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   31748:	899c      	ldrh	r4, [r3, #12]
   3174a:	e7f4      	b.n	31736 <pkt_cursor_advance+0xa>
}
   3174c:	f85d 4b04 	ldr.w	r4, [sp], #4
   31750:	4770      	bx	lr

00031752 <pkt_cursor_update>:
	return pkt->overwrite;
   31752:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   31756:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   31758:	f013 0601 	ands.w	r6, r3, #1
   3175c:	6945      	ldr	r5, [r0, #20]
   3175e:	d10f      	bne.n	31780 <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   31760:	b172      	cbz	r2, 31780 <pkt_cursor_update+0x2e>
   31762:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   31764:	6984      	ldr	r4, [r0, #24]
   31766:	68ab      	ldr	r3, [r5, #8]
   31768:	1ae3      	subs	r3, r4, r3
   3176a:	440b      	add	r3, r1
   3176c:	42bb      	cmp	r3, r7
   3176e:	d10a      	bne.n	31786 <pkt_cursor_update+0x34>
   31770:	b116      	cbz	r6, 31778 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   31772:	89eb      	ldrh	r3, [r5, #14]
   31774:	42bb      	cmp	r3, r7
   31776:	d806      	bhi.n	31786 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   31778:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   3177a:	4611      	mov	r1, r2
   3177c:	f7ff bfc7 	b.w	3170e <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   31780:	89af      	ldrh	r7, [r5, #12]
   31782:	2200      	movs	r2, #0
   31784:	e7ee      	b.n	31764 <pkt_cursor_update+0x12>
		cursor->pos += length;
   31786:	440c      	add	r4, r1
   31788:	6184      	str	r4, [r0, #24]
}
   3178a:	bcf0      	pop	{r4, r5, r6, r7}
   3178c:	4770      	bx	lr

0003178e <pkt_estimate_headers_length.isra.19.part.20>:
		hdr_len += NET_IPV4H_LEN;
   3178e:	2801      	cmp	r0, #1
   31790:	bf14      	ite	ne
   31792:	2000      	movne	r0, #0
   31794:	2014      	moveq	r0, #20
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   31796:	2906      	cmp	r1, #6
   31798:	d101      	bne.n	3179e <pkt_estimate_headers_length.isra.19.part.20+0x10>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
   3179a:	301c      	adds	r0, #28
   3179c:	4770      	bx	lr
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   3179e:	2911      	cmp	r1, #17
   317a0:	d101      	bne.n	317a6 <pkt_estimate_headers_length.isra.19.part.20+0x18>
		hdr_len += NET_UDPH_LEN;
   317a2:	3008      	adds	r0, #8
   317a4:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   317a6:	2901      	cmp	r1, #1
   317a8:	d001      	beq.n	317ae <pkt_estimate_headers_length.isra.19.part.20+0x20>
   317aa:	293a      	cmp	r1, #58	; 0x3a
   317ac:	d100      	bne.n	317b0 <pkt_estimate_headers_length.isra.19.part.20+0x22>
		hdr_len += NET_ICMPH_LEN;
   317ae:	3004      	adds	r0, #4
}
   317b0:	4770      	bx	lr

000317b2 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   317b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   317b6:	4606      	mov	r6, r0
   317b8:	460f      	mov	r7, r1
   317ba:	4615      	mov	r5, r2
   317bc:	4699      	mov	r9, r3
   317be:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   317c2:	6973      	ldr	r3, [r6, #20]
   317c4:	2b00      	cmp	r3, #0
   317c6:	d051      	beq.n	3186c <net_pkt_cursor_operate+0xba>
   317c8:	b90d      	cbnz	r5, 317ce <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   317ca:	4628      	mov	r0, r5
   317cc:	e00d      	b.n	317ea <net_pkt_cursor_operate+0x38>
   317ce:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   317d2:	4630      	mov	r0, r6
   317d4:	f013 0f01 	tst.w	r3, #1
   317d8:	bf0c      	ite	eq
   317da:	4641      	moveq	r1, r8
   317dc:	2100      	movne	r1, #0
   317de:	f7ff ffa5 	bl	3172c <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   317e2:	6973      	ldr	r3, [r6, #20]
   317e4:	b91b      	cbnz	r3, 317ee <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   317e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   317ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   317ee:	69b0      	ldr	r0, [r6, #24]
   317f0:	689c      	ldr	r4, [r3, #8]
   317f2:	1b04      	subs	r4, r0, r4
   317f4:	f1b8 0f00 	cmp.w	r8, #0
   317f8:	d02d      	beq.n	31856 <net_pkt_cursor_operate+0xa4>
   317fa:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   317fe:	07d2      	lsls	r2, r2, #31
   31800:	d429      	bmi.n	31856 <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   31802:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   31804:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   31806:	2c00      	cmp	r4, #0
   31808:	d0ed      	beq.n	317e6 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   3180a:	42ac      	cmp	r4, r5
   3180c:	bf28      	it	cs
   3180e:	462c      	movcs	r4, r5
		if (copy) {
   31810:	f1b9 0f00 	cmp.w	r9, #0
   31814:	d023      	beq.n	3185e <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   31816:	f1b8 0f00 	cmp.w	r8, #0
   3181a:	d11e      	bne.n	3185a <net_pkt_cursor_operate+0xa8>
   3181c:	4601      	mov	r1, r0
   3181e:	4638      	mov	r0, r7
   31820:	4622      	mov	r2, r4
   31822:	f003 f8fd 	bl	34a20 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   31826:	f1b8 0f00 	cmp.w	r8, #0
   3182a:	d008      	beq.n	3183e <net_pkt_cursor_operate+0x8c>
   3182c:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
   31830:	07db      	lsls	r3, r3, #31
   31832:	d404      	bmi.n	3183e <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   31834:	6970      	ldr	r0, [r6, #20]
   31836:	4621      	mov	r1, r4
   31838:	3008      	adds	r0, #8
   3183a:	f7e8 f88b 	bl	19954 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   3183e:	4642      	mov	r2, r8
   31840:	4621      	mov	r1, r4
   31842:	4630      	mov	r0, r6
   31844:	f7ff ff85 	bl	31752 <pkt_cursor_update>
		if (copy && data) {
   31848:	f1b9 0f00 	cmp.w	r9, #0
   3184c:	d001      	beq.n	31852 <net_pkt_cursor_operate+0xa0>
   3184e:	b107      	cbz	r7, 31852 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   31850:	4427      	add	r7, r4
		length -= len;
   31852:	1b2d      	subs	r5, r5, r4
   31854:	e7b5      	b.n	317c2 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   31856:	899b      	ldrh	r3, [r3, #12]
   31858:	e7d4      	b.n	31804 <net_pkt_cursor_operate+0x52>
   3185a:	4639      	mov	r1, r7
   3185c:	e7e0      	b.n	31820 <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   3185e:	2f00      	cmp	r7, #0
   31860:	d0e1      	beq.n	31826 <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
   31862:	4622      	mov	r2, r4
   31864:	6839      	ldr	r1, [r7, #0]
   31866:	f003 f915 	bl	34a94 <memset>
   3186a:	e7dc      	b.n	31826 <net_pkt_cursor_operate+0x74>
	if (length) {
   3186c:	2d00      	cmp	r5, #0
   3186e:	d0ac      	beq.n	317ca <net_pkt_cursor_operate+0x18>
   31870:	e7b9      	b.n	317e6 <net_pkt_cursor_operate+0x34>

00031872 <net_pkt_ref>:
{
   31872:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   31874:	f100 0324 	add.w	r3, r0, #36	; 0x24
   31878:	b170      	cbz	r0, 31898 <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3187a:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   3187e:	b15a      	cbz	r2, 31898 <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   31880:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   31882:	e8d3 4fef 	ldaex	r4, [r3]
   31886:	4294      	cmp	r4, r2
   31888:	d104      	bne.n	31894 <net_pkt_ref+0x22>
   3188a:	e8c3 1fec 	stlex	ip, r1, [r3]
   3188e:	f1bc 0f00 	cmp.w	ip, #0
   31892:	d1f6      	bne.n	31882 <net_pkt_ref+0x10>
   31894:	d1f0      	bne.n	31878 <net_pkt_ref+0x6>
}
   31896:	bd10      	pop	{r4, pc}
			return NULL;
   31898:	2000      	movs	r0, #0
   3189a:	e7fc      	b.n	31896 <net_pkt_ref+0x24>

0003189c <net_pkt_frag_unref>:
	if (!frag) {
   3189c:	b108      	cbz	r0, 318a2 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   3189e:	f7e7 bfc9 	b.w	19834 <net_buf_unref>
}
   318a2:	4770      	bx	lr

000318a4 <net_pkt_unref>:
{
   318a4:	b507      	push	{r0, r1, r2, lr}
   318a6:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   318a8:	b1e8      	cbz	r0, 318e6 <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   318aa:	9b01      	ldr	r3, [sp, #4]
   318ac:	3324      	adds	r3, #36	; 0x24
   318ae:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   318b2:	b1c3      	cbz	r3, 318e6 <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   318b4:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   318b6:	1e59      	subs	r1, r3, #1
   318b8:	3224      	adds	r2, #36	; 0x24
   318ba:	e8d2 0fef 	ldaex	r0, [r2]
   318be:	4298      	cmp	r0, r3
   318c0:	d104      	bne.n	318cc <net_pkt_unref+0x28>
   318c2:	e8c2 1fec 	stlex	ip, r1, [r2]
   318c6:	f1bc 0f00 	cmp.w	ip, #0
   318ca:	d1f6      	bne.n	318ba <net_pkt_unref+0x16>
   318cc:	d1ed      	bne.n	318aa <net_pkt_unref+0x6>
	if (ref > 1) {
   318ce:	2b01      	cmp	r3, #1
   318d0:	dc09      	bgt.n	318e6 <net_pkt_unref+0x42>
	if (pkt->frags) {
   318d2:	9b01      	ldr	r3, [sp, #4]
   318d4:	6918      	ldr	r0, [r3, #16]
   318d6:	b108      	cbz	r0, 318dc <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   318d8:	f7ff ffe0 	bl	3189c <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   318dc:	9b01      	ldr	r3, [sp, #4]
   318de:	a901      	add	r1, sp, #4
   318e0:	68d8      	ldr	r0, [r3, #12]
   318e2:	f7f7 f8ed 	bl	28ac0 <k_mem_slab_free>
}
   318e6:	b003      	add	sp, #12
   318e8:	f85d fb04 	ldr.w	pc, [sp], #4

000318ec <net_pkt_available_buffer>:
{
   318ec:	b508      	push	{r3, lr}
	if (!pkt) {
   318ee:	b130      	cbz	r0, 318fe <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   318f0:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   318f2:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   318f4:	4603      	mov	r3, r0
	while (buf) {
   318f6:	b91b      	cbnz	r3, 31900 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   318f8:	f7ff ff01 	bl	316fe <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   318fc:	1a08      	subs	r0, r1, r0
}
   318fe:	bd08      	pop	{r3, pc}
		size += buf->size;
   31900:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   31902:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   31904:	4411      	add	r1, r2
		buf = buf->frags;
   31906:	e7f6      	b.n	318f6 <net_pkt_available_buffer+0xa>

00031908 <net_pkt_available_payload_buffer>:
{
   31908:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   3190a:	4605      	mov	r5, r0
   3190c:	b198      	cbz	r0, 31936 <net_pkt_available_payload_buffer+0x2e>
	return pkt->family;
   3190e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   31912:	f3c3 0042 	ubfx	r0, r3, #1, #3
	if (family == AF_UNSPEC) {
   31916:	b108      	cbz	r0, 3191c <net_pkt_available_payload_buffer+0x14>
   31918:	f7ff ff39 	bl	3178e <pkt_estimate_headers_length.isra.19.part.20>
		return  0;
   3191c:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   3191e:	6928      	ldr	r0, [r5, #16]
   31920:	f7ff feed 	bl	316fe <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   31924:	42a0      	cmp	r0, r4
   31926:	bf38      	it	cc
   31928:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   3192a:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   3192c:	bf28      	it	cs
   3192e:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   31930:	f7ff ffdc 	bl	318ec <net_pkt_available_buffer>
   31934:	1b00      	subs	r0, r0, r4
}
   31936:	bd38      	pop	{r3, r4, r5, pc}

00031938 <net_pkt_trim_buffer>:
{
   31938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3193a:	4605      	mov	r5, r0
	buf = pkt->buffer;
   3193c:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   3193e:	2700      	movs	r7, #0
	prev = buf;
   31940:	4604      	mov	r4, r0
	while (buf) {
   31942:	b900      	cbnz	r0, 31946 <net_pkt_trim_buffer+0xe>
}
   31944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   31946:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   31948:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   3194a:	b93b      	cbnz	r3, 3195c <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   3194c:	692b      	ldr	r3, [r5, #16]
   3194e:	4283      	cmp	r3, r0
   31950:	d107      	bne.n	31962 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   31952:	612e      	str	r6, [r5, #16]
			buf->frags = NULL;
   31954:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   31956:	f7e7 ff6d 	bl	19834 <net_buf_unref>
   3195a:	4620      	mov	r0, r4
   3195c:	4604      	mov	r4, r0
   3195e:	4630      	mov	r0, r6
   31960:	e7ef      	b.n	31942 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   31962:	6823      	ldr	r3, [r4, #0]
   31964:	4283      	cmp	r3, r0
				prev->frags = next;
   31966:	bf08      	it	eq
   31968:	6026      	streq	r6, [r4, #0]
   3196a:	e7f3      	b.n	31954 <net_pkt_trim_buffer+0x1c>

0003196c <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   3196c:	6903      	ldr	r3, [r0, #16]
   3196e:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   31970:	b103      	cbz	r3, 31974 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   31972:	689b      	ldr	r3, [r3, #8]
   31974:	6183      	str	r3, [r0, #24]
}
   31976:	4770      	bx	lr

00031978 <pkt_alloc>:
{
   31978:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3197a:	460d      	mov	r5, r1
   3197c:	4604      	mov	r4, r0
	if (k_is_in_isr()) {
   3197e:	f002 ff06 	bl	3478e <k_is_in_isr>
   31982:	2800      	cmp	r0, #0
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   31984:	a901      	add	r1, sp, #4
   31986:	bf0c      	ite	eq
   31988:	462a      	moveq	r2, r5
   3198a:	2200      	movne	r2, #0
   3198c:	4620      	mov	r0, r4
   3198e:	f7f7 f833 	bl	289f8 <k_mem_slab_alloc>
	if (ret) {
   31992:	4601      	mov	r1, r0
   31994:	b960      	cbnz	r0, 319b0 <pkt_alloc+0x38>
   31996:	2244      	movs	r2, #68	; 0x44
   31998:	9801      	ldr	r0, [sp, #4]
   3199a:	f003 f87b 	bl	34a94 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   3199e:	2301      	movs	r3, #1
   319a0:	9801      	ldr	r0, [sp, #4]
   319a2:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->slab = slab;
   319a4:	60c4      	str	r4, [r0, #12]
	net_pkt_cursor_init(pkt);
   319a6:	f7ff ffe1 	bl	3196c <net_pkt_cursor_init>
	return pkt;
   319aa:	9801      	ldr	r0, [sp, #4]
}
   319ac:	b003      	add	sp, #12
   319ae:	bd30      	pop	{r4, r5, pc}
		return NULL;
   319b0:	2000      	movs	r0, #0
   319b2:	e7fb      	b.n	319ac <pkt_alloc+0x34>

000319b4 <pkt_alloc_on_iface>:
{
   319b4:	b510      	push	{r4, lr}
   319b6:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   319b8:	4611      	mov	r1, r2
   319ba:	f7ff ffdd 	bl	31978 <pkt_alloc>
	if (pkt) {
   319be:	b148      	cbz	r0, 319d4 <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
   319c0:	6204      	str	r4, [r0, #32]
	if (iface) {
   319c2:	b13c      	cbz	r4, 319d4 <pkt_alloc_on_iface+0x20>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   319c4:	6823      	ldr	r3, [r4, #0]
   319c6:	7d5b      	ldrb	r3, [r3, #21]
   319c8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   319cc:	6823      	ldr	r3, [r4, #0]
   319ce:	7d5b      	ldrb	r3, [r3, #21]
   319d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   319d4:	bd10      	pop	{r4, pc}

000319d6 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   319d6:	6903      	ldr	r3, [r0, #16]
{
   319d8:	b510      	push	{r4, lr}
   319da:	4602      	mov	r2, r0
   319dc:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   319de:	b923      	cbnz	r3, 319ea <net_pkt_append_buffer+0x14>
}
   319e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   319e4:	6111      	str	r1, [r2, #16]
		net_pkt_cursor_init(pkt);
   319e6:	f7ff bfc1 	b.w	3196c <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   319ea:	4618      	mov	r0, r3
   319ec:	f7e7 ff68 	bl	198c0 <net_buf_frag_last>
   319f0:	4621      	mov	r1, r4
}
   319f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   319f6:	f7e7 bf7f 	b.w	198f8 <net_buf_frag_insert>

000319fa <pkt_alloc_with_buffer>:
{
   319fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   31a00:	4682      	mov	sl, r0
	u64_t end = z_timeout_end_calc(timeout);
   31a02:	4620      	mov	r0, r4
{
   31a04:	468b      	mov	fp, r1
   31a06:	4690      	mov	r8, r2
   31a08:	9301      	str	r3, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   31a0a:	f002 ff3d 	bl	34888 <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   31a0e:	4622      	mov	r2, r4
	u64_t end = z_timeout_end_calc(timeout);
   31a10:	4605      	mov	r5, r0
   31a12:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   31a14:	4650      	mov	r0, sl
   31a16:	4659      	mov	r1, fp
   31a18:	f7ff ffcc 	bl	319b4 <pkt_alloc_on_iface>
	if (!pkt) {
   31a1c:	4682      	mov	sl, r0
   31a1e:	b358      	cbz	r0, 31a78 <pkt_alloc_with_buffer+0x7e>
	pkt->family = family;
   31a20:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   31a24:	9b01      	ldr	r3, [sp, #4]
   31a26:	f363 0243 	bfi	r2, r3, #1, #3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   31a2a:	1c63      	adds	r3, r4, #1
   31a2c:	2b01      	cmp	r3, #1
   31a2e:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
   31a32:	d914      	bls.n	31a5e <pkt_alloc_with_buffer+0x64>
		s64_t remaining = end - z_tick_get();
   31a34:	f7f9 fdb4 	bl	2b5a0 <z_tick_get>
   31a38:	1a2e      	subs	r6, r5, r0
   31a3a:	eb69 0701 	sbc.w	r7, r9, r1
		if (remaining <= 0) {
   31a3e:	2e01      	cmp	r6, #1
   31a40:	f177 0300 	sbcs.w	r3, r7, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   31a44:	bfa3      	ittte	ge
   31a46:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   31a4a:	2300      	movge	r3, #0
   31a4c:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   31a50:	2400      	movlt	r4, #0
   31a52:	bfa2      	ittt	ge
   31a54:	fbe1 2306 	umlalge	r2, r3, r1, r6
   31a58:	0bd4      	lsrge	r4, r2, #15
   31a5a:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   31a5e:	4623      	mov	r3, r4
   31a60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   31a64:	4641      	mov	r1, r8
   31a66:	4650      	mov	r0, sl
   31a68:	f7e9 f896 	bl	1ab98 <net_pkt_alloc_buffer>
	if (ret) {
   31a6c:	b120      	cbz	r0, 31a78 <pkt_alloc_with_buffer+0x7e>
		net_pkt_unref(pkt);
   31a6e:	4650      	mov	r0, sl
   31a70:	f7ff ff18 	bl	318a4 <net_pkt_unref>
		return NULL;
   31a74:	f04f 0a00 	mov.w	sl, #0
}
   31a78:	4650      	mov	r0, sl
   31a7a:	b003      	add	sp, #12
   31a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031a80 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   31a80:	2301      	movs	r3, #1
{
   31a82:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   31a84:	9300      	str	r3, [sp, #0]
   31a86:	2300      	movs	r3, #0
   31a88:	460a      	mov	r2, r1
   31a8a:	4619      	mov	r1, r3
   31a8c:	f7ff fe91 	bl	317b2 <net_pkt_cursor_operate>
}
   31a90:	b003      	add	sp, #12
   31a92:	f85d fb04 	ldr.w	pc, [sp], #4

00031a96 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   31a96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   31a98:	2301      	movs	r3, #1
{
   31a9a:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   31a9c:	9300      	str	r3, [sp, #0]
   31a9e:	a903      	add	r1, sp, #12
   31aa0:	2300      	movs	r3, #0
   31aa2:	f7ff fe86 	bl	317b2 <net_pkt_cursor_operate>
}
   31aa6:	b005      	add	sp, #20
   31aa8:	f85d fb04 	ldr.w	pc, [sp], #4

00031aac <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   31aac:	2300      	movs	r3, #0
{
   31aae:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   31ab0:	9300      	str	r3, [sp, #0]
   31ab2:	2301      	movs	r3, #1
   31ab4:	f7ff fe7d 	bl	317b2 <net_pkt_cursor_operate>
}
   31ab8:	b003      	add	sp, #12
   31aba:	f85d fb04 	ldr.w	pc, [sp], #4

00031abe <net_pkt_read_be16>:

int net_pkt_read_be16(struct net_pkt *pkt, u16_t *data)
{
   31abe:	b513      	push	{r0, r1, r4, lr}
	u8_t d16[2];
	int ret;

	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   31ac0:	2202      	movs	r2, #2
{
   31ac2:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   31ac4:	a901      	add	r1, sp, #4
   31ac6:	f7ff fff1 	bl	31aac <net_pkt_read>

	*data = d16[0] << 8 | d16[1];
   31aca:	f89d 2004 	ldrb.w	r2, [sp, #4]
   31ace:	f89d 3005 	ldrb.w	r3, [sp, #5]
   31ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   31ad6:	8023      	strh	r3, [r4, #0]

	return ret;
}
   31ad8:	b002      	add	sp, #8
   31ada:	bd10      	pop	{r4, pc}

00031adc <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   31adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31ade:	4606      	mov	r6, r0
   31ae0:	460f      	mov	r7, r1
   31ae2:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   31ae4:	6973      	ldr	r3, [r6, #20]
   31ae6:	2b00      	cmp	r3, #0
   31ae8:	d041      	beq.n	31b6e <net_pkt_copy+0x92>
   31aea:	697b      	ldr	r3, [r7, #20]
   31aec:	2b00      	cmp	r3, #0
   31aee:	d03e      	beq.n	31b6e <net_pkt_copy+0x92>
   31af0:	b90c      	cbnz	r4, 31af6 <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   31af2:	4620      	mov	r0, r4
   31af4:	e021      	b.n	31b3a <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   31af6:	2101      	movs	r1, #1
   31af8:	4630      	mov	r0, r6
   31afa:	f7ff fe17 	bl	3172c <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   31afe:	2100      	movs	r1, #0
   31b00:	4638      	mov	r0, r7
   31b02:	f7ff fe13 	bl	3172c <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   31b06:	6972      	ldr	r2, [r6, #20]
   31b08:	b1aa      	cbz	r2, 31b36 <net_pkt_copy+0x5a>
   31b0a:	697b      	ldr	r3, [r7, #20]
   31b0c:	b19b      	cbz	r3, 31b36 <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   31b0e:	899d      	ldrh	r5, [r3, #12]
   31b10:	69b9      	ldr	r1, [r7, #24]
   31b12:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   31b14:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   31b16:	1acb      	subs	r3, r1, r3
   31b18:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   31b1a:	89d3      	ldrh	r3, [r2, #14]
   31b1c:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   31b1e:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   31b20:	eba0 0202 	sub.w	r2, r0, r2
   31b24:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   31b28:	d201      	bcs.n	31b2e <net_pkt_copy+0x52>
   31b2a:	429c      	cmp	r4, r3
   31b2c:	d306      	bcc.n	31b3c <net_pkt_copy+0x60>
			if (d_len < s_len) {
   31b2e:	429d      	cmp	r5, r3
   31b30:	bf28      	it	cs
   31b32:	461d      	movcs	r5, r3
		if (!len) {
   31b34:	b91d      	cbnz	r5, 31b3e <net_pkt_copy+0x62>
		return -ENOBUFS;
   31b36:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   31b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31b3c:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31b3e:	462a      	mov	r2, r5
   31b40:	f002 ff6e 	bl	34a20 <memcpy>
	return pkt->overwrite;
   31b44:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   31b48:	07db      	lsls	r3, r3, #31
   31b4a:	d404      	bmi.n	31b56 <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   31b4c:	6970      	ldr	r0, [r6, #20]
   31b4e:	4629      	mov	r1, r5
   31b50:	3008      	adds	r0, #8
   31b52:	f7e7 feff 	bl	19954 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   31b56:	2201      	movs	r2, #1
   31b58:	4629      	mov	r1, r5
   31b5a:	4630      	mov	r0, r6
   31b5c:	f7ff fdf9 	bl	31752 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   31b60:	2200      	movs	r2, #0
   31b62:	4629      	mov	r1, r5
   31b64:	4638      	mov	r0, r7
   31b66:	f7ff fdf4 	bl	31752 <pkt_cursor_update>
		length -= len;
   31b6a:	1b64      	subs	r4, r4, r5
   31b6c:	e7ba      	b.n	31ae4 <net_pkt_copy+0x8>
	if (length) {
   31b6e:	2c00      	cmp	r4, #0
   31b70:	d0bf      	beq.n	31af2 <net_pkt_copy+0x16>
   31b72:	e7e0      	b.n	31b36 <net_pkt_copy+0x5a>

00031b74 <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   31b74:	b170      	cbz	r0, 31b94 <net_pkt_remaining_data+0x20>
   31b76:	6943      	ldr	r3, [r0, #20]
   31b78:	b15b      	cbz	r3, 31b92 <net_pkt_remaining_data+0x1e>
   31b7a:	6980      	ldr	r0, [r0, #24]
   31b7c:	b150      	cbz	r0, 31b94 <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   31b7e:	6899      	ldr	r1, [r3, #8]
   31b80:	899a      	ldrh	r2, [r3, #12]
   31b82:	1a40      	subs	r0, r0, r1
   31b84:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   31b86:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   31b88:	b903      	cbnz	r3, 31b8c <net_pkt_remaining_data+0x18>
   31b8a:	4770      	bx	lr
		data_length += buf->len;
   31b8c:	899a      	ldrh	r2, [r3, #12]
   31b8e:	4410      	add	r0, r2
   31b90:	e7f9      	b.n	31b86 <net_pkt_remaining_data+0x12>
		return 0;
   31b92:	4618      	mov	r0, r3
	}

	return data_length;
}
   31b94:	4770      	bx	lr

00031b96 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   31b96:	6903      	ldr	r3, [r0, #16]
   31b98:	b92b      	cbnz	r3, 31ba6 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   31b9a:	2900      	cmp	r1, #0
}
   31b9c:	bf14      	ite	ne
   31b9e:	f06f 0015 	mvnne.w	r0, #21
   31ba2:	2000      	moveq	r0, #0
   31ba4:	4770      	bx	lr
		if (buf->len < length) {
   31ba6:	899a      	ldrh	r2, [r3, #12]
   31ba8:	428a      	cmp	r2, r1
			buf->len = length;
   31baa:	bf2a      	itet	cs
   31bac:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   31bae:	1a89      	subcc	r1, r1, r2
			length = 0;
   31bb0:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   31bb2:	681b      	ldr	r3, [r3, #0]
   31bb4:	e7f0      	b.n	31b98 <net_pkt_update_length+0x2>

00031bb6 <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   31bb6:	6941      	ldr	r1, [r0, #20]
{
   31bb8:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   31bba:	b179      	cbz	r1, 31bdc <net_pkt_get_current_offset+0x26>
   31bbc:	6983      	ldr	r3, [r0, #24]
   31bbe:	b17b      	cbz	r3, 31be0 <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   31bc0:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   31bc2:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   31bc4:	42a1      	cmp	r1, r4
   31bc6:	d104      	bne.n	31bd2 <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   31bc8:	6888      	ldr	r0, [r1, #8]
   31bca:	1a1b      	subs	r3, r3, r0
   31bcc:	4413      	add	r3, r2
   31bce:	b298      	uxth	r0, r3

	return offset;
}
   31bd0:	bd10      	pop	{r4, pc}
		offset += buf->len;
   31bd2:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   31bd4:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   31bd6:	4402      	add	r2, r0
   31bd8:	b292      	uxth	r2, r2
		buf = buf->frags;
   31bda:	e7f3      	b.n	31bc4 <net_pkt_get_current_offset+0xe>
		return 0;
   31bdc:	4608      	mov	r0, r1
   31bde:	e7f7      	b.n	31bd0 <net_pkt_get_current_offset+0x1a>
   31be0:	4618      	mov	r0, r3
   31be2:	e7f5      	b.n	31bd0 <net_pkt_get_current_offset+0x1a>

00031be4 <net_pkt_clone>:
{
   31be4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31be8:	460c      	mov	r4, r1
   31bea:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   31bec:	f7ff ffe3 	bl	31bb6 <net_pkt_get_current_offset>
   31bf0:	4680      	mov	r8, r0
	return net_buf_frags_len(pkt->frags);
   31bf2:	6928      	ldr	r0, [r5, #16]
   31bf4:	f7ff fd83 	bl	316fe <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   31bf8:	2300      	movs	r3, #0
   31bfa:	9400      	str	r4, [sp, #0]
   31bfc:	4601      	mov	r1, r0
   31bfe:	461a      	mov	r2, r3
   31c00:	6a28      	ldr	r0, [r5, #32]
   31c02:	f7e9 f88b 	bl	1ad1c <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   31c06:	4604      	mov	r4, r0
   31c08:	b198      	cbz	r0, 31c32 <net_pkt_clone+0x4e>
	backup->pos = pkt->cursor.pos;
   31c0a:	e9d5 7605 	ldrd	r7, r6, [r5, #20]
	net_pkt_cursor_init(pkt);
   31c0e:	4628      	mov	r0, r5
   31c10:	f7ff feac 	bl	3196c <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   31c14:	6928      	ldr	r0, [r5, #16]
   31c16:	f7ff fd72 	bl	316fe <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   31c1a:	4629      	mov	r1, r5
   31c1c:	4602      	mov	r2, r0
   31c1e:	4620      	mov	r0, r4
   31c20:	f7ff ff5c 	bl	31adc <net_pkt_copy>
   31c24:	b148      	cbz	r0, 31c3a <net_pkt_clone+0x56>
		net_pkt_unref(clone_pkt);
   31c26:	4620      	mov	r0, r4
		return NULL;
   31c28:	2400      	movs	r4, #0
		net_pkt_unref(clone_pkt);
   31c2a:	f7ff fe3b 	bl	318a4 <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   31c2e:	e9c5 7605 	strd	r7, r6, [r5, #20]
}
   31c32:	4620      	mov	r0, r4
   31c34:	b002      	add	sp, #8
   31c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   31c3a:	6923      	ldr	r3, [r4, #16]
   31c3c:	b15b      	cbz	r3, 31c56 <net_pkt_clone+0x72>
   31c3e:	462a      	mov	r2, r5
   31c40:	f852 3f28 	ldr.w	r3, [r2, #40]!
   31c44:	62a3      	str	r3, [r4, #40]	; 0x28
   31c46:	6853      	ldr	r3, [r2, #4]
   31c48:	462a      	mov	r2, r5
   31c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
   31c4c:	f852 3f30 	ldr.w	r3, [r2, #48]!
   31c50:	6323      	str	r3, [r4, #48]	; 0x30
   31c52:	6853      	ldr	r3, [r2, #4]
   31c54:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
   31c56:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	pkt->family = family;
   31c5a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	return pkt->family;
   31c5e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   31c62:	f363 0243 	bfi	r2, r3, #1, #3
   31c66:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   31c6a:	69eb      	ldr	r3, [r5, #28]
	net_pkt_cursor_init(clone_pkt);
   31c6c:	4620      	mov	r0, r4
	pkt->context = ctx;
   31c6e:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   31c70:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   31c74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return pkt->family;
   31c78:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   31c7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   31c80:	2b01      	cmp	r3, #1
		net_pkt_set_ipv4_ttl(clone_pkt, net_pkt_ipv4_ttl(pkt));
   31c82:	bf01      	itttt	eq
   31c84:	f895 3042 	ldrbeq.w	r3, [r5, #66]	; 0x42
	pkt->ipv4_ttl = ttl;
   31c88:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv4_opts_len(clone_pkt,
   31c8c:	f895 3043 	ldrbeq.w	r3, [r5, #67]	; 0x43
	pkt->ipv4_opts_len = opts_len;
   31c90:	f884 3043 	strbeq.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   31c94:	f7ff fe6a 	bl	3196c <net_pkt_cursor_init>
	if (cursor_offset) {
   31c98:	f1b8 0f00 	cmp.w	r8, #0
   31c9c:	d008      	beq.n	31cb0 <net_pkt_clone+0xcc>
	pkt->overwrite = overwrite;
   31c9e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		net_pkt_skip(clone_pkt, cursor_offset);
   31ca2:	4641      	mov	r1, r8
   31ca4:	f043 0301 	orr.w	r3, r3, #1
   31ca8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   31cac:	f7ff fee8 	bl	31a80 <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   31cb0:	e9c5 7605 	strd	r7, r6, [r5, #20]
	return clone_pkt;
   31cb4:	e7bd      	b.n	31c32 <net_pkt_clone+0x4e>

00031cb6 <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   31cb6:	b538      	push	{r3, r4, r5, lr}
   31cb8:	460d      	mov	r5, r1
	return pkt->overwrite;
   31cba:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
   31cbe:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   31cc0:	43c9      	mvns	r1, r1
   31cc2:	f001 0101 	and.w	r1, r1, #1
   31cc6:	f7ff fd31 	bl	3172c <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   31cca:	6943      	ldr	r3, [r0, #20]
   31ccc:	b17b      	cbz	r3, 31cee <net_pkt_is_contiguous+0x38>
   31cce:	6980      	ldr	r0, [r0, #24]
   31cd0:	b160      	cbz	r0, 31cec <net_pkt_is_contiguous+0x36>
   31cd2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   31cd6:	07d2      	lsls	r2, r2, #31
   31cd8:	bf4c      	ite	mi
   31cda:	899a      	ldrhmi	r2, [r3, #12]
   31cdc:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   31cde:	689b      	ldr	r3, [r3, #8]
   31ce0:	1ac0      	subs	r0, r0, r3
   31ce2:	1a10      	subs	r0, r2, r0
		if (len >= size) {
   31ce4:	42a8      	cmp	r0, r5
   31ce6:	bf34      	ite	cc
   31ce8:	2000      	movcc	r0, #0
   31cea:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   31cec:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   31cee:	4618      	mov	r0, r3
   31cf0:	e7fc      	b.n	31cec <net_pkt_is_contiguous+0x36>

00031cf2 <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   31cf2:	6983      	ldr	r3, [r0, #24]
{
   31cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   31cf6:	4299      	cmp	r1, r3
{
   31cf8:	4604      	mov	r4, r0
   31cfa:	460e      	mov	r6, r1
   31cfc:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   31cfe:	d10a      	bne.n	31d16 <net_pkt_write+0x24>
   31d00:	4611      	mov	r1, r2
   31d02:	f7ff ffd8 	bl	31cb6 <net_pkt_is_contiguous>
   31d06:	b130      	cbz	r0, 31d16 <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
   31d08:	4629      	mov	r1, r5
   31d0a:	4620      	mov	r0, r4
}
   31d0c:	b002      	add	sp, #8
   31d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
   31d12:	f7ff beb5 	b.w	31a80 <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   31d16:	2301      	movs	r3, #1
   31d18:	462a      	mov	r2, r5
   31d1a:	9300      	str	r3, [sp, #0]
   31d1c:	4631      	mov	r1, r6
   31d1e:	4620      	mov	r0, r4
   31d20:	f7ff fd47 	bl	317b2 <net_pkt_cursor_operate>
}
   31d24:	b002      	add	sp, #8
   31d26:	bd70      	pop	{r4, r5, r6, pc}

00031d28 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   31d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31d2c:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   31d2e:	6849      	ldr	r1, [r1, #4]
{
   31d30:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   31d32:	f7ff ffc0 	bl	31cb6 <net_pkt_is_contiguous>
   31d36:	4680      	mov	r8, r0
   31d38:	b118      	cbz	r0, 31d42 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   31d3a:	69a3      	ldr	r3, [r4, #24]
   31d3c:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   31d3e:	6829      	ldr	r1, [r5, #0]
   31d40:	e010      	b.n	31d64 <net_pkt_get_data+0x3c>
   31d42:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		} else if (net_pkt_is_being_overwritten(pkt)) {
   31d46:	07db      	lsls	r3, r3, #31
   31d48:	d5f9      	bpl.n	31d3e <net_pkt_get_data+0x16>
   31d4a:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   31d4c:	b151      	cbz	r1, 31d64 <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   31d4e:	e9d4 7605 	ldrd	r7, r6, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   31d52:	686a      	ldr	r2, [r5, #4]
   31d54:	4620      	mov	r0, r4
   31d56:	f7ff fea9 	bl	31aac <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   31d5a:	e9c4 7605 	strd	r7, r6, [r4, #20]
   31d5e:	2800      	cmp	r0, #0
   31d60:	d0ed      	beq.n	31d3e <net_pkt_get_data+0x16>
				return NULL;
   31d62:	4641      	mov	r1, r8
	}

	return NULL;
}
   31d64:	4608      	mov	r0, r1
   31d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031d6a <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   31d6a:	e9d1 1200 	ldrd	r1, r2, [r1]
   31d6e:	f7ff bfc0 	b.w	31cf2 <net_pkt_write>

00031d72 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   31d72:	4770      	bx	lr

00031d74 <k_work_submit_to_queue>:
{
   31d74:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31d76:	f101 0308 	add.w	r3, r1, #8
   31d7a:	e8d3 2fef 	ldaex	r2, [r3]
   31d7e:	f042 0c01 	orr.w	ip, r2, #1
   31d82:	e8c3 cfee 	stlex	lr, ip, [r3]
   31d86:	f1be 0f00 	cmp.w	lr, #0
   31d8a:	d1f6      	bne.n	31d7a <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   31d8c:	07d3      	lsls	r3, r2, #31
   31d8e:	d403      	bmi.n	31d98 <k_work_submit_to_queue+0x24>
}
   31d90:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   31d94:	f002 bcac 	b.w	346f0 <k_queue_append>
}
   31d98:	f85d fb04 	ldr.w	pc, [sp], #4

00031d9c <icmpv4_create>:
{
   31d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31d9e:	2304      	movs	r3, #4
   31da0:	2400      	movs	r4, #0
{
   31da2:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   31da4:	4669      	mov	r1, sp
{
   31da6:	4605      	mov	r5, r0
   31da8:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31daa:	e9cd 4300 	strd	r4, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   31dae:	f7ff ffbb 	bl	31d28 <net_pkt_get_data>
	if (!icmp_hdr) {
   31db2:	b148      	cbz	r0, 31dc8 <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
   31db4:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   31db6:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   31db8:	7084      	strb	r4, [r0, #2]
   31dba:	70c4      	strb	r4, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   31dbc:	4669      	mov	r1, sp
   31dbe:	4628      	mov	r0, r5
   31dc0:	f7ff ffd3 	bl	31d6a <net_pkt_set_data>
}
   31dc4:	b003      	add	sp, #12
   31dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   31dc8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31dcc:	e7fa      	b.n	31dc4 <icmpv4_create+0x28>

00031dce <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
   31dce:	68cb      	ldr	r3, [r1, #12]
{
   31dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31dd2:	4606      	mov	r6, r0
   31dd4:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified(&ip_hdr->src)) {
   31dd6:	b90b      	cbnz	r3, 31ddc <icmpv4_handle_echo_request+0xe>
	return NET_DROP;
   31dd8:	2002      	movs	r0, #2
   31dda:	e04b      	b.n	31e74 <icmpv4_handle_echo_request+0xa6>
	size_t bytes = 0;
   31ddc:	2200      	movs	r2, #0
	payload_len = net_pkt_get_len(pkt) -
   31dde:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   31de0:	2b00      	cmp	r3, #0
   31de2:	d149      	bne.n	31e78 <icmpv4_handle_echo_request+0xaa>
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   31de4:	f896 1043 	ldrb.w	r1, [r6, #67]	; 0x43
		      net_pkt_ip_hdr_len(pkt) -
   31de8:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   31dec:	440c      	add	r4, r1
   31dee:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
   31df2:	34fc      	adds	r4, #252	; 0xfc
   31df4:	4414      	add	r4, r2
	payload_len = net_pkt_get_len(pkt) -
   31df6:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   31df8:	2c03      	cmp	r4, #3
   31dfa:	dded      	ble.n	31dd8 <icmpv4_handle_echo_request+0xa>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   31dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   31e00:	9300      	str	r3, [sp, #0]
   31e02:	2301      	movs	r3, #1
   31e04:	4421      	add	r1, r4
   31e06:	461a      	mov	r2, r3
   31e08:	6a30      	ldr	r0, [r6, #32]
   31e0a:	f7e8 ff87 	bl	1ad1c <net_pkt_alloc_with_buffer>
	if (!reply) {
   31e0e:	4605      	mov	r5, r0
   31e10:	2800      	cmp	r0, #0
   31e12:	d0e1      	beq.n	31dd8 <icmpv4_handle_echo_request+0xa>
	if (net_ipv4_is_addr_mcast(&ip_hdr->dst)) {
   31e14:	693b      	ldr	r3, [r7, #16]
   31e16:	f107 0110 	add.w	r1, r7, #16
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   31e1a:	ba1b      	rev	r3, r3
   31e1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   31e20:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   31e24:	d103      	bne.n	31e2e <icmpv4_handle_echo_request+0x60>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   31e26:	6a30      	ldr	r0, [r6, #32]
   31e28:	f7e7 ff02 	bl	19c30 <net_if_ipv4_select_src_addr>
   31e2c:	4601      	mov	r1, r0
	if (net_ipv4_create(reply, src, &ip_hdr->src)) {
   31e2e:	f107 020c 	add.w	r2, r7, #12
   31e32:	4628      	mov	r0, r5
   31e34:	f000 f8ce 	bl	31fd4 <net_ipv4_create>
   31e38:	4602      	mov	r2, r0
   31e3a:	bb08      	cbnz	r0, 31e80 <icmpv4_handle_echo_request+0xb2>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   31e3c:	4601      	mov	r1, r0
   31e3e:	4628      	mov	r0, r5
   31e40:	f7ff ffac 	bl	31d9c <icmpv4_create>
   31e44:	b9e0      	cbnz	r0, 31e80 <icmpv4_handle_echo_request+0xb2>
	    net_pkt_copy(reply, pkt, payload_len)) {
   31e46:	4622      	mov	r2, r4
   31e48:	4631      	mov	r1, r6
   31e4a:	4628      	mov	r0, r5
   31e4c:	f7ff fe46 	bl	31adc <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   31e50:	4604      	mov	r4, r0
   31e52:	b9a8      	cbnz	r0, 31e80 <icmpv4_handle_echo_request+0xb2>
	net_pkt_cursor_init(reply);
   31e54:	4628      	mov	r0, r5
   31e56:	f7ff fd89 	bl	3196c <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   31e5a:	2101      	movs	r1, #1
   31e5c:	4628      	mov	r0, r5
   31e5e:	f000 f8ec 	bl	3203a <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
   31e62:	4628      	mov	r0, r5
   31e64:	f7ff f96f 	bl	31146 <net_send_data>
   31e68:	2800      	cmp	r0, #0
   31e6a:	db09      	blt.n	31e80 <icmpv4_handle_echo_request+0xb2>
	net_pkt_unref(pkt);
   31e6c:	4630      	mov	r0, r6
   31e6e:	f7ff fd19 	bl	318a4 <net_pkt_unref>
	return NET_OK;
   31e72:	4620      	mov	r0, r4
}
   31e74:	b003      	add	sp, #12
   31e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   31e78:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
   31e7a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   31e7c:	440a      	add	r2, r1
		buf = buf->frags;
   31e7e:	e7af      	b.n	31de0 <icmpv4_handle_echo_request+0x12>
		net_pkt_unref(reply);
   31e80:	4628      	mov	r0, r5
   31e82:	f7ff fd0f 	bl	318a4 <net_pkt_unref>
   31e86:	e7a7      	b.n	31dd8 <icmpv4_handle_echo_request+0xa>

00031e88 <net_icmpv4_finalize>:
{
   31e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31e8a:	2304      	movs	r3, #4
   31e8c:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   31e8e:	4669      	mov	r1, sp
{
   31e90:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31e92:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   31e96:	f7ff ff47 	bl	31d28 <net_pkt_get_data>
	if (!icmp_hdr) {
   31e9a:	4605      	mov	r5, r0
   31e9c:	b150      	cbz	r0, 31eb4 <net_icmpv4_finalize+0x2c>
   31e9e:	2101      	movs	r1, #1
   31ea0:	4620      	mov	r0, r4
   31ea2:	f7ff fa9b 	bl	313dc <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmpv4_access);
   31ea6:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   31ea8:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
   31eaa:	4620      	mov	r0, r4
   31eac:	f7ff ff5d 	bl	31d6a <net_pkt_set_data>
}
   31eb0:	b003      	add	sp, #12
   31eb2:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   31eb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31eb8:	e7fa      	b.n	31eb0 <net_icmpv4_finalize+0x28>

00031eba <net_icmpv4_send_error>:
{
   31eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31ebe:	2314      	movs	r3, #20
{
   31ec0:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31ec2:	2400      	movs	r4, #0
{
   31ec4:	b087      	sub	sp, #28
   31ec6:	4688      	mov	r8, r1
   31ec8:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31eca:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   31ece:	f7ff fd4d 	bl	3196c <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   31ed2:	a902      	add	r1, sp, #8
   31ed4:	4630      	mov	r0, r6
   31ed6:	f7ff ff27 	bl	31d28 <net_pkt_get_data>
	if (!ip_hdr) {
   31eda:	4605      	mov	r5, r0
   31edc:	b378      	cbz	r0, 31f3e <net_icmpv4_send_error+0x84>
	if (ip_hdr->proto == IPPROTO_ICMP) {
   31ede:	7a43      	ldrb	r3, [r0, #9]
   31ee0:	2b01      	cmp	r3, #1
   31ee2:	d110      	bne.n	31f06 <net_icmpv4_send_error+0x4c>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31ee4:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   31ee6:	a904      	add	r1, sp, #16
   31ee8:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   31eea:	9404      	str	r4, [sp, #16]
   31eec:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   31eee:	f7ff ff1b 	bl	31d28 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
   31ef2:	b110      	cbz	r0, 31efa <net_icmpv4_send_error+0x40>
   31ef4:	7843      	ldrb	r3, [r0, #1]
   31ef6:	2b07      	cmp	r3, #7
   31ef8:	d805      	bhi.n	31f06 <net_icmpv4_send_error+0x4c>
			err = -EINVAL;
   31efa:	f06f 0515 	mvn.w	r5, #21
}
   31efe:	4628      	mov	r0, r5
   31f00:	b007      	add	sp, #28
   31f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ip_hdr->proto == IPPROTO_UDP) {
   31f06:	7a6b      	ldrb	r3, [r5, #9]
   31f08:	2b11      	cmp	r3, #17
   31f0a:	d01b      	beq.n	31f44 <net_icmpv4_send_error+0x8a>
		copy_len = 0;
   31f0c:	2b06      	cmp	r3, #6
   31f0e:	bf0c      	ite	eq
   31f10:	2728      	moveq	r7, #40	; 0x28
   31f12:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   31f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   31f18:	9300      	str	r3, [sp, #0]
   31f1a:	2301      	movs	r3, #1
   31f1c:	1d39      	adds	r1, r7, #4
   31f1e:	461a      	mov	r2, r3
   31f20:	6a30      	ldr	r0, [r6, #32]
   31f22:	f7e8 fefb 	bl	1ad1c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   31f26:	4604      	mov	r4, r0
   31f28:	b3b8      	cbz	r0, 31f9a <net_icmpv4_send_error+0xe0>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   31f2a:	f105 020c 	add.w	r2, r5, #12
   31f2e:	f105 0110 	add.w	r1, r5, #16
   31f32:	f000 f84f 	bl	31fd4 <net_ipv4_create>
   31f36:	b138      	cbz	r0, 31f48 <net_icmpv4_send_error+0x8e>
	net_pkt_unref(pkt);
   31f38:	4620      	mov	r0, r4
   31f3a:	f7ff fcb3 	bl	318a4 <net_pkt_unref>
	int err = -EIO;
   31f3e:	f06f 0504 	mvn.w	r5, #4
   31f42:	e7dc      	b.n	31efe <net_icmpv4_send_error+0x44>
		copy_len = sizeof(struct net_ipv4_hdr) +
   31f44:	271c      	movs	r7, #28
   31f46:	e7e5      	b.n	31f14 <net_icmpv4_send_error+0x5a>
	    icmpv4_create(pkt, type, code) ||
   31f48:	4641      	mov	r1, r8
   31f4a:	464a      	mov	r2, r9
   31f4c:	4620      	mov	r0, r4
   31f4e:	f7ff ff25 	bl	31d9c <icmpv4_create>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   31f52:	4601      	mov	r1, r0
   31f54:	2800      	cmp	r0, #0
   31f56:	d1ef      	bne.n	31f38 <net_icmpv4_send_error+0x7e>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   31f58:	2204      	movs	r2, #4
   31f5a:	4620      	mov	r0, r4
   31f5c:	f7ff fd9b 	bl	31a96 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
   31f60:	2800      	cmp	r0, #0
   31f62:	d1e9      	bne.n	31f38 <net_icmpv4_send_error+0x7e>
	    net_pkt_copy(pkt, orig, copy_len)) {
   31f64:	463a      	mov	r2, r7
   31f66:	4631      	mov	r1, r6
   31f68:	4620      	mov	r0, r4
   31f6a:	f7ff fdb7 	bl	31adc <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   31f6e:	4605      	mov	r5, r0
   31f70:	2800      	cmp	r0, #0
   31f72:	d1e1      	bne.n	31f38 <net_icmpv4_send_error+0x7e>
	net_pkt_cursor_init(pkt);
   31f74:	4620      	mov	r0, r4
   31f76:	f7ff fcf9 	bl	3196c <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   31f7a:	2101      	movs	r1, #1
   31f7c:	4620      	mov	r0, r4
   31f7e:	f000 f85c 	bl	3203a <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   31f82:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	if (net_send_data(pkt) >= 0) {
   31f84:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   31f86:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   31f88:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   31f8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (net_send_data(pkt) >= 0) {
   31f90:	f7ff f8d9 	bl	31146 <net_send_data>
   31f94:	2800      	cmp	r0, #0
   31f96:	dab2      	bge.n	31efe <net_icmpv4_send_error+0x44>
   31f98:	e7ce      	b.n	31f38 <net_icmpv4_send_error+0x7e>
		err =  -ENOMEM;
   31f9a:	f06f 050b 	mvn.w	r5, #11
   31f9e:	e7ae      	b.n	31efe <net_icmpv4_send_error+0x44>

00031fa0 <net_ipv4_is_addr_mcast>:
   31fa0:	6800      	ldr	r0, [r0, #0]
   31fa2:	ba00      	rev	r0, r0
   31fa4:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   31fa8:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   31fac:	4258      	negs	r0, r3
   31fae:	4158      	adcs	r0, r3
   31fb0:	4770      	bx	lr

00031fb2 <net_ipv4_is_addr_bcast>:
{
   31fb2:	b538      	push	{r3, r4, r5, lr}
   31fb4:	460c      	mov	r4, r1
   31fb6:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   31fb8:	f7e7 ffd4 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   31fbc:	6822      	ldr	r2, [r4, #0]
   31fbe:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   31fc0:	429a      	cmp	r2, r3
   31fc2:	d005      	beq.n	31fd0 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   31fc4:	4621      	mov	r1, r4
   31fc6:	4628      	mov	r0, r5
}
   31fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
   31fcc:	f7e7 bdfe 	b.w	19bcc <net_if_ipv4_is_addr_bcast>
}
   31fd0:	2001      	movs	r0, #1
   31fd2:	bd38      	pop	{r3, r4, r5, pc}

00031fd4 <net_ipv4_create>:
#define NET_BUF_TIMEOUT K_MSEC(50)

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
   31fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31fd6:	2314      	movs	r3, #20
   31fd8:	2400      	movs	r4, #0
{
   31fda:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   31fdc:	4669      	mov	r1, sp
{
   31fde:	4605      	mov	r5, r0
   31fe0:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   31fe2:	e9cd 4300 	strd	r4, r3, [sp]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   31fe6:	f7ff fe9f 	bl	31d28 <net_pkt_get_data>
	if (!ipv4_hdr) {
   31fea:	b318      	cbz	r0, 32034 <net_ipv4_create+0x60>
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
   31fec:	2345      	movs	r3, #69	; 0x45
	ipv4_hdr->tos       = 0x00;
   31fee:	7044      	strb	r4, [r0, #1]
	ipv4_hdr->vhl       = 0x45;
   31ff0:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = 0U;
   31ff2:	7104      	strb	r4, [r0, #4]
	ipv4_hdr->id[1]     = 0U;
   31ff4:	7144      	strb	r4, [r0, #5]
	ipv4_hdr->offset[0] = 0U;
   31ff6:	7184      	strb	r4, [r0, #6]
	ipv4_hdr->offset[1] = 0U;
   31ff8:	71c4      	strb	r4, [r0, #7]

	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   31ffa:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	ipv4_hdr->len       = 0U;
   31ffe:	7084      	strb	r4, [r0, #2]
   32000:	70c4      	strb	r4, [r0, #3]
	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   32002:	7203      	strb	r3, [r0, #8]
	if (ipv4_hdr->ttl == 0U) {
   32004:	b92b      	cbnz	r3, 32012 <net_ipv4_create+0x3e>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   32006:	6a2a      	ldr	r2, [r5, #32]
   32008:	6851      	ldr	r1, [r2, #4]
 * @return Time-to-live
 */
static inline u8_t net_if_ipv4_get_ttl(struct net_if *iface)
{
#if defined(CONFIG_NET_NATIVE_IPV4)
	if (!iface->config.ip.ipv4) {
   3200a:	b109      	cbz	r1, 32010 <net_ipv4_create+0x3c>
		return 0;
	}

	return iface->config.ip.ipv4->ttl;
   3200c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   32010:	7203      	strb	r3, [r0, #8]
	}

	ipv4_hdr->proto     = 0U;
   32012:	2300      	movs	r3, #0
   32014:	7243      	strb	r3, [r0, #9]
	ipv4_hdr->chksum    = 0U;
   32016:	7283      	strb	r3, [r0, #10]
   32018:	72c3      	strb	r3, [r0, #11]

	net_ipaddr_copy(&ipv4_hdr->dst, dst);
   3201a:	683b      	ldr	r3, [r7, #0]
   3201c:	6103      	str	r3, [r0, #16]
	net_ipaddr_copy(&ipv4_hdr->src, src);
   3201e:	6833      	ldr	r3, [r6, #0]
   32020:	60c3      	str	r3, [r0, #12]
	pkt->ip_hdr_len = len;
   32022:	2314      	movs	r3, #20

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
   32024:	4669      	mov	r1, sp
   32026:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   3202a:	4628      	mov	r0, r5
   3202c:	f7ff fe9d 	bl	31d6a <net_pkt_set_data>
}
   32030:	b003      	add	sp, #12
   32032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   32034:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32038:	e7fa      	b.n	32030 <net_ipv4_create+0x5c>

0003203a <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   3203a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   3203c:	2314      	movs	r3, #20
   3203e:	2500      	movs	r5, #0
   32040:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   32044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
   32048:	460e      	mov	r6, r1
   3204a:	f043 0301 	orr.w	r3, r3, #1
   3204e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   32052:	4669      	mov	r1, sp
{
   32054:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   32056:	f7ff fe67 	bl	31d28 <net_pkt_get_data>
	if (!ipv4_hdr) {
   3205a:	4607      	mov	r7, r0
   3205c:	b340      	cbz	r0, 320b0 <net_ipv4_finalize+0x76>
	size_t bytes = 0;
   3205e:	462b      	mov	r3, r5
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   32060:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   32062:	b9aa      	cbnz	r2, 32090 <net_ipv4_finalize+0x56>
   32064:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
   32066:	727e      	strb	r6, [r7, #9]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   32068:	807b      	strh	r3, [r7, #2]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   3206a:	6a20      	ldr	r0, [r4, #32]
   3206c:	f7ff f996 	bl	3139c <net_if_need_calc_tx_checksum>
   32070:	b118      	cbz	r0, 3207a <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   32072:	4620      	mov	r0, r4
   32074:	f7ff fa37 	bl	314e6 <net_calc_chksum_ipv4>
   32078:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
   3207a:	4669      	mov	r1, sp
   3207c:	4620      	mov	r0, r4
   3207e:	f7ff fe74 	bl	31d6a <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   32082:	2e11      	cmp	r6, #17
   32084:	d108      	bne.n	32098 <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
   32086:	4620      	mov	r0, r4
   32088:	f000 fdd4 	bl	32c34 <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
   3208c:	b003      	add	sp, #12
   3208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   32090:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   32092:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   32094:	440b      	add	r3, r1
		buf = buf->frags;
   32096:	e7e4      	b.n	32062 <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   32098:	2e06      	cmp	r6, #6
   3209a:	d103      	bne.n	320a4 <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
   3209c:	4620      	mov	r0, r4
   3209e:	f000 fcb5 	bl	32a0c <net_tcp_finalize>
   320a2:	e7f3      	b.n	3208c <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
   320a4:	2e01      	cmp	r6, #1
   320a6:	d106      	bne.n	320b6 <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
   320a8:	4620      	mov	r0, r4
   320aa:	f7ff feed 	bl	31e88 <net_icmpv4_finalize>
   320ae:	e7ed      	b.n	3208c <net_ipv4_finalize+0x52>
		return -ENOBUFS;
   320b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   320b4:	e7ea      	b.n	3208c <net_ipv4_finalize+0x52>
	return 0;
   320b6:	2000      	movs	r0, #0
   320b8:	e7e8      	b.n	3208c <net_ipv4_finalize+0x52>

000320ba <net_ipv4_input>:
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   320ba:	2314      	movs	r3, #20
{
   320bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   320be:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   320c0:	eb0d 0203 	add.w	r2, sp, r3
   320c4:	9207      	str	r2, [sp, #28]
   320c6:	2208      	movs	r2, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   320c8:	2700      	movs	r7, #0
{
   320ca:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   320cc:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   320ce:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   320d0:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   320d4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
   320d8:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   320da:	b943      	cbnz	r3, 320ee <net_ipv4_input+0x34>
	u8_t opts_len;
	int pkt_len;

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   320dc:	a903      	add	r1, sp, #12
   320de:	4620      	mov	r0, r4
   320e0:	f7ff fe22 	bl	31d28 <net_pkt_get_data>
	if (!hdr) {
   320e4:	4605      	mov	r5, r0
   320e6:	b930      	cbnz	r0, 320f6 <net_ipv4_input+0x3c>
	if (verdict != NET_DROP) {
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   320e8:	2002      	movs	r0, #2
}
   320ea:	b011      	add	sp, #68	; 0x44
   320ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   320ee:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   320f0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   320f2:	4417      	add	r7, r2
		buf = buf->frags;
   320f4:	e7f1      	b.n	320da <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   320f6:	7806      	ldrb	r6, [r0, #0]
   320f8:	f006 060f 	and.w	r6, r6, #15
   320fc:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   320fe:	2e13      	cmp	r6, #19
   32100:	d9f2      	bls.n	320e8 <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
   32102:	2314      	movs	r3, #20
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   32104:	3e14      	subs	r6, #20
   32106:	b2f6      	uxtb	r6, r6
   32108:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ipv4_opts_len = opts_len;
   3210c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	pkt_len = ntohs(hdr->len);
   32110:	8843      	ldrh	r3, [r0, #2]
   32112:	0219      	lsls	r1, r3, #8
   32114:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   32118:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
   3211a:	428f      	cmp	r7, r1
   3211c:	dbe4      	blt.n	320e8 <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
   3211e:	dd02      	ble.n	32126 <net_ipv4_input+0x6c>
		net_pkt_update_length(pkt, pkt_len);
   32120:	4620      	mov	r0, r4
   32122:	f7ff fd38 	bl	31b96 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast(&hdr->src)) {
   32126:	f105 010c 	add.w	r1, r5, #12
   3212a:	4608      	mov	r0, r1
   3212c:	f7ff ff38 	bl	31fa0 <net_ipv4_is_addr_mcast>
   32130:	2800      	cmp	r0, #0
   32132:	d1d9      	bne.n	320e8 <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->src)) {
   32134:	6a20      	ldr	r0, [r4, #32]
   32136:	f7ff ff3c 	bl	31fb2 <net_ipv4_is_addr_bcast>
   3213a:	2800      	cmp	r0, #0
   3213c:	d1d4      	bne.n	320e8 <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   3213e:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified(&hdr->src)) {
   32140:	2b00      	cmp	r3, #0
   32142:	d0d1      	beq.n	320e8 <net_ipv4_input+0x2e>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   32144:	6a20      	ldr	r0, [r4, #32]
   32146:	f7ff f92b 	bl	313a0 <net_if_need_calc_rx_checksum>
   3214a:	2800      	cmp	r0, #0
   3214c:	d145      	bne.n	321da <net_ipv4_input+0x120>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   3214e:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   32152:	2100      	movs	r1, #0
   32154:	4638      	mov	r0, r7
   32156:	f7e7 fdb9 	bl	19ccc <net_if_ipv4_addr_lookup>
   3215a:	2800      	cmp	r0, #0
   3215c:	bf14      	ite	ne
   3215e:	2301      	movne	r3, #1
   32160:	2300      	moveq	r3, #0
	if (!ret) {
   32162:	d103      	bne.n	3216c <net_ipv4_input+0xb2>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   32164:	4639      	mov	r1, r7
   32166:	f7ff ff24 	bl	31fb2 <net_ipv4_is_addr_bcast>
   3216a:	4603      	mov	r3, r0
   3216c:	2b00      	cmp	r3, #0
   3216e:	d03a      	beq.n	321e6 <net_ipv4_input+0x12c>
				   net_ipv4_unspecified_address()))))) ||
   32170:	7a6b      	ldrb	r3, [r5, #9]
   32172:	2b06      	cmp	r3, #6
   32174:	d105      	bne.n	32182 <net_ipv4_input+0xc8>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->dst))) {
   32176:	4639      	mov	r1, r7
   32178:	6a20      	ldr	r0, [r4, #32]
   3217a:	f7ff ff1a 	bl	31fb2 <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
   3217e:	2800      	cmp	r0, #0
   32180:	d1b2      	bne.n	320e8 <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   32182:	9904      	ldr	r1, [sp, #16]
   32184:	4620      	mov	r0, r4
   32186:	f7ff fc7b 	bl	31a80 <net_pkt_skip>
	if (opts_len) {
   3218a:	b12e      	cbz	r6, 32198 <net_ipv4_input+0xde>
		if (net_pkt_skip(pkt, opts_len)) {
   3218c:	4631      	mov	r1, r6
   3218e:	4620      	mov	r0, r4
   32190:	f7ff fc76 	bl	31a80 <net_pkt_skip>
   32194:	2800      	cmp	r0, #0
   32196:	d1a7      	bne.n	320e8 <net_ipv4_input+0x2e>
	pkt->family = family;
   32198:	2201      	movs	r2, #1
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   3219a:	7a2b      	ldrb	r3, [r5, #8]
	pkt->ipv4_ttl = ttl;
   3219c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	pkt->family = family;
   321a0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   321a4:	f362 0343 	bfi	r3, r2, #1, #3
   321a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	switch (hdr->proto) {
   321ac:	7a6b      	ldrb	r3, [r5, #9]
   321ae:	2b06      	cmp	r3, #6
   321b0:	d029      	beq.n	32206 <net_ipv4_input+0x14c>
   321b2:	2b11      	cmp	r3, #17
   321b4:	d031      	beq.n	3221a <net_ipv4_input+0x160>
   321b6:	4293      	cmp	r3, r2
   321b8:	d196      	bne.n	320e8 <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
   321ba:	4629      	mov	r1, r5
   321bc:	4620      	mov	r0, r4
   321be:	f7e8 fe15 	bl	1adec <net_icmpv4_input>
	if (verdict == NET_DROP) {
   321c2:	2802      	cmp	r0, #2
   321c4:	d090      	beq.n	320e8 <net_ipv4_input+0x2e>
	} else if (hdr->proto == IPPROTO_ICMP) {
   321c6:	7a6a      	ldrb	r2, [r5, #9]
   321c8:	2a01      	cmp	r2, #1
   321ca:	d08e      	beq.n	320ea <net_ipv4_input+0x30>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   321cc:	ab01      	add	r3, sp, #4
   321ce:	a902      	add	r1, sp, #8
   321d0:	4620      	mov	r0, r4
	ip.ipv4 = hdr;
   321d2:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   321d4:	f7e8 ff52 	bl	1b07c <net_conn_input>
	if (verdict != NET_DROP) {
   321d8:	e787      	b.n	320ea <net_ipv4_input+0x30>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   321da:	4620      	mov	r0, r4
   321dc:	f7ff f983 	bl	314e6 <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   321e0:	2800      	cmp	r0, #0
   321e2:	d0b4      	beq.n	3214e <net_ipv4_input+0x94>
   321e4:	e780      	b.n	320e8 <net_ipv4_input+0x2e>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   321e6:	4638      	mov	r0, r7
   321e8:	f7ff feda 	bl	31fa0 <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   321ec:	2800      	cmp	r0, #0
   321ee:	d1bf      	bne.n	32170 <net_ipv4_input+0xb6>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   321f0:	7a6b      	ldrb	r3, [r5, #9]
   321f2:	2b11      	cmp	r3, #17
   321f4:	f47f af78 	bne.w	320e8 <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp(&hdr->dst, net_ipv4_broadcast_address()) ||
   321f8:	f7e7 feb4 	bl	19f64 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   321fc:	692b      	ldr	r3, [r5, #16]
   321fe:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
   32200:	429a      	cmp	r2, r3
   32202:	d0b5      	beq.n	32170 <net_ipv4_input+0xb6>
   32204:	e770      	b.n	320e8 <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   32206:	a909      	add	r1, sp, #36	; 0x24
   32208:	4620      	mov	r0, r4
   3220a:	f000 fcd8 	bl	32bbe <net_tcp_input>
   3220e:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
   32210:	2800      	cmp	r0, #0
   32212:	f43f af69 	beq.w	320e8 <net_ipv4_input+0x2e>
			verdict = NET_OK;
   32216:	2000      	movs	r0, #0
   32218:	e7d5      	b.n	321c6 <net_ipv4_input+0x10c>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   3221a:	a907      	add	r1, sp, #28
   3221c:	4620      	mov	r0, r4
   3221e:	f000 fd3c 	bl	32c9a <net_udp_input>
   32222:	e7f4      	b.n	3220e <net_ipv4_input+0x154>

00032224 <sys_get_be32>:
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_be16(const u8_t src[2])
{
	return ((u16_t)src[0] << 8) | src[1];
   32224:	7803      	ldrb	r3, [r0, #0]
   32226:	7842      	ldrb	r2, [r0, #1]
   32228:	7881      	ldrb	r1, [r0, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline u32_t sys_get_be32(const u8_t src[4])
{
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   3222a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   3222e:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   32230:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   32234:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   32238:	4770      	bx	lr

0003223a <handle_fin_timeout>:
	net_context_unref(tcp->context);
   3223a:	f850 0c28 	ldr.w	r0, [r0, #-40]
   3223e:	f7ff b99a 	b.w	31576 <net_context_unref>

00032242 <net_tcp_is_used>:
	return tcp->flags & NET_TCP_IN_USE;
   32242:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	; 0xbc
}
   32246:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3224a:	4770      	bx	lr

0003224c <net_tcp_queue_pkt.isra.22>:
	parent->next = child;
   3224c:	2200      	movs	r2, #0
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   3224e:	b538      	push	{r3, r4, r5, lr}
   32250:	4605      	mov	r5, r0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   32252:	6800      	ldr	r0, [r0, #0]
   32254:	638a      	str	r2, [r1, #56]	; 0x38
Z_GENLIST_APPEND(slist, snode)
   32256:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   3225a:	460c      	mov	r4, r1
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   3225c:	f101 0338 	add.w	r3, r1, #56	; 0x38
   32260:	b9da      	cbnz	r2, 3229a <net_tcp_queue_pkt.isra.22+0x4e>
	list->head = node;
   32262:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   32266:	3054      	adds	r0, #84	; 0x54
   32268:	f7f9 f806 	bl	2b278 <z_timeout_remaining>
   3226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   32270:	fba0 0103 	umull	r0, r1, r0, r3
   32274:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   32276:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   3227a:	d109      	bne.n	32290 <net_tcp_queue_pkt.isra.22+0x44>
		k_delayed_work_submit(&context->tcp->retry_timer,
   3227c:	21c8      	movs	r1, #200	; 0xc8
   3227e:	6828      	ldr	r0, [r5, #0]
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   32280:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
		k_delayed_work_submit(&context->tcp->retry_timer,
   32284:	3048      	adds	r0, #72	; 0x48
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   32286:	f003 031f 	and.w	r3, r3, #31
		k_delayed_work_submit(&context->tcp->retry_timer,
   3228a:	4099      	lsls	r1, r3
   3228c:	f7e8 fffe 	bl	1b28c <k_delayed_work_submit>
	do_ref_if_needed(context->tcp, pkt);
   32290:	4620      	mov	r0, r4
   32292:	f7ff faee 	bl	31872 <net_pkt_ref>
}
   32296:	2000      	movs	r0, #0
   32298:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   3229a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3229c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   322a0:	e7e1      	b.n	32266 <net_tcp_queue_pkt.isra.22+0x1a>

000322a2 <net_tcp_get_recv_mss>:
{
   322a2:	b510      	push	{r4, lr}
   322a4:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(tcp->context);
   322a6:	6800      	ldr	r0, [r0, #0]
   322a8:	f7e8 fff8 	bl	1b29c <net_context_get_family>
	if (family == AF_INET) {
   322ac:	2801      	cmp	r0, #1
   322ae:	d001      	beq.n	322b4 <net_tcp_get_recv_mss+0x12>
	return 0;
   322b0:	2000      	movs	r0, #0
}
   322b2:	bd10      	pop	{r4, pc}
		struct net_if *iface = net_context_get_iface(tcp->context);
   322b4:	6820      	ldr	r0, [r4, #0]
   322b6:	f7e9 f855 	bl	1b364 <net_context_get_iface>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
   322ba:	2800      	cmp	r0, #0
   322bc:	d0f8      	beq.n	322b0 <net_tcp_get_recv_mss+0xe>
	return iface->if_dev->mtu;
   322be:	6803      	ldr	r3, [r0, #0]
   322c0:	8b18      	ldrh	r0, [r3, #24]
   322c2:	2827      	cmp	r0, #39	; 0x27
   322c4:	d9f4      	bls.n	322b0 <net_tcp_get_recv_mss+0xe>
			return net_if_get_mtu(iface) - NET_IPV4TCPH_LEN;
   322c6:	3828      	subs	r0, #40	; 0x28
   322c8:	b280      	uxth	r0, r0
   322ca:	e7f2      	b.n	322b2 <net_tcp_get_recv_mss+0x10>

000322cc <net_tcp_set_syn_opt>:
	*optionlen = 0U;
   322cc:	2300      	movs	r3, #0
{
   322ce:	b570      	push	{r4, r5, r6, lr}
	*optionlen = 0U;
   322d0:	7013      	strb	r3, [r2, #0]
{
   322d2:	4614      	mov	r4, r2
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   322d4:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
{
   322d8:	4605      	mov	r5, r0
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   322da:	0552      	lsls	r2, r2, #21
{
   322dc:	460e      	mov	r6, r1
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   322de:	d418      	bmi.n	32312 <net_tcp_set_syn_opt+0x46>
		recv_mss = net_tcp_get_recv_mss(tcp);
   322e0:	f7ff ffdf 	bl	322a2 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   322e4:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   322e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   322ec:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   322f0:	f040 7301 	orr.w	r3, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   322f4:	0218      	lsls	r0, r3, #8
   322f6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   322fa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   322fe:	7822      	ldrb	r2, [r4, #0]
   32300:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   32304:	f040 0002 	orr.w	r0, r0, #2
   32308:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   3230a:	7823      	ldrb	r3, [r4, #0]
   3230c:	3304      	adds	r3, #4
   3230e:	7023      	strb	r3, [r4, #0]
}
   32310:	bd70      	pop	{r4, r5, r6, pc}
		recv_mss = 0U;
   32312:	4618      	mov	r0, r3
   32314:	e7ec      	b.n	322f0 <net_tcp_set_syn_opt+0x24>

00032316 <net_tcp_prepare_reset>:
{
   32316:	b5f0      	push	{r4, r5, r6, r7, lr}
   32318:	4605      	mov	r5, r0
   3231a:	b089      	sub	sp, #36	; 0x24
   3231c:	460c      	mov	r4, r1
   3231e:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   32320:	2100      	movs	r1, #0
   32322:	2218      	movs	r2, #24
   32324:	a802      	add	r0, sp, #8
{
   32326:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   32328:	f002 fbb4 	bl	34a94 <memset>
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   3232c:	6828      	ldr	r0, [r5, #0]
   3232e:	f7e8 ffd5 	bl	1b2dc <net_context_get_state>
   32332:	b300      	cbz	r0, 32376 <net_tcp_prepare_reset+0x60>
	return (enum net_tcp_state)tcp->state;
   32334:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   32338:	f3c2 3243 	ubfx	r2, r2, #13, #4
   3233c:	2a02      	cmp	r2, #2
   3233e:	d02c      	beq.n	3239a <net_tcp_prepare_reset+0x84>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   32340:	2a09      	cmp	r2, #9
   32342:	d02a      	beq.n	3239a <net_tcp_prepare_reset+0x84>
		segment.ack = tcp->send_ack;
   32344:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   32348:	6828      	ldr	r0, [r5, #0]
   3234a:	9303      	str	r3, [sp, #12]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   3234c:	2314      	movs	r3, #20
   3234e:	f88d 3012 	strb.w	r3, [sp, #18]
		segment.seq = tcp->send_seq;
   32352:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   32356:	9302      	str	r3, [sp, #8]
		if (!local) {
   32358:	b97c      	cbnz	r4, 3237a <net_tcp_prepare_reset+0x64>
			segment.src_addr = &tcp->context->local;
   3235a:	f100 031c 	add.w	r3, r0, #28
   3235e:	9306      	str	r3, [sp, #24]
		segment.wnd = 0U;
   32360:	2200      	movs	r2, #0
		status = prepare_segment(tcp, &segment, NULL, pkt);
   32362:	4633      	mov	r3, r6
   32364:	a902      	add	r1, sp, #8
		segment.dst_addr = remote;
   32366:	9707      	str	r7, [sp, #28]
		segment.wnd = 0U;
   32368:	f8ad 2010 	strh.w	r2, [sp, #16]
		segment.options = NULL;
   3236c:	9205      	str	r2, [sp, #20]
		segment.optlen = 0U;
   3236e:	f88d 2013 	strb.w	r2, [sp, #19]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   32372:	f7e9 f85f 	bl	1b434 <prepare_segment.isra.21>
}
   32376:	b009      	add	sp, #36	; 0x24
   32378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(addr, 0, sizeof(struct sockaddr_ptr));
   3237a:	2300      	movs	r3, #0
   3237c:	e9cd 3300 	strd	r3, r3, [sp]
	if (local->sa_family == AF_INET) {
   32380:	8823      	ldrh	r3, [r4, #0]
   32382:	2b01      	cmp	r3, #1
   32384:	d106      	bne.n	32394 <net_tcp_prepare_reset+0x7e>
		net_sin_ptr(addr)->sin_family = AF_INET;
   32386:	f8ad 3000 	strh.w	r3, [sp]
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   3238a:	8863      	ldrh	r3, [r4, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   3238c:	3404      	adds	r4, #4
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   3238e:	f8ad 3002 	strh.w	r3, [sp, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   32392:	9401      	str	r4, [sp, #4]
			segment.src_addr = &src_addr_ptr;
   32394:	f8cd d018 	str.w	sp, [sp, #24]
   32398:	e7e2      	b.n	32360 <net_tcp_prepare_reset+0x4a>
	int status = 0;
   3239a:	2000      	movs	r0, #0
	return status;
   3239c:	e7eb      	b.n	32376 <net_tcp_prepare_reset+0x60>

0003239e <send_reset.isra.29>:
	struct net_pkt *pkt = NULL;
   3239e:	2300      	movs	r3, #0
static int send_reset(struct net_context *context,
   323a0:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   323a2:	9301      	str	r3, [sp, #4]
	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   323a4:	ab01      	add	r3, sp, #4
   323a6:	f7ff ffb6 	bl	32316 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   323aa:	4604      	mov	r4, r0
   323ac:	b978      	cbnz	r0, 323ce <send_reset.isra.29+0x30>
   323ae:	9801      	ldr	r0, [sp, #4]
   323b0:	b168      	cbz	r0, 323ce <send_reset.isra.29+0x30>
	ret = net_send_data(pkt);
   323b2:	f7fe fec8 	bl	31146 <net_send_data>
	if (ret < 0) {
   323b6:	1e04      	subs	r4, r0, #0
   323b8:	da02      	bge.n	323c0 <send_reset.isra.29+0x22>
		net_pkt_unref(pkt);
   323ba:	9801      	ldr	r0, [sp, #4]
   323bc:	f7ff fa72 	bl	318a4 <net_pkt_unref>
	pkt->sent_or_eof = sent;
   323c0:	9a01      	ldr	r2, [sp, #4]
   323c2:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   323c6:	f043 0302 	orr.w	r3, r3, #2
   323ca:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   323ce:	4620      	mov	r0, r4
   323d0:	b002      	add	sp, #8
   323d2:	bd10      	pop	{r4, pc}

000323d4 <backlog_ack_timeout>:
{
   323d4:	b510      	push	{r4, lr}
	send_reset(backlog->tcp->context, NULL, &backlog->remote);
   323d6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   323da:	f1a0 040c 	sub.w	r4, r0, #12
   323de:	681b      	ldr	r3, [r3, #0]
   323e0:	f100 0220 	add.w	r2, r0, #32
   323e4:	2100      	movs	r1, #0
   323e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   323e8:	f7ff ffd9 	bl	3239e <send_reset.isra.29>
__ssp_bos_icheck3(memset, void *, int)
   323ec:	4620      	mov	r0, r4
}
   323ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   323f2:	2238      	movs	r2, #56	; 0x38
   323f4:	2100      	movs	r1, #0
   323f6:	f002 bb4d 	b.w	34a94 <memset>

000323fa <net_tcp_send_pkt>:
{
   323fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   323fc:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   323fe:	ab03      	add	r3, sp, #12
   32400:	9301      	str	r3, [sp, #4]
   32402:	2314      	movs	r3, #20
	struct net_context *ctx = net_pkt_context(pkt);
   32404:	69c7      	ldr	r7, [r0, #28]
{
   32406:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   32408:	9302      	str	r3, [sp, #8]
	if (!ctx || !ctx->tcp) {
   3240a:	2f00      	cmp	r7, #0
   3240c:	d075      	beq.n	324fa <net_tcp_send_pkt+0x100>
   3240e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32410:	2b00      	cmp	r3, #0
   32412:	d072      	beq.n	324fa <net_tcp_send_pkt+0x100>
	net_pkt_cursor_init(pkt);
   32414:	f7ff faaa 	bl	3196c <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   32418:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   3241c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   32420:	f043 0301 	orr.w	r3, r3, #1
   32424:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			 net_pkt_ip_opts_len(pkt))) {
   32428:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   3242c:	4620      	mov	r0, r4
   3242e:	4419      	add	r1, r3
   32430:	f7ff fb26 	bl	31a80 <net_pkt_skip>
   32434:	4606      	mov	r6, r0
   32436:	b118      	cbz	r0, 32440 <net_tcp_send_pkt+0x46>
		return -EMSGSIZE;
   32438:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   3243c:	b009      	add	sp, #36	; 0x24
   3243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   32440:	a901      	add	r1, sp, #4
   32442:	4620      	mov	r0, r4
   32444:	f7ff fc70 	bl	31d28 <net_pkt_get_data>
	if (!tcp_hdr) {
   32448:	4605      	mov	r5, r0
   3244a:	2800      	cmp	r0, #0
   3244c:	d0f4      	beq.n	32438 <net_tcp_send_pkt+0x3e>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   3244e:	3008      	adds	r0, #8
   32450:	f7ff fee8 	bl	32224 <sys_get_be32>
   32454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   3245a:	4298      	cmp	r0, r3
   3245c:	d00a      	beq.n	32474 <net_tcp_send_pkt+0x7a>
		tcp_hdr->chksum = 0U;
   3245e:	742e      	strb	r6, [r5, #16]
   32460:	746e      	strb	r6, [r5, #17]
		calc_chksum = true;
   32462:	2601      	movs	r6, #1
	sys_put_be16(val >> 16, dst);
   32464:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   32466:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   32468:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   3246a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   3246e:	7229      	strb	r1, [r5, #8]
   32470:	72aa      	strb	r2, [r5, #10]
	dst[1] = val;
   32472:	72eb      	strb	r3, [r5, #11]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   32474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32476:	e9d3 3225 	ldrd	r3, r2, [r3, #148]	; 0x94
   3247a:	429a      	cmp	r2, r3
   3247c:	d009      	beq.n	32492 <net_tcp_send_pkt+0x98>
		(tcp_hdr->flags & NET_TCP_ACK) == 0U) {
   3247e:	7b6b      	ldrb	r3, [r5, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   32480:	f013 0210 	ands.w	r2, r3, #16
   32484:	d105      	bne.n	32492 <net_tcp_send_pkt+0x98>
		calc_chksum = true;
   32486:	2601      	movs	r6, #1
		tcp_hdr->flags |= NET_TCP_ACK;
   32488:	f043 0310 	orr.w	r3, r3, #16
   3248c:	736b      	strb	r3, [r5, #13]
		tcp_hdr->chksum = 0U;
   3248e:	742a      	strb	r2, [r5, #16]
   32490:	746a      	strb	r2, [r5, #17]
	net_pkt_set_data(pkt, &tcp_access);
   32492:	a901      	add	r1, sp, #4
   32494:	4620      	mov	r0, r4
   32496:	f7ff fc68 	bl	31d6a <net_pkt_set_data>
	if (calc_chksum) {
   3249a:	b19e      	cbz	r6, 324c4 <net_tcp_send_pkt+0xca>
		net_pkt_cursor_init(pkt);
   3249c:	4620      	mov	r0, r4
   3249e:	f7ff fa65 	bl	3196c <net_pkt_cursor_init>
			     net_pkt_ip_opts_len(pkt));
   324a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   324a6:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   324aa:	4620      	mov	r0, r4
   324ac:	4419      	add	r1, r3
   324ae:	f7ff fae7 	bl	31a80 <net_pkt_skip>
	return net_calc_chksum(pkt, IPPROTO_UDP);
}

static inline u16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   324b2:	2106      	movs	r1, #6
   324b4:	4620      	mov	r0, r4
   324b6:	f7fe ff91 	bl	313dc <net_calc_chksum>
		net_pkt_set_data(pkt, &tcp_access);
   324ba:	a901      	add	r1, sp, #4
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   324bc:	8228      	strh	r0, [r5, #16]
		net_pkt_set_data(pkt, &tcp_access);
   324be:	4620      	mov	r0, r4
   324c0:	f7ff fc53 	bl	31d6a <net_pkt_set_data>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   324c4:	7b6a      	ldrb	r2, [r5, #13]
   324c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   324c8:	07d2      	lsls	r2, r2, #31
		ctx->tcp->fin_sent = 1U;
   324ca:	bf48      	it	mi
   324cc:	f893 20be 	ldrbmi.w	r2, [r3, #190]	; 0xbe
	ret = net_send_data(pkt);
   324d0:	4620      	mov	r0, r4
		ctx->tcp->fin_sent = 1U;
   324d2:	bf44      	itt	mi
   324d4:	f042 0202 	orrmi.w	r2, r2, #2
   324d8:	f883 20be 	strbmi.w	r2, [r3, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   324dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   324e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ret = net_send_data(pkt);
   324e4:	f7fe fe2f 	bl	31146 <net_send_data>
	if (ret == 0) {
   324e8:	2800      	cmp	r0, #0
   324ea:	d1a7      	bne.n	3243c <net_tcp_send_pkt+0x42>
	pkt->sent_or_eof = sent;
   324ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   324f0:	f043 0302 	orr.w	r3, r3, #2
   324f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   324f8:	e7a0      	b.n	3243c <net_tcp_send_pkt+0x42>
		return -EINVAL;
   324fa:	f06f 0015 	mvn.w	r0, #21
   324fe:	e79d      	b.n	3243c <net_tcp_send_pkt+0x42>

00032500 <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   32500:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   32502:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32504:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   32506:	2b00      	cmp	r3, #0
   32508:	d043      	beq.n	32592 <tcp_retry_expired+0x92>
		tcp->retry_timeout_shift++;
   3250a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   3250e:	1c53      	adds	r3, r2, #1
   32510:	f003 031f 	and.w	r3, r3, #31
   32514:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   32518:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   3251a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   3251e:	d914      	bls.n	3254a <tcp_retry_expired+0x4a>
	struct net_context *ctx = tcp->context;
   32520:	f850 5c48 	ldr.w	r5, [r0, #-72]
	if (ctx->recv_cb) {
   32524:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   32526:	b156      	cbz	r6, 3253e <tcp_retry_expired+0x3e>
		ctx->recv_cb(ctx, NULL, NULL, NULL, -ECONNRESET,
   32528:	f850 3c44 	ldr.w	r3, [r0, #-68]
   3252c:	4628      	mov	r0, r5
   3252e:	9301      	str	r3, [sp, #4]
   32530:	f06f 0367 	mvn.w	r3, #103	; 0x67
   32534:	9300      	str	r3, [sp, #0]
   32536:	2300      	movs	r3, #0
   32538:	461a      	mov	r2, r3
   3253a:	4619      	mov	r1, r3
   3253c:	47b0      	blx	r6
	net_context_unref(ctx);
   3253e:	4628      	mov	r0, r5
}
   32540:	b002      	add	sp, #8
   32542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_context_unref(tcp->context);
   32546:	f7ff b816 	b.w	31576 <net_context_unref>
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   3254a:	21c8      	movs	r1, #200	; 0xc8
   3254c:	4099      	lsls	r1, r3
   3254e:	f7e8 fe9d 	bl	1b28c <k_delayed_work_submit>
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   32552:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   32554:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   32558:	e8d2 2faf 	lda	r2, [r2]
		if (k_work_pending(net_pkt_work(pkt))) {
   3255c:	f012 0201 	ands.w	r2, r2, #1
   32560:	d120      	bne.n	325a4 <tcp_retry_expired+0xa4>
	pkt->pkt_queued = send;
   32562:	7999      	ldrb	r1, [r3, #6]
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   32564:	f1a3 0438 	sub.w	r4, r3, #56	; 0x38
   32568:	f041 0101 	orr.w	r1, r1, #1
   3256c:	7199      	strb	r1, [r3, #6]
	pkt->tcp_first_msg = is_1st;
   3256e:	7a59      	ldrb	r1, [r3, #9]
			net_pkt_ref(pkt);
   32570:	4620      	mov	r0, r4
   32572:	f362 0100 	bfi	r1, r2, #0, #1
   32576:	7259      	strb	r1, [r3, #9]
   32578:	f7ff f97b 	bl	31872 <net_pkt_ref>
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   3257c:	4620      	mov	r0, r4
   3257e:	f7ff ff3c 	bl	323fa <net_tcp_send_pkt>
   32582:	2800      	cmp	r0, #0
   32584:	da0e      	bge.n	325a4 <tcp_retry_expired+0xa4>
			net_pkt_unref(pkt);
   32586:	4620      	mov	r0, r4
}
   32588:	b002      	add	sp, #8
   3258a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   3258e:	f7ff b989 	b.w	318a4 <net_pkt_unref>
		if (tcp->fin_sent && tcp->fin_rcvd) {
   32592:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   32596:	f003 0306 	and.w	r3, r3, #6
   3259a:	2b06      	cmp	r3, #6
   3259c:	d102      	bne.n	325a4 <tcp_retry_expired+0xa4>
			net_context_unref(tcp->context);
   3259e:	f850 0c48 	ldr.w	r0, [r0, #-72]
   325a2:	e7cd      	b.n	32540 <tcp_retry_expired+0x40>
}
   325a4:	b002      	add	sp, #8
   325a6:	bd70      	pop	{r4, r5, r6, pc}

000325a8 <net_tcp_send_data>:
{
   325a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   325ac:	4680      	mov	r8, r0
   325ae:	460e      	mov	r6, r1
   325b0:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   325b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   325b4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
   325b8:	b984      	cbnz	r4, 325dc <net_tcp_send_data+0x34>
	if (cb) {
   325ba:	bb46      	cbnz	r6, 3260e <net_tcp_send_data+0x66>
		cb(context, 0, user_data);
   325bc:	2500      	movs	r5, #0
   325be:	e023      	b.n	32608 <net_tcp_send_data+0x60>
	pkt->pkt_queued = send;
   325c0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   325c4:	f043 0301 	orr.w	r3, r3, #1
   325c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	pkt->tcp_first_msg = is_1st;
   325cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   325d0:	f36f 0300 	bfc	r3, #0, #1
   325d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   325d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	return node->next;
   325da:	e7ed      	b.n	325b8 <net_tcp_send_data+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   325dc:	3c38      	subs	r4, #56	; 0x38
   325de:	2c00      	cmp	r4, #0
   325e0:	d0eb      	beq.n	325ba <net_tcp_send_data+0x12>
	return pkt->pkt_queued;
   325e2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (net_pkt_queued(pkt)) {
   325e6:	07da      	lsls	r2, r3, #31
   325e8:	d4f6      	bmi.n	325d8 <net_tcp_send_data+0x30>
	return pkt->tcp_first_msg;
   325ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			if (!net_pkt_tcp_1st_msg(pkt)) {
   325ee:	07db      	lsls	r3, r3, #31
   325f0:	d402      	bmi.n	325f8 <net_tcp_send_data+0x50>
				net_pkt_ref(pkt);
   325f2:	4620      	mov	r0, r4
   325f4:	f7ff f93d 	bl	31872 <net_pkt_ref>
		ret = net_tcp_send_pkt(pkt);
   325f8:	4620      	mov	r0, r4
   325fa:	f7ff fefe 	bl	323fa <net_tcp_send_pkt>
		if (ret < 0) {
   325fe:	1e05      	subs	r5, r0, #0
   32600:	dade      	bge.n	325c0 <net_tcp_send_data+0x18>
				net_pkt_unref(pkt);
   32602:	4620      	mov	r0, r4
   32604:	f7ff f94e 	bl	318a4 <net_pkt_unref>
}
   32608:	4628      	mov	r0, r5
   3260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cb(context, 0, user_data);
   3260e:	463a      	mov	r2, r7
   32610:	2100      	movs	r1, #0
   32612:	4640      	mov	r0, r8
   32614:	47b0      	blx	r6
   32616:	e7d1      	b.n	325bc <net_tcp_send_data+0x14>

00032618 <net_tcp_init>:
}
   32618:	4770      	bx	lr

0003261a <net_tcp_prepare_segment>:
{
   3261a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3261e:	b087      	sub	sp, #28
   32620:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   32622:	4604      	mov	r4, r0
   32624:	460d      	mov	r5, r1
   32626:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   32628:	2100      	movs	r1, #0
   3262a:	2218      	movs	r2, #24
   3262c:	4668      	mov	r0, sp
{
   3262e:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   32630:	f002 fa30 	bl	34a94 <memset>
	if (!local) {
   32634:	b90e      	cbnz	r6, 3263a <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   32636:	6826      	ldr	r6, [r4, #0]
   32638:	361c      	adds	r6, #28
	if (flags & NET_TCP_ACK) {
   3263a:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   3263c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
	if (flags & NET_TCP_ACK) {
   32640:	d50f      	bpl.n	32662 <net_tcp_prepare_segment+0x48>
   32642:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   32646:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   3264a:	2b07      	cmp	r3, #7
   3264c:	d13d      	bne.n	326ca <net_tcp_prepare_segment+0xb0>
			if (flags & NET_TCP_FIN) {
   3264e:	07ea      	lsls	r2, r5, #31
   32650:	d503      	bpl.n	3265a <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   32652:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   32656:	2109      	movs	r1, #9
   32658:	e000      	b.n	3265c <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   3265a:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   3265c:	4620      	mov	r0, r4
   3265e:	f7e9 f845 	bl	1b6ec <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   32662:	07eb      	lsls	r3, r5, #31
   32664:	d510      	bpl.n	32688 <net_tcp_prepare_segment+0x6e>
   32666:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		flags |= NET_TCP_ACK;
   3266a:	f045 0510 	orr.w	r5, r5, #16
   3266e:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   32672:	330d      	adds	r3, #13
   32674:	f003 030f 	and.w	r3, r3, #15
   32678:	2b01      	cmp	r3, #1
		seq++;
   3267a:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   3267e:	d803      	bhi.n	32688 <net_tcp_prepare_segment+0x6e>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   32680:	2107      	movs	r1, #7
   32682:	4620      	mov	r0, r4
   32684:	f7e9 f832 	bl	1b6ec <net_tcp_change_state>
	segment.dst_addr = remote;
   32688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	return tcp->recv_wnd;
   3268a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
	segment.dst_addr = remote;
   3268e:	9205      	str	r2, [sp, #20]
	segment.seq = tcp->send_seq;
   32690:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	segment.wnd = wnd;
   32694:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   32698:	9200      	str	r2, [sp, #0]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   3269a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.ack = tcp->send_ack;
   3269c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   326a0:	4669      	mov	r1, sp
	segment.ack = tcp->send_ack;
   326a2:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   326a4:	6820      	ldr	r0, [r4, #0]
   326a6:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   326a8:	9604      	str	r6, [sp, #16]
	segment.flags = flags;
   326aa:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   326ae:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   326b2:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   326b6:	f7e8 febd 	bl	1b434 <prepare_segment.isra.21>
	if (status < 0) {
   326ba:	2800      	cmp	r0, #0
	return 0;
   326bc:	bfa4      	itt	ge
   326be:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   326c0:	f8c4 7090 	strge.w	r7, [r4, #144]	; 0x90
}
   326c4:	b007      	add	sp, #28
   326c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   326ca:	2b08      	cmp	r3, #8
   326cc:	d0c3      	beq.n	32656 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   326ce:	2b05      	cmp	r3, #5
   326d0:	d1c7      	bne.n	32662 <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   326d2:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   326d6:	f045 0501 	orr.w	r5, r5, #1
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   326da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   326de:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   326e2:	2106      	movs	r1, #6
   326e4:	e7ba      	b.n	3265c <net_tcp_prepare_segment+0x42>

000326e6 <net_tcp_prepare_ack>:
{
   326e6:	b570      	push	{r4, r5, r6, lr}
   326e8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   326ec:	b088      	sub	sp, #32
   326ee:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   326f2:	2b03      	cmp	r3, #3
{
   326f4:	4604      	mov	r4, r0
   326f6:	460d      	mov	r5, r1
   326f8:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   326fa:	d00c      	beq.n	32716 <net_tcp_prepare_ack+0x30>
   326fc:	d304      	bcc.n	32708 <net_tcp_prepare_ack+0x22>
   326fe:	330a      	adds	r3, #10
   32700:	f003 030f 	and.w	r3, r3, #15
   32704:	2b01      	cmp	r3, #1
   32706:	d915      	bls.n	32734 <net_tcp_prepare_ack+0x4e>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   32708:	2300      	movs	r3, #0
   3270a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   3270e:	9300      	str	r3, [sp, #0]
   32710:	461a      	mov	r2, r3
   32712:	2110      	movs	r1, #16
   32714:	e00c      	b.n	32730 <net_tcp_prepare_ack+0x4a>
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   32716:	f10d 0217 	add.w	r2, sp, #23
   3271a:	a906      	add	r1, sp, #24
   3271c:	f7ff fdd6 	bl	322cc <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   32720:	2300      	movs	r3, #0
   32722:	2112      	movs	r1, #18
   32724:	e9cd 5601 	strd	r5, r6, [sp, #4]
   32728:	9300      	str	r3, [sp, #0]
   3272a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   3272e:	aa06      	add	r2, sp, #24
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   32730:	4620      	mov	r0, r4
   32732:	e005      	b.n	32740 <net_tcp_prepare_ack+0x5a>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   32734:	2300      	movs	r3, #0
   32736:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3273a:	461a      	mov	r2, r3
   3273c:	2111      	movs	r1, #17
   3273e:	9300      	str	r3, [sp, #0]
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   32740:	f7ff ff6b 	bl	3261a <net_tcp_prepare_segment>
}
   32744:	b008      	add	sp, #32
   32746:	bd70      	pop	{r4, r5, r6, pc}

00032748 <send_ack.isra.34>:
	struct net_pkt *pkt = NULL;
   32748:	2300      	movs	r3, #0
static int send_ack(struct net_context *context,
   3274a:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   3274c:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   3274e:	b91a      	cbnz	r2, 32758 <send_ack.isra.34+0x10>
   32750:	e9d0 4325 	ldrd	r4, r3, [r0, #148]	; 0x94
   32754:	429c      	cmp	r4, r3
   32756:	d00f      	beq.n	32778 <send_ack.isra.34+0x30>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   32758:	aa01      	add	r2, sp, #4
   3275a:	f7ff ffc4 	bl	326e6 <net_tcp_prepare_ack>
	if (ret) {
   3275e:	4604      	mov	r4, r0
   32760:	b938      	cbnz	r0, 32772 <send_ack.isra.34+0x2a>
	ret = net_tcp_send_pkt(pkt);
   32762:	9801      	ldr	r0, [sp, #4]
   32764:	f7ff fe49 	bl	323fa <net_tcp_send_pkt>
	if (ret < 0) {
   32768:	1e04      	subs	r4, r0, #0
   3276a:	da02      	bge.n	32772 <send_ack.isra.34+0x2a>
		net_pkt_unref(pkt);
   3276c:	9801      	ldr	r0, [sp, #4]
   3276e:	f7ff f899 	bl	318a4 <net_pkt_unref>
}
   32772:	4620      	mov	r0, r4
   32774:	b002      	add	sp, #8
   32776:	bd10      	pop	{r4, pc}
		return 0;
   32778:	4614      	mov	r4, r2
   3277a:	e7fa      	b.n	32772 <send_ack.isra.34+0x2a>

0003277c <send_syn_segment.isra.35>:
static inline int send_syn_segment(struct net_context *context,
   3277c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3277e:	461c      	mov	r4, r3
	struct net_pkt *pkt = NULL;
   32780:	2300      	movs	r3, #0
static inline int send_syn_segment(struct net_context *context,
   32782:	b089      	sub	sp, #36	; 0x24
	if (flags == NET_TCP_SYN) {
   32784:	2c02      	cmp	r4, #2
static inline int send_syn_segment(struct net_context *context,
   32786:	4605      	mov	r5, r0
   32788:	460e      	mov	r6, r1
   3278a:	4617      	mov	r7, r2
	struct net_pkt *pkt = NULL;
   3278c:	9305      	str	r3, [sp, #20]
	u8_t optionlen = 0U;
   3278e:	f88d 3013 	strb.w	r3, [sp, #19]
	if (flags == NET_TCP_SYN) {
   32792:	d105      	bne.n	327a0 <send_syn_segment.isra.35+0x24>
		net_tcp_set_syn_opt(context->tcp, options, &optionlen);
   32794:	f10d 0213 	add.w	r2, sp, #19
   32798:	a906      	add	r1, sp, #24
   3279a:	6800      	ldr	r0, [r0, #0]
   3279c:	f7ff fd96 	bl	322cc <net_tcp_set_syn_opt>
	ret = net_tcp_prepare_segment(context->tcp, flags, options, optionlen,
   327a0:	ab05      	add	r3, sp, #20
   327a2:	e9cd 7301 	strd	r7, r3, [sp, #4]
   327a6:	b2e1      	uxtb	r1, r4
   327a8:	9600      	str	r6, [sp, #0]
   327aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
   327ae:	aa06      	add	r2, sp, #24
   327b0:	6828      	ldr	r0, [r5, #0]
   327b2:	f7ff ff32 	bl	3261a <net_tcp_prepare_segment>
	if (ret) {
   327b6:	4604      	mov	r4, r0
   327b8:	b938      	cbnz	r0, 327ca <send_syn_segment.isra.35+0x4e>
	ret = net_send_data(pkt);
   327ba:	9805      	ldr	r0, [sp, #20]
   327bc:	f7fe fcc3 	bl	31146 <net_send_data>
	if (ret < 0) {
   327c0:	1e04      	subs	r4, r0, #0
   327c2:	da05      	bge.n	327d0 <send_syn_segment.isra.35+0x54>
		net_pkt_unref(pkt);
   327c4:	9805      	ldr	r0, [sp, #20]
   327c6:	f7ff f86d 	bl	318a4 <net_pkt_unref>
}
   327ca:	4620      	mov	r0, r4
   327cc:	b009      	add	sp, #36	; 0x24
   327ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pkt->sent_or_eof = sent;
   327d0:	9a05      	ldr	r2, [sp, #20]
   327d2:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   327d6:	f043 0302 	orr.w	r3, r3, #2
   327da:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
	context->tcp->send_seq++;
   327de:	682a      	ldr	r2, [r5, #0]
   327e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   327e4:	3301      	adds	r3, #1
   327e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	return ret;
   327ea:	e7ee      	b.n	327ca <send_syn_segment.isra.35+0x4e>

000327ec <net_tcp_ack_received>:
{
   327ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   327f0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
   327f2:	b08b      	sub	sp, #44	; 0x2c
	return (s32_t)(seq1 - seq2);
   327f4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   327f8:	4680      	mov	r8, r0
   327fa:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   327fc:	2b00      	cmp	r3, #0
{
   327fe:	4689      	mov	r9, r1
		return false;
   32800:	f04f 0700 	mov.w	r7, #0
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   32804:	dc22      	bgt.n	3284c <net_tcp_ack_received+0x60>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   32806:	f04f 0b14 	mov.w	fp, #20
Z_GENLIST_IS_EMPTY(slist)
   3280a:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
	while (!sys_slist_is_empty(list)) {
   3280e:	bb0c      	cbnz	r4, 32854 <net_tcp_ack_received+0x68>
	if (valid_ack) {
   32810:	2f00      	cmp	r7, #0
   32812:	f000 80a6 	beq.w	32962 <net_tcp_ack_received+0x176>
		restart_timer(ctx->tcp);
   32816:	f8d8 403c 	ldr.w	r4, [r8, #60]	; 0x3c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   3281a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3281e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   32822:	2b00      	cmp	r3, #0
   32824:	f000 8083 	beq.w	3292e <net_tcp_ack_received+0x142>
		tcp->flags |= NET_TCP_RETRYING;
   32828:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   3282c:	21c8      	movs	r1, #200	; 0xc8
		tcp->flags |= NET_TCP_RETRYING;
   3282e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   32832:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
		tcp->retry_timeout_shift = 0U;
   32836:	f36f 0304 	bfc	r3, #0, #5
   3283a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   3283e:	f7e8 fd25 	bl	1b28c <k_delayed_work_submit>
	(void)net_tcp_send_data(context, NULL, NULL);
   32842:	2200      	movs	r2, #0
   32844:	4640      	mov	r0, r8
   32846:	4611      	mov	r1, r2
   32848:	f7ff feae 	bl	325a8 <net_tcp_send_data>
}
   3284c:	4638      	mov	r0, r7
   3284e:	b00b      	add	sp, #44	; 0x2c
   32850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   32854:	f1a4 0638 	sub.w	r6, r4, #56	; 0x38
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   32858:	ab05      	add	r3, sp, #20
		net_pkt_cursor_init(pkt);
   3285a:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   3285c:	e9cd 3b03 	strd	r3, fp, [sp, #12]
		net_pkt_cursor_init(pkt);
   32860:	f7ff f884 	bl	3196c <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   32864:	7963      	ldrb	r3, [r4, #5]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   32866:	7921      	ldrb	r1, [r4, #4]
   32868:	f043 0301 	orr.w	r3, r3, #1
   3286c:	7163      	strb	r3, [r4, #5]
				 net_pkt_ip_opts_len(pkt))) {
   3286e:	7ae3      	ldrb	r3, [r4, #11]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   32870:	4630      	mov	r0, r6
   32872:	4419      	add	r1, r3
   32874:	f7ff f904 	bl	31a80 <net_pkt_skip>
   32878:	b170      	cbz	r0, 32898 <net_tcp_ack_received+0xac>
Z_GENLIST_REMOVE(slist, snode)
   3287a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   3287e:	6823      	ldr	r3, [r4, #0]
   32880:	4294      	cmp	r4, r2
	list->head = node;
   32882:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   32886:	bf08      	it	eq
   32888:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   3288c:	2300      	movs	r3, #0
			net_pkt_unref(pkt);
   3288e:	4630      	mov	r0, r6
   32890:	6023      	str	r3, [r4, #0]
   32892:	f7ff f807 	bl	318a4 <net_pkt_unref>
			continue;
   32896:	e7b8      	b.n	3280a <net_tcp_ack_received+0x1e>
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   32898:	a903      	add	r1, sp, #12
   3289a:	4630      	mov	r0, r6
   3289c:	f7ff fa44 	bl	31d28 <net_pkt_get_data>
		if (!tcp_hdr) {
   328a0:	2800      	cmp	r0, #0
   328a2:	d0ea      	beq.n	3287a <net_tcp_ack_received+0x8e>
	return net_pkt_skip(pkt, access->size);
   328a4:	9904      	ldr	r1, [sp, #16]
   328a6:	9001      	str	r0, [sp, #4]
   328a8:	4630      	mov	r0, r6
   328aa:	f7ff f8e9 	bl	31a80 <net_pkt_skip>
		seq_len = net_pkt_remaining_data(pkt);
   328ae:	4630      	mov	r0, r6
   328b0:	f7ff f960 	bl	31b74 <net_pkt_remaining_data>
   328b4:	4682      	mov	sl, r0
		if (tcp_hdr->flags & NET_TCP_SYN) {
   328b6:	9a01      	ldr	r2, [sp, #4]
   328b8:	7b53      	ldrb	r3, [r2, #13]
   328ba:	0799      	lsls	r1, r3, #30
			seq_len += 1U;
   328bc:	bf48      	it	mi
   328be:	f100 0a01 	addmi.w	sl, r0, #1
		if (tcp_hdr->flags & NET_TCP_FIN) {
   328c2:	f013 0301 	ands.w	r3, r3, #1
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   328c6:	f102 0004 	add.w	r0, r2, #4
			seq_len += 1U;
   328ca:	bf18      	it	ne
   328cc:	f10a 0a01 	addne.w	sl, sl, #1
   328d0:	9301      	str	r3, [sp, #4]
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   328d2:	f7ff fca7 	bl	32224 <sys_get_be32>
   328d6:	f109 0201 	add.w	r2, r9, #1
   328da:	1a10      	subs	r0, r2, r0
   328dc:	eba0 010a 	sub.w	r1, r0, sl
		if (!net_tcp_seq_greater(ack, last_seq)) {
   328e0:	2900      	cmp	r1, #0
   328e2:	dd95      	ble.n	32810 <net_tcp_ack_received+0x24>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   328e4:	9b01      	ldr	r3, [sp, #4]
   328e6:	b14b      	cbz	r3, 328fc <net_tcp_ack_received+0x110>
   328e8:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   328ec:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   328f0:	2b07      	cmp	r3, #7
   328f2:	d118      	bne.n	32926 <net_tcp_ack_received+0x13a>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   328f4:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   328f6:	4628      	mov	r0, r5
   328f8:	f7e8 fef8 	bl	1b6ec <net_tcp_change_state>
Z_GENLIST_REMOVE(slist, snode)
   328fc:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   32900:	6823      	ldr	r3, [r4, #0]
   32902:	4294      	cmp	r4, r2
	parent->next = child;
   32904:	f04f 0200 	mov.w	r2, #0
	list->head = node;
   32908:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   3290c:	bf08      	it	eq
   3290e:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	pkt->sent_or_eof = sent;
   32912:	7963      	ldrb	r3, [r4, #5]
	parent->next = child;
   32914:	6022      	str	r2, [r4, #0]
   32916:	f362 0341 	bfi	r3, r2, #1, #1
   3291a:	7163      	strb	r3, [r4, #5]
		net_pkt_unref(pkt);
   3291c:	4630      	mov	r0, r6
   3291e:	f7fe ffc1 	bl	318a4 <net_pkt_unref>
		valid_ack = true;
   32922:	2701      	movs	r7, #1
   32924:	e771      	b.n	3280a <net_tcp_ack_received+0x1e>
			} else if (s == NET_TCP_CLOSING) {
   32926:	2b0a      	cmp	r3, #10
   32928:	d1e8      	bne.n	328fc <net_tcp_ack_received+0x110>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   3292a:	2109      	movs	r1, #9
   3292c:	e7e3      	b.n	328f6 <net_tcp_ack_received+0x10a>
			(tcp->fin_sent && tcp->fin_rcvd)) {
   3292e:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
	} else if (CONFIG_NET_TCP_TIME_WAIT_DELAY != 0 &&
   32932:	f003 0306 	and.w	r3, r3, #6
   32936:	2b06      	cmp	r3, #6
   32938:	d106      	bne.n	32948 <net_tcp_ack_received+0x15c>
		k_delayed_work_submit(&tcp->retry_timer,
   3293a:	21fa      	movs	r1, #250	; 0xfa
   3293c:	f7e8 fca6 	bl	1b28c <k_delayed_work_submit>
		net_context_ref(tcp->context);
   32940:	6820      	ldr	r0, [r4, #0]
   32942:	f7fe fe0e 	bl	31562 <net_context_ref>
   32946:	e77c      	b.n	32842 <net_tcp_ack_received+0x56>
		k_delayed_work_cancel(&tcp->retry_timer);
   32948:	f7f8 faf8 	bl	2af3c <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   3294c:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   32950:	f3c3 1247 	ubfx	r2, r3, #5, #8
   32954:	f022 0210 	bic.w	r2, r2, #16
   32958:	f362 134c 	bfi	r3, r2, #5, #8
   3295c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   32960:	e76f      	b.n	32842 <net_tcp_ack_received+0x56>
	return true;
   32962:	2701      	movs	r7, #1
   32964:	e772      	b.n	3284c <net_tcp_ack_received+0x60>

00032966 <handle_timewait_timeout>:
   32966:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   32968:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   3296a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   3296e:	2b09      	cmp	r3, #9
{
   32970:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   32972:	d116      	bne.n	329a2 <handle_timewait_timeout+0x3c>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   32974:	3868      	subs	r0, #104	; 0x68
   32976:	2100      	movs	r1, #0
   32978:	f7e8 feb8 	bl	1b6ec <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   3297c:	f854 0c68 	ldr.w	r0, [r4, #-104]
   32980:	6b05      	ldr	r5, [r0, #48]	; 0x30
   32982:	b13d      	cbz	r5, 32994 <handle_timewait_timeout+0x2e>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   32984:	f854 3c64 	ldr.w	r3, [r4, #-100]
   32988:	9301      	str	r3, [sp, #4]
   3298a:	2300      	movs	r3, #0
   3298c:	9300      	str	r3, [sp, #0]
   3298e:	461a      	mov	r2, r3
   32990:	4619      	mov	r1, r3
   32992:	47a8      	blx	r5
		net_context_unref(tcp->context);
   32994:	f854 0c68 	ldr.w	r0, [r4, #-104]
}
   32998:	b003      	add	sp, #12
   3299a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   3299e:	f7fe bdea 	b.w	31576 <net_context_unref>
}
   329a2:	b003      	add	sp, #12
   329a4:	bd30      	pop	{r4, r5, pc}

000329a6 <handle_ack_timeout>:
   329a6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
   329aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   329ac:	f3c3 3343 	ubfx	r3, r3, #13, #4
   329b0:	2b06      	cmp	r3, #6
{
   329b2:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   329b4:	d116      	bne.n	329e4 <handle_ack_timeout+0x3e>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   329b6:	3808      	subs	r0, #8
   329b8:	2100      	movs	r1, #0
   329ba:	f7e8 fe97 	bl	1b6ec <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   329be:	f854 0c08 	ldr.w	r0, [r4, #-8]
   329c2:	6b05      	ldr	r5, [r0, #48]	; 0x30
   329c4:	b13d      	cbz	r5, 329d6 <handle_ack_timeout+0x30>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   329c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   329ca:	9301      	str	r3, [sp, #4]
   329cc:	2300      	movs	r3, #0
   329ce:	9300      	str	r3, [sp, #0]
   329d0:	461a      	mov	r2, r3
   329d2:	4619      	mov	r1, r3
   329d4:	47a8      	blx	r5
		net_context_unref(tcp->context);
   329d6:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   329da:	b003      	add	sp, #12
   329dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   329e0:	f7fe bdc9 	b.w	31576 <net_context_unref>
}
   329e4:	b003      	add	sp, #12
   329e6:	bd30      	pop	{r4, r5, pc}

000329e8 <net_tcp_validate_seq>:
{
   329e8:	b510      	push	{r4, lr}
   329ea:	4604      	mov	r4, r0
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   329ec:	1d08      	adds	r0, r1, #4
   329ee:	f7ff fc19 	bl	32224 <sys_get_be32>
   329f2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   329f6:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   329f8:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   329fa:	bfa9      	itett	ge
   329fc:	f8b4 30b8 	ldrhge.w	r3, [r4, #184]	; 0xb8
				tcp->send_ack) >= 0) &&
   32a00:	2000      	movlt	r0, #0
   32a02:	189b      	addge	r3, r3, r2
   32a04:	1ac0      	subge	r0, r0, r3
   32a06:	bfa8      	it	ge
   32a08:	0fc0      	lsrge	r0, r0, #31
}
   32a0a:	bd10      	pop	{r4, pc}

00032a0c <net_tcp_finalize>:
{
   32a0c:	b530      	push	{r4, r5, lr}
   32a0e:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   32a10:	ab03      	add	r3, sp, #12
   32a12:	9301      	str	r3, [sp, #4]
   32a14:	2314      	movs	r3, #20
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   32a16:	a901      	add	r1, sp, #4
{
   32a18:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   32a1a:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   32a1c:	f7ff f984 	bl	31d28 <net_pkt_get_data>
	if (!tcp_hdr) {
   32a20:	4604      	mov	r4, r0
   32a22:	b188      	cbz	r0, 32a48 <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
   32a24:	2300      	movs	r3, #0
   32a26:	7403      	strb	r3, [r0, #16]
   32a28:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   32a2a:	6a28      	ldr	r0, [r5, #32]
   32a2c:	f7fe fcb6 	bl	3139c <net_if_need_calc_tx_checksum>
   32a30:	b120      	cbz	r0, 32a3c <net_tcp_finalize+0x30>
   32a32:	2106      	movs	r1, #6
   32a34:	4628      	mov	r0, r5
   32a36:	f7fe fcd1 	bl	313dc <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   32a3a:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
   32a3c:	a901      	add	r1, sp, #4
   32a3e:	4628      	mov	r0, r5
   32a40:	f7ff f993 	bl	31d6a <net_pkt_set_data>
}
   32a44:	b009      	add	sp, #36	; 0x24
   32a46:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   32a48:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32a4c:	e7fa      	b.n	32a44 <net_tcp_finalize+0x38>

00032a4e <net_tcp_parse_opts>:
{
   32a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32a50:	4605      	mov	r5, r0
   32a52:	460c      	mov	r4, r1
   32a54:	4616      	mov	r6, r2
	while (opt_totlen) {
   32a56:	b174      	cbz	r4, 32a76 <net_tcp_parse_opts+0x28>
	return net_pkt_read(pkt, data, 1);
   32a58:	2201      	movs	r2, #1
   32a5a:	f10d 0106 	add.w	r1, sp, #6
   32a5e:	4628      	mov	r0, r5
   32a60:	f7ff f824 	bl	31aac <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt)) {
   32a64:	b118      	cbz	r0, 32a6e <net_tcp_parse_opts+0x20>
	return -EINVAL;
   32a66:	f06f 0015 	mvn.w	r0, #21
}
   32a6a:	b002      	add	sp, #8
   32a6c:	bd70      	pop	{r4, r5, r6, pc}
		if (opt == NET_TCP_END_OPT) {
   32a6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
		opt_totlen--;
   32a72:	1e63      	subs	r3, r4, #1
		if (opt == NET_TCP_END_OPT) {
   32a74:	b90a      	cbnz	r2, 32a7a <net_tcp_parse_opts+0x2c>
	return 0;
   32a76:	2000      	movs	r0, #0
   32a78:	e7f7      	b.n	32a6a <net_tcp_parse_opts+0x1c>
		} else if (opt == NET_TCP_NOP_OPT) {
   32a7a:	2a01      	cmp	r2, #1
   32a7c:	d028      	beq.n	32ad0 <net_tcp_parse_opts+0x82>
		if (!opt_totlen) {
   32a7e:	2b00      	cmp	r3, #0
   32a80:	d0f1      	beq.n	32a66 <net_tcp_parse_opts+0x18>
   32a82:	2201      	movs	r2, #1
   32a84:	f10d 0107 	add.w	r1, sp, #7
   32a88:	4628      	mov	r0, r5
   32a8a:	f7ff f80f 	bl	31aac <net_pkt_read>
		if (net_pkt_read_u8(pkt, &optlen) || optlen < 2) {
   32a8e:	2800      	cmp	r0, #0
   32a90:	d1e9      	bne.n	32a66 <net_tcp_parse_opts+0x18>
   32a92:	f89d 1007 	ldrb.w	r1, [sp, #7]
   32a96:	2901      	cmp	r1, #1
   32a98:	d9e5      	bls.n	32a66 <net_tcp_parse_opts+0x18>
		optlen -= 2U;
   32a9a:	3902      	subs	r1, #2
   32a9c:	b2c9      	uxtb	r1, r1
		opt_totlen--;
   32a9e:	3c02      	subs	r4, #2
		if (opt_totlen < optlen) {
   32aa0:	42a1      	cmp	r1, r4
		optlen -= 2U;
   32aa2:	f88d 1007 	strb.w	r1, [sp, #7]
		if (opt_totlen < optlen) {
   32aa6:	dcde      	bgt.n	32a66 <net_tcp_parse_opts+0x18>
		switch (opt) {
   32aa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   32aac:	2b02      	cmp	r3, #2
   32aae:	d10b      	bne.n	32ac8 <net_tcp_parse_opts+0x7a>
			if (optlen != 2U) {
   32ab0:	2902      	cmp	r1, #2
   32ab2:	d1d8      	bne.n	32a66 <net_tcp_parse_opts+0x18>
			if (net_pkt_read_be16(pkt, &opts->mss)) {
   32ab4:	4631      	mov	r1, r6
   32ab6:	4628      	mov	r0, r5
   32ab8:	f7ff f801 	bl	31abe <net_pkt_read_be16>
			if (net_pkt_skip(pkt, optlen)) {
   32abc:	2800      	cmp	r0, #0
   32abe:	d1d2      	bne.n	32a66 <net_tcp_parse_opts+0x18>
		opt_totlen -= optlen;
   32ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32ac4:	1ae4      	subs	r4, r4, r3
   32ac6:	e7c6      	b.n	32a56 <net_tcp_parse_opts+0x8>
			if (net_pkt_skip(pkt, optlen)) {
   32ac8:	4628      	mov	r0, r5
   32aca:	f7fe ffd9 	bl	31a80 <net_pkt_skip>
   32ace:	e7f5      	b.n	32abc <net_tcp_parse_opts+0x6e>
		opt_totlen--;
   32ad0:	461c      	mov	r4, r3
   32ad2:	e7c0      	b.n	32a56 <net_tcp_parse_opts+0x8>

00032ad4 <net_tcp_put>:
{
   32ad4:	b530      	push	{r4, r5, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32ad6:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   32ada:	b087      	sub	sp, #28
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32adc:	2b06      	cmp	r3, #6
{
   32ade:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32ae0:	d145      	bne.n	32b6e <net_tcp_put+0x9a>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   32ae2:	f7e8 fbfb 	bl	1b2dc <net_context_get_state>
   32ae6:	2802      	cmp	r0, #2
   32ae8:	d10f      	bne.n	32b0a <net_tcp_put+0x36>
		    && context->tcp
   32aea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   32aec:	b998      	cbnz	r0, 32b16 <net_tcp_put+0x42>
		if (context->tcp &&
   32aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   32af0:	b143      	cbz	r3, 32b04 <net_tcp_put+0x30>
   32af2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   32af6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   32afa:	2b02      	cmp	r3, #2
   32afc:	d102      	bne.n	32b04 <net_tcp_put+0x30>
			net_context_unref(context);
   32afe:	4620      	mov	r0, r4
   32b00:	f7fe fd39 	bl	31576 <net_context_unref>
		return -ENOTCONN;
   32b04:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   32b08:	e020      	b.n	32b4c <net_tcp_put+0x78>
		     net_context_get_state(context) == NET_CONTEXT_LISTENING)
   32b0a:	4620      	mov	r0, r4
   32b0c:	f7e8 fbe6 	bl	1b2dc <net_context_get_state>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   32b10:	2803      	cmp	r0, #3
   32b12:	d0ea      	beq.n	32aea <net_tcp_put+0x16>
   32b14:	e7eb      	b.n	32aee <net_tcp_put+0x1a>
		    && !context->tcp->fin_rcvd) {
   32b16:	f890 50be 	ldrb.w	r5, [r0, #190]	; 0xbe
   32b1a:	f015 0504 	ands.w	r5, r5, #4
   32b1e:	d1e6      	bne.n	32aee <net_tcp_put+0x1a>
			k_delayed_work_submit(&context->tcp->fin_timer,
   32b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   32b24:	3028      	adds	r0, #40	; 0x28
   32b26:	f7e8 fbb1 	bl	1b28c <k_delayed_work_submit>
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   32b2a:	ab05      	add	r3, sp, #20
   32b2c:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   32b2e:	f104 0324 	add.w	r3, r4, #36	; 0x24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   32b32:	e9cd 5300 	strd	r5, r3, [sp]
   32b36:	462a      	mov	r2, r5
   32b38:	462b      	mov	r3, r5
   32b3a:	2101      	movs	r1, #1
   32b3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	struct net_pkt *pkt = NULL;
   32b3e:	9505      	str	r5, [sp, #20]
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   32b40:	f7ff fd6b 	bl	3261a <net_tcp_prepare_segment>
	if (ret || !pkt) {
   32b44:	b908      	cbnz	r0, 32b4a <net_tcp_put+0x76>
   32b46:	9905      	ldr	r1, [sp, #20]
   32b48:	b911      	cbnz	r1, 32b50 <net_tcp_put+0x7c>
			return 0;
   32b4a:	2000      	movs	r0, #0
}
   32b4c:	b007      	add	sp, #28
   32b4e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_IS_EMPTY(slist)
   32b50:	4620      	mov	r0, r4
   32b52:	f850 3f3c 	ldr.w	r3, [r0, #60]!
   32b56:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
	net_tcp_queue_pkt(ctx, pkt);
   32b5a:	f7ff fb77 	bl	3224c <net_tcp_queue_pkt.isra.22>
	if (flush) {
   32b5e:	2d00      	cmp	r5, #0
   32b60:	d1f3      	bne.n	32b4a <net_tcp_put+0x76>
	(void)net_tcp_send_data(context, NULL, NULL);
   32b62:	462a      	mov	r2, r5
   32b64:	4629      	mov	r1, r5
   32b66:	4620      	mov	r0, r4
   32b68:	f7ff fd1e 	bl	325a8 <net_tcp_send_data>
   32b6c:	e7ed      	b.n	32b4a <net_tcp_put+0x76>
	return -EOPNOTSUPP;
   32b6e:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   32b72:	e7eb      	b.n	32b4c <net_tcp_put+0x78>

00032b74 <net_tcp_listen>:
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32b74:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   32b78:	b510      	push	{r4, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32b7a:	2b06      	cmp	r3, #6
{
   32b7c:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   32b7e:	d109      	bne.n	32b94 <net_tcp_listen+0x20>
		net_tcp_change_state(context->tcp, NET_TCP_LISTEN);
   32b80:	2101      	movs	r1, #1
   32b82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   32b84:	f7e8 fdb2 	bl	1b6ec <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_LISTENING);
   32b88:	4620      	mov	r0, r4
   32b8a:	2103      	movs	r1, #3
   32b8c:	f7e8 fbc6 	bl	1b31c <net_context_set_state>
		return 0;
   32b90:	2000      	movs	r0, #0
}
   32b92:	bd10      	pop	{r4, pc}
	return -EOPNOTSUPP;
   32b94:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   32b98:	e7fb      	b.n	32b92 <net_tcp_listen+0x1e>

00032b9a <net_tcp_update_recv_wnd>:
	if (!context->tcp) {
   32b9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   32b9c:	b14a      	cbz	r2, 32bb2 <net_tcp_update_recv_wnd+0x18>
	new_win = context->tcp->recv_wnd + delta;
   32b9e:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
   32ba2:	4419      	add	r1, r3
	if (new_win < 0 || new_win > UINT16_MAX) {
   32ba4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   32ba8:	d206      	bcs.n	32bb8 <net_tcp_update_recv_wnd+0x1e>
	context->tcp->recv_wnd = new_win;
   32baa:	f8a2 10b8 	strh.w	r1, [r2, #184]	; 0xb8
	return 0;
   32bae:	2000      	movs	r0, #0
   32bb0:	4770      	bx	lr
		return -EPROTOTYPE;
   32bb2:	f06f 006a 	mvn.w	r0, #106	; 0x6a
   32bb6:	4770      	bx	lr
		return -EINVAL;
   32bb8:	f06f 0015 	mvn.w	r0, #21
}
   32bbc:	4770      	bx	lr

00032bbe <net_tcp_input>:

struct net_tcp_hdr *net_tcp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *tcp_access)
{
   32bbe:	b570      	push	{r4, r5, r6, lr}
   32bc0:	4604      	mov	r4, r0
	struct net_tcp_hdr *tcp_hdr;

	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   32bc2:	6a00      	ldr	r0, [r0, #32]
{
   32bc4:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   32bc6:	f7fe fbeb 	bl	313a0 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   32bca:	b940      	cbnz	r0, 32bde <net_tcp_input+0x20>
	    net_calc_chksum_tcp(pkt) != 0U) {
		NET_DBG("DROP: checksum mismatch");
		goto drop;
	}

	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
   32bcc:	4631      	mov	r1, r6
   32bce:	4620      	mov	r0, r4
   32bd0:	f7ff f8aa 	bl	31d28 <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   32bd4:	4605      	mov	r5, r0
   32bd6:	b948      	cbnz	r0, 32bec <net_tcp_input+0x2e>
		return tcp_hdr;
	}

drop:
	net_stats_update_tcp_seg_chkerr(net_pkt_iface(pkt));
	return NULL;
   32bd8:	2500      	movs	r5, #0
}
   32bda:	4628      	mov	r0, r5
   32bdc:	bd70      	pop	{r4, r5, r6, pc}
   32bde:	2106      	movs	r1, #6
   32be0:	4620      	mov	r0, r4
   32be2:	f7fe fbfb 	bl	313dc <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   32be6:	2800      	cmp	r0, #0
   32be8:	d0f0      	beq.n	32bcc <net_tcp_input+0xe>
   32bea:	e7f5      	b.n	32bd8 <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   32bec:	4631      	mov	r1, r6
   32bee:	4620      	mov	r0, r4
   32bf0:	f7ff f8bb 	bl	31d6a <net_pkt_set_data>
   32bf4:	2800      	cmp	r0, #0
   32bf6:	d0f0      	beq.n	32bda <net_tcp_input+0x1c>
drop:
   32bf8:	e7ee      	b.n	32bd8 <net_tcp_input+0x1a>

00032bfa <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   32bfa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   32bfc:	2308      	movs	r3, #8
{
   32bfe:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   32c00:	eb0d 0103 	add.w	r1, sp, r3
{
   32c04:	4604      	mov	r4, r0
   32c06:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   32c08:	f8cd d008 	str.w	sp, [sp, #8]
   32c0c:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   32c0e:	f7ff f88b 	bl	31d28 <net_pkt_get_data>
	if (!udp_hdr) {
   32c12:	b160      	cbz	r0, 32c2e <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   32c14:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   32c16:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   32c18:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   32c1a:	7103      	strb	r3, [r0, #4]
   32c1c:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   32c1e:	7183      	strb	r3, [r0, #6]
   32c20:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   32c22:	a902      	add	r1, sp, #8
   32c24:	4620      	mov	r0, r4
   32c26:	f7ff f8a0 	bl	31d6a <net_pkt_set_data>
}
   32c2a:	b004      	add	sp, #16
   32c2c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   32c2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32c32:	e7fa      	b.n	32c2a <net_udp_create+0x30>

00032c34 <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   32c34:	2308      	movs	r3, #8
{
   32c36:	b530      	push	{r4, r5, lr}
   32c38:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   32c3a:	eb0d 0103 	add.w	r1, sp, r3
{
   32c3e:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   32c40:	f8cd d008 	str.w	sp, [sp, #8]
   32c44:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   32c46:	f7ff f86f 	bl	31d28 <net_pkt_get_data>
	if (!udp_hdr) {
   32c4a:	4605      	mov	r5, r0
   32c4c:	b310      	cbz	r0, 32c94 <net_udp_finalize+0x60>
	size_t bytes = 0;
   32c4e:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   32c50:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   32c52:	b9da      	cbnz	r2, 32c8c <net_udp_finalize+0x58>
   32c54:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	return pkt->ipv4_opts_len;
   32c58:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   32c5c:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   32c5e:	440a      	add	r2, r1
   32c60:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   32c62:	ba5b      	rev16	r3, r3
   32c64:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   32c66:	f7fe fb99 	bl	3139c <net_if_need_calc_tx_checksum>
   32c6a:	b148      	cbz	r0, 32c80 <net_udp_finalize+0x4c>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   32c6c:	2111      	movs	r1, #17
   32c6e:	4620      	mov	r0, r4
   32c70:	f7fe fbb4 	bl	313dc <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   32c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   32c78:	2800      	cmp	r0, #0
   32c7a:	bf08      	it	eq
   32c7c:	4618      	moveq	r0, r3
   32c7e:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   32c80:	a902      	add	r1, sp, #8
   32c82:	4620      	mov	r0, r4
   32c84:	f7ff f871 	bl	31d6a <net_pkt_set_data>
}
   32c88:	b005      	add	sp, #20
   32c8a:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   32c8c:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   32c8e:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   32c90:	440b      	add	r3, r1
		buf = buf->frags;
   32c92:	e7de      	b.n	32c52 <net_udp_finalize+0x1e>
		return -ENOBUFS;
   32c94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   32c98:	e7f6      	b.n	32c88 <net_udp_finalize+0x54>

00032c9a <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   32c9a:	b570      	push	{r4, r5, r6, lr}
   32c9c:	4604      	mov	r4, r0
   32c9e:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   32ca0:	f7ff f842 	bl	31d28 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   32ca4:	4605      	mov	r5, r0
   32ca6:	b1f0      	cbz	r0, 32ce6 <net_udp_input+0x4c>
   32ca8:	4631      	mov	r1, r6
   32caa:	4620      	mov	r0, r4
   32cac:	f7ff f85d 	bl	31d6a <net_pkt_set_data>
   32cb0:	b9c8      	cbnz	r0, 32ce6 <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   32cb2:	88aa      	ldrh	r2, [r5, #4]
   32cb4:	0213      	lsls	r3, r2, #8
   32cb6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   32cba:	6922      	ldr	r2, [r4, #16]
   32cbc:	b29b      	uxth	r3, r3
	while (buf) {
   32cbe:	b9aa      	cbnz	r2, 32cec <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   32cc0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
				    net_pkt_ip_opts_len(pkt))) {
   32cc4:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
				    net_pkt_ip_hdr_len(pkt) -
   32cc8:	440a      	add	r2, r1
   32cca:	1a80      	subs	r0, r0, r2
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   32ccc:	4283      	cmp	r3, r0
   32cce:	d10a      	bne.n	32ce6 <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   32cd0:	6a20      	ldr	r0, [r4, #32]
   32cd2:	f7fe fb65 	bl	313a0 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   32cd6:	b138      	cbz	r0, 32ce8 <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   32cd8:	88eb      	ldrh	r3, [r5, #6]
   32cda:	b123      	cbz	r3, 32ce6 <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   32cdc:	2111      	movs	r1, #17
   32cde:	4620      	mov	r0, r4
   32ce0:	f7fe fb7c 	bl	313dc <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   32ce4:	b100      	cbz	r0, 32ce8 <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   32ce6:	2500      	movs	r5, #0
}
   32ce8:	4628      	mov	r0, r5
   32cea:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   32cec:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   32cee:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   32cf0:	4408      	add	r0, r1
		buf = buf->frags;
   32cf2:	e7e4      	b.n	32cbe <net_udp_input+0x24>

00032cf4 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   32cf4:	e9d0 2300 	ldrd	r2, r3, [r0]
   32cf8:	1a9b      	subs	r3, r3, r2
   32cfa:	2b01      	cmp	r3, #1
{
   32cfc:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   32cfe:	d90c      	bls.n	32d1a <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   32d00:	4614      	mov	r4, r2
   32d02:	1c53      	adds	r3, r2, #1
   32d04:	6003      	str	r3, [r0, #0]
   32d06:	f814 3b02 	ldrb.w	r3, [r4], #2
   32d0a:	021b      	lsls	r3, r3, #8
   32d0c:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   32d0e:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   32d10:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   32d12:	7852      	ldrb	r2, [r2, #1]
   32d14:	4313      	orrs	r3, r2
   32d16:	800b      	strh	r3, [r1, #0]
}
   32d18:	bd10      	pop	{r4, pc}
		return -EINVAL;
   32d1a:	f06f 0015 	mvn.w	r0, #21
   32d1e:	e7fb      	b.n	32d18 <unpack_uint16+0x24>

00032d20 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   32d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32d22:	e9d0 3400 	ldrd	r3, r4, [r0]
   32d26:	429c      	cmp	r4, r3
   32d28:	d01f      	beq.n	32d6a <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   32d2a:	1c5c      	adds	r4, r3, #1
   32d2c:	6004      	str	r4, [r0, #0]
   32d2e:	781b      	ldrb	r3, [r3, #0]
   32d30:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   32d32:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   32d34:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   32d36:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   32d38:	6804      	ldr	r4, [r0, #0]
   32d3a:	42bc      	cmp	r4, r7
   32d3c:	d218      	bcs.n	32d70 <fixed_header_decode+0x50>
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   32d3e:	4625      	mov	r5, r4
   32d40:	f815 3b01 	ldrb.w	r3, [r5], #1
   32d44:	6816      	ldr	r6, [r2, #0]
   32d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   32d4a:	408b      	lsls	r3, r1
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   32d4c:	4433      	add	r3, r6
   32d4e:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   32d50:	6005      	str	r5, [r0, #0]
   32d52:	f994 4000 	ldrsb.w	r4, [r4]
   32d56:	2c00      	cmp	r4, #0
   32d58:	db04      	blt.n	32d64 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   32d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   32d5e:	d204      	bcs.n	32d6a <fixed_header_decode+0x4a>
	return 0;
   32d60:	2000      	movs	r0, #0
   32d62:	e004      	b.n	32d6e <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   32d64:	3107      	adds	r1, #7
   32d66:	291c      	cmp	r1, #28
   32d68:	d1e6      	bne.n	32d38 <fixed_header_decode+0x18>
		return -EINVAL;
   32d6a:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   32d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   32d70:	f06f 000a 	mvn.w	r0, #10
   32d74:	e7fb      	b.n	32d6e <fixed_header_decode+0x4e>

00032d76 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   32d76:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32d78:	e9d1 3500 	ldrd	r3, r5, [r1]
   32d7c:	429d      	cmp	r5, r3
   32d7e:	d102      	bne.n	32d86 <connect_ack_decode+0x10>
		return -EINVAL;
   32d80:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   32d84:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   32d86:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32d88:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   32d8a:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32d8c:	d0f8      	beq.n	32d80 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   32d8e:	461d      	mov	r5, r3
   32d90:	f815 4b02 	ldrb.w	r4, [r5], #2
   32d94:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   32d96:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
	*val = *(buf->cur++);
   32d9a:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   32d9c:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   32d9e:	bf04      	itt	eq
   32da0:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   32da4:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   32da6:	7053      	strb	r3, [r2, #1]
	return 0;
   32da8:	2000      	movs	r0, #0
   32daa:	e7eb      	b.n	32d84 <connect_ack_decode+0xe>

00032dac <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   32dac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   32db0:	461d      	mov	r5, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   32db2:	7d9b      	ldrb	r3, [r3, #22]
{
   32db4:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   32db6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   32dba:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   32dbe:	f3c0 0041 	ubfx	r0, r0, #1, #2
   32dc2:	7228      	strb	r0, [r5, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   32dc4:	75ab      	strb	r3, [r5, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   32dc6:	f10d 0106 	add.w	r1, sp, #6
   32dca:	4610      	mov	r0, r2
{
   32dcc:	4617      	mov	r7, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   32dce:	f7ff ff91 	bl	32cf4 <unpack_uint16>
	if (err_code != 0) {
   32dd2:	4606      	mov	r6, r0
   32dd4:	b9c0      	cbnz	r0, 32e08 <publish_decode+0x5c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   32dd6:	683b      	ldr	r3, [r7, #0]
   32dd8:	687a      	ldr	r2, [r7, #4]
   32dda:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   32dde:	1ad2      	subs	r2, r2, r3
   32de0:	42a2      	cmp	r2, r4
   32de2:	da02      	bge.n	32dea <publish_decode+0x3e>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   32de4:	f06f 0615 	mvn.w	r6, #21
   32de8:	e00e      	b.n	32e08 <publish_decode+0x5c>
	str->size = utf8_strlen;
   32dea:	606c      	str	r4, [r5, #4]
	if (utf8_strlen) {
   32dec:	b184      	cbz	r4, 32e10 <publish_decode+0x64>
		str->utf8 = buf->cur;
   32dee:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   32df0:	4423      	add	r3, r4
   32df2:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   32df4:	7a2b      	ldrb	r3, [r5, #8]
   32df6:	b96b      	cbnz	r3, 32e14 <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   32df8:	3402      	adds	r4, #2
	if (var_length < var_header_length) {
   32dfa:	4544      	cmp	r4, r8
   32dfc:	d8f2      	bhi.n	32de4 <publish_decode+0x38>
	}

	param->message.payload.data = NULL;
   32dfe:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   32e00:	eba8 0404 	sub.w	r4, r8, r4
	param->message.payload.data = NULL;
   32e04:	60eb      	str	r3, [r5, #12]
	param->message.payload.len = var_length - var_header_length;
   32e06:	612c      	str	r4, [r5, #16]

	return 0;
}
   32e08:	4630      	mov	r0, r6
   32e0a:	b002      	add	sp, #8
   32e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   32e10:	602c      	str	r4, [r5, #0]
	if (err_code != 0) {
   32e12:	e7ef      	b.n	32df4 <publish_decode+0x48>
		err_code = unpack_uint16(buf, &param->message_id);
   32e14:	f105 0114 	add.w	r1, r5, #20
   32e18:	4638      	mov	r0, r7
   32e1a:	f7ff ff6b 	bl	32cf4 <unpack_uint16>
		if (err_code != 0) {
   32e1e:	b908      	cbnz	r0, 32e24 <publish_decode+0x78>
		var_header_length += sizeof(u16_t);
   32e20:	3404      	adds	r4, #4
   32e22:	e7ea      	b.n	32dfa <publish_decode+0x4e>
   32e24:	4606      	mov	r6, r0
   32e26:	e7ef      	b.n	32e08 <publish_decode+0x5c>

00032e28 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   32e28:	f7ff bf64 	b.w	32cf4 <unpack_uint16>

00032e2c <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   32e2c:	f7ff bf62 	b.w	32cf4 <unpack_uint16>

00032e30 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   32e30:	f7ff bf60 	b.w	32cf4 <unpack_uint16>

00032e34 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   32e34:	f7ff bf5e 	b.w	32cf4 <unpack_uint16>

00032e38 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   32e38:	b538      	push	{r3, r4, r5, lr}
   32e3a:	4605      	mov	r5, r0
   32e3c:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   32e3e:	f7ff ff59 	bl	32cf4 <unpack_uint16>
	if (err_code != 0) {
   32e42:	b930      	cbnz	r0, 32e52 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   32e44:	e9d5 2300 	ldrd	r2, r3, [r5]
   32e48:	1a99      	subs	r1, r3, r2
	str->len = length;
   32e4a:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   32e4c:	b111      	cbz	r1, 32e54 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   32e4e:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   32e50:	602b      	str	r3, [r5, #0]
}
   32e52:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   32e54:	6060      	str	r0, [r4, #4]
   32e56:	e7fc      	b.n	32e52 <subscribe_ack_decode+0x1a>

00032e58 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   32e58:	f7ff bf4c 	b.w	32cf4 <unpack_uint16>

00032e5c <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   32e5c:	e9d1 3200 	ldrd	r3, r2, [r1]
   32e60:	1ad2      	subs	r2, r2, r3
   32e62:	2a01      	cmp	r2, #1
   32e64:	d909      	bls.n	32e7a <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   32e66:	1c5a      	adds	r2, r3, #1
   32e68:	600a      	str	r2, [r1, #0]
   32e6a:	0a02      	lsrs	r2, r0, #8
   32e6c:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   32e6e:	680b      	ldr	r3, [r1, #0]
   32e70:	1c5a      	adds	r2, r3, #1
   32e72:	600a      	str	r2, [r1, #0]
   32e74:	7018      	strb	r0, [r3, #0]
	return 0;
   32e76:	2000      	movs	r0, #0
   32e78:	4770      	bx	lr
		return -ENOMEM;
   32e7a:	f06f 000b 	mvn.w	r0, #11
}
   32e7e:	4770      	bx	lr

00032e80 <pack_utf8_str>:
{
   32e80:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   32e82:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   32e86:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   32e88:	6840      	ldr	r0, [r0, #4]
   32e8a:	1a9b      	subs	r3, r3, r2
   32e8c:	1c82      	adds	r2, r0, #2
   32e8e:	4293      	cmp	r3, r2
{
   32e90:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   32e92:	d30d      	bcc.n	32eb0 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   32e94:	b280      	uxth	r0, r0
   32e96:	f7ff ffe1 	bl	32e5c <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32e9a:	e9d5 1200 	ldrd	r1, r2, [r5]
   32e9e:	6820      	ldr	r0, [r4, #0]
   32ea0:	f001 fdbe 	bl	34a20 <memcpy>
	return 0;
   32ea4:	2000      	movs	r0, #0
	buf->cur += str->size;
   32ea6:	6823      	ldr	r3, [r4, #0]
   32ea8:	686a      	ldr	r2, [r5, #4]
   32eaa:	4413      	add	r3, r2
   32eac:	6023      	str	r3, [r4, #0]
}
   32eae:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   32eb0:	f06f 000b 	mvn.w	r0, #11
   32eb4:	e7fb      	b.n	32eae <pack_utf8_str+0x2e>

00032eb6 <mqtt_encode_fixed_header>:
{
   32eb6:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   32eb8:	6815      	ldr	r5, [r2, #0]
   32eba:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   32ebc:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   32ec0:	d227      	bcs.n	32f12 <mqtt_encode_fixed_header+0x5c>
   32ec2:	462c      	mov	r4, r5
   32ec4:	2600      	movs	r6, #0
	} while (length > 0);
   32ec6:	09e4      	lsrs	r4, r4, #7
   32ec8:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   32eca:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   32ece:	d1fa      	bne.n	32ec6 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   32ed0:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   32ed2:	b2db      	uxtb	r3, r3
   32ed4:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32ed6:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   32ed8:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   32eda:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   32edc:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   32ede:	bf1e      	ittt	ne
   32ee0:	3401      	addne	r4, #1
   32ee2:	6014      	strne	r4, [r2, #0]
   32ee4:	54c8      	strbne	r0, [r1, r3]
	return 0;
   32ee6:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   32ee8:	6811      	ldr	r1, [r2, #0]
   32eea:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   32eee:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   32ef0:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   32ef2:	bf1f      	itttt	ne
   32ef4:	6814      	ldrne	r4, [r2, #0]
   32ef6:	7821      	ldrbne	r1, [r4, #0]
   32ef8:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   32efc:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   32efe:	6811      	ldr	r1, [r2, #0]
   32f00:	3101      	adds	r1, #1
   32f02:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   32f04:	2800      	cmp	r0, #0
   32f06:	d1ef      	bne.n	32ee8 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   32f08:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   32f0a:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   32f0c:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   32f0e:	6051      	str	r1, [r2, #4]
}
   32f10:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   32f12:	f06f 0079 	mvn.w	r0, #121	; 0x79
   32f16:	e7fb      	b.n	32f10 <mqtt_encode_fixed_header+0x5a>

00032f18 <mqtt_message_id_only_enc>:
{
   32f18:	b570      	push	{r4, r5, r6, lr}
   32f1a:	4606      	mov	r6, r0
   32f1c:	4615      	mov	r5, r2
	if (message_id == 0U) {
   32f1e:	4608      	mov	r0, r1
   32f20:	b169      	cbz	r1, 32f3e <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   32f22:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   32f24:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   32f26:	3405      	adds	r4, #5
   32f28:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   32f2a:	f7ff ff97 	bl	32e5c <pack_uint16>
	if (err_code != 0) {
   32f2e:	b940      	cbnz	r0, 32f42 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   32f30:	462a      	mov	r2, r5
   32f32:	4621      	mov	r1, r4
   32f34:	4630      	mov	r0, r6
}
   32f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   32f3a:	f7ff bfbc 	b.w	32eb6 <mqtt_encode_fixed_header>
		return -EINVAL;
   32f3e:	f06f 0015 	mvn.w	r0, #21
}
   32f42:	bd70      	pop	{r4, r5, r6, pc}

00032f44 <publish_encode>:
{
   32f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32f48:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   32f4a:	7d80      	ldrb	r0, [r0, #22]
   32f4c:	7a3c      	ldrb	r4, [r7, #8]
{
   32f4e:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   32f50:	f000 0801 	and.w	r8, r0, #1
   32f54:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   32f58:	b10c      	cbz	r4, 32f5e <publish_encode+0x1a>
   32f5a:	8abb      	ldrh	r3, [r7, #20]
   32f5c:	b35b      	cbz	r3, 32fb6 <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   32f5e:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   32f60:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   32f62:	3605      	adds	r6, #5
   32f64:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   32f66:	4638      	mov	r0, r7
   32f68:	f7ff ff8a 	bl	32e80 <pack_utf8_str>
	if (err_code != 0) {
   32f6c:	b9a8      	cbnz	r0, 32f9a <publish_encode+0x56>
	if (param->message.topic.qos) {
   32f6e:	7a3b      	ldrb	r3, [r7, #8]
   32f70:	b9ab      	cbnz	r3, 32f9e <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   32f72:	0060      	lsls	r0, r4, #1
   32f74:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   32f78:	693a      	ldr	r2, [r7, #16]
   32f7a:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   32f7c:	ea40 0009 	orr.w	r0, r0, r9
   32f80:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   32f84:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   32f86:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   32f8a:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   32f8c:	462a      	mov	r2, r5
   32f8e:	4631      	mov	r1, r6
   32f90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   32f94:	f7ff ff8f 	bl	32eb6 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   32f98:	b140      	cbz	r0, 32fac <publish_encode+0x68>
}
   32f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   32f9e:	4629      	mov	r1, r5
   32fa0:	8ab8      	ldrh	r0, [r7, #20]
   32fa2:	f7ff ff5b 	bl	32e5c <pack_uint16>
		if (err_code != 0) {
   32fa6:	2800      	cmp	r0, #0
   32fa8:	d0e3      	beq.n	32f72 <publish_encode+0x2e>
   32faa:	e7f6      	b.n	32f9a <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   32fac:	686b      	ldr	r3, [r5, #4]
   32fae:	693a      	ldr	r2, [r7, #16]
   32fb0:	1a9b      	subs	r3, r3, r2
   32fb2:	606b      	str	r3, [r5, #4]
	return 0;
   32fb4:	e7f1      	b.n	32f9a <publish_encode+0x56>
		return -EINVAL;
   32fb6:	f06f 0015 	mvn.w	r0, #21
   32fba:	e7ee      	b.n	32f9a <publish_encode+0x56>

00032fbc <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   32fbc:	460a      	mov	r2, r1
   32fbe:	8801      	ldrh	r1, [r0, #0]
   32fc0:	2040      	movs	r0, #64	; 0x40
   32fc2:	f7ff bfa9 	b.w	32f18 <mqtt_message_id_only_enc>

00032fc6 <publish_release_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   32fc6:	460a      	mov	r2, r1
   32fc8:	8801      	ldrh	r1, [r0, #0]
   32fca:	2062      	movs	r0, #98	; 0x62
   32fcc:	f7ff bfa4 	b.w	32f18 <mqtt_message_id_only_enc>

00032fd0 <subscribe_encode>:
{
   32fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32fd4:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   32fd6:	88c0      	ldrh	r0, [r0, #6]
{
   32fd8:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   32fda:	b330      	cbz	r0, 3302a <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   32fdc:	680e      	ldr	r6, [r1, #0]
   32fde:	3605      	adds	r6, #5
   32fe0:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   32fe2:	f7ff ff3b 	bl	32e5c <pack_uint16>
	if (err_code != 0) {
   32fe6:	4604      	mov	r4, r0
   32fe8:	bb08      	cbnz	r0, 3302e <subscribe_encode+0x5e>
   32fea:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   32fee:	88bb      	ldrh	r3, [r7, #4]
   32ff0:	42a3      	cmp	r3, r4
   32ff2:	dc06      	bgt.n	33002 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   32ff4:	462a      	mov	r2, r5
   32ff6:	4631      	mov	r1, r6
}
   32ff8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   32ffc:	2082      	movs	r0, #130	; 0x82
   32ffe:	f7ff bf5a 	b.w	32eb6 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   33002:	fb09 f804 	mul.w	r8, r9, r4
   33006:	6838      	ldr	r0, [r7, #0]
   33008:	4629      	mov	r1, r5
   3300a:	4440      	add	r0, r8
   3300c:	f7ff ff38 	bl	32e80 <pack_utf8_str>
		if (err_code != 0) {
   33010:	b980      	cbnz	r0, 33034 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   33012:	683b      	ldr	r3, [r7, #0]
   33014:	4443      	add	r3, r8
   33016:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33018:	e9d5 3100 	ldrd	r3, r1, [r5]
   3301c:	4299      	cmp	r1, r3
   3301e:	d00b      	beq.n	33038 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   33020:	1c59      	adds	r1, r3, #1
   33022:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   33024:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   33026:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   33028:	e7e1      	b.n	32fee <subscribe_encode+0x1e>
		return -EINVAL;
   3302a:	f06f 0415 	mvn.w	r4, #21
}
   3302e:	4620      	mov	r0, r4
   33030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   33034:	4604      	mov	r4, r0
   33036:	e7fa      	b.n	3302e <subscribe_encode+0x5e>
		return -ENOMEM;
   33038:	f06f 040b 	mvn.w	r4, #11
   3303c:	e7f7      	b.n	3302e <subscribe_encode+0x5e>

0003303e <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3303e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33040:	460d      	mov	r5, r1
	u32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   33042:	e9d1 3100 	ldrd	r3, r1, [r1]
   33046:	1acb      	subs	r3, r1, r3
   33048:	4293      	cmp	r3, r2
{
   3304a:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3304c:	d301      	bcc.n	33052 <mqtt_read_message_chunk+0x14>
		return 0;
   3304e:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   33050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   33052:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   33054:	190f      	adds	r7, r1, r4
   33056:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   3305a:	4413      	add	r3, r2
   3305c:	429f      	cmp	r7, r3
   3305e:	d813      	bhi.n	33088 <mqtt_read_message_chunk+0x4a>
   33060:	4297      	cmp	r7, r2
   33062:	d311      	bcc.n	33088 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   33064:	2300      	movs	r3, #0
   33066:	4622      	mov	r2, r4
   33068:	f7e9 fa8e 	bl	1c588 <mqtt_transport_read>
	if (len < 0) {
   3306c:	2800      	cmp	r0, #0
   3306e:	dbef      	blt.n	33050 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   33070:	d00d      	beq.n	3308e <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   33072:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   33074:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   33076:	4403      	add	r3, r0
   33078:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3307a:	686b      	ldr	r3, [r5, #4]
   3307c:	4403      	add	r3, r0
   3307e:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   33080:	d2e5      	bcs.n	3304e <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   33082:	f06f 000a 	mvn.w	r0, #10
   33086:	e7e3      	b.n	33050 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   33088:	f06f 000b 	mvn.w	r0, #11
   3308c:	e7e0      	b.n	33050 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3308e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   33092:	e7dd      	b.n	33050 <mqtt_read_message_chunk+0x12>

00033094 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   33094:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   33096:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   33098:	69c2      	ldr	r2, [r0, #28]
{
   3309a:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3309c:	9302      	str	r3, [sp, #8]
{
   3309e:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   330a0:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   330a2:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   330a4:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   330a6:	a902      	add	r1, sp, #8
   330a8:	4628      	mov	r0, r5
   330aa:	f7ff ffc8 	bl	3303e <mqtt_read_message_chunk>
		if (err_code < 0) {
   330ae:	1e04      	subs	r4, r0, #0
   330b0:	db2b      	blt.n	3310a <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   330b2:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   330b4:	aa01      	add	r2, sp, #4
   330b6:	f10d 0103 	add.w	r1, sp, #3
   330ba:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   330bc:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   330be:	f7ff fe2f 	bl	32d20 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   330c2:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   330c6:	4604      	mov	r4, r0
		chunk_size = 1U;
   330c8:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   330cc:	d0eb      	beq.n	330a6 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   330ce:	2800      	cmp	r0, #0
   330d0:	db1f      	blt.n	33112 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   330d2:	f89d 6003 	ldrb.w	r6, [sp, #3]
   330d6:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   330da:	2b30      	cmp	r3, #48	; 0x30
   330dc:	d11c      	bne.n	33118 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   330de:	2202      	movs	r2, #2
   330e0:	a902      	add	r1, sp, #8
   330e2:	4628      	mov	r0, r5
   330e4:	f7ff ffab 	bl	3303e <mqtt_read_message_chunk>
	if (err_code < 0) {
   330e8:	1e04      	subs	r4, r0, #0
   330ea:	db0e      	blt.n	3310a <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   330ec:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   330ee:	f016 0f06 	tst.w	r6, #6
   330f2:	881a      	ldrh	r2, [r3, #0]
   330f4:	ba52      	rev16	r2, r2
   330f6:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   330f8:	bf0c      	ite	eq
   330fa:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   330fc:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   330fe:	a902      	add	r1, sp, #8
   33100:	4628      	mov	r0, r5
   33102:	f7ff ff9c 	bl	3303e <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   33106:	1e04      	subs	r4, r0, #0
   33108:	da08      	bge.n	3311c <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3310a:	f114 0f0b 	cmn.w	r4, #11
   3310e:	d100      	bne.n	33112 <mqtt_handle_rx+0x7e>
   33110:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   33112:	4620      	mov	r0, r4
   33114:	b00c      	add	sp, #48	; 0x30
   33116:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   33118:	9a01      	ldr	r2, [sp, #4]
   3311a:	e7f0      	b.n	330fe <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3311c:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3311e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   33122:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   33124:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   33128:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3312a:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3312c:	d063      	beq.n	331f6 <mqtt_handle_rx+0x162>
   3312e:	d813      	bhi.n	33158 <mqtt_handle_rx+0xc4>
   33130:	2b30      	cmp	r3, #48	; 0x30
   33132:	d04a      	beq.n	331ca <mqtt_handle_rx+0x136>
   33134:	d804      	bhi.n	33140 <mqtt_handle_rx+0xac>
   33136:	2b20      	cmp	r3, #32
   33138:	d02f      	beq.n	3319a <mqtt_handle_rx+0x106>
	client->internal.rx_buf_datalen = 0U;
   3313a:	2400      	movs	r4, #0
   3313c:	61ec      	str	r4, [r5, #28]
	return 0;
   3313e:	e7e8      	b.n	33112 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   33140:	2b40      	cmp	r3, #64	; 0x40
   33142:	d04e      	beq.n	331e2 <mqtt_handle_rx+0x14e>
   33144:	2b50      	cmp	r3, #80	; 0x50
   33146:	d1f8      	bne.n	3313a <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   33148:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3314a:	a905      	add	r1, sp, #20
   3314c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3314e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   33152:	f7ff fe6b 	bl	32e2c <publish_receive_decode>
   33156:	e04b      	b.n	331f0 <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   33158:	2b90      	cmp	r3, #144	; 0x90
   3315a:	d054      	beq.n	33206 <mqtt_handle_rx+0x172>
   3315c:	d809      	bhi.n	33172 <mqtt_handle_rx+0xde>
   3315e:	2b70      	cmp	r3, #112	; 0x70
   33160:	d1eb      	bne.n	3313a <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   33162:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   33164:	a905      	add	r1, sp, #20
   33166:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   33168:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3316c:	f7ff fe62 	bl	32e34 <publish_complete_decode>
   33170:	e03e      	b.n	331f0 <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   33172:	2bb0      	cmp	r3, #176	; 0xb0
   33174:	d04f      	beq.n	33216 <mqtt_handle_rx+0x182>
   33176:	2bd0      	cmp	r3, #208	; 0xd0
   33178:	d1df      	bne.n	3313a <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   3317a:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   3317e:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   33180:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   33182:	bfc8      	it	gt
   33184:	f103 32ff 	addgt.w	r2, r3, #4294967295	; 0xffffffff
		evt.type = MQTT_EVT_PINGRESP;
   33188:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3318c:	bfc8      	it	gt
   3318e:	b252      	sxtbgt	r2, r2
   33190:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   33194:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   33198:	e010      	b.n	331bc <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_CONNACK;
   3319a:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3319e:	a902      	add	r1, sp, #8
   331a0:	aa05      	add	r2, sp, #20
   331a2:	4628      	mov	r0, r5
   331a4:	f7ff fde7 	bl	32d76 <connect_ack_decode>
		if (err_code == 0) {
   331a8:	4604      	mov	r4, r0
   331aa:	bb10      	cbnz	r0, 331f2 <mqtt_handle_rx+0x15e>
			if (evt.param.connack.return_code ==
   331ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
   331b0:	b91a      	cbnz	r2, 331ba <mqtt_handle_rx+0x126>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   331b2:	69ab      	ldr	r3, [r5, #24]
   331b4:	f043 0304 	orr.w	r3, r3, #4
   331b8:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   331ba:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   331bc:	a904      	add	r1, sp, #16
   331be:	4628      	mov	r0, r5
   331c0:	f000 f8bb 	bl	3333a <event_notify>
	if (err_code < 0) {
   331c4:	2c00      	cmp	r4, #0
   331c6:	dab8      	bge.n	3313a <mqtt_handle_rx+0xa6>
   331c8:	e7a3      	b.n	33112 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   331ca:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   331cc:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   331ce:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   331d2:	ab05      	add	r3, sp, #20
   331d4:	f7ff fdea 	bl	32dac <publish_decode>
		client->internal.remaining_payload =
   331d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   331da:	4604      	mov	r4, r0
		evt.result = err_code;
   331dc:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   331de:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   331e0:	e7ec      	b.n	331bc <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBACK;
   331e2:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   331e4:	a905      	add	r1, sp, #20
   331e6:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   331e8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   331ec:	f7ff fe1c 	bl	32e28 <publish_ack_decode>
   331f0:	4604      	mov	r4, r0
		evt.result = err_code;
   331f2:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   331f4:	e7e2      	b.n	331bc <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBREL;
   331f6:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   331f8:	a905      	add	r1, sp, #20
   331fa:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   331fc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   33200:	f7ff fe16 	bl	32e30 <publish_release_decode>
   33204:	e7f4      	b.n	331f0 <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_SUBACK;
   33206:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   33208:	a905      	add	r1, sp, #20
   3320a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3320c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   33210:	f7ff fe12 	bl	32e38 <subscribe_ack_decode>
   33214:	e7ec      	b.n	331f0 <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_UNSUBACK;
   33216:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   33218:	a905      	add	r1, sp, #20
   3321a:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3321e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   33222:	f7ff fe19 	bl	32e58 <unsubscribe_ack_decode>
   33226:	e7e3      	b.n	331f0 <mqtt_handle_rx+0x15c>

00033228 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   33228:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3322a:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3322c:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   3322e:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   33230:	2206      	movs	r2, #6
   33232:	2101      	movs	r1, #1
   33234:	f7e4 f900 	bl	17438 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   33238:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   3323a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3323c:	da04      	bge.n	33248 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   3323e:	f7fd ff39 	bl	310b4 <__errno>
   33242:	6800      	ldr	r0, [r0, #0]
   33244:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   33246:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   33248:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   3324a:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   3324c:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   3324e:	bf14      	ite	ne
   33250:	2218      	movne	r2, #24
   33252:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   33254:	f7fc fbea 	bl	2fa2c <z_impl_zsock_connect>
	if (ret < 0) {
   33258:	2800      	cmp	r0, #0
   3325a:	da03      	bge.n	33264 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   3325c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3325e:	f7fc fbcc 	bl	2f9fa <z_impl_zsock_close>
   33262:	e7ec      	b.n	3323e <mqtt_client_tcp_connect+0x16>
	return 0;
   33264:	2000      	movs	r0, #0
   33266:	e7ee      	b.n	33246 <mqtt_client_tcp_connect+0x1e>

00033268 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   33268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   3326c:	2400      	movs	r4, #0
{
   3326e:	4607      	mov	r7, r0
   33270:	4688      	mov	r8, r1
   33272:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   33274:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   33276:	42ac      	cmp	r4, r5
   33278:	d301      	bcc.n	3327e <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3327a:	2000      	movs	r0, #0
   3327c:	e00e      	b.n	3329c <mqtt_client_tcp_write+0x34>
		ret = send(client->transport.tcp.sock, data + offset,
   3327e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   33280:	2300      	movs	r3, #0
   33282:	e9cd 6600 	strd	r6, r6, [sp]
   33286:	1b2a      	subs	r2, r5, r4
   33288:	eb08 0104 	add.w	r1, r8, r4
   3328c:	f7fc fbef 	bl	2fa6e <z_impl_zsock_sendto>
		if (ret < 0) {
   33290:	2800      	cmp	r0, #0
   33292:	da06      	bge.n	332a2 <mqtt_client_tcp_write+0x3a>
			return -errno;
   33294:	f7fd ff0e 	bl	310b4 <__errno>
   33298:	6800      	ldr	r0, [r0, #0]
   3329a:	4240      	negs	r0, r0
}
   3329c:	b002      	add	sp, #8
   3329e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   332a2:	4404      	add	r4, r0
   332a4:	e7e7      	b.n	33276 <mqtt_client_tcp_write+0xe>

000332a6 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   332a6:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   332a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   332aa:	2200      	movs	r2, #0
   332ac:	f7fc fc14 	bl	2fad8 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   332b0:	2800      	cmp	r0, #0
   332b2:	da04      	bge.n	332be <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   332b4:	f7fd fefe 	bl	310b4 <__errno>
   332b8:	6800      	ldr	r0, [r0, #0]
   332ba:	4240      	negs	r0, r0
	}

	return 0;
}
   332bc:	bd08      	pop	{r3, pc}
	return 0;
   332be:	2000      	movs	r0, #0
   332c0:	e7fc      	b.n	332bc <mqtt_client_tcp_write_msg+0x16>

000332c2 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   332c2:	b513      	push	{r0, r1, r4, lr}
   332c4:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   332c6:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   332c8:	bf14      	ite	ne
   332ca:	4623      	movne	r3, r4
   332cc:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   332ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   332d0:	e9cd 4400 	strd	r4, r4, [sp]
   332d4:	f7fc fc1d 	bl	2fb12 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   332d8:	2800      	cmp	r0, #0
   332da:	da03      	bge.n	332e4 <mqtt_client_tcp_read+0x22>
		return -errno;
   332dc:	f7fd feea 	bl	310b4 <__errno>
   332e0:	6800      	ldr	r0, [r0, #0]
   332e2:	4240      	negs	r0, r0
	}

	return ret;
}
   332e4:	b002      	add	sp, #8
   332e6:	bd10      	pop	{r4, pc}

000332e8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   332e8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   332ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   332ec:	f7fc fb85 	bl	2f9fa <z_impl_zsock_close>
	if (ret < 0) {
   332f0:	2800      	cmp	r0, #0
   332f2:	da04      	bge.n	332fe <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   332f4:	f7fd fede 	bl	310b4 <__errno>
   332f8:	6800      	ldr	r0, [r0, #0]
   332fa:	4240      	negs	r0, r0
	}

	return 0;
}
   332fc:	bd08      	pop	{r3, pc}
	return 0;
   332fe:	2000      	movs	r0, #0
   33300:	e7fc      	b.n	332fc <mqtt_client_tcp_disconnect+0x14>

00033302 <k_uptime_get>:
{
   33302:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   33304:	f001 fabe 	bl	34884 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   33308:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3330c:	fba0 2304 	umull	r2, r3, r0, r4
   33310:	fb04 3301 	mla	r3, r4, r1, r3
   33314:	0bd0      	lsrs	r0, r2, #15
}
   33316:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3331a:	0bd9      	lsrs	r1, r3, #15
   3331c:	bd10      	pop	{r4, pc}

0003331e <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3331e:	b538      	push	{r3, r4, r5, lr}
   33320:	4604      	mov	r4, r0
   33322:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   33324:	6f42      	ldr	r2, [r0, #116]	; 0x74
   33326:	2100      	movs	r1, #0
   33328:	6f00      	ldr	r0, [r0, #112]	; 0x70
   3332a:	f001 fbb3 	bl	34a94 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3332e:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   33330:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   33332:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   33334:	4413      	add	r3, r2
   33336:	606b      	str	r3, [r5, #4]
}
   33338:	bd38      	pop	{r3, r4, r5, pc}

0003333a <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3333a:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3333c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   3333e:	4604      	mov	r4, r0
   33340:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   33342:	b153      	cbz	r3, 3335a <event_notify+0x20>
		mqtt_mutex_unlock(client);
   33344:	f7e9 f938 	bl	1c5b8 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   33348:	4620      	mov	r0, r4
   3334a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3334c:	4629      	mov	r1, r5
   3334e:	4798      	blx	r3

		mqtt_mutex_lock(client);
   33350:	4620      	mov	r0, r4
	}
}
   33352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   33356:	f7e9 b95b 	b.w	1c610 <mqtt_mutex_lock>
}
   3335a:	bd38      	pop	{r3, r4, r5, pc}

0003335c <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3335c:	b530      	push	{r4, r5, lr}
   3335e:	4604      	mov	r4, r0
   33360:	b089      	sub	sp, #36	; 0x24
   33362:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   33364:	f7e9 f91e 	bl	1c5a4 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33368:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3336a:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3336c:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   33370:	bf12      	itee	ne
   33372:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   33374:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   33378:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3337c:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3337e:	bf16      	itet	ne
   33380:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   33384:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   33386:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   33388:	f7ff ffd7 	bl	3333a <event_notify>
	MQTT_STATE_INIT(client);
   3338c:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3338e:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   33392:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   33396:	b009      	add	sp, #36	; 0x24
   33398:	bd30      	pop	{r4, r5, pc}

0003339a <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3339a:	b538      	push	{r3, r4, r5, lr}
   3339c:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   3339e:	f7e9 f8d9 	bl	1c554 <mqtt_transport_write>
	if (err_code < 0) {
   333a2:	1e04      	subs	r4, r0, #0
   333a4:	da05      	bge.n	333b2 <client_write+0x18>
		MQTT_TRC("Transport write failed, err_code = %d, "
			 "closing connection", err_code);
		client_disconnect(client, err_code);
   333a6:	4621      	mov	r1, r4
   333a8:	4628      	mov	r0, r5
   333aa:	f7ff ffd7 	bl	3335c <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   333ae:	4620      	mov	r0, r4
   333b0:	bd38      	pop	{r3, r4, r5, pc}
	return (u32_t)k_uptime_get();
   333b2:	f7ff ffa6 	bl	33302 <k_uptime_get>
	return 0;
   333b6:	2400      	movs	r4, #0
   333b8:	6168      	str	r0, [r5, #20]
   333ba:	e7f8      	b.n	333ae <client_write+0x14>

000333bc <mqtt_client_init>:

	return 0;
}

void mqtt_client_init(struct mqtt_client *client)
{
   333bc:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   333be:	4604      	mov	r4, r0
   333c0:	b1a0      	cbz	r0, 333ec <mqtt_client_init+0x30>
   333c2:	2280      	movs	r2, #128	; 0x80
   333c4:	2100      	movs	r1, #0
   333c6:	f001 fb65 	bl	34a94 <memset>

	memset(client, 0, sizeof(*client));

	MQTT_STATE_INIT(client);
   333ca:	2300      	movs	r3, #0
   333cc:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   333ce:	4620      	mov	r0, r4
   333d0:	f001 f96e 	bl	346b0 <z_impl_k_mutex_init>
	mqtt_mutex_init(client);

	client->protocol_version = MQTT_VERSION_3_1_1;
   333d4:	2304      	movs	r3, #4
   333d6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = 1U;
   333da:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   333de:	f043 0302 	orr.w	r3, r3, #2
   333e2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   333e6:	233c      	movs	r3, #60	; 0x3c
   333e8:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   333ec:	bd10      	pop	{r4, pc}

000333ee <mqtt_connect>:
	return -ENOTSUP;
}
#endif

int mqtt_connect(struct mqtt_client *client)
{
   333ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;

	NULL_PARAM_CHECK(client);
   333f0:	4604      	mov	r4, r0
   333f2:	2800      	cmp	r0, #0
   333f4:	d03c      	beq.n	33470 <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   333f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   333f8:	2b00      	cmp	r3, #0
   333fa:	d039      	beq.n	33470 <mqtt_connect+0x82>

	mqtt_mutex_lock(client);
   333fc:	f7e9 f908 	bl	1c610 <mqtt_mutex_lock>

	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   33400:	6f23      	ldr	r3, [r4, #112]	; 0x70
   33402:	b393      	cbz	r3, 3346a <mqtt_connect+0x7c>
   33404:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   33406:	b383      	cbz	r3, 3346a <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   33408:	4620      	mov	r0, r4
   3340a:	f7e9 f899 	bl	1c540 <mqtt_transport_connect>
	if (err_code < 0) {
   3340e:	1e05      	subs	r5, r0, #0
   33410:	db25      	blt.n	3345e <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   33412:	4669      	mov	r1, sp
   33414:	4620      	mov	r0, r4
   33416:	f7ff ff82 	bl	3331e <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3341a:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3341c:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3341e:	f043 0302 	orr.w	r3, r3, #2
   33422:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   33424:	4620      	mov	r0, r4
   33426:	f7e8 ffe7 	bl	1c3f8 <connect_request_encode>
	if (err_code < 0) {
   3342a:	1e05      	subs	r5, r0, #0
   3342c:	db13      	blt.n	33456 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3342e:	e9dd 1200 	ldrd	r1, r2, [sp]
   33432:	4620      	mov	r0, r4
   33434:	1a52      	subs	r2, r2, r1
   33436:	f7e9 f88d 	bl	1c554 <mqtt_transport_write>
	if (err_code < 0) {
   3343a:	1e05      	subs	r5, r0, #0
   3343c:	db0b      	blt.n	33456 <mqtt_connect+0x68>
   3343e:	f7ff ff60 	bl	33302 <k_uptime_get>
	client->unacked_ping = 0;
   33442:	2500      	movs	r5, #0
   33444:	6160      	str	r0, [r4, #20]
   33446:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
error:
	if (err_code < 0) {
		client_reset(client);
	}

	mqtt_mutex_unlock(client);
   3344a:	4620      	mov	r0, r4
   3344c:	f7e9 f8b4 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   33450:	4628      	mov	r0, r5
   33452:	b003      	add	sp, #12
   33454:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   33456:	4629      	mov	r1, r5
   33458:	4620      	mov	r0, r4
   3345a:	f7ff ff7f 	bl	3335c <client_disconnect>
	MQTT_STATE_INIT(client);
   3345e:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   33460:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   33464:	e9c4 3307 	strd	r3, r3, [r4, #28]
   33468:	e7ef      	b.n	3344a <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   3346a:	f06f 050b 	mvn.w	r5, #11
   3346e:	e7f6      	b.n	3345e <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   33470:	f06f 0515 	mvn.w	r5, #21
   33474:	e7ec      	b.n	33450 <mqtt_connect+0x62>

00033476 <mqtt_publish>:
	return 0;
}

int mqtt_publish(struct mqtt_client *client,
		 const struct mqtt_publish_param *param)
{
   33476:	b570      	push	{r4, r5, r6, lr}
   33478:	460e      	mov	r6, r1
   3347a:	b08e      	sub	sp, #56	; 0x38
	int err_code;
	struct buf_ctx packet;
	struct iovec io_vector[2];
	struct msghdr msg;

	NULL_PARAM_CHECK(client);
   3347c:	4605      	mov	r5, r0
   3347e:	2800      	cmp	r0, #0
   33480:	d03b      	beq.n	334fa <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   33482:	2900      	cmp	r1, #0
   33484:	d039      	beq.n	334fa <mqtt_publish+0x84>
	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Topic size 0x%08x, "
		 "Data size 0x%08x", client, client->internal.state,
		 param->message.topic.topic.size,
		 param->message.payload.len);

	mqtt_mutex_lock(client);
   33486:	f7e9 f8c3 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3348a:	a901      	add	r1, sp, #4
   3348c:	4628      	mov	r0, r5
   3348e:	f7ff ff46 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33492:	69ab      	ldr	r3, [r5, #24]
   33494:	075b      	lsls	r3, r3, #29
   33496:	d52d      	bpl.n	334f4 <mqtt_publish+0x7e>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_encode(param, &packet);
   33498:	a901      	add	r1, sp, #4
   3349a:	4630      	mov	r0, r6
   3349c:	f7ff fd52 	bl	32f44 <publish_encode>
	if (err_code < 0) {
   334a0:	1e04      	subs	r4, r0, #0
   334a2:	db1c      	blt.n	334de <mqtt_publish+0x68>
		goto error;
	}

	io_vector[0].iov_base = packet.cur;
   334a4:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   334a6:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   334a8:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   334aa:	1a9b      	subs	r3, r3, r2
	io_vector[1].iov_base = param->message.payload.data;
	io_vector[1].iov_len = param->message.payload.len;

	memset(&msg, 0, sizeof(msg));
   334ac:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   334ae:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   334b0:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   334b2:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   334b4:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   334b6:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   334b8:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   334bc:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   334be:	f001 fae9 	bl	34a94 <memset>

	msg.msg_iov = io_vector;
   334c2:	ab03      	add	r3, sp, #12
   334c4:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   334c6:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   334c8:	a907      	add	r1, sp, #28
   334ca:	4628      	mov	r0, r5
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   334cc:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   334ce:	f7e9 f84d 	bl	1c56c <mqtt_transport_write_msg>
	if (err_code < 0) {
   334d2:	1e04      	subs	r4, r0, #0
   334d4:	da09      	bge.n	334ea <mqtt_publish+0x74>
		client_disconnect(client, err_code);
   334d6:	4621      	mov	r1, r4
   334d8:	4628      	mov	r0, r5
   334da:	f7ff ff3f 	bl	3335c <client_disconnect>

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
			 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   334de:	4628      	mov	r0, r5
   334e0:	f7e9 f86a 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   334e4:	4620      	mov	r0, r4
   334e6:	b00e      	add	sp, #56	; 0x38
   334e8:	bd70      	pop	{r4, r5, r6, pc}
   334ea:	f7ff ff0a 	bl	33302 <k_uptime_get>
	return 0;
   334ee:	2400      	movs	r4, #0
   334f0:	6168      	str	r0, [r5, #20]
   334f2:	e7f4      	b.n	334de <mqtt_publish+0x68>
		return -ENOTCONN;
   334f4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   334f8:	e7f1      	b.n	334de <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   334fa:	f06f 0415 	mvn.w	r4, #21
   334fe:	e7f1      	b.n	334e4 <mqtt_publish+0x6e>

00033500 <mqtt_publish_qos1_ack>:

int mqtt_publish_qos1_ack(struct mqtt_client *client,
			  const struct mqtt_puback_param *param)
{
   33500:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33502:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   33504:	4605      	mov	r5, r0
   33506:	b1f8      	cbz	r0, 33548 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   33508:	b1f1      	cbz	r1, 33548 <mqtt_publish_qos1_ack+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   3350a:	f7e9 f881 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3350e:	4669      	mov	r1, sp
   33510:	4628      	mov	r0, r5
   33512:	f7ff ff04 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33516:	69ab      	ldr	r3, [r5, #24]
   33518:	075b      	lsls	r3, r3, #29
   3351a:	d512      	bpl.n	33542 <mqtt_publish_qos1_ack+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_ack_encode(param, &packet);
   3351c:	4620      	mov	r0, r4
   3351e:	4669      	mov	r1, sp
   33520:	f7ff fd4c 	bl	32fbc <publish_ack_encode>
	if (err_code < 0) {
   33524:	1e04      	subs	r4, r0, #0
   33526:	db06      	blt.n	33536 <mqtt_publish_qos1_ack+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33528:	e9dd 1200 	ldrd	r1, r2, [sp]
   3352c:	4628      	mov	r0, r5
   3352e:	1a52      	subs	r2, r2, r1
   33530:	f7ff ff33 	bl	3339a <client_write>
   33534:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   33536:	4628      	mov	r0, r5
   33538:	f7e9 f83e 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   3353c:	4620      	mov	r0, r4
   3353e:	b003      	add	sp, #12
   33540:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   33542:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   33546:	e7f6      	b.n	33536 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   33548:	f06f 0415 	mvn.w	r4, #21
   3354c:	e7f6      	b.n	3353c <mqtt_publish_qos1_ack+0x3c>

0003354e <mqtt_publish_qos2_release>:
	return err_code;
}

int mqtt_publish_qos2_release(struct mqtt_client *client,
			      const struct mqtt_pubrel_param *param)
{
   3354e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33550:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   33552:	4605      	mov	r5, r0
   33554:	b1f8      	cbz	r0, 33596 <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   33556:	b1f1      	cbz	r1, 33596 <mqtt_publish_qos2_release+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   33558:	f7e9 f85a 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3355c:	4669      	mov	r1, sp
   3355e:	4628      	mov	r0, r5
   33560:	f7ff fedd 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33564:	69ab      	ldr	r3, [r5, #24]
   33566:	075b      	lsls	r3, r3, #29
   33568:	d512      	bpl.n	33590 <mqtt_publish_qos2_release+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_release_encode(param, &packet);
   3356a:	4620      	mov	r0, r4
   3356c:	4669      	mov	r1, sp
   3356e:	f7ff fd2a 	bl	32fc6 <publish_release_encode>
	if (err_code < 0) {
   33572:	1e04      	subs	r4, r0, #0
   33574:	db06      	blt.n	33584 <mqtt_publish_qos2_release+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33576:	e9dd 1200 	ldrd	r1, r2, [sp]
   3357a:	4628      	mov	r0, r5
   3357c:	1a52      	subs	r2, r2, r1
   3357e:	f7ff ff0c 	bl	3339a <client_write>
   33582:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   33584:	4628      	mov	r0, r5
   33586:	f7e9 f817 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   3358a:	4620      	mov	r0, r4
   3358c:	b003      	add	sp, #12
   3358e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   33590:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   33594:	e7f6      	b.n	33584 <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   33596:	f06f 0415 	mvn.w	r4, #21
   3359a:	e7f6      	b.n	3358a <mqtt_publish_qos2_release+0x3c>

0003359c <mqtt_disconnect>:

	return err_code;
}

int mqtt_disconnect(struct mqtt_client *client)
{
   3359c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   3359e:	4604      	mov	r4, r0
   335a0:	b310      	cbz	r0, 335e8 <mqtt_disconnect+0x4c>

	mqtt_mutex_lock(client);
   335a2:	f7e9 f835 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   335a6:	4669      	mov	r1, sp
   335a8:	4620      	mov	r0, r4
   335aa:	f7ff feb8 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   335ae:	69a3      	ldr	r3, [r4, #24]
   335b0:	075b      	lsls	r3, r3, #29
   335b2:	d516      	bpl.n	335e2 <mqtt_disconnect+0x46>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = disconnect_encode(&packet);
   335b4:	4668      	mov	r0, sp
   335b6:	f7e8 ff9f 	bl	1c4f8 <disconnect_encode>
	if (err_code < 0) {
   335ba:	1e05      	subs	r5, r0, #0
   335bc:	db0b      	blt.n	335d6 <mqtt_disconnect+0x3a>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   335be:	e9dd 1200 	ldrd	r1, r2, [sp]
   335c2:	4620      	mov	r0, r4
   335c4:	1a52      	subs	r2, r2, r1
   335c6:	f7ff fee8 	bl	3339a <client_write>
	if (err_code < 0) {
   335ca:	1e05      	subs	r5, r0, #0
   335cc:	db03      	blt.n	335d6 <mqtt_disconnect+0x3a>
		goto error;
	}

	client_disconnect(client, 0);
   335ce:	2100      	movs	r1, #0
   335d0:	4620      	mov	r0, r4
   335d2:	f7ff fec3 	bl	3335c <client_disconnect>

error:
	mqtt_mutex_unlock(client);
   335d6:	4620      	mov	r0, r4
   335d8:	f7e8 ffee 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   335dc:	4628      	mov	r0, r5
   335de:	b003      	add	sp, #12
   335e0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   335e2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   335e6:	e7f6      	b.n	335d6 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   335e8:	f06f 0515 	mvn.w	r5, #21
   335ec:	e7f6      	b.n	335dc <mqtt_disconnect+0x40>

000335ee <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_client *client,
		   const struct mqtt_subscription_list *param)
{
   335ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   335f0:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   335f2:	4605      	mov	r5, r0
   335f4:	b1f8      	cbz	r0, 33636 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   335f6:	b1f1      	cbz	r1, 33636 <mqtt_subscribe+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> message id 0x%04x "
		 "topic count 0x%04x", client, client->internal.state,
		 param->message_id, param->list_count);

	mqtt_mutex_lock(client);
   335f8:	f7e9 f80a 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   335fc:	4669      	mov	r1, sp
   335fe:	4628      	mov	r0, r5
   33600:	f7ff fe8d 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   33604:	69ab      	ldr	r3, [r5, #24]
   33606:	075b      	lsls	r3, r3, #29
   33608:	d512      	bpl.n	33630 <mqtt_subscribe+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = subscribe_encode(param, &packet);
   3360a:	4620      	mov	r0, r4
   3360c:	4669      	mov	r1, sp
   3360e:	f7ff fcdf 	bl	32fd0 <subscribe_encode>
	if (err_code < 0) {
   33612:	1e04      	subs	r4, r0, #0
   33614:	db06      	blt.n	33624 <mqtt_subscribe+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33616:	e9dd 1200 	ldrd	r1, r2, [sp]
   3361a:	4628      	mov	r0, r5
   3361c:	1a52      	subs	r2, r2, r1
   3361e:	f7ff febc 	bl	3339a <client_write>
   33622:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   33624:	4628      	mov	r0, r5
   33626:	f7e8 ffc7 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   3362a:	4620      	mov	r0, r4
   3362c:	b003      	add	sp, #12
   3362e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   33630:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   33634:	e7f6      	b.n	33624 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   33636:	f06f 0415 	mvn.w	r4, #21
   3363a:	e7f6      	b.n	3362a <mqtt_subscribe+0x3c>

0003363c <mqtt_ping>:

	return err_code;
}

int mqtt_ping(struct mqtt_client *client)
{
   3363c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   3363e:	4604      	mov	r4, r0
   33640:	b320      	cbz	r0, 3368c <mqtt_ping+0x50>

	mqtt_mutex_lock(client);
   33642:	f7e8 ffe5 	bl	1c610 <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   33646:	4669      	mov	r1, sp
   33648:	4620      	mov	r0, r4
   3364a:	f7ff fe68 	bl	3331e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3364e:	69a3      	ldr	r3, [r4, #24]
   33650:	075b      	lsls	r3, r3, #29
   33652:	d518      	bpl.n	33686 <mqtt_ping+0x4a>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = ping_request_encode(&packet);
   33654:	4668      	mov	r0, sp
   33656:	f7e8 ff61 	bl	1c51c <ping_request_encode>
	if (err_code < 0) {
   3365a:	1e05      	subs	r5, r0, #0
   3365c:	db0d      	blt.n	3367a <mqtt_ping+0x3e>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3365e:	e9dd 1200 	ldrd	r1, r2, [sp]
   33662:	4620      	mov	r0, r4
   33664:	1a52      	subs	r2, r2, r1
   33666:	f7ff fe98 	bl	3339a <client_write>

	if (client->unacked_ping >= INT8_MAX) {
   3366a:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3366e:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   33670:	2b7f      	cmp	r3, #127	; 0x7f
   33672:	d002      	beq.n	3367a <mqtt_ping+0x3e>
		MQTT_TRC("PING count overflow!");
	} else {
		client->unacked_ping++;
   33674:	3301      	adds	r3, #1
   33676:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
	}

error:
	mqtt_mutex_unlock(client);
   3367a:	4620      	mov	r0, r4
   3367c:	f7e8 ff9c 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   33680:	4628      	mov	r0, r5
   33682:	b003      	add	sp, #12
   33684:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   33686:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3368a:	e7f6      	b.n	3367a <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3368c:	f06f 0515 	mvn.w	r5, #21
   33690:	e7f6      	b.n	33680 <mqtt_ping+0x44>

00033692 <mqtt_live>:

	return 0;
}

int mqtt_live(struct mqtt_client *client)
{
   33692:	b570      	push	{r4, r5, r6, lr}
	int err_code = 0;
	u32_t elapsed_time;
	bool ping_sent = false;

	NULL_PARAM_CHECK(client);
   33694:	4606      	mov	r6, r0
   33696:	b300      	cbz	r0, 336da <mqtt_live+0x48>

	mqtt_mutex_lock(client);
   33698:	f7e8 ffba 	bl	1c610 <mqtt_mutex_lock>

	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3369c:	6974      	ldr	r4, [r6, #20]
   3369e:	f7ff fe30 	bl	33302 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   336a2:	1b00      	subs	r0, r0, r4
				client->internal.last_activity);
	if ((client->keepalive > 0) &&
   336a4:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   336a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   336ac:	b19c      	cbz	r4, 336d6 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   336ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   336b2:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   336b4:	4284      	cmp	r4, r0
   336b6:	d80d      	bhi.n	336d4 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   336b8:	4630      	mov	r0, r6
   336ba:	f7ff ffbf 	bl	3363c <mqtt_ping>
		ping_sent = true;
   336be:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   336c0:	4605      	mov	r5, r0
	}

	mqtt_mutex_unlock(client);
   336c2:	4630      	mov	r0, r6
   336c4:	f7e8 ff78 	bl	1c5b8 <mqtt_mutex_unlock>

	if (ping_sent) {
		return err_code;
	} else {
		return -EAGAIN;
   336c8:	2c00      	cmp	r4, #0
   336ca:	bf08      	it	eq
   336cc:	f06f 050a 	mvneq.w	r5, #10
	}
}
   336d0:	4628      	mov	r0, r5
   336d2:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   336d4:	2400      	movs	r4, #0
	int err_code = 0;
   336d6:	4625      	mov	r5, r4
   336d8:	e7f3      	b.n	336c2 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   336da:	f06f 0515 	mvn.w	r5, #21
   336de:	e7f7      	b.n	336d0 <mqtt_live+0x3e>

000336e0 <mqtt_input>:

	return keepalive_ms - elapsed_time;
}

int mqtt_input(struct mqtt_client *client)
{
   336e0:	b538      	push	{r3, r4, r5, lr}
	int err_code = 0;

	NULL_PARAM_CHECK(client);
   336e2:	4605      	mov	r5, r0
   336e4:	b1d0      	cbz	r0, 3371c <mqtt_input+0x3c>

	mqtt_mutex_lock(client);
   336e6:	f7e8 ff93 	bl	1c610 <mqtt_mutex_lock>

	MQTT_TRC("state:0x%08x", client->internal.state);

	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   336ea:	69ab      	ldr	r3, [r5, #24]
   336ec:	079b      	lsls	r3, r3, #30
   336ee:	d50f      	bpl.n	33710 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   336f0:	6a2b      	ldr	r3, [r5, #32]
   336f2:	b983      	cbnz	r3, 33716 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   336f4:	4628      	mov	r0, r5
   336f6:	f7ff fccd 	bl	33094 <mqtt_handle_rx>
	if (err_code < 0) {
   336fa:	1e04      	subs	r4, r0, #0
   336fc:	da03      	bge.n	33706 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   336fe:	4621      	mov	r1, r4
   33700:	4628      	mov	r0, r5
   33702:	f7ff fe2b 	bl	3335c <client_disconnect>
		err_code = client_read(client);
	} else {
		err_code = -EACCES;
	}

	mqtt_mutex_unlock(client);
   33706:	4628      	mov	r0, r5
   33708:	f7e8 ff56 	bl	1c5b8 <mqtt_mutex_unlock>

	return err_code;
}
   3370c:	4620      	mov	r0, r4
   3370e:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   33710:	f06f 040c 	mvn.w	r4, #12
   33714:	e7f7      	b.n	33706 <mqtt_input+0x26>
		return -EBUSY;
   33716:	f06f 040f 	mvn.w	r4, #15
   3371a:	e7f4      	b.n	33706 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3371c:	f06f 0415 	mvn.w	r4, #21
   33720:	e7f4      	b.n	3370c <mqtt_input+0x2c>

00033722 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   33722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   33724:	6d06      	ldr	r6, [r0, #80]	; 0x50
{
   33726:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   33728:	8830      	ldrh	r0, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   3372a:	f44f 7281 	mov.w	r2, #258	; 0x102
   3372e:	2101      	movs	r1, #1
   33730:	f7e3 fe82 	bl	17438 <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   33734:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   33736:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   33738:	da05      	bge.n	33746 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   3373a:	f7fd fcbb 	bl	310b4 <__errno>
   3373e:	6800      	ldr	r0, [r0, #0]
   33740:	4240      	negs	r0, r0
}
   33742:	b003      	add	sp, #12
   33744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   33746:	2304      	movs	r3, #4
   33748:	2205      	movs	r2, #5
   3374a:	9300      	str	r3, [sp, #0]
   3374c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   33750:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   33754:	f7fc fa0e 	bl	2fb74 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   33758:	2800      	cmp	r0, #0
   3375a:	da03      	bge.n	33764 <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   3375c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3375e:	f7fc f94c 	bl	2f9fa <z_impl_zsock_close>
   33762:	e7ea      	b.n	3373a <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   33764:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33766:	bb03      	cbnz	r3, 337aa <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   33768:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3376a:	bb63      	cbnz	r3, 337c6 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   3376c:	6c25      	ldr	r5, [r4, #64]	; 0x40
   3376e:	2d00      	cmp	r5, #0
   33770:	d137      	bne.n	337e2 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   33772:	6c63      	ldr	r3, [r4, #68]	; 0x44
   33774:	2b01      	cmp	r3, #1
   33776:	d10b      	bne.n	33790 <mqtt_client_tls_connect+0x6e>
   33778:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3377a:	2304      	movs	r3, #4
   3377c:	2207      	movs	r2, #7
   3377e:	9300      	str	r3, [sp, #0]
   33780:	f44f 718d 	mov.w	r1, #282	; 0x11a
   33784:	f104 0344 	add.w	r3, r4, #68	; 0x44
   33788:	f7fc f9f4 	bl	2fb74 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3378c:	2800      	cmp	r0, #0
   3378e:	dbe5      	blt.n	3375c <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   33790:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   33792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   33794:	2b01      	cmp	r3, #1
   33796:	bf0c      	ite	eq
   33798:	2208      	moveq	r2, #8
   3379a:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   3379c:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   3379e:	f7fc f945 	bl	2fa2c <z_impl_zsock_connect>
	if (ret < 0) {
   337a2:	2800      	cmp	r0, #0
   337a4:	dbda      	blt.n	3375c <mqtt_client_tls_connect+0x3a>
	return 0;
   337a6:	2000      	movs	r0, #0
   337a8:	e7cb      	b.n	33742 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   337aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
   337ac:	2a00      	cmp	r2, #0
   337ae:	d0db      	beq.n	33768 <mqtt_client_tls_connect+0x46>
   337b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   337b2:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   337b4:	9200      	str	r2, [sp, #0]
   337b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   337ba:	2203      	movs	r2, #3
   337bc:	f7fc f9da 	bl	2fb74 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   337c0:	2800      	cmp	r0, #0
   337c2:	dad1      	bge.n	33768 <mqtt_client_tls_connect+0x46>
   337c4:	e7ca      	b.n	3375c <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   337c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   337c8:	2a00      	cmp	r2, #0
   337ca:	d0cf      	beq.n	3376c <mqtt_client_tls_connect+0x4a>
   337cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   337ce:	0092      	lsls	r2, r2, #2
   337d0:	9200      	str	r2, [sp, #0]
   337d2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   337d6:	2201      	movs	r2, #1
   337d8:	f7fc f9cc 	bl	2fb74 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   337dc:	2800      	cmp	r0, #0
   337de:	dac5      	bge.n	3376c <mqtt_client_tls_connect+0x4a>
   337e0:	e7bc      	b.n	3375c <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   337e2:	4628      	mov	r0, r5
   337e4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   337e6:	f7de fc4b 	bl	12080 <strlen>
   337ea:	2202      	movs	r2, #2
   337ec:	9000      	str	r0, [sp, #0]
   337ee:	462b      	mov	r3, r5
   337f0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   337f4:	4638      	mov	r0, r7
   337f6:	f7fc f9bd 	bl	2fb74 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   337fa:	2800      	cmp	r0, #0
   337fc:	dab9      	bge.n	33772 <mqtt_client_tls_connect+0x50>
   337fe:	e7ad      	b.n	3375c <mqtt_client_tls_connect+0x3a>

00033800 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   33800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   33804:	2400      	movs	r4, #0
{
   33806:	4607      	mov	r7, r0
   33808:	4688      	mov	r8, r1
   3380a:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3380c:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   3380e:	42ac      	cmp	r4, r5
   33810:	d301      	bcc.n	33816 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   33812:	2000      	movs	r0, #0
   33814:	e00e      	b.n	33834 <mqtt_client_tls_write+0x34>
		ret = send(client->transport.tls.sock, data + offset,
   33816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   33818:	2300      	movs	r3, #0
   3381a:	e9cd 6600 	strd	r6, r6, [sp]
   3381e:	1b2a      	subs	r2, r5, r4
   33820:	eb08 0104 	add.w	r1, r8, r4
   33824:	f7fc f923 	bl	2fa6e <z_impl_zsock_sendto>
		if (ret < 0) {
   33828:	2800      	cmp	r0, #0
   3382a:	da06      	bge.n	3383a <mqtt_client_tls_write+0x3a>
			return -errno;
   3382c:	f7fd fc42 	bl	310b4 <__errno>
   33830:	6800      	ldr	r0, [r0, #0]
   33832:	4240      	negs	r0, r0
}
   33834:	b002      	add	sp, #8
   33836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3383a:	4404      	add	r4, r0
   3383c:	e7e7      	b.n	3380e <mqtt_client_tls_write+0xe>

0003383e <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3383e:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   33840:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   33842:	2200      	movs	r2, #0
   33844:	f7fc f948 	bl	2fad8 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   33848:	2800      	cmp	r0, #0
   3384a:	da04      	bge.n	33856 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   3384c:	f7fd fc32 	bl	310b4 <__errno>
   33850:	6800      	ldr	r0, [r0, #0]
   33852:	4240      	negs	r0, r0
	}

	return 0;
}
   33854:	bd08      	pop	{r3, pc}
	return 0;
   33856:	2000      	movs	r0, #0
   33858:	e7fc      	b.n	33854 <mqtt_client_tls_write_msg+0x16>

0003385a <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   3385a:	b513      	push	{r0, r1, r4, lr}
   3385c:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3385e:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   33860:	bf14      	ite	ne
   33862:	4623      	movne	r3, r4
   33864:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   33866:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   33868:	e9cd 4400 	strd	r4, r4, [sp]
   3386c:	f7fc f951 	bl	2fb12 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   33870:	2800      	cmp	r0, #0
   33872:	da03      	bge.n	3387c <mqtt_client_tls_read+0x22>
		return -errno;
   33874:	f7fd fc1e 	bl	310b4 <__errno>
   33878:	6800      	ldr	r0, [r0, #0]
   3387a:	4240      	negs	r0, r0
	}

	return ret;
}
   3387c:	b002      	add	sp, #8
   3387e:	bd10      	pop	{r4, pc}

00033880 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   33880:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   33882:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   33884:	f7fc f8b9 	bl	2f9fa <z_impl_zsock_close>
	if (ret < 0) {
   33888:	2800      	cmp	r0, #0
   3388a:	da04      	bge.n	33896 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3388c:	f7fd fc12 	bl	310b4 <__errno>
   33890:	6800      	ldr	r0, [r0, #0]
   33892:	4240      	negs	r0, r0
	}

	return 0;
}
   33894:	bd08      	pop	{r3, pc}
	return 0;
   33896:	2000      	movs	r0, #0
   33898:	e7fc      	b.n	33894 <mqtt_client_tls_disconnect+0x14>

0003389a <dns_init_resolver>:
	ret = dns_resolve_init(dns_resolve_get_default(), dns_servers, NULL);
	if (ret < 0) {
		NET_WARN("Cannot initialize DNS resolver (%d)", ret);
	}
#endif
}
   3389a:	4770      	bx	lr

0003389c <base64_char>:
	if (value < 26) {
   3389c:	2819      	cmp	r0, #25
   3389e:	dc01      	bgt.n	338a4 <base64_char+0x8>
		return value + 'A';
   338a0:	3041      	adds	r0, #65	; 0x41
   338a2:	4770      	bx	lr
	} else if (value < 52) {
   338a4:	2833      	cmp	r0, #51	; 0x33
   338a6:	dc01      	bgt.n	338ac <base64_char+0x10>
		return value + 'a' - 26;
   338a8:	3047      	adds	r0, #71	; 0x47
   338aa:	4770      	bx	lr
	} else if (value < 62) {
   338ac:	283d      	cmp	r0, #61	; 0x3d
   338ae:	dc01      	bgt.n	338b4 <base64_char+0x18>
		return value + '0' - 52;
   338b0:	3804      	subs	r0, #4
   338b2:	4770      	bx	lr
	} else if (value == 62) {
   338b4:	283e      	cmp	r0, #62	; 0x3e
		return '_';
   338b6:	bf0c      	ite	eq
   338b8:	202d      	moveq	r0, #45	; 0x2d
   338ba:	205f      	movne	r0, #95	; 0x5f
}
   338bc:	4770      	bx	lr

000338be <base64_outch>:
	if (st->overflowed) {
   338be:	7b02      	ldrb	r2, [r0, #12]
{
   338c0:	b510      	push	{r4, lr}
	if (st->overflowed) {
   338c2:	b922      	cbnz	r2, 338ce <base64_outch+0x10>
	if (st->len < 2) {
   338c4:	6883      	ldr	r3, [r0, #8]
   338c6:	2b01      	cmp	r3, #1
   338c8:	d802      	bhi.n	338d0 <base64_outch+0x12>
		st->overflowed = true;
   338ca:	2301      	movs	r3, #1
   338cc:	7303      	strb	r3, [r0, #12]
}
   338ce:	bd10      	pop	{r4, pc}
	*st->buf++ = ch;
   338d0:	6843      	ldr	r3, [r0, #4]
   338d2:	1c5c      	adds	r4, r3, #1
   338d4:	6044      	str	r4, [r0, #4]
   338d6:	7019      	strb	r1, [r3, #0]
	st->len--;
   338d8:	6883      	ldr	r3, [r0, #8]
   338da:	3b01      	subs	r3, #1
   338dc:	6083      	str	r3, [r0, #8]
	*st->buf = 0;
   338de:	6843      	ldr	r3, [r0, #4]
   338e0:	701a      	strb	r2, [r3, #0]
   338e2:	e7f4      	b.n	338ce <base64_outch+0x10>

000338e4 <base64_flush>:
	if (st->pending < 1) {
   338e4:	6903      	ldr	r3, [r0, #16]
{
   338e6:	b510      	push	{r4, lr}
	if (st->pending < 1) {
   338e8:	2b00      	cmp	r3, #0
{
   338ea:	4604      	mov	r4, r0
	if (st->pending < 1) {
   338ec:	dd35      	ble.n	3395a <base64_flush+0x76>
	base64_outch(st, base64_char(st->wip[0] >> 2));
   338ee:	7b40      	ldrb	r0, [r0, #13]
   338f0:	0880      	lsrs	r0, r0, #2
   338f2:	f7ff ffd3 	bl	3389c <base64_char>
   338f6:	b2c1      	uxtb	r1, r0
   338f8:	4620      	mov	r0, r4
   338fa:	f7ff ffe0 	bl	338be <base64_outch>
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   338fe:	7b63      	ldrb	r3, [r4, #13]
				(st->wip[1] >> 4)));
   33900:	7ba0      	ldrb	r0, [r4, #14]
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   33902:	011b      	lsls	r3, r3, #4
   33904:	f003 0330 	and.w	r3, r3, #48	; 0x30
   33908:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   3390c:	f7ff ffc6 	bl	3389c <base64_char>
   33910:	b2c1      	uxtb	r1, r0
   33912:	4620      	mov	r0, r4
   33914:	f7ff ffd3 	bl	338be <base64_outch>
	if (st->pending >= 2) {
   33918:	6923      	ldr	r3, [r4, #16]
   3391a:	2b01      	cmp	r3, #1
   3391c:	dd0c      	ble.n	33938 <base64_flush+0x54>
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   3391e:	7ba3      	ldrb	r3, [r4, #14]
				(st->wip[2] >> 6)));
   33920:	7be0      	ldrb	r0, [r4, #15]
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   33922:	009b      	lsls	r3, r3, #2
   33924:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   33928:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
   3392c:	f7ff ffb6 	bl	3389c <base64_char>
   33930:	b2c1      	uxtb	r1, r0
   33932:	4620      	mov	r0, r4
   33934:	f7ff ffc3 	bl	338be <base64_outch>
	if (st->pending >= 3) {
   33938:	6923      	ldr	r3, [r4, #16]
   3393a:	2b02      	cmp	r3, #2
   3393c:	dd08      	ble.n	33950 <base64_flush+0x6c>
		base64_outch(st, base64_char(st->wip[2] & 0x3f));
   3393e:	7be0      	ldrb	r0, [r4, #15]
   33940:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   33944:	f7ff ffaa 	bl	3389c <base64_char>
   33948:	b2c1      	uxtb	r1, r0
   3394a:	4620      	mov	r0, r4
   3394c:	f7ff ffb7 	bl	338be <base64_outch>
	st->pending = 0;
   33950:	2300      	movs	r3, #0
   33952:	6123      	str	r3, [r4, #16]
   33954:	f8a4 300d 	strh.w	r3, [r4, #13]
   33958:	73e3      	strb	r3, [r4, #15]
}
   3395a:	bd10      	pop	{r4, pc}

0003395c <base64_append_bytes>:
{
   3395c:	b570      	push	{r4, r5, r6, lr}
   3395e:	4604      	mov	r4, r0
   33960:	4615      	mov	r5, r2
	while (len-- > 0) {
   33962:	1846      	adds	r6, r0, r1
   33964:	42b4      	cmp	r4, r6
   33966:	d101      	bne.n	3396c <base64_append_bytes+0x10>
}
   33968:	2000      	movs	r0, #0
   3396a:	bd70      	pop	{r4, r5, r6, pc}
	st->wip[st->pending++] = byte;
   3396c:	692b      	ldr	r3, [r5, #16]
		base64_addbyte(st, *bytes++);
   3396e:	f814 1b01 	ldrb.w	r1, [r4], #1
	st->wip[st->pending++] = byte;
   33972:	1c5a      	adds	r2, r3, #1
	if (st->pending == 3) {
   33974:	2a03      	cmp	r2, #3
	st->wip[st->pending++] = byte;
   33976:	442b      	add	r3, r5
   33978:	612a      	str	r2, [r5, #16]
   3397a:	7359      	strb	r1, [r3, #13]
	if (st->pending == 3) {
   3397c:	d1f2      	bne.n	33964 <base64_append_bytes+0x8>
		base64_flush(st);
   3397e:	4628      	mov	r0, r5
   33980:	f7ff ffb0 	bl	338e4 <base64_flush>
   33984:	e7ee      	b.n	33964 <base64_append_bytes+0x8>

00033986 <nrf_gpio_pin_present_check>:
    switch (port)
   33986:	0943      	lsrs	r3, r0, #5
   33988:	bf0c      	ite	eq
   3398a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3398e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   33990:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33994:	fa23 f000 	lsr.w	r0, r3, r0
}
   33998:	f000 0001 	and.w	r0, r0, #1
   3399c:	4770      	bx	lr

0003399e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3399e:	6843      	ldr	r3, [r0, #4]
}
   339a0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   339a4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   339a6:	600b      	str	r3, [r1, #0]
}
   339a8:	4770      	bx	lr

000339aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339aa:	6843      	ldr	r3, [r0, #4]
   339ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   339ae:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   339b0:	4042      	eors	r2, r0
   339b2:	400a      	ands	r2, r1
   339b4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   339b6:	605a      	str	r2, [r3, #4]
}
   339b8:	2000      	movs	r0, #0
   339ba:	4770      	bx	lr

000339bc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339bc:	6843      	ldr	r3, [r0, #4]
}
   339be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   339c2:	6099      	str	r1, [r3, #8]
}
   339c4:	4770      	bx	lr

000339c6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339c6:	6843      	ldr	r3, [r0, #4]
}
   339c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   339cc:	60d9      	str	r1, [r3, #12]
}
   339ce:	4770      	bx	lr

000339d0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339d0:	6843      	ldr	r3, [r0, #4]
}
   339d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   339d4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   339d6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   339d8:	4059      	eors	r1, r3
    p_reg->OUT = value;
   339da:	6051      	str	r1, [r2, #4]
}
   339dc:	4770      	bx	lr

000339de <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   339de:	2301      	movs	r3, #1
{
   339e0:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   339e2:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   339e4:	fa03 f201 	lsl.w	r2, r3, r1
   339e8:	6923      	ldr	r3, [r4, #16]
   339ea:	ea23 0302 	bic.w	r3, r3, r2
   339ee:	6123      	str	r3, [r4, #16]
}
   339f0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   339f4:	f7e9 b81a 	b.w	1ca2c <gpiote_pin_int_cfg>

000339f8 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   339f8:	2301      	movs	r3, #1
{
   339fa:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   339fc:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   339fe:	fa03 f201 	lsl.w	r2, r3, r1
   33a02:	6923      	ldr	r3, [r4, #16]
   33a04:	4313      	orrs	r3, r2
   33a06:	6123      	str	r3, [r4, #16]
}
   33a08:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   33a0c:	f7e9 b80e 	b.w	1ca2c <gpiote_pin_int_cfg>

00033a10 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   33a10:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   33a12:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   33a14:	d405      	bmi.n	33a22 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   33a16:	f3c1 0242 	ubfx	r2, r1, #1, #3
   33a1a:	2a01      	cmp	r2, #1
   33a1c:	d004      	beq.n	33a28 <i2c_nrfx_twim_configure+0x18>
   33a1e:	2a02      	cmp	r2, #2
   33a20:	d00b      	beq.n	33a3a <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   33a22:	f06f 0015 	mvn.w	r0, #21
}
   33a26:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   33a28:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   33a2c:	681b      	ldr	r3, [r3, #0]
   33a2e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   33a32:	68c3      	ldr	r3, [r0, #12]
	return 0;
   33a34:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   33a36:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   33a38:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   33a3a:	681b      	ldr	r3, [r3, #0]
   33a3c:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   33a40:	e7f5      	b.n	33a2e <i2c_nrfx_twim_configure+0x1e>

00033a42 <_spi_context_cs_control.isra.6>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   33a42:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   33a44:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   33a46:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   33a48:	b324      	cbz	r4, 33a94 <_spi_context_cs_control.isra.6+0x52>
   33a4a:	68a3      	ldr	r3, [r4, #8]
   33a4c:	b313      	cbz	r3, 33a94 <_spi_context_cs_control.isra.6+0x52>
   33a4e:	6818      	ldr	r0, [r3, #0]
   33a50:	b300      	cbz	r0, 33a94 <_spi_context_cs_control.isra.6+0x52>
		if (on) {
   33a52:	b161      	cbz	r1, 33a6e <_spi_context_cs_control.isra.6+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   33a54:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
   33a58:	7919      	ldrb	r1, [r3, #4]
   33a5a:	0fd2      	lsrs	r2, r2, #31
   33a5c:	f7e9 fa24 	bl	1cea8 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   33a60:	682b      	ldr	r3, [r5, #0]
   33a62:	689b      	ldr	r3, [r3, #8]
   33a64:	6898      	ldr	r0, [r3, #8]
}
   33a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   33a6a:	f000 be96 	b.w	3479a <z_impl_k_busy_wait>
			if (!force_off &&
   33a6e:	b912      	cbnz	r2, 33a76 <_spi_context_cs_control.isra.6+0x34>
   33a70:	88a2      	ldrh	r2, [r4, #4]
   33a72:	0492      	lsls	r2, r2, #18
   33a74:	d40e      	bmi.n	33a94 <_spi_context_cs_control.isra.6+0x52>
			k_busy_wait(ctx->config->cs->delay);
   33a76:	6898      	ldr	r0, [r3, #8]
   33a78:	f000 fe8f 	bl	3479a <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   33a7c:	682a      	ldr	r2, [r5, #0]
   33a7e:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   33a80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
   33a84:	7919      	ldrb	r1, [r3, #4]
   33a86:	43d2      	mvns	r2, r2
   33a88:	6818      	ldr	r0, [r3, #0]
   33a8a:	0fd2      	lsrs	r2, r2, #31
}
   33a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   33a90:	f7e9 ba0a 	b.w	1cea8 <gpio_pin_set>
}
   33a94:	bd38      	pop	{r3, r4, r5, pc}

00033a96 <spi_context_unlock_unconditionally>:
{
   33a96:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   33a98:	2201      	movs	r2, #1
   33a9a:	2100      	movs	r1, #0
{
   33a9c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   33a9e:	f7ff ffd0 	bl	33a42 <_spi_context_cs_control.isra.6>
	if (!k_sem_count_get(&ctx->lock)) {
   33aa2:	68e3      	ldr	r3, [r4, #12]
   33aa4:	b923      	cbnz	r3, 33ab0 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   33aa6:	1d20      	adds	r0, r4, #4
}
   33aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33aac:	f7f6 bef0 	b.w	2a890 <z_impl_k_sem_give>
   33ab0:	bd10      	pop	{r4, pc}

00033ab2 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   33ab2:	68c0      	ldr	r0, [r0, #12]
{
   33ab4:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   33ab6:	6803      	ldr	r3, [r0, #0]
   33ab8:	428b      	cmp	r3, r1
   33aba:	d106      	bne.n	33aca <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   33abc:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   33ac0:	b934      	cbnz	r4, 33ad0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   33ac2:	f7ff ffe8 	bl	33a96 <spi_context_unlock_unconditionally>
	return 0;
   33ac6:	4620      	mov	r0, r4
}
   33ac8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33aca:	f06f 0015 	mvn.w	r0, #21
   33ace:	e7fb      	b.n	33ac8 <spi_nrfx_release+0x16>
		return -EBUSY;
   33ad0:	f06f 000f 	mvn.w	r0, #15
   33ad4:	e7f8      	b.n	33ac8 <spi_nrfx_release+0x16>

00033ad6 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   33ad6:	7803      	ldrb	r3, [r0, #0]
{
   33ad8:	b410      	push	{r4}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   33ada:	2b00      	cmp	r3, #0
   33adc:	d138      	bne.n	33b50 <event_handler+0x7a>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   33ade:	68cb      	ldr	r3, [r1, #12]
	if (!ctx->tx_len) {
   33ae0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   33ae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   33ae4:	b180      	cbz	r0, 33b08 <event_handler+0x32>
	if (len > ctx->tx_len) {
   33ae6:	4282      	cmp	r2, r0
   33ae8:	d80e      	bhi.n	33b08 <event_handler+0x32>
	ctx->tx_len -= len;
   33aea:	1a80      	subs	r0, r0, r2
   33aec:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->tx_len) {
   33aee:	bb18      	cbnz	r0, 33b38 <event_handler+0x62>
		ctx->tx_count--;
   33af0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   33af2:	3801      	subs	r0, #1
   33af4:	63d8      	str	r0, [r3, #60]	; 0x3c
		if (ctx->tx_count) {
   33af6:	b318      	cbz	r0, 33b40 <event_handler+0x6a>
			ctx->current_tx++;
   33af8:	6b98      	ldr	r0, [r3, #56]	; 0x38
   33afa:	f100 0408 	add.w	r4, r0, #8
   33afe:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   33b00:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   33b02:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   33b04:	649c      	str	r4, [r3, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   33b06:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->rx_len) {
   33b08:	6d58      	ldr	r0, [r3, #84]	; 0x54
   33b0a:	b180      	cbz	r0, 33b2e <event_handler+0x58>
	if (len > ctx->rx_len) {
   33b0c:	4282      	cmp	r2, r0
   33b0e:	d80e      	bhi.n	33b2e <event_handler+0x58>
	ctx->rx_len -= len;
   33b10:	1a80      	subs	r0, r0, r2
   33b12:	6558      	str	r0, [r3, #84]	; 0x54
	if (!ctx->rx_len) {
   33b14:	b9b0      	cbnz	r0, 33b44 <event_handler+0x6e>
		ctx->rx_count--;
   33b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33b18:	3a01      	subs	r2, #1
   33b1a:	645a      	str	r2, [r3, #68]	; 0x44
		if (ctx->rx_count) {
   33b1c:	b1b2      	cbz	r2, 33b4c <event_handler+0x76>
			ctx->current_rx++;
   33b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   33b20:	f102 0008 	add.w	r0, r2, #8
   33b24:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   33b26:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   33b28:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   33b2a:	6518      	str	r0, [r3, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   33b2c:	655a      	str	r2, [r3, #84]	; 0x54
		transfer_next_chunk(dev);
   33b2e:	4608      	mov	r0, r1
}
   33b30:	f85d 4b04 	ldr.w	r4, [sp], #4
		transfer_next_chunk(dev);
   33b34:	f7e9 ba1e 	b.w	1cf74 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   33b38:	6c98      	ldr	r0, [r3, #72]	; 0x48
   33b3a:	2800      	cmp	r0, #0
   33b3c:	d0e4      	beq.n	33b08 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   33b3e:	4410      	add	r0, r2
   33b40:	6498      	str	r0, [r3, #72]	; 0x48
   33b42:	e7e1      	b.n	33b08 <event_handler+0x32>
	} else if (ctx->rx_buf) {
   33b44:	6d18      	ldr	r0, [r3, #80]	; 0x50
   33b46:	2800      	cmp	r0, #0
   33b48:	d0f1      	beq.n	33b2e <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   33b4a:	4402      	add	r2, r0
   33b4c:	651a      	str	r2, [r3, #80]	; 0x50
   33b4e:	e7ee      	b.n	33b2e <event_handler+0x58>
}
   33b50:	f85d 4b04 	ldr.w	r4, [sp], #4
   33b54:	4770      	bx	lr

00033b56 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   33b56:	2000      	movs	r0, #0
   33b58:	4770      	bx	lr

00033b5a <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   33b5a:	4668      	mov	r0, sp
   33b5c:	f020 0107 	bic.w	r1, r0, #7
   33b60:	468d      	mov	sp, r1
   33b62:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   33b64:	f7eb fd3c 	bl	1f5e0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   33b68:	f7e5 f874 	bl	18c54 <_arch_isr_direct_pm>
   33b6c:	f7e5 fa56 	bl	1901c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   33b70:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   33b74:	4685      	mov	sp, r0
   33b76:	4770      	bx	lr

00033b78 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   33b78:	4668      	mov	r0, sp
   33b7a:	f020 0107 	bic.w	r1, r0, #7
   33b7e:	468d      	mov	sp, r1
   33b80:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   33b82:	f7ec f857 	bl	1fc34 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   33b86:	f7e5 f865 	bl	18c54 <_arch_isr_direct_pm>
   33b8a:	f7e5 fa47 	bl	1901c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   33b8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   33b92:	4685      	mov	sp, r0
   33b94:	4770      	bx	lr

00033b96 <trace_task_create>:
{
   33b96:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   33b98:	201d      	movs	r0, #29
   33b9a:	2200      	movs	r2, #0
   33b9c:	2106      	movs	r1, #6
   33b9e:	f7e5 f827 	bl	18bf0 <z_arm_irq_priority_set>
}
   33ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   33ba6:	201d      	movs	r0, #29
   33ba8:	f7e5 b812 	b.w	18bd0 <arch_irq_enable>

00033bac <read_task_create>:
{
   33bac:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   33bae:	201c      	movs	r0, #28
   33bb0:	2200      	movs	r2, #0
   33bb2:	2106      	movs	r1, #6
   33bb4:	f7e5 f81c 	bl	18bf0 <z_arm_irq_priority_set>
}
   33bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   33bbc:	201c      	movs	r0, #28
   33bbe:	f7e5 b807 	b.w	18bd0 <arch_irq_enable>

00033bc2 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   33bc2:	2000      	movs	r0, #0
   33bc4:	4770      	bx	lr

00033bc6 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   33bc6:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   33bca:	bf18      	it	ne
   33bcc:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   33bce:	0781      	lsls	r1, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   33bd0:	bf48      	it	mi
   33bd2:	f043 0308 	orrmi.w	r3, r3, #8
	if (z_flags & MSG_TRUNC) {
   33bd6:	06c2      	lsls	r2, r0, #27
		nrf_flags |= NRF_MSG_TRUNC;
   33bd8:	bf48      	it	mi
   33bda:	f043 0320 	orrmi.w	r3, r3, #32
}
   33bde:	4618      	mov	r0, r3
   33be0:	4770      	bx	lr

00033be2 <z_to_nrf_family>:
	switch (z_family) {
   33be2:	2803      	cmp	r0, #3
   33be4:	d00f      	beq.n	33c06 <z_to_nrf_family+0x24>
   33be6:	d808      	bhi.n	33bfa <z_to_nrf_family+0x18>
   33be8:	2801      	cmp	r0, #1
   33bea:	d00e      	beq.n	33c0a <z_to_nrf_family+0x28>
   33bec:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   33bee:	bf08      	it	eq
   33bf0:	200a      	moveq	r0, #10
   33bf2:	bf18      	it	ne
   33bf4:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   33bf8:	4770      	bx	lr
	switch (z_family) {
   33bfa:	2806      	cmp	r0, #6
   33bfc:	d007      	beq.n	33c0e <z_to_nrf_family+0x2c>
   33bfe:	2866      	cmp	r0, #102	; 0x66
		return -EAFNOSUPPORT;
   33c00:	bf08      	it	eq
   33c02:	2066      	moveq	r0, #102	; 0x66
   33c04:	e7f5      	b.n	33bf2 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   33c06:	2005      	movs	r0, #5
   33c08:	4770      	bx	lr
		return NRF_AF_INET;
   33c0a:	2002      	movs	r0, #2
   33c0c:	4770      	bx	lr
		return NRF_AF_LOCAL;
   33c0e:	2001      	movs	r0, #1
}
   33c10:	4770      	bx	lr

00033c12 <z_to_nrf_protocol>:
	switch (proto) {
   33c12:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   33c16:	d01d      	beq.n	33c54 <z_to_nrf_protocol+0x42>
   33c18:	dc08      	bgt.n	33c2c <z_to_nrf_protocol+0x1a>
   33c1a:	2806      	cmp	r0, #6
   33c1c:	d01d      	beq.n	33c5a <z_to_nrf_protocol+0x48>
   33c1e:	2811      	cmp	r0, #17
   33c20:	d01d      	beq.n	33c5e <z_to_nrf_protocol+0x4c>
   33c22:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   33c24:	bf18      	it	ne
   33c26:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   33c2a:	4770      	bx	lr
	switch (proto) {
   33c2c:	f240 2301 	movw	r3, #513	; 0x201
   33c30:	4298      	cmp	r0, r3
   33c32:	d015      	beq.n	33c60 <z_to_nrf_protocol+0x4e>
   33c34:	dc06      	bgt.n	33c44 <z_to_nrf_protocol+0x32>
   33c36:	f240 1311 	movw	r3, #273	; 0x111
   33c3a:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   33c3c:	bf08      	it	eq
   33c3e:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   33c42:	e7ef      	b.n	33c24 <z_to_nrf_protocol+0x12>
	switch (proto) {
   33c44:	f240 2302 	movw	r3, #514	; 0x202
   33c48:	4298      	cmp	r0, r3
   33c4a:	d009      	beq.n	33c60 <z_to_nrf_protocol+0x4e>
   33c4c:	f240 2303 	movw	r3, #515	; 0x203
   33c50:	4298      	cmp	r0, r3
   33c52:	e7e7      	b.n	33c24 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   33c54:	f44f 7082 	mov.w	r0, #260	; 0x104
   33c58:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   33c5a:	2001      	movs	r0, #1
   33c5c:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   33c5e:	2002      	movs	r0, #2
}
   33c60:	4770      	bx	lr

00033c62 <nrf91_socket_is_supported>:
}
   33c62:	2001      	movs	r0, #1
   33c64:	4770      	bx	lr

00033c66 <nrf91_bsdlib_socket_offload_init>:
}
   33c66:	2000      	movs	r0, #0
   33c68:	4770      	bx	lr

00033c6a <nrf91_socket_offload_getsockopt>:
{
   33c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c6e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   33c70:	2300      	movs	r3, #0
{
   33c72:	b086      	sub	sp, #24
   33c74:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   33c78:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   33c7c:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   33c80:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   33c84:	460c      	mov	r4, r1
   33c86:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   33c88:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   33c8c:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   33c8e:	d002      	beq.n	33c96 <nrf91_socket_offload_getsockopt+0x2c>
   33c90:	dc2d      	bgt.n	33cee <nrf91_socket_offload_getsockopt+0x84>
   33c92:	2901      	cmp	r1, #1
   33c94:	d140      	bne.n	33d18 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   33c96:	aa02      	add	r2, sp, #8
   33c98:	4631      	mov	r1, r6
   33c9a:	4620      	mov	r0, r4
   33c9c:	f7e9 fd02 	bl	1d6a4 <z_to_nrf_optname>
   33ca0:	2800      	cmp	r0, #0
   33ca2:	db39      	blt.n	33d18 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   33ca4:	2c01      	cmp	r4, #1
   33ca6:	d12a      	bne.n	33cfe <nrf91_socket_offload_getsockopt+0x94>
   33ca8:	f1a6 0314 	sub.w	r3, r6, #20
   33cac:	2b01      	cmp	r3, #1
   33cae:	d826      	bhi.n	33cfe <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   33cb0:	2308      	movs	r3, #8
   33cb2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   33cb4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   33cb6:	aa03      	add	r2, sp, #12
   33cb8:	9200      	str	r2, [sp, #0]
   33cba:	4638      	mov	r0, r7
   33cbc:	9a02      	ldr	r2, [sp, #8]
   33cbe:	4621      	mov	r1, r4
   33cc0:	f7f1 fe70 	bl	259a4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   33cc4:	4607      	mov	r7, r0
   33cc6:	b970      	cbnz	r0, 33ce6 <nrf91_socket_offload_getsockopt+0x7c>
   33cc8:	b16d      	cbz	r5, 33ce6 <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   33cca:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   33ccc:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   33cce:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   33cd2:	d108      	bne.n	33ce6 <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   33cd4:	2e04      	cmp	r6, #4
   33cd6:	d114      	bne.n	33d02 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   33cd8:	6828      	ldr	r0, [r5, #0]
   33cda:	f7e9 fbc9 	bl	1d470 <bsd_os_errno_set>
				*(int *)optval = errno;
   33cde:	f7fd f9e9 	bl	310b4 <__errno>
   33ce2:	6803      	ldr	r3, [r0, #0]
   33ce4:	602b      	str	r3, [r5, #0]
}
   33ce6:	4638      	mov	r0, r7
   33ce8:	b006      	add	sp, #24
   33cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   33cee:	f240 2302 	movw	r3, #514	; 0x202
   33cf2:	4299      	cmp	r1, r3
   33cf4:	d0cf      	beq.n	33c96 <nrf91_socket_offload_getsockopt+0x2c>
   33cf6:	f240 2303 	movw	r3, #515	; 0x203
   33cfa:	4299      	cmp	r1, r3
   33cfc:	e7ca      	b.n	33c94 <nrf91_socket_offload_getsockopt+0x2a>
   33cfe:	462b      	mov	r3, r5
   33d00:	e7d9      	b.n	33cb6 <nrf91_socket_offload_getsockopt+0x4c>
			} else if ((optname == SO_RCVTIMEO) ||
   33d02:	3e14      	subs	r6, #20
   33d04:	2e01      	cmp	r6, #1
   33d06:	d8ee      	bhi.n	33ce6 <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   33d08:	9b04      	ldr	r3, [sp, #16]
   33d0a:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   33d0c:	9b05      	ldr	r3, [sp, #20]
   33d0e:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   33d10:	2308      	movs	r3, #8
   33d12:	f8c8 3000 	str.w	r3, [r8]
   33d16:	e7e6      	b.n	33ce6 <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   33d18:	f7fd f9cc 	bl	310b4 <__errno>
   33d1c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   33d1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   33d22:	6003      	str	r3, [r0, #0]
	return retval;
   33d24:	e7df      	b.n	33ce6 <nrf91_socket_offload_getsockopt+0x7c>

00033d26 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   33d26:	3801      	subs	r0, #1
   33d28:	f7f1 bde8 	b.w	258fc <nrf_listen>

00033d2c <nrf91_socket_offload_freeaddrinfo>:
{
   33d2c:	b538      	push	{r3, r4, r5, lr}
   33d2e:	4604      	mov	r4, r0
	while (next != NULL) {
   33d30:	b904      	cbnz	r4, 33d34 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   33d32:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   33d34:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   33d36:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   33d38:	f000 fc90 	bl	3465c <k_free>
		k_free(this);
   33d3c:	4620      	mov	r0, r4
   33d3e:	f000 fc8d 	bl	3465c <k_free>
		next = next->ai_next;
   33d42:	462c      	mov	r4, r5
   33d44:	e7f4      	b.n	33d30 <nrf91_socket_offload_freeaddrinfo+0x4>

00033d46 <z_to_nrf_addrinfo_hints>:
{
   33d46:	b538      	push	{r3, r4, r5, lr}
   33d48:	460c      	mov	r4, r1
   33d4a:	4605      	mov	r5, r0
   33d4c:	221c      	movs	r2, #28
   33d4e:	2100      	movs	r1, #0
   33d50:	1d20      	adds	r0, r4, #4
   33d52:	f000 fe9f 	bl	34a94 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   33d56:	2300      	movs	r3, #0
   33d58:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   33d5a:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   33d5c:	2b03      	cmp	r3, #3
   33d5e:	d003      	beq.n	33d68 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   33d60:	2b04      	cmp	r3, #4
   33d62:	bf08      	it	eq
   33d64:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   33d68:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   33d6a:	8928      	ldrh	r0, [r5, #8]
   33d6c:	f7ff ff39 	bl	33be2 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   33d70:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   33d74:	d00b      	beq.n	33d8e <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   33d76:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   33d78:	6928      	ldr	r0, [r5, #16]
   33d7a:	f7ff ff4a 	bl	33c12 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   33d7e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   33d82:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   33d84:	d003      	beq.n	33d8e <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   33d86:	69e8      	ldr	r0, [r5, #28]
   33d88:	b108      	cbz	r0, 33d8e <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   33d8a:	61a0      	str	r0, [r4, #24]
	return 0;
   33d8c:	2000      	movs	r0, #0
}
   33d8e:	bd38      	pop	{r3, r4, r5, pc}

00033d90 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   33d90:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   33d92:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   33d94:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   33d96:	4603      	mov	r3, r0
{
   33d98:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   33d9a:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33d9e:	f101 0210 	add.w	r2, r1, #16
   33da2:	f102 0410 	add.w	r4, r2, #16
   33da6:	f852 5b04 	ldr.w	r5, [r2], #4
   33daa:	42a2      	cmp	r2, r4
   33dac:	f843 5b04 	str.w	r5, [r3], #4
   33db0:	d1f9      	bne.n	33da6 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   33db2:	6a0b      	ldr	r3, [r1, #32]
   33db4:	7503      	strb	r3, [r0, #20]
}
   33db6:	bd30      	pop	{r4, r5, pc}

00033db8 <nrf91_socket_offload_recvfrom>:
{
   33db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int sd = OBJ_TO_SD(obj);
   33dbc:	1e45      	subs	r5, r0, #1
{
   33dbe:	b08d      	sub	sp, #52	; 0x34
   33dc0:	4618      	mov	r0, r3
   33dc2:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   33dc6:	4688      	mov	r8, r1
   33dc8:	4691      	mov	r9, r2
   33dca:	f7ff fefc 	bl	33bc6 <z_to_nrf_flags>
   33dce:	4603      	mov	r3, r0
	if (from == NULL) {
   33dd0:	b95c      	cbnz	r4, 33dea <nrf91_socket_offload_recvfrom+0x32>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   33dd2:	4628      	mov	r0, r5
   33dd4:	e9cd 4400 	strd	r4, r4, [sp]
   33dd8:	464a      	mov	r2, r9
   33dda:	4641      	mov	r1, r8
   33ddc:	f7f1 fd60 	bl	258a0 <nrf_recvfrom>
   33de0:	4605      	mov	r5, r0
}
   33de2:	4628      	mov	r0, r5
   33de4:	b00d      	add	sp, #52	; 0x34
   33de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   33dea:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   33dec:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   33dee:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   33df0:	aa02      	add	r2, sp, #8
   33df2:	9201      	str	r2, [sp, #4]
   33df4:	4628      	mov	r0, r5
   33df6:	9700      	str	r7, [sp, #0]
   33df8:	464a      	mov	r2, r9
   33dfa:	4641      	mov	r1, r8
   33dfc:	f7f1 fd50 	bl	258a0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   33e00:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   33e02:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   33e04:	2b02      	cmp	r3, #2
   33e06:	d109      	bne.n	33e1c <nrf91_socket_offload_recvfrom+0x64>
	ptr->sin_port = nrf_in->sin_port;
   33e08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   33e0c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   33e0e:	2301      	movs	r3, #1
   33e10:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   33e12:	9b06      	ldr	r3, [sp, #24]
   33e14:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   33e16:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   33e18:	6033      	str	r3, [r6, #0]
	return retval;
   33e1a:	e7e2      	b.n	33de2 <nrf91_socket_offload_recvfrom+0x2a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   33e1c:	2b0a      	cmp	r3, #10
   33e1e:	d1e0      	bne.n	33de2 <nrf91_socket_offload_recvfrom+0x2a>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   33e20:	4639      	mov	r1, r7
   33e22:	4620      	mov	r0, r4
   33e24:	f7ff ffb4 	bl	33d90 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   33e28:	2318      	movs	r3, #24
   33e2a:	e7f5      	b.n	33e18 <nrf91_socket_offload_recvfrom+0x60>

00033e2c <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   33e2c:	2300      	movs	r3, #0
{
   33e2e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   33e30:	e9cd 3300 	strd	r3, r3, [sp]
   33e34:	f7ff ffc0 	bl	33db8 <nrf91_socket_offload_recvfrom>
}
   33e38:	b003      	add	sp, #12
   33e3a:	f85d fb04 	ldr.w	pc, [sp], #4

00033e3e <nrf91_socket_offload_getaddrinfo>:
{
   33e3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33e42:	4614      	mov	r4, r2
   33e44:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   33e46:	2100      	movs	r1, #0
{
   33e48:	b093      	sub	sp, #76	; 0x4c
   33e4a:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   33e4c:	2220      	movs	r2, #32
   33e4e:	a802      	add	r0, sp, #8
{
   33e50:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   33e52:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   33e54:	f000 fe1e 	bl	34a94 <memset>
	if (hints != NULL) {
   33e58:	b194      	cbz	r4, 33e80 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   33e5a:	a902      	add	r1, sp, #8
   33e5c:	4620      	mov	r0, r4
   33e5e:	f7ff ff72 	bl	33d46 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   33e62:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   33e66:	f000 80c1 	beq.w	33fec <nrf91_socket_offload_getaddrinfo+0x1ae>
		} else if (error == -EAFNOSUPPORT) {
   33e6a:	306a      	adds	r0, #106	; 0x6a
   33e6c:	f000 80c1 	beq.w	33ff2 <nrf91_socket_offload_getaddrinfo+0x1b4>
		if (hints->ai_next != NULL) {
   33e70:	6820      	ldr	r0, [r4, #0]
   33e72:	b120      	cbz	r0, 33e7e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   33e74:	ac0a      	add	r4, sp, #40	; 0x28
   33e76:	4621      	mov	r1, r4
   33e78:	f7ff ff65 	bl	33d46 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   33e7c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   33e7e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   33e80:	4628      	mov	r0, r5
   33e82:	ab01      	add	r3, sp, #4
   33e84:	4622      	mov	r2, r4
   33e86:	4631      	mov	r1, r6
   33e88:	f7f1 fda8 	bl	259dc <nrf_getaddrinfo>
	if (retval != 0) {
   33e8c:	4605      	mov	r5, r0
   33e8e:	b1b0      	cbz	r0, 33ebe <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   33e90:	2823      	cmp	r0, #35	; 0x23
   33e92:	f000 80b1 	beq.w	33ff8 <nrf91_socket_offload_getaddrinfo+0x1ba>
   33e96:	dc0a      	bgt.n	33eae <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   33e98:	280c      	cmp	r0, #12
   33e9a:	bf08      	it	eq
   33e9c:	f06f 0509 	mvneq.w	r5, #9
   33ea0:	bf18      	it	ne
   33ea2:	f06f 050a 	mvnne.w	r5, #10
}
   33ea6:	4628      	mov	r0, r5
   33ea8:	b013      	add	sp, #76	; 0x4c
   33eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   33eae:	282f      	cmp	r0, #47	; 0x2f
   33eb0:	f000 80a5 	beq.w	33ffe <nrf91_socket_offload_getaddrinfo+0x1c0>
		return DNS_EAI_SYSTEM;
   33eb4:	2873      	cmp	r0, #115	; 0x73
   33eb6:	bf08      	it	eq
   33eb8:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   33ebc:	e7f0      	b.n	33ea0 <nrf91_socket_offload_getaddrinfo+0x62>
	struct zsock_addrinfo *latest_z_res = NULL;
   33ebe:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   33ec0:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   33ec2:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   33ec4:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   33ec6:	b91e      	cbnz	r6, 33ed0 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   33ec8:	9801      	ldr	r0, [sp, #4]
   33eca:	f7f1 fd89 	bl	259e0 <nrf_freeaddrinfo>
	return retval;
   33ece:	e7ea      	b.n	33ea6 <nrf91_socket_offload_getaddrinfo+0x68>
					k_malloc(sizeof(struct zsock_addrinfo));
   33ed0:	2040      	movs	r0, #64	; 0x40
   33ed2:	f7f4 fe53 	bl	28b7c <k_malloc>
		if (next_z_res == NULL) {
   33ed6:	4604      	mov	r4, r0
   33ed8:	2800      	cmp	r0, #0
   33eda:	d07c      	beq.n	33fd6 <nrf91_socket_offload_getaddrinfo+0x198>
	family = nrf_to_z_family(nrf_in->ai_family);
   33edc:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   33ede:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   33ee0:	2a05      	cmp	r2, #5
	z_out->ai_next = NULL;
   33ee2:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   33ee6:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   33eea:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   33eee:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   33ef0:	d033      	beq.n	33f5a <nrf91_socket_offload_getaddrinfo+0x11c>
   33ef2:	dc09      	bgt.n	33f08 <nrf91_socket_offload_getaddrinfo+0xca>
   33ef4:	2a01      	cmp	r2, #1
   33ef6:	d032      	beq.n	33f5e <nrf91_socket_offload_getaddrinfo+0x120>
   33ef8:	2a02      	cmp	r2, #2
   33efa:	d032      	beq.n	33f62 <nrf91_socket_offload_getaddrinfo+0x124>
			k_free(next_z_res);
   33efc:	4620      	mov	r0, r4
   33efe:	f000 fbad 	bl	3465c <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   33f02:	f06f 0508 	mvn.w	r5, #8
   33f06:	e068      	b.n	33fda <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (nrf_family) {
   33f08:	2a0a      	cmp	r2, #10
   33f0a:	d02c      	beq.n	33f66 <nrf91_socket_offload_getaddrinfo+0x128>
   33f0c:	2a66      	cmp	r2, #102	; 0x66
   33f0e:	d1f5      	bne.n	33efc <nrf91_socket_offload_getaddrinfo+0xbe>
		return AF_LTE;
   33f10:	4613      	mov	r3, r2
	z_out->ai_family = family;
   33f12:	60a3      	str	r3, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   33f14:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   33f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   33f1a:	d045      	beq.n	33fa8 <nrf91_socket_offload_getaddrinfo+0x16a>
   33f1c:	dc25      	bgt.n	33f6a <nrf91_socket_offload_getaddrinfo+0x12c>
   33f1e:	2b01      	cmp	r3, #1
   33f20:	d047      	beq.n	33fb2 <nrf91_socket_offload_getaddrinfo+0x174>
   33f22:	2b02      	cmp	r3, #2
   33f24:	d043      	beq.n	33fae <nrf91_socket_offload_getaddrinfo+0x170>
   33f26:	bb43      	cbnz	r3, 33f7a <nrf91_socket_offload_getaddrinfo+0x13c>
	if (nrf_in->ai_family == NRF_AF_INET) {
   33f28:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   33f2a:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   33f2c:	d143      	bne.n	33fb6 <nrf91_socket_offload_getaddrinfo+0x178>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   33f2e:	2008      	movs	r0, #8
   33f30:	f7f4 fe24 	bl	28b7c <k_malloc>
   33f34:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   33f36:	2800      	cmp	r0, #0
   33f38:	d04a      	beq.n	33fd0 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   33f3a:	2308      	movs	r3, #8
   33f3c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   33f3e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   33f40:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   33f42:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   33f44:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   33f46:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   33f48:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   33f4a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   33f4c:	f1b8 0f00 	cmp.w	r8, #0
   33f50:	d149      	bne.n	33fe6 <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   33f52:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   33f54:	69f6      	ldr	r6, [r6, #28]
   33f56:	46a0      	mov	r8, r4
   33f58:	e7b5      	b.n	33ec6 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   33f5a:	2303      	movs	r3, #3
   33f5c:	e7d9      	b.n	33f12 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_LOCAL;
   33f5e:	2306      	movs	r3, #6
   33f60:	e7d7      	b.n	33f12 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET;
   33f62:	2301      	movs	r3, #1
   33f64:	e7d5      	b.n	33f12 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET6;
   33f66:	2302      	movs	r3, #2
   33f68:	e7d3      	b.n	33f12 <nrf91_socket_offload_getaddrinfo+0xd4>
	switch (proto) {
   33f6a:	f240 2101 	movw	r1, #513	; 0x201
   33f6e:	428b      	cmp	r3, r1
   33f70:	d0da      	beq.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33f72:	dc0d      	bgt.n	33f90 <nrf91_socket_offload_getaddrinfo+0x152>
   33f74:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   33f78:	d013      	beq.n	33fa2 <nrf91_socket_offload_getaddrinfo+0x164>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   33f7a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   33f7e:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   33f80:	2300      	movs	r3, #0
   33f82:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   33f84:	4620      	mov	r0, r4
   33f86:	f000 fb69 	bl	3465c <k_free>
			retval = DNS_EAI_SOCKTYPE;
   33f8a:	f06f 0506 	mvn.w	r5, #6
   33f8e:	e024      	b.n	33fda <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (proto) {
   33f90:	f240 2102 	movw	r1, #514	; 0x202
   33f94:	428b      	cmp	r3, r1
   33f96:	d0c7      	beq.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33f98:	f240 2103 	movw	r1, #515	; 0x203
   33f9c:	428b      	cmp	r3, r1
   33f9e:	d0c3      	beq.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33fa0:	e7eb      	b.n	33f7a <nrf91_socket_offload_getaddrinfo+0x13c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   33fa2:	f240 1311 	movw	r3, #273	; 0x111
   33fa6:	e7bf      	b.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33fa8:	f44f 7381 	mov.w	r3, #258	; 0x102
   33fac:	e7bc      	b.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33fae:	2311      	movs	r3, #17
   33fb0:	e7ba      	b.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
   33fb2:	2306      	movs	r3, #6
   33fb4:	e7b8      	b.n	33f28 <nrf91_socket_offload_getaddrinfo+0xea>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   33fb6:	2a0a      	cmp	r2, #10
   33fb8:	d1e4      	bne.n	33f84 <nrf91_socket_offload_getaddrinfo+0x146>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   33fba:	2018      	movs	r0, #24
   33fbc:	f7f4 fdde 	bl	28b7c <k_malloc>
   33fc0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   33fc2:	b128      	cbz	r0, 33fd0 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   33fc4:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   33fc6:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   33fc8:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   33fca:	f7ff fee1 	bl	33d90 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   33fce:	e7bd      	b.n	33f4c <nrf91_socket_offload_getaddrinfo+0x10e>
			k_free(next_z_res);
   33fd0:	4620      	mov	r0, r4
   33fd2:	f000 fb43 	bl	3465c <k_free>
			retval = DNS_EAI_MEMORY;
   33fd6:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   33fda:	6838      	ldr	r0, [r7, #0]
   33fdc:	f7ff fea6 	bl	33d2c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   33fe0:	2300      	movs	r3, #0
   33fe2:	603b      	str	r3, [r7, #0]
   33fe4:	e770      	b.n	33ec8 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   33fe6:	f8c8 4000 	str.w	r4, [r8]
   33fea:	e7b3      	b.n	33f54 <nrf91_socket_offload_getaddrinfo+0x116>
			return DNS_EAI_SOCKTYPE;
   33fec:	f06f 0506 	mvn.w	r5, #6
   33ff0:	e759      	b.n	33ea6 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   33ff2:	f06f 0508 	mvn.w	r5, #8
   33ff6:	e756      	b.n	33ea6 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   33ff8:	f06f 0502 	mvn.w	r5, #2
   33ffc:	e753      	b.n	33ea6 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   33ffe:	f06f 0501 	mvn.w	r5, #1
   34002:	e750      	b.n	33ea6 <nrf91_socket_offload_getaddrinfo+0x68>

00034004 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   34004:	2224      	movs	r2, #36	; 0x24
{
   34006:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   34008:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3400a:	8842      	ldrh	r2, [r0, #2]
{
   3400c:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3400e:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   34010:	220a      	movs	r2, #10
{
   34012:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   34014:	604a      	str	r2, [r1, #4]
   34016:	f101 0610 	add.w	r6, r1, #16
   3401a:	1d02      	adds	r2, r0, #4
   3401c:	f100 0714 	add.w	r7, r0, #20
   34020:	4635      	mov	r5, r6
   34022:	6810      	ldr	r0, [r2, #0]
   34024:	6851      	ldr	r1, [r2, #4]
   34026:	3208      	adds	r2, #8
   34028:	c503      	stmia	r5!, {r0, r1}
   3402a:	42ba      	cmp	r2, r7
   3402c:	462e      	mov	r6, r5
   3402e:	d1f7      	bne.n	34020 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   34030:	7d22      	ldrb	r2, [r4, #20]
   34032:	621a      	str	r2, [r3, #32]
}
   34034:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034036 <nrf91_socket_offload_sendto>:
{
   34036:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3403a:	b08d      	sub	sp, #52	; 0x34
   3403c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3403e:	460e      	mov	r6, r1
   34040:	4617      	mov	r7, r2
   34042:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   34044:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   34046:	b96c      	cbnz	r4, 34064 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   34048:	4618      	mov	r0, r3
   3404a:	f7ff fdbc 	bl	33bc6 <z_to_nrf_flags>
   3404e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   34052:	4603      	mov	r3, r0
   34054:	463a      	mov	r2, r7
   34056:	4631      	mov	r1, r6
   34058:	4628      	mov	r0, r5
   3405a:	f7f1 fc05 	bl	25868 <nrf_sendto>
}
   3405e:	b00d      	add	sp, #52	; 0x34
   34060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   34064:	8823      	ldrh	r3, [r4, #0]
   34066:	2b01      	cmp	r3, #1
   34068:	d112      	bne.n	34090 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   3406a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3406c:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   34070:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   34074:	2302      	movs	r3, #2
   34076:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34078:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3407a:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3407c:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3407e:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   34082:	f7ff fda0 	bl	33bc6 <z_to_nrf_flags>
   34086:	ab03      	add	r3, sp, #12
   34088:	f8cd 9004 	str.w	r9, [sp, #4]
   3408c:	9300      	str	r3, [sp, #0]
   3408e:	e7e0      	b.n	34052 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   34090:	2b02      	cmp	r3, #2
   34092:	d10c      	bne.n	340ae <nrf91_socket_offload_sendto+0x78>
		z_to_nrf_ipv6(to, &ipv6);
   34094:	f10d 090c 	add.w	r9, sp, #12
   34098:	4649      	mov	r1, r9
   3409a:	4620      	mov	r0, r4
   3409c:	f7ff ffb2 	bl	34004 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   340a0:	4640      	mov	r0, r8
   340a2:	f7ff fd90 	bl	33bc6 <z_to_nrf_flags>
   340a6:	2324      	movs	r3, #36	; 0x24
   340a8:	e9cd 9300 	strd	r9, r3, [sp]
   340ac:	e7d1      	b.n	34052 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   340ae:	f7fd f801 	bl	310b4 <__errno>
   340b2:	2386      	movs	r3, #134	; 0x86
   340b4:	6003      	str	r3, [r0, #0]
	return retval;
   340b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   340ba:	e7d0      	b.n	3405e <nrf91_socket_offload_sendto+0x28>

000340bc <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   340bc:	2300      	movs	r3, #0
{
   340be:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   340c0:	e9cd 3300 	strd	r3, r3, [sp]
   340c4:	f7ff ffb7 	bl	34036 <nrf91_socket_offload_sendto>
}
   340c8:	b003      	add	sp, #12
   340ca:	f85d fb04 	ldr.w	pc, [sp], #4

000340ce <nrf91_socket_offload_connect>:
{
   340ce:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   340d0:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   340d2:	8808      	ldrh	r0, [r1, #0]
{
   340d4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   340d6:	2801      	cmp	r0, #1
{
   340d8:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   340da:	d10f      	bne.n	340fc <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   340dc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   340de:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   340e0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   340e4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   340e6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   340e8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   340ec:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   340ee:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   340f0:	a901      	add	r1, sp, #4
   340f2:	4620      	mov	r0, r4
   340f4:	f7f1 fbf0 	bl	258d8 <nrf_connect>
}
   340f8:	b00a      	add	sp, #40	; 0x28
   340fa:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   340fc:	2802      	cmp	r0, #2
   340fe:	d105      	bne.n	3410c <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   34100:	a901      	add	r1, sp, #4
   34102:	4618      	mov	r0, r3
   34104:	f7ff ff7e 	bl	34004 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   34108:	2224      	movs	r2, #36	; 0x24
   3410a:	e7f1      	b.n	340f0 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3410c:	4620      	mov	r0, r4
   3410e:	f7f1 fbe3 	bl	258d8 <nrf_connect>
		if (retval < 0) {
   34112:	2800      	cmp	r0, #0
   34114:	daf0      	bge.n	340f8 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   34116:	f7fc ffcd 	bl	310b4 <__errno>
   3411a:	2386      	movs	r3, #134	; 0x86
   3411c:	6003      	str	r3, [r0, #0]
   3411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34122:	e7e9      	b.n	340f8 <nrf91_socket_offload_connect+0x2a>

00034124 <nrf91_socket_offload_setsockopt>:
{
   34124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   34128:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3412c:	b086      	sub	sp, #24
   3412e:	460c      	mov	r4, r1
   34130:	4615      	mov	r5, r2
   34132:	461e      	mov	r6, r3
   34134:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   34136:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   3413a:	d002      	beq.n	34142 <nrf91_socket_offload_setsockopt+0x1e>
   3413c:	dc1d      	bgt.n	3417a <nrf91_socket_offload_setsockopt+0x56>
   3413e:	2901      	cmp	r1, #1
   34140:	d12a      	bne.n	34198 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   34142:	aa03      	add	r2, sp, #12
   34144:	4629      	mov	r1, r5
   34146:	4620      	mov	r0, r4
   34148:	f7e9 faac 	bl	1d6a4 <z_to_nrf_optname>
   3414c:	2800      	cmp	r0, #0
   3414e:	db23      	blt.n	34198 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   34150:	2c01      	cmp	r4, #1
   34152:	d11a      	bne.n	3418a <nrf91_socket_offload_setsockopt+0x66>
   34154:	3d14      	subs	r5, #20
   34156:	2d01      	cmp	r5, #1
   34158:	d805      	bhi.n	34166 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(struct nrf_timeval);
   3415a:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3415c:	6833      	ldr	r3, [r6, #0]
   3415e:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   34160:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   34162:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   34164:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   34166:	9700      	str	r7, [sp, #0]
   34168:	4633      	mov	r3, r6
   3416a:	9a03      	ldr	r2, [sp, #12]
   3416c:	4621      	mov	r1, r4
   3416e:	4640      	mov	r0, r8
   34170:	f7f1 fbfc 	bl	2596c <nrf_setsockopt>
}
   34174:	b006      	add	sp, #24
   34176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3417a:	f240 2302 	movw	r3, #514	; 0x202
   3417e:	4299      	cmp	r1, r3
   34180:	d0df      	beq.n	34142 <nrf91_socket_offload_setsockopt+0x1e>
   34182:	f240 2303 	movw	r3, #515	; 0x203
   34186:	4299      	cmp	r1, r3
   34188:	e7da      	b.n	34140 <nrf91_socket_offload_setsockopt+0x1c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3418a:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3418e:	d1ea      	bne.n	34166 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   34190:	2d07      	cmp	r5, #7
   34192:	bf08      	it	eq
   34194:	2701      	moveq	r7, #1
   34196:	e7e6      	b.n	34166 <nrf91_socket_offload_setsockopt+0x42>
	errno = ENOPROTOOPT;
   34198:	f7fc ff8c 	bl	310b4 <__errno>
   3419c:	236d      	movs	r3, #109	; 0x6d
   3419e:	6003      	str	r3, [r0, #0]
   341a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   341a4:	e7e6      	b.n	34174 <nrf91_socket_offload_setsockopt+0x50>

000341a6 <nrf91_socket_offload_bind>:
{
   341a6:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   341a8:	880a      	ldrh	r2, [r1, #0]
{
   341aa:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   341ac:	2a01      	cmp	r2, #1
{
   341ae:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   341b0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   341b4:	d10f      	bne.n	341d6 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   341b6:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   341b8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   341ba:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   341be:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   341c0:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   341c2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   341c6:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   341c8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   341ca:	a901      	add	r1, sp, #4
   341cc:	4620      	mov	r0, r4
   341ce:	f7f1 fbbb 	bl	25948 <nrf_bind>
}
   341d2:	b00a      	add	sp, #40	; 0x28
   341d4:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   341d6:	2a02      	cmp	r2, #2
   341d8:	d105      	bne.n	341e6 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   341da:	a901      	add	r1, sp, #4
   341dc:	4618      	mov	r0, r3
   341de:	f7ff ff11 	bl	34004 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   341e2:	2224      	movs	r2, #36	; 0x24
   341e4:	e7f1      	b.n	341ca <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   341e6:	f7fc ff65 	bl	310b4 <__errno>
   341ea:	2386      	movs	r3, #134	; 0x86
   341ec:	6003      	str	r3, [r0, #0]
   341ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   341f2:	e7ee      	b.n	341d2 <nrf91_socket_offload_bind+0x2c>

000341f4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   341f4:	280d      	cmp	r0, #13
   341f6:	d004      	beq.n	34202 <is_lfcr+0xe>
   341f8:	f1a0 030a 	sub.w	r3, r0, #10
   341fc:	4258      	negs	r0, r3
   341fe:	4158      	adcs	r0, r3
   34200:	4770      	bx	lr
		return true;
   34202:	2001      	movs	r0, #1
}
   34204:	4770      	bx	lr

00034206 <skip_command_prefix>:
{
   34206:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   34208:	6802      	ldr	r2, [r0, #0]
{
   3420a:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   3420c:	1c93      	adds	r3, r2, #2
   3420e:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   34210:	7894      	ldrb	r4, [r2, #2]
   34212:	4620      	mov	r0, r4
   34214:	f7ff ffee 	bl	341f4 <is_lfcr>
   34218:	b910      	cbnz	r0, 34220 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3421a:	b10c      	cbz	r4, 34220 <skip_command_prefix+0x1a>
	(*cmd)++;
   3421c:	3203      	adds	r2, #3
   3421e:	600a      	str	r2, [r1, #0]
}
   34220:	bd10      	pop	{r4, pc}

00034222 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   34222:	6813      	ldr	r3, [r2, #0]
   34224:	f7e9 bff4 	b.w	1e210 <at_parser_max_params_from_str>

00034228 <at_params_list_init>:
{
   34228:	b538      	push	{r3, r4, r5, lr}
   3422a:	460d      	mov	r5, r1
	if (list == NULL) {
   3422c:	4604      	mov	r4, r0
   3422e:	b140      	cbz	r0, 34242 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   34230:	210c      	movs	r1, #12
   34232:	4628      	mov	r0, r5
   34234:	f000 fa17 	bl	34666 <k_calloc>
   34238:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3423a:	b128      	cbz	r0, 34248 <at_params_list_init+0x20>
	return 0;
   3423c:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3423e:	6025      	str	r5, [r4, #0]
}
   34240:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   34242:	f06f 0015 	mvn.w	r0, #21
   34246:	e7fb      	b.n	34240 <at_params_list_init+0x18>
		return -ENOMEM;
   34248:	f06f 000b 	mvn.w	r0, #11
   3424c:	e7f8      	b.n	34240 <at_params_list_init+0x18>

0003424e <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3424e:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   34250:	4604      	mov	r4, r0
   34252:	b148      	cbz	r0, 34268 <at_params_list_free+0x1a>
   34254:	6843      	ldr	r3, [r0, #4]
   34256:	b13b      	cbz	r3, 34268 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   34258:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3425a:	f7ea f8d5 	bl	1e408 <at_params_list_clear>
	list->param_count = 0;
   3425e:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   34260:	6860      	ldr	r0, [r4, #4]
   34262:	f000 f9fb 	bl	3465c <k_free>
	list->params = NULL;
   34266:	6065      	str	r5, [r4, #4]
}
   34268:	bd38      	pop	{r3, r4, r5, pc}

0003426a <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   3426a:	b538      	push	{r3, r4, r5, lr}
   3426c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3426e:	b910      	cbnz	r0, 34276 <at_params_short_put+0xc>
		return -EINVAL;
   34270:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   34274:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   34276:	6843      	ldr	r3, [r0, #4]
   34278:	2b00      	cmp	r3, #0
   3427a:	d0f9      	beq.n	34270 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3427c:	f7ea f858 	bl	1e330 <at_params_get>
	if (param == NULL) {
   34280:	4604      	mov	r4, r0
   34282:	2800      	cmp	r0, #0
   34284:	d0f4      	beq.n	34270 <at_params_short_put+0x6>
	at_param_clear(param);
   34286:	f7ea f89d 	bl	1e3c4 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3428a:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   3428c:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3428e:	7023      	strb	r3, [r4, #0]
	return 0;
   34290:	2000      	movs	r0, #0
   34292:	e7ef      	b.n	34274 <at_params_short_put+0xa>

00034294 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   34294:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   34296:	b910      	cbnz	r0, 3429e <at_params_empty_put+0xa>
		return -EINVAL;
   34298:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3429c:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3429e:	6843      	ldr	r3, [r0, #4]
   342a0:	2b00      	cmp	r3, #0
   342a2:	d0f9      	beq.n	34298 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   342a4:	f7ea f844 	bl	1e330 <at_params_get>
	if (param == NULL) {
   342a8:	4604      	mov	r4, r0
   342aa:	2800      	cmp	r0, #0
   342ac:	d0f4      	beq.n	34298 <at_params_empty_put+0x4>
	at_param_clear(param);
   342ae:	f7ea f889 	bl	1e3c4 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   342b2:	2305      	movs	r3, #5
	param->value.int_val = 0;
   342b4:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   342b6:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   342b8:	60a0      	str	r0, [r4, #8]
	return 0;
   342ba:	e7ef      	b.n	3429c <at_params_empty_put+0x8>

000342bc <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   342bc:	b538      	push	{r3, r4, r5, lr}
   342be:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   342c0:	b910      	cbnz	r0, 342c8 <at_params_int_put+0xc>
		return -EINVAL;
   342c2:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   342c6:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   342c8:	6843      	ldr	r3, [r0, #4]
   342ca:	2b00      	cmp	r3, #0
   342cc:	d0f9      	beq.n	342c2 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   342ce:	f7ea f82f 	bl	1e330 <at_params_get>
	if (param == NULL) {
   342d2:	4604      	mov	r4, r0
   342d4:	2800      	cmp	r0, #0
   342d6:	d0f4      	beq.n	342c2 <at_params_int_put+0x6>
	at_param_clear(param);
   342d8:	f7ea f874 	bl	1e3c4 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   342dc:	2302      	movs	r3, #2
	param->value.int_val = value;
   342de:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   342e0:	7023      	strb	r3, [r4, #0]
	return 0;
   342e2:	2000      	movs	r0, #0
   342e4:	e7ef      	b.n	342c6 <at_params_int_put+0xa>

000342e6 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   342e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   342e8:	4616      	mov	r6, r2
   342ea:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   342ec:	b910      	cbnz	r0, 342f4 <at_params_string_put+0xe>
		return -EINVAL;
   342ee:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   342f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   342f4:	6843      	ldr	r3, [r0, #4]
   342f6:	2b00      	cmp	r3, #0
   342f8:	d0f9      	beq.n	342ee <at_params_string_put+0x8>
   342fa:	2a00      	cmp	r2, #0
   342fc:	d0f7      	beq.n	342ee <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   342fe:	f7ea f817 	bl	1e330 <at_params_get>
	if (param == NULL) {
   34302:	4604      	mov	r4, r0
   34304:	2800      	cmp	r0, #0
   34306:	d0f2      	beq.n	342ee <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   34308:	1c68      	adds	r0, r5, #1
   3430a:	f7f4 fc37 	bl	28b7c <k_malloc>
	if (param_value == NULL) {
   3430e:	4607      	mov	r7, r0
   34310:	b160      	cbz	r0, 3432c <at_params_string_put+0x46>
   34312:	462a      	mov	r2, r5
   34314:	4631      	mov	r1, r6
   34316:	f000 fb83 	bl	34a20 <memcpy>
	at_param_clear(param);
   3431a:	4620      	mov	r0, r4
   3431c:	f7ea f852 	bl	1e3c4 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   34320:	2303      	movs	r3, #3
	param->size = str_len;
   34322:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   34324:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   34326:	60a7      	str	r7, [r4, #8]
	return 0;
   34328:	2000      	movs	r0, #0
   3432a:	e7e2      	b.n	342f2 <at_params_string_put+0xc>
		return -ENOMEM;
   3432c:	f06f 000b 	mvn.w	r0, #11
   34330:	e7df      	b.n	342f2 <at_params_string_put+0xc>

00034332 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   34332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34334:	4616      	mov	r6, r2
   34336:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   34338:	b910      	cbnz	r0, 34340 <at_params_array_put+0xe>
		return -EINVAL;
   3433a:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3433e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   34340:	6843      	ldr	r3, [r0, #4]
   34342:	2b00      	cmp	r3, #0
   34344:	d0f9      	beq.n	3433a <at_params_array_put+0x8>
   34346:	2a00      	cmp	r2, #0
   34348:	d0f7      	beq.n	3433a <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3434a:	f7e9 fff1 	bl	1e330 <at_params_get>
	if (param == NULL) {
   3434e:	4604      	mov	r4, r0
   34350:	2800      	cmp	r0, #0
   34352:	d0f2      	beq.n	3433a <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   34354:	4628      	mov	r0, r5
   34356:	f7f4 fc11 	bl	28b7c <k_malloc>
	if (param_value == NULL) {
   3435a:	4607      	mov	r7, r0
   3435c:	b160      	cbz	r0, 34378 <at_params_array_put+0x46>
   3435e:	462a      	mov	r2, r5
   34360:	4631      	mov	r1, r6
   34362:	f000 fb5d 	bl	34a20 <memcpy>
	at_param_clear(param);
   34366:	4620      	mov	r0, r4
   34368:	f7ea f82c 	bl	1e3c4 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3436c:	2304      	movs	r3, #4
	param->size = array_len;
   3436e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   34370:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   34372:	60a7      	str	r7, [r4, #8]
	return 0;
   34374:	2000      	movs	r0, #0
   34376:	e7e2      	b.n	3433e <at_params_array_put+0xc>
		return -ENOMEM;
   34378:	f06f 000b 	mvn.w	r0, #11
   3437c:	e7df      	b.n	3433e <at_params_array_put+0xc>

0003437e <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   3437e:	b510      	push	{r4, lr}
   34380:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   34382:	b910      	cbnz	r0, 3438a <at_params_short_get+0xc>
		return -EINVAL;
   34384:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   34388:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3438a:	6843      	ldr	r3, [r0, #4]
   3438c:	2b00      	cmp	r3, #0
   3438e:	d0f9      	beq.n	34384 <at_params_short_get+0x6>
   34390:	2a00      	cmp	r2, #0
   34392:	d0f7      	beq.n	34384 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   34394:	f7e9 ffcc 	bl	1e330 <at_params_get>
	if (param == NULL) {
   34398:	2800      	cmp	r0, #0
   3439a:	d0f3      	beq.n	34384 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3439c:	7803      	ldrb	r3, [r0, #0]
   3439e:	2b01      	cmp	r3, #1
   343a0:	d1f0      	bne.n	34384 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   343a2:	6883      	ldr	r3, [r0, #8]
	return 0;
   343a4:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   343a6:	8023      	strh	r3, [r4, #0]
	return 0;
   343a8:	e7ee      	b.n	34388 <at_params_short_get+0xa>

000343aa <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   343aa:	b510      	push	{r4, lr}
   343ac:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   343ae:	b910      	cbnz	r0, 343b6 <at_params_int_get+0xc>
		return -EINVAL;
   343b0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   343b4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   343b6:	6843      	ldr	r3, [r0, #4]
   343b8:	2b00      	cmp	r3, #0
   343ba:	d0f9      	beq.n	343b0 <at_params_int_get+0x6>
   343bc:	2a00      	cmp	r2, #0
   343be:	d0f7      	beq.n	343b0 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   343c0:	f7e9 ffb6 	bl	1e330 <at_params_get>
	if (param == NULL) {
   343c4:	2800      	cmp	r0, #0
   343c6:	d0f3      	beq.n	343b0 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   343c8:	7803      	ldrb	r3, [r0, #0]
   343ca:	3b01      	subs	r3, #1
   343cc:	2b01      	cmp	r3, #1
   343ce:	d8ef      	bhi.n	343b0 <at_params_int_get+0x6>
	*value = param->value.int_val;
   343d0:	6883      	ldr	r3, [r0, #8]
	return 0;
   343d2:	2000      	movs	r0, #0
	*value = param->value.int_val;
   343d4:	6023      	str	r3, [r4, #0]
	return 0;
   343d6:	e7ed      	b.n	343b4 <at_params_int_get+0xa>

000343d8 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   343d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   343da:	4616      	mov	r6, r2
   343dc:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   343de:	b910      	cbnz	r0, 343e6 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   343e0:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   343e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   343e6:	6843      	ldr	r3, [r0, #4]
   343e8:	2b00      	cmp	r3, #0
   343ea:	d0f9      	beq.n	343e0 <at_params_string_get+0x8>
   343ec:	2a00      	cmp	r2, #0
   343ee:	d0f7      	beq.n	343e0 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   343f0:	2c00      	cmp	r4, #0
   343f2:	d0f5      	beq.n	343e0 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   343f4:	f7e9 ff9c 	bl	1e330 <at_params_get>
	if (param == NULL) {
   343f8:	4607      	mov	r7, r0
   343fa:	2800      	cmp	r0, #0
   343fc:	d0f0      	beq.n	343e0 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   343fe:	7803      	ldrb	r3, [r0, #0]
   34400:	2b03      	cmp	r3, #3
   34402:	d1ed      	bne.n	343e0 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   34404:	f7e9 ffb6 	bl	1e374 <at_param_size>
	if (*len < param_len) {
   34408:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3440a:	4605      	mov	r5, r0
	if (*len < param_len) {
   3440c:	4283      	cmp	r3, r0
   3440e:	d307      	bcc.n	34420 <at_params_string_get+0x48>
   34410:	4602      	mov	r2, r0
   34412:	68b9      	ldr	r1, [r7, #8]
   34414:	4630      	mov	r0, r6
   34416:	f000 fb03 	bl	34a20 <memcpy>
	*len = param_len;
   3441a:	6025      	str	r5, [r4, #0]
	return 0;
   3441c:	2000      	movs	r0, #0
   3441e:	e7e1      	b.n	343e4 <at_params_string_get+0xc>
		return -ENOMEM;
   34420:	f06f 000b 	mvn.w	r0, #11
   34424:	e7de      	b.n	343e4 <at_params_string_get+0xc>

00034426 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   34426:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   34428:	4605      	mov	r5, r0
   3442a:	b180      	cbz	r0, 3444e <at_params_valid_count_get+0x28>
   3442c:	6843      	ldr	r3, [r0, #4]
   3442e:	b173      	cbz	r3, 3444e <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   34430:	2100      	movs	r1, #0
   34432:	f7e9 ff7d 	bl	1e330 <at_params_get>
	size_t valid_i = 0;
   34436:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   34438:	b108      	cbz	r0, 3443e <at_params_valid_count_get+0x18>
   3443a:	7803      	ldrb	r3, [r0, #0]
   3443c:	b90b      	cbnz	r3, 34442 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3443e:	4620      	mov	r0, r4
   34440:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   34442:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   34444:	4621      	mov	r1, r4
   34446:	4628      	mov	r0, r5
   34448:	f7e9 ff72 	bl	1e330 <at_params_get>
   3444c:	e7f4      	b.n	34438 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3444e:	f06f 0415 	mvn.w	r4, #21
   34452:	e7f4      	b.n	3443e <at_params_valid_count_get+0x18>

00034454 <response_is_valid.part.0>:
static bool response_is_valid(const char *response, size_t response_len,
   34454:	b570      	push	{r4, r5, r6, lr}
   34456:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   34458:	4610      	mov	r0, r2
static bool response_is_valid(const char *response, size_t response_len,
   3445a:	460d      	mov	r5, r1
   3445c:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   3445e:	f7dd fe0f 	bl	12080 <strlen>
   34462:	42a8      	cmp	r0, r5
   34464:	d808      	bhi.n	34478 <response_is_valid.part.0+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   34466:	462a      	mov	r2, r5
   34468:	4621      	mov	r1, r4
   3446a:	4630      	mov	r0, r6
   3446c:	f000 faca 	bl	34a04 <memcmp>
	if ((response_len < strlen(check)) ||
   34470:	fab0 f080 	clz	r0, r0
   34474:	0940      	lsrs	r0, r0, #5
}
   34476:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   34478:	2000      	movs	r0, #0
   3447a:	e7fc      	b.n	34476 <response_is_valid.part.0+0x22>

0003447c <lte_lc_init_and_connect>:
{
   3447c:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   3447e:	f7ea f893 	bl	1e5a8 <w_lte_lc_init>
	if (ret) {
   34482:	b920      	cbnz	r0, 3448e <lte_lc_init_and_connect+0x12>
}
   34484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   34488:	2001      	movs	r0, #1
   3448a:	f7ea b8db 	b.w	1e644 <w_lte_lc_connect>
}
   3448e:	bd08      	pop	{r3, pc}

00034490 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   34490:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   34492:	2000      	movs	r0, #0
   34494:	f7e4 fdd0 	bl	19038 <sys_arch_reboot>

00034498 <k_uptime_get>:
{
   34498:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3449a:	f000 f9f3 	bl	34884 <z_impl_k_uptime_ticks>
   3449e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   344a2:	fba0 2304 	umull	r2, r3, r0, r4
   344a6:	fb04 3301 	mla	r3, r4, r1, r3
   344aa:	0bd0      	lsrs	r0, r2, #15
}
   344ac:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   344b0:	0bd9      	lsrs	r1, r3, #15
   344b2:	bd10      	pop	{r4, pc}

000344b4 <date_time_now>:

int date_time_now(s64_t *unix_time_ms)
{
   344b4:	b510      	push	{r4, lr}
   344b6:	4604      	mov	r4, r0
	*unix_time_ms = k_uptime_get();
   344b8:	f7ff ffee 	bl	34498 <k_uptime_get>
   344bc:	e9c4 0100 	strd	r0, r1, [r4]

	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   344c0:	4620      	mov	r0, r4
}
   344c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   344c6:	f7ea bc4d 	b.w	1ed64 <date_time_uptime_to_unix_time_ms>

000344ca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   344ca:	4700      	bx	r0

000344cc <nrf_gpio_pin_clear>:
{
   344cc:	b510      	push	{r4, lr}
   344ce:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   344d0:	f7f2 ff8c 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   344d4:	2301      	movs	r3, #1
   344d6:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   344d8:	60c3      	str	r3, [r0, #12]
}
   344da:	bd10      	pop	{r4, pc}

000344dc <nrf_gpio_pin_set>:
{
   344dc:	b510      	push	{r4, lr}
   344de:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   344e0:	f7f2 ff84 	bl	273ec <nrf_gpio_pin_port_decode.isra.0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   344e4:	2301      	movs	r3, #1
   344e6:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   344e8:	6083      	str	r3, [r0, #8]
}
   344ea:	bd10      	pop	{r4, pc}

000344ec <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   344ec:	7b0b      	ldrb	r3, [r1, #12]
   344ee:	2b03      	cmp	r3, #3
   344f0:	d82a      	bhi.n	34548 <xfer_completeness_check+0x5c>
   344f2:	e8df f003 	tbb	[pc, r3]
   344f6:	2622      	.short	0x2622
   344f8:	021a      	.short	0x021a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   344fa:	688b      	ldr	r3, [r1, #8]
   344fc:	035a      	lsls	r2, r3, #13
   344fe:	d504      	bpl.n	3450a <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   34500:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   34504:	690a      	ldr	r2, [r1, #16]
   34506:	429a      	cmp	r2, r3
   34508:	d107      	bne.n	3451a <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3450a:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3450c:	035b      	lsls	r3, r3, #13
   3450e:	d41b      	bmi.n	34548 <xfer_completeness_check+0x5c>
   34510:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   34514:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   34516:	429a      	cmp	r2, r3
   34518:	d016      	beq.n	34548 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3451a:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3451c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3451e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   34522:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
   34526:	4618      	mov	r0, r3
   34528:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3452a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3452e:	690a      	ldr	r2, [r1, #16]
   34530:	429a      	cmp	r2, r3
   34532:	d1f2      	bne.n	3451a <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   34534:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   34538:	e7ec      	b.n	34514 <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   3453a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3453e:	690a      	ldr	r2, [r1, #16]
   34540:	e7e9      	b.n	34516 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   34542:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   34546:	e7fa      	b.n	3453e <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   34548:	2001      	movs	r0, #1
}
   3454a:	4770      	bx	lr

0003454c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   3454c:	f7fb bc1d 	b.w	2fd8a <z_clock_idle_exit>

00034550 <k_heap_init>:
{
   34550:	b410      	push	{r4}
   34552:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   34556:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3455a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   3455e:	f7fb b8db 	b.w	2f718 <sys_heap_init>

00034562 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   34562:	b570      	push	{r4, r5, r6, lr}
   34564:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   34566:	6800      	ldr	r0, [r0, #0]
{
   34568:	460e      	mov	r6, r1
	block->id.heap = p->heap;
   3456a:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   3456c:	461a      	mov	r2, r3
   3456e:	4621      	mov	r1, r4
{
   34570:	461d      	mov	r5, r3
	block->data = k_heap_alloc(p->heap, size, timeout);
   34572:	f7f3 ff67 	bl	28444 <k_heap_alloc>
   34576:	6030      	str	r0, [r6, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   34578:	b13c      	cbz	r4, 3458a <k_mem_pool_alloc+0x28>
   3457a:	b930      	cbnz	r0, 3458a <k_mem_pool_alloc+0x28>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   3457c:	2d00      	cmp	r5, #0
   3457e:	bf0c      	ite	eq
   34580:	f06f 000b 	mvneq.w	r0, #11
   34584:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   34588:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   3458a:	2000      	movs	r0, #0
   3458c:	e7fc      	b.n	34588 <k_mem_pool_alloc+0x26>

0003458e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   3458e:	e9d0 1000 	ldrd	r1, r0, [r0]
   34592:	f7f4 b807 	b.w	285a4 <k_heap_free>

00034596 <mbox_message_match>:
{
   34596:	460b      	mov	r3, r1
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   34598:	6a01      	ldr	r1, [r0, #32]
{
   3459a:	b530      	push	{r4, r5, lr}
   3459c:	4602      	mov	r2, r0
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   3459e:	b111      	cbz	r1, 345a6 <mbox_message_match+0x10>
   345a0:	6a18      	ldr	r0, [r3, #32]
   345a2:	4281      	cmp	r1, r0
   345a4:	d125      	bne.n	345f2 <mbox_message_match+0x5c>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   345a6:	69d8      	ldr	r0, [r3, #28]
   345a8:	69d1      	ldr	r1, [r2, #28]
	     (tx_msg->tx_target_thread == rx_msg->tx_target_thread)) &&
   345aa:	b108      	cbz	r0, 345b0 <mbox_message_match+0x1a>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   345ac:	4288      	cmp	r0, r1
   345ae:	d120      	bne.n	345f2 <mbox_message_match+0x5c>
		rx_msg->rx_source_thread = tx_msg->rx_source_thread;
   345b0:	61d9      	str	r1, [r3, #28]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   345b2:	6a19      	ldr	r1, [r3, #32]
		rx_msg->info = tx_msg->info;
   345b4:	6890      	ldr	r0, [r2, #8]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   345b6:	6211      	str	r1, [r2, #32]
		temp_info = rx_msg->info;
   345b8:	6899      	ldr	r1, [r3, #8]
		rx_msg->info = tx_msg->info;
   345ba:	6098      	str	r0, [r3, #8]
		tx_msg->info = temp_info;
   345bc:	6091      	str	r1, [r2, #8]
		if (rx_msg->size > tx_msg->size) {
   345be:	6858      	ldr	r0, [r3, #4]
   345c0:	6851      	ldr	r1, [r2, #4]
		rx_msg->tx_data = tx_msg->tx_data;
   345c2:	68d5      	ldr	r5, [r2, #12]
		if (rx_msg->size > tx_msg->size) {
   345c4:	4288      	cmp	r0, r1
			rx_msg->size = tx_msg->size;
   345c6:	bf88      	it	hi
   345c8:	6059      	strhi	r1, [r3, #4]
		rx_msg->tx_block = tx_msg->tx_block;
   345ca:	f103 0414 	add.w	r4, r3, #20
   345ce:	f102 0114 	add.w	r1, r2, #20
		rx_msg->tx_data = tx_msg->tx_data;
   345d2:	60dd      	str	r5, [r3, #12]
		rx_msg->tx_block = tx_msg->tx_block;
   345d4:	c903      	ldmia	r1, {r0, r1}
   345d6:	e884 0003 	stmia.w	r4, {r0, r1}
		if (rx_msg->tx_data != NULL) {
   345da:	b12d      	cbz	r5, 345e8 <mbox_message_match+0x52>
			rx_msg->tx_block.data = NULL;
   345dc:	2100      	movs	r1, #0
   345de:	6159      	str	r1, [r3, #20]
		return 0;
   345e0:	2000      	movs	r0, #0
		rx_msg->_syncing_thread = tx_msg->_syncing_thread;
   345e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
   345e4:	625a      	str	r2, [r3, #36]	; 0x24
}
   345e6:	bd30      	pop	{r4, r5, pc}
		} else if (rx_msg->tx_block.data != NULL) {
   345e8:	6959      	ldr	r1, [r3, #20]
   345ea:	2900      	cmp	r1, #0
   345ec:	d0f8      	beq.n	345e0 <mbox_message_match+0x4a>
			rx_msg->tx_data = rx_msg->tx_block.data;
   345ee:	60d9      	str	r1, [r3, #12]
   345f0:	e7f6      	b.n	345e0 <mbox_message_match+0x4a>
	return -1;
   345f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   345f6:	e7f6      	b.n	345e6 <mbox_message_match+0x50>

000345f8 <k_mbox_init>:
   345f8:	f100 0308 	add.w	r3, r0, #8
   345fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	mbox_ptr->lock = (struct k_spinlock) {};
   34600:	2300      	movs	r3, #0
   34602:	e9c0 0000 	strd	r0, r0, [r0]
   34606:	6103      	str	r3, [r0, #16]
}
   34608:	4770      	bx	lr

0003460a <k_mbox_data_get>:
{
   3460a:	b510      	push	{r4, lr}
	if (buffer == NULL) {
   3460c:	460b      	mov	r3, r1
{
   3460e:	4604      	mov	r4, r0
	if (buffer == NULL) {
   34610:	b921      	cbnz	r1, 3461c <k_mbox_data_get+0x12>
		rx_msg->size = 0;
   34612:	6061      	str	r1, [r4, #4]
}
   34614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mbox_message_dispose(rx_msg);
   34618:	f7f4 b8c2 	b.w	287a0 <mbox_message_dispose>
	if ((rx_msg->tx_data != NULL) && (rx_msg->size > 0)) {
   3461c:	68c1      	ldr	r1, [r0, #12]
   3461e:	b121      	cbz	r1, 3462a <k_mbox_data_get+0x20>
   34620:	6842      	ldr	r2, [r0, #4]
   34622:	b112      	cbz	r2, 3462a <k_mbox_data_get+0x20>
   34624:	4618      	mov	r0, r3
   34626:	f000 f9fb 	bl	34a20 <memcpy>
	mbox_message_dispose(rx_msg);
   3462a:	4620      	mov	r0, r4
   3462c:	e7f2      	b.n	34614 <k_mbox_data_get+0xa>

0003462e <k_mem_pool_free>:
	k_mem_pool_free_id(&block->id);
   3462e:	f7ff bfae 	b.w	3458e <k_mem_pool_free_id>

00034632 <k_mem_pool_malloc>:
{
   34632:	b507      	push	{r0, r1, r2, lr}
   34634:	2208      	movs	r2, #8
   34636:	188a      	adds	r2, r1, r2
   34638:	d204      	bcs.n	34644 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   3463a:	2300      	movs	r3, #0
   3463c:	4669      	mov	r1, sp
   3463e:	f7ff ff90 	bl	34562 <k_mem_pool_alloc>
   34642:	b118      	cbz	r0, 3464c <k_mem_pool_malloc+0x1a>
		return NULL;
   34644:	2000      	movs	r0, #0
}
   34646:	b003      	add	sp, #12
   34648:	f85d fb04 	ldr.w	pc, [sp], #4
   3464c:	466b      	mov	r3, sp
   3464e:	9a00      	ldr	r2, [sp, #0]
   34650:	cb03      	ldmia	r3!, {r0, r1}
   34652:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   34654:	9800      	ldr	r0, [sp, #0]
   34656:	6051      	str	r1, [r2, #4]
   34658:	3008      	adds	r0, #8
   3465a:	e7f4      	b.n	34646 <k_mem_pool_malloc+0x14>

0003465c <k_free>:
	if (ptr != NULL) {
   3465c:	b110      	cbz	r0, 34664 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   3465e:	3808      	subs	r0, #8
   34660:	f7ff bf95 	b.w	3458e <k_mem_pool_free_id>
}
   34664:	4770      	bx	lr

00034666 <k_calloc>:
{
   34666:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   34668:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3466c:	b118      	cbz	r0, 34676 <k_calloc+0x10>
   3466e:	fbb4 f0f0 	udiv	r0, r4, r0
   34672:	4281      	cmp	r1, r0
   34674:	d10a      	bne.n	3468c <k_calloc+0x26>
	ret = k_malloc(bounds);
   34676:	4620      	mov	r0, r4
   34678:	f7f4 fa80 	bl	28b7c <k_malloc>
	if (ret != NULL) {
   3467c:	4605      	mov	r5, r0
   3467e:	b118      	cbz	r0, 34688 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   34680:	4622      	mov	r2, r4
   34682:	2100      	movs	r1, #0
   34684:	f000 fa06 	bl	34a94 <memset>
}
   34688:	4628      	mov	r0, r5
   3468a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3468c:	2500      	movs	r5, #0
   3468e:	e7fb      	b.n	34688 <k_calloc+0x22>

00034690 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   34690:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   34694:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   34698:	2300      	movs	r3, #0
	msgq->buffer_start = buffer;
   3469a:	6141      	str	r1, [r0, #20]
	msgq->read_ptr = buffer;
   3469c:	e9c0 2106 	strd	r2, r1, [r0, #24]
	msgq->write_ptr = buffer;
   346a0:	6201      	str	r1, [r0, #32]
	msgq->used_msgs = 0;
   346a2:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
   346a4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   346a8:	e9c0 0000 	strd	r0, r0, [r0]
	msgq->lock = (struct k_spinlock) {};
   346ac:	6083      	str	r3, [r0, #8]
}
   346ae:	4770      	bx	lr

000346b0 <z_impl_k_mutex_init>:
{
   346b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   346b2:	2000      	movs	r0, #0
   346b4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   346b8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   346bc:	4770      	bx	lr

000346be <z_queue_node_peek>:
{
   346be:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   346c0:	4604      	mov	r4, r0
   346c2:	b130      	cbz	r0, 346d2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   346c4:	6802      	ldr	r2, [r0, #0]
   346c6:	0793      	lsls	r3, r2, #30
   346c8:	d003      	beq.n	346d2 <z_queue_node_peek+0x14>
		ret = anode->data;
   346ca:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   346cc:	b109      	cbz	r1, 346d2 <z_queue_node_peek+0x14>
			k_free(anode);
   346ce:	f7ff ffc5 	bl	3465c <k_free>
}
   346d2:	4620      	mov	r0, r4
   346d4:	bd10      	pop	{r4, pc}

000346d6 <z_impl_k_queue_init>:
	list->head = NULL;
   346d6:	2300      	movs	r3, #0
	list->tail = NULL;
   346d8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   346dc:	6083      	str	r3, [r0, #8]
   346de:	f100 030c 	add.w	r3, r0, #12
   346e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   346e6:	f100 0314 	add.w	r3, r0, #20
   346ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   346ee:	4770      	bx	lr

000346f0 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   346f0:	460a      	mov	r2, r1
   346f2:	2300      	movs	r3, #0
   346f4:	6841      	ldr	r1, [r0, #4]
   346f6:	f7f4 bd73 	b.w	291e0 <queue_insert>

000346fa <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   346fa:	2300      	movs	r3, #0
   346fc:	460a      	mov	r2, r1
   346fe:	4619      	mov	r1, r3
   34700:	f7f4 bd6e 	b.w	291e0 <queue_insert>

00034704 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   34704:	f990 000e 	ldrsb.w	r0, [r0, #14]
   34708:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   3470c:	4298      	cmp	r0, r3
   3470e:	bfac      	ite	ge
   34710:	2000      	movge	r0, #0
   34712:	2001      	movlt	r0, #1
   34714:	4770      	bx	lr

00034716 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   34716:	4603      	mov	r3, r0
   34718:	b920      	cbnz	r0, 34724 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3471a:	f3ef 8205 	mrs	r2, IPSR
   3471e:	b90a      	cbnz	r2, 34724 <z_reschedule_irqlock+0xe>
   34720:	f7e4 b9d4 	b.w	18acc <arch_swap>
   34724:	f383 8811 	msr	BASEPRI, r3
   34728:	f3bf 8f6f 	isb	sy
}
   3472c:	4770      	bx	lr

0003472e <z_reschedule_unlocked>:
	__asm__ volatile(
   3472e:	f04f 0320 	mov.w	r3, #32
   34732:	f3ef 8011 	mrs	r0, BASEPRI
   34736:	f383 8811 	msr	BASEPRI, r3
   3473a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3473e:	f7ff bfea 	b.w	34716 <z_reschedule_irqlock>

00034742 <z_priq_dumb_best>:
	return list->head == list;
   34742:	6803      	ldr	r3, [r0, #0]
}
   34744:	4298      	cmp	r0, r3
   34746:	bf14      	ite	ne
   34748:	4618      	movne	r0, r3
   3474a:	2000      	moveq	r0, #0
   3474c:	4770      	bx	lr

0003474e <z_unpend_all>:
{
   3474e:	b538      	push	{r3, r4, r5, lr}
   34750:	4605      	mov	r5, r0
	int need_sched = 0;
   34752:	2000      	movs	r0, #0
   34754:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34756:	42a5      	cmp	r5, r4
   34758:	d000      	beq.n	3475c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3475a:	b904      	cbnz	r4, 3475e <z_unpend_all+0x10>
}
   3475c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3475e:	4620      	mov	r0, r4
   34760:	f7f5 f886 	bl	29870 <z_unpend_thread>
		z_ready_thread(thread);
   34764:	4620      	mov	r0, r4
   34766:	f7f5 f9c3 	bl	29af0 <z_ready_thread>
		need_sched = 1;
   3476a:	2001      	movs	r0, #1
   3476c:	e7f2      	b.n	34754 <z_unpend_all+0x6>

0003476e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   3476e:	b15a      	cbz	r2, 34788 <z_impl_k_sem_init+0x1a>
   34770:	428a      	cmp	r2, r1
   34772:	d309      	bcc.n	34788 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   34774:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   34778:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   3477c:	e9c0 0000 	strd	r0, r0, [r0]
   34780:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   34784:	2000      	movs	r0, #0
   34786:	4770      	bx	lr
		return -EINVAL;
   34788:	f06f 0015 	mvn.w	r0, #21
}
   3478c:	4770      	bx	lr

0003478e <k_is_in_isr>:
   3478e:	f3ef 8005 	mrs	r0, IPSR
}
   34792:	3000      	adds	r0, #0
   34794:	bf18      	it	ne
   34796:	2001      	movne	r0, #1
   34798:	4770      	bx	lr

0003479a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   3479a:	f7e2 bdb1 	b.w	17300 <arch_busy_wait>

0003479e <z_impl_k_thread_name_set>:
}
   3479e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   347a2:	4770      	bx	lr

000347a4 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   347a4:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   347a6:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   347a8:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   347aa:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   347ac:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   347ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   347b2:	4770      	bx	lr

000347b4 <k_work_submit_to_queue>:
{
   347b4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   347b6:	f101 0308 	add.w	r3, r1, #8
   347ba:	e8d3 2fef 	ldaex	r2, [r3]
   347be:	f042 0c01 	orr.w	ip, r2, #1
   347c2:	e8c3 cfee 	stlex	lr, ip, [r3]
   347c6:	f1be 0f00 	cmp.w	lr, #0
   347ca:	d1f6      	bne.n	347ba <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   347cc:	07d3      	lsls	r3, r2, #31
   347ce:	d403      	bmi.n	347d8 <k_work_submit_to_queue+0x24>
}
   347d0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   347d4:	f7ff bf8c 	b.w	346f0 <k_queue_append>
}
   347d8:	f85d fb04 	ldr.w	pc, [sp], #4

000347dc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   347dc:	f1a0 010c 	sub.w	r1, r0, #12
   347e0:	6900      	ldr	r0, [r0, #16]
   347e2:	f7ff bfe7 	b.w	347b4 <k_work_submit_to_queue>

000347e6 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   347e6:	69c3      	ldr	r3, [r0, #28]
{
   347e8:	b570      	push	{r4, r5, r6, lr}
   347ea:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   347ec:	b913      	cbnz	r3, 347f4 <work_cancel+0xe>
		return -EALREADY;
   347ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   347f2:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   347f4:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   347f8:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   347fc:	07db      	lsls	r3, r3, #31
   347fe:	d52f      	bpl.n	34860 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   34800:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   34802:	69c2      	ldr	r2, [r0, #28]
   34804:	6813      	ldr	r3, [r2, #0]
   34806:	b913      	cbnz	r3, 3480e <work_cancel+0x28>
			return -EINVAL;
   34808:	f06f 0015 	mvn.w	r0, #21
   3480c:	e7f1      	b.n	347f2 <work_cancel+0xc>
   3480e:	429c      	cmp	r4, r3
   34810:	d121      	bne.n	34856 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   34812:	6823      	ldr	r3, [r4, #0]
   34814:	6856      	ldr	r6, [r2, #4]
   34816:	f023 0003 	bic.w	r0, r3, #3
   3481a:	b991      	cbnz	r1, 34842 <work_cancel+0x5c>
   3481c:	42b4      	cmp	r4, r6
	list->head = node;
   3481e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   34820:	d100      	bne.n	34824 <work_cancel+0x3e>
	list->tail = node;
   34822:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   34824:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   34826:	f003 0303 	and.w	r3, r3, #3
   3482a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3482c:	2000      	movs	r0, #0
   3482e:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   34830:	e8d5 3fef 	ldaex	r3, [r5]
   34834:	f023 0301 	bic.w	r3, r3, #1
   34838:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3483c:	2a00      	cmp	r2, #0
   3483e:	d0d8      	beq.n	347f2 <work_cancel+0xc>
   34840:	e7f6      	b.n	34830 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   34842:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   34844:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   34846:	f003 0303 	and.w	r3, r3, #3
   3484a:	ea43 0300 	orr.w	r3, r3, r0
   3484e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   34850:	bf08      	it	eq
   34852:	6051      	streq	r1, [r2, #4]
   34854:	e7e6      	b.n	34824 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   34856:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   34858:	4619      	mov	r1, r3
   3485a:	f020 0303 	bic.w	r3, r0, #3
   3485e:	e7d2      	b.n	34806 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   34860:	300c      	adds	r0, #12
   34862:	f7f6 fcbb 	bl	2b1dc <z_abort_timeout>
		if (err) {
   34866:	2800      	cmp	r0, #0
   34868:	d0e0      	beq.n	3482c <work_cancel+0x46>
   3486a:	e7c0      	b.n	347ee <work_cancel+0x8>

0003486c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3486c:	2300      	movs	r3, #0
   3486e:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   34872:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   34876:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   34878:	61c3      	str	r3, [r0, #28]
}
   3487a:	4770      	bx	lr

0003487c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   3487c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   3487e:	f7f6 fe8f 	bl	2b5a0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   34882:	bd08      	pop	{r3, pc}

00034884 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   34884:	f7f6 be8c 	b.w	2b5a0 <z_tick_get>

00034888 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   34888:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3488a:	1c43      	adds	r3, r0, #1
   3488c:	d01e      	beq.n	348cc <z_timeout_end_calc+0x44>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3488e:	b918      	cbnz	r0, 34898 <z_timeout_end_calc+0x10>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   34890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   34894:	f7f6 be84 	b.w	2b5a0 <z_tick_get>
			return (u32_t)((t * to_hz + off) / from_hz);
   34898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3489c:	f240 34e7 	movw	r4, #999	; 0x3e7
   348a0:	2500      	movs	r5, #0
   348a2:	fbe1 4500 	umlal	r4, r5, r1, r0
   348a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   348aa:	4620      	mov	r0, r4
   348ac:	2300      	movs	r3, #0
   348ae:	4629      	mov	r1, r5
   348b0:	f7d8 ff5e 	bl	d770 <__aeabi_uldivmod>
   348b4:	4604      	mov	r4, r0
	return z_tick_get() + MAX(1, dt);
   348b6:	f7f6 fe73 	bl	2b5a0 <z_tick_get>
   348ba:	b12c      	cbz	r4, 348c8 <z_timeout_end_calc+0x40>
   348bc:	4623      	mov	r3, r4
   348be:	2200      	movs	r2, #0
   348c0:	18c0      	adds	r0, r0, r3
   348c2:	eb42 0101 	adc.w	r1, r2, r1
}
   348c6:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   348c8:	2301      	movs	r3, #1
   348ca:	e7f8      	b.n	348be <z_timeout_end_calc+0x36>
		return UINT64_MAX;
   348cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   348d0:	4601      	mov	r1, r0
   348d2:	e7f8      	b.n	348c6 <z_timeout_end_calc+0x3e>

000348d4 <k_timer_init>:
	timer->status = 0U;
   348d4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   348d6:	e9c0 1206 	strd	r1, r2, [r0, #24]
   348da:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   348de:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   348e0:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   348e4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   348e8:	6283      	str	r3, [r0, #40]	; 0x28
}
   348ea:	4770      	bx	lr

000348ec <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   348ec:	b510      	push	{r4, lr}
   348ee:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   348f0:	f7f6 fc74 	bl	2b1dc <z_abort_timeout>

	if (inactive) {
   348f4:	b9d8      	cbnz	r0, 3492e <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   348f6:	69e3      	ldr	r3, [r4, #28]
   348f8:	b10b      	cbz	r3, 348fe <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   348fa:	4620      	mov	r0, r4
   348fc:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   348fe:	f104 0010 	add.w	r0, r4, #16
   34902:	2100      	movs	r1, #0
   34904:	f7f4 fe36 	bl	29574 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   34908:	4604      	mov	r4, r0
   3490a:	b180      	cbz	r0, 3492e <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   3490c:	f7f4 fe7c 	bl	29608 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   34910:	4620      	mov	r0, r4
   34912:	f7f5 f8ed 	bl	29af0 <z_ready_thread>
   34916:	f04f 0320 	mov.w	r3, #32
   3491a:	f3ef 8011 	mrs	r0, BASEPRI
   3491e:	f383 8811 	msr	BASEPRI, r3
   34922:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   34926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   3492a:	f7ff bef4 	b.w	34716 <z_reschedule_irqlock>
   3492e:	bd10      	pop	{r4, pc}

00034930 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   34930:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   34932:	6884      	ldr	r4, [r0, #8]
{
   34934:	4605      	mov	r5, r0
   34936:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   34938:	b19c      	cbz	r4, 34962 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   3493a:	68a3      	ldr	r3, [r4, #8]
   3493c:	b95b      	cbnz	r3, 34956 <signal_poll_event+0x26>
	int retcode = 0;
   3493e:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   34940:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   34942:	2300      	movs	r3, #0
   34944:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   34946:	68eb      	ldr	r3, [r5, #12]
   34948:	f3c3 3204 	ubfx	r2, r3, #12, #5
   3494c:	4316      	orrs	r6, r2
   3494e:	f366 3310 	bfi	r3, r6, #12, #5
   34952:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   34954:	e004      	b.n	34960 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   34956:	4798      	blx	r3
		poller->is_polling = false;
   34958:	2300      	movs	r3, #0
		if (retcode < 0) {
   3495a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   3495c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   3495e:	daf0      	bge.n	34942 <signal_poll_event+0x12>
}
   34960:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   34962:	4620      	mov	r0, r4
   34964:	e7ed      	b.n	34942 <signal_poll_event+0x12>

00034966 <add_event>:
{
   34966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34968:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3496a:	e9d0 2300 	ldrd	r2, r3, [r0]
   3496e:	4290      	cmp	r0, r2
   34970:	4604      	mov	r4, r0
   34972:	460d      	mov	r5, r1
   34974:	d106      	bne.n	34984 <add_event+0x1e>
	node->prev = list->tail;
   34976:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   34978:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   3497a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   3497c:	6863      	ldr	r3, [r4, #4]
   3497e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   34980:	6065      	str	r5, [r4, #4]
}
   34982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   34984:	2b00      	cmp	r3, #0
   34986:	d0f6      	beq.n	34976 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   34988:	689b      	ldr	r3, [r3, #8]
   3498a:	6879      	ldr	r1, [r7, #4]
   3498c:	6858      	ldr	r0, [r3, #4]
   3498e:	f7ff feb9 	bl	34704 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   34992:	2800      	cmp	r0, #0
   34994:	d1ef      	bne.n	34976 <add_event+0x10>
	return list->head == list;
   34996:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34998:	42b4      	cmp	r4, r6
   3499a:	d0ec      	beq.n	34976 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3499c:	2e00      	cmp	r6, #0
   3499e:	d0ea      	beq.n	34976 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   349a0:	68b3      	ldr	r3, [r6, #8]
   349a2:	6878      	ldr	r0, [r7, #4]
   349a4:	6859      	ldr	r1, [r3, #4]
   349a6:	f7ff fead 	bl	34704 <z_is_t1_higher_prio_than_t2>
   349aa:	b128      	cbz	r0, 349b8 <add_event+0x52>
	node->prev = successor->prev;
   349ac:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   349ae:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   349b2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   349b4:	6075      	str	r5, [r6, #4]
			return;
   349b6:	e7e4      	b.n	34982 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   349b8:	6863      	ldr	r3, [r4, #4]
   349ba:	429e      	cmp	r6, r3
   349bc:	d0db      	beq.n	34976 <add_event+0x10>
   349be:	6836      	ldr	r6, [r6, #0]
   349c0:	e7ec      	b.n	3499c <add_event+0x36>

000349c2 <z_handle_obj_poll_events>:
	return list->head == list;
   349c2:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   349c4:	4298      	cmp	r0, r3
   349c6:	d009      	beq.n	349dc <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   349c8:	e9d3 2000 	ldrd	r2, r0, [r3]
   349cc:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   349ce:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   349d0:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   349d2:	4618      	mov	r0, r3
	node->prev = NULL;
   349d4:	e9c3 2200 	strd	r2, r2, [r3]
   349d8:	f7ff bfaa 	b.w	34930 <signal_poll_event>
	}
}
   349dc:	4770      	bx	lr

000349de <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   349de:	4770      	bx	lr

000349e0 <atoi>:
   349e0:	220a      	movs	r2, #10
   349e2:	2100      	movs	r1, #0
   349e4:	f7f9 bd12 	b.w	2e40c <strtol>

000349e8 <memchr>:
   349e8:	b2c9      	uxtb	r1, r1
   349ea:	4402      	add	r2, r0
   349ec:	b510      	push	{r4, lr}
   349ee:	4290      	cmp	r0, r2
   349f0:	4603      	mov	r3, r0
   349f2:	d101      	bne.n	349f8 <memchr+0x10>
   349f4:	2300      	movs	r3, #0
   349f6:	e003      	b.n	34a00 <memchr+0x18>
   349f8:	781c      	ldrb	r4, [r3, #0]
   349fa:	3001      	adds	r0, #1
   349fc:	428c      	cmp	r4, r1
   349fe:	d1f6      	bne.n	349ee <memchr+0x6>
   34a00:	4618      	mov	r0, r3
   34a02:	bd10      	pop	{r4, pc}

00034a04 <memcmp>:
   34a04:	b530      	push	{r4, r5, lr}
   34a06:	3901      	subs	r1, #1
   34a08:	2400      	movs	r4, #0
   34a0a:	42a2      	cmp	r2, r4
   34a0c:	d101      	bne.n	34a12 <memcmp+0xe>
   34a0e:	2000      	movs	r0, #0
   34a10:	e005      	b.n	34a1e <memcmp+0x1a>
   34a12:	5d03      	ldrb	r3, [r0, r4]
   34a14:	3401      	adds	r4, #1
   34a16:	5d0d      	ldrb	r5, [r1, r4]
   34a18:	42ab      	cmp	r3, r5
   34a1a:	d0f6      	beq.n	34a0a <memcmp+0x6>
   34a1c:	1b58      	subs	r0, r3, r5
   34a1e:	bd30      	pop	{r4, r5, pc}

00034a20 <memcpy>:
   34a20:	440a      	add	r2, r1
   34a22:	1e43      	subs	r3, r0, #1
   34a24:	4291      	cmp	r1, r2
   34a26:	d100      	bne.n	34a2a <memcpy+0xa>
   34a28:	4770      	bx	lr
   34a2a:	b510      	push	{r4, lr}
   34a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   34a30:	4291      	cmp	r1, r2
   34a32:	f803 4f01 	strb.w	r4, [r3, #1]!
   34a36:	d1f9      	bne.n	34a2c <memcpy+0xc>
   34a38:	bd10      	pop	{r4, pc}

00034a3a <__memcpy_chk>:
   34a3a:	429a      	cmp	r2, r3
   34a3c:	b508      	push	{r3, lr}
   34a3e:	d901      	bls.n	34a44 <__memcpy_chk+0xa>
   34a40:	f7f9 fd6c 	bl	2e51c <__chk_fail>
   34a44:	4281      	cmp	r1, r0
   34a46:	d804      	bhi.n	34a52 <__memcpy_chk+0x18>
   34a48:	188b      	adds	r3, r1, r2
   34a4a:	4298      	cmp	r0, r3
   34a4c:	d3f8      	bcc.n	34a40 <__memcpy_chk+0x6>
   34a4e:	4281      	cmp	r1, r0
   34a50:	d102      	bne.n	34a58 <__memcpy_chk+0x1e>
   34a52:	1883      	adds	r3, r0, r2
   34a54:	4299      	cmp	r1, r3
   34a56:	d3f3      	bcc.n	34a40 <__memcpy_chk+0x6>
   34a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   34a5c:	f7ff bfe0 	b.w	34a20 <memcpy>

00034a60 <memmove>:
   34a60:	4288      	cmp	r0, r1
   34a62:	eb01 0302 	add.w	r3, r1, r2
   34a66:	b510      	push	{r4, lr}
   34a68:	d902      	bls.n	34a70 <memmove+0x10>
   34a6a:	4283      	cmp	r3, r0
   34a6c:	461c      	mov	r4, r3
   34a6e:	d807      	bhi.n	34a80 <memmove+0x20>
   34a70:	1e42      	subs	r2, r0, #1
   34a72:	4299      	cmp	r1, r3
   34a74:	d008      	beq.n	34a88 <memmove+0x28>
   34a76:	f811 4b01 	ldrb.w	r4, [r1], #1
   34a7a:	f802 4f01 	strb.w	r4, [r2, #1]!
   34a7e:	e7f8      	b.n	34a72 <memmove+0x12>
   34a80:	1883      	adds	r3, r0, r2
   34a82:	1a9a      	subs	r2, r3, r2
   34a84:	429a      	cmp	r2, r3
   34a86:	d100      	bne.n	34a8a <memmove+0x2a>
   34a88:	bd10      	pop	{r4, pc}
   34a8a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   34a8e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   34a92:	e7f7      	b.n	34a84 <memmove+0x24>

00034a94 <memset>:
   34a94:	4402      	add	r2, r0
   34a96:	4603      	mov	r3, r0
   34a98:	4293      	cmp	r3, r2
   34a9a:	d100      	bne.n	34a9e <memset+0xa>
   34a9c:	4770      	bx	lr
   34a9e:	f803 1b01 	strb.w	r1, [r3], #1
   34aa2:	e7f9      	b.n	34a98 <memset+0x4>

00034aa4 <_calloc_r>:
   34aa4:	b538      	push	{r3, r4, r5, lr}
   34aa6:	fb02 f401 	mul.w	r4, r2, r1
   34aaa:	4621      	mov	r1, r4
   34aac:	f7f9 f83a 	bl	2db24 <_malloc_r>
   34ab0:	4605      	mov	r5, r0
   34ab2:	b118      	cbz	r0, 34abc <_calloc_r+0x18>
   34ab4:	4622      	mov	r2, r4
   34ab6:	2100      	movs	r1, #0
   34ab8:	f7ff ffec 	bl	34a94 <memset>
   34abc:	4628      	mov	r0, r5
   34abe:	bd38      	pop	{r3, r4, r5, pc}

00034ac0 <__cvt>:
   34ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   34ac4:	ec55 4b10 	vmov	r4, r5, d0
   34ac8:	2d00      	cmp	r5, #0
   34aca:	460e      	mov	r6, r1
   34acc:	4691      	mov	r9, r2
   34ace:	4619      	mov	r1, r3
   34ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   34ad4:	f04f 0200 	mov.w	r2, #0
   34ad8:	da03      	bge.n	34ae2 <__cvt+0x22>
   34ada:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   34ade:	222d      	movs	r2, #45	; 0x2d
   34ae0:	461d      	mov	r5, r3
   34ae2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   34ae4:	700a      	strb	r2, [r1, #0]
   34ae6:	f027 0720 	bic.w	r7, r7, #32
   34aea:	2f46      	cmp	r7, #70	; 0x46
   34aec:	d004      	beq.n	34af8 <__cvt+0x38>
   34aee:	2f45      	cmp	r7, #69	; 0x45
   34af0:	d100      	bne.n	34af4 <__cvt+0x34>
   34af2:	3601      	adds	r6, #1
   34af4:	2102      	movs	r1, #2
   34af6:	e000      	b.n	34afa <__cvt+0x3a>
   34af8:	2103      	movs	r1, #3
   34afa:	ab03      	add	r3, sp, #12
   34afc:	4632      	mov	r2, r6
   34afe:	9301      	str	r3, [sp, #4]
   34b00:	ab02      	add	r3, sp, #8
   34b02:	ec45 4b10 	vmov	d0, r4, r5
   34b06:	9300      	str	r3, [sp, #0]
   34b08:	4653      	mov	r3, sl
   34b0a:	f7de ff55 	bl	139b8 <_dtoa_r>
   34b0e:	2f47      	cmp	r7, #71	; 0x47
   34b10:	4680      	mov	r8, r0
   34b12:	d102      	bne.n	34b1a <__cvt+0x5a>
   34b14:	f019 0f01 	tst.w	r9, #1
   34b18:	d022      	beq.n	34b60 <__cvt+0xa0>
   34b1a:	2f46      	cmp	r7, #70	; 0x46
   34b1c:	eb08 0906 	add.w	r9, r8, r6
   34b20:	d111      	bne.n	34b46 <__cvt+0x86>
   34b22:	f898 3000 	ldrb.w	r3, [r8]
   34b26:	2b30      	cmp	r3, #48	; 0x30
   34b28:	d10a      	bne.n	34b40 <__cvt+0x80>
   34b2a:	2200      	movs	r2, #0
   34b2c:	2300      	movs	r3, #0
   34b2e:	4620      	mov	r0, r4
   34b30:	4629      	mov	r1, r5
   34b32:	f7d8 fd23 	bl	d57c <__aeabi_dcmpeq>
   34b36:	b918      	cbnz	r0, 34b40 <__cvt+0x80>
   34b38:	f1c6 0601 	rsb	r6, r6, #1
   34b3c:	f8ca 6000 	str.w	r6, [sl]
   34b40:	f8da 3000 	ldr.w	r3, [sl]
   34b44:	4499      	add	r9, r3
   34b46:	2200      	movs	r2, #0
   34b48:	2300      	movs	r3, #0
   34b4a:	4620      	mov	r0, r4
   34b4c:	4629      	mov	r1, r5
   34b4e:	f7d8 fd15 	bl	d57c <__aeabi_dcmpeq>
   34b52:	b108      	cbz	r0, 34b58 <__cvt+0x98>
   34b54:	f8cd 900c 	str.w	r9, [sp, #12]
   34b58:	2230      	movs	r2, #48	; 0x30
   34b5a:	9b03      	ldr	r3, [sp, #12]
   34b5c:	454b      	cmp	r3, r9
   34b5e:	d308      	bcc.n	34b72 <__cvt+0xb2>
   34b60:	9b03      	ldr	r3, [sp, #12]
   34b62:	4640      	mov	r0, r8
   34b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   34b66:	eba3 0308 	sub.w	r3, r3, r8
   34b6a:	6013      	str	r3, [r2, #0]
   34b6c:	b004      	add	sp, #16
   34b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34b72:	1c59      	adds	r1, r3, #1
   34b74:	9103      	str	r1, [sp, #12]
   34b76:	701a      	strb	r2, [r3, #0]
   34b78:	e7ef      	b.n	34b5a <__cvt+0x9a>

00034b7a <__exponent>:
   34b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34b7c:	2900      	cmp	r1, #0
   34b7e:	7002      	strb	r2, [r0, #0]
   34b80:	bfba      	itte	lt
   34b82:	4249      	neglt	r1, r1
   34b84:	232d      	movlt	r3, #45	; 0x2d
   34b86:	232b      	movge	r3, #43	; 0x2b
   34b88:	2909      	cmp	r1, #9
   34b8a:	7043      	strb	r3, [r0, #1]
   34b8c:	dd22      	ble.n	34bd4 <__exponent+0x5a>
   34b8e:	f10d 0307 	add.w	r3, sp, #7
   34b92:	260a      	movs	r6, #10
   34b94:	461f      	mov	r7, r3
   34b96:	2963      	cmp	r1, #99	; 0x63
   34b98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   34b9c:	fb91 f2f6 	sdiv	r2, r1, r6
   34ba0:	fb06 1412 	mls	r4, r6, r2, r1
   34ba4:	f104 0430 	add.w	r4, r4, #48	; 0x30
   34ba8:	f803 4c01 	strb.w	r4, [r3, #-1]
   34bac:	dc0a      	bgt.n	34bc4 <__exponent+0x4a>
   34bae:	3230      	adds	r2, #48	; 0x30
   34bb0:	3b02      	subs	r3, #2
   34bb2:	f805 2c01 	strb.w	r2, [r5, #-1]
   34bb6:	1c82      	adds	r2, r0, #2
   34bb8:	42bb      	cmp	r3, r7
   34bba:	4614      	mov	r4, r2
   34bbc:	d305      	bcc.n	34bca <__exponent+0x50>
   34bbe:	1a20      	subs	r0, r4, r0
   34bc0:	b003      	add	sp, #12
   34bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34bc4:	462b      	mov	r3, r5
   34bc6:	4611      	mov	r1, r2
   34bc8:	e7e5      	b.n	34b96 <__exponent+0x1c>
   34bca:	f813 1b01 	ldrb.w	r1, [r3], #1
   34bce:	f802 1b01 	strb.w	r1, [r2], #1
   34bd2:	e7f1      	b.n	34bb8 <__exponent+0x3e>
   34bd4:	2330      	movs	r3, #48	; 0x30
   34bd6:	1d04      	adds	r4, r0, #4
   34bd8:	4419      	add	r1, r3
   34bda:	7083      	strb	r3, [r0, #2]
   34bdc:	70c1      	strb	r1, [r0, #3]
   34bde:	e7ee      	b.n	34bbe <__exponent+0x44>

00034be0 <_printf_common>:
   34be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34be4:	4691      	mov	r9, r2
   34be6:	461f      	mov	r7, r3
   34be8:	688a      	ldr	r2, [r1, #8]
   34bea:	4606      	mov	r6, r0
   34bec:	690b      	ldr	r3, [r1, #16]
   34bee:	460c      	mov	r4, r1
   34bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
   34bf4:	4293      	cmp	r3, r2
   34bf6:	bfb8      	it	lt
   34bf8:	4613      	movlt	r3, r2
   34bfa:	f8c9 3000 	str.w	r3, [r9]
   34bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   34c02:	b112      	cbz	r2, 34c0a <_printf_common+0x2a>
   34c04:	3301      	adds	r3, #1
   34c06:	f8c9 3000 	str.w	r3, [r9]
   34c0a:	6823      	ldr	r3, [r4, #0]
   34c0c:	0699      	lsls	r1, r3, #26
   34c0e:	bf42      	ittt	mi
   34c10:	f8d9 3000 	ldrmi.w	r3, [r9]
   34c14:	3302      	addmi	r3, #2
   34c16:	f8c9 3000 	strmi.w	r3, [r9]
   34c1a:	6825      	ldr	r5, [r4, #0]
   34c1c:	f015 0506 	ands.w	r5, r5, #6
   34c20:	d107      	bne.n	34c32 <_printf_common+0x52>
   34c22:	f104 0a19 	add.w	sl, r4, #25
   34c26:	68e3      	ldr	r3, [r4, #12]
   34c28:	f8d9 2000 	ldr.w	r2, [r9]
   34c2c:	1a9b      	subs	r3, r3, r2
   34c2e:	42ab      	cmp	r3, r5
   34c30:	dc2b      	bgt.n	34c8a <_printf_common+0xaa>
   34c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   34c36:	6822      	ldr	r2, [r4, #0]
   34c38:	3300      	adds	r3, #0
   34c3a:	bf18      	it	ne
   34c3c:	2301      	movne	r3, #1
   34c3e:	0692      	lsls	r2, r2, #26
   34c40:	d430      	bmi.n	34ca4 <_printf_common+0xc4>
   34c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   34c46:	4639      	mov	r1, r7
   34c48:	4630      	mov	r0, r6
   34c4a:	47c0      	blx	r8
   34c4c:	3001      	adds	r0, #1
   34c4e:	d023      	beq.n	34c98 <_printf_common+0xb8>
   34c50:	6823      	ldr	r3, [r4, #0]
   34c52:	341a      	adds	r4, #26
   34c54:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   34c58:	f003 0306 	and.w	r3, r3, #6
   34c5c:	f8d9 2000 	ldr.w	r2, [r9]
   34c60:	f04f 0900 	mov.w	r9, #0
   34c64:	2b04      	cmp	r3, #4
   34c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
   34c6a:	bf08      	it	eq
   34c6c:	1aad      	subeq	r5, r5, r2
   34c6e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   34c72:	bf14      	ite	ne
   34c74:	2500      	movne	r5, #0
   34c76:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   34c7a:	4293      	cmp	r3, r2
   34c7c:	bfc4      	itt	gt
   34c7e:	1a9b      	subgt	r3, r3, r2
   34c80:	18ed      	addgt	r5, r5, r3
   34c82:	454d      	cmp	r5, r9
   34c84:	d11a      	bne.n	34cbc <_printf_common+0xdc>
   34c86:	2000      	movs	r0, #0
   34c88:	e008      	b.n	34c9c <_printf_common+0xbc>
   34c8a:	2301      	movs	r3, #1
   34c8c:	4652      	mov	r2, sl
   34c8e:	4639      	mov	r1, r7
   34c90:	4630      	mov	r0, r6
   34c92:	47c0      	blx	r8
   34c94:	3001      	adds	r0, #1
   34c96:	d103      	bne.n	34ca0 <_printf_common+0xc0>
   34c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34ca0:	3501      	adds	r5, #1
   34ca2:	e7c0      	b.n	34c26 <_printf_common+0x46>
   34ca4:	18e1      	adds	r1, r4, r3
   34ca6:	1c5a      	adds	r2, r3, #1
   34ca8:	2030      	movs	r0, #48	; 0x30
   34caa:	3302      	adds	r3, #2
   34cac:	4422      	add	r2, r4
   34cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   34cb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   34cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   34cba:	e7c2      	b.n	34c42 <_printf_common+0x62>
   34cbc:	2301      	movs	r3, #1
   34cbe:	4622      	mov	r2, r4
   34cc0:	4639      	mov	r1, r7
   34cc2:	4630      	mov	r0, r6
   34cc4:	47c0      	blx	r8
   34cc6:	3001      	adds	r0, #1
   34cc8:	d0e6      	beq.n	34c98 <_printf_common+0xb8>
   34cca:	f109 0901 	add.w	r9, r9, #1
   34cce:	e7d8      	b.n	34c82 <_printf_common+0xa2>

00034cd0 <strchr>:
   34cd0:	b2c9      	uxtb	r1, r1
   34cd2:	4603      	mov	r3, r0
   34cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
   34cd8:	b11a      	cbz	r2, 34ce2 <strchr+0x12>
   34cda:	428a      	cmp	r2, r1
   34cdc:	d1f9      	bne.n	34cd2 <strchr+0x2>
   34cde:	4618      	mov	r0, r3
   34ce0:	4770      	bx	lr
   34ce2:	2900      	cmp	r1, #0
   34ce4:	bf18      	it	ne
   34ce6:	2300      	movne	r3, #0
   34ce8:	e7f9      	b.n	34cde <strchr+0xe>

00034cea <strcpy>:
   34cea:	4603      	mov	r3, r0
   34cec:	f811 2b01 	ldrb.w	r2, [r1], #1
   34cf0:	f803 2b01 	strb.w	r2, [r3], #1
   34cf4:	2a00      	cmp	r2, #0
   34cf6:	d1f9      	bne.n	34cec <strcpy+0x2>
   34cf8:	4770      	bx	lr

00034cfa <strncmp>:
   34cfa:	b510      	push	{r4, lr}
   34cfc:	b16a      	cbz	r2, 34d1a <strncmp+0x20>
   34cfe:	3901      	subs	r1, #1
   34d00:	1884      	adds	r4, r0, r2
   34d02:	f810 3b01 	ldrb.w	r3, [r0], #1
   34d06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   34d0a:	4293      	cmp	r3, r2
   34d0c:	d103      	bne.n	34d16 <strncmp+0x1c>
   34d0e:	42a0      	cmp	r0, r4
   34d10:	d001      	beq.n	34d16 <strncmp+0x1c>
   34d12:	2b00      	cmp	r3, #0
   34d14:	d1f5      	bne.n	34d02 <strncmp+0x8>
   34d16:	1a98      	subs	r0, r3, r2
   34d18:	bd10      	pop	{r4, pc}
   34d1a:	4610      	mov	r0, r2
   34d1c:	e7fc      	b.n	34d18 <strncmp+0x1e>

00034d1e <strstr>:
   34d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d20:	780c      	ldrb	r4, [r1, #0]
   34d22:	b164      	cbz	r4, 34d3e <strstr+0x20>
   34d24:	4603      	mov	r3, r0
   34d26:	781a      	ldrb	r2, [r3, #0]
   34d28:	4618      	mov	r0, r3
   34d2a:	1c5e      	adds	r6, r3, #1
   34d2c:	b90a      	cbnz	r2, 34d32 <strstr+0x14>
   34d2e:	4610      	mov	r0, r2
   34d30:	e005      	b.n	34d3e <strstr+0x20>
   34d32:	4294      	cmp	r4, r2
   34d34:	d108      	bne.n	34d48 <strstr+0x2a>
   34d36:	460d      	mov	r5, r1
   34d38:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   34d3c:	b902      	cbnz	r2, 34d40 <strstr+0x22>
   34d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34d40:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   34d44:	4297      	cmp	r7, r2
   34d46:	d0f7      	beq.n	34d38 <strstr+0x1a>
   34d48:	4633      	mov	r3, r6
   34d4a:	e7ec      	b.n	34d26 <strstr+0x8>

00034d4c <quorem>:
   34d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d50:	6903      	ldr	r3, [r0, #16]
   34d52:	4680      	mov	r8, r0
   34d54:	690c      	ldr	r4, [r1, #16]
   34d56:	42a3      	cmp	r3, r4
   34d58:	f2c0 8084 	blt.w	34e64 <quorem+0x118>
   34d5c:	3c01      	subs	r4, #1
   34d5e:	f108 0514 	add.w	r5, r8, #20
   34d62:	f101 0714 	add.w	r7, r1, #20
   34d66:	00a0      	lsls	r0, r4, #2
   34d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   34d6c:	182b      	adds	r3, r5, r0
   34d6e:	eb07 0900 	add.w	r9, r7, r0
   34d72:	9301      	str	r3, [sp, #4]
   34d74:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   34d78:	3301      	adds	r3, #1
   34d7a:	429a      	cmp	r2, r3
   34d7c:	fbb2 f6f3 	udiv	r6, r2, r3
   34d80:	d333      	bcc.n	34dea <quorem+0x9e>
   34d82:	f04f 0a00 	mov.w	sl, #0
   34d86:	46bc      	mov	ip, r7
   34d88:	46ae      	mov	lr, r5
   34d8a:	46d3      	mov	fp, sl
   34d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
   34d90:	b293      	uxth	r3, r2
   34d92:	45e1      	cmp	r9, ip
   34d94:	ea4f 4212 	mov.w	r2, r2, lsr #16
   34d98:	fb06 a303 	mla	r3, r6, r3, sl
   34d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   34da0:	b29b      	uxth	r3, r3
   34da2:	fb06 a202 	mla	r2, r6, r2, sl
   34da6:	ebab 0303 	sub.w	r3, fp, r3
   34daa:	f8de b000 	ldr.w	fp, [lr]
   34dae:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   34db2:	fa1f fb8b 	uxth.w	fp, fp
   34db6:	445b      	add	r3, fp
   34db8:	fa1f fb82 	uxth.w	fp, r2
   34dbc:	f8de 2000 	ldr.w	r2, [lr]
   34dc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   34dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   34dc8:	b29b      	uxth	r3, r3
   34dca:	ea4f 4b22 	mov.w	fp, r2, asr #16
   34dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   34dd2:	f84e 3b04 	str.w	r3, [lr], #4
   34dd6:	d2d9      	bcs.n	34d8c <quorem+0x40>
   34dd8:	582b      	ldr	r3, [r5, r0]
   34dda:	b933      	cbnz	r3, 34dea <quorem+0x9e>
   34ddc:	9b01      	ldr	r3, [sp, #4]
   34dde:	3b04      	subs	r3, #4
   34de0:	429d      	cmp	r5, r3
   34de2:	461a      	mov	r2, r3
   34de4:	d332      	bcc.n	34e4c <quorem+0x100>
   34de6:	f8c8 4010 	str.w	r4, [r8, #16]
   34dea:	4640      	mov	r0, r8
   34dec:	f000 fa01 	bl	351f2 <__mcmp>
   34df0:	2800      	cmp	r0, #0
   34df2:	db27      	blt.n	34e44 <quorem+0xf8>
   34df4:	3601      	adds	r6, #1
   34df6:	4628      	mov	r0, r5
   34df8:	f04f 0c00 	mov.w	ip, #0
   34dfc:	f857 1b04 	ldr.w	r1, [r7], #4
   34e00:	f8d0 e000 	ldr.w	lr, [r0]
   34e04:	b28b      	uxth	r3, r1
   34e06:	45b9      	cmp	r9, r7
   34e08:	fa1f f28e 	uxth.w	r2, lr
   34e0c:	ebac 0303 	sub.w	r3, ip, r3
   34e10:	4413      	add	r3, r2
   34e12:	ea4f 4211 	mov.w	r2, r1, lsr #16
   34e16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   34e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   34e1e:	b29b      	uxth	r3, r3
   34e20:	ea4f 4c22 	mov.w	ip, r2, asr #16
   34e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   34e28:	f840 3b04 	str.w	r3, [r0], #4
   34e2c:	d2e6      	bcs.n	34dfc <quorem+0xb0>
   34e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   34e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   34e36:	b92a      	cbnz	r2, 34e44 <quorem+0xf8>
   34e38:	3b04      	subs	r3, #4
   34e3a:	429d      	cmp	r5, r3
   34e3c:	461a      	mov	r2, r3
   34e3e:	d30b      	bcc.n	34e58 <quorem+0x10c>
   34e40:	f8c8 4010 	str.w	r4, [r8, #16]
   34e44:	4630      	mov	r0, r6
   34e46:	b003      	add	sp, #12
   34e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e4c:	6812      	ldr	r2, [r2, #0]
   34e4e:	3b04      	subs	r3, #4
   34e50:	2a00      	cmp	r2, #0
   34e52:	d1c8      	bne.n	34de6 <quorem+0x9a>
   34e54:	3c01      	subs	r4, #1
   34e56:	e7c3      	b.n	34de0 <quorem+0x94>
   34e58:	6812      	ldr	r2, [r2, #0]
   34e5a:	3b04      	subs	r3, #4
   34e5c:	2a00      	cmp	r2, #0
   34e5e:	d1ef      	bne.n	34e40 <quorem+0xf4>
   34e60:	3c01      	subs	r4, #1
   34e62:	e7ea      	b.n	34e3a <quorem+0xee>
   34e64:	2000      	movs	r0, #0
   34e66:	e7ee      	b.n	34e46 <quorem+0xfa>

00034e68 <__retarget_lock_acquire_recursive>:
   34e68:	4770      	bx	lr

00034e6a <__retarget_lock_release_recursive>:
   34e6a:	4770      	bx	lr

00034e6c <_Balloc>:
   34e6c:	b570      	push	{r4, r5, r6, lr}
   34e6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   34e70:	4604      	mov	r4, r0
   34e72:	460e      	mov	r6, r1
   34e74:	b93d      	cbnz	r5, 34e86 <_Balloc+0x1a>
   34e76:	2010      	movs	r0, #16
   34e78:	f7f8 fdf6 	bl	2da68 <malloc>
   34e7c:	6260      	str	r0, [r4, #36]	; 0x24
   34e7e:	6005      	str	r5, [r0, #0]
   34e80:	60c5      	str	r5, [r0, #12]
   34e82:	e9c0 5501 	strd	r5, r5, [r0, #4]
   34e86:	6a65      	ldr	r5, [r4, #36]	; 0x24
   34e88:	68eb      	ldr	r3, [r5, #12]
   34e8a:	b183      	cbz	r3, 34eae <_Balloc+0x42>
   34e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34e8e:	68db      	ldr	r3, [r3, #12]
   34e90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   34e94:	b9b8      	cbnz	r0, 34ec6 <_Balloc+0x5a>
   34e96:	2101      	movs	r1, #1
   34e98:	4620      	mov	r0, r4
   34e9a:	fa01 f506 	lsl.w	r5, r1, r6
   34e9e:	1d6a      	adds	r2, r5, #5
   34ea0:	0092      	lsls	r2, r2, #2
   34ea2:	f7ff fdff 	bl	34aa4 <_calloc_r>
   34ea6:	b160      	cbz	r0, 34ec2 <_Balloc+0x56>
   34ea8:	e9c0 6501 	strd	r6, r5, [r0, #4]
   34eac:	e00e      	b.n	34ecc <_Balloc+0x60>
   34eae:	2221      	movs	r2, #33	; 0x21
   34eb0:	2104      	movs	r1, #4
   34eb2:	4620      	mov	r0, r4
   34eb4:	f7ff fdf6 	bl	34aa4 <_calloc_r>
   34eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34eba:	60e8      	str	r0, [r5, #12]
   34ebc:	68db      	ldr	r3, [r3, #12]
   34ebe:	2b00      	cmp	r3, #0
   34ec0:	d1e4      	bne.n	34e8c <_Balloc+0x20>
   34ec2:	2000      	movs	r0, #0
   34ec4:	bd70      	pop	{r4, r5, r6, pc}
   34ec6:	6802      	ldr	r2, [r0, #0]
   34ec8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   34ecc:	2300      	movs	r3, #0
   34ece:	e9c0 3303 	strd	r3, r3, [r0, #12]
   34ed2:	e7f7      	b.n	34ec4 <_Balloc+0x58>

00034ed4 <_Bfree>:
   34ed4:	b570      	push	{r4, r5, r6, lr}
   34ed6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   34ed8:	4606      	mov	r6, r0
   34eda:	460d      	mov	r5, r1
   34edc:	b93c      	cbnz	r4, 34eee <_Bfree+0x1a>
   34ede:	2010      	movs	r0, #16
   34ee0:	f7f8 fdc2 	bl	2da68 <malloc>
   34ee4:	6270      	str	r0, [r6, #36]	; 0x24
   34ee6:	6004      	str	r4, [r0, #0]
   34ee8:	60c4      	str	r4, [r0, #12]
   34eea:	e9c0 4401 	strd	r4, r4, [r0, #4]
   34eee:	b13d      	cbz	r5, 34f00 <_Bfree+0x2c>
   34ef0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   34ef2:	686a      	ldr	r2, [r5, #4]
   34ef4:	68db      	ldr	r3, [r3, #12]
   34ef6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   34efa:	6029      	str	r1, [r5, #0]
   34efc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   34f00:	bd70      	pop	{r4, r5, r6, pc}

00034f02 <__multadd>:
   34f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34f06:	f101 0c14 	add.w	ip, r1, #20
   34f0a:	461f      	mov	r7, r3
   34f0c:	4606      	mov	r6, r0
   34f0e:	460c      	mov	r4, r1
   34f10:	690d      	ldr	r5, [r1, #16]
   34f12:	2300      	movs	r3, #0
   34f14:	f8dc 0000 	ldr.w	r0, [ip]
   34f18:	3301      	adds	r3, #1
   34f1a:	b281      	uxth	r1, r0
   34f1c:	429d      	cmp	r5, r3
   34f1e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   34f22:	fb02 7101 	mla	r1, r2, r1, r7
   34f26:	ea4f 4711 	mov.w	r7, r1, lsr #16
   34f2a:	b289      	uxth	r1, r1
   34f2c:	fb02 7000 	mla	r0, r2, r0, r7
   34f30:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   34f34:	ea4f 4710 	mov.w	r7, r0, lsr #16
   34f38:	f84c 1b04 	str.w	r1, [ip], #4
   34f3c:	dcea      	bgt.n	34f14 <__multadd+0x12>
   34f3e:	b1d7      	cbz	r7, 34f76 <__multadd+0x74>
   34f40:	68a3      	ldr	r3, [r4, #8]
   34f42:	42ab      	cmp	r3, r5
   34f44:	dc12      	bgt.n	34f6c <__multadd+0x6a>
   34f46:	6861      	ldr	r1, [r4, #4]
   34f48:	4630      	mov	r0, r6
   34f4a:	3101      	adds	r1, #1
   34f4c:	f7ff ff8e 	bl	34e6c <_Balloc>
   34f50:	6922      	ldr	r2, [r4, #16]
   34f52:	4680      	mov	r8, r0
   34f54:	f104 010c 	add.w	r1, r4, #12
   34f58:	3202      	adds	r2, #2
   34f5a:	300c      	adds	r0, #12
   34f5c:	0092      	lsls	r2, r2, #2
   34f5e:	f7ff fd5f 	bl	34a20 <memcpy>
   34f62:	4621      	mov	r1, r4
   34f64:	4644      	mov	r4, r8
   34f66:	4630      	mov	r0, r6
   34f68:	f7ff ffb4 	bl	34ed4 <_Bfree>
   34f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   34f70:	3501      	adds	r5, #1
   34f72:	615f      	str	r7, [r3, #20]
   34f74:	6125      	str	r5, [r4, #16]
   34f76:	4620      	mov	r0, r4
   34f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034f7c <__hi0bits>:
   34f7c:	0c02      	lsrs	r2, r0, #16
   34f7e:	4603      	mov	r3, r0
   34f80:	0412      	lsls	r2, r2, #16
   34f82:	b9ca      	cbnz	r2, 34fb8 <__hi0bits+0x3c>
   34f84:	0403      	lsls	r3, r0, #16
   34f86:	2010      	movs	r0, #16
   34f88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   34f8c:	bf04      	itt	eq
   34f8e:	021b      	lsleq	r3, r3, #8
   34f90:	3008      	addeq	r0, #8
   34f92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   34f96:	bf04      	itt	eq
   34f98:	011b      	lsleq	r3, r3, #4
   34f9a:	3004      	addeq	r0, #4
   34f9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   34fa0:	bf04      	itt	eq
   34fa2:	009b      	lsleq	r3, r3, #2
   34fa4:	3002      	addeq	r0, #2
   34fa6:	2b00      	cmp	r3, #0
   34fa8:	db05      	blt.n	34fb6 <__hi0bits+0x3a>
   34faa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   34fae:	f100 0001 	add.w	r0, r0, #1
   34fb2:	bf08      	it	eq
   34fb4:	2020      	moveq	r0, #32
   34fb6:	4770      	bx	lr
   34fb8:	2000      	movs	r0, #0
   34fba:	e7e5      	b.n	34f88 <__hi0bits+0xc>

00034fbc <__lo0bits>:
   34fbc:	6803      	ldr	r3, [r0, #0]
   34fbe:	4601      	mov	r1, r0
   34fc0:	f013 0207 	ands.w	r2, r3, #7
   34fc4:	d00b      	beq.n	34fde <__lo0bits+0x22>
   34fc6:	07da      	lsls	r2, r3, #31
   34fc8:	d424      	bmi.n	35014 <__lo0bits+0x58>
   34fca:	0798      	lsls	r0, r3, #30
   34fcc:	bf47      	ittee	mi
   34fce:	085b      	lsrmi	r3, r3, #1
   34fd0:	2001      	movmi	r0, #1
   34fd2:	089b      	lsrpl	r3, r3, #2
   34fd4:	2002      	movpl	r0, #2
   34fd6:	bf4c      	ite	mi
   34fd8:	600b      	strmi	r3, [r1, #0]
   34fda:	600b      	strpl	r3, [r1, #0]
   34fdc:	4770      	bx	lr
   34fde:	b298      	uxth	r0, r3
   34fe0:	b9b0      	cbnz	r0, 35010 <__lo0bits+0x54>
   34fe2:	0c1b      	lsrs	r3, r3, #16
   34fe4:	2010      	movs	r0, #16
   34fe6:	f013 0fff 	tst.w	r3, #255	; 0xff
   34fea:	bf04      	itt	eq
   34fec:	0a1b      	lsreq	r3, r3, #8
   34fee:	3008      	addeq	r0, #8
   34ff0:	071a      	lsls	r2, r3, #28
   34ff2:	bf04      	itt	eq
   34ff4:	091b      	lsreq	r3, r3, #4
   34ff6:	3004      	addeq	r0, #4
   34ff8:	079a      	lsls	r2, r3, #30
   34ffa:	bf04      	itt	eq
   34ffc:	089b      	lsreq	r3, r3, #2
   34ffe:	3002      	addeq	r0, #2
   35000:	07da      	lsls	r2, r3, #31
   35002:	d403      	bmi.n	3500c <__lo0bits+0x50>
   35004:	085b      	lsrs	r3, r3, #1
   35006:	f100 0001 	add.w	r0, r0, #1
   3500a:	d005      	beq.n	35018 <__lo0bits+0x5c>
   3500c:	600b      	str	r3, [r1, #0]
   3500e:	4770      	bx	lr
   35010:	4610      	mov	r0, r2
   35012:	e7e8      	b.n	34fe6 <__lo0bits+0x2a>
   35014:	2000      	movs	r0, #0
   35016:	4770      	bx	lr
   35018:	2020      	movs	r0, #32
   3501a:	4770      	bx	lr

0003501c <__i2b>:
   3501c:	b510      	push	{r4, lr}
   3501e:	460c      	mov	r4, r1
   35020:	2101      	movs	r1, #1
   35022:	f7ff ff23 	bl	34e6c <_Balloc>
   35026:	2201      	movs	r2, #1
   35028:	6144      	str	r4, [r0, #20]
   3502a:	6102      	str	r2, [r0, #16]
   3502c:	bd10      	pop	{r4, pc}

0003502e <__multiply>:
   3502e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35032:	4690      	mov	r8, r2
   35034:	690a      	ldr	r2, [r1, #16]
   35036:	460c      	mov	r4, r1
   35038:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3503c:	429a      	cmp	r2, r3
   3503e:	bfbe      	ittt	lt
   35040:	460b      	movlt	r3, r1
   35042:	4644      	movlt	r4, r8
   35044:	4698      	movlt	r8, r3
   35046:	6927      	ldr	r7, [r4, #16]
   35048:	68a3      	ldr	r3, [r4, #8]
   3504a:	f8d8 9010 	ldr.w	r9, [r8, #16]
   3504e:	6861      	ldr	r1, [r4, #4]
   35050:	eb07 0609 	add.w	r6, r7, r9
   35054:	42b3      	cmp	r3, r6
   35056:	bfb8      	it	lt
   35058:	3101      	addlt	r1, #1
   3505a:	f7ff ff07 	bl	34e6c <_Balloc>
   3505e:	f100 0514 	add.w	r5, r0, #20
   35062:	2200      	movs	r2, #0
   35064:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   35068:	462b      	mov	r3, r5
   3506a:	4573      	cmp	r3, lr
   3506c:	d316      	bcc.n	3509c <__multiply+0x6e>
   3506e:	f104 0314 	add.w	r3, r4, #20
   35072:	f108 0214 	add.w	r2, r8, #20
   35076:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3507a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3507e:	9300      	str	r3, [sp, #0]
   35080:	9b00      	ldr	r3, [sp, #0]
   35082:	9201      	str	r2, [sp, #4]
   35084:	4293      	cmp	r3, r2
   35086:	d80c      	bhi.n	350a2 <__multiply+0x74>
   35088:	2e00      	cmp	r6, #0
   3508a:	dd03      	ble.n	35094 <__multiply+0x66>
   3508c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   35090:	2b00      	cmp	r3, #0
   35092:	d059      	beq.n	35148 <__multiply+0x11a>
   35094:	6106      	str	r6, [r0, #16]
   35096:	b003      	add	sp, #12
   35098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3509c:	f843 2b04 	str.w	r2, [r3], #4
   350a0:	e7e3      	b.n	3506a <__multiply+0x3c>
   350a2:	f8b2 a000 	ldrh.w	sl, [r2]
   350a6:	f1ba 0f00 	cmp.w	sl, #0
   350aa:	d023      	beq.n	350f4 <__multiply+0xc6>
   350ac:	f104 0914 	add.w	r9, r4, #20
   350b0:	46ac      	mov	ip, r5
   350b2:	f04f 0800 	mov.w	r8, #0
   350b6:	f859 1b04 	ldr.w	r1, [r9], #4
   350ba:	f8dc b000 	ldr.w	fp, [ip]
   350be:	b28b      	uxth	r3, r1
   350c0:	454f      	cmp	r7, r9
   350c2:	fa1f fb8b 	uxth.w	fp, fp
   350c6:	fb0a b303 	mla	r3, sl, r3, fp
   350ca:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   350ce:	f8dc 1000 	ldr.w	r1, [ip]
   350d2:	4443      	add	r3, r8
   350d4:	ea4f 4811 	mov.w	r8, r1, lsr #16
   350d8:	fb0a 810b 	mla	r1, sl, fp, r8
   350dc:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   350e0:	b29b      	uxth	r3, r3
   350e2:	ea4f 4811 	mov.w	r8, r1, lsr #16
   350e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   350ea:	f84c 3b04 	str.w	r3, [ip], #4
   350ee:	d8e2      	bhi.n	350b6 <__multiply+0x88>
   350f0:	f8cc 8000 	str.w	r8, [ip]
   350f4:	9b01      	ldr	r3, [sp, #4]
   350f6:	3204      	adds	r2, #4
   350f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   350fc:	f1b9 0f00 	cmp.w	r9, #0
   35100:	d020      	beq.n	35144 <__multiply+0x116>
   35102:	682b      	ldr	r3, [r5, #0]
   35104:	f104 0814 	add.w	r8, r4, #20
   35108:	46ac      	mov	ip, r5
   3510a:	f04f 0a00 	mov.w	sl, #0
   3510e:	f8b8 1000 	ldrh.w	r1, [r8]
   35112:	b29b      	uxth	r3, r3
   35114:	f8bc b002 	ldrh.w	fp, [ip, #2]
   35118:	fb09 b101 	mla	r1, r9, r1, fp
   3511c:	448a      	add	sl, r1
   3511e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   35122:	f84c 3b04 	str.w	r3, [ip], #4
   35126:	f858 3b04 	ldr.w	r3, [r8], #4
   3512a:	f8bc 1000 	ldrh.w	r1, [ip]
   3512e:	0c1b      	lsrs	r3, r3, #16
   35130:	4547      	cmp	r7, r8
   35132:	fb09 1303 	mla	r3, r9, r3, r1
   35136:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3513a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3513e:	d8e6      	bhi.n	3510e <__multiply+0xe0>
   35140:	f8cc 3000 	str.w	r3, [ip]
   35144:	3504      	adds	r5, #4
   35146:	e79b      	b.n	35080 <__multiply+0x52>
   35148:	3e01      	subs	r6, #1
   3514a:	e79d      	b.n	35088 <__multiply+0x5a>

0003514c <__lshift>:
   3514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35150:	460c      	mov	r4, r1
   35152:	ea4f 1a62 	mov.w	sl, r2, asr #5
   35156:	4607      	mov	r7, r0
   35158:	4616      	mov	r6, r2
   3515a:	6923      	ldr	r3, [r4, #16]
   3515c:	6849      	ldr	r1, [r1, #4]
   3515e:	eb0a 0903 	add.w	r9, sl, r3
   35162:	68a3      	ldr	r3, [r4, #8]
   35164:	f109 0501 	add.w	r5, r9, #1
   35168:	42ab      	cmp	r3, r5
   3516a:	db33      	blt.n	351d4 <__lshift+0x88>
   3516c:	4638      	mov	r0, r7
   3516e:	f7ff fe7d 	bl	34e6c <_Balloc>
   35172:	2300      	movs	r3, #0
   35174:	4680      	mov	r8, r0
   35176:	f100 0114 	add.w	r1, r0, #20
   3517a:	f100 0210 	add.w	r2, r0, #16
   3517e:	4618      	mov	r0, r3
   35180:	4553      	cmp	r3, sl
   35182:	db2a      	blt.n	351da <__lshift+0x8e>
   35184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   35188:	f104 0314 	add.w	r3, r4, #20
   3518c:	6920      	ldr	r0, [r4, #16]
   3518e:	f016 021f 	ands.w	r2, r6, #31
   35192:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   35196:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3519a:	d022      	beq.n	351e2 <__lshift+0x96>
   3519c:	f1c2 0e20 	rsb	lr, r2, #32
   351a0:	2000      	movs	r0, #0
   351a2:	681e      	ldr	r6, [r3, #0]
   351a4:	4096      	lsls	r6, r2
   351a6:	4330      	orrs	r0, r6
   351a8:	f841 0b04 	str.w	r0, [r1], #4
   351ac:	f853 0b04 	ldr.w	r0, [r3], #4
   351b0:	459c      	cmp	ip, r3
   351b2:	fa20 f00e 	lsr.w	r0, r0, lr
   351b6:	d8f4      	bhi.n	351a2 <__lshift+0x56>
   351b8:	6008      	str	r0, [r1, #0]
   351ba:	b108      	cbz	r0, 351c0 <__lshift+0x74>
   351bc:	f109 0502 	add.w	r5, r9, #2
   351c0:	3d01      	subs	r5, #1
   351c2:	4638      	mov	r0, r7
   351c4:	4621      	mov	r1, r4
   351c6:	f8c8 5010 	str.w	r5, [r8, #16]
   351ca:	f7ff fe83 	bl	34ed4 <_Bfree>
   351ce:	4640      	mov	r0, r8
   351d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   351d4:	3101      	adds	r1, #1
   351d6:	005b      	lsls	r3, r3, #1
   351d8:	e7c6      	b.n	35168 <__lshift+0x1c>
   351da:	f842 0f04 	str.w	r0, [r2, #4]!
   351de:	3301      	adds	r3, #1
   351e0:	e7ce      	b.n	35180 <__lshift+0x34>
   351e2:	3904      	subs	r1, #4
   351e4:	f853 2b04 	ldr.w	r2, [r3], #4
   351e8:	459c      	cmp	ip, r3
   351ea:	f841 2f04 	str.w	r2, [r1, #4]!
   351ee:	d8f9      	bhi.n	351e4 <__lshift+0x98>
   351f0:	e7e6      	b.n	351c0 <__lshift+0x74>

000351f2 <__mcmp>:
   351f2:	6903      	ldr	r3, [r0, #16]
   351f4:	690a      	ldr	r2, [r1, #16]
   351f6:	1a9b      	subs	r3, r3, r2
   351f8:	b530      	push	{r4, r5, lr}
   351fa:	d10c      	bne.n	35216 <__mcmp+0x24>
   351fc:	0092      	lsls	r2, r2, #2
   351fe:	3014      	adds	r0, #20
   35200:	3114      	adds	r1, #20
   35202:	1884      	adds	r4, r0, r2
   35204:	4411      	add	r1, r2
   35206:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3520a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   3520e:	4295      	cmp	r5, r2
   35210:	d003      	beq.n	3521a <__mcmp+0x28>
   35212:	d305      	bcc.n	35220 <__mcmp+0x2e>
   35214:	2301      	movs	r3, #1
   35216:	4618      	mov	r0, r3
   35218:	bd30      	pop	{r4, r5, pc}
   3521a:	42a0      	cmp	r0, r4
   3521c:	d3f3      	bcc.n	35206 <__mcmp+0x14>
   3521e:	e7fa      	b.n	35216 <__mcmp+0x24>
   35220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35224:	e7f7      	b.n	35216 <__mcmp+0x24>

00035226 <__mdiff>:
   35226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3522a:	460d      	mov	r5, r1
   3522c:	4607      	mov	r7, r0
   3522e:	4611      	mov	r1, r2
   35230:	4614      	mov	r4, r2
   35232:	4628      	mov	r0, r5
   35234:	f7ff ffdd 	bl	351f2 <__mcmp>
   35238:	1e06      	subs	r6, r0, #0
   3523a:	d108      	bne.n	3524e <__mdiff+0x28>
   3523c:	4631      	mov	r1, r6
   3523e:	4638      	mov	r0, r7
   35240:	f7ff fe14 	bl	34e6c <_Balloc>
   35244:	2301      	movs	r3, #1
   35246:	e9c0 3604 	strd	r3, r6, [r0, #16]
   3524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3524e:	bfa3      	ittte	ge
   35250:	4623      	movge	r3, r4
   35252:	462c      	movge	r4, r5
   35254:	2600      	movge	r6, #0
   35256:	2601      	movlt	r6, #1
   35258:	bfa8      	it	ge
   3525a:	461d      	movge	r5, r3
   3525c:	6861      	ldr	r1, [r4, #4]
   3525e:	4638      	mov	r0, r7
   35260:	f7ff fe04 	bl	34e6c <_Balloc>
   35264:	f105 0914 	add.w	r9, r5, #20
   35268:	60c6      	str	r6, [r0, #12]
   3526a:	f104 0214 	add.w	r2, r4, #20
   3526e:	6926      	ldr	r6, [r4, #16]
   35270:	f100 0114 	add.w	r1, r0, #20
   35274:	692b      	ldr	r3, [r5, #16]
   35276:	f04f 0e00 	mov.w	lr, #0
   3527a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   3527e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   35282:	f852 ab04 	ldr.w	sl, [r2], #4
   35286:	f859 5b04 	ldr.w	r5, [r9], #4
   3528a:	fa1f f38a 	uxth.w	r3, sl
   3528e:	4694      	mov	ip, r2
   35290:	b2ac      	uxth	r4, r5
   35292:	45c8      	cmp	r8, r9
   35294:	4473      	add	r3, lr
   35296:	eba3 0304 	sub.w	r3, r3, r4
   3529a:	ea4f 4415 	mov.w	r4, r5, lsr #16
   3529e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   352a2:	eb04 4423 	add.w	r4, r4, r3, asr #16
   352a6:	b29b      	uxth	r3, r3
   352a8:	ea4f 4e24 	mov.w	lr, r4, asr #16
   352ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   352b0:	f841 4b04 	str.w	r4, [r1], #4
   352b4:	d8e5      	bhi.n	35282 <__mdiff+0x5c>
   352b6:	45bc      	cmp	ip, r7
   352b8:	d304      	bcc.n	352c4 <__mdiff+0x9e>
   352ba:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   352be:	b183      	cbz	r3, 352e2 <__mdiff+0xbc>
   352c0:	6106      	str	r6, [r0, #16]
   352c2:	e7c2      	b.n	3524a <__mdiff+0x24>
   352c4:	f85c 4b04 	ldr.w	r4, [ip], #4
   352c8:	b2a2      	uxth	r2, r4
   352ca:	4472      	add	r2, lr
   352cc:	1413      	asrs	r3, r2, #16
   352ce:	b292      	uxth	r2, r2
   352d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   352d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   352d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
   352dc:	f841 2b04 	str.w	r2, [r1], #4
   352e0:	e7e9      	b.n	352b6 <__mdiff+0x90>
   352e2:	3e01      	subs	r6, #1
   352e4:	e7e9      	b.n	352ba <__mdiff+0x94>

000352e6 <__d2b>:
   352e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   352ea:	ec59 8b10 	vmov	r8, r9, d0
   352ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
   352f2:	460e      	mov	r6, r1
   352f4:	2101      	movs	r1, #1
   352f6:	4615      	mov	r5, r2
   352f8:	f7ff fdb8 	bl	34e6c <_Balloc>
   352fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   35300:	4607      	mov	r7, r0
   35302:	bb2c      	cbnz	r4, 35350 <__d2b+0x6a>
   35304:	9301      	str	r3, [sp, #4]
   35306:	f1b8 0300 	subs.w	r3, r8, #0
   3530a:	d026      	beq.n	3535a <__d2b+0x74>
   3530c:	4668      	mov	r0, sp
   3530e:	9300      	str	r3, [sp, #0]
   35310:	f7ff fe54 	bl	34fbc <__lo0bits>
   35314:	9900      	ldr	r1, [sp, #0]
   35316:	b1f0      	cbz	r0, 35356 <__d2b+0x70>
   35318:	9a01      	ldr	r2, [sp, #4]
   3531a:	f1c0 0320 	rsb	r3, r0, #32
   3531e:	fa02 f303 	lsl.w	r3, r2, r3
   35322:	40c2      	lsrs	r2, r0
   35324:	430b      	orrs	r3, r1
   35326:	9201      	str	r2, [sp, #4]
   35328:	617b      	str	r3, [r7, #20]
   3532a:	9b01      	ldr	r3, [sp, #4]
   3532c:	2b00      	cmp	r3, #0
   3532e:	61bb      	str	r3, [r7, #24]
   35330:	bf14      	ite	ne
   35332:	2102      	movne	r1, #2
   35334:	2101      	moveq	r1, #1
   35336:	6139      	str	r1, [r7, #16]
   35338:	b1c4      	cbz	r4, 3536c <__d2b+0x86>
   3533a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   3533e:	4404      	add	r4, r0
   35340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   35344:	6034      	str	r4, [r6, #0]
   35346:	6028      	str	r0, [r5, #0]
   35348:	4638      	mov	r0, r7
   3534a:	b003      	add	sp, #12
   3534c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   35354:	e7d6      	b.n	35304 <__d2b+0x1e>
   35356:	6179      	str	r1, [r7, #20]
   35358:	e7e7      	b.n	3532a <__d2b+0x44>
   3535a:	a801      	add	r0, sp, #4
   3535c:	f7ff fe2e 	bl	34fbc <__lo0bits>
   35360:	9b01      	ldr	r3, [sp, #4]
   35362:	2101      	movs	r1, #1
   35364:	3020      	adds	r0, #32
   35366:	617b      	str	r3, [r7, #20]
   35368:	6139      	str	r1, [r7, #16]
   3536a:	e7e5      	b.n	35338 <__d2b+0x52>
   3536c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   35370:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   35374:	6030      	str	r0, [r6, #0]
   35376:	6918      	ldr	r0, [r3, #16]
   35378:	f7ff fe00 	bl	34f7c <__hi0bits>
   3537c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   35380:	e7e1      	b.n	35346 <__d2b+0x60>

00035382 <_realloc_r>:
   35382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35384:	4607      	mov	r7, r0
   35386:	4614      	mov	r4, r2
   35388:	460e      	mov	r6, r1
   3538a:	b921      	cbnz	r1, 35396 <_realloc_r+0x14>
   3538c:	4611      	mov	r1, r2
   3538e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   35392:	f7f8 bbc7 	b.w	2db24 <_malloc_r>
   35396:	b922      	cbnz	r2, 353a2 <_realloc_r+0x20>
   35398:	4625      	mov	r5, r4
   3539a:	f7f8 fb75 	bl	2da88 <_free_r>
   3539e:	4628      	mov	r0, r5
   353a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   353a2:	f000 f8ab 	bl	354fc <_malloc_usable_size_r>
   353a6:	42a0      	cmp	r0, r4
   353a8:	d20f      	bcs.n	353ca <_realloc_r+0x48>
   353aa:	4621      	mov	r1, r4
   353ac:	4638      	mov	r0, r7
   353ae:	f7f8 fbb9 	bl	2db24 <_malloc_r>
   353b2:	4605      	mov	r5, r0
   353b4:	2800      	cmp	r0, #0
   353b6:	d0f2      	beq.n	3539e <_realloc_r+0x1c>
   353b8:	4631      	mov	r1, r6
   353ba:	4622      	mov	r2, r4
   353bc:	f7ff fb30 	bl	34a20 <memcpy>
   353c0:	4631      	mov	r1, r6
   353c2:	4638      	mov	r0, r7
   353c4:	f7f8 fb60 	bl	2da88 <_free_r>
   353c8:	e7e9      	b.n	3539e <_realloc_r+0x1c>
   353ca:	4635      	mov	r5, r6
   353cc:	e7e7      	b.n	3539e <_realloc_r+0x1c>

000353ce <__ssputs_r>:
   353ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   353d2:	688e      	ldr	r6, [r1, #8]
   353d4:	4682      	mov	sl, r0
   353d6:	460c      	mov	r4, r1
   353d8:	4691      	mov	r9, r2
   353da:	429e      	cmp	r6, r3
   353dc:	4698      	mov	r8, r3
   353de:	d838      	bhi.n	35452 <__ssputs_r+0x84>
   353e0:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   353e4:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   353e8:	d031      	beq.n	3544e <__ssputs_r+0x80>
   353ea:	6962      	ldr	r2, [r4, #20]
   353ec:	3301      	adds	r3, #1
   353ee:	6825      	ldr	r5, [r4, #0]
   353f0:	6909      	ldr	r1, [r1, #16]
   353f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   353f6:	1a6f      	subs	r7, r5, r1
   353f8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   353fc:	443b      	add	r3, r7
   353fe:	1055      	asrs	r5, r2, #1
   35400:	429d      	cmp	r5, r3
   35402:	bf38      	it	cc
   35404:	461d      	movcc	r5, r3
   35406:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   3540a:	d030      	beq.n	3546e <__ssputs_r+0xa0>
   3540c:	4629      	mov	r1, r5
   3540e:	f7f8 fb89 	bl	2db24 <_malloc_r>
   35412:	4606      	mov	r6, r0
   35414:	b950      	cbnz	r0, 3542c <__ssputs_r+0x5e>
   35416:	230c      	movs	r3, #12
   35418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3541c:	f8ca 3000 	str.w	r3, [sl]
   35420:	89a3      	ldrh	r3, [r4, #12]
   35422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   35426:	81a3      	strh	r3, [r4, #12]
   35428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3542c:	463a      	mov	r2, r7
   3542e:	6921      	ldr	r1, [r4, #16]
   35430:	f7ff faf6 	bl	34a20 <memcpy>
   35434:	89a3      	ldrh	r3, [r4, #12]
   35436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3543e:	81a3      	strh	r3, [r4, #12]
   35440:	6126      	str	r6, [r4, #16]
   35442:	443e      	add	r6, r7
   35444:	6165      	str	r5, [r4, #20]
   35446:	1bed      	subs	r5, r5, r7
   35448:	6026      	str	r6, [r4, #0]
   3544a:	4646      	mov	r6, r8
   3544c:	60a5      	str	r5, [r4, #8]
   3544e:	4546      	cmp	r6, r8
   35450:	d900      	bls.n	35454 <__ssputs_r+0x86>
   35452:	4646      	mov	r6, r8
   35454:	4632      	mov	r2, r6
   35456:	4649      	mov	r1, r9
   35458:	6820      	ldr	r0, [r4, #0]
   3545a:	f7ff fb01 	bl	34a60 <memmove>
   3545e:	68a3      	ldr	r3, [r4, #8]
   35460:	2000      	movs	r0, #0
   35462:	1b9b      	subs	r3, r3, r6
   35464:	60a3      	str	r3, [r4, #8]
   35466:	6823      	ldr	r3, [r4, #0]
   35468:	441e      	add	r6, r3
   3546a:	6026      	str	r6, [r4, #0]
   3546c:	e7dc      	b.n	35428 <__ssputs_r+0x5a>
   3546e:	462a      	mov	r2, r5
   35470:	f7ff ff87 	bl	35382 <_realloc_r>
   35474:	4606      	mov	r6, r0
   35476:	2800      	cmp	r0, #0
   35478:	d1e2      	bne.n	35440 <__ssputs_r+0x72>
   3547a:	6921      	ldr	r1, [r4, #16]
   3547c:	4650      	mov	r0, sl
   3547e:	f7f8 fb03 	bl	2da88 <_free_r>
   35482:	e7c8      	b.n	35416 <__ssputs_r+0x48>

00035484 <_raise_r>:
   35484:	291f      	cmp	r1, #31
   35486:	b538      	push	{r3, r4, r5, lr}
   35488:	4604      	mov	r4, r0
   3548a:	460d      	mov	r5, r1
   3548c:	d904      	bls.n	35498 <_raise_r+0x14>
   3548e:	2316      	movs	r3, #22
   35490:	6003      	str	r3, [r0, #0]
   35492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35496:	bd38      	pop	{r3, r4, r5, pc}
   35498:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3549a:	b112      	cbz	r2, 354a2 <_raise_r+0x1e>
   3549c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   354a0:	b94b      	cbnz	r3, 354b6 <_raise_r+0x32>
   354a2:	4620      	mov	r0, r4
   354a4:	f000 f816 	bl	354d4 <_getpid_r>
   354a8:	462a      	mov	r2, r5
   354aa:	4601      	mov	r1, r0
   354ac:	4620      	mov	r0, r4
   354ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   354b2:	f7f9 b9b5 	b.w	2e820 <_kill_r>
   354b6:	2b01      	cmp	r3, #1
   354b8:	d00a      	beq.n	354d0 <_raise_r+0x4c>
   354ba:	1c59      	adds	r1, r3, #1
   354bc:	d103      	bne.n	354c6 <_raise_r+0x42>
   354be:	2316      	movs	r3, #22
   354c0:	6003      	str	r3, [r0, #0]
   354c2:	2001      	movs	r0, #1
   354c4:	e7e7      	b.n	35496 <_raise_r+0x12>
   354c6:	2400      	movs	r4, #0
   354c8:	4628      	mov	r0, r5
   354ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   354ce:	4798      	blx	r3
   354d0:	2000      	movs	r0, #0
   354d2:	e7e0      	b.n	35496 <_raise_r+0x12>

000354d4 <_getpid_r>:
   354d4:	f7fb bdec 	b.w	310b0 <_getpid>

000354d8 <__ascii_mbtowc>:
   354d8:	b082      	sub	sp, #8
   354da:	b901      	cbnz	r1, 354de <__ascii_mbtowc+0x6>
   354dc:	a901      	add	r1, sp, #4
   354de:	b142      	cbz	r2, 354f2 <__ascii_mbtowc+0x1a>
   354e0:	b14b      	cbz	r3, 354f6 <__ascii_mbtowc+0x1e>
   354e2:	7813      	ldrb	r3, [r2, #0]
   354e4:	600b      	str	r3, [r1, #0]
   354e6:	7812      	ldrb	r2, [r2, #0]
   354e8:	1c10      	adds	r0, r2, #0
   354ea:	bf18      	it	ne
   354ec:	2001      	movne	r0, #1
   354ee:	b002      	add	sp, #8
   354f0:	4770      	bx	lr
   354f2:	4610      	mov	r0, r2
   354f4:	e7fb      	b.n	354ee <__ascii_mbtowc+0x16>
   354f6:	f06f 0001 	mvn.w	r0, #1
   354fa:	e7f8      	b.n	354ee <__ascii_mbtowc+0x16>

000354fc <_malloc_usable_size_r>:
   354fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   35500:	1f18      	subs	r0, r3, #4
   35502:	2b00      	cmp	r3, #0
   35504:	bfbc      	itt	lt
   35506:	580b      	ldrlt	r3, [r1, r0]
   35508:	18c0      	addlt	r0, r0, r3
   3550a:	4770      	bx	lr

0003550c <__ascii_wctomb>:
   3550c:	b149      	cbz	r1, 35522 <__ascii_wctomb+0x16>
   3550e:	2aff      	cmp	r2, #255	; 0xff
   35510:	bf8d      	iteet	hi
   35512:	238a      	movhi	r3, #138	; 0x8a
   35514:	700a      	strbls	r2, [r1, #0]
   35516:	2001      	movls	r0, #1
   35518:	6003      	strhi	r3, [r0, #0]
   3551a:	bf88      	it	hi
   3551c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   35520:	4770      	bx	lr
   35522:	4608      	mov	r0, r1
   35524:	4770      	bx	lr
